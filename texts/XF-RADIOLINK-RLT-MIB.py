#
# PySNMP MIB module XF-RADIOLINK-RLT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/ericsson/XF-RADIOLINK-RLT-MIB
# Produced by pysmi-1.1.12 at Tue May 28 12:48:18 2024
# On host fv-az847-244 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
entPhysicalIndex, entLogicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex", "entLogicalIndex")
HCPerfCurrentCount, = mibBuilder.importSymbols("HC-PerfHist-TC-MIB", "HCPerfCurrentCount")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressIPv6, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv6")
PerfCurrentCount, PerfIntervalCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfCurrentCount", "PerfIntervalCount")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Unsigned32, NotificationType, Counter64, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, iso, Counter32, TimeTicks, ModuleIdentity, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "Counter64", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "iso", "Counter32", "TimeTicks", "ModuleIdentity", "IpAddress", "Integer32")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
xfRadioLink, = mibBuilder.importSymbols("XF-TOP-MIB", "xfRadioLink")
xfRadioLinkRltMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5))
xfRadioLinkRltMIB.setRevisions(('2020-11-05 00:00', '2020-09-17 00:00', '2020-06-10 00:00', '2020-06-03 00:00', '2020-05-28 00:00', '2020-04-30 00:00', '2020-03-04 00:00', '2019-10-14 00:00', '2019-10-09 00:00', '2019-07-18 00:00', '2019-06-07 00:00', '2019-03-26 00:00', '2019-03-25 00:00', '2019-02-28 00:00', '2019-02-20 00:00', '2019-01-30 00:00', '2019-01-11 00:00', '2018-11-24 00:00', '2018-10-24 00:00', '2018-10-03 00:00', '2018-09-17 00:00', '2018-08-27 00:00', '2018-08-16 00:00', '2018-07-09 00:00', '2018-04-13 00:00', '2018-04-09 00:00', '2018-03-23 00:00', '2018-03-13 00:00', '2018-01-30 00:00', '2017-12-27 00:00', '2017-09-19 00:00', '2017-08-03 00:00', '2017-05-03 00:00', '2017-02-01 00:00', '2017-01-30 00:00', '2016-11-04 00:00', '2016-09-29 00:00', '2016-09-08 00:00', '2016-07-18 00:00', '2016-06-10 00:00', '2016-06-06 00:00', '2016-06-01 00:00', '2016-05-02 00:00', '2016-04-29 00:00', '2016-04-12 00:00', '2016-03-01 00:00', '2016-02-22 00:00', '2016-02-05 00:00', '2015-11-25 00:00', '2015-11-16 00:00', '2015-11-10 00:00', '2015-11-05 00:00', '2015-09-16 00:00', '2015-08-27 00:00', '2015-08-20 00:00', '2015-07-07 00:00', '2015-06-30 00:00', '2015-06-04 00:00', '2015-06-03 00:00', '2015-05-11 00:00', '2015-05-08 00:00', '2015-05-06 00:00', '2015-04-20 00:00', '2015-04-13 00:00', '2015-03-30 00:00', '2015-03-19 00:00', '2015-03-11 00:00', '2015-03-09 00:00', '2015-03-06 00:00', '2015-03-05 00:00', '2015-02-25 00:00', '2015-02-18 00:00', '2015-02-10 00:00', '2015-01-29 00:00', '2014-12-12 00:00', '2014-12-10 00:00', '2014-12-02 00:00', '2014-12-01 00:00', '2014-11-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: xfRadioLinkRltMIB.setRevisionsDescriptions(('\n            Rev PC17\n            xfFrameFormatType MO: added definition of FF type for:\n            - 2-boards MIMO\n            - SISO CA\n            - XPIC CA\n            ', '\n            Rev PC16\n            Added object xfRLTMeasuredHopLength in xfRLTTable:\n            ', '\n            Rev PC15\n            TR#3054036: MIB Range validation failed:\n            - xfRLTNumOfRLPSwitch\n            ', '\n            Rev PC14\n            TR#3052599: extended range for following objects (adding 0 as valid value):\n            - xfCarrierTermActualCapacity\n            - xfActualTDMCapacity\n            - xfCarrierTermActualLicensedCapacity\n            ', '\n            Rev PC13\n            xfACMCapacity range extended to add 0 as valid value (TR#3045800)\n            ', "\n            Rev PC12\n            xfRLTTDMIfTable: added 'xfTDMHopLength' object for TDM traffic delay compensation\n            ", "\n            Rev PC11\n            xfRLTCapability: added 'capTXswoAndSSD' capability bit for TX switchover and SSD\n            ", '\n            Rev PC10\n            In xfCarrierTerminationCapability table, xfACMprofile object is extended in order to\n            support 8192QAM and 16384QAM modulations.\n            For the same reason, following tables are updated:\n            - xfRLPMACMCurrent24hTable\n            - xfRLPMACMInterval24hTable\n            - xfRLPMACMCurrent15mTable\n            - xfRLPMACMInterval15mTable\n            ', '\n            Rev PC9\n            new MIb added:\n            xfRLPMMimoCurrentTable\n            xfRLPMMimoCurrent24hTable\n            xfRLPMMimoInterval24hTable\n            xfRLPMMimoCurrent15mTable\n            xfRLPMMimoInterval15mTable\n            ', "\n            Rev PC8\n            xfRLTTxSwitchOverConfiguration: removed value 'remote'\n            ", "\n            Rev PC7\n            Added Selective Space Diversity support\n            xfRLTProtectionSwitchMode: added value 'txSwitchDisabled'\n            xfRLTTxSwitchOverConfiguration: added values 'local' and 'remote'\n            ", "\n            Rev PC6\n            xfRLTCapability: added description for 'capMIMO' capability bit\n            ", "\n            Rev PC5\n            xfRLTCapability: added 'capMIMO' capability bit for MIMO\n            ", '\n            Rev PC4\n            xfMIMOCTmember1-4 in xfMIMOGroupTable changed access to read-only.\n            xfRLTEncryptionOperStatus: changed values to UP and DOWN.\n            ', '\n            Rev PC3\n            xfFrameFormatType MO: added definition of FF type for Long Haul 2-boards XPIC.\n            ', '\n            Rev PC2\n            xfRLTCapability: added capRLEncryption capability bit for Radio Link Encryption.\n            ', '\n            Rev PC1\n            Added xfRLTEncryptionTable for Radio Link Encryption.\n            ', '\n            Rev PB32\n            xfRLTFeRltSeverity renamed to xfRLTRltSeverity.\n            ', '\n            Rev PB31\n            Changed naming of xfRLTEnhancedACMProtectionMode values in xfRLTProtectionTable:\n             - basic -> activeTransmitter\n             - maximumThroughput -> maximumCapacity\n\n            Changed name of capEnhAcmMaxThroughput into capEnhAcmMaxCapacity.\n            ', '\n            Rev PB30\n            Added xfRLTEnhancedACMProtectionOperStatus in xfRLTProtectionTable.\n            ', '\n            Rev PB29\n            - Added xfRLTEnhancedACMProtectionMode in xfRLTProtectionTable.\n            - Added cap bit in xfRLTCapability for Enhanced ACM Protection: Maximum Throughput.\n            - Added cap bit in xfRLTCapability for Enhanced ACM Protection: Maximum Protection.\n            ', '\n            Rev PB28\n            xfCarrierTermXPI: modified description.\n            ', '\n            Rev PB27\n            xfCarrierTermXPICOperStatus: Removed reference to SNIR in MO description.\n            ', '\n            Rev PB26\n            xfFrameFormatType MO: added definition of FF type for 2-boards XPIC.\n            ', '\n            Rev PB25\n            Type of MOs:\n               - xfRLTActualTxTotalCapacity\n               - xfRLTActualTxPacketCapacity\n               - xfRLTLimitedTotalCapacity\n               - xfCGIfMaxSpeed\n               - xfRLWANActualCapacity\n               - xfRLWANLimitedCapacity\n            changed to Gauge32.\n            ', '\n            Rev PB24\n            In table xfRLTTable:\n               - Added bit(12) capXpicMembersAutoSelection(12)\n               - Added bit(13) capManualEqpSwitch(13)\n            ', '\n            Rev PB23\n            Added to xfXPICPairTable second index:\n                * xfXpicPairIndex\n            ', '\n            Rev PB22\n            Added to xfCGIfAlarms the alarm:\n                * unableToProtectEqp\n            ', '\n            Rev PB21\n            In table xfRLTTable:\n               - xfRLTCapability bit(1) changed to capTDMWithEQP(1)\n               - Added bit(11) capXpicBetweenBoards(11)\n            ', '\n            Rev PB20\n            Added values to MO xfRLTMode in xfRLTTable:\n              - onePlusOneRadioLinkProtectionAndEquipmentProtection\n              - twoPlusZeroRadioLinkBondingAndEquipmentProtection\n              - twoPlusTwoRadioLinkProtectionAndEquipmentProtection\n              - fourPlusZeroRadioLinkBondingAndEquipmentProtection\n\n            Added capability bits to xfRLTCapability in xfRLTTable:\n              - capTDM\n              - capCsPlurality\n              - capCtAutoSelection\n              - capOnePlusZero\n              - capOnePlusOneRadioLinkProtection\n              - capTwoPlusZeroAdvancedRadioLinkBonding\n              - capOnePlusOneRadioLinkProtectionWithEQP\n              - capTwoPlusZeroRadioLinkBondingWithEQP\n              - capTwoPlusTwoRadioLinkProtectionWithEQP\n              - capFourPlusZeroRadioLinkBondingWithEQP\n            ', '\n            Rev PB19\n            - Type of MOs in table xfRLPMContinuousCounterTable changed to PerfCurrentCount/HCPerfCurrentCount.\n            - Removed MO xfRLTProtectionPMReset in table xfRLTProtectionTable.\n            ', '\n            Rev PB18\n            Introduction in xfRLPMContinuousCounterTable of MOs:\n              - xfPMCurrentESR\n              - xfPMCurrentSESR\n              - xfPMCurrentBBER\n            ', '\n            Rev. PB17\n            - Updated description for xfCarrierTermActualLicensedCapacity MO.\n            ', '\n            Rev. PB16\n            - Added to xfCGIfAlarms the alarms:\n                * txSwitchover\n                * remoteTxSwitchOver\n                * unableToProtect\n                * rfInputThresholdProtection\n            ', '\n            Rev. PB15\n            - Added the MOs xfRLTNumOfRLPSwitch and xfRLTProtectionPMReset in table xfRLTProtectionTable.\n            ', '\n            Rev. PB14\n            - Added the MO xfRLTHighestSeverityAlarm in table xfRLTHierarchyModuleTable.\n            ', '\n            Rev. PB13\n            - Added xfRLTProtectionTable.\n            - Move unused Protection MOs from xfRLTTable to xfRLTProtectionTable\n            ', '\n            Rev. PB12\n            - Updated description for xfTDMMaxTributaries MO.\n            ', '\n            Rev. PB11\n            - Updated description for xfPMPerfReset MO.\n            ', "\n            Rev. PB10\n            - Added new table 'xfRLTHierarchyModuleTable'.\n            ", "\n            Rev. PB9\n            - 'xfRLTCapability' and 'xfRLTInventoryLastChange' MOs added to 'xfRLTTable'.\n            ", "\n            Rev. PB8\n            - Modified syntax for 'xfXPICCTmember1' and 'xfXPICCTmember2' MOs.\n            ", '\n            Rev. PB7\n            - Added xfRLWANIfTable.\n            ', '\n            Rev. PB6\n            - Changed enum for xfCGIfHopViewStatus MO.\n            ', '\n            Rev. PB5\n            - Updated description for xfPMPerfReset MO.\n            - Updated description for xfCarrierTermActualCapacity MO.\n            - Updated description for xfRLTActualTXPacketCapacity MO.\n            - Extended list of possible values for xfRLTStatus MO.\n            ', '\n            Rev. PB4\n            - Changed syntax for xfRLTManualSwitchCommand MO.\n            - NotApplicable value added to xfCarrierTermXPICOperStatus and xfCarrierTermMIMOOperStatus.\n            ', "\n            Rev. PB2\n            - xfCarrierTermXPICOperStatus: added value 'testing'.\n            - xfRLTTxSwitchFarEnd MO renamed into xfRLTTxSwitchOverConfiguration\n            - xfRLTResetTxSwitchAlarm MO renamed into xfRLTTxSwitchOverAlarmReset, syntax changed.\n            - Description updated for some MOs.\n            ", '\n            Rev. PB1\n            - Modified in xfCarrierTerminationCapabilityTable:\n              * xfACMProfile: removed non-XPIC / XPIC definition\n              * xfFrameFormatType: Standard definition added, other values updated\n              * xfChannelSpacing: added 60 MHz and 80 MHz for ANSI,\n                changed vaue for 112 MHz\n            - Modified in xfCarrierTerminationTable:\n              * xfCarrierTermXPICOperStatus: updated list of possible values\n              * xfCarrierTermMIMOOperStatus: updated list of possible values\n              * xfCarrierTermOperStatus: updated list of possible values\n            - Added in xfRLTTable:\n              * xfRLTManualSwitchCommand\n              * xfRLTTxSwitchFarEnd\n              * xfRLTResetTxSwitchAlarm\n              * xfRLTfeRltSeverity\n            - Added in xfRLTDMIfTable:\n              * xfTDMMaxTributaries\n            - Added in xfCGIfTable:\n              * xfCGIfHopViewStatus\n            - Added in xfCarrierTerminationTable:\n              * xfCarrierTermActualRxACM\n              * xfCarrierTermFeCTSeverity\n            - Added in xfXPICPairTable:\n              * xfXPICAutoRestore\n            ', "\n            Rev. PA31\n            - Added RLT ID alarm in MO xfCGIfAlarms of xfCGIfTable.\n            - Range of xfCarrierTermWantedLicensedCapacity extended, it starts from 0 now (instead of 1).\n            - Value 'other' for xfCarrierTermPreamble renamed with 'notSpecified'.\n            - Value 'other' for xfCarrierTermReferenceSEC renamed with 'notSpecified'.\n            - Updated description for following objects:\n              * xfCarrierTermPreamble\n              * xfCarrierTermReferenceSEC\n              * xfCarrierTermBerAlarmThreshold\n            - Updated names and/or values list for following objects:\n              * xfRLTFarEndIdCheck\n              * xfTDMRxLoop\n              * xfTDMEnable\n              * xfXPICPairAdminStatus\n              * xfXPICPairRecovery\n              * xfMIMOGroupAdminStatus\n              * xfMIMOGroupRecovery\n            ", "\n            Rev. PA30\n            Value 'other' for xfCarrierTermPolarization renamed with 'notSpecified'.\n            ", "\n            Rev. PA29\n            Added status 'testing' to xfCarrierTermOperStatus object.\n            Size of xfTDMDistinguishedName object limited to 32 characters.\n            ", '\n            Rev. PA28\n            Updated definition of xfPMACMStatus object in xfRLPMACMConfigTable.\n            ', '\n            Rev. PA27\n            * Updated list of possible values for xfCarrierTermReferenceSEC object.\n            * Added RLT PM tables:\n              - xfRLPMContinuousCounterTable\n              - xfRLPMACMConfigTable\n              - xfRLPMACMCurrent24hTable\n              - xfRLPMACMInterval24hTable\n              - xfRLPMACMCurrent15mTable\n              - xfRLPMACMInterval15mTable\n            ', '\n            Rev. PA26\n            * xfIfStatus object is read-only now.\n            * Changed names of possible values for xfTDMRxLoop object.\n            ', "\n            Rev. PA25\n            * xfRadioChannelTable renamed into xfCarrierTerminationTable.\n              Overall review of table's objects, including renaming of *RadioChannel* into *CarrierTerm*.\n              Removed XPIC and MIMO related objects (but Oper Status).\n            * xfRadioChannelCapabilityTable renamed into xfCarrierTerminationCapabilityTable.\n            * xfRLTTable added:\n              - xfRLTReset\n              - xfRLTFadeNotificationTimer\n            * xfXPICPairTable added:\n              - xfXPICPairRecovery\n              - xfXPICPairRestore\n            * xfMIMOGroupTable added:\n              - xfMIMOGroupRecovery\n              - xfMIMOGroupRestore\n            * xfRLTDMIfTable added:\n              - xfTDMDistinguishedName\n              - xfTDMRxLoop\n            ", '\n            Rev. PA24\n            * Modified RLT table.\n            * Added xfXPICPairTable.\n            * Added xfMIMOGroupTable.\n            ', '\n            Rev. PA23\n            Added chsp112MHz value to xfChannelSpacing object.\n            ', '\n            Rev. PA22\n            Added second index, liIfIndex, in xfLIMappingtable.\n            ', '\n            Rev. PA21\n            Removed xfWantedTDMCapacity in xfRLTDMIfTable.\n            ', '\n            Rev. PA20\n            Added xfCGIfIndex to xfCGIfTable.\n            ', '\n            Rev. PA19\n            Added xfCGIfTable.\n            ', '\n            Rev. PA18\n            Removed:\n                xfRLTDMIfTable    xfTDMAllocation\n            Added:\n                xfRLTDMIfTable    xfWantedTDMAllocation\n                                  xfActualTDMAllocation\n            ', '\n            Rev. PA17\n            Removed rcEntLogicalIndex in xfRadioChannelTable.\n            ', '\n            Rev. PA16\n            Removed xfRLWANIfTable.\n            ', '\n            Rev. PA15\n            Changed type for xfACMIndex object in xfACMProfileCapacityTable.\n            ', '\n            Rev. PA14\n            * xfRLTDMIfIndex object added in xfRLTDMIfTable.\n            * xfRLWANIfIndex object added in xfRLWANIfTable.\n            * Changed names of values for xfACMProfile object.\n            * Changed type from Integer32 to RadioChannelACMIndex for objects\n              - xfRadioChannelMinACMIndex\n              - xfRadioChannelActualACMIndex\n              - xfRadioChannelMaxACMIndex\n            ', '\n            Rev. PA13\n            xfRadioChannelBerAlarmThresholdCapability object removed.\n            ', '\n            Rev. PA12\n            * xfRadioFrameType changed to xfFrameFormatType.\n            * xfACMMinCapacity changed to xfMinACMCapacity.\n            * xfACMMaxCapacity changed to xfMaxACMCapacity.\n            ', '\n            Rev. PA11\n            * cgIfDescr changed to cgTypeIndex.\n            * Minor adjustments to avoid sintax check warning.\n            ', "\n            Rev. PA10\n            * Adjustements to objects in xfRadioChannelTable.\n              - Descriptions updated.\n              - For enumerative objects, value (1) is always used for 'other'.\n            * xfRadioLinkRltConformance added.\n            ", '\n            Rev. PA9\n            * <xfChannel> changed to <xfRadioChannel> for all applicable objects and tables.\n            * Removed object <xfRadioChannelSpectrumEfficiencyClassCapability>.\n            * Wrong spelling corrected: xfChanneMinACMIndex --> xfRadioChannelMinACMIndex.\n            * Changed objects names:\n              xfRadioChannelStatus -> xfRadioChannelOperStatus\n              xfXPICOper --> xfXPICAdminStatus\n              xfXPICStatus --> xfXPICOperStatus\n              xfMIMOOper --> xfMIMOAdminStatus\n              xfMIMOStatus --> xfIMIMOOperStatus\n              xfXPICPaired --> xfXPICRadioChannelPaired\n              xfMIMOPaired --> xfMIMORadioChannelPaired\n              xfRCPreamble --> xfRadioChannelPreamble\n              xfChannelMSELevel --> xfMSELevel\n            * Added new objects:\n              xfXPICRestore\n              xfMIMORestore\n              xfRadioChannelRestore\n              xfRadioChannelAutoRemoveLoopEnable\n              xfRadioChannelBerAlarmThreshold\n            ', '\n            Rev. PA8\n            XfRadioChannelTable:\n                Changed:\n                    xfXPICMIMORecovery --> xfXPICRecovery\n                    xfXPICMIMOPaired --> xfXPICPaired\n                Added:\n                   xfMIMORecovery\n                   xfMIMOPaired\n            xfRLTTable\n                Changed:\n                    xfActualCapacity --> xfRLTActualCapacity\n            ', '\n            Rev. PA7\n            Added:\n                xfSelectedFrameID MO in xfRadioChannelTable\n            Changed:\n                xfXPICMIMOPaired to R-W\n            ', '\n            Rev. PA6\n            Added:\n                xfACMProfileCapacityTable\n            Modified:\n                xfChannelCapabilityTable - added the following MOs:\n                    xfRadioFrameType\n                    xfACMMinCapacity\n                    xfACMMaxCapacity\n                    xfACMProfile\n            ', '\n            Rev. PA5\n            Removed:\n                xfRadioChannelTable: xfRadioChannelName\n            Added:\n                xfRadioChannelTable: xfRadioChannelStatus\n                                     xfXPICOper\n                                     xfMIMOOper\n                                     xfXPICMIMORecovery\n                                     xfXPICMIMOPaired\n                                     xfRCPreamble\n                xfRLTDMIfTable       xfTDMAllocation\n                xfRLWANIfTable       xfWANMinSpeed\n                                     xfMaxMaxSpeed\n            ', '\n            Rev. PA4\n            Minor change to compile with Wind River compiler.\n            ', '\n            Rev. PA3\n            Table removed: xfRadioLinkRltTable\n            Table renamed: xfRadioChannelMappingTable --> xfRadioChannelTable\n                           xfRLTTerminalTable --> xfRLTTable,\n                           xfRLLogicalToIfTable --> xfLIMappingTable\n            Table added:   xfChannelGroupTable, xfTrafficTable,\n                           xfRLTDMIfTable, xfRLWANIfTable.\n            Object value removed: equipmentProtection in ChannelGroupType\n            Changed ifName to ifIndex in xfChannelGroupTable index\n            Changed ifName to ifIndex in xfLIMappingTable and removed ifIndex as table index\n            Added in:\n                xfLIMappingTable the MOs:    xfLIName\n                                             xfLIIfDescr\n                xfRadioChannelTable the MOs: xfRadioChannelID\n                                             xfChanneMinRowIndex\n                                             xfChannelActualRowIndex\n                                             xfChannelMaxRowIndex\n                                             xfChannelCapabilitiesLastChange\n                                             xfChannelSpectrumEfficiencyClass\n                                             xfChannelSpectrumEfficiencyClassCapability\n                                             xfChannelActualCapacity\n                                             xfChannelCapacityLicense\n                                             xfXPICStatus\n                                             xfMIMOStatus\n                                             xfXPILevel\n                                             xfChannelMSELevel\n            ', '\n            Rev. PA2\n            Table added: xfRadioLinkRltTable, xfRLLogicalToIfTable\n                         xfRadioChannelMappingTable, xfRLTTerminalTable.\n            ', '\n            Rev. PA1\n            Initial revision.\n            ',))
if mibBuilder.loadTexts: xfRadioLinkRltMIB.setLastUpdated('202011050000Z')
if mibBuilder.loadTexts: xfRadioLinkRltMIB.setOrganization('Ericsson AB')
if mibBuilder.loadTexts: xfRadioLinkRltMIB.setContactInfo('\n                Ericsson AB\n                BURA DURA\n                SE-417 56 Goteborg\n                Sweden\n                ')
if mibBuilder.loadTexts: xfRadioLinkRltMIB.setDescription('\n                This MIB defines objects for Radio Link Terminal (RLT) and Carrier Termination (CT)\n                for new Radio Link application in MINI-LINK TN supporting dual carrier capability.\n                ')
class CarrierTermACMIndex(TextualConvention, Integer32):
    description = 'This TC enumerates all possible ACM index values.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36))
    namedValues = NamedValues(("acm4QAMStrong", 1), ("acm4QAMStd", 2), ("acm4QAMLight", 3), ("acm16QAMStrong", 4), ("acm16QAMStd", 5), ("acm16QAMLight", 6), ("acm32QAMStrong", 7), ("acm32QAMStd", 8), ("acm32QAMLight", 9), ("acm64QAMStrong", 10), ("acm64QAMStd", 11), ("acm64QAMLight", 12), ("acm128QAMStrong", 13), ("acm128QAMStd", 14), ("acm128QAMLight", 15), ("acm256QAMStrong", 16), ("acm256QAMStd", 17), ("acm256QAMLight", 18), ("acm512QAMStrong", 19), ("acm512QAMStd", 20), ("acm512QAMLight", 21), ("acm1024QAMStrong", 22), ("acm1024QAMStd", 23), ("acm1024QAMLight", 24), ("acm2048QAMStrong", 25), ("acm2048QAMStd", 26), ("acm2048QAMLight", 27), ("acm4096QAMStrong", 28), ("acm4096QAMStd", 29), ("acm4096QAMLight", 30), ("acm8192QAMStrong", 31), ("acm8192QAMStd", 32), ("acm8192QAMLight", 33), ("acm16384QAMStrong", 34), ("acm16384QAMStd", 35), ("acm16384QAMLight", 36))

xfRadioLinkRltObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1))
xfRadioLinkRltPmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2))
xfRadioLinkRltConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 3))
xfChannelGroupTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 1), )
if mibBuilder.loadTexts: xfChannelGroupTable.setStatus('current')
if mibBuilder.loadTexts: xfChannelGroupTable.setDescription('This table lists all relationships, for ech Channel Group (CG), between the Bonding/RLP interface\n            and the RL WAN interface and allows to configure CG as either Bonding or Radio Link protection (RLP).')
xfChannelGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 1, 1), ).setIndexNames((0, "XF-RADIOLINK-RLT-MIB", "cgIfIndex"), (0, "XF-RADIOLINK-RLT-MIB", "cgTypeIndex"))
if mibBuilder.loadTexts: xfChannelGroupEntry.setStatus('current')
if mibBuilder.loadTexts: xfChannelGroupEntry.setDescription('An entry in the xfChannelGroupTable.')
cgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgIfIndex.setStatus('current')
if mibBuilder.loadTexts: cgIfIndex.setDescription('It is the ifIndex of WAN interface.\n            The interface identified by atIfIndex is the same\n            interface as identified by the same value of ifIndex.')
cgTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("bonding", 2), ("rlp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgTypeIndex.setStatus('current')
if mibBuilder.loadTexts: cgTypeIndex.setDescription('Index representing the Channel Group interface type:\n            - Bonding (2)\n            - RLP: Radio Link Protection (3)')
xfIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ready", 2), ("notReady", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfIfStatus.setStatus('current')
if mibBuilder.loadTexts: xfIfStatus.setDescription('This object defines the Channel Group interface type:\n            either Bonding or RLP (Radio Link Protection).\n            Default: notReady')
xfLIMappingTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 2), )
if mibBuilder.loadTexts: xfLIMappingTable.setStatus('current')
if mibBuilder.loadTexts: xfLIMappingTable.setDescription('This table is used when navigating from a logical entity to interface,\n            representing the relationship between:\n            - RLT logical entity and either Bonding/RLP interface;\n            - Carrier Termination (CT) logical entity and RAU IF interface.')
xfLIMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 2, 1), ).setIndexNames((0, "XF-RADIOLINK-RLT-MIB", "liEntLogicalIndex"), (0, "XF-RADIOLINK-RLT-MIB", "liIfIndex"))
if mibBuilder.loadTexts: xfLIMappingEntry.setStatus('current')
if mibBuilder.loadTexts: xfLIMappingEntry.setDescription('An entry in the xfLIMappingTable.')
liEntLogicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: liEntLogicalIndex.setStatus('current')
if mibBuilder.loadTexts: liEntLogicalIndex.setDescription('The value of this object uniquely identifies the logical\n            entity: RLT (Radio Link Terminal) and CT (Carrier Termination).\n            The logical entity identified by liEntLogicalIndex is the same\n            interface as identified by the same value of entLogicalIndex.')
liIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: liIfIndex.setStatus('current')
if mibBuilder.loadTexts: liIfIndex.setDescription('It represents the ifIndex of Bonding/RLP interface and RAU IF.\n            The interface identified by liIfIndex is the same\n            interface as identified by the same value of ifIndex.')
xfLIName = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfLIName.setStatus('current')
if mibBuilder.loadTexts: xfLIName.setDescription('It represents the Name of the Radio Link Terminal (RLT) or Carrier Termination (CT).')
xfLIIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfLIIfDescr.setStatus('current')
if mibBuilder.loadTexts: xfLIIfDescr.setDescription('A textual string containing information about the ifDescr of both\n            Channel Group interface (either Bonding or RLP (Radio Link Protection))\n            and RAU IF interface.')
xfCarrierTerminationTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3), )
if mibBuilder.loadTexts: xfCarrierTerminationTable.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTerminationTable.setDescription('This table is used to configure the Carrier Termination (CT).')
xfCarrierTerminationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entLogicalIndex"))
if mibBuilder.loadTexts: xfCarrierTerminationEntry.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTerminationEntry.setDescription('An entry in the xfCarrierTerminationTable.')
xfCarrierTermDistinguishedName = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfCarrierTermDistinguishedName.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTermDistinguishedName.setDescription('It represents the distinguished name of the Carrier Termination in the format Rack/Slot/CT.')
xfCarrierTermLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfCarrierTermLabel.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTermLabel.setDescription('Label identifying the Carrier Termination.\n            It can be freely set by operator to label the Carrier Termination.')
xfCarrierTermOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("down", 2), ("up", 3), ("degraded", 4), ("testing", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfCarrierTermOperStatus.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTermOperStatus.setDescription('It represents the operative status of the Carrier Termination:\n            - down(2)\n            - up(3)\n            - degraded(4)\n            - testing(5)')
xfCarrierTermRadioFrameId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfCarrierTermRadioFrameId.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTermRadioFrameId.setDescription('It represents the selected Radio Frame ID.')
xfCarrierTermPreamble = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notSpecified", 1), ("preambleA", 2), ("preambleB", 3), ("preambleC", 4), ("preambleD", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfCarrierTermPreamble.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTermPreamble.setDescription('It allows to set different preambles in the radio frame\n            of each Carrier Termination in a XPIC or MIMO configuration:\n            - preambleA(2)\n            - preambleB(3)\n            - preambleC(4)\n            - preambleD(5)\n            For non XPIC nor MIMO configurations, it can be left to notSpecified(1).')
xfCarrierTermSelectedMinACM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1, 6), CarrierTermACMIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfCarrierTermSelectedMinACM.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTermSelectedMinACM.setDescription('It represents the selected minimum Tx ACM (Adaptive Code Modulation).')
xfCarrierTermActualACM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1, 7), CarrierTermACMIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfCarrierTermActualACM.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTermActualACM.setDescription('It represents the actual (current) Tx ACM (Adaptive Code Modulation).')
xfCarrierTermSelectedMaxACM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1, 8), CarrierTermACMIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfCarrierTermSelectedMaxACM.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTermSelectedMaxACM.setDescription('It represents the selected maximum Tx ACM (Adaptive Code Modulation).')
xfCarrierTermCapabilitiesLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfCarrierTermCapabilitiesLastChange.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTermCapabilitiesLastChange.setDescription('The value of sysUpTime at the time of the last creation or\n             deletion of an entry in the xfCarrierTerminationCapabilityTable.\n             If the number of entries has been unchanged since the last\n             re-initialization of the local network management subsystem,\n             then this object contains a zero value.')
xfCarrierTermReferenceSEC = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notSpecified", 1), ("sec2", 2), ("sec4L", 3), ("sec4H", 4), ("sec5LB", 5), ("sec5HB", 6), ("sec6LB", 7), ("sec6HB", 8), ("sec7B", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfCarrierTermReferenceSEC.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTermReferenceSEC.setDescription('Reference Spectrum Efficiency Class (SEC):\n            - notSpecified(1): not configured, not possible to set\n            - sec2(2): spectrum eff. Class 2\n            - sec4L(3): spectrum eff. Class 4L\n            - sec4H(4): specturm eff. Class 4H\n            - sec5LB(5): spectrum eff. Class 5LB\n            - sec5HB(6): spectrum eff. Class 5HB\n            - sec6LB(7): spectrum eff. Class 6LB\n            - sec6HB(8): spectrum eff. Class 6HB\n            - sec7B(9): spectrum eff. Class 7B\n\n            In ETSI, a value different from notSpecified(1) must be configured.\n            In ANSI, no value can be set and notSpecified(1) is always returned.\n\n            Near end access: read-write.\n            Far end access: read-write.')
xfCarrierTermWantedLicensedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfCarrierTermWantedLicensedCapacity.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTermWantedLicensedCapacity.setDescription('It represents the wanted traffic licensed capacity on the Carrier Termination, expressed in Kbps.\n            The default value 0 (i.e. disabled) means that no wanted licensed capacity has been selected by the user.\n            The value used by RL license logic to request capacity licenses for the Carrier Termination is:\n            - the capacity of selected max profile, if xfCarrierTermWantedLicensedCapacity = 0\n            - the value of xfCarrierTermWantedLicensedCapacity itself, if it is different from 0\n            ')
xfCarrierTermActualLicensedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfCarrierTermActualLicensedCapacity.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTermActualLicensedCapacity.setDescription('This MO represents the Actual Licensed Capacity used on the Carrier Termination:\n            - if Wanted Licensed Capacity is disabled (i.e. xfCarrierTermWantedLicensedCapacity = 0),\n              the Selected Max ACM (xfCarrierTermSelectedMaxACM MO) is used for requesting the license capacity on the carrier;\n            - if Wanted Licensed Capacity is enabled (i.e. xfCarrierTermWantedLicensedCapacity > 0),\n              the value of Wanted Licensed Capacity itself is used for requesting the license capacity on the carrier.\n            ')
xfCarrierTermActualCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfCarrierTermActualCapacity.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTermActualCapacity.setDescription('It represents the actual transmitted capacity supported by Carrier Termination in Kbps.')
xfCarrierTermPolarization = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSpecified", 1), ("horizontal", 2), ("vertical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfCarrierTermPolarization.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTermPolarization.setDescription('XPIC polarization, either horizontal or vertical.')
xfCarrierTermXPICOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("locked", 2), ("unlocked", 3), ("mute", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfCarrierTermXPICOperStatus.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTermXPICOperStatus.setDescription("XPIC locking status:\n            - Other(1): don't use\n            - Locked(2): XPIC is locked: XPI valid\n            - Unlocked(3): XPIC is not locked: XPI not valid\n            - Mute(4): XPIC is muted (XPIC recovery started)\n            - NotApplicable(5): XPIC is disabled")
xfCarrierTermMIMOOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("locked", 2), ("unlocked", 3), ("mute", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfCarrierTermMIMOOperStatus.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTermMIMOOperStatus.setDescription("MIMO locking status:\n            - Other(1): don't use\n            - Locked(2): MIMO is locked: XPI and SNIR valid\n            - Unlocked(3): MIMO is not locked: XPI and SNIR not valid\n            - Mute(4): MIMO is muted\n            - NotApplicable(5): MIMO is disabled")
xfCarrierTermSNIR = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfCarrierTermSNIR.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTermSNIR.setDescription('Signal to Noise Interference Ratio (SNIR) in dB.')
xfCarrierTermXPI = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfCarrierTermXPI.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTermXPI.setDescription('Cross-Polar Interference (XPI) level of the receiver in tenth of dB.')
xfCarrierTermReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noReset", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfCarrierTermReset.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTermReset.setDescription('Reset command forces all the Carrier Termination settings\n            to their own default.')
xfCarrierTermRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noRestore", 2), ("restore", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfCarrierTermRestore.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTermRestore.setDescription('Restore command clears RFloop, IFloop and turns RAU transmitter on.')
xfCarrierTermAutoRemoveLoopEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfCarrierTermAutoRemoveLoopEnable.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTermAutoRemoveLoopEnable.setDescription('Auto remove all RL loops after 15 minutes.')
xfCarrierTermBerAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ber1e3", 2), ("ber1e4", 3), ("ber1e5", 4), ("ber1e6", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfCarrierTermBerAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTermBerAlarmThreshold.setDescription('Threshold for BER alarm.\n            Default: ber1e3(2).')
xfCarrierTermActualRxACM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1, 23), CarrierTermACMIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfCarrierTermActualRxACM.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTermActualRxACM.setDescription('It represents the actual (current) Rx ACM (Adaptive Code Modulation).')
xfCarrierTermFeCTSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 3, 1, 24), Bits().clone(namedValues=NamedValues(("feCtSeverity0", 0), ("feCtSeverity1", 1), ("feCtSeverity2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfCarrierTermFeCTSeverity.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTermFeCTSeverity.setDescription('\n            This object represents the highest severity of Far-End CT alarms and is populated only if Far-End terminal is\n            represented by a Packet terminal (PT). Craft uses this MO to colour the box representing the Far-End CT\n            in the hop view.\n            In case of the Far-End is a TN, the remote highest alarm severity of CT is referred to the interfaces:\n            RAU IF and RF IF.\n            ')
xfCarrierTerminationCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 4), )
if mibBuilder.loadTexts: xfCarrierTerminationCapabilityTable.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTerminationCapabilityTable.setDescription('This table is used to configure the Carrier Termination (CT).')
xfCarrierTerminationCapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entLogicalIndex"), (0, "XF-RADIOLINK-RLT-MIB", "xfRadioFrameId"))
if mibBuilder.loadTexts: xfCarrierTerminationCapabilityEntry.setStatus('current')
if mibBuilder.loadTexts: xfCarrierTerminationCapabilityEntry.setDescription('An entry in the xfCarrierTerminationCapabilityTable.')
xfRadioFrameId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRadioFrameId.setStatus('current')
if mibBuilder.loadTexts: xfRadioFrameId.setDescription('It represents the Radio Frame Id.')
xfChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("chspOther", 1), ("chsp3500kHz", 2), ("chsp7MHz", 3), ("chsp10MHz", 4), ("chsp14MHz", 5), ("chsp20MHz", 6), ("chsp28MHz", 7), ("chsp30MHz", 8), ("chsp40MHz", 9), ("chsp50MHz", 10), ("chsp56MHz", 11), ("chsp60MHz", 12), ("chsp80MHz", 13), ("chsp112MHz", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: xfChannelSpacing.setDescription('Channel spacing:\n            - ETSI: 3.5, 7, 14, 28, 40, 56, 112 MHz\n            - ANSI: 10, 20, 30, 40, 50, 60, 80 MHz')
xfFrameFormatType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("standard", 2), ("xpic", 3), ("mimo", 4), ("longHaulStandard", 5), ("longHaulXpic", 6), ("xpic2boards", 7), ("longHaulXpic2boards", 8), ("mimo2boards", 9), ("sisoCA", 10), ("xpicCA", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfFrameFormatType.setStatus('current')
if mibBuilder.loadTexts: xfFrameFormatType.setDescription('It represents the Frame Format type:\n            - Standard\n            - XPIC\n            - MIMO\n            - Long Haul Standard\n            - Long Haul XPIC\n            - XPIC on two boards\n            - Long Haul XPIC on two boards\n            ')
xfMinACMCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfMinACMCapacity.setStatus('current')
if mibBuilder.loadTexts: xfMinACMCapacity.setDescription('It represents the minimum capacity designed for the specific frame format (Radio Frame Id).')
xfMaxACMCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfMaxACMCapacity.setStatus('current')
if mibBuilder.loadTexts: xfMaxACMCapacity.setDescription('It represents the maximum capacity designed for the frame format (Radio Frame Id).')
xfACMProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 4, 1, 6), Bits().clone(namedValues=NamedValues(("none", 0), ("qam4Strong", 1), ("qam4Std", 2), ("qam4Light", 3), ("qam16Strong", 4), ("qam16Std", 5), ("qam16Light", 6), ("qam32Strong", 7), ("qam32Std", 8), ("qam32Light", 9), ("qam64Strong", 10), ("qam64Std", 11), ("qam64Light", 12), ("qam128Strong", 13), ("qam128Std", 14), ("qam128Light", 15), ("qam256Strong", 16), ("qam256Std", 17), ("qam256Light", 18), ("qam512Strong", 19), ("qam512Std", 20), ("qam512Light", 21), ("qam1024Strong", 22), ("qam1024Std", 23), ("qam1024Light", 24), ("qam2048Strong", 25), ("qam2048Std", 26), ("qam2048Light", 27), ("qam4096Strong", 28), ("qam4096Std", 29), ("qam4096Light", 30), ("qam8192Strong", 31), ("qam8192Std", 32), ("qam8192Light", 33), ("qam16384Strong", 34), ("qam16384Std", 35), ("qam16384Light", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfACMProfile.setStatus('current')
if mibBuilder.loadTexts: xfACMProfile.setDescription('It specifies which adaptive code and modulation profiles are supported.')
xfACMProfileCapacityTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 5), )
if mibBuilder.loadTexts: xfACMProfileCapacityTable.setStatus('current')
if mibBuilder.loadTexts: xfACMProfileCapacityTable.setDescription('This tables reports the ACM capacities of the selected Radio Frame Id per each Carrier Termination.')
xfACMProfileCapacityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entLogicalIndex"), (0, "XF-RADIOLINK-RLT-MIB", "xfACMIndex"))
if mibBuilder.loadTexts: xfACMProfileCapacityEntry.setStatus('current')
if mibBuilder.loadTexts: xfACMProfileCapacityEntry.setDescription('An entry in the xfACMProfileCapacityTable.')
xfACMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 5, 1, 1), CarrierTermACMIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfACMIndex.setStatus('current')
if mibBuilder.loadTexts: xfACMIndex.setDescription('It represents the positional index of the bitmap xfACMProfile in xfCarrierTerminationCapabilityTable.')
xfACMCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfACMCapacity.setStatus('current')
if mibBuilder.loadTexts: xfACMCapacity.setDescription('It represents the capacity in Kbps of the ACM profile identified by the positional index\n            xfACMIndex of the xfACMProfile in xfCarrierTerminationCapabilityTable.\n            Value 0 means that the ACM profile is not included in current Frame Format.')
xfRLTTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 6), )
if mibBuilder.loadTexts: xfRLTTable.setStatus('current')
if mibBuilder.loadTexts: xfRLTTable.setDescription('This table is used to configure the Radio Link Terminal (RLT).')
xfRLTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 6, 1), ).setIndexNames((0, "XF-RADIOLINK-RLT-MIB", "rltEntLogicalIndex"))
if mibBuilder.loadTexts: xfRLTEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLTEntry.setDescription('An entry in the xfRLTTable.')
rltEntLogicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rltEntLogicalIndex.setStatus('current')
if mibBuilder.loadTexts: rltEntLogicalIndex.setDescription('It represents the entLogicalIndex of the Radio Link Terminal (RLT).\n            The logical entity identified by rltEntLogicalIndex is the same\n            entity as identified by the same value of entLogicalIndex.')
xfRLTDistinguishedName = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTDistinguishedName.setStatus('current')
if mibBuilder.loadTexts: xfRLTDistinguishedName.setDescription('It represents the distinguished name of the Radio Link Terminal (RLT): Rack/Slot/RLT number.\n            It is the ifName of RL-WAN i/f.')
xfRLTIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTIpAddress.setStatus('current')
if mibBuilder.loadTexts: xfRLTIpAddress.setDescription('IPv4 address of the network element the Radio Link Terminal (RLT) belongs to.')
xfRLTIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 6, 1, 4), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTIPv6Address.setStatus('current')
if mibBuilder.loadTexts: xfRLTIPv6Address.setDescription('IPv6 Address of the network element the Radio Link Terminal (RLT) belongs to.')
xfRLTNeName = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTNeName.setStatus('current')
if mibBuilder.loadTexts: xfRLTNeName.setDescription('The name of the network element the Radio Link Terminal (RLT) belongs to (System Name - sysName).')
xfRLTNeType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTNeType.setStatus('current')
if mibBuilder.loadTexts: xfRLTNeType.setDescription('The type of the network element the Radio Link Terminal (RLT) belongs to (System Descr - sysDescr).')
xfRLTId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLTId.setStatus('current')
if mibBuilder.loadTexts: xfRLTId.setDescription('Radio Link Terminal (RLT) identifier used for integrity check with far-end.')
xfRLTExpectedFarEndId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLTExpectedFarEndId.setStatus('current')
if mibBuilder.loadTexts: xfRLTExpectedFarEndId.setDescription('Expected Id of far-end Radio Link Terminal (RLT), used for integrity check with near-end.')
xfRLTFarEndIdCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLTFarEndIdCheck.setStatus('current')
if mibBuilder.loadTexts: xfRLTFarEndIdCheck.setDescription('When enabled, the system verifies that far-end Radio Link Terminal name is equal to the expected.\n            If ok Radio Link Terminal status is UP. If not ok the Radio Link Terminal status is stated as DOWN.\n            Default value: disabled.\n            ')
xfRLTStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("down", 2), ("up", 3), ("degraded", 4), ("resourceUnavailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTStatus.setStatus('current')
if mibBuilder.loadTexts: xfRLTStatus.setDescription('It represents the operational status of the Radio Link Terminal (RLT).')
xfRLTMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("onePlusZero", 2), ("onePlusOneRadioLinkProtection", 3), ("twoPlusZeroAdvancedRadioLinkBonding", 4), ("onePlusOneRadioLinkProtectionAndEquipmentProtection", 5), ("twoPlusZeroRadioLinkBondingAndEquipmentProtection", 6), ("twoPlusTwoRadioLinkProtectionAndEquipmentProtection", 7), ("fourPlusZeroRadioLinkBondingAndEquipmentProtection", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLTMode.setStatus('current')
if mibBuilder.loadTexts: xfRLTMode.setDescription('The mode of the Radio Link Terminal (RLT).\n            Values:\n            - 1+0: onePlusZero (default)\n            - 1+1 RLP: onePlusOneRadioLinkProtection\n            - 2+0 RLB: twoPlusZeroAdvancedRadioLinkBonding\n            - 1+1 RLP EQP: onePlusOneRadioLinkProtectionAndEquipmentProtection\n            - 2+0 RLB EQP: twoPlusZeroRadioLinkBondingAndEquipmentProtection\n            - 2+2 RLP EQP: twoPlusTwoRadioLinkProtectionAndEquipmentProtection\n            - 4+0 RLB EQP: fourPlusZeroRadioLinkBondingAndEquipmentProtection\n            ')
xfRLTActualTXTotalCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 6, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTActualTXTotalCapacity.setStatus('current')
if mibBuilder.loadTexts: xfRLTActualTXTotalCapacity.setDescription('\n            It represents the total transmitted capacity throughput (considering both Packet and TDM traffic),\n            expressed in bps, of the Radio Link Terminal (RLT).\n            ')
xfRLTActualTXPacketCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 6, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTActualTXPacketCapacity.setStatus('current')
if mibBuilder.loadTexts: xfRLTActualTXPacketCapacity.setDescription('\n            It represents the transmitted packet capacity throughput (only packet traffic),\n            expressed in bps, of the Radio Link Terminal (RLT).\n            ')
xfRLTLimitedTotalCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 6, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTLimitedTotalCapacity.setStatus('current')
if mibBuilder.loadTexts: xfRLTLimitedTotalCapacity.setDescription('\n            It represents the total transmitted capacity throughput (considering both Packet and TDM traffic),\n            expressed in bps, of the Radio Link Terminal (RLT) limited by License.\n            ')
xfRLTRltSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 6, 1, 15), Bits().clone(namedValues=NamedValues(("rltSeverity0", 0), ("rltSeverity1", 1), ("rltSeverity2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTRltSeverity.setStatus('current')
if mibBuilder.loadTexts: xfRLTRltSeverity.setDescription("\n            This object represents the highest severity alarm related to RLT with logical index 'rltEntLogicalIndex'.\n            Node GUI uses the Far-End entry value (of this MIB MO) to define the colour of the Far-End RLT box in the hop view.\n            ")
xfRLTCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 6, 1, 16), Bits().clone(namedValues=NamedValues(("xpicCapability0", 0), ("capTDMWithEQP", 1), ("capCsPlurality", 2), ("capCtAutoSelection", 3), ("capOnePlusZero", 4), ("capOnePlusOneRadioLinkProtection", 5), ("capTwoPlusZeroAdvancedRadioLinkBonding", 6), ("capOnePlusOneRadioLinkProtectionWithEQP", 7), ("capTwoPlusZeroRadioLinkBondingWithEQP", 8), ("capTwoPlusTwoRadioLinkProtectionWithEQP", 9), ("capFourPlusZeroRadioLinkBondingWithEQP", 10), ("capXpicBetweenBoards", 11), ("capXpicMembersAutoSelection", 12), ("capManualEqpSwitch", 13), ("capEnhAcmMaxCapacity", 14), ("capEnhAcmMaxProtection", 15), ("capRLEncryption", 16), ("capMIMO", 17), ("capTXswoAndSSD", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTCapability.setStatus('current')
if mibBuilder.loadTexts: xfRLTCapability.setDescription('\n            Each bit of this object represents an RLT capability:\n            Bit 0 - XPIC capability\n            Bit 1 - TDM capability\n            Bit 2 - CsPlurality capability\n            Bit 3 - CtAutoSelection capability\n            Bit 4 - OnePlusZero capability\n            Bit 5 - OnePlusOneRadioLinkProtection capability\n            Bit 6 - TwoPlusZeroAdvancedRadioLinkBonding capability\n            Bit 7 - OnePlusOneRadioLinkProtectionWithEQP capability\n            Bit 8 - TwoPlusZeroRadioLinkBondingWithEQP capability\n            Bit 9 - TwoPlusTwoRadioLinkProtectionWithEQP capability\n            Bit 10 - FourPlusZeroRadioLinkBondingWithEQP capability\n            Bit 11 - XPIC between boards capability\n            Bit 12 - XPIC Members Auto Selection capability\n            Bit 13 - Manual EQP Switch capability\n            Bit 14 - Enhanced ACM Protection: Maximum Capacity capability\n            Bit 15 - Enhanced ACM Protection: Maximum Protection capability\n            Bit 16 - Radio Link Encryption capability\n            Bit 17 - MIMO capability\n            Bit 18 - TX swicthover and SSD capability\n            ')
xfRLTInventoryLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 6, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTInventoryLastChange.setStatus('current')
if mibBuilder.loadTexts: xfRLTInventoryLastChange.setDescription('\n            The value of sysUpTime at the time of the last creation or\n            deletion of an entry in the xfRLTHierarchyModuleTable.\n            If the current state was entered prior to the last\n            re-initialization of the local network management subsystem,\n            then this object contains a zero value.\n            ')
xfRLTCpriMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTCpriMode.setStatus('current')
if mibBuilder.loadTexts: xfRLTCpriMode.setDescription('Set the mode of the CPRI front-haul product.\n       Default: notApplicable.')
xfRLTReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("rltNoReset", 2), ("rltReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLTReset.setStatus('current')
if mibBuilder.loadTexts: xfRLTReset.setDescription('It resets RLT to default configuration.')
xfRLTMeasuredHopLength = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTMeasuredHopLength.setStatus('current')
if mibBuilder.loadTexts: xfRLTMeasuredHopLength.setDescription('It represents the measured value of the radio hop length expressed in Km.\n             Values:\n              - Radio hop length measurement not yet available: -1;\n              - Measured hop length in Km: > 0.\n            ')
xfTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 7), )
if mibBuilder.loadTexts: xfTrafficTable.setStatus('current')
if mibBuilder.loadTexts: xfTrafficTable.setDescription('This table is used to map the TDM interface to the specified RLT.')
xfTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 7, 1), ).setIndexNames((0, "XF-RADIOLINK-RLT-MIB", "trEntLogicalIndex"))
if mibBuilder.loadTexts: xfTrafficEntry.setStatus('current')
if mibBuilder.loadTexts: xfTrafficEntry.setDescription('An entry in the xfTrafficEntry.')
trEntLogicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trEntLogicalIndex.setStatus('current')
if mibBuilder.loadTexts: trEntLogicalIndex.setDescription('It represents the entLogicalIndex of the Radio Link Terminal (RLT).\n            The logical entity identified by trEntLogicalIndex is the same\n            interface as identified by the same value of entLogicalIndex.')
xfTDMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTDMEnable.setStatus('current')
if mibBuilder.loadTexts: xfTDMEnable.setDescription('It allows to map TDM interface to a specific Radio Link Terminal (RLT).\n            Default: disable.')
xfRLTDMIfTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 8), )
if mibBuilder.loadTexts: xfRLTDMIfTable.setStatus('current')
if mibBuilder.loadTexts: xfRLTDMIfTable.setDescription('This table is an extention of the ifTable used to configure TDM interface.')
xfRLTDMIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 8, 1), ).setIndexNames((0, "XF-RADIOLINK-RLT-MIB", "xfRLTDMIfIndex"))
if mibBuilder.loadTexts: xfRLTDMIfEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLTDMIfEntry.setDescription('An entry in the xfRLTDMIfEntry.')
xfRLTDMIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTDMIfIndex.setStatus('current')
if mibBuilder.loadTexts: xfRLTDMIfIndex.setDescription('It is the ifIndex of RL TDM I/F table.')
xfActualTDMCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfActualTDMCapacity.setStatus('current')
if mibBuilder.loadTexts: xfActualTDMCapacity.setDescription('It represents the current tributary capacity.')
xfWantedTDMAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 8, 1, 3), Bits().clone(namedValues=NamedValues(("firstE1", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfWantedTDMAllocation.setStatus('current')
if mibBuilder.loadTexts: xfWantedTDMAllocation.setDescription('It represents the wanted tributary allocation.')
xfActualTDMAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 8, 1, 4), Bits().clone(namedValues=NamedValues(("firstE1", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfActualTDMAllocation.setStatus('current')
if mibBuilder.loadTexts: xfActualTDMAllocation.setDescription('It represents the actual tributary allocation.')
xfTDMIfAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 8, 1, 5), Bits().clone(namedValues=NamedValues(("ber0", 0), ("ber1", 1), ("ber2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTDMIfAlarms.setStatus('current')
if mibBuilder.loadTexts: xfTDMIfAlarms.setDescription('This object shows TDM if related alarms.')
xfTDMRxLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTDMRxLoop.setStatus('current')
if mibBuilder.loadTexts: xfTDMRxLoop.setDescription('It configures TDM RX loop:\n            - other(1)\n            - enable(2)\n            - disable(3) (default)\n            ')
xfTDMDistinguishedName = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 8, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTDMDistinguishedName.setStatus('current')
if mibBuilder.loadTexts: xfTDMDistinguishedName.setDescription('It is the disinguished name of TDM i/f, i.e. R/S/P.')
xfTDMMaxTributaries = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTDMMaxTributaries.setStatus('current')
if mibBuilder.loadTexts: xfTDMMaxTributaries.setDescription('It represents the maximum number of tributaries that can be allocated to TDM i/f,\n            depending on frame ID, minimum ACM profile configured and licensed capacity in each CTs of the RLT.\n            The maximum number is limited to 80.')
xfTDMHopLength = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 8, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTDMHopLength.setStatus('current')
if mibBuilder.loadTexts: xfTDMHopLength.setDescription('It represents the length of the radio hop expressed in Km.\n            This is used to calculate the propagation delay over the radio hop\n            that shall be compensated to guarantee TDM traffic error free.\n            Values:\n              - default value for delay compensation: -1\n              - admissible range of values in Km: 0-200\n            ')
xfCGIfTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 9), )
if mibBuilder.loadTexts: xfCGIfTable.setStatus('current')
if mibBuilder.loadTexts: xfCGIfTable.setDescription('This table is an extension of ifTable reporting the main characteristics of CG i/f.')
xfCGIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 9, 1), ).setIndexNames((0, "XF-RADIOLINK-RLT-MIB", "xfCGIfIndex"))
if mibBuilder.loadTexts: xfCGIfEntry.setStatus('current')
if mibBuilder.loadTexts: xfCGIfEntry.setDescription('An entry in the xfCGIfEntry.')
xfCGIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfCGIfIndex.setStatus('current')
if mibBuilder.loadTexts: xfCGIfIndex.setDescription('It is the ifIndex of CG interface.')
xfCGIfMinSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfCGIfMinSpeed.setStatus('current')
if mibBuilder.loadTexts: xfCGIfMinSpeed.setDescription('\n            The minimum speed (throughput) of this interface expressed in bit/s, including both Ethernet and TDM capacities.\n            Note: in case of bonding configurations, it represents the minimum of the min speeds\n            of all Carrier Terminations in the bonding group.\n            ')
xfCGIfMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfCGIfMaxSpeed.setStatus('current')
if mibBuilder.loadTexts: xfCGIfMaxSpeed.setDescription('\n            The maximum speed (throughput) of this interface expressed in bit/s, including both Ethernet and TDM capacities.\n            Note: in case of bonding configurations, it represents the sum of the max speeds\n            of all Carrier Terminations in the bonding group.\n            ')
xfCGIfRCNum = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfCGIfRCNum.setStatus('current')
if mibBuilder.loadTexts: xfCGIfRCNum.setDescription('Number of Carrier Termination members belonging to the CG group.')
xfCGIfAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 9, 1, 5), Bits().clone(namedValues=NamedValues(("hccNe0", 0), ("hccNe1", 1), ("hccNe2", 2), ("rltId0", 3), ("rltId1", 4), ("rltId2", 5), ("txSwitchover0", 6), ("txSwitchover1", 7), ("txSwitchover2", 8), ("remoteTxSwitchOver0", 9), ("remoteTxSwitchOver1", 10), ("remoteTxSwitchOver2", 11), ("unableToProtect0", 12), ("unableToProtect1", 13), ("unableToProtect2", 14), ("rfInputThresholdProtection0", 15), ("rfInputThresholdProtection1", 16), ("rfInputThresholdProtection2", 17), ("unableToProtectEqp0", 18), ("unableToProtectEqp1", 19), ("unableToProtectEqp2", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfCGIfAlarms.setStatus('current')
if mibBuilder.loadTexts: xfCGIfAlarms.setDescription('This object shows CG i/f related alarms.')
xfCGIfHopViewStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("down", 2), ("up", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfCGIfHopViewStatus.setStatus('current')
if mibBuilder.loadTexts: xfCGIfHopViewStatus.setDescription('This object represents the Hop View status.\n            Up:   Far-End is reachable\n            Down: Far-End not reachable\n\n            The status is related to HCC-NE alarm.\n            ')
xfXPICPairTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 10), )
if mibBuilder.loadTexts: xfXPICPairTable.setStatus('current')
if mibBuilder.loadTexts: xfXPICPairTable.setDescription('This table is used to enable XPIC (Admid Status) and set the CT pair in XPIC.')
xfXPICPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 10, 1), ).setIndexNames((0, "ENTITY-MIB", "entLogicalIndex"), (0, "XF-RADIOLINK-RLT-MIB", "xfXpicPairIndex"))
if mibBuilder.loadTexts: xfXPICPairEntry.setStatus('current')
if mibBuilder.loadTexts: xfXPICPairEntry.setDescription('An entry in the xfXPICPairTable.')
xpicPairEntLogicalIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpicPairEntLogicalIIndex.setStatus('current')
if mibBuilder.loadTexts: xpicPairEntLogicalIIndex.setDescription('It represents the entLogicalIndex of the Radio Link Terminal (RLT).\n            The logical entity identified by xpicPairEntLogicalIIndex is the same\n            entity as identified by the same value of entLogicalIndex.\n            ')
xfXPICPairAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfXPICPairAdminStatus.setStatus('current')
if mibBuilder.loadTexts: xfXPICPairAdminStatus.setDescription('Administrative status of XPIC pair.\n             Default value: disable.')
xfXPICPairNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 10, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfXPICPairNumber.setStatus('current')
if mibBuilder.loadTexts: xfXPICPairNumber.setDescription('It specifies the number used for identification of the XPIC pair.')
xfXPICPairRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfXPICPairRecovery.setStatus('current')
if mibBuilder.loadTexts: xfXPICPairRecovery.setDescription('It allows to enable/disable the recovery procedure when XPIC mode is enabled.')
xfXPICPairRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("xpicNoRestore", 2), ("xpicRestore", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfXPICPairRestore.setStatus('current')
if mibBuilder.loadTexts: xfXPICPairRestore.setDescription('Restore XPIC functionality after XPIC recovery has been triggered and resets\n            XPIC Auto Restore procedure')
xfXPICCTmember1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfXPICCTmember1.setStatus('current')
if mibBuilder.loadTexts: xfXPICCTmember1.setDescription('It specifies the first Carrier Termination (CT) member of the XPIC pair.\n             The member is identified by the CT distinguished name (R/S/P).\n            ')
xfXPICCTmember2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfXPICCTmember2.setStatus('current')
if mibBuilder.loadTexts: xfXPICCTmember2.setDescription('It specifies the second Carrier Termination (CT) member of the XPIC pair.\n             The member is identified by the CT distinguished name (R/S/P).\n            ')
xfXPICAutoRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfXPICAutoRestore.setStatus('current')
if mibBuilder.loadTexts: xfXPICAutoRestore.setDescription('It enable/disables the XPIC Auto Recovery procedure.\n            ')
xfXpicPairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfXpicPairIndex.setStatus('current')
if mibBuilder.loadTexts: xfXpicPairIndex.setDescription('It represents the table second index and is used to index the XPIC pair associated\n             to Radio Link Terminal (RLT) with entLogicalIndex equal to xpicPairEntLogicalIIndex.\n             It has been introduce to support configurations like 4+0 RLB EQP, 2+2 RLP EQP.')
xfMIMOGroupTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 11), )
if mibBuilder.loadTexts: xfMIMOGroupTable.setStatus('current')
if mibBuilder.loadTexts: xfMIMOGroupTable.setDescription('This table is used to enable MIMO (Admid Status) and set the CTs in MIMO group.')
xfMIMOGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 11, 1), ).setIndexNames((0, "ENTITY-MIB", "entLogicalIndex"))
if mibBuilder.loadTexts: xfMIMOGroupEntry.setStatus('current')
if mibBuilder.loadTexts: xfMIMOGroupEntry.setDescription('An entry in the xfMIMOGroupTable.')
mimoGroupEntLogicalIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mimoGroupEntLogicalIIndex.setStatus('current')
if mibBuilder.loadTexts: mimoGroupEntLogicalIIndex.setDescription('It represents the entLogicalIndex of the Radio Link Terminal (RLT).\n            The logical entity identified by mimoGroupEntLogicalIIndex is the same\n            entity as identified by the same value of entLogicalIndex.\n            ')
xfMIMOGroupAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfMIMOGroupAdminStatus.setStatus('current')
if mibBuilder.loadTexts: xfMIMOGroupAdminStatus.setDescription('Administrative status of MIMO group.\n             Default value: disable.\n            ')
xfMIMOGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 11, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfMIMOGroupNumber.setStatus('current')
if mibBuilder.loadTexts: xfMIMOGroupNumber.setDescription('It specifies the Number used for identification of the MIMO group.\n            ')
xfMIMOGroupRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfMIMOGroupRecovery.setStatus('current')
if mibBuilder.loadTexts: xfMIMOGroupRecovery.setDescription('It allows to enable/disable the recovery procedure when MIMO mode is enabled.')
xfMIMOGroupRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("mimoNoRestore", 2), ("mimoRestore", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfMIMOGroupRestore.setStatus('current')
if mibBuilder.loadTexts: xfMIMOGroupRestore.setDescription('Restore MIMO functionality after MIMO recovery has been triggered.')
xfMIMOCTmember1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 11, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfMIMOCTmember1.setStatus('current')
if mibBuilder.loadTexts: xfMIMOCTmember1.setDescription('It specifies the first Carrier Termination (CT) member of the MIMO group.\n             The member is identified by the CT distinguished name (R/S/P).\n            ')
xfMIMOCTmember2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 11, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfMIMOCTmember2.setStatus('current')
if mibBuilder.loadTexts: xfMIMOCTmember2.setDescription('It specifies the second Carrier Termination (CT) member of the MIMO group.\n             The member is identified by the CT distinguished name (R/S/P).\n            ')
xfMIMOCTmember3 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 11, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfMIMOCTmember3.setStatus('current')
if mibBuilder.loadTexts: xfMIMOCTmember3.setDescription('It specifies the third Carrier Termination (CT) member of the MIMO group.\n             The member is identified by the CT distinguished name (R/S/P).\n            ')
xfMIMOCTmember4 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 11, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfMIMOCTmember4.setStatus('current')
if mibBuilder.loadTexts: xfMIMOCTmember4.setDescription('It specifies the forth Carrier Termination (CT) member of the MIMO group.\n             The member is identified by the CT distinguished name (R/S/P).\n            ')
xfRLWANIfTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 12), )
if mibBuilder.loadTexts: xfRLWANIfTable.setStatus('current')
if mibBuilder.loadTexts: xfRLWANIfTable.setDescription('This table is used to handle the RL-WAN i/f.')
xfRLWANIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 12, 1), ).setIndexNames((0, "XF-RADIOLINK-RLT-MIB", "xfRLWANIfIndex"))
if mibBuilder.loadTexts: xfRLWANIfEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLWANIfEntry.setDescription('An entry in the xfRLWANIfTable.')
xfRLWANIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLWANIfIndex.setStatus('current')
if mibBuilder.loadTexts: xfRLWANIfIndex.setDescription('It is the table index.\n            It contains the ifIndex value of the WAN interface.\n            ')
xfRLWANDistinguishedName = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLWANDistinguishedName.setStatus('current')
if mibBuilder.loadTexts: xfRLWANDistinguishedName.setDescription('It is the name uniquely identifying the RL-WAN interface within the system, i.e. R/S/P.')
xfRLWANCompAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("down", 2), ("mlhcUp", 3), ("mlhcPlcUp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLWANCompAdminStatus.setStatus('current')
if mibBuilder.loadTexts: xfRLWANCompAdminStatus.setDescription('It enables and disables MLHC and PLC on the RL-WAN interface.\n\n             down(2): both MLHC and PLC are disabled.\n             mlhcUp(3): only MLHC is enabled.\n             mlhcPlcUp(4): both MLHC and PLC are enabled.\n             Default:down(2).\n\n             Compression can be enabled on only one of the two RL-WAN interfaces belonging to the same MMU.\n             Any attempt to enable compression on both RL-WAN interfaces belonging to the same MMU is refused.\n            ')
xfRLWANCompConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disconnected", 2), ("connected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLWANCompConnStatus.setStatus('current')
if mibBuilder.loadTexts: xfRLWANCompConnStatus.setDescription('It specifies if the compression building block is physically connected to the RL-WAN interface.\n             Physical connection of the compression building block to the RL-WAN interface is pre-requisite for enabling compression.\n\n             When xfRLWANCompAdminStatus is set either to mlhcUp or mlhcPlcUp, the compression building block\n             is physically connected to RL-WAN interfaces and xfRLWANCompConnStatus becomes connected.\n             When xfRLWANCompAdminStatus is set either to mlhcUp or mlhcPlcUp on the other RL-WAN interface,\n             the compression building block is physically connected to the other RL-WAN interfaces\n             and xfRLWANCompConnStatus becomes disconnected.\n            ')
xfRLWANMlhcMplsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("mplsOnly", 2), ("controlWord", 3), ("l2", 4), ("l3", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLWANMlhcMplsMode.setStatus('current')
if mibBuilder.loadTexts: xfRLWANMlhcMplsMode.setDescription('It specifies the wanted mpls mode.\n            mplsOnly(2): Ethernet customer bridge, provider bridge and QinQ headers, including MPLS labels (up to 3) are compressed.\n            controlWord(3): L2 VPN with Pseudo-Wire Control Word headers are compressed.\n            l2(4): L2 VPN without Pseudo-Wire Control Word headers are compressed.\n            l3(5): L3 VPN headers are compressed.\n            Default: mplsOnly(2).\n\n            This can be configured only if compression administrative status is down.\n            ')
xfRLWANMlhcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("down", 2), ("up", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLWANMlhcOperStatus.setStatus('current')
if mibBuilder.loadTexts: xfRLWANMlhcOperStatus.setDescription('Multi-Layer Header Compression operative status.\n            ')
xfRLWANPlcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("down", 2), ("up", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLWANPlcOperStatus.setStatus('current')
if mibBuilder.loadTexts: xfRLWANPlcOperStatus.setDescription('Payload Compression operative status.\n            ')
xfRLWANActualCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 12, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLWANActualCapacity.setStatus('current')
if mibBuilder.loadTexts: xfRLWANActualCapacity.setDescription('Actual Capacity (speed) of RL WAN interface, in bps.\n            ')
xfRLWANLimitedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 12, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLWANLimitedCapacity.setStatus('current')
if mibBuilder.loadTexts: xfRLWANLimitedCapacity.setDescription('Capacity (speed) limited by license of RL WAN interface, in bps.\n            ')
xfRLTHierarchyModuleTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 13), )
if mibBuilder.loadTexts: xfRLTHierarchyModuleTable.setStatus('current')
if mibBuilder.loadTexts: xfRLTHierarchyModuleTable.setDescription('This table is used to handle Module (MMU - RAU) hierarchy for the specific RLT.')
xfRLTHierarchyModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 13, 1), ).setIndexNames((0, "XF-RADIOLINK-RLT-MIB", "xfRLTMHIndex"), (0, "XF-RADIOLINK-RLT-MIB", "xfRLTModuleIndex"))
if mibBuilder.loadTexts: xfRLTHierarchyModuleEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLTHierarchyModuleEntry.setDescription('An entry in the xfRLTHierarchyModuleTable.')
xfRLTMHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTMHIndex.setStatus('current')
if mibBuilder.loadTexts: xfRLTMHIndex.setDescription('It is the table index.\n             It contains the entPhisycalIndex of the WAN port associated to the RLT.\n            ')
xfRLTModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTModuleIndex.setStatus('current')
if mibBuilder.loadTexts: xfRLTModuleIndex.setDescription('It is the table index.\n             It is a sequential number referred to the module (entity), either MMU or RAU, constituting the RLT.\n            ')
xfRLTEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTEntPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: xfRLTEntPhysicalIndex.setDescription('\n             This MO represents the value of entPhysicalIndex of the module, either MMU or RAU,\n             constituting the RLT.\n            ')
xfRLTPhysicalCointainedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTPhysicalCointainedIn.setStatus('current')
if mibBuilder.loadTexts: xfRLTPhysicalCointainedIn.setDescription("\n             This MO represents the value of entPhysicalIndex for the physical entity which\n           'contains' this physical entity, which is either MMU or RAU (constituting the RLT).\n            ")
xfRLTPhysicalParentRelPos = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTPhysicalParentRelPos.setStatus('current')
if mibBuilder.loadTexts: xfRLTPhysicalParentRelPos.setDescription("\n             This MO represents the indication of the relative position of this 'child'\n           component among all its 'sibling' components.\n            ")
xfRLTEntityPhysicalDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTEntityPhysicalDescr.setStatus('current')
if mibBuilder.loadTexts: xfRLTEntityPhysicalDescr.setDescription('\n             This MO represents a textual description of physical entity (module),\n             either MMU or RAU, constituting the RLT.\n            ')
xfRLTModuleSlotPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTModuleSlotPosition.setStatus('current')
if mibBuilder.loadTexts: xfRLTModuleSlotPosition.setDescription('\n             This MO represents the slot position of the physical entity (module),\n             either MMU or RAU, constituting the RLT.\n            ')
xfRLTFEDistinguishedName = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 13, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTFEDistinguishedName.setStatus('current')
if mibBuilder.loadTexts: xfRLTFEDistinguishedName.setDescription('\n             This MO represents the distinguished name of the Near-End logical entity,\n             either RLT or CT.\n            ')
xfRLTNEDistinguishedName = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 13, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTNEDistinguishedName.setStatus('current')
if mibBuilder.loadTexts: xfRLTNEDistinguishedName.setDescription('\n             This MO represents the distinguished name of the Far-End logical entity,\n             either RLT or CT.\n            ')
xfRLTInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 13, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: xfRLTInterfaceIndex.setDescription('\n             This MO represents the value of ifIndex of the interface, either CG IF (Bonding/RLP) or RAU IF,\n             constituting the RLT.\n            ')
xfRLTHighestSeverityAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("critical", 0), ("major", 1), ("minor", 2), ("warning", 3), ("clear", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTHighestSeverityAlarm.setStatus('current')
if mibBuilder.loadTexts: xfRLTHighestSeverityAlarm.setDescription('\n             This MO reports the highest severity of the alarms active in the physical module, MMU or RAU, it refers to.\n             Value list:\n                - critical(0): highest severity is Critical;\n                - major(1):    highest severity is Major;\n                - minor(2):    highest severity is Minor;\n                - warning(3):  highest severity is Warning;\n                - clear(4):    no alarm.\n\n            ')
xfRLTProtectionTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 14), )
if mibBuilder.loadTexts: xfRLTProtectionTable.setStatus('current')
if mibBuilder.loadTexts: xfRLTProtectionTable.setDescription('This table is used to handle RL Protection for the RLT whose mode is set 1+1RLP.')
xfRLTProtectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 14, 1), ).setIndexNames((0, "XF-RADIOLINK-RLT-MIB", "xfRLTProtIndex"))
if mibBuilder.loadTexts: xfRLTProtectionEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLTProtectionEntry.setDescription('An entry in the xfRLTProtectionTable.')
xfRLTProtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTProtIndex.setStatus('current')
if mibBuilder.loadTexts: xfRLTProtIndex.setDescription('It is the table index.\n             It contains the entity logical index of the RLT configured in 1+1RLP.\n            ')
xfRLTProtectionSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("auto", 2), ("manual", 3), ("autoRevertive", 4), ("txSwitchDisable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLTProtectionSwitchMode.setStatus('current')
if mibBuilder.loadTexts: xfRLTProtectionSwitchMode.setDescription('The mode in which the switching mechanism is configured.\n             Auto:   System automatically switches from the degraded to the other transmitter (Tx).\n             Manual: Automatic switching is disabled and operator can select Tx manually.\n             Auto & Revertive:  makes it possible to manually set the preferred Tx.\n             TX switch disable: Selective Space Diverity, SSD.\n                                RLP TX switch is disabled.\n                                The two received signals, from different paths, are combined.\n\n             Default: AUTO (for RLT mode RLP) & NA (default for RLT mode RLB).\n            ')
xfRLTProtectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unprotected", 2), ("protected", 3), ("unableToProtect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTProtectionStatus.setStatus('current')
if mibBuilder.loadTexts: xfRLTProtectionStatus.setDescription('Status of the protection, when configured in a protected mode.\n             Values:\n             - unprotected;\n             - protected\n             - unableToProtect\n\n             Note:\n             Applicable only when RLT-mode is RL protection.\n            ')
xfRLTRevertivePreferredTX = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 14, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLTRevertivePreferredTX.setStatus('current')
if mibBuilder.loadTexts: xfRLTRevertivePreferredTX.setDescription('It specifies the preferred TX Radio Carrier Termination (CT) in revertive protection mode.\n             The member is identified by the CT distinguished name (R/S/P).\n            ')
xfRLTProtectionWaitToRestoreTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 14, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLTProtectionWaitToRestoreTime.setStatus('current')
if mibBuilder.loadTexts: xfRLTProtectionWaitToRestoreTime.setDescription('The time, in # of seconds, to wait before switching back to the preferred Tx in Auto & Revertive mode.\n\n             Default: 0.\n            ')
xfRLTFadeNotificationTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 14, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLTFadeNotificationTimer.setStatus('current')
if mibBuilder.loadTexts: xfRLTFadeNotificationTimer.setDescription('Notifications for alarms caused by fading, with a duration less than the specified time (0 - 1000 seconds) are not sent.\n             Only applicable for protected configurations.\n\n             Default: 200.\n            ')
xfRLTManualSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("txManualSwitch", 2), ("txManualNoSwitch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLTManualSwitchCommand.setStatus('current')
if mibBuilder.loadTexts: xfRLTManualSwitchCommand.setDescription('Used to request a TX switch-over.\n             Applicable for protected configurations and when protectionSwitchMode is set to Manual.\n             Not Applicable for RLT mode RLB\n\n             Value:\n             - txManualSwitch\n             - txManualNoSwitch.\n            ')
xfRLTTxSwitchOverConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("enable", 3), ("disable", 4), ("enableLocal", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLTTxSwitchOverConfiguration.setStatus('current')
if mibBuilder.loadTexts: xfRLTTxSwitchOverConfiguration.setDescription('Enable or disable the function to switch TX on a request from far-end, including also the TX switchover alarm notifications , both local and remote. Only applicable in RLT mode RLP.\n\n             Values:\n             - notSupported: (default for RLT in RLB mode)\n             - enable:       TX switchover triggered by local and remote faults\n             - disable:      TX switchover disabled(default for RLT in RLP mode) - DEPRECATED\n             - enableLocal:  TX switchover triggered by local faults only (default for RLT in RLP mode)\n            ')
xfRLTTxSwitchOverAlarmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("txSwitchOverAlarmNoReset", 2), ("txSwitchOverAlarmReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLTTxSwitchOverAlarmReset.setStatus('current')
if mibBuilder.loadTexts: xfRLTTxSwitchOverAlarmReset.setDescription('Used to manual reset the TX switch-over alarm and Remote TX switchover alarm (consequently to TX switch ordered from far-end).\n             Note: the alarm is raised when TX Switch far-end function is enabled (xfRLTTxSwitchOverConfiguration).\n\n             Value:\n             - txSwitchOverAlarmNoReset\n             - txSwitchOverAlarmReset.\n            ')
xfRLTNumOfRLPSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTNumOfRLPSwitch.setStatus('current')
if mibBuilder.loadTexts: xfRLTNumOfRLPSwitch.setDescription('It represents the number of RLP Radio TX switch.\n            ')
xfRLTEnhancedACMProtectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("activeTransmitter", 2), ("maximumCapacity", 3), ("maximumProtection", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLTEnhancedACMProtectionMode.setStatus('current')
if mibBuilder.loadTexts: xfRLTEnhancedACMProtectionMode.setDescription("It configures the enhanced ACM protection mode. The enhanced ACM protection uses RX indicators from both the working and the protection links\n             to select an ACM profile to optimize capacity (throughput) and/or protection (robustness).\n\n             Values:\n             - Active Transmitter        : ACM engine determines the ACM profile according to the working Rx ACM indications only;\n             - Maximum Capacity (default): Working Rx ACM engine is aware of the ACM profile requests from the\n                                           protection Rx ACM engine, and determines the highest ACM profile between\n                                           the working and the protection links;\n             - Maximum Protection        : Working Rx ACM engine is aware of the protection Rx ACM engine's ACM\n                                           profile requests, and determines the lowest ACM profile between the working\n                                           and the protection links.\n            ")
xfRLTEnhancedACMProtectionOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("notApplicable", 2), ("enhAcmProtActive", 3), ("enhAcmProtNotActive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTEnhancedACMProtectionOperStatus.setStatus('current')
if mibBuilder.loadTexts: xfRLTEnhancedACMProtectionOperStatus.setDescription('Status of the enhanched ACM protection engine, when ACM engine is configured either in maximum-troughtput or maximum-protection mode.\n\n             Values:\n             - notApplicable      : when enhanced ACM protection mode is basic;\n             - enhAcmProtActive   : when the enhanced ACM engine is working and the highest ACM profile is selected\n                                    between the working and the protection links;\n             - enhAcmProtNotActive: when the enhanced ACM engine is not working.\n            ')
xfRLTEncryptionTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 15), )
if mibBuilder.loadTexts: xfRLTEncryptionTable.setStatus('current')
if mibBuilder.loadTexts: xfRLTEncryptionTable.setDescription('This table is used to handle Radio Link Encryption.')
xfRLTEncryptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 15, 1), ).setIndexNames((0, "XF-RADIOLINK-RLT-MIB", "xfRLTEncryptionIndex"))
if mibBuilder.loadTexts: xfRLTEncryptionEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLTEncryptionEntry.setDescription('An entry in the xfRLTEncryptionTable.')
xfRLTEncryptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTEncryptionIndex.setStatus('current')
if mibBuilder.loadTexts: xfRLTEncryptionIndex.setDescription('It represents the xfRLTEncryptionTable index and is the RLT entity logical index.')
xfRLTEncryptionAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLTEncryptionAdminStatus.setStatus('current')
if mibBuilder.loadTexts: xfRLTEncryptionAdminStatus.setDescription('This MO allows to enable/disable the Encryption of both control and traffic plain over the Radio Link hop.\n             Values:\n              - enable;\n              - disable.\n\n             Default: DISABLE.\n            ')
xfRLTEncryptionOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLTEncryptionOperStatus.setStatus('current')
if mibBuilder.loadTexts: xfRLTEncryptionOperStatus.setDescription('This MO represents the Operative Status of the Encryption function over the Radio Link hop\n             and refers to receiving direction. Therefore, it indicates if the receiving side is able or\n             not able to correctly/successfully decipher the ciphered data stream transmitted from remote side..\n             The ecryption status can assume the values:\n              - up: control and traffic plain are correctly deciphered;\n              - down: control and traffic plain are not deciphered correctly/successfully, due to e.g. authentication failure, disturbance over the radio-hop.\n            ')
xfRLTEncryptionMasterKey = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 1, 15, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLTEncryptionMasterKey.setStatus('current')
if mibBuilder.loadTexts: xfRLTEncryptionMasterKey.setDescription('This MO allows to define the Master Key used to initiate the Encryption operation.\n             Master Key is hidden.\n            ')
xfRLPMContinuousCounterTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 1), )
if mibBuilder.loadTexts: xfRLPMContinuousCounterTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMContinuousCounterTable.setDescription('Table for RLT performance data.')
xfRLPMContinuousCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMContinuousCounterEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMContinuousCounterEntry.setDescription('An entry in the xfRLPMContinuousCounterTable.')
xfPMTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 1, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: xfPMTimeElapsed.setDescription('\n            The number of seconds that have elapsed since the beginning\n            of the current error-measurement period.\n            If the current interval exceeds the maximum\n            value, the agent will return the maximum value.\n            Reset by xfPMPerfReset.\n            ')
xfPMCurrentES = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 1, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrentES.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrentES.setDescription('This object shows the errored seconds.\n             Reset by xfPMPerfReset.')
xfPMCurrentSES = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 1, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrentSES.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrentSES.setDescription('This object shows the severely errored seconds.\n             Reset by xfPMPerfReset.')
xfPMCurrentBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 1, 1, 4), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrentBBE.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrentBBE.setDescription('This object shows the background block errors.\n            Reset by xfPMPerfReset.')
xfPMCurrentUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 1, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrentUAS.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrentUAS.setDescription('This object shows the unavailable seconds (or unavailable time).\n              Reset by xfPMPerfReset.')
xfPMCurrentBB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 1, 1, 6), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrentBB.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrentBB.setDescription('This object shows the background blocks.\n             Reset by xfPMPerfReset.')
xfPMPerfReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noReset", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMPerfReset.setStatus('current')
if mibBuilder.loadTexts: xfPMPerfReset.setDescription('\n            This object is used to reset the performance counters:\n                - Elapsed Time, ES, SES, BBE, BB\n                - PM ACM\n                - ETSI - EN 301 129 (TLTS, RLTS, ...) current/interval 15m/24h\n                - Max and Min XPI/MSE current/interval 15m/24h\n\n            It can be also set when the RAU is not present.\n            Near end access: read-write.\n            ')
xfPMCurrentESR = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 1, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrentESR.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrentESR.setDescription('The ratio of ES to total seconds in available time during a\n             fixed measurement interval.\n             Reset by xfPMPerfReset.')
xfPMCurrentSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 1, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrentSESR.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrentSESR.setDescription('The ratio of SES to total seconds in available time\n             during a fixed measurement interval.\n             Reset by xfPMPerfReset.')
xfPMCurrentBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 1, 1, 10), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrentBBER.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrentBBER.setDescription('The ratio of Background Block Errors (BBE) to total blocks in\n             available time during a fixed measurement interval.\n             Reset by xfPMPerfReset.')
xfRLPMACMConfigTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 2), )
if mibBuilder.loadTexts: xfRLPMACMConfigTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMACMConfigTable.setDescription('Alarm threshold values for RL PM.')
xfRLPMACMConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMACMConfigEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMACMConfigEntry.setDescription('Entry in the xfRLPMACMConfigTable')
xfPMACMSetThreshold15m = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMACMSetThreshold15m.setStatus('current')
if mibBuilder.loadTexts: xfPMACMSetThreshold15m.setDescription('The 15 minute set threshold for minimum modulation.\n            Near end access: read-write.\n            Far end access: no access.\n            Default value is 180.\n            ')
xfPMACMSetThreshold24h = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMACMSetThreshold24h.setStatus('current')
if mibBuilder.loadTexts: xfPMACMSetThreshold24h.setDescription('The 24 hour set threshold for minimum modulation.\n            Near end access: read-write.\n            Far end access: no access.\n            Default value is 1500.\n            ')
xfPMACMResetThreshold15m = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMACMResetThreshold15m.setStatus('current')
if mibBuilder.loadTexts: xfPMACMResetThreshold15m.setDescription('The 15 minute reset threshold for minimum modulation.\n            Near end access: read-write.\n            Far end access: no access.\n            Default value is 20.\n            ')
xfPMACMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 2, 1, 4), Bits().clone(namedValues=NamedValues(("acm15m0", 0), ("acm15m1", 1), ("acm15m2", 2), ("acm24h0", 3), ("acm24h1", 4), ("acm24h2", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMStatus.setStatus('current')
if mibBuilder.loadTexts: xfPMACMStatus.setDescription('\n            It reports threshold crossing alarm status:\n            - acm15m: ACM 15 min threshold crossing: ACM has been in the lowest configured profile\n                      for a number of seconds exceeding the configured 15 min threshold.\n            - acm24h: ACM 24 hour threshold crossing: ACM has been in the lowest configured profile\n                      for a number of seconds exceeding the configured 24 hour threshold.\n            ')
xfPMACMValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 2, 1, 5), Bits().clone(namedValues=NamedValues(("valid15m4QAMStrong", 0), ("valid15m4QAMStd", 1), ("valid15m4QAMLight", 2), ("valid15m16QAMStrong", 3), ("valid15m16QAMStd", 4), ("valid15m16QAMLight", 5), ("valid15m32QAMStrong", 6), ("valid15m32QAMStd", 7), ("valid15m32QAMLight", 8), ("valid15m64QAMStrong", 9), ("valid15m64QAMStd", 10), ("valid15m64QAMLight", 11), ("valid15m128QAMStrong", 12), ("valid15m128QAMStd", 13), ("valid15m128QAMLight", 14), ("valid15m256QAMStrong", 15), ("valid15m256QAMStd", 16), ("valid15m256QAMLight", 17), ("valid15m512QAMStrong", 18), ("valid15m512QAMStd", 19), ("valid15m512QAMLight", 20), ("valid15m1024QAMStrong", 21), ("valid15m1024QAMStd", 22), ("valid15m1024QAMLight", 23), ("valid15m2048QAMStrong", 24), ("valid15m2048QAMStd", 25), ("valid15m2048QAMLight", 26), ("valid15m4096QAMStrong", 27), ("valid15m4096QAMStd", 28), ("valid15m4096QAMLight", 29), ("valid15m8192QAMStrong", 30), ("valid15m8192QAMStd", 31), ("valid15m8192QAMLight", 32), ("valid15m16384QAMStrong", 33), ("valid15m16384QAMStd", 34), ("valid15m16384QAMLight", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMValidData.setStatus('current')
if mibBuilder.loadTexts: xfPMACMValidData.setDescription("It reports which ACM's PM data are valid.")
xfRLPMACMCurrent24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3), )
if mibBuilder.loadTexts: xfRLPMACMCurrent24hTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMACMCurrent24hTable.setDescription('ACM-based counters for current 24h table.')
xfRLPMACMCurrent24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMACMCurrent24hEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMACMCurrent24hEntry.setDescription('Entry in the xfRLPMACMCurrent24hTable.')
xfPMACMCurrent24h4QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h4QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h4QAMStrong.setDescription('Valid time since reset.')
xfPMACMCurrent24h4QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h4QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h4QAMStd.setDescription('Valid time since reset.')
xfPMACMCurrent24h4QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h4QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h4QAMLight.setDescription('Valid time since reset.')
xfPMACMCurrent24h16QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h16QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h16QAMStrong.setDescription('Valid time since reset.')
xfPMACMCurrent24h16QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h16QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h16QAMStd.setDescription('Valid time since reset.')
xfPMACMCurrent24h16QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h16QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h16QAMLight.setDescription('Valid time since reset.')
xfPMACMCurrent24h32QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h32QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h32QAMStrong.setDescription('Valid time since reset.')
xfPMACMCurrent24h32QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h32QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h32QAMStd.setDescription('Valid time since reset.')
xfPMACMCurrent24h32QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h32QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h32QAMLight.setDescription('Valid time since reset.')
xfPMACMCurrent24h64QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h64QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h64QAMStrong.setDescription('Valid time since reset.')
xfPMACMCurrent24h64QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h64QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h64QAMStd.setDescription('Valid time since reset.')
xfPMACMCurrent24h64QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 12), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h64QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h64QAMLight.setDescription('Valid time since reset.')
xfPMACMCurrent24h128QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 13), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h128QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h128QAMStrong.setDescription('Valid time since reset.')
xfPMACMCurrent24h128QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 14), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h128QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h128QAMStd.setDescription('Valid time since reset.')
xfPMACMCurrent24h128QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 15), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h128QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h128QAMLight.setDescription('Valid time since reset.')
xfPMACMCurrent24h256QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 16), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h256QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h256QAMStrong.setDescription('Valid time since reset.')
xfPMACMCurrent24h256QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 17), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h256QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h256QAMStd.setDescription('Valid time since reset.')
xfPMACMCurrent24h256QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 18), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h256QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h256QAMLight.setDescription('Valid time since reset.')
xfPMACMCurrent24h512QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 19), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h512QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h512QAMStrong.setDescription('Valid time since reset.')
xfPMACMCurrent24h512QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 20), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h512QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h512QAMStd.setDescription('Valid time since reset.')
xfPMACMCurrent24h512QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 21), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h512QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h512QAMLight.setDescription('Valid time since reset.')
xfPMACMCurrent24h1024QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 22), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h1024QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h1024QAMStrong.setDescription('Valid time since reset.')
xfPMACMCurrent24h1024QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 23), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h1024QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h1024QAMStd.setDescription('Valid time since reset.')
xfPMACMCurrent24h1024QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 24), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h1024QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h1024QAMLight.setDescription('Valid time since reset.')
xfPMACMCurrent24h2048QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 25), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h2048QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h2048QAMStrong.setDescription('Valid time since reset.')
xfPMACMCurrent24h2048QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 26), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h2048QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h2048QAMStd.setDescription('Valid time since reset.')
xfPMACMCurrent24h2048QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 27), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h2048QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h2048QAMLight.setDescription('Valid time since reset.')
xfPMACMCurrent24h4096QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 28), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h4096QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h4096QAMStrong.setDescription('Valid time since reset.')
xfPMACMCurrent24h4096QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 29), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h4096QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h4096QAMStd.setDescription('Valid time since reset.')
xfPMACMCurrent24h4096QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 30), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h4096QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h4096QAMLight.setDescription('Valid time since reset.')
xfPMACMCurrent24h8192QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 31), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h8192QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h8192QAMStrong.setDescription('Valid time since reset.')
xfPMACMCurrent24h8192QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 32), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h8192QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h8192QAMStd.setDescription('Valid time since reset.')
xfPMACMCurrent24h8192QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 33), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h8192QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h8192QAMLight.setDescription('Valid time since reset.')
xfPMACMCurrent24h16384QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 34), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h16384QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h16384QAMStrong.setDescription('Valid time since reset.')
xfPMACMCurrent24h16384QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 35), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h16384QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h16384QAMStd.setDescription('Valid time since reset.')
xfPMACMCurrent24h16384QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 3, 1, 36), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent24h16384QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent24h16384QAMLight.setDescription('Valid time since reset.')
xfRLPMACMInterval24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4), )
if mibBuilder.loadTexts: xfRLPMACMInterval24hTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMACMInterval24hTable.setDescription('ACM-based counters for interval 24h table.')
xfRLPMACMInterval24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMACMInterval24hEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMACMInterval24hEntry.setDescription('Entry in the xfRLPMACMInterval24hTable.')
xfPMACMInterval24h4QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h4QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h4QAMStrong.setDescription('Interval count.')
xfPMACMInterval24h4QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h4QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h4QAMStd.setDescription('Interval count.')
xfPMACMInterval24h4QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h4QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h4QAMLight.setDescription('Interval count.')
xfPMACMInterval24h16QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h16QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h16QAMStrong.setDescription('Interval count.')
xfPMACMInterval24h16QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h16QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h16QAMStd.setDescription('Interval count.')
xfPMACMInterval24h16QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h16QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h16QAMLight.setDescription('Interval count.')
xfPMACMInterval24h32QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h32QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h32QAMStrong.setDescription('Interval count.')
xfPMACMInterval24h32QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h32QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h32QAMStd.setDescription('Interval count.')
xfPMACMInterval24h32QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h32QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h32QAMLight.setDescription('Interval count.')
xfPMACMInterval24h64QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h64QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h64QAMStrong.setDescription('Interval count.')
xfPMACMInterval24h64QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h64QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h64QAMStd.setDescription('Interval count.')
xfPMACMInterval24h64QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h64QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h64QAMLight.setDescription('Interval count.')
xfPMACMInterval24h128QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h128QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h128QAMStrong.setDescription('Interval count.')
xfPMACMInterval24h128QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h128QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h128QAMStd.setDescription('Interval count.')
xfPMACMInterval24h128QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h128QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h128QAMLight.setDescription('Interval count.')
xfPMACMInterval24h256QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 16), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h256QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h256QAMStrong.setDescription('Interval count.')
xfPMACMInterval24h256QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 17), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h256QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h256QAMStd.setDescription('Interval count.')
xfPMACMInterval24h256QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 18), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h256QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h256QAMLight.setDescription('Interval count.')
xfPMACMInterval24h512QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 19), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h512QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h512QAMStrong.setDescription('Interval count.')
xfPMACMInterval24h512QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 20), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h512QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h512QAMStd.setDescription('Interval count.')
xfPMACMInterval24h512QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 21), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h512QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h512QAMLight.setDescription('Interval count.')
xfPMACMInterval24h1024QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 22), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h1024QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h1024QAMStrong.setDescription('Interval count.')
xfPMACMInterval24h1024QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 23), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h1024QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h1024QAMStd.setDescription('Interval count.')
xfPMACMInterval24h1024QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 24), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h1024QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h1024QAMLight.setDescription('Interval count.')
xfPMACMInterval24h2048QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 25), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h2048QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h2048QAMStrong.setDescription('Interval count.')
xfPMACMInterval24h2048QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 26), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h2048QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h2048QAMStd.setDescription('Interval count.')
xfPMACMInterval24h2048QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 27), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h2048QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h2048QAMLight.setDescription('Interval count.')
xfPMACMInterval24h4096QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 28), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h4096QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h4096QAMStrong.setDescription('Interval count.')
xfPMACMInterval24h4096QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 29), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h4096QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h4096QAMStd.setDescription('Interval count.')
xfPMACMInterval24h4096QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 30), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h4096QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h4096QAMLight.setDescription('Interval count.')
xfPMACMInterval24hValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24hValidData.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24hValidData.setDescription('This variable indicates whether the data for this interval is valid.')
xfPMACMInterval24h8192QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 32), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h8192QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h8192QAMStrong.setDescription('Interval count.')
xfPMACMInterval24h8192QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 33), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h8192QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h8192QAMStd.setDescription('Interval count.')
xfPMACMInterval24h8192QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 34), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h8192QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h8192QAMLight.setDescription('Interval count.')
xfPMACMInterval24h16384QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 35), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h16384QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h16384QAMStrong.setDescription('Interval count.')
xfPMACMInterval24h16384QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 36), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h16384QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h16384QAMStd.setDescription('Interval count.')
xfPMACMInterval24h16384QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 4, 1, 37), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval24h16384QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval24h16384QAMLight.setDescription('Interval count.')
xfRLPMACMCurrent15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5), )
if mibBuilder.loadTexts: xfRLPMACMCurrent15mTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMACMCurrent15mTable.setDescription('ACM-based counters for current 15m table.')
xfRLPMACMCurrent15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMACMCurrent15mEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMACMCurrent15mEntry.setDescription('Entry in the table.')
xfPMACMCurrent15m4QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m4QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m4QAMStrong.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m4QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m4QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m4QAMStd.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m4QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m4QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m4QAMLight.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m16QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m16QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m16QAMStrong.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m16QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m16QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m16QAMStd.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m16QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m16QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m16QAMLight.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m32QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m32QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m32QAMStrong.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m32QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m32QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m32QAMStd.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m32QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m32QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m32QAMLight.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m64QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m64QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m64QAMStrong.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m64QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m64QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m64QAMStd.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m64QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 12), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m64QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m64QAMLight.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m128QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 13), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m128QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m128QAMStrong.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m128QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 14), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m128QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m128QAMStd.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m128QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 15), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m128QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m128QAMLight.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m256QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 16), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m256QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m256QAMStrong.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m256QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 17), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m256QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m256QAMStd.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m256QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 18), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m256QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m256QAMLight.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m512QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 19), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m512QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m512QAMStrong.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m512QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 20), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m512QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m512QAMStd.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m512QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 21), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m512QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m512QAMLight.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m1024QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 22), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m1024QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m1024QAMStrong.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m1024QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 23), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m1024QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m1024QAMStd.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m1024QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 24), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m1024QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m1024QAMLight.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m2048QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 25), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m2048QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m2048QAMStrong.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m2048QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 26), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m2048QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m2048QAMStd.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m2048QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 27), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m2048QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m2048QAMLight.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m4096QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 28), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m4096QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m4096QAMStrong.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m4096QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 29), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m4096QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m4096QAMStd.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m4096QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 30), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m4096QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m4096QAMLight.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m8192QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 31), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m8192QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m8192QAMStrong.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m8192QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 32), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m8192QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m8192QAMStd.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m8192QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 33), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m8192QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m8192QAMLight.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m16384QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 34), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m16384QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m16384QAMStrong.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m16384QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 35), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m16384QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m16384QAMStd.setDescription('Valid interval time since reset.')
xfPMACMCurrent15m16384QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 5, 1, 36), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMCurrent15m16384QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMCurrent15m16384QAMLight.setDescription('Valid interval time since reset.')
xfRLPMACMInterval15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6), )
if mibBuilder.loadTexts: xfRLPMACMInterval15mTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMACMInterval15mTable.setDescription('ACM-based counters for interval 15m table.')
xfRLPMACMInterval15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15mIntervalNumber"))
if mibBuilder.loadTexts: xfRLPMACMInterval15mEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMACMInterval15mEntry.setDescription('Entry in the table.')
xfPMACMInterval15mIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15mIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15mIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which\n            the set of statistics is available. The interval identified by 1\n            is the most recently completed 15 minute interval, and the interval\n            identified by N is the interval immediately preceding the one\n            identified by N-1.')
xfPMACMInterval15m4QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m4QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m4QAMStrong.setDescription('Interval count.')
xfPMACMInterval15m4QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m4QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m4QAMStd.setDescription('Interval count.')
xfPMACMInterval15m4QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m4QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m4QAMLight.setDescription('Interval count.')
xfPMACMInterval15m16QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m16QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m16QAMStrong.setDescription('Interval count.')
xfPMACMInterval15m16QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m16QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m16QAMStd.setDescription('Interval count.')
xfPMACMInterval15m16QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m16QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m16QAMLight.setDescription('Interval count.')
xfPMACMInterval15m32QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m32QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m32QAMStrong.setDescription('Interval count.')
xfPMACMInterval15m32QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m32QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m32QAMStd.setDescription('Interval count.')
xfPMACMInterval15m32QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m32QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m32QAMLight.setDescription('Interval count.')
xfPMACMInterval15m64QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m64QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m64QAMStrong.setDescription('Interval count.')
xfPMACMInterval15m64QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m64QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m64QAMStd.setDescription('Interval count.')
xfPMACMInterval15m64QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m64QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m64QAMLight.setDescription('Interval count.')
xfPMACMInterval15m128QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m128QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m128QAMStrong.setDescription('Interval count.')
xfPMACMInterval15m128QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m128QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m128QAMStd.setDescription('Interval count.')
xfPMACMInterval15m128QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 16), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m128QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m128QAMLight.setDescription('Interval count.')
xfPMACMInterval15m256QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 17), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m256QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m256QAMStrong.setDescription('Interval count.')
xfPMACMInterval15m256QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 18), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m256QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m256QAMStd.setDescription('Interval count.')
xfPMACMInterval15m256QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 19), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m256QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m256QAMLight.setDescription('Interval count.')
xfPMACMInterval15m512QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 20), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m512QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m512QAMStrong.setDescription('Interval count.')
xfPMACMInterval15m512QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 21), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m512QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m512QAMStd.setDescription('Interval count.')
xfPMACMInterval15m512QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 22), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m512QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m512QAMLight.setDescription('Interval count.')
xfPMACMInterval15m1024QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 23), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m1024QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m1024QAMStrong.setDescription('Interval count.')
xfPMACMInterval15m1024QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 24), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m1024QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m1024QAMStd.setDescription('Interval count.')
xfPMACMInterval15m1024QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 25), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m1024QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m1024QAMLight.setDescription('Interval count.')
xfPMACMInterval15m2048QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 26), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m2048QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m2048QAMStrong.setDescription('Interval count.')
xfPMACMInterval15m2048QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 27), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m2048QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m2048QAMStd.setDescription('Interval count.')
xfPMACMInterval15m2048QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 28), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m2048QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m2048QAMLight.setDescription('Interval count.')
xfPMACMInterval15m4096QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 29), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m4096QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m4096QAMStrong.setDescription('Interval count.')
xfPMACMInterval15m4096QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 30), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m4096QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m4096QAMStd.setDescription('Interval count.')
xfPMACMInterval15m4096QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 31), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m4096QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m4096QAMLight.setDescription('Interval count.')
xfPMACMInterval15mValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 32), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15mValidData.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15mValidData.setDescription('This variable indicates whether the data for this interval is valid.')
xfPMACMInterval15m8192QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 33), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m8192QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m8192QAMStrong.setDescription('Interval count.')
xfPMACMInterval15m8192QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 34), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m8192QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m8192QAMStd.setDescription('Interval count.')
xfPMACMInterval15m8192QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 35), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m8192QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m8192QAMLight.setDescription('Interval count.')
xfPMACMInterval15m16384QAMStrong = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 36), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m16384QAMStrong.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m16384QAMStrong.setDescription('Interval count.')
xfPMACMInterval15m16384QAMStd = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 37), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m16384QAMStd.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m16384QAMStd.setDescription('Interval count.')
xfPMACMInterval15m16384QAMLight = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 6, 1, 38), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMACMInterval15m16384QAMLight.setStatus('current')
if mibBuilder.loadTexts: xfPMACMInterval15m16384QAMLight.setDescription('Interval count.')
xfRLPMMimoCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 7), )
if mibBuilder.loadTexts: xfRLPMMimoCurrentTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMMimoCurrentTable.setDescription('Table for RLT MIMO Current performance data.')
xfRLPMMimoCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMMimoCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMMimoCurrentEntry.setDescription('An entry in the xfRLPMMimoCurrentTable.')
xfPMPerfCurrentEta = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMPerfCurrentEta.setStatus('current')
if mibBuilder.loadTexts: xfPMPerfCurrentEta.setDescription(' Performance Monitoring for Current MIMO Eta Value.')
xfPMPerfEtaMinLast7days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMPerfEtaMinLast7days.setStatus('current')
if mibBuilder.loadTexts: xfPMPerfEtaMinLast7days.setDescription('Indicate ETA Min level for the last 7 days.')
xfPMPerfEtaMaxLast7days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMPerfEtaMaxLast7days.setStatus('current')
if mibBuilder.loadTexts: xfPMPerfEtaMaxLast7days.setDescription('Indicate ETA Max level for the last 7 days.')
xfRLPMMimoCurrent24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 8), )
if mibBuilder.loadTexts: xfRLPMMimoCurrent24hTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMMimoCurrent24hTable.setDescription('Counters for Eta in current 24h.')
xfRLPMMimoCurrent24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMMimoCurrent24hEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMMimoCurrent24hEntry.setDescription('Entry in the xfRLPMMimoCurrent24hTable.')
xfPMPerfCurrent24hElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMPerfCurrent24hElapsedTime.setStatus('current')
if mibBuilder.loadTexts: xfPMPerfCurrent24hElapsedTime.setDescription('The number of seconds that have elapsed since the\n             beginning of the current error-measurement period. ')
xfPMPerfCurrent24hEtaMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMPerfCurrent24hEtaMin.setStatus('current')
if mibBuilder.loadTexts: xfPMPerfCurrent24hEtaMin.setDescription('Performance Monitoring for MIMO Eta Min Value in Current 24h.')
xfPMPerfCurrent24hEtaMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMPerfCurrent24hEtaMax.setStatus('current')
if mibBuilder.loadTexts: xfPMPerfCurrent24hEtaMax.setDescription('Performance Monitoring for Current MIMO 24h Eta Max Value.')
xfRLPMMimoInterval24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 9), )
if mibBuilder.loadTexts: xfRLPMMimoInterval24hTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMMimoInterval24hTable.setDescription('Performance Monitoring for MIMO Eta Min Value in Interval of 24h.')
xfRLPMMimoInterval24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMMimoInterval24hEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMMimoInterval24hEntry.setDescription('Entry in the xfRLPMMimoInterval24hTable.')
xfPMPerfInterval24hValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMPerfInterval24hValidData.setStatus('current')
if mibBuilder.loadTexts: xfPMPerfInterval24hValidData.setDescription('This variable indicates whether the data for this interval is valid.')
xfPMPerfInterval24hEtaMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMPerfInterval24hEtaMin.setStatus('current')
if mibBuilder.loadTexts: xfPMPerfInterval24hEtaMin.setDescription('Performance Monitoring for MIMO Eta Min Value in Interval of 24h.')
xfPMPerfInterval24hEtaMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMPerfInterval24hEtaMax.setStatus('current')
if mibBuilder.loadTexts: xfPMPerfInterval24hEtaMax.setDescription('Performance Monitoring for MIMO Eta Max Value in Interval of 24h.')
xfRLPMMimoCurrent15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 10), )
if mibBuilder.loadTexts: xfRLPMMimoCurrent15mTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMMimoCurrent15mTable.setDescription('Counters for Eta MIMO Current 15m table.')
xfRLPMMimoCurrent15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMMimoCurrent15mEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMMimoCurrent15mEntry.setDescription('Entry in the table.')
xfPMPerfCurrent15mElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMPerfCurrent15mElapsedTime.setStatus('current')
if mibBuilder.loadTexts: xfPMPerfCurrent15mElapsedTime.setDescription('The number of seconds that have elapsed since the\n             beginning of the current error-measurement period')
xfPMPerfCurrent15mEtaMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMPerfCurrent15mEtaMin.setStatus('current')
if mibBuilder.loadTexts: xfPMPerfCurrent15mEtaMin.setDescription('Performance Monitoring for MIMO Eta Min Value in Current 15m.')
xfPMPerfCurrent15mEtaMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMPerfCurrent15mEtaMax.setStatus('current')
if mibBuilder.loadTexts: xfPMPerfCurrent15mEtaMax.setDescription('Performance Monitoring for MIMO Eta Max Value in Current 15m.')
xfRLPMMimoInterval15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 11), )
if mibBuilder.loadTexts: xfRLPMMimoInterval15mTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMMimoInterval15mTable.setDescription('Counters for Eta MIMO for Interval 15m.')
xfRLPMMimoInterval15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "XF-RADIOLINK-RLT-MIB", "xfPMPerfInterval15mIntervalNumber"))
if mibBuilder.loadTexts: xfRLPMMimoInterval15mEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMMimoInterval15mEntry.setDescription('Entry in the table.')
xfPMPerfInterval15mIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMPerfInterval15mIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: xfPMPerfInterval15mIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which\n             the set of statistics is available. The interval identified by 1\n             is the most recently completed 15 minute interval, and the interval\n             identified by N is the interval immediately preceding the one\n             identified by N-1.')
xfPMPerfInterval15mEtaMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMPerfInterval15mEtaMin.setStatus('current')
if mibBuilder.loadTexts: xfPMPerfInterval15mEtaMin.setDescription('Performance Monitoring for MIMO Eta Min Value in Interval 15m.')
xfPMPerfInterval15mEtaMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMPerfInterval15mEtaMax.setStatus('current')
if mibBuilder.loadTexts: xfPMPerfInterval15mEtaMax.setDescription('Performance Monitoring for MIMO Eta Max Value in Interval 15m.')
xfPMPerfInterval15mValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 2, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMPerfInterval15mValidData.setStatus('current')
if mibBuilder.loadTexts: xfPMPerfInterval15mValidData.setDescription('This variable indicates whether the data for this interval is valid.')
xfRadioLinkRltCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 3, 1))
xfRadioLinkRltGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 3, 2))
xfRadioLinkRltFullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 3, 1, 1)).setObjects(("XF-RADIOLINK-RLT-MIB", "xfRadioLinkRltCompleteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xfRadioLinkRltFullCompliance = xfRadioLinkRltFullCompliance.setStatus('current')
if mibBuilder.loadTexts: xfRadioLinkRltFullCompliance.setDescription('The compliance statement for SNMP entities which implement everything.')
xfRadioLinkRltCompleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 5, 3, 2, 1))
for _xfRadioLinkRltCompleteGroup_obj in [[("XF-RADIOLINK-RLT-MIB", "cgIfIndex"), ("XF-RADIOLINK-RLT-MIB", "cgTypeIndex"), ("XF-RADIOLINK-RLT-MIB", "xfIfStatus"), ("XF-RADIOLINK-RLT-MIB", "liEntLogicalIndex"), ("XF-RADIOLINK-RLT-MIB", "liIfIndex"), ("XF-RADIOLINK-RLT-MIB", "xfLIName"), ("XF-RADIOLINK-RLT-MIB", "xfLIIfDescr"), ("XF-RADIOLINK-RLT-MIB", "xfCarrierTermDistinguishedName"), ("XF-RADIOLINK-RLT-MIB", "xfCarrierTermLabel"), ("XF-RADIOLINK-RLT-MIB", "xfCarrierTermOperStatus"), ("XF-RADIOLINK-RLT-MIB", "xfCarrierTermRadioFrameId"), ("XF-RADIOLINK-RLT-MIB", "xfCarrierTermPreamble"), ("XF-RADIOLINK-RLT-MIB", "xfCarrierTermSelectedMinACM"), ("XF-RADIOLINK-RLT-MIB", "xfCarrierTermActualACM"), ("XF-RADIOLINK-RLT-MIB", "xfCarrierTermSelectedMaxACM"), ("XF-RADIOLINK-RLT-MIB", "xfCarrierTermCapabilitiesLastChange"), ("XF-RADIOLINK-RLT-MIB", "xfCarrierTermReferenceSEC"), ("XF-RADIOLINK-RLT-MIB", "xfCarrierTermWantedLicensedCapacity"), ("XF-RADIOLINK-RLT-MIB", "xfCarrierTermActualLicensedCapacity"), ("XF-RADIOLINK-RLT-MIB", "xfCarrierTermActualCapacity"), ("XF-RADIOLINK-RLT-MIB", "xfCarrierTermPolarization"), ("XF-RADIOLINK-RLT-MIB", "xfCarrierTermXPICOperStatus"), ("XF-RADIOLINK-RLT-MIB", "xfCarrierTermMIMOOperStatus"), ("XF-RADIOLINK-RLT-MIB", "xfCarrierTermSNIR"), ("XF-RADIOLINK-RLT-MIB", "xfCarrierTermXPI"), ("XF-RADIOLINK-RLT-MIB", "xfCarrierTermReset"), ("XF-RADIOLINK-RLT-MIB", "xfCarrierTermRestore"), ("XF-RADIOLINK-RLT-MIB", "xfCarrierTermAutoRemoveLoopEnable"), ("XF-RADIOLINK-RLT-MIB", "xfCarrierTermBerAlarmThreshold"), ("XF-RADIOLINK-RLT-MIB", "xfCarrierTermActualRxACM"), ("XF-RADIOLINK-RLT-MIB", "xfCarrierTermFeCTSeverity"), ("XF-RADIOLINK-RLT-MIB", "xfRadioFrameId"), ("XF-RADIOLINK-RLT-MIB", "xfChannelSpacing"), ("XF-RADIOLINK-RLT-MIB", "xfFrameFormatType"), ("XF-RADIOLINK-RLT-MIB", "xfMinACMCapacity"), ("XF-RADIOLINK-RLT-MIB", "xfMaxACMCapacity"), ("XF-RADIOLINK-RLT-MIB", "xfACMProfile"), ("XF-RADIOLINK-RLT-MIB", "xfACMIndex"), ("XF-RADIOLINK-RLT-MIB", "xfACMCapacity"), ("XF-RADIOLINK-RLT-MIB", "rltEntLogicalIndex"), ("XF-RADIOLINK-RLT-MIB", "xfRLTDistinguishedName"), ("XF-RADIOLINK-RLT-MIB", "xfRLTIpAddress"), ("XF-RADIOLINK-RLT-MIB", "xfRLTIPv6Address"), ("XF-RADIOLINK-RLT-MIB", "xfRLTNeName"), ("XF-RADIOLINK-RLT-MIB", "xfRLTNeType"), ("XF-RADIOLINK-RLT-MIB", "xfRLTId"), ("XF-RADIOLINK-RLT-MIB", "xfRLTExpectedFarEndId"), ("XF-RADIOLINK-RLT-MIB", "xfRLTFarEndIdCheck"), ("XF-RADIOLINK-RLT-MIB", "xfRLTStatus"), ("XF-RADIOLINK-RLT-MIB", "xfRLTMode"), ("XF-RADIOLINK-RLT-MIB", "xfRLTActualTXTotalCapacity"), ("XF-RADIOLINK-RLT-MIB", "xfRLTActualTXPacketCapacity"), ("XF-RADIOLINK-RLT-MIB", "xfRLTLimitedTotalCapacity"), ("XF-RADIOLINK-RLT-MIB", "xfRLTRltSeverity"), ("XF-RADIOLINK-RLT-MIB", "xfRLTCapability"), ("XF-RADIOLINK-RLT-MIB", "xfRLTInventoryLastChange"), ("XF-RADIOLINK-RLT-MIB", "xfRLTCpriMode"), ("XF-RADIOLINK-RLT-MIB", "xfRLTReset"), ("XF-RADIOLINK-RLT-MIB", "xfRLTMeasuredHopLength"), ("XF-RADIOLINK-RLT-MIB", "trEntLogicalIndex"), ("XF-RADIOLINK-RLT-MIB", "xfTDMEnable"), ("XF-RADIOLINK-RLT-MIB", "xfRLTDMIfIndex"), ("XF-RADIOLINK-RLT-MIB", "xfActualTDMCapacity"), ("XF-RADIOLINK-RLT-MIB", "xfWantedTDMAllocation"), ("XF-RADIOLINK-RLT-MIB", "xfActualTDMAllocation"), ("XF-RADIOLINK-RLT-MIB", "xfTDMIfAlarms"), ("XF-RADIOLINK-RLT-MIB", "xfTDMRxLoop"), ("XF-RADIOLINK-RLT-MIB", "xfTDMDistinguishedName"), ("XF-RADIOLINK-RLT-MIB", "xfTDMMaxTributaries"), ("XF-RADIOLINK-RLT-MIB", "xfTDMHopLength"), ("XF-RADIOLINK-RLT-MIB", "xfCGIfIndex"), ("XF-RADIOLINK-RLT-MIB", "xfCGIfMinSpeed"), ("XF-RADIOLINK-RLT-MIB", "xfCGIfMaxSpeed"), ("XF-RADIOLINK-RLT-MIB", "xfCGIfRCNum"), ("XF-RADIOLINK-RLT-MIB", "xfCGIfAlarms"), ("XF-RADIOLINK-RLT-MIB", "xfCGIfHopViewStatus"), ("XF-RADIOLINK-RLT-MIB", "xpicPairEntLogicalIIndex"), ("XF-RADIOLINK-RLT-MIB", "xfXPICPairAdminStatus"), ("XF-RADIOLINK-RLT-MIB", "xfXPICPairNumber"), ("XF-RADIOLINK-RLT-MIB", "xfXPICPairRecovery"), ("XF-RADIOLINK-RLT-MIB", "xfXPICPairRestore"), ("XF-RADIOLINK-RLT-MIB", "xfXPICCTmember1"), ("XF-RADIOLINK-RLT-MIB", "xfXPICCTmember2"), ("XF-RADIOLINK-RLT-MIB", "xfXPICAutoRestore"), ("XF-RADIOLINK-RLT-MIB", "xfXpicPairIndex"), ("XF-RADIOLINK-RLT-MIB", "mimoGroupEntLogicalIIndex"), ("XF-RADIOLINK-RLT-MIB", "xfMIMOGroupAdminStatus"), ("XF-RADIOLINK-RLT-MIB", "xfMIMOGroupNumber"), ("XF-RADIOLINK-RLT-MIB", "xfMIMOGroupRecovery"), ("XF-RADIOLINK-RLT-MIB", "xfMIMOGroupRestore"), ("XF-RADIOLINK-RLT-MIB", "xfMIMOCTmember1"), ("XF-RADIOLINK-RLT-MIB", "xfMIMOCTmember2"), ("XF-RADIOLINK-RLT-MIB", "xfMIMOCTmember3"), ("XF-RADIOLINK-RLT-MIB", "xfMIMOCTmember4"), ("XF-RADIOLINK-RLT-MIB", "xfPMTimeElapsed"), ("XF-RADIOLINK-RLT-MIB", "xfPMCurrentES"), ("XF-RADIOLINK-RLT-MIB", "xfPMCurrentSES"), ("XF-RADIOLINK-RLT-MIB", "xfPMCurrentBBE"), ("XF-RADIOLINK-RLT-MIB", "xfPMCurrentUAS"), ("XF-RADIOLINK-RLT-MIB", "xfPMCurrentBB"), ("XF-RADIOLINK-RLT-MIB", "xfPMPerfReset"), ("XF-RADIOLINK-RLT-MIB", "xfPMCurrentESR"), ("XF-RADIOLINK-RLT-MIB", "xfPMCurrentSESR"), ("XF-RADIOLINK-RLT-MIB", "xfPMCurrentBBER"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMSetThreshold15m"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMSetThreshold24h"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMResetThreshold15m"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMStatus"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMValidData"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h4QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h4QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h4QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h16QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h16QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h16QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h32QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h32QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h32QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h64QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h64QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h64QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h128QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h128QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h128QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h256QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h256QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h256QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h512QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h512QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h512QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h1024QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h1024QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h1024QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h2048QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h2048QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h2048QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h4096QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h4096QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h4096QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h8192QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h8192QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h8192QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h16384QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h16384QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent24h16384QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h4QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h4QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h4QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h16QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h16QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h16QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h32QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h32QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h32QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h64QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h64QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h64QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h128QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h128QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h128QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h256QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h256QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h256QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h512QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h512QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h512QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h1024QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h1024QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h1024QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h2048QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h2048QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h2048QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h4096QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h4096QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h4096QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24hValidData"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h8192QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h8192QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h8192QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h16384QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h16384QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval24h16384QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m4QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m4QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m4QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m16QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m16QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m16QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m32QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m32QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m32QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m64QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m64QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m64QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m128QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m128QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m128QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m256QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m256QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m256QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m512QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m512QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m512QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m1024QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m1024QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m1024QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m2048QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m2048QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m2048QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m4096QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m4096QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m4096QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m8192QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m8192QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m8192QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m16384QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m16384QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMCurrent15m16384QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15mIntervalNumber"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m4QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m4QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m4QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m16QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m16QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m16QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m32QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m32QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m32QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m64QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m64QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m64QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m128QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m128QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m128QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m256QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m256QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m256QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m512QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m512QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m512QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m1024QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m1024QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m1024QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m2048QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m2048QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m2048QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m4096QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m4096QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m4096QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15mValidData"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m8192QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m8192QAMStd"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m8192QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m16384QAMStrong"), ("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m16384QAMStd")], [("XF-RADIOLINK-RLT-MIB", "xfPMACMInterval15m16384QAMLight"), ("XF-RADIOLINK-RLT-MIB", "xfRLWANIfIndex"), ("XF-RADIOLINK-RLT-MIB", "xfRLWANDistinguishedName"), ("XF-RADIOLINK-RLT-MIB", "xfRLWANCompAdminStatus"), ("XF-RADIOLINK-RLT-MIB", "xfRLWANCompConnStatus"), ("XF-RADIOLINK-RLT-MIB", "xfRLWANMlhcMplsMode"), ("XF-RADIOLINK-RLT-MIB", "xfRLWANMlhcOperStatus"), ("XF-RADIOLINK-RLT-MIB", "xfRLWANPlcOperStatus"), ("XF-RADIOLINK-RLT-MIB", "xfRLWANActualCapacity"), ("XF-RADIOLINK-RLT-MIB", "xfRLWANLimitedCapacity"), ("XF-RADIOLINK-RLT-MIB", "xfRLTMHIndex"), ("XF-RADIOLINK-RLT-MIB", "xfRLTModuleIndex"), ("XF-RADIOLINK-RLT-MIB", "xfRLTEntPhysicalIndex"), ("XF-RADIOLINK-RLT-MIB", "xfRLTPhysicalCointainedIn"), ("XF-RADIOLINK-RLT-MIB", "xfRLTPhysicalParentRelPos"), ("XF-RADIOLINK-RLT-MIB", "xfRLTEntityPhysicalDescr"), ("XF-RADIOLINK-RLT-MIB", "xfRLTModuleSlotPosition"), ("XF-RADIOLINK-RLT-MIB", "xfRLTNEDistinguishedName"), ("XF-RADIOLINK-RLT-MIB", "xfRLTFEDistinguishedName"), ("XF-RADIOLINK-RLT-MIB", "xfRLTInterfaceIndex"), ("XF-RADIOLINK-RLT-MIB", "xfRLTHighestSeverityAlarm"), ("XF-RADIOLINK-RLT-MIB", "xfRLTProtIndex"), ("XF-RADIOLINK-RLT-MIB", "xfRLTProtectionSwitchMode"), ("XF-RADIOLINK-RLT-MIB", "xfRLTProtectionStatus"), ("XF-RADIOLINK-RLT-MIB", "xfRLTRevertivePreferredTX"), ("XF-RADIOLINK-RLT-MIB", "xfRLTProtectionWaitToRestoreTime"), ("XF-RADIOLINK-RLT-MIB", "xfRLTFadeNotificationTimer"), ("XF-RADIOLINK-RLT-MIB", "xfRLTManualSwitchCommand"), ("XF-RADIOLINK-RLT-MIB", "xfRLTTxSwitchOverConfiguration"), ("XF-RADIOLINK-RLT-MIB", "xfRLTTxSwitchOverAlarmReset"), ("XF-RADIOLINK-RLT-MIB", "xfRLTNumOfRLPSwitch"), ("XF-RADIOLINK-RLT-MIB", "xfRLTEnhancedACMProtectionMode"), ("XF-RADIOLINK-RLT-MIB", "xfRLTEnhancedACMProtectionOperStatus"), ("XF-RADIOLINK-RLT-MIB", "xfRLTEncryptionIndex"), ("XF-RADIOLINK-RLT-MIB", "xfRLTEncryptionAdminStatus"), ("XF-RADIOLINK-RLT-MIB", "xfRLTEncryptionOperStatus"), ("XF-RADIOLINK-RLT-MIB", "xfRLTEncryptionMasterKey"), ("XF-RADIOLINK-RLT-MIB", "xfPMPerfCurrentEta"), ("XF-RADIOLINK-RLT-MIB", "xfPMPerfEtaMinLast7days"), ("XF-RADIOLINK-RLT-MIB", "xfPMPerfEtaMaxLast7days"), ("XF-RADIOLINK-RLT-MIB", "xfPMPerfCurrent24hElapsedTime"), ("XF-RADIOLINK-RLT-MIB", "xfPMPerfCurrent24hEtaMin"), ("XF-RADIOLINK-RLT-MIB", "xfPMPerfCurrent24hEtaMax"), ("XF-RADIOLINK-RLT-MIB", "xfPMPerfInterval24hValidData"), ("XF-RADIOLINK-RLT-MIB", "xfPMPerfInterval24hEtaMin"), ("XF-RADIOLINK-RLT-MIB", "xfPMPerfInterval24hEtaMax"), ("XF-RADIOLINK-RLT-MIB", "xfPMPerfCurrent15mElapsedTime"), ("XF-RADIOLINK-RLT-MIB", "xfPMPerfCurrent15mEtaMin"), ("XF-RADIOLINK-RLT-MIB", "xfPMPerfCurrent15mEtaMax"), ("XF-RADIOLINK-RLT-MIB", "xfPMPerfInterval15mIntervalNumber"), ("XF-RADIOLINK-RLT-MIB", "xfPMPerfInterval15mEtaMin"), ("XF-RADIOLINK-RLT-MIB", "xfPMPerfInterval15mEtaMax"), ("XF-RADIOLINK-RLT-MIB", "xfPMPerfInterval15mValidData")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        xfRadioLinkRltCompleteGroup = xfRadioLinkRltCompleteGroup.setObjects(*_xfRadioLinkRltCompleteGroup_obj)
    else:
        xfRadioLinkRltCompleteGroup = xfRadioLinkRltCompleteGroup.setObjects(*_xfRadioLinkRltCompleteGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xfRadioLinkRltCompleteGroup = xfRadioLinkRltCompleteGroup.setStatus('current')
if mibBuilder.loadTexts: xfRadioLinkRltCompleteGroup.setDescription('A collection of all current objects in this MIB module')
mibBuilder.exportSymbols("XF-RADIOLINK-RLT-MIB", xfRLTManualSwitchCommand=xfRLTManualSwitchCommand, xfPMACMCurrent15m128QAMLight=xfPMACMCurrent15m128QAMLight, xfPMACMInterval24h16QAMStrong=xfPMACMInterval24h16QAMStrong, xfCarrierTermActualLicensedCapacity=xfCarrierTermActualLicensedCapacity, xfCarrierTermActualCapacity=xfCarrierTermActualCapacity, cgIfIndex=cgIfIndex, xfIfStatus=xfIfStatus, xfRLWANIfEntry=xfRLWANIfEntry, xfPMCurrentUAS=xfPMCurrentUAS, xfXPICAutoRestore=xfXPICAutoRestore, xfMIMOGroupEntry=xfMIMOGroupEntry, xfCarrierTermXPI=xfCarrierTermXPI, xfChannelSpacing=xfChannelSpacing, xfPMACMInterval24h512QAMStrong=xfPMACMInterval24h512QAMStrong, xfPMACMInterval15m64QAMStd=xfPMACMInterval15m64QAMStd, xfRLPMMimoInterval24hEntry=xfRLPMMimoInterval24hEntry, xfPMACMCurrent24h64QAMStrong=xfPMACMCurrent24h64QAMStrong, xfPMACMInterval24h128QAMStd=xfPMACMInterval24h128QAMStd, xfRLWANIfIndex=xfRLWANIfIndex, xfCarrierTermDistinguishedName=xfCarrierTermDistinguishedName, xfPMACMInterval15m32QAMStrong=xfPMACMInterval15m32QAMStrong, xfRLTLimitedTotalCapacity=xfRLTLimitedTotalCapacity, xfPMACMCurrent15m2048QAMStrong=xfPMACMCurrent15m2048QAMStrong, xfTrafficTable=xfTrafficTable, xfRLTMHIndex=xfRLTMHIndex, xfRLTEnhancedACMProtectionMode=xfRLTEnhancedACMProtectionMode, xfRLWANActualCapacity=xfRLWANActualCapacity, xfPMACMCurrent24h4QAMStrong=xfPMACMCurrent24h4QAMStrong, xfPMACMCurrent24h32QAMStd=xfPMACMCurrent24h32QAMStd, xfPMACMInterval15m32QAMStd=xfPMACMInterval15m32QAMStd, xfPMACMValidData=xfPMACMValidData, xfPMACMInterval15m128QAMStd=xfPMACMInterval15m128QAMStd, xfRLTStatus=xfRLTStatus, xfTDMIfAlarms=xfTDMIfAlarms, xfPMACMInterval15m4096QAMStd=xfPMACMInterval15m4096QAMStd, xfTDMDistinguishedName=xfTDMDistinguishedName, xfPMACMInterval24h16384QAMLight=xfPMACMInterval24h16384QAMLight, xfRLWANCompAdminStatus=xfRLWANCompAdminStatus, xfPMACMInterval24h4QAMLight=xfPMACMInterval24h4QAMLight, xfRLTCpriMode=xfRLTCpriMode, xfPMACMInterval24h64QAMStd=xfPMACMInterval24h64QAMStd, xfCarrierTermSNIR=xfCarrierTermSNIR, xfPMACMCurrent15m1024QAMLight=xfPMACMCurrent15m1024QAMLight, xfRLWANCompConnStatus=xfRLWANCompConnStatus, xfRLTProtectionSwitchMode=xfRLTProtectionSwitchMode, xfCarrierTermRadioFrameId=xfCarrierTermRadioFrameId, xfPMPerfInterval15mEtaMin=xfPMPerfInterval15mEtaMin, xfRLTFarEndIdCheck=xfRLTFarEndIdCheck, xfXPICPairAdminStatus=xfXPICPairAdminStatus, xfPMACMInterval24h8192QAMLight=xfPMACMInterval24h8192QAMLight, xfPMACMCurrent24h256QAMLight=xfPMACMCurrent24h256QAMLight, xfCGIfEntry=xfCGIfEntry, xfPMACMCurrent15m16384QAMLight=xfPMACMCurrent15m16384QAMLight, xfXPICPairRestore=xfXPICPairRestore, xfTDMMaxTributaries=xfTDMMaxTributaries, xfCarrierTermAutoRemoveLoopEnable=xfCarrierTermAutoRemoveLoopEnable, xfPMACMCurrent24h1024QAMStd=xfPMACMCurrent24h1024QAMStd, xfRLTPhysicalParentRelPos=xfRLTPhysicalParentRelPos, xfPMACMInterval15m16384QAMLight=xfPMACMInterval15m16384QAMLight, xfPMACMCurrent24h8192QAMLight=xfPMACMCurrent24h8192QAMLight, cgTypeIndex=cgTypeIndex, xfTDMEnable=xfTDMEnable, xfPMACMCurrent24h16384QAMStrong=xfPMACMCurrent24h16384QAMStrong, xfRLTReset=xfRLTReset, xfRLTIPv6Address=xfRLTIPv6Address, xfPMACMInterval24h4096QAMStd=xfPMACMInterval24h4096QAMStd, xfPMACMInterval24h16384QAMStd=xfPMACMInterval24h16384QAMStd, xfPMACMInterval15m256QAMStrong=xfPMACMInterval15m256QAMStrong, xfPMACMCurrent15m32QAMStd=xfPMACMCurrent15m32QAMStd, xfPMACMCurrent15m1024QAMStd=xfPMACMCurrent15m1024QAMStd, xfMIMOGroupNumber=xfMIMOGroupNumber, xfPMACMInterval15m32QAMLight=xfPMACMInterval15m32QAMLight, xfPMACMInterval15m512QAMLight=xfPMACMInterval15m512QAMLight, xfPMACMCurrent24h256QAMStd=xfPMACMCurrent24h256QAMStd, xfRLTActualTXTotalCapacity=xfRLTActualTXTotalCapacity, xfPMACMCurrent24h2048QAMStrong=xfPMACMCurrent24h2048QAMStrong, xfPMACMCurrent24h128QAMStd=xfPMACMCurrent24h128QAMStd, xfPMACMInterval24h2048QAMStrong=xfPMACMInterval24h2048QAMStrong, xfRLTNumOfRLPSwitch=xfRLTNumOfRLPSwitch, xfMIMOGroupRecovery=xfMIMOGroupRecovery, xfPMACMCurrent24h16384QAMStd=xfPMACMCurrent24h16384QAMStd, liIfIndex=liIfIndex, xfRLTProtectionStatus=xfRLTProtectionStatus, xfPMTimeElapsed=xfPMTimeElapsed, xfPMACMInterval24h8192QAMStd=xfPMACMInterval24h8192QAMStd, xfPMACMInterval15m4096QAMLight=xfPMACMInterval15m4096QAMLight, xfPMACMInterval15m512QAMStrong=xfPMACMInterval15m512QAMStrong, xfPMACMCurrent24h128QAMStrong=xfPMACMCurrent24h128QAMStrong, xfPMACMInterval15mValidData=xfPMACMInterval15mValidData, xfXPICPairRecovery=xfXPICPairRecovery, xfRLTCapability=xfRLTCapability, xfMinACMCapacity=xfMinACMCapacity, xfRLTEntityPhysicalDescr=xfRLTEntityPhysicalDescr, xfPMACMStatus=xfPMACMStatus, xfPMACMCurrent24h4096QAMStd=xfPMACMCurrent24h4096QAMStd, xfPMACMInterval24h256QAMStrong=xfPMACMInterval24h256QAMStrong, xfPMACMInterval15m2048QAMStrong=xfPMACMInterval15m2048QAMStrong, xfRLTHighestSeverityAlarm=xfRLTHighestSeverityAlarm, xfCGIfHopViewStatus=xfCGIfHopViewStatus, xfRLPMMimoCurrentTable=xfRLPMMimoCurrentTable, xfCarrierTerminationCapabilityEntry=xfCarrierTerminationCapabilityEntry, xfPMACMCurrent24h4096QAMLight=xfPMACMCurrent24h4096QAMLight, xfPMCurrentSES=xfPMCurrentSES, xfPMPerfEtaMinLast7days=xfPMPerfEtaMinLast7days, xfACMCapacity=xfACMCapacity, xfRLTTxSwitchOverAlarmReset=xfRLTTxSwitchOverAlarmReset, xfRLTNeName=xfRLTNeName, xfPMACMCurrent15m8192QAMLight=xfPMACMCurrent15m8192QAMLight, xfPMACMInterval24h128QAMStrong=xfPMACMInterval24h128QAMStrong, xfPMACMCurrent15m128QAMStd=xfPMACMCurrent15m128QAMStd, xfPMACMCurrent15m256QAMStrong=xfPMACMCurrent15m256QAMStrong, xfPMACMCurrent15m8192QAMStd=xfPMACMCurrent15m8192QAMStd, xfLIIfDescr=xfLIIfDescr, xfPMACMCurrent15m4096QAMStrong=xfPMACMCurrent15m4096QAMStrong, xfPMACMCurrent24h32QAMLight=xfPMACMCurrent24h32QAMLight, xfPMACMInterval24h8192QAMStrong=xfPMACMInterval24h8192QAMStrong, xfPMACMCurrent24h2048QAMStd=xfPMACMCurrent24h2048QAMStd, xfRLTDMIfIndex=xfRLTDMIfIndex, xfRLTEncryptionAdminStatus=xfRLTEncryptionAdminStatus, xfPMCurrentESR=xfPMCurrentESR, xfXPICCTmember1=xfXPICCTmember1, xfPMACMInterval24h32QAMStd=xfPMACMInterval24h32QAMStd, xfPMACMCurrent24h16384QAMLight=xfPMACMCurrent24h16384QAMLight, xfPMACMSetThreshold15m=xfPMACMSetThreshold15m, xfCGIfRCNum=xfCGIfRCNum, xfPMACMCurrent24h512QAMLight=xfPMACMCurrent24h512QAMLight, xfPMACMCurrent15m64QAMLight=xfPMACMCurrent15m64QAMLight, xfPMPerfCurrent15mElapsedTime=xfPMPerfCurrent15mElapsedTime, xfPMACMCurrent15m64QAMStrong=xfPMACMCurrent15m64QAMStrong, xfRLTEntry=xfRLTEntry, xfPMACMCurrent24h64QAMStd=xfPMACMCurrent24h64QAMStd, xfFrameFormatType=xfFrameFormatType, xfPMACMInterval15mIntervalNumber=xfPMACMInterval15mIntervalNumber, xfPMPerfEtaMaxLast7days=xfPMPerfEtaMaxLast7days, xfPMACMCurrent15m16QAMStd=xfPMACMCurrent15m16QAMStd, xfPMACMInterval15m16QAMLight=xfPMACMInterval15m16QAMLight, xfPMPerfInterval15mValidData=xfPMPerfInterval15mValidData, xfPMACMInterval24hValidData=xfPMACMInterval24hValidData, xfPMACMInterval15m128QAMLight=xfPMACMInterval15m128QAMLight, xfRadioFrameId=xfRadioFrameId, xfPMACMInterval24h16QAMLight=xfPMACMInterval24h16QAMLight, xpicPairEntLogicalIIndex=xpicPairEntLogicalIIndex, xfChannelGroupTable=xfChannelGroupTable, xfRLTDMIfTable=xfRLTDMIfTable, xfCarrierTermBerAlarmThreshold=xfCarrierTermBerAlarmThreshold, xfPMACMCurrent24h4096QAMStrong=xfPMACMCurrent24h4096QAMStrong, xfPMACMCurrent15m16QAMLight=xfPMACMCurrent15m16QAMLight, xfCarrierTermRestore=xfCarrierTermRestore, xfPMACMCurrent15m1024QAMStrong=xfPMACMCurrent15m1024QAMStrong, xfPMACMInterval24h16QAMStd=xfPMACMInterval24h16QAMStd, xfPMACMInterval24h2048QAMLight=xfPMACMInterval24h2048QAMLight, xfXPICCTmember2=xfXPICCTmember2, xfRLTInventoryLastChange=xfRLTInventoryLastChange, xfRLTProtectionTable=xfRLTProtectionTable, xfRLPMACMInterval24hEntry=xfRLPMACMInterval24hEntry, xfCarrierTermFeCTSeverity=xfCarrierTermFeCTSeverity, xfPMACMInterval15m16QAMStrong=xfPMACMInterval15m16QAMStrong, xfPMACMCurrent24h32QAMStrong=xfPMACMCurrent24h32QAMStrong, xfCarrierTermActualACM=xfCarrierTermActualACM, xfPMACMInterval15m16384QAMStrong=xfPMACMInterval15m16384QAMStrong, xfPMPerfInterval15mIntervalNumber=xfPMPerfInterval15mIntervalNumber, xfRLPMMimoCurrentEntry=xfRLPMMimoCurrentEntry, xfLIName=xfLIName, xfPMPerfCurrent24hEtaMin=xfPMPerfCurrent24hEtaMin, xfPMACMInterval24h4QAMStrong=xfPMACMInterval24h4QAMStrong, xfRLTEnhancedACMProtectionOperStatus=xfRLTEnhancedACMProtectionOperStatus, xfPMPerfCurrent15mEtaMin=xfPMPerfCurrent15mEtaMin, xfRLTFadeNotificationTimer=xfRLTFadeNotificationTimer, xfRLTMeasuredHopLength=xfRLTMeasuredHopLength, xfPMPerfInterval15mEtaMax=xfPMPerfInterval15mEtaMax, xfPMACMCurrent15m32QAMLight=xfPMACMCurrent15m32QAMLight, xfPMACMCurrent24h4QAMLight=xfPMACMCurrent24h4QAMLight, xfPMACMInterval24h128QAMLight=xfPMACMInterval24h128QAMLight, xfCarrierTermSelectedMaxACM=xfCarrierTermSelectedMaxACM, xfPMPerfInterval24hEtaMin=xfPMPerfInterval24hEtaMin, xfChannelGroupEntry=xfChannelGroupEntry, xfMIMOCTmember2=xfMIMOCTmember2, xfPMACMCurrent24h16QAMLight=xfPMACMCurrent24h16QAMLight, xfRLPMACMConfigTable=xfRLPMACMConfigTable, xfPMACMCurrent24h16QAMStd=xfPMACMCurrent24h16QAMStd, xfPMPerfCurrent24hEtaMax=xfPMPerfCurrent24hEtaMax, xfRLTId=xfRLTId, xfPMACMCurrent15m256QAMStd=xfPMACMCurrent15m256QAMStd, xfRadioLinkRltObjects=xfRadioLinkRltObjects, xfCarrierTermActualRxACM=xfCarrierTermActualRxACM, xfPMACMCurrent15m2048QAMStd=xfPMACMCurrent15m2048QAMStd, xfCGIfTable=xfCGIfTable, xfPMPerfCurrent15mEtaMax=xfPMPerfCurrent15mEtaMax, xfPMACMInterval15m1024QAMStrong=xfPMACMInterval15m1024QAMStrong, xfCarrierTermReferenceSEC=xfCarrierTermReferenceSEC, xfCGIfMaxSpeed=xfCGIfMaxSpeed, xfRLTHierarchyModuleEntry=xfRLTHierarchyModuleEntry, xfPMACMInterval24h1024QAMLight=xfPMACMInterval24h1024QAMLight, xfLIMappingTable=xfLIMappingTable, xfRLPMMimoCurrent15mEntry=xfRLPMMimoCurrent15mEntry, xfPMACMCurrent15m4QAMStrong=xfPMACMCurrent15m4QAMStrong, xfRadioLinkRltPmObjects=xfRadioLinkRltPmObjects, xfRLWANDistinguishedName=xfRLWANDistinguishedName, xfRLWANPlcOperStatus=xfRLWANPlcOperStatus, xfRLTEncryptionMasterKey=xfRLTEncryptionMasterKey, xfXPICPairEntry=xfXPICPairEntry, xfActualTDMAllocation=xfActualTDMAllocation, xfACMProfileCapacityEntry=xfACMProfileCapacityEntry, xfPMACMInterval15m2048QAMStd=xfPMACMInterval15m2048QAMStd, xfMIMOGroupRestore=xfMIMOGroupRestore, xfXPICPairNumber=xfXPICPairNumber, xfCarrierTermLabel=xfCarrierTermLabel, xfCarrierTermPolarization=xfCarrierTermPolarization, xfPMACMCurrent24h256QAMStrong=xfPMACMCurrent24h256QAMStrong, xfPMACMCurrent15m128QAMStrong=xfPMACMCurrent15m128QAMStrong, xfPMCurrentBBER=xfPMCurrentBBER, xfRLTEncryptionIndex=xfRLTEncryptionIndex, xfPMACMCurrent24h8192QAMStd=xfPMACMCurrent24h8192QAMStd, xfRLTEncryptionEntry=xfRLTEncryptionEntry, xfPMACMCurrent24h1024QAMLight=xfPMACMCurrent24h1024QAMLight, trEntLogicalIndex=trEntLogicalIndex, xfRLTEncryptionTable=xfRLTEncryptionTable, xfPMACMCurrent15m4QAMLight=xfPMACMCurrent15m4QAMLight, xfPMACMCurrent15m16QAMStrong=xfPMACMCurrent15m16QAMStrong, xfRLTTxSwitchOverConfiguration=xfRLTTxSwitchOverConfiguration, xfRLTNeType=xfRLTNeType, xfRLTTable=xfRLTTable, xfPMACMCurrent24h8192QAMStrong=xfPMACMCurrent24h8192QAMStrong, xfRLTRevertivePreferredTX=xfRLTRevertivePreferredTX, xfPMACMCurrent24h512QAMStd=xfPMACMCurrent24h512QAMStd, xfPMACMInterval24h256QAMStd=xfPMACMInterval24h256QAMStd, xfPMACMResetThreshold15m=xfPMACMResetThreshold15m, xfRLPMACMCurrent24hEntry=xfRLPMACMCurrent24hEntry, xfPMACMInterval15m16QAMStd=xfPMACMInterval15m16QAMStd, xfPMACMInterval24h64QAMStrong=xfPMACMInterval24h64QAMStrong, xfMaxACMCapacity=xfMaxACMCapacity, xfRLPMContinuousCounterEntry=xfRLPMContinuousCounterEntry, xfPMACMCurrent24h64QAMLight=xfPMACMCurrent24h64QAMLight, xfPMACMCurrent24h16QAMStrong=xfPMACMCurrent24h16QAMStrong, xfPMACMCurrent15m512QAMLight=xfPMACMCurrent15m512QAMLight, xfCarrierTermReset=xfCarrierTermReset, xfRLTProtectionEntry=xfRLTProtectionEntry, xfRLTNEDistinguishedName=xfRLTNEDistinguishedName, xfPMACMInterval15m1024QAMStd=xfPMACMInterval15m1024QAMStd, xfPMACMCurrent24h512QAMStrong=xfPMACMCurrent24h512QAMStrong, xfRLTModuleIndex=xfRLTModuleIndex, xfRLTActualTXPacketCapacity=xfRLTActualTXPacketCapacity, xfMIMOCTmember4=xfMIMOCTmember4, xfPMACMInterval15m128QAMStrong=xfPMACMInterval15m128QAMStrong, PYSNMP_MODULE_ID=xfRadioLinkRltMIB, xfMIMOCTmember3=xfMIMOCTmember3, xfPMPerfInterval24hEtaMax=xfPMPerfInterval24hEtaMax, xfPMACMCurrent24h2048QAMLight=xfPMACMCurrent24h2048QAMLight, xfCarrierTermMIMOOperStatus=xfCarrierTermMIMOOperStatus, xfPMACMSetThreshold24h=xfPMACMSetThreshold24h, xfRLPMACMCurrent15mEntry=xfRLPMACMCurrent15mEntry, xfACMProfileCapacityTable=xfACMProfileCapacityTable, xfPMCurrentBB=xfPMCurrentBB, xfCGIfMinSpeed=xfCGIfMinSpeed)
mibBuilder.exportSymbols("XF-RADIOLINK-RLT-MIB", xfRLPMMimoCurrent24hTable=xfRLPMMimoCurrent24hTable, xfRLWANMlhcOperStatus=xfRLWANMlhcOperStatus, rltEntLogicalIndex=rltEntLogicalIndex, xfRadioLinkRltMIB=xfRadioLinkRltMIB, liEntLogicalIndex=liEntLogicalIndex, xfRLTFEDistinguishedName=xfRLTFEDistinguishedName, xfPMACMCurrent15m64QAMStd=xfPMACMCurrent15m64QAMStd, xfACMProfile=xfACMProfile, xfRLPMACMCurrent24hTable=xfRLPMACMCurrent24hTable, xfPMACMCurrent15m512QAMStrong=xfPMACMCurrent15m512QAMStrong, xfPMACMInterval15m8192QAMStrong=xfPMACMInterval15m8192QAMStrong, xfPMACMInterval15m512QAMStd=xfPMACMInterval15m512QAMStd, xfPMACMCurrent15m4096QAMStd=xfPMACMCurrent15m4096QAMStd, xfPMACMInterval24h2048QAMStd=xfPMACMInterval24h2048QAMStd, xfWantedTDMAllocation=xfWantedTDMAllocation, xfRLWANMlhcMplsMode=xfRLWANMlhcMplsMode, xfCarrierTerminationEntry=xfCarrierTerminationEntry, xfCarrierTermPreamble=xfCarrierTermPreamble, xfPMACMCurrent15m16384QAMStd=xfPMACMCurrent15m16384QAMStd, xfCarrierTerminationCapabilityTable=xfCarrierTerminationCapabilityTable, xfRLTHierarchyModuleTable=xfRLTHierarchyModuleTable, xfRLTExpectedFarEndId=xfRLTExpectedFarEndId, xfPMACMInterval15m64QAMStrong=xfPMACMInterval15m64QAMStrong, xfPMACMInterval24h512QAMStd=xfPMACMInterval24h512QAMStd, xfRLTProtIndex=xfRLTProtIndex, xfPMACMInterval24h1024QAMStrong=xfPMACMInterval24h1024QAMStrong, xfRLPMMimoInterval15mEntry=xfRLPMMimoInterval15mEntry, xfPMPerfCurrentEta=xfPMPerfCurrentEta, xfLIMappingEntry=xfLIMappingEntry, xfPMCurrentSESR=xfPMCurrentSESR, xfCarrierTerminationTable=xfCarrierTerminationTable, xfPMACMInterval15m1024QAMLight=xfPMACMInterval15m1024QAMLight, xfPMACMInterval15m2048QAMLight=xfPMACMInterval15m2048QAMLight, xfPMPerfInterval24hValidData=xfPMPerfInterval24hValidData, xfPMACMInterval15m64QAMLight=xfPMACMInterval15m64QAMLight, xfPMACMCurrent15m16384QAMStrong=xfPMACMCurrent15m16384QAMStrong, xfRLTEntPhysicalIndex=xfRLTEntPhysicalIndex, xfCarrierTermSelectedMinACM=xfCarrierTermSelectedMinACM, xfPMACMInterval24h32QAMStrong=xfPMACMInterval24h32QAMStrong, xfRLTEncryptionOperStatus=xfRLTEncryptionOperStatus, xfPMACMInterval24h512QAMLight=xfPMACMInterval24h512QAMLight, xfMIMOGroupTable=xfMIMOGroupTable, xfMIMOCTmember1=xfMIMOCTmember1, xfPMACMInterval24h1024QAMStd=xfPMACMInterval24h1024QAMStd, xfPMACMInterval24h64QAMLight=xfPMACMInterval24h64QAMLight, xfPMACMCurrent15m4QAMStd=xfPMACMCurrent15m4QAMStd, xfPMPerfCurrent24hElapsedTime=xfPMPerfCurrent24hElapsedTime, xfCarrierTermCapabilitiesLastChange=xfCarrierTermCapabilitiesLastChange, xfPMACMCurrent15m512QAMStd=xfPMACMCurrent15m512QAMStd, xfXPICPairTable=xfXPICPairTable, xfRLTInterfaceIndex=xfRLTInterfaceIndex, xfPMACMCurrent15m256QAMLight=xfPMACMCurrent15m256QAMLight, xfRLTIpAddress=xfRLTIpAddress, xfRadioLinkRltFullCompliance=xfRadioLinkRltFullCompliance, xfCarrierTermWantedLicensedCapacity=xfCarrierTermWantedLicensedCapacity, xfRLWANLimitedCapacity=xfRLWANLimitedCapacity, mimoGroupEntLogicalIIndex=mimoGroupEntLogicalIIndex, xfRLTModuleSlotPosition=xfRLTModuleSlotPosition, xfRLTMode=xfRLTMode, xfRLPMMimoInterval15mTable=xfRLPMMimoInterval15mTable, xfActualTDMCapacity=xfActualTDMCapacity, xfCGIfIndex=xfCGIfIndex, xfPMACMInterval24h256QAMLight=xfPMACMInterval24h256QAMLight, xfMIMOGroupAdminStatus=xfMIMOGroupAdminStatus, xfPMACMCurrent24h128QAMLight=xfPMACMCurrent24h128QAMLight, xfPMPerfReset=xfPMPerfReset, xfPMACMInterval24h4QAMStd=xfPMACMInterval24h4QAMStd, xfTDMHopLength=xfTDMHopLength, xfPMACMInterval15m256QAMLight=xfPMACMInterval15m256QAMLight, xfPMACMInterval24h4096QAMStrong=xfPMACMInterval24h4096QAMStrong, xfPMACMInterval15m4096QAMStrong=xfPMACMInterval15m4096QAMStrong, xfPMACMInterval15m4QAMLight=xfPMACMInterval15m4QAMLight, xfPMACMCurrent15m32QAMStrong=xfPMACMCurrent15m32QAMStrong, xfTDMRxLoop=xfTDMRxLoop, xfACMIndex=xfACMIndex, xfPMACMCurrent24h4QAMStd=xfPMACMCurrent24h4QAMStd, xfPMACMInterval24h32QAMLight=xfPMACMInterval24h32QAMLight, xfCarrierTermXPICOperStatus=xfCarrierTermXPICOperStatus, xfRLTRltSeverity=xfRLTRltSeverity, xfRadioLinkRltCompleteGroup=xfRadioLinkRltCompleteGroup, xfXpicPairIndex=xfXpicPairIndex, xfPMACMInterval24h4096QAMLight=xfPMACMInterval24h4096QAMLight, xfRadioLinkRltConformance=xfRadioLinkRltConformance, xfRLPMACMInterval24hTable=xfRLPMACMInterval24hTable, xfPMACMCurrent15m8192QAMStrong=xfPMACMCurrent15m8192QAMStrong, xfPMACMInterval15m8192QAMStd=xfPMACMInterval15m8192QAMStd, xfRLPMMimoInterval24hTable=xfRLPMMimoInterval24hTable, xfCarrierTermOperStatus=xfCarrierTermOperStatus, xfPMACMCurrent24h1024QAMStrong=xfPMACMCurrent24h1024QAMStrong, xfPMACMInterval15m8192QAMLight=xfPMACMInterval15m8192QAMLight, xfRLPMMimoCurrent24hEntry=xfRLPMMimoCurrent24hEntry, xfRLPMACMInterval15mEntry=xfRLPMACMInterval15mEntry, xfRLPMContinuousCounterTable=xfRLPMContinuousCounterTable, xfPMCurrentES=xfPMCurrentES, xfPMACMInterval24h16384QAMStrong=xfPMACMInterval24h16384QAMStrong, CarrierTermACMIndex=CarrierTermACMIndex, xfPMACMCurrent15m4096QAMLight=xfPMACMCurrent15m4096QAMLight, xfRLPMMimoCurrent15mTable=xfRLPMMimoCurrent15mTable, xfRadioLinkRltCompliances=xfRadioLinkRltCompliances, xfPMACMInterval15m4QAMStrong=xfPMACMInterval15m4QAMStrong, xfRLTDistinguishedName=xfRLTDistinguishedName, xfRLTProtectionWaitToRestoreTime=xfRLTProtectionWaitToRestoreTime, xfRLTDMIfEntry=xfRLTDMIfEntry, xfRadioLinkRltGroups=xfRadioLinkRltGroups, xfRLTPhysicalCointainedIn=xfRLTPhysicalCointainedIn, xfPMACMInterval15m16384QAMStd=xfPMACMInterval15m16384QAMStd, xfRLPMACMInterval15mTable=xfRLPMACMInterval15mTable, xfRLPMACMConfigEntry=xfRLPMACMConfigEntry, xfPMCurrentBBE=xfPMCurrentBBE, xfTrafficEntry=xfTrafficEntry, xfPMACMInterval15m256QAMStd=xfPMACMInterval15m256QAMStd, xfPMACMCurrent15m2048QAMLight=xfPMACMCurrent15m2048QAMLight, xfRLWANIfTable=xfRLWANIfTable, xfRLPMACMCurrent15mTable=xfRLPMACMCurrent15mTable, xfPMACMInterval15m4QAMStd=xfPMACMInterval15m4QAMStd, xfCGIfAlarms=xfCGIfAlarms)
