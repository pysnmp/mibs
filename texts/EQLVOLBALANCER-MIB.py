#
# PySNMP MIB module EQLVOLBALANCER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/equallogic/EQLVOLBALANCER-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 13:07:34 2024
# On host fv-az883-299 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
UTFString, eqlGroupId = mibBuilder.importSymbols("EQLGROUP-MIB", "UTFString", "eqlGroupId")
eqlMemberIndex, = mibBuilder.importSymbols("EQLMEMBER-MIB", "eqlMemberIndex")
eqlRAIDDeviceLUNIndex, eqlRAIDDeviceUUID = mibBuilder.importSymbols("EQLRAID-MIB", "eqlRAIDDeviceLUNIndex", "eqlRAIDDeviceUUID")
eqlStoragePoolIndex, = mibBuilder.importSymbols("EQLSTORAGEPOOL-MIB", "eqlStoragePoolIndex")
eqliscsiLocalMemberId, eqliscsiVolumeIndex = mibBuilder.importSymbols("EQLVOLUME-MIB", "eqliscsiLocalMemberId", "eqliscsiVolumeIndex")
equalLogic, = mibBuilder.importSymbols("EQUALLOGIC-SMI", "equalLogic")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, NotificationType, MibIdentifier, Unsigned32, TimeTicks, enterprises, Counter64, Counter32, ModuleIdentity, Bits, IpAddress, Opaque, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "MibIdentifier", "Unsigned32", "TimeTicks", "enterprises", "Counter64", "Counter32", "ModuleIdentity", "Bits", "IpAddress", "Opaque", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "ObjectIdentity")
DisplayString, RowStatus, TextualConvention, TruthValue, DateAndTime, RowPointer = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TruthValue", "DateAndTime", "RowPointer")
eqlvolbalancerModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 12740, 14))
eqlvolbalancerModule.setRevisions(('2004-01-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: eqlvolbalancerModule.setRevisionsDescriptions(('Initial revision',))
if mibBuilder.loadTexts: eqlvolbalancerModule.setLastUpdated('201503171528Z')
if mibBuilder.loadTexts: eqlvolbalancerModule.setOrganization('EqualLogic Inc.')
if mibBuilder.loadTexts: eqlvolbalancerModule.setContactInfo('Contact: Customer Support\n         Postal:  Dell Inc\n                  300 Innovative Way, Suite 301, Nashua, NH 03062\n         Tel:     +1 603-579-9762\n         E-mail:  US-NH-CS-TechnicalSupport@dell.com\n         WEB:     www.equallogic.com')
if mibBuilder.loadTexts: eqlvolbalancerModule.setDescription('Equallogic Inc. Storage Array volume information \n\n\n         Copyright (c) 2004-2011 by Dell, Inc.\n\n         All rights reserved.  This software may not be copied, disclosed,\n         transferred, or used except in accordance with a license granted\n         by EqualLogic, Inc.  This software embodies proprietary information\n         and trade secrets of Dell, Inc.\n        ')
eqlvolbalancerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 14, 1))
eqlvolbalancerNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 14, 2))
eqlvolbalancerConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 14, 3))
eqlvolbalancerConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 14, 1, 1))
eqlvolbalancerConfigVolSliceCostFreq = MibScalar((1, 3, 6, 1, 4, 1, 12740, 14, 1, 1, 1), Unsigned32().clone(15)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlvolbalancerConfigVolSliceCostFreq.setStatus('deprecated')
if mibBuilder.loadTexts: eqlvolbalancerConfigVolSliceCostFreq.setDescription('EqualLogic-Dynamic\n                 The frequency which volume-slice statistics are\n                 harvested and stored in the VolumeSliceCost table.')
eqlvolbalancerConfigVolSliceRollupTime = MibScalar((1, 3, 6, 1, 4, 1, 12740, 14, 1, 1, 2), Unsigned32().clone(60)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlvolbalancerConfigVolSliceRollupTime.setStatus('deprecated')
if mibBuilder.loadTexts: eqlvolbalancerConfigVolSliceRollupTime.setDescription('EqualLogic-Dynamic\n                 The time of day at which VolumeSliceCost entries for\n                 the previous day are rolled up and stored in the\n                 DailyVolumeCost table.')
eqlvolbalancerVolumeSliceCostTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 14, 1, 2), )
if mibBuilder.loadTexts: eqlvolbalancerVolumeSliceCostTable.setStatus('deprecated')
if mibBuilder.loadTexts: eqlvolbalancerVolumeSliceCostTable.setDescription('EqualLogic-Persistent Volume Slice Statistic\n                     This table contains incremental cost statistic \n                     values for a volume slice.')
eqlvolbalancerVolumeSliceCostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 14, 1, 2, 1), ).setIndexNames((0, "EQLVOLBALANCER-MIB", "eqlvolbalancerVolumeSliceCostPsaId"), (0, "EQLVOLBALANCER-MIB", "eqlvolbalancerVolumeSliceCostTime"), (0, "EQLVOLBALANCER-MIB", "eqlvolbalancerVolumeSliceCostVolumeId"))
if mibBuilder.loadTexts: eqlvolbalancerVolumeSliceCostEntry.setStatus('deprecated')
if mibBuilder.loadTexts: eqlvolbalancerVolumeSliceCostEntry.setDescription('An entry (row) containing volume slice statistics.')
eqlvolbalancerVolumeSliceCostPsaId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlvolbalancerVolumeSliceCostPsaId.setStatus('deprecated')
if mibBuilder.loadTexts: eqlvolbalancerVolumeSliceCostPsaId.setDescription('uuid_t of the PSA on which the volume slice is located')
eqlvolbalancerVolumeSliceCostTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlvolbalancerVolumeSliceCostTime.setStatus('deprecated')
if mibBuilder.loadTexts: eqlvolbalancerVolumeSliceCostTime.setDescription('the time at which the sample is taken from kernel')
eqlvolbalancerVolumeSliceCostVolumeId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlvolbalancerVolumeSliceCostVolumeId.setStatus('deprecated')
if mibBuilder.loadTexts: eqlvolbalancerVolumeSliceCostVolumeId.setDescription('CPsvId_t of the volume owning the volume slice')
eqlvolbalancerVolumeSliceCostCost = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlvolbalancerVolumeSliceCostCost.setStatus('deprecated')
if mibBuilder.loadTexts: eqlvolbalancerVolumeSliceCostCost.setDescription('cost associated with the sample')
eqlvolbalancerVolumeSliceCostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlvolbalancerVolumeSliceCostStatus.setStatus('deprecated')
if mibBuilder.loadTexts: eqlvolbalancerVolumeSliceCostStatus.setDescription('This field is used indicate the status of this entry.')
eqlvolbalancerDailyVolumeCostTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 14, 1, 3), )
if mibBuilder.loadTexts: eqlvolbalancerDailyVolumeCostTable.setStatus('deprecated')
if mibBuilder.loadTexts: eqlvolbalancerDailyVolumeCostTable.setDescription('EqualLogic-Persistent Volume Slice Statistic\n                     This table contains rolled up cost statistic \n                     values for a volume on a particular day.')
eqlvolbalancerDailyVolumeCostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 14, 1, 3, 1), ).setIndexNames((0, "EQLVOLBALANCER-MIB", "eqlvolbalancerDailyVolumeCostDay"), (0, "EQLVOLBALANCER-MIB", "eqlvolbalancerDailyVolumeCostVolumeId"))
if mibBuilder.loadTexts: eqlvolbalancerDailyVolumeCostEntry.setStatus('deprecated')
if mibBuilder.loadTexts: eqlvolbalancerDailyVolumeCostEntry.setDescription('An entry (row) containing volume slice statistics.')
eqlvolbalancerDailyVolumeCostDay = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlvolbalancerDailyVolumeCostDay.setStatus('deprecated')
if mibBuilder.loadTexts: eqlvolbalancerDailyVolumeCostDay.setDescription('the day when the sample was taken')
eqlvolbalancerDailyVolumeCostVolumeId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlvolbalancerDailyVolumeCostVolumeId.setStatus('deprecated')
if mibBuilder.loadTexts: eqlvolbalancerDailyVolumeCostVolumeId.setDescription('CPsvId_t of the volume owning the volume slice')
eqlvolbalancerDailyVolumeCostCost = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlvolbalancerDailyVolumeCostCost.setStatus('deprecated')
if mibBuilder.loadTexts: eqlvolbalancerDailyVolumeCostCost.setDescription('cost associated with the sample')
eqlvolbalancerDailyVolumeCostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlvolbalancerDailyVolumeCostStatus.setStatus('deprecated')
if mibBuilder.loadTexts: eqlvolbalancerDailyVolumeCostStatus.setDescription('This field is used indicate the status of this entry.')
eqlvolbalancerRecommendationTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 14, 1, 4), )
if mibBuilder.loadTexts: eqlvolbalancerRecommendationTable.setStatus('deprecated')
if mibBuilder.loadTexts: eqlvolbalancerRecommendationTable.setDescription('EqualLogic-Persistent Volume Slice Statistic\n                     This table contains rolled up cost statistic \n                     values for a volume on a particular day.')
eqlvolbalancerRecommendationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 14, 1, 4, 1), ).setIndexNames((0, "EQLVOLBALANCER-MIB", "eqlvolbalancerRecommendationTime"), (0, "EQLVOLBALANCER-MIB", "eqlvolbalancerRecommendationVolumeId"), (0, "EQLVOLBALANCER-MIB", "eqlvolbalancerRecommendationSrcPsaId"))
if mibBuilder.loadTexts: eqlvolbalancerRecommendationEntry.setStatus('deprecated')
if mibBuilder.loadTexts: eqlvolbalancerRecommendationEntry.setDescription('An entry (row) containing a volume slice move recommendation.')
eqlvolbalancerRecommendationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlvolbalancerRecommendationTime.setStatus('deprecated')
if mibBuilder.loadTexts: eqlvolbalancerRecommendationTime.setDescription('time at which the recommendation was made')
eqlvolbalancerRecommendationVolumeId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlvolbalancerRecommendationVolumeId.setStatus('deprecated')
if mibBuilder.loadTexts: eqlvolbalancerRecommendationVolumeId.setDescription('CPsvId_t of the volume owning the volume slice')
eqlvolbalancerRecommendationSrcPsaId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlvolbalancerRecommendationSrcPsaId.setStatus('deprecated')
if mibBuilder.loadTexts: eqlvolbalancerRecommendationSrcPsaId.setDescription('uuid_t of the Psa where the volume slice is originally located')
eqlvolbalancerRecommendationDstPsaId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlvolbalancerRecommendationDstPsaId.setStatus('deprecated')
if mibBuilder.loadTexts: eqlvolbalancerRecommendationDstPsaId.setDescription('uuid_t of the Psa to which the volume slice should be moved')
eqlvolbalancerRecommendationComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 4, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlvolbalancerRecommendationComplete.setStatus('deprecated')
if mibBuilder.loadTexts: eqlvolbalancerRecommendationComplete.setDescription('flag to indicate whether the recommendation has been carried out')
eqlvolbalancerRecommendationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlvolbalancerRecommendationStatus.setStatus('deprecated')
if mibBuilder.loadTexts: eqlvolbalancerRecommendationStatus.setDescription('This field is used indicate the status of this entry.')
eqlVolBalConfigTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 14, 1, 5), )
if mibBuilder.loadTexts: eqlVolBalConfigTable.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalConfigTable.setDescription('EqualLogic-Persistent Volume balancer plan table.')
eqlVolBalConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 14, 1, 5, 1), ).setIndexNames((0, "EQLSTORAGEPOOL-MIB", "eqlStoragePoolIndex"))
if mibBuilder.loadTexts: eqlVolBalConfigEntry.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalConfigEntry.setDescription('An entry (row) containing volume balancer configuration.')
eqlVolBalConfigLastPlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 5, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlVolBalConfigLastPlanIndex.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalConfigLastPlanIndex.setDescription("The last PlanIndex used.  Stored so that we can ensure we're alway\n                 increasing our PlanIndex.")
eqlVolBalConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("capacity-only", 2), ("disabled", 3), ("performance", 4))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlVolBalConfigEnabled.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalConfigEnabled.setDescription('This field enables/disables the volume capacity and performance balancing subsystem within a group.')
eqlVolBalConfigSenseFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalConfigSenseFrequency.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalConfigSenseFrequency.setDescription('This field indicates the sense frequency.')
eqlVolBalConfigImbalDetectFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalConfigImbalDetectFrequency.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalConfigImbalDetectFrequency.setDescription('This field indicates the imbalance detection frequency.')
eqlVolBalConfigVolumeDelFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalConfigVolumeDelFrequency.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalConfigVolumeDelFrequency.setDescription('This field indicates the volume deletion frequency.')
eqlVolBalConfigVolumeBindFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalConfigVolumeBindFrequency.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalConfigVolumeBindFrequency.setDescription('This field indicates the volume bind frequency.')
eqlVolBalConfigRAIDSetFreeSpaceTroubleDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalConfigRAIDSetFreeSpaceTroubleDelay.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalConfigRAIDSetFreeSpaceTroubleDelay.setDescription('This field indicates the minimum delay after resolving a raid-set\n                     being in free space trouble before re-evaluating..')
eqlVolBalConfigRAIDSetDeleteDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalConfigRAIDSetDeleteDelay.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalConfigRAIDSetDeleteDelay.setDescription('This field indicates the minimum delay after vacating a raid-set before re-evaluating.')
eqlVolBalConfigRAIDSetJoinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalConfigRAIDSetJoinDelay.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalConfigRAIDSetJoinDelay.setDescription('This field indicates the minimum delay after a raid-set joins a pool before re-evaluating.')
eqlVolBalConfigReamSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalConfigReamSize.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalConfigReamSize.setDescription('This field indicates the number of pages in a ream.')
eqlVolBalConfigHistoryRowMax = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalConfigHistoryRowMax.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalConfigHistoryRowMax.setDescription('This field indicates the maximum number of volume balance history entries.')
eqlVolBalConfigRAIDStatsRowMax = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 5, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalConfigRAIDStatsRowMax.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalConfigRAIDStatsRowMax.setDescription('This field indicates the maximum number of volume balance raid-set stats entries.')
eqlVolBalConfigPoolThroughputRateMax = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 5, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalConfigPoolThroughputRateMax.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalConfigPoolThroughputRateMax.setDescription('This field indicates the maximum throughput we can impose on a pool during load balancing.')
eqlVolBalConfigMinSpreadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 5, 1, 14), Unsigned32().clone(1024)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalConfigMinSpreadSize.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalConfigMinSpreadSize.setDescription('This field determines how big a volume is, in megabytes, before it is spread among other members.')
eqlVolBalConfigPlacementThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 5, 1, 15), Unsigned32().clone(200)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalConfigPlacementThreshold.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalConfigPlacementThreshold.setDescription('Declares the minimum placement score for a volume before it will be considered for performance balancing.')
eqlVolBalConfigPreviousLeadUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 5, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalConfigPreviousLeadUUID.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalConfigPreviousLeadUUID.setDescription('uuid_t of the last lead.')
eqlVolBalConfigFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 5, 1, 17), Bits().clone(namedValues=NamedValues(("enableRoutingTableChecker", 0), ("routingTableCheckerCheckAllPages", 1), ("routingTableCheckerHaltGroup", 2), ("flag3", 3), ("flag4", 4), ("flag5", 5), ("flag6", 6), ("flag7", 7), ("flag8", 8), ("flag9", 9), ("flag10", 10), ("flag11", 11), ("flag12", 12), ("flag13", 13), ("flag14", 14), ("flag15", 15), ("flag16", 16), ("flag17", 17), ("flag18", 18), ("flag19", 19), ("flag20", 20), ("flag21", 21), ("flag22", 22), ("flag23", 23), ("flag24", 24), ("flag25", 25), ("flag26", 26), ("flag27", 27), ("flag28", 28), ("flag29", 29), ("flag30", 30), ("flag31", 31)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalConfigFlags.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalConfigFlags.setDescription('This field defines the common place holder for group wide config/debug flags. The flags must be of type\n                    enable(1) or disable(0). and the default value will always be disable(0).')
eqlVolBalConfigArchivalPlacementThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 5, 1, 18), Unsigned32().clone(50)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalConfigArchivalPlacementThreshold.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalConfigArchivalPlacementThreshold.setDescription('Declares the minimum placement score for a volume before it will be considered for performance balancing when a pool has archival storage present.')
eqlVolBalConfigFreeSpaceTroubleEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlVolBalConfigFreeSpaceTroubleEnabled.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalConfigFreeSpaceTroubleEnabled.setDescription('This field enables/disables the free space trouble operation within a group.')
eqlVolBalConfigPreferAutoRAIDPlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlVolBalConfigPreferAutoRAIDPlacement.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalConfigPreferAutoRAIDPlacement.setDescription('This field changes the preference of the balancing from a capacity spread to Auto RAID Placement.')
eqlVolBalConfigHotColdPageSwapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlVolBalConfigHotColdPageSwapEnabled.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalConfigHotColdPageSwapEnabled.setDescription('This field enables/disables the hot/cold page swapping operation within a group.')
eqlVolBalConfigArchiveEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlVolBalConfigArchiveEnabled.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalConfigArchiveEnabled.setDescription('This field enables/disables the archiving operation within a group.')
eqlVolBalPlanTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 14, 1, 6), )
if mibBuilder.loadTexts: eqlVolBalPlanTable.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalPlanTable.setDescription('EqualLogic-Persistent Volume balancer plan table.')
eqlVolBalPlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 14, 1, 6, 1), ).setIndexNames((0, "EQLSTORAGEPOOL-MIB", "eqlStoragePoolIndex"), (0, "EQLVOLBALANCER-MIB", "eqlVolBalPlanIndex"), (0, "EQLVOLUME-MIB", "eqliscsiLocalMemberId"))
if mibBuilder.loadTexts: eqlVolBalPlanEntry.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalPlanEntry.setDescription('An entry (row) containing a volume balancer plan.')
eqlVolBalPlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 6, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalPlanIndex.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalPlanIndex.setDescription('Unique Index for this volume balance plan entry.')
eqlVolBalPlanReason = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("free-space-trouble", 1), ("vacate", 2), ("bind", 3), ("balance", 4), ("vacate-pool", 5), ("move-volume", 6), ("move-site", 7), ("performance-trouble", 8), ("archive", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalPlanReason.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalPlanReason.setDescription('Explains why this plan was created')
eqlVolBalPlanComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 6, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalPlanComplete.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalPlanComplete.setDescription('True if the entire plan has been written to the database')
eqlVolBalPlanStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 6, 1, 4), Counter32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalPlanStartTime.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalPlanStartTime.setDescription('Start time of the plan execution')
eqlVolBalPlanEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 6, 1, 5), Counter32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalPlanEndTime.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalPlanEndTime.setDescription('Completion time of the plan')
eqlVolBalPlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("writing", 1), ("written", 2), ("invalid", 3), ("ready", 4), ("started", 5), ("cancelled", 6), ("finished", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalPlanState.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalPlanState.setDescription('Flags...')
eqlVolBalPlanVacatingMemberUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 6, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalPlanVacatingMemberUUID.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalPlanVacatingMemberUUID.setDescription('uuid_t of the member being vacated.  Only valid during a vacate plan')
eqlVolBalPlanTotalPages = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalPlanTotalPages.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalPlanTotalPages.setDescription('count of the number of pages expected to be moved during this plan.')
eqlVolBalPlanEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 6, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalPlanEntryStatus.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalPlanEntryStatus.setDescription('This field is used indicate the status of this entry.')
eqlVolBalPlanFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("mixedModeBit", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalPlanFlags.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalPlanFlags.setDescription('This field defines special attributes of the plan.')
eqlVolBalPlanTotalAllocatedPages = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 6, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalPlanTotalAllocatedPages.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalPlanTotalAllocatedPages.setDescription('count of the number of allocated pages expected to be moved during this plan.')
eqlVolBalPlanAllocatedPagesMoved = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 6, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalPlanAllocatedPagesMoved.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalPlanAllocatedPagesMoved.setDescription('count of the number of allocated pages moved by completed tasks.')
eqlVolBalPlanAssignedPagesMoved = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 6, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalPlanAssignedPagesMoved.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalPlanAssignedPagesMoved.setDescription('count of the number of assigned pages moved by completed tasks.')
eqlVolBalPlanHistoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 6, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalPlanHistoryTableIndex.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalPlanHistoryTableIndex.setDescription('This field indicates the minimum delay after resolving a raid-set\n                     being in free space trouble before re-evaluating..')
eqlVolBalPlanHistoryTableMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 6, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalPlanHistoryTableMemberIndex.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalPlanHistoryTableMemberIndex.setDescription('This field indicates the minimum delay after resolving a raid-set\n                     being in free space trouble before re-evaluating..')
eqlVolBalPlanHistoryTableMemberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 6, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalPlanHistoryTableMemberCount.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalPlanHistoryTableMemberCount.setDescription('This field indicates the minimum delay after resolving a raid-set\n                     being in free space trouble before re-evaluating..')
eqlVolBalPlanFirstAlternateDst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 6, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalPlanFirstAlternateDst.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalPlanFirstAlternateDst.setDescription('uuid_t of an alternate destination')
eqlVolBalPlanSecondAlternateDst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 6, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalPlanSecondAlternateDst.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalPlanSecondAlternateDst.setDescription('uuid_t of an alternate destination')
eqlVolBalPlanTotalSnapPages = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 6, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalPlanTotalSnapPages.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalPlanTotalSnapPages.setDescription('count of the number of snap pages expected to be moved during this plan.')
eqlVolBalPlanSnapPagesMoved = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 6, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalPlanSnapPagesMoved.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalPlanSnapPagesMoved.setDescription('count of the number of snap pages moved by completed tasks.')
eqlVolBalTaskTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 14, 1, 7), )
if mibBuilder.loadTexts: eqlVolBalTaskTable.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskTable.setDescription('EqualLogic-Persistent Volume balancer task table.')
eqlVolBalTaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 14, 1, 7, 1), ).setIndexNames((0, "EQLSTORAGEPOOL-MIB", "eqlStoragePoolIndex"), (0, "EQLVOLBALANCER-MIB", "eqlVolBalPlanIndex"), (0, "EQLVOLBALANCER-MIB", "eqlVolBalTaskIndex"), (0, "EQLVOLUME-MIB", "eqliscsiLocalMemberId"))
if mibBuilder.loadTexts: eqlVolBalTaskEntry.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskEntry.setDescription('An entry (row) containing a volume balancer task.')
eqlVolBalTaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 7, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalTaskIndex.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskIndex.setDescription('Unique Index for this volume balance task entry.')
eqlVolBalTaskVolumePsvId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalTaskVolumePsvId.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskVolumePsvId.setDescription('CPsvId_t of the volume owning the volume slice')
eqlVolBalTaskSrcDriveGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalTaskSrcDriveGroup.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskSrcDriveGroup.setDescription('EQL-SECONDARY-KEY id of the drive group where the volume slice is originally located')
eqlVolBalTaskSrcName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalTaskSrcName.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskSrcName.setDescription("This field contains the last 16 characters of the src PSA's name")
eqlVolBalTaskDstDriveGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalTaskDstDriveGroup.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskDstDriveGroup.setDescription('EQL-SECONDARY-KEY id of the drive group to which the volume slice should be moved')
eqlVolBalTaskDstName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalTaskDstName.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskDstName.setDescription("This field contains the last 16 characters of the destination PSA's name")
eqlVolBalTaskSrcInitialPageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 7, 1, 7), Counter64()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalTaskSrcInitialPageCount.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskSrcInitialPageCount.setDescription('Number of pages on the source drive group at the beginning of the move.')
eqlVolBalTaskNumPages = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 7, 1, 8), Counter64()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalTaskNumPages.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskNumPages.setDescription('Number of pages to move.')
eqlVolBalTaskCoordinateWith = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 7, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlVolBalTaskCoordinateWith.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskCoordinateWith.setDescription('Unique Index of a different volume balance task entry \n                 for this volume balance task entry to coordinate with')
eqlVolBalTaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("balance", 1), ("moveslice", 2), ("explicit", 3), ("movehot", 4), ("movecold", 5), ("movesingle", 6), ("besteffort", 7), ("movesliceuncompressed", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalTaskType.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskType.setDescription('Task type')
eqlVolBalTaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ready", 1), ("active", 2), ("cancel", 3), ("done", 4), ("failed", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalTaskState.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskState.setDescription('Flags...')
eqlVolBalTaskEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 7, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalTaskEntryStatus.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskEntryStatus.setDescription('This field is used indicate the status of this entry.')
eqlVolBalTaskVolLeader = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 7, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalTaskVolLeader.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskVolLeader.setDescription('This field contains drive group that will lead the volume being moved.')
eqlVolBalTaskNumAllocatedPages = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 7, 1, 14), Counter64()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalTaskNumAllocatedPages.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskNumAllocatedPages.setDescription('Number of allocated pages to move.')
eqlVolBalTaskNumSnapPages = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 7, 1, 15), Counter64()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalTaskNumSnapPages.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskNumSnapPages.setDescription('Number of snap pages to move.')
eqlVolBalTaskPickedPagesTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 14, 1, 8), )
if mibBuilder.loadTexts: eqlVolBalTaskPickedPagesTable.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskPickedPagesTable.setDescription('EqualLogic-Persistent Volume balancer task picked pages table.')
eqlVolBalTaskPickedPagesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 14, 1, 8, 1), ).setIndexNames((0, "EQLSTORAGEPOOL-MIB", "eqlStoragePoolIndex"), (0, "EQLVOLBALANCER-MIB", "eqlVolBalPlanIndex"), (0, "EQLVOLBALANCER-MIB", "eqlVolBalTaskIndex"), (0, "EQLVOLUME-MIB", "eqliscsiLocalMemberId"))
if mibBuilder.loadTexts: eqlVolBalTaskPickedPagesEntry.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskPickedPagesEntry.setDescription('An entry (row) containing a volume balancer task.')
eqlVolBalTaskPickedProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 8, 1, 1), Counter64()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalTaskPickedProgress.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskPickedProgress.setDescription('Total progress count')
eqlVolBalTaskPickedPagesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 8, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalTaskPickedPagesCount.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskPickedPagesCount.setDescription('Page count')
eqlVolBalTaskPickedPagesContext = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalTaskPickedPagesContext.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskPickedPagesContext.setDescription('saved context for the page move')
eqlVolBalTaskPickedPagesRev = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 8, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalTaskPickedPagesRev.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskPickedPagesRev.setDescription('revision')
eqlVolBalTaskPickedPagesFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 8, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalTaskPickedPagesFlags.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskPickedPagesFlags.setDescription('Flags...')
eqlVolBalTaskPickedPagesEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 8, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalTaskPickedPagesEntryStatus.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskPickedPagesEntryStatus.setDescription('This field is used indicate the status of this entry.')
eqlVolBalTaskPickedPagesArray = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 8, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1200, 1200)).setFixedLength(1200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalTaskPickedPagesArray.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskPickedPagesArray.setDescription('A list of pages picked to move for this task')
eqlVolBalTaskPickedPagesAllocatedProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 8, 1, 8), Counter64()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalTaskPickedPagesAllocatedProgress.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalTaskPickedPagesAllocatedProgress.setDescription('Total allocated progress count')
eqlVolBalSliceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 14, 1, 9), )
if mibBuilder.loadTexts: eqlVolBalSliceStatsTable.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalSliceStatsTable.setDescription('EqualLogic-Volume balancer volume slice statistics table.')
eqlVolBalSliceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 14, 1, 9, 1), ).setIndexNames((0, "EQLVOLUME-MIB", "eqliscsiLocalMemberId"), (0, "EQLVOLUME-MIB", "eqliscsiVolumeIndex"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"))
if mibBuilder.loadTexts: eqlVolBalSliceStatsEntry.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalSliceStatsEntry.setDescription('An entry (row) containing the volume slice balancer statistics.')
eqlVolBalSliceMemberUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 9, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalSliceMemberUUID.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalSliceMemberUUID.setDescription('EQL-SECONDARY-KEY Unique identifier of the member.')
eqlVolBalSliceVolumeUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalSliceVolumeUUID.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalSliceVolumeUUID.setDescription('EQL-SECONDARY-KEY Unique identifier of the volume.')
eqlVolBalSliceTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalSliceTimeStamp.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalSliceTimeStamp.setDescription('The time which the last gathering of stats took place.')
eqlVolBalSliceStatsRndRdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 9, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalSliceStatsRndRdRate.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalSliceStatsRndRdRate.setDescription('random read per second.')
eqlVolBalSliceStatsRndWrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 9, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalSliceStatsRndWrRate.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalSliceStatsRndWrRate.setDescription('random write per second.')
eqlVolBalSliceStatsSeqRdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 9, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalSliceStatsSeqRdRate.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalSliceStatsSeqRdRate.setDescription('sequential read per second.')
eqlVolBalSliceStatsSeqWrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 9, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalSliceStatsSeqWrRate.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalSliceStatsSeqWrRate.setDescription('sequential read per second.')
eqlVolBalSliceStatsPlacementScore = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 9, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalSliceStatsPlacementScore.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalSliceStatsPlacementScore.setDescription('EQL-SECONDARY-KEY Only valid for the whole volume row. Represents a score for the priority in which we should try to put this volume on RAID 10 storage.')
eqlVolBalMemberStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 14, 1, 10), )
if mibBuilder.loadTexts: eqlVolBalMemberStatsTable.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalMemberStatsTable.setDescription('EqualLogic-Volume balanacer member statistics table.')
eqlVolBalMemberStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 14, 1, 10, 1), ).setIndexNames((0, "EQLMEMBER-MIB", "eqlMemberIndex"))
if mibBuilder.loadTexts: eqlVolBalMemberStatsEntry.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalMemberStatsEntry.setDescription("An entry (row) containing the member's volume balancing statistics.")
eqlVolBalMemberUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalMemberUUID.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalMemberUUID.setDescription('EQL-SECONDARY-KEY Unique Identifier of the member.')
eqlVolBalMemberTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalMemberTimeStamp.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalMemberTimeStamp.setDescription('The time which the last gathering of stats took place.')
eqlVolBalMemberStatsAvgRespTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 10, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalMemberStatsAvgRespTime.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalMemberStatsAvgRespTime.setDescription('average response time for all I/O on this member.')
eqlVolBalMemberStatsCPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 10, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalMemberStatsCPUUsage.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalMemberStatsCPUUsage.setDescription('CPU utilization as the calculated weighted CPU cost')
eqlVolBalMemberStatsFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 10, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalMemberStatsFreeSpace.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalMemberStatsFreeSpace.setDescription('available free space at the sample time')
eqlVolBalMemberStatsRndRdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 10, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalMemberStatsRndRdRate.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalMemberStatsRndRdRate.setDescription('random read per second.')
eqlVolBalMemberStatsRndWrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 10, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalMemberStatsRndWrRate.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalMemberStatsRndWrRate.setDescription('random write per second.')
eqlVolBalMemberStatsSeqRdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 10, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalMemberStatsSeqRdRate.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalMemberStatsSeqRdRate.setDescription('sequential read per second.')
eqlVolBalMemberStatsSeqWrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 10, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalMemberStatsSeqWrRate.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalMemberStatsSeqWrRate.setDescription('sequential read per second.')
eqlVolBalHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 14, 1, 11), )
if mibBuilder.loadTexts: eqlVolBalHistoryTable.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalHistoryTable.setDescription('EqualLogic-Volume balanacer RAID statistics table.')
eqlVolBalHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 14, 1, 11, 1), ).setIndexNames((0, "EQLSTORAGEPOOL-MIB", "eqlStoragePoolIndex"), (0, "EQLVOLBALANCER-MIB", "eqlVolBalHistoryStop"))
if mibBuilder.loadTexts: eqlVolBalHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalHistoryEntry.setDescription('An entry (row) containing the results of a volume balancing operation.')
eqlVolBalHistoryStop = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 11, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalHistoryStop.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalHistoryStop.setDescription('timestamp of the completion of the volume balancing event.')
eqlVolBalHistoryStart = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 11, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalHistoryStart.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalHistoryStart.setDescription('timestamp of the start of the volume balancing event.')
eqlVolBalHistoryPagesMoved = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 11, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlVolBalHistoryPagesMoved.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalHistoryPagesMoved.setDescription('Number of pages moved in this volume balancing event.')
eqlVolBalHistoryMembersInvolved = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 11, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlVolBalHistoryMembersInvolved.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalHistoryMembersInvolved.setDescription('Number of members involved in this volume balancing event.')
eqlVolBalHistorySlicesInvolved = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 11, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlVolBalHistorySlicesInvolved.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalHistorySlicesInvolved.setDescription('number of volume slices involved in this volume balancing event')
eqlVolBalHistoryBalanceReason = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 11, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlVolBalHistoryBalanceReason.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalHistoryBalanceReason.setDescription('mask of the reasons this volume balancing event occurred')
eqlVolBalCommandTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 14, 1, 13), )
if mibBuilder.loadTexts: eqlVolBalCommandTable.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalCommandTable.setDescription('EqualLogic-Persistent Volume balancer command table.')
eqlVolBalCommandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 14, 1, 13, 1), ).setIndexNames((0, "EQLSTORAGEPOOL-MIB", "eqlStoragePoolIndex"), (0, "EQLVOLBALANCER-MIB", "eqlVolBalCommandIndex"), (0, "EQLVOLUME-MIB", "eqliscsiLocalMemberId"))
if mibBuilder.loadTexts: eqlVolBalCommandEntry.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalCommandEntry.setDescription('An entry (row) containing a volume balancer command.')
eqlVolBalCommandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 13, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalCommandIndex.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalCommandIndex.setDescription('Unique Index for this volume balance command entry.')
eqlVolBalCommandPlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 13, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalCommandPlanIndex.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalCommandPlanIndex.setDescription('If this was written to disk, the plan ID is in here, 0 otherwise.')
eqlVolBalCommandReason = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("free-space-trouble", 1), ("vacate", 2), ("vacate-pool", 3), ("move-volume-to-pool", 4), ("bind", 5), ("balance", 6), ("delete-marshal", 7), ("move-site-to-pool", 8), ("performance-trouble", 9), ("archive", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalCommandReason.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalCommandReason.setDescription('Explains what this command is supposed to do')
eqlVolBalCommandRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 13, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalCommandRunning.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalCommandRunning.setDescription('True if the command has been planned and started')
eqlVolBalCommandCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 13, 1, 5), Counter32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalCommandCreateTime.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalCommandCreateTime.setDescription('Create time of the command')
eqlVolBalCommandState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("writing", 1), ("invalid", 2), ("ready", 3), ("started", 4), ("cancelled", 5), ("finished", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalCommandState.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalCommandState.setDescription('EQL-SECONDARY-KEY Current state of the command')
eqlVolBalCommandMemberUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 13, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalCommandMemberUUID.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalCommandMemberUUID.setDescription('uuid_t of the member being worked on.')
eqlVolBalCommandVolumeId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 13, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlVolBalCommandVolumeId.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalCommandVolumeId.setDescription('CPsvId_t of the member being worked on.')
eqlVolBalCommandFromPoolId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 13, 1, 9), Unsigned32())
if mibBuilder.loadTexts: eqlVolBalCommandFromPoolId.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalCommandFromPoolId.setDescription('Which pool are we moving from, not always valid.')
eqlVolBalCommandToPoolId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 13, 1, 10), Unsigned32())
if mibBuilder.loadTexts: eqlVolBalCommandToPoolId.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalCommandToPoolId.setDescription('Which pool are we moving to, not always valid.')
eqlVolBalCommandEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 13, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalCommandEntryStatus.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalCommandEntryStatus.setDescription('This field is used indicate the status of this entry.')
eqlVolBalCommandFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 13, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("mixedModeBit", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalCommandFlags.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalCommandFlags.setDescription('This field defines special attributes of the command.')
eqlVolBalCommandSiteId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 13, 1, 13), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlVolBalCommandSiteId.setStatus('current')
if mibBuilder.loadTexts: eqlVolBalCommandSiteId.setDescription('EQL-SECONDARY-KEY Which site are we moving, not always valid.')
eqlPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 14, 1, 14), )
if mibBuilder.loadTexts: eqlPropertiesTable.setStatus('current')
if mibBuilder.loadTexts: eqlPropertiesTable.setDescription('EqualLogic-Persistent properties table.')
eqlPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 14, 1, 14, 1), ).setIndexNames((0, "EQLVOLBALANCER-MIB", "eqlPropertiesIndex"))
if mibBuilder.loadTexts: eqlPropertiesEntry.setStatus('current')
if mibBuilder.loadTexts: eqlPropertiesEntry.setDescription('An entry (row) containing a property.')
eqlPropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 14, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlPropertiesIndex.setStatus('current')
if mibBuilder.loadTexts: eqlPropertiesIndex.setDescription('Unique Index for this property entry.')
eqlPropertiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 14, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlPropertiesName.setStatus('current')
if mibBuilder.loadTexts: eqlPropertiesName.setDescription('Name of the property')
eqlPropertiesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlPropertiesValue.setStatus('current')
if mibBuilder.loadTexts: eqlPropertiesValue.setDescription('Value of the property')
eqlPageMoveHistoryTableFreeSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 14, 1, 15))
eqlPageMoveHistoryTableNextFreeSlot = MibScalar((1, 3, 6, 1, 4, 1, 12740, 14, 1, 15, 1), Unsigned32().clone(1)).setUnits('none').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlPageMoveHistoryTableNextFreeSlot.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryTableNextFreeSlot.setDescription('EqualLogic-Persistent\n                 The next empty slot to use in eqlPageMoveHistoryTable')
eqlPageMoveHistoryTableMemberNextFreeSlot = MibScalar((1, 3, 6, 1, 4, 1, 12740, 14, 1, 15, 2), Unsigned32().clone(1)).setUnits('none').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlPageMoveHistoryTableMemberNextFreeSlot.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryTableMemberNextFreeSlot.setDescription('EqualLogic-Persistent\n                 The next empty slot to use in eqlPageMoveHistoryMemberTable')
eqlPageMoveHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 14, 1, 16), )
if mibBuilder.loadTexts: eqlPageMoveHistoryTable.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryTable.setDescription('EqualLogic-Persistent page move history table.')
eqlPageMoveHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 14, 1, 16, 1), ).setIndexNames((0, "EQLVOLBALANCER-MIB", "eqlPageMoveHistoryIndex"))
if mibBuilder.loadTexts: eqlPageMoveHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryEntry.setDescription('An entry (row) containing a page movement record.')
eqlPageMoveHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 16, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlPageMoveHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryIndex.setDescription('Unique Index for this plan entry.')
eqlPageMoveHistoryPoolId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 16, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlPageMoveHistoryPoolId.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryPoolId.setDescription('Pool id component of unique id.')
eqlPageMoveHistoryPlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 16, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlPageMoveHistoryPlanId.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryPlanId.setDescription('Plan id component of unique id.')
eqlPageMoveHistoryMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 16, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberId.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberId.setDescription('Member id component of unique id.')
eqlPageMoveHistoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("free-space-trouble", 1), ("vacate", 2), ("bind", 3), ("balance", 4), ("vacate-pool", 5), ("move-volume", 6), ("move-site", 7), ("performance-trouble", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlPageMoveHistoryType.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryType.setDescription('Explains what type this plan is')
eqlPageMoveHistoryStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 16, 1, 6), Counter32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlPageMoveHistoryStartTime.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryStartTime.setDescription('Start time of the plan execution')
eqlPageMoveHistoryEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 16, 1, 7), Counter32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlPageMoveHistoryEndTime.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryEndTime.setDescription('Completion time of the plan')
eqlPageMoveHistoryTotalPages = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 16, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlPageMoveHistoryTotalPages.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryTotalPages.setDescription('count of the number of pages expected to be moved during this plan.')
eqlPageMoveHistoryAllocatedPages = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 16, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlPageMoveHistoryAllocatedPages.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryAllocatedPages.setDescription('count of the number of allocated pages expected to be moved during this plan.')
eqlPageMoveHistoryTotalPagesMoved = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 16, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlPageMoveHistoryTotalPagesMoved.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryTotalPagesMoved.setDescription('count of the number of pages moved during this plan.')
eqlPageMoveHistoryAllocatedPagesMoved = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 16, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlPageMoveHistoryAllocatedPagesMoved.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryAllocatedPagesMoved.setDescription('count of the number of allocated pages moved during this plan.')
eqlPageMoveHistoryResult = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 16, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ready", 1), ("completed", 2), ("cancelled", 3), ("inprogress", 4), ("aborted", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlPageMoveHistoryResult.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryResult.setDescription('Explains how this plan ended')
eqlPageMoveHistoryMemberStartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 16, 1, 13), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberStartIndex.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberStartIndex.setDescription('Index of the first member entry in the eqlPageMoveHistoryMemberTable.')
eqlPageMoveHistoryMemberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 16, 1, 14), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberCount.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberCount.setDescription('Count of the member entries reserved in the eqlPageMoveHistoryMemberTable.')
eqlPageMoveHistoryMemberTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 14, 1, 18), )
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberTable.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberTable.setDescription('EqualLogic-Persistent page move history member-specific info table.')
eqlPageMoveHistoryMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 14, 1, 18, 1), ).setIndexNames((0, "EQLVOLBALANCER-MIB", "eqlPageMoveHistoryMemberIndex"))
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberEntry.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberEntry.setDescription('An entry (row) containing a page movement record.')
eqlPageMoveHistoryMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 18, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberIndex.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberIndex.setDescription('Unique Index for this plan entry.')
eqlPageMoveHistoryMemberParentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 18, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberParentIndex.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberParentIndex.setDescription('Index of the parent entry in the eqlPageMoveHistoryTable.')
eqlPageMoveHistoryMemberPlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 18, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberPlanId.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberPlanId.setDescription('Plan id.')
eqlPageMoveHistoryMemberUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 18, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberUuid.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberUuid.setDescription('Uuid of the member')
eqlPageMoveHistoryMemberAddedPages = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 18, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberAddedPages.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberAddedPages.setDescription('count of the number of pages added to this member in this plan.')
eqlPageMoveHistoryMemberAddedAllocatedPages = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 18, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberAddedAllocatedPages.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberAddedAllocatedPages.setDescription('count of the number of allocated pages added to this member in this plan.')
eqlPageMoveHistoryMemberRemovedPages = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 18, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberRemovedPages.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberRemovedPages.setDescription('count of the number of pages removed to this member in this plan.')
eqlPageMoveHistoryMemberRemovedAllocatedPages = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 18, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberRemovedAllocatedPages.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberRemovedAllocatedPages.setDescription('count of the number of allocated pages removed to this member in this plan.')
eqlPageMoveHistoryMemberStartAUS = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 18, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberStartAUS.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberStartAUS.setDescription("Member's AUS at start of the plan.")
eqlPageMoveHistoryMemberExpectedEndAUS = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 18, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberExpectedEndAUS.setStatus('current')
if mibBuilder.loadTexts: eqlPageMoveHistoryMemberExpectedEndAUS.setDescription("Member's expected AUS at end of the plan.")
eqlLocalIOCountsTableFreeSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 14, 1, 19))
eqlLocalIOCountsTableNextFreeSlot = MibScalar((1, 3, 6, 1, 4, 1, 12740, 14, 1, 19, 1), Unsigned32().clone(1)).setUnits('none').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlLocalIOCountsTableNextFreeSlot.setStatus('current')
if mibBuilder.loadTexts: eqlLocalIOCountsTableNextFreeSlot.setDescription('EqualLogic-Persistent\n                 The next empty slot to use in eqlLocalIOCountsTable')
eqlLocalIOCountsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 14, 1, 20), )
if mibBuilder.loadTexts: eqlLocalIOCountsTable.setStatus('current')
if mibBuilder.loadTexts: eqlLocalIOCountsTable.setDescription('EqualLogic-Persistent iscsi I/O counts.')
eqlLocalIOCountsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 14, 1, 20, 1), ).setIndexNames((0, "EQLVOLBALANCER-MIB", "eqlLocalIOCountsIndex"))
if mibBuilder.loadTexts: eqlLocalIOCountsEntry.setStatus('current')
if mibBuilder.loadTexts: eqlLocalIOCountsEntry.setDescription('An entry (row) containing I/O counts')
eqlLocalIOCountsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 20, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlLocalIOCountsIndex.setStatus('current')
if mibBuilder.loadTexts: eqlLocalIOCountsIndex.setDescription('Unique Index for this io counts entry.')
eqlLocalIOCountsTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 20, 1, 2), Counter32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlLocalIOCountsTimestamp.setStatus('current')
if mibBuilder.loadTexts: eqlLocalIOCountsTimestamp.setDescription('Timestamp for this sample')
eqlLocalIOCountsReads = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 20, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlLocalIOCountsReads.setStatus('current')
if mibBuilder.loadTexts: eqlLocalIOCountsReads.setDescription('count of reads.')
eqlLocalIOCountsReadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 20, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlLocalIOCountsReadBytes.setStatus('current')
if mibBuilder.loadTexts: eqlLocalIOCountsReadBytes.setDescription('count of bytes associated with the above reads.')
eqlLocalIOCountsReadLatencyMs = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 20, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlLocalIOCountsReadLatencyMs.setStatus('current')
if mibBuilder.loadTexts: eqlLocalIOCountsReadLatencyMs.setDescription('cumulative latency associated with the above reads.')
eqlLocalIOCountsWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 20, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlLocalIOCountsWrites.setStatus('current')
if mibBuilder.loadTexts: eqlLocalIOCountsWrites.setDescription('count of writes.')
eqlLocalIOCountsWriteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 20, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlLocalIOCountsWriteBytes.setStatus('current')
if mibBuilder.loadTexts: eqlLocalIOCountsWriteBytes.setDescription('count of bytes associated with the above writes.')
eqlLocalIOCountsWriteLatencyMs = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 20, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlLocalIOCountsWriteLatencyMs.setStatus('current')
if mibBuilder.loadTexts: eqlLocalIOCountsWriteLatencyMs.setDescription('cumulative latency associated with the above writes.')
eqlLocalIOCountsHeadroomPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 20, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlLocalIOCountsHeadroomPercent.setStatus('current')
if mibBuilder.loadTexts: eqlLocalIOCountsHeadroomPercent.setDescription('how much free perf capacity is left')
eqlLocalIOCountsWorstQueuingLatencyMs = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 20, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlLocalIOCountsWorstQueuingLatencyMs.setStatus('current')
if mibBuilder.loadTexts: eqlLocalIOCountsWorstQueuingLatencyMs.setDescription('')
eqlPlanAUSTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 14, 1, 21), )
if mibBuilder.loadTexts: eqlPlanAUSTable.setStatus('current')
if mibBuilder.loadTexts: eqlPlanAUSTable.setDescription('EqualLogic-Persistent Start and end AUS entries for plans.')
eqlPlanAUSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 14, 1, 21, 1), ).setIndexNames((0, "EQLSTORAGEPOOL-MIB", "eqlStoragePoolIndex"), (0, "EQLVOLBALANCER-MIB", "eqlVolBalPlanIndex"), (0, "EQLVOLUME-MIB", "eqliscsiLocalMemberId"))
if mibBuilder.loadTexts: eqlPlanAUSEntry.setStatus('current')
if mibBuilder.loadTexts: eqlPlanAUSEntry.setDescription('An entry (row) containing member start and end AUS. This is an\n    \t\t\t\t array of 32 byte blocks (currently only 18 in use: lengths in bytes in parens\n    \t\t\t\t {memberUuid(16), startAUS(1), endAUS(1)}.')
eqlPlanAUSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 21, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlPlanAUSCount.setStatus('current')
if mibBuilder.loadTexts: eqlPlanAUSCount.setDescription('entry count')
eqlPlanAUSArray = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 21, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1024, 1024)).setFixedLength(1024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlPlanAUSArray.setStatus('current')
if mibBuilder.loadTexts: eqlPlanAUSArray.setDescription('A list of start and end AUS values for all members involved in a page move plan')
eqlTaskLocalPickedPagesTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 14, 1, 22), )
if mibBuilder.loadTexts: eqlTaskLocalPickedPagesTable.setStatus('current')
if mibBuilder.loadTexts: eqlTaskLocalPickedPagesTable.setDescription('EqualLogic-Persistent Volume balancer task picked pages table.')
eqlTaskLocalPickedPagesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 14, 1, 22, 1), ).setIndexNames((0, "EQLSTORAGEPOOL-MIB", "eqlStoragePoolIndex"), (0, "EQLVOLBALANCER-MIB", "eqlVolBalPlanIndex"), (0, "EQLVOLBALANCER-MIB", "eqlVolBalTaskIndex"), (0, "EQLVOLUME-MIB", "eqliscsiLocalMemberId"))
if mibBuilder.loadTexts: eqlTaskLocalPickedPagesEntry.setStatus('current')
if mibBuilder.loadTexts: eqlTaskLocalPickedPagesEntry.setDescription('An entry (row) containing a volume balancer task.')
eqlTaskLocalPickedProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 22, 1, 1), Counter64()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlTaskLocalPickedProgress.setStatus('current')
if mibBuilder.loadTexts: eqlTaskLocalPickedProgress.setDescription('Total progress count')
eqlTaskLocalPickedPagesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 22, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlTaskLocalPickedPagesCount.setStatus('current')
if mibBuilder.loadTexts: eqlTaskLocalPickedPagesCount.setDescription('Page count')
eqlTaskLocalPickedPagesContext = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 22, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlTaskLocalPickedPagesContext.setStatus('current')
if mibBuilder.loadTexts: eqlTaskLocalPickedPagesContext.setDescription('saved context for the page move')
eqlTaskLocalPickedPagesRev = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 22, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlTaskLocalPickedPagesRev.setStatus('current')
if mibBuilder.loadTexts: eqlTaskLocalPickedPagesRev.setDescription('revision')
eqlTaskLocalPickedPagesFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 22, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlTaskLocalPickedPagesFlags.setStatus('current')
if mibBuilder.loadTexts: eqlTaskLocalPickedPagesFlags.setDescription('Flags...')
eqlTaskLocalPickedPagesEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 22, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlTaskLocalPickedPagesEntryStatus.setStatus('current')
if mibBuilder.loadTexts: eqlTaskLocalPickedPagesEntryStatus.setDescription('This field is used indicate the status of this entry.')
eqlTaskLocalPickedPagesArray = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 22, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1200, 1200)).setFixedLength(1200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlTaskLocalPickedPagesArray.setStatus('current')
if mibBuilder.loadTexts: eqlTaskLocalPickedPagesArray.setDescription('A list of pages picked to move for this task')
eqlTaskLocalPickedPagesAllocatedProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 22, 1, 8), Counter64()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlTaskLocalPickedPagesAllocatedProgress.setStatus('current')
if mibBuilder.loadTexts: eqlTaskLocalPickedPagesAllocatedProgress.setDescription('Total allocated progress count')
eqlTaskLocalPickedPagesStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 22, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("started", 1), ("finished", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlTaskLocalPickedPagesStatus.setStatus('current')
if mibBuilder.loadTexts: eqlTaskLocalPickedPagesStatus.setDescription('picked pages entry status')
eqlMemberCountersTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 14, 1, 23), )
if mibBuilder.loadTexts: eqlMemberCountersTable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberCountersTable.setDescription('EqualLogic-Persistent page move member-specific counters table.')
eqlMemberCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 14, 1, 23, 1), ).setIndexNames((0, "EQLVOLBALANCER-MIB", "eqlMemberCountersIndex"))
if mibBuilder.loadTexts: eqlMemberCountersEntry.setStatus('current')
if mibBuilder.loadTexts: eqlMemberCountersEntry.setDescription('An entry (row) containing a page movement member counters.')
eqlMemberCountersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 23, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMemberCountersIndex.setStatus('current')
if mibBuilder.loadTexts: eqlMemberCountersIndex.setDescription('Unique Index for this plan entry.')
eqlMemberCountersUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 23, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberCountersUuid.setStatus('current')
if mibBuilder.loadTexts: eqlMemberCountersUuid.setDescription('Uuid of the member')
eqlMemberCountersTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 23, 1, 3), Counter32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMemberCountersTimeStamp.setStatus('current')
if mibBuilder.loadTexts: eqlMemberCountersTimeStamp.setDescription('Timestamp for this sample')
eqlMemberCountersAddedPages = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 23, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberCountersAddedPages.setStatus('current')
if mibBuilder.loadTexts: eqlMemberCountersAddedPages.setDescription('count of the number of pages added to this member.')
eqlMemberCountersRemovedPages = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 23, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberCountersRemovedPages.setStatus('current')
if mibBuilder.loadTexts: eqlMemberCountersRemovedPages.setDescription('count of the number of pages removed from this member.')
eqlMemberCountersAddedAllocatedPages = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 23, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberCountersAddedAllocatedPages.setStatus('current')
if mibBuilder.loadTexts: eqlMemberCountersAddedAllocatedPages.setDescription('count of the number of allocated pages added to this member.')
eqlMemberCountersRemovedAllocatedPages = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 23, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberCountersRemovedAllocatedPages.setStatus('current')
if mibBuilder.loadTexts: eqlMemberCountersRemovedAllocatedPages.setDescription('count of the number of allocate pages removed from this member.')
eqlMemberCountersAddedHotPages = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 23, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberCountersAddedHotPages.setStatus('current')
if mibBuilder.loadTexts: eqlMemberCountersAddedHotPages.setDescription('count of the number of hot pages added to this member.')
eqlMemberCountersRemovedHotPages = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 23, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberCountersRemovedHotPages.setStatus('current')
if mibBuilder.loadTexts: eqlMemberCountersRemovedHotPages.setDescription('count of the number of hot pages removed from this member.')
eqlMemberCountersAddedColdPages = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 23, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberCountersAddedColdPages.setStatus('current')
if mibBuilder.loadTexts: eqlMemberCountersAddedColdPages.setDescription('count of the number of cold pages added to this member.')
eqlMemberCountersRemovedColdPages = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 23, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberCountersRemovedColdPages.setStatus('current')
if mibBuilder.loadTexts: eqlMemberCountersRemovedColdPages.setDescription('count of the number of cold pages removed from this member.')
eqlArchiveTaskTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24), )
if mibBuilder.loadTexts: eqlArchiveTaskTable.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskTable.setDescription('EqualLogic-Persistent Volume balancer task table.')
eqlArchiveTaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1), ).setIndexNames((0, "EQLSTORAGEPOOL-MIB", "eqlStoragePoolIndex"), (0, "EQLVOLBALANCER-MIB", "eqlVolBalPlanIndex"), (0, "EQLVOLBALANCER-MIB", "eqlArchiveTaskIndex"), (0, "EQLVOLUME-MIB", "eqliscsiLocalMemberId"))
if mibBuilder.loadTexts: eqlArchiveTaskEntry.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskEntry.setDescription('An entry (row) containing a volume balancer task.')
eqlArchiveTaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlArchiveTaskIndex.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskIndex.setDescription('Unique Index for this  task entry.')
eqlArchiveTaskMemberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlArchiveTaskMemberCount.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMemberCount.setDescription('Unique Index for this  task entry.')
eqlArchiveTaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("compression", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlArchiveTaskType.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskType.setDescription('Task type')
eqlArchiveTaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("active", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlArchiveTaskState.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskState.setDescription('task state')
eqlArchiveTaskEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlArchiveTaskEntryStatus.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskEntryStatus.setDescription('This field is used indicate the status of this entry.')
eqlArchiveTaskMember1Uuid = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlArchiveTaskMember1Uuid.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember1Uuid.setDescription('uuid for member')
eqlArchiveTaskMember1Flags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlArchiveTaskMember1Flags.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember1Flags.setDescription('flags for member.')
eqlArchiveTaskMember2Uuid = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlArchiveTaskMember2Uuid.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember2Uuid.setDescription('uuid for member')
eqlArchiveTaskMember2Flags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlArchiveTaskMember2Flags.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember2Flags.setDescription('flags for member.')
eqlArchiveTaskMember3Uuid = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlArchiveTaskMember3Uuid.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember3Uuid.setDescription('uuid for member')
eqlArchiveTaskMember3Flags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlArchiveTaskMember3Flags.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember3Flags.setDescription('flags for member.')
eqlArchiveTaskMember4Uuid = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlArchiveTaskMember4Uuid.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember4Uuid.setDescription('uuid for member')
eqlArchiveTaskMember4Flags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 13), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlArchiveTaskMember4Flags.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember4Flags.setDescription('flags for member.')
eqlArchiveTaskMember5Uuid = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlArchiveTaskMember5Uuid.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember5Uuid.setDescription('uuid for member')
eqlArchiveTaskMember5Flags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 15), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlArchiveTaskMember5Flags.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember5Flags.setDescription('flags for member.')
eqlArchiveTaskMember6Uuid = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlArchiveTaskMember6Uuid.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember6Uuid.setDescription('uuid for member')
eqlArchiveTaskMember6Flags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 17), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlArchiveTaskMember6Flags.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember6Flags.setDescription('flags for member.')
eqlArchiveTaskMember7Uuid = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlArchiveTaskMember7Uuid.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember7Uuid.setDescription('uuid for member')
eqlArchiveTaskMember7Flags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlArchiveTaskMember7Flags.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember7Flags.setDescription('flags for member.')
eqlArchiveTaskMember8Uuid = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlArchiveTaskMember8Uuid.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember8Uuid.setDescription('uuid for member')
eqlArchiveTaskMember8Flags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 21), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlArchiveTaskMember8Flags.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember8Flags.setDescription('flags for member.')
eqlArchiveTaskMember9Uuid = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlArchiveTaskMember9Uuid.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember9Uuid.setDescription('uuid for member')
eqlArchiveTaskMember9Flags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 23), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlArchiveTaskMember9Flags.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember9Flags.setDescription('flags for member.')
eqlArchiveTaskMember10Uuid = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlArchiveTaskMember10Uuid.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember10Uuid.setDescription('uuid for member')
eqlArchiveTaskMember10Flags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 25), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlArchiveTaskMember10Flags.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember10Flags.setDescription('flags for member.')
eqlArchiveTaskMember11Uuid = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlArchiveTaskMember11Uuid.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember11Uuid.setDescription('uuid for member')
eqlArchiveTaskMember11Flags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 27), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlArchiveTaskMember11Flags.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember11Flags.setDescription('flags for member.')
eqlArchiveTaskMember12Uuid = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlArchiveTaskMember12Uuid.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember12Uuid.setDescription('uuid for member')
eqlArchiveTaskMember12Flags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 29), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlArchiveTaskMember12Flags.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember12Flags.setDescription('flags for member.')
eqlArchiveTaskMember13Uuid = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlArchiveTaskMember13Uuid.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember13Uuid.setDescription('uuid for member')
eqlArchiveTaskMember13Flags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 31), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlArchiveTaskMember13Flags.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember13Flags.setDescription('flags for member.')
eqlArchiveTaskMember14Uuid = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlArchiveTaskMember14Uuid.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember14Uuid.setDescription('uuid for member')
eqlArchiveTaskMember14Flags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 33), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlArchiveTaskMember14Flags.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember14Flags.setDescription('flags for member.')
eqlArchiveTaskMember15Uuid = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlArchiveTaskMember15Uuid.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember15Uuid.setDescription('uuid for member')
eqlArchiveTaskMember15Flags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 35), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlArchiveTaskMember15Flags.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember15Flags.setDescription('flags for member.')
eqlArchiveTaskMember16Uuid = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 36), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlArchiveTaskMember16Uuid.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember16Uuid.setDescription('uuid for member')
eqlArchiveTaskMember16Flags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 14, 1, 24, 1, 37), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlArchiveTaskMember16Flags.setStatus('current')
if mibBuilder.loadTexts: eqlArchiveTaskMember16Flags.setDescription('flags for member.')
mibBuilder.exportSymbols("EQLVOLBALANCER-MIB", eqlArchiveTaskMember10Flags=eqlArchiveTaskMember10Flags, eqlVolBalPlanVacatingMemberUUID=eqlVolBalPlanVacatingMemberUUID, eqlVolBalTaskNumPages=eqlVolBalTaskNumPages, eqlVolBalPlanAllocatedPagesMoved=eqlVolBalPlanAllocatedPagesMoved, eqlvolbalancerConfigVolSliceRollupTime=eqlvolbalancerConfigVolSliceRollupTime, eqlLocalIOCountsReadLatencyMs=eqlLocalIOCountsReadLatencyMs, eqlVolBalHistorySlicesInvolved=eqlVolBalHistorySlicesInvolved, eqlPageMoveHistoryAllocatedPagesMoved=eqlPageMoveHistoryAllocatedPagesMoved, eqlVolBalTaskPickedPagesRev=eqlVolBalTaskPickedPagesRev, eqlMemberCountersRemovedHotPages=eqlMemberCountersRemovedHotPages, eqlvolbalancerDailyVolumeCostEntry=eqlvolbalancerDailyVolumeCostEntry, eqlvolbalancerObjects=eqlvolbalancerObjects, eqlPageMoveHistoryTableMemberNextFreeSlot=eqlPageMoveHistoryTableMemberNextFreeSlot, eqlvolbalancerNotifications=eqlvolbalancerNotifications, eqlVolBalConfigPreviousLeadUUID=eqlVolBalConfigPreviousLeadUUID, eqlVolBalPlanSecondAlternateDst=eqlVolBalPlanSecondAlternateDst, eqlVolBalTaskPickedPagesEntryStatus=eqlVolBalTaskPickedPagesEntryStatus, eqlPageMoveHistoryMemberStartAUS=eqlPageMoveHistoryMemberStartAUS, eqlPlanAUSEntry=eqlPlanAUSEntry, eqlvolbalancerVolumeSliceCostStatus=eqlvolbalancerVolumeSliceCostStatus, eqlVolBalConfigPoolThroughputRateMax=eqlVolBalConfigPoolThroughputRateMax, eqlPageMoveHistoryTableFreeSlot=eqlPageMoveHistoryTableFreeSlot, eqlVolBalMemberStatsAvgRespTime=eqlVolBalMemberStatsAvgRespTime, eqlPageMoveHistoryTotalPages=eqlPageMoveHistoryTotalPages, eqlVolBalHistoryPagesMoved=eqlVolBalHistoryPagesMoved, eqlvolbalancerConfigGroup=eqlvolbalancerConfigGroup, eqlVolBalTaskTable=eqlVolBalTaskTable, eqlLocalIOCountsHeadroomPercent=eqlLocalIOCountsHeadroomPercent, eqlVolBalSliceMemberUUID=eqlVolBalSliceMemberUUID, eqlVolBalCommandEntry=eqlVolBalCommandEntry, eqlMemberCountersRemovedPages=eqlMemberCountersRemovedPages, eqlArchiveTaskMember1Flags=eqlArchiveTaskMember1Flags, eqlVolBalPlanHistoryTableMemberCount=eqlVolBalPlanHistoryTableMemberCount, eqlvolbalancerRecommendationDstPsaId=eqlvolbalancerRecommendationDstPsaId, eqlVolBalTaskPickedProgress=eqlVolBalTaskPickedProgress, eqlVolBalPlanTotalPages=eqlVolBalPlanTotalPages, eqlVolBalTaskSrcDriveGroup=eqlVolBalTaskSrcDriveGroup, eqlPageMoveHistoryMemberIndex=eqlPageMoveHistoryMemberIndex, eqlVolBalSliceStatsRndRdRate=eqlVolBalSliceStatsRndRdRate, eqlVolBalTaskVolumePsvId=eqlVolBalTaskVolumePsvId, eqlVolBalPlanState=eqlVolBalPlanState, eqlVolBalPlanEntry=eqlVolBalPlanEntry, eqlPropertiesTable=eqlPropertiesTable, eqlVolBalConfigHotColdPageSwapEnabled=eqlVolBalConfigHotColdPageSwapEnabled, eqlArchiveTaskType=eqlArchiveTaskType, eqlVolBalTaskEntryStatus=eqlVolBalTaskEntryStatus, eqlVolBalPlanTotalSnapPages=eqlVolBalPlanTotalSnapPages, eqlVolBalCommandVolumeId=eqlVolBalCommandVolumeId, eqlPageMoveHistoryAllocatedPages=eqlPageMoveHistoryAllocatedPages, eqlLocalIOCountsEntry=eqlLocalIOCountsEntry, eqlMemberCountersAddedHotPages=eqlMemberCountersAddedHotPages, eqlVolBalPlanComplete=eqlVolBalPlanComplete, eqlVolBalConfigSenseFrequency=eqlVolBalConfigSenseFrequency, eqlVolBalTaskDstDriveGroup=eqlVolBalTaskDstDriveGroup, eqlLocalIOCountsTable=eqlLocalIOCountsTable, eqlPropertiesIndex=eqlPropertiesIndex, eqlVolBalConfigPlacementThreshold=eqlVolBalConfigPlacementThreshold, eqlvolbalancerConfigVolSliceCostFreq=eqlvolbalancerConfigVolSliceCostFreq, eqlVolBalSliceStatsPlacementScore=eqlVolBalSliceStatsPlacementScore, eqlVolBalTaskSrcName=eqlVolBalTaskSrcName, eqlVolBalSliceVolumeUUID=eqlVolBalSliceVolumeUUID, eqlMemberCountersUuid=eqlMemberCountersUuid, eqlVolBalTaskState=eqlVolBalTaskState, eqlVolBalTaskVolLeader=eqlVolBalTaskVolLeader, eqlVolBalCommandIndex=eqlVolBalCommandIndex, eqlPageMoveHistoryMemberTable=eqlPageMoveHistoryMemberTable, eqlArchiveTaskMember5Flags=eqlArchiveTaskMember5Flags, eqlVolBalConfigLastPlanIndex=eqlVolBalConfigLastPlanIndex, eqlvolbalancerRecommendationSrcPsaId=eqlvolbalancerRecommendationSrcPsaId, eqlVolBalMemberStatsEntry=eqlVolBalMemberStatsEntry, eqlTaskLocalPickedPagesEntry=eqlTaskLocalPickedPagesEntry, eqlTaskLocalPickedPagesCount=eqlTaskLocalPickedPagesCount, eqlArchiveTaskMember16Flags=eqlArchiveTaskMember16Flags, eqlVolBalConfigRAIDSetFreeSpaceTroubleDelay=eqlVolBalConfigRAIDSetFreeSpaceTroubleDelay, eqlArchiveTaskMember11Uuid=eqlArchiveTaskMember11Uuid, eqlVolBalCommandMemberUUID=eqlVolBalCommandMemberUUID, eqlPageMoveHistoryTotalPagesMoved=eqlPageMoveHistoryTotalPagesMoved, eqlLocalIOCountsWriteBytes=eqlLocalIOCountsWriteBytes, eqlvolbalancerModule=eqlvolbalancerModule, eqlPageMoveHistoryMemberRemovedPages=eqlPageMoveHistoryMemberRemovedPages, eqlVolBalTaskPickedPagesContext=eqlVolBalTaskPickedPagesContext, eqlVolBalTaskSrcInitialPageCount=eqlVolBalTaskSrcInitialPageCount, eqlVolBalTaskPickedPagesFlags=eqlVolBalTaskPickedPagesFlags, eqlVolBalMemberUUID=eqlVolBalMemberUUID, eqlVolBalTaskIndex=eqlVolBalTaskIndex, eqlVolBalSliceTimeStamp=eqlVolBalSliceTimeStamp, eqlMemberCountersIndex=eqlMemberCountersIndex, eqlArchiveTaskTable=eqlArchiveTaskTable, eqlTaskLocalPickedPagesFlags=eqlTaskLocalPickedPagesFlags, eqlArchiveTaskMember4Uuid=eqlArchiveTaskMember4Uuid, eqlLocalIOCountsReadBytes=eqlLocalIOCountsReadBytes, eqlVolBalCommandFlags=eqlVolBalCommandFlags, eqlVolBalHistoryEntry=eqlVolBalHistoryEntry, eqlPageMoveHistoryMemberCount=eqlPageMoveHistoryMemberCount, eqlArchiveTaskMember6Flags=eqlArchiveTaskMember6Flags, eqlVolBalConfigFreeSpaceTroubleEnabled=eqlVolBalConfigFreeSpaceTroubleEnabled, eqlvolbalancerVolumeSliceCostPsaId=eqlvolbalancerVolumeSliceCostPsaId, eqlMemberCountersEntry=eqlMemberCountersEntry, eqlVolBalHistoryStop=eqlVolBalHistoryStop, eqlPropertiesEntry=eqlPropertiesEntry, eqlLocalIOCountsTableFreeSlot=eqlLocalIOCountsTableFreeSlot, eqlTaskLocalPickedPagesEntryStatus=eqlTaskLocalPickedPagesEntryStatus, eqlArchiveTaskIndex=eqlArchiveTaskIndex, eqlLocalIOCountsWrites=eqlLocalIOCountsWrites, eqlVolBalSliceStatsSeqWrRate=eqlVolBalSliceStatsSeqWrRate, eqlVolBalConfigRAIDSetJoinDelay=eqlVolBalConfigRAIDSetJoinDelay, eqlvolbalancerDailyVolumeCostStatus=eqlvolbalancerDailyVolumeCostStatus, eqlArchiveTaskMember14Uuid=eqlArchiveTaskMember14Uuid, eqlPropertiesValue=eqlPropertiesValue, eqlVolBalSliceStatsRndWrRate=eqlVolBalSliceStatsRndWrRate, eqlPageMoveHistoryStartTime=eqlPageMoveHistoryStartTime, eqlVolBalPlanHistoryTableMemberIndex=eqlVolBalPlanHistoryTableMemberIndex, eqlVolBalCommandFromPoolId=eqlVolBalCommandFromPoolId, eqlVolBalConfigVolumeDelFrequency=eqlVolBalConfigVolumeDelFrequency, eqlVolBalPlanTable=eqlVolBalPlanTable, eqlvolbalancerRecommendationVolumeId=eqlvolbalancerRecommendationVolumeId, eqlVolBalPlanHistoryTableIndex=eqlVolBalPlanHistoryTableIndex, eqlVolBalCommandToPoolId=eqlVolBalCommandToPoolId, eqlPageMoveHistoryType=eqlPageMoveHistoryType, eqlMemberCountersRemovedAllocatedPages=eqlMemberCountersRemovedAllocatedPages, eqlArchiveTaskMemberCount=eqlArchiveTaskMemberCount, eqlArchiveTaskMember6Uuid=eqlArchiveTaskMember6Uuid, eqlArchiveTaskMember12Uuid=eqlArchiveTaskMember12Uuid, eqlArchiveTaskMember11Flags=eqlArchiveTaskMember11Flags, eqlVolBalConfigFlags=eqlVolBalConfigFlags, eqlvolbalancerDailyVolumeCostTable=eqlvolbalancerDailyVolumeCostTable, eqlTaskLocalPickedPagesAllocatedProgress=eqlTaskLocalPickedPagesAllocatedProgress, eqlVolBalMemberStatsSeqRdRate=eqlVolBalMemberStatsSeqRdRate, eqlVolBalMemberStatsTable=eqlVolBalMemberStatsTable, eqlPageMoveHistoryIndex=eqlPageMoveHistoryIndex, eqlVolBalTaskType=eqlVolBalTaskType, eqlVolBalConfigVolumeBindFrequency=eqlVolBalConfigVolumeBindFrequency, eqlVolBalPlanAssignedPagesMoved=eqlVolBalPlanAssignedPagesMoved, eqlArchiveTaskEntry=eqlArchiveTaskEntry, eqlArchiveTaskMember9Uuid=eqlArchiveTaskMember9Uuid, eqlVolBalTaskCoordinateWith=eqlVolBalTaskCoordinateWith, eqlVolBalTaskNumAllocatedPages=eqlVolBalTaskNumAllocatedPages, eqlVolBalSliceStatsTable=eqlVolBalSliceStatsTable, eqlPageMoveHistoryMemberEntry=eqlPageMoveHistoryMemberEntry, eqlVolBalTaskPickedPagesAllocatedProgress=eqlVolBalTaskPickedPagesAllocatedProgress, eqlPageMoveHistoryMemberId=eqlPageMoveHistoryMemberId, eqlPageMoveHistoryMemberRemovedAllocatedPages=eqlPageMoveHistoryMemberRemovedAllocatedPages, eqlVolBalTaskNumSnapPages=eqlVolBalTaskNumSnapPages, eqlVolBalPlanStartTime=eqlVolBalPlanStartTime, eqlPageMoveHistoryMemberAddedAllocatedPages=eqlPageMoveHistoryMemberAddedAllocatedPages, eqlVolBalConfigHistoryRowMax=eqlVolBalConfigHistoryRowMax, eqlVolBalTaskPickedPagesTable=eqlVolBalTaskPickedPagesTable, eqlvolbalancerRecommendationTable=eqlvolbalancerRecommendationTable, eqlvolbalancerVolumeSliceCostCost=eqlvolbalancerVolumeSliceCostCost, eqlVolBalCommandCreateTime=eqlVolBalCommandCreateTime, eqlVolBalCommandState=eqlVolBalCommandState, eqlArchiveTaskMember13Uuid=eqlArchiveTaskMember13Uuid, eqlPlanAUSCount=eqlPlanAUSCount, eqlvolbalancerConformance=eqlvolbalancerConformance, eqlPlanAUSArray=eqlPlanAUSArray, eqlvolbalancerRecommendationStatus=eqlvolbalancerRecommendationStatus, eqlvolbalancerVolumeSliceCostEntry=eqlvolbalancerVolumeSliceCostEntry, eqlVolBalConfigArchiveEnabled=eqlVolBalConfigArchiveEnabled, eqlVolBalCommandTable=eqlVolBalCommandTable, eqlPageMoveHistoryEntry=eqlPageMoveHistoryEntry, eqlVolBalTaskDstName=eqlVolBalTaskDstName, eqlVolBalPlanEndTime=eqlVolBalPlanEndTime, eqlvolbalancerRecommendationComplete=eqlvolbalancerRecommendationComplete, eqlVolBalCommandRunning=eqlVolBalCommandRunning, eqlVolBalCommandSiteId=eqlVolBalCommandSiteId, eqlPageMoveHistoryTable=eqlPageMoveHistoryTable, eqlVolBalMemberStatsRndRdRate=eqlVolBalMemberStatsRndRdRate, eqlTaskLocalPickedPagesContext=eqlTaskLocalPickedPagesContext, eqlArchiveTaskMember3Flags=eqlArchiveTaskMember3Flags, eqlVolBalHistoryStart=eqlVolBalHistoryStart, eqlVolBalCommandReason=eqlVolBalCommandReason, eqlArchiveTaskMember8Uuid=eqlArchiveTaskMember8Uuid, eqlVolBalSliceStatsSeqRdRate=eqlVolBalSliceStatsSeqRdRate, eqlArchiveTaskMember10Uuid=eqlArchiveTaskMember10Uuid, eqlTaskLocalPickedPagesStatus=eqlTaskLocalPickedPagesStatus, eqlVolBalConfigRAIDSetDeleteDelay=eqlVolBalConfigRAIDSetDeleteDelay, eqlVolBalMemberStatsCPUUsage=eqlVolBalMemberStatsCPUUsage, eqlArchiveTaskMember12Flags=eqlArchiveTaskMember12Flags, eqlvolbalancerVolumeSliceCostTime=eqlvolbalancerVolumeSliceCostTime, eqlArchiveTaskMember15Flags=eqlArchiveTaskMember15Flags, eqlPageMoveHistoryEndTime=eqlPageMoveHistoryEndTime, eqlVolBalCommandPlanIndex=eqlVolBalCommandPlanIndex, eqlArchiveTaskEntryStatus=eqlArchiveTaskEntryStatus, eqlVolBalPlanEntryStatus=eqlVolBalPlanEntryStatus, eqlVolBalConfigEnabled=eqlVolBalConfigEnabled, eqlVolBalConfigMinSpreadSize=eqlVolBalConfigMinSpreadSize, eqlArchiveTaskMember1Uuid=eqlArchiveTaskMember1Uuid, eqlArchiveTaskMember13Flags=eqlArchiveTaskMember13Flags, eqlVolBalHistoryBalanceReason=eqlVolBalHistoryBalanceReason, eqlArchiveTaskMember7Flags=eqlArchiveTaskMember7Flags, eqlVolBalPlanFlags=eqlVolBalPlanFlags, eqlTaskLocalPickedPagesArray=eqlTaskLocalPickedPagesArray, eqlArchiveTaskMember14Flags=eqlArchiveTaskMember14Flags, eqlVolBalSliceStatsEntry=eqlVolBalSliceStatsEntry, eqlVolBalConfigArchivalPlacementThreshold=eqlVolBalConfigArchivalPlacementThreshold, eqlVolBalConfigTable=eqlVolBalConfigTable, eqlPageMoveHistoryPoolId=eqlPageMoveHistoryPoolId, eqlTaskLocalPickedPagesRev=eqlTaskLocalPickedPagesRev, eqlMemberCountersRemovedColdPages=eqlMemberCountersRemovedColdPages, eqlVolBalPlanFirstAlternateDst=eqlVolBalPlanFirstAlternateDst, eqlArchiveTaskMember2Flags=eqlArchiveTaskMember2Flags, eqlArchiveTaskMember9Flags=eqlArchiveTaskMember9Flags, eqlVolBalTaskPickedPagesCount=eqlVolBalTaskPickedPagesCount, eqlVolBalHistoryMembersInvolved=eqlVolBalHistoryMembersInvolved, eqlMemberCountersTable=eqlMemberCountersTable, eqlArchiveTaskMember2Uuid=eqlArchiveTaskMember2Uuid, eqlVolBalTaskEntry=eqlVolBalTaskEntry, eqlArchiveTaskMember8Flags=eqlArchiveTaskMember8Flags, eqlPageMoveHistoryMemberStartIndex=eqlPageMoveHistoryMemberStartIndex, eqlArchiveTaskMember7Uuid=eqlArchiveTaskMember7Uuid, eqlVolBalPlanTotalAllocatedPages=eqlVolBalPlanTotalAllocatedPages, eqlvolbalancerVolumeSliceCostVolumeId=eqlvolbalancerVolumeSliceCostVolumeId, eqlVolBalConfigPreferAutoRAIDPlacement=eqlVolBalConfigPreferAutoRAIDPlacement, eqlPageMoveHistoryMemberParentIndex=eqlPageMoveHistoryMemberParentIndex, eqlVolBalPlanIndex=eqlVolBalPlanIndex, eqlVolBalHistoryTable=eqlVolBalHistoryTable, eqlPageMoveHistoryMemberPlanId=eqlPageMoveHistoryMemberPlanId, eqlLocalIOCountsIndex=eqlLocalIOCountsIndex, eqlVolBalConfigImbalDetectFrequency=eqlVolBalConfigImbalDetectFrequency, eqlvolbalancerVolumeSliceCostTable=eqlvolbalancerVolumeSliceCostTable, eqlPageMoveHistoryPlanId=eqlPageMoveHistoryPlanId, eqlMemberCountersAddedPages=eqlMemberCountersAddedPages, eqlVolBalMemberTimeStamp=eqlVolBalMemberTimeStamp, eqlvolbalancerRecommendationEntry=eqlvolbalancerRecommendationEntry, eqlMemberCountersAddedColdPages=eqlMemberCountersAddedColdPages, eqlArchiveTaskMember4Flags=eqlArchiveTaskMember4Flags, eqlMemberCountersAddedAllocatedPages=eqlMemberCountersAddedAllocatedPages, eqlPageMoveHistoryMemberExpectedEndAUS=eqlPageMoveHistoryMemberExpectedEndAUS, eqlLocalIOCountsReads=eqlLocalIOCountsReads, eqlArchiveTaskMember16Uuid=eqlArchiveTaskMember16Uuid, eqlArchiveTaskMember15Uuid=eqlArchiveTaskMember15Uuid, eqlVolBalTaskPickedPagesEntry=eqlVolBalTaskPickedPagesEntry, eqlVolBalMemberStatsSeqWrRate=eqlVolBalMemberStatsSeqWrRate, eqlTaskLocalPickedProgress=eqlTaskLocalPickedProgress, eqlLocalIOCountsWorstQueuingLatencyMs=eqlLocalIOCountsWorstQueuingLatencyMs, eqlPageMoveHistoryResult=eqlPageMoveHistoryResult, eqlPageMoveHistoryMemberAddedPages=eqlPageMoveHistoryMemberAddedPages, eqlPlanAUSTable=eqlPlanAUSTable, eqlVolBalConfigEntry=eqlVolBalConfigEntry, eqlvolbalancerDailyVolumeCostVolumeId=eqlvolbalancerDailyVolumeCostVolumeId, eqlVolBalPlanSnapPagesMoved=eqlVolBalPlanSnapPagesMoved, eqlPageMoveHistoryMemberUuid=eqlPageMoveHistoryMemberUuid, eqlvolbalancerRecommendationTime=eqlvolbalancerRecommendationTime, eqlVolBalConfigRAIDStatsRowMax=eqlVolBalConfigRAIDStatsRowMax, eqlLocalIOCountsWriteLatencyMs=eqlLocalIOCountsWriteLatencyMs, PYSNMP_MODULE_ID=eqlvolbalancerModule, eqlArchiveTaskMember5Uuid=eqlArchiveTaskMember5Uuid, eqlLocalIOCountsTimestamp=eqlLocalIOCountsTimestamp, eqlVolBalCommandEntryStatus=eqlVolBalCommandEntryStatus, eqlvolbalancerDailyVolumeCostDay=eqlvolbalancerDailyVolumeCostDay, eqlMemberCountersTimeStamp=eqlMemberCountersTimeStamp, eqlTaskLocalPickedPagesTable=eqlTaskLocalPickedPagesTable, eqlvolbalancerDailyVolumeCostCost=eqlvolbalancerDailyVolumeCostCost, eqlVolBalMemberStatsRndWrRate=eqlVolBalMemberStatsRndWrRate)
mibBuilder.exportSymbols("EQLVOLBALANCER-MIB", eqlArchiveTaskMember3Uuid=eqlArchiveTaskMember3Uuid, eqlPropertiesName=eqlPropertiesName, eqlVolBalConfigReamSize=eqlVolBalConfigReamSize, eqlVolBalTaskPickedPagesArray=eqlVolBalTaskPickedPagesArray, eqlVolBalMemberStatsFreeSpace=eqlVolBalMemberStatsFreeSpace, eqlPageMoveHistoryTableNextFreeSlot=eqlPageMoveHistoryTableNextFreeSlot, eqlVolBalPlanReason=eqlVolBalPlanReason, eqlLocalIOCountsTableNextFreeSlot=eqlLocalIOCountsTableNextFreeSlot, eqlArchiveTaskState=eqlArchiveTaskState)
