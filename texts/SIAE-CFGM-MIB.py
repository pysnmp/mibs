#
# PySNMP MIB module SIAE-CFGM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/siae/SIAE-CFGM-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 10:51:10 2024
# On host fv-az1251-584 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
alarmTrap, = mibBuilder.importSymbols("SIAE-ALARM-MIB", "alarmTrap")
equipIpSnmpAgentAddress, = mibBuilder.importSymbols("SIAE-EQUIP-MIB", "equipIpSnmpAgentAddress")
siaeMib, = mibBuilder.importSymbols("SIAE-TREE-MIB", "siaeMib")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32, IpAddress, ModuleIdentity, Bits, Counter32, TimeTicks, NotificationType, Counter64, Gauge32, ObjectIdentity, MibIdentifier, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32", "IpAddress", "ModuleIdentity", "Bits", "Counter32", "TimeTicks", "NotificationType", "Counter64", "Gauge32", "ObjectIdentity", "MibIdentifier", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
configManagement = ModuleIdentity((1, 3, 6, 1, 4, 1, 3373, 1103, 30))
configManagement.setRevisions(('2014-07-25 00:00', '2014-02-03 00:00', '2013-04-16 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: configManagement.setRevisionsDescriptions(('MIB version 01.00.01\n             Added value configUseAndSwitch(5) to configManagementAction\n            ', 'Improved description of configManagementMibVersion\n            ', 'Initial version 01.00.00\n            ',))
if mibBuilder.loadTexts: configManagement.setLastUpdated('201407250000Z')
if mibBuilder.loadTexts: configManagement.setOrganization('SIAE MICROELETTRONICA spa')
if mibBuilder.loadTexts: configManagement.setContactInfo('SIAE MICROELETTONICA s.p.a.\n             Via Michelangelo Buonarroti, 21\n             20093 - Cologno Monzese\n             Milano - ITALY\n             Phone :  +39-02-27325-1\n             E-mail: tbd@siaemic.com\n            ')
if mibBuilder.loadTexts: configManagement.setDescription('Backup and Restore (Configuration management) of the NE\n            ')
configManagementMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 30, 1), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: configManagementMibVersion.setStatus('current')
if mibBuilder.loadTexts: configManagementMibVersion.setDescription('Numerical version of this module.\n             The string version of this MIB have the following format:\n                XX.YY.ZZ\n             so, for example, the value 1 should be interpreted as 00.00.01\n             and the value 10001 should be interpreted as 01.00.01.')
configManagementFileName = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 30, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configManagementFileName.setStatus('current')
if mibBuilder.loadTexts: configManagementFileName.setDescription('Name of the file, containing the equipment configuration, to\n              upload or download according to the object configManagementAction')
configManagementServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 30, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configManagementServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: configManagementServerIpAddress.setDescription("Ip address of the SNMP manager connected from/to which the\n             configuration is downloaded/uploaded,\n             if this object is set '0.0.0.0', then the IP address of server\n             is read from incoming ethernet packet.")
configManagementAction = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 30, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("configNone", 0), ("configSave", 1), ("configUse", 2), ("configBack", 3), ("configAbort", 4), ("configUseAndSwitch", 5))).clone('configNone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configManagementAction.setStatus('current')
if mibBuilder.loadTexts: configManagementAction.setDescription('Action requested to the equipment:\n             - configNone:   no action required;\n             - configSave:   the current equipment configuration will be saved\n                              in the file whose name is written in the leaf\n                              configurationFileName through FTP protocol;\n             - configUse:    the configuration file, whose name is written in\n                              the leaf configurationFileName, will be transfer-\n                              red on the target through FTP protocol and it will\n                              be used after an implicit restart of the equip-\n                              ment.\n                              A copy of the current equipment configuration will\n                              be saved on the equipment filesystem in order to\n                              return to it.\n             - configBack:   the equipment configuration, saved during a\n                              config-use action will be used after an implicit\n                              restart of the equipment.\n             - configAbort:  the action in progress will be interrupted.\n\n             - configBackAndSwich:  the equipment configuration, saved during a\n                              config-use action will be used after an implicit\n                              bench switch of the equipment.\n\n             The value of this object is self cleared (reset to the value\n             configNone) after its use.\n            ')
configManagementState = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 30, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("configCompleted", 1), ("configInterrupted", 2), ("configVerifying", 3), ("configSaving", 4), ("configDownloading", 5), ("configUploading", 6), ("configUsing", 7), ("configMakingCopy", 8), ("configAborting", 9), ("configRestarting", 10), ("configStarted", 11))).clone('configCompleted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: configManagementState.setStatus('current')
if mibBuilder.loadTexts: configManagementState.setDescription('Action in progess state:\n             - configCompleted:   the action required has been successfully\n                                  completed;\n             - configInterrupted: the action required has been abnormally\n                                  stopped;\n             - configVerifying:   the downloaded configuration is being checked\n                                  if it is suitable for the equipment;\n             - configSaving:      current configuration is being saved to be\n                                  tranferred to the manager;\n             - configUploading:   the current configuration is being transfer-\n                                  red to the manager;\n             - configDownloading: a configuration file is being transferred\n                                  from the manager to the equipment;\n             - configUsing:       the current configuration is being overwrit-\n                                  ten with the downloaded one or with the\n                                  previously saved one;\n             - configMaking-copy: a copy of the  current configuration is being\n                                  saved to eventually return to it;\n             - configAborting:    the current action is being aborted as requi-\n                                  red by the config-abort action.\n             - configRestarting:  the equipment is restarting.\n             - configStarted:     the action required has been started;\n\n             A trap is sent at every change of the object value. When the status\n             become configStarted, the sent trap notifies the start of the\n             required action.\n             When the status become configCompleted or config-interrupted, the\n             sent trap notifies a successfully or an abnormal end of the action\n             in progress.')
configManagementFailure = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 30, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("configNoFailure", 0), ("configVerifying", 3), ("configSaving", 4), ("configDownloading", 5), ("configUploading", 6), ("configUsing", 7), ("configMakingCopy", 8), ("configAborted", 9))).clone('configNoFailure')).setMaxAccess("readonly")
if mibBuilder.loadTexts: configManagementFailure.setStatus('current')
if mibBuilder.loadTexts: configManagementFailure.setDescription('The value of this object identifies the configuration upload/\n             download state in which errors have been detected. The value\n             config-aborted means interrupted by user.')
configManagementBackupFileDate = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 30, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configManagementBackupFileDate.setStatus('current')
if mibBuilder.loadTexts: configManagementBackupFileDate.setDescription(' Date and time of the previous configuration file saved by the\n                config-use action. The value of this object is expressed as the\n                number of seconds since the midnight of 1/1/1970. A zero value\n                means no previous configuration file has been created.')
configManagementTrapNotification = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 30, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trapDisable", 1), ("trapEnable", 2))).clone('trapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configManagementTrapNotification.setStatus('current')
if mibBuilder.loadTexts: configManagementTrapNotification.setDescription('Enable/disable the trap generation on configuration tranfer\n             operation')
configManagementFtpStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 3373, 1103, 0, 3001)).setObjects(("SIAE-EQUIP-MIB", "equipIpSnmpAgentAddress"), ("SIAE-CFGM-MIB", "configManagementState"), ("SIAE-CFGM-MIB", "configManagementFailure"))
if mibBuilder.loadTexts: configManagementFtpStatusTrap.setStatus('current')
if mibBuilder.loadTexts: configManagementFtpStatusTrap.setDescription('This event is generated by ALCP2E-NE when the status of configuration\n             transfer is changed.\n             The data passed with the event are:\n             1) equipIpSnmpAgentAddress\n             2) configurationState\n             3) configurationFailure')
mibBuilder.exportSymbols("SIAE-CFGM-MIB", configManagementState=configManagementState, configManagementFtpStatusTrap=configManagementFtpStatusTrap, configManagement=configManagement, configManagementFailure=configManagementFailure, configManagementAction=configManagementAction, configManagementMibVersion=configManagementMibVersion, PYSNMP_MODULE_ID=configManagement, configManagementBackupFileDate=configManagementBackupFileDate, configManagementTrapNotification=configManagementTrapNotification, configManagementServerIpAddress=configManagementServerIpAddress, configManagementFileName=configManagementFileName)
