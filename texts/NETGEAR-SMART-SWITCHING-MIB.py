#
# PySNMP MIB module NETGEAR-SMART-SWITCHING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/netgear/NETGEAR-SMART-SWITCHING-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 10:09:36 2024
# On host fv-az575-513 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ng700smartswitch, = mibBuilder.importSymbols("NETGEAR-REF-MIB", "ng700smartswitch")
dot1qVlanIndex, dot1qTpFdbAddress, dot1qFdbId, VlanIndex = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qVlanIndex", "dot1qTpFdbAddress", "dot1qFdbId", "VlanIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, MibIdentifier, Gauge32, Integer32, Counter64, Bits, IpAddress, ModuleIdentity, iso, NotificationType, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "MibIdentifier", "Gauge32", "Integer32", "Counter64", "Bits", "IpAddress", "ModuleIdentity", "iso", "NotificationType", "ObjectIdentity", "Unsigned32")
DisplayString, RowStatus, DateAndTime, PhysAddress, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "DateAndTime", "PhysAddress", "TextualConvention", "MacAddress")
agentSwitching = ModuleIdentity((1, 3, 6, 1, 4, 1, 4526, 11, 1))
agentSwitching.setRevisions(('2008-03-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: agentSwitching.setRevisionsDescriptions(('Updated for release.',))
if mibBuilder.loadTexts: agentSwitching.setLastUpdated('200803170000Z')
if mibBuilder.loadTexts: agentSwitching.setOrganization('Netgear')
if mibBuilder.loadTexts: agentSwitching.setContactInfo('')
if mibBuilder.loadTexts: agentSwitching.setDescription('The Netgear Private MIB for Switching')
class PortList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight\n        ports, with the first octet specifying ports 1 through\n        8, the second octet specifying ports 9 through 16, etc.\n        Within each octet, the most significant bit represents\n        the lowest numbered port, and the least significant bit\n        represents the highest numbered port.  Thus, each port\n        of the bridge is represented by a single bit within the\n        value of this object.  If that bit has a value of '1'\n        then that port is included in the set of ports; the port\n        is not included if its bit has a value of '0'."
    status = 'current'

class VlanList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight\n        vlans, with the first octet specifying vlans 1 through\n        8, the second octet specifying vlans 9 through 16, etc.\n        Within each octet, the most significant bit represents\n        the lowest numbered vlan, and the least significant bit\n        represents the highest numbered vlan.  Thus, each vlan\n        supported is represented by a single bit within the\n        value of this object.  If that bit has a value of '1'\n        then the associated port is in that vlan; the port is\n        not included if the vlans bit has a value of '0'."
    status = 'current'

class AgentPortMask(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight\n        ports, with the first octet specifying ports 1 through\n        8, the second octet specifying ports 9 through 16, etc.\n        Within each octet, the most significant bit represents\n        the lowest numbered port, and the least significant bit\n        represents the highest numbered port.  Thus, each port\n        of the bridge is represented by a single bit within the\n        value of this object.  If that bit has a value of '1'\n        then that port is included in the set of ports; the port\n        is not included if its bit has a value of '0'\n             \n        When setting this value, the system will ignore \n        configuration for ports not between the first and last \n        valid ports.  Configuration of any port numbers between \n        this range that are not valid ports return a failure \n        message, but will still apply configuration for valid \n        ports."
    status = 'current'

class Ipv6Address(TextualConvention, OctetString):
    description = 'This data type is used to model IPv6 addresses.\n                This is a binary string of 16 octets in network\n                byte-order.'
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class Ipv6AddressPrefix(TextualConvention, OctetString):
    description = 'This data type is used to model IPv6 address\n               prefixes. This is a binary string of up to 16\n               octets in network byte-order.'
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class Ipv6AddressIfIdentifier(TextualConvention, OctetString):
    description = 'This data type is used to model IPv6 address\n               interface identifiers. This is a binary string\n                of up to 8 octets in network byte-order.'
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 8)

class Ipv6IfIndex(TextualConvention, Integer32):
    description = "A unique value, greater than zero for each\n               internetwork-layer interface in the managed\n               system. It is recommended that values are assigned\n               contiguously starting from 1. The value for each\n               internetwork-layer interface must remain constant\n               at least from one re-initialization of the entity's\n               network management system to the next\n\n\n\n\n               re-initialization."
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class Ipv6IfIndexOrZero(TextualConvention, Integer32):
    description = 'This textual convention is an extension of the\n                 Ipv6IfIndex convention.  The latter defines\n                 a greater than zero value used to identify an IPv6\n                 interface in the managed system.  This extension\n                 permits the additional value of zero.  The value\n                 zero is object-specific and must therefore be\n                 defined as part of the description of any object\n                 which uses this syntax.  Examples of the usage of\n                 zero might include situations where interface was\n                 unknown, or when none or all interfaces need to be\n                 referenced.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

agentInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1))
agentInventoryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 1))
agentInventorySysDescription = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySysDescription.setStatus('current')
if mibBuilder.loadTexts: agentInventorySysDescription.setDescription("The switch's Inventory system description.  ")
agentInventoryMachineType = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryMachineType.setStatus('current')
if mibBuilder.loadTexts: agentInventoryMachineType.setDescription('Type of the Machine used in the Switch ')
agentInventoryMachineModel = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryMachineModel.setStatus('current')
if mibBuilder.loadTexts: agentInventoryMachineModel.setDescription("The switch's Machine Model. ")
agentInventorySerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySerialNumber.setStatus('current')
if mibBuilder.loadTexts: agentInventorySerialNumber.setDescription('Serial number of the switch.')
agentInventoryFRUNumber = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryFRUNumber.setStatus('current')
if mibBuilder.loadTexts: agentInventoryFRUNumber.setDescription('FRU Number of the switch')
agentInventoryMaintenanceLevel = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryMaintenanceLevel.setStatus('current')
if mibBuilder.loadTexts: agentInventoryMaintenanceLevel.setDescription("The switch's Inventory Maintenance Level")
agentInventoryPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryPartNumber.setStatus('current')
if mibBuilder.loadTexts: agentInventoryPartNumber.setDescription("The switch's Inventory Part Number")
agentInventoryManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryManufacturer.setStatus('current')
if mibBuilder.loadTexts: agentInventoryManufacturer.setDescription('Name of the Manufacturer of this unit')
agentInventoryBurnedInMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 1, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryBurnedInMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentInventoryBurnedInMacAddress.setDescription('Burned-In MAC Address')
agentInventoryOperatingSystem = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryOperatingSystem.setStatus('current')
if mibBuilder.loadTexts: agentInventoryOperatingSystem.setDescription('Operating System running on this unit')
agentInventoryNetworkProcessingDevice = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryNetworkProcessingDevice.setStatus('current')
if mibBuilder.loadTexts: agentInventoryNetworkProcessingDevice.setDescription('Network Processing Device for this unit')
agentInventoryAdditionalPackages = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryAdditionalPackages.setStatus('current')
if mibBuilder.loadTexts: agentInventoryAdditionalPackages.setDescription('Lists additional functional packages available on this unit.')
agentInventorySoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: agentInventorySoftwareVersion.setDescription('Lists the version of software loaded on this unit.')
agentTrapLogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 2))
agentTrapLogTotal = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogTotal.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogTotal.setDescription('The total number of traps sent since last reset.')
agentTrapLogTotalSinceLastViewed = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogTotalSinceLastViewed.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogTotalSinceLastViewed.setDescription('The number of traps sent since last viewed.')
agentTrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 2, 4), )
if mibBuilder.loadTexts: agentTrapLogTable.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogTable.setDescription('Agent Trap Log')
agentTrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 2, 4, 1), ).setIndexNames((0, "NETGEAR-SMART-SWITCHING-MIB", "agentTrapLogIndex"))
if mibBuilder.loadTexts: agentTrapLogEntry.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogEntry.setDescription('Agent trap log entry')
agentTrapLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogIndex.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogIndex.setDescription('Unique index of trap entry')
agentTrapLogSystemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogSystemTime.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogSystemTime.setDescription('System uptime when trap was sent.\n                     This entry shows how long the system has been up when the trap occurred.')
agentTrapLogTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 2, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogTrap.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogTrap.setDescription('Description of the trap sent.')
agentSupportedMibTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 3), )
if mibBuilder.loadTexts: agentSupportedMibTable.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibTable.setDescription('Supported MIB table')
agentSupportedMibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 3, 1), ).setIndexNames((0, "NETGEAR-SMART-SWITCHING-MIB", "agentSupportedMibIndex"))
if mibBuilder.loadTexts: agentSupportedMibEntry.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibEntry.setDescription('Supported MIB entry')
agentSupportedMibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSupportedMibIndex.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibIndex.setDescription('Unique index of the Supported MIB entry')
agentSupportedMibName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSupportedMibName.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibName.setDescription('The name of the MIB (RFC or IEEE) that is supported.')
agentSupportedMibDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSupportedMibDescription.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibDescription.setDescription('Description of the MIB (RFC or IEEE) that is supported.')
agentConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2))
agentCLIConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1))
agentLoginSessionTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 1), )
if mibBuilder.loadTexts: agentLoginSessionTable.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionTable.setDescription("A table of the switch's login session")
agentLoginSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 1, 1), ).setIndexNames((0, "NETGEAR-SMART-SWITCHING-MIB", "agentLoginSessionIndex"))
if mibBuilder.loadTexts: agentLoginSessionEntry.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionEntry.setDescription('Login Session Entry')
agentLoginSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionIndex.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionIndex.setDescription('Agent Login Session Index of the switch')
agentLoginSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionUserName.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionUserName.setDescription('Agent Login Session UserName of the switch')
agentLoginSessionIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionIPAddress.setStatus('obsolete')
if mibBuilder.loadTexts: agentLoginSessionIPAddress.setDescription('Agent Login Session IP Address of the switch')
agentLoginSessionConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("serial", 1), ("telnet", 2), ("ssh", 3), ("http", 4), ("https", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionConnectionType.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionConnectionType.setDescription('Agent Login Session Connection Type of the switch')
agentLoginSessionIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionIdleTime.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionIdleTime.setDescription('Agent Login Session Idle Time of the switch')
agentLoginSessionSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionSessionTime.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionSessionTime.setDescription('Agent Login Session Time of the switch')
agentLoginSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLoginSessionStatus.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionStatus.setDescription('Status of the user.\n                     active(1)    - This connection is active.\n                     destroy(6)   - Set to this value to disconnect this user.')
agentLoginSessionInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 1, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionInetAddressType.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionInetAddressType.setDescription('Type of address agentLoginSessionInetAddress is returning.\n                     Can be either unknown(0), ipv4(1), or ipv6 (2).  Will return\n                     unknown(0) in the case of a serial login.')
agentLoginSessionInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 1, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionInetAddress.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionInetAddress.setDescription('Inet Address of the connecting the user is logging in with.\n                     Will return a zero-length string in the case of a serial login.')
agentTelnetConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 2))
agentTelnetLoginTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetLoginTimeout.setStatus('current')
if mibBuilder.loadTexts: agentTelnetLoginTimeout.setDescription('Telnet login timeout (minutes)\n\n                     Config telnet timeout  will set the telnet session timeout value.\n                     A session is active as long as the session has not remained idle for\n                     the value set. Specify a value from 1 to 160.\n                     Note: Changing the timeout value for active\n                     sessions does not become effective until the session is reaccessed.\n                     Any keystroke will also activate the new timeout duration.')
agentTelnetMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetMaxSessions.setStatus('current')
if mibBuilder.loadTexts: agentTelnetMaxSessions.setDescription('Maximum number of Telnet Sessions\n                     Config telnet maxsessions is an integer value from 0 to 5 that specifies the\n                     maximum number of telnet sessions that can be established.\n                     If the value is 0, no Telnet session can be established.\n                     ')
agentTelnetAllowNewMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetAllowNewMode.setStatus('current')
if mibBuilder.loadTexts: agentTelnetAllowNewMode.setDescription('Allow new telnet sessions (enable or disable)\n                     Config telnet disable means that no new Telnet sessions are to be\n                     established. Any already established session remains active until\n                     the session is ended or an abnormal network error ends it.\n                     ')
agentUserConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 3))
agentUserConfigCreate = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserConfigCreate.setStatus('current')
if mibBuilder.loadTexts: agentUserConfigCreate.setDescription("Create a new user.\n                     When set with a non-empty string, a new user with that name will be created.\n                     This object will only return an empty string.\n                     This string is limited to alpha-numeric strings (uncluding the '-' and '_' characters).")
agentUserConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 3, 2), )
if mibBuilder.loadTexts: agentUserConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentUserConfigTable.setDescription('User Config Table')
agentUserConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 3, 2, 1), ).setIndexNames((0, "NETGEAR-SMART-SWITCHING-MIB", "agentUserIndex"))
if mibBuilder.loadTexts: agentUserConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentUserConfigEntry.setDescription('User Config Entry')
agentUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: agentUserIndex.setStatus('current')
if mibBuilder.loadTexts: agentUserIndex.setDescription('Agent User Config Index')
agentUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUserName.setStatus('current')
if mibBuilder.loadTexts: agentUserName.setDescription("Agent User Name.\n                     This string is limited to alpha-numeric strings (including the '-' and '_' characters).")
agentUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserPassword.setStatus('current')
if mibBuilder.loadTexts: agentUserPassword.setDescription('Agent User Password\n                     This object will return an empty string even if a password is set.')
agentUserAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read", 1), ("write", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUserAccessMode.setStatus('current')
if mibBuilder.loadTexts: agentUserAccessMode.setDescription('Agent User Access Mode')
agentUserAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("hmacmd5", 2), ("hmacsha", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserAuthenticationType.setStatus('current')
if mibBuilder.loadTexts: agentUserAuthenticationType.setDescription('SNMPv3 User Authentication.  The user passsword must be set\n                     to a string greater than or equal to 8 characters for this to be\n                     set to anything but none(1).\n\n                     none(1)      - no authentication used\n                     hmacmd5(1)   - Use HMAC-MD5 authentication\n                     hmacsha(1)   - Use HMAC-SHA authentication')
agentUserEncryptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("des", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserEncryptionType.setStatus('current')
if mibBuilder.loadTexts: agentUserEncryptionType.setDescription('SNMPv3 User Encryption\n                     Can not be set to des(2) if agentUserAuthenticationType is set to\n                     none(1).\n\n                     none(1) - no encryption used\n                     des(2)  - DES encryption used')
agentUserEncryptionPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 3, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserEncryptionPassword.setStatus('current')
if mibBuilder.loadTexts: agentUserEncryptionPassword.setDescription('SNMPv3 User Encryption Password\n                     This object will return an empty string even if a password is\n                     set. agentUserEncryptionType must be set to des(2) before this\n                     object can be configured.\n                     This object will return an empty string even if a password is set.')
agentUserLockoutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUserLockoutStatus.setStatus('current')
if mibBuilder.loadTexts: agentUserLockoutStatus.setDescription('Displays whether the user account is locked due to excessive failed login attempts.')
agentUserPasswordExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 3, 2, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUserPasswordExpireTime.setStatus('current')
if mibBuilder.loadTexts: agentUserPasswordExpireTime.setDescription("Date and time when the user's password expires (past or present).  Only valid when\n                      password aging is enabled.")
agentSerialGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 5))
agentSerialTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSerialTimeout.setStatus('current')
if mibBuilder.loadTexts: agentSerialTimeout.setDescription('agentSerialTimeout specifies the maximum connect time(in minutes)\n                     without console activity. A value of 0 indicates that a console can\n                     be connected indefinitely. The time range is 0 to 160. ')
agentSerialBaudrate = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("baud-1200", 1), ("baud-2400", 2), ("baud-4800", 3), ("baud-9600", 4), ("baud-19200", 5), ("baud-38400", 6), ("baud-57600", 7), ("baud-115200", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSerialBaudrate.setStatus('current')
if mibBuilder.loadTexts: agentSerialBaudrate.setDescription(' agentSerialBaudrate specifies the current baud rate at which\n                       the serial port will try to connect. The available values\n                       are 1200, 2400, 4800, 9600, 19200, 38400,57600, and 115200 baud. ')
agentSerialCharacterSize = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialCharacterSize.setStatus('current')
if mibBuilder.loadTexts: agentSerialCharacterSize.setDescription('agentSerialCharacterSize  specifies the number of bits in\n                      a character. The number of bits is always 8.')
agentSerialHWFlowControlMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialHWFlowControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSerialHWFlowControlMode.setDescription('agentSerialHardwareFlowControl specifies whether hardware\n                      flow-control is enabled or disabled. Hardware Flow Control is\n                      always disabled.')
agentSerialStopBits = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialStopBits.setStatus('current')
if mibBuilder.loadTexts: agentSerialStopBits.setDescription(' agentSerialStopBits specifies the number of Stop bits per\n                      character. The number of Stop bits is always 1.')
agentSerialParityType = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("even", 1), ("odd", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialParityType.setStatus('current')
if mibBuilder.loadTexts: agentSerialParityType.setDescription(' agentSerialParityType specifies the Parity Method used on\n                     the Serial Port. The Parity Method is always None. ')
agentPasswordManagementConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 6))
agentPasswordManagementMinLength = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementMinLength.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementMinLength.setDescription('Minimum length for user passwords\n                     All new local user passwords must be at least this many characters in length.\n                     ')
agentPasswordManagementHistory = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementHistory.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementHistory.setDescription('The number of previous passwords to store for prevention of password reuse.\n                     This ensures that each user does not reuse passwords often.  A value of 0\n                     indicates that no previous passwords will be stored.\n                     ')
agentPasswordManagementAging = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 365))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementAging.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementAging.setDescription('The maximum time that user passwords are valid, in days, from the time the\n                     password is set.  Once a password expires, the user will be required to enter\n                     a new password following the first login after password expiration.\n                     A value of 0 indicates that passwords never expire.\n                     ')
agentPasswordManagementLockAttempts = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementLockAttempts.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementLockAttempts.setDescription("The number of allowable failed local authentication attempts before the user's\n                     account is locked.  A value of 0 indicates that user accounts will never be locked.\n                     ")
agentLagConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 2))
agentLagConfigCreate = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 2, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagConfigCreate.setStatus('current')
if mibBuilder.loadTexts: agentLagConfigCreate.setDescription('Agent LAG Create.\n                     When this object is set with a non-empty string, a new LAG will be created\n                     if possible with the entered string as its name.')
agentLagSummaryConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 2, 2), )
if mibBuilder.loadTexts: agentLagSummaryConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryConfigTable.setDescription("A summary table of the switch's LAG config entries")
agentLagSummaryConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 2, 2, 1), ).setIndexNames((0, "NETGEAR-SMART-SWITCHING-MIB", "agentLagSummaryLagIndex"))
if mibBuilder.loadTexts: agentLagSummaryConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryConfigEntry.setDescription("Switch's LAG config entry")
agentLagSummaryLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagSummaryLagIndex.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryLagIndex.setDescription('Agent LAG IfIndex.\n\n                     This value corresponds with the LAG interface in the ifTable.')
agentLagSummaryName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryName.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryName.setDescription('Agent LAG Name.\n\n                     The associated name of the LAG used during creation.')
agentLagSummaryFlushTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryFlushTimer.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagSummaryFlushTimer.setDescription('Agent LAG FlushTimer.')
agentLagSummaryLinkTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryLinkTrap.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryLinkTrap.setDescription('Agent LAG LinkTrap.\n\n                     Configures sending Link Up/Down traps when the LAG interface goes Up or Down.')
agentLagSummaryAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryAdminMode.setDescription('Agent LAG AdminMode.\n\n                     Administratively enables or disables this LAG interface.')
agentLagSummaryStpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dot1d", 1), ("fast", 2), ("off", 3), ("dot1s", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryStpMode.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryStpMode.setDescription('Agent LAG StpMode\n\n                     If Dot1d is enabled, the valid values are:\n                     dot1d(1), fast(2), and off(3)\n\n                     If Dot1s is enabled, the valid values are:\n                     off(3) and dot1s(4)')
agentLagSummaryAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryAddPort.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryAddPort.setDescription('Agent LAG AddPort.\n\n                     Set to a non 0 value to add a port to the LAG.  Values correspond to\n                     ifIndex values in the ifTable.\n\n                     Note: agentPortType for the port to be added must be full duplex\n                     and the same speed as previously added port(s), if any.')
agentLagSummaryDeletePort = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryDeletePort.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryDeletePort.setDescription('Agent LAG DeletePort.\n\n                     Set to a non 0 value to remove a port from the LAG.  Values correspond to\n                     ifIndex values in the ifTable.')
agentLagSummaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 2, 2, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryStatus.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryStatus.setDescription('Agent LAG Status.\n\n                     active(1)  - This LAG is enabled.\n                     destroy(6) - Set to this value to remove the LAG.')
agentLagSummaryType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagSummaryType.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryType.setDescription('Agent LAG Type.\n\n                     static(1)  - This LAG is staticly maintained.\n                     dynamic(2) - This LAG is dynamicly maintained.')
agentLagSummaryStaticCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryStaticCapability.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryStaticCapability.setDescription('Agent LAG Static Capability\n\n                     enable(1) - Static capability is enabled for this LAG interface\n                     disable(2) - Static capability is disabled for this LAG interface')
agentLagDetailedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 2, 3), )
if mibBuilder.loadTexts: agentLagDetailedConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedConfigTable.setDescription("A detailed table of the switch's LAG config entries")
agentLagDetailedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 2, 3, 1), ).setIndexNames((0, "NETGEAR-SMART-SWITCHING-MIB", "agentLagDetailedLagIndex"), (0, "NETGEAR-SMART-SWITCHING-MIB", "agentLagDetailedIfIndex"))
if mibBuilder.loadTexts: agentLagDetailedConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedConfigEntry.setDescription("Switch's LAG config entry")
agentLagDetailedLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedLagIndex.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedLagIndex.setDescription('LAG index')
agentLagDetailedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedIfIndex.setDescription('LAG port index')
agentLagDetailedPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 2, 3, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedPortSpeed.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedPortSpeed.setDescription('LAG port speed.  See agentPortType for a description and list\n                      of valid values.')
agentLagDetailedPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedPortStatus.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedPortStatus.setDescription('LAG port status.\n\n                     active(1)   - Actively participating in the LAG.\n                     inactive(2) - Not participating in the LAG.')
agentLagConfigStaticCapability = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagConfigStaticCapability.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagConfigStaticCapability.setDescription('Agent LAG Static Capability.\n                     Configures whether Static LAGs are supported on this device.')
agentNetworkConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 3))
agentNetworkIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIPAddress.setDescription("The switch's network ip address")
agentNetworkSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkSubnetMask.setStatus('current')
if mibBuilder.loadTexts: agentNetworkSubnetMask.setDescription("The switch's network subnet mask")
agentNetworkDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDefaultGateway.setDescription("The switch's network default gateway")
agentNetworkBurnedInMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 3, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkBurnedInMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentNetworkBurnedInMacAddress.setDescription("The switch's network Burned-In MAC address")
agentNetworkLocalAdminMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 3, 5), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkLocalAdminMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentNetworkLocalAdminMacAddress.setDescription("The switch's network locally administered MAC address")
agentNetworkMacAddressType = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("burned-in", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkMacAddressType.setStatus('current')
if mibBuilder.loadTexts: agentNetworkMacAddressType.setDescription("The switch's network Mac Address Type")
agentNetworkConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("bootp", 2), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkConfigProtocol.setStatus('current')
if mibBuilder.loadTexts: agentNetworkConfigProtocol.setDescription("The switch's network config protocol")
agentNetworkWebMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkWebMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentNetworkWebMode.setDescription("The switch's network config protocol on next bootup")
agentNetworkJavaMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkJavaMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentNetworkJavaMode.setDescription('Configures the use of the Java interface through the Web.')
agentNetworkMgmtVlan = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkMgmtVlan.setStatus('current')
if mibBuilder.loadTexts: agentNetworkMgmtVlan.setDescription('The VLAN ID through which the switch can be managed using the\n                     agentNetworkIPAddress')
agentNetworkIpv6AdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkIpv6AdminMode.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AdminMode.setDescription('The network port IPv6 administrative state')
agentNetworkIpv6Gateway = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 3, 12), Ipv6AddressPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkIpv6Gateway.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6Gateway.setDescription('The network port IPv6 Gateway Address')
agentNetworkIpv6AddrTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 3, 13), )
if mibBuilder.loadTexts: agentNetworkIpv6AddrTable.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddrTable.setDescription('The list of IPv6 address prefixes\n                   for the network port.')
agentNetworkIpv6AddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 3, 13, 1), ).setIndexNames((0, "NETGEAR-SMART-SWITCHING-MIB", "agentNetworkIpv6AddrPrefix"))
if mibBuilder.loadTexts: agentNetworkIpv6AddrEntry.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddrEntry.setDescription('An interface entry containing objects of\n                 a particular IPv6 address prefix')
agentNetworkIpv6AddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 3, 13, 1, 1), Ipv6AddressPrefix())
if mibBuilder.loadTexts: agentNetworkIpv6AddrPrefix.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddrPrefix.setDescription('The service port IPv6 Address Prefix')
agentNetworkIpv6AddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 3, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNetworkIpv6AddrPrefixLength.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddrPrefixLength.setDescription('The service port IPv6 Address Prefix Length')
agentNetworkIpv6AddrEuiFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 3, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNetworkIpv6AddrEuiFlag.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddrEuiFlag.setDescription('The service port IPv6 Eui Flag')
agentNetworkIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 3, 13, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNetworkIpv6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddrStatus.setDescription('')
agentServicePortConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 4))
agentServicePortIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIPAddress.setDescription("The switch's ServicePort ip address")
agentServicePortSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortSubnetMask.setStatus('current')
if mibBuilder.loadTexts: agentServicePortSubnetMask.setDescription("The switch's ServicePort subnet mask")
agentServicePortDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDefaultGateway.setDescription("The switch's ServicePort default gateway")
agentServicePortBurnedInMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 4, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortBurnedInMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentServicePortBurnedInMacAddress.setDescription("The switch's ServicePort Burned-In MAC address")
agentServicePortConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("bootp", 2), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortConfigProtocol.setStatus('current')
if mibBuilder.loadTexts: agentServicePortConfigProtocol.setDescription("The switch's ServicePort config protocol")
agentServicePortIpv6AdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortIpv6AdminMode.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AdminMode.setDescription('The service port IPv6 administrative state')
agentServicePortIpv6Gateway = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 4, 7), Ipv6AddressPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortIpv6Gateway.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6Gateway.setDescription('The service port IPv6 Gateway Address')
agentServicePortIpv6AddrTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 4, 8), )
if mibBuilder.loadTexts: agentServicePortIpv6AddrTable.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddrTable.setDescription('The list of IPv6 address prefixes for the\n                   service port.')
agentServicePortIpv6AddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 4, 8, 1), ).setIndexNames((0, "NETGEAR-SMART-SWITCHING-MIB", "agentServicePortIpv6AddrPrefix"))
if mibBuilder.loadTexts: agentServicePortIpv6AddrEntry.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddrEntry.setDescription('An interface entry containing objects of\n                  a particular IPv6 address prefix')
agentServicePortIpv6AddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 4, 8, 1, 1), Ipv6AddressPrefix())
if mibBuilder.loadTexts: agentServicePortIpv6AddrPrefix.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddrPrefix.setDescription('The service port IPv6 Address Prefix')
agentServicePortIpv6AddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 4, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentServicePortIpv6AddrPrefixLength.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddrPrefixLength.setDescription('The service port IPv6 Address Prefix Length')
agentServicePortIpv6AddrEuiFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentServicePortIpv6AddrEuiFlag.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddrEuiFlag.setDescription('The service port IPv6 Eui Flag')
agentServicePortIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 4, 8, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentServicePortIpv6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddrStatus.setDescription('')
agentSnmpConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6))
agentSnmpCommunityCreate = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCommunityCreate.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityCreate.setDescription('Creates a new SNMP Community entry.\n                     Defaults: IPAddress  0.0.0.0\n                               IpMask     0.0.0.0\n                               AccessMode read-only\n                               Status     config')
agentSnmpCommunityConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6, 2), )
if mibBuilder.loadTexts: agentSnmpCommunityConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityConfigTable.setDescription("A table of the switch's SNMP Config entries")
agentSnmpCommunityConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6, 2, 1), ).setIndexNames((0, "NETGEAR-SMART-SWITCHING-MIB", "agentSnmpCommunityIndex"))
if mibBuilder.loadTexts: agentSnmpCommunityConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityConfigEntry.setDescription("Switch's SNMP Config entry")
agentSnmpCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSnmpCommunityIndex.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityIndex.setDescription("The switch's Snmp Community Index")
agentSnmpCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCommunityName.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityName.setDescription("The switch's Snmp Community Name\n                     This name identifies each SNMP community;\n                     the name can be up to 16 characters, and it is case-sensitive.\n                     Community names in the SNMP community must be unique.\n                     If you make multiple entries using the same community name,\n                     the first entry is kept and processed and all duplicate entries are ignored.\n                     ")
agentSnmpCommunityIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCommunityIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityIPAddress.setDescription("The switch's Snmp Community IP Address\n                     Client IP Address - This attribute is an IP address (or portion thereof)\n                     from which this device will accept SNMP packets with the associated\n                     community. The requesting entity's IP address is logical-ANDed with\n                     the Client IP Mask and the result must match the Client IP Address.\n                     Note: If the Client IP Mask is set\n                     to 0.0.0.0, a Client IP Address of 0.0.0.0 matches all IP addresses.\n                     ")
agentSnmpCommunityIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCommunityIPMask.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityIPMask.setDescription("The switch's Snmp Community IP Mask\n                     Client IP Mask - This attribute is a mask to be logical-ANDed with the\n                     requesting entity's IP address before comparison with the Client IP Address.\n                     If the result matches with Client IP Address then the address is an\n                     authenticated IP address. For example, if the Client IP Address\n                     is 9.47.128.0 and the corresponding Client IP Mask is 255.255.255.0,\n                     a range of incoming IP addresses would match, that is, the incoming IP\n                     addresses could be a value in the following range: 9.47.128.0 to 9.47.128.255.\n                     To have a specific IP address be the only authenticated IP address, set the\n                     Client IP Address to the required IP address and set the Client IP Mask\n                     to 255.255.255.255.\n                     ")
agentSnmpCommunityAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read-only", 1), ("read-write", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCommunityAccessMode.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityAccessMode.setDescription("The switch's Snmp Community Access Mode\n                     Access Mode - This value can be read-only or read/write.\n                     A community with a read-only access allows for switch information to be\n                     displayed. A community with a read/write access allows for configuration\n                     changes to be made and for information to be displayed.\n                     ")
agentSnmpCommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("config", 3), ("destroy", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCommunityStatus.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityStatus.setDescription("The switch's Snmp Community Status.\n\n                     active(1)        - This community is active, allowing SNMP managers associated\n                                        with this community to manage the switch according to its\n                                        access right.\n\n                     notInService(2)  - This community is not active; no SNMP requests using this\n                                        community will be accepted. In this case the SNMP manager\n                                        associated with this community cannot manage the switch until\n                                        the Status is changed back to active(1).\n\n                     config(3)        - The community Status must be set to this value in order to\n                                        configure it.  When creating a new community entry, initial\n                                        Status will be set to this value.\n\n                     destroy(4)       - Set to this value to remove the community from the agent.")
agentSnmpTrapReceiverCreate = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverCreate.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverCreate.setDescription('Creates a new trap receiver entry.\n                     Defaults: IPAddress 0.0.0.0\n                               status    config')
agentSnmpTrapReceiverConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6, 4), )
if mibBuilder.loadTexts: agentSnmpTrapReceiverConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverConfigTable.setDescription('Trap messages are sent across a network to an SNMP Network Manager.\n                     These messages alert the manager to events occurring within the switch\n                     or on the network. Up to six simultaneous trap receivers are supported.\n                     ')
agentSnmpTrapReceiverConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6, 4, 1), ).setIndexNames((0, "NETGEAR-SMART-SWITCHING-MIB", "agentSnmpTrapReceiverIndex"))
if mibBuilder.loadTexts: agentSnmpTrapReceiverConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverConfigEntry.setDescription("Switch's Snmp Trace Receiver Config entry")
agentSnmpTrapReceiverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSnmpTrapReceiverIndex.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverIndex.setDescription("The switch's Snmp Trap Receiver Index")
agentSnmpTrapReceiverCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverCommunityName.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverCommunityName.setDescription("The switch's Snmp Trap Receiver Community Name.\n                     This is the SNMP community name of the remote network manager;\n                     the name can be up to 16 characters, and is case-sensitive.\n                     ")
agentSnmpTrapReceiverIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverIPAddress.setDescription('IP Address - Each IP address parameter is four integer numbers.\n                     The numbers range from 0 to 255.\n                     ')
agentSnmpTrapReceiverStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("config", 3), ("destroy", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverStatus.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverStatus.setDescription("The switch's Snmp Trap Reciever Status.\n                     active(1)        - This trap receiver is active, allowing SNMP Traps to\n                                        be sent to this receiver.\n\n                     notInService(2)  - This trap reciever is not active; no SNMP Traps will\n                                        be sent to this reciever until it's set back to active(1).\n\n\n                     config(3)        - The trap reciever Status must be set to this value in order\n                                        to configure it.  When creating a new trap receiver entry,\n                                        the Status will initially be set to this value.\n                                        Note: agentSnmpTrapReceiverIPAddress must be set to non-zero\n                                        before changing to active(1) or notInService(2).\n\n                     destroy(4)       - Set to this value to remove the trap receiver entry from\n                                        the agent.")
agentSnmpTrapReceiverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("snmpv1", 1), ("snmpv2c", 2))).clone('snmpv2c')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverVersion.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverVersion.setDescription('The version of trap sent to this Reciever.\n\n                     snmpv1(1)        - This will send a SNMPv1 trap.\n\n                     snmpv2c(2)       - This will send a SNMPv2c trap.')
agentSnmpTrapReceiverIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6, 4, 1, 6), Ipv6AddressPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverIpv6Address.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverIpv6Address.setDescription('IPv6 Address  for SNMP receiver.')
agentSnmpTrapFlagsConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6, 5))
agentSnmpAuthenticationTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpAuthenticationTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpAuthenticationTrapFlag.setDescription('Authentication Flag - Enable/Disable authentication Flag.')
agentSnmpLinkUpDownTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpLinkUpDownTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpLinkUpDownTrapFlag.setDescription('Link Up/Down Flag - Enable/Disable Link Up/Link Down traps for the\n                     entire switch. When set to Enable, the Link Up/Down traps will be\n                     sent only if the Link Trap flag setting associated with the port\n                     (Port Configuration Menu) is set to Enable.\n                     ')
agentSnmpMultipleUsersTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpMultipleUsersTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpMultipleUsersTrapFlag.setDescription('Multiple Users Flag - Enable/Disable Multiple User traps. When the value\n                     is set to Enable, a Multiple User Trap is sent whenever someone logs in\n                     to the terminal interface (EIA 232 or Telnet) and there is already an\n                     existing terminal interface session.\n                     ')
agentSnmpSpanningTreeTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpSpanningTreeTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpSpanningTreeTrapFlag.setDescription('Spanning Tree Flag - This flag enables the sending of new root traps and\n                     topology change notification traps.')
agentSnmpBroadcastStormTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 6, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpBroadcastStormTrapFlag.setStatus('obsolete')
if mibBuilder.loadTexts: agentSnmpBroadcastStormTrapFlag.setDescription('Broadcast Storm Flag - This flag enables or disables the broadcast\n                     storm trap. You must also enable Broadcast Storm Recovery Mode\n                     (see the Switch Configuration Menu). When this\n                     value is set to Enable and Broadcast Storm Recovery mode is set to Enable,\n                     the Broadcast Storm Start/End traps are sent when the switch enters and\n                     leaves Broadcast Storm Recovery.\n                     ')
agentSpanningTreeConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 7))
agentSpanningTreeMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSpanningTreeMode.setStatus('current')
if mibBuilder.loadTexts: agentSpanningTreeMode.setDescription("The switch's Spanning Tree Switch Status")
agentSwitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8))
agentSwitchAddressAgingTimeoutTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 4), )
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutTable.setDescription("The switch's address aging timeout table")
agentSwitchAddressAgingTimeoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 4, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qFdbId"))
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutEntry.setDescription('Aging information about a specific Filtering Database.')
agentSwitchAddressAgingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeout.setStatus('current')
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeout.setDescription("The FDB entry's address aging timeout (in seconds)")
agentSwitchStaticMacFilteringTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 5), )
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringTable.setDescription("The switch's static Mac filtering table")
agentSwitchStaticMacFilteringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 5, 1), ).setIndexNames((0, "NETGEAR-SMART-SWITCHING-MIB", "agentSwitchStaticMacFilteringVlanId"), (0, "NETGEAR-SMART-SWITCHING-MIB", "agentSwitchStaticMacFilteringAddress"))
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringEntry.setDescription('Per-port ingress/egress filter configuration based on VLAN Id and MAC address.')
agentSwitchStaticMacFilteringVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringVlanId.setDescription('The Static MAC Filter Vlan Id')
agentSwitchStaticMacFilteringAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringAddress.setDescription('The Static MAC Filter MAC address')
agentSwitchStaticMacFilteringSourcePortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 5, 1, 3), AgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringSourcePortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringSourcePortMask.setDescription('The Static MAC Filter source port mask.\n\n                     When setting this value, the system will ignore configuration for ports not\n                     between the first and last valid ports.  Configuration of any port numbers\n                     between this range that are not valid ports return a failure message, but will\n                     still apply configuration for valid ports.\n\n                     To obtain port numbers from interface numbers, use the objects\n                     agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable\n                     table.')
agentSwitchStaticMacFilteringDestPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 5, 1, 4), AgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringDestPortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringDestPortMask.setDescription('The Static MAC Filter destination port mask.\n\n                     When setting this value, the system will ignore configuration for ports not\n                     between the first and last valid ports.  Configuration of any port numbers\n                     between this range that are not valid ports return a failure message, but will\n                     still apply configuration for valid ports.\n\n                     To obtain port numbers from interface numbers, use the objects\n                     agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable\n                     table.\n\n                     Configuring destination port mask for a unicast MAC filter is not supported on some platforms.')
agentSwitchStaticMacFilteringStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringStatus.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringStatus.setDescription('The Static MAC Filter status.\n\n                     Supported values:\n                     active(1)      - valid entry\n                     createAndGo(4) - used to create a new entry\n                     destroy(6)     - removes the entry')
agentSwitchStormControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 12))
agentSwitchDot3FlowControlMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDot3FlowControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDot3FlowControlMode.setDescription('Config switchconfig flowcontrol allows you to enable or disable\n                     802.3x flow control for the switch. This value\n                     applies to only full-duplex mode ports. ')
agentSwitchBroadcastControlMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 12, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchBroadcastControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchBroadcastControlMode.setDescription('The switch config broadcast allows you to enable or disable\n                     broadcast storm recovery mode. When you specify Enable for Broadcast\n                     Storm Recovery and the broadcast traffic on any Ethernet port exceeds\n                     the configured threshold, the switch blocks (discards) the broadcast\n                     traffic.')
agentSwitchBroadcastControlThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 12, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchBroadcastControlThreshold.setStatus('current')
if mibBuilder.loadTexts: agentSwitchBroadcastControlThreshold.setDescription('Configures the broadcast storm recovery threshold for this port\n                     as a percentage of port speed.')
agentSwitchMulticastControlMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchMulticastControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMulticastControlMode.setDescription('The switch config multicast allows you to enable or disable\n                     multicast storm recovery mode. When you specify Enable for multicast\n                     Storm Recovery and the multicast traffic on any Ethernet port exceeds\n                     the configured threshold, the switch blocks (discards) the multicast\n                     traffic.')
agentSwitchMulticastControlThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 12, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchMulticastControlThreshold.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMulticastControlThreshold.setDescription('Configures the multicast storm recovery threshold for this port\n                     as a percentage of port speed.')
agentSwitchUnicastControlMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchUnicastControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchUnicastControlMode.setDescription('The switch config unicast allows you to enable or disable\n                     unicast storm recovery mode. When you specify Enable for unicast\n                     Storm Recovery and the unknown unicast traffic on any Ethernet port exceeds\n                     the configured threshold, the switch blocks (discards) the unknown unicast\n                     traffic.')
agentSwitchUnicastControlThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 12, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchUnicastControlThreshold.setStatus('current')
if mibBuilder.loadTexts: agentSwitchUnicastControlThreshold.setDescription('Configures the unicast storm recovery threshold for this port\n                     as a percentage of port speed.')
agentSwitchSnoopingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 6))
agentSwitchSnoopingCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 6, 1), )
if mibBuilder.loadTexts: agentSwitchSnoopingCfgTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingCfgTable.setDescription('A table of the IGMP/MLD Snooping Global configuration entries.')
agentSwitchSnoopingCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 6, 1, 1), ).setIndexNames((0, "NETGEAR-SMART-SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchSnoopingCfgEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingCfgEntry.setDescription('Represents entry for Snooping switch Configuration.')
agentSwitchSnoopingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 6, 1, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingProtocol.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingProtocol.setDescription('The protocol type of network protocol in use.')
agentSwitchSnoopingAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingAdminMode.setDescription('This enables or disables Snooping on the system. ')
agentSwitchSnoopingPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 6, 1, 1, 3), AgentPortMask().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingPortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingPortMask.setDescription('IGMP/MLD Snooping Port Mask.\n\n                     This allows configuration of IGMP/MLD Snooping on selected ports.\n                     IGMP Snooping cannot be enabled on an interface that has routing\n                     enabled, or is a member of a LAG.  If a port which has IGMP Snooping\n                     enabled becomes enabled for routing, or is enlisted as a member of a\n                     LAG, IGMP Snooping functionality will be disabled on that port.  IGMP\n                     Snooping functionality will be subsequently be reenabled if routing is\n                     disabled or LAG membership is removed from an interface that had previously\n                     had IGMP Snooping enabled.\n\n                     To obtain port numbers from interface numbers, use the objects\n                     agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable\n                     table.')
agentSwitchSnoopingMulticastControlFramesProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingMulticastControlFramesProcessed.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingMulticastControlFramesProcessed.setDescription('Multicast Control Frames Processed by CPU.\n                     The number of multicast control frames that have been processed by the CPU.')
agentSwitchSnoopingIntfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 7))
agentSwitchSnoopingIntfTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 7, 1), )
if mibBuilder.loadTexts: agentSwitchSnoopingIntfTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfTable.setDescription('A table of the IGMP Snooping Interface configuration entries.')
agentSwitchSnoopingIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 7, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "NETGEAR-SMART-SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchSnoopingIntfEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfEntry.setDescription('Represents entry for a IGMP Snooping Interface.')
agentSwitchSnoopingIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 7, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfIndex.setDescription('The port number to be selected. Each port maps to an interface.')
agentSwitchSnoopingIntfAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfAdminMode.setDescription('This enables or disables IGMP Snooping on a selected interface.')
agentSwitchSnoopingIntfGroupMembershipInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfGroupMembershipInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfGroupMembershipInterval.setDescription('The amount of time in seconds that a switch will wait for a report\n                     from a particular group on the selected interface before deleting the\n                     interface from the entry. This value must be greater than\n                     agentSwitchIGMPSnoopingIntfMaxResponseTime.')
agentSwitchSnoopingIntfMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3599)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfMaxResponseTime.setDescription('The amount of time in seconds a switch will wait after sending\n                     a query on the selected interface because it did not receive a report for\n                     a particular group in that interface.  This value must be less\n                     than agentSwitchIGMPSnoopingIntfGroupMembershipInterval.')
agentSwitchSnoopingIntfMRPExpirationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfMRPExpirationTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfMRPExpirationTime.setDescription('The amount of time in seconds that a switch will wait for a query to be\n                     received on the selected interface before the interface is removed from\n                     the list of interfaces with multicast routers attached.')
agentSwitchSnoopingIntfFastLeaveAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfFastLeaveAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfFastLeaveAdminMode.setDescription('This enables or disables IGMP Snooping on the selected interface.')
agentSwitchSnoopingIntfMulticastRouterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfMulticastRouterMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfMulticastRouterMode.setDescription('This enables or disables Multicast Routing on the selected interface.')
agentSwitchSnoopingIntfVlanIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 7, 1, 1, 8), VlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfVlanIDs.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfVlanIDs.setDescription('This field lists all the VlanIDs which include the selected interface.')
agentSwitchSnoopingVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 8))
agentSwitchSnoopingVlanTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 8, 1), )
if mibBuilder.loadTexts: agentSwitchSnoopingVlanTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanTable.setDescription('A table of the IGMP Snooping Vlan configuration entries.')
agentSwitchSnoopingVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 8, 1, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "NETGEAR-SMART-SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchSnoopingVlanEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanEntry.setDescription('Represents entry for a IGMP Snooping Vlan.')
agentSwitchSnoopingVlanAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanAdminMode.setDescription('This enables or disables IGMP Snooping on a selected Vlan interface.')
agentSwitchSnoopingVlanGroupMembershipInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanGroupMembershipInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanGroupMembershipInterval.setDescription('The amount of time in seconds that a switch will wait for a report\n                     from a particular group on the selected vlan before deleting the\n                     interface participating in the vlan from the entry. This value must\n                     be greater than agentSwitchIGMPSnoopingIntfMaxResponseTime.')
agentSwitchSnoopingVlanMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3599)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanMaxResponseTime.setDescription('The amount of time in seconds a switch will wait after sending\n                     a query on the selected vlan because it did not receive a report for\n                     a particular group in the interface participating in the vlan.\n                     This value must be less than\n                     agentSwitchIGMPSnoopingIntfGroupMembershipInterval.')
agentSwitchSnoopingVlanFastLeaveAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanFastLeaveAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanFastLeaveAdminMode.setDescription('This enables or disables IGMP Snooping on the selected vlan.')
agentSwitchSnoopingVlanMRPExpirationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanMRPExpirationTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanMRPExpirationTime.setDescription('The amount of time in seconds that a switch will wait for a query to be\n                     received on the selected interface participating in the vlan before the\n                     interface is removed from the list of interfaces with multicast routers\n                     attached. This parameter is configurable only for exisiting Vlans.')
agentSwitchVlanStaticMrouterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 9))
agentSwitchVlanStaticMrouterTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 9, 1), )
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterTable.setDescription('A table of the IGMP Static Mrouter Configuration parameters.')
agentSwitchVlanStaticMrouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "NETGEAR-SMART-SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterEntry.setDescription('Represents entry for a IGMP Static Mrouter.')
agentSwitchVlanStaticMrouterAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterAdminMode.setDescription('This enables or disables IGMP Mrouter on a per-interface per-vlan basis.')
agentSwitchMFDBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 10))
agentSwitchMFDBTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 10, 1), )
if mibBuilder.loadTexts: agentSwitchMFDBTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBTable.setDescription('The Multicast Forwarding Database table')
agentSwitchMFDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 10, 1, 1), ).setIndexNames((0, "NETGEAR-SMART-SWITCHING-MIB", "agentSwitchMFDBVlanId"), (0, "NETGEAR-SMART-SWITCHING-MIB", "agentSwitchMFDBMacAddress"), (0, "NETGEAR-SMART-SWITCHING-MIB", "agentSwitchMFDBProtocolType"))
if mibBuilder.loadTexts: agentSwitchMFDBEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBEntry.setDescription('Contains Forwarding and Filtering information per Vlan Index, MAC Address, and\n                     Component User.')
agentSwitchMFDBVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 10, 1, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBVlanId.setDescription('Vlan Index for which this entry is associated with.')
agentSwitchMFDBMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 10, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBMacAddress.setDescription('A multicast MAC address for which the switch has forwarding and or\n                     filtering information.')
agentSwitchMFDBProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("static", 1), ("gmrp", 2), ("igmp", 3), ("mld", 4), ("mmrp", 5), ("msrp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBProtocolType.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBProtocolType.setDescription('The component that is responsible for this entry in the Multicast\n                     Forwarding Database.')
agentSwitchMFDBType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBType.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBType.setDescription('This displays the type of the entry.\n\n                     static(1)  - Entries configured by the end user\n                     dynamic(2) - Entries added as a result of a learning process or protocol')
agentSwitchMFDBDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 10, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBDescription.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBDescription.setDescription('Text description of this multicast table entry.')
agentSwitchMFDBForwardingPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 10, 1, 1, 6), AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBForwardingPortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBForwardingPortMask.setDescription('BitMask indicating which ports this entry indicates should be forwarded.\n\n                     To obtain port numbers from interface numbers, use the objects\n                     agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable\n                     table.')
agentSwitchMFDBFilteringPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 10, 1, 1, 7), AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBFilteringPortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBFilteringPortMask.setDescription('BitMask indicating which ports this entry indicates should be filtered.\n\n                     To obtain port numbers from interface numbers, use the objects\n                     agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable\n                     table.')
agentSwitchMFDBSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 10, 2), )
if mibBuilder.loadTexts: agentSwitchMFDBSummaryTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryTable.setDescription('The Multicast Forwarding Database Summary table')
agentSwitchMFDBSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 10, 2, 1), ).setIndexNames((0, "NETGEAR-SMART-SWITCHING-MIB", "agentSwitchMFDBSummaryVlanId"), (0, "NETGEAR-SMART-SWITCHING-MIB", "agentSwitchMFDBSummaryMacAddress"))
if mibBuilder.loadTexts: agentSwitchMFDBSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryEntry.setDescription('Summarizes the forwarding ports for all components registered for all\n                     MFDB table entries with the same Vlan Index and MAC Address.')
agentSwitchMFDBSummaryVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 10, 2, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBSummaryVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryVlanId.setDescription('Vlan Index for which this entry is associated with.')
agentSwitchMFDBSummaryMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 10, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBSummaryMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryMacAddress.setDescription('A multicast MAC address for which the switch has forwarding and or\n                     filtering information.')
agentSwitchMFDBSummaryForwardingPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 10, 2, 1, 3), AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBSummaryForwardingPortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryForwardingPortMask.setDescription('Port Mask indicating which ports this entry indicates should be forwarded.\n\n                     To obtain port numbers from interface numbers, use the objects\n                     agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable\n                     table.')
agentSwitchMFDBMaxTableEntries = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 10, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBMaxTableEntries.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBMaxTableEntries.setDescription('This displays the maximum number of entries that can possibly be in\n                     the Multicast Forwarding Database table.')
agentSwitchMFDBMostEntriesUsed = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 10, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBMostEntriesUsed.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBMostEntriesUsed.setDescription('This displays the largest number of entries that have been present\n                     in the Multicast Forwarding Database table. This value is also known\n                     as the MFDB high-water mark.')
agentSwitchMFDBCurrentEntries = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 10, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBCurrentEntries.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBCurrentEntries.setDescription('This displays the current number of entries in the Multicast\n                     Forwarding Database table.')
agentDhcpFilteringGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 15))
agentDhcpFilteringAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpFilteringAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentDhcpFilteringAdminMode.setDescription('Dhcp Filtering mode:\n\n                     enable - enable dhcp filtering mode\n                     disable - disable dhcp filtering mode.')
agentDhcpFilteringPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 15, 2), )
if mibBuilder.loadTexts: agentDhcpFilteringPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpFilteringPortConfigTable.setDescription('A table that contains the configuration objects for the\n         with each port.')
agentDhcpFilteringPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 15, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDhcpFilteringPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpFilteringPortConfigEntry.setDescription('The configuration information for Dhcp Filtering.')
agentDhcpFilteringPortTrustedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trusted", 1), ("untrusted", 2))).clone('untrusted')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpFilteringPortTrustedMode.setStatus('current')
if mibBuilder.loadTexts: agentDhcpFilteringPortTrustedMode.setDescription("Port's DHCP mode. It can be either trusted or untrusted\n                      default will be untrusted.")
agentSwitchProtectedPortConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 18))
agentSwitchProtectedPortTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 18, 1), )
if mibBuilder.loadTexts: agentSwitchProtectedPortTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchProtectedPortTable.setDescription("The switch's protected port mapping table")
agentSwitchProtectedPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 18, 1, 1), ).setIndexNames((0, "NETGEAR-SMART-SWITCHING-MIB", "agentSwitchProtectedPortGroupId"))
if mibBuilder.loadTexts: agentSwitchProtectedPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchProtectedPortEntry.setDescription('Protected ports assigned to groups.')
agentSwitchProtectedPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 18, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: agentSwitchProtectedPortGroupId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchProtectedPortGroupId.setDescription('The group that this port belongs to')
agentSwitchProtectedPortGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 18, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchProtectedPortGroupName.setStatus('current')
if mibBuilder.loadTexts: agentSwitchProtectedPortGroupName.setDescription('The name of the group')
agentSwitchProtectedPortPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 18, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchProtectedPortPortList.setStatus('current')
if mibBuilder.loadTexts: agentSwitchProtectedPortPortList.setDescription('The set of ports that are protected in this group')
agentSwitchSnoopingQuerierGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 20))
agentSwitchSnoopingQuerierCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 20, 1), )
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierCfgTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierCfgTable.setDescription('A table of the IGMP/MLD Snooping Querier Global configuration entries.')
agentSwitchSnoopingQuerierCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 20, 1, 1), ).setIndexNames((0, "NETGEAR-SMART-SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierCfgEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierCfgEntry.setDescription('Represents entry for Snooping Querier Configuration.')
agentSwitchSnoopingQuerierAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierAdminMode.setDescription('This enables or disables Snooping Querier on the system. ')
agentSwitchSnoopingQuerierVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 20, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVersion.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVersion.setDescription('This specifies the multicast protocol versions that are\n                      supported by the system.')
agentSwitchSnoopingQuerierAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 20, 1, 1, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierAddress.setDescription('This specifies the default source ip address to be used\n                      while generating general queries.')
agentSwitchSnoopingQuerierQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierQueryInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierQueryInterval.setDescription('This specified the timer interval after which the system\n                      generates general queries.')
agentSwitchSnoopingQuerierExpiryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 300)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierExpiryInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierExpiryInterval.setDescription('This specified the timer interval after which the detected\n                      other querier information is no longer valid.')
agentSwitchSnoopingQuerierVlanTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 20, 2), )
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanTable.setDescription('A table of the Snooping Querier Vlan configuration entries.')
agentSwitchSnoopingQuerierVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 20, 2, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "NETGEAR-SMART-SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanEntry.setDescription('Represents entry for a Snooping Querier configurable Vlan.')
agentSwitchSnoopingQuerierVlanAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanAdminMode.setDescription('This enables or disables Snooping Querier on a selected Vlan interface.')
agentSwitchSnoopingQuerierVlanOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("querier", 1), ("non-querier", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanOperMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanOperMode.setDescription('This specifies the current state of the Snooping Querier on a selected vlan interface')
agentSwitchSnoopingQuerierElectionParticipateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierElectionParticipateMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierElectionParticipateMode.setDescription('This enables or disables the Snooping Querier Election Participation mode. When enabled\n                      snooping querier switch will participate in querier election up on discovering another\n                      querier in the specified vlan. When disabled, up on discovering another querier, snooping\n                      querier moves to non-querier state.')
agentSwitchSnoopingQuerierVlanAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 20, 2, 1, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanAddress.setDescription('This specifies the default source ip address to be used while generating general queries on\n                      the specified vlan.')
agentSwitchSnoopingQuerierOperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 20, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierOperVersion.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierOperVersion.setDescription('This specifies the multicast protocol version that is currently being used by the snooping\n                      switch for the specified vlan while generating query messages.')
agentSwitchSnoopingQuerierOperMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 20, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierOperMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierOperMaxResponseTime.setDescription('The amount of time in seconds a switch will wait after sending\n                      a query on the selected vlan because it did not receive a report for\n                      a particular group in the interface participating in the vlan. This\n                      object is valid only when agentSwitchSnoopingQuerierOperVersion object\n                      is valid.')
agentSwitchSnoopingQuerierLastQuerierAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 20, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierLastQuerierAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierLastQuerierAddress.setDescription("This specifies the last querier's ip address for the specified vlan.\n                      It represents the detected other multicast querier in the vlan. ")
agentSwitchSnoopingQuerierLastQuerierVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 8, 20, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierLastQuerierVersion.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierLastQuerierVersion.setDescription('This specifies the multicast protocol version that is currently being used\n                      by the detected other multicast querier for the specified vlan.')
agentTransferConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9))
agentTransferUploadGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 1))
agentTransferUploadMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("tftp", 1), ("xmodem", 2), ("ymodem", 3), ("zmodem", 4), ("sftp", 5), ("scp", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadMode.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadMode.setDescription('Transfer upload mode configures the mode to use when uploading from the\n                     switch. The mode is either X/Y/ZMODEM, TFTP, SFTP or SCP. X/Y/ZMODEM is\n                     valid only when the file transfer is initiated by the serial EIA 232 port.\n                     SFTP and SCP are only allowed if the SSH feature is present.\n                     ')
agentTransferUploadServerIP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadServerIP.setStatus('deprecated')
if mibBuilder.loadTexts: agentTransferUploadServerIP.setDescription('Transfer upload server IP configures the IP address of the server\n                     where the file is located. It is valid only when the Transfer Mode is\n                     TFTP, SFTP, or SCP. The address is 4 integer bytes ranging from 0 to 255.\n\n                     This object is deprecated in favour of agentTransferUploadServerAddress\n                     and agentTransferUploadServerAddressType.')
agentTransferUploadPath = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadPath.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadPath.setDescription('Transfer upload path configures the directory path where the file\n                     is to be uploaded to. The switch remembers the last file path used.\n                     ')
agentTransferUploadFilename = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadFilename.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadFilename.setDescription('Transfer upload filename configures the file name for the file being\n                     uploaded from the switch. It can be up to 32 alphanumeric characters.\n                     The switch remembers the last file name used.\n                     File path can be appended to the file name if the string is less than 17\n                     characters. Otherwise, the File Path field will need to be used and the\n                     File Name will be appended to the File Path as is. An example would be\n                     File Path set to c:\\tftp\\code\\ and File Name set to e1r1v1.opr.\n                     Note: File Name, File Path, and Server IP Address are applicable\n                     only if the Transfer Mode is TFTP, SFTP or SCP.')
agentTransferUploadDataType = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("config", 2), ("errorlog", 3), ("messagelog", 4), ("traplog", 5), ("clibanner", 6), ("code", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadDataType.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadDataType.setDescription('Transfer upload datatype configures the type of file to upload from the\n                     switch.\n                     The types for upload are:\n                        -       Configuration File\n                        -       Error log\n                        -       Message log\n                        -       Trap log\n                        -       Banner File\n                     ')
agentTransferUploadStart = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadStart.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadStart.setDescription('Transfer upload start will start an upload transfer.\n                     The agentTransferUploadMode object must not be set to xmodem(2),\n                         ymodem(3), or zmodem(4) to initiate a transfer via SNMP.')
agentTransferUploadStatus = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("notInitiated", 1), ("transferStarting", 2), ("errorStarting", 3), ("wrongFileType", 4), ("updatingConfig", 5), ("invalidConfigFile", 6), ("writingToFlash", 7), ("failureWritingToFlash", 8), ("checkingCRC", 9), ("failedCRC", 10), ("unknownDirection", 11), ("transferSuccessful", 12), ("transferFailed", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTransferUploadStatus.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadStatus.setDescription('Indicates the current status of an upload transfer.')
agentTransferUploadServerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 1, 8), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadServerAddressType.setReference('RFC 3291')
if mibBuilder.loadTexts: agentTransferUploadServerAddressType.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadServerAddressType.setDescription('The type of the serverip address, as defined in the InetAddress MIB.\n\n                      The agentTransferUploadServerAddress object is intepreted within the\n                      context of agentTransferUploadServerAddressType')
agentTransferUploadServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 1, 9), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadServerAddress.setReference('RFC 3291')
if mibBuilder.loadTexts: agentTransferUploadServerAddress.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadServerAddress.setDescription('Transfer upload serverip configures the IP address of the server\n                     where the file is to be uploaded to.It is valid only when the\n                     Transfer Mode is TFTP, SFTP or SCP.\n                     The type of this address is determined by the value of the\n                     agentTransferUploadServerAddressType object.\n                     The values for agentTransferUploadServerAddressType and\n                     agentTransferUploadServerAddress must be consistent.')
agentTransferUploadImagename = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("image1", 2), ("image2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadImagename.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadImagename.setDescription('Transfer upload image name. Sets the image to be uploaded as the specified\n                      name\n                     Note: Imagename, File Name, File Path, and Server IP Address are applicable\n                     only if the Transfer Mode is TFTP, SFTP or SCP.')
agentTransferUploadUsername = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadUsername.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadUsername.setDescription('Username applicable only to secure upload types, i.e., SFTP or SCP.\n                     ')
agentTransferUploadPassword = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadPassword.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadPassword.setDescription('Password applicable only to secure upload types, i.e. SFTP or SCP.\n                     ')
agentTransferDownloadGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 2))
agentTransferDownloadMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("tftp", 1), ("xmodem", 2), ("ymodem", 3), ("zmodem", 4), ("sftp", 5), ("scp", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadMode.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadMode.setDescription('Transfer download mode configures the mode to use when downloading\n                     to the switch. The mode is either X/Y/ZMODEM, TFTP, SFTP or SCP. X/Y/ZMODEM is valid only\n                     when the file transfer is initiated by the serial EIA 232 port.  SFTP and SCP\n                     are only allowed if the SSH feature is present.\n                     ')
agentTransferDownloadServerIP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadServerIP.setStatus('deprecated')
if mibBuilder.loadTexts: agentTransferDownloadServerIP.setDescription('Transfer download serverip configures the IP address of the server\n                     where the file is located. It is valid only when the Transfer Mode is TFTP, SFTP or\n                     SCP.\n                     The address is 4 integer bytes ranging from 0 to 255.\n\n                     This object is deprecated in favour of agentTransferDownloadServerAddress\n                     and agentTransferDownloadServerAddressType.')
agentTransferDownloadPath = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadPath.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadPath.setDescription('Transfer download path configures the directory path where the\n                     file is located. The switch remembers the last file path used.\n                     ')
agentTransferDownloadFilename = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadFilename.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadFilename.setDescription('Transfer download filename configures the file name for the file\n                     being downloaded to the switch. It can be up to 32 alphanumeric characters.\n                     The switch remembers the last file name used.\n                     File path can be appended to the file name if the string is less than 33\n                     characters. Otherwise, the File Path field will need to be used and the\n                     File Name will be appended to the File Path as is. An example would be\n                     File Path set to c:\\tftp\\code\\ and File Name set to e1r1v1.opr.\n                     Note: Imagename, File Name, File Path, and Server IP Address are applicable\n                     only if the Transfer Mode is TFTP, SFTP or SCP.')
agentTransferDownloadDataType = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("code", 2), ("config", 3), ("sshkey-rsa1", 4), ("sshkey-rsa2", 5), ("sshkey-dsa", 6), ("sslpem-root", 7), ("sslpem-server", 8), ("sslpem-dhweak", 9), ("sslpem-dhstrong", 10), ("clibanner", 11), ("kernel", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadDataType.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadDataType.setDescription('Transfer download datatype configures the type of file to download to\n                     the switch.\n                     The types for download are:\n\n                     code               - Code File\n                     config             - Configuration File\n                     sshkey-rsa1        - SSH-1 RSA Key File\n                     sshkey-rsa2        - SSH-2 RSA Key PEM File\n                     sshkey-dsa         - SSH-2 DSA Key PEM File\n                     sslpem-root        - SSL Trusted Root Certificate PEM File\n                     sslpem-server      - SSL Server Certificate PEM File\n                     sslpem-dhweak      - SSL DH Weak Encryption Parameter PEM File\n                     sslpem-dhstrong    - SSL DH Strong Encryption Parameter PEM File\n                     cli-banner         - CLI Banner File\n                     kernel             - Kernel File\n\n                     Note: SSH Key files can only be downloaded if SSH Server is administratively\n                     disabled, and there are no active SSH sessions.\n                     Kernel file can be downloaded only on raptor platform and linux operating system.\n                     ')
agentTransferDownloadStart = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadStart.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadStart.setDescription('Transfer download start will start an download transfer.\n                     The agentTransferDownloadMode object must not be set to xmodem(2),\n                         ymodem(3), or zmodem(4) to initiate a transfer via SNMP.')
agentTransferDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("notInitiated", 1), ("transferStarting", 2), ("errorStarting", 3), ("wrongFileType", 4), ("updatingConfig", 5), ("invalidConfigFile", 6), ("writingToFlash", 7), ("failureWritingToFlash", 8), ("checkingCRC", 9), ("failedCRC", 10), ("unknownDirection", 11), ("transferSuccessful", 12), ("transferFailed", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTransferDownloadStatus.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadStatus.setDescription('Indicates the current status of an download transfer.')
agentTransferDownloadServerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 2, 8), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadServerAddressType.setReference('RFC 3291')
if mibBuilder.loadTexts: agentTransferDownloadServerAddressType.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadServerAddressType.setDescription('The type of the serverip address, as defined in the InetAddress MIB.\n\n                      The agentTransferDownloadServerAddress object is intepreted within the\n                      context of agentTransferDownloadServerAddressType')
agentTransferDownloadServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 2, 9), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadServerAddress.setReference('RFC 3291')
if mibBuilder.loadTexts: agentTransferDownloadServerAddress.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadServerAddress.setDescription('Transfer download serverip configures the IP address of the server\n                     where the file is to be downloaded from.It is valid only when the\n                     Transfer Mode is TFTP, SFTP, or SCP.\n                     The type of this address is determined by the value of the\n                     agentTransferDownloadServerAddressType object.\n                     The values for agentTransferDownloadServerAddressType and\n                     agentTransferDownloadServerAddress must be consistent.')
agentTransferDownloadImagename = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("image1", 2), ("image2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadImagename.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadImagename.setDescription('Transfer download image name. Sets the downloaded image as the specified\n                      name\n                     Note: Imagename, File Name, File Path, and Server IP Address are applicable\n                     only if the Transfer Mode is TFTP, SFTP or SCP.')
agentTransferDownloadUsername = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadUsername.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadUsername.setDescription('Username applicable only to secure download types, i.e., SFTP or SCP.\n                     ')
agentTransferDownloadPassword = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadPassword.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadPassword.setDescription('Password applicable only to secure download types, i.e. SFTP or SCP.\n                     ')
agentImageConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 3))
agentImage1 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentImage1.setStatus('current')
if mibBuilder.loadTexts: agentImage1.setDescription('The image1 softwate version .')
agentImage2 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentImage2.setStatus('current')
if mibBuilder.loadTexts: agentImage2.setDescription('The image2 software version.')
agentActiveImage = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentActiveImage.setStatus('current')
if mibBuilder.loadTexts: agentActiveImage.setDescription('The active image name. image1 or image2.\n                      ')
agentNextActiveImage = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 9, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNextActiveImage.setStatus('current')
if mibBuilder.loadTexts: agentNextActiveImage.setDescription('The next active image name.\n                      user assigns either image1 or image2. ')
agentPortMirroringGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 10))
agentMirroredPortIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentMirroredPortIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: agentMirroredPortIfIndex.setDescription('IfIndex of the mirrored port')
agentProbePortIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProbePortIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: agentProbePortIfIndex.setDescription('IfIndex of the probe port')
agentPortMirroringMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirroringMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentPortMirroringMode.setDescription('Port mirroring mode:\n\n                     enable - enable mirroring mode\n                     disable - disable mirroring mode\n                     delete - clear MirroredPort and Probe Port configuration')
agentPortMirrorTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 10, 4), )
if mibBuilder.loadTexts: agentPortMirrorTable.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorTable.setDescription('This table includes entries for each Port Mirroring session.')
agentPortMirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 10, 4, 1), ).setIndexNames((0, "NETGEAR-SMART-SWITCHING-MIB", "agentPortMirrorSessionNum"))
if mibBuilder.loadTexts: agentPortMirrorEntry.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorEntry.setDescription('Provides configuration of a Port Mirroring session specifying the\n                     destination port, and the source Port Mask, providing a many-to-one\n                     mapping.')
agentPortMirrorSessionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 10, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentPortMirrorSessionNum.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorSessionNum.setDescription('The Session number of this mirroring entry.  The number of sessions is\n                     fixed, and is platform dependant.')
agentPortMirrorDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 10, 4, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorDestinationPort.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorDestinationPort.setDescription('The port which traffic from the mirrored ports will be sent to.')
agentPortMirrorSourcePortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 10, 4, 1, 3), AgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorSourcePortMask.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorSourcePortMask.setDescription('The ports from which traffic will be sent to the destination port.\n                     The destination port can not be included in this list of ports.')
agentPortMirrorAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorAdminMode.setDescription('The status of this port mirroring session.\n\n                     enable(1)  - This session is active and all traffic from the source ports\n                                  will be mirrored to the destination port.\n                     disable(2) - This session is not active.\n                     delete(3)  - Remove the configuration for this Session')
agentPortMirrorTypeTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 10, 5), )
if mibBuilder.loadTexts: agentPortMirrorTypeTable.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorTypeTable.setDescription("This table includes entries for each source port's direction of port mirroring.")
agentPortMirrorTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 10, 5, 1), ).setIndexNames((0, "NETGEAR-SMART-SWITCHING-MIB", "agentPortMirrorSessionNum"), (0, "NETGEAR-SMART-SWITCHING-MIB", "agentPortMirrorTypeSourcePort"))
if mibBuilder.loadTexts: agentPortMirrorTypeEntry.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorTypeEntry.setDescription('Provides configuration of a Port Mirroring direction specifying the\n                     session of the port mirroring and source port')
agentPortMirrorTypeSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 10, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentPortMirrorTypeSourcePort.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorTypeSourcePort.setDescription('The port from which traffic will be sent to the destination port.\n                      This port should be a source port in the corresponding session')
agentPortMirrorTypeType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tx", 1), ("rx", 2), ("txrx", 3))).clone('txrx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorTypeType.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorTypeType.setDescription('The direction of the data to be mirrored on this source port.\n\n                     tx(1)  - The data that is transmitted from the source port.\n                     rx(2) - The data that is received on the source port.\n                     txrx(3)  - The data that is transmitted/received from/on the source port')
agentDot3adAggPortTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 12), )
if mibBuilder.loadTexts: agentDot3adAggPortTable.setStatus('current')
if mibBuilder.loadTexts: agentDot3adAggPortTable.setDescription('This table provides 802.3ad link aggregation information for each\n                      physical port that is not available through the standard MIB.')
agentDot3adAggPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 12, 1), ).setIndexNames((0, "NETGEAR-SMART-SWITCHING-MIB", "agentDot3adAggPort"))
if mibBuilder.loadTexts: agentDot3adAggPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentDot3adAggPortEntry.setDescription('Information about a table entry.  The agentDot3adAggPort identifies\n                      the external interface number of the port.')
agentDot3adAggPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot3adAggPort.setStatus('current')
if mibBuilder.loadTexts: agentDot3adAggPort.setDescription('ifIndex of this physical port')
agentDot3adAggPortLACPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot3adAggPortLACPMode.setStatus('current')
if mibBuilder.loadTexts: agentDot3adAggPortLACPMode.setDescription('Enable/disable 802.3ad LACP on this port')
agentPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 13), )
if mibBuilder.loadTexts: agentPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentPortConfigTable.setDescription("A table of the switch's physical port config entries")
agentPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 13, 1), ).setIndexNames((0, "NETGEAR-SMART-SWITCHING-MIB", "agentPortDot1dBasePort"))
if mibBuilder.loadTexts: agentPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentPortConfigEntry.setDescription("Switch's physical port config entry")
agentPortDot1dBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortDot1dBasePort.setStatus('current')
if mibBuilder.loadTexts: agentPortDot1dBasePort.setDescription('The port number of this port.')
agentPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentPortIfIndex.setDescription("The switch's Port IfIndex")
agentPortIanaType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 13, 1, 3), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortIanaType.setStatus('current')
if mibBuilder.loadTexts: agentPortIanaType.setDescription("The switch's Port Type")
agentPortSTPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1d", 1), ("fast", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortSTPMode.setStatus('current')
if mibBuilder.loadTexts: agentPortSTPMode.setDescription("The switch's Port Spanning Tree Protocol Mode\n                      STP mode values are:\n\n                      dot1d (the default)\n                      fast, indicates you want to use the fast spanning tree mode\n                      off, indicates the STP mode is turned off for a particular port\n                      This object is only supported when the Dot1d Protocol is enabled.")
agentPortSTPState = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("blocking", 1), ("listening", 2), ("learning", 3), ("forwarding", 4), ("disabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortSTPState.setStatus('current')
if mibBuilder.loadTexts: agentPortSTPState.setDescription("The switch's Port Spanning Tree Protocol State.\n                      This object is only supported when the Dot1d Protocol is enabled.")
agentPortAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentPortAdminMode.setDescription("The switch's Port Admin Mode")
agentPortPhysicalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("auto-negotiate", 1), ("half-10", 2), ("full-10", 3), ("half-100", 4), ("full-100", 5), ("half-100fx", 6), ("full-100fx", 7), ("full-1000sx", 8), ("full-10gsx", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortPhysicalMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentPortPhysicalMode.setDescription("The switch's Port Speed Mode.  This is the configured physical mode.\n                      This object is read-only for gigabit ports")
agentPortPhysicalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("auto-negotiate", 1), ("half-10", 2), ("full-10", 3), ("half-100", 4), ("full-100", 5), ("half-100fx", 6), ("full-100fx", 7), ("full-1000sx", 8), ("full-10gsx", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortPhysicalStatus.setStatus('obsolete')
if mibBuilder.loadTexts: agentPortPhysicalStatus.setDescription("The switch's Port Physical Speed Status.  This is the current actual speed.")
agentPortLinkTrapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortLinkTrapMode.setStatus('current')
if mibBuilder.loadTexts: agentPortLinkTrapMode.setDescription('If enabled, link up and link down traps will be sent for this port.')
agentPortClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortClearStats.setStatus('current')
if mibBuilder.loadTexts: agentPortClearStats.setDescription('clear stats for this port only')
agentPortDefaultType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 13, 1, 11), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortDefaultType.setReference('RFC 2668')
if mibBuilder.loadTexts: agentPortDefaultType.setStatus('current')
if mibBuilder.loadTexts: agentPortDefaultType.setDescription('This object identifies the default administrative port type,\n                  to be used in conjunction with the operational port type\n                  denoted by agentPortType.\n\n                  The set of possible values for this object is\n                  the same as the set defined for the agentPortType\n                  object.\n\n                  This object represents the administratively-configured type of\n                  the MAU.  If auto-negotiation is not enabled or is not\n                  implemented for this MAU, the value of this object determines\n                  the operational type of the MAU.  In this case, a set to this\n                  object will force the MAU into the specified operating mode.\n\n                  If auto-negotiation is implemented and enabled for this MAU,\n                  the operational type of the MAU is determined by auto-negotiation,\n                  and the value of this object denotes the type to which the MAU\n                  will automatically revert if/when auto-negotiation is later disabled.\n\n                  The valid values for this object are:\n\n                       dot3MauType10BaseTHD\n                       dot3MauType10BaseTFD\n                       dot3MauType100BaseTXHD\n                       dot3MauType100BaseTXFD\n                       dot3MauType100BaseFXFD\n                       dot3MauType10GBaseSX')
agentPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 13, 1, 12), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortType.setReference('RFC 2668')
if mibBuilder.loadTexts: agentPortType.setStatus('current')
if mibBuilder.loadTexts: agentPortType.setDescription('This object identifies the port type.  An initial set of MAU types\n                  are defined in RFC 2668.  The assignment of OBJECT IDENTIFIERs to\n                  new types of MAUs is managed by the IANA.  If the MAU type is\n                  unknown, the object identifier\n\n                     unknownMauType OBJECT IDENTIFIER ::= { 0 0 }\n\n                  is returned.  Note that unknownMauType is a syntactically valid\n                  object identifier, and any conformant implementation of ASN.1 and\n                  the BER must be able to generate and recognize this value.\n\n                  This object represents the operational type of the MAU, as determined\n                  by either (1) the result of the auto-negotiation function or (2) if\n                  auto-negotiation is not enabled or is not implemented for this MAU,\n                  by the value of the object agentPortDefaultType, or (3) for the GigE card\n                  a value determined by the GBIC connected to the card.  In case (2), a\n                  set to the object agentPortDefaultType will force the MAU into the\n                  new operating mode.\n\n                  The valid values for this object are:\n\n                       dot3MauType10BaseTHD\n                       dot3MauType10BaseTFD\n                       dot3MauType100BaseTXHD\n                       dot3MauType100BaseTXFD\n                       dot3MauType100BaseFXFD\n                       dot3MauType1000BaseSXFD\n                       dot3MauType10GBaseSX')
agentPortAutoNegAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortAutoNegAdminStatus.setStatus('current')
if mibBuilder.loadTexts: agentPortAutoNegAdminStatus.setDescription('This object identifies the administration status of auto negotiation\n                  for this port.')
agentPortDot3FlowControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortDot3FlowControlMode.setStatus('current')
if mibBuilder.loadTexts: agentPortDot3FlowControlMode.setDescription('Config flowcontrol allows you to enable or disable\n                     802.3x flow control for this port. This value\n                     applies to only full-duplex mode ports. ')
agentPortMaxFrameSizeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 13, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortMaxFrameSizeLimit.setStatus('current')
if mibBuilder.loadTexts: agentPortMaxFrameSizeLimit.setDescription('This object identifies the largest value that can be\n                     configured for agentPortMaxFrameSize')
agentPortMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 13, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: agentPortMaxFrameSize.setDescription('This object identifies the currently configured maximum frame size\n                     value for this port. The maximmum value that this object can be set\n                     to is the value of agentPortMaxFrameSizeLimit.  For Ethernet ports\n                     which support 802.1Q vlan tagging, the minimum value that this object\n                     can be set to is 1522')
agentPortBroadcastControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 13, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortBroadcastControlMode.setStatus('current')
if mibBuilder.loadTexts: agentPortBroadcastControlMode.setDescription('If enabled, broadcast storm recovery will function on this port.\n                     When you specify Enable for Broadcast Storm Recovery and the broadcast\n                     traffic on this Ethernet port exceeds the configured threshold, the\n                     switch blocks (discards) the broadcast traffic.')
agentPortBroadcastControlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 13, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortBroadcastControlThreshold.setStatus('current')
if mibBuilder.loadTexts: agentPortBroadcastControlThreshold.setDescription('Configures the broadcast storm recovery threshold for this port\n                     as a percentage of port speed.')
agentPortMulticastControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 13, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMulticastControlMode.setStatus('current')
if mibBuilder.loadTexts: agentPortMulticastControlMode.setDescription('If enabled, multicast storm recovery will function on this port.\n                     When you specify Enable for Multicast Storm Recovery and the multicast\n                     traffic on this Ethernet port exceeds the configured threshold, the\n                     switch blocks (discards) the multicast traffic.')
agentPortMulticastControlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 13, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMulticastControlThreshold.setStatus('current')
if mibBuilder.loadTexts: agentPortMulticastControlThreshold.setDescription('Configures the multicast storm recovery threshold for this port\n                     as a percentage of port speed.')
agentPortUnicastControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 13, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortUnicastControlMode.setStatus('current')
if mibBuilder.loadTexts: agentPortUnicastControlMode.setDescription('If enabled, unicast storm recovery will function on this port.\n                     When you specify Enable for Unicast Storm Recovery and the unknown unicast\n                     traffic on this Ethernet port exceeds the configured threshold, the\n                     switch blocks (discards) the unknown unicast traffic.')
agentPortUnicastControlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 13, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortUnicastControlThreshold.setStatus('current')
if mibBuilder.loadTexts: agentPortUnicastControlThreshold.setDescription('Configures the unicast storm recovery threshold for this port\n                     as a percentage of port speed.')
agentStpSwitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15))
agentStpConfigDigestKey = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpConfigDigestKey.setStatus('current')
if mibBuilder.loadTexts: agentStpConfigDigestKey.setDescription('The MST configuration digest key.')
agentStpConfigFormatSelector = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpConfigFormatSelector.setStatus('current')
if mibBuilder.loadTexts: agentStpConfigFormatSelector.setDescription('The MST configuration format selector. A value other than 0 (zero)\n                     indicates non-support for the IEEE 802.1s standard.')
agentStpConfigName = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpConfigName.setStatus('current')
if mibBuilder.loadTexts: agentStpConfigName.setDescription('The MST configuration name of at most 32 characters.')
agentStpConfigRevision = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpConfigRevision.setStatus('current')
if mibBuilder.loadTexts: agentStpConfigRevision.setDescription('The MST configuration revision. The default value is 1.')
agentStpForceVersion = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1d", 1), ("dot1w", 2), ("dot1s", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpForceVersion.setStatus('current')
if mibBuilder.loadTexts: agentStpForceVersion.setDescription('The MST configuration force protocol version. The default version is dot1s.')
agentStpAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentStpAdminMode.setDescription('The spanning tree operational status.\n\n                     enable(1)  - enables spanning tree operational status on the switch.\n                     disable(2) - disables spanning tree operational status on the switch.\n\n                     The default status is disabled.')
agentStpBpduGuardMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpBpduGuardMode.setStatus('current')
if mibBuilder.loadTexts: agentStpBpduGuardMode.setDescription('The spanning tree BPDU Guard Mode.\n\n                     enable(1)  - enables BPDU Guard Mode on the switch.\n                     disable(2) - disables BPDU Guard Mode on the switch.\n\n                     The default status is disabled.')
agentStpBpduFilterDefault = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpBpduFilterDefault.setStatus('current')
if mibBuilder.loadTexts: agentStpBpduFilterDefault.setDescription('The spanning tree BPDU Filter Mode, it enables BPDU Filter on all\n                     edge ports.\n\n                     enable(1)  - enables BPDU Filter Mode on the switch.\n                     disable(2) - disables BPDU Filter Mode on the switch.\n\n                     The default status is disabled.')
agentStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 9), )
if mibBuilder.loadTexts: agentStpPortTable.setStatus('current')
if mibBuilder.loadTexts: agentStpPortTable.setDescription('STP port table.')
agentStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentStpPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpPortEntry.setDescription('STP port entry.')
agentStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpPortState.setStatus('current')
if mibBuilder.loadTexts: agentStpPortState.setDescription('The administrative STP state for the port.\n\n                     enable(1)  - enables STP on the port.\n                     disable(2) - disables STP on the port.\n\n                     The default port STP state is enabled for the first 4095\n                     ports and disabled for any ports beyond.')
agentStpPortStatsMstpBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsMstpBpduRx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsMstpBpduRx.setDescription('The MSTP BPDUs received on a specific port.')
agentStpPortStatsMstpBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsMstpBpduTx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsMstpBpduTx.setDescription('The MSTP BPDUs sent from a specific port.')
agentStpPortStatsRstpBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsRstpBpduRx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsRstpBpduRx.setDescription('The RSTP BPDUs received on a specific port.')
agentStpPortStatsRstpBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsRstpBpduTx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsRstpBpduTx.setDescription('The RSTP BPDUs sent from a specific port.')
agentStpPortStatsStpBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsStpBpduRx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsStpBpduRx.setDescription('The STP BPDUs received on a specific port.')
agentStpPortStatsStpBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsStpBpduTx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsStpBpduTx.setDescription('The STP BPDUs sent from a specific port.')
agentStpPortUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 9, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortUpTime.setStatus('current')
if mibBuilder.loadTexts: agentStpPortUpTime.setDescription('Time since port was reset.\n                     It is displayed in days, hours, minutes, and seconds.')
agentStpPortMigrationCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpPortMigrationCheck.setStatus('current')
if mibBuilder.loadTexts: agentStpPortMigrationCheck.setDescription("Force the specified port to transmit RSTP or MSTP BPDU's.\n\n                     Supported values:\n                     false(0) - BPDUs are not to be transmitted.\n                     true(1)  - BPDUs are to be transmitted\n\n                     A non-zero value indicates that BPDUs are to be sent on the specified port.")
agentStpPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 9, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpPortHelloTime.setStatus('current')
if mibBuilder.loadTexts: agentStpPortHelloTime.setDescription('Hello time for the STP port. The default value is 2.')
agentStpCstConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 10))
agentStpCstHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 10, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstHelloTime.setStatus('current')
if mibBuilder.loadTexts: agentStpCstHelloTime.setDescription('The MSTP root port hello time for the CIST.')
agentStpCstMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 10, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstMaxAge.setStatus('current')
if mibBuilder.loadTexts: agentStpCstMaxAge.setDescription('The MSTP root port max age for the CIST.')
agentStpCstRegionalRootId = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 10, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstRegionalRootId.setStatus('current')
if mibBuilder.loadTexts: agentStpCstRegionalRootId.setDescription('The MSTP regional root identifier for the CIST.')
agentStpCstRegionalRootPathCost = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 10, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstRegionalRootPathCost.setStatus('current')
if mibBuilder.loadTexts: agentStpCstRegionalRootPathCost.setDescription('The MSTP regional root path cost for the CIST.')
agentStpCstRootFwdDelay = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 10, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstRootFwdDelay.setStatus('current')
if mibBuilder.loadTexts: agentStpCstRootFwdDelay.setDescription('The MSTP root port forward delay for the CIST.')
agentStpCstBridgeFwdDelay = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 10, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgeFwdDelay.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeFwdDelay.setDescription('The MSTP bridge forward delay for the CIST. The default value is 15.')
agentStpCstBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 10, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstBridgeHelloTime.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeHelloTime.setDescription('The MSTP bridge hello time for the CIST. The default \n                      value is 2. According to IEEE 802.1Q-REV 2005 updating\n                      hello time is disallowed')
agentStpCstBridgeHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 10, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstBridgeHoldTime.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeHoldTime.setDescription('The MSTP bridge hold time for the CIST.')
agentStpCstBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 10, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeMaxAge.setDescription('The MSTP bridge max age for the CIST. The default value is 20.')
agentStpCstBridgeMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 10, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgeMaxHops.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeMaxHops.setDescription('The MSTP bridge max hops for the CIST. The default value is 20.')
agentStpCstBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 10, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgePriority.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgePriority.setDescription('The MSTP bridge priority for the CIST. The default value is 32768.')
agentStpCstBridgeHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 10, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgeHoldCount.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeHoldCount.setDescription('The MSTP bridge hold count for the CIST. This command sets the value of\n                      maximum bpdus that a bridge is allowed to send within a hello time window.\n                      The default value is 6.')
agentStpCstTimeSinceTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 10, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstTimeSinceTopologyChange.setStatus('current')
if mibBuilder.loadTexts: agentStpCstTimeSinceTopologyChange.setDescription('The MSTP time since the last topology change for the CIST.')
agentStpCstTopologyChangeCount = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 10, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstTopologyChangeCount.setStatus('current')
if mibBuilder.loadTexts: agentStpCstTopologyChangeCount.setDescription('The MSTP count of topology changes for the CIST.')
agentStpCstPortTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 11), )
if mibBuilder.loadTexts: agentStpCstPortTable.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortTable.setDescription('CIST port table.')
agentStpCstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentStpCstPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortEntry.setDescription('CIST port entry.')
agentStpCstPortOperEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortOperEdge.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortOperEdge.setDescription('The MSTP operational status of a specific port for the CIST.')
agentStpCstPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortOperPointToPoint.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortOperPointToPoint.setDescription('The MSTP operational point to point mac of a specific port for the CIST.')
agentStpCstPortTopologyChangeAck = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortTopologyChangeAck.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortTopologyChangeAck.setDescription('The MSTP topology change acknowledge for a specific port in the CIST.')
agentStpCstPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortEdge.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortEdge.setDescription('The administrative state of a specific port in CIST.\n\n                     enable(1)  - enables the port.\n                     disable(2) - disables the port.\n\n                     The default port state is disabled.')
agentStpCstPortForwardingState = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3), ("disabled", 4), ("manualFwd", 5), ("notParticipate", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortForwardingState.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortForwardingState.setDescription('The MSTP forwarding state of a specific port in CIST.')
agentStpCstPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 11, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortId.setDescription('The MSTP port identifier of a specific port in CIST.')
agentStpCstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortPathCost.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortPathCost.setDescription('The MSTP port path cost in CIST. The default value will\n                     correspond to the recommendation specified in IEEE 802.1s Table 13-2\n                     which varies depending upon link speed.')
agentStpCstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortPriority.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortPriority.setDescription('The MSTP port priority in CIST. The priority is\n                     in the increments of 16. The default value is 128.')
agentStpCstDesignatedBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 11, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstDesignatedBridgeId.setStatus('current')
if mibBuilder.loadTexts: agentStpCstDesignatedBridgeId.setDescription('The MSTP designated bridge ID of a specific port in CIST.')
agentStpCstDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 11, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: agentStpCstDesignatedCost.setDescription('The MSTP designated cost of a specific port in CIST.')
agentStpCstDesignatedPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 11, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstDesignatedPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpCstDesignatedPortId.setDescription('The MSTP designated port ID of a specific port in CIST.')
agentStpCstExtPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 11, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstExtPortPathCost.setStatus('current')
if mibBuilder.loadTexts: agentStpCstExtPortPathCost.setDescription('The MSTP external port path cost in CIST. The default value varies depending upon the link speed.')
agentStpCstPortBpduGuardEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortBpduGuardEffect.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortBpduGuardEffect.setDescription('BPDU Guard Mode effect on the port.\n                      \n                     enable(1)  - BPDU Guard Mode is enabled on the port.\n                     disable(2) - BPDU Guard Mode is disabled on the port.')
agentStpCstPortBpduFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortBpduFilter.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortBpduFilter.setDescription('This command sets BPDU Filter mode on the port. \n                      \n                     enable(1)  - BPDU Filter Mode is enabled on the port.\n                     disable(2) - BPDU Filter Mode is disabled on the port.')
agentStpCstPortBpduFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortBpduFlood.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortBpduFlood.setDescription('This command sets BPDU Flood mode on the port. \n                      \n                     enable(1)  - BPDU Flood Mode is enabled on the port.\n                     disable(2) - BPDU Flood Mode is disabled on the port.')
agentStpCstPortAutoEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortAutoEdge.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortAutoEdge.setDescription('This command sets the auto-edge mode of the port which enables it\n                      to become an edge port if it does not see BPDUs for some duration.\n\n                     enable(1)  - enables the auto-edge mode for the port.\n                     disable(2) - disables the auto-edge mode for the port.\n\n                     The default auto-edge mode is disabled.')
agentStpCstPortRootGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortRootGuard.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortRootGuard.setDescription('This command sets a port to discard any superior information\n                      received by the port and thus protect against root of the device\n                      from changing.The port gets put into discarding state and does\n                      not forward any packets.\n\n                     enable(1)  - enables the root-guard mode for the port.\n                     disable(2) - disables the root-guard mode for the port.\n\n                     The default root-guard mode is disabled.')
agentStpCstPortTCNGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortTCNGuard.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortTCNGuard.setDescription('This command restricts the port from propagating any topology change\n                      information received through that port.\n\n                     enable(1)  - enables the tcn-guard mode for the port.\n                     disable(2) - disables the tcn-guard mode for the port.\n\n                     The default tcn-guard mode is disabled.')
agentStpMstTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 12), )
if mibBuilder.loadTexts: agentStpMstTable.setStatus('current')
if mibBuilder.loadTexts: agentStpMstTable.setDescription('MST table.')
agentStpMstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 12, 1), ).setIndexNames((0, "NETGEAR-SMART-SWITCHING-MIB", "agentStpMstId"))
if mibBuilder.loadTexts: agentStpMstEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpMstEntry.setDescription('MST entry.')
agentStpMstId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 12, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstId.setDescription('The MSTP instance ID.')
agentStpMstBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpMstBridgePriority.setStatus('current')
if mibBuilder.loadTexts: agentStpMstBridgePriority.setDescription('The MSTP bridge priority in a specific instance. The priority is\n                     in the increments of 4096. The recommended default value is 32768.')
agentStpMstBridgeIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 12, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstBridgeIdentifier.setStatus('current')
if mibBuilder.loadTexts: agentStpMstBridgeIdentifier.setDescription('The MSTP bridge identifier in a specific instance.')
agentStpMstDesignatedRootId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstDesignatedRootId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstDesignatedRootId.setDescription('The MSTP designated root bridge identifier in a specific instance.')
agentStpMstRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 12, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstRootPathCost.setStatus('current')
if mibBuilder.loadTexts: agentStpMstRootPathCost.setDescription('The MSTP root path cost in a specific instance.')
agentStpMstRootPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 12, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstRootPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstRootPortId.setDescription('The MSTP root port ID in a specific instance.')
agentStpMstTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 12, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstTimeSinceTopologyChange.setStatus('current')
if mibBuilder.loadTexts: agentStpMstTimeSinceTopologyChange.setDescription('The MSTP time since the last topology change in a specific instance.')
agentStpMstTopologyChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstTopologyChangeCount.setStatus('current')
if mibBuilder.loadTexts: agentStpMstTopologyChangeCount.setDescription('The MSTP count of topology changes in a specific instance.')
agentStpMstTopologyChangeParm = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstTopologyChangeParm.setStatus('current')
if mibBuilder.loadTexts: agentStpMstTopologyChangeParm.setDescription('The MSTP topology change parameter in a specific instance.')
agentStpMstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 12, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStpMstRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentStpMstRowStatus.setDescription('The MSTP instance status.\n\n                     Supported values:\n                     active(1)      - valid instance.\n                     createAndGo(4) - used to create a new instance.\n                     destroy(6)     - removes an instance.')
agentStpMstPortTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 13), )
if mibBuilder.loadTexts: agentStpMstPortTable.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortTable.setDescription('MST port table.')
agentStpMstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 13, 1), ).setIndexNames((0, "NETGEAR-SMART-SWITCHING-MIB", "agentStpMstId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentStpMstPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortEntry.setDescription('MST port entry.')
agentStpMstPortForwardingState = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3), ("disabled", 4), ("manualFwd", 5), ("notParticipate", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstPortForwardingState.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortForwardingState.setDescription('The MSTP forwarding state of a specific port in a specific instance.')
agentStpMstPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 13, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortId.setDescription('The MSTP port identifier of a specific port in a specific instance.')
agentStpMstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpMstPortPathCost.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortPathCost.setDescription('The MSTP port path cost in a specific instance. The default value will\n                     correspond to the recommendation specified in IEEE 802.1s Table 13-2\n                     which varies depending upon link speed.')
agentStpMstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 13, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpMstPortPriority.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortPriority.setDescription('The MSTP port priority in a specific instance. The priority is\n                     in the increments of 16. The default value is 128.')
agentStpMstDesignatedBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 13, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstDesignatedBridgeId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstDesignatedBridgeId.setDescription('The MSTP designated bridge ID of a specific port in a specific instance.')
agentStpMstDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 13, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: agentStpMstDesignatedCost.setDescription('The MSTP designated cost of a specific port in a specific instance.')
agentStpMstDesignatedPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 13, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstDesignatedPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstDesignatedPortId.setDescription('The MSTP designated port ID of a specific port in a specific instance.')
agentStpMstVlanTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 14), )
if mibBuilder.loadTexts: agentStpMstVlanTable.setStatus('current')
if mibBuilder.loadTexts: agentStpMstVlanTable.setDescription('MST VLAN table.')
agentStpMstVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 14, 1), ).setIndexNames((0, "NETGEAR-SMART-SWITCHING-MIB", "agentStpMstId"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: agentStpMstVlanEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpMstVlanEntry.setDescription('MST VLAN entry.')
agentStpMstVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 15, 14, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStpMstVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentStpMstVlanRowStatus.setDescription('The association status of an MSTP instance and a VLAN.\n\n                     Supported values:\n                     active(1)      - valid association between an MSTP instance and a VLAN.\n                     createAndGo(4) - used to create a new association between an MSTP instance and a VLAN.\n                     destroy(6)     - removes the association between an MSTP instance and a VLAN.')
agentAuthenticationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 16))
agentAuthenticationListCreate = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 16, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListCreate.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListCreate.setDescription('Authentication List Create\n                      If set to a non empty string, creates a new Authentication List for\n                      configuration.')
agentAuthenticationListTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 16, 2), )
if mibBuilder.loadTexts: agentAuthenticationListTable.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListTable.setDescription('MST VLAN table.')
agentAuthenticationListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 16, 2, 1), ).setIndexNames((0, "NETGEAR-SMART-SWITCHING-MIB", "agentAuthenticationListIndex"))
if mibBuilder.loadTexts: agentAuthenticationListEntry.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListEntry.setDescription('MST VLAN entry.')
agentAuthenticationListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 16, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentAuthenticationListIndex.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListIndex.setDescription('Authenticaiton List Index\n                     Unique number used for indexing into this table.')
agentAuthenticationListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 16, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAuthenticationListName.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListName.setDescription('Authenticaiton List Name\n                     Unique name used to identify the Authentication List from other tables.')
agentAuthenticationListMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("radius", 2), ("reject", 3), ("tacacs", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod1.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListMethod1.setDescription('Authenticion List Method 1\n                      Configures the first authentication method to use when this list is\n                      specified.')
agentAuthenticationListMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("local", 2), ("radius", 3), ("reject", 4), ("tacacs", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod2.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListMethod2.setDescription('Authenticion List Method 2\n                      Configures the second authentication method to use when this list is\n                      specified.')
agentAuthenticationListMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("local", 2), ("radius", 3), ("reject", 4), ("tacacs", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod3.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListMethod3.setDescription('Authenticion List Method 3\n                      Configures the third authentication method to use when this list is\n                      specified.')
agentAuthenticationListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 16, 2, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListStatus.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListStatus.setDescription('The status of the Authentication List.\n\n                     Supported values:\n                     active(1)      - indicates a valid Authenticaiton List\n                     destroy(6)     - removes the Authentication List.')
agentAuthenticationListMethod4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 16, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("local", 2), ("radius", 3), ("reject", 4), ("tacacs", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod4.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListMethod4.setDescription('Authenticion List Method 4\n                      Configures the fourth authentication method to use when this list is\n                      specified.')
agentUserConfigDefaultAuthenticationList = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 16, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserConfigDefaultAuthenticationList.setStatus('current')
if mibBuilder.loadTexts: agentUserConfigDefaultAuthenticationList.setDescription('Default Authentication List\n                      This object configures which authentication list to use for users\n                      which do not have an Authentication List configured.  The list\n                      must be configured before setting.')
agentUserAuthenticationConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 16, 4), )
if mibBuilder.loadTexts: agentUserAuthenticationConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentUserAuthenticationConfigTable.setDescription('User Authentication Config Table')
agentUserAuthenticationConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 16, 4, 1), )
agentUserConfigEntry.registerAugmentions(("NETGEAR-SMART-SWITCHING-MIB", "agentUserAuthenticationConfigEntry"))
agentUserAuthenticationConfigEntry.setIndexNames(*agentUserConfigEntry.getIndexNames())
if mibBuilder.loadTexts: agentUserAuthenticationConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentUserAuthenticationConfigEntry.setDescription('User Authentication Config Entry')
agentUserAuthenticationList = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 16, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserAuthenticationList.setStatus('current')
if mibBuilder.loadTexts: agentUserAuthenticationList.setDescription('User Authentication List\n                      This object configures which authentication list to use for this\n                      user.  The list must be configured before setting.')
agentUserPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 16, 5), )
if mibBuilder.loadTexts: agentUserPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentUserPortConfigTable.setDescription('User Port Config Table')
agentUserPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 16, 5, 1), )
agentUserConfigEntry.registerAugmentions(("NETGEAR-SMART-SWITCHING-MIB", "agentUserPortConfigEntry"))
agentUserPortConfigEntry.setIndexNames(*agentUserConfigEntry.getIndexNames())
if mibBuilder.loadTexts: agentUserPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentUserPortConfigEntry.setDescription('User Port Config Entry')
agentUserPortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 16, 5, 1, 1), AgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserPortSecurity.setStatus('current')
if mibBuilder.loadTexts: agentUserPortSecurity.setDescription('User Port Port Security\n                      This object configures which ports the user has access to.\n                      Ports are indexed based on dot1dBasePort entries in\n                      dot1dBasePortTable.')
agentClassOfServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 17))
agentClassOfServicePortTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 17, 1), )
if mibBuilder.loadTexts: agentClassOfServicePortTable.setStatus('current')
if mibBuilder.loadTexts: agentClassOfServicePortTable.setDescription('A table that contains information about the 802.1p priority\n                     mapping to traffic class priority queue for every physical port.')
agentClassOfServicePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 17, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "NETGEAR-SMART-SWITCHING-MIB", "agentClassOfServicePortPriority"))
if mibBuilder.loadTexts: agentClassOfServicePortEntry.setStatus('current')
if mibBuilder.loadTexts: agentClassOfServicePortEntry.setDescription('A 802.1p priority mapped to a traffic class priority queue.')
agentClassOfServicePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: agentClassOfServicePortPriority.setStatus('current')
if mibBuilder.loadTexts: agentClassOfServicePortPriority.setDescription('The Priority value determined for the received frame.\n                     This value is equivalent to the priority indicated in\n                     the tagged frame received, or one of the evaluated\n                     priorities, determined according to the media-type.\n\n                     For untagged frames received from Ethernet media, this\n                     value is equal to the dot1dPortDefaultUserPriority value\n                     for the ingress port.')
agentClassOfServicePortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClassOfServicePortClass.setStatus('current')
if mibBuilder.loadTexts: agentClassOfServicePortClass.setDescription('Traffic class priority queue the received frame is mapped to.')
agentHTTPConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 18))
agentHTTPWebMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentHTTPWebMode.setStatus('current')
if mibBuilder.loadTexts: agentHTTPWebMode.setDescription('Configures the HTTP server admin mode')
agentHTTPJavaMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 18, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentHTTPJavaMode.setStatus('current')
if mibBuilder.loadTexts: agentHTTPJavaMode.setDescription('Configures the use of the Java interface through Web connections.')
agentHTTPMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 18, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentHTTPMaxSessions.setStatus('current')
if mibBuilder.loadTexts: agentHTTPMaxSessions.setDescription('Configures the maximum number of allowable HTTP sessions.  The default\n                      value is 16.')
agentHTTPHardTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 18, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 168))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentHTTPHardTimeout.setStatus('current')
if mibBuilder.loadTexts: agentHTTPHardTimeout.setDescription('Configures the hard timeout for HTTP sessions in hours.  The default\n                      value is 24 hours.  A value of 0 gives an infinite timeout.')
agentHTTPSoftTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 2, 18, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentHTTPSoftTimeout.setStatus('current')
if mibBuilder.loadTexts: agentHTTPSoftTimeout.setDescription('Configures the soft (activity) timeout for HTTP sessions in minutes.\n                      The default value is 5 minutes.  A value of 0 gives an infinite timeout.')
agentSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 3))
agentSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSaveConfig.setStatus('current')
if mibBuilder.loadTexts: agentSaveConfig.setDescription('enable(1) will initiate an configuration save to nvram.\n\n                     Status is returned by the object agentSaveConfigStatus.')
agentClearConfig = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearConfig.setStatus('current')
if mibBuilder.loadTexts: agentClearConfig.setDescription('clear config to factory defaults')
agentClearLags = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearLags.setStatus('current')
if mibBuilder.loadTexts: agentClearLags.setDescription('clear lag configuration')
agentClearLoginSessions = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearLoginSessions.setStatus('current')
if mibBuilder.loadTexts: agentClearLoginSessions.setDescription('close all telnet sessions')
agentClearPasswords = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearPasswords.setStatus('current')
if mibBuilder.loadTexts: agentClearPasswords.setDescription('reset passwords')
agentClearPortStats = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearPortStats.setStatus('current')
if mibBuilder.loadTexts: agentClearPortStats.setDescription('clear all port statistics')
agentClearSwitchStats = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearSwitchStats.setStatus('current')
if mibBuilder.loadTexts: agentClearSwitchStats.setDescription('clear all switch statistics')
agentClearTrapLog = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearTrapLog.setStatus('current')
if mibBuilder.loadTexts: agentClearTrapLog.setDescription('clear trap log')
agentClearVlan = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearVlan.setStatus('current')
if mibBuilder.loadTexts: agentClearVlan.setDescription('clear vlan entries')
agentResetSystem = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentResetSystem.setStatus('current')
if mibBuilder.loadTexts: agentResetSystem.setDescription('Resets the switch.\n\n                      This object is not valid for stacking platforms.')
agentSaveConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notInitiated", 1), ("savingInProcess", 2), ("savingComplete", 3), ("savingFailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSaveConfigStatus.setStatus('current')
if mibBuilder.loadTexts: agentSaveConfigStatus.setDescription('Indicates the current status of an save configuration request.')
agentCableTesterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 4))
agentCableTesterStatus = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("success", 2), ("failure", 3), ("uninitialized", 4))).clone('uninitialized')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCableTesterStatus.setStatus('current')
if mibBuilder.loadTexts: agentCableTesterStatus.setDescription('Status of the Virtual Cable Tester\n                     active(1)        - cable testing is in progress.  Set to this value\n                                        to start the test.\n                     success(2)       - A successful test was performed.  Cannot be set.\n                     failure(3)       - A failure was encountered during the test.\n                                        Cannot be set.\n                     uninitialized(4) - No test has been performed yet. Cannot be set.')
agentCableTesterIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 4, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCableTesterIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentCableTesterIfIndex.setDescription('Determines on which port to perform the cable test.  Limited to\n                     copper based ports.')
agentCableTesterCableStatus = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("open", 2), ("short", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCableTesterCableStatus.setStatus('current')
if mibBuilder.loadTexts: agentCableTesterCableStatus.setDescription('Indicates the results of the Cable Test.\n\n\n                     normal(1)        - The cable is working correctly.\n                     open(2)          - The cable is disconnected or there is a faulty\n                                        connector.\n                     short(3)         - There is an electrical short in the cable.\n                     unknown(4)       - No test has been performed yet, or a test is\n                                        currently in progress.')
agentCableTesterMinimumCableLength = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 4, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCableTesterMinimumCableLength.setStatus('current')
if mibBuilder.loadTexts: agentCableTesterMinimumCableLength.setDescription('The estimated length of the cable in meters.  This value\n                     indicates the shortest length estimated.  This object will\n                     return 0 if agentCableTesterStatus is not success(2) or the cable\n                     length is unknown.')
agentCableTesterMaximumCableLength = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 4, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCableTesterMaximumCableLength.setStatus('current')
if mibBuilder.loadTexts: agentCableTesterMaximumCableLength.setDescription('The estimated length of the cable in meters.  This value\n                     indicates the longest length estimated.  This object will\n                     return 0 if agentCableTesterStatus is not success(2) or the cable\n                     length is unknown.')
agentCableTesterCableFailureLocation = MibScalar((1, 3, 6, 1, 4, 1, 4526, 11, 1, 4, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCableTesterCableFailureLocation.setStatus('current')
if mibBuilder.loadTexts: agentCableTesterCableFailureLocation.setDescription('The estimated distance in meters from the end of the cable to\n                     the failure location.  This object will return 0 if\n                     agentCableTesterStatus is not success(2).')
agentSwitchingTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 11, 1, 0))
multipleUsersTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 11, 1, 0, 1))
if mibBuilder.loadTexts: multipleUsersTrap.setStatus('current')
if mibBuilder.loadTexts: multipleUsersTrap.setDescription('This trap is sent when more than one user is logged in with\n             administrative access.  Only applies to CLI interface.')
broadcastStormStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 11, 1, 0, 2))
if mibBuilder.loadTexts: broadcastStormStartTrap.setStatus('obsolete')
if mibBuilder.loadTexts: broadcastStormStartTrap.setDescription('This trap is sent when a broadcast storm is detected.')
broadcastStormEndTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 11, 1, 0, 3))
if mibBuilder.loadTexts: broadcastStormEndTrap.setStatus('obsolete')
if mibBuilder.loadTexts: broadcastStormEndTrap.setDescription('This trap is sent when a broadcast storm is no longer\n             detected.')
linkFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 11, 1, 0, 4))
if mibBuilder.loadTexts: linkFailureTrap.setStatus('obsolete')
if mibBuilder.loadTexts: linkFailureTrap.setDescription('')
vlanRequestFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 11, 1, 0, 5)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanRequestFailureTrap.setStatus('obsolete')
if mibBuilder.loadTexts: vlanRequestFailureTrap.setDescription('')
vlanDeleteLastTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 11, 1, 0, 6)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanDeleteLastTrap.setStatus('current')
if mibBuilder.loadTexts: vlanDeleteLastTrap.setDescription('Trap is sent when attempting to delete the last configured VLAN\n             or the Default VLAN.')
vlanDefaultCfgFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 11, 1, 0, 7)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanDefaultCfgFailureTrap.setStatus('current')
if mibBuilder.loadTexts: vlanDefaultCfgFailureTrap.setDescription('Trap is sent if there are failures in resetting VLAN\n             configuration to defaults.')
vlanRestoreFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 11, 1, 0, 8)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanRestoreFailureTrap.setStatus('obsolete')
if mibBuilder.loadTexts: vlanRestoreFailureTrap.setDescription('')
fanFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 11, 1, 0, 9))
if mibBuilder.loadTexts: fanFailureTrap.setStatus('obsolete')
if mibBuilder.loadTexts: fanFailureTrap.setDescription('')
stpInstanceNewRootTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 11, 1, 0, 10)).setObjects(("NETGEAR-SMART-SWITCHING-MIB", "agentStpMstId"))
if mibBuilder.loadTexts: stpInstanceNewRootTrap.setStatus('current')
if mibBuilder.loadTexts: stpInstanceNewRootTrap.setDescription('Trap is sent when this machine is a new STP Root when there is more\n             than one STP instance.')
stpInstanceTopologyChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 11, 1, 0, 11)).setObjects(("NETGEAR-SMART-SWITCHING-MIB", "agentStpMstId"))
if mibBuilder.loadTexts: stpInstanceTopologyChangeTrap.setStatus('current')
if mibBuilder.loadTexts: stpInstanceTopologyChangeTrap.setDescription('Trap is sent when there is a STP topology change when there is more\n             than one STP instance.')
powerSupplyStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 11, 1, 0, 12))
if mibBuilder.loadTexts: powerSupplyStatusChangeTrap.setStatus('obsolete')
if mibBuilder.loadTexts: powerSupplyStatusChangeTrap.setDescription('')
failedUserLoginTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 11, 1, 0, 13))
if mibBuilder.loadTexts: failedUserLoginTrap.setStatus('current')
if mibBuilder.loadTexts: failedUserLoginTrap.setDescription('Trap is sent when a user fails to authenticate via the CLI or Web\n             interfaces.')
userLockoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 11, 1, 0, 14))
if mibBuilder.loadTexts: userLockoutTrap.setStatus('current')
if mibBuilder.loadTexts: userLockoutTrap.setDescription('Trap is sent when a user account is locked due to consecutive failed login attempts via the CLI or Web\n             interfaces beyond the allowed limit.')
macAddrLearnTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 11, 1, 0, 15)).setObjects(("IF-MIB", "ifIndex"), ("Q-BRIDGE-MIB", "dot1qVlanIndex"), ("Q-BRIDGE-MIB", "dot1qTpFdbAddress"))
if mibBuilder.loadTexts: macAddrLearnTrap.setStatus('current')
if mibBuilder.loadTexts: macAddrLearnTrap.setDescription('Trap is sent when L2 MAC address is learned i.e when entry is added to FDB.')
macAddrAgeoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 11, 1, 0, 16)).setObjects(("IF-MIB", "ifIndex"), ("Q-BRIDGE-MIB", "dot1qVlanIndex"), ("Q-BRIDGE-MIB", "dot1qTpFdbAddress"))
if mibBuilder.loadTexts: macAddrAgeoutTrap.setStatus('current')
if mibBuilder.loadTexts: macAddrAgeoutTrap.setDescription('Trap is sent when L2 MAC address is agedout i.e when entry is removed from FDB.')
mibBuilder.exportSymbols("NETGEAR-SMART-SWITCHING-MIB", agentStpBpduGuardMode=agentStpBpduGuardMode, agentClassOfServicePortPriority=agentClassOfServicePortPriority, agentStpForceVersion=agentStpForceVersion, agentSwitchMFDBSummaryEntry=agentSwitchMFDBSummaryEntry, agentStpAdminMode=agentStpAdminMode, agentStpCstDesignatedPortId=agentStpCstDesignatedPortId, agentPortLinkTrapMode=agentPortLinkTrapMode, agentSwitchVlanStaticMrouterTable=agentSwitchVlanStaticMrouterTable, agentSwitchMFDBFilteringPortMask=agentSwitchMFDBFilteringPortMask, agentPortMirroringMode=agentPortMirroringMode, fanFailureTrap=fanFailureTrap, agentSwitchSnoopingVlanGroupMembershipInterval=agentSwitchSnoopingVlanGroupMembershipInterval, agentInventoryBurnedInMacAddress=agentInventoryBurnedInMacAddress, agentDhcpFilteringPortTrustedMode=agentDhcpFilteringPortTrustedMode, agentSwitchStaticMacFilteringEntry=agentSwitchStaticMacFilteringEntry, agentStpMstTimeSinceTopologyChange=agentStpMstTimeSinceTopologyChange, agentSwitchMFDBType=agentSwitchMFDBType, agentPortPhysicalStatus=agentPortPhysicalStatus, agentStpPortStatsRstpBpduTx=agentStpPortStatsRstpBpduTx, vlanDefaultCfgFailureTrap=vlanDefaultCfgFailureTrap, agentNextActiveImage=agentNextActiveImage, agentPortMirrorAdminMode=agentPortMirrorAdminMode, agentStpPortState=agentStpPortState, agentStpCstBridgeHelloTime=agentStpCstBridgeHelloTime, agentStpPortStatsStpBpduRx=agentStpPortStatsStpBpduRx, agentSupportedMibName=agentSupportedMibName, agentSwitchMFDBTable=agentSwitchMFDBTable, agentUserEncryptionType=agentUserEncryptionType, agentPortMirrorSourcePortMask=agentPortMirrorSourcePortMask, agentStpCstExtPortPathCost=agentStpCstExtPortPathCost, agentSwitchMFDBVlanId=agentSwitchMFDBVlanId, agentSwitchSnoopingAdminMode=agentSwitchSnoopingAdminMode, agentAuthenticationListMethod2=agentAuthenticationListMethod2, userLockoutTrap=userLockoutTrap, agentImage2=agentImage2, agentStpCstPortOperPointToPoint=agentStpCstPortOperPointToPoint, agentStpSwitchConfigGroup=agentStpSwitchConfigGroup, agentStpCstPortBpduGuardEffect=agentStpCstPortBpduGuardEffect, agentHTTPSoftTimeout=agentHTTPSoftTimeout, stpInstanceTopologyChangeTrap=stpInstanceTopologyChangeTrap, agentLagConfigStaticCapability=agentLagConfigStaticCapability, agentTransferDownloadPassword=agentTransferDownloadPassword, agentLagConfigGroup=agentLagConfigGroup, agentSnmpTrapReceiverIPAddress=agentSnmpTrapReceiverIPAddress, agentNetworkConfigGroup=agentNetworkConfigGroup, agentTransferUploadDataType=agentTransferUploadDataType, agentPortBroadcastControlMode=agentPortBroadcastControlMode, agentStpCstDesignatedCost=agentStpCstDesignatedCost, agentStpPortUpTime=agentStpPortUpTime, agentSerialStopBits=agentSerialStopBits, agentSwitchSnoopingQuerierVersion=agentSwitchSnoopingQuerierVersion, agentStpCstRegionalRootPathCost=agentStpCstRegionalRootPathCost, agentSupportedMibTable=agentSupportedMibTable, agentServicePortIpv6AddrTable=agentServicePortIpv6AddrTable, multipleUsersTrap=multipleUsersTrap, agentSwitchAddressAgingTimeoutEntry=agentSwitchAddressAgingTimeoutEntry, Ipv6Address=Ipv6Address, agentSerialParityType=agentSerialParityType, agentInventoryPartNumber=agentInventoryPartNumber, agentSwitchSnoopingGroup=agentSwitchSnoopingGroup, agentLagSummaryLagIndex=agentLagSummaryLagIndex, agentServicePortIpv6AddrStatus=agentServicePortIpv6AddrStatus, agentLagSummaryAdminMode=agentLagSummaryAdminMode, agentSpanningTreeConfigGroup=agentSpanningTreeConfigGroup, agentAuthenticationListMethod1=agentAuthenticationListMethod1, agentCableTesterGroup=agentCableTesterGroup, agentStpMstDesignatedBridgeId=agentStpMstDesignatedBridgeId, agentServicePortBurnedInMacAddress=agentServicePortBurnedInMacAddress, agentInventoryMachineModel=agentInventoryMachineModel, agentUserPortSecurity=agentUserPortSecurity, agentNetworkSubnetMask=agentNetworkSubnetMask, agentSwitchSnoopingQuerierAdminMode=agentSwitchSnoopingQuerierAdminMode, agentLagSummaryName=agentLagSummaryName, agentPortUnicastControlMode=agentPortUnicastControlMode, agentAuthenticationListMethod3=agentAuthenticationListMethod3, agentStpCstBridgeHoldTime=agentStpCstBridgeHoldTime, agentPortClearStats=agentPortClearStats, agentSwitchSnoopingIntfGroup=agentSwitchSnoopingIntfGroup, agentNetworkLocalAdminMacAddress=agentNetworkLocalAdminMacAddress, agentSupportedMibDescription=agentSupportedMibDescription, agentUserConfigEntry=agentUserConfigEntry, agentInfoGroup=agentInfoGroup, agentSpanningTreeMode=agentSpanningTreeMode, agentStpCstTopologyChangeCount=agentStpCstTopologyChangeCount, agentNetworkIPAddress=agentNetworkIPAddress, agentSwitchSnoopingMulticastControlFramesProcessed=agentSwitchSnoopingMulticastControlFramesProcessed, agentSwitchBroadcastControlMode=agentSwitchBroadcastControlMode, agentHTTPConfigGroup=agentHTTPConfigGroup, agentTrapLogTotal=agentTrapLogTotal, agentClearConfig=agentClearConfig, agentSwitchMulticastControlThreshold=agentSwitchMulticastControlThreshold, agentSwitchSnoopingVlanMRPExpirationTime=agentSwitchSnoopingVlanMRPExpirationTime, agentPortAutoNegAdminStatus=agentPortAutoNegAdminStatus, agentSwitchSnoopingProtocol=agentSwitchSnoopingProtocol, agentSwitchSnoopingQuerierCfgEntry=agentSwitchSnoopingQuerierCfgEntry, agentSwitchSnoopingQuerierElectionParticipateMode=agentSwitchSnoopingQuerierElectionParticipateMode, agentInventorySerialNumber=agentInventorySerialNumber, agentTransferUploadPath=agentTransferUploadPath, agentNetworkIpv6Gateway=agentNetworkIpv6Gateway, agentLagSummaryDeletePort=agentLagSummaryDeletePort, agentPortMirrorSessionNum=agentPortMirrorSessionNum, agentSnmpTrapReceiverConfigEntry=agentSnmpTrapReceiverConfigEntry, agentSwitchStaticMacFilteringVlanId=agentSwitchStaticMacFilteringVlanId, agentStpBpduFilterDefault=agentStpBpduFilterDefault, agentStpCstPortEdge=agentStpCstPortEdge, agentStpMstVlanTable=agentStpMstVlanTable, agentInventoryNetworkProcessingDevice=agentInventoryNetworkProcessingDevice, agentPortBroadcastControlThreshold=agentPortBroadcastControlThreshold, agentSnmpAuthenticationTrapFlag=agentSnmpAuthenticationTrapFlag, agentStpCstMaxAge=agentStpCstMaxAge, agentAuthenticationListCreate=agentAuthenticationListCreate, agentClassOfServicePortClass=agentClassOfServicePortClass, agentServicePortConfigGroup=agentServicePortConfigGroup, agentSwitchSnoopingQuerierVlanAdminMode=agentSwitchSnoopingQuerierVlanAdminMode, agentSwitchProtectedPortGroupName=agentSwitchProtectedPortGroupName, agentPortSTPMode=agentPortSTPMode, agentSwitchSnoopingIntfMRPExpirationTime=agentSwitchSnoopingIntfMRPExpirationTime, agentTelnetConfigGroup=agentTelnetConfigGroup, agentSnmpCommunityConfigEntry=agentSnmpCommunityConfigEntry, agentPortConfigEntry=agentPortConfigEntry, agentAuthenticationGroup=agentAuthenticationGroup, agentSwitchSnoopingIntfIndex=agentSwitchSnoopingIntfIndex, agentPasswordManagementMinLength=agentPasswordManagementMinLength, agentUserAuthenticationConfigTable=agentUserAuthenticationConfigTable, agentPortMaxFrameSize=agentPortMaxFrameSize, agentImageConfigGroup=agentImageConfigGroup, agentLagDetailedConfigEntry=agentLagDetailedConfigEntry, agentUserName=agentUserName, agentSwitchMFDBForwardingPortMask=agentSwitchMFDBForwardingPortMask, agentSerialHWFlowControlMode=agentSerialHWFlowControlMode, agentStpCstTimeSinceTopologyChange=agentStpCstTimeSinceTopologyChange, agentConfigGroup=agentConfigGroup, agentLoginSessionTable=agentLoginSessionTable, agentMirroredPortIfIndex=agentMirroredPortIfIndex, agentStpCstPortBpduFlood=agentStpCstPortBpduFlood, agentStpMstEntry=agentStpMstEntry, agentCableTesterMaximumCableLength=agentCableTesterMaximumCableLength, agentNetworkIpv6AddrTable=agentNetworkIpv6AddrTable, agentSwitchSnoopingQuerierLastQuerierAddress=agentSwitchSnoopingQuerierLastQuerierAddress, agentPortPhysicalMode=agentPortPhysicalMode, agentStpPortStatsMstpBpduRx=agentStpPortStatsMstpBpduRx, agentSupportedMibIndex=agentSupportedMibIndex, agentSwitchSnoopingVlanEntry=agentSwitchSnoopingVlanEntry, agentTransferDownloadUsername=agentTransferDownloadUsername, agentSnmpCommunityName=agentSnmpCommunityName, agentLoginSessionIndex=agentLoginSessionIndex, agentStpMstPortForwardingState=agentStpMstPortForwardingState, agentClassOfServicePortEntry=agentClassOfServicePortEntry, agentClearVlan=agentClearVlan, agentSwitchVlanStaticMrouterEntry=agentSwitchVlanStaticMrouterEntry, agentSwitchSnoopingQuerierVlanAddress=agentSwitchSnoopingQuerierVlanAddress, agentInventoryMachineType=agentInventoryMachineType, agentClearTrapLog=agentClearTrapLog, broadcastStormEndTrap=broadcastStormEndTrap, agentStpCstPortPathCost=agentStpCstPortPathCost, agentSwitchSnoopingIntfGroupMembershipInterval=agentSwitchSnoopingIntfGroupMembershipInterval, agentSnmpCommunityAccessMode=agentSnmpCommunityAccessMode, agentSnmpCommunityIndex=agentSnmpCommunityIndex, agentTransferUploadImagename=agentTransferUploadImagename, agentSnmpSpanningTreeTrapFlag=agentSnmpSpanningTreeTrapFlag, agentSwitchSnoopingQuerierQueryInterval=agentSwitchSnoopingQuerierQueryInterval, agentSerialGroup=agentSerialGroup, agentStpMstTopologyChangeCount=agentStpMstTopologyChangeCount, agentTelnetMaxSessions=agentTelnetMaxSessions, agentStpCstRootFwdDelay=agentStpCstRootFwdDelay, agentPortDot3FlowControlMode=agentPortDot3FlowControlMode, agentCLIConfigGroup=agentCLIConfigGroup, agentInventoryManufacturer=agentInventoryManufacturer, agentSwitchSnoopingCfgEntry=agentSwitchSnoopingCfgEntry, agentStpCstPortForwardingState=agentStpCstPortForwardingState, agentSwitchVlanStaticMrouterAdminMode=agentSwitchVlanStaticMrouterAdminMode, agentStpCstPortTable=agentStpCstPortTable, agentTransferDownloadFilename=agentTransferDownloadFilename, agentUserConfigCreate=agentUserConfigCreate, agentSwitchProtectedPortPortList=agentSwitchProtectedPortPortList, agentPortMirrorDestinationPort=agentPortMirrorDestinationPort, agentNetworkMgmtVlan=agentNetworkMgmtVlan, agentPortMirrorTypeType=agentPortMirrorTypeType, agentPortIanaType=agentPortIanaType, agentUserAuthenticationType=agentUserAuthenticationType, agentLagConfigCreate=agentLagConfigCreate, agentStpCstPortPriority=agentStpCstPortPriority, vlanRequestFailureTrap=vlanRequestFailureTrap, agentStpMstPortPriority=agentStpMstPortPriority, agentHTTPMaxSessions=agentHTTPMaxSessions, agentServicePortIpv6AdminMode=agentServicePortIpv6AdminMode, agentSwitchAddressAgingTimeoutTable=agentSwitchAddressAgingTimeoutTable, agentTransferUploadPassword=agentTransferUploadPassword, agentSwitchSnoopingIntfMulticastRouterMode=agentSwitchSnoopingIntfMulticastRouterMode, agentPortDefaultType=agentPortDefaultType, agentUserEncryptionPassword=agentUserEncryptionPassword, agentSwitchStaticMacFilteringSourcePortMask=agentSwitchStaticMacFilteringSourcePortMask, agentClearPortStats=agentClearPortStats, agentSwitchStormControlGroup=agentSwitchStormControlGroup, agentDhcpFilteringGroup=agentDhcpFilteringGroup, Ipv6IfIndex=Ipv6IfIndex, agentSwitchSnoopingVlanTable=agentSwitchSnoopingVlanTable, agentSwitchSnoopingQuerierLastQuerierVersion=agentSwitchSnoopingQuerierLastQuerierVersion, agentStpConfigDigestKey=agentStpConfigDigestKey, agentStpCstPortTCNGuard=agentStpCstPortTCNGuard, agentStpMstBridgePriority=agentStpMstBridgePriority, agentServicePortIpv6AddrEuiFlag=agentServicePortIpv6AddrEuiFlag, agentStpCstBridgeHoldCount=agentStpCstBridgeHoldCount, agentImage1=agentImage1, agentStpMstTable=agentStpMstTable, Ipv6IfIndexOrZero=Ipv6IfIndexOrZero, agentPortMulticastControlThreshold=agentPortMulticastControlThreshold, agentUserAuthenticationConfigEntry=agentUserAuthenticationConfigEntry, agentTrapLogEntry=agentTrapLogEntry, agentSaveConfig=agentSaveConfig, agentLoginSessionEntry=agentLoginSessionEntry, agentStpCstPortTopologyChangeAck=agentStpCstPortTopologyChangeAck, agentHTTPWebMode=agentHTTPWebMode, agentLoginSessionInetAddress=agentLoginSessionInetAddress, agentPortConfigTable=agentPortConfigTable, Ipv6AddressPrefix=Ipv6AddressPrefix, agentStpMstPortTable=agentStpMstPortTable, agentTransferDownloadServerAddressType=agentTransferDownloadServerAddressType, agentPortSTPState=agentPortSTPState, agentPortType=agentPortType, agentStpMstDesignatedPortId=agentStpMstDesignatedPortId, PortList=PortList, agentSwitchMFDBProtocolType=agentSwitchMFDBProtocolType, agentSnmpMultipleUsersTrapFlag=agentSnmpMultipleUsersTrapFlag, agentSwitchStaticMacFilteringStatus=agentSwitchStaticMacFilteringStatus, agentSwitchSnoopingPortMask=agentSwitchSnoopingPortMask, agentStpMstPortPathCost=agentStpMstPortPathCost, agentPortMirrorTable=agentPortMirrorTable, agentTransferDownloadGroup=agentTransferDownloadGroup, agentInventorySysDescription=agentInventorySysDescription, agentTransferUploadServerAddressType=agentTransferUploadServerAddressType, agentStpMstTopologyChangeParm=agentStpMstTopologyChangeParm, agentLagDetailedLagIndex=agentLagDetailedLagIndex, agentStpCstPortId=agentStpCstPortId, vlanDeleteLastTrap=vlanDeleteLastTrap, agentAuthenticationListName=agentAuthenticationListName, agentSwitchSnoopingQuerierCfgTable=agentSwitchSnoopingQuerierCfgTable, agentUserPasswordExpireTime=agentUserPasswordExpireTime, agentPasswordManagementHistory=agentPasswordManagementHistory, agentStpPortEntry=agentStpPortEntry, agentClassOfServicePortTable=agentClassOfServicePortTable, agentCableTesterCableFailureLocation=agentCableTesterCableFailureLocation, agentSwitchSnoopingQuerierVlanEntry=agentSwitchSnoopingQuerierVlanEntry, agentSwitchSnoopingIntfEntry=agentSwitchSnoopingIntfEntry, agentTrapLogTable=agentTrapLogTable, PYSNMP_MODULE_ID=agentSwitching, agentLagSummaryAddPort=agentLagSummaryAddPort, agentSwitchSnoopingCfgTable=agentSwitchSnoopingCfgTable, agentServicePortIPAddress=agentServicePortIPAddress, agentUserPortConfigEntry=agentUserPortConfigEntry, agentLagSummaryConfigEntry=agentLagSummaryConfigEntry, agentInventoryOperatingSystem=agentInventoryOperatingSystem, agentNetworkJavaMode=agentNetworkJavaMode, agentSnmpCommunityIPAddress=agentSnmpCommunityIPAddress)
mibBuilder.exportSymbols("NETGEAR-SMART-SWITCHING-MIB", agentPortMirrorTypeEntry=agentPortMirrorTypeEntry, agentLagSummaryLinkTrap=agentLagSummaryLinkTrap, agentNetworkBurnedInMacAddress=agentNetworkBurnedInMacAddress, agentLagDetailedConfigTable=agentLagDetailedConfigTable, agentServicePortSubnetMask=agentServicePortSubnetMask, agentServicePortIpv6Gateway=agentServicePortIpv6Gateway, agentSwitchSnoopingVlanGroup=agentSwitchSnoopingVlanGroup, agentPortMirrorTypeTable=agentPortMirrorTypeTable, agentActiveImage=agentActiveImage, agentSwitchSnoopingIntfVlanIDs=agentSwitchSnoopingIntfVlanIDs, agentPasswordManagementAging=agentPasswordManagementAging, agentInventoryAdditionalPackages=agentInventoryAdditionalPackages, agentStpPortStatsStpBpduTx=agentStpPortStatsStpBpduTx, agentAuthenticationListMethod4=agentAuthenticationListMethod4, agentSwitchSnoopingQuerierOperMaxResponseTime=agentSwitchSnoopingQuerierOperMaxResponseTime, agentSwitchSnoopingQuerierGroup=agentSwitchSnoopingQuerierGroup, agentSwitchMFDBMaxTableEntries=agentSwitchMFDBMaxTableEntries, agentSwitchMFDBEntry=agentSwitchMFDBEntry, agentTransferConfigGroup=agentTransferConfigGroup, agentDot3adAggPortEntry=agentDot3adAggPortEntry, agentAuthenticationListStatus=agentAuthenticationListStatus, agentClearSwitchStats=agentClearSwitchStats, agentLagSummaryFlushTimer=agentLagSummaryFlushTimer, failedUserLoginTrap=failedUserLoginTrap, agentSupportedMibEntry=agentSupportedMibEntry, agentAuthenticationListIndex=agentAuthenticationListIndex, agentStpPortTable=agentStpPortTable, agentUserAccessMode=agentUserAccessMode, agentSwitchSnoopingQuerierAddress=agentSwitchSnoopingQuerierAddress, stpInstanceNewRootTrap=stpInstanceNewRootTrap, agentSnmpTrapReceiverConfigTable=agentSnmpTrapReceiverConfigTable, agentTransferUploadServerIP=agentTransferUploadServerIP, agentClearLags=agentClearLags, agentStpCstRegionalRootId=agentStpCstRegionalRootId, agentSwitchSnoopingQuerierExpiryInterval=agentSwitchSnoopingQuerierExpiryInterval, agentDot3adAggPortTable=agentDot3adAggPortTable, agentSwitchConfigGroup=agentSwitchConfigGroup, agentStpMstBridgeIdentifier=agentStpMstBridgeIdentifier, agentTransferUploadFilename=agentTransferUploadFilename, agentSwitchProtectedPortGroupId=agentSwitchProtectedPortGroupId, agentCableTesterStatus=agentCableTesterStatus, agentCableTesterCableStatus=agentCableTesterCableStatus, agentSwitchMFDBSummaryTable=agentSwitchMFDBSummaryTable, agentStpMstVlanEntry=agentStpMstVlanEntry, agentStpCstBridgeFwdDelay=agentStpCstBridgeFwdDelay, agentSnmpCommunityStatus=agentSnmpCommunityStatus, agentUserConfigGroup=agentUserConfigGroup, agentTelnetLoginTimeout=agentTelnetLoginTimeout, agentNetworkIpv6AddrPrefix=agentNetworkIpv6AddrPrefix, agentSwitchSnoopingIntfAdminMode=agentSwitchSnoopingIntfAdminMode, agentSwitchMFDBGroup=agentSwitchMFDBGroup, agentTransferDownloadStart=agentTransferDownloadStart, agentSwitchProtectedPortConfigGroup=agentSwitchProtectedPortConfigGroup, agentStpMstRowStatus=agentStpMstRowStatus, agentClearLoginSessions=agentClearLoginSessions, agentNetworkIpv6AddrPrefixLength=agentNetworkIpv6AddrPrefixLength, agentSwitchStaticMacFilteringDestPortMask=agentSwitchStaticMacFilteringDestPortMask, agentStpPortStatsRstpBpduRx=agentStpPortStatsRstpBpduRx, agentInventoryGroup=agentInventoryGroup, agentTrapLogIndex=agentTrapLogIndex, agentSwitchMFDBDescription=agentSwitchMFDBDescription, agentServicePortIpv6AddrPrefixLength=agentServicePortIpv6AddrPrefixLength, agentSwitchStaticMacFilteringTable=agentSwitchStaticMacFilteringTable, agentLagSummaryStatus=agentLagSummaryStatus, agentSwitchMFDBMacAddress=agentSwitchMFDBMacAddress, agentSwitchMFDBSummaryVlanId=agentSwitchMFDBSummaryVlanId, agentTransferDownloadDataType=agentTransferDownloadDataType, agentStpCstBridgeMaxAge=agentStpCstBridgeMaxAge, agentInventoryFRUNumber=agentInventoryFRUNumber, agentDot3adAggPort=agentDot3adAggPort, agentSwitchBroadcastControlThreshold=agentSwitchBroadcastControlThreshold, agentServicePortDefaultGateway=agentServicePortDefaultGateway, agentSnmpTrapReceiverVersion=agentSnmpTrapReceiverVersion, agentDhcpFilteringAdminMode=agentDhcpFilteringAdminMode, agentStpCstConfigGroup=agentStpCstConfigGroup, agentResetSystem=agentResetSystem, agentNetworkConfigProtocol=agentNetworkConfigProtocol, agentSwitchAddressAgingTimeout=agentSwitchAddressAgingTimeout, agentLagSummaryType=agentLagSummaryType, agentStpCstBridgePriority=agentStpCstBridgePriority, agentStpMstDesignatedRootId=agentStpMstDesignatedRootId, agentSwitchSnoopingQuerierVlanOperMode=agentSwitchSnoopingQuerierVlanOperMode, agentServicePortIpv6AddrPrefix=agentServicePortIpv6AddrPrefix, agentNetworkWebMode=agentNetworkWebMode, agentPasswordManagementConfigGroup=agentPasswordManagementConfigGroup, agentSwitchSnoopingIntfFastLeaveAdminMode=agentSwitchSnoopingIntfFastLeaveAdminMode, agentLagDetailedIfIndex=agentLagDetailedIfIndex, agentStpMstRootPathCost=agentStpMstRootPathCost, agentSnmpConfigGroup=agentSnmpConfigGroup, agentPortMirrorEntry=agentPortMirrorEntry, agentServicePortIpv6AddrEntry=agentServicePortIpv6AddrEntry, agentUserPassword=agentUserPassword, agentTransferDownloadServerAddress=agentTransferDownloadServerAddress, agentStpCstHelloTime=agentStpCstHelloTime, agentInventorySoftwareVersion=agentInventorySoftwareVersion, agentSnmpLinkUpDownTrapFlag=agentSnmpLinkUpDownTrapFlag, agentSwitchingTraps=agentSwitchingTraps, agentSaveConfigStatus=agentSaveConfigStatus, agentTrapLogGroup=agentTrapLogGroup, agentTransferUploadServerAddress=agentTransferUploadServerAddress, agentStpMstRootPortId=agentStpMstRootPortId, agentTransferUploadGroup=agentTransferUploadGroup, agentSerialBaudrate=agentSerialBaudrate, vlanRestoreFailureTrap=vlanRestoreFailureTrap, agentSnmpTrapReceiverIpv6Address=agentSnmpTrapReceiverIpv6Address, agentSwitchMFDBSummaryForwardingPortMask=agentSwitchMFDBSummaryForwardingPortMask, agentLoginSessionConnectionType=agentLoginSessionConnectionType, agentTrapLogTrap=agentTrapLogTrap, agentPasswordManagementLockAttempts=agentPasswordManagementLockAttempts, agentLagSummaryStpMode=agentLagSummaryStpMode, agentSwitchProtectedPortEntry=agentSwitchProtectedPortEntry, agentTransferDownloadMode=agentTransferDownloadMode, agentSwitchSnoopingVlanAdminMode=agentSwitchSnoopingVlanAdminMode, agentPortIfIndex=agentPortIfIndex, agentUserAuthenticationList=agentUserAuthenticationList, agentClearPasswords=agentClearPasswords, agentTransferDownloadStatus=agentTransferDownloadStatus, agentLoginSessionIdleTime=agentLoginSessionIdleTime, agentNetworkIpv6AddrStatus=agentNetworkIpv6AddrStatus, agentLagSummaryStaticCapability=agentLagSummaryStaticCapability, agentCableTesterIfIndex=agentCableTesterIfIndex, agentSnmpTrapReceiverCommunityName=agentSnmpTrapReceiverCommunityName, agentStpConfigRevision=agentStpConfigRevision, agentTransferUploadStart=agentTransferUploadStart, agentNetworkDefaultGateway=agentNetworkDefaultGateway, agentSnmpTrapReceiverStatus=agentSnmpTrapReceiverStatus, agentStpCstPortOperEdge=agentStpCstPortOperEdge, agentLoginSessionStatus=agentLoginSessionStatus, agentSwitchMFDBMostEntriesUsed=agentSwitchMFDBMostEntriesUsed, agentPortDot1dBasePort=agentPortDot1dBasePort, agentLoginSessionUserName=agentLoginSessionUserName, agentSnmpCommunityCreate=agentSnmpCommunityCreate, agentStpConfigName=agentStpConfigName, agentSnmpCommunityIPMask=agentSnmpCommunityIPMask, agentTelnetAllowNewMode=agentTelnetAllowNewMode, agentPortAdminMode=agentPortAdminMode, agentNetworkIpv6AddrEuiFlag=agentNetworkIpv6AddrEuiFlag, agentInventoryMaintenanceLevel=agentInventoryMaintenanceLevel, agentPortMulticastControlMode=agentPortMulticastControlMode, agentStpCstPortRootGuard=agentStpCstPortRootGuard, agentSwitchVlanStaticMrouterGroup=agentSwitchVlanStaticMrouterGroup, agentUserConfigTable=agentUserConfigTable, macAddrAgeoutTrap=macAddrAgeoutTrap, agentStpConfigFormatSelector=agentStpConfigFormatSelector, agentAuthenticationListEntry=agentAuthenticationListEntry, agentSwitchSnoopingVlanMaxResponseTime=agentSwitchSnoopingVlanMaxResponseTime, agentUserLockoutStatus=agentUserLockoutStatus, agentUserIndex=agentUserIndex, agentDot3adAggPortLACPMode=agentDot3adAggPortLACPMode, agentSerialTimeout=agentSerialTimeout, agentLoginSessionInetAddressType=agentLoginSessionInetAddressType, agentUserConfigDefaultAuthenticationList=agentUserConfigDefaultAuthenticationList, powerSupplyStatusChangeTrap=powerSupplyStatusChangeTrap, agentLagDetailedPortSpeed=agentLagDetailedPortSpeed, agentSnmpTrapFlagsConfigGroup=agentSnmpTrapFlagsConfigGroup, agentSwitchMFDBSummaryMacAddress=agentSwitchMFDBSummaryMacAddress, agentHTTPJavaMode=agentHTTPJavaMode, VlanList=VlanList, agentNetworkIpv6AddrEntry=agentNetworkIpv6AddrEntry, agentTransferDownloadServerIP=agentTransferDownloadServerIP, agentSwitchDot3FlowControlMode=agentSwitchDot3FlowControlMode, agentSwitchMFDBCurrentEntries=agentSwitchMFDBCurrentEntries, linkFailureTrap=linkFailureTrap, agentProbePortIfIndex=agentProbePortIfIndex, agentUserPortConfigTable=agentUserPortConfigTable, agentTransferUploadStatus=agentTransferUploadStatus, agentClassOfServiceGroup=agentClassOfServiceGroup, agentStpMstPortEntry=agentStpMstPortEntry, agentSwitchSnoopingIntfTable=agentSwitchSnoopingIntfTable, agentSwitching=agentSwitching, agentPortMirrorTypeSourcePort=agentPortMirrorTypeSourcePort, agentSwitchProtectedPortTable=agentSwitchProtectedPortTable, agentSnmpTrapReceiverIndex=agentSnmpTrapReceiverIndex, agentSerialCharacterSize=agentSerialCharacterSize, agentStpPortHelloTime=agentStpPortHelloTime, agentTransferUploadUsername=agentTransferUploadUsername, agentAuthenticationListTable=agentAuthenticationListTable, agentCableTesterMinimumCableLength=agentCableTesterMinimumCableLength, agentStpCstPortEntry=agentStpCstPortEntry, agentNetworkIpv6AdminMode=agentNetworkIpv6AdminMode, agentStpPortStatsMstpBpduTx=agentStpPortStatsMstpBpduTx, agentSwitchUnicastControlThreshold=agentSwitchUnicastControlThreshold, agentPortMirroringGroup=agentPortMirroringGroup, Ipv6AddressIfIdentifier=Ipv6AddressIfIdentifier, agentStpMstId=agentStpMstId, agentDhcpFilteringPortConfigEntry=agentDhcpFilteringPortConfigEntry, agentSwitchSnoopingIntfMaxResponseTime=agentSwitchSnoopingIntfMaxResponseTime, agentNetworkMacAddressType=agentNetworkMacAddressType, agentPortMaxFrameSizeLimit=agentPortMaxFrameSizeLimit, agentLoginSessionIPAddress=agentLoginSessionIPAddress, agentLoginSessionSessionTime=agentLoginSessionSessionTime, agentStpCstBridgeMaxHops=agentStpCstBridgeMaxHops, agentStpCstDesignatedBridgeId=agentStpCstDesignatedBridgeId, agentLagSummaryConfigTable=agentLagSummaryConfigTable, agentSwitchUnicastControlMode=agentSwitchUnicastControlMode, agentStpCstPortAutoEdge=agentStpCstPortAutoEdge, macAddrLearnTrap=macAddrLearnTrap, agentSwitchSnoopingQuerierOperVersion=agentSwitchSnoopingQuerierOperVersion, agentSnmpCommunityConfigTable=agentSnmpCommunityConfigTable, agentPortUnicastControlThreshold=agentPortUnicastControlThreshold, agentTrapLogTotalSinceLastViewed=agentTrapLogTotalSinceLastViewed, agentStpMstVlanRowStatus=agentStpMstVlanRowStatus, agentStpMstDesignatedCost=agentStpMstDesignatedCost, broadcastStormStartTrap=broadcastStormStartTrap, agentStpPortMigrationCheck=agentStpPortMigrationCheck, agentTransferDownloadPath=agentTransferDownloadPath, agentDhcpFilteringPortConfigTable=agentDhcpFilteringPortConfigTable, agentStpMstPortId=agentStpMstPortId, agentStpCstPortBpduFilter=agentStpCstPortBpduFilter, agentSwitchStaticMacFilteringAddress=agentSwitchStaticMacFilteringAddress, agentTransferUploadMode=agentTransferUploadMode, agentSystemGroup=agentSystemGroup, agentHTTPHardTimeout=agentHTTPHardTimeout, agentSwitchSnoopingQuerierVlanTable=agentSwitchSnoopingQuerierVlanTable, agentSnmpTrapReceiverCreate=agentSnmpTrapReceiverCreate, agentLagDetailedPortStatus=agentLagDetailedPortStatus, agentTrapLogSystemTime=agentTrapLogSystemTime, agentSwitchMulticastControlMode=agentSwitchMulticastControlMode, agentSnmpBroadcastStormTrapFlag=agentSnmpBroadcastStormTrapFlag, AgentPortMask=AgentPortMask, agentTransferDownloadImagename=agentTransferDownloadImagename, agentSwitchSnoopingVlanFastLeaveAdminMode=agentSwitchSnoopingVlanFastLeaveAdminMode, agentServicePortConfigProtocol=agentServicePortConfigProtocol)
