#
# PySNMP MIB module DeltaUPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/delta/DeltaUPS-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 13:41:52 2024
# On host fv-az1530-906 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Integer32, Counter64, NotificationType, Bits, enterprises, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, Gauge32, ModuleIdentity, TimeTicks, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "Counter64", "NotificationType", "Bits", "enterprises", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "Gauge32", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
delta = MibIdentifier((1, 3, 6, 1, 4, 1, 2254))
ups = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2))
upsv4 = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2, 4))
dupsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1))
dupsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2, 4, 2))
dupsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2, 4, 3))
dupsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2, 4, 4))
dupsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5))
dupsBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2, 4, 6))
dupsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2, 4, 7))
dupsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2, 4, 8))
dupsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9))
dupsEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10))
dupsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20))
dupsIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsIdentManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: dupsIdentManufacturer.setDescription('The name of the UPS manufacturer.')
dupsIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsIdentModel.setStatus('mandatory')
if mibBuilder.loadTexts: dupsIdentModel.setDescription('The UPS Model designation.')
dupsIdentUPSSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsIdentUPSSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: dupsIdentUPSSoftwareVersion.setDescription('The UPS firmware/software version(s). This variable\n               may or may not has the same value as\n               upsIdentAgentSoftwareVersion in some implementations.')
dupsIdentAgentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsIdentAgentSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: dupsIdentAgentSoftwareVersion.setDescription('The UPS agent software version. This variable may or\n               may not has the same value as\n               upsIdentUPSSoftwareVersion in some implementations.')
dupsIdentName = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsIdentName.setStatus('mandatory')
if mibBuilder.loadTexts: dupsIdentName.setDescription('A string identifying the UPS. This object should be\n               set by the administrator.')
dupsAttachedDevices = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsAttachedDevices.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAttachedDevices.setDescription('A string identifying the devices attached to the\n               output(s) of the UPS. This object should be set by\n               the administrator.')
dupsRatingOutputVA = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsRatingOutputVA.setStatus('mandatory')
if mibBuilder.loadTexts: dupsRatingOutputVA.setDescription('The magnitude of the nominal output VA rating.')
dupsRatingOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsRatingOutputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: dupsRatingOutputVoltage.setDescription('The magnitude of the nominal output voltage rating.')
dupsRatingOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsRatingOutputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: dupsRatingOutputFrequency.setDescription('The magnitude of the nominal output frequency rating.')
dupsRatingInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsRatingInputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: dupsRatingInputVoltage.setDescription('The magnitude of the nominal input voltage rating.')
dupsRatingInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsRatingInputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: dupsRatingInputFrequency.setDescription('The magnitude of the nominal input frequency rating.')
dupsRatingBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsRatingBatteryVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: dupsRatingBatteryVoltage.setDescription('The magnitude of the nominal battery voltage rating.')
dupsLowTransferVoltUpBound = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 13), Integer32()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsLowTransferVoltUpBound.setStatus('mandatory')
if mibBuilder.loadTexts: dupsLowTransferVoltUpBound.setDescription('The minimum input line voltage upper bound allowed\n               before the UPS system transfers to battery backup.')
dupsLowTransferVoltLowBound = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 14), Integer32()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsLowTransferVoltLowBound.setStatus('mandatory')
if mibBuilder.loadTexts: dupsLowTransferVoltLowBound.setDescription('The minimum input line voltage lower bound allowed\n               before the UPS system transfers to battery backup.')
dupsHighTransferVoltUpBound = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 15), Integer32()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsHighTransferVoltUpBound.setStatus('mandatory')
if mibBuilder.loadTexts: dupsHighTransferVoltUpBound.setDescription('The maximum input line voltage upper bound allowed\n               before the UPS system transfers to battery backup.')
dupsHighTransferVoltLowBound = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 16), Integer32()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsHighTransferVoltLowBound.setStatus('mandatory')
if mibBuilder.loadTexts: dupsHighTransferVoltLowBound.setDescription('The maximum input line voltage lower bound allowed\n               before the UPS system transfers to battery backup.')
dupsLowBattTime = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsLowBattTime.setStatus('mandatory')
if mibBuilder.loadTexts: dupsLowBattTime.setDescription('Minutes, time from low battery to low battery shutdown.')
dupsOutletRelays = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutletRelays.setStatus('mandatory')
if mibBuilder.loadTexts: dupsOutletRelays.setDescription('Number of outlet relay. If it is 0, the function is not\n               available for the UPS.')
dupsType = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("on-line", 1), ("off-line", 2), ("line-interactive", 3), ("3phase", 4), ("splite-phase", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsType.setStatus('mandatory')
if mibBuilder.loadTexts: dupsType.setDescription('Indicate the UPS type.')
dupsShutdownType = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("output", 1), ("system", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsShutdownType.setStatus('mandatory')
if mibBuilder.loadTexts: dupsShutdownType.setDescription('This object determines the nature of the action to be\n               taken at the time when the countdown of the\n               upsShutdownAfterDelay and upsRebootWithDuration\n               objects reaches zero.\n               Setting this object to output(1) indicates that\n               shutdown requests should cause only the output of the\n               UPS to turn off.  Setting this object to system(2)\n               indicates that shutdown requests will cause the entire\n               UPS system to turn off.')
dupsAutoReboot = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsAutoReboot.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAutoReboot.setDescription('In backup mode, the UPS may shutdown normally by SDA command, \n               dry-contact remote shutdown signal or low battery shutdown. \n               This command is used to determine the unit should restart or \n               not next time when the power restores')
dupsShutdownAction = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsShutdownAction.setStatus('mandatory')
if mibBuilder.loadTexts: dupsShutdownAction.setDescription('If the value is greater than 0 the UPS performs\n               shutdown action that defined by ShutdownType after\n               the seconds. 0, aborted.')
dupsRestartAction = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsRestartAction.setStatus('mandatory')
if mibBuilder.loadTexts: dupsRestartAction.setDescription('UPS will restart after the indicated number of minutes.\n                -1, aborted.')
dupsSetOutletRelay = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsSetOutletRelay.setStatus('mandatory')
if mibBuilder.loadTexts: dupsSetOutletRelay.setDescription('Indicate which outlet relay, from 1,2,3... .')
dupsRelayOffDelay = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsRelayOffDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dupsRelayOffDelay.setDescription('Turn the relay off after the seconds. The relay was indicated\n                by SetOutletRelay.')
dupsRelayOnDelay = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsRelayOnDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dupsRelayOnDelay.setDescription('Turn the relay on after the seconds. The relay was indicated\n                by SetOutletRelay.')
dupsConfigBuzzerAlarm = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm", 1), ("silence", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsConfigBuzzerAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: dupsConfigBuzzerAlarm.setDescription('UPS will keep silence but will alarm again when \n               next power event is occurred')
dupsConfigBuzzerState = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsConfigBuzzerState.setStatus('mandatory')
if mibBuilder.loadTexts: dupsConfigBuzzerState.setDescription('If it is disabled then the UPS is always muted.')
dupsConfigSensitivity = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("reduced", 1), ("low", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsConfigSensitivity.setStatus('mandatory')
if mibBuilder.loadTexts: dupsConfigSensitivity.setDescription('The seneitivity of the UPS to utility line\n               abnormalities or noises.')
dupsConfigLowVoltageTransferPoint = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 3, 4), Integer32()).setUnits('Volt').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsConfigLowVoltageTransferPoint.setStatus('mandatory')
if mibBuilder.loadTexts: dupsConfigLowVoltageTransferPoint.setDescription('The minimum input line voltage allowed before the UPS\n               system transfers to battery backup.')
dupsConfigHighVoltageTransferPoint = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 3, 5), Integer32()).setUnits('Volt').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsConfigHighVoltageTransferPoint.setStatus('mandatory')
if mibBuilder.loadTexts: dupsConfigHighVoltageTransferPoint.setDescription('The maximum line voltage allowed before the UPS\n               system transfers to battery backup.')
dupsConfigShutdownOSDelay = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 3, 6), Integer32()).setUnits('Second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsConfigShutdownOSDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dupsConfigShutdownOSDelay.setDescription('The operating system shutdown delay time when the \n                input power fail. -1 will disable this option.')
dupsConfigUPSBootDelay = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 3, 7), Integer32()).setUnits('Second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsConfigUPSBootDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dupsConfigUPSBootDelay.setDescription('Delay the UPS startup after power restores. The power\n               quality may not stable when power restores, this \n               feature let the UPS wait a period of time to startup \n               the system.')
dupsConfigExternalBatteryPack = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsConfigExternalBatteryPack.setStatus('mandatory')
if mibBuilder.loadTexts: dupsConfigExternalBatteryPack.setDescription('Indicate the number of external battery pack.')
dupsInputNumLines = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsInputNumLines.setStatus('mandatory')
if mibBuilder.loadTexts: dupsInputNumLines.setDescription('The number of input lines utilized in this device.')
dupsInputFrequency1 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsInputFrequency1.setStatus('mandatory')
if mibBuilder.loadTexts: dupsInputFrequency1.setDescription('The current input line 1 frequency to the UPS\n                system in 1/10 Hz.')
dupsInputVoltage1 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsInputVoltage1.setStatus('mandatory')
if mibBuilder.loadTexts: dupsInputVoltage1.setDescription('The Input line 1 voltage of the UPS system in 1/10 V.')
dupsInputCurrent1 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsInputCurrent1.setStatus('mandatory')
if mibBuilder.loadTexts: dupsInputCurrent1.setDescription('The Input line 1 current to the UPS system in 1/10 A.')
dupsInputFrequency2 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsInputFrequency2.setStatus('mandatory')
if mibBuilder.loadTexts: dupsInputFrequency2.setDescription('The current input line 2 frequency to the UPS system\n                in 1/10 Hz.')
dupsInputVoltage2 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsInputVoltage2.setStatus('mandatory')
if mibBuilder.loadTexts: dupsInputVoltage2.setDescription('The Input line 2 voltage of the UPS system in 1/10 V.')
dupsInputCurrent2 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsInputCurrent2.setStatus('mandatory')
if mibBuilder.loadTexts: dupsInputCurrent2.setDescription('The Input line 2 current to the UPS system in 1/10 A.')
dupsInputFrequency3 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsInputFrequency3.setStatus('mandatory')
if mibBuilder.loadTexts: dupsInputFrequency3.setDescription('The current input line 3 frequency to the UPS system\n                in 1/10 Hz.')
dupsInputVoltage3 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsInputVoltage3.setStatus('mandatory')
if mibBuilder.loadTexts: dupsInputVoltage3.setDescription('The Input line 3 voltage of the UPS system in 1/10 V.')
dupsInputCurrent3 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsInputCurrent3.setStatus('mandatory')
if mibBuilder.loadTexts: dupsInputCurrent3.setDescription('The Input line 3 current to the UPS system in 1/10 A.')
dupsOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 0), ("battery", 1), ("bypass", 2), ("reducing", 3), ("boosting", 4), ("manualBypass", 5), ("other", 6), ("none", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputSource.setStatus('mandatory')
if mibBuilder.loadTexts: dupsOutputSource.setDescription('The present source of output power. The enumeration\n               none(7) indicates that there is no source of output\n               power (and therefore no output power), for example,\n               the system has opened the output breaker.')
dupsOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 2), Integer32()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: dupsOutputFrequency.setDescription('The present output frequency in 1/10 Hz.')
dupsOutputNumLines = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputNumLines.setStatus('mandatory')
if mibBuilder.loadTexts: dupsOutputNumLines.setDescription('The number of output lines utilized in this device.')
dupsOutputVoltage1 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputVoltage1.setStatus('mandatory')
if mibBuilder.loadTexts: dupsOutputVoltage1.setDescription('The Output line 1 voltage of the UPS system in 1/10 V.')
dupsOutputCurrent1 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputCurrent1.setStatus('mandatory')
if mibBuilder.loadTexts: dupsOutputCurrent1.setDescription('The Output line 1 current of the UPS system in 1/10 A.')
dupsOutputPower1 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputPower1.setStatus('mandatory')
if mibBuilder.loadTexts: dupsOutputPower1.setDescription('The Output line 1 real power of the UPS system in watts.')
dupsOutputLoad1 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputLoad1.setStatus('mandatory')
if mibBuilder.loadTexts: dupsOutputLoad1.setDescription('The current UPS output line 1 load expressed in percent\n\t\t of rated capacity.')
dupsOutputVoltage2 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputVoltage2.setStatus('mandatory')
if mibBuilder.loadTexts: dupsOutputVoltage2.setDescription('The Output line 2 voltage of the UPS system in 1/10 V.')
dupsOutputCurrent2 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputCurrent2.setStatus('mandatory')
if mibBuilder.loadTexts: dupsOutputCurrent2.setDescription('The Output line 2 current of the UPS system in 1/10 A.')
dupsOutputPower2 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputPower2.setStatus('mandatory')
if mibBuilder.loadTexts: dupsOutputPower2.setDescription('The Output line 2 real power of the UPS system in watts.')
dupsOutputLoad2 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputLoad2.setStatus('mandatory')
if mibBuilder.loadTexts: dupsOutputLoad2.setDescription('The current UPS output line 2 load expressed in percent\n\t\t of rated capacity.')
dupsOutputVoltage3 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputVoltage3.setStatus('mandatory')
if mibBuilder.loadTexts: dupsOutputVoltage3.setDescription('The Output line 3 voltage of the UPS system in 1/10 V.')
dupsOutputCurrent3 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputCurrent3.setStatus('mandatory')
if mibBuilder.loadTexts: dupsOutputCurrent3.setDescription('The Output line 3 current of the UPS system in 1/10 A.')
dupsOutputPower3 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputPower3.setStatus('mandatory')
if mibBuilder.loadTexts: dupsOutputPower3.setDescription('The Output line 3 real power of the UPS system in watts.')
dupsOutputLoad3 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputLoad3.setStatus('mandatory')
if mibBuilder.loadTexts: dupsOutputLoad3.setDescription('The current UPS output line 3 load expressed in percent\n\t\t of rated capacity.')
dupsBypassFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 6, 1), Integer32()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBypassFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: dupsBypassFrequency.setDescription('The present bypass frequency in 1/10 Hz.')
dupsBypassNumLines = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBypassNumLines.setStatus('mandatory')
if mibBuilder.loadTexts: dupsBypassNumLines.setDescription('The number of bypass lines utilized in this device.')
dupsBypassVoltage1 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBypassVoltage1.setStatus('mandatory')
if mibBuilder.loadTexts: dupsBypassVoltage1.setDescription('The bypass line 1 voltage of the UPS system in 1/10 V.')
dupsBypassCurrent1 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBypassCurrent1.setStatus('mandatory')
if mibBuilder.loadTexts: dupsBypassCurrent1.setDescription('The bypass line 1 current of the UPS system in 1/10 A.')
dupsBypassPower1 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBypassPower1.setStatus('mandatory')
if mibBuilder.loadTexts: dupsBypassPower1.setDescription('The bypass line 1 real power of the UPS system in watts.')
dupsBypassVoltage2 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBypassVoltage2.setStatus('mandatory')
if mibBuilder.loadTexts: dupsBypassVoltage2.setDescription('The bypass line 2 voltage of the UPS system in 1/10 V.')
dupsBypassCurrent2 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBypassCurrent2.setStatus('mandatory')
if mibBuilder.loadTexts: dupsBypassCurrent2.setDescription('The bypass line 2 current of the UPS system in 1/10 A.')
dupsBypassPower2 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBypassPower2.setStatus('mandatory')
if mibBuilder.loadTexts: dupsBypassPower2.setDescription('The bypass line 2 real power of the UPS system in watts.')
dupsBypassVoltage3 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBypassVoltage3.setStatus('mandatory')
if mibBuilder.loadTexts: dupsBypassVoltage3.setDescription('The bypass line 3 voltage of the UPS system in 1/10 V.')
dupsBypassCurrent3 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBypassCurrent3.setStatus('mandatory')
if mibBuilder.loadTexts: dupsBypassCurrent3.setDescription('The bypass line 3 current of the UPS system in 1/10 A.')
dupsBypassPower3 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBypassPower3.setStatus('mandatory')
if mibBuilder.loadTexts: dupsBypassPower3.setDescription('The bypass line 3 real power of the UPS system in watts.')
dupsBatteryCondiction = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("good", 0), ("weak", 1), ("replace", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBatteryCondiction.setStatus('mandatory')
if mibBuilder.loadTexts: dupsBatteryCondiction.setDescription("The indication of the capacity remaining in the UPS\n               system's batteries when AC normal.")
dupsBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("low", 1), ("depleted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBatteryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dupsBatteryStatus.setDescription("The indication of the capacity remaining in the UPS\n               system's batteries when AC failed.   A value of ok\n               indicates that the remaining run-time is greater than\n               upsConfigLowBattTime.  A value of low indicates\n               that the remaining battery run-time is less than or\n               equal to upsConfigLowBattTime.  A value of\n               depleted indicates that the UPS will be unable\n               to sustain the present load when and if the utility\n               power is lost (including the possibility that the\n               utility power is currently absent and the UPS is\n               unable to sustain the output).")
dupsBatteryCharge = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("floating", 0), ("charging", 1), ("resting", 2), ("discharging", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBatteryCharge.setStatus('mandatory')
if mibBuilder.loadTexts: dupsBatteryCharge.setDescription('')
dupsSecondsOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 7, 4), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsSecondsOnBattery.setStatus('mandatory')
if mibBuilder.loadTexts: dupsSecondsOnBattery.setDescription('If the unit is on battery power, the elapsed time\n               since the UPS last switched to battery power, or the\n               time since the network management subsystem was last\n               restarted, whichever is less.  Zero shall be returned\n               if the unit is not on battery power.')
dupsBatteryEstimatedTime = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 7, 5), Integer32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBatteryEstimatedTime.setStatus('mandatory')
if mibBuilder.loadTexts: dupsBatteryEstimatedTime.setDescription('Estimated time from backup to low battery shutdown.')
dupsBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 7, 6), Integer32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBatteryVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: dupsBatteryVoltage.setDescription('The magnitude of the present battery voltage \n               in 1/10 V.')
dupsBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 7, 7), Integer32()).setUnits('0.1 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBatteryCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dupsBatteryCurrent.setDescription('The present battery current in 1/10 A.')
dupsBatteryCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 7, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBatteryCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: dupsBatteryCapacity.setDescription('An estimate of the battery charge remaining expressed\n               as a percent of full charge.')
dupsTemperature = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 7, 9), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: dupsTemperature.setDescription('The ambient temperature at or near the UPS Battery\n               casing.')
dupsLastReplaceDate = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 7, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsLastReplaceDate.setStatus('mandatory')
if mibBuilder.loadTexts: dupsLastReplaceDate.setDescription('The last battery replacement date. The format is YYYYMMDD.')
dupsNextReplaceDate = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 7, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsNextReplaceDate.setStatus('mandatory')
if mibBuilder.loadTexts: dupsNextReplaceDate.setDescription('The next battery replacement date. The format is YYYYMMDD.')
dupsTestType = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("abort", 0), ("generalTest", 1), ("batteryTest", 2), ("testFor10sec", 3), ("testUntilBattlow", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsTestType.setStatus('mandatory')
if mibBuilder.loadTexts: dupsTestType.setDescription('Perform the UPS Test procedure.')
dupsTestResultsSummary = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noTestsInitiated", 0), ("donePass", 1), ("inProgress", 2), ("generalTestFail", 3), ("batteryTestFail", 4), ("deepBatteryTestFail", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsTestResultsSummary.setStatus('mandatory')
if mibBuilder.loadTexts: dupsTestResultsSummary.setDescription('The results of the current or last UPS diagnostics\n               test performed. The values for donePass(1),\n               generalTestFail(3), and batteryTestFail(4) indicate that the\n               test completed either successfully, with a warning, or\n               with an error, respectively.Tests which have not yet\n               concluded are indicated by inProgress(2).  The value\n               noTestsInitiated(0) indicates that no previous test\n               results are available.')
dupsTestResultsDetail = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsTestResultsDetail.setStatus('mandatory')
if mibBuilder.loadTexts: dupsTestResultsDetail.setDescription('Additional information about upsTestResultsSummary.\n               If no additional information available, a zero length\n               string is returned.')
dupsAlarmDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmDisconnect.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmDisconnect.setDescription('Does the UPS disconnect?')
dupsAlarmPowerFail = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmPowerFail.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmPowerFail.setDescription('Does the input power fail?')
dupsAlarmBatteryLow = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmBatteryLow.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmBatteryLow.setDescription('Are the UPS batteries low?')
dupsAlarmLoadWarning = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmLoadWarning.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmLoadWarning.setDescription('Does the UPS load percent over the load warning value?')
dupsAlarmLoadSeverity = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmLoadSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmLoadSeverity.setDescription('Does the UPS load percent over the load severity value?')
dupsAlarmLoadOnBypass = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmLoadOnBypass.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmLoadOnBypass.setDescription('Does the UPS load on bypass?')
dupsAlarmUPSFault = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmUPSFault.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmUPSFault.setDescription('Does the UPS general fail?')
dupsAlarmBatteryGroundFault = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmBatteryGroundFault.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmBatteryGroundFault.setDescription('Does the UPS battery ground fault?')
dupsAlarmTestInProgress = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmTestInProgress.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmTestInProgress.setDescription('Does the UPS test in progress?')
dupsAlarmBatteryTestFail = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmBatteryTestFail.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmBatteryTestFail.setDescription('Does the UPS test fail?')
dupsAlarmFuseFailure = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmFuseFailure.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmFuseFailure.setDescription('Does the UPS fuse failure?')
dupsAlarmOutputOverload = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmOutputOverload.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmOutputOverload.setDescription('Does the UPS output overload?')
dupsAlarmOutputOverCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmOutputOverCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmOutputOverCurrent.setDescription('Does the UPS output overcurrent?')
dupsAlarmInverterAbnormal = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmInverterAbnormal.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmInverterAbnormal.setDescription('Does the UPS inverter abnormal?')
dupsAlarmRectifierAbnormal = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmRectifierAbnormal.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmRectifierAbnormal.setDescription('Does the UPS rectifier abnormal?')
dupsAlarmReserveAbnormal = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmReserveAbnormal.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmReserveAbnormal.setDescription('Does the UPS reserve abnormal?')
dupsAlarmLoadOnReserve = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmLoadOnReserve.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmLoadOnReserve.setDescription('Does the UPS load on reserve?')
dupsAlarmOverTemperature = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmOverTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmOverTemperature.setDescription('Does the UPS over heat?')
dupsAlarmOutputBad = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmOutputBad.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmOutputBad.setDescription('Is the UPS output abnormal?')
dupsAlarmBypassBad = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmBypassBad.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmBypassBad.setDescription('Is the UPS bypass bad?')
dupsAlarmUPSOff = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmUPSOff.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmUPSOff.setDescription('Is the UPS in standby mode?')
dupsAlarmChargerFail = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmChargerFail.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmChargerFail.setDescription('Does the UPS charger fail?')
dupsAlarmFanFail = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmFanFail.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmFanFail.setDescription('Does the UPS fan fail?')
dupsAlarmEconomicMode = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmEconomicMode.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmEconomicMode.setDescription('Indicates whether the UPS is in the economic mode.')
dupsAlarmOutputOff = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmOutputOff.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmOutputOff.setDescription('Indicates whether the UPS output is turned off or not.')
dupsAlarmSmartShutdown = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmSmartShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmSmartShutdown.setDescription('Indicates whether the Smart Shutdown is in progress.')
dupsAlarmEmergencyPowerOff = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmEmergencyPowerOff.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmEmergencyPowerOff.setDescription('UPS emergency power off.')
dupsAlarmUPSShutdown = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmUPSShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmUPSShutdown.setDescription('UPS shutdown.')
dupsEnvTemperature = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 1), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsEnvTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: dupsEnvTemperature.setDescription('The ambient environmental temperature.')
dupsEnvHumidity = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 2), Integer32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsEnvHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: dupsEnvHumidity.setDescription('The environmental humidity.')
dupsEnvSetTemperatureLimit = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 3), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsEnvSetTemperatureLimit.setStatus('mandatory')
if mibBuilder.loadTexts: dupsEnvSetTemperatureLimit.setDescription('Alarm dupsAlarmOverTemperature on when the environmental\n\t\ttemperature over the value.')
dupsEnvSetHumidityLimit = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 4), Integer32()).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsEnvSetHumidityLimit.setStatus('mandatory')
if mibBuilder.loadTexts: dupsEnvSetHumidityLimit.setDescription('Alarm dupsAlarmOverHumidity on when the environmental\n\t\thumidity over the value.')
dupsEnvSetEnvRelay1 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normalOpen", 0), ("normalClose", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsEnvSetEnvRelay1.setStatus('mandatory')
if mibBuilder.loadTexts: dupsEnvSetEnvRelay1.setDescription('')
dupsEnvSetEnvRelay2 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normalOpen", 0), ("normalClose", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsEnvSetEnvRelay2.setStatus('mandatory')
if mibBuilder.loadTexts: dupsEnvSetEnvRelay2.setDescription('')
dupsEnvSetEnvRelay3 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normalOpen", 0), ("normalClose", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsEnvSetEnvRelay3.setStatus('mandatory')
if mibBuilder.loadTexts: dupsEnvSetEnvRelay3.setDescription('')
dupsEnvSetEnvRelay4 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normalOpen", 0), ("normalClose", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsEnvSetEnvRelay4.setStatus('mandatory')
if mibBuilder.loadTexts: dupsEnvSetEnvRelay4.setDescription('')
dupsAlarmOverEnvTemperature = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmOverEnvTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmOverEnvTemperature.setDescription('Does the environment over temperature?')
dupsAlarmOverEnvHumidity = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmOverEnvHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmOverEnvHumidity.setDescription('Does the environment over humidity?')
dupsAlarmEnvRelay1 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmEnvRelay1.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmEnvRelay1.setDescription('')
dupsAlarmEnvRelay2 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmEnvRelay2.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmEnvRelay2.setDescription('')
dupsAlarmEnvRelay3 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmEnvRelay3.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmEnvRelay3.setDescription('')
dupsAlarmEnvRelay4 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmEnvRelay4.setStatus('mandatory')
if mibBuilder.loadTexts: dupsAlarmEnvRelay4.setDescription('')
dupsCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,1))
if mibBuilder.loadTexts: dupsCommunicationLost.setDescription('SEVER: Communication with the UPS failed.')
dupsCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,2))
if mibBuilder.loadTexts: dupsCommunicationEstablished.setDescription('INFORMATION: Communication with the UPS reestablished.')
dupsPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,3))
if mibBuilder.loadTexts: dupsPowerFail.setDescription('WARNING: Power failed! The UPS is operating on battery power.')
dupsPowerRestored = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,4))
if mibBuilder.loadTexts: dupsPowerRestored.setDescription('INFORMATION: Power restored! The utility power restored.')
dupsLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,5))
if mibBuilder.loadTexts: dupsLowBattery.setDescription('SEVER: The UPS batteries are low and will soon be exhausted.')
dupsReturnFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,6))
if mibBuilder.loadTexts: dupsReturnFromLowBattery.setDescription('INFORMATION: The UPS has returned from a low battery condition.')
dupsLoadWarning = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,7))
if mibBuilder.loadTexts: dupsLoadWarning.setDescription('INFORMATION: Loading percent of the UPS over the Load Warning value.')
dupsNoLongerLoadWarning = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,8))
if mibBuilder.loadTexts: dupsNoLongerLoadWarning.setDescription('INFORMATION: Returnd from Load Warning condition.')
dupsLoadSeverity = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,9))
if mibBuilder.loadTexts: dupsLoadSeverity.setDescription('Warning: Loading percent of the UPS over the Load Severity value.')
dupsNoLongerLoadSeverity = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,10))
if mibBuilder.loadTexts: dupsNoLongerLoadSeverity.setDescription('INFORMATION: Returned from Load Severity condition.')
dupsLoadOnBypass = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,11))
if mibBuilder.loadTexts: dupsLoadOnBypass.setDescription('SEVER: The UPS loads on bypass.')
dupsNoLongerLoadOnBypass = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,12))
if mibBuilder.loadTexts: dupsNoLongerLoadOnBypass.setDescription('INFORMATION: The UPS is not on bypass mode.')
dupsUPSFault = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,13))
if mibBuilder.loadTexts: dupsUPSFault.setDescription('SEVER: A general fault caused in the UPS.')
dupsReturnFromUPSFault = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,14))
if mibBuilder.loadTexts: dupsReturnFromUPSFault.setDescription('INFORMATION: The UPS is returned from general fault.')
dupsBatteryGroundFault = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,15))
if mibBuilder.loadTexts: dupsBatteryGroundFault.setDescription('SEVER: The UPS battery ground fault.')
dupsNoLongerBatteryFault = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,16))
if mibBuilder.loadTexts: dupsNoLongerBatteryFault.setDescription('INFORMATION: The UPS recovered from battery ground fault.')
dupsTestInProgress = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,17))
if mibBuilder.loadTexts: dupsTestInProgress.setDescription('INFORMATION: The UPS test in progress.')
dupsBatteryTestFail = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,18))
if mibBuilder.loadTexts: dupsBatteryTestFail.setDescription('SEVER: The UPS test fail.')
dupsFuseFailure = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,19))
if mibBuilder.loadTexts: dupsFuseFailure.setDescription('SEVER: The UPS fuse failed.')
dupsFuseRecovered = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,20))
if mibBuilder.loadTexts: dupsFuseRecovered.setDescription('INFORMATION: The UPS fuse recovered.')
dupsOutputOverload = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,21))
if mibBuilder.loadTexts: dupsOutputOverload.setDescription('SEVER: The UPS overload!.')
dupsNoLongerOverload = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,22))
if mibBuilder.loadTexts: dupsNoLongerOverload.setDescription('INFORMATION: Recovered from UPS overload.')
dupsOutputOverCurrent = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,23))
if mibBuilder.loadTexts: dupsOutputOverCurrent.setDescription('SEVER: The UPS output overcurrent.')
dupsNoLongerOutputOverCurrent = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,24))
if mibBuilder.loadTexts: dupsNoLongerOutputOverCurrent.setDescription('INFORMATION: Recovered from UPS overcurrent.')
dupsInverterAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,25))
if mibBuilder.loadTexts: dupsInverterAbnormal.setDescription('SEVER: The UPS inverter abnormal.')
dupsInverterRecovered = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,26))
if mibBuilder.loadTexts: dupsInverterRecovered.setDescription('INFORMATION: Recovered from UPS inverter abnormal.')
dupsRectifierAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,27))
if mibBuilder.loadTexts: dupsRectifierAbnormal.setDescription('SEVER: The UPS rectifier abnormal.')
dupsRectifierRecovered = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,28))
if mibBuilder.loadTexts: dupsRectifierRecovered.setDescription('INFORMATION: The UPS recovered from rectifier abnormal.')
dupsReserveAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,29))
if mibBuilder.loadTexts: dupsReserveAbnormal.setDescription('SEVER: The UPS rectifier abnormal.')
dupsReserveRecovered = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,30))
if mibBuilder.loadTexts: dupsReserveRecovered.setDescription('INFORMATION: The UPS rectifier abnormal.')
dupsLoadOnReserve = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,31))
if mibBuilder.loadTexts: dupsLoadOnReserve.setDescription('SEVER: The UPS load on reserve.')
dupsNoLongerLoadOnReserve = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,32))
if mibBuilder.loadTexts: dupsNoLongerLoadOnReserve.setDescription('INFORMATION: The UPS no longer load on reserve.')
dupsEnvOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,33))
if mibBuilder.loadTexts: dupsEnvOverTemperature.setDescription('WARNING: The environment overtemperature.')
dupsNoLongerEnvOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,34))
if mibBuilder.loadTexts: dupsNoLongerEnvOverTemperature.setDescription('INFORMATION: The environment recovered from overtemperature.')
dupsEnvOverHumidity = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,35))
if mibBuilder.loadTexts: dupsEnvOverHumidity.setDescription('WARNING: The environment overhumidity.')
dupsNoLongerEnvOverHumidity = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,36))
if mibBuilder.loadTexts: dupsNoLongerEnvOverHumidity.setDescription('INFORMATION: The environment recovered from overhumidity.')
dupsEnvRelay1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,37))
if mibBuilder.loadTexts: dupsEnvRelay1Alarm.setDescription('INFORMATION: The environment relay1 is not in normal state.')
dupsEnvRelay1Normal = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,38))
if mibBuilder.loadTexts: dupsEnvRelay1Normal.setDescription('INFORMATION: The environment relay1 is in normal state.')
dupsEnvRelay2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,39))
if mibBuilder.loadTexts: dupsEnvRelay2Alarm.setDescription('INFORMATION: The environment relay2 is not in normal state.')
dupsEnvRelay2Normal = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,40))
if mibBuilder.loadTexts: dupsEnvRelay2Normal.setDescription('INFORMATION: The environment relay2 is in normal state.')
dupsEnvRelay3Alarm = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,41))
if mibBuilder.loadTexts: dupsEnvRelay3Alarm.setDescription('INFORMATION: The environment relay3 is not in normal state.')
dupsEnvRelay3Normal = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,42))
if mibBuilder.loadTexts: dupsEnvRelay3Normal.setDescription('INFORMATION: The environment relay3 is in normal state.')
dupsEnvRelay4Alarm = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,43))
if mibBuilder.loadTexts: dupsEnvRelay4Alarm.setDescription('INFORMATION: The environment relay4 is not in normal state.')
dupsEnvRelay4Normal = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,44))
if mibBuilder.loadTexts: dupsEnvRelay4Normal.setDescription('INFORMATION: The environment relay4 is in normal state.')
dupsSmartShutdown = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,45))
if mibBuilder.loadTexts: dupsSmartShutdown.setDescription('SEVER: Smart Shutdown is initiated.')
dupsCancelShutdown = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,46))
if mibBuilder.loadTexts: dupsCancelShutdown.setDescription('INFORMATION: Cancel UPS Shutdown.')
dupsTestCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,47))
if mibBuilder.loadTexts: dupsTestCompleted.setDescription('INFORMATION: This trap is sent upon completion of a UPS diagnostic test.')
dupsEPOON = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,48))
if mibBuilder.loadTexts: dupsEPOON.setDescription('INFORMATION: This trap is sent when emergency power off is on.')
dupsEPOOFF = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,49))
if mibBuilder.loadTexts: dupsEPOOFF.setDescription('INFORMATION: This trap is sent when UPS recover from emergency power off.')
dupsOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,50))
if mibBuilder.loadTexts: dupsOverTemperature.setDescription('SEVER: This trap is sent when the UPS is over heat.')
dupsNormalTemperature = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,51))
if mibBuilder.loadTexts: dupsNormalTemperature.setDescription('INFORMATION: This trap is sent when UPS recover from over heat.')
dupsBattReplace = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,52))
if mibBuilder.loadTexts: dupsBattReplace.setDescription('WARNING: The battery needs to be replaced.')
dupsReturnFromBattReplace = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,53))
if mibBuilder.loadTexts: dupsReturnFromBattReplace.setDescription('INFORMATION: The UPS recovered from battery replacement.')
mibBuilder.exportSymbols("DeltaUPS-MIB", dupsAlarmBatteryLow=dupsAlarmBatteryLow, dupsInputCurrent2=dupsInputCurrent2, dupsAlarmFuseFailure=dupsAlarmFuseFailure, dupsEnvRelay2Normal=dupsEnvRelay2Normal, dupsReserveRecovered=dupsReserveRecovered, dupsIdentModel=dupsIdentModel, dupsLastReplaceDate=dupsLastReplaceDate, dupsAlarmUPSFault=dupsAlarmUPSFault, dupsReserveAbnormal=dupsReserveAbnormal, dupsOutputSource=dupsOutputSource, dupsRestartAction=dupsRestartAction, dupsSecondsOnBattery=dupsSecondsOnBattery, dupsConfig=dupsConfig, dupsBatteryVoltage=dupsBatteryVoltage, dupsEPOON=dupsEPOON, dupsEnvRelay4Normal=dupsEnvRelay4Normal, dupsAlarmBatteryGroundFault=dupsAlarmBatteryGroundFault, dupsAlarmEnvRelay1=dupsAlarmEnvRelay1, dupsUPSFault=dupsUPSFault, dupsEnvSetEnvRelay3=dupsEnvSetEnvRelay3, dupsAlarmOutputOff=dupsAlarmOutputOff, dupsEnvRelay3Normal=dupsEnvRelay3Normal, dupsType=dupsType, dupsAlarmReserveAbnormal=dupsAlarmReserveAbnormal, dupsOverTemperature=dupsOverTemperature, dupsAlarmOutputBad=dupsAlarmOutputBad, dupsBatteryCurrent=dupsBatteryCurrent, dupsCommunicationLost=dupsCommunicationLost, dupsAlarmEnvRelay4=dupsAlarmEnvRelay4, dupsBatteryTestFail=dupsBatteryTestFail, dupsEnvSetEnvRelay1=dupsEnvSetEnvRelay1, dupsShutdownAction=dupsShutdownAction, dupsIdentName=dupsIdentName, dupsPowerFail=dupsPowerFail, dupsOutputNumLines=dupsOutputNumLines, dupsTestType=dupsTestType, dupsEnvSetEnvRelay4=dupsEnvSetEnvRelay4, dupsInputVoltage1=dupsInputVoltage1, dupsTestResultsSummary=dupsTestResultsSummary, dupsTestCompleted=dupsTestCompleted, dupsNextReplaceDate=dupsNextReplaceDate, dupsFuseRecovered=dupsFuseRecovered, dupsAlarmOutputOverCurrent=dupsAlarmOutputOverCurrent, dupsRatingOutputFrequency=dupsRatingOutputFrequency, dupsOutput=dupsOutput, dupsNoLongerLoadSeverity=dupsNoLongerLoadSeverity, dupsAlarmPowerFail=dupsAlarmPowerFail, dupsAlarmEnvRelay2=dupsAlarmEnvRelay2, dupsIdentUPSSoftwareVersion=dupsIdentUPSSoftwareVersion, dupsAlarmRectifierAbnormal=dupsAlarmRectifierAbnormal, dupsLowTransferVoltUpBound=dupsLowTransferVoltUpBound, dupsBypassNumLines=dupsBypassNumLines, dupsNoLongerLoadWarning=dupsNoLongerLoadWarning, dupsOutputOverCurrent=dupsOutputOverCurrent, dupsOutputPower1=dupsOutputPower1, dupsAlarmUPSOff=dupsAlarmUPSOff, dupsInput=dupsInput, dupsPowerRestored=dupsPowerRestored, dupsLowTransferVoltLowBound=dupsLowTransferVoltLowBound, dupsEnvRelay1Normal=dupsEnvRelay1Normal, dupsAlarmOverEnvHumidity=dupsAlarmOverEnvHumidity, dupsBattery=dupsBattery, dupsNoLongerBatteryFault=dupsNoLongerBatteryFault, dupsConfigHighVoltageTransferPoint=dupsConfigHighVoltageTransferPoint, dupsNoLongerLoadOnBypass=dupsNoLongerLoadOnBypass, dupsControl=dupsControl, dupsBypassPower2=dupsBypassPower2, dupsBatteryGroundFault=dupsBatteryGroundFault, dupsTestResultsDetail=dupsTestResultsDetail, dupsOutputLoad1=dupsOutputLoad1, dupsAlarmOutputOverload=dupsAlarmOutputOverload, dupsSmartShutdown=dupsSmartShutdown, dupsRatingInputVoltage=dupsRatingInputVoltage, dupsBypassFrequency=dupsBypassFrequency, dupsAlarmSmartShutdown=dupsAlarmSmartShutdown, upsv4=upsv4, dupsFuseFailure=dupsFuseFailure, dupsBatteryCharge=dupsBatteryCharge, dupsBatteryStatus=dupsBatteryStatus, dupsIdent=dupsIdent, dupsOutputVoltage3=dupsOutputVoltage3, dupsEnvOverTemperature=dupsEnvOverTemperature, dupsConfigBuzzerAlarm=dupsConfigBuzzerAlarm, dupsAlarmOverTemperature=dupsAlarmOverTemperature, dupsEnvRelay1Alarm=dupsEnvRelay1Alarm, dupsAlarmLoadWarning=dupsAlarmLoadWarning, dupsReturnFromLowBattery=dupsReturnFromLowBattery, dupsLoadOnBypass=dupsLoadOnBypass, dupsNormalTemperature=dupsNormalTemperature, dupsOutputFrequency=dupsOutputFrequency, dupsAlarm=dupsAlarm, dupsShutdownType=dupsShutdownType, dupsOutputPower3=dupsOutputPower3, dupsBypassCurrent2=dupsBypassCurrent2, dupsEnvSetEnvRelay2=dupsEnvSetEnvRelay2, dupsEnvRelay4Alarm=dupsEnvRelay4Alarm, delta=delta, dupsConfigUPSBootDelay=dupsConfigUPSBootDelay, dupsAlarmLoadSeverity=dupsAlarmLoadSeverity, dupsBattReplace=dupsBattReplace, dupsInputCurrent3=dupsInputCurrent3, dupsEnvSetHumidityLimit=dupsEnvSetHumidityLimit, dupsBypassVoltage3=dupsBypassVoltage3, ups=ups, dupsAlarmEnvRelay3=dupsAlarmEnvRelay3, dupsInputFrequency3=dupsInputFrequency3, dupsAlarmLoadOnReserve=dupsAlarmLoadOnReserve, dupsEnvTemperature=dupsEnvTemperature, dupsInverterRecovered=dupsInverterRecovered, dupsCancelShutdown=dupsCancelShutdown, dupsOutputVoltage1=dupsOutputVoltage1, dupsInputNumLines=dupsInputNumLines, dupsBypassPower1=dupsBypassPower1, dupsRatingOutputVA=dupsRatingOutputVA, dupsNoLongerEnvOverTemperature=dupsNoLongerEnvOverTemperature, dupsInputFrequency1=dupsInputFrequency1, dupsHighTransferVoltLowBound=dupsHighTransferVoltLowBound, dupsOutputCurrent1=dupsOutputCurrent1, dupsOutputCurrent2=dupsOutputCurrent2, dupsOutputLoad2=dupsOutputLoad2, dupsAlarmChargerFail=dupsAlarmChargerFail, dupsAutoReboot=dupsAutoReboot, dupsBypassVoltage1=dupsBypassVoltage1, dupsNoLongerEnvOverHumidity=dupsNoLongerEnvOverHumidity, dupsBatteryCondiction=dupsBatteryCondiction, dupsRatingOutputVoltage=dupsRatingOutputVoltage, dupsIdentManufacturer=dupsIdentManufacturer, dupsInputFrequency2=dupsInputFrequency2, dupsInputVoltage2=dupsInputVoltage2, dupsAlarmBatteryTestFail=dupsAlarmBatteryTestFail, dupsEnvHumidity=dupsEnvHumidity, dupsConfigBuzzerState=dupsConfigBuzzerState, dupsCommunicationEstablished=dupsCommunicationEstablished, dupsAlarmBypassBad=dupsAlarmBypassBad, dupsEnvOverHumidity=dupsEnvOverHumidity, dupsInputVoltage3=dupsInputVoltage3, dupsLowBattTime=dupsLowBattTime, dupsOutputLoad3=dupsOutputLoad3, dupsRatingInputFrequency=dupsRatingInputFrequency, dupsRectifierRecovered=dupsRectifierRecovered, dupsOutputPower2=dupsOutputPower2, dupsBatteryEstimatedTime=dupsBatteryEstimatedTime, dupsEnvRelay2Alarm=dupsEnvRelay2Alarm, dupsHighTransferVoltUpBound=dupsHighTransferVoltUpBound, dupsInverterAbnormal=dupsInverterAbnormal, dupsEnvRelay3Alarm=dupsEnvRelay3Alarm, dupsConfigSensitivity=dupsConfigSensitivity, dupsLowBattery=dupsLowBattery, dupsRelayOffDelay=dupsRelayOffDelay, dupsTestInProgress=dupsTestInProgress, dupsRectifierAbnormal=dupsRectifierAbnormal, dupsOutletRelays=dupsOutletRelays, dupsIdentAgentSoftwareVersion=dupsIdentAgentSoftwareVersion, dupsAlarmOverEnvTemperature=dupsAlarmOverEnvTemperature, dupsRelayOnDelay=dupsRelayOnDelay, dupsOutputVoltage2=dupsOutputVoltage2, dupsAlarmLoadOnBypass=dupsAlarmLoadOnBypass, dupsConfigLowVoltageTransferPoint=dupsConfigLowVoltageTransferPoint, dupsLoadOnReserve=dupsLoadOnReserve, dupsTemperature=dupsTemperature, dupsConfigShutdownOSDelay=dupsConfigShutdownOSDelay, dupsConfigExternalBatteryPack=dupsConfigExternalBatteryPack, dupsBypassVoltage2=dupsBypassVoltage2, dupsAlarmUPSShutdown=dupsAlarmUPSShutdown, dupsLoadWarning=dupsLoadWarning, dupsRatingBatteryVoltage=dupsRatingBatteryVoltage, dupsBatteryCapacity=dupsBatteryCapacity, dupsOutputOverload=dupsOutputOverload, dupsEPOOFF=dupsEPOOFF, dupsReturnFromUPSFault=dupsReturnFromUPSFault, dupsBypassCurrent1=dupsBypassCurrent1, dupsAlarmTestInProgress=dupsAlarmTestInProgress, dupsAlarmEmergencyPowerOff=dupsAlarmEmergencyPowerOff, dupsLoadSeverity=dupsLoadSeverity, dupsNoLongerOutputOverCurrent=dupsNoLongerOutputOverCurrent, dupsTraps=dupsTraps, dupsEnvSetTemperatureLimit=dupsEnvSetTemperatureLimit, dupsBypass=dupsBypass, dupsAlarmFanFail=dupsAlarmFanFail, dupsBypassCurrent3=dupsBypassCurrent3, dupsInputCurrent1=dupsInputCurrent1, dupsSetOutletRelay=dupsSetOutletRelay, dupsAlarmDisconnect=dupsAlarmDisconnect, dupsAlarmInverterAbnormal=dupsAlarmInverterAbnormal, dupsNoLongerLoadOnReserve=dupsNoLongerLoadOnReserve, dupsNoLongerOverload=dupsNoLongerOverload, dupsOutputCurrent3=dupsOutputCurrent3, dupsTest=dupsTest, dupsAttachedDevices=dupsAttachedDevices, dupsBypassPower3=dupsBypassPower3, dupsReturnFromBattReplace=dupsReturnFromBattReplace, dupsAlarmEconomicMode=dupsAlarmEconomicMode, dupsEnvironment=dupsEnvironment)
