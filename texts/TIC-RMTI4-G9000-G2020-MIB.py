#
# PySNMP MIB module TIC-RMTI4-G9000-G2020-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/toshiba/TIC-RMTI4-G9000-G2020-MIB
# Produced by pysmi-1.1.12 at Fri Jul 19 10:10:47 2024
# On host fv-az1771-969 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Gauge32, Counter32, ObjectIdentity, NotificationType, NotificationType, Integer32, Unsigned32, Counter64, TimeTicks, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, enterprises, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "Counter32", "ObjectIdentity", "NotificationType", "NotificationType", "Integer32", "Unsigned32", "Counter64", "TimeTicks", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "enterprises", "iso", "MibIdentifier")
DisplayString, TimeInterval, AutonomousType, TestAndIncr, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeInterval", "AutonomousType", "TestAndIncr", "TimeStamp", "TextualConvention")
class PositiveInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class NonNegativeInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

toshiba = MibIdentifier((1, 3, 6, 1, 4, 1, 186))
equ = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1))
equUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19))
ticUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2))
rmti4 = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5))
upsG9000_G2020 = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1)).setLabel("upsG9000-G2020")
upsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 1))
upsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2))
upsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3))
upsBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 4))
upsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5))
upsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6))
upsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7))
upsTime = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 8))
upsTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 9))
upsIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentManufacturer.setDescription('The name of the UPS manufacturer.')
upsIdentTypeform = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentTypeform.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentTypeform.setDescription('The UPS Model designation.')
upsIdentUPSFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentUPSFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentUPSFirmwareVersion.setDescription('The UPS firmware version.')
upsIdentSysName = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsIdentSysName.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentSysName.setDescription('A string identifying the UPS.  This object is\n           set by the administrator.')
upsIdentAttachedDevices = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsIdentAttachedDevices.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentAttachedDevices.setDescription('A string identifying the devices attached to the\n           output(s) of the UPS.  This object is set by\n           the administrator.')
upsInputNumOfPhases = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputNumOfPhases.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputNumOfPhases.setDescription('Number of input lines.  This data is used by upsInputNumLines.')
upsInputLLVoltageAB = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 2), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputLLVoltageAB.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputLLVoltageAB.setDescription('The input line to line voltage for AB in RMS volts.')
upsInputLLVoltageBC = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 3), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputLLVoltageBC.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputLLVoltageBC.setDescription('The input line to line voltage for BC in RMS volts.')
upsInputLLVoltageCA = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 4), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputLLVoltageCA.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputLLVoltageCA.setDescription('The input line to line voltage for CA in RMS volts.')
upsInputLLVoltagePercentAB = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 5), NonNegativeInteger()).setUnits('Percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputLLVoltagePercentAB.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputLLVoltagePercentAB.setDescription('The input line to line voltage percent for AB.')
upsInputLLVoltagePercentBC = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 6), NonNegativeInteger()).setUnits('Percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputLLVoltagePercentBC.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputLLVoltagePercentBC.setDescription('The input line to line voltage percent for BC.')
upsInputLLVoltagePercentCA = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 7), NonNegativeInteger()).setUnits('Percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputLLVoltagePercentCA.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputLLVoltagePercentCA.setDescription('The input line to line voltage percent for CA.')
upsInputCurrentPhaseA = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 8), NonNegativeInteger()).setUnits('0.1 RMS Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputCurrentPhaseA.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputCurrentPhaseA.setDescription('The input phase current for Phase A.')
upsInputCurrentPhaseB = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 9), NonNegativeInteger()).setUnits('0.1 RMS Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputCurrentPhaseB.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputCurrentPhaseB.setDescription('The input phase current unit for Phase B.')
upsInputCurrentPhaseC = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 10), NonNegativeInteger()).setUnits('0.1 RMS Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputCurrentPhaseC.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputCurrentPhaseC.setDescription('The input phase current unit for Phase C.')
upsInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 11), NonNegativeInteger()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputFrequency.setDescription('The input frequency unit 0.1 Hertz.')
upsInputActivePowerA = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 12), NonNegativeInteger()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputActivePowerA.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputActivePowerA.setDescription('The magnitude of the present input true power for phase A.')
upsInputActivePowerB = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 13), NonNegativeInteger()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputActivePowerB.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputActivePowerB.setDescription('The magnitude of the present input true power for phase B.')
upsInputActivePowerC = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 14), NonNegativeInteger()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputActivePowerC.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputActivePowerC.setDescription('The magnitude of the present input true power for phase C.')
upsInputTotalActivePower = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 15), NonNegativeInteger()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputTotalActivePower.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputTotalActivePower.setDescription('The magnitude of the total input true power.')
upsInputRatedLLVoltage = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 16), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputRatedLLVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputRatedLLVoltage.setDescription('The input line to line rated voltage in RMS volts.')
upsOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("normal", 3), ("bypass", 4), ("battery", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputSource.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputSource.setDescription('The present source of output power.  The enumeration\n             none(2) indicates that there is no source of output\n             power (and therefore no output power), for example,\n             the system has opened the output breaker.')
upsOutputNumOfPhases = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 2), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputNumOfPhases.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputNumOfPhases.setDescription('The number of output lines utilized in this device.')
upsOutputLLVoltageAB = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 3), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputLLVoltageAB.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputLLVoltageAB.setDescription('The output line to line voltage for AB in RMS volts.')
upsOutputLLVoltageBC = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 4), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputLLVoltageBC.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputLLVoltageBC.setDescription('The output line to line voltage for BC in RMS volts.')
upsOutputLLVoltageCA = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 5), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputLLVoltageCA.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputLLVoltageCA.setDescription('The output line to line voltage for CA in RMS volts.')
upsOutputCurrentPhaseA = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 6), NonNegativeInteger()).setUnits('RMS Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrentPhaseA.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputCurrentPhaseA.setDescription('The Output phase current for phase A in amps.')
upsOutputCurrentPhaseB = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 7), NonNegativeInteger()).setUnits('RMS Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrentPhaseB.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputCurrentPhaseB.setDescription('The Output phase current for phase B in amps.')
upsOutputCurrentPhaseC = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 8), NonNegativeInteger()).setUnits('RMS Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrentPhaseC.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputCurrentPhaseC.setDescription('The Output phase current for phase C in amps.')
upsOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 9), NonNegativeInteger()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputFrequency.setDescription('The Output Frequency for phase A in 1/10 of HZ.')
upsOutputCurrentPercentA = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 10), Integer32()).setUnits('PERCENT').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrentPercentA.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputCurrentPercentA.setDescription('The output current for phase A in percent.')
upsOutputCurrentPercentB = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 11), Integer32()).setUnits('PERCENT').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrentPercentB.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputCurrentPercentB.setDescription('The output current for phase B in percent.')
upsOutputCurrentPercentC = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 12), Integer32()).setUnits('PERCENT').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrentPercentC.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputCurrentPercentC.setDescription('The output current for phase C in percent.')
upsOutputTotalActivePower = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 13), NonNegativeInteger()).setUnits('kWatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputTotalActivePower.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputTotalActivePower.setDescription('The output active power.')
upsOutputTotalActivePowerPercent = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 14), NonNegativeInteger()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputTotalActivePowerPercent.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputTotalActivePowerPercent.setDescription('The output active power in percent.')
upsOutputPowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 15), NonNegativeInteger()).setUnits('0.01').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputPowerFactor.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputPowerFactor.setDescription('The UPS output power factor.')
upsOutputRatedActivePower = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 16), NonNegativeInteger()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputRatedActivePower.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputRatedActivePower.setDescription('The output rated active power for the UPS.')
upsOutputRatedApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 17), NonNegativeInteger()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputRatedApparentPower.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputRatedApparentPower.setDescription('The output rated apparent power for the UPS.')
upsOutputRatedLLVoltage = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 18), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputRatedLLVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputRatedLLVoltage.setDescription('The output rated line to line voltage for the UPS.')
upsBypassNumOfPhases = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 4, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassNumOfPhases.setStatus('mandatory')
if mibBuilder.loadTexts: upsBypassNumOfPhases.setDescription('The number of bypass lines utilized.')
upsBypassLLVoltageAB = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 4, 2), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassLLVoltageAB.setStatus('mandatory')
if mibBuilder.loadTexts: upsBypassLLVoltageAB.setDescription('The Bypass line to line voltage for AB in RMS volts.')
upsBypassLLVoltageBC = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 4, 3), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassLLVoltageBC.setStatus('mandatory')
if mibBuilder.loadTexts: upsBypassLLVoltageBC.setDescription('The Bypass line to line voltage for BC in RMS volts.')
upsBypassLLVoltageCA = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 4, 4), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassLLVoltageCA.setStatus('mandatory')
if mibBuilder.loadTexts: upsBypassLLVoltageCA.setDescription('The Bypass line to line voltage for CA in RMS volts.')
upsBypassFrequency = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 4, 5), NonNegativeInteger()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsBypassFrequency.setDescription('The Bypass frequency in 0.1 Hertz.')
upsBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("batteryNormal", 2), ("batteryLow", 3), ("batteryDepleted", 4), ("batteryDischarging", 5), ("batteryFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryStatus.setDescription("The indication of the capacity remaining in the UPS system's batteries.  A value of batteryNormal indicates that the remaining run time  sufficient to handle the load.  A value of batteryLow indicates the battery level is low.  Continued operation in battery mode will deplate batteries.  A value of batteryDepleted indicates that the UPS will be unable to sustain the present load when and if the utility power is lost (including the possibility that the utility power is currently absent and the UPS is unable to sustain the output). A value of batteryDischarging indicates UPS system is in Battery power. ")
upsElapsedTimeOnBatteryPower = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 2), NonNegativeInteger()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsElapsedTimeOnBatteryPower.setStatus('mandatory')
if mibBuilder.loadTexts: upsElapsedTimeOnBatteryPower.setDescription('If the unit is on battery power, the elapsed time\n               since the UPS on battery power, or the\n               time since the network management subsystem was last\n               restarted, whichever is less.  Zero shall be returned\n               if the unit is not on battery power.')
upsEstimatedBatteryRuntime = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 3), PositiveInteger()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEstimatedBatteryRuntime.setStatus('mandatory')
if mibBuilder.loadTexts: upsEstimatedBatteryRuntime.setDescription('An estimate of the time to battery charge depletion\n          under the present load conditions if the utility power\n          is off and remains off, or if it were to be lost and\n          remain off.')
upsBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 4), NonNegativeInteger()).setUnits('Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryVoltage.setDescription('The battery voltage DC.')
upsBatteryVoltagePercent = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 5), NonNegativeInteger()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryVoltagePercent.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryVoltagePercent.setDescription('Battery voltage in percent.')
upsBatteryEstimatedCharge = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryEstimatedCharge.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryEstimatedCharge.setDescription('An estimate of the charge to battery charge depletion\n           under the present load conditions if the utility power\n           is off and remains off, or if it were to be lost and\n           remain off.')
upsBatteryDischargeCurrent = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 7), Integer32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryDischargeCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryDischargeCurrent.setDescription('The present battery discharge Current in percent.')
upsBatteryChargeCurrent = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 8), Integer32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryChargeCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryChargeCurrent.setDescription('The present battery charge Current in percent.')
upsBatteryModel = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryModel.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryModel.setDescription('The Battery manufacturer.')
upsBatteryInSeries = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 10), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryInSeries.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryInSeries.setDescription('The Battery rated holding time in minutes.')
upsBatteryNumStrings = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 11), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryNumStrings.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryNumStrings.setDescription('The Battery rated holding time in minutes.')
upsBatteryRatedAmpereHour = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 12), NonNegativeInteger()).setUnits('Ampere Hour').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryRatedAmpereHour.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryRatedAmpereHour.setDescription('The Battery rated holding time in minutes.')
upsBatteryRatedBackupTime = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryRatedBackupTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryRatedBackupTime.setDescription('The Battery rated holding time in minutes.')
upsBatteryInstallationDate = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryInstallationDate.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryInstallationDate.setDescription('The battery install date.')
upsAlarmsPresent = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmsPresent.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmsPresent.setDescription('The present number of active alarm conditions.')
upsAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 2), )
if mibBuilder.loadTexts: upsAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmTable.setDescription('A list of alarm table entries.  The table contains\n               zero, one, or many rows at any moment, depending upon\n               the number of alarm conditions in effect.  The table\n               is initially empty at agent startup.  The agent\n               creates a row in the table each time a condition is\n               detected and deletes that row when that condition no\n               longer pertains.  The agent creates the first row with\n               upsAlarmId equal to 1, and increments the value of\n               upsAlarmId each time a new row is created, wrapping to\n               the first free value greater than or equal to 1 when\n               the maximum value of upsAlarmId would otherwise be\n               exceeded.  Consequently, after multiple operations,\n               the table may become sparse, e.g., containing entries\n               for rows 95, 100, 101, and 203 and the entries should\n               not be assumed to be in chronological order because\n               upsAlarmId might have wrapped.\n\n               Alarms are named by an OBJECT IDENTIFIER,\n               upsAlarmDescr, to allow a single table to\n               reflect well known alarms plus alarms defined by a\n               particular implementation, i.e., as documented in the\n               private enterprise MIB definition for the device.  No\n               two rows will have the same value of upsAlarmDescr,\n               since alarms define conditions.  In order to meet this\n               requirement, care should be taken in the definition of\n               alarm conditions to insure that a system cannot enter\n               the same condition multiple times simultaneously.\n\n               The number of rows in the table at any given time is\n               reflected by the value of upsAlarmsPresent.')
upsAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 2, 1), ).setIndexNames((0, "TIC-RMTI4-G9000-G2020-MIB", "upsAlarmId"))
if mibBuilder.loadTexts: upsAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmEntry.setDescription('An entry containing information applicable to a\n         particular alarm.')
upsAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 2, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: upsAlarmId.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmId.setDescription('A unique identifier for an alarm condition.  This\n          value must remain constant.')
upsAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 2, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmDescr.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmDescr.setDescription('A reference to an alarm description object.  The\n             object referenced should not be accessible, but rather\n             be used to provide a unique description of the alarm\n             condition.')
upsAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmTime.setDescription('The value of sysUpTime when the alarm condition was\n          detected.  If the alarm condition was detected at the\n          time of agent startup and presumably existed before\n          agent startup, the value of upsAlarmTime shall equal 0.')
upsWellKnownAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3))
upsAlarmFault = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmFault.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmFault.setDescription('Fault: A UPS fault/Alarm condition exists.')
upsAlarmOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmOnBattery.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmOnBattery.setDescription('Info: The UPS is on Battery mode; it is supplying output power from its batteries.')
upsAlarmBatteryLow = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmBatteryLow.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmBatteryLow.setDescription('Warning: The battery level is low.  It has dropped to less than 90% of its nominal value. Continued operation in Battery Mode will deplete Batteries and result in UPS output shut down.  Reduce critical load to increase battery runtime.')
upsAlarmBatteryDepleted = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmBatteryDepleted.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmBatteryDepleted.setDescription('Warning: UPS contains depleted batteries, it will be unable to support critical loads.  Shut down excess equipment to reduce Load.')
upsAlarmBatteryOverheat = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmBatteryOverheat.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmBatteryOverheat.setDescription('Fault: Detection of over temperature at the batteries.')
upsAlarmBatteryVoltageAbnormal = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmBatteryVoltageAbnormal.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmBatteryVoltageAbnormal.setDescription('Fault: Battery voltage is abnormality.')
upsAlarmUPSOverheat = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmUPSOverheat.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmUPSOverheat.setDescription('Fault: The UPS is overheating (warning is given when the internal temperature reaches and exceeds 50?C rise @ 40?C ambient).  Check   to see if the ambient temperature is abnormally high (40?C or   more). If so, turn on air conditioning. Also, check ventilation fan   at the back of the UPS for operation or obstructions. Otherwise,  shut down the UPS and contact your Toshiba authorized service   center.')
upsAlarmPowerFailure = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmPowerFailure.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmPowerFailure.setDescription('Info: Power Failure.')
upsAlarmUPSOverload = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmUPSOverload.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmUPSOverload.setDescription('Fault: The UPS is overloaded. UPS will switch to bypass operation or shut down if no action is taken. Shut down excess equipment to reduce Load.')
upsAlarmUserDefinedOverloadWarning = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmUserDefinedOverloadWarning.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmUserDefinedOverloadWarning.setDescription('Warning: The inverter output load % is greater than the user defined overload set point (default: 110%).')
upsAlarmOnBypass = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmOnBypass.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmOnBypass.setDescription('Warning: The UPS is in Stop (Bypass) mode.')
upsAlarmOutputOff = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmOutputOff.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmOutputOff.setDescription('Info: The UPS output is off.')
upsAlarmAsyncOperation = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmAsyncOperation.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmAsyncOperation.setDescription('Warning: Async Operation')
upsAlarmDCBusOverCurrent = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmDCBusOverCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmDCBusOverCurrent.setDescription('Fault: UPS is reporting a DC bus overcurrent condition.  Contact your Toshiba authorized service center for examination of a DCOC fault.')
upsAlarmDCBusOverVoltage = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmDCBusOverVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmDCBusOverVoltage.setDescription('Fault: UPS is reporting a DC bus overvoltage condition.  Contact your Toshiba authorized service center for examination of a DCOV fault.')
upsAlarmDCBusUnderVoltage = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmDCBusUnderVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmDCBusUnderVoltage.setDescription('Fault: UPS is reporting a DC bus undervoltage condition.  Contact your \n          Toshiba authorized service center for examination of a DCUV fault.')
upsAlarmDCBusImbalanced = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmDCBusImbalanced.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmDCBusImbalanced.setDescription('Fault: The DC imbalanced alarm detection.')
upsAlarmOutputUnderVoltage = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmOutputUnderVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmOutputUnderVoltage.setDescription('Fault: UPS is reporting an output undervoltage condition.  Contact your Toshiba authorized service center for examination of a INVUV fault.')
upsAlarmOutputOverVoltage = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmOutputOverVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmOutputOverVoltage.setDescription('Fault: UPS is reporting an output overvoltage condition.  Contact your \n          Toshiba authorized service center for examination of a INVOV fault.')
upsAlarmInverterOverload = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmInverterOverload.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmInverterOverload.setDescription('Fault: Short time over-current has been detected.')
upsAlarmInverterOvercurrent = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmInverterOvercurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmInverterOvercurrent.setDescription('Fault: Detection of inverter overcurrent.')
upsAlarmRemotEyeCommError = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmRemotEyeCommError.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmRemotEyeCommError.setDescription('Warning: Communication error between the RemotEye 4 and the UPS.')
upsConfigModelIDString = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigModelIDString.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigModelIDString.setDescription('UPS Model ID string.  This string contains codes for the UPS series,input voltage, output voltage, output VA, and addition option.')
upsConfigUPSFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigUPSFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigUPSFirmwareVersion.setDescription('The G9000 software version.')
upsConfigInputNumOfPhases = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 3), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigInputNumOfPhases.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigInputNumOfPhases.setDescription('Number of input lines.  This data is used by upsInputNumLines.')
upsConfigRatedInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 4), NonNegativeInteger()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigRatedInputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigRatedInputFrequency.setDescription('The nominal input frequency.  On those systems which\n         support read-write access to this object, if there is\n         an attempt to set this variable to a value that is not\n         supported, the request must be rejected and the agent\n         shall respond with an appropriate error message, i.e.,\n         badValue for SNMPv1, or inconsistentValue for SNMPv2.')
upsConfigRatedInputLLVoltage = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 5), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigRatedInputLLVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigRatedInputLLVoltage.setDescription('The magnitude of the nominal input voltage.  On those\n         systems which support read-write access to this\n         object, if there is an attempt to set this variable to\n         a value that is not supported, the request must be\n         rejected and the agent shall respond with an\n         appropriate error message, i.e., badValue for SNMPv1,\n         or inconsistentValue for SNMPv2.')
upsConfigRatedInputPowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 6), PositiveInteger()).setUnits('0.01').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigRatedInputPowerFactor.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigRatedInputPowerFactor.setDescription('UNITS are in hundredths.  For 0.95 = 95.')
upsConfigOutputNumOfPhases = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 7), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigOutputNumOfPhases.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigOutputNumOfPhases.setDescription('Number of output lines.  This data is used by upsOutputNumLines.')
upsConfigRatedOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 8), NonNegativeInteger()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigRatedOutputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigRatedOutputFrequency.setDescription('The nominal output frequency.  On those systems which\n         support read-write access to this object, if there is\n         an attempt to set this variable to a value that is not\n         supported, the request must be rejected and the agent\n         shall respond with an appropriate error message, i.e.,\n         bad Value for SNMPv1, or inconsistent Value for SNMPv2.')
upsConfigRatedOutputLLVoltage = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 9), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigRatedOutputLLVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigRatedOutputLLVoltage.setDescription('The magnitude of the nominal output voltage.  On\n         those systems which support read-write access to this\n         object, if there is an attempt to set this variable to\n         a value that is not supported, the request must be\n         rejected and the agent shall respond with an\n         appropriate error message, i.e., bad Value for SNMPv1,\n         or inconsistent Value for SNMPv2.')
upsConfigRatedOutputApperentPower = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 10), NonNegativeInteger()).setUnits('Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigRatedOutputApperentPower.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigRatedOutputApperentPower.setDescription('The magnitude of the nominal Volt-Amp rating.')
upsConfigRatedOutputActivePower = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 11), NonNegativeInteger()).setUnits('KWatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigRatedOutputActivePower.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigRatedOutputActivePower.setDescription('The magnitude of the nominal true power rating.')
upsConfigRatedOutputPowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 12), NonNegativeInteger()).setUnits('0.01').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigRatedOutputPowerFactor.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigRatedOutputPowerFactor.setDescription('UNITS are in hundredths.  For 0.70 = 70.')
upsConfigBypassNumOfPhases = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 13), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigBypassNumOfPhases.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigBypassNumOfPhases.setDescription('The number of bypass lines utilized.')
upsConfigLowVoltageTransferPoint = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 14), NonNegativeInteger()).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigLowVoltageTransferPoint.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigLowVoltageTransferPoint.setDescription('The minimum input line voltage allowed before the UPS\n          system transfers to battery backup.')
upsConfigHighVoltageTransferPoint = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 15), NonNegativeInteger()).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigHighVoltageTransferPoint.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigHighVoltageTransferPoint.setDescription('The maximum line voltage allowed before the UPS\n          system transfers to battery backup.')
upsConfigBatteryInSeries = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 16), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigBatteryInSeries.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigBatteryInSeries.setDescription('The number of batteries in each string connected in series.')
upsConfigBatteryNumStrings = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 17), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigBatteryNumStrings.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigBatteryNumStrings.setDescription('The number of parallel battery strings.')
upsConfigRatedBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 18), NonNegativeInteger()).setUnits('Volts DC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigRatedBatteryVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigRatedBatteryVoltage.setDescription('Rated voltage of a single battery.')
upsConfigRatedBatteryAmpereHour = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 19), Integer32()).setUnits('Ahr').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigRatedBatteryAmpereHour.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigRatedBatteryAmpereHour.setDescription('The rated battery in ampere hour.')
upsConfigBatteryModel = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigBatteryModel.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigBatteryModel.setDescription('The manufacturer of the battery.')
upsConfigBatteryRatedBackupTime = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 21), NonNegativeInteger()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigBatteryRatedBackupTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigBatteryRatedBackupTime.setDescription('The rated duration batteries can hold when unit is in backup mode with full load.')
upsConfigUserDefinedOverloadSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 22), Integer32()).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigUserDefinedOverloadSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigUserDefinedOverloadSetPoint.setDescription('The maximum output load % defined by the user.')
upsConfigBatteryInstallationDate = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setUnits('mm/dd/yyyy').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigBatteryInstallationDate.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigBatteryInstallationDate.setDescription('The battery install date.')
upsConfigSysName = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigSysName.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigSysName.setDescription('A string identifying the UPS.  This object is\n           set by the administrator.')
upsConfigAttachedDevices = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigAttachedDevices.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigAttachedDevices.setDescription('A string identifying the devices attached to the\n           output(s) of the UPS.  This object is set by\n           the administrator.')
upsConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigPassword.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigPassword.setDescription('Password.')
upsTimeRealDate = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsTimeRealDate.setStatus('mandatory')
if mibBuilder.loadTexts: upsTimeRealDate.setDescription('Present date: year-month-date-day of the week.')
upsTimeRealTime = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsTimeRealTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsTimeRealTime.setDescription('Present time (military format): hour-minute-second.  For example,2:00pm would be 14:00:00.')
upsTrapFault = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,1))
if mibBuilder.loadTexts: upsTrapFault.setDescription('Alarm: One or more fault/status alarm(s) reported.')
upsTrapFaultClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,2))
if mibBuilder.loadTexts: upsTrapFaultClear.setDescription('Alarm Clear: One or more fault/status reported.')
upsTrapOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,3))
if mibBuilder.loadTexts: upsTrapOnBattery.setDescription('Info: The UPS is on Battery Mode.')
upsTrapOnBatteryClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,4))
if mibBuilder.loadTexts: upsTrapOnBatteryClear.setDescription('Info Clear: The UPS is on Battery Mode.')
upsTrapBatteryLow = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,5))
if mibBuilder.loadTexts: upsTrapBatteryLow.setDescription('Warning: Battery Low Voltage.')
upsTrapBatteryLowClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,6))
if mibBuilder.loadTexts: upsTrapBatteryLowClear.setDescription('Warning Clear: Battery Low Voltage.')
upsTrapBatteryDepleted = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,7))
if mibBuilder.loadTexts: upsTrapBatteryDepleted.setDescription('Warning: UPS contains depleted batteries, it will be unable to support critical loads. Shutdown excess equipment to reduce load.')
upsTrapBatteryDepletedClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,8))
if mibBuilder.loadTexts: upsTrapBatteryDepletedClear.setDescription('Warning Clear: UPS contains depleted batteries, it will be unable to support critical loads. Shutdown excess equipment to reduce load..')
upsTrapBatteryOverheat = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,9))
if mibBuilder.loadTexts: upsTrapBatteryOverheat.setDescription('Fault: Battery Overheat.')
upsTrapBatteryOverheatClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,10))
if mibBuilder.loadTexts: upsTrapBatteryOverheatClear.setDescription('Fault Clear: Battery Overheat.')
upsTrapBatteryVoltageAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,11))
if mibBuilder.loadTexts: upsTrapBatteryVoltageAbnormal.setDescription('Fault: Battery Voltage Abnormal. Contact your Toshiba authorized service center for examination.')
upsTrapBatteryVoltageAbnormalClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,12))
if mibBuilder.loadTexts: upsTrapBatteryVoltageAbnormalClear.setDescription('Fault Clear: Battery Voltage Abnormal. Contact your Toshiba authorized service center for examination.')
upsTrapUPSOverheat = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,13))
if mibBuilder.loadTexts: upsTrapUPSOverheat.setDescription('Fault: UPS Overheat, heatsinks temperature exceeds thermal settings. Contact your Toshiba authorized service center for examination.')
upsTrapUPSOverheatClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,14))
if mibBuilder.loadTexts: upsTrapUPSOverheatClear.setDescription('Fault Clear: UPS Overheat, heatsinks temperature exceeds thermal settings. Contact your Toshiba authorized service center for examination.')
upsTrapPowerFailure = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,15))
if mibBuilder.loadTexts: upsTrapPowerFailure.setDescription('Info: Power Failure.')
upsTrapPowerFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,16))
if mibBuilder.loadTexts: upsTrapPowerFailureClear.setDescription('Info Clear: PowerFailure.')
upsTrapUPSOverload = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,17))
if mibBuilder.loadTexts: upsTrapUPSOverload.setDescription('Fault: UPS Overload (OL), the output load exceeds the rated current. Decrease load.')
upsTrapUPSOverloadClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,18))
if mibBuilder.loadTexts: upsTrapUPSOverloadClear.setDescription('Fault Clear: UPS Overload (OL), the output load exceeds the rated current. Decrease load.')
upsTrapUserDefinedOverloadWarning = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,19))
if mibBuilder.loadTexts: upsTrapUserDefinedOverloadWarning.setDescription('Warning: The inverter output load % is greater than the user defined overload set point (default: 110%).')
upsTrapUserDefinedOverloadWarningClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,20))
if mibBuilder.loadTexts: upsTrapUserDefinedOverloadWarningClear.setDescription('Warning Clear: The inverter output load % is greater than the user defined overload set point (default: 110%).')
upsTrapOnBypass = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,21))
if mibBuilder.loadTexts: upsTrapOnBypass.setDescription('Warning:On Bypass.')
upsTrapOnBypassClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,22))
if mibBuilder.loadTexts: upsTrapOnBypassClear.setDescription('Warning Clear: On Bypass.')
upsTrapOutputOff = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,23))
if mibBuilder.loadTexts: upsTrapOutputOff.setDescription('Info: The UPS output is off.')
upsTrapOutputOffClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,24))
if mibBuilder.loadTexts: upsTrapOutputOffClear.setDescription('Info Clear: The UPS output is off.')
upsTrapAsyncOperation = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,25))
if mibBuilder.loadTexts: upsTrapAsyncOperation.setDescription('Warning: Inverter Synchronous.')
upsTrapAsyncOperationClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,26))
if mibBuilder.loadTexts: upsTrapAsyncOperationClear.setDescription('Warning Clear: Inverter Synchronous.')
upsTrapDCBusOverCurrent = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,27))
if mibBuilder.loadTexts: upsTrapDCBusOverCurrent.setDescription('Fault: DC Overcurrent (DCOC). Contact your Toshiba authorized service center for examination.')
upsTrapDCBusOverCurrentClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,28))
if mibBuilder.loadTexts: upsTrapDCBusOverCurrentClear.setDescription('Fault Clear: DC Overcurrent (DCOC). Contact your Toshiba authorized service center for examination.')
upsTrapDCBusOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,29))
if mibBuilder.loadTexts: upsTrapDCBusOverVoltage.setDescription('Fault: DC Overvoltage (DCOV). Contact your Toshiba authorized service center for examination.')
upsTrapDCBusOverVoltageClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,30))
if mibBuilder.loadTexts: upsTrapDCBusOverVoltageClear.setDescription('Fault Clear: DC Overvoltage (DCOV). Contact your Toshiba authorized service center for examination.')
upsTrapDCBusUnderVoltage = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,31))
if mibBuilder.loadTexts: upsTrapDCBusUnderVoltage.setDescription('Fault: DC Undervoltage (DCUV). Contact your Toshiba authorized service center for examination.')
upsTrapDCBusUnderVoltageClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,32))
if mibBuilder.loadTexts: upsTrapDCBusUnderVoltageClear.setDescription('Fault Clear: DC Undervoltage (DCUV). Contact your Toshiba authorized service center for examination.')
upsTrapDCBusImbalance = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,33))
if mibBuilder.loadTexts: upsTrapDCBusImbalance.setDescription('Fault: DC Unbalance. Contact your Toshiba authorized service center for examination.')
upsTrapDCBusImbalanceClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,34))
if mibBuilder.loadTexts: upsTrapDCBusImbalanceClear.setDescription('Fault Clear: DC Unbalance. Contact your Toshiba authorized service center for examination.')
upsTrapOutputUnderVoltage = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,35))
if mibBuilder.loadTexts: upsTrapOutputUnderVoltage.setDescription('Fault: Output Undervoltage. Contact your Toshiba authorized service center for examination.')
upsTrapOutputUnderVoltageClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,36))
if mibBuilder.loadTexts: upsTrapOutputUnderVoltageClear.setDescription('Fault Clear: Output Undervoltage. Contact your Toshiba authorized service center for examination.')
upsTrapOutputOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,37))
if mibBuilder.loadTexts: upsTrapOutputOverVoltage.setDescription('Fault: Output Overvoltage (VLOV). Contact your Toshiba authorized service center for examination.')
upsTrapOutputOverVoltageClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,38))
if mibBuilder.loadTexts: upsTrapOutputOverVoltageClear.setDescription('Fault Clear: Output Overvoltage (VLOV). Contact your Toshiba authorized service center for examination.')
upsTrapInverterOverload = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,39))
if mibBuilder.loadTexts: upsTrapInverterOverload.setDescription('Fault: UPS Overload, short time over-current has been detected during On-Line operation. Decrease Load.')
upsTrapInverterOverloadClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,40))
if mibBuilder.loadTexts: upsTrapInverterOverloadClear.setDescription('Fault Clear: UPS Overload, short time over-current has been detected during On-Line operation. Decrease Load.')
upsTrapInverterOvercurrent = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,41))
if mibBuilder.loadTexts: upsTrapInverterOvercurrent.setDescription('Fault: Inverter Overcurrent. Contact your Toshiba authorized service center for examination.')
upsTrapInverterOvercurrentClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,42))
if mibBuilder.loadTexts: upsTrapInverterOvercurrentClear.setDescription('Fault Clear: Inverter Overcurrent. Contact your Toshiba authorized service center for examination.')
upsTrapRemotEyeCommError = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,43))
if mibBuilder.loadTexts: upsTrapRemotEyeCommError.setDescription('Warning: RemotEye UPS communication error.')
upsTrapRemotEyeCommErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,44))
if mibBuilder.loadTexts: upsTrapRemotEyeCommErrorClear.setDescription('Warning Clear:RemotEye UPS communication error.')
mibBuilder.exportSymbols("TIC-RMTI4-G9000-G2020-MIB", upsOutputNumOfPhases=upsOutputNumOfPhases, upsTrapDCBusOverVoltageClear=upsTrapDCBusOverVoltageClear, upsOutputCurrentPercentB=upsOutputCurrentPercentB, upsAlarm=upsAlarm, upsConfigRatedOutputFrequency=upsConfigRatedOutputFrequency, upsConfigRatedOutputPowerFactor=upsConfigRatedOutputPowerFactor, upsConfigBatteryInSeries=upsConfigBatteryInSeries, upsIdentManufacturer=upsIdentManufacturer, upsInputLLVoltagePercentCA=upsInputLLVoltagePercentCA, upsBattery=upsBattery, upsAlarmUserDefinedOverloadWarning=upsAlarmUserDefinedOverloadWarning, upsInputLLVoltageCA=upsInputLLVoltageCA, upsInputNumOfPhases=upsInputNumOfPhases, upsAlarmId=upsAlarmId, upsBatteryDischargeCurrent=upsBatteryDischargeCurrent, upsConfigOutputNumOfPhases=upsConfigOutputNumOfPhases, upsTrapPowerFailureClear=upsTrapPowerFailureClear, upsAlarmBatteryDepleted=upsAlarmBatteryDepleted, upsTrap=upsTrap, upsAlarmBatteryOverheat=upsAlarmBatteryOverheat, upsTrapAsyncOperation=upsTrapAsyncOperation, upsTrapDCBusOverCurrentClear=upsTrapDCBusOverCurrentClear, upsOutputLLVoltageBC=upsOutputLLVoltageBC, upsTrapOutputOverVoltageClear=upsTrapOutputOverVoltageClear, upsAlarmEntry=upsAlarmEntry, upsG9000_G2020=upsG9000_G2020, upsInputTotalActivePower=upsInputTotalActivePower, upsBypassFrequency=upsBypassFrequency, upsInput=upsInput, upsTrapBatteryVoltageAbnormalClear=upsTrapBatteryVoltageAbnormalClear, upsAlarmDCBusImbalanced=upsAlarmDCBusImbalanced, upsTrapInverterOvercurrentClear=upsTrapInverterOvercurrentClear, upsOutputCurrentPercentA=upsOutputCurrentPercentA, upsAlarmDCBusOverCurrent=upsAlarmDCBusOverCurrent, upsTrapPowerFailure=upsTrapPowerFailure, upsConfig=upsConfig, upsConfigRatedInputLLVoltage=upsConfigRatedInputLLVoltage, upsTrapUPSOverloadClear=upsTrapUPSOverloadClear, upsOutputCurrentPercentC=upsOutputCurrentPercentC, upsConfigModelIDString=upsConfigModelIDString, upsTrapOutputOverVoltage=upsTrapOutputOverVoltage, upsTrapOutputOffClear=upsTrapOutputOffClear, upsInputCurrentPhaseA=upsInputCurrentPhaseA, upsBatteryRatedAmpereHour=upsBatteryRatedAmpereHour, upsTrapOnBypassClear=upsTrapOnBypassClear, upsInputCurrentPhaseC=upsInputCurrentPhaseC, upsTrapOutputUnderVoltage=upsTrapOutputUnderVoltage, upsOutputSource=upsOutputSource, upsAlarmAsyncOperation=upsAlarmAsyncOperation, upsIdentAttachedDevices=upsIdentAttachedDevices, upsBatteryVoltagePercent=upsBatteryVoltagePercent, upsAlarmTable=upsAlarmTable, upsIdentUPSFirmwareVersion=upsIdentUPSFirmwareVersion, upsOutputTotalActivePower=upsOutputTotalActivePower, upsAlarmInverterOverload=upsAlarmInverterOverload, upsConfigInputNumOfPhases=upsConfigInputNumOfPhases, upsAlarmsPresent=upsAlarmsPresent, upsTimeRealTime=upsTimeRealTime, upsOutputCurrentPhaseA=upsOutputCurrentPhaseA, upsConfigRatedBatteryAmpereHour=upsConfigRatedBatteryAmpereHour, upsOutputCurrentPhaseC=upsOutputCurrentPhaseC, upsInputActivePowerB=upsInputActivePowerB, upsConfigRatedInputPowerFactor=upsConfigRatedInputPowerFactor, upsTrapBatteryOverheat=upsTrapBatteryOverheat, upsAlarmOnBypass=upsAlarmOnBypass, upsInputLLVoltagePercentBC=upsInputLLVoltagePercentBC, upsBatteryModel=upsBatteryModel, upsAlarmBatteryLow=upsAlarmBatteryLow, upsConfigSysName=upsConfigSysName, upsInputCurrentPhaseB=upsInputCurrentPhaseB, upsEstimatedBatteryRuntime=upsEstimatedBatteryRuntime, upsTrapOnBattery=upsTrapOnBattery, upsIdentSysName=upsIdentSysName, upsInputLLVoltagePercentAB=upsInputLLVoltagePercentAB, upsTrapBatteryLowClear=upsTrapBatteryLowClear, upsConfigBatteryNumStrings=upsConfigBatteryNumStrings, toshiba=toshiba, upsTrapDCBusImbalance=upsTrapDCBusImbalance, upsBatteryStatus=upsBatteryStatus, upsOutputPowerFactor=upsOutputPowerFactor, upsConfigAttachedDevices=upsConfigAttachedDevices, upsConfigHighVoltageTransferPoint=upsConfigHighVoltageTransferPoint, ticUPS=ticUPS, upsOutputLLVoltageCA=upsOutputLLVoltageCA, upsAlarmOnBattery=upsAlarmOnBattery, upsTime=upsTime, upsBatteryInSeries=upsBatteryInSeries, upsAlarmOutputUnderVoltage=upsAlarmOutputUnderVoltage, upsBypass=upsBypass, upsConfigRatedOutputApperentPower=upsConfigRatedOutputApperentPower, upsOutputLLVoltageAB=upsOutputLLVoltageAB, upsConfigBatteryInstallationDate=upsConfigBatteryInstallationDate, upsTimeRealDate=upsTimeRealDate, upsTrapUserDefinedOverloadWarning=upsTrapUserDefinedOverloadWarning, upsTrapBatteryVoltageAbnormal=upsTrapBatteryVoltageAbnormal, upsTrapInverterOverloadClear=upsTrapInverterOverloadClear, upsOutputRatedApparentPower=upsOutputRatedApparentPower, upsWellKnownAlarms=upsWellKnownAlarms, upsTrapBatteryDepleted=upsTrapBatteryDepleted, upsAlarmInverterOvercurrent=upsAlarmInverterOvercurrent, upsTrapFaultClear=upsTrapFaultClear, upsTrapAsyncOperationClear=upsTrapAsyncOperationClear, upsInputActivePowerC=upsInputActivePowerC, upsTrapBatteryOverheatClear=upsTrapBatteryOverheatClear, upsBatteryRatedBackupTime=upsBatteryRatedBackupTime, upsElapsedTimeOnBatteryPower=upsElapsedTimeOnBatteryPower, upsInputActivePowerA=upsInputActivePowerA, upsConfigRatedOutputActivePower=upsConfigRatedOutputActivePower, upsAlarmDCBusUnderVoltage=upsAlarmDCBusUnderVoltage, upsTrapRemotEyeCommError=upsTrapRemotEyeCommError, upsAlarmOutputOff=upsAlarmOutputOff, equUPS=equUPS, upsBatteryInstallationDate=upsBatteryInstallationDate, rmti4=rmti4, upsAlarmUPSOverheat=upsAlarmUPSOverheat, upsTrapInverterOverload=upsTrapInverterOverload, upsTrapUPSOverload=upsTrapUPSOverload, upsAlarmRemotEyeCommError=upsAlarmRemotEyeCommError, upsBypassLLVoltageBC=upsBypassLLVoltageBC, upsBatteryChargeCurrent=upsBatteryChargeCurrent, upsTrapOutputOff=upsTrapOutputOff, upsBatteryNumStrings=upsBatteryNumStrings, upsBatteryVoltage=upsBatteryVoltage, upsAlarmOutputOverVoltage=upsAlarmOutputOverVoltage, upsTrapFault=upsTrapFault, upsAlarmDescr=upsAlarmDescr, upsTrapBatteryLow=upsTrapBatteryLow, upsConfigRatedBatteryVoltage=upsConfigRatedBatteryVoltage, upsBypassNumOfPhases=upsBypassNumOfPhases, upsTrapOnBypass=upsTrapOnBypass, upsConfigRatedOutputLLVoltage=upsConfigRatedOutputLLVoltage, upsTrapDCBusUnderVoltage=upsTrapDCBusUnderVoltage, PositiveInteger=PositiveInteger, upsInputLLVoltageBC=upsInputLLVoltageBC, upsInputLLVoltageAB=upsInputLLVoltageAB, upsOutputRatedLLVoltage=upsOutputRatedLLVoltage, upsTrapUPSOverheatClear=upsTrapUPSOverheatClear, upsOutput=upsOutput, upsBatteryEstimatedCharge=upsBatteryEstimatedCharge, upsAlarmTime=upsAlarmTime, NonNegativeInteger=NonNegativeInteger, upsTrapUserDefinedOverloadWarningClear=upsTrapUserDefinedOverloadWarningClear, upsConfigPassword=upsConfigPassword, upsConfigUserDefinedOverloadSetPoint=upsConfigUserDefinedOverloadSetPoint, upsConfigLowVoltageTransferPoint=upsConfigLowVoltageTransferPoint, upsConfigBypassNumOfPhases=upsConfigBypassNumOfPhases, upsTrapRemotEyeCommErrorClear=upsTrapRemotEyeCommErrorClear, upsTrapOnBatteryClear=upsTrapOnBatteryClear, upsTrapDCBusUnderVoltageClear=upsTrapDCBusUnderVoltageClear, upsTrapInverterOvercurrent=upsTrapInverterOvercurrent, equ=equ, upsOutputRatedActivePower=upsOutputRatedActivePower, upsAlarmBatteryVoltageAbnormal=upsAlarmBatteryVoltageAbnormal, upsOutputFrequency=upsOutputFrequency, upsTrapOutputUnderVoltageClear=upsTrapOutputUnderVoltageClear, upsIdent=upsIdent, upsTrapDCBusImbalanceClear=upsTrapDCBusImbalanceClear, upsTrapDCBusOverCurrent=upsTrapDCBusOverCurrent, upsTrapDCBusOverVoltage=upsTrapDCBusOverVoltage, upsBypassLLVoltageCA=upsBypassLLVoltageCA, upsTrapUPSOverheat=upsTrapUPSOverheat, upsAlarmUPSOverload=upsAlarmUPSOverload, upsIdentTypeform=upsIdentTypeform, upsConfigRatedInputFrequency=upsConfigRatedInputFrequency, upsConfigBatteryModel=upsConfigBatteryModel, upsOutputTotalActivePowerPercent=upsOutputTotalActivePowerPercent, upsAlarmFault=upsAlarmFault, upsInputFrequency=upsInputFrequency, upsAlarmDCBusOverVoltage=upsAlarmDCBusOverVoltage, upsOutputCurrentPhaseB=upsOutputCurrentPhaseB, upsConfigBatteryRatedBackupTime=upsConfigBatteryRatedBackupTime, upsInputRatedLLVoltage=upsInputRatedLLVoltage, upsBypassLLVoltageAB=upsBypassLLVoltageAB, upsAlarmPowerFailure=upsAlarmPowerFailure, upsConfigUPSFirmwareVersion=upsConfigUPSFirmwareVersion, upsTrapBatteryDepletedClear=upsTrapBatteryDepletedClear)
