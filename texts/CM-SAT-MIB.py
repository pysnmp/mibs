#
# PySNMP MIB module CM-SAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/CM-SAT-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 15:07:10 2024
# On host fv-az692-788 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
SecondaryState, VlanId, VlanPriority, MepDestinationType, OperationalState, AdminState, CmPmBinAction = mibBuilder.importSymbols("CM-COMMON-MIB", "SecondaryState", "VlanId", "VlanPriority", "MepDestinationType", "OperationalState", "AdminState", "CmPmBinAction")
shelfIndex, neIndex, slotIndex, networkElementEntry = mibBuilder.importSymbols("CM-ENTITY-MIB", "shelfIndex", "neIndex", "slotIndex", "networkElementEntry")
PolicerColorMode, = mibBuilder.importSymbols("CM-FACILITY-MIB", "PolicerColorMode")
EsaProbePktIntervalType, = mibBuilder.importSymbols("CM-SA-MIB", "EsaProbePktIntervalType")
Dot1agCfmMepIdOrZero, dot1agCfmMepEntry = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "Dot1agCfmMepIdOrZero", "dot1agCfmMepEntry")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter64, NotificationType, Counter32, iso, Bits, IpAddress, ObjectIdentity, Gauge32, Integer32, Unsigned32, ModuleIdentity, TimeTicks, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "Counter32", "iso", "Bits", "IpAddress", "ObjectIdentity", "Gauge32", "Integer32", "Unsigned32", "ModuleIdentity", "TimeTicks", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, StorageType, VariablePointer, TruthValue, TextualConvention, MacAddress, DateAndTime, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "StorageType", "VariablePointer", "TruthValue", "TextualConvention", "MacAddress", "DateAndTime", "RowStatus")
cmServiceActivationMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28))
cmServiceActivationMIB.setRevisions(('2017-04-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cmServiceActivationMIB.setRevisionsDescriptions(('Notes from release 201704050000Z\n           a) add aborted enumeration to SatStatus\n         Notes from release 201612020000Z\n          a) added satStreamDestMepEnabled to satStreamTable\n\n         Notes from release 201309120000Z\n        ',))
if mibBuilder.loadTexts: cmServiceActivationMIB.setLastUpdated('201704050000Z')
if mibBuilder.loadTexts: cmServiceActivationMIB.setOrganization('ADVA Optical Networking SE')
if mibBuilder.loadTexts: cmServiceActivationMIB.setContactInfo('Web URL: http://adva.com/\n        E-mail:  support@adva.com\n        Postal:  ADVA Optical Networking SE\n             Campus Martinsried\n             Fraunhoferstrasse 9a\n             82152 Martinsried/Munich\n             Germany\n        Phone: +49 089 89 06 65 0\n        Fax:  +49 089 89 06 65 199 ')
if mibBuilder.loadTexts: cmServiceActivationMIB.setDescription('This module defines the Service Activation MIB definitions used by \n             the F3 (FSP150CM/CC) product lines.\n             Copyright (C) ADVA.')
cmServActivationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1))
cmServActivationNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 2))
cmServActivationConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 3))
class ServiceActivationTestMode(TextualConvention, Integer32):
    description = 'The test mode of Service Activation Test.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("oneWay", 1), ("twoWay", 2))

class SatProceduresType(TextualConvention, Integer32):
    description = 'All procedures type of the Service Activation Test.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("none", 1), ("configTestCir", 2), ("configTestEir", 3), ("configTestCbs", 4), ("configTestEbs", 5), ("configTestPolicing", 6), ("performanceTest", 7))

class SatProceduresList(TextualConvention, Bits):
    description = 'Bit Mask that specifies all the Service Activation Test procedure.'
    status = 'current'
    namedValues = NamedValues(("configTestCir", 1), ("configTestEir", 2), ("configTestCbs", 3), ("configTestEbs", 4), ("configTestPolicing", 5), ("performance", 6))

class SatStatus(TextualConvention, Integer32):
    description = 'The status of the overall Service Activation Test.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("completed", 1), ("notStarted", 2), ("inProgress", 3), ("failed", 4), ("aborted", 5))

class SatDirection(TextualConvention, Integer32):
    description = 'The direction of Service Activation Test.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("forward", 1), ("backward", 2))

class SatFramePayloadType(TextualConvention, Integer32):
    description = 'This object describes the Payload type of Service Activation Test frame.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("prbs31", 1), ("custom", 2))

class SatTestAction(TextualConvention, Integer32):
    description = 'This object describes the operation on Service Activation Test frame Payload type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("start", 1), ("stop", 2), ("notApplicable", 3))

class SatResult(TextualConvention, Integer32):
    description = 'This object describes the result of Service Activation Test.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("pass", 2), ("fail", 3))

satControlTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 1), )
if mibBuilder.loadTexts: satControlTable.setStatus('current')
if mibBuilder.loadTexts: satControlTable.setDescription('A list of entries for the control of SAT Control.')
satControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-SAT-MIB", "satControlIndex"))
if mibBuilder.loadTexts: satControlEntry.setStatus('current')
if mibBuilder.loadTexts: satControlEntry.setDescription('A conceptual row in the satControlTable.')
satControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: satControlIndex.setStatus('current')
if mibBuilder.loadTexts: satControlIndex.setDescription('The index of the Service Activation Test.')
satControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satControlName.setStatus('current')
if mibBuilder.loadTexts: satControlName.setDescription('The alias of the Service Activation Test.')
satControlTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 1, 1, 3), ServiceActivationTestMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satControlTestMode.setStatus('current')
if mibBuilder.loadTexts: satControlTestMode.setDescription('The mode of the Service Activation Test.')
satControlTestProcedures = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 1, 1, 4), SatProceduresList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satControlTestProcedures.setStatus('current')
if mibBuilder.loadTexts: satControlTestProcedures.setDescription('A List of Service Activation Test procedures.')
satControlConfigTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satControlConfigTestDuration.setStatus('current')
if mibBuilder.loadTexts: satControlConfigTestDuration.setDescription('The duration of CIR step test, expressed in seconds.')
satControlConfigCIRTestStepNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satControlConfigCIRTestStepNum.setStatus('current')
if mibBuilder.loadTexts: satControlConfigCIRTestStepNum.setDescription('The number of steps in CIR step test.')
satControlConfigCIRTestStepDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satControlConfigCIRTestStepDuration.setStatus('current')
if mibBuilder.loadTexts: satControlConfigCIRTestStepDuration.setDescription('The duration of each CIR step test.')
satControlPerfTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satControlPerfTestDuration.setStatus('current')
if mibBuilder.loadTexts: satControlPerfTestDuration.setDescription('The duration of the SAT Performance Test, expressed in minutes.')
satControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 1, 1, 9), SatStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satControlStatus.setStatus('current')
if mibBuilder.loadTexts: satControlStatus.setDescription('The overall SAT Control Test Status.')
satControlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 1, 1, 10), SatTestAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satControlAction.setStatus('current')
if mibBuilder.loadTexts: satControlAction.setDescription('The start/stop action of the SAT Control.')
satControlStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 1, 1, 11), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: satControlStorageType.setStatus('current')
if mibBuilder.loadTexts: satControlStorageType.setDescription('The type of storage configured for this entry.')
satControlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: satControlRowStatus.setStatus('current')
if mibBuilder.loadTexts: satControlRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of satControlRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            satControlRowStatus value as createAndGo(4).\n            Upon successful row creation, this variable has a\n            value of active(1).\n\n            The satControlRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
satControlFailCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satControlFailCause.setStatus('current')
if mibBuilder.loadTexts: satControlFailCause.setDescription('The information about the reason of the Test failure.')
satControlTestStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 1, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satControlTestStartTime.setStatus('current')
if mibBuilder.loadTexts: satControlTestStartTime.setDescription('The start time of this SAT Control.')
satControlFlpduTagOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 1, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satControlFlpduTagOverride.setStatus('current')
if mibBuilder.loadTexts: satControlFlpduTagOverride.setDescription('Whether permit user to configure FLPDU explicitly.\n            Disabled: FLPDUs tag is inherited from SCM of MEP.\n            Enabled: User can configure FLPDUs tag explicitly, which will override the VLAN tags from MEP.')
satStreamTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2), )
if mibBuilder.loadTexts: satStreamTable.setStatus('current')
if mibBuilder.loadTexts: satStreamTable.setDescription('A list of entries for the control of SAT Streams.')
satStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-SAT-MIB", "satControlIndex"), (0, "CM-SAT-MIB", "satStreamIndex"))
if mibBuilder.loadTexts: satStreamEntry.setStatus('current')
if mibBuilder.loadTexts: satStreamEntry.setDescription('A conceptual row in the satStreamTable.')
satStreamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: satStreamIndex.setStatus('current')
if mibBuilder.loadTexts: satStreamIndex.setDescription('The index of the Service Activation Test Stream.')
satStreamName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamName.setStatus('current')
if mibBuilder.loadTexts: satStreamName.setDescription('The alias of the Service Activation Test Stream.')
satStreamTestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 3), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamTestPort.setStatus('current')
if mibBuilder.loadTexts: satStreamTestPort.setDescription('The related port of the Service Activation Test Stream.')
satStreamTestDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 4), SatDirection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamTestDirection.setStatus('current')
if mibBuilder.loadTexts: satStreamTestDirection.setDescription('The direction of the Service Activation Test Stream.')
satStreamDestMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamDestMacAddress.setStatus('current')
if mibBuilder.loadTexts: satStreamDestMacAddress.setDescription('This object describes the destination MAC address of FLPDU.')
satStreamFramePayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 6), SatFramePayloadType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamFramePayloadType.setStatus('current')
if mibBuilder.loadTexts: satStreamFramePayloadType.setDescription('The type of Payload of the Frame Loss PDU.')
satStreamCustomFramePayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamCustomFramePayload.setStatus('current')
if mibBuilder.loadTexts: satStreamCustomFramePayload.setDescription('This object describes the customized frame payload.')
satStreamFrameSizeList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamFrameSizeList.setStatus('current')
if mibBuilder.loadTexts: satStreamFrameSizeList.setDescription('This object describes a list of Frame Sizes used in FLPDU.')
satStreamSacProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 9), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamSacProfileId.setStatus('current')
if mibBuilder.loadTexts: satStreamSacProfileId.setDescription('This object describes the related Service Acceptance Criteria (SAC) Profile Id.')
satStreamSrcMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 10), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamSrcMepId.setStatus('current')
if mibBuilder.loadTexts: satStreamSrcMepId.setDescription('This object describes the Local MEP related with SAT Test Stream.')
satStreamDestMepType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 11), MepDestinationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamDestMepType.setStatus('current')
if mibBuilder.loadTexts: satStreamDestMepType.setDescription('This object describes the type of Destination MEP, which can be based on MEP id or MAC Address.\n            This is applicable only if satStreamDestMepEnabled is true.')
satStreamDestMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamDestMepId.setStatus('current')
if mibBuilder.loadTexts: satStreamDestMepId.setDescription('This object describes the destination MEP id.\n            This is applicable only if satStreamDestMepEnabled is true.')
satStreamDestMepMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 13), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamDestMepMacAddr.setStatus('current')
if mibBuilder.loadTexts: satStreamDestMepMacAddr.setDescription("This object describes the Destination MEP's MAC Address.\n            This is applicable only if satStreamDestMepEnabled is true.")
satStreamDmmPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamDmmPacketSize.setStatus('current')
if mibBuilder.loadTexts: satStreamDmmPacketSize.setDescription('This object describes the Delay Measurement Message (DMM) frame size.')
satStreamDmmPacketInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 15), EsaProbePktIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamDmmPacketInterval.setStatus('current')
if mibBuilder.loadTexts: satStreamDmmPacketInterval.setDescription('This object describes the Delay Measurement Message (DMM) frame generation interval.')
satStreamOverallResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 16), SatResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satStreamOverallResult.setStatus('current')
if mibBuilder.loadTexts: satStreamOverallResult.setDescription('This object describes the test result.')
satStreamAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 17), SatTestAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamAction.setStatus('current')
if mibBuilder.loadTexts: satStreamAction.setDescription('This object describes the operation on this test.')
satStreamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 18), SatStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satStreamStatus.setStatus('current')
if mibBuilder.loadTexts: satStreamStatus.setDescription('This object describes the test status of this Test Stream.')
satStreamCurrentTestProcedure = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 19), SatProceduresType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satStreamCurrentTestProcedure.setStatus('current')
if mibBuilder.loadTexts: satStreamCurrentTestProcedure.setDescription('This object describes the current test procedure.')
satStreamCurrentConfigCirTestStep = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satStreamCurrentConfigCirTestStep.setStatus('current')
if mibBuilder.loadTexts: satStreamCurrentConfigCirTestStep.setDescription('This object describes the current step number of CIR Test.')
satStreamInner1VlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 21), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamInner1VlanId.setStatus('current')
if mibBuilder.loadTexts: satStreamInner1VlanId.setDescription('This object describes the Inner1 VLAN Id.')
satStreamInner1VlanPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 22), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamInner1VlanPri.setStatus('current')
if mibBuilder.loadTexts: satStreamInner1VlanPri.setDescription('This object describes the Inner1 VLAN Priority.')
satStreamInner1VlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamInner1VlanEnabled.setStatus('current')
if mibBuilder.loadTexts: satStreamInner1VlanEnabled.setDescription('This object describes whether the Inner1 VLAN enabled.')
satStreamInner1ValnEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamInner1ValnEtherType.setStatus('current')
if mibBuilder.loadTexts: satStreamInner1ValnEtherType.setDescription('This object describes the Inner2 VLAN EtherType.')
satStreamInner2VlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 25), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamInner2VlanId.setStatus('current')
if mibBuilder.loadTexts: satStreamInner2VlanId.setDescription('This object describes the Inner2 VLAN Id.')
satStreamInner2VlanPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 26), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamInner2VlanPri.setStatus('current')
if mibBuilder.loadTexts: satStreamInner2VlanPri.setDescription('This object describes the Inner2 VLAN Priority.')
satStreamInner2VlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 27), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamInner2VlanEnabled.setStatus('current')
if mibBuilder.loadTexts: satStreamInner2VlanEnabled.setDescription('This object describes whether the Inner2 VLAN enabled.')
satStreamInner2VlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamInner2VlanEtherType.setStatus('current')
if mibBuilder.loadTexts: satStreamInner2VlanEtherType.setDescription('This object describes whether the Inner2 VLAN ether type.')
satStreamOuterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 29), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamOuterVlanId.setStatus('current')
if mibBuilder.loadTexts: satStreamOuterVlanId.setDescription('This object describes the Outer VLAN Id.')
satStreamOuterVlanPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 30), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamOuterVlanPri.setStatus('current')
if mibBuilder.loadTexts: satStreamOuterVlanPri.setDescription('This object describes the Outer VLAN Priority.')
satStreamOuterVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 31), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamOuterVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: satStreamOuterVlanEnabled.setDescription('This object describes whether the Outer VLAN enabled.')
satStreamOuterVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamOuterVlanEtherType.setStatus('current')
if mibBuilder.loadTexts: satStreamOuterVlanEtherType.setDescription('This object describes whether the Outer VLAN Ethertype.')
satStreamDeiEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 33), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamDeiEnabled.setStatus('current')
if mibBuilder.loadTexts: satStreamDeiEnabled.setDescription('This object describes whether the DEI enabled.')
satStreamGreenPcp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamGreenPcp.setStatus('current')
if mibBuilder.loadTexts: satStreamGreenPcp.setDescription('This object describes the PCP value for Green Packets.')
satStreamYellowPcp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamYellowPcp.setStatus('current')
if mibBuilder.loadTexts: satStreamYellowPcp.setDescription('This object describes the PCP value for Yellow Packets.')
satStreamColorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 36), PolicerColorMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamColorMode.setStatus('current')
if mibBuilder.loadTexts: satStreamColorMode.setDescription('This object describes the color mode for Policing test.')
satStreamCirLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamCirLo.setStatus('current')
if mibBuilder.loadTexts: satStreamCirLo.setDescription('This object describes CIR low 32 bits.')
satStreamCirHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamCirHi.setStatus('current')
if mibBuilder.loadTexts: satStreamCirHi.setDescription('This object describes CIR high 32 bits.')
satStreamEirLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 39), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamEirLo.setStatus('current')
if mibBuilder.loadTexts: satStreamEirLo.setDescription('This object describes EIR low 32 bits.')
satStreamEirHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamEirHi.setStatus('current')
if mibBuilder.loadTexts: satStreamEirHi.setDescription('This object describes EIR high 32 bits.')
satStreamCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 41), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamCbs.setStatus('current')
if mibBuilder.loadTexts: satStreamCbs.setDescription('This object describes CBS.')
satStreamEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 42), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamEbs.setStatus('current')
if mibBuilder.loadTexts: satStreamEbs.setDescription('This object describes CBS.')
satStreamStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 43), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: satStreamStorageType.setStatus('current')
if mibBuilder.loadTexts: satStreamStorageType.setDescription('The type of storage configured for this entry.')
satStreamRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 44), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: satStreamRowStatus.setStatus('current')
if mibBuilder.loadTexts: satStreamRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of satStreamRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            satStreamRowStatus value as createAndGo(4).\n            Upon successful row creation, this variable has a\n            value of active(1).\n\n            The satStreamRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
satStreamDmmPktPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 45), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamDmmPktPriority.setStatus('current')
if mibBuilder.loadTexts: satStreamDmmPktPriority.setDescription('This object describes the Dmm packet priority.')
satStreamMFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 46), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamMFactor.setStatus('current')
if mibBuilder.loadTexts: satStreamMFactor.setDescription("The M factor is used in test result validation.\n\t    It is added to allow for the effect of the traffic policer's CBS and EBS settings and test time. \n\t    Roughly, it equals to EBS/Test Duration, user should configure its value based on experience test.")
satStreamDestMepEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 47), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamDestMepEnabled.setStatus('current')
if mibBuilder.loadTexts: satStreamDestMepEnabled.setDescription('For a SAT two-way test, the remote end is expected to have a loopback for FLPDUs, but it may or may not have\n           a Responder MEP to process DMMs. This object indicates whether the remote end has a Responder MEP or not. \n           If the Responder MEP is present, two-way delay is computed by the Controller MEP once DMR is received, \n           if the Responder MEP is not present, the two-way delay is computed when the Controller MEP receives the looped back DMM.')
satStreamLlActivateEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 2, 1, 48), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satStreamLlActivateEnabled.setStatus('current')
if mibBuilder.loadTexts: satStreamLlActivateEnabled.setDescription('This attribute specifies whether Latching Loopback needs to be activated for the SAT stream during a SAT test. \n            It is only applicable for two way test.')
satResultStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3), )
if mibBuilder.loadTexts: satResultStatsTable.setStatus('current')
if mibBuilder.loadTexts: satResultStatsTable.setDescription('A list of entries for the control of SAT Result Statistics.')
satResultStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-SAT-MIB", "satControlIndex"), (0, "CM-SAT-MIB", "satStreamIndex"), (0, "CM-SAT-MIB", "satResultStatsTestType"), (0, "CM-SAT-MIB", "satResultStatsStepNumber"))
if mibBuilder.loadTexts: satResultStatsEntry.setStatus('current')
if mibBuilder.loadTexts: satResultStatsEntry.setDescription('A conceptual row in the satResultStatsTable.')
satResultStatsTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 1), SatProceduresType())
if mibBuilder.loadTexts: satResultStatsTestType.setStatus('current')
if mibBuilder.loadTexts: satResultStatsTestType.setDescription('The Test Type of the Service Activation Test.')
satResultStatsStepNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: satResultStatsStepNumber.setStatus('current')
if mibBuilder.loadTexts: satResultStatsStepNumber.setDescription('The Test step number of the Service Activation Test.')
satResultStatsSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsSessionId.setStatus('current')
if mibBuilder.loadTexts: satResultStatsSessionId.setDescription('The session id of the Service Activation Test.')
satResultStatsStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsStartTime.setStatus('current')
if mibBuilder.loadTexts: satResultStatsStartTime.setDescription('The start time of the Service Activation Test.')
satResultStatsEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsEndTime.setStatus('current')
if mibBuilder.loadTexts: satResultStatsEndTime.setDescription('The end time of the Service Activation Test.')
satResultStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 6), SatStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsStatus.setStatus('current')
if mibBuilder.loadTexts: satResultStatsStatus.setDescription('The Status of the Service Activation Test.')
satResultStatsResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 7), SatResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsResult.setStatus('current')
if mibBuilder.loadTexts: satResultStatsResult.setDescription('This object describes SAT whether pass.')
satResultStatsMinIRGMeasured = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsMinIRGMeasured.setStatus('current')
if mibBuilder.loadTexts: satResultStatsMinIRGMeasured.setDescription('This object describes the minimum Information Rate (IR) for Green Packets.')
satResultStatsAvgIRGMeasured = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsAvgIRGMeasured.setStatus('current')
if mibBuilder.loadTexts: satResultStatsAvgIRGMeasured.setDescription('This object describes the average Information Rate (IR) for Green Packets.')
satResultStatsMaxIRGMeasured = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsMaxIRGMeasured.setStatus('current')
if mibBuilder.loadTexts: satResultStatsMaxIRGMeasured.setDescription('This object describes the maximum Information Rate (IR) for Green Packets.')
satResultStatsMinIRYMeasured = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsMinIRYMeasured.setStatus('current')
if mibBuilder.loadTexts: satResultStatsMinIRYMeasured.setDescription('This object describes the minimum Information Rate (IR) for Yellow Packets.')
satResultStatsAvgIRYMeasured = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsAvgIRYMeasured.setStatus('current')
if mibBuilder.loadTexts: satResultStatsAvgIRYMeasured.setDescription('This object describes the average Information Rate (IR) for Yellow Packets.')
satResultStatsMaxIRYMeasured = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsMaxIRYMeasured.setStatus('current')
if mibBuilder.loadTexts: satResultStatsMaxIRYMeasured.setDescription('This object describes the maximum Information Rate (IR) for Yellow Packets.')
satResultStatsFlrGMeasured = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsFlrGMeasured.setStatus('current')
if mibBuilder.loadTexts: satResultStatsFlrGMeasured.setDescription('This object describes the Frame Loss Ratio (FLR) for Green Packets.\n           From the EGX8.2 and GE110 7.1, If its value is 26000001, it means 26.000001% frame lost.\n           For the earlier release, If its value is 260001, it means 26.0001% frame lost.')
satResultStatsFlrYMeasured = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsFlrYMeasured.setStatus('current')
if mibBuilder.loadTexts: satResultStatsFlrYMeasured.setDescription('This object describes the Frame Loss Ratio (FLR) for Yellow Packets.\n           From the EGX8.2 and GE110 7.1, If its value is 26000001, it means 26.000001% frame lost.\n           For the earlier release, If its value is 260001, it means 26.0001% frame lost.')
satResultStatsFlrGCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsFlrGCounts.setStatus('current')
if mibBuilder.loadTexts: satResultStatsFlrGCounts.setDescription('This object describes the Frame Loss (FL) count for Green Packets.')
satResultStatsFlrYCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsFlrYCounts.setStatus('current')
if mibBuilder.loadTexts: satResultStatsFlrYCounts.setDescription('This object describes the Frame Loss (FL) count for Yellow Packets.')
satResultStatsMinFTDGMeasured = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsMinFTDGMeasured.setStatus('current')
if mibBuilder.loadTexts: satResultStatsMinFTDGMeasured.setDescription('This object describes the minimum Frame Transfer Delay (FTD) for Green Packets.')
satResultStatsAvgFTDGMeasured = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsAvgFTDGMeasured.setStatus('current')
if mibBuilder.loadTexts: satResultStatsAvgFTDGMeasured.setDescription('This object describes the average Frame Transfer Delay (FTD) for Green Packets.')
satResultStatsMaxFTDGMeasured = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsMaxFTDGMeasured.setStatus('current')
if mibBuilder.loadTexts: satResultStatsMaxFTDGMeasured.setDescription('This object describes the maximum Frame Transfer Delay (FTD) for Green Packets.')
satResultStatsIMinFDVGMeasured = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsIMinFDVGMeasured.setStatus('current')
if mibBuilder.loadTexts: satResultStatsIMinFDVGMeasured.setDescription('This object describes the minimum Frame Delay Variation (FDV) for Green Packets.')
satResultStatsIAvgFDVGMeasured = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsIAvgFDVGMeasured.setStatus('current')
if mibBuilder.loadTexts: satResultStatsIAvgFDVGMeasured.setDescription('This object describes the average Frame Delay Variation (FDV) for Green Packets.')
satResultStatsIMaxFDVGMeasured = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsIMaxFDVGMeasured.setStatus('current')
if mibBuilder.loadTexts: satResultStatsIMaxFDVGMeasured.setDescription('This object describes the maximum Frame Delay Variation (FDV) for Green Packets.')
satResultStatsISyncErrorsNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsISyncErrorsNum.setStatus('current')
if mibBuilder.loadTexts: satResultStatsISyncErrorsNum.setDescription('The number of (time) Synchronization Errors between SAT Control and SAT Responder in the current Test.')
satResultStatsIfNegFLG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsIfNegFLG.setStatus('current')
if mibBuilder.loadTexts: satResultStatsIfNegFLG.setDescription("This object means whether negative green frame loss.\n           True: negative loss of green packets occurs, which means receiving more green packets than expected.\n           False: negative loss of green packets doesn't occur, which means not receiving more green packets than expected.")
satResultStatsIfNegFLY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsIfNegFLY.setStatus('current')
if mibBuilder.loadTexts: satResultStatsIfNegFLY.setDescription("This object means whether negative yellow frame loss.\n           True: negative loss of yellow packets occurs, which means receiving more yellow packets than expected.\n           False: negative loss of yellow packets doesn't occur, which means not receiving more yellow packets than expected.")
satResultStatsAvgIRT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsAvgIRT.setStatus('current')
if mibBuilder.loadTexts: satResultStatsAvgIRT.setDescription('This object describes Average IR of total packets, non distinguishing green or yellow. Only valid for color blind test.')
satResultStatsFlrTMeasured = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsFlrTMeasured.setStatus('current')
if mibBuilder.loadTexts: satResultStatsFlrTMeasured.setDescription('This object describes the Frame Loss Ratio (FLR) for Total Packets.\n           No distinguish color, negative value means receiving much more packets than expected.\n           Only valid for color blind test.\n           If its value is 26000001, it means 26.000001% frame lost.')
satResultStatsFlTCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsFlTCounts.setStatus('current')
if mibBuilder.loadTexts: satResultStatsFlTCounts.setDescription('This object describes the Frame Loss (FL) count for Total Packets.')
satResultStatsIfNegFLT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 3, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResultStatsIfNegFLT.setStatus('current')
if mibBuilder.loadTexts: satResultStatsIfNegFLT.setDescription("This object means whether negative total frame loss.\n           True: negative loss of green packets occurs, which means receiving more green packets than expected.\n           False: negative loss of green packets doesn't occur, which means not receiving more green packets than expected.")
satSacProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 4), )
if mibBuilder.loadTexts: satSacProfileTable.setStatus('current')
if mibBuilder.loadTexts: satSacProfileTable.setDescription('A list of entries for the control of SAT Service Acceptance Criteria (SAC) Profile.')
satSacProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 4, 1), ).setIndexNames((0, "CM-SAT-MIB", "satSacProfileIndex"))
if mibBuilder.loadTexts: satSacProfileEntry.setStatus('current')
if mibBuilder.loadTexts: satSacProfileEntry.setDescription('A conceptual row in the satSacProfileTable.')
satSacProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: satSacProfileIndex.setStatus('current')
if mibBuilder.loadTexts: satSacProfileIndex.setDescription('The index of SAT Service Acceptance Criteria (SAC) Profile.')
satSacProfileAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satSacProfileAlias.setStatus('current')
if mibBuilder.loadTexts: satSacProfileAlias.setDescription('The alias of SAT Service Acceptance Criteria (SAC) Profile.')
satSacProfileFLR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satSacProfileFLR.setStatus('current')
if mibBuilder.loadTexts: satSacProfileFLR.setDescription('The Frame Loss Ratio (FLR) acceptance criteria of this SAC Profile.\n           From the EGX8.2 and GE110 7.1, If its value is 26000001, it means 26.000001% frame lost.\n           For the earlier release, If its value is 260001, it means 26.0001% frame lost.')
satSacProfileFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 4, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satSacProfileFTD.setStatus('current')
if mibBuilder.loadTexts: satSacProfileFTD.setDescription('The Frame Transfer Delay (FTD) acceptance criteria of this SAC Profile.')
satSacProfileFDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 4, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satSacProfileFDV.setStatus('current')
if mibBuilder.loadTexts: satSacProfileFDV.setDescription('The frame transfer delay variation of SAT Service Acceptance Criteria (SAC) Profile.')
satSacProfileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 4, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: satSacProfileStorageType.setStatus('current')
if mibBuilder.loadTexts: satSacProfileStorageType.setDescription('The type of storage configured for this entry.')
satSacProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: satSacProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: satSacProfileRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of satSacProfileRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            satSacProfileRowStatus value as createAndGo(4).\n            Upon successful row creation, this variable has a\n            value of active(1).\n\n            The satSacProfileRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
satResponderSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 5), )
if mibBuilder.loadTexts: satResponderSessionTable.setStatus('current')
if mibBuilder.loadTexts: satResponderSessionTable.setDescription('A list of entries for the control of SAT Responder Session.')
satResponderSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 5, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-SAT-MIB", "satResponderSessionIndex"))
if mibBuilder.loadTexts: satResponderSessionEntry.setStatus('current')
if mibBuilder.loadTexts: satResponderSessionEntry.setDescription('A conceptual row in the satResponderSessionTable.')
satResponderSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: satResponderSessionIndex.setStatus('current')
if mibBuilder.loadTexts: satResponderSessionIndex.setDescription('The index of the entry.')
satResponderSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResponderSessionId.setStatus('current')
if mibBuilder.loadTexts: satResponderSessionId.setDescription('The id of active test session negotiated between SAT Responder and SAT Control.')
satResponderSessionControlMepMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResponderSessionControlMepMacAddr.setStatus('current')
if mibBuilder.loadTexts: satResponderSessionControlMepMacAddr.setDescription("This object describes the Control MEP's MAC Address.")
satResponderSessionMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 5, 1, 4), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satResponderSessionMepId.setStatus('current')
if mibBuilder.loadTexts: satResponderSessionMepId.setDescription('The local MEP Id.')
satResponderSessionStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 5, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: satResponderSessionStorageType.setStatus('current')
if mibBuilder.loadTexts: satResponderSessionStorageType.setDescription('The type of storage configured for this entry.')
satResponderSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: satResponderSessionRowStatus.setStatus('current')
if mibBuilder.loadTexts: satResponderSessionRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of satResponderSessionRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            satResponderSessionRowStatus value as createAndGo(4).\n            Upon successful row creation, this variable has a\n            value of active(1).\n\n            The satResponderSessionRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
networkElementSatParamsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 6), )
if mibBuilder.loadTexts: networkElementSatParamsTable.setStatus('current')
if mibBuilder.loadTexts: networkElementSatParamsTable.setDescription('Entries may be auto discovered, or can be explicitly created by \n          SNMP Manager.  Each remotely discovered shelf is represented as \n          a row in this table.')
networkElementSatParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 6, 1), )
networkElementEntry.registerAugmentions(("CM-SAT-MIB", "networkElementSatParamsEntry"))
networkElementSatParamsEntry.setIndexNames(*networkElementEntry.getIndexNames())
if mibBuilder.loadTexts: networkElementSatParamsEntry.setStatus('current')
if mibBuilder.loadTexts: networkElementSatParamsEntry.setDescription('A conceptual row in the networkElementSatParamsTable.')
neSatParamsEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 6, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neSatParamsEtherType.setStatus('current')
if mibBuilder.loadTexts: neSatParamsEtherType.setDescription('This object describes the SAT System EtherType.')
satCfmMepExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 7), )
if mibBuilder.loadTexts: satCfmMepExtTable.setStatus('current')
if mibBuilder.loadTexts: satCfmMepExtTable.setDescription('This objects describe the SAT responder whether enabled on the MEP.')
satCfmMepExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 7, 1), )
dot1agCfmMepEntry.registerAugmentions(("CM-SAT-MIB", "satCfmMepExtEntry"))
satCfmMepExtEntry.setIndexNames(*dot1agCfmMepEntry.getIndexNames())
if mibBuilder.loadTexts: satCfmMepExtEntry.setStatus('current')
if mibBuilder.loadTexts: satCfmMepExtEntry.setDescription('A conceptual row in the satCfmMepExtTable.')
satCfmMepSatResponderEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 1, 7, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satCfmMepSatResponderEnabled.setStatus('current')
if mibBuilder.loadTexts: satCfmMepSatResponderEnabled.setDescription('This objects describes the SAT Responder whether enabled on the MEP.')
cmServActivationCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 3, 1))
cmServActivationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 3, 2))
cmServActivationCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 3, 1, 1)).setObjects(("CM-SAT-MIB", "cmSatGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmServActivationCompliance = cmServActivationCompliance.setStatus('current')
if mibBuilder.loadTexts: cmServActivationCompliance.setDescription('Describes the requirements for conformance to the CM SAT\n             group.')
cmSatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 28, 3, 2, 1)).setObjects(("CM-SAT-MIB", "satControlIndex"), ("CM-SAT-MIB", "satControlName"), ("CM-SAT-MIB", "satControlTestMode"), ("CM-SAT-MIB", "satControlTestProcedures"), ("CM-SAT-MIB", "satControlConfigTestDuration"), ("CM-SAT-MIB", "satControlConfigCIRTestStepNum"), ("CM-SAT-MIB", "satControlConfigCIRTestStepDuration"), ("CM-SAT-MIB", "satControlPerfTestDuration"), ("CM-SAT-MIB", "satControlStatus"), ("CM-SAT-MIB", "satControlAction"), ("CM-SAT-MIB", "satControlFailCause"), ("CM-SAT-MIB", "satControlTestStartTime"), ("CM-SAT-MIB", "satControlFlpduTagOverride"), ("CM-SAT-MIB", "satStreamIndex"), ("CM-SAT-MIB", "satStreamName"), ("CM-SAT-MIB", "satStreamTestPort"), ("CM-SAT-MIB", "satStreamTestDirection"), ("CM-SAT-MIB", "satStreamDestMacAddress"), ("CM-SAT-MIB", "satStreamFramePayloadType"), ("CM-SAT-MIB", "satStreamCustomFramePayload"), ("CM-SAT-MIB", "satStreamFrameSizeList"), ("CM-SAT-MIB", "satStreamSacProfileId"), ("CM-SAT-MIB", "satStreamSrcMepId"), ("CM-SAT-MIB", "satStreamDestMepType"), ("CM-SAT-MIB", "satStreamDestMepId"), ("CM-SAT-MIB", "satStreamDestMepMacAddr"), ("CM-SAT-MIB", "satStreamDmmPacketSize"), ("CM-SAT-MIB", "satStreamDmmPacketInterval"), ("CM-SAT-MIB", "satStreamOverallResult"), ("CM-SAT-MIB", "satStreamAction"), ("CM-SAT-MIB", "satStreamStatus"), ("CM-SAT-MIB", "satStreamCurrentTestProcedure"), ("CM-SAT-MIB", "satStreamCurrentConfigCirTestStep"), ("CM-SAT-MIB", "satStreamInner1VlanId"), ("CM-SAT-MIB", "satStreamInner1VlanPri"), ("CM-SAT-MIB", "satStreamInner1VlanEnabled"), ("CM-SAT-MIB", "satStreamInner1ValnEtherType"), ("CM-SAT-MIB", "satStreamInner2VlanId"), ("CM-SAT-MIB", "satStreamInner2VlanPri"), ("CM-SAT-MIB", "satStreamInner2VlanEnabled"), ("CM-SAT-MIB", "satStreamInner2VlanEtherType"), ("CM-SAT-MIB", "satStreamOuterVlanId"), ("CM-SAT-MIB", "satStreamOuterVlanPri"), ("CM-SAT-MIB", "satStreamOuterVlanEnabled"), ("CM-SAT-MIB", "satStreamOuterVlanEtherType"), ("CM-SAT-MIB", "satStreamDeiEnabled"), ("CM-SAT-MIB", "satStreamGreenPcp"), ("CM-SAT-MIB", "satStreamYellowPcp"), ("CM-SAT-MIB", "satStreamColorMode"), ("CM-SAT-MIB", "satStreamCirLo"), ("CM-SAT-MIB", "satStreamCirHi"), ("CM-SAT-MIB", "satStreamEirLo"), ("CM-SAT-MIB", "satStreamEirHi"), ("CM-SAT-MIB", "satStreamCbs"), ("CM-SAT-MIB", "satStreamEbs"), ("CM-SAT-MIB", "satStreamStorageType"), ("CM-SAT-MIB", "satStreamRowStatus"), ("CM-SAT-MIB", "satControlStorageType"), ("CM-SAT-MIB", "satControlRowStatus"), ("CM-SAT-MIB", "satStreamDmmPktPriority"), ("CM-SAT-MIB", "satStreamMFactor"), ("CM-SAT-MIB", "satStreamDestMepEnabled"), ("CM-SAT-MIB", "satStreamLlActivateEnabled"), ("CM-SAT-MIB", "satResultStatsSessionId"), ("CM-SAT-MIB", "satResultStatsTestType"), ("CM-SAT-MIB", "satResultStatsStepNumber"), ("CM-SAT-MIB", "satResultStatsStartTime"), ("CM-SAT-MIB", "satResultStatsEndTime"), ("CM-SAT-MIB", "satResultStatsStatus"), ("CM-SAT-MIB", "satResultStatsResult"), ("CM-SAT-MIB", "satResultStatsMinIRGMeasured"), ("CM-SAT-MIB", "satResultStatsAvgIRGMeasured"), ("CM-SAT-MIB", "satResultStatsMaxIRGMeasured"), ("CM-SAT-MIB", "satResultStatsMinIRYMeasured"), ("CM-SAT-MIB", "satResultStatsAvgIRYMeasured"), ("CM-SAT-MIB", "satResultStatsMaxIRYMeasured"), ("CM-SAT-MIB", "satResultStatsFlrGMeasured"), ("CM-SAT-MIB", "satResultStatsFlrYMeasured"), ("CM-SAT-MIB", "satResultStatsFlrGCounts"), ("CM-SAT-MIB", "satResultStatsFlrYCounts"), ("CM-SAT-MIB", "satResultStatsMinFTDGMeasured"), ("CM-SAT-MIB", "satResultStatsAvgFTDGMeasured"), ("CM-SAT-MIB", "satResultStatsMaxFTDGMeasured"), ("CM-SAT-MIB", "satResultStatsIMinFDVGMeasured"), ("CM-SAT-MIB", "satResultStatsIAvgFDVGMeasured"), ("CM-SAT-MIB", "satResultStatsIMaxFDVGMeasured"), ("CM-SAT-MIB", "satResultStatsISyncErrorsNum"), ("CM-SAT-MIB", "satResultStatsIfNegFLG"), ("CM-SAT-MIB", "satResultStatsIfNegFLY"), ("CM-SAT-MIB", "satResultStatsAvgIRT"), ("CM-SAT-MIB", "satResultStatsFlrTMeasured"), ("CM-SAT-MIB", "satResultStatsFlTCounts"), ("CM-SAT-MIB", "satResultStatsIfNegFLT"), ("CM-SAT-MIB", "satSacProfileIndex"), ("CM-SAT-MIB", "satSacProfileAlias"), ("CM-SAT-MIB", "satSacProfileFLR"), ("CM-SAT-MIB", "satSacProfileFTD"), ("CM-SAT-MIB", "satSacProfileFDV"), ("CM-SAT-MIB", "satSacProfileStorageType"), ("CM-SAT-MIB", "satSacProfileRowStatus"), ("CM-SAT-MIB", "satResponderSessionIndex"), ("CM-SAT-MIB", "satResponderSessionId"), ("CM-SAT-MIB", "satResponderSessionControlMepMacAddr"), ("CM-SAT-MIB", "satResponderSessionMepId"), ("CM-SAT-MIB", "satResponderSessionStorageType"), ("CM-SAT-MIB", "satResponderSessionRowStatus"), ("CM-SAT-MIB", "satCfmMepSatResponderEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmSatGroup = cmSatGroup.setStatus('current')
if mibBuilder.loadTexts: cmSatGroup.setDescription('A collection of objects used to manage the CM SAT functionality.')
mibBuilder.exportSymbols("CM-SAT-MIB", satSacProfileAlias=satSacProfileAlias, satStreamFramePayloadType=satStreamFramePayloadType, satStreamInner1VlanPri=satStreamInner1VlanPri, satResultStatsFlTCounts=satResultStatsFlTCounts, SatStatus=SatStatus, satResponderSessionId=satResponderSessionId, satStreamCurrentTestProcedure=satStreamCurrentTestProcedure, satControlTable=satControlTable, satStreamEbs=satStreamEbs, satResultStatsMinIRYMeasured=satResultStatsMinIRYMeasured, satSacProfileRowStatus=satSacProfileRowStatus, networkElementSatParamsEntry=networkElementSatParamsEntry, satCfmMepSatResponderEnabled=satCfmMepSatResponderEnabled, SatTestAction=SatTestAction, satSacProfileIndex=satSacProfileIndex, satControlIndex=satControlIndex, SatFramePayloadType=SatFramePayloadType, satResultStatsMaxIRYMeasured=satResultStatsMaxIRYMeasured, satStreamInner1VlanId=satStreamInner1VlanId, satStreamStorageType=satStreamStorageType, satResultStatsSessionId=satResultStatsSessionId, satResultStatsAvgIRYMeasured=satResultStatsAvgIRYMeasured, satStreamInner2VlanEnabled=satStreamInner2VlanEnabled, satResultStatsAvgIRGMeasured=satResultStatsAvgIRGMeasured, satStreamOuterVlanEtherType=satStreamOuterVlanEtherType, SatResult=SatResult, cmServActivationNotifications=cmServActivationNotifications, satResultStatsFlrGCounts=satResultStatsFlrGCounts, cmServActivationCompliance=cmServActivationCompliance, satStreamColorMode=satStreamColorMode, satControlEntry=satControlEntry, satResultStatsFlrGMeasured=satResultStatsFlrGMeasured, satResultStatsEndTime=satResultStatsEndTime, satControlAction=satControlAction, satControlTestProcedures=satControlTestProcedures, satStreamDmmPktPriority=satStreamDmmPktPriority, satStreamTestPort=satStreamTestPort, satStreamOverallResult=satStreamOverallResult, satStreamCirLo=satStreamCirLo, satStreamInner2VlanEtherType=satStreamInner2VlanEtherType, satStreamName=satStreamName, satStreamDestMepId=satStreamDestMepId, satStreamDmmPacketSize=satStreamDmmPacketSize, satCfmMepExtEntry=satCfmMepExtEntry, satControlConfigCIRTestStepDuration=satControlConfigCIRTestStepDuration, satStreamRowStatus=satStreamRowStatus, satStreamAction=satStreamAction, satStreamFrameSizeList=satStreamFrameSizeList, satControlStatus=satControlStatus, satResultStatsIMaxFDVGMeasured=satResultStatsIMaxFDVGMeasured, satStreamDestMepEnabled=satStreamDestMepEnabled, SatProceduresList=SatProceduresList, satStreamCurrentConfigCirTestStep=satStreamCurrentConfigCirTestStep, satResultStatsTestType=satResultStatsTestType, satResultStatsMaxFTDGMeasured=satResultStatsMaxFTDGMeasured, satStreamYellowPcp=satStreamYellowPcp, neSatParamsEtherType=neSatParamsEtherType, satSacProfileFTD=satSacProfileFTD, satStreamDeiEnabled=satStreamDeiEnabled, satResultStatsFlrYCounts=satResultStatsFlrYCounts, satControlTestStartTime=satControlTestStartTime, satStreamDestMepType=satStreamDestMepType, satStreamDestMacAddress=satStreamDestMacAddress, satResultStatsIAvgFDVGMeasured=satResultStatsIAvgFDVGMeasured, satStreamTestDirection=satStreamTestDirection, satControlConfigCIRTestStepNum=satControlConfigCIRTestStepNum, satResultStatsMaxIRGMeasured=satResultStatsMaxIRGMeasured, satResponderSessionTable=satResponderSessionTable, satControlFlpduTagOverride=satControlFlpduTagOverride, networkElementSatParamsTable=networkElementSatParamsTable, satStreamDmmPacketInterval=satStreamDmmPacketInterval, satSacProfileEntry=satSacProfileEntry, cmServActivationGroups=cmServActivationGroups, satStreamMFactor=satStreamMFactor, satResultStatsStartTime=satResultStatsStartTime, cmServActivationConformance=cmServActivationConformance, satStreamEntry=satStreamEntry, satControlName=satControlName, satStreamCbs=satStreamCbs, satResultStatsFlrYMeasured=satResultStatsFlrYMeasured, cmServiceActivationMIB=cmServiceActivationMIB, satStreamEirLo=satStreamEirLo, satStreamSacProfileId=satStreamSacProfileId, cmServActivationCompliances=cmServActivationCompliances, SatDirection=SatDirection, satStreamOuterVlanId=satStreamOuterVlanId, satResultStatsFlrTMeasured=satResultStatsFlrTMeasured, satResultStatsIfNegFLG=satResultStatsIfNegFLG, satResultStatsIMinFDVGMeasured=satResultStatsIMinFDVGMeasured, satControlStorageType=satControlStorageType, satControlConfigTestDuration=satControlConfigTestDuration, satResultStatsTable=satResultStatsTable, satResultStatsIfNegFLT=satResultStatsIfNegFLT, satSacProfileTable=satSacProfileTable, satResultStatsISyncErrorsNum=satResultStatsISyncErrorsNum, satStreamGreenPcp=satStreamGreenPcp, satStreamInner2VlanId=satStreamInner2VlanId, satStreamEirHi=satStreamEirHi, satResponderSessionMepId=satResponderSessionMepId, satStreamOuterVlanEnabled=satStreamOuterVlanEnabled, satStreamSrcMepId=satStreamSrcMepId, satResultStatsIfNegFLY=satResultStatsIfNegFLY, satResponderSessionEntry=satResponderSessionEntry, satControlRowStatus=satControlRowStatus, satStreamCustomFramePayload=satStreamCustomFramePayload, satResultStatsResult=satResultStatsResult, satResultStatsMinFTDGMeasured=satResultStatsMinFTDGMeasured, satStreamOuterVlanPri=satStreamOuterVlanPri, satStreamIndex=satStreamIndex, satStreamDestMepMacAddr=satStreamDestMepMacAddr, satResultStatsStepNumber=satResultStatsStepNumber, satResultStatsAvgFTDGMeasured=satResultStatsAvgFTDGMeasured, satControlFailCause=satControlFailCause, satStreamInner2VlanPri=satStreamInner2VlanPri, satControlTestMode=satControlTestMode, satResultStatsStatus=satResultStatsStatus, PYSNMP_MODULE_ID=cmServiceActivationMIB, satStreamLlActivateEnabled=satStreamLlActivateEnabled, SatProceduresType=SatProceduresType, satResponderSessionControlMepMacAddr=satResponderSessionControlMepMacAddr, satResultStatsAvgIRT=satResultStatsAvgIRT, satResponderSessionIndex=satResponderSessionIndex, satResponderSessionStorageType=satResponderSessionStorageType, satStreamInner1VlanEnabled=satStreamInner1VlanEnabled, satStreamCirHi=satStreamCirHi, satStreamStatus=satStreamStatus, satSacProfileFLR=satSacProfileFLR, satResultStatsEntry=satResultStatsEntry, satResultStatsMinIRGMeasured=satResultStatsMinIRGMeasured, satStreamTable=satStreamTable, satSacProfileFDV=satSacProfileFDV, satControlPerfTestDuration=satControlPerfTestDuration, satCfmMepExtTable=satCfmMepExtTable, cmSatGroup=cmSatGroup, satStreamInner1ValnEtherType=satStreamInner1ValnEtherType, ServiceActivationTestMode=ServiceActivationTestMode, cmServActivationObjects=cmServActivationObjects, satSacProfileStorageType=satSacProfileStorageType, satResponderSessionRowStatus=satResponderSessionRowStatus)
