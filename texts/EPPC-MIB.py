#
# PySNMP MIB module EPPC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/powerwalker/EPPC-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 12:25:09 2024
# On host fv-az1789-327 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, enterprises, NotificationType, IpAddress, ModuleIdentity, iso, Bits, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, ObjectIdentity, Counter32, NotificationType, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "enterprises", "NotificationType", "IpAddress", "ModuleIdentity", "iso", "Bits", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "ObjectIdentity", "Counter32", "NotificationType", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
PositiveInteger, NonNegativeInteger = mibBuilder.importSymbols("UPS-MIB", "PositiveInteger", "NonNegativeInteger")
ppc = MibIdentifier((1, 3, 6, 1, 4, 1, 935))
device = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10))
upsAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1))
upsE = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 1))
upsETraps = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 2))
upsEIdentity = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 1))
upsESystemSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2))
upsEBatterySystem = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3))
upsEPowerConverterSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4))
upsELoadSegment = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 5))
upsEEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6))
upsEBatteryTest = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7))
upsEControl = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8))
upsETrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 9))
upsEIdentityManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEIdentityManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: upsEIdentityManufacturer.setDescription('The name of the UPS manufacturer.')
upsEIdentityModel = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEIdentityModel.setStatus('mandatory')
if mibBuilder.loadTexts: upsEIdentityModel.setDescription('The UPS Model designation.')
upsEIdentityUPSFirmwareVerison = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEIdentityUPSFirmwareVerison.setStatus('mandatory')
if mibBuilder.loadTexts: upsEIdentityUPSFirmwareVerison.setDescription('The UPS firmware/software version(s).')
upsEIndentityUPSSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEIndentityUPSSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: upsEIndentityUPSSerialNumber.setDescription("optional.\n                               Most UPS don't supply the value of UPS serial No.")
upsEIdentityDescription = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEIdentityDescription.setStatus('mandatory')
if mibBuilder.loadTexts: upsEIdentityDescription.setDescription('A string to identify the UPS. This object should be\n               set by the administrator.')
upsEIdentityAgentSoftwareVerison = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEIdentityAgentSoftwareVerison.setStatus('mandatory')
if mibBuilder.loadTexts: upsEIdentityAgentSoftwareVerison.setDescription('The Network Management Card software/firmware version.  \n                               This variable may or may not have the same value as\n                               upsEIdentGroupUPSSoftwareVersion in some implementations.')
upsEIdentityAttachedDevices = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEIdentityAttachedDevices.setStatus('mandatory')
if mibBuilder.loadTexts: upsEIdentityAttachedDevices.setDescription('A string identifying the devices attached to the output(s) \n                               of the UPS. This object should be set by the administrator')
upsESystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("power-on", 1), ("stand-by", 2), ("by-pass", 3), ("line", 4), ("battery", 5), ("battery-test", 6), ("fault", 7), ("converter", 8), ("eco", 9), ("shutdown", 10), ("on-booster", 11), ("on-reducer", 12), ("other", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemStatus.setDescription('The indication of UPS system status.')
upsESystemTemperature = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemTemperature.setDescription('The temperature of UPS presented in 0.1 degree.')
upsESystemWarningCode = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemWarningCode.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemWarningCode.setDescription("The warning code of UPS. Please refer the warning table \n                              of 'Q6' for details.")
upsESystemFaultCode = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemFaultCode.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemFaultCode.setDescription("The fault code of UPS.Please refer the fault code\n                              of 'Q6' for details.")
upsESystemConfigInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemConfigInputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemConfigInputVoltage.setDescription('The magnitude of the nominal input voltage presented in 0.1 V. On those \n                               systems  which support read-write access to this object, if there is an \n                               attempt to set this variable to a value that is not supported,\n                               the request must be rejected and the agent shall respond with an \n                               appropriate error message, i.e., badValue for SNMPv1, or \n                               inconsistentValue for SNMPv2.')
upsESystemConfigInputFrequence = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemConfigInputFrequence.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemConfigInputFrequence.setDescription('The nominal input frequency presented in 0.1 Hz. On those systems which support \n                               read-write access to this object, if there is an attempt to \n                               set this variable to a value that is not supported, the request \n                               must be rejected and the agent shall respond with an appropriate \n                               error message, i.e., badValue for SNMPv1, or inconsistentValue for SNMPv2.')
upsESystemConfigOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 7), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemConfigOutputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemConfigOutputVoltage.setDescription('The magnitude of the nominal output voltage presented in 0.1V. On those systems\n                               which support read-write access to this object, if there is an \n                               attempt to set this variable to a value that is not supported, \n                               the request must be rejected and the agent shall respond with an\n                               appropriate error message, i.e., badValue for SNMPv1, or \n                               inconsistentValue for SNMPv2')
upsESystemConfigOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 8), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemConfigOutputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemConfigOutputFrequency.setDescription('The nominal output frequency presented in 0.1Hz. On those systems which support \n                               read-write access to this object, if there is an attempt to set \n                               this variable to a value that is not supported, the request must\n                               be rejected and the agent shall respond with an appropriate error \n                               message, i.e., badValue for SNMPv1, or inconsistentValue for SNMPv2.')
upsESystemConfigOutputVA = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 9), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemConfigOutputVA.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemConfigOutputVA.setDescription('The magnitude of the nominal Volt-Amp rating presented in VA.')
upsESystemConfigOutputPower = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 10), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemConfigOutputPower.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemConfigOutputPower.setDescription('The magnitude of the nominal true power rating presented in W .')
upsESystemConfigOutputLoadHighSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 11), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsESystemConfigOutputLoadHighSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemConfigOutputLoadHighSetPoint.setDescription('The maximum output load allowed before the load is too high for \n                               UPS operation ')
upsESystemConfigOverTemperatureSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 12), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsESystemConfigOverTemperatureSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemConfigOverTemperatureSetPoint.setDescription('The maximum temperature allowed before the UPS\n                                         operation temperature is too high, presented in 0.1 degree.')
upsESystemInputSourceNum = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemInputSourceNum.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemInputSourceNum.setDescription('The present external source of input power.')
upsESystemInputLineBads = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemInputLineBads.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemInputLineBads.setDescription('The number of times the Input was out of tolerance in voltage or frequency.\n                               Its value should be initialized 0 after agent restarting. ')
upsESystemInputNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 15), PositiveInteger().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemInputNumPhases.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemInputNumPhases.setDescription('The number of input phase utilized is this device, serves as the table index.\n                               This value indicate the device initialized feature.')
upsESystemInputTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 16), )
if mibBuilder.loadTexts: upsESystemInputTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemInputTable.setDescription('A list of input table entries. The number of entries is given by the \n                            value of upsESystemInputNumPhase.')
upsESystemInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 16, 1), ).setIndexNames((0, "EPPC-MIB", "upsESystemInputPhase"))
if mibBuilder.loadTexts: upsESystemInputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemInputEntry.setDescription('An entry containing information applicable to a particular input line.')
upsESystemInputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 16, 1, 1), PositiveInteger().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: upsESystemInputPhase.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemInputPhase.setDescription('The number of the phase. Serves as index for input table')
upsESystemInputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 16, 1, 2), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemInputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemInputFrequency.setDescription('The measured input frquency from the UPS meters in 0.1Hz.')
upsESystemInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 16, 1, 3), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemInputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemInputVoltage.setDescription('The measured input voltage from the UPS meters in 0.1 volts')
upsESystemInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 16, 1, 4), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemInputCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemInputCurrent.setDescription('The measured input mandatory from the UPS meters in 0.1 amps.')
upsESystemInputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 16, 1, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemInputWatts.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemInputWatts.setDescription('The measured input real power in watts.')
upsESystemOutputNumPhase = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 17), PositiveInteger().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemOutputNumPhase.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemOutputNumPhase.setDescription('The number of metered output phases, serves as the table index.\n                               This value indicate the device initialized feature.')
upsESystemOutputTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 18), )
if mibBuilder.loadTexts: upsESystemOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemOutputTable.setDescription('A list of output table entries. The number of entries is given \n                                by the value of upsESystemOutputNumPhase.')
upsESystemOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 18, 1), ).setIndexNames((0, "EPPC-MIB", "upsESystemOutputPhase"))
if mibBuilder.loadTexts: upsESystemOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemOutputEntry.setDescription('An entry containing information applicable to a particular line.')
upsESystemOutputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 18, 1, 1), PositiveInteger().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: upsESystemOutputPhase.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemOutputPhase.setDescription('The number of the phase. Serves as index for output table')
upsESystemOutputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 18, 1, 2), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemOutputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemOutputFrequency.setDescription('The measured output frequency from the UPS meters in 0.1Hz.')
upsESystemOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 18, 1, 3), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemOutputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemOutputVoltage.setDescription('The measured output voltage from the UPS meters in 0.1 volts')
upsESystemOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 18, 1, 4), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemOutputCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemOutputCurrent.setDescription('The measured output mandatory from the UPS meters in 0.1 amps.')
upsESystemOutputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 18, 1, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemOutputWatts.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemOutputWatts.setDescription('The measured output real power in watts.')
upsESystemOutputVA = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 18, 1, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemOutputVA.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemOutputVA.setDescription('The measured output real complex power in VA.')
upsESystemOutputLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 18, 1, 7), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemOutputLoad.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemOutputLoad.setDescription('The UPS output load in percent of rated capacity.')
upsESystemBypassNumPhase = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 19), PositiveInteger().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemBypassNumPhase.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemBypassNumPhase.setDescription('The number of  bypass phases, serves as the table index.\n                               This value indicate the device initialized feature')
upsESystemBypassTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 20), )
if mibBuilder.loadTexts: upsESystemBypassTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemBypassTable.setDescription('A list of bypass table entries. The number of entries is given by the\n                            value of upsESystemBypassNumPhase.')
upsESystemBypassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 20, 1), ).setIndexNames((0, "EPPC-MIB", "upsESystemBypassPhase"))
if mibBuilder.loadTexts: upsESystemBypassEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemBypassEntry.setDescription('An entry containing information applicable to a particular line.')
upsESystemBypassPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 20, 1, 1), PositiveInteger().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: upsESystemBypassPhase.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemBypassPhase.setDescription('The number of the phase. Serves as index for bypass table')
upsESystemBypassFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 20, 1, 2), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemBypassFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemBypassFrequency.setDescription('The measured bypass frequency from the UPS meters in 0.1 Hz.')
upsESystemBypassVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 20, 1, 3), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemBypassVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemBypassVoltage.setDescription('The measured bypass voltage from the UPS meters in 0.1 volts')
upsESystemBypassCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 20, 1, 4), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemBypassCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemBypassCurrent.setDescription('The measured bypass mandatory from the UPS meters in 0.1 amps')
upsESystemBypassWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 20, 1, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemBypassWatts.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemBypassWatts.setDescription('The measured input real power in watts.')
upsESystemConfigBelowCapacityLimit = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 21), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsESystemConfigBelowCapacityLimit.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemConfigBelowCapacityLimit.setDescription('The UPS batteries capacity(%) limit for shutdown')
upsESystemConfigBelowRemainTimeLimit = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 2, 22), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsESystemConfigBelowRemainTimeLimit.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemConfigBelowRemainTimeLimit.setDescription('The UPS batteries backup time(minute) limit for shutdown')
upsEBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("batteryNormal", 2), ("batteryLow", 3), ("batteryDepleted", 4), ("batteryDischarging", 5), ("batteryFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEBatteryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsEBatteryStatus.setDescription(' The status of UPS battery, a value of batteryLow indicates\n                                that the battery-low status bit has been set from device. \n                                A value of batteryDepleted indicates that the UPS will be \n                                unable to sustain the present load when and if the utility \n                                power is lost (including the possibility that the  utility \n                                power is mandatoryly absent and the UPS is unable to sustain\n                                the output)')
upsESecondsOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 2), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESecondsOnBattery.setStatus('mandatory')
if mibBuilder.loadTexts: upsESecondsOnBattery.setDescription('If the unit is on battery power, the elapsed time\n                                   since the UPS last switched to battery power, or the\n                                   time since the network management subsystem was last\n                                   restarted, whichever is less. 0 shall be returned\n                                   if the unit is not on battery power')
upsEBatteryEstimatedMinutesRemaining = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 3), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEBatteryEstimatedMinutesRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: upsEBatteryEstimatedMinutesRemaining.setDescription('An estimate of the time to battery charge depletion\n                                   under the present load conditions if the utility power\n                                   is off and remains off, or if it were to be lost and\n                                   remain off.')
upsEBatteryEstimatedChargeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEBatteryEstimatedChargeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: upsEBatteryEstimatedChargeRemaining.setDescription('An estimate of the battery charge remaining expressed\n                                   as a percent of full charge')
upsEPositiveBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEPositiveBatteryVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsEPositiveBatteryVoltage.setDescription('The magnitude of the present positive battery voltage in 0.1 Volt DC')
upsENegativeBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsENegativeBatteryVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsENegativeBatteryVoltage.setDescription('The magnitude of the present negative battery voltage in 0.1 Volt DC')
upsEBatteryCellNumber = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 7), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEBatteryCellNumber.setStatus('mandatory')
if mibBuilder.loadTexts: upsEBatteryCellNumber.setDescription('This object indicate the cell number of each set.')
upsEBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEBatteryTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: upsEBatteryTemperature.setDescription('The ambient temperature at or near the UPS Battery\n                               casing in 0.1 degree.')
upsEBatteryLastReplacedDate = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEBatteryLastReplacedDate.setStatus('mandatory')
if mibBuilder.loadTexts: upsEBatteryLastReplacedDate.setDescription('The date when the Batteries in this UPS were last replaced.\n                               The format should be DD/MM/YYYY.')
upsEBatteryABMStatus = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("charge", 1), ("float", 2), ("rest", 3), ("discharge", 4), ("disable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEBatteryABMStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsEBatteryABMStatus.setDescription(' The status of ABM.')
upsEChargerModulesNum = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 11), NonNegativeInteger().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEChargerModulesNum.setStatus('mandatory')
if mibBuilder.loadTexts: upsEChargerModulesNum.setDescription("The number of charger modules inserted to UPS systems. served \n                                   as the index of the upsEChargerModulesTable.\n                                   The default value 0 indicate that the UPS system don't have \n                                   separate charger module.")
upsEChargerModulesTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 12), )
if mibBuilder.loadTexts: upsEChargerModulesTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsEChargerModulesTable.setDescription('A list of charger modules entries. The number of entries is given \n                            by the value of upsEchargerModulesNum.')
upsEChargerModulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 12, 1), ).setIndexNames((0, "EPPC-MIB", "chargerModulesNum"))
if mibBuilder.loadTexts: upsEChargerModulesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsEChargerModulesEntry.setDescription('An entry containing information applicable to a particular charger module.')
chargerModulesNum = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 12, 1, 1), PositiveInteger().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: chargerModulesNum.setStatus('mandatory')
if mibBuilder.loadTexts: chargerModulesNum.setDescription('The number of charger modules. Serves as index for charger module table')
chargerModulesAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 12, 1, 2), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chargerModulesAddress.setStatus('mandatory')
if mibBuilder.loadTexts: chargerModulesAddress.setDescription("Charger Modules' address.")
positiveChargeVotlage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 12, 1, 3), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: positiveChargeVotlage.setStatus('mandatory')
if mibBuilder.loadTexts: positiveChargeVotlage.setDescription('The measured positive charger voltage from the UPS meters in 0.1 volts')
negativeChargeVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 12, 1, 4), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: negativeChargeVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: negativeChargeVoltage.setDescription('The measured nepositive charger voltage from the UPS meters in 0.1 volts')
positiveChargeCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 12, 1, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: positiveChargeCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: positiveChargeCurrent.setDescription('The measured positive charger mandatory from the UPS meters in in 0.1 amps.')
negativeChargeCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 12, 1, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: negativeChargeCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: negativeChargeCurrent.setDescription('The measured nepositive charger mandatory from the UPS meters in 0.1 amps.')
chargerModulesTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chargerModulesTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: chargerModulesTemperature.setDescription('The measured charger temperature from the UPS meters in 0.1 degree.')
chargerModulesMode = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 3, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("powerOn", 1), ("standyby", 2), ("fault", 3), ("shutdown", 4), ("running", 5), ("suicide", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chargerModulesMode.setStatus('mandatory')
if mibBuilder.loadTexts: chargerModulesMode.setDescription('The working mode of charger modules.')
upsEUPSModulesNum = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 1), NonNegativeInteger().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEUPSModulesNum.setStatus('mandatory')
if mibBuilder.loadTexts: upsEUPSModulesNum.setDescription('The number of UPS modules inserted to UPS systems. \n                                   served as the index of the upsEModulesTable.\n                                   the default value 0 indicate that the UPS system do not\n                                   have separate UPS module.')
upsEModulesTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2), )
if mibBuilder.loadTexts: upsEModulesTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsEModulesTable.setDescription('A list of UPS modules entries. The number of entries is \n                            given by the value of upsEModulesNum.')
upsEModulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1), ).setIndexNames((0, "EPPC-MIB", "upsEModulesNum"))
if mibBuilder.loadTexts: upsEModulesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsEModulesEntry.setDescription('An entry containing information applicable to a particular upsE module.')
upsEModulesNum = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 1), PositiveInteger().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: upsEModulesNum.setStatus('mandatory')
if mibBuilder.loadTexts: upsEModulesNum.setDescription('The number of UPS modules. Serves as index for UPS module table')
upsEModuleAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleAddress.setStatus('mandatory')
if mibBuilder.loadTexts: upsEModuleAddress.setDescription('the address of UPS modules.')
upsEModulePositiveBusVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 3), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModulePositiveBusVolt.setStatus('mandatory')
if mibBuilder.loadTexts: upsEModulePositiveBusVolt.setDescription('The measured positive upsE module voltage from the UPS meters in 0.1 volts')
upsEModuleNegativeBusVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 4), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleNegativeBusVolt.setStatus('mandatory')
if mibBuilder.loadTexts: upsEModuleNegativeBusVolt.setDescription('The measured nepositive upsE module voltage from the UPS meters in 0.1 volts')
upsEModuleTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: upsEModuleTemperature.setDescription('The measured  upsE module temperature from the UPS meters in 0.1 degree.')
upsEModuleWorkingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("power-on", 1), ("stand-by", 2), ("by-pass", 3), ("line", 4), ("battery", 5), ("battery-test", 6), ("fault", 7), ("converter", 8), ("eco", 9), ("shutdown", 10), ("on-booster", 11), ("on-reducer", 12), ("other", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleWorkingMode.setStatus('mandatory')
if mibBuilder.loadTexts: upsEModuleWorkingMode.setDescription('The working mode of UPS modules.')
upsEModuleOutputCurrentR = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 7), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleOutputCurrentR.setStatus('mandatory')
if mibBuilder.loadTexts: upsEModuleOutputCurrentR.setDescription('The measured  upsE module output mandatory from the UPS meters in 0.1 A.')
upsEModuleOutputWattR = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 8), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleOutputWattR.setStatus('mandatory')
if mibBuilder.loadTexts: upsEModuleOutputWattR.setDescription('The measured  upsE module output watts from the UPS meters in watts.')
upsEModuleOutputLoadR = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleOutputLoadR.setStatus('mandatory')
if mibBuilder.loadTexts: upsEModuleOutputLoadR.setDescription('The output load of UPS modules in %.')
upsEModuleWarningCode = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleWarningCode.setStatus('mandatory')
if mibBuilder.loadTexts: upsEModuleWarningCode.setDescription("The warning code of ups modules.Please refer the warning table of 'QU,XX' for details.")
upsEModuleFaultCode = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleFaultCode.setStatus('mandatory')
if mibBuilder.loadTexts: upsEModuleFaultCode.setDescription("The fault code of ups modules.Please refer command 'QU,XX' for details.")
upsEModuleTrapState = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleTrapState.setStatus('mandatory')
if mibBuilder.loadTexts: upsEModuleTrapState.setDescription("the values indicate the unrestored traps.\n\t\t\t\t\t For example, after AC fail, so the value of upsETrapState should be '1'. \n\t\t\t\t\t And then the AC restore, the value of upsEModuleTrapState \n\t\t\t\t\t should change to empty.")
upsEModuleConfigOutputVA = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 13), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleConfigOutputVA.setStatus('mandatory')
if mibBuilder.loadTexts: upsEModuleConfigOutputVA.setDescription('The magnitude of the nominal Volt-Amp rating presented in VA.')
upsEModuleOutputCurrentS = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 14), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleOutputCurrentS.setStatus('mandatory')
if mibBuilder.loadTexts: upsEModuleOutputCurrentS.setDescription('The measured  upsE module output mandatory from the UPS meters in 0.1 A.')
upsEModuleOutputCurrentT = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 15), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleOutputCurrentT.setStatus('mandatory')
if mibBuilder.loadTexts: upsEModuleOutputCurrentT.setDescription('The measured  upsE module output mandatory from the UPS meters in 0.1 A.')
upsEModuleOutputWattS = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 16), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleOutputWattS.setStatus('mandatory')
if mibBuilder.loadTexts: upsEModuleOutputWattS.setDescription('The measured  upsE module output watts from the UPS meters in watts.')
upsEModuleOutputWattT = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 17), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleOutputWattT.setStatus('mandatory')
if mibBuilder.loadTexts: upsEModuleOutputWattT.setDescription('The measured  upsE module output watts from the UPS meters in watts.')
upsEModuleOutputLoadS = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleOutputLoadS.setStatus('mandatory')
if mibBuilder.loadTexts: upsEModuleOutputLoadS.setDescription('The output load of UPS modules in %.')
upsEModuleOutputLoadT = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleOutputLoadT.setStatus('mandatory')
if mibBuilder.loadTexts: upsEModuleOutputLoadT.setDescription('The output load of UPS modules in %.')
upsEModuleOutputVAR = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 20), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleOutputVAR.setStatus('mandatory')
if mibBuilder.loadTexts: upsEModuleOutputVAR.setDescription('The magnitude of the nominal Volt-Amp rating presented in VA.')
upsEModuleOutputVAS = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 21), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleOutputVAS.setStatus('mandatory')
if mibBuilder.loadTexts: upsEModuleOutputVAS.setDescription('The magnitude of the nominal Volt-Amp rating presented in VA.')
upsEModuleOutputVAT = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 4, 2, 1, 22), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEModuleOutputVAT.setStatus('mandatory')
if mibBuilder.loadTexts: upsEModuleOutputVAT.setDescription('The magnitude of the nominal Volt-Amp rating presented in VA.')
upsELoadSegment1OffDelay = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsELoadSegment1OffDelay.setStatus('mandatory')
if mibBuilder.loadTexts: upsELoadSegment1OffDelay.setDescription('Setting this object will shutdown the UPS Load Segment output after the indicated number of seconds, or less. \n\t\t\t\t\t Setting this object to 0 will cause the shutdown to occur immediately.  Setting this object to -1 will \n\t\t\t\t\t abort the countdown. Read this object will get countdown value of the Load Segment.')
upsELoadSegment1OnDelay = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsELoadSegment1OnDelay.setStatus('mandatory')
if mibBuilder.loadTexts: upsELoadSegment1OnDelay.setDescription('Setting this object will start the Load segment output after the indicated number of seconds, \n\t\t\t\t\t including starting the UPS, if necessary.  Setting this object to 0 will cause the startup \n\t\t\t\t\t to occur immediately.  Setting this object to -1 will abort the countdown.')
upsELoadSegment1AutoOffTimer = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsELoadSegment1AutoOffTimer.setStatus('mandatory')
if mibBuilder.loadTexts: upsELoadSegment1AutoOffTimer.setDescription('The load segment turns automatically off after the delay while the unit operates on battery, \n\t\t\t\t\t but the shutdown is cancelled if the utility return before the delay has expired.')
upsELoadSegment1AutoOnTimer = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsELoadSegment1AutoOnTimer.setStatus('mandatory')
if mibBuilder.loadTexts: upsELoadSegment1AutoOnTimer.setDescription('The load segment is automatically turned on after a selected delay \n\t\t\t\t\t if it has been shutdown due to on battery.')
upsELoadSegment1State = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("off-pending", 3), ("on-pending", 4), ("not-support", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsELoadSegment1State.setStatus('mandatory')
if mibBuilder.loadTexts: upsELoadSegment1State.setDescription('Load segment output state.')
upsELoadSegment2OffDelay = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsELoadSegment2OffDelay.setStatus('mandatory')
if mibBuilder.loadTexts: upsELoadSegment2OffDelay.setDescription('Setting this object will shutdown the UPS Load Segment output after the indicated number of seconds, or less. \n\t\t\t\t\t Setting this object to 0 will cause the shutdown to occur immediately.  Setting this object to -1 will \n\t\t\t\t\t abort the countdown. Read this object will get countdown value of the Load Segment.')
upsELoadSegment2OnDelay = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsELoadSegment2OnDelay.setStatus('mandatory')
if mibBuilder.loadTexts: upsELoadSegment2OnDelay.setDescription('Setting this object will start the Load segment output after the indicated number of seconds, \n\t\t\t\t\t including starting the UPS, if necessary.  Setting this object to 0 will cause the startup \n\t\t\t\t\t to occur immediately.  Setting this object to -1 will abort the countdown.')
upsELoadSegment2AutoOffTimer = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsELoadSegment2AutoOffTimer.setStatus('mandatory')
if mibBuilder.loadTexts: upsELoadSegment2AutoOffTimer.setDescription('The load segment turns automatically off after the delay while the unit operates on battery, \n\t\t\t\t\t but the shutdown is cancelled if the utility return before the delay has expired.')
upsELoadSegment2AutoOnTimer = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsELoadSegment2AutoOnTimer.setStatus('mandatory')
if mibBuilder.loadTexts: upsELoadSegment2AutoOnTimer.setDescription('The load segment is automatically turned on after a selected delay \n\t\t\t\t\t if it has been shutdown due to on battery.')
upsELoadSegment2State = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("off-pending", 3), ("on-pending", 4), ("not-support", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsELoadSegment2State.setStatus('mandatory')
if mibBuilder.loadTexts: upsELoadSegment2State.setDescription('Load segment output state.')
upsEEnvironmentTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 1))
upsEEnvironmentCurrentTemperature = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEEnvironmentCurrentTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: upsEEnvironmentCurrentTemperature.setDescription('The measurement of  temperature sensor, in 0.1 degree')
upsEEnvironmentTemperatureHighSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEEnvironmentTemperatureHighSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: upsEEnvironmentTemperatureHighSetPoint.setDescription('The set point for high temperature warning, in 0.1 degrees. \n\t\t\t\t\tThis value must be greater than upsEEnvironmentTemperatureLowSetPoint,\n\t\t\t\t\tand the least significant digit must be zero.')
upsEEnvironmentTemperatureHighStatus = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEEnvironmentTemperatureHighStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsEEnvironmentTemperatureHighStatus.setDescription('To enable/disable high set point check with sensor temperature.')
upsEEnvironmentTemperatureLowSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEEnvironmentTemperatureLowSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: upsEEnvironmentTemperatureLowSetPoint.setDescription('The set point for low temperature warning, in 0.1 degrees.\n\t\t\t\t\tThis value must be less than upsEEnvironmentTemperatureHighSetPoint,\n\t\t\t\t\tand the least significant digit must be zero.')
upsEEnvironmentTemperatureLowStatus = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEEnvironmentTemperatureLowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsEEnvironmentTemperatureLowStatus.setDescription('To enable/disable low set point check with sensor temperature.')
upsEEnvironmentTemperatureOffset = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEEnvironmentTemperatureOffset.setStatus('mandatory')
if mibBuilder.loadTexts: upsEEnvironmentTemperatureOffset.setDescription('The offset to calibrate temperature of EMD, in 0.1 degrees')
upsEEnvironmentHumidity = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 2))
upsEEnvironmentCurrentHumidity = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEEnvironmentCurrentHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: upsEEnvironmentCurrentHumidity.setDescription('The measurement of sensor humidity present in %.')
upsEEnvironmentHumidityHighSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEEnvironmentHumidityHighSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: upsEEnvironmentHumidityHighSetPoint.setDescription('The set point for high humidity warning, in %.\n\t\t\t\t\tThis value must be greater than upsEEnvironmentHumidityLowSetPoint.')
upsEEnvironmentHumidityHighStatus = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEEnvironmentHumidityHighStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsEEnvironmentHumidityHighStatus.setDescription('To enable/disable high set point check with emd humidity.')
upsEEnvironmentHumidityLowSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEEnvironmentHumidityLowSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: upsEEnvironmentHumidityLowSetPoint.setDescription('The set point for low humidity warning, in %.\n\t\t\t\t\tThis value must be less than upsEEnvironmentHumidityHighSetPoint.')
upsEEnvironmentHumidityLowStatus = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEEnvironmentHumidityLowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsEEnvironmentHumidityLowStatus.setDescription('To enable/disable high set point check with emd humidity.')
upsEEnvironmentHumidityOffset = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEEnvironmentHumidityOffset.setStatus('mandatory')
if mibBuilder.loadTexts: upsEEnvironmentHumidityOffset.setDescription('The offset to calibrate humidity of EMD, in %.')
upsEEnvironmentContactsNum = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 3), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEEnvironmentContactsNum.setStatus('mandatory')
if mibBuilder.loadTexts: upsEEnvironmentContactsNum.setDescription('The number of environment contacts, serves as the table index.')
upsEEnvironmentContactTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 4), )
if mibBuilder.loadTexts: upsEEnvironmentContactTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsEEnvironmentContactTable.setDescription('A list of contacts table entries. The number of entries is given by the\n                               value of upsEEnvironmentContactsNum')
upsEEnvironmentContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 4, 1), ).setIndexNames((0, "EPPC-MIB", "upsEEnvironmentContactIndex"))
if mibBuilder.loadTexts: upsEEnvironmentContactEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsEEnvironmentContactEntry.setDescription('An entry containing information applicable to a particular contact')
upsEEnvironmentContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 4, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: upsEEnvironmentContactIndex.setStatus('mandatory')
if mibBuilder.loadTexts: upsEEnvironmentContactIndex.setDescription('The number of environment contacts. Serves as index for environment contact table')
upsEEnvironmentContactType = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normallyOpen", 1), ("normallyClosed", 2), ("notUsed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEEnvironmentContactType.setStatus('mandatory')
if mibBuilder.loadTexts: upsEEnvironmentContactType.setDescription('operation type')
upsEEnvironmentContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("openWithNotice", 3), ("closedWithNotice", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEEnvironmentContactState.setStatus('mandatory')
if mibBuilder.loadTexts: upsEEnvironmentContactState.setDescription('The mandatory status.')
upsEEnvironmentContactDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 6, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEEnvironmentContactDescription.setStatus('mandatory')
if mibBuilder.loadTexts: upsEEnvironmentContactDescription.setDescription('Description of environment contact.')
upsEBatteryTestStart = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("batteryTest10Sec", 2), ("batteryTestUntilLow", 3), ("batteryTestWithTime", 4), ("cancelBatteryTest", 5), ("clearBatteryInfo", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEBatteryTestStart.setStatus('mandatory')
if mibBuilder.loadTexts: upsEBatteryTestStart.setDescription('This object specify the battery test type and initiate battery test. \n                               If battTestWithTime selected, the test  time is refer to upsEBatteryTestSettingTime.')
upsEBatteryTestSettingTime = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 2), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEBatteryTestSettingTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsEBatteryTestSettingTime.setDescription('The object specify the test time for battery test in seconds.')
upsEBatteryTestResult = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("processing", 2), ("noFailure", 3), ("failureOrWarning", 4), ("notPossible", 5), ("testCancel", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEBatteryTestResult.setStatus('mandatory')
if mibBuilder.loadTexts: upsEBatteryTestResult.setDescription('This object indicate the test result of battery.')
upsEBatteryTestStartTime = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(19, 19)).setFixedLength(19)).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEBatteryTestStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsEBatteryTestStartTime.setDescription('The value of the time the test in progress was initiated,\n         \t\t\t\t  or, if no test is in progress, the time the previous test\n         \t\t\t\t was initiated. If the value of upsETestBatteryTestResult\n        \t\t\t\t  is noTestsInitiated(6), upsETestStartTime has the value\n        \t\t\t\t  01/01/1970 00:00:00.')
upsEBatteryTestElapsedTime = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEBatteryTestElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsEBatteryTestElapsedTime.setDescription('The amount of time in format hh:mm:ss, since the test in progress \n                                         was initiated, or, if no test is in progress, the previous \n                                         test took to complete. If the value of upsTestResultsSummary \n                                         is idle(1), upsTestElapsedTime has the value 00:00:00.')
upsEBatteryTestScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 6), )
if mibBuilder.loadTexts: upsEBatteryTestScheduleTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsEBatteryTestScheduleTable.setDescription('This table describes the schedule for automatically battery\n                              test.')
upsEBatteryTestScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 6, 1), ).setIndexNames((0, "EPPC-MIB", "upsEBatteryTestScheduleIndex"))
if mibBuilder.loadTexts: upsEBatteryTestScheduleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsEBatteryTestScheduleEntry.setDescription('An entry containing information applicable to schedule test.')
upsEBatteryTestScheduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 6, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: upsEBatteryTestScheduleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: upsEBatteryTestScheduleIndex.setDescription('The index of battery test scheduled.')
upsEBatteryTestScheduleDay = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("monday", 1), ("tuesday", 2), ("wednsday", 3), ("thusday", 4), ("friday", 5), ("saturday", 6), ("sunday", 7), ("specialday", 8), ("none", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEBatteryTestScheduleDay.setStatus('mandatory')
if mibBuilder.loadTexts: upsEBatteryTestScheduleDay.setDescription('The weekday or specaial day on which the UPS should start battery test.')
upsEBatteryTestScheduleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEBatteryTestScheduleTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsEBatteryTestScheduleTime.setDescription('The time that the battery test will be initiated in hh:mm format.')
upsEBatteryTestScheduleType = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("batteryTest10sec", 2), ("batteryTestUntilLow", 3), ("batteryTestWithTime", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEBatteryTestScheduleType.setStatus('mandatory')
if mibBuilder.loadTexts: upsEBatteryTestScheduleType.setDescription('The type of battery test.')
upsEBatteryTestScheduleTestWithTime = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 6, 1, 6), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEBatteryTestScheduleTestWithTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsEBatteryTestScheduleTestWithTime.setDescription('The battery time of setting time test in seconds.')
upsEBatteryTestScheduleSpecialDay = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 7, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEBatteryTestScheduleSpecialDay.setStatus('mandatory')
if mibBuilder.loadTexts: upsEBatteryTestScheduleSpecialDay.setDescription('The special day that the battery test will be initiated in dd/mm/yyyy format.')
upsEControlOutputOffDelay = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 1), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEControlOutputOffDelay.setStatus('mandatory')
if mibBuilder.loadTexts: upsEControlOutputOffDelay.setDescription('Setting this value to other than zero will cause the UPS \n                               output to turn off after the number of seconds. ')
upsEControlOutputOnDelay = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 2), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEControlOutputOnDelay.setStatus('mandatory')
if mibBuilder.loadTexts: upsEControlOutputOnDelay.setDescription('Setting this value to other than zero will cause the \n\t\t\t\t\tUPS output to turn on after the number of seconds. ')
upsEControlOutputOnOffControl = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("upsEOutputOff", 1), ("upsEOutputOffCancel", 2), ("upsESleep", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEControlOutputOnOffControl.setStatus('mandatory')
if mibBuilder.loadTexts: upsEControlOutputOnOffControl.setDescription('upsEOutputOff ( 1 ) indicates the shutdown sequence,\n\t                                 upsEOutputOffCancel ( 2 ) indicates cancel the shutdown sequence,\n        \t                         upsESleep( 3 ) indicates shutdown UPS first, then switch on.')
upsEShutdownEventsTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 4), )
if mibBuilder.loadTexts: upsEShutdownEventsTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsEShutdownEventsTable.setDescription('This table describes the parametes for shutdown process\n                              when shutdown event occurs')
upsEShutdownEventsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 4, 1), ).setIndexNames((0, "EPPC-MIB", "upsEShutdownEvent"))
if mibBuilder.loadTexts: upsEShutdownEventsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsEShutdownEventsEntry.setDescription('An entry containing information applicable to a particular shutdown\n                               event line')
upsEShutdownEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("acFail", 1), ("batteryLow", 2), ("upsEOverLoad", 3), ("upsEOverTemperature", 4), ("upsEWeeklySchedule", 5), ("upsESpecialSchedule", 6), ("environmentTemperatureOverThreshold", 7), ("environmentHumidityOverThreshold", 8), ("environmentContact1Alarm", 9), ("environmentContact2Alarm", 10), ("belowCapacityLimit", 11), ("belowRemainTimeLimit", 12))))
if mibBuilder.loadTexts: upsEShutdownEvent.setStatus('mandatory')
if mibBuilder.loadTexts: upsEShutdownEvent.setDescription('The shutdown event identification')
upsEShutdownEventAction = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("warning", 2), ("shutdownClient", 3), ("shutdownUPS", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEShutdownEventAction.setStatus('mandatory')
if mibBuilder.loadTexts: upsEShutdownEventAction.setDescription('Status of the corresponding shutdown Event.\n \t\t\t\t\tWhen set to disable(), shutdown process will not start when\n\t\t\t\t      corresponding event occured.')
upsEShutdownwarningPeriodTime = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 4, 1, 3), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEShutdownwarningPeriodTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsEShutdownwarningPeriodTime.setDescription('The Delay in seconds after the occurance of the curresponding shutdown\n                                    event, and warning message should be popped in this period.')
upsEShutdownWarningPeriodInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 4, 1, 4), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEShutdownWarningPeriodInterval.setStatus('mandatory')
if mibBuilder.loadTexts: upsEShutdownWarningPeriodInterval.setDescription('The frequency of sending warning messages to the connected\n                                   clients when the curresponding shutdown event occurs.\n                                   The value is in units of seconds.')
upsEControlWeeklyScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 5), )
if mibBuilder.loadTexts: upsEControlWeeklyScheduleTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsEControlWeeklyScheduleTable.setDescription('The table to schedule shutting down the ups by weekly')
upsEControlWeeklyScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 5, 1), ).setIndexNames((0, "EPPC-MIB", "upsEControlWeeklyScheduleIndex"))
if mibBuilder.loadTexts: upsEControlWeeklyScheduleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsEControlWeeklyScheduleEntry.setDescription('An entry containing information applicable to a particular line')
upsEControlWeeklyScheduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 5, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: upsEControlWeeklyScheduleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: upsEControlWeeklyScheduleIndex.setDescription('the index of schedule events.')
upsEWeeklyScheduleShutdownDay = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6), ("sunday", 7), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEWeeklyScheduleShutdownDay.setStatus('mandatory')
if mibBuilder.loadTexts: upsEWeeklyScheduleShutdownDay.setDescription('the weekday on which upsE shoud shutdown')
upsEWeeklyScheduleShutdownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEWeeklyScheduleShutdownTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsEWeeklyScheduleShutdownTime.setDescription('The time that the process of shutting down the UPS will be initiated\n \t\t\t\t\tin hh:mm format.')
upsEWeeklyScheduleRestartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6), ("sunday", 7), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEWeeklyScheduleRestartDay.setStatus('mandatory')
if mibBuilder.loadTexts: upsEWeeklyScheduleRestartDay.setDescription('the weekday on which the UPS should restart.')
upsEWeeklyScheduleRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEWeeklyScheduleRestartTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsEWeeklyScheduleRestartTime.setDescription('The time the UPS will restart in hh:mm format.')
upsEControlSpecialDayScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 6), )
if mibBuilder.loadTexts: upsEControlSpecialDayScheduleTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsEControlSpecialDayScheduleTable.setDescription('The table to schedule shutting down the ups.')
upsEControlSpecialDayScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 6, 1), ).setIndexNames((0, "EPPC-MIB", "upsEControlSpecialDayScheduleIndex"))
if mibBuilder.loadTexts: upsEControlSpecialDayScheduleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsEControlSpecialDayScheduleEntry.setDescription('An entry containing information applicable to a particular line.')
upsEControlSpecialDayScheduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 6, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: upsEControlSpecialDayScheduleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: upsEControlSpecialDayScheduleIndex.setDescription('The index of special day schedule.')
upsESpecialDayScheduleShutdownDay = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsESpecialDayScheduleShutdownDay.setStatus('mandatory')
if mibBuilder.loadTexts: upsESpecialDayScheduleShutdownDay.setDescription('The special day on which UPS should shutdown with the format\n                               of DD/MM/YYYY.')
upsESpecialDayScheduleShutdownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsESpecialDayScheduleShutdownTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsESpecialDayScheduleShutdownTime.setDescription('The time that the process of shutting down the UPS will be initiated\n \t\t\t\t\tin hh:mm format.')
upsESpecialDayScheduleRestartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsESpecialDayScheduleRestartDay.setStatus('mandatory')
if mibBuilder.loadTexts: upsESpecialDayScheduleRestartDay.setDescription('The special day on which the UPS should restart with the format\n                               of DD/MM/YYYY.')
upsESpecialDayScheduleRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsESpecialDayScheduleRestartTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsESpecialDayScheduleRestartTime.setDescription('The time the UPS will restart in hh:mm format.')
upsESystemMasterOffDelay = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemMasterOffDelay.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemMasterOffDelay.setDescription('The UPS output will shutdown after the indicated number of seconds, -1 indicate no action.')
upsESystemMasterOnDelay = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsESystemMasterOnDelay.setStatus('mandatory')
if mibBuilder.loadTexts: upsESystemMasterOnDelay.setDescription('The UPS output will start on after the indicated number of seconds, -1 indicate no action.')
upsETrapsReceiversTable = MibTable((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 9, 1), )
if mibBuilder.loadTexts: upsETrapsReceiversTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsETrapsReceiversTable.setDescription(" This table list the managers'IP to send traps to.")
upsETrapsReceiversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 9, 1, 1), ).setIndexNames((0, "EPPC-MIB", "upsETrapsReceiversIndex"))
if mibBuilder.loadTexts: upsETrapsReceiversEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsETrapsReceiversEntry.setDescription('An entry containing information applicable to a particular input line.')
upsETrapsReceiversIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 9, 1, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: upsETrapsReceiversIndex.setStatus('mandatory')
if mibBuilder.loadTexts: upsETrapsReceiversIndex.setDescription('The index to a trap receiver entry')
upsETrapsReceiverAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 9, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsETrapsReceiverAddress.setStatus('mandatory')
if mibBuilder.loadTexts: upsETrapsReceiverAddress.setDescription('The IP address of the manager to send a trap to.')
upsETrapReceiverCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 9, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsETrapReceiverCommunityString.setStatus('mandatory')
if mibBuilder.loadTexts: upsETrapReceiverCommunityString.setDescription('The community name to use in the trap when\n\t\t\t\t\t sent to the manager.')
upsETrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("rfc1628Trap", 2), ("eppcTrap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsETrapType.setStatus('mandatory')
if mibBuilder.loadTexts: upsETrapType.setDescription('The type of trap to be received by the manager.')
upsETrapsSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("severe", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsETrapsSeverityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: upsETrapsSeverityLevel.setDescription('The severity level of traps to be received by this manager.')
upsETrapReceiverDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 9, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsETrapReceiverDescription.setStatus('mandatory')
if mibBuilder.loadTexts: upsETrapReceiverDescription.setDescription('Description of trap receivers')
upsETrapState = MibScalar((1, 3, 6, 1, 4, 1, 935, 10, 1, 1, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsETrapState.setStatus('mandatory')
if mibBuilder.loadTexts: upsETrapState.setDescription("the values indicate the unrestored traps.\n\t\t\t\t\t For example, after AC fail, the agent send\n\t\t\t\t\t the trap 1(AC Fail) and trap 7(battery on) to \n\t\t\t\t\t NMS. so the value of upsETrapState should be '1,7'. \n\t\t\t\t\tAnd then the AC restore, the value of upsETrapState \n\t\t\t\t\tshould change to empty.")
upsEPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,1))
if mibBuilder.loadTexts: upsEPowerFail.setDescription('WARNING: Utility power not available.')
upsEPowerRestored = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,2))
if mibBuilder.loadTexts: upsEPowerRestored.setDescription('INFORMATION: Utility power has restored.')
upsELowBattery = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,3))
if mibBuilder.loadTexts: upsELowBattery.setDescription('SEVERE: The UPS batteries are low and will soon be exhausted.')
upsEReturnFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,4))
if mibBuilder.loadTexts: upsEReturnFromLowBattery.setDescription('INFORMATION: The UPS has return from a low battery condition.')
upsEFailed = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,5))
if mibBuilder.loadTexts: upsEFailed.setDescription('SEVERE: The UPS is not working fine.')
upsEOk = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,6))
if mibBuilder.loadTexts: upsEOk.setDescription('INFORMATION: The UPS is working fine.')
upsEOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,7)).setObjects(("EPPC-MIB", "upsEBatteryEstimatedMinutesRemaining"), ("EPPC-MIB", "upsESecondsOnBattery"))
if mibBuilder.loadTexts: upsEOnBattery.setDescription('WARNING: The UPS has switched to battery backup power.')
upsENotOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,8))
if mibBuilder.loadTexts: upsENotOnBattery.setDescription('INFORMATION: The UPS is not on battery power.')
upsETestInProgress = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,9))
if mibBuilder.loadTexts: upsETestInProgress.setDescription('INFORMATION: The testing is going on ups.')
upsETestOver = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,10)).setObjects(("EPPC-MIB", "upsEBatteryTestStart"), ("EPPC-MIB", "upsEBatteryTestSettingTime"), ("EPPC-MIB", "upsEBatteryTestResult"), ("EPPC-MIB", "upsEBatteryTestStartTime"))
if mibBuilder.loadTexts: upsETestOver.setDescription('INFORMATION: The testing of UPS is completed.')
upsEBypassOn = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,11))
if mibBuilder.loadTexts: upsEBypassOn.setDescription('INFORMATION: The UPS has enabled bypass.')
upsEOnline = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,12))
if mibBuilder.loadTexts: upsEOnline.setDescription('INFORMATION: The UPS is not on Bypass and return to normal status.')
upsECommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,13))
if mibBuilder.loadTexts: upsECommunicationLost.setDescription('SEVERE: Communication to the UPS has been lost.')
upsECommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,14))
if mibBuilder.loadTexts: upsECommunicationEstablished.setDescription('INFORMATION: Communication with the UPS has been established.')
upsEGoingShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,15))
if mibBuilder.loadTexts: upsEGoingShutdown.setDescription('WARNING: The UPS is going to shutdown output.')
upsEShutdownCancelled = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,16))
if mibBuilder.loadTexts: upsEShutdownCancelled.setDescription('INFORMATION: The UPS is not going to shutdown output.')
upsEOutlet1GoingShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,17))
if mibBuilder.loadTexts: upsEOutlet1GoingShutdown.setDescription('WARNING: The UPS is going to shutdown outlet1.')
upsEOutlet1ShutdownCancelled = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,18))
if mibBuilder.loadTexts: upsEOutlet1ShutdownCancelled.setDescription('INFORMATION: The UPS is not going to shutdown outlet1.')
upsEOutlet2GoingShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,19))
if mibBuilder.loadTexts: upsEOutlet2GoingShutdown.setDescription('WARNING: The UPS is going to shutdown outlet2.')
upsEOutlet2ShutdownCancelled = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,20))
if mibBuilder.loadTexts: upsEOutlet2ShutdownCancelled.setDescription('INFORMATION: The UPS is not going to shutdown outlet2.')
upsESleeping = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,21)).setObjects(("EPPC-MIB", "upsEControlOutputOnDelay"))
if mibBuilder.loadTexts: upsESleeping.setDescription('INFORMATION: UPS has entered sleep mode and power to load has been cut off.')
upsEWokeUp = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,22))
if mibBuilder.loadTexts: upsEWokeUp.setDescription('INFORMATION: The UPS woke up from sleep mode and power to load has been restored.')
upsEOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,23)).setObjects(("EPPC-MIB", "upsESystemTemperature"), ("EPPC-MIB", "upsESystemConfigOverTemperatureSetPoint"))
if mibBuilder.loadTexts: upsEOverTemperature.setDescription('WARNING: The UPS temperature is over the setting limit.')
upsENotOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,24)).setObjects(("EPPC-MIB", "upsESystemTemperature"), ("EPPC-MIB", "upsESystemConfigOverTemperatureSetPoint"))
if mibBuilder.loadTexts: upsENotOverTemperature.setDescription('INFORMATION: The UPS temperature is not over the setting limit.')
upsEOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,25)).setObjects(("EPPC-MIB", "upsESystemOutputLoad"), ("EPPC-MIB", "upsESystemConfigOutputLoadHighSetPoint"))
if mibBuilder.loadTexts: upsEOverLoad.setDescription('WARNING: The UPS load is over the setting limit.')
upsENotOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,26)).setObjects(("EPPC-MIB", "upsESystemOutputLoad"), ("EPPC-MIB", "upsESystemConfigOutputLoadHighSetPoint"))
if mibBuilder.loadTexts: upsENotOverLoad.setDescription('INFORMATION: The UPS load is not over the setting limit.')
upsEModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,27))
if mibBuilder.loadTexts: upsEModuleInserted.setDescription('WARNING: UPS module or charger module plug-in.')
upsEModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,28))
if mibBuilder.loadTexts: upsEModuleRemoved.setDescription('WARNING: UPS module or charger module unplugs.')
sensorTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,29)).setObjects(("EPPC-MIB", "upsEEnvironmentTemperatureHighSetPoint"), ("EPPC-MIB", "upsEEnvironmentCurrentTemperature"))
if mibBuilder.loadTexts: sensorTemperatureTooHigh.setDescription('WARNING: Sensor Temperature over high Set point.')
sensorTemperatureNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,30)).setObjects(("EPPC-MIB", "upsEEnvironmentTemperatureHighSetPoint"), ("EPPC-MIB", "upsEEnvironmentCurrentTemperature"))
if mibBuilder.loadTexts: sensorTemperatureNotHigh.setDescription('INFORMATION: Sensor Temperature not over high Set point.')
sensorTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,31)).setObjects(("EPPC-MIB", "upsEEnvironmentTemperatureLowSetPoint"), ("EPPC-MIB", "upsEEnvironmentCurrentTemperature"))
if mibBuilder.loadTexts: sensorTemperatureTooLow.setDescription('WARNING: Sensor Temperature under low Set point.')
sensorTemperatureNotLow = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,32)).setObjects(("EPPC-MIB", "upsEEnvironmentTemperatureLowSetPoint"), ("EPPC-MIB", "upsEEnvironmentCurrentTemperature"))
if mibBuilder.loadTexts: sensorTemperatureNotLow.setDescription('INFORMATION: Sensor Temperature not under low Set point.')
sensorHumidityTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,33)).setObjects(("EPPC-MIB", "upsEEnvironmentHumidityHighSetPoint"), ("EPPC-MIB", "upsEEnvironmentCurrentHumidity"))
if mibBuilder.loadTexts: sensorHumidityTooHigh.setDescription('WARNING: Sensor Humidity over high Set point.')
sensorHumidityNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,34)).setObjects(("EPPC-MIB", "upsEEnvironmentHumidityHighSetPoint"), ("EPPC-MIB", "upsEEnvironmentCurrentHumidity"))
if mibBuilder.loadTexts: sensorHumidityNotHigh.setDescription('INFORMATION: Sensor Humidity not over high Set point.')
sensorHumidityTooLow = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,35)).setObjects(("EPPC-MIB", "upsEEnvironmentHumidityLowSetPoint"), ("EPPC-MIB", "upsEEnvironmentCurrentHumidity"))
if mibBuilder.loadTexts: sensorHumidityTooLow.setDescription('WARNING: Sensor Humidity under low Set point.')
sensorHumidityNotLow = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,36)).setObjects(("EPPC-MIB", "upsEEnvironmentHumidityLowSetPoint"), ("EPPC-MIB", "upsEEnvironmentCurrentHumidity"))
if mibBuilder.loadTexts: sensorHumidityNotLow.setDescription('INFORMATION: Sensor Humidity not under low Set point.')
contactAlarm1Active = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,37)).setObjects(("EPPC-MIB", "upsEEnvironmentContactType"), ("EPPC-MIB", "upsEEnvironmentContactDescription"))
if mibBuilder.loadTexts: contactAlarm1Active.setDescription('WARNING: Contact Alarm-1 activated.')
concactAlarm1Normal = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,38)).setObjects(("EPPC-MIB", "upsEEnvironmentContactType"), ("EPPC-MIB", "upsEEnvironmentContactDescription"))
if mibBuilder.loadTexts: concactAlarm1Normal.setDescription('INFORMATION: Contact Alarm-1 not active.')
contactAlarm2Active = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,39)).setObjects(("EPPC-MIB", "upsEEnvironmentContactType"), ("EPPC-MIB", "upsEEnvironmentContactDescription"))
if mibBuilder.loadTexts: contactAlarm2Active.setDescription('WARNING: Contact Alarm-2 activated.')
contactAlarm2Normal = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,40)).setObjects(("EPPC-MIB", "upsEEnvironmentContactType"), ("EPPC-MIB", "upsEEnvironmentContactDescription"))
if mibBuilder.loadTexts: contactAlarm2Normal.setDescription('INFORMATION: Contact Alarm-2 not active.')
upsEInternalwarning = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,41))
if mibBuilder.loadTexts: upsEInternalwarning.setDescription('WARNING: Internal warning.')
upsEReturnFromInternalwarning = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,42))
if mibBuilder.loadTexts: upsEReturnFromInternalwarning.setDescription('INFORMATION: Return from Internal warning.')
upsEEPOActive = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,43))
if mibBuilder.loadTexts: upsEEPOActive.setDescription('WARNING: EPO Active.')
upsEReturnFromEPOActive = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,44))
if mibBuilder.loadTexts: upsEReturnFromEPOActive.setDescription('INFORMATION: Return from EPO Active.')
upsEModuleUnlock = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,45))
if mibBuilder.loadTexts: upsEModuleUnlock.setDescription('WARNING: Module Unlock.')
upsEReturnFromModuleUnlock = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,46))
if mibBuilder.loadTexts: upsEReturnFromModuleUnlock.setDescription('INFORMATION: Return from Module Unlock.')
upsEMain1Neutralloss = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,47))
if mibBuilder.loadTexts: upsEMain1Neutralloss.setDescription('WARNING: Main 1 Neutral loss.')
upsEReturnFromMain1Neutralloss = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,48))
if mibBuilder.loadTexts: upsEReturnFromMain1Neutralloss.setDescription('INFORMATION: Return from Main 1 Neutral loss.')
upsEMain1phaseerror = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,49))
if mibBuilder.loadTexts: upsEMain1phaseerror.setDescription('WARNING: Main 1 phase error.')
upsEReturnFromMain1phaseerror = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,50))
if mibBuilder.loadTexts: upsEReturnFromMain1phaseerror.setDescription('INFORMATION: Return from Main 1 phase error.')
upsESitefault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,51))
if mibBuilder.loadTexts: upsESitefault.setDescription('WARNING: Site fault.')
upsEReturnFromSitefault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,52))
if mibBuilder.loadTexts: upsEReturnFromSitefault.setDescription('INFORMATION: Return from Site fault.')
upsEBypassAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,53))
if mibBuilder.loadTexts: upsEBypassAbnormal.setDescription('WARNING: Bypass Abnormal.')
upsEReturnFromBypassAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,54))
if mibBuilder.loadTexts: upsEReturnFromBypassAbnormal.setDescription('INFORMATION: Return from Bypass Abnormal.')
upsEBypassPhaseError = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,55))
if mibBuilder.loadTexts: upsEBypassPhaseError.setDescription('WARNING: Bypass Phase Error.')
upsEReturnFromBypassPhaseError = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,56))
if mibBuilder.loadTexts: upsEReturnFromBypassPhaseError.setDescription('INFORMATION: Return from Bypass Phase Error.')
upsEBatteryOpen = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,57))
if mibBuilder.loadTexts: upsEBatteryOpen.setDescription('WARNING: Battery Open.')
upsEReturnFromBatteryOpen = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,58))
if mibBuilder.loadTexts: upsEReturnFromBatteryOpen.setDescription('INFORMATION: Return from Battery Open.')
upsEBatteryOverCharge = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,59))
if mibBuilder.loadTexts: upsEBatteryOverCharge.setDescription('WARNING: Battery Over Charge.')
upsEReturnFromBatteryOverCharge = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,60))
if mibBuilder.loadTexts: upsEReturnFromBatteryOverCharge.setDescription('INFORMATION: Return from Battery Over Charge.')
upsEBatteryReverse = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,61))
if mibBuilder.loadTexts: upsEBatteryReverse.setDescription('WARNING: Battery Reverse.')
upsEReturnFromBatteryReverse = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,62))
if mibBuilder.loadTexts: upsEReturnFromBatteryReverse.setDescription('INFORMATION: Return from Battery Reverse.')
upsEOverloadforewarning = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,63))
if mibBuilder.loadTexts: upsEOverloadforewarning.setDescription('WARNING: Overload forewarning.')
upsEReturnFromOverloadforewarning = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,64))
if mibBuilder.loadTexts: upsEReturnFromOverloadforewarning.setDescription('INFORMATION: Return from Overload forewarning.')
upsEOverloadWarning = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,65))
if mibBuilder.loadTexts: upsEOverloadWarning.setDescription('WARNING: Overload Warning.')
upsEReturnFromOverloadWarning = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,66))
if mibBuilder.loadTexts: upsEReturnFromOverloadWarning.setDescription('INFORMATION: Return from Overload Warning.')
upsEFanLock = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,67))
if mibBuilder.loadTexts: upsEFanLock.setDescription('WARNING: Fan Lock.')
upsEReturnFromFanLock = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,68))
if mibBuilder.loadTexts: upsEReturnFromFanLock.setDescription('INFORMATION: Return from Fan Lock.')
upsEMaintaincoverisopen = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,69))
if mibBuilder.loadTexts: upsEMaintaincoverisopen.setDescription('WARNING: Maintain cover is open.')
upsEReturnFromMaintaincoverisopen = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,70))
if mibBuilder.loadTexts: upsEReturnFromMaintaincoverisopen.setDescription('INFORMATION: Return from Maintain cover is open.')
upsEChargerfault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,71))
if mibBuilder.loadTexts: upsEChargerfault.setDescription('WARNING: Charger fault.')
upsEReturnFromChargerfault = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,72))
if mibBuilder.loadTexts: upsEReturnFromChargerfault.setDescription('INFORMATION: Return from Charger fault.')
upsEModulelocationerror = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,73))
if mibBuilder.loadTexts: upsEModulelocationerror.setDescription('WARNING: Module location error.')
upsEReturnFromModulelocationerror = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,74))
if mibBuilder.loadTexts: upsEReturnFromModulelocationerror.setDescription('INFORMATION: Return from Module location error.')
upsETurnonabnormal = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,75))
if mibBuilder.loadTexts: upsETurnonabnormal.setDescription('WARNING: Turn on abnormal.')
upsEReturnFromTurnonabnormal = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,76))
if mibBuilder.loadTexts: upsEReturnFromTurnonabnormal.setDescription('INFORMATION: Return from Turn on abnormal.')
upsERedundancyloss = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,77))
if mibBuilder.loadTexts: upsERedundancyloss.setDescription('WARNING: Redundancy loss.')
upsEReturnFromRedundancyloss = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,78))
if mibBuilder.loadTexts: upsEReturnFromRedundancyloss.setDescription('INFORMATION: Return from Redundancy loss.')
upsEHotSwapActived = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,79))
if mibBuilder.loadTexts: upsEHotSwapActived.setDescription('WARNING: Hot Swap Active.')
upsEReturnFromHotSwapActived = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,80))
if mibBuilder.loadTexts: upsEReturnFromHotSwapActived.setDescription('INFORMATION: Return from Hot Swap Active.')
upsEBatteryInform = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,81))
if mibBuilder.loadTexts: upsEBatteryInform.setDescription('WARNING: Battery Inform.')
upsEReturnFromBatteryInform = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,82))
if mibBuilder.loadTexts: upsEReturnFromBatteryInform.setDescription('INFORMATION: Return from Battery Inform.')
upsEInspectionInform = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,83))
if mibBuilder.loadTexts: upsEInspectionInform.setDescription('WARNING: Inspection Inform.')
upsEReturnFromInspectionInform = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,84))
if mibBuilder.loadTexts: upsEReturnFromInspectionInform.setDescription('INFORMATION: Return from Inspection Inform.')
upsEGuaranteeInform = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,85))
if mibBuilder.loadTexts: upsEGuaranteeInform.setDescription('WARNING: Guarantee Inform.')
upsEReturnFromGuaranteeInform = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,86))
if mibBuilder.loadTexts: upsEReturnFromGuaranteeInform.setDescription('INFORMATION: Return from Guarantee Inform.')
upsETemperatureLow = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,87))
if mibBuilder.loadTexts: upsETemperatureLow.setDescription('WARNING: Temperature Low.')
upsEReturnFromTemperatureLow = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,88))
if mibBuilder.loadTexts: upsEReturnFromTemperatureLow.setDescription('INFORMATION: Return from Temperature Low.')
upsETemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,89))
if mibBuilder.loadTexts: upsETemperatureHigh.setDescription('WARNING: Temperature High.')
upsEReturnFromTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,90))
if mibBuilder.loadTexts: upsEReturnFromTemperatureHigh.setDescription('INFORMATION: Return from Temperature High.')
upsEBatteryOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,91))
if mibBuilder.loadTexts: upsEBatteryOverTemperature.setDescription('WARNING: Battery Over Temperature.')
upsEReturnFromBatteryOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,92))
if mibBuilder.loadTexts: upsEReturnFromBatteryOverTemperature.setDescription('INFORMATION: Return from Battery Over Temperature.')
upsEFanMaintainInform = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,93))
if mibBuilder.loadTexts: upsEFanMaintainInform.setDescription('WARNING: Fan Maintain Inform.')
upsEReturnFromFanMaintainInform = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,94))
if mibBuilder.loadTexts: upsEReturnFromFanMaintainInform.setDescription('INFORMATION: Return from Fan Maintain Inform.')
upsEBusCapacitanceMaintainInform = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,95))
if mibBuilder.loadTexts: upsEBusCapacitanceMaintainInform.setDescription('WARNING: Bus Capacitance Maintain Inform.')
upsEReturnFromBusCapacitanceMaintainInform = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,96))
if mibBuilder.loadTexts: upsEReturnFromBusCapacitanceMaintainInform.setDescription('INFORMATION: Return from Bus Capacitance Maintain Inform.')
upsESystemOverCapacity = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,97))
if mibBuilder.loadTexts: upsESystemOverCapacity.setDescription('WARNING: System Over Capacity.')
upsEReturnFromSystemOverCapacity = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,98))
if mibBuilder.loadTexts: upsEReturnFromSystemOverCapacity.setDescription('INFORMATION: Return from System Over Capacity.')
upsEBelowCapacityLimit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,123)).setObjects(("EPPC-MIB", "upsEBatteryEstimatedChargeRemaining"), ("EPPC-MIB", "upsESystemConfigBelowCapacityLimit"))
if mibBuilder.loadTexts: upsEBelowCapacityLimit.setDescription('SEVERE: The UPS batteries capacity is lower than setting limit.')
upsENotBelowCapacityLimit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,124))
if mibBuilder.loadTexts: upsENotBelowCapacityLimit.setDescription('INFORMATION: The UPS batteries capacity is not lower than setting limit.')
upsEBelowRemainTimeLimit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,125)).setObjects(("EPPC-MIB", "upsEBatteryEstimatedMinutesRemaining"), ("EPPC-MIB", "upsESystemConfigBelowRemainTimeLimit"))
if mibBuilder.loadTexts: upsEBelowRemainTimeLimit.setDescription('SEVERE: The UPS batteries backup time is below the setting limit.')
upsENotBelowRemainTimeLimit = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,126))
if mibBuilder.loadTexts: upsENotBelowRemainTimeLimit.setDescription('INFORMATION: The UPS batteries backup time is not below the setting limit.')
upsELoadSegment1Off = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,127))
if mibBuilder.loadTexts: upsELoadSegment1Off.setDescription('WARNING: Load segment 1 is off.')
upsELoadSegment1On = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,128))
if mibBuilder.loadTexts: upsELoadSegment1On.setDescription('INFORMATION: Load segment 1 is on.')
upsELoadSegment2Off = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,129))
if mibBuilder.loadTexts: upsELoadSegment2Off.setDescription('WARNING: Load segment 2 is off.')
upsELoadSegment2On = NotificationType((1, 3, 6, 1, 4, 1, 935, 10, 1, 2) + (0,130))
if mibBuilder.loadTexts: upsELoadSegment2On.setDescription('INFORMATION: Load segment 2 is on.')
mibBuilder.exportSymbols("EPPC-MIB", positiveChargeCurrent=positiveChargeCurrent, upsESystemConfigInputFrequence=upsESystemConfigInputFrequence, upsEEnvironmentContactTable=upsEEnvironmentContactTable, upsEControlOutputOnOffControl=upsEControlOutputOnOffControl, contactAlarm2Normal=contactAlarm2Normal, upsEOutlet2ShutdownCancelled=upsEOutlet2ShutdownCancelled, upsEReturnFromBypassAbnormal=upsEReturnFromBypassAbnormal, upsESystemInputPhase=upsESystemInputPhase, upsEModuleUnlock=upsEModuleUnlock, upsESystemOutputCurrent=upsESystemOutputCurrent, upsEReturnFromBatteryOverCharge=upsEReturnFromBatteryOverCharge, upsAgent=upsAgent, upsEBatteryEstimatedMinutesRemaining=upsEBatteryEstimatedMinutesRemaining, upsESpecialDayScheduleRestartTime=upsESpecialDayScheduleRestartTime, upsEEnvironmentHumidityLowStatus=upsEEnvironmentHumidityLowStatus, upsEPositiveBatteryVoltage=upsEPositiveBatteryVoltage, upsEBatteryInform=upsEBatteryInform, upsELoadSegment2AutoOffTimer=upsELoadSegment2AutoOffTimer, upsEReturnFromSitefault=upsEReturnFromSitefault, negativeChargeVoltage=negativeChargeVoltage, upsEReturnFromHotSwapActived=upsEReturnFromHotSwapActived, upsESystemConfigOutputLoadHighSetPoint=upsESystemConfigOutputLoadHighSetPoint, upsEEnvironmentHumidity=upsEEnvironmentHumidity, sensorHumidityNotHigh=sensorHumidityNotHigh, upsEEPOActive=upsEEPOActive, upsEModuleOutputCurrentR=upsEModuleOutputCurrentR, upsEEnvironmentContactState=upsEEnvironmentContactState, upsEEnvironmentTemperatureHighStatus=upsEEnvironmentTemperatureHighStatus, upsENotOverLoad=upsENotOverLoad, sensorTemperatureTooLow=sensorTemperatureTooLow, upsEEnvironmentHumidityOffset=upsEEnvironmentHumidityOffset, upsEChargerModulesNum=upsEChargerModulesNum, upsESystemMasterOnDelay=upsESystemMasterOnDelay, upsESystemOutputVoltage=upsESystemOutputVoltage, upsETrapsReceiversIndex=upsETrapsReceiversIndex, upsEBelowRemainTimeLimit=upsEBelowRemainTimeLimit, upsEControlWeeklyScheduleEntry=upsEControlWeeklyScheduleEntry, upsEShutdownCancelled=upsEShutdownCancelled, upsEControlSpecialDayScheduleEntry=upsEControlSpecialDayScheduleEntry, upsESystemConfigOutputVA=upsESystemConfigOutputVA, upsEBatteryTestScheduleType=upsEBatteryTestScheduleType, upsEFanLock=upsEFanLock, upsESystemInputWatts=upsESystemInputWatts, upsESystemInputLineBads=upsESystemInputLineBads, upsESpecialDayScheduleShutdownDay=upsESpecialDayScheduleShutdownDay, upsESystemConfigOutputPower=upsESystemConfigOutputPower, upsEModuleAddress=upsEModuleAddress, upsEBatteryTestScheduleTable=upsEBatteryTestScheduleTable, upsEBatteryTestScheduleDay=upsEBatteryTestScheduleDay, sensorHumidityTooHigh=sensorHumidityTooHigh, upsEMaintaincoverisopen=upsEMaintaincoverisopen, upsEEnvironmentTemperatureLowSetPoint=upsEEnvironmentTemperatureLowSetPoint, upsESystemStatus=upsESystemStatus, upsEShutdownWarningPeriodInterval=upsEShutdownWarningPeriodInterval, upsELoadSegment2OnDelay=upsELoadSegment2OnDelay, upsEReturnFromBypassPhaseError=upsEReturnFromBypassPhaseError, upsEBatteryTestElapsedTime=upsEBatteryTestElapsedTime, upsEModuleOutputWattT=upsEModuleOutputWattT, upsETrapControl=upsETrapControl, upsEEnvironmentContactsNum=upsEEnvironmentContactsNum, upsERedundancyloss=upsERedundancyloss, upsEOnBattery=upsEOnBattery, upsEReturnFromFanMaintainInform=upsEReturnFromFanMaintainInform, upsEModuleOutputVAT=upsEModuleOutputVAT, upsESystemOverCapacity=upsESystemOverCapacity, upsEWeeklyScheduleShutdownDay=upsEWeeklyScheduleShutdownDay, upsEOverloadforewarning=upsEOverloadforewarning, upsETraps=upsETraps, upsEReturnFromBatteryInform=upsEReturnFromBatteryInform, upsELoadSegment2OffDelay=upsELoadSegment2OffDelay, upsEBatteryTestScheduleSpecialDay=upsEBatteryTestScheduleSpecialDay, upsESystemOutputFrequency=upsESystemOutputFrequency, upsEShutdownEvent=upsEShutdownEvent, upsESystemBypassWatts=upsESystemBypassWatts, upsEReturnFromInspectionInform=upsEReturnFromInspectionInform, upsEEnvironmentCurrentTemperature=upsEEnvironmentCurrentTemperature, upsELoadSegment2Off=upsELoadSegment2Off, upsEBatteryTestScheduleTime=upsEBatteryTestScheduleTime, upsEWeeklyScheduleRestartTime=upsEWeeklyScheduleRestartTime, sensorTemperatureNotHigh=sensorTemperatureNotHigh, upsEControl=upsEControl, upsEEnvironmentContactType=upsEEnvironmentContactType, upsELoadSegment1On=upsELoadSegment1On, upsENegativeBatteryVoltage=upsENegativeBatteryVoltage, upsEBatteryTestScheduleEntry=upsEBatteryTestScheduleEntry, upsESystemFaultCode=upsESystemFaultCode, upsEReturnFromMain1phaseerror=upsEReturnFromMain1phaseerror, upsESystemBypassPhase=upsESystemBypassPhase, upsEBatteryReverse=upsEBatteryReverse, upsEGoingShutdown=upsEGoingShutdown, upsESystemInputVoltage=upsESystemInputVoltage, upsEEnvironmentTemperatureLowStatus=upsEEnvironmentTemperatureLowStatus, upsENotOnBattery=upsENotOnBattery, upsETurnonabnormal=upsETurnonabnormal, upsEMain1Neutralloss=upsEMain1Neutralloss, upsEFanMaintainInform=upsEFanMaintainInform, upsEModulelocationerror=upsEModulelocationerror, upsEShutdownEventsEntry=upsEShutdownEventsEntry, upsETrapReceiverCommunityString=upsETrapReceiverCommunityString, upsEBatteryOverCharge=upsEBatteryOverCharge, upsETrapsReceiversTable=upsETrapsReceiversTable, upsESystemBypassEntry=upsESystemBypassEntry, upsEReturnFromGuaranteeInform=upsEReturnFromGuaranteeInform, upsEBatteryTestResult=upsEBatteryTestResult, upsESystemBypassNumPhase=upsESystemBypassNumPhase, upsESystemTemperature=upsESystemTemperature, upsESystemBypassFrequency=upsESystemBypassFrequency, upsEIdentityAgentSoftwareVerison=upsEIdentityAgentSoftwareVerison, upsEBatteryCellNumber=upsEBatteryCellNumber, upsEEnvironmentCurrentHumidity=upsEEnvironmentCurrentHumidity, upsESystemWarningCode=upsESystemWarningCode, upsEChargerModulesTable=upsEChargerModulesTable, upsESystemConfigBelowRemainTimeLimit=upsESystemConfigBelowRemainTimeLimit, upsEModulesTable=upsEModulesTable, contactAlarm1Active=contactAlarm1Active, upsENotBelowRemainTimeLimit=upsENotBelowRemainTimeLimit, upsESystemInputNumPhases=upsESystemInputNumPhases, upsEControlOutputOnDelay=upsEControlOutputOnDelay, upsEModuleOutputLoadR=upsEModuleOutputLoadR, upsEBatteryLastReplacedDate=upsEBatteryLastReplacedDate, upsEOnline=upsEOnline, upsESitefault=upsESitefault, upsEEnvironmentHumidityHighStatus=upsEEnvironmentHumidityHighStatus, upsEReturnFromMaintaincoverisopen=upsEReturnFromMaintaincoverisopen, upsESystemOutputWatts=upsESystemOutputWatts, upsETemperatureLow=upsETemperatureLow, upsEChargerModulesEntry=upsEChargerModulesEntry, upsELoadSegment2State=upsELoadSegment2State, upsELoadSegment2AutoOnTimer=upsELoadSegment2AutoOnTimer, upsEShutdownwarningPeriodTime=upsEShutdownwarningPeriodTime, upsEEnvironmentHumidityHighSetPoint=upsEEnvironmentHumidityHighSetPoint, upsETestOver=upsETestOver, upsEBelowCapacityLimit=upsEBelowCapacityLimit, upsEWeeklyScheduleRestartDay=upsEWeeklyScheduleRestartDay, upsEControlSpecialDayScheduleIndex=upsEControlSpecialDayScheduleIndex, upsEReturnFromInternalwarning=upsEReturnFromInternalwarning, upsEReturnFromTurnonabnormal=upsEReturnFromTurnonabnormal, upsEEnvironmentTemperatureOffset=upsEEnvironmentTemperatureOffset, upsETemperatureHigh=upsETemperatureHigh, upsEBatteryOverTemperature=upsEBatteryOverTemperature, upsELoadSegment1AutoOffTimer=upsELoadSegment1AutoOffTimer, sensorTemperatureNotLow=sensorTemperatureNotLow, upsEReturnFromModuleUnlock=upsEReturnFromModuleUnlock, upsEModulesEntry=upsEModulesEntry, upsEInspectionInform=upsEInspectionInform, upsESystemOutputEntry=upsESystemOutputEntry, upsEInternalwarning=upsEInternalwarning, upsEBypassOn=upsEBypassOn, upsEOverTemperature=upsEOverTemperature, ppc=ppc, upsEBypassAbnormal=upsEBypassAbnormal, upsEModuleOutputWattR=upsEModuleOutputWattR, upsEReturnFromBatteryOverTemperature=upsEReturnFromBatteryOverTemperature, upsEEnvironmentContactDescription=upsEEnvironmentContactDescription, upsEWokeUp=upsEWokeUp, upsEBatteryTestStart=upsEBatteryTestStart, upsEModulesNum=upsEModulesNum, upsEModuleOutputVAS=upsEModuleOutputVAS, upsEModuleWorkingMode=upsEModuleWorkingMode, contactAlarm2Active=contactAlarm2Active, upsELoadSegment=upsELoadSegment, upsEIdentityAttachedDevices=upsEIdentityAttachedDevices, upsESystemMasterOffDelay=upsESystemMasterOffDelay, upsESystemConfigOutputVoltage=upsESystemConfigOutputVoltage, upsETrapType=upsETrapType, upsEReturnFromTemperatureHigh=upsEReturnFromTemperatureHigh, upsEOverLoad=upsEOverLoad, upsENotBelowCapacityLimit=upsENotBelowCapacityLimit, upsELoadSegment1OffDelay=upsELoadSegment1OffDelay, upsEBypassPhaseError=upsEBypassPhaseError, upsEBatteryOpen=upsEBatteryOpen, upsETrapState=upsETrapState, upsESystemConfigOverTemperatureSetPoint=upsESystemConfigOverTemperatureSetPoint, upsEControlWeeklyScheduleTable=upsEControlWeeklyScheduleTable, upsEIdentityUPSFirmwareVerison=upsEIdentityUPSFirmwareVerison, upsECommunicationLost=upsECommunicationLost, upsESystemInputSourceNum=upsESystemInputSourceNum, upsEModuleOutputLoadS=upsEModuleOutputLoadS, upsESystemInputCurrent=upsESystemInputCurrent, upsETrapsSeverityLevel=upsETrapsSeverityLevel, upsEControlOutputOffDelay=upsEControlOutputOffDelay, upsEOutlet1GoingShutdown=upsEOutlet1GoingShutdown, upsELoadSegment1Off=upsELoadSegment1Off, upsEBatteryTestStartTime=upsEBatteryTestStartTime, upsE=upsE, upsEModuleTemperature=upsEModuleTemperature, upsEReturnFromOverloadWarning=upsEReturnFromOverloadWarning, upsEOutlet1ShutdownCancelled=upsEOutlet1ShutdownCancelled, upsEReturnFromSystemOverCapacity=upsEReturnFromSystemOverCapacity, upsEModuleInserted=upsEModuleInserted, upsEGuaranteeInform=upsEGuaranteeInform, upsEIdentityModel=upsEIdentityModel, concactAlarm1Normal=concactAlarm1Normal, upsESystemOutputLoad=upsESystemOutputLoad, sensorTemperatureTooHigh=sensorTemperatureTooHigh, upsESpecialDayScheduleRestartDay=upsESpecialDayScheduleRestartDay, upsEReturnFromBatteryReverse=upsEReturnFromBatteryReverse, upsEReturnFromTemperatureLow=upsEReturnFromTemperatureLow, upsEEnvironmentContactEntry=upsEEnvironmentContactEntry, upsETrapsReceiversEntry=upsETrapsReceiversEntry, negativeChargeCurrent=negativeChargeCurrent, upsESystemOutputNumPhase=upsESystemOutputNumPhase, upsESystemOutputVA=upsESystemOutputVA, upsESystemBypassTable=upsESystemBypassTable, upsEEnvironment=upsEEnvironment, upsEBusCapacitanceMaintainInform=upsEBusCapacitanceMaintainInform, upsEBatteryStatus=upsEBatteryStatus, upsEBatteryTestScheduleTestWithTime=upsEBatteryTestScheduleTestWithTime, upsEWeeklyScheduleShutdownTime=upsEWeeklyScheduleShutdownTime, upsEMain1phaseerror=upsEMain1phaseerror, upsEFailed=upsEFailed, upsEModuleNegativeBusVolt=upsEModuleNegativeBusVolt, upsEModuleFaultCode=upsEModuleFaultCode, upsEReturnFromBatteryOpen=upsEReturnFromBatteryOpen, chargerModulesNum=chargerModulesNum, upsESystemOutputPhase=upsESystemOutputPhase, device=device, upsESystemConfigInputVoltage=upsESystemConfigInputVoltage, upsEModuleOutputCurrentT=upsEModuleOutputCurrentT, upsEModuleWarningCode=upsEModuleWarningCode, upsELowBattery=upsELowBattery, upsETestInProgress=upsETestInProgress, upsEIdentity=upsEIdentity, sensorHumidityNotLow=sensorHumidityNotLow, upsEIndentityUPSSerialNumber=upsEIndentityUPSSerialNumber, upsELoadSegment1OnDelay=upsELoadSegment1OnDelay, upsELoadSegment1AutoOnTimer=upsELoadSegment1AutoOnTimer, upsEReturnFromChargerfault=upsEReturnFromChargerfault, upsEBatteryTestSettingTime=upsEBatteryTestSettingTime, chargerModulesTemperature=chargerModulesTemperature, upsEModuleOutputVAR=upsEModuleOutputVAR, upsEShutdownEventAction=upsEShutdownEventAction, upsEBatteryEstimatedChargeRemaining=upsEBatteryEstimatedChargeRemaining, upsEModuleConfigOutputVA=upsEModuleConfigOutputVA, upsESpecialDayScheduleShutdownTime=upsESpecialDayScheduleShutdownTime, upsELoadSegment2On=upsELoadSegment2On, upsESystemInputFrequency=upsESystemInputFrequency, upsESystemBypassVoltage=upsESystemBypassVoltage, upsEBatteryABMStatus=upsEBatteryABMStatus, upsETrapReceiverDescription=upsETrapReceiverDescription, upsESystemInputEntry=upsESystemInputEntry, upsEReturnFromRedundancyloss=upsEReturnFromRedundancyloss, chargerModulesAddress=chargerModulesAddress, upsEControlWeeklyScheduleIndex=upsEControlWeeklyScheduleIndex, upsEOk=upsEOk, upsESystemOutputTable=upsESystemOutputTable, upsEUPSModulesNum=upsEUPSModulesNum, upsEModuleOutputCurrentS=upsEModuleOutputCurrentS, upsEBatteryTest=upsEBatteryTest, upsEShutdownEventsTable=upsEShutdownEventsTable, upsEModuleTrapState=upsEModuleTrapState, upsEBatterySystem=upsEBatterySystem, upsEOutlet2GoingShutdown=upsEOutlet2GoingShutdown, upsELoadSegment1State=upsELoadSegment1State)
mibBuilder.exportSymbols("EPPC-MIB", upsEEnvironmentContactIndex=upsEEnvironmentContactIndex, upsEPowerRestored=upsEPowerRestored, upsESystemSummary=upsESystemSummary, chargerModulesMode=chargerModulesMode, upsEModuleOutputWattS=upsEModuleOutputWattS, upsEBatteryTestScheduleIndex=upsEBatteryTestScheduleIndex, upsESleeping=upsESleeping, upsENotOverTemperature=upsENotOverTemperature, upsEModuleRemoved=upsEModuleRemoved, upsEReturnFromBusCapacitanceMaintainInform=upsEReturnFromBusCapacitanceMaintainInform, upsEIdentityDescription=upsEIdentityDescription, positiveChargeVotlage=positiveChargeVotlage, upsESystemInputTable=upsESystemInputTable, upsEReturnFromFanLock=upsEReturnFromFanLock, upsEChargerfault=upsEChargerfault, upsEPowerConverterSystem=upsEPowerConverterSystem, upsESecondsOnBattery=upsESecondsOnBattery, upsETrapsReceiverAddress=upsETrapsReceiverAddress, upsEHotSwapActived=upsEHotSwapActived, upsEEnvironmentHumidityLowSetPoint=upsEEnvironmentHumidityLowSetPoint, upsEControlSpecialDayScheduleTable=upsEControlSpecialDayScheduleTable, upsESystemConfigOutputFrequency=upsESystemConfigOutputFrequency, upsESystemBypassCurrent=upsESystemBypassCurrent, upsEIdentityManufacturer=upsEIdentityManufacturer, upsEModulePositiveBusVolt=upsEModulePositiveBusVolt, upsECommunicationEstablished=upsECommunicationEstablished, upsEModuleOutputLoadT=upsEModuleOutputLoadT, upsEPowerFail=upsEPowerFail, upsEReturnFromModulelocationerror=upsEReturnFromModulelocationerror, upsEEnvironmentTemperature=upsEEnvironmentTemperature, upsEBatteryTemperature=upsEBatteryTemperature, upsEReturnFromOverloadforewarning=upsEReturnFromOverloadforewarning, upsEEnvironmentTemperatureHighSetPoint=upsEEnvironmentTemperatureHighSetPoint, upsEReturnFromEPOActive=upsEReturnFromEPOActive, upsEOverloadWarning=upsEOverloadWarning, upsEReturnFromLowBattery=upsEReturnFromLowBattery, upsEReturnFromMain1Neutralloss=upsEReturnFromMain1Neutralloss, upsESystemConfigBelowCapacityLimit=upsESystemConfigBelowCapacityLimit, sensorHumidityTooLow=sensorHumidityTooLow)
