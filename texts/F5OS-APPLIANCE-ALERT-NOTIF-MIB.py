#
# PySNMP MIB module F5OS-APPLIANCE-ALERT-NOTIF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/f5/F5OS-APPLIANCE-ALERT-NOTIF-MIB
# Produced by pysmi-1.1.12 at Mon Jul  1 09:19:41 2024
# On host fv-az735-465 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
alertTimeStamp, f5AlertNotificationGroup, alertDescription, alertSource, alertEffect, f5Alerts, alertSeverity = mibBuilder.importSymbols("F5-ALERT-DEF-MIB", "alertTimeStamp", "f5AlertNotificationGroup", "alertDescription", "alertSource", "alertEffect", "f5Alerts", "alertSeverity")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Gauge32, ObjectIdentity, Counter32, iso, Unsigned32, Integer32, TimeTicks, IpAddress, MibIdentifier, NotificationType, Counter64, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "ObjectIdentity", "Counter32", "iso", "Unsigned32", "Integer32", "TimeTicks", "IpAddress", "MibIdentifier", "NotificationType", "Counter64", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
f5AlertNotification = ModuleIdentity((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1))
f5AlertNotification.setRevisions(('2019-08-04 09:41',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f5AlertNotification.setRevisionsDescriptions(('F5 Alert Notification Types.',))
if mibBuilder.loadTexts: f5AlertNotification.setLastUpdated('201908040941Z')
if mibBuilder.loadTexts: f5AlertNotification.setOrganization('F5 Networks, Inc.')
if mibBuilder.loadTexts: f5AlertNotification.setContactInfo('postal: F5 Networks, Inc.\n                  801 5th Ave\n                  Seattle,  WA 98104\n          phone:  (206) 272-5555\n          email:  support@f5.com')
if mibBuilder.loadTexts: f5AlertNotification.setDescription('Top-level infrastructure of the F5 Networks enterprise Alert MIB tree.')
hardware_device_fault = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 65536)).setLabel("hardware-device-fault").setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: hardware_device_fault.setStatus('current')
if mibBuilder.loadTexts: hardware_device_fault.setDescription('Hardware device fault detected')
firmware_fault = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 65537)).setLabel("firmware-fault").setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: firmware_fault.setStatus('current')
if mibBuilder.loadTexts: firmware_fault.setDescription('Firmware diagnostic state fault detected')
unknown_alarm = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 65538)).setLabel("unknown-alarm").setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: unknown_alarm.setStatus('current')
if mibBuilder.loadTexts: unknown_alarm.setDescription('Unregistered alarm detected')
memory_fault = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 65539)).setLabel("memory-fault").setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: memory_fault.setStatus('current')
if mibBuilder.loadTexts: memory_fault.setDescription('Fault in memory detected')
drive_fault = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 65540)).setLabel("drive-fault").setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: drive_fault.setStatus('current')
if mibBuilder.loadTexts: drive_fault.setDescription('Fault in drive detected')
cpu_fault = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 65541)).setLabel("cpu-fault").setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: cpu_fault.setStatus('current')
if mibBuilder.loadTexts: cpu_fault.setDescription('CPU fault detected')
pcie_fault = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 65542)).setLabel("pcie-fault").setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: pcie_fault.setStatus('current')
if mibBuilder.loadTexts: pcie_fault.setDescription('Fault in PCIe device detected')
aom_fault = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 65543)).setLabel("aom-fault").setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: aom_fault.setStatus('current')
if mibBuilder.loadTexts: aom_fault.setDescription('Fault detected in the AOM')
drive_capacity_fault = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 65544)).setLabel("drive-capacity-fault").setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: drive_capacity_fault.setStatus('current')
if mibBuilder.loadTexts: drive_capacity_fault.setDescription('Running out of drive capacity')
power_fault = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 65545)).setLabel("power-fault").setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: power_fault.setStatus('current')
if mibBuilder.loadTexts: power_fault.setDescription('Power fault detected in hardware')
thermal_fault = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 65546)).setLabel("thermal-fault").setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: thermal_fault.setStatus('current')
if mibBuilder.loadTexts: thermal_fault.setDescription('Thermal fault detected in hardware')
drive_thermal_throttle = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 65547)).setLabel("drive-thermal-throttle").setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: drive_thermal_throttle.setStatus('current')
if mibBuilder.loadTexts: drive_thermal_throttle.setDescription('Drive has entered a thermal throttle condition')
blade_thermal_fault = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 65548)).setLabel("blade-thermal-fault").setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: blade_thermal_fault.setStatus('current')
if mibBuilder.loadTexts: blade_thermal_fault.setDescription('Thermal fault detected in blade')
blade_hardware_fault = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 65549)).setLabel("blade-hardware-fault").setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: blade_hardware_fault.setStatus('current')
if mibBuilder.loadTexts: blade_hardware_fault.setDescription('Hardware fault detected in blade')
firmware_update_status = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 65550)).setLabel("firmware-update-status").setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: firmware_update_status.setStatus('current')
if mibBuilder.loadTexts: firmware_update_status.setDescription('Firmware update status')
drive_utilization = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 65551)).setLabel("drive-utilization").setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: drive_utilization.setStatus('current')
if mibBuilder.loadTexts: drive_utilization.setDescription('Drive utilization growth rate is high')
service_health = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 65552)).setLabel("service-health").setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: service_health.setStatus('current')
if mibBuilder.loadTexts: service_health.setDescription('Service health status')
module_present = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 66304)).setLabel("module-present").setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: module_present.setStatus('current')
if mibBuilder.loadTexts: module_present.setDescription('Change detected in appliance module presence')
psu_fault = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 66305)).setLabel("psu-fault").setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: psu_fault.setStatus('current')
if mibBuilder.loadTexts: psu_fault.setDescription('PSU fault detected')
lcd_fault = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 66306)).setLabel("lcd-fault").setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: lcd_fault.setStatus('current')
if mibBuilder.loadTexts: lcd_fault.setDescription('Fault detected in LCD module')
module_communication_error = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 66307)).setLabel("module-communication-error").setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: module_communication_error.setStatus('current')
if mibBuilder.loadTexts: module_communication_error.setDescription('Module communication error detected')
fipsError = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 196608)).setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: fipsError.setStatus('current')
if mibBuilder.loadTexts: fipsError.setDescription('Crypto error identified in one or more services')
core_dump = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 327680)).setLabel("core-dump").setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: core_dump.setStatus('current')
if mibBuilder.loadTexts: core_dump.setDescription('Detected process crash on the system')
raidEvent = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 393216)).setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: raidEvent.setStatus('current')
if mibBuilder.loadTexts: raidEvent.setDescription('Notification of raid event')
backplane = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 262144)).setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: backplane.setStatus('current')
if mibBuilder.loadTexts: backplane.setDescription('Could not establish backplane link with one or more system controllers')
txPwrHiAlarm = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 262400)).setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: txPwrHiAlarm.setStatus('current')
if mibBuilder.loadTexts: txPwrHiAlarm.setDescription('Transmitter power high alarm')
txPwrHiWarn = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 262401)).setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: txPwrHiWarn.setStatus('current')
if mibBuilder.loadTexts: txPwrHiWarn.setDescription('Transmitter power high warning')
txPwrLoAlarm = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 262402)).setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: txPwrLoAlarm.setStatus('current')
if mibBuilder.loadTexts: txPwrLoAlarm.setDescription('Transmitter power low alarm')
txPwrLoWarn = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 262403)).setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: txPwrLoWarn.setStatus('current')
if mibBuilder.loadTexts: txPwrLoWarn.setDescription('Transmitter power low warning')
rxPwrHiAlarm = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 262404)).setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: rxPwrHiAlarm.setStatus('current')
if mibBuilder.loadTexts: rxPwrHiAlarm.setDescription('Receiver power high alarm')
rxPwrHiWarn = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 262405)).setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: rxPwrHiWarn.setStatus('current')
if mibBuilder.loadTexts: rxPwrHiWarn.setDescription('Receiver power high warning')
rxPwrLoAlarm = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 262406)).setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: rxPwrLoAlarm.setStatus('current')
if mibBuilder.loadTexts: rxPwrLoAlarm.setDescription('Receiver power low alarm')
rxPwrLoWarn = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 262407)).setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: rxPwrLoWarn.setStatus('current')
if mibBuilder.loadTexts: rxPwrLoWarn.setDescription('Receiver power low warning')
txBiasHiAlarm = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 262408)).setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: txBiasHiAlarm.setStatus('current')
if mibBuilder.loadTexts: txBiasHiAlarm.setDescription('Transmitter bias high alarm')
txBiasHiWarn = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 262409)).setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: txBiasHiWarn.setStatus('current')
if mibBuilder.loadTexts: txBiasHiWarn.setDescription('Transmitter bias high warning')
txBiasLoAlarm = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 262410)).setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: txBiasLoAlarm.setStatus('current')
if mibBuilder.loadTexts: txBiasLoAlarm.setDescription('Transmitter bias low alarm')
txBiasLoWarn = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 262411)).setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: txBiasLoWarn.setStatus('current')
if mibBuilder.loadTexts: txBiasLoWarn.setDescription('Transmitter bias low warning')
ddmTempHiAlarm = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 262412)).setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: ddmTempHiAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmTempHiAlarm.setDescription('Optic temperature high alarm')
ddmTempHiWarn = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 262413)).setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: ddmTempHiWarn.setStatus('current')
if mibBuilder.loadTexts: ddmTempHiWarn.setDescription('Optic temperature high warning')
ddmTempLoAlarm = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 262414)).setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: ddmTempLoAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmTempLoAlarm.setDescription('Optic temperature low alarm')
ddmTempLoWarn = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 262415)).setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: ddmTempLoWarn.setStatus('current')
if mibBuilder.loadTexts: ddmTempLoWarn.setDescription('Optic temperature low warning')
ddmVccHiAlarm = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 262416)).setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: ddmVccHiAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmVccHiAlarm.setDescription('Optic voltage high alarm')
ddmVccHiWarn = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 262417)).setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: ddmVccHiWarn.setStatus('current')
if mibBuilder.loadTexts: ddmVccHiWarn.setDescription('Optic voltage high warning')
ddmVccLoAlarm = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 262418)).setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: ddmVccLoAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmVccLoAlarm.setDescription('Optic voltage low alarm')
ddmVccLoWarn = NotificationType((1, 3, 6, 1, 4, 1, 12276, 1, 1, 1, 262419)).setObjects(("F5-ALERT-DEF-MIB", "alertSource"), ("F5-ALERT-DEF-MIB", "alertEffect"), ("F5-ALERT-DEF-MIB", "alertSeverity"), ("F5-ALERT-DEF-MIB", "alertTimeStamp"), ("F5-ALERT-DEF-MIB", "alertDescription"))
if mibBuilder.loadTexts: ddmVccLoWarn.setStatus('current')
if mibBuilder.loadTexts: ddmVccLoWarn.setDescription('Optic voltage low warning')
f5AlertsNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 12276, 1, 1, 0, 3, 1)).setObjects(("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "hardware_device_fault"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "firmware_fault"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "unknown_alarm"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "memory_fault"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "drive_fault"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "cpu_fault"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "pcie_fault"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "aom_fault"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "drive_capacity_fault"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "power_fault"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "thermal_fault"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "drive_thermal_throttle"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "blade_thermal_fault"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "blade_hardware_fault"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "firmware_update_status"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "drive_utilization"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "service_health"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "module_present"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "psu_fault"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "lcd_fault"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "module_communication_error"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "fipsError"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "core_dump"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "raidEvent"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "backplane"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "txPwrHiAlarm"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "txPwrHiWarn"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "txPwrLoAlarm"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "txPwrLoWarn"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "rxPwrHiAlarm"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "rxPwrHiWarn"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "rxPwrLoAlarm"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "rxPwrLoWarn"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "txBiasHiAlarm"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "txBiasHiWarn"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "txBiasLoAlarm"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "txBiasLoWarn"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "ddmTempHiAlarm"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "ddmTempHiWarn"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "ddmTempLoAlarm"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "ddmTempLoWarn"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "ddmVccHiAlarm"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "ddmVccHiWarn"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "ddmVccLoAlarm"), ("F5OS-APPLIANCE-ALERT-NOTIF-MIB", "ddmVccLoWarn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f5AlertsNotifyGroup = f5AlertsNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: f5AlertsNotifyGroup.setDescription('The notifications related to the operation of the F5 System.')
mibBuilder.exportSymbols("F5OS-APPLIANCE-ALERT-NOTIF-MIB", ddmTempHiAlarm=ddmTempHiAlarm, blade_thermal_fault=blade_thermal_fault, ddmVccLoWarn=ddmVccLoWarn, aom_fault=aom_fault, txPwrLoWarn=txPwrLoWarn, core_dump=core_dump, txBiasLoWarn=txBiasLoWarn, firmware_fault=firmware_fault, ddmTempLoWarn=ddmTempLoWarn, ddmTempLoAlarm=ddmTempLoAlarm, f5AlertNotification=f5AlertNotification, txBiasHiWarn=txBiasHiWarn, module_present=module_present, power_fault=power_fault, firmware_update_status=firmware_update_status, PYSNMP_MODULE_ID=f5AlertNotification, raidEvent=raidEvent, lcd_fault=lcd_fault, backplane=backplane, unknown_alarm=unknown_alarm, txPwrHiAlarm=txPwrHiAlarm, hardware_device_fault=hardware_device_fault, ddmVccLoAlarm=ddmVccLoAlarm, memory_fault=memory_fault, psu_fault=psu_fault, f5AlertsNotifyGroup=f5AlertsNotifyGroup, rxPwrLoWarn=rxPwrLoWarn, txPwrLoAlarm=txPwrLoAlarm, service_health=service_health, rxPwrHiWarn=rxPwrHiWarn, txBiasLoAlarm=txBiasLoAlarm, rxPwrLoAlarm=rxPwrLoAlarm, txBiasHiAlarm=txBiasHiAlarm, fipsError=fipsError, txPwrHiWarn=txPwrHiWarn, thermal_fault=thermal_fault, ddmTempHiWarn=ddmTempHiWarn, pcie_fault=pcie_fault, drive_capacity_fault=drive_capacity_fault, ddmVccHiAlarm=ddmVccHiAlarm, ddmVccHiWarn=ddmVccHiWarn, cpu_fault=cpu_fault, drive_thermal_throttle=drive_thermal_throttle, blade_hardware_fault=blade_hardware_fault, drive_utilization=drive_utilization, drive_fault=drive_fault, module_communication_error=module_communication_error, rxPwrHiAlarm=rxPwrHiAlarm)
