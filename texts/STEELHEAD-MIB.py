#
# PySNMP MIB module STEELHEAD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/riverbed/STEELHEAD-MIB
# Produced by pysmi-1.1.12 at Tue May 28 12:39:53 2024
# On host fv-az768-311 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
products, = mibBuilder.importSymbols("RBT-MIB", "products")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, iso, ModuleIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Unsigned32, NotificationType, ObjectIdentity, Gauge32, Integer32, Counter32, Counter64, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "iso", "ModuleIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Unsigned32", "NotificationType", "ObjectIdentity", "Gauge32", "Integer32", "Counter32", "Counter64", "TimeTicks")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
steelhead = ModuleIdentity((1, 3, 6, 1, 4, 1, 17163, 1, 1))
steelhead.setRevisions(('2012-02-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: steelhead.setRevisionsDescriptions(('Updated for 7.0.1',))
if mibBuilder.loadTexts: steelhead.setLastUpdated('201202030000Z')
if mibBuilder.loadTexts: steelhead.setOrganization('Riverbed Technology, Inc.')
if mibBuilder.loadTexts: steelhead.setContactInfo('  Riverbed Technical Support\n             support@riverbed.com')
if mibBuilder.loadTexts: steelhead.setDescription('Steelhead MIB')
system = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 1))
status = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2))
config = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 3))
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4))
statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5))
model = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: model.setStatus('current')
if mibBuilder.loadTexts: model.setDescription('Appliance model')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
if mibBuilder.loadTexts: serialNumber.setDescription('Appliance serial number')
systemVersion = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVersion.setStatus('current')
if mibBuilder.loadTexts: systemVersion.setDescription('System software version string')
systemClock = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemClock.setStatus('current')
if mibBuilder.loadTexts: systemClock.setDescription('System clock time')
health = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: health.setStatus('current')
if mibBuilder.loadTexts: health.setDescription('Current health of the system. The value is one amongst\n             Healthy, Admission Control, Degraded, Critical')
serviceStatus = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceStatus.setStatus('current')
if mibBuilder.loadTexts: serviceStatus.setDescription('Current status of the optimization service')
serviceUptime = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceUptime.setStatus('current')
if mibBuilder.loadTexts: serviceUptime.setDescription('Uptime of the optimization service')
procTable = MibTable((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 5), )
if mibBuilder.loadTexts: procTable.setStatus('current')
if mibBuilder.loadTexts: procTable.setDescription('Table containing information about the various\n             managed processes')
procEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 5, 1), ).setIndexNames((0, "STEELHEAD-MIB", "procIndex"))
if mibBuilder.loadTexts: procEntry.setStatus('current')
if mibBuilder.loadTexts: procEntry.setDescription('Entry for one process')
procIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: procIndex.setStatus('current')
if mibBuilder.loadTexts: procIndex.setDescription('Synthetic numeric unique ID of process')
procName = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procName.setStatus('current')
if mibBuilder.loadTexts: procName.setDescription('Unique name of process')
procStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 5, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procStatus.setStatus('current')
if mibBuilder.loadTexts: procStatus.setDescription('Current state of process')
procNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procNumFailures.setStatus('current')
if mibBuilder.loadTexts: procNumFailures.setDescription('Number of times process has crashed or exited unexpectedly')
peerStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 6))
peerTable = MibTable((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 6, 1), )
if mibBuilder.loadTexts: peerTable.setStatus('current')
if mibBuilder.loadTexts: peerTable.setDescription('A table containing information about the various peer\n             appliances')
peerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 6, 1, 1), ).setIndexNames((0, "STEELHEAD-MIB", "peerIndex"))
if mibBuilder.loadTexts: peerEntry.setStatus('current')
if mibBuilder.loadTexts: peerEntry.setDescription('Entry for one peer')
peerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 6, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: peerIndex.setStatus('current')
if mibBuilder.loadTexts: peerIndex.setDescription('Index of peer')
peerHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 6, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peerHostname.setStatus('current')
if mibBuilder.loadTexts: peerHostname.setDescription('Hostname of peer')
peerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 6, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peerVersion.setStatus('current')
if mibBuilder.loadTexts: peerVersion.setDescription('System software version of peer')
peerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 6, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peerAddress.setStatus('current')
if mibBuilder.loadTexts: peerAddress.setDescription('IP address of peer')
peerModel = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 6, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peerModel.setStatus('current')
if mibBuilder.loadTexts: peerModel.setDescription('Model of peer')
systemHealth = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10000, 30000, 31000, 50000))).clone(namedValues=NamedValues(("healthy", 10000), ("degraded", 30000), ("admissionControl", 31000), ("critical", 50000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHealth.setStatus('current')
if mibBuilder.loadTexts: systemHealth.setDescription('Current health of the system. This variable is identical to\n             health except that it is of integer datatype')
optServiceStatus = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("unmanaged", 1), ("running", 2), ("sentCom1", 3), ("sentTerm1", 4), ("sentTerm2", 5), ("sentTerm3", 6), ("pending", 7), ("stopped", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optServiceStatus.setStatus('current')
if mibBuilder.loadTexts: optServiceStatus.setDescription('Status of the optimization service. This variable is identical to\n             serviceStatus except that it is of integer datatype')
systemTemperature = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTemperature.setStatus('current')
if mibBuilder.loadTexts: systemTemperature.setDescription('The temperature of the system (C)')
healthNotes = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthNotes.setStatus('current')
if mibBuilder.loadTexts: healthNotes.setDescription('Some notes regarding the health of the system')
neighborStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12))
neighborTable = MibTable((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1), )
if mibBuilder.loadTexts: neighborTable.setStatus('current')
if mibBuilder.loadTexts: neighborTable.setDescription('List of neighbors and their status')
neighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1), ).setIndexNames((0, "STEELHEAD-MIB", "neighborIndex"))
if mibBuilder.loadTexts: neighborEntry.setStatus('current')
if mibBuilder.loadTexts: neighborEntry.setDescription('Entry for one neighbor')
neighborIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: neighborIndex.setStatus('current')
if mibBuilder.loadTexts: neighborIndex.setDescription('Index of neighbor')
neighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborAddress.setStatus('current')
if mibBuilder.loadTexts: neighborAddress.setDescription('IP address of neighbor')
neighborState = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborState.setStatus('current')
if mibBuilder.loadTexts: neighborState.setDescription('State of this neighbor')
neighborNatReqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborNatReqSent.setStatus('current')
if mibBuilder.loadTexts: neighborNatReqSent.setDescription('Number of NAT request messages sent to this neighbor')
neighborNatDelSent = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborNatDelSent.setStatus('current')
if mibBuilder.loadTexts: neighborNatDelSent.setDescription('Number of NAT DEL messages sent to this neighbor')
neighborNatAckRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborNatAckRcvd.setStatus('current')
if mibBuilder.loadTexts: neighborNatAckRcvd.setDescription('Number of NAT ACK messages received from this neighbor')
neighborNatReqRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborNatReqRcvd.setStatus('current')
if mibBuilder.loadTexts: neighborNatReqRcvd.setDescription('Number of NAT request messages received from this neighbor')
neighborNatDelRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborNatDelRcvd.setStatus('current')
if mibBuilder.loadTexts: neighborNatDelRcvd.setDescription('Number of NAT DEL messages received from this neighbor')
neighborNatAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborNatAckSent.setStatus('current')
if mibBuilder.loadTexts: neighborNatAckSent.setDescription('Number of NAT ACK messages sent to this neighbor')
neighborDynReqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborDynReqSent.setStatus('current')
if mibBuilder.loadTexts: neighborDynReqSent.setDescription('Number of DYN request messages sent to this neighbor')
neighborDynDelSent = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborDynDelSent.setStatus('current')
if mibBuilder.loadTexts: neighborDynDelSent.setDescription('Number of DYN DEL messages sent to this neighbor')
neighborDynAckRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborDynAckRcvd.setStatus('current')
if mibBuilder.loadTexts: neighborDynAckRcvd.setDescription('Number of DYN ACK messages received from this neighbor')
neighborDynReqRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborDynReqRcvd.setStatus('current')
if mibBuilder.loadTexts: neighborDynReqRcvd.setDescription('Number of DYN request messages received from this neighbor')
neighborDynDelRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborDynDelRcvd.setStatus('current')
if mibBuilder.loadTexts: neighborDynDelRcvd.setDescription('Number of DYN DEL messages received from this neighbor')
neighborDynAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborDynAckSent.setStatus('current')
if mibBuilder.loadTexts: neighborDynAckSent.setDescription('Number of DYN ACK messages sent to this neighbor')
neighborRedirReqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborRedirReqSent.setStatus('current')
if mibBuilder.loadTexts: neighborRedirReqSent.setDescription('Number of REDIR request messages sent to this neighbor')
neighborRedirDelSent = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborRedirDelSent.setStatus('current')
if mibBuilder.loadTexts: neighborRedirDelSent.setDescription('Number of REDIR DEL messages sent to this neighbor')
neighborRedirAckRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborRedirAckRcvd.setStatus('current')
if mibBuilder.loadTexts: neighborRedirAckRcvd.setDescription('Number of REDIR ACK messages received from this neighbor')
neighborRedirReqRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborRedirReqRcvd.setStatus('current')
if mibBuilder.loadTexts: neighborRedirReqRcvd.setDescription('Number of REDIR request messages received from this neighbor')
neighborRedirDelRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborRedirDelRcvd.setStatus('current')
if mibBuilder.loadTexts: neighborRedirDelRcvd.setDescription('Number of REDIR DEL messages received from this neighbor')
neighborRedirAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborRedirAckSent.setStatus('current')
if mibBuilder.loadTexts: neighborRedirAckSent.setDescription('Number of REDIR ACK messages sent to this neighbor')
neighborConnFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborConnFailures.setStatus('current')
if mibBuilder.loadTexts: neighborConnFailures.setDescription('Number of connection failures with this neighbor')
neighborKeepaliveTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborKeepaliveTimeouts.setStatus('current')
if mibBuilder.loadTexts: neighborKeepaliveTimeouts.setDescription('Number of keepalives that have timed out with this neighbor')
neighborRequestTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborRequestTimeouts.setStatus('current')
if mibBuilder.loadTexts: neighborRequestTimeouts.setDescription('Number of requests that have timed out with this neighbor')
neighborMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 1, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborMaxLatency.setStatus('current')
if mibBuilder.loadTexts: neighborMaxLatency.setDescription('Maximum latency that has been seen with this neighbor')
neighborAggregates = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2))
nghAggrConfigured = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nghAggrConfigured.setStatus('current')
if mibBuilder.loadTexts: nghAggrConfigured.setDescription('Number of neighbors configured')
nghAggrConnected = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nghAggrConnected.setStatus('current')
if mibBuilder.loadTexts: nghAggrConnected.setDescription('Number of neighbors connected')
nghAggrConnFailures = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nghAggrConnFailures.setStatus('current')
if mibBuilder.loadTexts: nghAggrConnFailures.setDescription('Number of connection failures')
nghAggrKeepaliveTimouts = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nghAggrKeepaliveTimouts.setStatus('current')
if mibBuilder.loadTexts: nghAggrKeepaliveTimouts.setDescription('Number of keepalives that have timed out')
nghAggrRequestTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nghAggrRequestTimeouts.setStatus('current')
if mibBuilder.loadTexts: nghAggrRequestTimeouts.setDescription('Number of requests that have timed out')
nghAggrMaxLatency = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nghAggrMaxLatency.setStatus('current')
if mibBuilder.loadTexts: nghAggrMaxLatency.setDescription('The maximum latency that had been seen')
nghAggrNatReqSent = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nghAggrNatReqSent.setStatus('current')
if mibBuilder.loadTexts: nghAggrNatReqSent.setDescription('Number of NAT request messages sent')
nghAggrNatDelSent = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nghAggrNatDelSent.setStatus('current')
if mibBuilder.loadTexts: nghAggrNatDelSent.setDescription('Number of NAT DEL messages sent')
nghAggrNatAckRcvd = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nghAggrNatAckRcvd.setStatus('current')
if mibBuilder.loadTexts: nghAggrNatAckRcvd.setDescription('Number of NAT ACK messages received')
nghAggrNatReqRcvd = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nghAggrNatReqRcvd.setStatus('current')
if mibBuilder.loadTexts: nghAggrNatReqRcvd.setDescription('Number of NAT request messages received')
nghAggrNatDelRcvd = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nghAggrNatDelRcvd.setStatus('current')
if mibBuilder.loadTexts: nghAggrNatDelRcvd.setDescription('Number of NAT DEL messages received')
nghAggrNatAckSent = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nghAggrNatAckSent.setStatus('current')
if mibBuilder.loadTexts: nghAggrNatAckSent.setDescription('Number of NAT ACK messages sent')
nghAggrDynReqSent = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nghAggrDynReqSent.setStatus('current')
if mibBuilder.loadTexts: nghAggrDynReqSent.setDescription('Number of DYN request messages sent')
nghAggrDynDelSent = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nghAggrDynDelSent.setStatus('current')
if mibBuilder.loadTexts: nghAggrDynDelSent.setDescription('Number of DYN DEL messages sent')
nghAggrDynAckRcvd = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nghAggrDynAckRcvd.setStatus('current')
if mibBuilder.loadTexts: nghAggrDynAckRcvd.setDescription('Number of DYN ACK messages received')
nghAggrDynReqRcvd = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nghAggrDynReqRcvd.setStatus('current')
if mibBuilder.loadTexts: nghAggrDynReqRcvd.setDescription('Number of DYN request messages received')
nghAggrDynDelRcvd = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nghAggrDynDelRcvd.setStatus('current')
if mibBuilder.loadTexts: nghAggrDynDelRcvd.setDescription('Number of DYN DEL messages received')
nghAggrDynAckSent = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nghAggrDynAckSent.setStatus('current')
if mibBuilder.loadTexts: nghAggrDynAckSent.setDescription('Number of DYN ACK messages sent')
nghAggrRedirReqSent = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nghAggrRedirReqSent.setStatus('current')
if mibBuilder.loadTexts: nghAggrRedirReqSent.setDescription('Number of REDIR request messages sent')
nghAggrRedirDelSent = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nghAggrRedirDelSent.setStatus('current')
if mibBuilder.loadTexts: nghAggrRedirDelSent.setDescription('Number of REDIR DEL messages')
nghAggrRedirAckRcvd = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nghAggrRedirAckRcvd.setStatus('current')
if mibBuilder.loadTexts: nghAggrRedirAckRcvd.setDescription('Number of REDIR ACK messages received')
nghAggrRedirReqRcvd = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nghAggrRedirReqRcvd.setStatus('current')
if mibBuilder.loadTexts: nghAggrRedirReqRcvd.setDescription('Number of REDIR request messages received')
nghAggrRedirDelRcvd = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nghAggrRedirDelRcvd.setStatus('current')
if mibBuilder.loadTexts: nghAggrRedirDelRcvd.setDescription('Number of REDIR DEL messages received')
nghAggrRedirAckSent = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 12, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nghAggrRedirAckSent.setStatus('current')
if mibBuilder.loadTexts: nghAggrRedirAckSent.setDescription('Number of REDIR ACK messages sent')
crlStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 11))
crlTable = MibTable((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 11, 1), )
if mibBuilder.loadTexts: crlTable.setStatus('current')
if mibBuilder.loadTexts: crlTable.setDescription('A table containing information about crl polling of various SSL\n            modules')
crlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 11, 1, 1), ).setIndexNames((0, "STEELHEAD-MIB", "crlIndex"))
if mibBuilder.loadTexts: crlEntry.setStatus('current')
if mibBuilder.loadTexts: crlEntry.setDescription('Entry for crl polling of one SSL module')
crlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 11, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: crlIndex.setStatus('current')
if mibBuilder.loadTexts: crlIndex.setDescription('Index of one SSL module')
crlFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 11, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crlFeatureName.setStatus('current')
if mibBuilder.loadTexts: crlFeatureName.setDescription('Name of SSL module')
crlNumCdpErr = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 11, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crlNumCdpErr.setStatus('current')
if mibBuilder.loadTexts: crlNumCdpErr.setDescription('Number of cdp(s) from which crl polling fails')
crlErrMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 11, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crlErrMsg.setStatus('current')
if mibBuilder.loadTexts: crlErrMsg.setDescription('A group of error messages showing failure of cdp(s) polling')
capabilityStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 13))
shMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 13, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shMaxConnections.setStatus('current')
if mibBuilder.loadTexts: shMaxConnections.setDescription('Maximum possible connections through this appliance')
shMaxBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 13, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shMaxBandwidth.setStatus('current')
if mibBuilder.loadTexts: shMaxBandwidth.setDescription('Maximum possible bandwidth for this appliance')
asymRouteCount = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 2, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asymRouteCount.setStatus('current')
if mibBuilder.loadTexts: asymRouteCount.setDescription('Number of Asymmetric Routes')
activeConfig = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeConfig.setStatus('current')
if mibBuilder.loadTexts: activeConfig.setDescription('Name of the currently active configuration')
inpath = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 3, 2))
inpathSupport = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 3, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inpathSupport.setStatus('current')
if mibBuilder.loadTexts: inpathSupport.setDescription('In-path support')
outofpath = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 3, 3))
outofpathSupport = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 3, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outofpathSupport.setStatus('current')
if mibBuilder.loadTexts: outofpathSupport.setDescription('Out-of-path support')
datastoreSync = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 3, 4))
datastoreSyncPort = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 3, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: datastoreSyncPort.setStatus('current')
if mibBuilder.loadTexts: datastoreSyncPort.setDescription('Datastore Sync Port')
datastoreSyncAddr = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 3, 4, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: datastoreSyncAddr.setStatus('current')
if mibBuilder.loadTexts: datastoreSyncAddr.setDescription('Datastore Sync Address')
alarmsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0))
procCrash = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1)).setObjects(("STEELHEAD-MIB", "procName"))
if mibBuilder.loadTexts: procCrash.setStatus('current')
if mibBuilder.loadTexts: procCrash.setDescription('A procCrash trap signifies that a process managed by PM\n            has crashed and left a core file.  The variable sent with\n            the notification indicates which process crashed.')
procExit = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 2)).setObjects(("STEELHEAD-MIB", "procName"))
if mibBuilder.loadTexts: procExit.setStatus('current')
if mibBuilder.loadTexts: procExit.setDescription('A procExit trap signifies that a process managed by PM\n            has exited unexpectedly, but not left a core file.\n\n            The variable sent with the notification indicates \n            which process exited.')
cpuUtil = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 3))
if mibBuilder.loadTexts: cpuUtil.setStatus('current')
if mibBuilder.loadTexts: cpuUtil.setDescription('The average CPU utilization in the past minute has gone\n            above the acceptable threshold')
pagingActivity = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 4))
if mibBuilder.loadTexts: pagingActivity.setStatus('current')
if mibBuilder.loadTexts: pagingActivity.setDescription('The system has been paging excessively (thrashing)')
smartError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 5))
if mibBuilder.loadTexts: smartError.setStatus('current')
if mibBuilder.loadTexts: smartError.setDescription('SMART has sent an event about a possible disk error')
peerVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 6)).setObjects(("STEELHEAD-MIB", "systemVersion"))
if mibBuilder.loadTexts: peerVersionMismatch.setStatus('current')
if mibBuilder.loadTexts: peerVersionMismatch.setDescription('Detected a peer with a mismatched software version')
bypassMode = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 7))
if mibBuilder.loadTexts: bypassMode.setStatus('current')
if mibBuilder.loadTexts: bypassMode.setDescription('Traffic is being passed through')
raidError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 8))
if mibBuilder.loadTexts: raidError.setStatus('current')
if mibBuilder.loadTexts: raidError.setDescription('An error has been generated by the RAID array')
storeCorruption = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 9))
if mibBuilder.loadTexts: storeCorruption.setStatus('current')
if mibBuilder.loadTexts: storeCorruption.setDescription('The data store is corrupted')
admissionMemError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 10))
if mibBuilder.loadTexts: admissionMemError.setStatus('current')
if mibBuilder.loadTexts: admissionMemError.setDescription('Memory pressure is high. No additional connections will be\n             optimized')
admissionConnError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 11))
if mibBuilder.loadTexts: admissionConnError.setStatus('current')
if mibBuilder.loadTexts: admissionConnError.setDescription('Connection limit reached. No additional connections will be\n             optimized')
haltError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 12))
if mibBuilder.loadTexts: haltError.setStatus('current')
if mibBuilder.loadTexts: haltError.setDescription('The service is halted due to a software error')
serviceError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 13))
if mibBuilder.loadTexts: serviceError.setStatus('current')
if mibBuilder.loadTexts: serviceError.setDescription('There has been a non-fatal optimization service error. \n             Please consult the log file')
scheduledJobError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 14))
if mibBuilder.loadTexts: scheduledJobError.setStatus('current')
if mibBuilder.loadTexts: scheduledJobError.setDescription('A scheduled job has failed during execution')
confModeEnter = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 15))
if mibBuilder.loadTexts: confModeEnter.setStatus('current')
if mibBuilder.loadTexts: confModeEnter.setDescription('A user has entered configuration mode')
confModeExit = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 16))
if mibBuilder.loadTexts: confModeExit.setStatus('current')
if mibBuilder.loadTexts: confModeExit.setDescription('A user has exited configuration mode')
linkError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 17))
if mibBuilder.loadTexts: linkError.setStatus('current')
if mibBuilder.loadTexts: linkError.setDescription('An interface on the appliance has lost its link')
nfsV2V4 = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 18))
if mibBuilder.loadTexts: nfsV2V4.setStatus('current')
if mibBuilder.loadTexts: nfsV2V4.setDescription('NFS v2/v4 alarm notification')
powerSupplyError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 19))
if mibBuilder.loadTexts: powerSupplyError.setStatus('current')
if mibBuilder.loadTexts: powerSupplyError.setDescription('A power supply on the appliance has failed')
asymRouteError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 20)).setObjects(("STEELHEAD-MIB", "asymRouteCount"))
if mibBuilder.loadTexts: asymRouteError.setStatus('current')
if mibBuilder.loadTexts: asymRouteError.setDescription('Asymmetric routes have been detected,certain connections might\n             not have been optimized because of this.')
fanError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 21))
if mibBuilder.loadTexts: fanError.setStatus('current')
if mibBuilder.loadTexts: fanError.setDescription('A fan has failed on this appliance')
memoryError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 22))
if mibBuilder.loadTexts: memoryError.setStatus('current')
if mibBuilder.loadTexts: memoryError.setDescription('A memory error has been detected on the appliance')
ipmi = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 23))
if mibBuilder.loadTexts: ipmi.setStatus('current')
if mibBuilder.loadTexts: ipmi.setDescription('An IPMI event has been detected on the appliance. Please check\n             the details in the alarm report on the web UI')
configChange = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 24))
if mibBuilder.loadTexts: configChange.setStatus('current')
if mibBuilder.loadTexts: configChange.setDescription("A change has been made to the system's configuration")
datastoreWrapped = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 25))
if mibBuilder.loadTexts: datastoreWrapped.setStatus('current')
if mibBuilder.loadTexts: datastoreWrapped.setDescription('The datastore has wrapped around')
temperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 26))
if mibBuilder.loadTexts: temperatureWarning.setStatus('current')
if mibBuilder.loadTexts: temperatureWarning.setDescription('The system temperature has exceeded the threshold')
temperatureCritical = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 27))
if mibBuilder.loadTexts: temperatureCritical.setStatus('current')
if mibBuilder.loadTexts: temperatureCritical.setDescription('The system temperature has reached a critical stage')
cfConnFailure = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 28)).setObjects(("STEELHEAD-MIB", "neighborAddress"))
if mibBuilder.loadTexts: cfConnFailure.setStatus('current')
if mibBuilder.loadTexts: cfConnFailure.setDescription('Unable to establish connection with the specified neighbor')
cfConnLostEos = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 29)).setObjects(("STEELHEAD-MIB", "neighborAddress"))
if mibBuilder.loadTexts: cfConnLostEos.setStatus('current')
if mibBuilder.loadTexts: cfConnLostEos.setDescription('Connection lost since end of stream was received from the \n             specified neighbor')
cfConnLostErr = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 30)).setObjects(("STEELHEAD-MIB", "neighborAddress"))
if mibBuilder.loadTexts: cfConnLostErr.setStatus('current')
if mibBuilder.loadTexts: cfConnLostErr.setDescription('Connection lost due to an error communicating with the \n             specified neighbor')
cfKeepaliveTimeout = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 31)).setObjects(("STEELHEAD-MIB", "neighborAddress"))
if mibBuilder.loadTexts: cfKeepaliveTimeout.setStatus('current')
if mibBuilder.loadTexts: cfKeepaliveTimeout.setDescription('Connection lost due to lack of keepalives from the specified \n             neighbor')
cfAckTimeout = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 32)).setObjects(("STEELHEAD-MIB", "neighborAddress"))
if mibBuilder.loadTexts: cfAckTimeout.setStatus('current')
if mibBuilder.loadTexts: cfAckTimeout.setDescription('Connection lost due to lack of acks from the specified \n             neighbor')
cfReadInfoTimeout = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 33)).setObjects(("STEELHEAD-MIB", "neighborAddress"))
if mibBuilder.loadTexts: cfReadInfoTimeout.setStatus('current')
if mibBuilder.loadTexts: cfReadInfoTimeout.setDescription('Timeout reading info from the specified neighbor')
cfLatencyExceeded = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 34)).setObjects(("STEELHEAD-MIB", "neighborAddress"))
if mibBuilder.loadTexts: cfLatencyExceeded.setStatus('current')
if mibBuilder.loadTexts: cfLatencyExceeded.setDescription('Connection forwarding latency with the specified neighbor\n              has exceeded the threshold')
sslPeeringSCEPAutoReenrollError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 35))
if mibBuilder.loadTexts: sslPeeringSCEPAutoReenrollError.setStatus('current')
if mibBuilder.loadTexts: sslPeeringSCEPAutoReenrollError.setDescription('There is an error in the automatic re-enrollment of the SSL peering certificate')
crlError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 36)).setObjects(("STEELHEAD-MIB", "crlFeatureName"), ("STEELHEAD-MIB", "crlErrMsg"))
if mibBuilder.loadTexts: crlError.setStatus('current')
if mibBuilder.loadTexts: crlError.setDescription('crl polling fails')
datastoreSyncFailure = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 37))
if mibBuilder.loadTexts: datastoreSyncFailure.setStatus('current')
if mibBuilder.loadTexts: datastoreSyncFailure.setDescription('Data store sync has failed')
secureVaultNeedsUnlock = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 38))
if mibBuilder.loadTexts: secureVaultNeedsUnlock.setStatus('current')
if mibBuilder.loadTexts: secureVaultNeedsUnlock.setDescription('SSL acceleration and the secure data store cannot be used until\n             the secure vault has been unlocked.')
secureVaultNeedsRekey = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 39))
if mibBuilder.loadTexts: secureVaultNeedsRekey.setStatus('current')
if mibBuilder.loadTexts: secureVaultNeedsRekey.setDescription('If you wish to use a non-default password for the secure\n             vault, the password must be rekeyed. Please see\n             Knowledge Base article 5592 for more details.')
secureVaultInitError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 40))
if mibBuilder.loadTexts: secureVaultInitError.setStatus('current')
if mibBuilder.loadTexts: secureVaultInitError.setDescription('An error was detected while initializing\n             the secure vault. Please contact customer support.')
configSave = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 41))
if mibBuilder.loadTexts: configSave.setStatus('current')
if mibBuilder.loadTexts: configSave.setDescription('The current appliance configuration has been saved')
tcpDumpStarted = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 42))
if mibBuilder.loadTexts: tcpDumpStarted.setStatus('current')
if mibBuilder.loadTexts: tcpDumpStarted.setDescription('A TCP Dump has been started')
tcpDumpScheduled = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 43))
if mibBuilder.loadTexts: tcpDumpScheduled.setStatus('current')
if mibBuilder.loadTexts: tcpDumpScheduled.setDescription('A TCP Dump has been scheduled')
newUserCreated = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 44))
if mibBuilder.loadTexts: newUserCreated.setStatus('current')
if mibBuilder.loadTexts: newUserCreated.setDescription('A new user has been created')
diskError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 45))
if mibBuilder.loadTexts: diskError.setStatus('current')
if mibBuilder.loadTexts: diskError.setDescription('Disk error has been detected')
wearWarning = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 46))
if mibBuilder.loadTexts: wearWarning.setStatus('current')
if mibBuilder.loadTexts: wearWarning.setDescription('Accumulated SSD write cycles passed predefined level')
cliUserLogin = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 47))
if mibBuilder.loadTexts: cliUserLogin.setStatus('current')
if mibBuilder.loadTexts: cliUserLogin.setDescription('A user has just logged-in via CLI')
cliUserLogout = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 48))
if mibBuilder.loadTexts: cliUserLogout.setStatus('current')
if mibBuilder.loadTexts: cliUserLogout.setDescription('A CLI user has just logged-out')
webUserLogin = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 49))
if mibBuilder.loadTexts: webUserLogin.setStatus('current')
if mibBuilder.loadTexts: webUserLogin.setDescription('A user has just logged-in via the Web UI')
webUserLogout = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 50))
if mibBuilder.loadTexts: webUserLogout.setStatus('current')
if mibBuilder.loadTexts: webUserLogout.setDescription('A user has just logged-out via the Web UI')
trapTest = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 51))
if mibBuilder.loadTexts: trapTest.setStatus('current')
if mibBuilder.loadTexts: trapTest.setDescription('Trap test')
admissionCpuError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 52))
if mibBuilder.loadTexts: admissionCpuError.setStatus('current')
if mibBuilder.loadTexts: admissionCpuError.setDescription('Optimization service is experiencing high CPU utilization, no additional\n             connections will be optimized')
admissionTcpError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 53))
if mibBuilder.loadTexts: admissionTcpError.setStatus('current')
if mibBuilder.loadTexts: admissionTcpError.setDescription('Optimization service is experiencing high TCP memory pressure, no additional\n             connections will be optimized')
systemDiskFullError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 54))
if mibBuilder.loadTexts: systemDiskFullError.setStatus('current')
if mibBuilder.loadTexts: systemDiskFullError.setDescription('One or more system partitions is full or almost full')
domainJoinError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 55))
if mibBuilder.loadTexts: domainJoinError.setStatus('current')
if mibBuilder.loadTexts: domainJoinError.setDescription('An attempt to join a domain failed')
certsExpiringError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 56))
if mibBuilder.loadTexts: certsExpiringError.setStatus('current')
if mibBuilder.loadTexts: certsExpiringError.setDescription('Some x509 certificates may be expiring')
licenseError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 57))
if mibBuilder.loadTexts: licenseError.setStatus('current')
if mibBuilder.loadTexts: licenseError.setDescription('The main Appliance license has expired, been removed, or become invalid')
hardwareError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 58))
if mibBuilder.loadTexts: hardwareError.setStatus('current')
if mibBuilder.loadTexts: hardwareError.setDescription('Hardware Error detected')
sysdetailError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 59))
if mibBuilder.loadTexts: sysdetailError.setStatus('current')
if mibBuilder.loadTexts: sysdetailError.setDescription('Error is found in System Detail Report')
admissionMapiError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 60))
if mibBuilder.loadTexts: admissionMapiError.setStatus('current')
if mibBuilder.loadTexts: admissionMapiError.setDescription('New MAPI connections will be passed through due to high connection count')
neighborIncompatibility = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 61))
if mibBuilder.loadTexts: neighborIncompatibility.setStatus('current')
if mibBuilder.loadTexts: neighborIncompatibility.setDescription('Serial cascade misconfiguration has been detected')
flashError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 62))
if mibBuilder.loadTexts: flashError.setStatus('current')
if mibBuilder.loadTexts: flashError.setDescription('Flash hardware error detected.')
lanWanLoopError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 63))
if mibBuilder.loadTexts: lanWanLoopError.setStatus('current')
if mibBuilder.loadTexts: lanWanLoopError.setDescription('LAN-WAN loop detected. System will not optimize new connections un\ntill this error is cleared')
optimizationServiceStatusError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 64))
if mibBuilder.loadTexts: optimizationServiceStatusError.setStatus('current')
if mibBuilder.loadTexts: optimizationServiceStatusError.setDescription('Optimization service currently not optimizing any connecntions.')
upgradeFailure = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 65))
if mibBuilder.loadTexts: upgradeFailure.setStatus('current')
if mibBuilder.loadTexts: upgradeFailure.setDescription('Upgrade failed and the system is running the previous image')
licenseExpiring = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 66))
if mibBuilder.loadTexts: licenseExpiring.setStatus('current')
if mibBuilder.loadTexts: licenseExpiring.setDescription('One or more licensed features will expire within the next two week\ns')
licenseExpired = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 67))
if mibBuilder.loadTexts: licenseExpired.setStatus('current')
if mibBuilder.loadTexts: licenseExpired.setDescription('One or more licensed features have expired')
clusterDisconnectedSHAlertError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 68))
if mibBuilder.loadTexts: clusterDisconnectedSHAlertError.setStatus('current')
if mibBuilder.loadTexts: clusterDisconnectedSHAlertError.setDescription('A cluster Steelhead has been reported as disconnected')
smbAlert = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 69))
if mibBuilder.loadTexts: smbAlert.setStatus('current')
if mibBuilder.loadTexts: smbAlert.setDescription('Domain authentication alert')
linkDuplex = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 70))
if mibBuilder.loadTexts: linkDuplex.setStatus('current')
if mibBuilder.loadTexts: linkDuplex.setDescription('An interface on the appliance is in half-duplex mode')
linkIoErrors = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 71))
if mibBuilder.loadTexts: linkIoErrors.setStatus('current')
if mibBuilder.loadTexts: linkIoErrors.setDescription('An interface on the appliance is suffering I/O errors')
storageProfSwitchFailed = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 73))
if mibBuilder.loadTexts: storageProfSwitchFailed.setStatus('current')
if mibBuilder.loadTexts: storageProfSwitchFailed.setDescription('Storage profile switch failed')
cpuUtilClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1003))
if mibBuilder.loadTexts: cpuUtilClear.setStatus('current')
if mibBuilder.loadTexts: cpuUtilClear.setDescription('The average CPU utilization has fallen back \n             within the acceptable threshold')
pagingActivityClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1004))
if mibBuilder.loadTexts: pagingActivityClear.setStatus('current')
if mibBuilder.loadTexts: pagingActivityClear.setDescription('The system has stopped paging excessively (thrashing)')
peerVersionMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1006)).setObjects(("STEELHEAD-MIB", "systemVersion"))
if mibBuilder.loadTexts: peerVersionMismatchClear.setStatus('current')
if mibBuilder.loadTexts: peerVersionMismatchClear.setDescription('All peers are compatible')
bypassModeClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1007))
if mibBuilder.loadTexts: bypassModeClear.setStatus('current')
if mibBuilder.loadTexts: bypassModeClear.setDescription('Traffic is now being optimized')
raidErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1008))
if mibBuilder.loadTexts: raidErrorClear.setStatus('current')
if mibBuilder.loadTexts: raidErrorClear.setDescription('A RAID error has been cleared')
storeCorruptionClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1009))
if mibBuilder.loadTexts: storeCorruptionClear.setStatus('current')
if mibBuilder.loadTexts: storeCorruptionClear.setDescription('The data store is normal')
admissionMemErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1010))
if mibBuilder.loadTexts: admissionMemErrorClear.setStatus('current')
if mibBuilder.loadTexts: admissionMemErrorClear.setDescription('Admission control memory alarm has been cleared,\n             and the optimization service is running normally')
admissionConnErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1011))
if mibBuilder.loadTexts: admissionConnErrorClear.setStatus('current')
if mibBuilder.loadTexts: admissionConnErrorClear.setDescription('Admission control connections alarm has been cleared,\n             and the service is running normally')
haltErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1012))
if mibBuilder.loadTexts: haltErrorClear.setStatus('current')
if mibBuilder.loadTexts: haltErrorClear.setDescription('The service is now running normally')
serviceErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1013))
if mibBuilder.loadTexts: serviceErrorClear.setStatus('current')
if mibBuilder.loadTexts: serviceErrorClear.setDescription('The service is now running normally')
linkErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1017))
if mibBuilder.loadTexts: linkErrorClear.setStatus('current')
if mibBuilder.loadTexts: linkErrorClear.setDescription('An interface on the appliance has regained its link')
nfsV2V4Clear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1018))
if mibBuilder.loadTexts: nfsV2V4Clear.setStatus('current')
if mibBuilder.loadTexts: nfsV2V4Clear.setDescription('NFS v2/v4 alarm has been cleared')
powerSupplyErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1019))
if mibBuilder.loadTexts: powerSupplyErrorClear.setStatus('current')
if mibBuilder.loadTexts: powerSupplyErrorClear.setDescription('All power supplies are now functioning normally')
asymRouteErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1020))
if mibBuilder.loadTexts: asymRouteErrorClear.setStatus('current')
if mibBuilder.loadTexts: asymRouteErrorClear.setDescription('All asymmetric routes have expired or have been cleared')
fanErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1021))
if mibBuilder.loadTexts: fanErrorClear.setStatus('current')
if mibBuilder.loadTexts: fanErrorClear.setDescription('All system fans are now functioning normally')
memoryErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1022))
if mibBuilder.loadTexts: memoryErrorClear.setStatus('current')
if mibBuilder.loadTexts: memoryErrorClear.setDescription('A memory error has been rectified on the appliance')
ipmiClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1023))
if mibBuilder.loadTexts: ipmiClear.setStatus('current')
if mibBuilder.loadTexts: ipmiClear.setDescription('An IPMI event has been rectified on the appliance')
temperatureNormal = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1026))
if mibBuilder.loadTexts: temperatureNormal.setStatus('current')
if mibBuilder.loadTexts: temperatureNormal.setDescription('The system temperature is back within the threshold')
temperatureNonCritical = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1027))
if mibBuilder.loadTexts: temperatureNonCritical.setStatus('current')
if mibBuilder.loadTexts: temperatureNonCritical.setDescription('The system temperature is no longer in a critical stage')
cfConnRestored = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1028)).setObjects(("STEELHEAD-MIB", "neighborAddress"))
if mibBuilder.loadTexts: cfConnRestored.setStatus('current')
if mibBuilder.loadTexts: cfConnRestored.setDescription('Connection reestablished with the specified neighbor')
cfConnLostEosClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1029)).setObjects(("STEELHEAD-MIB", "neighborAddress"))
if mibBuilder.loadTexts: cfConnLostEosClear.setStatus('current')
if mibBuilder.loadTexts: cfConnLostEosClear.setDescription('Connection restablished after a prior termination due to\n              receiving end of strem from the specified neighbor')
cfConnLostErrClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1030)).setObjects(("STEELHEAD-MIB", "neighborAddress"))
if mibBuilder.loadTexts: cfConnLostErrClear.setStatus('current')
if mibBuilder.loadTexts: cfConnLostErrClear.setDescription('Connection restablished after a prior termination due to\n              an error communicating with the specified neighbor')
cfKeepaliveTimeoutClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1031)).setObjects(("STEELHEAD-MIB", "neighborAddress"))
if mibBuilder.loadTexts: cfKeepaliveTimeoutClear.setStatus('current')
if mibBuilder.loadTexts: cfKeepaliveTimeoutClear.setDescription('Keepalive restored after a prior timeout with the specified neighbor')
cfAckTimeoutClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1032)).setObjects(("STEELHEAD-MIB", "neighborAddress"))
if mibBuilder.loadTexts: cfAckTimeoutClear.setStatus('current')
if mibBuilder.loadTexts: cfAckTimeoutClear.setDescription('Ack restored after a prior timeout with the specified neighbor')
cfReadInfoTimeoutClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1033)).setObjects(("STEELHEAD-MIB", "neighborAddress"))
if mibBuilder.loadTexts: cfReadInfoTimeoutClear.setStatus('current')
if mibBuilder.loadTexts: cfReadInfoTimeoutClear.setDescription('Successfully read info from the specified neighbor after a prior\n         timeout')
cfLatencyExceededClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1034)).setObjects(("STEELHEAD-MIB", "neighborAddress"))
if mibBuilder.loadTexts: cfLatencyExceededClear.setStatus('current')
if mibBuilder.loadTexts: cfLatencyExceededClear.setDescription('Connection forwarding latency with the specified neighbor\n              is back within the threshold')
sslPeeringSCEPAutoReenrollClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1035))
if mibBuilder.loadTexts: sslPeeringSCEPAutoReenrollClear.setStatus('current')
if mibBuilder.loadTexts: sslPeeringSCEPAutoReenrollClear.setDescription('Automatic re-enrollment of SSL peering certificate is OK or is disabled')
crlClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1036))
if mibBuilder.loadTexts: crlClear.setStatus('current')
if mibBuilder.loadTexts: crlClear.setDescription('crl polling is running normally')
datastoreSyncFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1037))
if mibBuilder.loadTexts: datastoreSyncFailureClear.setStatus('current')
if mibBuilder.loadTexts: datastoreSyncFailureClear.setDescription('Data store sync restored')
secureVaultClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1040))
if mibBuilder.loadTexts: secureVaultClear.setStatus('current')
if mibBuilder.loadTexts: secureVaultClear.setDescription('Secure vault has been unlocked and is healthy')
diskErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1045))
if mibBuilder.loadTexts: diskErrorClear.setStatus('current')
if mibBuilder.loadTexts: diskErrorClear.setDescription('All disks are back online')
admissionCpuErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1052))
if mibBuilder.loadTexts: admissionCpuErrorClear.setStatus('current')
if mibBuilder.loadTexts: admissionCpuErrorClear.setDescription('Admission control CPU alarm has been cleared,\n             and the service is running normally')
admissionTcpErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1053))
if mibBuilder.loadTexts: admissionTcpErrorClear.setStatus('current')
if mibBuilder.loadTexts: admissionTcpErrorClear.setDescription('Admission control TCP alarm has been cleared,\n             and the service is running normally')
systemDiskFullErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1054))
if mibBuilder.loadTexts: systemDiskFullErrorClear.setStatus('current')
if mibBuilder.loadTexts: systemDiskFullErrorClear.setDescription('The system partitions are below usage thresholds')
domainJoinErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1055))
if mibBuilder.loadTexts: domainJoinErrorClear.setStatus('current')
if mibBuilder.loadTexts: domainJoinErrorClear.setDescription('A domain error on the appliance has been cleared')
certsExpiringErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1056))
if mibBuilder.loadTexts: certsExpiringErrorClear.setStatus('current')
if mibBuilder.loadTexts: certsExpiringErrorClear.setDescription('There are no expiring certificates')
licenseErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1057))
if mibBuilder.loadTexts: licenseErrorClear.setStatus('current')
if mibBuilder.loadTexts: licenseErrorClear.setDescription('The main appliance license error has been cleared')
hardwareErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1058))
if mibBuilder.loadTexts: hardwareErrorClear.setStatus('current')
if mibBuilder.loadTexts: hardwareErrorClear.setDescription('Hardware Error has been cleared')
sysdetailErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1059))
if mibBuilder.loadTexts: sysdetailErrorClear.setStatus('current')
if mibBuilder.loadTexts: sysdetailErrorClear.setDescription('Overall status of System Detail Report is back to OK')
admissionMapiErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1060))
if mibBuilder.loadTexts: admissionMapiErrorClear.setStatus('current')
if mibBuilder.loadTexts: admissionMapiErrorClear.setDescription('System will resume to optimize new MAPI connections since connection count has fallen below the threshold')
neighborIncompatibilityClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1061))
if mibBuilder.loadTexts: neighborIncompatibilityClear.setStatus('current')
if mibBuilder.loadTexts: neighborIncompatibilityClear.setDescription('Serial cascade misconfiguration issue is now resolved.')
flashErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1062))
if mibBuilder.loadTexts: flashErrorClear.setStatus('current')
if mibBuilder.loadTexts: flashErrorClear.setDescription('Flash is back to OK.')
lanWanLoopClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1063))
if mibBuilder.loadTexts: lanWanLoopClear.setStatus('current')
if mibBuilder.loadTexts: lanWanLoopClear.setDescription('LAN-WAN loop error cleared. System will resume to optimize connect\nions.')
optimizationServiceStatusClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1064))
if mibBuilder.loadTexts: optimizationServiceStatusClear.setStatus('current')
if mibBuilder.loadTexts: optimizationServiceStatusClear.setDescription('Optimization Service error cleared. System will resume to optimize\n connections.')
upgradeFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1065))
if mibBuilder.loadTexts: upgradeFailureClear.setStatus('current')
if mibBuilder.loadTexts: upgradeFailureClear.setDescription('Upgrade failure cleared and the system is still running\n             the previous image')
clusterDisconnectedSHAlertClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1068))
if mibBuilder.loadTexts: clusterDisconnectedSHAlertClear.setStatus('current')
if mibBuilder.loadTexts: clusterDisconnectedSHAlertClear.setDescription('All cluster Steelheads are currently connected')
smbAlertClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1069))
if mibBuilder.loadTexts: smbAlertClear.setStatus('current')
if mibBuilder.loadTexts: smbAlertClear.setDescription('Domain authentication alert has been cleared')
linkDuplexClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1070))
if mibBuilder.loadTexts: linkDuplexClear.setStatus('current')
if mibBuilder.loadTexts: linkDuplexClear.setDescription('An interface on the appliance has cleared the half-duplex error')
linkIoErrorsClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 1071))
if mibBuilder.loadTexts: linkIoErrorsClear.setStatus('current')
if mibBuilder.loadTexts: linkIoErrorsClear.setDescription('An interface on the appliance has cleared the I/O errors state')
rspGeneralError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 20001))
if mibBuilder.loadTexts: rspGeneralError.setStatus('current')
if mibBuilder.loadTexts: rspGeneralError.setDescription('RSP general alarm is triggered.')
rspServiceError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 20002))
if mibBuilder.loadTexts: rspServiceError.setStatus('current')
if mibBuilder.loadTexts: rspServiceError.setDescription('RSP service alarm is triggered.')
rspGeneralClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 21001))
if mibBuilder.loadTexts: rspGeneralClear.setStatus('current')
if mibBuilder.loadTexts: rspGeneralClear.setDescription('RSP general alarm cleared.')
rspServiceClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 1, 4, 0, 21002))
if mibBuilder.loadTexts: rspServiceClear.setStatus('current')
if mibBuilder.loadTexts: rspServiceClear.setDescription('RSP service alarm cleared.')
cpuLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 1))
cpuLoad1 = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLoad1.setStatus('current')
if mibBuilder.loadTexts: cpuLoad1.setDescription('One-minute CPU load in hundreths')
cpuLoad5 = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLoad5.setStatus('current')
if mibBuilder.loadTexts: cpuLoad5.setDescription('Five-minute CPU load in hundreths')
cpuLoad15 = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLoad15.setStatus('current')
if mibBuilder.loadTexts: cpuLoad15.setDescription('Fifteen-minute CPU load in hundreths')
cpuUtil1 = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtil1.setStatus('current')
if mibBuilder.loadTexts: cpuUtil1.setDescription('Percentage CPU utilization, aggregated across all CPUs, rolling\n         average over the past minute')
cpuIndivUtilTable = MibTable((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 1, 5), )
if mibBuilder.loadTexts: cpuIndivUtilTable.setStatus('current')
if mibBuilder.loadTexts: cpuIndivUtilTable.setDescription('Details about the individual CPU utilization')
cpuIndivUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 1, 5, 1), ).setIndexNames((0, "STEELHEAD-MIB", "cpuIndivIndex"))
if mibBuilder.loadTexts: cpuIndivUtilEntry.setStatus('current')
if mibBuilder.loadTexts: cpuIndivUtilEntry.setDescription('Entry for one cpu')
cpuIndivIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cpuIndivIndex.setStatus('current')
if mibBuilder.loadTexts: cpuIndivIndex.setDescription('A synthetic number numbering the cpus')
cpuIndivId = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIndivId.setStatus('current')
if mibBuilder.loadTexts: cpuIndivId.setDescription('Name of the cpu, also serves as the Index for the table')
cpuIndivIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIndivIdleTime.setStatus('current')
if mibBuilder.loadTexts: cpuIndivIdleTime.setDescription('Idle time for this CPU')
cpuIndivSystemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIndivSystemTime.setStatus('current')
if mibBuilder.loadTexts: cpuIndivSystemTime.setDescription('System time for this CPU')
cpuIndivUserTime = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 1, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIndivUserTime.setStatus('current')
if mibBuilder.loadTexts: cpuIndivUserTime.setDescription('User time for this CPU')
connectionCounts = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 2))
optimizedConnections = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optimizedConnections.setStatus('current')
if mibBuilder.loadTexts: optimizedConnections.setDescription('Current total number of optimized connections')
passthroughConnections = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: passthroughConnections.setStatus('current')
if mibBuilder.loadTexts: passthroughConnections.setDescription('Current total number of pass-through connections')
halfOpenedConnections = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: halfOpenedConnections.setStatus('current')
if mibBuilder.loadTexts: halfOpenedConnections.setDescription('Current total number of half-opened (optimized) connections')
halfClosedConnections = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: halfClosedConnections.setStatus('current')
if mibBuilder.loadTexts: halfClosedConnections.setDescription('Current total number of half-closed (optimized) connections')
establishedConnections = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 2, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: establishedConnections.setStatus('current')
if mibBuilder.loadTexts: establishedConnections.setDescription('Current number of established (optimized) connections')
activeConnections = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeConnections.setStatus('current')
if mibBuilder.loadTexts: activeConnections.setDescription('Current number of active (optimized) connections')
totalConnections = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 2, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalConnections.setStatus('current')
if mibBuilder.loadTexts: totalConnections.setDescription('Total number of connections')
bandwidth = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 3))
bandwidthAggregate = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 3, 1))
bwAggInLan = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAggInLan.setStatus('current')
if mibBuilder.loadTexts: bwAggInLan.setDescription('Total optimized bytes across all application ports, in the \n             WAN to LAN direction since the last restart of service, \n             as measured on the LAN side')
bwAggInWan = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAggInWan.setStatus('current')
if mibBuilder.loadTexts: bwAggInWan.setDescription('Total optimized bytes across all application ports, in the \n             WAN to LAN direction since the last restart of service, \n             as measured on the WAN side')
bwAggOutLan = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAggOutLan.setStatus('current')
if mibBuilder.loadTexts: bwAggOutLan.setDescription('Total optimized bytes across all application ports, in the \n             LAN to WAN direction since the last restart of service, \n             as measured on the LAN side')
bwAggOutWan = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAggOutWan.setStatus('current')
if mibBuilder.loadTexts: bwAggOutWan.setDescription('Total optimized bytes across all application ports, in the \n             LAN to WAN direction since the last restart of service, \n             as measured on the WAN side')
bandwidthPerPort = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 3, 2))
bwPortTable = MibTable((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 3, 2, 1), )
if mibBuilder.loadTexts: bwPortTable.setStatus('current')
if mibBuilder.loadTexts: bwPortTable.setDescription('A table containing statistics for optimized traffic on\n             a per application port basis')
bwPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 3, 2, 1, 1), ).setIndexNames((0, "STEELHEAD-MIB", "bwPortNumber"))
if mibBuilder.loadTexts: bwPortEntry.setStatus('current')
if mibBuilder.loadTexts: bwPortEntry.setDescription('Entry for one port')
bwPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 3, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: bwPortNumber.setStatus('current')
if mibBuilder.loadTexts: bwPortNumber.setDescription('Port Number on which the traffic is observed')
bwPortInLan = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 3, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPortInLan.setStatus('current')
if mibBuilder.loadTexts: bwPortInLan.setDescription('Optimized bytes in the WAN to LAN direction since last restart of \n             service, as measured on the LAN side')
bwPortInWan = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 3, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPortInWan.setStatus('current')
if mibBuilder.loadTexts: bwPortInWan.setDescription('Optimized bytes in the WAN to LAN direction since last restart of \n             service, as measured on the WAN side')
bwPortOutLan = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 3, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPortOutLan.setStatus('current')
if mibBuilder.loadTexts: bwPortOutLan.setDescription('Optimized bytes in the LAN to WAN direction since last restart of \n             service, as measured on the LAN side')
bwPortOutWan = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 3, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPortOutWan.setStatus('current')
if mibBuilder.loadTexts: bwPortOutWan.setDescription('Optimized bytes in the LAN to WAN direction since last restart of \n         service, as measured on the WAN side')
bandwidthPassThrough = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 3, 3))
bwPassThroughIn = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 3, 3, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPassThroughIn.setStatus('current')
if mibBuilder.loadTexts: bwPassThroughIn.setDescription('Passthrough bytes in WAN to LAN direction')
bwPassThroughOut = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 3, 3, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPassThroughOut.setStatus('current')
if mibBuilder.loadTexts: bwPassThroughOut.setDescription('Passthrough bytes in LAN to WAN direction')
bwPassThroughTotal = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 3, 3, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPassThroughTotal.setStatus('current')
if mibBuilder.loadTexts: bwPassThroughTotal.setDescription('Total passthrough bytes')
datastore = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 4))
dsHitsTotal = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsHitsTotal.setStatus('current')
if mibBuilder.loadTexts: dsHitsTotal.setDescription('Total number of datastore hits since last restart of service')
dsMissTotal = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsMissTotal.setStatus('current')
if mibBuilder.loadTexts: dsMissTotal.setDescription('Total number of datastore misses since last restart of service')
dsCostPerSegment = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 4, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsCostPerSegment.setStatus('deprecated')
if mibBuilder.loadTexts: dsCostPerSegment.setDescription('Cost per segment expressed in microseconds')
dsAveDiskUtilization = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 4, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsAveDiskUtilization.setStatus('current')
if mibBuilder.loadTexts: dsAveDiskUtilization.setDescription('Average disk utilization, a more accurate measurement of\n             the underlying disk activities, and correlates directly\n             to disk pressure')
topTalkers = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 5))
ttTalkersTable = MibTable((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 5, 1), )
if mibBuilder.loadTexts: ttTalkersTable.setStatus('current')
if mibBuilder.loadTexts: ttTalkersTable.setDescription('A table containing the top talkers')
ttTalkersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 5, 1, 1), ).setIndexNames((0, "STEELHEAD-MIB", "ttTalkerId"))
if mibBuilder.loadTexts: ttTalkersEntry.setStatus('current')
if mibBuilder.loadTexts: ttTalkersEntry.setDescription('Entry for one talker')
ttTalkerId = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ttTalkerId.setStatus('current')
if mibBuilder.loadTexts: ttTalkerId.setDescription('A synthetic index for the table')
ttTalkerIp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 5, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ttTalkerIp1.setStatus('current')
if mibBuilder.loadTexts: ttTalkerIp1.setDescription('Ip address of end point #1 of this conversaition')
ttTalkerPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ttTalkerPort1.setStatus('current')
if mibBuilder.loadTexts: ttTalkerPort1.setDescription('Application port for end point #1 of this conversation')
ttTalkerIp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 5, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ttTalkerIp2.setStatus('current')
if mibBuilder.loadTexts: ttTalkerIp2.setDescription('Ip address of end point #2 of this conversaition')
ttTalkerPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 5, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ttTalkerPort2.setStatus('current')
if mibBuilder.loadTexts: ttTalkerPort2.setDescription('Application port for end point #2 of this conversation')
ttTalkerByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 5, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ttTalkerByteCount.setStatus('current')
if mibBuilder.loadTexts: ttTalkerByteCount.setDescription('The bidirectional bytecount for this conversation')
ttSrcHostTable = MibTable((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 5, 2), )
if mibBuilder.loadTexts: ttSrcHostTable.setStatus('current')
if mibBuilder.loadTexts: ttSrcHostTable.setDescription('A table containing the hosts generating the most traffic')
ttSrcHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 5, 2, 1), ).setIndexNames((0, "STEELHEAD-MIB", "ttSrcHostId"))
if mibBuilder.loadTexts: ttSrcHostEntry.setStatus('current')
if mibBuilder.loadTexts: ttSrcHostEntry.setDescription('Entry for one source host')
ttSrcHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 5, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ttSrcHostId.setStatus('current')
if mibBuilder.loadTexts: ttSrcHostId.setDescription('A synthetic index for the table')
ttSrcHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 5, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ttSrcHostIp.setStatus('current')
if mibBuilder.loadTexts: ttSrcHostIp.setDescription('Ip address of the host generating the traffic')
ttSrcHostByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 5, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ttSrcHostByteCount.setStatus('current')
if mibBuilder.loadTexts: ttSrcHostByteCount.setDescription('The bytecount of traffic generated by this host ')
ttDestHostTable = MibTable((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 5, 3), )
if mibBuilder.loadTexts: ttDestHostTable.setStatus('current')
if mibBuilder.loadTexts: ttDestHostTable.setDescription('A table containing the hosts receiving the most traffic')
ttDestHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 5, 3, 1), ).setIndexNames((0, "STEELHEAD-MIB", "ttDestHostId"))
if mibBuilder.loadTexts: ttDestHostEntry.setStatus('current')
if mibBuilder.loadTexts: ttDestHostEntry.setDescription('Entry for one destination host')
ttDestHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 5, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ttDestHostId.setStatus('current')
if mibBuilder.loadTexts: ttDestHostId.setDescription('A synthetic index for the table')
ttDestHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 5, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ttDestHostIp.setStatus('current')
if mibBuilder.loadTexts: ttDestHostIp.setDescription('Ip address of the host receiving the traffic')
ttDestHostByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 5, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ttDestHostByteCount.setStatus('current')
if mibBuilder.loadTexts: ttDestHostByteCount.setDescription('The bytecount of traffic received by this host ')
ttAppPortTable = MibTable((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 5, 4), )
if mibBuilder.loadTexts: ttAppPortTable.setStatus('current')
if mibBuilder.loadTexts: ttAppPortTable.setDescription('A table containing the application ports generating\n             the most traffic')
ttAppPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 5, 4, 1), ).setIndexNames((0, "STEELHEAD-MIB", "ttAppPortId"))
if mibBuilder.loadTexts: ttAppPortEntry.setStatus('current')
if mibBuilder.loadTexts: ttAppPortEntry.setDescription('Entry for one application port')
ttAppPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 5, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ttAppPortId.setStatus('current')
if mibBuilder.loadTexts: ttAppPortId.setDescription('A synthetic index for the table')
ttAppPort = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 5, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ttAppPort.setStatus('current')
if mibBuilder.loadTexts: ttAppPort.setDescription('Port number in the source port field of the traffic')
ttAppPortByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 5, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ttAppPortByteCount.setStatus('current')
if mibBuilder.loadTexts: ttAppPortByteCount.setDescription('The bytecount of traffic generated with this port\n             number in the source port field')
bandwidthHC = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 6))
bandwidthHCAggregate = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 6, 1))
bwHCAggInLan = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwHCAggInLan.setStatus('current')
if mibBuilder.loadTexts: bwHCAggInLan.setDescription('Total optimized bytes across all application ports, in the \n             WAN to LAN direction since the last restart of service, \n             as measured on the LAN side')
bwHCAggInWan = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwHCAggInWan.setStatus('current')
if mibBuilder.loadTexts: bwHCAggInWan.setDescription('Total optimized bytes across all application ports, in the \n             WAN to LAN direction since the last restart of service, \n             as measured on the WAN side')
bwHCAggOutLan = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwHCAggOutLan.setStatus('current')
if mibBuilder.loadTexts: bwHCAggOutLan.setDescription('Total optimized bytes across all application ports, in the \n             LAN to WAN direction since the last restart of service, \n             as measured on the LAN side')
bwAggHCOutWan = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAggHCOutWan.setStatus('current')
if mibBuilder.loadTexts: bwAggHCOutWan.setDescription('Total optimized bytes across all application ports, in the \n             LAN to WAN direction since the last restart of service, \n             as measured on the WAN side')
bandwidthHCPerPort = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 6, 2))
bwHCPortTable = MibTable((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 6, 2, 1), )
if mibBuilder.loadTexts: bwHCPortTable.setStatus('current')
if mibBuilder.loadTexts: bwHCPortTable.setDescription('A table containing statistics for optimized traffic on\n             a per application port basis')
bwHCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 6, 2, 1, 1), ).setIndexNames((0, "STEELHEAD-MIB", "bwHCPortNumber"))
if mibBuilder.loadTexts: bwHCPortEntry.setStatus('current')
if mibBuilder.loadTexts: bwHCPortEntry.setDescription('Entry for one port')
bwHCPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 6, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: bwHCPortNumber.setStatus('current')
if mibBuilder.loadTexts: bwHCPortNumber.setDescription('Port Number on which the traffic is observed')
bwHCPortInLan = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 6, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwHCPortInLan.setStatus('current')
if mibBuilder.loadTexts: bwHCPortInLan.setDescription('Optimized bytes in the WAN to LAN direction since last restart of \n             service, as measured on the LAN side')
bwHCPortInWan = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 6, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwHCPortInWan.setStatus('current')
if mibBuilder.loadTexts: bwHCPortInWan.setDescription('Optimized bytes in the WAN to LAN direction since last restart of \n             service, as measured on the WAN side')
bwHCPortOutLan = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 6, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwHCPortOutLan.setStatus('current')
if mibBuilder.loadTexts: bwHCPortOutLan.setDescription('Optimized bytes in the LAN to WAN direction since last restart of \n             service, as measured on the LAN side')
bwHCPortOutWan = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 1, 5, 6, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwHCPortOutWan.setStatus('current')
if mibBuilder.loadTexts: bwHCPortOutWan.setDescription('Optimized bytes in the LAN to WAN direction since last restart of \n         service, as measured on the WAN side')
mibBuilder.exportSymbols("STEELHEAD-MIB", dsMissTotal=dsMissTotal, nfsV2V4Clear=nfsV2V4Clear, sysdetailErrorClear=sysdetailErrorClear, bwHCPortInWan=bwHCPortInWan, healthNotes=healthNotes, temperatureNormal=temperatureNormal, linkDuplex=linkDuplex, bwHCAggInWan=bwHCAggInWan, cpuLoad=cpuLoad, peerHostname=peerHostname, cpuIndivIdleTime=cpuIndivIdleTime, dsHitsTotal=dsHitsTotal, shMaxBandwidth=shMaxBandwidth, systemHealth=systemHealth, rspServiceError=rspServiceError, bandwidthHC=bandwidthHC, temperatureNonCritical=temperatureNonCritical, alarms=alarms, ttTalkerId=ttTalkerId, clusterDisconnectedSHAlertClear=clusterDisconnectedSHAlertClear, nghAggrConnected=nghAggrConnected, procStatus=procStatus, neighborRedirReqSent=neighborRedirReqSent, bwAggOutWan=bwAggOutWan, neighborRedirReqRcvd=neighborRedirReqRcvd, pagingActivityClear=pagingActivityClear, bwAggHCOutWan=bwAggHCOutWan, nghAggrDynDelSent=nghAggrDynDelSent, flashError=flashError, linkIoErrorsClear=linkIoErrorsClear, passthroughConnections=passthroughConnections, nghAggrDynAckRcvd=nghAggrDynAckRcvd, outofpath=outofpath, admissionMemError=admissionMemError, systemDiskFullError=systemDiskFullError, neighborRequestTimeouts=neighborRequestTimeouts, clusterDisconnectedSHAlertError=clusterDisconnectedSHAlertError, neighborTable=neighborTable, neighborAggregates=neighborAggregates, bwHCPortOutLan=bwHCPortOutLan, nghAggrRequestTimeouts=nghAggrRequestTimeouts, neighborNatAckRcvd=neighborNatAckRcvd, neighborNatDelRcvd=neighborNatDelRcvd, asymRouteError=asymRouteError, admissionCpuError=admissionCpuError, datastoreSyncFailure=datastoreSyncFailure, confModeExit=confModeExit, neighborNatReqSent=neighborNatReqSent, cfConnLostErrClear=cfConnLostErrClear, ttTalkerPort2=ttTalkerPort2, confModeEnter=confModeEnter, peerStatus=peerStatus, nghAggrDynAckSent=nghAggrDynAckSent, storeCorruption=storeCorruption, bwPortInLan=bwPortInLan, nfsV2V4=nfsV2V4, admissionMemErrorClear=admissionMemErrorClear, ttDestHostIp=ttDestHostIp, admissionCpuErrorClear=admissionCpuErrorClear, storeCorruptionClear=storeCorruptionClear, cpuLoad15=cpuLoad15, bwPassThroughOut=bwPassThroughOut, tcpDumpScheduled=tcpDumpScheduled, licenseError=licenseError, system=system, ttDestHostByteCount=ttDestHostByteCount, cpuIndivUtilTable=cpuIndivUtilTable, neighborRedirDelRcvd=neighborRedirDelRcvd, cliUserLogout=cliUserLogout, nghAggrNatAckRcvd=nghAggrNatAckRcvd, datastoreSyncPort=datastoreSyncPort, flashErrorClear=flashErrorClear, halfOpenedConnections=halfOpenedConnections, neighborNatAckSent=neighborNatAckSent, linkIoErrors=linkIoErrors, newUserCreated=newUserCreated, cfConnFailure=cfConnFailure, ttAppPort=ttAppPort, webUserLogin=webUserLogin, neighborStatus=neighborStatus, asymRouteCount=asymRouteCount, cpuIndivUtilEntry=cpuIndivUtilEntry, ttSrcHostByteCount=ttSrcHostByteCount, cfConnRestored=cfConnRestored, cfLatencyExceededClear=cfLatencyExceededClear, hardwareErrorClear=hardwareErrorClear, trapTest=trapTest, nghAggrRedirDelRcvd=nghAggrRedirDelRcvd, neighborRedirDelSent=neighborRedirDelSent, PYSNMP_MODULE_ID=steelhead, memoryError=memoryError, crlError=crlError, alarmsPrefix=alarmsPrefix, statistics=statistics, ttDestHostEntry=ttDestHostEntry, ttSrcHostTable=ttSrcHostTable, ttDestHostId=ttDestHostId, ttSrcHostIp=ttSrcHostIp, nghAggrNatAckSent=nghAggrNatAckSent, bwPassThroughTotal=bwPassThroughTotal, nghAggrRedirReqSent=nghAggrRedirReqSent, diskErrorClear=diskErrorClear, peerVersion=peerVersion, procNumFailures=procNumFailures, datastore=datastore, powerSupplyError=powerSupplyError, crlNumCdpErr=crlNumCdpErr, serviceError=serviceError, cpuIndivSystemTime=cpuIndivSystemTime, peerTable=peerTable, cfAckTimeoutClear=cfAckTimeoutClear, bwHCPortNumber=bwHCPortNumber, model=model, bwPortInWan=bwPortInWan, bwHCPortInLan=bwHCPortInLan, secureVaultInitError=secureVaultInitError, nghAggrNatReqRcvd=nghAggrNatReqRcvd, cfReadInfoTimeoutClear=cfReadInfoTimeoutClear, nghAggrKeepaliveTimouts=nghAggrKeepaliveTimouts, nghAggrNatDelSent=nghAggrNatDelSent, cpuUtilClear=cpuUtilClear, bwAggInLan=bwAggInLan, nghAggrRedirReqRcvd=nghAggrRedirReqRcvd, bandwidthAggregate=bandwidthAggregate, bypassModeClear=bypassModeClear, serviceErrorClear=serviceErrorClear, peerModel=peerModel, bwHCAggInLan=bwHCAggInLan, secureVaultNeedsUnlock=secureVaultNeedsUnlock, neighborDynDelRcvd=neighborDynDelRcvd, lanWanLoopClear=lanWanLoopClear, bandwidthPassThrough=bandwidthPassThrough, ttTalkerIp1=ttTalkerIp1, memoryErrorClear=memoryErrorClear, peerVersionMismatch=peerVersionMismatch, serviceStatus=serviceStatus, neighborIncompatibilityClear=neighborIncompatibilityClear, bandwidthHCAggregate=bandwidthHCAggregate, crlClear=crlClear, cfConnLostEos=cfConnLostEos, rspGeneralError=rspGeneralError, optServiceStatus=optServiceStatus, nghAggrNatDelRcvd=nghAggrNatDelRcvd, cpuLoad1=cpuLoad1, domainJoinErrorClear=domainJoinErrorClear, cfReadInfoTimeout=cfReadInfoTimeout, procEntry=procEntry, neighborNatDelSent=neighborNatDelSent, cfKeepaliveTimeout=cfKeepaliveTimeout, neighborDynReqRcvd=neighborDynReqRcvd, bwPortOutLan=bwPortOutLan, temperatureWarning=temperatureWarning, neighborAddress=neighborAddress, topTalkers=topTalkers, admissionTcpError=admissionTcpError, nghAggrConfigured=nghAggrConfigured, ttSrcHostId=ttSrcHostId, sslPeeringSCEPAutoReenrollError=sslPeeringSCEPAutoReenrollError, admissionMapiErrorClear=admissionMapiErrorClear, config=config, raidError=raidError, ttAppPortByteCount=ttAppPortByteCount, ttDestHostTable=ttDestHostTable, nghAggrDynDelRcvd=nghAggrDynDelRcvd, temperatureCritical=temperatureCritical, bwPortNumber=bwPortNumber, nghAggrConnFailures=nghAggrConnFailures, linkDuplexClear=linkDuplexClear, bwHCPortOutWan=bwHCPortOutWan, asymRouteErrorClear=asymRouteErrorClear, licenseExpired=licenseExpired, nghAggrNatReqSent=nghAggrNatReqSent, haltError=haltError, ttTalkersTable=ttTalkersTable, crlTable=crlTable, serialNumber=serialNumber, cpuLoad5=cpuLoad5, licenseErrorClear=licenseErrorClear, systemVersion=systemVersion, outofpathSupport=outofpathSupport, sslPeeringSCEPAutoReenrollClear=sslPeeringSCEPAutoReenrollClear, ttTalkerByteCount=ttTalkerByteCount, totalConnections=totalConnections, crlIndex=crlIndex, domainJoinError=domainJoinError, cpuIndivIndex=cpuIndivIndex, nghAggrDynReqRcvd=nghAggrDynReqRcvd, certsExpiringError=certsExpiringError, procExit=procExit, ttTalkerIp2=ttTalkerIp2, bwPassThroughIn=bwPassThroughIn, ttAppPortId=ttAppPortId, procTable=procTable, optimizationServiceStatusError=optimizationServiceStatusError, wearWarning=wearWarning, halfClosedConnections=halfClosedConnections, datastoreSync=datastoreSync, datastoreSyncAddr=datastoreSyncAddr, cfKeepaliveTimeoutClear=cfKeepaliveTimeoutClear, bandwidthHCPerPort=bandwidthHCPerPort, upgradeFailure=upgradeFailure, bwPortEntry=bwPortEntry, admissionMapiError=admissionMapiError, sysdetailError=sysdetailError, lanWanLoopError=lanWanLoopError, crlEntry=crlEntry, nghAggrRedirAckRcvd=nghAggrRedirAckRcvd, cfConnLostErr=cfConnLostErr, neighborNatReqRcvd=neighborNatReqRcvd, fanErrorClear=fanErrorClear, cfConnLostEosClear=cfConnLostEosClear, cpuIndivUserTime=cpuIndivUserTime, neighborKeepaliveTimeouts=neighborKeepaliveTimeouts, smartError=smartError, haltErrorClear=haltErrorClear, bwAggOutLan=bwAggOutLan, optimizedConnections=optimizedConnections, admissionConnError=admissionConnError, establishedConnections=establishedConnections, bwHCPortTable=bwHCPortTable, optimizationServiceStatusClear=optimizationServiceStatusClear, serviceUptime=serviceUptime, nghAggrRedirAckSent=nghAggrRedirAckSent, cpuUtil=cpuUtil, neighborIndex=neighborIndex, rspGeneralClear=rspGeneralClear, cliUserLogin=cliUserLogin, ttAppPortTable=ttAppPortTable, nghAggrDynReqSent=nghAggrDynReqSent, crlFeatureName=crlFeatureName, webUserLogout=webUserLogout, nghAggrRedirDelSent=nghAggrRedirDelSent, cfLatencyExceeded=cfLatencyExceeded, neighborDynReqSent=neighborDynReqSent, inpath=inpath, ttTalkerPort1=ttTalkerPort1, admissionConnErrorClear=admissionConnErrorClear, secureVaultNeedsRekey=secureVaultNeedsRekey, status=status, procCrash=procCrash, peerIndex=peerIndex, ipmi=ipmi, bandwidth=bandwidth, bwPortOutWan=bwPortOutWan, cfAckTimeout=cfAckTimeout, neighborIncompatibility=neighborIncompatibility, crlErrMsg=crlErrMsg, pagingActivity=pagingActivity, cpuIndivId=cpuIndivId, neighborRedirAckSent=neighborRedirAckSent, bwPortTable=bwPortTable, ttSrcHostEntry=ttSrcHostEntry, inpathSupport=inpathSupport, crlStatus=crlStatus)
mibBuilder.exportSymbols("STEELHEAD-MIB", admissionTcpErrorClear=admissionTcpErrorClear, neighborDynAckSent=neighborDynAckSent, rspServiceClear=rspServiceClear, procName=procName, scheduledJobError=scheduledJobError, powerSupplyErrorClear=powerSupplyErrorClear, shMaxConnections=shMaxConnections, systemTemperature=systemTemperature, neighborState=neighborState, neighborDynDelSent=neighborDynDelSent, licenseExpiring=licenseExpiring, configSave=configSave, capabilityStatus=capabilityStatus, smbAlert=smbAlert, neighborDynAckRcvd=neighborDynAckRcvd, upgradeFailureClear=upgradeFailureClear, peerAddress=peerAddress, ttAppPortEntry=ttAppPortEntry, raidErrorClear=raidErrorClear, bwHCPortEntry=bwHCPortEntry, ipmiClear=ipmiClear, certsExpiringErrorClear=certsExpiringErrorClear, cpuUtil1=cpuUtil1, activeConnections=activeConnections, fanError=fanError, nghAggrMaxLatency=nghAggrMaxLatency, datastoreSyncFailureClear=datastoreSyncFailureClear, tcpDumpStarted=tcpDumpStarted, configChange=configChange, bandwidthPerPort=bandwidthPerPort, neighborRedirAckRcvd=neighborRedirAckRcvd, procIndex=procIndex, neighborConnFailures=neighborConnFailures, peerVersionMismatchClear=peerVersionMismatchClear, storageProfSwitchFailed=storageProfSwitchFailed, neighborEntry=neighborEntry, health=health, systemClock=systemClock, smbAlertClear=smbAlertClear, peerEntry=peerEntry, linkError=linkError, hardwareError=hardwareError, linkErrorClear=linkErrorClear, secureVaultClear=secureVaultClear, bwHCAggOutLan=bwHCAggOutLan, steelhead=steelhead, diskError=diskError, neighborMaxLatency=neighborMaxLatency, bwAggInWan=bwAggInWan, dsAveDiskUtilization=dsAveDiskUtilization, ttTalkersEntry=ttTalkersEntry, systemDiskFullErrorClear=systemDiskFullErrorClear, connectionCounts=connectionCounts, dsCostPerSegment=dsCostPerSegment, activeConfig=activeConfig, bypassMode=bypassMode, datastoreWrapped=datastoreWrapped)
