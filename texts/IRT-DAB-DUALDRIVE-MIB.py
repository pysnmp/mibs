#
# PySNMP MIB module IRT-DAB-DUALDRIVE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/irt/IRT-DAB-DUALDRIVE-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 16:02:21 2024
# On host fv-az1245-338 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
eventPriority, eventCounter, mibRelease, eventTimeStamp = mibBuilder.importSymbols("IRT-COMMONVARBINDS-MIB", "eventPriority", "eventCounter", "mibRelease", "eventTimeStamp")
WarningOK, LocalRemote, MuteOk, Input1Input2, OkNotOk, PresentNotPresent, FaultOK, SelectOnOff, dab, SelectManualAuto, ReadyNotReady, ExecutedNotExecuted = mibBuilder.importSymbols("IRT-TRANSMITTER-SMI-MIB", "WarningOK", "LocalRemote", "MuteOk", "Input1Input2", "OkNotOk", "PresentNotPresent", "FaultOK", "SelectOnOff", "dab", "SelectManualAuto", "ReadyNotReady", "ExecutedNotExecuted")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
sysDescr, sysName, sysLocation = mibBuilder.importSymbols("SNMPv2-MIB", "sysDescr", "sysName", "sysLocation")
TimeTicks, IpAddress, ObjectIdentity, MibIdentifier, Gauge32, NotificationType, Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Integer32, Unsigned32, Counter64, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "ObjectIdentity", "MibIdentifier", "Gauge32", "NotificationType", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Integer32", "Unsigned32", "Counter64", "ModuleIdentity")
TextualConvention, DisplayString, DateAndTime, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime", "TruthValue")
dabDualDrive = ModuleIdentity((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4))
dabDualDrive.setRevisions(('2007-05-04 14:00', '2006-12-20 14:00', '2006-09-21 14:00', '2006-09-19 14:00', '2006-09-07 14:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: dabDualDrive.setRevisionsDescriptions(('change SFNMode, LocalMode (description) and Module-COMPLIANCE', 'corrections', 'Adding Compliance Statement', 'Correcting Imports', 'Relocation of the TC-MIB from the standard OID area at IEC into the private OID area of the IRT',))
if mibBuilder.loadTexts: dabDualDrive.setLastUpdated('200705041400Z')
if mibBuilder.loadTexts: dabDualDrive.setOrganization('IRT for WORKING-GROUP-TC-MIB')
if mibBuilder.loadTexts: dabDualDrive.setContactInfo('Contact-info.\n\t\t\t\t\n\t\t\t\tAndreas Metz\n\t\t\t\t\n\t\t\t\tInstitut fuer Rundfunktechnik GmbH\n\t\t\t\tBroadcast Networks and Servers (SN)\n\t\t\t\t\n\t\t\t\tFloriansmuehlstr.60\n\t\t\t\t80939 Munich\n\t\t\t\tGermany\n\t\t\t\t\n\t\t\t\tPhone: +49 89 32399 325\n\t\t\t\tFax: +49 89 32399 354\n\t\t\t\t')
if mibBuilder.loadTexts: dabDualDrive.setDescription('Description.\n\t\t\t\t\n\t\t\t\tbranch definition\n\t\t\t\t\n\t\t\t\t1st level\n\t\t\t\t\n\t\t\t\tevents               OBJECT IDENTIFIER ::= { dabDualDrive 0 }\n\t\t\t\tdabDDGeneral         OBJECT IDENTIFIER ::= { dabDualDrive 1 }\n\t\t\t\tdabDDExciterA        OBJECT IDENTIFIER ::= { dabDualDrive 2 }\n\t\t\t\tdabDDExciterB        OBJECT IDENTIFIER ::= { dabDualDrive 3 }\n\t\t\t\tdabDDEventEnable     OBJECT IDENTIFIER ::= { dabDualDrive 4 }\n\t\t\t\tdabDDEventPriority   OBJECT IDENTIFIER ::= { dabDualDrive 5 }\n\t\t\t\tgroups               OBJECT IDENTIFIER ::= { dabDualDrive 6 }\n\t\t\t\t\n\t\t\t\t2nd level\n\t\t\t\t\n\t\t\t\tdabDDEventEnableGeneral   OBJECT IDENTIFIER ::= { dabDDEventEnable 1 }\n\t\t\t\tdabDDEventEnableExciterA  OBJECT IDENTIFIER ::= { dabDDEventEnable 2 }\n\t\t\t\tdabDDEventEnableExciterB  OBJECT IDENTIFIER ::= { dabDDEventEnable 3 }\n\t\t\t\t\n\t\t\t\tdabDDEventPriorityGeneral   OBJECT IDENTIFIER ::= { dabDDEventPriority 1 }\n\t\t\t\tdabDDEventPriorityExciterA  OBJECT IDENTIFIER ::= { dabDDEventPriority 2 }\n\t\t\t\tdabDDEventPriorityExciterB  OBJECT IDENTIFIER ::= { dabDDEventPriority 3 }\n\t\t\t\t\n\t\t\t\tend branch')
dabEventsDD = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0))
dabDDInputPreselectionEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 1)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDInputPreselection"))
if mibBuilder.loadTexts: dabDDInputPreselectionEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDInputPreselectionEvent.setDescription('Description. dabDDInputPreselection notification')
dabDDInputAutomaticEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 2)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDInputAutomatic"))
if mibBuilder.loadTexts: dabDDInputAutomaticEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDInputAutomaticEvent.setDescription('Description. dabDDInputAutomatic notification')
dabDDPreselectionExciterEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 3)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDPreselectionExciter"))
if mibBuilder.loadTexts: dabDDPreselectionExciterEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDPreselectionExciterEvent.setDescription('Description. dabDDPreselectionExciterEvent notification')
dabDDTransmitterOpModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 4)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDTransmitterOpMode"))
if mibBuilder.loadTexts: dabDDTransmitterOpModeEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDTransmitterOpModeEvent.setDescription('Description. dabDDTransmitterOpMode notification')
dabDDReserveControlEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 5)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDReserveControl"))
if mibBuilder.loadTexts: dabDDReserveControlEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDReserveControlEvent.setDescription('Description. dabDDReserveControl nitification')
dabDDRFPresentEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 6)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDRFPresent"))
if mibBuilder.loadTexts: dabDDRFPresentEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDRFPresentEvent.setDescription('Description. dabDDRFPresent notification')
dabDDResetFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 7)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDResetFault"))
if mibBuilder.loadTexts: dabDDResetFaultEvent.setStatus('obsolete')
if mibBuilder.loadTexts: dabDDResetFaultEvent.setDescription('Notification is inactive!\n\t\t\t\t\n\t\t\t\tDescription. dabDDResetFault notification')
dabDDAmplifierFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 8)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDAmplifierFault"))
if mibBuilder.loadTexts: dabDDAmplifierFaultEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDAmplifierFaultEvent.setDescription('Description. dabDDAmplifierFault notification')
dabDDAmplifierWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 9)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDAmplifierWarning"))
if mibBuilder.loadTexts: dabDDAmplifierWarningEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDAmplifierWarningEvent.setDescription('Description. dabDDAmplifierWarning notification')
dabDDActiveExciterEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 10)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDActiveExciter"))
if mibBuilder.loadTexts: dabDDActiveExciterEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDActiveExciterEvent.setDescription('Description. dabDDActiveExciter notification')
dabDDLocalModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 11)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDLocalMode"))
if mibBuilder.loadTexts: dabDDLocalModeEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDLocalModeEvent.setDescription('Description. dabDDLocalMode notification')
dabDDControlUnitFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 12)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDControlUnitFault"))
if mibBuilder.loadTexts: dabDDControlUnitFaultEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDControlUnitFaultEvent.setDescription('Description. dabDDControlUnitFault notification')
dabDDSwitchOverModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 13)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverMode"))
if mibBuilder.loadTexts: dabDDSwitchOverModeEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDSwitchOverModeEvent.setDescription('Description. dabDDSwitchOverMode notification')
dabDDSwitchOverReadyEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 14)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverReady"))
if mibBuilder.loadTexts: dabDDSwitchOverReadyEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDSwitchOverReadyEvent.setDescription('Description. dabDDSwitchOverReady notification')
dabDDSwitchOverExecutedEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 15)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverExecuted"))
if mibBuilder.loadTexts: dabDDSwitchOverExecutedEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDSwitchOverExecutedEvent.setDescription('Description. dabDDSwitchOverExecuted notification')
dabDDSwitchOverFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 16)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverFault"))
if mibBuilder.loadTexts: dabDDSwitchOverFaultEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDSwitchOverFaultEvent.setDescription('Description. dabDDSwitchOverFault notification')
dabDDExciterAInput1OKEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 17)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAInput1OK"))
if mibBuilder.loadTexts: dabDDExciterAInput1OKEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAInput1OKEvent.setDescription('Description. dabDDExciterAInput1OK notification')
dabDDExciterAInput2OKEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 18)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAInput2OK"))
if mibBuilder.loadTexts: dabDDExciterAInput2OKEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAInput2OKEvent.setDescription('Description. dabDDExciterAInput2OK notification')
dabDDExciterALocalModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 19)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterALocalMode"))
if mibBuilder.loadTexts: dabDDExciterALocalModeEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterALocalModeEvent.setDescription('Description. dabDDExciterALocalMode notification')
dabDDExciterAFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 20)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAFault"))
if mibBuilder.loadTexts: dabDDExciterAFaultEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAFaultEvent.setDescription('Description. dabDDExciterAFault notification')
dabDDExciterAWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 21)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAWarning"))
if mibBuilder.loadTexts: dabDDExciterAWarningEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAWarningEvent.setDescription('Description. dabDDExciterAWarning notification')
dabDDExciterAActiveInputEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 22)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAActiveInput"))
if mibBuilder.loadTexts: dabDDExciterAActiveInputEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAActiveInputEvent.setDescription('Description. dabDDExciterAActiveInput notification')
dabDDExciterASFNModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 23)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterASFNMode"))
if mibBuilder.loadTexts: dabDDExciterASFNModeEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterASFNModeEvent.setDescription('Description. dabDDExciterASFNMode notification')
dabDDExciterARefFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 24)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterARefFault"))
if mibBuilder.loadTexts: dabDDExciterARefFaultEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterARefFaultEvent.setDescription('Description. dabDDExciterARefFault notification')
dabDDExciterAMuteEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 25)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAMute"))
if mibBuilder.loadTexts: dabDDExciterAMuteEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAMuteEvent.setDescription('Description. dabDDExciterAMute notification')
dabDDExciterAWarningTimeStampEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 26)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAWarningTimeStamp"))
if mibBuilder.loadTexts: dabDDExciterAWarningTimeStampEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAWarningTimeStampEvent.setDescription('Description. dabDDExciterAWarningTimeStamp notification')
dabDDExciterBInput1OKEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 27)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBInput1OK"))
if mibBuilder.loadTexts: dabDDExciterBInput1OKEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBInput1OKEvent.setDescription('Description. dabDDExciterBInput1OK notification')
dabDDExciterBInput2OKEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 28)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBInput2OK"))
if mibBuilder.loadTexts: dabDDExciterBInput2OKEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBInput2OKEvent.setDescription('Description. dabDDExciterBInput2OK notification')
dabDDExciterBLocalModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 29)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBLocalMode"))
if mibBuilder.loadTexts: dabDDExciterBLocalModeEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBLocalModeEvent.setDescription('Description. dabDDExciterBLocalMode notification')
dabDDExciterBFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 30)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBFault"))
if mibBuilder.loadTexts: dabDDExciterBFaultEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBFaultEvent.setDescription('Description. dabDDExciterBFault notification')
dabDDExciterBWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 31)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBWarning"))
if mibBuilder.loadTexts: dabDDExciterBWarningEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBWarningEvent.setDescription('Description. dabDDExciterBWarning notification')
dabDDExciterBActiveInputEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 32)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBWarning"))
if mibBuilder.loadTexts: dabDDExciterBActiveInputEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBActiveInputEvent.setDescription('Description. dabDDExciterBActiveInput notification')
dabDDExciterBSFNModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 33)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBSFNMode"))
if mibBuilder.loadTexts: dabDDExciterBSFNModeEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBSFNModeEvent.setDescription('Description. dabDDExciterBSFNMode notification')
dabDDExciterBRefFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 34)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBRefFault"))
if mibBuilder.loadTexts: dabDDExciterBRefFaultEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBRefFaultEvent.setDescription('Description. dabDDExciterBRefFault notification')
dabDDExciterBMuteEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 35)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBMute"))
if mibBuilder.loadTexts: dabDDExciterBMuteEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBMuteEvent.setDescription('Description. dabDDExciterBMute notification')
dabDDExciterBWarningTimeStampEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 0, 36)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBWarningTimeStamp"))
if mibBuilder.loadTexts: dabDDExciterBWarningTimeStampEvent.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBWarningTimeStampEvent.setDescription('Description. dbDDExciterBWarningTimeStamp notification')
dabDDGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1))
dabDDInputPreselection = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 1), Input1Input2()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDInputPreselection.setStatus('current')
if mibBuilder.loadTexts: dabDDInputPreselection.setDescription('Dual drive. Preselection input \n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) Input 1\n\t\t\t\t(2) Input 2')
dabDDInputAutomatic = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 2), SelectManualAuto()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDInputAutomatic.setStatus('current')
if mibBuilder.loadTexts: dabDDInputAutomatic.setDescription('Dual drive. Input selection mode: manual or automatic\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) manual \n\t\t\t\t(2) automatic')
dabDDPreselectionExciter = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("exciterA", 1), ("exciterB", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDPreselectionExciter.setStatus('current')
if mibBuilder.loadTexts: dabDDPreselectionExciter.setDescription('Dual drive. Preselection of the exciter \n\t\t\t\t\n\t\t\t\t')
dabDDTransmitterOpMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 4), SelectOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDTransmitterOpMode.setStatus('current')
if mibBuilder.loadTexts: dabDDTransmitterOpMode.setDescription('Dual drive. Operation mode of main exciter \n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) ON\n\t\t\t\t(2) OFF')
dabDDReserveControl = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 5), SelectOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDReserveControl.setStatus('current')
if mibBuilder.loadTexts: dabDDReserveControl.setDescription('Dual drive. Operation mode of reserve exciter\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) ON \n\t\t\t\t(2) OFF ')
dabDDRFPresent = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 6), PresentNotPresent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDRFPresent.setStatus('current')
if mibBuilder.loadTexts: dabDDRFPresent.setDescription('Dual drive. Output power is present\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) present\n\t\t\t\t(2) not present\n\t\t\t\t')
dabDDResetFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDResetFault.setStatus('obsolete')
if mibBuilder.loadTexts: dabDDResetFault.setDescription('Massage is inactive!\n\t\t\t\t\n\t\t\t\tDual drive. Reset fault: Clear fault of the whole reserve system\n\t\t\t\t\n\t\t\t\t<1>\n\t\t\t\t\n\t\t\t\t(1) reset sum fault\n\t\t\t\t')
dabDDAmplifierFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 8), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDAmplifierFault.setStatus('current')
if mibBuilder.loadTexts: dabDDAmplifierFault.setDescription('Dual drive. Fault state of amplifier \n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) fault\n\t\t\t\t(2) ok')
dabDDAmplifierWarning = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 9), WarningOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDAmplifierWarning.setStatus('current')
if mibBuilder.loadTexts: dabDDAmplifierWarning.setDescription('Dual drive. Warning state of amplifier \n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) warning\n\t\t\t\t(2) ok')
dabDDActiveExciter = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("exciterA", 1), ("exciterB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDActiveExciter.setStatus('current')
if mibBuilder.loadTexts: dabDDActiveExciter.setDescription('Dual drive. Active exciter \n\t\t\t\t\n\t\t\t\t')
dabDDLocalMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 11), LocalRemote()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDLocalMode.setStatus('current')
if mibBuilder.loadTexts: dabDDLocalMode.setDescription('Dual drive. Local mode\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) local\n\t\t\t\t(2) remote')
dabDDControlUnitFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 12), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDControlUnitFault.setStatus('current')
if mibBuilder.loadTexts: dabDDControlUnitFault.setDescription('Dual drive. State of the control unit\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) fault\n\t\t\t\t(2) ok')
dabDDSwitchOverMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 13), SelectManualAuto()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDSwitchOverMode.setStatus('current')
if mibBuilder.loadTexts: dabDDSwitchOverMode.setDescription('Dual drive. Switch over mode: manual or automatic\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) manual \n\t\t\t\t(2) automatic')
dabDDSwitchOverReady = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 14), ReadyNotReady()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDSwitchOverReady.setStatus('current')
if mibBuilder.loadTexts: dabDDSwitchOverReady.setDescription('Dual drive. State of the dual drive switch over unit\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) ready\n\t\t\t\t(2) not ready')
dabDDSwitchOverExecuted = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 15), ExecutedNotExecuted()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDSwitchOverExecuted.setStatus('current')
if mibBuilder.loadTexts: dabDDSwitchOverExecuted.setDescription('Dual drive. Showsif the reserve switch over unit it has executed\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) executed\n\t\t\t\t(2) not executed')
dabDDSwitchOverFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 1, 16), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDSwitchOverFault.setStatus('current')
if mibBuilder.loadTexts: dabDDSwitchOverFault.setDescription('Dual drive. fault state of the switsch over unit\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) faulty\n\t\t\t\t(2) ok')
dabDDExciterA = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 2))
dabDDExciterAInput1OK = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 2, 1), OkNotOk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterAInput1OK.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAInput1OK.setDescription('Dual drive. Describes if the input signal at the input 1 of exciter A is ok\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) signal ok\n\t\t\t\t(2) signal is not ok')
dabDDExciterAInput2OK = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 2, 2), OkNotOk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterAInput2OK.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAInput2OK.setDescription('Dual drive. Describes if the input signal at the input 2 of exciter A is ok\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) signal ok\n\t\t\t\t(2) signal is not ok')
dabDDExciterALocalMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 2, 3), LocalRemote()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterALocalMode.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterALocalMode.setDescription('Dual drive. Local mode of exciter A\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) local\n\t\t\t\t(2) remote')
dabDDExciterAFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 2, 4), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterAFault.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAFault.setDescription('Dual drive. Fault state of exciter A\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) fault\n\t\t\t\t(2) ok')
dabDDExciterAWarning = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 2, 5), WarningOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterAWarning.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAWarning.setDescription('Dual drive.Warning state of exciter A \n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) warning\n\t\t\t\t(2) ok')
dabDDExciterAActiveInput = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("input1", 1), ("input2", 2), ("seamless", 3), ("hmHierarchicalModulation", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterAActiveInput.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAActiveInput.setDescription('Dual drive. Active input of the exciter A \n\t\t\t\t\n\t\t\t\t')
dabDDExciterASFNMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 2, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterASFNMode.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterASFNMode.setDescription('Dual drive. SFN mode of exciter A\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) SFN\n\t\t\t\t(2) MFN')
dabDDExciterARefFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 2, 8), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterARefFault.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterARefFault.setDescription('Dual drive. Fault state of the GPS input or the reference frequency of exciter A\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) fault\n\t\t\t\t(2) ok')
dabDDExciterAMute = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 2, 9), MuteOk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterAMute.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAMute.setDescription('Dual drive. Mute state of exciter A\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) mute\n\t\t\t\t(2) ok')
dabDDExciterAWarningTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 2, 10), WarningOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterAWarningTimeStamp.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAWarningTimeStamp.setDescription('Dual drive.Time stamp warning state of exciter A \n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) warning\n\t\t\t\t(2) ok')
dabDDExciterB = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 3))
dabDDExciterBInput1OK = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 3, 1), OkNotOk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterBInput1OK.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBInput1OK.setDescription('Dual drive. Describes if the input signal at the input 1 of exciter B is ok\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) signal ok\n\t\t\t\t(2) signal is not ok')
dabDDExciterBInput2OK = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 3, 2), OkNotOk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterBInput2OK.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBInput2OK.setDescription('Dual drive. Describes if the input signal at the input 2 of exciter B is ok\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) signal ok\n\t\t\t\t(2) signal is not ok')
dabDDExciterBLocalMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 3, 3), LocalRemote()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterBLocalMode.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBLocalMode.setDescription('Dual drive. Local mode of exciter B\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) local\n\t\t\t\t(2) remote')
dabDDExciterBFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 3, 4), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterBFault.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBFault.setDescription('Dual drive. Fault state of exciter B\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) fault\n\t\t\t\t(2) ok')
dabDDExciterBWarning = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 3, 5), WarningOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterBWarning.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBWarning.setDescription('Dual drive. Warning state of exciter B \n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) warning\n\t\t\t\t(2) ok')
dabDDExciterBActiveInput = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("input1", 1), ("input2", 2), ("seamless", 3), ("hmHierarchicalModulation", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterBActiveInput.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBActiveInput.setDescription('Dual drive. Active input of the exciter B \n\t\t\t\t')
dabDDExciterBSFNMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 3, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterBSFNMode.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBSFNMode.setDescription('Dual drive. SFN mode of exciter B\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) SFN\n\t\t\t\t(2) MFN')
dabDDExciterBRefFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 3, 8), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterBRefFault.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBRefFault.setDescription('Dual drive. Fault state of the GPS input or the reference frequency of exciter B\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) fault\n\t\t\t\t(2) ok')
dabDDExciterBMute = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 3, 9), MuteOk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterBMute.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBMute.setDescription('Dual drive. Mute state of exciter B\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) mute\n\t\t\t\t(2) ok')
dabDDExciterBWarningTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 3, 10), WarningOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabDDExciterBWarningTimeStamp.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBWarningTimeStamp.setDescription('Dual drive.Time stamp warning state of exciter B \n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) warning\n\t\t\t\t(2) ok')
dabDDEventEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4))
dabDDEventEnableGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1))
dabDDInputPreselectionEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDInputPreselectionEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDInputPreselectionEnable.setDescription('Description. Enable/Disable switch for dabDDInputPreselection event')
dabDDInputAutomaticEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDInputAutomaticEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDInputAutomaticEnable.setDescription('Description. Enable/Disable switch for dabDDInputAutomatic event')
dabDDPreselectionExciterEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDPreselectionExciterEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDPreselectionExciterEnable.setDescription('Description. Enable/Disable switch for dabDDPreselectionExciter event')
dabDDTransmitterOpModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDTransmitterOpModeEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDTransmitterOpModeEnable.setDescription('Description. Enable/Disable switch for dabDDTransmitterOpMode event')
dabDDReserveControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDReserveControlEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDReserveControlEnable.setDescription('Description. Enable/Disable switch for dabDDIReserveControl event')
dabDDRFPresentEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDRFPresentEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDRFPresentEnable.setDescription('Description. Enable/Disable switch for dabDDRFPresent event')
dabDDResetFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDResetFaultEnable.setStatus('obsolete')
if mibBuilder.loadTexts: dabDDResetFaultEnable.setDescription('Massage is inactive!\n\t\t\t\t\n\t\t\t\tDescription. Enable/Disable switch for dabDDResetFault event\n\t\t\t\t')
dabDDAmplifierFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDAmplifierFaultEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDAmplifierFaultEnable.setDescription('Description. Enable/Disable switch for dabDDAmplifierFault event')
dabDDAmplifierWarningEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDAmplifierWarningEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDAmplifierWarningEnable.setDescription('Description. Enable/Disable switch for dabDDAmplifierWarning event')
dabDDActiveExciterEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDActiveExciterEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDActiveExciterEnable.setDescription('Description. Enable/Disable switch for dabDDActiveExciter event\n\t\t\t\t')
dabDDLocalModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDLocalModeEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDLocalModeEnable.setDescription('Description. Enable/Disable switch for dabDDLocalMode event')
dabDDControlUnitFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDControlUnitFaultEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDControlUnitFaultEnable.setDescription('Description. Enable/Disable switch for dabDDControlUnitFault event')
dabDDSwitchOverModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDSwitchOverModeEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDSwitchOverModeEnable.setDescription('Description. Enable/Disable switch for dabDDSwitchOverMode event')
dabDDSwitchOverReadyEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDSwitchOverReadyEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDSwitchOverReadyEnable.setDescription('Description. Enable/Disable switch for dabDDSwitchOverReady event')
dabDDSwitchOverExecutedEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDSwitchOverExecutedEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDSwitchOverExecutedEnable.setDescription('Description. Enable/Disable switch for dabDDSwitchOverExecuted event')
dabDDSwitchOverFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDSwitchOverFaultEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDSwitchOverFaultEnable.setDescription('Description. Enable/Disable switch for dabDDSwitchOverFault event')
dabDDEventEnableExciterA = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 2))
dabDDExciterAInput1OKEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAInput1OKEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAInput1OKEnable.setDescription('Description. Enable/Disable switch for dabDDExciterAInput1OK event')
dabDDExciterAInput2OKEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 2, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAInput2OKEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAInput2OKEnable.setDescription('Description. Enable/Disable switch for dabDDExciterAInput2OK event')
dabDDExciterALocalModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 2, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterALocalModeEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterALocalModeEnable.setDescription('Description. Enable/Disable switch for dabDDExciterALocalMode event')
dabDDExciterAFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 2, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAFaultEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAFaultEnable.setDescription('Description. Enable/Disable switch for dabDDExciterAFault  event')
dabDDExciterAWarningEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 2, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAWarningEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAWarningEnable.setDescription('Description. Enable/Disable switch for dabDDExciterAWarning event')
dabDDExciterAActiveInputEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 2, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAActiveInputEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAActiveInputEnable.setDescription('Description. Enable/Disable switch for dabDDExciterAActiveInput event')
dabDDExciterASFNModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 2, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterASFNModeEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterASFNModeEnable.setDescription('Description. Enable/Disable switch for dabDDExciterASFNMode event')
dabDDExciterARefFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 2, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterARefFaultEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterARefFaultEnable.setDescription('Description. Enable/Disable switch for dabDDExciterARefFault event')
dabDDExciterAMuteEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 2, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAMuteEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAMuteEnable.setDescription('Description. Enable/Disable switch for dabDDExciterAMute event')
dabDDExciterAWarningTimeStampEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 2, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAWarningTimeStampEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAWarningTimeStampEnable.setDescription('Description. Enable/Disable switch for dabDDExciterAWarningTimeStamp event')
dabDDEventEnableExciterB = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 3))
dabDDExciterBInput1OKEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBInput1OKEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBInput1OKEnable.setDescription('Description. Enable/Disable switch for dabDDExciterBInput1OK event')
dabDDExciterBInput2OKEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 3, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBInput2OKEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBInput2OKEnable.setDescription('Description. Enable/Disable switch for dabDDExciterBInput2OK event')
dabDDExciterBLocalModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 3, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBLocalModeEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBLocalModeEnable.setDescription('Description. Enable/Disable switch for dabDDExciterBLocalMode event')
dabDDExciterBFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 3, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBFaultEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBFaultEnable.setDescription('Description. Enable/Disable switch for dabDDExciterBFault event')
dabDDExciterBWarningEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 3, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBWarningEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBWarningEnable.setDescription('Description. Enable/Disable switch for dabDDExciterBWarning event')
dabDDExciterBActiveInputEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 3, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBActiveInputEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBActiveInputEnable.setDescription('Description. Enable/Disable switch for dabDDExciterBActiveInput event')
dabDDExciterBSFNModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 3, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBSFNModeEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBSFNModeEnable.setDescription('Description. Enable/Disable switch for dabDDExciterBSFNMode event')
dabDDExciterBRefFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 3, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBRefFaultEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBRefFaultEnable.setDescription('Description. Enable/Disable switch for dabDDExciterBRefFault event')
dabDDExciterBMuteEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 3, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBMuteEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBMuteEnable.setDescription('Description. Enable/Disable switch for dabDDExciterBMute event')
dabDDExciterBWarningTimeStampEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 4, 3, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBWarningTimeStampEnable.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBWarningTimeStampEnable.setDescription('Description. Enable/Disable switch for dabDDExciterBWarningTimeStamp event')
dabDDEventPriority = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5))
dabDDEventPriorityGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1))
dabDDInputPreselectionPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDInputPreselectionPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDInputPreselectionPriority.setDescription('Description. Priority for dabDDInputPreselection event')
dabDDInputAutomaticPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDInputAutomaticPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDInputAutomaticPriority.setDescription('Description. Priority for dabDDInputAutomatic event')
dabDDPreselectionExciterPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDPreselectionExciterPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDPreselectionExciterPriority.setDescription('Description. Priority for dabDDInputExciter event')
dabDDTransmitterOpModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDTransmitterOpModePriority.setStatus('current')
if mibBuilder.loadTexts: dabDDTransmitterOpModePriority.setDescription('Description. Priority for dabDDTransmitterOpMode event')
dabDDReserveControlPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDReserveControlPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDReserveControlPriority.setDescription('Description. Priority for dabDDReserveControl event')
dabDDRFPresentPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDRFPresentPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDRFPresentPriority.setDescription('Description. Priority for dabDDRFPresent event')
dabDDResetFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDResetFaultPriority.setStatus('obsolete')
if mibBuilder.loadTexts: dabDDResetFaultPriority.setDescription('Massage is inactive!\n\t\t\t\t\n\t\t\t\tDescription. Priority for dabDDResetFault event')
dabDDAmplifierFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDAmplifierFaultPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDAmplifierFaultPriority.setDescription('Description. Priority for dabDDAmplifierFault event')
dabDDAmplifierWarningPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDAmplifierWarningPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDAmplifierWarningPriority.setDescription('Description. Priority for dabDDAmplifierWarning event')
dabDDActiveExciterPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDActiveExciterPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDActiveExciterPriority.setDescription('Description. Priority for dabDDActiveExciter event')
dabDDLocalModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDLocalModePriority.setStatus('current')
if mibBuilder.loadTexts: dabDDLocalModePriority.setDescription('Description. Priority for dabDDLocalMode event')
dabDDControlUnitFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDControlUnitFaultPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDControlUnitFaultPriority.setDescription('Description. Priority for dabDDControlUnitFault event')
dabDDSwitchOverModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDSwitchOverModePriority.setStatus('current')
if mibBuilder.loadTexts: dabDDSwitchOverModePriority.setDescription('Description. Priority for dabDDSwitchOverMode event')
dabDDSwitchOverReadyPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDSwitchOverReadyPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDSwitchOverReadyPriority.setDescription('Description. Priority for dabDDSwitchOverReady event')
dabDDSwitchOverExecutedPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDSwitchOverExecutedPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDSwitchOverExecutedPriority.setDescription('Description. Priority for dabDDSwitchOverExecuted event')
dabDDSwitchOverFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDSwitchOverFaultPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDSwitchOverFaultPriority.setDescription('Description. Priority for dabDDSwitchOverFault event')
dabDDEventPriorityExciterA = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 2))
dabDDExciterAInput1OKPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 2, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAInput1OKPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAInput1OKPriority.setDescription('Description. Priority for dabDDExciterAInput1OK event')
dabDDExciterAInput2OKPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 2, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAInput2OKPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAInput2OKPriority.setDescription('Description. Priority for dabDDExciterAInput2OK event')
dabDDExciterALocalModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 2, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterALocalModePriority.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterALocalModePriority.setDescription('Description. Priority for dabDDExciterALocalMode event')
dabDDExciterAFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 2, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAFaultPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAFaultPriority.setDescription('Description. Priority for dabDDExciterAFault event')
dabDDExciterAWarningPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 2, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAWarningPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAWarningPriority.setDescription('Description. Priority for dabDDExciterAWarning event')
dabDDExciterAActiveInputPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 2, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAActiveInputPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAActiveInputPriority.setDescription('Description. Priority for dabDDExciterAActiveInput event')
dabDDExciterASFNModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 2, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterASFNModePriority.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterASFNModePriority.setDescription('Description. Priority for dabDDExciterASFNMode event')
dabDDExciterARefFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 2, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterARefFaultPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterARefFaultPriority.setDescription('Description. Priority for dabDDExciterARefFault event')
dabDDExciterAMutePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 2, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAMutePriority.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAMutePriority.setDescription('Description. Priority for dabDDExciterAMute event')
dabDDExciterAWarningTimeStampPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 2, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterAWarningTimeStampPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterAWarningTimeStampPriority.setDescription('Description. Priority for dabDDExciterAWarningTimeStamp event')
dabDDEventPriorityExciterB = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 3))
dabDDExciterBInput1OKPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 3, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBInput1OKPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBInput1OKPriority.setDescription('Description. Priority for dabDDExciterBInput1OK event')
dabDDExciterBInput2OKPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 3, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBInput2OKPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBInput2OKPriority.setDescription('Description. Priority for dabDDExciterBInput2OK event')
dabDDExciterBLocalModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 3, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBLocalModePriority.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBLocalModePriority.setDescription('Description. Priority for dabDDExciterBLocalMode event')
dabDDExciterBFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 3, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBFaultPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBFaultPriority.setDescription('Description. Priority for dabDDExciterBFault event')
dabDDExciterBWarningPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 3, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBWarningPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBWarningPriority.setDescription('Description. Priority for dabDDExciterBWarning event')
dabDDExciterBActiveInputPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 3, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBActiveInputPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBActiveInputPriority.setDescription('Description. Priority for dabDDExciterBActiveInput event')
dabDDExciterBSFNModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 3, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBSFNModePriority.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBSFNModePriority.setDescription('Description. Priority for dabDDExciterBSFNMode event')
dabDDExciterBRefFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 3, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBRefFaultPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBRefFaultPriority.setDescription('Description. Priority for dabDDExciterBRefFault event')
dabDDExciterBMutePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 3, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBMutePriority.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBMutePriority.setDescription('Description. Priority for dabDDExciterBMute event')
dabDDExciterBWarningTimeStampPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 5, 3, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabDDExciterBWarningTimeStampPriority.setStatus('current')
if mibBuilder.loadTexts: dabDDExciterBWarningTimeStampPriority.setDescription('Description. Priority for dabDDExciterBWarningTimeStamp event')
groupsDD = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 6))
eventGroupDD = NotificationGroup((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 6, 1)).setObjects(("IRT-DAB-DUALDRIVE-MIB", "dabDDInputPreselectionEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDInputAutomaticEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDPreselectionExciterEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDTransmitterOpModeEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDReserveControlEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDRFPresentEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDAmplifierFaultEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDActiveExciterEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDLocalModeEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDControlUnitFaultEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverModeEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverReadyEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverExecutedEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverFaultEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAInput1OKEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAInput2OKEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterALocalModeEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAFaultEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAWarningEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAActiveInputEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterASFNModeEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterARefFaultEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAMuteEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAWarningTimeStampEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBInput1OKEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBInput2OKEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBLocalModeEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBFaultEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBWarningEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBActiveInputEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBSFNModeEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBRefFaultEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBMuteEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBWarningTimeStampEvent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDAmplifierWarningEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eventGroupDD = eventGroupDD.setStatus('current')
if mibBuilder.loadTexts: eventGroupDD.setDescription('Description. dual drive: events group')
objectGroupDD = ObjectGroup((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 6, 2)).setObjects(("IRT-DAB-DUALDRIVE-MIB", "dabDDInputPreselection"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDInputAutomatic"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDPreselectionExciter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDTransmitterOpMode"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDReserveControl"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDRFPresent"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDAmplifierFault"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDActiveExciter"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDLocalMode"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDControlUnitFault"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverMode"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverReady"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverExecuted"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverFault"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAInput1OK"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAInput2OK"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterALocalMode"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAFault"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAWarning"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAActiveInput"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterASFNMode"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterARefFault"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAMute"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAWarningTimeStamp"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBInput1OK"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBInput2OK"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBLocalMode"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBFault"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBWarning"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBActiveInput"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBSFNMode"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBRefFault"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBMute"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBWarningTimeStamp"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDInputPreselectionEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDInputAutomaticEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDPreselectionExciterEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDTransmitterOpModeEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDReserveControlEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDRFPresentEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDAmplifierFaultEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDActiveExciterEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDLocalModeEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDControlUnitFaultEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverModeEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverReadyEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverExecutedEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverFaultEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAInput1OKEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAInput2OKEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterALocalModeEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAFaultEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAWarningEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAActiveInputEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterASFNModeEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterARefFaultEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAMuteEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAWarningTimeStampEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBInput1OKEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBInput2OKEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBLocalModeEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBFaultEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBWarningEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBActiveInputEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBSFNModeEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBRefFaultEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBMuteEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBWarningTimeStampEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDInputPreselectionPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDInputAutomaticPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDPreselectionExciterPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDTransmitterOpModePriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDReserveControlPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDRFPresentPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDAmplifierFaultPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDActiveExciterPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDLocalModePriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDControlUnitFaultPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverModePriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverReadyPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverExecutedPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDSwitchOverFaultPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAInput1OKPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAInput2OKPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterALocalModePriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAFaultPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAWarningPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAActiveInputPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterASFNModePriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterARefFaultPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAMutePriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterAWarningTimeStampPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBInput1OKPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBInput2OKPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBLocalModePriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBFaultPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBWarningPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBActiveInputPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBSFNModePriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBRefFaultPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBMutePriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDExciterBWarningTimeStampPriority"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDAmplifierWarning"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDAmplifierWarningEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDAmplifierWarningPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    objectGroupDD = objectGroupDD.setStatus('current')
if mibBuilder.loadTexts: objectGroupDD.setDescription('Description.dual drive: object group')
eventGroupDDobsolete = NotificationGroup((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 6, 3)).setObjects(("IRT-DAB-DUALDRIVE-MIB", "dabDDResetFaultEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eventGroupDDobsolete = eventGroupDDobsolete.setStatus('obsolete')
if mibBuilder.loadTexts: eventGroupDDobsolete.setDescription('Description. Inactive events')
objectGroupDDobsolete = ObjectGroup((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 6, 4)).setObjects(("IRT-DAB-DUALDRIVE-MIB", "dabDDResetFault"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDResetFaultEnable"), ("IRT-DAB-DUALDRIVE-MIB", "dabDDResetFaultPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    objectGroupDDobsolete = objectGroupDDobsolete.setStatus('obsolete')
if mibBuilder.loadTexts: objectGroupDDobsolete.setDescription('Description.Inactive objects')
complianceDD = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 7))
dabDualDriveCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 4, 7, 1)).setObjects(("IRT-DAB-DUALDRIVE-MIB", "eventGroupDD"), ("IRT-DAB-DUALDRIVE-MIB", "objectGroupDD"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dabDualDriveCompliance = dabDualDriveCompliance.setStatus('current')
if mibBuilder.loadTexts: dabDualDriveCompliance.setDescription('Compliance Statement')
mibBuilder.exportSymbols("IRT-DAB-DUALDRIVE-MIB", dabDDSwitchOverModeEvent=dabDDSwitchOverModeEvent, dabDDInputAutomaticEvent=dabDDInputAutomaticEvent, dabDDExciterAMutePriority=dabDDExciterAMutePriority, dabDDExciterASFNModeEnable=dabDDExciterASFNModeEnable, dabDDExciterAInput2OKPriority=dabDDExciterAInput2OKPriority, objectGroupDDobsolete=objectGroupDDobsolete, dabDDSwitchOverModePriority=dabDDSwitchOverModePriority, dabDDExciterBInput1OKEvent=dabDDExciterBInput1OKEvent, dabDDSwitchOverReadyEnable=dabDDSwitchOverReadyEnable, dabDDExciterBRefFaultPriority=dabDDExciterBRefFaultPriority, dabDDReserveControl=dabDDReserveControl, dabDDExciterBMuteEnable=dabDDExciterBMuteEnable, dabDDExciterBSFNMode=dabDDExciterBSFNMode, dabDDEventPriority=dabDDEventPriority, dabDDReserveControlEvent=dabDDReserveControlEvent, dabDDControlUnitFault=dabDDControlUnitFault, dabDDExciterBRefFaultEnable=dabDDExciterBRefFaultEnable, dabDDExciterBInput1OKEnable=dabDDExciterBInput1OKEnable, dabDDSwitchOverExecutedPriority=dabDDSwitchOverExecutedPriority, dabDDAmplifierWarning=dabDDAmplifierWarning, dabDDExciterAFaultPriority=dabDDExciterAFaultPriority, dabDDExciterAFaultEvent=dabDDExciterAFaultEvent, dabDDEventEnableExciterB=dabDDEventEnableExciterB, dabDDEventPriorityExciterB=dabDDEventPriorityExciterB, dabDDEventEnableGeneral=dabDDEventEnableGeneral, dabDDExciterBWarningTimeStampEnable=dabDDExciterBWarningTimeStampEnable, dabDDExciterBInput2OK=dabDDExciterBInput2OK, dabDDExciterAInput2OKEnable=dabDDExciterAInput2OKEnable, dabDDLocalMode=dabDDLocalMode, dabDualDrive=dabDualDrive, dabDualDriveCompliance=dabDualDriveCompliance, dabDDTransmitterOpMode=dabDDTransmitterOpMode, dabDDGeneral=dabDDGeneral, dabDDExciterAInput2OK=dabDDExciterAInput2OK, dabDDExciterBFaultEnable=dabDDExciterBFaultEnable, dabDDExciterAMute=dabDDExciterAMute, dabDDExciterAInput1OKEnable=dabDDExciterAInput1OKEnable, dabDDExciterBFaultEvent=dabDDExciterBFaultEvent, dabDDInputPreselection=dabDDInputPreselection, dabDDExciterARefFaultPriority=dabDDExciterARefFaultPriority, dabDDLocalModeEnable=dabDDLocalModeEnable, dabDDExciterBActiveInputPriority=dabDDExciterBActiveInputPriority, dabDDExciterAFault=dabDDExciterAFault, dabDDExciterALocalMode=dabDDExciterALocalMode, groupsDD=groupsDD, dabDDEventEnable=dabDDEventEnable, dabDDExciterBSFNModeEvent=dabDDExciterBSFNModeEvent, PYSNMP_MODULE_ID=dabDualDrive, dabDDResetFaultEnable=dabDDResetFaultEnable, dabDDExciterBWarningTimeStamp=dabDDExciterBWarningTimeStamp, dabDDControlUnitFaultEvent=dabDDControlUnitFaultEvent, eventGroupDDobsolete=eventGroupDDobsolete, complianceDD=complianceDD, dabDDTransmitterOpModeEvent=dabDDTransmitterOpModeEvent, dabDDInputPreselectionEvent=dabDDInputPreselectionEvent, objectGroupDD=objectGroupDD, dabDDExciterAWarningTimeStampPriority=dabDDExciterAWarningTimeStampPriority, dabDDExciterBWarningEnable=dabDDExciterBWarningEnable, dabDDSwitchOverFaultPriority=dabDDSwitchOverFaultPriority, dabDDExciterBFault=dabDDExciterBFault, dabDDExciterAWarningTimeStampEnable=dabDDExciterAWarningTimeStampEnable, dabDDExciterAWarningTimeStampEvent=dabDDExciterAWarningTimeStampEvent, dabDDActiveExciterEnable=dabDDActiveExciterEnable, dabDDResetFaultPriority=dabDDResetFaultPriority, dabDDExciterBInput2OKEnable=dabDDExciterBInput2OKEnable, dabDDExciterBMutePriority=dabDDExciterBMutePriority, dabDDInputAutomaticPriority=dabDDInputAutomaticPriority, dabEventsDD=dabEventsDD, dabDDResetFaultEvent=dabDDResetFaultEvent, dabDDAmplifierFault=dabDDAmplifierFault, dabDDControlUnitFaultEnable=dabDDControlUnitFaultEnable, dabDDResetFault=dabDDResetFault, dabDDExciterARefFaultEvent=dabDDExciterARefFaultEvent, dabDDExciterBFaultPriority=dabDDExciterBFaultPriority, dabDDExciterBWarningTimeStampPriority=dabDDExciterBWarningTimeStampPriority, dabDDExciterAWarningEnable=dabDDExciterAWarningEnable, dabDDActiveExciterPriority=dabDDActiveExciterPriority, dabDDExciterBActiveInput=dabDDExciterBActiveInput, dabDDPreselectionExciterEnable=dabDDPreselectionExciterEnable, dabDDExciterBRefFaultEvent=dabDDExciterBRefFaultEvent, dabDDSwitchOverExecutedEnable=dabDDSwitchOverExecutedEnable, dabDDEventEnableExciterA=dabDDEventEnableExciterA, dabDDExciterBLocalMode=dabDDExciterBLocalMode, dabDDLocalModePriority=dabDDLocalModePriority, dabDDSwitchOverReadyEvent=dabDDSwitchOverReadyEvent, dabDDExciterASFNModeEvent=dabDDExciterASFNModeEvent, dabDDSwitchOverExecutedEvent=dabDDSwitchOverExecutedEvent, dabDDExciterBWarning=dabDDExciterBWarning, dabDDRFPresent=dabDDRFPresent, eventGroupDD=eventGroupDD, dabDDAmplifierWarningPriority=dabDDAmplifierWarningPriority, dabDDInputAutomaticEnable=dabDDInputAutomaticEnable, dabDDInputAutomatic=dabDDInputAutomatic, dabDDRFPresentEvent=dabDDRFPresentEvent, dabDDExciterAWarningTimeStamp=dabDDExciterAWarningTimeStamp, dabDDAmplifierWarningEnable=dabDDAmplifierWarningEnable, dabDDSwitchOverFaultEnable=dabDDSwitchOverFaultEnable, dabDDSwitchOverReadyPriority=dabDDSwitchOverReadyPriority, dabDDReserveControlEnable=dabDDReserveControlEnable, dabDDSwitchOverFaultEvent=dabDDSwitchOverFaultEvent, dabDDExciterAInput1OKPriority=dabDDExciterAInput1OKPriority, dabDDExciterAInput1OKEvent=dabDDExciterAInput1OKEvent, dabDDExciterAWarningPriority=dabDDExciterAWarningPriority, dabDDInputPreselectionEnable=dabDDInputPreselectionEnable, dabDDExciterAActiveInputPriority=dabDDExciterAActiveInputPriority, dabDDTransmitterOpModeEnable=dabDDTransmitterOpModeEnable, dabDDExciterBMuteEvent=dabDDExciterBMuteEvent, dabDDEventPriorityGeneral=dabDDEventPriorityGeneral, dabDDExciterBRefFault=dabDDExciterBRefFault, dabDDExciterBActiveInputEvent=dabDDExciterBActiveInputEvent, dabDDSwitchOverFault=dabDDSwitchOverFault, dabDDExciterBWarningPriority=dabDDExciterBWarningPriority, dabDDExciterBInput1OKPriority=dabDDExciterBInput1OKPriority, dabDDLocalModeEvent=dabDDLocalModeEvent, dabDDRFPresentPriority=dabDDRFPresentPriority, dabDDExciterBLocalModePriority=dabDDExciterBLocalModePriority, dabDDExciterAWarning=dabDDExciterAWarning, dabDDSwitchOverExecuted=dabDDSwitchOverExecuted, dabDDExciterALocalModeEnable=dabDDExciterALocalModeEnable, dabDDPreselectionExciterPriority=dabDDPreselectionExciterPriority, dabDDExciterAMuteEnable=dabDDExciterAMuteEnable, dabDDExciterAWarningEvent=dabDDExciterAWarningEvent, dabDDAmplifierFaultPriority=dabDDAmplifierFaultPriority, dabDDExciterALocalModeEvent=dabDDExciterALocalModeEvent, dabDDAmplifierFaultEnable=dabDDAmplifierFaultEnable, dabDDActiveExciter=dabDDActiveExciter, dabDDExciterBInput1OK=dabDDExciterBInput1OK, dabDDExciterBInput2OKEvent=dabDDExciterBInput2OKEvent, dabDDExciterBMute=dabDDExciterBMute, dabDDExciterASFNModePriority=dabDDExciterASFNModePriority, dabDDInputPreselectionPriority=dabDDInputPreselectionPriority, dabDDExciterAMuteEvent=dabDDExciterAMuteEvent, dabDDExciterBSFNModeEnable=dabDDExciterBSFNModeEnable, dabDDExciterBInput2OKPriority=dabDDExciterBInput2OKPriority, dabDDPreselectionExciterEvent=dabDDPreselectionExciterEvent, dabDDExciterAFaultEnable=dabDDExciterAFaultEnable, dabDDExciterA=dabDDExciterA, dabDDExciterBSFNModePriority=dabDDExciterBSFNModePriority, dabDDExciterASFNMode=dabDDExciterASFNMode, dabDDExciterBWarningTimeStampEvent=dabDDExciterBWarningTimeStampEvent, dabDDExciterB=dabDDExciterB, dabDDExciterAInput2OKEvent=dabDDExciterAInput2OKEvent, dabDDExciterALocalModePriority=dabDDExciterALocalModePriority, dabDDActiveExciterEvent=dabDDActiveExciterEvent, dabDDTransmitterOpModePriority=dabDDTransmitterOpModePriority, dabDDExciterBActiveInputEnable=dabDDExciterBActiveInputEnable, dabDDExciterBLocalModeEvent=dabDDExciterBLocalModeEvent, dabDDExciterAActiveInputEnable=dabDDExciterAActiveInputEnable, dabDDExciterBWarningEvent=dabDDExciterBWarningEvent, dabDDExciterAActiveInput=dabDDExciterAActiveInput, dabDDExciterBLocalModeEnable=dabDDExciterBLocalModeEnable, dabDDEventPriorityExciterA=dabDDEventPriorityExciterA, dabDDReserveControlPriority=dabDDReserveControlPriority, dabDDSwitchOverModeEnable=dabDDSwitchOverModeEnable, dabDDAmplifierFaultEvent=dabDDAmplifierFaultEvent, dabDDExciterAActiveInputEvent=dabDDExciterAActiveInputEvent, dabDDSwitchOverMode=dabDDSwitchOverMode, dabDDRFPresentEnable=dabDDRFPresentEnable, dabDDExciterAInput1OK=dabDDExciterAInput1OK, dabDDExciterARefFault=dabDDExciterARefFault, dabDDAmplifierWarningEvent=dabDDAmplifierWarningEvent, dabDDSwitchOverReady=dabDDSwitchOverReady, dabDDExciterARefFaultEnable=dabDDExciterARefFaultEnable, dabDDControlUnitFaultPriority=dabDDControlUnitFaultPriority, dabDDPreselectionExciter=dabDDPreselectionExciter)
