#
# PySNMP MIB module IPOMANII-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/ingrasys/IPOMANII-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 11:42:20 2024
# On host fv-az842-370 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, ObjectIdentity, Unsigned32, MibIdentifier, Gauge32, iso, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, NotificationType, TimeTicks, ModuleIdentity, Integer32, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Gauge32", "iso", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "NotificationType", "TimeTicks", "ModuleIdentity", "Integer32", "NotificationType", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ingrasys = MibIdentifier((1, 3, 6, 1, 4, 1, 2468))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1))
pduAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4))
iPoManII = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2))
ipmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1))
ipmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2))
ipmIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 1))
ipmAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2))
ipmDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3))
ipmSlave = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4))
ipmEnv = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5))
ipmIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmIdentManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: ipmIdentManufacturer.setDescription('The name of manufacturer.')
ipmIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmIdentModel.setStatus('mandatory')
if mibBuilder.loadTexts: ipmIdentModel.setDescription('The Model designation of device.')
ipmIdentAgentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmIdentAgentSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ipmIdentAgentSoftwareVersion.setDescription('The firmware version of the device.')
ipmIdentName = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmIdentName.setStatus('mandatory')
if mibBuilder.loadTexts: ipmIdentName.setDescription('A description of this device.')
ipmAgentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 1))
ipmAgentMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmAgentMibVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentMibVersion.setDescription('The Mib Version implemented on this device.')
ipmAgentTime = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 2))
ipmAgentTimeDate = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmAgentTimeDate.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentTimeDate.setDescription('The date in agent, format is (dd/mm/yyyy)')
ipmAgentTimeTime = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmAgentTimeTime.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentTimeTime.setDescription('The time in agent, format is (hh:mm:ss)')
ipmAgentTimerFromNtp = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmAgentTimerFromNtp.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentTimerFromNtp.setDescription('Enable or disable the agent to synchronize date/time with NTP server.')
ipmAgentNtpIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmAgentNtpIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentNtpIpAddress.setDescription('The ip address of NTP server.')
ipmAgentNtpTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("gMT-1200", 1), ("gMT-1100", 2), ("gMT-1000", 3), ("gMT-0900", 4), ("gMT-0800", 5), ("gMT-0700", 6), ("gMT-0600", 7), ("gMT-0500", 8), ("gMT-0400", 9), ("gMT-0330", 10), ("gMT-0300", 11), ("gMT-0200", 12), ("gMT-0100", 13), ("gMT-0000", 14), ("gMT0100", 15), ("gMT0200", 16), ("gMT0300", 17), ("gMT0330", 18), ("gMT0400", 19), ("gMT0500", 20), ("gMT0530", 21), ("gMT0600", 22), ("gMT0700", 23), ("gMT0800", 24), ("gMT0900", 25), ("gMT1000", 26), ("gMT1100", 27), ("gMT1200", 28)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmAgentNtpTimeZone.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentNtpTimeZone.setDescription('Time Zone to use when synchronize with NTP server.')
ipmAgentDayLightSaving = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmAgentDayLightSaving.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentDayLightSaving.setDescription('Enable/disable the Day Light Saving when synchronize with NTP server.')
ipmAgentNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 3))
ipmAgentNetworkIp = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 3, 1))
ipmAgentNetworkIpAdress = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmAgentNetworkIpAdress.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentNetworkIpAdress.setDescription('The ip address that NMS can identify the managed device.')
ipmAgentNetworkIpGateway = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmAgentNetworkIpGateway.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentNetworkIpGateway.setDescription('The default gateway that allow device managed through routers.')
ipmAgentNetworkIpSubnet = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmAgentNetworkIpSubnet.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentNetworkIpSubnet.setDescription('Internet address subnet mask')
ipmAgentNetworkDhcpControl = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmAgentNetworkDhcpControl.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentNetworkDhcpControl.setDescription('Enable/disable DHCP protocol')
ipmAgentNetworkPingControl = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmAgentNetworkPingControl.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentNetworkPingControl.setDescription('Enable/disable to response to PING request.')
ipmAgentNetworkTftpControl = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmAgentNetworkTftpControl.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentNetworkTftpControl.setDescription('Enable/disable TFTP protocol')
ipmAgentNetworkTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 3, 5))
ipmAgentTelnetControl = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmAgentTelnetControl.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentTelnetControl.setDescription('Enable/disable Telnet protocol.')
ipmAgentTelnetPort = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 3, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmAgentTelnetPort.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentTelnetPort.setDescription('The TCP port for telnet')
ipmAgentNetworkHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 3, 6))
ipmAgentHttpControl = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmAgentHttpControl.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentHttpControl.setDescription('Enable/disable HTTP protocol.')
ipmAgentHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 3, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmAgentHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentHttpPort.setDescription('The TCP port for HTTP.')
ipmAgentNetworkSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 3, 7))
ipmAgentSnmpControl = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmAgentSnmpControl.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentSnmpControl.setDescription('Enable/disable SNMP protocol.')
ipmAgentSnmpPort = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 3, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmAgentSnmpPort.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentSnmpPort.setDescription('The UDP port for SNMP.')
ipmAgentLog = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 1, 4))
pduAgentDataLogInterval = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 28800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduAgentDataLogInterval.setStatus('mandatory')
if mibBuilder.loadTexts: pduAgentDataLogInterval.setDescription('The interval of the updation of the data log. The value\n                 is in seconds')
ipmAgentControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 1, 5))
ipmAgentControlDefault = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmAgentControlDefault.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentControlDefault.setDescription('Reset all parameters of the agent to default value.')
ipmAgentControlRestart = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmAgentControlRestart.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentControlRestart.setDescription('Restart the agent.')
ipmAgentTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 1, 6))
ipmAgentTrapRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 1, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmAgentTrapRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentTrapRetryCount.setDescription('The count of repeat traps send to NMS before trap\n                 acknowledgement received.')
ipmAgentTrapRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmAgentTrapRetryTime.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentTrapRetryTime.setDescription('The time interval in seconds between retry traps sned to NMS.')
ipmAgentTrapAckSignature = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 1, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmAgentTrapAckSignature.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentTrapAckSignature.setDescription('The signature of trap acknowledgement.')
ipmAgentTrapsReceiversTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 1, 7), )
if mibBuilder.loadTexts: ipmAgentTrapsReceiversTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentTrapsReceiversTable.setDescription('A list of managers to send traps to.  The number of\n                 entries is given by the value of agentConfigNumTrapReceivers')
ipmAgentTrapsReceiversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 1, 7, 1), ).setIndexNames((0, "IPOMANII-MIB", "trapsIndex"))
if mibBuilder.loadTexts: ipmAgentTrapsReceiversEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentTrapsReceiversEntry.setDescription('The managers to send traps to.')
trapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: trapsIndex.setDescription('The index to a trap receiver entry.')
trapsReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 1, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapsReceiverAddr.setStatus('mandatory')
if mibBuilder.loadTexts: trapsReceiverAddr.setDescription('The IP address of the manager to send a trap to.')
receiverCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 1, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverCommunityString.setStatus('mandatory')
if mibBuilder.loadTexts: receiverCommunityString.setDescription('The community name to use in the trap when\n                 sent to the manager.')
receiverNmsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("iPoManII-trap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverNmsType.setStatus('mandatory')
if mibBuilder.loadTexts: receiverNmsType.setDescription('The trap group that NMS desired.')
receiverSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("severe", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverSeverityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: receiverSeverityLevel.setDescription('The severity level of traps to be received by this manager.')
receiverDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 1, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverDescription.setStatus('mandatory')
if mibBuilder.loadTexts: receiverDescription.setDescription('Description of trap receivers')
ipmAgentAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 1, 8), )
if mibBuilder.loadTexts: ipmAgentAccessControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentAccessControlTable.setDescription('A list of managers which can access the device with private\n                community string.')
ipmAgentAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 1, 8, 1), ).setIndexNames((0, "IPOMANII-MIB", "accessIndex"))
if mibBuilder.loadTexts: ipmAgentAccessControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipmAgentAccessControlEntry.setDescription('The managers.')
accessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessIndex.setStatus('mandatory')
if mibBuilder.loadTexts: accessIndex.setDescription('The index to a access control entry.')
accessControlAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 1, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlAddr.setStatus('mandatory')
if mibBuilder.loadTexts: accessControlAddr.setDescription('The IP address of the manager to access the device.')
accessControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 2, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permitted", 1), ("denied", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: accessControlMode.setDescription('Access type, only read/Write access type can change parameter\n                 of the device.')
ipmDeviceInlet = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1))
ipmDeviceInletNumber = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmDeviceInletNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceInletNumber.setDescription('The inlet number on this device.')
ipmDeviceInletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1, 2), )
if mibBuilder.loadTexts: ipmDeviceInletConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceInletConfigTable.setDescription('A list of inlet on this device.')
ipmDeviceInletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1, 2, 1), ).setIndexNames((0, "IPOMANII-MIB", "inletConfigIndex"))
if mibBuilder.loadTexts: ipmDeviceInletConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceInletConfigEntry.setDescription('The inlet number of device.')
inletConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: inletConfigIndex.setDescription('The index to a access inlet configuration table.')
inletConfigDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletConfigDesc.setStatus('mandatory')
if mibBuilder.loadTexts: inletConfigDesc.setDescription('A Description of inlet of device.')
inletConfigVoltageHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletConfigVoltageHigh.setStatus('mandatory')
if mibBuilder.loadTexts: inletConfigVoltageHigh.setDescription('The Inlet high voltage threshold, in volts.')
inletConfigVoltageHighAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletsOff", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletConfigVoltageHighAction.setStatus('mandatory')
if mibBuilder.loadTexts: inletConfigVoltageHighAction.setDescription('Reaction of the device when inlet voltage higher than set point.')
inletConfigVoltageLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletConfigVoltageLow.setStatus('mandatory')
if mibBuilder.loadTexts: inletConfigVoltageLow.setDescription('The Inlet low voltage threshold, in volts.')
inletConfigVoltageLowAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletsOff", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletConfigVoltageLowAction.setStatus('mandatory')
if mibBuilder.loadTexts: inletConfigVoltageLowAction.setDescription('Reaction of the device when inlet voltage lower than set point.')
inletConfigCurrentHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletConfigCurrentHigh.setStatus('mandatory')
if mibBuilder.loadTexts: inletConfigCurrentHigh.setDescription('The Inlet low voltage threshold, in 0.1 amps.')
inletConfigCurrentHighAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletsOff", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletConfigCurrentHighAction.setStatus('mandatory')
if mibBuilder.loadTexts: inletConfigCurrentHighAction.setDescription('Reaction of the device when inlet current higher than set point.')
inletConfigFrequencyHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletConfigFrequencyHigh.setStatus('mandatory')
if mibBuilder.loadTexts: inletConfigFrequencyHigh.setDescription('The Inlet high frequency threshold, in hz.')
inletConfigfrequencyHighAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletsOff", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletConfigfrequencyHighAction.setStatus('mandatory')
if mibBuilder.loadTexts: inletConfigfrequencyHighAction.setDescription('Reaction of the device when inlet frequency higher than set point.')
inletConfigFrequencyLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletConfigFrequencyLow.setStatus('mandatory')
if mibBuilder.loadTexts: inletConfigFrequencyLow.setDescription('The Inlet low frequency threshold, in hz.')
inletConfigfrequencyLowAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletsOff", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletConfigfrequencyLowAction.setStatus('mandatory')
if mibBuilder.loadTexts: inletConfigfrequencyLowAction.setDescription('Reaction of the device when inlet frequency lower than set point.')
ipmDeviceInletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1, 3), )
if mibBuilder.loadTexts: ipmDeviceInletStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceInletStatusTable.setDescription('A list of inlet on this device.')
ipmDeviceInletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1, 3, 1), ).setIndexNames((0, "IPOMANII-MIB", "inletStatusIndex"))
if mibBuilder.loadTexts: ipmDeviceInletStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceInletStatusEntry.setDescription('The inlet number of device.')
inletStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: inletStatusIndex.setDescription('The index to a access inlet configuration table.')
inletStatusVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletStatusVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: inletStatusVoltage.setDescription('The Inlet Voltage in 0.1 volts')
inletStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletStatusCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: inletStatusCurrent.setDescription('The Inlet Current in 0.001 Amp.')
inletStatusFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletStatusFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: inletStatusFrequency.setDescription('The Inlet Frequency in 0.1 Hz')
inletStatusKwatt = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletStatusKwatt.setStatus('mandatory')
if mibBuilder.loadTexts: inletStatusKwatt.setDescription('The Inlet Kwatt in 0.1 KW/H')
inletStatusWH = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletStatusWH.setStatus('mandatory')
if mibBuilder.loadTexts: inletStatusWH.setDescription('The Inlet Kwatt in 0.1 W/H')
inletWattReset = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("inlet1", 2), ("inlet2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletWattReset.setStatus('mandatory')
if mibBuilder.loadTexts: inletWattReset.setDescription('Reset inlet kw.')
ipmDeviceOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2))
ipmDeviceOutletNumber = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmDeviceOutletNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceOutletNumber.setDescription('The outlet number on this device.')
ipmDeviceOutletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 2), )
if mibBuilder.loadTexts: ipmDeviceOutletConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceOutletConfigTable.setDescription('A list of outlet on this device.')
ipmDeviceOutletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 2, 1), ).setIndexNames((0, "IPOMANII-MIB", "inletConfigIndex"))
if mibBuilder.loadTexts: ipmDeviceOutletConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceOutletConfigEntry.setDescription('The inlet number of device.')
outletConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: outletConfigIndex.setDescription('The index to a access inlet configuration table.')
outletConfigDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletConfigDesc.setStatus('mandatory')
if mibBuilder.loadTexts: outletConfigDesc.setDescription('A Description of outlet of device.')
outletConfigLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletConfigLocation.setStatus('mandatory')
if mibBuilder.loadTexts: outletConfigLocation.setDescription('Location of device connectted to this outlet.')
outletConfigOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletConfigOnDelay.setStatus('mandatory')
if mibBuilder.loadTexts: outletConfigOnDelay.setDescription('The delay time before turn on tis outlet, in seconds.')
outletConfigOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletConfigOffDelay.setStatus('mandatory')
if mibBuilder.loadTexts: outletConfigOffDelay.setDescription('The delay time before turn off tis outlet, in seconds.')
outletConfigCurrentHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletConfigCurrentHigh.setStatus('mandatory')
if mibBuilder.loadTexts: outletConfigCurrentHigh.setDescription('The outlet high current threshold, in amp.')
outletConfigCurrentHighAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletOff", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletConfigCurrentHighAction.setStatus('mandatory')
if mibBuilder.loadTexts: outletConfigCurrentHighAction.setDescription('Reaction of the device when outlet current higher than set point.')
ipmDeviceOutletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 3), )
if mibBuilder.loadTexts: ipmDeviceOutletStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceOutletStatusTable.setDescription('A list of outlet on this device.')
ipmDeviceOutletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 3, 1), ).setIndexNames((0, "IPOMANII-MIB", "outletStatusIndex"))
if mibBuilder.loadTexts: ipmDeviceOutletStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceOutletStatusEntry.setDescription('The outlet number of device.')
outletStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: outletStatusIndex.setDescription('The index to a access outlet configuration table.')
outletStatusStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknow", 1), ("outletOff", 2), ("outletOn", 3), ("outletOffToOn", 4), ("outletOnToOff", 5), ("outletCycling", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletStatusStatus.setStatus('mandatory')
if mibBuilder.loadTexts: outletStatusStatus.setDescription('Outlet state')
outletStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletStatusCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: outletStatusCurrent.setDescription('The outlet Current in 0.001 Amp.')
outletStatusKwatt = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletStatusKwatt.setStatus('mandatory')
if mibBuilder.loadTexts: outletStatusKwatt.setDescription('The outlet Kwatt in 0.001 KW/H.')
outletStatusWH = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletStatusWH.setStatus('mandatory')
if mibBuilder.loadTexts: outletStatusWH.setDescription('The outlet Watt in 0.1 W/H.')
outletStatusStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletStatusStateTime.setStatus('mandatory')
if mibBuilder.loadTexts: outletStatusStateTime.setDescription('Time in seconds since the outlet changed to current state.')
outletStatusTimeToGo = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletStatusTimeToGo.setStatus('mandatory')
if mibBuilder.loadTexts: outletStatusTimeToGo.setDescription('Remain time the outlet state will be changed by agent, in seconds')
ipmDeviceOutletControlTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 4), )
if mibBuilder.loadTexts: ipmDeviceOutletControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceOutletControlTable.setDescription('A list of outlet on this device.')
ipmDeviceOutletControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 4, 1), ).setIndexNames((0, "IPOMANII-MIB", "outletControlIndex"))
if mibBuilder.loadTexts: ipmDeviceOutletControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceOutletControlEntry.setDescription('The outlet number of device.')
outletControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: outletControlIndex.setDescription('The index to a access outlet configuration table.')
outletControlControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletControlControl.setStatus('mandatory')
if mibBuilder.loadTexts: outletControlControl.setDescription('Set to control the outlet perform action as requested.')
ipmDeviceOutletControlAll = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimers", 6), ("offByActionTimers", 7), ("cycleByActionTimers", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmDeviceOutletControlAll.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceOutletControlAll.setDescription('Set to control all outlets perform action as requested.')
ipmDeviceOutletWattReset = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("outleta", 2), ("outletb", 3), ("outletc", 4), ("outletd", 5), ("outlete", 6), ("outletf", 7), ("outletg", 8), ("outleth", 9), ("outleti", 10), ("outletj", 11), ("outletk", 12), ("outletl", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmDeviceOutletWattReset.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceOutletWattReset.setDescription('Reset outlet kw.')
ipmDeviceCcOut = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 3))
ipmDeviceCcOutNumber = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmDeviceCcOutNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceCcOutNumber.setDescription('The contact closure output number on this device.')
ipmDeviceCcOutConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 3, 2), )
if mibBuilder.loadTexts: ipmDeviceCcOutConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceCcOutConfigTable.setDescription('A list of contact closure output on this device.')
ipmDeviceCcOutConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 3, 2, 1), ).setIndexNames((0, "IPOMANII-MIB", "ccOutConfigIndex"))
if mibBuilder.loadTexts: ipmDeviceCcOutConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceCcOutConfigEntry.setDescription('The CC number of device.')
ccOutConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccOutConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ccOutConfigIndex.setDescription('The index to access contact closure output configuration table.')
ccOutConfigDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccOutConfigDesc.setStatus('mandatory')
if mibBuilder.loadTexts: ccOutConfigDesc.setDescription('A Description of a contact closure output of device.')
ccOutConfigEventAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccOutConfigEventAction.setStatus('mandatory')
if mibBuilder.loadTexts: ccOutConfigEventAction.setDescription('Enable/disble the contact closure output to react to events.')
ccOutConfigCloseDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccOutConfigCloseDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ccOutConfigCloseDelay.setDescription('The delay time in seconds when the contact closure output set to close.')
ccOutConfigOpenDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccOutConfigOpenDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ccOutConfigOpenDelay.setDescription('The delay time in seconds when the contact closure output set to open.')
ipmDeviceCcOutStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 3, 3), )
if mibBuilder.loadTexts: ipmDeviceCcOutStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceCcOutStatusTable.setDescription('A list of contact closure output on this device.')
ipmDeviceCcOutStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 3, 3, 1), ).setIndexNames((0, "IPOMANII-MIB", "ccOutStatusIndex"))
if mibBuilder.loadTexts: ipmDeviceCcOutStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceCcOutStatusEntry.setDescription('The CC number of device.')
ccOutStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccOutStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ccOutStatusIndex.setDescription('The index to access contact closure output configuration table.')
ccOutStatusStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("closed", 1), ("open", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccOutStatusStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ccOutStatusStatus.setDescription('State of a contact closure output of device.')
ccOutStatusTimeOnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccOutStatusTimeOnState.setStatus('mandatory')
if mibBuilder.loadTexts: ccOutStatusTimeOnState.setDescription('Time in seconds since the contact closure output changed to current state.')
ipmDeviceCcOutControlTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 3, 4), )
if mibBuilder.loadTexts: ipmDeviceCcOutControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceCcOutControlTable.setDescription('A list of contact closure output on this device.')
ipmDeviceCcOutControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 3, 4, 1), ).setIndexNames((0, "IPOMANII-MIB", "ccOutControlIndex"))
if mibBuilder.loadTexts: ipmDeviceCcOutControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceCcOutControlEntry.setDescription('The outlet number of device.')
ccOutControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccOutControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ccOutControlIndex.setDescription('The index to a access contact closure output configuration table.')
ccOutControlControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 3, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("closeImmediately", 3), ("openImmediately", 4), ("cycleImmediately", 5), ("closeByCloseTimer", 6), ("openByOpenTimer", 7), ("cycleByActionTimer", 8), ("closeThenOpenByActionTimers", 9), ("openThenCloseByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccOutControlControl.setStatus('mandatory')
if mibBuilder.loadTexts: ccOutControlControl.setDescription('Set to control the contact closure output perform action as requested.')
ipmSlaveState = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 1))
ipmSlaveStateTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 1, 1), )
if mibBuilder.loadTexts: ipmSlaveStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipmSlaveStateTable.setDescription('A list of outlet on this device.')
ipmSlaveStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 1, 1, 1), ).setIndexNames((0, "IPOMANII-MIB", "slaveStateIndex"))
if mibBuilder.loadTexts: ipmSlaveStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipmSlaveStateEntry.setDescription('The outlet number of device.')
slaveStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveStateIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slaveStateIndex.setDescription('The index to a access outlet configuration table.')
slaveStateControl01 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disconnected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveStateControl01.setStatus('mandatory')
if mibBuilder.loadTexts: slaveStateControl01.setDescription('Set to control the outlet perform action as requested to slave outlet A')
ipmSlaveInlet = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 2))
ipmSlaveInletStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 2, 1))
ipmDeviceSlaveInletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 2, 1, 1), )
if mibBuilder.loadTexts: ipmDeviceSlaveInletStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceSlaveInletStatusTable.setDescription('A list of inlet on this device.')
ipmDeviceSlaveInletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 2, 1, 1, 1), ).setIndexNames((0, "IPOMANII-MIB", "inletStatusIndex"))
if mibBuilder.loadTexts: ipmDeviceSlaveInletStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceSlaveInletStatusEntry.setDescription('The inlet number of device.')
inletSlaveStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSlaveStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: inletSlaveStatusIndex.setDescription('The index to a access inlet configuration table.')
inletSlaveStatusVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSlaveStatusVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: inletSlaveStatusVoltage.setDescription('The Inlet Voltage in 0.1 volts')
inletSlaveStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSlaveStatusCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: inletSlaveStatusCurrent.setDescription('The Inlet Current in 0.001 Amp.')
inletSlaveStatusFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSlaveStatusFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: inletSlaveStatusFrequency.setDescription('The Inlet Frequency in 0.1 Hz')
inletSlaveStatusKwatt = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSlaveStatusKwatt.setStatus('mandatory')
if mibBuilder.loadTexts: inletSlaveStatusKwatt.setDescription('The Inlet Kwatt in 0.001 KW/H')
inletSlaveStatusWH = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSlaveStatusWH.setStatus('mandatory')
if mibBuilder.loadTexts: inletSlaveStatusWH.setDescription('The Inlet Kwatt in 0.001 KW/H')
inletSlaveStatusVoltage2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSlaveStatusVoltage2.setStatus('mandatory')
if mibBuilder.loadTexts: inletSlaveStatusVoltage2.setDescription('The Inlet Voltage in 0.1 volts')
inletSlaveStatusCurrent2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSlaveStatusCurrent2.setStatus('mandatory')
if mibBuilder.loadTexts: inletSlaveStatusCurrent2.setDescription('The Inlet Current in 0.001 Amp.')
inletSlaveStatusFrequency2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSlaveStatusFrequency2.setStatus('mandatory')
if mibBuilder.loadTexts: inletSlaveStatusFrequency2.setDescription('The Inlet Frequency in 0.1 Hz')
inletSlaveStatusKwatt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSlaveStatusKwatt2.setStatus('mandatory')
if mibBuilder.loadTexts: inletSlaveStatusKwatt2.setDescription('The Inlet Kwatt in 0.001 KW/H')
inletSlaveStatusWH2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSlaveStatusWH2.setStatus('mandatory')
if mibBuilder.loadTexts: inletSlaveStatusWH2.setDescription('The Inlet Kwatt in 0.001 KW/H')
ipmSlaveInletConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 2, 2))
ipmDeviceslaveInletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 2, 2, 1), )
if mibBuilder.loadTexts: ipmDeviceslaveInletConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceslaveInletConfigTable.setDescription('A list of inlet on this device.')
ipmDeviceslaveInletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 2, 2, 1, 1), ).setIndexNames((0, "IPOMANII-MIB", "slaveInletConfigIndex"))
if mibBuilder.loadTexts: ipmDeviceslaveInletConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipmDeviceslaveInletConfigEntry.setDescription('The inlet number of device.')
slaveInletConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveInletConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slaveInletConfigIndex.setDescription('The index to a access inlet configuration table.')
slaveInletConfigVoltageHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveInletConfigVoltageHigh.setStatus('mandatory')
if mibBuilder.loadTexts: slaveInletConfigVoltageHigh.setDescription('The Inlet high voltage threshold, in volts.')
slaveInletConfigVoltageLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveInletConfigVoltageLow.setStatus('mandatory')
if mibBuilder.loadTexts: slaveInletConfigVoltageLow.setDescription('The Inlet low voltage threshold, in volts.')
slaveInlet2ConfigVoltageHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveInlet2ConfigVoltageHigh.setStatus('mandatory')
if mibBuilder.loadTexts: slaveInlet2ConfigVoltageHigh.setDescription('The Inlet 2 high voltage threshold, in volts.')
slaveInlet2ConfigVoltageLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveInlet2ConfigVoltageLow.setStatus('mandatory')
if mibBuilder.loadTexts: slaveInlet2ConfigVoltageLow.setDescription('The Inlet low voltage threshold, in volts.')
ipmSlaveOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3))
ipmSlaveOutletConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1))
ipmSlaveDeviceOutletNameTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 1), )
if mibBuilder.loadTexts: ipmSlaveDeviceOutletNameTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipmSlaveDeviceOutletNameTable.setDescription('A list of outlet on this device.')
ipmSlaveDeviceOutletNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 1, 1), ).setIndexNames((0, "IPOMANII-MIB", "slaveOutletNameIndex"))
if mibBuilder.loadTexts: ipmSlaveDeviceOutletNameEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipmSlaveDeviceOutletNameEntry.setDescription('The outlet number of device.')
slaveOutletNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletNameIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletNameIndex.setDescription('The index to a access outlet configuration table.')
slaveOutletName01 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletName01.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletName01.setDescription('A Description of a outlet name of device.')
slaveOutletName02 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletName02.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletName02.setDescription('A Description of a outlet name of device.')
slaveOutletName03 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletName03.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletName03.setDescription('A Description of a outlet name of device.')
slaveOutletName04 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletName04.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletName04.setDescription('A Description of a outlet name of device.')
slaveOutletName05 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletName05.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletName05.setDescription('A Description of a outlet name of device.')
slaveOutletName06 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletName06.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletName06.setDescription('A Description of a outlet name of device.')
slaveOutletName07 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletName07.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletName07.setDescription('A Description of a outlet name of device.')
slaveOutletName08 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletName08.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletName08.setDescription('A Description of a outlet name of device.')
slaveOutletName09 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletName09.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletName09.setDescription('A Description of a outlet name of device.')
slaveOutletName10 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletName10.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletName10.setDescription('A Description of a outlet name of device.')
slaveOutletName11 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletName11.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletName11.setDescription('A Description of a outlet name of device.')
slaveOutletName12 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletName12.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletName12.setDescription('A Description of a outlet name of device.')
ipmSlaveDeviceOutletLocationTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 2), )
if mibBuilder.loadTexts: ipmSlaveDeviceOutletLocationTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipmSlaveDeviceOutletLocationTable.setDescription('A list of outlet on this device.')
ipmSlaveDeviceOutletLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 2, 1), ).setIndexNames((0, "IPOMANII-MIB", "slaveOutletLocationIndex"))
if mibBuilder.loadTexts: ipmSlaveDeviceOutletLocationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipmSlaveDeviceOutletLocationEntry.setDescription('The outlet number of device.')
slaveOutletLocationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletLocationIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocationIndex.setDescription('The index to a access outlet configuration table.')
slaveOutletLocation01 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletLocation01.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocation01.setDescription('A Description of a outlet name of device.')
slaveOutletLocation02 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletLocation02.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocation02.setDescription('A Description of a outlet name of device.')
slaveOutletLocation03 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletLocation03.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocation03.setDescription('A Description of a outlet name of device.')
slaveOutletLocation04 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletLocation04.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocation04.setDescription('A Description of a outlet name of device.')
slaveOutletLocation05 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletLocation05.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocation05.setDescription('A Description of a outlet name of device.')
slaveOutletLocation06 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletLocation06.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocation06.setDescription('A Description of a outlet name of device.')
slaveOutletLocation07 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletLocation07.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocation07.setDescription('A Description of a outlet name of device.')
slaveOutletLocation08 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletLocation08.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocation08.setDescription('A Description of a outlet name of device.')
slaveOutletLocation09 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletLocation09.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocation09.setDescription('A Description of a outlet name of device.')
slaveOutletLocation10 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletLocation10.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocation10.setDescription('A Description of a outlet name of device.')
slaveOutletLocation11 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletLocation11.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocation11.setDescription('A Description of a outlet name of device.')
slaveOutletLocation12 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletLocation12.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocation12.setDescription('A Description of a outlet name of device.')
ipmSlaveDeviceOutletOnTimeTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 3), )
if mibBuilder.loadTexts: ipmSlaveDeviceOutletOnTimeTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipmSlaveDeviceOutletOnTimeTable.setDescription('A list of outlet on this device.')
ipmSlaveDeviceOutletOnTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 3, 1), ).setIndexNames((0, "IPOMANII-MIB", "slaveOutletOnTimeIndex"))
if mibBuilder.loadTexts: ipmSlaveDeviceOutletOnTimeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipmSlaveDeviceOutletOnTimeEntry.setDescription('The outlet number of device.')
slaveOutletOnTimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletOnTimeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTimeIndex.setDescription('The index to a access outlet configuration table.')
slaveOutletOnTime01 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOnTime01.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTime01.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOnTime02 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOnTime02.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTime02.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOnTime03 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOnTime03.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTime03.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOnTime04 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOnTime04.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTime04.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOnTime05 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOnTime05.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTime05.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOnTime06 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOnTime06.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTime06.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOnTime07 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOnTime07.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTime07.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOnTime08 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOnTime08.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTime08.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOnTime09 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOnTime09.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTime09.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOnTime10 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOnTime10.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTime10.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOnTime11 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOnTime11.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTime11.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOnTime12 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOnTime12.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTime12.setDescription('The delay time before turn on tis outlet, in seconds.')
ipmSlaveDeviceOutletOffTimeTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 4), )
if mibBuilder.loadTexts: ipmSlaveDeviceOutletOffTimeTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipmSlaveDeviceOutletOffTimeTable.setDescription('A list of outlet on this device.')
ipmSlaveDeviceOutletOffTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 4, 1), ).setIndexNames((0, "IPOMANII-MIB", "slaveOutletOffTimeIndex"))
if mibBuilder.loadTexts: ipmSlaveDeviceOutletOffTimeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipmSlaveDeviceOutletOffTimeEntry.setDescription('The outlet number of device.')
slaveOutletOffTimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletOffTimeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTimeIndex.setDescription('The index to a access outlet configuration table.')
slaveOutletOffTime01 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOffTime01.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTime01.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOffTime02 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOffTime02.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTime02.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOffTime03 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOffTime03.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTime03.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOffTime04 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOffTime04.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTime04.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOffTime05 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOffTime05.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTime05.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOffTime06 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOffTime06.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTime06.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOffTime07 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOffTime07.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTime07.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOffTime08 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOffTime08.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTime08.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOffTime09 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOffTime09.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTime09.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOffTime10 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 4, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOffTime10.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTime10.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOffTime11 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 4, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOffTime11.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTime11.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOffTime12 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 4, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOffTime12.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTime12.setDescription('The delay time before turn on tis outlet, in seconds.')
ipmSlaveDeviceOutletCurrThTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 5), )
if mibBuilder.loadTexts: ipmSlaveDeviceOutletCurrThTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipmSlaveDeviceOutletCurrThTable.setDescription('A list of outlet on this device.')
ipmSlaveDeviceOutletCurrThEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 5, 1), ).setIndexNames((0, "IPOMANII-MIB", "slaveOutletCurrThIndex"))
if mibBuilder.loadTexts: ipmSlaveDeviceOutletCurrThEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipmSlaveDeviceOutletCurrThEntry.setDescription('The outlet number of device.')
slaveOutletCurrThIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrThIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrThIndex.setDescription('The index to a access outlet configuration table.')
slaveOutletCurrTh01 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletCurrTh01.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrTh01.setDescription('The Outlet Current Threshold ,in 0.1 Amp.')
slaveOutletCurrTh02 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletCurrTh02.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrTh02.setDescription('The Outlet Current Threshold ,in 0.1 Amp.')
slaveOutletCurrTh03 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletCurrTh03.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrTh03.setDescription('The Outlet Current Threshold ,in 0.1 Amp.')
slaveOutletCurrTh04 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletCurrTh04.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrTh04.setDescription('The Outlet Current Threshold ,in 0.1 Amp.')
slaveOutletCurrTh05 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletCurrTh05.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrTh05.setDescription('The Outlet Current Threshold ,in 0.1 Amp.')
slaveOutletCurrTh06 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletCurrTh06.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrTh06.setDescription('The Outlet Current Threshold ,in 0.1 Amp.')
slaveOutletCurrTh07 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletCurrTh07.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrTh07.setDescription('The Outlet Current Threshold ,in 0.1 Amp.')
slaveOutletCurrTh08 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletCurrTh08.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrTh08.setDescription('The Outlet Current Threshold ,in 0.1 Amp.')
slaveOutletCurrTh09 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletCurrTh09.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrTh09.setDescription('The Outlet Current Threshold ,in 0.1 Amp.')
slaveOutletCurrTh10 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletCurrTh10.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrTh10.setDescription('The Outlet Current Threshold ,in 0.1 Amp.')
slaveOutletCurrTh11 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletCurrTh11.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrTh11.setDescription('The Outlet Current Threshold ,in 0.1 Amp.')
slaveOutletCurrTh12 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 1, 5, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletCurrTh12.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrTh12.setDescription('The Outlet Current Threshold ,in 0.1 Amp.')
ipmSlaveOutletStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2))
ipmSlaveDeviceOutletCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 1), )
if mibBuilder.loadTexts: ipmSlaveDeviceOutletCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipmSlaveDeviceOutletCurrentTable.setDescription('A list of outlet on this device.')
ipmSlaveDeviceOutletCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 1, 1), ).setIndexNames((0, "IPOMANII-MIB", "slaveOutletCurrentIndex"))
if mibBuilder.loadTexts: ipmSlaveDeviceOutletCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipmSlaveDeviceOutletCurrentEntry.setDescription('The outlet number of device.')
slaveOutletCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrentIndex.setDescription('The index to a access outlet configuration table.')
slaveOutletCurrent01 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrent01.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrent01.setDescription('The outlet A Current in 0.001 Amp.')
slaveOutletCurrent02 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrent02.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrent02.setDescription('The outlet B Current in 0.001 Amp.')
slaveOutletCurrent03 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrent03.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrent03.setDescription('The outlet C Current in 0.001 Amp.')
slaveOutletCurrent04 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrent04.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrent04.setDescription('The outlet D Current in 0.001 Amp.')
slaveOutletCurrent05 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrent05.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrent05.setDescription('The outlet E Current in 0.001 Amp.')
slaveOutletCurrent06 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrent06.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrent06.setDescription('The outlet F Current in 0.001 Amp.')
slaveOutletCurrent07 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrent07.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrent07.setDescription('The outlet G Current in 0.001 Amp.')
slaveOutletCurrent08 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrent08.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrent08.setDescription('The outlet H Current in 0.001 Amp.')
slaveOutletCurrent09 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrent09.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrent09.setDescription('The outlet I Current in 0.001 Amp.')
slaveOutletCurrent10 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrent10.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrent10.setDescription('The outlet J Current in 0.001 Amp.')
slaveOutletCurrent11 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrent11.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrent11.setDescription('The outlet K Current in 0.001 Amp.')
slaveOutletCurrent12 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrent12.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrent12.setDescription('The outlet L Current in 0.001 Amp.')
ipmSlaveDeviceOutletWattTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 2), )
if mibBuilder.loadTexts: ipmSlaveDeviceOutletWattTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipmSlaveDeviceOutletWattTable.setDescription('A list of outlet on this device.')
ipmSlaveDeviceOutletWattEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 2, 1), ).setIndexNames((0, "IPOMANII-MIB", "slaveOutletWattIndex"))
if mibBuilder.loadTexts: ipmSlaveDeviceOutletWattEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipmSlaveDeviceOutletWattEntry.setDescription('The outlet number of device.')
slaveOutletWattIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWattIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWattIndex.setDescription('The index to a access outlet configuration table.')
slaveOutletWatt01 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWatt01.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWatt01.setDescription('The outlet A Watt in 0.1 W/H.')
slaveOutletWatt02 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWatt02.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWatt02.setDescription('The outlet B Watt in 0.1 W/H.')
slaveOutletWatt03 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWatt03.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWatt03.setDescription('The outlet C Watt in 0.1 W/H.')
slaveOutletWatt04 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWatt04.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWatt04.setDescription('The outlet D Watt in 0.1 W/H.')
slaveOutletWatt05 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWatt05.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWatt05.setDescription('The outlet E Watt in 0.1 W/H.')
slaveOutletWatt06 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWatt06.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWatt06.setDescription('The outlet F Watt in 0.1 W/H.')
slaveOutletWatt07 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWatt07.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWatt07.setDescription('The outlet G Watt in 0.1 W/H.')
slaveOutletWatt08 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWatt08.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWatt08.setDescription('The outlet H Watt in 0.1 W/H.')
slaveOutletWatt09 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWatt09.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWatt09.setDescription('The outlet I Watt in 0.1 W/H.')
slaveOutletWatt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWatt10.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWatt10.setDescription('The outlet J Watt in 0.1 W/H.')
slaveOutletWatt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWatt11.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWatt11.setDescription('The outlet K Watt in 0.1 W/H.')
slaveOutletWatt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWatt12.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWatt12.setDescription('The outlet L Watt in 0.1 W/H.')
ipmSlaveDeviceOutletKwattTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 3), )
if mibBuilder.loadTexts: ipmSlaveDeviceOutletKwattTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipmSlaveDeviceOutletKwattTable.setDescription('A list of outlet on this device.')
ipmSlaveDeviceOutletKwattEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 3, 1), ).setIndexNames((0, "IPOMANII-MIB", "slaveOutletKwattIndex"))
if mibBuilder.loadTexts: ipmSlaveDeviceOutletKwattEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipmSlaveDeviceOutletKwattEntry.setDescription('The outlet number of device.')
slaveOutletKwattIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwattIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwattIndex.setDescription('The index to a access outlet configuration table.')
slaveOutletKwatt01 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwatt01.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwatt01.setDescription('The outlet A Kwatt in 0.001 KW/H.')
slaveOutletKwatt02 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwatt02.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwatt02.setDescription('The outlet B Kwatt in 0.001 KW/H.')
slaveOutletKwatt03 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwatt03.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwatt03.setDescription('The outlet C Kwatt in 0.001 KW/H.')
slaveOutletKwatt04 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwatt04.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwatt04.setDescription('The outlet D Kwatt in 0.001 KW/H.')
slaveOutletKwatt05 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwatt05.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwatt05.setDescription('The outlet E Kwatt in 0.001 KW/H.')
slaveOutletKwatt06 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwatt06.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwatt06.setDescription('The outlet F Kwatt in 0.001 KW/H.')
slaveOutletKwatt07 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwatt07.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwatt07.setDescription('The outlet G Kwatt in 0.001 KW/H.')
slaveOutletKwatt08 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwatt08.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwatt08.setDescription('The outlet H Kwatt in 0.001 KW/H.')
slaveOutletKwatt09 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwatt09.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwatt09.setDescription('The outlet I Kwatt in 0.001 KW/H.')
slaveOutletKwatt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwatt10.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwatt10.setDescription('The outlet J Kwatt in 0.001 KW/H.')
slaveOutletKwatt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwatt11.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwatt11.setDescription('The outlet K Kwatt in 0.001 KW/H.')
slaveOutletKwatt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 2, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwatt12.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwatt12.setDescription('The outlet L Kwatt in 0.001 KW/H.')
ipmSlaveOutletAction = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 3))
ipmSlaveDeviceOutletActionTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 3, 1), )
if mibBuilder.loadTexts: ipmSlaveDeviceOutletActionTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipmSlaveDeviceOutletActionTable.setDescription('A list of outlet on this device.')
ipmSlaveDeviceOutletActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 3, 1, 1), ).setIndexNames((0, "IPOMANII-MIB", "slaveOutletActionIndex"))
if mibBuilder.loadTexts: ipmSlaveDeviceOutletActionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipmSlaveDeviceOutletActionEntry.setDescription('The outlet number of device.')
slaveOutletActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletActionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletActionIndex.setDescription('The index to a access outlet configuration table.')
slaveOutletAction01 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletAction01.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletAction01.setDescription('Set to control the outlet perform action as requested.')
slaveOutletAction02 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletAction02.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletAction02.setDescription('Set to control the outlet perform action as requested.')
slaveOutletAction03 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletAction03.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletAction03.setDescription('Set to control the outlet perform action as requested.')
slaveOutletAction04 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletAction04.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletAction04.setDescription('Set to control the outlet perform action as requested.')
slaveOutletAction05 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletAction05.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletAction05.setDescription('Set to control the outlet perform action as requested.')
slaveOutletAction06 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletAction06.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletAction06.setDescription('Set to control the outlet perform action as requested.')
slaveOutletAction07 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletAction07.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletAction07.setDescription('Set to control the outlet perform action as requested.')
slaveOutletAction08 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletAction08.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletAction08.setDescription('Set to control the outlet perform action as requested.')
slaveOutletAction09 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletAction09.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletAction09.setDescription('Set to control the outlet perform action as requested.')
slaveOutletAction10 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletAction10.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletAction10.setDescription('Set to control the outlet perform action as requested.')
slaveOutletAction11 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletAction11.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletAction11.setDescription('Set to control the outlet perform action as requested.')
slaveOutletAction12 = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 4, 3, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletAction12.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletAction12.setDescription('Set to control the outlet perform action as requested.')
ipmEnvEmd = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1))
ipmEnvEmdStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 1))
ipmEnvEmdStatusEmdType = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("eMD-HT", 3), ("eMD-T", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmEnvEmdStatusEmdType.setStatus('mandatory')
if mibBuilder.loadTexts: ipmEnvEmdStatusEmdType.setDescription('EMD Type.')
ipmEnvEmdStatusTemperature = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmEnvEmdStatusTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: ipmEnvEmdStatusTemperature.setDescription('EMD Temperature in 0.1 degree C.')
ipmEnvEmdStatusHumidity = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmEnvEmdStatusHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: ipmEnvEmdStatusHumidity.setDescription('EMD Humidity in 0.1%.')
ipmEnvEmdStatusAlarm1 = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("alarm", 3), ("normal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmEnvEmdStatusAlarm1.setStatus('mandatory')
if mibBuilder.loadTexts: ipmEnvEmdStatusAlarm1.setDescription('EMD Alarm-1 state.')
ipmEnvEmdStatusAlarm2 = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("alarm", 3), ("normal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmEnvEmdStatusAlarm2.setStatus('mandatory')
if mibBuilder.loadTexts: ipmEnvEmdStatusAlarm2.setDescription('EMD Alarm-2 state.')
ipmEnvEmdConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 2))
ipmEnvEmdConfigEmdPresence = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("autoDetect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmEnvEmdConfigEmdPresence.setStatus('mandatory')
if mibBuilder.loadTexts: ipmEnvEmdConfigEmdPresence.setDescription('Configure the EMD presence by auto-detect or not exist (disabled).')
ipmEnvEmdConfigEmdName = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmEnvEmdConfigEmdName.setStatus('mandatory')
if mibBuilder.loadTexts: ipmEnvEmdConfigEmdName.setDescription('The name of Emd.')
ipmEnvEmdConfigTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 2, 3))
ipmEnvEmdConfigTempName = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 2, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmEnvEmdConfigTempName.setStatus('mandatory')
if mibBuilder.loadTexts: ipmEnvEmdConfigTempName.setDescription('The name of EMD Temperature sensor.')
ipmEnvEmdConfigTempHighSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 65))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmEnvEmdConfigTempHighSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: ipmEnvEmdConfigTempHighSetPoint.setDescription('EMD Temperature set point high, alarm will active when temperature \n\t\t over this value, in degree C.')
ipmEnvEmdConfigTempHighStatus = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmEnvEmdConfigTempHighStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipmEnvEmdConfigTempHighStatus.setDescription('Enabled/disabled the high setpoint be applied or not')
ipmEnvEmdConfigTempLowSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 65))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmEnvEmdConfigTempLowSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: ipmEnvEmdConfigTempLowSetPoint.setDescription('EMD Temperature set point high, alarm will active when temperature \n\t\t under this value, in degree C.')
ipmEnvEmdConfigTempLowStatus = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmEnvEmdConfigTempLowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipmEnvEmdConfigTempLowStatus.setDescription('Enabled/disabled the low setpoint be applied or not')
ipmEnvEmdConfigTempOffset = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("t0p0", 1), ("t0p5", 2), ("t1p0", 3), ("t1p5", 4), ("t2p0", 5), ("t2p5", 6), ("t3p0", 7), ("t-0p5", 8), ("t-1p0", 9), ("t-1p5", 10), ("t-2p0", 11), ("t-2p5", 12), ("t-3p0", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmEnvEmdConfigTempOffset.setStatus('mandatory')
if mibBuilder.loadTexts: ipmEnvEmdConfigTempOffset.setDescription('Offset of temperature in degree C to adjust EMD temperature measurement.')
ipmEnvEmdConfigHumi = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 2, 4))
ipmEnvEmdConfigHumiName = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 2, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmEnvEmdConfigHumiName.setStatus('mandatory')
if mibBuilder.loadTexts: ipmEnvEmdConfigHumiName.setDescription('The name of EMD Humidity.')
ipmEnvEmdConfigHumiHighSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 2, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 95))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmEnvEmdConfigHumiHighSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: ipmEnvEmdConfigHumiHighSetPoint.setDescription('EMD humidity set point high, alarm will active when humidity \n\t\t over this value, in %.')
ipmEnvEmdConfigHumiHighStatus = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmEnvEmdConfigHumiHighStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipmEnvEmdConfigHumiHighStatus.setDescription('Enabled/disabled the high setpoint be applied or not')
ipmEnvEmdConfigHumiLowSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 2, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 95))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmEnvEmdConfigHumiLowSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: ipmEnvEmdConfigHumiLowSetPoint.setDescription('EMD humidity set point low, alarm will active when humidity \n\t\t under this value, in %.')
ipmEnvEmdConfigHumiLowStatus = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmEnvEmdConfigHumiLowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipmEnvEmdConfigHumiLowStatus.setDescription('Enabled/disabled the high setpoint be applied or not')
ipmEnvEmdConfigHumiOffset = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("h0p0", 1), ("h1p0", 2), ("h2p0", 3), ("h3p0", 4), ("h4p0", 5), ("h5p0", 6), ("h6p0", 7), ("h-1p0", 8), ("h-2p0", 9), ("h-3p0", 10), ("h-4p0", 11), ("h-5p0", 12), ("h-6p0", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmEnvEmdConfigHumiOffset.setStatus('mandatory')
if mibBuilder.loadTexts: ipmEnvEmdConfigHumiOffset.setDescription('Emd Hum Offset;')
ipmEnvEmdConfigAlarm1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 2, 5))
ipmEnvEmdConfigAlarm1Name = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 2, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmEnvEmdConfigAlarm1Name.setStatus('mandatory')
if mibBuilder.loadTexts: ipmEnvEmdConfigAlarm1Name.setDescription('The name of EMD Alarm-1.')
ipmEnvEmdConfigAlarm1Type = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("normalOpen", 2), ("normalClose", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmEnvEmdConfigAlarm1Type.setStatus('mandatory')
if mibBuilder.loadTexts: ipmEnvEmdConfigAlarm1Type.setDescription('EMD Alarm-1 type')
ipmEnvEmdConfigAlarm2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 2, 6))
ipmEnvEmdConfigAlarm2Name = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 2, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmEnvEmdConfigAlarm2Name.setStatus('mandatory')
if mibBuilder.loadTexts: ipmEnvEmdConfigAlarm2Name.setDescription('The name of EMD Alarm-2.')
ipmEnvEmdConfigAlarm2Type = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 1, 5, 1, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("normalOpen", 2), ("normalClose", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmEnvEmdConfigAlarm2Type.setStatus('mandatory')
if mibBuilder.loadTexts: ipmEnvEmdConfigAlarm2Type.setDescription('EMD Alarm-2 type')
ipmInletVoltageTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,1)).setObjects(("IPOMANII-MIB", "inletConfigIndex"), ("IPOMANII-MIB", "inletStatusVoltage"), ("IPOMANII-MIB", "inletConfigVoltageHigh"), ("IPOMANII-MIB", "inletConfigDesc"))
if mibBuilder.loadTexts: ipmInletVoltageTooHigh.setDescription('CRITICAL: The input voltage over high threshold.')
ipmInletVoltageNotTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,2)).setObjects(("IPOMANII-MIB", "inletConfigIndex"), ("IPOMANII-MIB", "inletStatusVoltage"), ("IPOMANII-MIB", "inletConfigVoltageHigh"), ("IPOMANII-MIB", "inletConfigDesc"))
if mibBuilder.loadTexts: ipmInletVoltageNotTooHigh.setDescription('WARNING: The input voltage return from over high threshold.')
ipmInletVoltageTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,3)).setObjects(("IPOMANII-MIB", "inletConfigIndex"), ("IPOMANII-MIB", "inletStatusVoltage"), ("IPOMANII-MIB", "inletConfigVoltageLow"), ("IPOMANII-MIB", "inletConfigDesc"))
if mibBuilder.loadTexts: ipmInletVoltageTooLow.setDescription('CRITICAL: The input voltage under low threshold.')
ipmInletVoltageNotTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,4)).setObjects(("IPOMANII-MIB", "inletConfigIndex"), ("IPOMANII-MIB", "inletStatusVoltage"), ("IPOMANII-MIB", "inletConfigVoltageLow"), ("IPOMANII-MIB", "inletConfigDesc"))
if mibBuilder.loadTexts: ipmInletVoltageNotTooLow.setDescription('WARNING: The input voltage return from under low threshold.')
ipmInletCurrentTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,5)).setObjects(("IPOMANII-MIB", "inletConfigIndex"), ("IPOMANII-MIB", "inletStatusCurrent"), ("IPOMANII-MIB", "inletConfigCurrentHigh"), ("IPOMANII-MIB", "inletConfigDesc"))
if mibBuilder.loadTexts: ipmInletCurrentTooHigh.setDescription('CRITICAL: The input current over high threshold.')
ipmInletCurrentNotTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,6)).setObjects(("IPOMANII-MIB", "inletConfigIndex"), ("IPOMANII-MIB", "inletStatusCurrent"), ("IPOMANII-MIB", "inletConfigCurrentHigh"), ("IPOMANII-MIB", "inletConfigDesc"))
if mibBuilder.loadTexts: ipmInletCurrentNotTooHigh.setDescription('WARNING: The input current return from over high threshold.')
ipmInletFrequencyTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,7)).setObjects(("IPOMANII-MIB", "inletConfigIndex"), ("IPOMANII-MIB", "inletStatusFrequency"), ("IPOMANII-MIB", "inletConfigFrequencyHigh"), ("IPOMANII-MIB", "inletConfigDesc"))
if mibBuilder.loadTexts: ipmInletFrequencyTooHigh.setDescription('CRITICAL: The input frequency over high threshold.')
ipmInletFrequencyNotTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,8)).setObjects(("IPOMANII-MIB", "inletConfigIndex"), ("IPOMANII-MIB", "inletStatusFrequency"), ("IPOMANII-MIB", "inletConfigFrequencyHigh"), ("IPOMANII-MIB", "inletConfigDesc"))
if mibBuilder.loadTexts: ipmInletFrequencyNotTooHigh.setDescription('WARNING: The input frequency return from over high threshold.')
ipmInletFrequencyTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,9)).setObjects(("IPOMANII-MIB", "inletConfigIndex"), ("IPOMANII-MIB", "inletStatusFrequency"), ("IPOMANII-MIB", "inletConfigFrequencyLow"), ("IPOMANII-MIB", "inletConfigDesc"))
if mibBuilder.loadTexts: ipmInletFrequencyTooLow.setDescription('CRITICAL: The input frequency under low threshold.')
ipmInletFrequencyNotTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,10)).setObjects(("IPOMANII-MIB", "inletConfigIndex"), ("IPOMANII-MIB", "inletStatusFrequency"), ("IPOMANII-MIB", "inletConfigFrequencyLow"), ("IPOMANII-MIB", "inletConfigDesc"))
if mibBuilder.loadTexts: ipmInletFrequencyNotTooLow.setDescription('WARNING: The input frequency return from under low threshold.')
ipmOutletCurrentTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,11)).setObjects(("IPOMANII-MIB", "outletConfigIndex"), ("IPOMANII-MIB", "outletStatusCurrent"), ("IPOMANII-MIB", "outletConfigCurrentHigh"), ("IPOMANII-MIB", "outletConfigDesc"))
if mibBuilder.loadTexts: ipmOutletCurrentTooHigh.setDescription('CRITICAL: The output current of outlet over high threshold.')
ipmOutletCurrentNotTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,12)).setObjects(("IPOMANII-MIB", "outletConfigIndex"), ("IPOMANII-MIB", "outletStatusCurrent"), ("IPOMANII-MIB", "outletConfigCurrentHigh"), ("IPOMANII-MIB", "outletConfigDesc"))
if mibBuilder.loadTexts: ipmOutletCurrentNotTooHigh.setDescription('WARNING: The output current of outlet return from over high threshold.')
ipmOutletStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,13)).setObjects(("IPOMANII-MIB", "outletConfigIndex"), ("IPOMANII-MIB", "outletStatusStatus"), ("IPOMANII-MIB", "outletConfigDesc"))
if mibBuilder.loadTexts: ipmOutletStateChanged.setDescription('INFORMATION: The outlet state had changed from on to off, or from off to on.')
ipmEmdTemperatureNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,14)).setObjects(("IPOMANII-MIB", "ipmEnvEmdStatusTemperature"), ("IPOMANII-MIB", "ipmEnvEmdConfigTempHighSetPoint"), ("IPOMANII-MIB", "ipmEnvEmdConfigTempName"))
if mibBuilder.loadTexts: ipmEmdTemperatureNotHigh.setDescription('INFORMATION: emd Temperature Not High.')
ipmEmdTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,15)).setObjects(("IPOMANII-MIB", "ipmEnvEmdStatusTemperature"), ("IPOMANII-MIB", "ipmEnvEmdConfigTempHighSetPoint"), ("IPOMANII-MIB", "ipmEnvEmdConfigTempName"))
if mibBuilder.loadTexts: ipmEmdTemperatureTooHigh.setDescription('WARNING:  emd Temperature Too High.')
ipmEmdTemperatureNotLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,16)).setObjects(("IPOMANII-MIB", "ipmEnvEmdStatusTemperature"), ("IPOMANII-MIB", "ipmEnvEmdConfigTempLowSetPoint"), ("IPOMANII-MIB", "ipmEnvEmdConfigTempName"))
if mibBuilder.loadTexts: ipmEmdTemperatureNotLow.setDescription('INFORMATION: emd Temperature Not Low.')
ipmEmdTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,17)).setObjects(("IPOMANII-MIB", "ipmEnvEmdStatusTemperature"), ("IPOMANII-MIB", "ipmEnvEmdConfigTempLowSetPoint"), ("IPOMANII-MIB", "ipmEnvEmdConfigTempName"))
if mibBuilder.loadTexts: ipmEmdTemperatureTooLow.setDescription('WARNING: emd Temperature Too Low.')
ipmEmdHumidityNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,18)).setObjects(("IPOMANII-MIB", "ipmEnvEmdStatusHumidity"), ("IPOMANII-MIB", "ipmEnvEmdConfigHumiHighSetPoint"), ("IPOMANII-MIB", "ipmEnvEmdConfigHumiName"))
if mibBuilder.loadTexts: ipmEmdHumidityNotHigh.setDescription('INFORMATION: emd Humidity Not High.')
ipmEmdHumidityTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,19)).setObjects(("IPOMANII-MIB", "ipmEnvEmdStatusHumidity"), ("IPOMANII-MIB", "ipmEnvEmdConfigHumiHighSetPoint"), ("IPOMANII-MIB", "ipmEnvEmdConfigHumiName"))
if mibBuilder.loadTexts: ipmEmdHumidityTooHigh.setDescription('WARNING: emd Humidity Too High.')
ipmEmdHumidityNotLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,20)).setObjects(("IPOMANII-MIB", "ipmEnvEmdStatusHumidity"), ("IPOMANII-MIB", "ipmEnvEmdConfigHumiLowSetPoint"), ("IPOMANII-MIB", "ipmEnvEmdConfigHumiName"))
if mibBuilder.loadTexts: ipmEmdHumidityNotLow.setDescription('INFORMATION: emd Humidity Not Low.')
ipmEmdHumidityTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,21)).setObjects(("IPOMANII-MIB", "ipmEnvEmdStatusHumidity"), ("IPOMANII-MIB", "ipmEnvEmdConfigHumiLowSetPoint"), ("IPOMANII-MIB", "ipmEnvEmdConfigHumiName"))
if mibBuilder.loadTexts: ipmEmdHumidityTooLow.setDescription('WARNING: emd Humidity Too Low.')
ipmEmdAlarm1Normal = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,22)).setObjects(("IPOMANII-MIB", "ipmEnvEmdConfigAlarm1Type"), ("IPOMANII-MIB", "ipmEnvEmdConfigAlarm1Name"))
if mibBuilder.loadTexts: ipmEmdAlarm1Normal.setDescription('INFORMATION: emd Alarm1 Normal.')
ipmEmdAlarm1Active = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,23)).setObjects(("IPOMANII-MIB", "ipmEnvEmdConfigAlarm1Type"), ("IPOMANII-MIB", "ipmEnvEmdConfigAlarm1Name"))
if mibBuilder.loadTexts: ipmEmdAlarm1Active.setDescription('WARNING: emd Alarm1 Active.')
ipmEmdAlarm2Normal = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,24)).setObjects(("IPOMANII-MIB", "ipmEnvEmdConfigAlarm2Type"), ("IPOMANII-MIB", "ipmEnvEmdConfigAlarm2Name"))
if mibBuilder.loadTexts: ipmEmdAlarm2Normal.setDescription('INFORMATION: emd Alarm2 Normal.')
ipmEmdAlarm2Active = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,25)).setObjects(("IPOMANII-MIB", "ipmEnvEmdConfigAlarm2Type"), ("IPOMANII-MIB", "ipmEnvEmdConfigAlarm2Name"))
if mibBuilder.loadTexts: ipmEmdAlarm2Active.setDescription('WARNING: emd Alarm2 Active.')
ipmSlave01Inlet01OverHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,26))
if mibBuilder.loadTexts: ipmSlave01Inlet01OverHigh.setDescription('CRITICAL: The Slave01 input01 voltage over high threshold.')
ipmSlave01Inlet01NotOverHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,27))
if mibBuilder.loadTexts: ipmSlave01Inlet01NotOverHigh.setDescription('CRITICAL: The Slave01 input01 voltage Not over high threshold.')
ipmSlave01Inlet02OverHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,28))
if mibBuilder.loadTexts: ipmSlave01Inlet02OverHigh.setDescription('CRITICAL: The Slave01 input02 voltage over high threshold.')
ipmSlave01Inlet02NotOverHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,29))
if mibBuilder.loadTexts: ipmSlave01Inlet02NotOverHigh.setDescription('CRITICAL: The Slave01 input02 voltage Not over high threshold.')
ipmSlave01Inlet01UnderLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,30))
if mibBuilder.loadTexts: ipmSlave01Inlet01UnderLow.setDescription('CRITICAL: The Slave01 input01 voltage under low threshold.')
ipmSlave01Inlet01NotUnderLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,31))
if mibBuilder.loadTexts: ipmSlave01Inlet01NotUnderLow.setDescription('CRITICAL: The Slave01 input01 voltage Not under low threshold.')
ipmSlave01Inlet02UnderLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,32))
if mibBuilder.loadTexts: ipmSlave01Inlet02UnderLow.setDescription('CRITICAL: The Slave01 input02 voltage under low threshold.')
ipmSlave01Inlet02NotUnderLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,33))
if mibBuilder.loadTexts: ipmSlave01Inlet02NotUnderLow.setDescription('CRITICAL: The Slave01 input02 voltage Not under low threshold.')
ipmSlave01Inlet01CurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,34))
if mibBuilder.loadTexts: ipmSlave01Inlet01CurrentOverTh.setDescription('CRITICAL: The Slave01 input01 current over high threshold.')
ipmSlave01Inlet01NotCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,35))
if mibBuilder.loadTexts: ipmSlave01Inlet01NotCurrentOverTh.setDescription('CRITICAL: The Slave01 input01 current not over high threshold.')
ipmSlave01Inlet02CurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,36))
if mibBuilder.loadTexts: ipmSlave01Inlet02CurrentOverTh.setDescription('CRITICAL: The Slave01 input02 current over high threshold.')
ipmSlave01Inlet02NotCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,37))
if mibBuilder.loadTexts: ipmSlave01Inlet02NotCurrentOverTh.setDescription('CRITICAL: The Slave01 input02 current not over high threshold.')
ipmSlave01EmdTemperatureNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,38))
if mibBuilder.loadTexts: ipmSlave01EmdTemperatureNotHigh.setDescription('INFORMATION: The Slave01 emd Temperature Not High.')
ipmSlave01EmdTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,39))
if mibBuilder.loadTexts: ipmSlave01EmdTemperatureTooHigh.setDescription('WARNING: The Slave01 emd Temperature Too High.')
ipmSlave01EmdTemperatureNotLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,40))
if mibBuilder.loadTexts: ipmSlave01EmdTemperatureNotLow.setDescription('INFORMATION: The Slave01 emd Temperature Not Low.')
ipmSlave01EmdTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,41))
if mibBuilder.loadTexts: ipmSlave01EmdTemperatureTooLow.setDescription('WARNING: The Slave01 emd Temperature Too Low.')
ipmSlave01EmdHumidityNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,42))
if mibBuilder.loadTexts: ipmSlave01EmdHumidityNotHigh.setDescription('INFORMATION: The Slave01 emd Humidity Not High.')
ipmSlave01EmdHumidityTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,43))
if mibBuilder.loadTexts: ipmSlave01EmdHumidityTooHigh.setDescription('WARNING: The Slave01 emd Humidity Too High.')
ipmSlave01EmdHumidityNotLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,44))
if mibBuilder.loadTexts: ipmSlave01EmdHumidityNotLow.setDescription('INFORMATION: The Slave01 emd Humidity Not Low.')
ipmSlave01EmdHumidityTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,45))
if mibBuilder.loadTexts: ipmSlave01EmdHumidityTooLow.setDescription('WARNING: The Slave01 emd Humidity Too Low.')
ipmSlave01EmdAlarm1Normal = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,46))
if mibBuilder.loadTexts: ipmSlave01EmdAlarm1Normal.setDescription('INFORMATION: The Slave01 emd Alarm1 Normal.')
ipmSlave01EmdAlarm1Active = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,47))
if mibBuilder.loadTexts: ipmSlave01EmdAlarm1Active.setDescription('WARNING: The Slave01 emd Alarm1 Active.')
ipmSlave01EmdAlarm2Normal = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,48))
if mibBuilder.loadTexts: ipmSlave01EmdAlarm2Normal.setDescription('INFORMATION: The Slave01 emd Alarm2 Normal.')
ipmSlave01EmdAlarm2Active = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,49))
if mibBuilder.loadTexts: ipmSlave01EmdAlarm2Active.setDescription('WARNING: The Slave01 emd Alarm2 Active.')
ipmSlave01OutletCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,50))
if mibBuilder.loadTexts: ipmSlave01OutletCurrentOverTh.setDescription('WARNING: The Slave01 Outlet Current over threshold.')
ipmSlave02Inlet01OverHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,51))
if mibBuilder.loadTexts: ipmSlave02Inlet01OverHigh.setDescription('CRITICAL: The Slave02 input01 voltage over high threshold.')
ipmSlave02Inlet01NotOverHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,52))
if mibBuilder.loadTexts: ipmSlave02Inlet01NotOverHigh.setDescription('CRITICAL: The Slave02 input01 voltage Not over high threshold.')
ipmSlave02Inlet02OverHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,53))
if mibBuilder.loadTexts: ipmSlave02Inlet02OverHigh.setDescription('CRITICAL: The Slave02 input02 voltage over high threshold.')
ipmSlave02Inlet02NotOverHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,54))
if mibBuilder.loadTexts: ipmSlave02Inlet02NotOverHigh.setDescription('CRITICAL: The Slave02 input02 voltage Not over high threshold.')
ipmSlave02Inlet01UnderLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,55))
if mibBuilder.loadTexts: ipmSlave02Inlet01UnderLow.setDescription('CRITICAL: The Slave02 input01 voltage under low threshold.')
ipmSlave02Inlet01NotUnderLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,56))
if mibBuilder.loadTexts: ipmSlave02Inlet01NotUnderLow.setDescription('CRITICAL: The Slave02 input01 voltage Not under low threshold.')
ipmSlave02Inlet02UnderLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,57))
if mibBuilder.loadTexts: ipmSlave02Inlet02UnderLow.setDescription('CRITICAL: The Slave02 input02 voltage under low threshold.')
ipmSlave02Inlet02NotUnderLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,58))
if mibBuilder.loadTexts: ipmSlave02Inlet02NotUnderLow.setDescription('CRITICAL: The Slave02 input02 voltage Not under low threshold.')
ipmSlave02Inlet01CurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,59))
if mibBuilder.loadTexts: ipmSlave02Inlet01CurrentOverTh.setDescription('CRITICAL: The Slave02 input01 current over high threshold.')
ipmSlave02Inlet01NotCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,60))
if mibBuilder.loadTexts: ipmSlave02Inlet01NotCurrentOverTh.setDescription('CRITICAL: The Slave02 input01 current not over high threshold.')
ipmSlave02Inlet02CurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,61))
if mibBuilder.loadTexts: ipmSlave02Inlet02CurrentOverTh.setDescription('CRITICAL: The Slave02 input02 current over high threshold.')
ipmSlave02Inlet02NotCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,62))
if mibBuilder.loadTexts: ipmSlave02Inlet02NotCurrentOverTh.setDescription('CRITICAL: The Slave02 input02 current not over high threshold.')
ipmSlave02EmdTemperatureNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,63))
if mibBuilder.loadTexts: ipmSlave02EmdTemperatureNotHigh.setDescription('INFORMATION: The Slave02 emd Temperature Not High.')
ipmSlave02EmdTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,64))
if mibBuilder.loadTexts: ipmSlave02EmdTemperatureTooHigh.setDescription('WARNING: The Slave02 emd Temperature Too High.')
ipmSlave02EmdTemperatureNotLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,65))
if mibBuilder.loadTexts: ipmSlave02EmdTemperatureNotLow.setDescription('INFORMATION: The Slave02 emd Temperature Not Low.')
ipmSlave02EmdTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,66))
if mibBuilder.loadTexts: ipmSlave02EmdTemperatureTooLow.setDescription('WARNING: The Slave02 emd Temperature Too Low.')
ipmSlave02EmdHumidityNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,67))
if mibBuilder.loadTexts: ipmSlave02EmdHumidityNotHigh.setDescription('INFORMATION: The Slave02 emd Humidity Not High.')
ipmSlave02EmdHumidityTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,68))
if mibBuilder.loadTexts: ipmSlave02EmdHumidityTooHigh.setDescription('WARNING: The Slave02 emd Humidity Too High.')
ipmSlave02EmdHumidityNotLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,69))
if mibBuilder.loadTexts: ipmSlave02EmdHumidityNotLow.setDescription('INFORMATION: The Slave02 emd Humidity Not Low.')
ipmSlave02EmdHumidityTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,70))
if mibBuilder.loadTexts: ipmSlave02EmdHumidityTooLow.setDescription('WARNING: The Slave02 emd Humidity Too Low.')
ipmSlave02EmdAlarm1Normal = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,71))
if mibBuilder.loadTexts: ipmSlave02EmdAlarm1Normal.setDescription('INFORMATION: The Slave02 emd Alarm1 Normal.')
ipmSlave02EmdAlarm1Active = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,72))
if mibBuilder.loadTexts: ipmSlave02EmdAlarm1Active.setDescription('WARNING: The Slave02 emd Alarm1 Active.')
ipmSlave02EmdAlarm2Normal = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,73))
if mibBuilder.loadTexts: ipmSlave02EmdAlarm2Normal.setDescription('INFORMATION: The Slave02 emd Alarm2 Normal.')
ipmSlave02EmdAlarm2Active = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,74))
if mibBuilder.loadTexts: ipmSlave02EmdAlarm2Active.setDescription('WARNING: The Slave02 emd Alarm2 Active.')
ipmSlave02OutletCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,75))
if mibBuilder.loadTexts: ipmSlave02OutletCurrentOverTh.setDescription('WARNING: The Slave02 Outlet Current over threshold.')
ipmSlave03Inlet01OverHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,76))
if mibBuilder.loadTexts: ipmSlave03Inlet01OverHigh.setDescription('CRITICAL: The Slave03 input01 voltage over high threshold.')
ipmSlave03Inlet01NotOverHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,77))
if mibBuilder.loadTexts: ipmSlave03Inlet01NotOverHigh.setDescription('CRITICAL: The Slave03 input01 voltage Not over high threshold.')
ipmSlave03Inlet02OverHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,78))
if mibBuilder.loadTexts: ipmSlave03Inlet02OverHigh.setDescription('CRITICAL: The Slave03 input02 voltage over high threshold.')
ipmSlave03Inlet02NotOverHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,79))
if mibBuilder.loadTexts: ipmSlave03Inlet02NotOverHigh.setDescription('CRITICAL: The Slave03 input02 voltage Not over high threshold.')
ipmSlave03Inlet01UnderLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,80))
if mibBuilder.loadTexts: ipmSlave03Inlet01UnderLow.setDescription('CRITICAL: The Slave03 input01 voltage under low threshold.')
ipmSlave03Inlet01NotUnderLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,81))
if mibBuilder.loadTexts: ipmSlave03Inlet01NotUnderLow.setDescription('CRITICAL: The Slave03 input01 voltage Not under low threshold.')
ipmSlave03Inlet02UnderLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,82))
if mibBuilder.loadTexts: ipmSlave03Inlet02UnderLow.setDescription('CRITICAL: The Slave03 input02 voltage under low threshold.')
ipmSlave03Inlet02NotUnderLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,83))
if mibBuilder.loadTexts: ipmSlave03Inlet02NotUnderLow.setDescription('CRITICAL: The Slave03 input02 voltage Not under low threshold.')
ipmSlave03Inlet01CurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,84))
if mibBuilder.loadTexts: ipmSlave03Inlet01CurrentOverTh.setDescription('CRITICAL: The Slave03 input01 current over high threshold.')
ipmSlave03Inlet01NotCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,85))
if mibBuilder.loadTexts: ipmSlave03Inlet01NotCurrentOverTh.setDescription('CRITICAL: The Slave03 input01 current not over high threshold.')
ipmSlave03Inlet02CurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,86))
if mibBuilder.loadTexts: ipmSlave03Inlet02CurrentOverTh.setDescription('CRITICAL: The Slave03 input02 current over high threshold.')
ipmSlave03Inlet02NotCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,87))
if mibBuilder.loadTexts: ipmSlave03Inlet02NotCurrentOverTh.setDescription('CRITICAL: The Slave03 input02 current not over high threshold.')
ipmSlave03EmdTemperatureNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,88))
if mibBuilder.loadTexts: ipmSlave03EmdTemperatureNotHigh.setDescription('INFORMATION: The Slave03 emd Temperature Not High.')
ipmSlave03EmdTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,89))
if mibBuilder.loadTexts: ipmSlave03EmdTemperatureTooHigh.setDescription('WARNING: The Slave03 emd Temperature Too High.')
ipmSlave03EmdTemperatureNotLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,90))
if mibBuilder.loadTexts: ipmSlave03EmdTemperatureNotLow.setDescription('INFORMATION: The Slave03 emd Temperature Not Low.')
ipmSlave03EmdTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,91))
if mibBuilder.loadTexts: ipmSlave03EmdTemperatureTooLow.setDescription('WARNING: The Slave03 emd Temperature Too Low.')
ipmSlave03EmdHumidityNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,92))
if mibBuilder.loadTexts: ipmSlave03EmdHumidityNotHigh.setDescription('INFORMATION: The Slave03 emd Humidity Not High.')
ipmSlave03EmdHumidityTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,93))
if mibBuilder.loadTexts: ipmSlave03EmdHumidityTooHigh.setDescription('WARNING: The Slave03 emd Humidity Too High.')
ipmSlave03EmdHumidityNotLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,94))
if mibBuilder.loadTexts: ipmSlave03EmdHumidityNotLow.setDescription('INFORMATION: The Slave03 emd Humidity Not Low.')
ipmSlave03EmdHumidityTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,95))
if mibBuilder.loadTexts: ipmSlave03EmdHumidityTooLow.setDescription('WARNING: The Slave03 emd Humidity Too Low.')
ipmSlave03EmdAlarm1Normal = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,96))
if mibBuilder.loadTexts: ipmSlave03EmdAlarm1Normal.setDescription('INFORMATION: The Slave03 emd Alarm1 Normal.')
ipmSlave03EmdAlarm1Active = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,97))
if mibBuilder.loadTexts: ipmSlave03EmdAlarm1Active.setDescription('WARNING: The Slave03 emd Alarm1 Active.')
ipmSlave03EmdAlarm2Normal = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,98))
if mibBuilder.loadTexts: ipmSlave03EmdAlarm2Normal.setDescription('INFORMATION: The Slave03 emd Alarm2 Normal.')
ipmSlave03EmdAlarm2Active = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,99))
if mibBuilder.loadTexts: ipmSlave03EmdAlarm2Active.setDescription('WARNING: The Slave03 emd Alarm2 Active.')
ipmSlave03OutletCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,100))
if mibBuilder.loadTexts: ipmSlave03OutletCurrentOverTh.setDescription('WARNING: The Slave03 Outlet Current over threshold.')
ipmSlave04Inlet01OverHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,101))
if mibBuilder.loadTexts: ipmSlave04Inlet01OverHigh.setDescription('CRITICAL: The Slave04 input01 voltage over high threshold.')
ipmSlave04Inlet01NotOverHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,102))
if mibBuilder.loadTexts: ipmSlave04Inlet01NotOverHigh.setDescription('CRITICAL: The Slave04 input01 voltage Not over high threshold.')
ipmSlave04Inlet02OverHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,103))
if mibBuilder.loadTexts: ipmSlave04Inlet02OverHigh.setDescription('CRITICAL: The Slave04 input02 voltage over high threshold.')
ipmSlave04Inlet02NotOverHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,104))
if mibBuilder.loadTexts: ipmSlave04Inlet02NotOverHigh.setDescription('CRITICAL: The Slave04 input02 voltage Not over high threshold.')
ipmSlave04Inlet01UnderLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,105))
if mibBuilder.loadTexts: ipmSlave04Inlet01UnderLow.setDescription('CRITICAL: The Slave04 input01 voltage under low threshold.')
ipmSlave04Inlet01NotUnderLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,106))
if mibBuilder.loadTexts: ipmSlave04Inlet01NotUnderLow.setDescription('CRITICAL: The Slave04 input01 voltage Not under low threshold.')
ipmSlave04Inlet02UnderLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,107))
if mibBuilder.loadTexts: ipmSlave04Inlet02UnderLow.setDescription('CRITICAL: The Slave04 input02 voltage under low threshold.')
ipmSlave04Inlet02NotUnderLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,108))
if mibBuilder.loadTexts: ipmSlave04Inlet02NotUnderLow.setDescription('CRITICAL: The Slave04 input02 voltage Not under low threshold.')
ipmSlave04Inlet01CurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,109))
if mibBuilder.loadTexts: ipmSlave04Inlet01CurrentOverTh.setDescription('CRITICAL: The Slave04 input01 current over high threshold.')
ipmSlave04Inlet01NotCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,110))
if mibBuilder.loadTexts: ipmSlave04Inlet01NotCurrentOverTh.setDescription('CRITICAL: The Slave04 input01 current not over high threshold.')
ipmSlave04Inlet02CurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,111))
if mibBuilder.loadTexts: ipmSlave04Inlet02CurrentOverTh.setDescription('CRITICAL: The Slave04 input02 current over high threshold.')
ipmSlave04Inlet02NotCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,112))
if mibBuilder.loadTexts: ipmSlave04Inlet02NotCurrentOverTh.setDescription('CRITICAL: The Slave04 input02 current not over high threshold.')
ipmSlave04EmdTemperatureNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,113))
if mibBuilder.loadTexts: ipmSlave04EmdTemperatureNotHigh.setDescription('INFORMATION: The Slave04 emd Temperature Not High.')
ipmSlave04EmdTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,114))
if mibBuilder.loadTexts: ipmSlave04EmdTemperatureTooHigh.setDescription('WARNING: The Slave04 emd Temperature Too High.')
ipmSlave04EmdTemperatureNotLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,115))
if mibBuilder.loadTexts: ipmSlave04EmdTemperatureNotLow.setDescription('INFORMATION: The Slave04 emd Temperature Not Low.')
ipmSlave04EmdTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,116))
if mibBuilder.loadTexts: ipmSlave04EmdTemperatureTooLow.setDescription('WARNING: The Slave04 emd Temperature Too Low.')
ipmSlave04EmdHumidityNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,117))
if mibBuilder.loadTexts: ipmSlave04EmdHumidityNotHigh.setDescription('INFORMATION: The Slave04 emd Humidity Not High.')
ipmSlave04EmdHumidityTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,118))
if mibBuilder.loadTexts: ipmSlave04EmdHumidityTooHigh.setDescription('WARNING: The Slave04 emd Humidity Too High.')
ipmSlave04EmdHumidityNotLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,119))
if mibBuilder.loadTexts: ipmSlave04EmdHumidityNotLow.setDescription('INFORMATION: The Slave04 emd Humidity Not Low.')
ipmSlave04EmdHumidityTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,120))
if mibBuilder.loadTexts: ipmSlave04EmdHumidityTooLow.setDescription('WARNING: The Slave04 emd Humidity Too Low.')
ipmSlave04EmdAlarm1Normal = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,121))
if mibBuilder.loadTexts: ipmSlave04EmdAlarm1Normal.setDescription('INFORMATION: The Slave04 emd Alarm1 Normal.')
ipmSlave04EmdAlarm1Active = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,122))
if mibBuilder.loadTexts: ipmSlave04EmdAlarm1Active.setDescription('WARNING: The Slave04 emd Alarm1 Active.')
ipmSlave04EmdAlarm2Normal = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,123))
if mibBuilder.loadTexts: ipmSlave04EmdAlarm2Normal.setDescription('INFORMATION: The Slave04 emd Alarm2 Normal.')
ipmSlave04EmdAlarm2Active = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,124))
if mibBuilder.loadTexts: ipmSlave04EmdAlarm2Active.setDescription('WARNING: The Slave04 emd Alarm2 Active.')
ipmSlave04OutletCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,125))
if mibBuilder.loadTexts: ipmSlave04OutletCurrentOverTh.setDescription('WARNING: The Slave04 Outlet Current over threshold.')
ipmSlave05Inlet01OverHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,126))
if mibBuilder.loadTexts: ipmSlave05Inlet01OverHigh.setDescription('CRITICAL: The Slave05 input01 voltage over high threshold.')
ipmSlave05Inlet01NotOverHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,127))
if mibBuilder.loadTexts: ipmSlave05Inlet01NotOverHigh.setDescription('CRITICAL: The Slave05 input01 voltage Not over high threshold.')
ipmSlave05Inlet02OverHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,128))
if mibBuilder.loadTexts: ipmSlave05Inlet02OverHigh.setDescription('CRITICAL: The Slave05 input02 voltage over high threshold.')
ipmSlave05Inlet02NotOverHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,129))
if mibBuilder.loadTexts: ipmSlave05Inlet02NotOverHigh.setDescription('CRITICAL: The Slave05 input02 voltage Not over high threshold.')
ipmSlave05Inlet01UnderLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,130))
if mibBuilder.loadTexts: ipmSlave05Inlet01UnderLow.setDescription('CRITICAL: The Slave05 input01 voltage under low threshold.')
ipmSlave05Inlet01NotUnderLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,131))
if mibBuilder.loadTexts: ipmSlave05Inlet01NotUnderLow.setDescription('CRITICAL: The Slave05 input01 voltage Not under low threshold.')
ipmSlave05Inlet02UnderLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,132))
if mibBuilder.loadTexts: ipmSlave05Inlet02UnderLow.setDescription('CRITICAL: The Slave05 input02 voltage under low threshold.')
ipmSlave05Inlet02NotUnderLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,133))
if mibBuilder.loadTexts: ipmSlave05Inlet02NotUnderLow.setDescription('CRITICAL: The Slave05 input02 voltage Not under low threshold.')
ipmSlave05Inlet01CurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,134))
if mibBuilder.loadTexts: ipmSlave05Inlet01CurrentOverTh.setDescription('CRITICAL: The Slave05 input01 current over high threshold.')
ipmSlave05Inlet01NotCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,135))
if mibBuilder.loadTexts: ipmSlave05Inlet01NotCurrentOverTh.setDescription('CRITICAL: The Slave05 input01 current not over high threshold.')
ipmSlave05Inlet02CurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,136))
if mibBuilder.loadTexts: ipmSlave05Inlet02CurrentOverTh.setDescription('CRITICAL: The Slave05 input02 current over high threshold.')
ipmSlave05Inlet02NotCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,137))
if mibBuilder.loadTexts: ipmSlave05Inlet02NotCurrentOverTh.setDescription('CRITICAL: The Slave05 input02 current not over high threshold.')
ipmSlave05EmdTemperatureNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,138))
if mibBuilder.loadTexts: ipmSlave05EmdTemperatureNotHigh.setDescription('INFORMATION: The Slave05 emd Temperature Not High.')
ipmSlave05EmdTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,139))
if mibBuilder.loadTexts: ipmSlave05EmdTemperatureTooHigh.setDescription('WARNING: The Slave05 emd Temperature Too High.')
ipmSlave05EmdTemperatureNotLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,140))
if mibBuilder.loadTexts: ipmSlave05EmdTemperatureNotLow.setDescription('INFORMATION: The Slave05 emd Temperature Not Low.')
ipmSlave05EmdTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,141))
if mibBuilder.loadTexts: ipmSlave05EmdTemperatureTooLow.setDescription('WARNING: The Slave05 emd Temperature Too Low.')
ipmSlave05EmdHumidityNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,142))
if mibBuilder.loadTexts: ipmSlave05EmdHumidityNotHigh.setDescription('INFORMATION: The Slave05 emd Humidity Not High.')
ipmSlave05EmdHumidityTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,143))
if mibBuilder.loadTexts: ipmSlave05EmdHumidityTooHigh.setDescription('WARNING: The Slave05 emd Humidity Too High.')
ipmSlave05EmdHumidityNotLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,144))
if mibBuilder.loadTexts: ipmSlave05EmdHumidityNotLow.setDescription('INFORMATION: The Slave05 emd Humidity Not Low.')
ipmSlave05EmdHumidityTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,145))
if mibBuilder.loadTexts: ipmSlave05EmdHumidityTooLow.setDescription('WARNING: The Slave05 emd Humidity Too Low.')
ipmSlave05EmdAlarm1Normal = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,146))
if mibBuilder.loadTexts: ipmSlave05EmdAlarm1Normal.setDescription('INFORMATION: The Slave05 emd Alarm1 Normal.')
ipmSlave05EmdAlarm1Active = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,147))
if mibBuilder.loadTexts: ipmSlave05EmdAlarm1Active.setDescription('WARNING: The Slave05 emd Alarm1 Active.')
ipmSlave05EmdAlarm2Normal = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,148))
if mibBuilder.loadTexts: ipmSlave05EmdAlarm2Normal.setDescription('INFORMATION: The Slave05 emd Alarm2 Normal.')
ipmSlave05EmdAlarm2Active = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,149))
if mibBuilder.loadTexts: ipmSlave05EmdAlarm2Active.setDescription('WARNING: The Slave05 emd Alarm2 Active.')
ipmSlave05OutletCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 4, 2, 2) + (0,150))
if mibBuilder.loadTexts: ipmSlave05OutletCurrentOverTh.setDescription('WARNING: The Slave05 Outlet Current over threshold.')
mibBuilder.exportSymbols("IPOMANII-MIB", outletStatusKwatt=outletStatusKwatt, slaveOutletWatt11=slaveOutletWatt11, slaveOutletName06=slaveOutletName06, slaveOutletLocation08=slaveOutletLocation08, ipmSlave02Inlet02NotOverHigh=ipmSlave02Inlet02NotOverHigh, ipmSlave03EmdTemperatureNotHigh=ipmSlave03EmdTemperatureNotHigh, slaveOutletActionIndex=slaveOutletActionIndex, ipmEnvEmdStatusEmdType=ipmEnvEmdStatusEmdType, slaveOutletName01=slaveOutletName01, slaveOutletLocation07=slaveOutletLocation07, ipmSlaveStateTable=ipmSlaveStateTable, ipmSlave01Inlet02NotUnderLow=ipmSlave01Inlet02NotUnderLow, ipmSlave02EmdAlarm1Active=ipmSlave02EmdAlarm1Active, ipmEnvEmdStatusAlarm1=ipmEnvEmdStatusAlarm1, slaveOutletName05=slaveOutletName05, ipmSlave01EmdHumidityNotHigh=ipmSlave01EmdHumidityNotHigh, ipmSlave05EmdHumidityNotLow=ipmSlave05EmdHumidityNotLow, ipmSlave04Inlet01CurrentOverTh=ipmSlave04Inlet01CurrentOverTh, ipmAgentNetworkTftpControl=ipmAgentNetworkTftpControl, ipmSlave03Inlet02OverHigh=ipmSlave03Inlet02OverHigh, inletSlaveStatusFrequency=inletSlaveStatusFrequency, slaveOutletWatt12=slaveOutletWatt12, ipmDeviceOutletConfigEntry=ipmDeviceOutletConfigEntry, slaveOutletWatt01=slaveOutletWatt01, ipmInletCurrentTooHigh=ipmInletCurrentTooHigh, receiverDescription=receiverDescription, ipmSlave02EmdAlarm1Normal=ipmSlave02EmdAlarm1Normal, slaveOutletCurrent02=slaveOutletCurrent02, slaveOutletAction08=slaveOutletAction08, slaveOutletWatt09=slaveOutletWatt09, slaveOutletKwatt02=slaveOutletKwatt02, ccOutConfigDesc=ccOutConfigDesc, inletSlaveStatusKwatt=inletSlaveStatusKwatt, ipmSlave05Inlet01UnderLow=ipmSlave05Inlet01UnderLow, ipmAgentTrapRetryTime=ipmAgentTrapRetryTime, slaveOutletLocation06=slaveOutletLocation06, ipmSlave04EmdAlarm1Normal=ipmSlave04EmdAlarm1Normal, slaveOutletName12=slaveOutletName12, ipmSlave03Inlet01CurrentOverTh=ipmSlave03Inlet01CurrentOverTh, ipmEnvEmdConfigAlarm2=ipmEnvEmdConfigAlarm2, slaveOutletName07=slaveOutletName07, inletConfigFrequencyLow=inletConfigFrequencyLow, ipmSlave01Inlet01CurrentOverTh=ipmSlave01Inlet01CurrentOverTh, ipmSlaveDeviceOutletCurrThEntry=ipmSlaveDeviceOutletCurrThEntry, ipmSlaveDeviceOutletActionEntry=ipmSlaveDeviceOutletActionEntry, ipmDeviceCcOut=ipmDeviceCcOut, ccOutStatusIndex=ccOutStatusIndex, ipmEnvEmdConfigHumiOffset=ipmEnvEmdConfigHumiOffset, ipmIdentName=ipmIdentName, inletSlaveStatusCurrent=inletSlaveStatusCurrent, ipmSlave01EmdTemperatureNotHigh=ipmSlave01EmdTemperatureNotHigh, ccOutConfigOpenDelay=ccOutConfigOpenDelay, ipmSlave03EmdAlarm1Active=ipmSlave03EmdAlarm1Active, ipmDeviceInlet=ipmDeviceInlet, ipmSlave05EmdAlarm1Active=ipmSlave05EmdAlarm1Active, slaveOutletOffTime11=slaveOutletOffTime11, ipmInletFrequencyTooLow=ipmInletFrequencyTooLow, ingrasys=ingrasys, ipmDeviceOutletControlTable=ipmDeviceOutletControlTable, inletSlaveStatusCurrent2=inletSlaveStatusCurrent2, ipmSlave03Inlet02UnderLow=ipmSlave03Inlet02UnderLow, slaveOutletCurrTh10=slaveOutletCurrTh10, inletConfigVoltageLow=inletConfigVoltageLow, slaveOutletKwattIndex=slaveOutletKwattIndex, ipmDeviceInletConfigEntry=ipmDeviceInletConfigEntry, ipmSlave01Inlet01NotUnderLow=ipmSlave01Inlet01NotUnderLow, ipmEnvEmdConfigAlarm1Name=ipmEnvEmdConfigAlarm1Name, ipmSlave01Inlet01NotOverHigh=ipmSlave01Inlet01NotOverHigh, pduAgent=pduAgent, ipmSlaveDeviceOutletOffTimeTable=ipmSlaveDeviceOutletOffTimeTable, slaveOutletKwatt07=slaveOutletKwatt07, slaveOutletCurrTh12=slaveOutletCurrTh12, slaveOutletAction12=slaveOutletAction12, ipmSlave02Inlet01NotUnderLow=ipmSlave02Inlet01NotUnderLow, iPoManII=iPoManII, ipmSlave02EmdAlarm2Normal=ipmSlave02EmdAlarm2Normal, slaveOutletCurrTh06=slaveOutletCurrTh06, ipmAgentAccessControlEntry=ipmAgentAccessControlEntry, ipmSlaveInletConfig=ipmSlaveInletConfig, ipmIdentManufacturer=ipmIdentManufacturer, slaveOutletAction01=slaveOutletAction01, ipmEnvEmdConfigTempOffset=ipmEnvEmdConfigTempOffset, ipmSlave03Inlet02NotOverHigh=ipmSlave03Inlet02NotOverHigh, ipmEmdAlarm1Active=ipmEmdAlarm1Active, ipmSlave04Inlet01UnderLow=ipmSlave04Inlet01UnderLow, ipmIdentModel=ipmIdentModel, ipmSlave01Inlet02NotCurrentOverTh=ipmSlave01Inlet02NotCurrentOverTh, ipmSlaveDeviceOutletActionTable=ipmSlaveDeviceOutletActionTable, ipmSlave=ipmSlave, slaveOutletKwatt09=slaveOutletKwatt09, ipmSlave03OutletCurrentOverTh=ipmSlave03OutletCurrentOverTh, ipmEnvEmdConfigHumi=ipmEnvEmdConfigHumi, ipmAgentNetworkTelnet=ipmAgentNetworkTelnet, pduAgentDataLogInterval=pduAgentDataLogInterval, ipmAgentTrapRetryCount=ipmAgentTrapRetryCount, ipmSlave05EmdTemperatureNotLow=ipmSlave05EmdTemperatureNotLow, slaveOutletWatt10=slaveOutletWatt10, slaveOutletKwatt10=slaveOutletKwatt10, ipmDeviceInletStatusEntry=ipmDeviceInletStatusEntry, ipmAgentNetworkIpGateway=ipmAgentNetworkIpGateway, ipmSlave05Inlet01NotOverHigh=ipmSlave05Inlet01NotOverHigh, outletStatusWH=outletStatusWH, ipmSlaveOutletStatus=ipmSlaveOutletStatus, ipmSlave01Inlet02OverHigh=ipmSlave01Inlet02OverHigh, ipmSlave04EmdHumidityNotHigh=ipmSlave04EmdHumidityNotHigh, slaveOutletOffTime06=slaveOutletOffTime06, slaveOutletAction06=slaveOutletAction06, ipmSlave03Inlet02NotUnderLow=ipmSlave03Inlet02NotUnderLow, ipmAgentNetworkIp=ipmAgentNetworkIp, ipmSlaveDeviceOutletCurrentTable=ipmSlaveDeviceOutletCurrentTable, slaveOutletCurrent04=slaveOutletCurrent04, ipmEmdHumidityNotHigh=ipmEmdHumidityNotHigh, ipmDevice=ipmDevice, ipmSlave03Inlet01OverHigh=ipmSlave03Inlet01OverHigh, slaveOutletOnTime10=slaveOutletOnTime10, ipmDeviceInletNumber=ipmDeviceInletNumber, slaveOutletOffTime04=slaveOutletOffTime04, ipmSlaveOutletAction=ipmSlaveOutletAction, slaveOutletKwatt03=slaveOutletKwatt03, ipmAgentSnmpPort=ipmAgentSnmpPort, outletConfigLocation=outletConfigLocation, trapsIndex=trapsIndex, slaveOutletKwatt06=slaveOutletKwatt06, ipmSlaveState=ipmSlaveState, ipmSlave03Inlet01NotUnderLow=ipmSlave03Inlet01NotUnderLow, ipmSlave02Inlet01NotCurrentOverTh=ipmSlave02Inlet01NotCurrentOverTh, ipmAgentTrap=ipmAgentTrap, ipmSlave02Inlet01OverHigh=ipmSlave02Inlet01OverHigh, receiverSeverityLevel=receiverSeverityLevel, ipmDeviceCcOutControlEntry=ipmDeviceCcOutControlEntry, slaveOutletOffTime02=slaveOutletOffTime02, ipmSlave03EmdHumidityTooHigh=ipmSlave03EmdHumidityTooHigh, ipmSlave03Inlet01NotCurrentOverTh=ipmSlave03Inlet01NotCurrentOverTh, slaveOutletAction05=slaveOutletAction05, ipmEnvEmd=ipmEnvEmd, slaveOutletWatt05=slaveOutletWatt05, ipmIdent=ipmIdent, ipmSlave02Inlet02NotUnderLow=ipmSlave02Inlet02NotUnderLow, inletStatusVoltage=inletStatusVoltage, slaveOutletCurrent08=slaveOutletCurrent08, ipmAgentNetworkSnmp=ipmAgentNetworkSnmp, ipmDeviceOutlet=ipmDeviceOutlet, ipmEnvEmdConfigHumiName=ipmEnvEmdConfigHumiName, ipmSlave04Inlet02UnderLow=ipmSlave04Inlet02UnderLow, ipmEmdTemperatureNotLow=ipmEmdTemperatureNotLow, ipmSlave05Inlet01OverHigh=ipmSlave05Inlet01OverHigh, ipmEmdTemperatureTooLow=ipmEmdTemperatureTooLow, ipmAgentAccessControlTable=ipmAgentAccessControlTable, product=product, trapsReceiverAddr=trapsReceiverAddr, slaveOutletWatt06=slaveOutletWatt06, ipmEnvEmdConfigTempLowSetPoint=ipmEnvEmdConfigTempLowSetPoint, ipmSlave05EmdTemperatureTooLow=ipmSlave05EmdTemperatureTooLow, slaveOutletAction02=slaveOutletAction02, ipmSlave04Inlet01NotOverHigh=ipmSlave04Inlet01NotOverHigh, ipmDeviceOutletConfigTable=ipmDeviceOutletConfigTable, slaveOutletCurrTh03=slaveOutletCurrTh03, ipmEnvEmdStatus=ipmEnvEmdStatus, ipmEmdAlarm2Normal=ipmEmdAlarm2Normal, ipmSlave04EmdHumidityTooHigh=ipmSlave04EmdHumidityTooHigh, outletControlIndex=outletControlIndex, ipmAgentControlDefault=ipmAgentControlDefault, slaveOutletOnTime09=slaveOutletOnTime09, ipmSlave05EmdAlarm2Active=ipmSlave05EmdAlarm2Active, ipmSlave04EmdTemperatureTooLow=ipmSlave04EmdTemperatureTooLow, outletConfigCurrentHighAction=outletConfigCurrentHighAction, slaveOutletOnTime06=slaveOutletOnTime06, ipmSlave01Inlet01UnderLow=ipmSlave01Inlet01UnderLow, slaveOutletLocation02=slaveOutletLocation02, ipmDeviceOutletNumber=ipmDeviceOutletNumber, ipmAgentNetwork=ipmAgentNetwork, outletControlControl=outletControlControl, ipmDeviceOutletStatusEntry=ipmDeviceOutletStatusEntry, slaveOutletKwatt05=slaveOutletKwatt05, ipmAgentControl=ipmAgentControl, ipmSlaveDeviceOutletKwattEntry=ipmSlaveDeviceOutletKwattEntry, ipmSlave03EmdAlarm2Normal=ipmSlave03EmdAlarm2Normal, ccOutStatusStatus=ccOutStatusStatus, slaveOutletOffTime05=slaveOutletOffTime05, ipmOutletStateChanged=ipmOutletStateChanged, outletStatusIndex=outletStatusIndex, slaveOutletCurrent10=slaveOutletCurrent10, ipmEnvEmdConfigAlarm1=ipmEnvEmdConfigAlarm1, ipmSlave01Inlet02UnderLow=ipmSlave01Inlet02UnderLow, ipmEnvEmdConfigHumiLowStatus=ipmEnvEmdConfigHumiLowStatus, slaveOutletAction11=slaveOutletAction11, slaveOutletOnTime02=slaveOutletOnTime02, ipmDeviceslaveInletConfigEntry=ipmDeviceslaveInletConfigEntry, inletConfigDesc=inletConfigDesc, ipmEmdHumidityTooHigh=ipmEmdHumidityTooHigh, ipmDeviceCcOutStatusEntry=ipmDeviceCcOutStatusEntry, slaveOutletKwatt04=slaveOutletKwatt04, ipmSlave04Inlet01OverHigh=ipmSlave04Inlet01OverHigh, ipmAgentNetworkDhcpControl=ipmAgentNetworkDhcpControl, slaveOutletName11=slaveOutletName11, slaveOutletAction07=slaveOutletAction07, slaveOutletLocation01=slaveOutletLocation01, ipmEnvEmdStatusTemperature=ipmEnvEmdStatusTemperature, ipmSlaveDeviceOutletOnTimeTable=ipmSlaveDeviceOutletOnTimeTable, slaveOutletCurrent01=slaveOutletCurrent01, ipmSlave01EmdTemperatureTooHigh=ipmSlave01EmdTemperatureTooHigh, ipmEnvEmdConfigTempName=ipmEnvEmdConfigTempName, ipmSlave02EmdHumidityNotLow=ipmSlave02EmdHumidityNotLow, ipmInletVoltageTooLow=ipmInletVoltageTooLow, ccOutControlControl=ccOutControlControl, ipmSlave02Inlet02UnderLow=ipmSlave02Inlet02UnderLow, slaveOutletName09=slaveOutletName09, ipmAgentNtpIpAddress=ipmAgentNtpIpAddress, ipmAgentDayLightSaving=ipmAgentDayLightSaving, inletConfigIndex=inletConfigIndex, ipmEnvEmdConfigTempLowStatus=ipmEnvEmdConfigTempLowStatus, slaveOutletLocationIndex=slaveOutletLocationIndex, ipmAgentControlRestart=ipmAgentControlRestart, receiverNmsType=receiverNmsType, ipmSlave03EmdHumidityTooLow=ipmSlave03EmdHumidityTooLow, ipmAgentTelnetControl=ipmAgentTelnetControl, slaveOutletKwatt08=slaveOutletKwatt08, ipmInletFrequencyTooHigh=ipmInletFrequencyTooHigh, slaveOutletCurrent03=slaveOutletCurrent03, inletSlaveStatusVoltage=inletSlaveStatusVoltage, ipmSlave05Inlet02NotOverHigh=ipmSlave05Inlet02NotOverHigh, ipmSlave05OutletCurrentOverTh=ipmSlave05OutletCurrentOverTh, ipmAgentHttpControl=ipmAgentHttpControl, receiverCommunityString=receiverCommunityString, ipmSlaveInlet=ipmSlaveInlet, slaveOutletLocation03=slaveOutletLocation03, ipmSlave04EmdTemperatureNotLow=ipmSlave04EmdTemperatureNotLow, ipmSlave04Inlet02NotCurrentOverTh=ipmSlave04Inlet02NotCurrentOverTh, ipmSlave05Inlet02CurrentOverTh=ipmSlave05Inlet02CurrentOverTh, ipmEnvEmdStatusAlarm2=ipmEnvEmdStatusAlarm2, ipmSlave05EmdAlarm2Normal=ipmSlave05EmdAlarm2Normal, ipmSlave03Inlet01NotOverHigh=ipmSlave03Inlet01NotOverHigh, ipmAgentTelnetPort=ipmAgentTelnetPort, inletStatusFrequency=inletStatusFrequency, ipmSlave02EmdTemperatureNotLow=ipmSlave02EmdTemperatureNotLow, ipmSlaveInletStatus=ipmSlaveInletStatus, slaveOutletWattIndex=slaveOutletWattIndex, ipmEmdAlarm2Active=ipmEmdAlarm2Active, ipmSlave04EmdHumidityNotLow=ipmSlave04EmdHumidityNotLow, ipmAgentMibVersion=ipmAgentMibVersion, ipmSlave02EmdTemperatureNotHigh=ipmSlave02EmdTemperatureNotHigh, ipmSlave01OutletCurrentOverTh=ipmSlave01OutletCurrentOverTh, slaveOutletCurrTh11=slaveOutletCurrTh11, ipmEnvEmdConfigAlarm1Type=ipmEnvEmdConfigAlarm1Type, ipmSlave04Inlet02CurrentOverTh=ipmSlave04Inlet02CurrentOverTh, ipmDeviceSlaveInletStatusTable=ipmDeviceSlaveInletStatusTable, slaveOutletOffTime10=slaveOutletOffTime10, ipmSlave03Inlet02CurrentOverTh=ipmSlave03Inlet02CurrentOverTh, ipmSlaveOutlet=ipmSlaveOutlet, slaveOutletAction09=slaveOutletAction09, ipmSlave01EmdAlarm1Normal=ipmSlave01EmdAlarm1Normal, ipmSlave01Inlet01NotCurrentOverTh=ipmSlave01Inlet01NotCurrentOverTh, outletConfigCurrentHigh=outletConfigCurrentHigh, outletStatusStateTime=outletStatusStateTime)
mibBuilder.exportSymbols("IPOMANII-MIB", ipmSlaveDeviceOutletNameTable=ipmSlaveDeviceOutletNameTable, ipmAgentHttpPort=ipmAgentHttpPort, ipmInletFrequencyNotTooHigh=ipmInletFrequencyNotTooHigh, ipmSlave02Inlet02NotCurrentOverTh=ipmSlave02Inlet02NotCurrentOverTh, ipmSlave05Inlet01CurrentOverTh=ipmSlave05Inlet01CurrentOverTh, slaveOutletWatt03=slaveOutletWatt03, ipmEmdHumidityTooLow=ipmEmdHumidityTooLow, inletStatusCurrent=inletStatusCurrent, slaveOutletCurrTh02=slaveOutletCurrTh02, ipmSlaveDeviceOutletNameEntry=ipmSlaveDeviceOutletNameEntry, slaveOutletOnTime12=slaveOutletOnTime12, slaveOutletWatt07=slaveOutletWatt07, ipmSlave05Inlet01NotUnderLow=ipmSlave05Inlet01NotUnderLow, slaveOutletCurrent09=slaveOutletCurrent09, ipmSlave05EmdHumidityTooHigh=ipmSlave05EmdHumidityTooHigh, ipmAgentTimeDate=ipmAgentTimeDate, slaveOutletOnTime03=slaveOutletOnTime03, ipmSlave05EmdTemperatureNotHigh=ipmSlave05EmdTemperatureNotHigh, slaveInletConfigIndex=slaveInletConfigIndex, ipmDeviceInletConfigTable=ipmDeviceInletConfigTable, slaveOutletOffTime03=slaveOutletOffTime03, ipmInletFrequencyNotTooLow=ipmInletFrequencyNotTooLow, slaveOutletOffTime09=slaveOutletOffTime09, ipmSlave02EmdTemperatureTooLow=ipmSlave02EmdTemperatureTooLow, ipmSlave04Inlet02NotUnderLow=ipmSlave04Inlet02NotUnderLow, ipmSlave05Inlet02UnderLow=ipmSlave05Inlet02UnderLow, slaveOutletCurrTh05=slaveOutletCurrTh05, slaveOutletOnTimeIndex=slaveOutletOnTimeIndex, inletConfigfrequencyHighAction=inletConfigfrequencyHighAction, ipmSlave04Inlet01NotCurrentOverTh=ipmSlave04Inlet01NotCurrentOverTh, inletConfigVoltageLowAction=inletConfigVoltageLowAction, ccOutConfigEventAction=ccOutConfigEventAction, ipmDeviceOutletStatusTable=ipmDeviceOutletStatusTable, ipmAgentConfig=ipmAgentConfig, slaveOutletOnTime05=slaveOutletOnTime05, slaveOutletLocation11=slaveOutletLocation11, slaveOutletKwatt01=slaveOutletKwatt01, outletConfigOffDelay=outletConfigOffDelay, ipmAgentTime=ipmAgentTime, ipmSlaveDeviceOutletOffTimeEntry=ipmSlaveDeviceOutletOffTimeEntry, ccOutConfigCloseDelay=ccOutConfigCloseDelay, ipmSlave01EmdAlarm2Normal=ipmSlave01EmdAlarm2Normal, ipmSlave01EmdHumidityNotLow=ipmSlave01EmdHumidityNotLow, ipmSlave01Inlet02NotOverHigh=ipmSlave01Inlet02NotOverHigh, ipmSlave04EmdAlarm2Normal=ipmSlave04EmdAlarm2Normal, ipmAgentNetworkHttp=ipmAgentNetworkHttp, ipmSlaveDeviceOutletLocationEntry=ipmSlaveDeviceOutletLocationEntry, ipmSlaveDeviceOutletCurrThTable=ipmSlaveDeviceOutletCurrThTable, outletConfigDesc=outletConfigDesc, inletSlaveStatusKwatt2=inletSlaveStatusKwatt2, ipmOutletCurrentNotTooHigh=ipmOutletCurrentNotTooHigh, ipmAgentTimeTime=ipmAgentTimeTime, slaveOutletCurrTh01=slaveOutletCurrTh01, ipmSlave05EmdAlarm1Normal=ipmSlave05EmdAlarm1Normal, ipmInletVoltageNotTooHigh=ipmInletVoltageNotTooHigh, ipmObjects=ipmObjects, slaveOutletNameIndex=slaveOutletNameIndex, accessControlAddr=accessControlAddr, ipmSlave03EmdAlarm1Normal=ipmSlave03EmdAlarm1Normal, ipmSlave02Inlet02OverHigh=ipmSlave02Inlet02OverHigh, inletConfigVoltageHigh=inletConfigVoltageHigh, ipmSlave02Inlet01CurrentOverTh=ipmSlave02Inlet01CurrentOverTh, outletStatusTimeToGo=outletStatusTimeToGo, ipmDeviceOutletControlAll=ipmDeviceOutletControlAll, accessIndex=accessIndex, ipmInletVoltageNotTooLow=ipmInletVoltageNotTooLow, ipmSlave01EmdAlarm2Active=ipmSlave01EmdAlarm2Active, ipmDeviceCcOutNumber=ipmDeviceCcOutNumber, slaveOutletName04=slaveOutletName04, ipmSlave01Inlet02CurrentOverTh=ipmSlave01Inlet02CurrentOverTh, ipmSlave02Inlet02CurrentOverTh=ipmSlave02Inlet02CurrentOverTh, ipmSlave03Inlet02NotCurrentOverTh=ipmSlave03Inlet02NotCurrentOverTh, ipmEnvEmdConfigHumiHighSetPoint=ipmEnvEmdConfigHumiHighSetPoint, ipmEmdHumidityNotLow=ipmEmdHumidityNotLow, slaveOutletOnTime07=slaveOutletOnTime07, ipmSlave03EmdTemperatureTooLow=ipmSlave03EmdTemperatureTooLow, ipmSlaveDeviceOutletOnTimeEntry=ipmSlaveDeviceOutletOnTimeEntry, slaveOutletLocation05=slaveOutletLocation05, ipmSlave02Inlet01UnderLow=ipmSlave02Inlet01UnderLow, slaveOutletWatt04=slaveOutletWatt04, ipmAgent=ipmAgent, inletConfigFrequencyHigh=inletConfigFrequencyHigh, ipmDeviceCcOutConfigEntry=ipmDeviceCcOutConfigEntry, accessControlMode=accessControlMode, slaveOutletCurrTh04=slaveOutletCurrTh04, ipmSlaveStateEntry=ipmSlaveStateEntry, ipmSlave03EmdAlarm2Active=ipmSlave03EmdAlarm2Active, ipmEmdTemperatureTooHigh=ipmEmdTemperatureTooHigh, ipmSlave01EmdTemperatureTooLow=ipmSlave01EmdTemperatureTooLow, ipmSlave01EmdHumidityTooLow=ipmSlave01EmdHumidityTooLow, ipmEnvEmdConfig=ipmEnvEmdConfig, slaveOutletAction10=slaveOutletAction10, ipmAgentNetworkPingControl=ipmAgentNetworkPingControl, ipmSlave05EmdHumidityNotHigh=ipmSlave05EmdHumidityNotHigh, ccOutStatusTimeOnState=ccOutStatusTimeOnState, ipmSlave02EmdTemperatureTooHigh=ipmSlave02EmdTemperatureTooHigh, ipmAgentLog=ipmAgentLog, ipmSlave05EmdTemperatureTooHigh=ipmSlave05EmdTemperatureTooHigh, slaveOutletCurrTh07=slaveOutletCurrTh07, slaveOutletOffTime01=slaveOutletOffTime01, ipmDeviceSlaveInletStatusEntry=ipmDeviceSlaveInletStatusEntry, slaveOutletCurrent11=slaveOutletCurrent11, ipmEnvEmdConfigEmdName=ipmEnvEmdConfigEmdName, outletConfigOnDelay=outletConfigOnDelay, inletSlaveStatusIndex=inletSlaveStatusIndex, ipmSlaveDeviceOutletWattTable=ipmSlaveDeviceOutletWattTable, slaveOutletCurrent06=slaveOutletCurrent06, ipmEmdAlarm1Normal=ipmEmdAlarm1Normal, slaveInletConfigVoltageHigh=slaveInletConfigVoltageHigh, ipmSlave05Inlet02NotCurrentOverTh=ipmSlave05Inlet02NotCurrentOverTh, ipmEnvEmdConfigEmdPresence=ipmEnvEmdConfigEmdPresence, slaveOutletOnTime11=slaveOutletOnTime11, ipmDeviceslaveInletConfigTable=ipmDeviceslaveInletConfigTable, slaveOutletLocation09=slaveOutletLocation09, slaveOutletOnTime01=slaveOutletOnTime01, ipmEnvEmdConfigHumiLowSetPoint=ipmEnvEmdConfigHumiLowSetPoint, ipmSlave05Inlet01NotCurrentOverTh=ipmSlave05Inlet01NotCurrentOverTh, ipmSlaveDeviceOutletKwattTable=ipmSlaveDeviceOutletKwattTable, slaveOutletKwatt12=slaveOutletKwatt12, slaveOutletWatt08=slaveOutletWatt08, inletConfigfrequencyLowAction=inletConfigfrequencyLowAction, ipmInletCurrentNotTooHigh=ipmInletCurrentNotTooHigh, ipmEnvEmdConfigTempHighSetPoint=ipmEnvEmdConfigTempHighSetPoint, ipmSlave04EmdAlarm2Active=ipmSlave04EmdAlarm2Active, ipmDeviceCcOutStatusTable=ipmDeviceCcOutStatusTable, ipmAgentTrapsReceiversEntry=ipmAgentTrapsReceiversEntry, ipmDeviceCcOutConfigTable=ipmDeviceCcOutConfigTable, slaveInletConfigVoltageLow=slaveInletConfigVoltageLow, slaveOutletName10=slaveOutletName10, ipmEnvEmdConfigTempHighStatus=ipmEnvEmdConfigTempHighStatus, slaveOutletName02=slaveOutletName02, ipmInletVoltageTooHigh=ipmInletVoltageTooHigh, slaveOutletCurrentIndex=slaveOutletCurrentIndex, ipmDeviceInletStatusTable=ipmDeviceInletStatusTable, slaveStateControl01=slaveStateControl01, inletStatusIndex=inletStatusIndex, slaveOutletAction03=slaveOutletAction03, ipmEnvEmdConfigAlarm2Type=ipmEnvEmdConfigAlarm2Type, ipmSlave03EmdTemperatureTooHigh=ipmSlave03EmdTemperatureTooHigh, ipmSlave03EmdHumidityNotHigh=ipmSlave03EmdHumidityNotHigh, inletStatusWH=inletStatusWH, slaveOutletName03=slaveOutletName03, outletStatusCurrent=outletStatusCurrent, ipmAgentTrapsReceiversTable=ipmAgentTrapsReceiversTable, ipmSlave02Inlet01NotOverHigh=ipmSlave02Inlet01NotOverHigh, ipmSlave02EmdHumidityTooLow=ipmSlave02EmdHumidityTooLow, slaveOutletOffTime12=slaveOutletOffTime12, ipmDeviceOutletWattReset=ipmDeviceOutletWattReset, inletSlaveStatusVoltage2=inletSlaveStatusVoltage2, slaveOutletCurrent12=slaveOutletCurrent12, ipmSlave03Inlet01UnderLow=ipmSlave03Inlet01UnderLow, ipmSlave01EmdTemperatureNotLow=ipmSlave01EmdTemperatureNotLow, ipmAgentTimerFromNtp=ipmAgentTimerFromNtp, slaveOutletCurrent05=slaveOutletCurrent05, ipmSlave02EmdHumidityNotHigh=ipmSlave02EmdHumidityNotHigh, ipmSlave04EmdAlarm1Active=ipmSlave04EmdAlarm1Active, ipmSlave03EmdHumidityNotLow=ipmSlave03EmdHumidityNotLow, slaveOutletOffTime07=slaveOutletOffTime07, slaveOutletOffTime08=slaveOutletOffTime08, inletWattReset=inletWattReset, ipmTraps=ipmTraps, slaveOutletOnTime04=slaveOutletOnTime04, ipmSlaveDeviceOutletWattEntry=ipmSlaveDeviceOutletWattEntry, slaveStateIndex=slaveStateIndex, slaveOutletAction04=slaveOutletAction04, ipmSlave05Inlet02OverHigh=ipmSlave05Inlet02OverHigh, ipmSlave03EmdTemperatureNotLow=ipmSlave03EmdTemperatureNotLow, ipmAgentNtpTimeZone=ipmAgentNtpTimeZone, slaveOutletLocation10=slaveOutletLocation10, ipmSlave01Inlet01OverHigh=ipmSlave01Inlet01OverHigh, ipmEnvEmdStatusHumidity=ipmEnvEmdStatusHumidity, ipmDeviceOutletControlEntry=ipmDeviceOutletControlEntry, ipmSlave02OutletCurrentOverTh=ipmSlave02OutletCurrentOverTh, ipmSlave05Inlet02NotUnderLow=ipmSlave05Inlet02NotUnderLow, ipmAgentTrapAckSignature=ipmAgentTrapAckSignature, ccOutControlIndex=ccOutControlIndex, ipmSlaveOutletConfig=ipmSlaveOutletConfig, ipmAgentSnmpControl=ipmAgentSnmpControl, inletSlaveStatusWH2=inletSlaveStatusWH2, outletStatusStatus=outletStatusStatus, slaveOutletCurrent07=slaveOutletCurrent07, ipmEnvEmdConfigHumiHighStatus=ipmEnvEmdConfigHumiHighStatus, ipmSlaveDeviceOutletCurrentEntry=ipmSlaveDeviceOutletCurrentEntry, ipmAgentNetworkIpSubnet=ipmAgentNetworkIpSubnet, slaveOutletLocation12=slaveOutletLocation12, slaveOutletOnTime08=slaveOutletOnTime08, ipmSlave04EmdTemperatureNotHigh=ipmSlave04EmdTemperatureNotHigh, ipmDeviceCcOutControlTable=ipmDeviceCcOutControlTable, slaveOutletCurrTh09=slaveOutletCurrTh09, ipmSlave01EmdAlarm1Active=ipmSlave01EmdAlarm1Active, ipmSlave04Inlet02NotOverHigh=ipmSlave04Inlet02NotOverHigh, ipmEmdTemperatureNotHigh=ipmEmdTemperatureNotHigh, ccOutConfigIndex=ccOutConfigIndex, inletConfigVoltageHighAction=inletConfigVoltageHighAction, ipmSlave04OutletCurrentOverTh=ipmSlave04OutletCurrentOverTh, slaveOutletWatt02=slaveOutletWatt02, inletConfigCurrentHigh=inletConfigCurrentHigh, ipmIdentAgentSoftwareVersion=ipmIdentAgentSoftwareVersion, ipmEnv=ipmEnv, slaveOutletOffTimeIndex=slaveOutletOffTimeIndex, ipmSlave04EmdHumidityTooLow=ipmSlave04EmdHumidityTooLow, slaveOutletLocation04=slaveOutletLocation04, ipmSlave02EmdHumidityTooHigh=ipmSlave02EmdHumidityTooHigh, ipmSlave02EmdAlarm2Active=ipmSlave02EmdAlarm2Active, ipmSlave04Inlet02OverHigh=ipmSlave04Inlet02OverHigh, slaveOutletCurrThIndex=slaveOutletCurrThIndex, slaveInlet2ConfigVoltageHigh=slaveInlet2ConfigVoltageHigh, ipmSlave05EmdHumidityTooLow=ipmSlave05EmdHumidityTooLow, slaveInlet2ConfigVoltageLow=slaveInlet2ConfigVoltageLow, inletStatusKwatt=inletStatusKwatt, outletConfigIndex=outletConfigIndex, slaveOutletKwatt11=slaveOutletKwatt11, ipmOutletCurrentTooHigh=ipmOutletCurrentTooHigh, inletConfigCurrentHighAction=inletConfigCurrentHighAction, ipmSlave01EmdHumidityTooHigh=ipmSlave01EmdHumidityTooHigh, slaveOutletCurrTh08=slaveOutletCurrTh08, ipmSlaveDeviceOutletLocationTable=ipmSlaveDeviceOutletLocationTable, ipmEnvEmdConfigTemp=ipmEnvEmdConfigTemp, inletSlaveStatusFrequency2=inletSlaveStatusFrequency2, ipmSlave04EmdTemperatureTooHigh=ipmSlave04EmdTemperatureTooHigh, inletSlaveStatusWH=inletSlaveStatusWH, ipmAgentNetworkIpAdress=ipmAgentNetworkIpAdress, ipmEnvEmdConfigAlarm2Name=ipmEnvEmdConfigAlarm2Name, slaveOutletName08=slaveOutletName08, ipmSlave04Inlet01NotUnderLow=ipmSlave04Inlet01NotUnderLow)
