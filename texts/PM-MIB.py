#
# PySNMP MIB module PM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/avocent/PM-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 10:02:50 2024
# On host fv-az1773-903 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Unsigned32, NotificationType, ObjectIdentity, TimeTicks, Counter32, ModuleIdentity, MibIdentifier, IpAddress, Integer32, Counter64, iso, Gauge32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "NotificationType", "ObjectIdentity", "TimeTicks", "Counter32", "ModuleIdentity", "MibIdentifier", "IpAddress", "Integer32", "Counter64", "iso", "Gauge32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
pm = ModuleIdentity((1, 3, 6, 1, 4, 1, 10418, 17))
pm.setRevisions(('2010-11-24 00:00', '2010-09-24 00:00', '2010-04-14 00:00', '2009-05-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pm.setRevisionsDescriptions(('Adding Power Management OIDs.\n                         Fixed SYNTAX of some OIDs.\n                         Updating OIDs DESCRIPTION to include not applicable values.', 'Syntax fixed to pass validation level 3.', 'Obsoleting fixed index OIDs from PDU table.\n                         Added measurent type and alarm in PDU table.\n                         Added missing power factor reset in outlet table.\n                         Added sensor type and digital status in sensors table.', 'New tables for power measurements',))
if mibBuilder.loadTexts: pm.setLastUpdated('201011240000Z')
if mibBuilder.loadTexts: pm.setOrganization('Avocent Corporation')
if mibBuilder.loadTexts: pm.setContactInfo('postal : Avocent Corporation\n                                  47281 Bayside Parkway\n                                  Fremont, CA 94538, USA\n                         e-mail : Technical Support\n                                  techsupport@avocent.com')
if mibBuilder.loadTexts: pm.setDescription('This module defines the Avocent MIB extensions to \n         PM-PDU products.')
pmProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 17, 1))
pmManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 17, 2))
pm1024 = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 17, 1, 1))
pm2003 = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 17, 1, 2))
pm2006 = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 17, 1, 3))
pm2024 = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 17, 1, 4))
pm3003 = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 17, 1, 5))
pm3006 = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 17, 1, 6))
pm3024 = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 17, 1, 7))
pm1010 = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 17, 1, 8))
pm2010 = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 17, 1, 9))
pm3010 = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 17, 1, 10))
pm1020 = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 17, 1, 11))
pm2020 = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 17, 1, 12))
pm3020 = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 17, 1, 13))
pmAppliance = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 17, 2, 1))
pmSessions = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 17, 2, 2))
pmPowerMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5))
pmTrapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 17, 2, 6))
pmHostName = MibScalar((1, 3, 6, 1, 4, 1, 10418, 17, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmHostName.setStatus('current')
if mibBuilder.loadTexts: pmHostName.setDescription('The appliance name')
pmProductModel = MibScalar((1, 3, 6, 1, 4, 1, 10418, 17, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmProductModel.setStatus('current')
if mibBuilder.loadTexts: pmProductModel.setDescription('The appliance product model')
pmPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 10418, 17, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPartNumber.setStatus('current')
if mibBuilder.loadTexts: pmPartNumber.setDescription('The part number of this appliance as shown on the label\n         attached or imprinted on the appliance.')
pmSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 10418, 17, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSerialNumber.setStatus('current')
if mibBuilder.loadTexts: pmSerialNumber.setDescription('The serial number of this appliance as shown on the label\n         attached or imprinted on the appliance.')
pmEIDNumber = MibScalar((1, 3, 6, 1, 4, 1, 10418, 17, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmEIDNumber.setStatus('current')
if mibBuilder.loadTexts: pmEIDNumber.setDescription('The electronic ID number (EID) of this appliance as shown on the label\n         attached or imprinted on the appliance.')
pmBootcodeVersion = MibScalar((1, 3, 6, 1, 4, 1, 10418, 17, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmBootcodeVersion.setStatus('current')
if mibBuilder.loadTexts: pmBootcodeVersion.setDescription('The version of the bootcode of this appliance.')
pmFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 10418, 17, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: pmFirmwareVersion.setDescription('The version of the firmware of this appliance.')
pmReboot = MibScalar((1, 3, 6, 1, 4, 1, 10418, 17, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmReboot.setStatus('current')
if mibBuilder.loadTexts: pmReboot.setDescription('A set value of reboot(2) will reboot the appliance.\n         noAction(1) = always returned in a GET. Does nothing if SET.        \n         reboot(2)   = when SET the appliance immediately reboots.')
pmActiveSessionsNumberOfSession = MibScalar((1, 3, 6, 1, 4, 1, 10418, 17, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmActiveSessionsNumberOfSession.setStatus('current')
if mibBuilder.loadTexts: pmActiveSessionsNumberOfSession.setDescription('Number of active sessions.')
pmActiveSessionsTable = MibTable((1, 3, 6, 1, 4, 1, 10418, 17, 2, 2, 2), )
if mibBuilder.loadTexts: pmActiveSessionsTable.setStatus('current')
if mibBuilder.loadTexts: pmActiveSessionsTable.setDescription('This table contains the list of active sessions.')
pmActiveSessionsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10418, 17, 2, 2, 2, 1), ).setIndexNames((0, "PM-MIB", "pmActiveSessionsTableIndex"))
if mibBuilder.loadTexts: pmActiveSessionsTableEntry.setStatus('current')
if mibBuilder.loadTexts: pmActiveSessionsTableEntry.setDescription('each entry has the information about the active session')
pmActiveSessionsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 2, 2, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmActiveSessionsTableIndex.setStatus('current')
if mibBuilder.loadTexts: pmActiveSessionsTableIndex.setDescription('A unique index representing an entry in this table.')
pmActiveSessionsTableUser = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmActiveSessionsTableUser.setStatus('current')
if mibBuilder.loadTexts: pmActiveSessionsTableUser.setDescription('The name of the user that opens this session.')
pmActiveSessionsTableGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmActiveSessionsTableGroup.setStatus('current')
if mibBuilder.loadTexts: pmActiveSessionsTableGroup.setDescription('The name of the group that the user belongs to.')
pmActiveSessionsTableType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmActiveSessionsTableType.setStatus('current')
if mibBuilder.loadTexts: pmActiveSessionsTableType.setDescription('The session type.')
pmActiveSessionsTableConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmActiveSessionsTableConnection.setStatus('current')
if mibBuilder.loadTexts: pmActiveSessionsTableConnection.setDescription('Connection type.')
pmActiveSessionsTableSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmActiveSessionsTableSessionTime.setStatus('current')
if mibBuilder.loadTexts: pmActiveSessionsTableSessionTime.setDescription('Time of the session')
pmActiveSessionsTableFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmActiveSessionsTableFrom.setStatus('current')
if mibBuilder.loadTexts: pmActiveSessionsTableFrom.setDescription('The source IP address of the session.')
pmActiveSessionsTableKill = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("killSession", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmActiveSessionsTableKill.setStatus('current')
if mibBuilder.loadTexts: pmActiveSessionsTableKill.setDescription('A set value of killSession(2) will kill the session.\n         noAction(1)   = always returned in a GET. Does nothing if SET.\n         killSession(2)= when SET the appliance immediately kills the session.')
pmPowerMgmtNumSerialPorts = MibScalar((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtNumSerialPorts.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtNumSerialPorts.setDescription('The number of Serial Ports that has PDU connected on the appliance.')
pmPowerMgmtSerialTable = MibTable((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 2), )
if mibBuilder.loadTexts: pmPowerMgmtSerialTable.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSerialTable.setDescription('Information about each serial port thas has PDU connect.')
pmPowerMgmtSerialTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 2, 1), ).setIndexNames((0, "PM-MIB", "pmPowerMgmtSerialTableIndex"))
if mibBuilder.loadTexts: pmPowerMgmtSerialTableEntry.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSerialTableEntry.setDescription('Information about each serial port thas has PDU connect.')
pmPowerMgmtSerialTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSerialTableIndex.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSerialTableIndex.setDescription('The index of the register.')
pmPowerMgmtSerialTablePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSerialTablePortNumber.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSerialTablePortNumber.setDescription('The number of the serial port when the PDU is connected.')
pmPowerMgmtSerialTableDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSerialTableDeviceName.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSerialTableDeviceName.setDescription('The device name of this serial port.')
pmPowerMgmtSerialTableNumberPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSerialTableNumberPDUs.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSerialTableNumberPDUs.setDescription('Total number of units connected in this serial port.')
pmPowerMgmtSerialTableBuzzer = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtSerialTableBuzzer.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSerialTableBuzzer.setDescription('set/get buzzer(s) on or off for the chain.\n         Returns 0 if not supported.')
pmPowerMgmtSerialTableSyslog = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtSerialTableSyslog.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSerialTableSyslog.setDescription('set/get syslog on or off for the chain.\n         Returns 0 if not supported.')
pmPowerMgmtSerialTableOverCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtSerialTableOverCurrent.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSerialTableOverCurrent.setDescription('set/get over current proctection on or off for the chain.\n         Returns 0 if not supported.')
pmPowerMgmtSerialTableCycleInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtSerialTableCycleInterval.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSerialTableCycleInterval.setDescription('set/get cycle interval for the chain in whole seconds.\n         Returns 0 if not supported.')
pmPowerMgmtSerialTablePollRate = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtSerialTablePollRate.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSerialTablePollRate.setDescription('set/get the poll rate for the chain in whole seconds.\n         Returns 0 if not supported.')
pmPowerMgmtSerialTablePassWord = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 2, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtSerialTablePassWord.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSerialTablePassWord.setDescription('set the global password for admin user')
pmPowerMgmtSerialTableSave = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("save", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtSerialTableSave.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSerialTableSave.setDescription('noAction(1) = always returned in a GET. Does nothing if SET.\n         save(2)  = when SET the save command is sent to PDU.')
pmPowerMgmtSerialTableRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("restore", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtSerialTableRestore.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSerialTableRestore.setDescription('noAction(1) = always returned in a GET. Does nothing if SET.\n         restore(2)  = when SET the restore command is sent to PDU.')
pmPowerMgmtPDUTable = MibTable((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3), )
if mibBuilder.loadTexts: pmPowerMgmtPDUTable.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTable.setDescription('This table contains the list of detected PDUs.')
pmPowerMgmtPDUTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1), ).setIndexNames((0, "PM-MIB", "pmPowerMgmtPDUTablePortNumber"), (0, "PM-MIB", "pmPowerMgmtPDUTablePduIndex"))
if mibBuilder.loadTexts: pmPowerMgmtPDUTableEntry.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableEntry.setDescription('each entry has the information about the PDU.')
pmPowerMgmtPDUTablePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePortNumber.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePortNumber.setDescription('Number of serial port when the PDU is connected.')
pmPowerMgmtPDUTablePduIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePduIndex.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePduIndex.setDescription('A PDU position in the chain.')
pmPowerMgmtPDUTablePduId = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePduId.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePduId.setDescription('PDU identification.')
pmPowerMgmtPDUTablePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePortName.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePortName.setDescription('Name of serial port when the PDU is connected.')
pmPowerMgmtPDUTableModel = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableModel.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableModel.setDescription('Model of the PDU.\n         Returns N/A if not applicable.')
pmPowerMgmtPDUTableVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVendor.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVendor.setDescription('Vendor of the PDU.\n         Returns N/A if not applicable.')
pmPowerMgmtPDUTableFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableFirmwareVersion.setDescription('Version of the PDU firmware.\n         Returns N/A if not applicable.')
pmPowerMgmtPDUTableNumberOfOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableNumberOfOutlets.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableNumberOfOutlets.setDescription('Number of outlets of the PDU.')
pmPowerMgmtPDUTableCurrentNOS = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrentNOS.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrentNOS.setDescription('Number of current sensors in the PDU.')
pmPowerMgmtPDUTableCurrent1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrent1Value.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrent1Value.setDescription('Current of the sensor 1 in this PDU unit in AMP.\n         The value of this object is the actual current in \n         AMP * 10. You need to translate the readed value\n         (Ex. : value is 5, the current is 0.5 AMP.).\n         This OID is obsoleted. The value can be retrieved\n         from pmPowerMgmtPDUTableCurrentValue, \n         pmPowerMgmtPhasesTableCurrentValue, or \n         pmPowerMgmtOutletsTableCurrentValue')
pmPowerMgmtPDUTableCurrent1Max = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrent1Max.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrent1Max.setDescription('Maximum current of the sensor 1 in this PDU unit in AMP.\n         When the PDU does not have support for maximum value,\n         the value will be 0.\n         The value of this object is the actual current in \n         AMP * 10. You need to translate the readed value\n         (Ex. : value is 5, the current is 0.5 AMP.)\n         Clear this value, set it with Zero value. \n         This OID is obsoleted. The value can be retrieved\n         from pmPowerMgmtPDUTableCurrentMax, \n         pmPowerMgmtPhasesTableCurrentMax, or \n         pmPowerMgmtOutletsTableCurrentMax')
pmPowerMgmtPDUTableCurrent2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrent2Value.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrent2Value.setDescription('Current of the sensor 2 in this PDU unit in AMP.\n         The value of this object is the actual current in \n         AMP * 10. You need to translate the readed value\n         (Ex. : value is 5, the current is 0.5 AMP.). \n         This OID is obsoleted. The value can be retrieved\n         from pmPowerMgmtPDUTableCurrentValue, \n         pmPowerMgmtPhasesTableCurrentValue, or \n         pmPowerMgmtOutletsTableCurrentValue')
pmPowerMgmtPDUTableCurrent2Max = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrent2Max.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrent2Max.setDescription('Maximum current of the sensor 2 in this PDU unit in AMP.\n          When the PDU does not have support for maximum value,\n         the value will be 0.\n         The value of this object is the actual current in \n         AMP * 10. You need to translate the readed value\n         (Ex. : value is 5, the current is 0.5 AMP.)\n         Clear this value, set it with Zero value. \n         This OID is obsoleted. The value can be retrieved\n         from pmPowerMgmtPDUTableCurrentMax, \n         pmPowerMgmtPhasesTableCurrentMax, or \n         pmPowerMgmtOutletsTableCurrentMax')
pmPowerMgmtPDUTableCurrent3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrent3Value.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrent3Value.setDescription('Current of the sensor 3 in this PDU unit in AMP.\n         The value of this object is the actual current in \n         AMP * 10. You need to translate the readed value\n        (Ex. : value is 5, the current is 0.5 AMP.) \n         This OID is obsoleted. The value can be retrieved\n         from pmPowerMgmtPDUTableCurrentValue, \n         pmPowerMgmtPhasesTableCurrentValue, or \n         pmPowerMgmtOutletsTableCurrentValue')
pmPowerMgmtPDUTableCurrent3Max = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrent3Max.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrent3Max.setDescription('Maximum current of the sensor 3 in this PDU unit in AMP.\n         When the PDU does not have support for maximum value,\n         the value will be 0.\n         The value of this object is the actual current in \n         AMP * 10. You need to translate the readed value\n         (Ex. : value is 5, the current is 0.5 AMP.)\n         Clear this value, set it with Zero value. \n         This OID is obsoleted. The value can be retrieved\n         from pmPowerMgmtPDUTableCurrentMax, \n         pmPowerMgmtPhasesTableCurrentMax, or \n         pmPowerMgmtOutletsTableCurrentMax')
pmPowerMgmtPDUTableTemperatureNOS = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableTemperatureNOS.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableTemperatureNOS.setDescription('Number of temperature sensors in the PDU.')
pmPowerMgmtPDUTableTemperature1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableTemperature1Value.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableTemperature1Value.setDescription('Temperature of this PM unit in Celsius degrees.\n         The value of this object is the actual temperature in \n         degrees C * 10. You need to translate the readed value\n        (Ex. : value is 240, the temperature is 24 Celsius.) \n         If the temperature measurement is not installed this \n         value will be 0.\n        Valid values are 5 to 999 ( 0.5 to 99.9 Celsius).')
pmPowerMgmtPDUTableTemperature1Max = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableTemperature1Max.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableTemperature1Max.setDescription('Maximum temperature detected in this PM unit in Celsius degrees.\n        The value will be Zero when the PDU does not have support for maximum value.\n         The value of this object is the actual temperature in \n         degrees C * 10. You need to translate the readed value\n        (Ex. : value is 240, the temperature is 24 Celsius.) \n         If the temperature measurement is not installed this \n         value will be 0.\n         Valid values are 5 to 999 ( 0.5 to 99.9 Celsius).\n        Set with Zero value to clear the max. temperature.')
pmPowerMgmtPDUTableTemperature2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableTemperature2Value.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableTemperature2Value.setDescription('Temperature of this PM unit in Celsius degrees.\n         The value of this object is the actual temperature in \n         degrees C * 10. You need to translate the readed value\n         (Ex. : value is 240, the temperature is 24 Celsius.) \n         If the temperature measurement is not installed this \n         value will be 0.\n          Valid values are 5 to 999 ( 0.5 to 99.9 Celsius).')
pmPowerMgmtPDUTableTemperature2Max = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableTemperature2Max.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableTemperature2Max.setDescription('Maximum temperature detected in this PM unit in Celsius degrees.\n         The value will be Zero when the PDU does not have support for maximum value.\n         The value of this object is the actual temperature in \n         degrees C * 10. You need to translate the readed value\n         (Ex. : value is 240, the temperature is 24 Celsius.) \n         If the temperature measurement is not installed this \n         value will be 0.\n         Valid values are 5 to 999 ( 0.5 to 99.9 Celsius).\n         Set with Zero value to clear the max. temperature.')
pmPowerMgmtPDUTableTemperature3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableTemperature3Value.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableTemperature3Value.setDescription('Temperature of this PM unit in Celsius degrees.\n        The value of this object is the actual temperature in \n        degrees C * 10. You need to translate the readed value\n        (Ex. : value is 240, the temperature is 24 Celsius.) \n        If the temperature measurement is not installed this \n        value will be 0.\n        Valid values are 5 to 999 ( 0.5 to 99.9 Celsius).')
pmPowerMgmtPDUTableTemperature3Max = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableTemperature3Max.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableTemperature3Max.setDescription('Maximum temperature detected in this PM unit in Celsius degrees.\n        The value will be Zero when the PDU does not have support for maximum value.\n         The value of this object is the actual temperature in \n         degrees C * 10. You need to translate the readed value\n         (Ex. : value is 240, the temperature is 24 Celsius.) \n         If the temperature measurement is not installed this \n         value will be 0.\n         Valid values are 5 to 999 ( 0.5 to 99.9 Celsius).\n         Set with Zero value to clear the max. temperature.')
pmPowerMgmtPDUTableHumidityNOS = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableHumidityNOS.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableHumidityNOS.setDescription('Number of humidity sensors in the PDU.')
pmPowerMgmtPDUTableHumidity1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableHumidity1Value.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableHumidity1Value.setDescription('Humidity of this PM unit .\n         If the humidity measurement is not installed this \n         value will be 0.')
pmPowerMgmtPDUTableHumidity1Max = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableHumidity1Max.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableHumidity1Max.setDescription('Maximum humidity detected in this PM unit.\n         If the humidity measurement  is not installed  or the PDU does not have support for maximum value this \n         value will be 0.\n         Set with Zero value to clear the max. temperature.')
pmPowerMgmtPDUTableHumidity2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableHumidity2Value.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableHumidity2Value.setDescription('Humidity of this PM unit .\n         If the humidity measurement is not installed this \n         value will be 0.')
pmPowerMgmtPDUTableHumidity2Max = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableHumidity2Max.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableHumidity2Max.setDescription('Maximum humidity detected in this PM unit.\n         If the humidity measurement  is not installed  or the PDU does not have support for maximum value this \n         value will be 0.\n         Set with Zero value to clear the max. temperature.')
pmPowerMgmtPDUTableHumidity3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableHumidity3Value.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableHumidity3Value.setDescription('Humidity of this PM unit .\n         If the humidity measurement is not installed this \n         value will be 0.')
pmPowerMgmtPDUTableHumidity3Max = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableHumidity3Max.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableHumidity3Max.setDescription('Maximum humidity detected in this PM unit.\n         If the humidity measurement  is not installed  or the PDU does not have support for maximum value this \n         value will be 0.\n         Set with Zero value to clear the max. temperature.')
pmPowerMgmtPDUTableVoltageNOS = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltageNOS.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltageNOS.setDescription('Number of voltage sensors in the PDU.')
pmPowerMgmtPDUTableVoltage1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltage1Value.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltage1Value.setDescription('Voltage of this sensor in this PDU unit. \n         This OID is obsoleted. The value can be retrieved\n         from pmPowerMgmtPDUTableVoltageValue, \n         pmPowerMgmtPhasesTableVoltageValue, or \n         pmPowerMgmtOutletsTableVoltageValue')
pmPowerMgmtPDUTableVoltage1Max = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltage1Max.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltage1Max.setDescription('Maximum voltage of this sensor in this PDU unit.\n         Set with Zero value to clear the maximum voltage. \n         This OID is obsoleted. The value can be retrieved\n         from pmPowerMgmtPDUTableVoltageMax, \n         pmPowerMgmtPhasesTableVoltageMax, or \n         pmPowerMgmtOutletsTableVoltageMax')
pmPowerMgmtPDUTableVoltage2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltage2Value.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltage2Value.setDescription('Voltage of this sensor in this PDU unit. \n         This OID is obsoleted. The value can be retrieved\n         from pmPowerMgmtPDUTableVoltageValue, \n         pmPowerMgmtPhasesTableVoltageValue, or \n         pmPowerMgmtOutletsTableVoltageValue')
pmPowerMgmtPDUTableVoltage2Max = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltage2Max.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltage2Max.setDescription('Maximum voltage of this sensor in this PDU unit.\n         Set with Zero value to clear the maximum voltage. \n         This OID is obsoleted. The value can be retrieved\n         from pmPowerMgmtPDUTableVoltageMax, \n         pmPowerMgmtPhasesTableVoltageMax, or \n         pmPowerMgmtOutletsTableVoltageMax')
pmPowerMgmtPDUTableVoltage3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltage3Value.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltage3Value.setDescription('Voltage of this sensor in this PDU unit. \n         This OID is obsoleted. The value can be retrieved\n         from pmPowerMgmtPDUTableVoltageValue, \n         pmPowerMgmtPhasesTableVoltageValue, or \n         pmPowerMgmtOutletsTableVoltageValue')
pmPowerMgmtPDUTableVoltage3Max = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltage3Max.setStatus('obsolete')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltage3Max.setDescription('Maximum voltage of this sensor in this PDU unit.\n         Set with Zero value to clear the maximum voltage. \n         This OID is obsoleted. The value can be retrieved\n         from pmPowerMgmtPDUTableVoltageMax, \n         pmPowerMgmtPhasesTableVoltageMax, or \n         pmPowerMgmtOutletsTableVoltageMax')
pmPowerMgmtPDUTableNumberOfPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableNumberOfPhases.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableNumberOfPhases.setDescription('Number of phases of the PDU.')
pmPowerMgmtPDUTableNumberOfBanks = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableNumberOfBanks.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableNumberOfBanks.setDescription('Number of banks in the PDU.')
pmPowerMgmtPDUTableNumberOfSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableNumberOfSensors.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableNumberOfSensors.setDescription('Number of sensors in the PDU.')
pmPowerMgmtPDUTableFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableFactoryDefault.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableFactoryDefault.setDescription('A set value of 2 will set the PDU to factory default settings.\n         noAction(1) = always returned in a GET. Does nothing if SET.\n         reset(2)  = when SET the factory default command is sent to the PDU.')
pmPowerMgmtPDUTableColdStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableColdStartDelay.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableColdStartDelay.setDescription('PDUs cold start delay in whole seconds (0-60).\n         Returns 0 if not supported.')
pmPowerMgmtPDUTableReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableReboot.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableReboot.setDescription('A set value of power*(2) will send command to PDU.\n         noAction(1) = always returned in a GET. Does nothing if SET.\n         reboot(2)  = when SET the reboot command is sent to PDU.')
pmPowerMgmtPDUTableMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableMaxCurrent.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableMaxCurrent.setDescription('Maximum value of current allowed in the PDU (A x 10).')
pmPowerMgmtPDUTableAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("blow-fuse", 2), ("hw-ocp", 3), ("high-critical", 4), ("high-warning", 5), ("low-warning", 6), ("low-critical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableAlarm.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableAlarm.setDescription('Show the PDU alarm status.\n                            Returns 0 if not supported.')
pmPowerMgmtPDUTableCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrentValue.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrentValue.setDescription('Actual value of current in the PDU (A x 10).\n         Returns 0 if not supported.')
pmPowerMgmtPDUTableCurrentMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrentMax.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrentMax.setDescription('Maximum value of current in the PDU (A x 10).\n         Returns 0 if not supported.')
pmPowerMgmtPDUTableCurrentMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrentMin.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrentMin.setDescription('Minimum value of current in the PDU (A x 10).\n         Returns 0 if not supported.')
pmPowerMgmtPDUTableCurrentAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrentAvg.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrentAvg.setDescription('Average value of current in the PDU (A x 10).\n         Returns 0 if not supported.')
pmPowerMgmtPDUTableCurrentReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrentReset.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrentReset.setDescription('noAction(1) = always returned in a GET. Does nothing if SET.\n         reset(2)  = when SET the reset command is sent to PDU.')
pmPowerMgmtPDUTablePowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerValue.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerValue.setDescription('Actual value of power in the PDU (W x 10).\n         Returns 0 if not supported.')
pmPowerMgmtPDUTablePowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerMax.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerMax.setDescription('Maximum value of power in the PDU (W x 10).\n         Returns 0 if not supported.')
pmPowerMgmtPDUTablePowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerMin.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerMin.setDescription('Minimum value of power in the PDU (W x 10).\n         Returns 0 if not supported.')
pmPowerMgmtPDUTablePowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerAvg.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerAvg.setDescription('Average value of power in the PDU (W x 10).\n         Returns 0 if not supported.')
pmPowerMgmtPDUTablePowerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerReset.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerReset.setDescription('noAction(1) = always returned in a GET. Does nothing if SET.\n         reset(2)  = when SET the reset command is sent to PDU.')
pmPowerMgmtPDUTablePowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none-sensor", 0), ("estimated", 1), ("measured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerType.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerType.setDescription('Type of power values.\n                            Returns 0 if not supported.')
pmPowerMgmtPDUTableVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltageValue.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltageValue.setDescription('Actual value of voltage in the PDU (V).\n         Returns 0 if not supported.')
pmPowerMgmtPDUTableVoltageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltageMax.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltageMax.setDescription('Maximum value of voltage in the PDU (V).\n         Returns 0 if not supported.')
pmPowerMgmtPDUTableVoltageMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltageMin.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltageMin.setDescription('Minimum value of voltage in the PDU (V).\n         Returns 0 if not supported.')
pmPowerMgmtPDUTableVoltageAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltageAvg.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltageAvg.setDescription('Average value of voltage in the PDU (V).\n         Returns 0 if not supported.')
pmPowerMgmtPDUTableVoltageReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltageReset.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltageReset.setDescription('noAction(1) = always returned in a GET. Does nothing if SET.\n         reset(2)  = when SET the reset command is sent to PDU.')
pmPowerMgmtPDUTableVoltageType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none-sensor", 0), ("estimated", 1), ("measured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltageType.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableVoltageType.setDescription('Type of voltage values.\n                            Returns 0 if not supported.')
pmPowerMgmtPDUTablePowerFactorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerFactorValue.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerFactorValue.setDescription('Actual value of power factor in the PDU (Pf x 100).\n         Returns 0 if not supported.')
pmPowerMgmtPDUTablePowerFactorMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerFactorMax.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerFactorMax.setDescription('Maximum value of power factor in the PDU (Pf x 100).\n         Returns 0 if not supported.')
pmPowerMgmtPDUTablePowerFactorMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerFactorMin.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerFactorMin.setDescription('Minimum value of power factor in the PDU (Pf x 100).\n         Returns 0 if not supported.')
pmPowerMgmtPDUTablePowerFactorAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerFactorAvg.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerFactorAvg.setDescription('Average value of power factor in the PDU (Pf x 100).\n         Returns 0 if not supported.')
pmPowerMgmtPDUTablePowerFactorReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerFactorReset.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerFactorReset.setDescription('noAction(1) = always returned in a GET. Does nothing if SET.\n         reset(2)  = when SET the reset command is sent to PDU.')
pmPowerMgmtPDUTablePowerFactorType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none-sensor", 0), ("estimated", 1), ("measured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerFactorType.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerFactorType.setDescription('Type of power values.\n                            Returns 0 if not supported.')
pmPowerMgmtPDUTablePowerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noAction", 1), ("powerOn", 2), ("powerOff", 3), ("powerCycle", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerControl.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTablePowerControl.setDescription('A set value of power*(2-4) will send command to PDU.\n         noAction(1) = always returned in a GET. Does nothing if SET.\n         powerOn(2)  = when SET the power On command is sent to PDU.\n         powerOff(3) = when SET the power Off command is sent to PDU.\n         powerCycle(4)=when SET the power cycle command is sent to PDU.\n         Returns 0 if not supported.')
pmPowerMgmtPDUTableResetOCP = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableResetOCP.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableResetOCP.setDescription('A set value of power*(2) will send command to PDU.\n         noAction(1) = always returned in a GET. Does nothing if SET.\n         reset(2)  = when SET the reset command is sent to PDU.\n         Returns 0 if not supported.')
pmPowerMgmtPDUTableCurrentHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 100), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrentHighCritical.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrentHighCritical.setDescription('outlet high critical (alarm) current threshold (A x 10).\n         Set fails if value is lower that CurrentHighWarning.\n         Returns 0 if not supported.')
pmPowerMgmtPDUTableCurrentHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 101), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrentHighWarning.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrentHighWarning.setDescription('outlet high warning current threshold (A x 10).\n         Set fails if value is higher than CurrentHighCritical or lower than CurrentLowWarning.\n         Returns 0 if not supported.')
pmPowerMgmtPDUTableCurrentLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 102), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrentLowWarning.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrentLowWarning.setDescription('outlet low warning current threshold (A x 10).\n         Set fails if value is higher than CurrentHighWarning or lower than CurrentLowCritical.\n         Returns 0 if not supported.')
pmPowerMgmtPDUTableCurrentLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 103), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrentLowCritical.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableCurrentLowCritical.setDescription('outlet low critical current threshold (A x 10).\n         Set fails if value is higher than CurrentLowWarning.\n         Returns 0 if not supported.')
pmPowerMgmtPDUTableEnergyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 105), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableEnergyValue.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableEnergyValue.setDescription('pdu energy value (Wh).\n         Returns 0 if not supported.')
pmPowerMgmtPDUTableEnergyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 106), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableEnergyStartTime.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableEnergyStartTime.setDescription('time at which energy calculation commenced (ISO8601 format).\n         Returns N/A if not applicable.')
pmPowerMgmtPDUTableEnergyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 3, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPDUTableEnergyReset.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPDUTableEnergyReset.setDescription('noAction(1) = always returned in a GET. Does nothing if SET.\n         reset(2)  = when SET the reset command is sent to PDU.')
pmPowerMgmtTotalNumberOfOutlets = MibScalar((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtTotalNumberOfOutlets.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtTotalNumberOfOutlets.setDescription('Number of outlets managed by the appliance.')
pmPowerMgmtOutletsTable = MibTable((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5), )
if mibBuilder.loadTexts: pmPowerMgmtOutletsTable.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTable.setDescription('This table contains the information about outlets.')
pmPowerMgmtOutletsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1), ).setIndexNames((0, "PM-MIB", "pmPowerMgmtOutletsTablePortNumber"), (0, "PM-MIB", "pmPowerMgmtOutletsTablePduNumber"), (0, "PM-MIB", "pmPowerMgmtOutletsTableNumber"))
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableEntry.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableEntry.setDescription('each entry has the information about the outlet.')
pmPowerMgmtOutletsTablePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePortNumber.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePortNumber.setDescription('Serial Port number.')
pmPowerMgmtOutletsTablePduNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePduNumber.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePduNumber.setDescription('Index.')
pmPowerMgmtOutletsTableNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableNumber.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableNumber.setDescription('Number of the outlet in the PDU.')
pmPowerMgmtOutletsTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableName.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableName.setDescription('Name of the outlet.')
pmPowerMgmtOutletsTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("offLocked", 3), ("onLocked", 4), ("offCycle", 5), ("onPendingOff", 6), ("offPendingOn", 7), ("onPendingCycle", 8), ("notSet", 9), ("onFixed", 10), ("offShutdown", 11), ("tripped", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableStatus.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableStatus.setDescription('Status of the outlet.\n         Returns 0 if not supported.')
pmPowerMgmtOutletsTablePowerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAction", 1), ("powerOn", 2), ("powerOff", 3), ("powerCycle", 4), ("powerLock", 5), ("powerUnlock", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerControl.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerControl.setDescription('A set value of power*(2-6) will send command to PDU.\n         noAction(1) = always returned in a GET. Does nothing if SET.\n         powerOn(2)  = when SET the power On command is sent to PDU.\n         powerOff(3) = when SET the power Off command is sent to PDU.\n         powerCycle(4)=when SET the power cycle command is sent to PDU.\n         powerLock(5)= when SET the power lock command is sent to PDU.\n         powerUnlock(6)=when SET the power unlock command is sent to PDU.\n        The powerLock and powerUnlock are valid only for Cyclades-PM PDUs')
pmPowerMgmtOutletsTablePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePortName.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePortName.setDescription('Serial Port Name where the PDU is connected.')
pmPowerMgmtOutletsTablePduId = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePduId.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePduId.setDescription('PDU identification.')
pmPowerMgmtOutletsTablePostOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePostOnDelay.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePostOnDelay.setDescription('post on delay for the outlet (seconds x 10)\n         Returns 0 if not supported.')
pmPowerMgmtOutletsTablePostOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePostOffDelay.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePostOffDelay.setDescription('post off delay for the outlet (seconds x 10)\n         Returns 0 if not supported.')
pmPowerMgmtOutletsTableAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("blow-fuse", 2), ("hw-ocp", 3), ("high-critical", 4), ("high-warning", 5), ("low-warning", 6), ("low-critical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableAlarm.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableAlarm.setDescription('Show the outlet alarm status.\n                            Returns 0 if not supported.')
pmPowerMgmtOutletsTableCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableCurrentValue.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableCurrentValue.setDescription('Actual value of current in the outlet (A x 10).\n         Returns 0 if not supported.')
pmPowerMgmtOutletsTableCurrentMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableCurrentMax.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableCurrentMax.setDescription('Maximum value of current in the outlet (A x 10).\n         Returns 0 if not supported.')
pmPowerMgmtOutletsTableCurrentMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableCurrentMin.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableCurrentMin.setDescription('Minimum value of current in the outlet (A x 10).\n         Returns 0 if not supported.')
pmPowerMgmtOutletsTableCurrentAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableCurrentAvg.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableCurrentAvg.setDescription('Average value of current in the outlet (A x 10).\n         Returns 0 if not supported.')
pmPowerMgmtOutletsTableCurrentReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableCurrentReset.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableCurrentReset.setDescription('noAction(1) = always returned in a GET. Does nothing if SET.\n         reset(2)  = when SET the reset command is sent to PDU.')
pmPowerMgmtOutletsTablePowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerValue.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerValue.setDescription('Actual value of power in the outlet (W x 10).\n         Returns 0 if not supported.')
pmPowerMgmtOutletsTablePowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerMax.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerMax.setDescription('Maximum value of power in the outlet (W x 10).\n         Returns 0 if not supported.')
pmPowerMgmtOutletsTablePowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerMin.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerMin.setDescription('Minimum value of power in the outlet (W x 10).\n         Returns 0 if not supported.')
pmPowerMgmtOutletsTablePowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerAvg.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerAvg.setDescription('Average value of power in the outlet (W x 10).\n         Returns 0 if not supported.')
pmPowerMgmtOutletsTablePowerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerReset.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerReset.setDescription('noAction(1) = always returned in a GET. Does nothing if SET.\n         reset(2)  = when SET the reset command is sent to PDU.')
pmPowerMgmtOutletsTablePowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none-sensor", 0), ("estimated", 1), ("measured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerType.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerType.setDescription('Type of power values.\n                            Returns 0 if not supported.')
pmPowerMgmtOutletsTableVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableVoltageValue.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableVoltageValue.setDescription('Actual value of voltage in the outlet (V).\n         Returns 0 if not supported.')
pmPowerMgmtOutletsTableVoltageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableVoltageMax.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableVoltageMax.setDescription('Maximum value of voltage in the outlet (V).\n         Returns 0 if not supported.')
pmPowerMgmtOutletsTableVoltageMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableVoltageMin.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableVoltageMin.setDescription('Minimum value of voltage in the outlet (V).\n         Returns 0 if not supported.')
pmPowerMgmtOutletsTableVoltageAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableVoltageAvg.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableVoltageAvg.setDescription('Average value of voltage in the outlet (V).\n         Returns 0 if not supported.')
pmPowerMgmtOutletsTableVoltageReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableVoltageReset.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableVoltageReset.setDescription('noAction(1) = always returned in a GET. Does nothing if SET.\n         reset(2)  = when SET the reset command is sent to PDU.')
pmPowerMgmtOutletsTableVoltageType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none-sensor", 0), ("estimated", 1), ("measured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableVoltageType.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableVoltageType.setDescription('Type of voltage values.\n                            Returns 0 if not supported.')
pmPowerMgmtOutletsTablePowerFactorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerFactorValue.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerFactorValue.setDescription('Actual value of power factor in the outlet (Pf x 100).\n         Returns 0 if not supported.')
pmPowerMgmtOutletsTablePowerFactorMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerFactorMax.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerFactorMax.setDescription('Maximum value of power factor in the outlet (Pf x 100).\n         Returns 0 if not supported.')
pmPowerMgmtOutletsTablePowerFactorMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerFactorMin.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerFactorMin.setDescription('Minimum value of power factor in the outlet (Pf x 100).\n         Returns 0 if not supported.')
pmPowerMgmtOutletsTablePowerFactorAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerFactorAvg.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerFactorAvg.setDescription('Average value of power factor in the outlet (Pf x 100).\n         Returns 0 if not supported.')
pmPowerMgmtOutletsTablePowerFactorReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerFactorReset.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerFactorReset.setDescription('noAction(1) = always returned in a GET. Does nothing if SET.\n         reset(2)  = when SET the reset command is sent to PDU.')
pmPowerMgmtOutletsTablePowerFactorType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none-sensor", 0), ("estimated", 1), ("measured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerFactorType.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTablePowerFactorType.setDescription('Type of power factor values.\n                            Returns 0 if not supported.')
pmPowerMgmtOutletsTableCurrentHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 100), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableCurrentHighCritical.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableCurrentHighCritical.setDescription('outlet high critical (alarm) current threshold (A x 10).\n         Set fails if value is lower that CurrentHighWarning.\n         Returns 0 if not supported.')
pmPowerMgmtOutletsTableCurrentHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 101), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableCurrentHighWarning.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableCurrentHighWarning.setDescription('outlet high warning current threshold (A x 10).\n         Set fails if value is higher than CurrentHighCritical or lower than CurrentLowWarning.\n         Returns 0 if not supported.')
pmPowerMgmtOutletsTableCurrentLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 102), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableCurrentLowWarning.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableCurrentLowWarning.setDescription('outlet low warning current threshold (A x 10).\n         Set fails if value is higher than CurrentHighWarning or lower than CurrentLowCritical.\n         Returns 0 if not supported.')
pmPowerMgmtOutletsTableCurrentLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 103), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableCurrentLowCritical.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableCurrentLowCritical.setDescription('outlet low critical current threshold (A x 10).\n         Set fails if value is higher than CurrentLowWarning.\n         Returns 0 if not supported.')
pmPowerMgmtOutletsTableEnergyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 105), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableEnergyValue.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableEnergyValue.setDescription('outlet energy value (Wh).\n         Returns 0 if not supported.')
pmPowerMgmtOutletsTableEnergyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 106), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableEnergyStartTime.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableEnergyStartTime.setDescription('time at which energy calculation commenced (ISO8601 format).\n         Returns N/A if not applicable.')
pmPowerMgmtOutletsTableEnergyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 5, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableEnergyReset.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtOutletsTableEnergyReset.setDescription('noAction(1) = always returned in a GET. Does nothing if SET.\n         reset(2)  = when SET the reset command is sent to PDU.')
pmPowerMgmtNumberOfOutletGroup = MibScalar((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtNumberOfOutletGroup.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtNumberOfOutletGroup.setDescription('Number of configured group of outlets.')
pmPowerMgmtGroupTable = MibTable((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 7), )
if mibBuilder.loadTexts: pmPowerMgmtGroupTable.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtGroupTable.setDescription('This table contains the information about group of outlets.')
pmPowerMgmtGroupTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 7, 1), ).setIndexNames((0, "PM-MIB", "pmPowerMgmtGroupTableIndex"))
if mibBuilder.loadTexts: pmPowerMgmtGroupTableEntry.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtGroupTableEntry.setDescription('each entry has the information about group of outlets.')
pmPowerMgmtGroupTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 7, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtGroupTableIndex.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtGroupTableIndex.setDescription('Index of the group.')
pmPowerMgmtGroupTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtGroupTableName.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtGroupTableName.setDescription('Name of the group of outlets.')
pmPowerMgmtGroupTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtGroupTableStatus.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtGroupTableStatus.setDescription('Status of the group of outlet.')
pmPowerMgmtGroupTablePowerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noAction", 1), ("powerOn", 2), ("powerOff", 3), ("powerCycle", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtGroupTablePowerControl.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtGroupTablePowerControl.setDescription('A set value of power*(2-4) will send command to PDU.\n         noAction(1) = always returned in a GET. Does nothing if SET.\n         powerOn(2)  = when SET the power On command is sent to PDU.\n         powerOff(3) = when SET the power Off command is sent to PDU.\n         powerCycle(4)=when SET the power cycle command is sent to PDU.')
pmPowerMgmtTotalNumberOfPhases = MibScalar((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtTotalNumberOfPhases.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtTotalNumberOfPhases.setDescription('Number of phases managed by the appliance.')
pmPowerMgmtPhasesTable = MibTable((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9), )
if mibBuilder.loadTexts: pmPowerMgmtPhasesTable.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTable.setDescription('This table contains the information about phases.')
pmPowerMgmtPhasesTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1), ).setIndexNames((0, "PM-MIB", "pmPowerMgmtPhasesTablePortNumber"), (0, "PM-MIB", "pmPowerMgmtPhasesTablePduNumber"), (0, "PM-MIB", "pmPowerMgmtPhasesTableNumber"))
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableEntry.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableEntry.setDescription('each entry has the information about the phases.')
pmPowerMgmtPhasesTablePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePortNumber.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePortNumber.setDescription('Serial Port number.')
pmPowerMgmtPhasesTablePduNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePduNumber.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePduNumber.setDescription('Index.')
pmPowerMgmtPhasesTableNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableNumber.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableNumber.setDescription('Number of the phase in the PDU.')
pmPowerMgmtPhasesTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableName.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableName.setDescription('Name of the phase.\n         Returns N/A if not applicable.')
pmPowerMgmtPhasesTablePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePortName.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePortName.setDescription('Serial Port Name where the PDU is connected.')
pmPowerMgmtPhasesTablePduId = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePduId.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePduId.setDescription('PDU identification.')
pmPowerMgmtPhasesTableAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("blow-fuse", 2), ("hw-ocp", 3), ("high-critical", 4), ("high-warning", 5), ("low-warning", 6), ("low-critical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableAlarm.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableAlarm.setDescription('Show the phase alarm status.\n                            Returns 0 if not supported.')
pmPowerMgmtPhasesTableCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableCurrentValue.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableCurrentValue.setDescription('Actual value of current in the phase (A x 10).\n         Returns 0 if not supported.')
pmPowerMgmtPhasesTableCurrentMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableCurrentMax.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableCurrentMax.setDescription('Maximum value of current in the phase (A x 10).\n         Returns 0 if not supported.')
pmPowerMgmtPhasesTableCurrentMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableCurrentMin.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableCurrentMin.setDescription('Minimum value of current in the phase (A x 10).\n         Returns 0 if not supported.')
pmPowerMgmtPhasesTableCurrentAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableCurrentAvg.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableCurrentAvg.setDescription('Average value of current in the phase (A x 10).\n         Returns 0 if not supported.')
pmPowerMgmtPhasesTableCurrentReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableCurrentReset.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableCurrentReset.setDescription('noAction(1) = always returned in a GET. Does nothing if SET.\n         reset(2)  = when SET the reset command is sent to PDU.')
pmPowerMgmtPhasesTablePowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePowerValue.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePowerValue.setDescription('Actual value of power in the phase (W x 10).\n         Returns 0 if not supported.')
pmPowerMgmtPhasesTablePowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePowerMax.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePowerMax.setDescription('Maximum value of power in the phase (W x 10).\n         Returns 0 if not supported.')
pmPowerMgmtPhasesTablePowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePowerMin.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePowerMin.setDescription('Minimum value of power in the phase (W x 10).\n         Returns 0 if not supported.')
pmPowerMgmtPhasesTablePowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePowerAvg.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePowerAvg.setDescription('Average value of power in the phase (W x 10).\n         Returns 0 if not supported.')
pmPowerMgmtPhasesTablePowerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePowerReset.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePowerReset.setDescription('noAction(1) = always returned in a GET. Does nothing if SET.\n         reset(2)  = when SET the reset command is sent to PDU.')
pmPowerMgmtPhasesTablePowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none-sensor", 0), ("estimated", 1), ("measured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePowerType.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePowerType.setDescription('Type of power values.\n                            Returns 0 if not supported.')
pmPowerMgmtPhasesTableVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableVoltageValue.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableVoltageValue.setDescription('Actual value of voltage in the phase (V).\n         Returns 0 if not supported.')
pmPowerMgmtPhasesTableVoltageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableVoltageMax.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableVoltageMax.setDescription('Maximum value of voltage in the phase (V).\n         Returns 0 if not supported.')
pmPowerMgmtPhasesTableVoltageMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableVoltageMin.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableVoltageMin.setDescription('Minimum value of voltage in the phase (V).\n         Returns 0 if not supported.')
pmPowerMgmtPhasesTableVoltageAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableVoltageAvg.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableVoltageAvg.setDescription('Average value of voltage in the phase (V).\n         Returns 0 if not supported.')
pmPowerMgmtPhasesTableVoltageReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableVoltageReset.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableVoltageReset.setDescription('noAction(1) = always returned in a GET. Does nothing if SET.\n         reset(2)  = when SET the reset command is sent to PDU.')
pmPowerMgmtPhasesTableVoltageType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none-sensor", 0), ("estimated", 1), ("measured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableVoltageType.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableVoltageType.setDescription('Type of voltage values.\n                            Returns 0 if not supported.')
pmPowerMgmtPhasesTablePowerFactorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePowerFactorValue.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePowerFactorValue.setDescription('Actual value of power factor in the phase (Pf x 100).\n         Returns 0 if not supported.')
pmPowerMgmtPhasesTablePowerFactorMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePowerFactorMax.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePowerFactorMax.setDescription('Maximum value of power factor in the phase (Pf x 100).\n         Returns 0 if not supported.')
pmPowerMgmtPhasesTablePowerFactorMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePowerFactorMin.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePowerFactorMin.setDescription('Minimum value of power factor in the phase (Pf x 100).\n         Returns 0 if not supported.')
pmPowerMgmtPhasesTablePowerFactorAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePowerFactorAvg.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePowerFactorAvg.setDescription('Average value of power factor in the phase (Pf x 100).\n         Returns 0 if not supported.')
pmPowerMgmtPhasesTablePowerFactorReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePowerFactorReset.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePowerFactorReset.setDescription('noAction(1) = always returned in a GET. Does nothing if SET.\n         reset(2)  = when SET the reset command is sent to PDU.')
pmPowerMgmtPhasesTablePowerFactorType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none-sensor", 0), ("estimated", 1), ("measured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePowerFactorType.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTablePowerFactorType.setDescription('Type of power factor values.\n                            Returns 0 if not supported.')
pmPowerMgmtPhasesTableCurrentHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 100), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableCurrentHighCritical.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableCurrentHighCritical.setDescription('phase high critical (alarm) current threshold (A x 10).\n         Set fails if value is lower that CurrentHighWarning.\n         Returns 0 if not supported.')
pmPowerMgmtPhasesTableCurrentHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 101), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableCurrentHighWarning.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableCurrentHighWarning.setDescription('phase high warning current threshold (A x 10).\n         Set fails if value is higher than CurrentHighCritical or lower than CurrentLowWarning.\n         Returns 0 if not supported.')
pmPowerMgmtPhasesTableCurrentLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 102), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableCurrentLowWarning.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableCurrentLowWarning.setDescription('phase low warning current threshold (A x 10).\n         Set fails if value is higher than CurrentHighWarning or lower than CurrentLowCritical.\n         Returns 0 if not supported.')
pmPowerMgmtPhasesTableCurrentLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 9, 1, 103), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableCurrentLowCritical.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtPhasesTableCurrentLowCritical.setDescription('phase low critical current threshold (A x 10).\n         Set fails if value is higher than CurrentLowWarning.\n         Returns 0 if not supported.')
pmPowerMgmtTotalNumberOfBanks = MibScalar((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtTotalNumberOfBanks.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtTotalNumberOfBanks.setDescription('Number of banks managed by the appliance.')
pmPowerMgmtBanksTable = MibTable((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11), )
if mibBuilder.loadTexts: pmPowerMgmtBanksTable.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTable.setDescription('This table contains the information about banks.')
pmPowerMgmtBanksTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1), ).setIndexNames((0, "PM-MIB", "pmPowerMgmtBanksTablePortNumber"), (0, "PM-MIB", "pmPowerMgmtBanksTablePduNumber"), (0, "PM-MIB", "pmPowerMgmtBanksTableNumber"))
if mibBuilder.loadTexts: pmPowerMgmtBanksTableEntry.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTableEntry.setDescription('each entry has the information about the banks.')
pmPowerMgmtBanksTablePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePortNumber.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePortNumber.setDescription('Serial Port number.')
pmPowerMgmtBanksTablePduNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePduNumber.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePduNumber.setDescription('Index.')
pmPowerMgmtBanksTableNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTableNumber.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTableNumber.setDescription('Number of the bank in the PDU.')
pmPowerMgmtBanksTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTableName.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTableName.setDescription('Name of the bank.')
pmPowerMgmtBanksTablePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePortName.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePortName.setDescription('Serial Port Name where the PDU is connected.')
pmPowerMgmtBanksTablePduId = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePduId.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePduId.setDescription('PDU identification.')
pmPowerMgmtBanksTableAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("blow-fuse", 2), ("hw-ocp", 3), ("high-critical", 4), ("high-warning", 5), ("low-warning", 6), ("low-critical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTableAlarm.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTableAlarm.setDescription('Show the bank alarm status.\n                            Returns 0 if not supported.')
pmPowerMgmtBanksTableCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTableCurrentValue.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTableCurrentValue.setDescription('Actual value of current in the bank (A x 10).\n         Returns 0 if not supported.')
pmPowerMgmtBanksTableCurrentMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTableCurrentMax.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTableCurrentMax.setDescription('Maximum value of current in the bank (A x 10).\n         Returns 0 if not supported.')
pmPowerMgmtBanksTableCurrentMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTableCurrentMin.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTableCurrentMin.setDescription('Minimum value of current in the bank (A x 10).\n         Returns 0 if not supported.')
pmPowerMgmtBanksTableCurrentAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTableCurrentAvg.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTableCurrentAvg.setDescription('Average value of current in the bank (A x 10).\n         Returns 0 if not supported.')
pmPowerMgmtBanksTableCurrentReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtBanksTableCurrentReset.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTableCurrentReset.setDescription('noAction(1) = always returned in a GET. Does nothing if SET.\n         reset(2)  = when SET the reset command is sent to PDU.')
pmPowerMgmtBanksTablePowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePowerValue.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePowerValue.setDescription('Actual value of power in the bank (W x 10).\n          Returns 0 if not supported.')
pmPowerMgmtBanksTablePowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePowerMax.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePowerMax.setDescription('Maximum value of power in the bank (W x 10).\n         Returns 0 if not supported.')
pmPowerMgmtBanksTablePowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePowerMin.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePowerMin.setDescription('Minimum value of power in the bank (W x 10).\n         Returns 0 if not supported.')
pmPowerMgmtBanksTablePowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePowerAvg.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePowerAvg.setDescription('Average value of power in the bank (W x 10).\n         Returns 0 if not supported.')
pmPowerMgmtBanksTablePowerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePowerReset.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePowerReset.setDescription('noAction(1) = always returned in a GET. Does nothing if SET.\n         reset(2)  = when SET the reset command is sent to PDU.')
pmPowerMgmtBanksTablePowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none-sensor", 0), ("estimated", 1), ("measured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePowerType.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePowerType.setDescription('Type of power values.\n                            Returns 0 if not supported.')
pmPowerMgmtBanksTableVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTableVoltageValue.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTableVoltageValue.setDescription('Actual value of voltage in the bank (V).\n         Returns 0 if not supported.')
pmPowerMgmtBanksTableVoltageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTableVoltageMax.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTableVoltageMax.setDescription('Maximum value of voltage in the bank (V).\n         Returns 0 if not supported.')
pmPowerMgmtBanksTableVoltageMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTableVoltageMin.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTableVoltageMin.setDescription('Minimum value of voltage in the bank (V).\n         Returns 0 if not supported.')
pmPowerMgmtBanksTableVoltageAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTableVoltageAvg.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTableVoltageAvg.setDescription('Average value of voltage in the bank (V).\n         Returns 0 if not supported.')
pmPowerMgmtBanksTableVoltageReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtBanksTableVoltageReset.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTableVoltageReset.setDescription('noAction(1) = always returned in a GET. Does nothing if SET.\n         reset(2)  = when SET the reset command is sent to PDU.')
pmPowerMgmtBanksTableVoltageType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none-sensor", 0), ("estimated", 1), ("measured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTableVoltageType.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTableVoltageType.setDescription('Type of voltage values.\n                            Returns 0 if not supported.')
pmPowerMgmtBanksTablePowerFactorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePowerFactorValue.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePowerFactorValue.setDescription('Actual value of power factor in the bank (Pf x 100).\n         Returns 0 if not supported.')
pmPowerMgmtBanksTablePowerFactorMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePowerFactorMax.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePowerFactorMax.setDescription('Maximum value of power factor in the bank (Pf x 100).\n         Returns 0 if not supported.')
pmPowerMgmtBanksTablePowerFactorMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePowerFactorMin.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePowerFactorMin.setDescription('Minimum value of power factor in the bank (Pf x 100).\n         Returns 0 if not supported.')
pmPowerMgmtBanksTablePowerFactorAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePowerFactorAvg.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePowerFactorAvg.setDescription('Average value of power factor in the bank (Pf x 100).\n         Returns 0 if not supported.')
pmPowerMgmtBanksTablePowerFactorReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePowerFactorReset.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePowerFactorReset.setDescription('noAction(1) = always returned in a GET. Does nothing if SET.\n         reset(2)  = when SET the reset command is sent to PDU.')
pmPowerMgmtBanksTablePowerFactorType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none-sensor", 0), ("estimated", 1), ("measured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePowerFactorType.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTablePowerFactorType.setDescription('Type of power factor values.\n                            Returns 0 if not supported.')
pmPowerMgmtBanksTableCurrentHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 100), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtBanksTableCurrentHighCritical.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTableCurrentHighCritical.setDescription('bank high critical (alarm) current threshold (A x 10).\n         Set fails if value is lower that CurrentHighWarning.\n         Returns 0 if not supported.')
pmPowerMgmtBanksTableCurrentHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 101), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtBanksTableCurrentHighWarning.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTableCurrentHighWarning.setDescription('bank high warning current threshold (A x 10).\n         Set fails if value is higher than CurrentHighCritical or lower than CurrentLowWarning.\n         Returns 0 if not supported.')
pmPowerMgmtBanksTableCurrentLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 102), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtBanksTableCurrentLowWarning.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTableCurrentLowWarning.setDescription('bank low warning current threshold (A x 10).\n         Set fails if value is higher than CurrentHighWarning or lower than CurrentLowCritical.\n         Returns 0 if not supported.')
pmPowerMgmtBanksTableCurrentLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 103), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtBanksTableCurrentLowCritical.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTableCurrentLowCritical.setDescription('bank low critical current threshold (A x 10).\n         Set fails if value is higher than CurrentLowWarning.\n         Returns 0 if not supported.')
pmPowerMgmtBanksTableEnergyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 105), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTableEnergyValue.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTableEnergyValue.setDescription('bank energy value (Wh).\n         Returns 0 if not supported.')
pmPowerMgmtBanksTableEnergyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 106), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtBanksTableEnergyStartTime.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTableEnergyStartTime.setDescription('time at which energy calculation commenced (ISO8601 format).\n         Returns N/A if not applicable.')
pmPowerMgmtBanksTableEnergyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 11, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtBanksTableEnergyReset.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtBanksTableEnergyReset.setDescription('noAction(1) = always returned in a GET. Does nothing if SET.\n         reset(2)  = when SET the reset command is sent to PDU.')
pmPowerMgmtTotalNumberOfSensors = MibScalar((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtTotalNumberOfSensors.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtTotalNumberOfSensors.setDescription('Number of Sensors managed by the appliance.')
pmPowerMgmtSensorsTable = MibTable((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13), )
if mibBuilder.loadTexts: pmPowerMgmtSensorsTable.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTable.setDescription('This table contains the information about sensors.')
pmPowerMgmtSensorsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1), ).setIndexNames((0, "PM-MIB", "pmPowerMgmtSensorsTablePortNumber"), (0, "PM-MIB", "pmPowerMgmtSensorsTablePduNumber"), (0, "PM-MIB", "pmPowerMgmtSensorsTableNumber"))
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableEntry.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableEntry.setDescription('each entry has the information about the sensors.')
pmPowerMgmtSensorsTablePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTablePortNumber.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTablePortNumber.setDescription('Serial Port number.')
pmPowerMgmtSensorsTablePduNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTablePduNumber.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTablePduNumber.setDescription('Index.')
pmPowerMgmtSensorsTableNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableNumber.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableNumber.setDescription('Number of the sensor in the PDU.')
pmPowerMgmtSensorsTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableName.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableName.setDescription('Name of the sensor.')
pmPowerMgmtSensorsTablePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTablePortName.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTablePortName.setDescription('Serial Port Name where the PDU is connected.')
pmPowerMgmtSensorsTablePduId = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTablePduId.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTablePduId.setDescription('PDU identification.')
pmPowerMgmtSensorsTableType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("temp-internal", 1), ("temperature", 2), ("humidity", 3), ("air-flow", 4), ("smoke", 5), ("dry-concact", 6), ("water-level", 7), ("motion", 8), ("unplugged", 9), ("unknown", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableType.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableType.setDescription('The type of environmental monitor.\n         Returns 0 if not supported.')
pmPowerMgmtSensorsTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("triggered", 2), ("not-applicable", 3), ("opened", 4), ("closed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableStatus.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableStatus.setDescription('Status of digital sensors: Dry-Contact, Water level, Smoke sensor, Motion sensor.\n         Returns 0 if not supported.')
pmPowerMgmtSensorsTableValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableValue.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableValue.setDescription('Actual value of the sensor.\n         Returns N/A if not applicable.')
pmPowerMgmtSensorsTableValueMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableValueMax.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableValueMax.setDescription('Maximum value of the sensor.\n         Returns N/A if not applicable.')
pmPowerMgmtSensorsTableValueMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableValueMin.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableValueMin.setDescription('Minimum value of the sensor.\n         Returns N/A if not applicable.')
pmPowerMgmtSensorsTableValueAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableValueAvg.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableValueAvg.setDescription('Average value of the sensor.\n         Returns N/A if not applicable.')
pmPowerMgmtSensorsTableValueInt = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableValueInt.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableValueInt.setDescription('Actual value of the sensor.\n         Returns 0 if not supported.')
pmPowerMgmtSensorsTableValueMaxInt = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableValueMaxInt.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableValueMaxInt.setDescription('Maximum value of the sensor.\n        Returns 0 if not supported.')
pmPowerMgmtSensorsTableValueMinInt = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableValueMinInt.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableValueMinInt.setDescription('Minimum value of the sensor.\n        Returns 0 if not supported.')
pmPowerMgmtSensorsTableValueAvgInt = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableValueAvgInt.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableValueAvgInt.setDescription('Average value of the sensor.\n        Returns 0 if not supported.')
pmPowerMgmtSensorsTableValueReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableValueReset.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableValueReset.setDescription('noAction(1) = always returned in a GET. Does nothing if SET.\n         reset(2)  = when SET the reset command is sent to sensor.')
pmPowerMgmtSensorsTableHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableHighCritical.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableHighCritical.setDescription('sensor high critical (alarm) threshold (unit x 10) - use unit as returned by pmPowerMgmtSensorsTableUnit.\n         Set fails if value is lower that CurrentHighWarning.\n         Returns 0 if not supported.')
pmPowerMgmtSensorsTableHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableHighWarning.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableHighWarning.setDescription('sensor high warning threshold (unit x 10) - use unit as returned by pmPowerMgmtSensorsTableUnit.\n         Set fails if value is higher than HighCritical or lower than LowWarning.\n         Returns 0 if not supported.')
pmPowerMgmtSensorsTableLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableLowWarning.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableLowWarning.setDescription('sensor low warning threshold (unit x 10) - use unit as returned by pmPowerMgmtSensorsTableUnit.\n         Set fails if value is higher than HighWarning or lower than LowCritical.\n         Returns 0 if not supported.')
pmPowerMgmtSensorsTableLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableLowCritical.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableLowCritical.setDescription('sensor low critical threshold (unit x 10) - use unit as returned by pmPowerMgmtSensorsTableUnit.\n         Set fails if value is higher than LowWarning.\n         Returns 0 if not supported.')
pmPowerMgmtSensorsTableUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("fahrenheit", 2), ("celsius", 3), ("percent", 4), ("afu", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableUnit.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableUnit.setDescription('sensor unit.\n         Returns 0 if not supported.')
pmPowerMgmtSensorsTableHighCriticalC = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableHighCriticalC.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableHighCriticalC.setDescription('sensor high critical (alarm) threshold (Celcius x 10).\n         to SET: use pmPowerMgmtSensorsTableHighCritical in proper units (pmPowerMgmtSensorsTableUnit).\n         Returns 0 if not supported.')
pmPowerMgmtSensorsTableHighWarningC = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableHighWarningC.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableHighWarningC.setDescription('sensor high warning threshold (Celcius x 10).\n         to SET: use pmPowerMgmtSensorsTableHighWarning in proper units (pmPowerMgmtSensorsTableUnit).\n         Returns 0 if not supported.')
pmPowerMgmtSensorsTableLowWarningC = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableLowWarningC.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableLowWarningC.setDescription('sensor low warning threshold (Celcius x 10).\n         to SET: use pmPowerMgmtSensorsTableLowWarning in proper units (pmPowerMgmtSensorsTableUnit).\n         Returns 0 if not supported.')
pmPowerMgmtSensorsTableLowCriticalC = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableLowCriticalC.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableLowCriticalC.setDescription('sensor low critical threshold (Celcius x 10).\n         to SET: use pmPowerMgmtSensorsTableLowCritical in proper units (pmPowerMgmtSensorsTableUnit).\n         Returns 0 if not supported.')
pmPowerMgmtSensorsTableHighCriticalF = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableHighCriticalF.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableHighCriticalF.setDescription('sensor high critical (alarm) threshold (Fahrenheit x 10).\n         to SET: use pmPowerMgmtSensorsTableHighCritical in proper units (pmPowerMgmtSensorsTableUnit).\n         Returns 0 if not supported.')
pmPowerMgmtSensorsTableHighWarningF = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableHighWarningF.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableHighWarningF.setDescription('sensor high warning threshold (Fahrenheit x 10).\n         to SET: use pmPowerMgmtSensorsTableHighWarning in proper units (pmPowerMgmtSensorsTableUnit).\n         Returns 0 if not supported.')
pmPowerMgmtSensorsTableLowWarningF = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableLowWarningF.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableLowWarningF.setDescription('sensor low warning threshold (Fahrenheit x 10).\n         to SET: use pmPowerMgmtSensorsTableLowWarning in proper units (pmPowerMgmtSensorsTableUnit).\n         Returns 0 if not supported.')
pmPowerMgmtSensorsTableLowCriticalF = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 17, 2, 5, 13, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableLowCriticalF.setStatus('current')
if mibBuilder.loadTexts: pmPowerMgmtSensorsTableLowCriticalF.setDescription('sensor low critical threshold (Fahrenheit x 10).\n         to SET: use pmPowerMgmtSensorsTableLowCritical in proper units (pmPowerMgmtSensorsTableUnit).\n         Returns 0 if not supported.')
mibBuilder.exportSymbols("PM-MIB", pmPowerMgmtSerialTableIndex=pmPowerMgmtSerialTableIndex, pmPowerMgmtBanksTablePortNumber=pmPowerMgmtBanksTablePortNumber, pmPowerMgmtOutletsTablePowerFactorReset=pmPowerMgmtOutletsTablePowerFactorReset, pmPowerMgmtPhasesTableCurrentReset=pmPowerMgmtPhasesTableCurrentReset, pmPowerMgmtPDUTableTemperatureNOS=pmPowerMgmtPDUTableTemperatureNOS, pmActiveSessionsTable=pmActiveSessionsTable, pmPowerMgmtPhasesTableCurrentMin=pmPowerMgmtPhasesTableCurrentMin, pmPowerMgmtPDUTableNumberOfPhases=pmPowerMgmtPDUTableNumberOfPhases, pmPowerMgmtBanksTableEntry=pmPowerMgmtBanksTableEntry, pmPowerMgmtSerialTableEntry=pmPowerMgmtSerialTableEntry, pmPowerMgmtSensorsTablePortNumber=pmPowerMgmtSensorsTablePortNumber, pmPowerMgmt=pmPowerMgmt, pmPowerMgmtPDUTableCurrent2Max=pmPowerMgmtPDUTableCurrent2Max, pmPowerMgmtPDUTableHumidity1Max=pmPowerMgmtPDUTableHumidity1Max, pmPowerMgmtBanksTablePowerFactorReset=pmPowerMgmtBanksTablePowerFactorReset, pmPowerMgmtPDUTableCurrentMin=pmPowerMgmtPDUTableCurrentMin, pmPowerMgmtSensorsTableEntry=pmPowerMgmtSensorsTableEntry, pmPowerMgmtPDUTablePowerFactorMin=pmPowerMgmtPDUTablePowerFactorMin, pmPowerMgmtPDUTableColdStartDelay=pmPowerMgmtPDUTableColdStartDelay, pmPowerMgmtBanksTableVoltageMin=pmPowerMgmtBanksTableVoltageMin, pmPowerMgmtPDUTablePowerFactorType=pmPowerMgmtPDUTablePowerFactorType, pmPowerMgmtBanksTableCurrentAvg=pmPowerMgmtBanksTableCurrentAvg, pmPowerMgmtPDUTableVoltage1Max=pmPowerMgmtPDUTableVoltage1Max, pmPowerMgmtOutletsTablePowerFactorMin=pmPowerMgmtOutletsTablePowerFactorMin, pmPowerMgmtBanksTablePduId=pmPowerMgmtBanksTablePduId, pmPowerMgmtBanksTablePduNumber=pmPowerMgmtBanksTablePduNumber, pmPowerMgmtBanksTableAlarm=pmPowerMgmtBanksTableAlarm, pmPowerMgmtPDUTablePowerFactorReset=pmPowerMgmtPDUTablePowerFactorReset, pmActiveSessionsTableEntry=pmActiveSessionsTableEntry, pmPowerMgmtPDUTableHumidity3Max=pmPowerMgmtPDUTableHumidity3Max, pmPowerMgmtPDUTableVoltageValue=pmPowerMgmtPDUTableVoltageValue, pmPowerMgmtPhasesTablePowerValue=pmPowerMgmtPhasesTablePowerValue, pmPowerMgmtGroupTableIndex=pmPowerMgmtGroupTableIndex, pmPowerMgmtPDUTableReboot=pmPowerMgmtPDUTableReboot, pmPowerMgmtPDUTableHumidity2Value=pmPowerMgmtPDUTableHumidity2Value, pmPowerMgmtBanksTablePortName=pmPowerMgmtBanksTablePortName, pmPowerMgmtBanksTableEnergyReset=pmPowerMgmtBanksTableEnergyReset, pmPowerMgmtPDUTableVoltageReset=pmPowerMgmtPDUTableVoltageReset, pmPowerMgmtPhasesTablePortName=pmPowerMgmtPhasesTablePortName, pm2003=pm2003, pmPowerMgmtTotalNumberOfSensors=pmPowerMgmtTotalNumberOfSensors, pmPowerMgmtSerialTablePollRate=pmPowerMgmtSerialTablePollRate, pmPowerMgmtOutletsTablePowerReset=pmPowerMgmtOutletsTablePowerReset, pmActiveSessionsTableSessionTime=pmActiveSessionsTableSessionTime, pmHostName=pmHostName, pmPowerMgmtPDUTableVoltage2Value=pmPowerMgmtPDUTableVoltage2Value, pmPowerMgmtSerialTableOverCurrent=pmPowerMgmtSerialTableOverCurrent, pmPowerMgmtOutletsTableNumber=pmPowerMgmtOutletsTableNumber, pmPowerMgmtSensorsTableValueReset=pmPowerMgmtSensorsTableValueReset, pmPowerMgmtSensorsTableLowCriticalF=pmPowerMgmtSensorsTableLowCriticalF, pmPowerMgmtPDUTablePowerFactorValue=pmPowerMgmtPDUTablePowerFactorValue, pmPowerMgmtGroupTableName=pmPowerMgmtGroupTableName, pmActiveSessionsTableKill=pmActiveSessionsTableKill, pmPowerMgmtPhasesTableCurrentLowWarning=pmPowerMgmtPhasesTableCurrentLowWarning, pmPowerMgmtOutletsTableAlarm=pmPowerMgmtOutletsTableAlarm, pmPowerMgmtSerialTable=pmPowerMgmtSerialTable, pmPowerMgmtPDUTableVoltage3Value=pmPowerMgmtPDUTableVoltage3Value, pmPowerMgmtPDUTableNumberOfBanks=pmPowerMgmtPDUTableNumberOfBanks, pmPowerMgmtOutletsTablePortNumber=pmPowerMgmtOutletsTablePortNumber, pmPowerMgmtSerialTableNumberPDUs=pmPowerMgmtSerialTableNumberPDUs, pmPowerMgmtSensorsTableValueMaxInt=pmPowerMgmtSensorsTableValueMaxInt, pmPowerMgmtBanksTableName=pmPowerMgmtBanksTableName, pmPowerMgmtPDUTableTemperature1Value=pmPowerMgmtPDUTableTemperature1Value, pmPowerMgmtPDUTablePowerReset=pmPowerMgmtPDUTablePowerReset, pmPowerMgmtOutletsTableName=pmPowerMgmtOutletsTableName, pmPowerMgmtPDUTableVoltage3Max=pmPowerMgmtPDUTableVoltage3Max, pmPowerMgmtOutletsTableCurrentLowWarning=pmPowerMgmtOutletsTableCurrentLowWarning, pmPowerMgmtPhasesTableNumber=pmPowerMgmtPhasesTableNumber, pmPowerMgmtPhasesTableCurrentLowCritical=pmPowerMgmtPhasesTableCurrentLowCritical, pmPowerMgmtBanksTableEnergyValue=pmPowerMgmtBanksTableEnergyValue, pmPowerMgmtOutletsTablePortName=pmPowerMgmtOutletsTablePortName, pm2010=pm2010, pmPowerMgmtPDUTableCurrent3Value=pmPowerMgmtPDUTableCurrent3Value, pmActiveSessionsTableIndex=pmActiveSessionsTableIndex, pmPowerMgmtPhasesTablePowerFactorMax=pmPowerMgmtPhasesTablePowerFactorMax, pmPowerMgmtSensorsTableValueMinInt=pmPowerMgmtSensorsTableValueMinInt, pmPowerMgmtPDUTableCurrentReset=pmPowerMgmtPDUTableCurrentReset, pmPowerMgmtBanksTablePowerReset=pmPowerMgmtBanksTablePowerReset, pmPowerMgmtBanksTableCurrentLowWarning=pmPowerMgmtBanksTableCurrentLowWarning, pmPowerMgmtPDUTableCurrentValue=pmPowerMgmtPDUTableCurrentValue, pmPowerMgmtPhasesTablePowerFactorMin=pmPowerMgmtPhasesTablePowerFactorMin, pmPowerMgmtSensorsTableLowCritical=pmPowerMgmtSensorsTableLowCritical, pmPowerMgmtPDUTableCurrentHighCritical=pmPowerMgmtPDUTableCurrentHighCritical, pm3003=pm3003, pmPowerMgmtPDUTableHumidity3Value=pmPowerMgmtPDUTableHumidity3Value, pmPowerMgmtOutletsTablePowerFactorValue=pmPowerMgmtOutletsTablePowerFactorValue, pmPowerMgmtSensorsTableHighCriticalC=pmPowerMgmtSensorsTableHighCriticalC, pmPowerMgmtPDUTableEnergyReset=pmPowerMgmtPDUTableEnergyReset, pmPowerMgmtSensorsTableHighWarning=pmPowerMgmtSensorsTableHighWarning, pmPowerMgmtSerialTableSyslog=pmPowerMgmtSerialTableSyslog, pmPowerMgmtBanksTablePowerFactorAvg=pmPowerMgmtBanksTablePowerFactorAvg, pmPowerMgmtSerialTableRestore=pmPowerMgmtSerialTableRestore, pmReboot=pmReboot, pmPowerMgmtPDUTableCurrent3Max=pmPowerMgmtPDUTableCurrent3Max, pmPowerMgmtGroupTableEntry=pmPowerMgmtGroupTableEntry, pm2006=pm2006, pmPowerMgmtPDUTableMaxCurrent=pmPowerMgmtPDUTableMaxCurrent, pmPowerMgmtBanksTableCurrentHighCritical=pmPowerMgmtBanksTableCurrentHighCritical, pm2024=pm2024, pmPowerMgmtPDUTableNumberOfSensors=pmPowerMgmtPDUTableNumberOfSensors, pmPowerMgmtBanksTableVoltageMax=pmPowerMgmtBanksTableVoltageMax, pmPowerMgmtSensorsTableHighWarningC=pmPowerMgmtSensorsTableHighWarningC, pmPowerMgmtSensorsTableType=pmPowerMgmtSensorsTableType, pmPowerMgmtOutletsTableEnergyStartTime=pmPowerMgmtOutletsTableEnergyStartTime, pmPowerMgmtOutletsTablePostOffDelay=pmPowerMgmtOutletsTablePostOffDelay, pmPowerMgmtBanksTableCurrentValue=pmPowerMgmtBanksTableCurrentValue, pmPowerMgmtOutletsTableCurrentLowCritical=pmPowerMgmtOutletsTableCurrentLowCritical, pmPowerMgmtSensorsTableHighCriticalF=pmPowerMgmtSensorsTableHighCriticalF, pmPowerMgmtPDUTable=pmPowerMgmtPDUTable, pmPowerMgmtBanksTablePowerMax=pmPowerMgmtBanksTablePowerMax, pmEIDNumber=pmEIDNumber, pm1010=pm1010, pmPowerMgmtBanksTablePowerFactorMin=pmPowerMgmtBanksTablePowerFactorMin, pmPowerMgmtSensorsTableValueMax=pmPowerMgmtSensorsTableValueMax, pmPowerMgmtBanksTablePowerMin=pmPowerMgmtBanksTablePowerMin, pmPowerMgmtPDUTableFactoryDefault=pmPowerMgmtPDUTableFactoryDefault, pmPowerMgmtPDUTableCurrent1Max=pmPowerMgmtPDUTableCurrent1Max, pmPowerMgmtPDUTableCurrentHighWarning=pmPowerMgmtPDUTableCurrentHighWarning, pmProductModel=pmProductModel, pmPowerMgmtPDUTableTemperature3Value=pmPowerMgmtPDUTableTemperature3Value, pmPowerMgmtPDUTableVoltageType=pmPowerMgmtPDUTableVoltageType, pmPowerMgmtSensorsTableUnit=pmPowerMgmtSensorsTableUnit, pmPowerMgmtOutletsTablePowerFactorAvg=pmPowerMgmtOutletsTablePowerFactorAvg, pmPowerMgmtPDUTableCurrent1Value=pmPowerMgmtPDUTableCurrent1Value, pmPowerMgmtOutletsTablePowerValue=pmPowerMgmtOutletsTablePowerValue, pmPowerMgmtOutletsTable=pmPowerMgmtOutletsTable, pmPowerMgmtPhasesTableVoltageReset=pmPowerMgmtPhasesTableVoltageReset, pmPowerMgmtPDUTablePowerValue=pmPowerMgmtPDUTablePowerValue, pmPowerMgmtOutletsTableEntry=pmPowerMgmtOutletsTableEntry, pmPowerMgmtPDUTableHumidity2Max=pmPowerMgmtPDUTableHumidity2Max, pmPowerMgmtOutletsTableStatus=pmPowerMgmtOutletsTableStatus, pmPowerMgmtPhasesTablePowerFactorReset=pmPowerMgmtPhasesTablePowerFactorReset, pmPowerMgmtPDUTableCurrentAvg=pmPowerMgmtPDUTableCurrentAvg, pmPowerMgmtPDUTablePowerFactorMax=pmPowerMgmtPDUTablePowerFactorMax, pmPowerMgmtPhasesTablePowerFactorValue=pmPowerMgmtPhasesTablePowerFactorValue, pmPowerMgmtSensorsTableValueMin=pmPowerMgmtSensorsTableValueMin, pmPowerMgmtBanksTableCurrentReset=pmPowerMgmtBanksTableCurrentReset, pmPowerMgmtSensorsTableValueAvg=pmPowerMgmtSensorsTableValueAvg, pmPowerMgmtSensorsTableHighWarningF=pmPowerMgmtSensorsTableHighWarningF, pmPowerMgmtPDUTableTemperature1Max=pmPowerMgmtPDUTableTemperature1Max, pmPowerMgmtBanksTableVoltageReset=pmPowerMgmtBanksTableVoltageReset, pmPowerMgmtOutletsTablePduNumber=pmPowerMgmtOutletsTablePduNumber, pmPowerMgmtOutletsTableCurrentAvg=pmPowerMgmtOutletsTableCurrentAvg, pmPowerMgmtSensorsTable=pmPowerMgmtSensorsTable, pmProducts=pmProducts, pmPowerMgmtPhasesTablePduId=pmPowerMgmtPhasesTablePduId, pmPowerMgmtPDUTableResetOCP=pmPowerMgmtPDUTableResetOCP, pmPowerMgmtOutletsTableEnergyReset=pmPowerMgmtOutletsTableEnergyReset, pmPowerMgmtPhasesTablePortNumber=pmPowerMgmtPhasesTablePortNumber, pmPowerMgmtPhasesTableEntry=pmPowerMgmtPhasesTableEntry, pmPowerMgmtOutletsTableVoltageType=pmPowerMgmtOutletsTableVoltageType, pmPowerMgmtPDUTableTemperature3Max=pmPowerMgmtPDUTableTemperature3Max, pmPowerMgmtGroupTablePowerControl=pmPowerMgmtGroupTablePowerControl, pmPowerMgmtPDUTableVoltage2Max=pmPowerMgmtPDUTableVoltage2Max, pmPowerMgmtOutletsTablePowerControl=pmPowerMgmtOutletsTablePowerControl, pmPowerMgmtPDUTablePduId=pmPowerMgmtPDUTablePduId, pmPowerMgmtPDUTablePowerMax=pmPowerMgmtPDUTablePowerMax, PYSNMP_MODULE_ID=pm, pmPowerMgmtPDUTableTemperature2Max=pmPowerMgmtPDUTableTemperature2Max, pmPowerMgmtOutletsTableVoltageReset=pmPowerMgmtOutletsTableVoltageReset, pmPowerMgmtTotalNumberOfBanks=pmPowerMgmtTotalNumberOfBanks, pmActiveSessionsTableFrom=pmActiveSessionsTableFrom, pmActiveSessionsTableConnection=pmActiveSessionsTableConnection, pm=pm, pmPowerMgmtPhasesTableVoltageAvg=pmPowerMgmtPhasesTableVoltageAvg, pmPowerMgmtPhasesTablePowerMax=pmPowerMgmtPhasesTablePowerMax, pm1020=pm1020, pmPowerMgmtPDUTableVoltageMax=pmPowerMgmtPDUTableVoltageMax, pmPowerMgmtBanksTablePowerFactorMax=pmPowerMgmtBanksTablePowerFactorMax, pmPowerMgmtPhasesTablePowerReset=pmPowerMgmtPhasesTablePowerReset, pmPowerMgmtBanksTableVoltageAvg=pmPowerMgmtBanksTableVoltageAvg, pmPowerMgmtPDUTableEnergyValue=pmPowerMgmtPDUTableEnergyValue, pmPowerMgmtSensorsTablePduId=pmPowerMgmtSensorsTablePduId, pmPowerMgmtPDUTableTemperature2Value=pmPowerMgmtPDUTableTemperature2Value, pmPowerMgmtSensorsTableLowWarning=pmPowerMgmtSensorsTableLowWarning, pmPowerMgmtPDUTableVoltageMin=pmPowerMgmtPDUTableVoltageMin, pm2020=pm2020, pmPowerMgmtOutletsTablePduId=pmPowerMgmtOutletsTablePduId, pmPowerMgmtPhasesTableVoltageType=pmPowerMgmtPhasesTableVoltageType, pmPowerMgmtPDUTableVendor=pmPowerMgmtPDUTableVendor, pmPowerMgmtPDUTablePowerAvg=pmPowerMgmtPDUTablePowerAvg, pmPowerMgmtSerialTablePortNumber=pmPowerMgmtSerialTablePortNumber, pmPowerMgmtBanksTablePowerFactorType=pmPowerMgmtBanksTablePowerFactorType, pmPowerMgmtOutletsTablePostOnDelay=pmPowerMgmtOutletsTablePostOnDelay, pmActiveSessionsTableUser=pmActiveSessionsTableUser, pmPowerMgmtPDUTableCurrentMax=pmPowerMgmtPDUTableCurrentMax, pmPowerMgmtOutletsTablePowerFactorType=pmPowerMgmtOutletsTablePowerFactorType, pm3024=pm3024, pmPowerMgmtPDUTableEntry=pmPowerMgmtPDUTableEntry, pmPowerMgmtSensorsTableValueAvgInt=pmPowerMgmtSensorsTableValueAvgInt, pmPowerMgmtTotalNumberOfPhases=pmPowerMgmtTotalNumberOfPhases, pmAppliance=pmAppliance, pmPowerMgmtPDUTablePduIndex=pmPowerMgmtPDUTablePduIndex, pmPowerMgmtPhasesTableAlarm=pmPowerMgmtPhasesTableAlarm, pmPowerMgmtPhasesTableCurrentHighCritical=pmPowerMgmtPhasesTableCurrentHighCritical, pmPowerMgmtOutletsTableVoltageValue=pmPowerMgmtOutletsTableVoltageValue, pmPowerMgmtPDUTableHumidityNOS=pmPowerMgmtPDUTableHumidityNOS, pmTrapObject=pmTrapObject, pmActiveSessionsNumberOfSession=pmActiveSessionsNumberOfSession, pmSessions=pmSessions, pmPowerMgmtPDUTableEnergyStartTime=pmPowerMgmtPDUTableEnergyStartTime, pmBootcodeVersion=pmBootcodeVersion, pmPowerMgmtPhasesTablePowerAvg=pmPowerMgmtPhasesTablePowerAvg, pmPowerMgmtPhasesTableCurrentMax=pmPowerMgmtPhasesTableCurrentMax, pmPowerMgmtOutletsTableEnergyValue=pmPowerMgmtOutletsTableEnergyValue, pmActiveSessionsTableGroup=pmActiveSessionsTableGroup, pmPowerMgmtOutletsTableCurrentValue=pmPowerMgmtOutletsTableCurrentValue, pmPowerMgmtBanksTable=pmPowerMgmtBanksTable, pmPowerMgmtSerialTableBuzzer=pmPowerMgmtSerialTableBuzzer, pmPowerMgmtPhasesTablePowerFactorType=pmPowerMgmtPhasesTablePowerFactorType, pmPowerMgmtOutletsTablePowerMin=pmPowerMgmtOutletsTablePowerMin, pmPowerMgmtPhasesTablePowerMin=pmPowerMgmtPhasesTablePowerMin, pmPowerMgmtPhasesTableVoltageMax=pmPowerMgmtPhasesTableVoltageMax, pmPowerMgmtPDUTableCurrent2Value=pmPowerMgmtPDUTableCurrent2Value, pmPowerMgmtPDUTableFirmwareVersion=pmPowerMgmtPDUTableFirmwareVersion, pmPowerMgmtGroupTableStatus=pmPowerMgmtGroupTableStatus, pmPowerMgmtPDUTablePortNumber=pmPowerMgmtPDUTablePortNumber, pmPowerMgmtBanksTableVoltageType=pmPowerMgmtBanksTableVoltageType, pmPowerMgmtBanksTableNumber=pmPowerMgmtBanksTableNumber, pmPowerMgmtNumberOfOutletGroup=pmPowerMgmtNumberOfOutletGroup, pmPowerMgmtSerialTablePassWord=pmPowerMgmtSerialTablePassWord, pmPowerMgmtPhasesTable=pmPowerMgmtPhasesTable, pmPowerMgmtOutletsTableVoltageMax=pmPowerMgmtOutletsTableVoltageMax, pmPowerMgmtSensorsTableValueInt=pmPowerMgmtSensorsTableValueInt, pmPowerMgmtSensorsTableHighCritical=pmPowerMgmtSensorsTableHighCritical, pmPowerMgmtSensorsTableLowWarningF=pmPowerMgmtSensorsTableLowWarningF, pmPowerMgmtPDUTableVoltageAvg=pmPowerMgmtPDUTableVoltageAvg, pmPowerMgmtOutletsTableCurrentMin=pmPowerMgmtOutletsTableCurrentMin, pmPowerMgmtPhasesTablePduNumber=pmPowerMgmtPhasesTablePduNumber, pmPowerMgmtPDUTableVoltageNOS=pmPowerMgmtPDUTableVoltageNOS, pmPowerMgmtPhasesTablePowerFactorAvg=pmPowerMgmtPhasesTablePowerFactorAvg, pmPowerMgmtPhasesTableVoltageValue=pmPowerMgmtPhasesTableVoltageValue, pmActiveSessionsTableType=pmActiveSessionsTableType, pm3006=pm3006, pmPowerMgmtPDUTablePowerFactorAvg=pmPowerMgmtPDUTablePowerFactorAvg, pmPowerMgmtOutletsTablePowerFactorMax=pmPowerMgmtOutletsTablePowerFactorMax, pmPowerMgmtSensorsTablePduNumber=pmPowerMgmtSensorsTablePduNumber, pmPowerMgmtPDUTablePowerMin=pmPowerMgmtPDUTablePowerMin, pmPowerMgmtPDUTableVoltage1Value=pmPowerMgmtPDUTableVoltage1Value, pmPowerMgmtSensorsTableStatus=pmPowerMgmtSensorsTableStatus, pmPowerMgmtPDUTableModel=pmPowerMgmtPDUTableModel, pmPowerMgmtOutletsTablePowerMax=pmPowerMgmtOutletsTablePowerMax, pmPowerMgmtSerialTableDeviceName=pmPowerMgmtSerialTableDeviceName, pmPowerMgmtBanksTablePowerType=pmPowerMgmtBanksTablePowerType, pmPowerMgmtBanksTablePowerValue=pmPowerMgmtBanksTablePowerValue, pm1024=pm1024, pmPowerMgmtPDUTableCurrentLowCritical=pmPowerMgmtPDUTableCurrentLowCritical, pmPowerMgmtPDUTablePowerControl=pmPowerMgmtPDUTablePowerControl, pmPowerMgmtBanksTableVoltageValue=pmPowerMgmtBanksTableVoltageValue, pmPowerMgmtPhasesTablePowerType=pmPowerMgmtPhasesTablePowerType, pmPowerMgmtSerialTableCycleInterval=pmPowerMgmtSerialTableCycleInterval, pm3020=pm3020, pmPowerMgmtOutletsTableVoltageMin=pmPowerMgmtOutletsTableVoltageMin, pmPowerMgmtPDUTableNumberOfOutlets=pmPowerMgmtPDUTableNumberOfOutlets)
mibBuilder.exportSymbols("PM-MIB", pmPowerMgmtOutletsTablePowerAvg=pmPowerMgmtOutletsTablePowerAvg, pm3010=pm3010, pmPowerMgmtBanksTableCurrentLowCritical=pmPowerMgmtBanksTableCurrentLowCritical, pmPowerMgmtBanksTableCurrentHighWarning=pmPowerMgmtBanksTableCurrentHighWarning, pmPowerMgmtTotalNumberOfOutlets=pmPowerMgmtTotalNumberOfOutlets, pmPowerMgmtNumSerialPorts=pmPowerMgmtNumSerialPorts, pmPowerMgmtPDUTablePortName=pmPowerMgmtPDUTablePortName, pmPowerMgmtOutletsTableCurrentHighWarning=pmPowerMgmtOutletsTableCurrentHighWarning, pmPowerMgmtGroupTable=pmPowerMgmtGroupTable, pmPowerMgmtPhasesTableCurrentValue=pmPowerMgmtPhasesTableCurrentValue, pmPowerMgmtBanksTablePowerAvg=pmPowerMgmtBanksTablePowerAvg, pmPowerMgmtSensorsTableLowWarningC=pmPowerMgmtSensorsTableLowWarningC, pmPowerMgmtPhasesTableCurrentAvg=pmPowerMgmtPhasesTableCurrentAvg, pmPowerMgmtSensorsTableValue=pmPowerMgmtSensorsTableValue, pmPowerMgmtPDUTableCurrentNOS=pmPowerMgmtPDUTableCurrentNOS, pmPowerMgmtOutletsTableVoltageAvg=pmPowerMgmtOutletsTableVoltageAvg, pmPowerMgmtBanksTableCurrentMax=pmPowerMgmtBanksTableCurrentMax, pmPowerMgmtPhasesTableCurrentHighWarning=pmPowerMgmtPhasesTableCurrentHighWarning, pmPowerMgmtBanksTableEnergyStartTime=pmPowerMgmtBanksTableEnergyStartTime, pmPowerMgmtOutletsTableCurrentMax=pmPowerMgmtOutletsTableCurrentMax, pmSerialNumber=pmSerialNumber, pmPowerMgmtOutletsTableCurrentReset=pmPowerMgmtOutletsTableCurrentReset, pmPowerMgmtPDUTableCurrentLowWarning=pmPowerMgmtPDUTableCurrentLowWarning, pmPartNumber=pmPartNumber, pmPowerMgmtOutletsTableCurrentHighCritical=pmPowerMgmtOutletsTableCurrentHighCritical, pmPowerMgmtSensorsTableNumber=pmPowerMgmtSensorsTableNumber, pmPowerMgmtOutletsTablePowerType=pmPowerMgmtOutletsTablePowerType, pmPowerMgmtSensorsTableName=pmPowerMgmtSensorsTableName, pmPowerMgmtPDUTablePowerType=pmPowerMgmtPDUTablePowerType, pmPowerMgmtPhasesTableVoltageMin=pmPowerMgmtPhasesTableVoltageMin, pmPowerMgmtSensorsTablePortName=pmPowerMgmtSensorsTablePortName, pmPowerMgmtPhasesTableName=pmPowerMgmtPhasesTableName, pmPowerMgmtBanksTableCurrentMin=pmPowerMgmtBanksTableCurrentMin, pmPowerMgmtPDUTableAlarm=pmPowerMgmtPDUTableAlarm, pmPowerMgmtBanksTablePowerFactorValue=pmPowerMgmtBanksTablePowerFactorValue, pmPowerMgmtSerialTableSave=pmPowerMgmtSerialTableSave, pmPowerMgmtPDUTableHumidity1Value=pmPowerMgmtPDUTableHumidity1Value, pmPowerMgmtSensorsTableLowCriticalC=pmPowerMgmtSensorsTableLowCriticalC, pmFirmwareVersion=pmFirmwareVersion, pmManagement=pmManagement)
