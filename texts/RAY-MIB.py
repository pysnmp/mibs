#
# PySNMP MIB module RAY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/ray/RAY-MIB
# Produced by pysmi-1.1.12 at Fri Jul 19 10:09:51 2024
# On host fv-az1771-969 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
snmpTraps, = mibBuilder.importSymbols("SNMPv2-MIB", "snmpTraps")
mib_2, Gauge32, Integer32, TimeTicks, Unsigned32, NotificationType, Counter64, IpAddress, Bits, ModuleIdentity, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, MibIdentifier, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "mib-2", "Gauge32", "Integer32", "TimeTicks", "Unsigned32", "NotificationType", "Counter64", "IpAddress", "Bits", "ModuleIdentity", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "MibIdentifier", "Counter32", "iso")
DateAndTime, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TextualConvention")
ray = ModuleIdentity((1, 3, 6, 1, 4, 1, 33555, 1))
ray.setRevisions(('2016-10-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ray.setRevisionsDescriptions(('Latest version of this MIB module',))
if mibBuilder.loadTexts: ray.setLastUpdated('201610040000Z')
if mibBuilder.loadTexts: ray.setOrganization('Racom s.r.o')
if mibBuilder.loadTexts: ray.setContactInfo('Racom s.r.o\n\t\t\tMirova 1283\n\t\t\t592 31 Nove Mesto na Morave\n\t\t\tCzech Republic\n\t\t\tTel: +420 565 659 511\n\t\t\tFax: +420 565 659 512\n\t\t\tE-mail: racom@racom.eu')
if mibBuilder.loadTexts: ray.setDescription('The MIB module defines management objects for RAy product series. Revision 201610040000Z.')
class DisplayString(OctetString):
    pass

class PhysAddress(OctetString):
    pass

class ServiceState(TextualConvention, Integer32):
    description = 'System service or device state.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("na", 0), ("up", 1), ("down", 2))

class AlarmState(TextualConvention, Integer32):
    description = 'Alarm status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("na", 0), ("up", 1), ("down", 2), ("ack", 3))

class OptionSetting(TextualConvention, Integer32):
    description = 'Setting of some options.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("na", 0), ("on", 1), ("off", 2))

class ModulationList(TextualConvention, Integer32):
    description = 'Radio channel modulations numerical list'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("na", 0), ("qpsk", 1), ("qam16", 2), ("qam32", 3), ("qam64", 4), ("qam128", 5), ("qam256", 6))

racom = MibIdentifier((1, 3, 6, 1, 4, 1, 33555))
station = MibIdentifier((1, 3, 6, 1, 4, 1, 33555, 1, 1))
interface = MibIdentifier((1, 3, 6, 1, 4, 1, 33555, 1, 2))
statistic = MibIdentifier((1, 3, 6, 1, 4, 1, 33555, 1, 3))
rayTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 33555, 1, 10))
ray2Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 33555, 1, 11))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 33555, 1, 1, 1))
info = MibIdentifier((1, 3, 6, 1, 4, 1, 33555, 1, 1, 2))
status = MibIdentifier((1, 3, 6, 1, 4, 1, 33555, 1, 1, 3))
chassis = MibIdentifier((1, 3, 6, 1, 4, 1, 33555, 1, 1, 4))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 33555, 1, 1, 5))
access = MibIdentifier((1, 3, 6, 1, 4, 1, 33555, 1, 1, 6))
authorization = MibIdentifier((1, 3, 6, 1, 4, 1, 33555, 1, 1, 7))
alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 33555, 1, 1, 8))
productName = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productName.setStatus('current')
if mibBuilder.loadTexts: productName.setDescription('Product name.')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
if mibBuilder.loadTexts: serialNumber.setDescription('Product serial number.')
unitType = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitType.setStatus('current')
if mibBuilder.loadTexts: unitType.setDescription('Station type (L or H) and number of the Ethernet ports (1 or 2).')
deviceName = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceName.setStatus('current')
if mibBuilder.loadTexts: deviceName.setDescription('Station name.')
swVer = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swVer.setStatus('current')
if mibBuilder.loadTexts: swVer.setDescription('Firmware version.')
swVerRadio = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swVerRadio.setStatus('current')
if mibBuilder.loadTexts: swVerRadio.setDescription('Radio firmware version.')
systemStatus = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("na", 0), ("ok", 1), ("warning", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatus.setStatus('current')
if mibBuilder.loadTexts: systemStatus.setDescription('Unit status.')
lineStatus = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("na", 0), ("ok", 1), ("analyzer", 2), ("connecting", 3), ("searching", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineStatus.setStatus('current')
if mibBuilder.loadTexts: lineStatus.setDescription('Radio link status. Supported by RAy10 only.')
peerNumber = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 3, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peerNumber.setStatus('current')
if mibBuilder.loadTexts: peerNumber.setDescription('Peer station serial number.')
rfPowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("ok", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfPowerStatus.setStatus('current')
if mibBuilder.loadTexts: rfPowerStatus.setDescription('RF Power amplifier OK/Failure.')
searchModeDisabled = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 3, 5), OptionSetting()).setMaxAccess("readonly")
if mibBuilder.loadTexts: searchModeDisabled.setStatus('current')
if mibBuilder.loadTexts: searchModeDisabled.setDescription('Search mode disabled on/off. Supported by RAy10 only.')
ethPeer = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 3, 6), ServiceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPeer.setStatus('current')
if mibBuilder.loadTexts: ethPeer.setDescription('Peer station user Ethernet link status. Not supported by RAy2.')
securePeerMode = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 3, 7), OptionSetting()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securePeerMode.setStatus('current')
if mibBuilder.loadTexts: securePeerMode.setDescription('Secure peer mode. Not supported by RAy10.')
lineStatusII = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("na", 0), ("setup", 1), ("single", 2), ("connecting", 3), ("authorizing", 4), ("ok", 5), ("analyzer", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineStatusII.setStatus('current')
if mibBuilder.loadTexts: lineStatusII.setDescription('Radio link status. Not supported by RAy10.')
eth1Link = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 3, 9), ServiceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eth1Link.setStatus('current')
if mibBuilder.loadTexts: eth1Link.setDescription('Ethernet 1 link status. Supported by RAy2 only.')
eth2Link = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 3, 10), ServiceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eth2Link.setStatus('current')
if mibBuilder.loadTexts: eth2Link.setDescription('Ethernet 2 link status. Supported by RAy2 only.')
temperatureModem = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureModem.setStatus('current')
if mibBuilder.loadTexts: temperatureModem.setDescription('Modem temperature in hundredths of Celsius (C).')
temperatureRadio = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureRadio.setStatus('current')
if mibBuilder.loadTexts: temperatureRadio.setDescription('Radio temperature in hundredths of Celsius (C).')
voltageUnit = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageUnit.setStatus('current')
if mibBuilder.loadTexts: voltageUnit.setDescription('Power supply voltage in tenths of Volts (V).')
voltageSource = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("aux", 1), ("poe", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageSource.setStatus('current')
if mibBuilder.loadTexts: voltageSource.setDescription('Source of supply voltage. Supported by RAy2 only.')
useCpu = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: useCpu.setStatus('current')
if mibBuilder.loadTexts: useCpu.setDescription('System use CPU in %.')
useMemory = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: useMemory.setStatus('current')
if mibBuilder.loadTexts: useMemory.setDescription('System use memory in %.')
useLogStorage = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: useLogStorage.setStatus('current')
if mibBuilder.loadTexts: useLogStorage.setDescription('Use storage for log in %.')
sshd = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("onlykey", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshd.setStatus('current')
if mibBuilder.loadTexts: sshd.setDescription('Management interface: SSH.')
telnetd = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 6, 2), OptionSetting()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetd.setStatus('current')
if mibBuilder.loadTexts: telnetd.setDescription('Management interface: Telnet.')
httpd = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 6, 3), OptionSetting()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpd.setStatus('current')
if mibBuilder.loadTexts: httpd.setDescription('Management interface: HTTP.')
ip = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 6, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip.setStatus('current')
if mibBuilder.loadTexts: ip.setDescription('Management interface: IP address.')
mac = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 6, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mac.setStatus('current')
if mibBuilder.loadTexts: mac.setDescription('Management interface: MAC address.')
managementVlan = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 6, 6), OptionSetting()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementVlan.setStatus('current')
if mibBuilder.loadTexts: managementVlan.setDescription('Management interface: VLAN on/off.')
managementVlanId = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementVlanId.setStatus('current')
if mibBuilder.loadTexts: managementVlanId.setDescription('Management interface: VLAN ID.')
wifiHAP = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 6, 8), OptionSetting()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wifiHAP.setStatus('current')
if mibBuilder.loadTexts: wifiHAP.setDescription('Management interface: WiFi Host Access Point.')
keyTable = MibTable((1, 3, 6, 1, 4, 1, 33555, 1, 1, 7, 1), )
if mibBuilder.loadTexts: keyTable.setStatus('current')
if mibBuilder.loadTexts: keyTable.setDescription('List of product key entries. Supported by RAy10 only.')
keyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33555, 1, 1, 7, 1, 1), ).setIndexNames((0, "RAY-MIB", "keyName"))
if mibBuilder.loadTexts: keyEntry.setStatus('current')
if mibBuilder.loadTexts: keyEntry.setDescription('Product key entry. Supported by RAy10 only.')
keyName = MibTableColumn((1, 3, 6, 1, 4, 1, 33555, 1, 1, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyName.setStatus('current')
if mibBuilder.loadTexts: keyName.setDescription('Product key name. Supported by RAy10 only.')
alarmTemperature = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 8, 1), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTemperature.setStatus('current')
if mibBuilder.loadTexts: alarmTemperature.setDescription('Temperature alarm state. Supported by RAy2 only.')
alarmVoltageLow = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 8, 2), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmVoltageLow.setStatus('current')
if mibBuilder.loadTexts: alarmVoltageLow.setDescription('Low voltage alarm state. Supported by RAy2 only.')
alarmVoltageHigh = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 8, 3), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmVoltageHigh.setStatus('current')
if mibBuilder.loadTexts: alarmVoltageHigh.setDescription('High voltage alarm state. Supported by RAy2 only.')
alarmRss = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 8, 4), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmRss.setStatus('current')
if mibBuilder.loadTexts: alarmRss.setDescription('RSS alarm state. Supported by RAy2 only.')
alarmSnr = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 8, 5), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSnr.setStatus('current')
if mibBuilder.loadTexts: alarmSnr.setDescription('SNR alarm state. Supported by RAy2 only.')
alarmBer = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 8, 6), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmBer.setStatus('current')
if mibBuilder.loadTexts: alarmBer.setDescription('BER alarm state. Supported by RAy2 only.')
alarmPeerDisconnected = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 8, 7), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmPeerDisconnected.setStatus('current')
if mibBuilder.loadTexts: alarmPeerDisconnected.setDescription('Peer disconnect alarm state. Supported by RAy2 only.')
alarmEth1Down = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 8, 8), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEth1Down.setStatus('current')
if mibBuilder.loadTexts: alarmEth1Down.setDescription('Ethernet 1 Link Down alarm state. Supported by RAy2 only.')
alarmEth2Down = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 8, 9), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEth2Down.setStatus('current')
if mibBuilder.loadTexts: alarmEth2Down.setDescription('Ethernet 2 Link Down alarm state. Supported by RAy2 only.')
alarmRfPowerFail = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 8, 10), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmRfPowerFail.setStatus('current')
if mibBuilder.loadTexts: alarmRfPowerFail.setDescription('RF Power Fail alarm state. Supported by RAy2 only.')
alarmNetBitrate = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 8, 11), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmNetBitrate.setStatus('current')
if mibBuilder.loadTexts: alarmNetBitrate.setDescription('Air Speed below Limit alarm state. Supported by RAy2 only.')
alarmWifiOn = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 1, 8, 12), AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmWifiOn.setStatus('current')
if mibBuilder.loadTexts: alarmWifiOn.setDescription('WiFi Host Access Oint on. Supported by RAy2 only.')
ifRadio = MibIdentifier((1, 3, 6, 1, 4, 1, 33555, 1, 2, 1))
ifEth = MibIdentifier((1, 3, 6, 1, 4, 1, 33555, 1, 2, 2))
rxChannel = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxChannel.setStatus('current')
if mibBuilder.loadTexts: rxChannel.setDescription('Receiver channel ID.')
txChannel = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txChannel.setStatus('current')
if mibBuilder.loadTexts: txChannel.setDescription('Transceiver channel ID.')
rxFreq = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxFreq.setStatus('current')
if mibBuilder.loadTexts: rxFreq.setDescription('Receiver frequency in kHz.')
txFreq = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txFreq.setStatus('current')
if mibBuilder.loadTexts: txFreq.setDescription('Transceiver frequency in kHz.')
rxModulation = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxModulation.setStatus('current')
if mibBuilder.loadTexts: rxModulation.setDescription('Rx modulation text ID.')
txModulation = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txModulation.setStatus('current')
if mibBuilder.loadTexts: txModulation.setDescription('Tx modulation text ID.')
rxModulationIndex = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 2, 1, 7), ModulationList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxModulationIndex.setStatus('current')
if mibBuilder.loadTexts: rxModulationIndex.setDescription('Rx modulation index.')
txModulationIndex = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 2, 1, 8), ModulationList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txModulationIndex.setStatus('current')
if mibBuilder.loadTexts: txModulationIndex.setDescription('Tx modulation index.')
bandwidth = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("na", 0), ("bw-28MHz", 1), ("bw-14MHz", 2), ("bw-7MHz", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidth.setStatus('current')
if mibBuilder.loadTexts: bandwidth.setDescription('Radio channel bandwidth. Supported by RAy10 only.')
coding = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("low", 1), ("hi", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coding.setStatus('current')
if mibBuilder.loadTexts: coding.setDescription('Channel coding level. Supported by RAy10 only.')
matching = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 2, 1, 11), OptionSetting()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matching.setStatus('current')
if mibBuilder.loadTexts: matching.setDescription('Channel matching.')
rfPowerConfigured = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfPowerConfigured.setStatus('current')
if mibBuilder.loadTexts: rfPowerConfigured.setDescription('Configured RF Power in dBm.')
netBitrate = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBitrate.setStatus('current')
if mibBuilder.loadTexts: netBitrate.setDescription('Current net bitrate in kbps.')
maxNetBitrate = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNetBitrate.setStatus('current')
if mibBuilder.loadTexts: maxNetBitrate.setDescription('Maximum net bitrate in Mbps.')
bandwidthKHz = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthKHz.setStatus('current')
if mibBuilder.loadTexts: bandwidthKHz.setDescription('Radio channel bandwidth in kHz. Not supported by RAy10.')
channelArrangement = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("na", 0), ("accp", 1), ("acap", 2), ("ccdp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelArrangement.setStatus('current')
if mibBuilder.loadTexts: channelArrangement.setDescription('Channel arrangement. Not supported by RAy10.')
rfPowerCurrent = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfPowerCurrent.setStatus('current')
if mibBuilder.loadTexts: rfPowerCurrent.setDescription('Current RF Power in dBm. Not supported by RAy10.')
ifEthTable = MibTable((1, 3, 6, 1, 4, 1, 33555, 1, 2, 2, 1), )
if mibBuilder.loadTexts: ifEthTable.setStatus('current')
if mibBuilder.loadTexts: ifEthTable.setDescription('List of Ethernet interfaces.')
ifEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33555, 1, 2, 2, 1, 1), ).setIndexNames((0, "RAY-MIB", "speed"))
if mibBuilder.loadTexts: ifEthEntry.setStatus('current')
if mibBuilder.loadTexts: ifEthEntry.setDescription('Ethernet interface entry.')
speed = MibTableColumn((1, 3, 6, 1, 4, 1, 33555, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: speed.setStatus('current')
if mibBuilder.loadTexts: speed.setDescription('Ethernet speed.')
duplex = MibTableColumn((1, 3, 6, 1, 4, 1, 33555, 1, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("full", 1), ("half", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: duplex.setStatus('current')
if mibBuilder.loadTexts: duplex.setDescription('Ethernet duplex.')
mdix = MibTableColumn((1, 3, 6, 1, 4, 1, 33555, 1, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("mdi", 1), ("mdi-x", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdix.setStatus('current')
if mibBuilder.loadTexts: mdix.setDescription('Ethernet MDI-X / MDI.')
autonego = MibTableColumn((1, 3, 6, 1, 4, 1, 33555, 1, 2, 2, 1, 1, 4), OptionSetting()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autonego.setStatus('current')
if mibBuilder.loadTexts: autonego.setDescription('Ethernet autonego.')
pause = MibTableColumn((1, 3, 6, 1, 4, 1, 33555, 1, 2, 2, 1, 1, 5), OptionSetting()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pause.setStatus('current')
if mibBuilder.loadTexts: pause.setDescription('Ethernet pause.')
asymPause = MibTableColumn((1, 3, 6, 1, 4, 1, 33555, 1, 2, 2, 1, 1, 6), OptionSetting()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asymPause.setStatus('current')
if mibBuilder.loadTexts: asymPause.setDescription('Ethernet asymmetric pause.')
prioritized = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 2, 2, 2), OptionSetting()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioritized.setStatus('current')
if mibBuilder.loadTexts: prioritized.setDescription('Ethernet prioritized VLAN support. Supported by RAy10 only.')
vlanId = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanId.setStatus('current')
if mibBuilder.loadTexts: vlanId.setDescription('Ethernet prioritized VLAN ID. Supported by RAy10 only.')
serviceVlanId = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceVlanId.setStatus('current')
if mibBuilder.loadTexts: serviceVlanId.setDescription('Ethernet service VLAN ID between local and remote station. Not supported by RAy2.')
modemR = MibIdentifier((1, 3, 6, 1, 4, 1, 33555, 1, 3, 1))
radio = MibIdentifier((1, 3, 6, 1, 4, 1, 33555, 1, 3, 2))
ethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 33555, 1, 3, 3))
rxPauseFrames = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxPauseFrames.setStatus('current')
if mibBuilder.loadTexts: rxPauseFrames.setDescription('Number of received Control frames with a valid PAUSE op-code. Supported by RAy10 only.')
rxControlFrames = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxControlFrames.setStatus('current')
if mibBuilder.loadTexts: rxControlFrames.setDescription('Number of received Control frames. Supported by RAy10 only.')
rxBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBroadcast.setStatus('current')
if mibBuilder.loadTexts: rxBroadcast.setDescription('Number of received packets with a broadcast destination address. Supported by RAy10 only.')
rxMulticast = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMulticast.setStatus('current')
if mibBuilder.loadTexts: rxMulticast.setDescription('Number of received packets with a multicast destination address. Supported by RAy10 only.')
rxDones = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDones.setStatus('current')
if mibBuilder.loadTexts: rxDones.setDescription('Number of successfully received packets. Supported by RAy10 only.')
rxOutOfRangeErrors = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxOutOfRangeErrors.setStatus('current')
if mibBuilder.loadTexts: rxOutOfRangeErrors.setDescription('Number of received frames larger than 1518 bytes (the frame Type/Length field is indicating a value larger than 1518 bytes). Supported by RAy10 only.')
rxCrcErrors = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxCrcErrors.setStatus('current')
if mibBuilder.loadTexts: rxCrcErrors.setDescription('Number of received frames with the CRC which does not match the internally generated CRC. Supported by RAy10 only.')
rxCodeErrors = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxCodeErrors.setStatus('current')
if mibBuilder.loadTexts: rxCodeErrors.setDescription('Number of received packets with one or more erroneous nibbles. Supported by RAy10 only.')
rxFalseCarrierErrors = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxFalseCarrierErrors.setStatus('current')
if mibBuilder.loadTexts: rxFalseCarrierErrors.setDescription('Rx false carrier errors. Supported by RAy10 only.')
rxDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rxDroppedPkts.setDescription('Number of dropped packets. Supported by RAy10 only.')
rxHCBytes = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxHCBytes.setStatus('current')
if mibBuilder.loadTexts: rxHCBytes.setDescription('Number of received bytes. Supported by RAy10 only.')
txPauseFrames = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPauseFrames.setStatus('current')
if mibBuilder.loadTexts: txPauseFrames.setDescription('Number of transmitted Control frames with a valid PAUSE op-code. Supported by RAy10 only.')
txControlFrames = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txControlFrames.setStatus('current')
if mibBuilder.loadTexts: txControlFrames.setDescription('Number of transmitted Control frames. Supported by RAy10 only.')
txBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txBroadcast.setStatus('current')
if mibBuilder.loadTexts: txBroadcast.setDescription('Number of transmitted packets with a broadcast destination address. Supported by RAy10 only.')
txMulticast = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMulticast.setStatus('current')
if mibBuilder.loadTexts: txMulticast.setDescription('Number of transmitted packets with a multicast destination address. Supported by RAy10 only.')
txDones = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txDones.setStatus('current')
if mibBuilder.loadTexts: txDones.setDescription('Number of successfully transmitted packets. Supported by RAy10 only.')
txLengthCheckErrors = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txLengthCheckErrors.setStatus('current')
if mibBuilder.loadTexts: txLengthCheckErrors.setDescription('Number of transmitted packets with the frame Length field (not a Type field) value that does not match the actual data byte length. Supported by RAy10 only.')
txCrcErrors = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txCrcErrors.setStatus('current')
if mibBuilder.loadTexts: txCrcErrors.setDescription('Number of transmitted frames with the CRC which does not match the internally generated CRC. Supported by RAy10 only.')
txCollisions = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txCollisions.setStatus('current')
if mibBuilder.loadTexts: txCollisions.setDescription('Tx collisions. Supported by RAy10 only.')
txHCBytes = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txHCBytes.setStatus('current')
if mibBuilder.loadTexts: txHCBytes.setDescription('Number of transmitted bytes. Supported by RAy10 only.')
rss = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rss.setStatus('current')
if mibBuilder.loadTexts: rss.setDescription('Receiving RSS indicator in decimal dBm (-39 -> -3,9).')
snr = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snr.setStatus('current')
if mibBuilder.loadTexts: snr.setDescription('Receiving SNR indicator in decimal dB (39 -> 3,9).')
fecBlockCounter = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecBlockCounter.setStatus('current')
if mibBuilder.loadTexts: fecBlockCounter.setDescription('Total block counter for BER calculation. Block size is 2048 bits. Supported by RAy10 only.')
fecUncorrectBlockCounter = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecUncorrectBlockCounter.setStatus('current')
if mibBuilder.loadTexts: fecUncorrectBlockCounter.setDescription('Incorrect block counter for BER calculation. Block size is 2048 bits. Supported by RAy10 only.')
timeAllConnect = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 2, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeAllConnect.setStatus('current')
if mibBuilder.loadTexts: timeAllConnect.setDescription('Overall link uptime.')
timeAllDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 2, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeAllDisconnect.setStatus('current')
if mibBuilder.loadTexts: timeAllDisconnect.setDescription('Overall link downtime.')
timeMaxDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 2, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeMaxDisconnect.setStatus('current')
if mibBuilder.loadTexts: timeMaxDisconnect.setDescription('The longest drop (disconnecting).')
numDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numDisconnect.setStatus('current')
if mibBuilder.loadTexts: numDisconnect.setDescription('Number of drops (disconnecting).')
reliability = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliability.setStatus('current')
if mibBuilder.loadTexts: reliability.setDescription('Reliability in thousandths of %.')
linkUptime = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 2, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkUptime.setStatus('current')
if mibBuilder.loadTexts: linkUptime.setDescription('Current radio link uptime. Not supported by RAy10.')
ber = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ber.setStatus('current')
if mibBuilder.loadTexts: ber.setDescription('Bit Error Rate (BER) multiplied by 10^9. Not supported by RAy10.')
ethInThroughput = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethInThroughput.setStatus('current')
if mibBuilder.loadTexts: ethInThroughput.setDescription('Input Ethernet 1 data port throughput in kbps. Not supported by RAy10.')
ethOutThroughput = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethOutThroughput.setStatus('current')
if mibBuilder.loadTexts: ethOutThroughput.setDescription('Output Ethernet 1 data port throughput in kbps. Not supported by RAy10.')
eth2InThroughput = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eth2InThroughput.setStatus('current')
if mibBuilder.loadTexts: eth2InThroughput.setDescription('Input Ethernet 2 data port throughput in kbps. Supported by RAy2 only.')
eth2OutThroughput = MibScalar((1, 3, 6, 1, 4, 1, 33555, 1, 3, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eth2OutThroughput.setStatus('current')
if mibBuilder.loadTexts: eth2OutThroughput.setDescription('Output Ethernet 2 data port throughput in kbps. Supported by RAy2 only.')
airDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 33555, 1, 10, 1)).setObjects(("RAY-MIB", "lineStatus"))
if mibBuilder.loadTexts: airDisconnect.setStatus('current')
if mibBuilder.loadTexts: airDisconnect.setDescription('Air line disconnected. Not supported by RAy2.')
airConnect = NotificationType((1, 3, 6, 1, 4, 1, 33555, 1, 10, 2)).setObjects(("RAY-MIB", "lineStatus"))
if mibBuilder.loadTexts: airConnect.setStatus('current')
if mibBuilder.loadTexts: airConnect.setDescription('Air line connected after being disconnected. Not supported by RAy2.')
airWdog = NotificationType((1, 3, 6, 1, 4, 1, 33555, 1, 10, 3)).setObjects(("RAY-MIB", "lineStatus"))
if mibBuilder.loadTexts: airWdog.setStatus('current')
if mibBuilder.loadTexts: airWdog.setDescription('Air watch dog. Supported by RAy10 only.')
tempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 33555, 1, 10, 4)).setObjects(("RAY-MIB", "temperatureModem"))
if mibBuilder.loadTexts: tempAlarm.setStatus('current')
if mibBuilder.loadTexts: tempAlarm.setDescription('Temperature exceeded the threshold. Not supported by RAy2.')
powerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 33555, 1, 10, 5)).setObjects(("RAY-MIB", "voltageUnit"))
if mibBuilder.loadTexts: powerAlarm.setStatus('current')
if mibBuilder.loadTexts: powerAlarm.setDescription('Power voltage is out of the thresholds. Not supported by RAy2.')
memoryAlarm = NotificationType((1, 3, 6, 1, 4, 1, 33555, 1, 10, 6)).setObjects(("RAY-MIB", "useMemory"))
if mibBuilder.loadTexts: memoryAlarm.setStatus('current')
if mibBuilder.loadTexts: memoryAlarm.setDescription('Memory use exceeded the threshold. Supported by RAy10 only.')
rssAlarm = NotificationType((1, 3, 6, 1, 4, 1, 33555, 1, 10, 7)).setObjects(("RAY-MIB", "rss"))
if mibBuilder.loadTexts: rssAlarm.setStatus('current')
if mibBuilder.loadTexts: rssAlarm.setDescription('RSS exceeded the threshold. Not supported by RAy2.')
snrAlarm = NotificationType((1, 3, 6, 1, 4, 1, 33555, 1, 10, 8)).setObjects(("RAY-MIB", "snr"))
if mibBuilder.loadTexts: snrAlarm.setStatus('current')
if mibBuilder.loadTexts: snrAlarm.setDescription('SNR exceeded the threshold. Not supported by RAy2.')
berAlarm = NotificationType((1, 3, 6, 1, 4, 1, 33555, 1, 10, 9)).setObjects(("RAY-MIB", "fecUncorrectBlockCounter"), ("RAY-MIB", "fecBlockCounter"))
if mibBuilder.loadTexts: berAlarm.setStatus('current')
if mibBuilder.loadTexts: berAlarm.setDescription('BER exceeded the threshold. Not supported by RAy2.')
rfPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 33555, 1, 10, 10)).setObjects(("RAY-MIB", "rfPowerStatus"))
if mibBuilder.loadTexts: rfPowerFail.setStatus('current')
if mibBuilder.loadTexts: rfPowerFail.setDescription('RF Power amplifier failure. Not supported.')
peerEthLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 33555, 1, 10, 11)).setObjects(("RAY-MIB", "ethPeer"))
if mibBuilder.loadTexts: peerEthLinkDown.setStatus('current')
if mibBuilder.loadTexts: peerEthLinkDown.setDescription('Peer station Ethernet link Up/Down. Not supported by RAy2.')
tr2TemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 33555, 1, 11, 1)).setObjects(("RAY-MIB", "temperatureModem"), ("RAY-MIB", "alarmTemperature"))
if mibBuilder.loadTexts: tr2TemperatureAlarm.setStatus('current')
if mibBuilder.loadTexts: tr2TemperatureAlarm.setDescription('Temperature exceeded the threshold. Supported by RAy2 only.')
tr2VoltageLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 33555, 1, 11, 2)).setObjects(("RAY-MIB", "voltageUnit"), ("RAY-MIB", "alarmVoltageLow"))
if mibBuilder.loadTexts: tr2VoltageLowAlarm.setStatus('current')
if mibBuilder.loadTexts: tr2VoltageLowAlarm.setDescription('Supply voltage below minimal threshold. Supported by RAy2 only.')
tr2VoltageHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 33555, 1, 11, 3)).setObjects(("RAY-MIB", "voltageUnit"), ("RAY-MIB", "alarmVoltageHigh"))
if mibBuilder.loadTexts: tr2VoltageHighAlarm.setStatus('current')
if mibBuilder.loadTexts: tr2VoltageHighAlarm.setDescription('Supply voltage above maximal threshold. Supported by RAy2 only.')
tr2RssAlarm = NotificationType((1, 3, 6, 1, 4, 1, 33555, 1, 11, 4)).setObjects(("RAY-MIB", "rss"), ("RAY-MIB", "alarmRss"))
if mibBuilder.loadTexts: tr2RssAlarm.setStatus('current')
if mibBuilder.loadTexts: tr2RssAlarm.setDescription('RSS exceeded the threshold. Supported by RAy2 only.')
tr2SnrAlarm = NotificationType((1, 3, 6, 1, 4, 1, 33555, 1, 11, 5)).setObjects(("RAY-MIB", "snr"), ("RAY-MIB", "alarmSnr"))
if mibBuilder.loadTexts: tr2SnrAlarm.setStatus('current')
if mibBuilder.loadTexts: tr2SnrAlarm.setDescription('SNR exceeded the threshold. Supported by RAy2 only.')
tr2BerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 33555, 1, 11, 6)).setObjects(("RAY-MIB", "ber"), ("RAY-MIB", "alarmBer"))
if mibBuilder.loadTexts: tr2BerAlarm.setStatus('current')
if mibBuilder.loadTexts: tr2BerAlarm.setDescription('BER exceeded the threshold. Supported by RAy2 only.')
tr2AirDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 33555, 1, 11, 7)).setObjects(("RAY-MIB", "lineStatusII"), ("RAY-MIB", "alarmPeerDisconnected"))
if mibBuilder.loadTexts: tr2AirDisconnect.setStatus('current')
if mibBuilder.loadTexts: tr2AirDisconnect.setDescription('Air line disconnected. Supported by RAy2 only.')
tr2AirConnect = NotificationType((1, 3, 6, 1, 4, 1, 33555, 1, 11, 8)).setObjects(("RAY-MIB", "lineStatusII"), ("RAY-MIB", "alarmPeerDisconnected"))
if mibBuilder.loadTexts: tr2AirConnect.setStatus('current')
if mibBuilder.loadTexts: tr2AirConnect.setDescription('Air line connected after being disconnected. Supported by RAy2 (up to fw 2.1.7.0) only.')
tr2Eth1LinkDown = NotificationType((1, 3, 6, 1, 4, 1, 33555, 1, 11, 9)).setObjects(("RAY-MIB", "eth1Link"), ("RAY-MIB", "alarmEth1Down"))
if mibBuilder.loadTexts: tr2Eth1LinkDown.setStatus('current')
if mibBuilder.loadTexts: tr2Eth1LinkDown.setDescription('Local station Ethernet 1 link Up/Down. Supported by RAy2 only.')
tr2Eth21LinkDown = NotificationType((1, 3, 6, 1, 4, 1, 33555, 1, 11, 10)).setObjects(("RAY-MIB", "eth2Link"), ("RAY-MIB", "alarmEth2Down"))
if mibBuilder.loadTexts: tr2Eth21LinkDown.setStatus('current')
if mibBuilder.loadTexts: tr2Eth21LinkDown.setDescription('Local station Ethernet 2 link Up/Down. Supported by RAy2 only.')
tr2RfPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 33555, 1, 11, 11)).setObjects(("RAY-MIB", "rfPowerStatus"), ("RAY-MIB", "alarmRfPowerFail"))
if mibBuilder.loadTexts: tr2RfPowerFail.setStatus('current')
if mibBuilder.loadTexts: tr2RfPowerFail.setDescription('RF Power amplifier failure. Supported by RAy2 only.')
tr2NetBitrate = NotificationType((1, 3, 6, 1, 4, 1, 33555, 1, 11, 12)).setObjects(("RAY-MIB", "netBitrate"), ("RAY-MIB", "alarmNetBitrate"))
if mibBuilder.loadTexts: tr2NetBitrate.setStatus('current')
if mibBuilder.loadTexts: tr2NetBitrate.setDescription('Air speed below threshold. Supported by RAy2 only.')
tr2WifiOn = NotificationType((1, 3, 6, 1, 4, 1, 33555, 1, 11, 13)).setObjects(("RAY-MIB", "wifiHAP"), ("RAY-MIB", "alarmWifiOn"))
if mibBuilder.loadTexts: tr2WifiOn.setStatus('current')
if mibBuilder.loadTexts: tr2WifiOn.setDescription('WiFi Host Access Point is on. Supported by RAy2 only.')
mibBuilder.exportSymbols("RAY-MIB", swVerRadio=swVerRadio, channelArrangement=channelArrangement, voltageSource=voltageSource, txFreq=txFreq, txBroadcast=txBroadcast, asymPause=asymPause, speed=speed, timeAllConnect=timeAllConnect, searchModeDisabled=searchModeDisabled, radio=radio, prioritized=prioritized, rfPowerStatus=rfPowerStatus, snrAlarm=snrAlarm, peerNumber=peerNumber, serialNumber=serialNumber, authorization=authorization, alarmVoltageLow=alarmVoltageLow, txDones=txDones, rssAlarm=rssAlarm, keyName=keyName, ifEth=ifEth, rxCodeErrors=rxCodeErrors, duplex=duplex, ethPeer=ethPeer, rayTraps=rayTraps, rxBroadcast=rxBroadcast, tempAlarm=tempAlarm, rxChannel=rxChannel, alarmBer=alarmBer, keyEntry=keyEntry, station=station, rxMulticast=rxMulticast, mac=mac, alarm=alarm, tr2AirConnect=tr2AirConnect, rxOutOfRangeErrors=rxOutOfRangeErrors, httpd=httpd, ServiceState=ServiceState, keyTable=keyTable, txModulationIndex=txModulationIndex, rxDroppedPkts=rxDroppedPkts, tr2BerAlarm=tr2BerAlarm, txChannel=txChannel, alarmPeerDisconnected=alarmPeerDisconnected, alarmTemperature=alarmTemperature, txCollisions=txCollisions, ray=ray, netBitrate=netBitrate, status=status, txModulation=txModulation, txControlFrames=txControlFrames, racom=racom, productName=productName, AlarmState=AlarmState, serviceVlanId=serviceVlanId, telnetd=telnetd, linkUptime=linkUptime, airWdog=airWdog, peerEthLinkDown=peerEthLinkDown, statistic=statistic, ray2Traps=ray2Traps, rxModulationIndex=rxModulationIndex, temperatureModem=temperatureModem, alarmEth2Down=alarmEth2Down, voltageUnit=voltageUnit, ifRadio=ifRadio, PhysAddress=PhysAddress, securePeerMode=securePeerMode, tr2NetBitrate=tr2NetBitrate, txCrcErrors=txCrcErrors, useLogStorage=useLogStorage, ip=ip, fecUncorrectBlockCounter=fecUncorrectBlockCounter, ifEthEntry=ifEthEntry, mdix=mdix, memoryAlarm=memoryAlarm, wifiHAP=wifiHAP, tr2TemperatureAlarm=tr2TemperatureAlarm, interface=interface, bandwidthKHz=bandwidthKHz, snr=snr, tr2VoltageHighAlarm=tr2VoltageHighAlarm, alarmVoltageHigh=alarmVoltageHigh, rxFreq=rxFreq, useCpu=useCpu, rxHCBytes=rxHCBytes, swVer=swVer, berAlarm=berAlarm, matching=matching, rxPauseFrames=rxPauseFrames, eth2OutThroughput=eth2OutThroughput, OptionSetting=OptionSetting, alarmNetBitrate=alarmNetBitrate, txPauseFrames=txPauseFrames, fecBlockCounter=fecBlockCounter, maxNetBitrate=maxNetBitrate, tr2Eth1LinkDown=tr2Eth1LinkDown, eth2Link=eth2Link, rxCrcErrors=rxCrcErrors, PYSNMP_MODULE_ID=ray, product=product, lineStatusII=lineStatusII, ethernet=ethernet, ethInThroughput=ethInThroughput, txHCBytes=txHCBytes, alarmRfPowerFail=alarmRfPowerFail, txMulticast=txMulticast, ethOutThroughput=ethOutThroughput, tr2Eth21LinkDown=tr2Eth21LinkDown, managementVlanId=managementVlanId, rfPowerConfigured=rfPowerConfigured, tr2AirDisconnect=tr2AirDisconnect, rxDones=rxDones, timeMaxDisconnect=timeMaxDisconnect, ber=ber, access=access, tr2RssAlarm=tr2RssAlarm, tr2VoltageLowAlarm=tr2VoltageLowAlarm, airConnect=airConnect, reliability=reliability, tr2RfPowerFail=tr2RfPowerFail, deviceName=deviceName, temperatureRadio=temperatureRadio, sshd=sshd, alarmSnr=alarmSnr, info=info, unitType=unitType, system=system, rfPowerFail=rfPowerFail, rss=rss, ifEthTable=ifEthTable, systemStatus=systemStatus, timeAllDisconnect=timeAllDisconnect, tr2SnrAlarm=tr2SnrAlarm, tr2WifiOn=tr2WifiOn, airDisconnect=airDisconnect, chassis=chassis, bandwidth=bandwidth, eth1Link=eth1Link, txLengthCheckErrors=txLengthCheckErrors, rxControlFrames=rxControlFrames, pause=pause, powerAlarm=powerAlarm, numDisconnect=numDisconnect, alarmEth1Down=alarmEth1Down, ModulationList=ModulationList, managementVlan=managementVlan, autonego=autonego, lineStatus=lineStatus, modemR=modemR, vlanId=vlanId, DisplayString=DisplayString, rxModulation=rxModulation, rxFalseCarrierErrors=rxFalseCarrierErrors, useMemory=useMemory, coding=coding, alarmWifiOn=alarmWifiOn, eth2InThroughput=eth2InThroughput, rfPowerCurrent=rfPowerCurrent, alarmRss=alarmRss)
