#
# PySNMP MIB module CTRON-APPN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTRON-APPN-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 11:15:06 2024
# On host fv-az525-771 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
nwRtrProtoSuites, = mibBuilder.importSymbols("ROUTER-OIDS", "nwRtrProtoSuites")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, ModuleIdentity, IpAddress, NotificationType, TimeTicks, Counter32, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, MibIdentifier, Bits, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "IpAddress", "NotificationType", "TimeTicks", "Counter32", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "MibIdentifier", "Bits", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nwAppnRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5))
nwAppnMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 1))
nwAppnComponents = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2))
nwAppnSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1))
nwAppnForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2))
nwAppnTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 4))
nwAppnFib = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 5))
nwAppnEndSystems = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 6))
nwAppnAccessControl = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 7))
nwAppnFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 8))
nwAppnRedirector = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 9))
nwAppnEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 10))
nwAppnWorkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 11))
nwAppnSysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1))
nwAppnSysAdministration = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 2))
nwAppnSysCfgLocalNode = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2))
nwAppnSysCfgTables = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 3))
nwAppnFwdSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 1))
nwAppnFwdInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2))
nwAppnFwdLinks = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3))
nwAppnFwdCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 1, 1))
nwAppnFwdIfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1))
nwAppnIfCn = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 3))
nwAppnFwdIfCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2))
nwAppnFwdLsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1))
nwAppnFwdLsCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2))
nwAppnDistanceVector = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 4, 1))
nwAppnLinkState = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 4, 2))
nwAppnIsr = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 4, 2, 1))
nwAppnIsrSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 4, 2, 1, 1))
nwAppnIsrInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 4, 2, 1, 2))
nwAppnIsrDatabase = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 4, 2, 1, 3))
nwAppnIsrFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 4, 2, 1, 4))
nwAppnIsrConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 4, 2, 1, 1, 1))
nwAppnIsrCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 4, 2, 1, 1, 2))
nwAppnIsrIfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 4, 2, 1, 2, 1))
nwAppnIsrIfCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 4, 2, 1, 2, 2))
nwAppnHostsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 6, 1))
nwAppnHostsInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 6, 2))
nwAppnEventLogConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 10, 1))
nwAppnEventLogFilterTable = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 10, 2))
nwAppnEventLogTable = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 10, 3))
nwAppnMibRevText = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnMibRevText.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnMibRevText.setDescription('Indicates the current revision level of the Cabletron APPN \n                Router MIB in textual format.')
nwAppnSysRouterId = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysRouterId.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysRouterId.setDescription('Specifies the APPN Fully-Qualified Control Point name that is used\n                to uniquely identify APPN Routing Services in an APPN network. The\n                name format is NNNNNNNN.CCCCCCCC where NNNNNNNN is the network\n                identifier and CCCCCCCC is the Control Point name. Valid characters\n                to make up these two strings are uppercase letters A through Z,\n                numerics 0 through 9, and the special characters $, @, and #. The\n                first character of the string must NOT be numeric. Each string must\n                be a maximum length of 8 characters with no embedded spaces and the\n                strings are joined by a dot. nwAppnSysRouterId cannot be modified\n                while APPN routing services is in any operational state other than\n                DISABLED as reflected in nwAppnSysOperStatus. Otherwise, the\n                request will be rejected.')
nwAppnSysNodeType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("networknode", 1))).clone('networknode')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnSysNodeType.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysNodeType.setDescription('Indicates the node type supported by APPN Routing Services which\n                is always of type Network Node. ')
nwAppnSysCpAlias = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysCpAlias.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysCpAlias.setDescription('Specifies the Control Point alias name used by APPN Routing\n                Services. ')
nwAppnSysModeCosMap = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysModeCosMap.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysModeCosMap.setDescription('Specifies whether mode to COS mapping is supported by\n                APPN Routing Services.')
nwAppnSysMdsSupport = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysMdsSupport.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysMdsSupport.setDescription('Specifies whether Management Services supports Multiple\n                Domain Support and Management Services capabilities. ')
nwAppnSysMaxLocates = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysMaxLocates.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysMaxLocates.setDescription('Specifies maximum Number of locate requests that APPN Routing\n                Services can concurrently process. Note: if nwAppnSysMaxLocates is\n                set to a value too small, it will be internally increased to a\n                higher value after APPN Routing Services has been successfully\n                enabled. A subsequent GET operation on nwAppnSysMaxLocates will\n                reflect this new value.')
nwAppnSysDirCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysDirCacheSize.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysDirCacheSize.setDescription('Specifies number of located resources maintained in the Directory\n                Cache.  Note: if nwAppnSysDirCacheSize is set to a value too small,\n                it will be internally increased to a higher value after APPN routing\n                services has been successfully enabled. A subsequent GET\n                operation on nwAppnSysDirCacheSize will reflect this new value. ')
nwAppnSysMaxDirEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysMaxDirEntries.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysMaxDirEntries.setDescription('Specifies maximum number of directory entries.  If zero is selected,\n                the number of entries is unlimited. ')
nwAppnSysLocateTimeout = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysLocateTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysLocateTimeout.setDescription('Specifies time in seconds before a network search will timeout. Zero\n                indicates that the search has no timeout.')
nwAppnSysRegCds = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysRegCds.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysRegCds.setDescription('Specifies whether the local or domain resources can be registered\n                with the Central Directory Server.')
nwAppnSysMdsSendQSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysMdsSendQSize.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysMdsSendQSize.setDescription('Specifies size of the MDS send alert Queue.')
nwAppnSysCosSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysCosSize.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysCosSize.setDescription('Specifies maximum number of COS definitions maintained in the COS\n                database weights cache. It determines the size of the COS Database\n                weights cache.  Note: if nwAppnSysCosSize is set to a value too\n                small, it will be internally increased to a higher value after\n                APPN Routing Services has been successfully enabled. A subsequent\n                GET operation on nwAppnSysCosSize will reflect this new value. ')
nwAppnSysTreeSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysTreeSize.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysTreeSize.setDescription('Specifies the number of routes maintained in the Topology Database\n                routing tree cache. Note: if nwAppnSysTreeSize is set to a value\n                too small, it will be internally increased to a higher value after\n                APPN Routing Services has been successfully enabled. A subsequent\n                GET operation on nwAppnSysTreeSize will reflect this new value. ')
nwAppnSysTreeUseLimit = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysTreeUseLimit.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysTreeUseLimit.setDescription('Maximum number of times a cached tree will be used to compute a\n                route before the tree is discarded and recomputed.  This\n                allows the APPN Routing Services to balance sessions among\n                equal weight routes. A low value provides better load balancing\n                at the expense of increased activation latency. ')
nwAppnSysMaxTdmNodes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysMaxTdmNodes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysMaxTdmNodes.setDescription('Specifies maximum number of nodes that can be stored in the Topology\n                Database. Zero means unlimited. ')
nwAppnSysMaxTdmTGs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysMaxTdmTGs.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysMaxTdmTGs.setDescription('Specifies maximum number of transmission groups that can be stored in\n                Topology Database. Zero means unlimited. ')
nwAppnSysMaxIsrSessions = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysMaxIsrSessions.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysMaxIsrSessions.setDescription('Specifies maximum number of intermediate routing sessions permitted\n                by APPN Routing Services at one time. This must be a non-negative\n                number.')
nwAppnSysIsrUpperThresh = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysIsrUpperThresh.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysIsrUpperThresh.setDescription('The thresholds control the congestion status of APPN routing\n                services.  If the number of ISR sessions exceeds the upper\n                threshold, congestion status changes from uncongested to congested.\n                When this occurs, the status will not become uncongested until the\n                the number of ISR sessions fall below the lower threshold. The\n                lower threshold should be less than the upper threshold to prevent\n                thrashing. The upper threshold should be lower than\n                nwAppnSysMaxIsrSessions.  This must be a non-negative number.')
nwAppnSysIsrLowerThresh = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysIsrLowerThresh.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysIsrLowerThresh.setDescription('Specifes the number of ISR sessions at which congestion status will\n                revert to uncongested. This must be a non-negative number.\n                nwAppnSysIsrLowerThresh must be less than nwAppnSysIsrUpperThresh\n                to prevent thrashing. ')
nwAppnSysIsrMaxRuSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysIsrMaxRuSize.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysIsrMaxRuSize.setDescription('Specifies maximum RU size supported for intermediate sessions.\n                Note: the number provided will be rounded up to the \n                next valid RU size if necessary after APPN Routing Services has\n                been successfully enabled. A subsequent GET operation on\n                nwAppnSysMaxLocates will reflect this new value.')
nwAppnSysIsrRcvPaceWind = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysIsrRcvPaceWind.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysIsrRcvPaceWind.setDescription('Specifies suggested receive pacing window size for intermediate\n                sessions. This value may be used as a fixed window size for \n                fixed pacing, or as a tuning value for adaptive pacing. ')
nwAppnSysRtAddResist = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysRtAddResist.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysRtAddResist.setDescription('Specifies a desirability factor for APPN Routing Services to\n                perform intermediate session routing.  255 is least desirable\n                and 0 is more desirable. ')
nwAppnSysStopType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("abort", 1), ("immediate", 2), ("quiesce", 3), ("quiesceIsr", 4))).clone('quiesceIsr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysStopType.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysStopType.setDescription('Specifies the type of APPN Routing Services shutdown.\n                Once specified, select disable from nwAppnSysAdminStatus. The\n                shutdown choices are as follows:\n\n                abort(1)       All APPN Routing Services components are immediately\n                               stopped and resources released. To become active again,\n                               the APPN Routing Services must be enabled.\n                immediate(2)   APPN Routing Services immediately deactivates all links\n                               then performs abort(1) processing.\n                quiesce(3)     APPN Routing Services indicates to other APPN network\n                               nodes that it is quiesced. Session limits\n                               are reset on all modes, UNBINDs are issued\n                               on all endpoint sessions (CP-CP sessions last),\n                               and then immediate(2) processing is performed.\n                quiesceIsr(4)  Allows all intermediate sessions to end,\n                               then performs the quiesce(3) processing.')
nwAppnSysBlockNum = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysBlockNum.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysBlockNum.setDescription('This represents the 3 hexadecimal digit block number which \n                precedes the 5 digit id number in the 8 digit node id used in\n                XIDs and Alerts. The block number identifies the product type.\n                Both the block number and id number combined, uniquely identify\n                this instance of APPN Routing Services within the installation\n                network.')
nwAppnSysIdNum = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 2, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysIdNum.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysIdNum.setDescription('This represents the 5 hexadecimal digit id number which follows\n                the 3 digit block number in the 8 digit node id used in XIDs and\n                Alerts. The id number uniquely identifies this instance of APPN\n                Routing Services within a product type indicated by the block number.\n                Both the block number and id number combined, uniquely identify\n                this instance of APPN Routing Services within the installation\n                network.')
nwAppnSysLuTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 3, 1), )
if mibBuilder.loadTexts: nwAppnSysLuTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysLuTable.setDescription('This table contains entries for LUs that are owned by adjacent\n                 LEN nodes. Defining or deleting an entry is equivalent to defining\n                 or deleting an entry in the directory database. To add an entry,\n                 set nwAppnSysLuControl to other. To delete an entry, set\n                 nwAppnSysLuControl to delete.')
nwAppnSysLuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 3, 1, 1), ).setIndexNames((0, "CTRON-APPN-MIB", "nwAppnSysCpName"), (0, "CTRON-APPN-MIB", "nwAppnSysLuName"))
if mibBuilder.loadTexts: nwAppnSysLuEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysLuEntry.setDescription('Each entry defines an LU entry in the directory database. The\n                fully qualified CP name and the name of the LU are the indexes into\n                this table.')
nwAppnSysCpName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysCpName.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysCpName.setDescription('Specifies the fully qualified name of the Control Point \n                containing the LU being defined. The format of this name\n                is NNNNNNNN.CCCCCCCC where NNNNNNNN is the network identifier and\n                CCCCCCCC is the LU or Control Point name. Valid characters to make\n                up these two strings are uppercase letters A through Z, numerics 0\n                through 9 and the special charcters $, @, and #.  The first character\n                of the name must NOT be numeric. Each string must be a maximum length\n                of 8 characters with no embedded spaces and the strings are joined by\n                a dot.  This CP name must appear as an Adjacent CP in a link station\n                definition where the adjacent CP type is EN and CP-CP session support\n                is NO.')
nwAppnSysLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysLuName.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysLuName.setDescription('Specifies the name of the LU being registered. The name format is\n                LLLLLLLL where LLLLLLLL are the characters: uppercase letters\n                A through Z, numerics 0 through 9, and the special characters\n                $, @, and #. The first character of the name must NOT be numeric.\n                The string must be a maximum length of 8 characters with no\n                embedded spaces. Note that the nework identifier of the LU is \n                taken from the fully qualified control point name of the adjacent\n                LEN node (nwAppnSysCpName) which owns the LU. ')
nwAppnSysLuControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("other", 1), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysLuControl.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysLuControl.setDescription('Set this object to delete to remove an entry.')
nwAppnSysAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysAdminStatus.setDescription('Sets the system-wide administrative state of APPN Routing Services.\n                If enable(3) is selected, APPN Routing Services is activated.\n\n                There are two cases: the very first activation, and activations\n                subsequent to the successful first activation. Before activating\n                APPN Routing Services the very first time, nwAppnSysRouterId in\n                the System Configuration branch and all objects under\n                nwAppnSysCfgLocalNode must be assigned a value. If not explicitly\n                assigned, default values will be used for objects under\n                nwAppnSysCfgLocalNode. After this first activation has completed\n                successfully, all objects under nwAppnSysCfgLocalNode will be\n                saved in non-volatile RAM and restored for the next node activation\n                at power up time. After this subsequent power up, enable(3) may be\n                selected without setting nwAppnSysRouterId or any objects under\n                under nwAppnSysCfgLocalNode. Those values defined prior to the\n                last power up or reset will be used.\n\n                If disable(2) is selected, APPN Routing Services will become\n                inactive in the manner specifed by nwAppnSysStopType. To\n                modify objects under nwAppnSysCfgLocalNode, nwAppnSysAdminStatus\n                must be disabled. ')
nwAppnSysOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pendingDisable", 4), ("pendingEnable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnSysOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysOperStatus.setDescription('Indicates the current operating system-wide status of APPN \n                Routing Services.  ')
nwAppnSysAdminReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnSysAdminReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysAdminReset.setDescription('Resets APPN Routing Services system-wide. Reset (2) forces a\n                restart of APPN Routing Services without a graceful shutdown on\n                any active router ports, without affecting any other routing\n                services.')
nwAppnSysOperationalTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 2, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnSysOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second, that\n                nwAppnOperStatus has been in its current state.')
nwAppnSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnSysVersion.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnSysVersion.setDescription('Indicates the current revision level of APPN routing \n                 services in textual format.')
nwAppnFwdCtrAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdCtrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdCtrAdminStatus.setDescription('Sets the administrative state of the aggregate, system-wide,\n                port Message Unit (MU) and byte counters. Enabled (3) causes\n                these counters to become active.  Disabled (2) causes these\n                counters to become inactive.')
nwAppnFwdCtrReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdCtrReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdCtrReset.setDescription('Resets the aggregate, system-wide port Message Unit (MU)\n                and byte counters. Reset (2) resets the aggregate counters to 0.\n                nwAppnFwdCtrOperationalTime is also reset to 0.')
nwAppnFwdCtrOperationalTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdCtrOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdCtrOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second,\n                that nwAppnFwdCtrAdminStatus has been in the current state.')
nwAppnFwdCtrInMus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdCtrInMus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdCtrInMus.setDescription('Indicates the total number of Message Units (MU)s that have\n                been received system-wide (for all ports) during\n                nwAppnFwdCtrOperationalTime.')
nwAppnFwdCtrOutMus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdCtrOutMus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdCtrOutMus.setDescription('Indicates the total number of Message Units (MU)s that have\n                been transmitted system-wide (for all ports) during\n                nwAppnFwdCtrOperationalTime.')
nwAppnFwdCtrFwdMus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdCtrFwdMus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdCtrFwdMus.setDescription('Indicates the total number of Message Units (MU)s that have\n                been forwarded system-wide (for all ports) during\n                nwAppnFwdCtrOperationalTime.')
nwAppnFwdCtrFilteredMus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdCtrFilteredMus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdCtrFilteredMus.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnFwdCtrDiscardMus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdCtrDiscardMus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdCtrDiscardMus.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnFwdCtrAddrErrMus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdCtrAddrErrMus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdCtrAddrErrMus.setDescription('Indicates the total number of Message Units (MUs)\n                that have been received system-wide (for all ports), during\n                nwAppnFwdCtrOperationalTime, that contain an address error(s)\n                in the SNA header.')
nwAppnFwdCtrLenErrMus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdCtrLenErrMus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdCtrLenErrMus.setDescription('Indicates the total number of Message Units (MUs) that have\n                been received system-wide (for all ports), during\n                nwAppnFwdCtrOperationalTime, that contain a length error.')
nwAppnFwdCtrHdrErrMus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdCtrHdrErrMus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdCtrHdrErrMus.setDescription('Indicates the total number of Message Units (MUs) that have\n                been received system-wide (for all ports), during\n                nwAppnFwdCtrOperationalTime, that contain an SNA header error\n                other than an address or length error.')
nwAppnFwdCtrInBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdCtrInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdCtrInBytes.setDescription('Indicates number of bytes in Message Units (MUs) that have\n                been received system-wide (for all ports), during\n                nwAppnFwdCtrOperationalTime.')
nwAppnFwdCtrOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdCtrOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdCtrOutBytes.setDescription('Indicates the total number of bytes in Message Units (MUs) that\n                have been forwarded system-wide (for all ports), during\n                nwAppnFwdCtrOperationalTime.')
nwAppnFwdCtrFwdBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdCtrFwdBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdCtrFwdBytes.setDescription('Indicates the total number of bytes in Message Units (MUs) that\n                have been forwarded system-wide (for all ports), during\n                nwAppnFwdCtrOperationalTime.')
nwAppnFwdCtrFilteredBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdCtrFilteredBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdCtrFilteredBytes.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnFwdCtrDiscardBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdCtrDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdCtrDiscardBytes.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnFwdCtrHostInMus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdCtrHostInMus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdCtrHostInMus.setDescription('Indicates the total number of Message Units (MUs) that have\n                been delivered system-wide (for all ports), to local half\n                sessions during nwAppnFwdCtrOperationalTime.')
nwAppnFwdCtrHostOutMus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdCtrHostOutMus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdCtrHostOutMus.setDescription('Indicates the total number of Message Units (MUs) that have\n                been successfully sent from local half sessions system-wide\n                (for all ports), to Path Control during\n                nwAppnFwdCtrOperationalTime.')
nwAppnFwdCtrHostDiscardMus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdCtrHostDiscardMus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdCtrHostDiscardMus.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnFwdCtrHostInBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdCtrHostInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdCtrHostInBytes.setDescription('Indicates the total number of bytes in Message Units (MUs)\n                that have been delivered system-wide (for all ports), to\n                local half sessions during nwAppnFwdCtrOperationalTime.')
nwAppnFwdCtrHostOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdCtrHostOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdCtrHostOutBytes.setDescription('Indicates the total number of bytes in Message Units (MUs)\n                that have been successfully sent from local half sessions\n                system-wide (for all ports), to Path Control during\n                nwAppnFwdCtrOperationalTime.')
nwAppnFwdCtrHostDiscardBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdCtrHostDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdCtrHostDiscardBytes.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnFwdIfTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 1), )
if mibBuilder.loadTexts: nwAppnFwdIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfTable.setDescription('This table contains an entry for each router port which can\n                be used by APPN Routing Services. This table is indexed by\n                nwAppnFwdIfIndex, which indicates the value of MIB 2 ifindex\n                which identifes the router port for which an entry exists.\n                These port configuration entries will be provided automatically\n                based on physical port configuration. Such entries cannot be\n                deleted - only modified.')
nwAppnFwdIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 1, 1), ).setIndexNames((0, "CTRON-APPN-MIB", "nwAppnFwdIfIndex"))
if mibBuilder.loadTexts: nwAppnFwdIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfEntry.setDescription('Each entry specifies the APPN Routing Services port\n                configuration for the router port for which the entry exists.')
nwAppnFwdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfIndex.setDescription('Indicates the value of MIB2 ifindex, which identifies the\n                router port for which the entry exists. ')
nwAppnFwdIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfAdminStatus.setDescription('Sets the administrative state of an APPN Routing Services \n                port for which the entry exists. enabled(3) causes the\n                APPN Routing Services port to become active. disable(2)\n                causes it to become inactive. There are various choices\n                for the method by which the port can be disabled, which are\n                enumerated by nwAppnExtIfStopType. ')
nwAppnFwdIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pendingDisable", 4), ("pendingEnable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfOperStatus.setDescription('Indicates the current operating condition of the APPN Routing\n                Services port for which the entry exists.')
nwAppnFwdIfOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second, that\n                nwAppnFwdIfOperStatus has been in the current state.')
nwAppnFwdIfControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("other", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdIfControl.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfControl.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs. Setting this object has no effect.')
nwAppnFwdIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdIfMtu.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfMtu.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs. Setting this object has no effect.')
nwAppnFwdIfForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdIfForwarding.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfForwarding.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs. Setting this object has no effect.')
nwAppnFwdIfFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("other", 1), ("ethernet", 2), ("i8022", 4), ("sync", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdIfFrameType.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfFrameType.setDescription('Specifies the framing type for the APPN Routing Services port\n                for which the entry exists. ')
nwAppnFwdIfAclIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdIfAclIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfAclIdentifier.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs. Setting this object has no effect.')
nwAppnFwdIfAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdIfAclStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfAclStatus.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs. Setting this object has no effect.')
nwAppnFwdIfCacheControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdIfCacheControl.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCacheControl.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs. Setting this object has no effect.')
nwAppnFwdIfCacheEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfCacheEntries.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCacheEntries.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs. Setting this object has no effect.')
nwAppnFwdIfCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCacheHits.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs. Setting this object has no effect.')
nwAppnFwdIfCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfCacheMisses.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCacheMisses.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs. Setting this object has no effect.')
nwAppnExtensionTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2), )
if mibBuilder.loadTexts: nwAppnExtensionTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtensionTable.setDescription('This table contains additional APPN definitions for each\n                physical port. Entries cannot be added to or deleted from this\n                table. With the exception of nwAppnExtIfStopType, objects in\n                this table may only be modified when nwAppnFwdIfAdminStatus\n                is disabled.  Note: if APPN Routing Services is not active, no\n                entries will exist for this table. ')
nwAppnExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1), ).setIndexNames((0, "CTRON-APPN-MIB", "nwAppnExtIfIndex"))
if mibBuilder.loadTexts: nwAppnExtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtEntry.setDescription('Each entry specifies additional APPN configuration parameters\n                for the port for which this entry exists.')
nwAppnExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnExtIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfIndex.setDescription('Specifies the primary index into the APPN port extension table.\n                This number corresponds to the index into the nwAppnFwdIfTable. ')
nwAppnExtIfPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnExtIfPortName.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfPortName.setDescription('Specifies the user friendly name for this port. ')
nwAppnExtIfPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nonswitched", 1), ("switched", 2), ("satf", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnExtIfPortType.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfPortType.setDescription('Specifies the type of line used by the port.  The value\n                 corresponds to one of the following:  nonswitched(1),\n                 switched(2), or satf(3). ')
nwAppnExtIfDlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("llc2", 1), ("sdlc", 2), ("x25", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnExtIfDlcType.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfDlcType.setDescription('Specifies the type of DLC using the port. ')
nwAppnExtIfMaxRBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(99, 65535)).clone(2048)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnExtIfMaxRBtuSize.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfMaxRBtuSize.setDescription('Specifies the maximum Message Unit (MU) size that can be received. ')
nwAppnExtIfTotLsActLim = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnExtIfTotLsActLim.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfTotLsActLim.setDescription('Specifies the total number of links that can be active on this\n                port. If nwAppnExtIfPortType = nonswitched(1) and\n                nwAppnExtIfLocalLsRole = negotiable(1), or secondary(3), then\n                this value must be set to 1. ')
nwAppnExtIfInbLsActLim = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnExtIfInbLsActLim.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfInbLsActLim.setDescription('Specifies the total number of inbound links that can be active on\n                this port.  If nwAppnExtIfPortType = nonswitched(1) and\n                nwAppnExtIfLocalLsRole = negotiable(1) or primary(2), then this\n                value must be set to 0. ')
nwAppnExtIfOutbLsActLim = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnExtIfOutbLsActLim.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfOutbLsActLim.setDescription('Specifies the total number of outbound links that can be active on\n                this port.  If nwAppnExtIfPortType = nonswitched(1) and\n                nwAppnExtIfLocalLsRole = negotiable(1), then this value must be\n                set to 0.  If nwAppnExtIfLocalLsRole = primary(2), then this value\n                must be set the same as nwAppnExtIfTotLsActLim. ')
nwAppnExtIfLocalLsRole = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("negotiable", 1), ("primary", 2), ("secondary", 3))).clone('negotiable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnExtIfLocalLsRole.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfLocalLsRole.setDescription('Specifies the link station role - primary, secondary, or\n                negotiable.  For nwAppnExtIfPortType = satf(3), the link station\n                role must be negotiable(1). ')
nwAppnExtIfActXidXchgLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnExtIfActXidXchgLimit.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfActXidXchgLimit.setDescription('Specifies the total number of activation XIDs that may be\n                exchanged. ')
nwAppnExtIfNonActXidXchgLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnExtIfNonActXidXchgLimit.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfNonActXidXchgLimit.setDescription('Specifies the total number of non-activation XIDs that may be\n                exchanged. ')
nwAppnExtIfLsXmitRcvCap = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("twowaysimultaneous", 1), ("twowayalternating", 2))).clone('twowaysimultaneous')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnExtIfLsXmitRcvCap.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfLsXmitRcvCap.setDescription("Specifies the link station's transmit/receive capability. ")
nwAppnExtIfMaxIfrmRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnExtIfMaxIfrmRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfMaxIfrmRcvd.setDescription('Specifies the maximum number of I-frames received before an\n                acknowledgment is sent to the sender. ')
nwAppnExtIfDfltTargetPacing = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnExtIfDfltTargetPacing.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfDfltTargetPacing.setDescription('Specifies the pacing window size for BINDs on this transmission\n                group. ')
nwAppnExtIfDfltMaxSBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(99, 65535)).clone(2048)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnExtIfDfltMaxSBtuSize.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfDfltMaxSBtuSize.setDescription('Specifies the maximum Message Unit (MU) size which can be sent. ')
nwAppnExtIfDfltEffectCap = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 603979776))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnExtIfDfltEffectCap.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfDfltEffectCap.setDescription('Specifies the default maximum kilo bits per second rate\n                (line speed) for all links on this port. ')
nwAppnExtIfDfltConnectCost = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnExtIfDfltConnectCost.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfDfltConnectCost.setDescription('Specifies the default cost per connect time for all link\n                stations on this port.  0 is the lowest cost and 255 is the\n                largest cost. ')
nwAppnExtIfDfltByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnExtIfDfltByteCost.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfDfltByteCost.setDescription('Specifies the default Cost per Byte for link stations. 0 is\n                the lowest cost and 255 is the largest cost. ')
nwAppnExtIfDfltSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("nonsecure", 1), ("publicSwitchNw", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnExtIfDfltSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfDfltSecurity.setDescription('Specify one of the following security selections:\n\n                        non-secure        - specifies no security.\n                        public switched   - data flows over a public switched \n                                            network.\n                        underground cable - data transmitted over a secure\n                                            underground cable.\n                        secure conduit    - line is secure conduit that is not\n                                            guarded.\n                        guarded conduit   - conduit that is protected against\n                                            physical tapping.\n                        encrypted         - encryption over the line.\n                        guarded radiation - line is proected against physical\n                                            and radiation tapping. ')
nwAppnExtIfDfltPropDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 384, 9216, 147456, 294912, 2013265920))).clone(namedValues=NamedValues(("minimum", 0), ("negligible", 384), ("terrestrial", 9216), ("packetswitched", 147456), ("long", 294912), ("maximum", 2013265920)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnExtIfDfltPropDelay.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfDfltPropDelay.setDescription('Specifies the propagation delay which represents the relative\n                time it takes for a signal to travel the length of the link in\n                microseconds, with some of the more common default values\n                enumerated. The default times in parentheses are in microseconds.\n                These default values fall into the following ranges:\n\n                        minimum                 - no propagation delay\n                        negligible, lan         - less than 480 microseconds\n                        terrestrial, telephone  - between 480 and 49,512\n                                                  microseconds\n                        packetswitched          - between 49,512 and 245,760\n                                                  microseconds\n                        long, satellite         - more than 245760 microseconds.\n                        maximum                 - the maximum propagation delay. ')
nwAppnExtIfDfltUsrDef1 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnExtIfDfltUsrDef1.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfDfltUsrDef1.setDescription('Specifies user defined parameter 1. ')
nwAppnExtIfDfltUsrDef2 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnExtIfDfltUsrDef2.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfDfltUsrDef2.setDescription('Specifies user defined parameter 2. ')
nwAppnExtIfDfltUsrDef3 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnExtIfDfltUsrDef3.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfDfltUsrDef3.setDescription('Specifies user defined parameter 3. ')
nwAppnExtIfStopType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("immediate", 1), ("orderly", 2))).clone('orderly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnExtIfStopType.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfStopType.setDescription('Specifies the type of shutdown for APPN Routing Services\n                on the port. Once set, nwAppnFwdIfAdminStatus may\n                be set to disable. The disable choices are as follows:\n\n                   immediate(1) causes the link stations belonging to the\n                                physical port to be disabled immediately\n                                without flushing pending messages and \n                                without initiating an orderly disconnect sequence.\n                   orderly(2)   causes pending messages in link stations to be\n                                flushed, followed by an orderly disconnect\n                                sequence.  The link station is then disabled. ')
nwAppnExtIfCpCpSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnExtIfCpCpSupp.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfCpCpSupp.setDescription('Specifies whether CP-CP sessions are permitted on dynamic \n                 links generated on this port. ')
nwAppnExtIfLimitedRsrc = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnExtIfLimitedRsrc.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfLimitedRsrc.setDescription('Specifies whether dynamic links generated on this port\n                are a limited resource. A limited resource link will\n                be deactivated when there are no sessions using the link.')
nwAppnExtIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnExtIfAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfAddress.setDescription('Specifies the physical address of this port depending on the\n                media type. For token ring or ethernet ports, the information is\n                the 6 byte MAC address which starts in byte 1 and ends in byte 6.\n                For token ring ports the MAC address must be specified in non-\n                canonical format. For ethernet ports the MAC address must be \n                specified in canonical format.  For frame relay ports, there is\n                no associated address, i.e., it will be a zero length octet string.')
nwAppnExtIfSsap = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 2, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="04")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnExtIfSsap.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnExtIfSsap.setDescription('For token ring or ethernet ports specifies the Source SAP Address\n                of this port. ')
nwAppnIfCnPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 3, 1), )
if mibBuilder.loadTexts: nwAppnIfCnPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnIfCnPortTable.setDescription('This table contains definitions for the Connection\n                 Network port table which defines which local ports can\n                 access a connection network. To add a row to the table,\n                 nwAppnIfCnPtFqName and nwAppnIfCnPtName are required entries.\n                 To delete a row, set the control field to delete.\n                 Adding the first row for a connection network implicitly\n                 creates the connection network and deleting the last\n                 remaining row for a connection network implicitly removes\n                 the connection network.')
nwAppnIfCnPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 3, 1, 1), ).setIndexNames((0, "CTRON-APPN-MIB", "nwAppnIfCnPtFqName"), (0, "CTRON-APPN-MIB", "nwAppnIfCnPtName"))
if mibBuilder.loadTexts: nwAppnIfCnPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnIfCnPortEntry.setDescription('Specifies the APPN Connection Network port definitions.')
nwAppnIfCnPtFqName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnIfCnPtFqName.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnIfCnPtFqName.setDescription('Specifies the fully-qualified Name of the Virtual Routing Node.\n                The name format is NNNNNNNN.CCCCCCCC where NNNNNNNN is the\n                network identifier and CCCCCCCC is the Control Point name. Valid\n                characters to make up these two strings are uppercase letters\n                A through Z, numerics 0 through 9, and the special characters\n                $, @, and #.  The first character of the name must NOT be\n                numeric. Each string must be a maximum length of 8 characters\n                with no embedded spaces and the strings are joined by a dot. ')
nwAppnIfCnPtName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnIfCnPtName.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnIfCnPtName.setDescription('Specifies one of the ports which can access this Connection\n                Network.')
nwAppnIfCnPtControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("other", 1), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnIfCnPtControl.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnIfCnPtControl.setDescription('Set this object to delete to delete this port from this\n                Connection Network.')
nwAppnIfCnTgCharTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 3, 2), )
if mibBuilder.loadTexts: nwAppnIfCnTgCharTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnIfCnTgCharTable.setDescription("This table contains the APPN definitions for a Connection\n                Network's transmission group characteristics. Rows may be\n                neither added nor deleted, only modified. Rows are\n                added/deleted implicitly through CnPortTable.")
nwAppnIfCnTgCharEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 3, 2, 1), ).setIndexNames((0, "CTRON-APPN-MIB", "nwAppnIfCnTgFqName"))
if mibBuilder.loadTexts: nwAppnIfCnTgCharEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnIfCnTgCharEntry.setDescription('Specifies the APPN transmission group characteristics for\n                the Connection Network.')
nwAppnIfCnTgFqName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnIfCnTgFqName.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnIfCnTgFqName.setDescription('Specifies the fully-qualified Name of the Virtual Routing Node.\n                The name format is NNNNNNNN.CCCCCCCC where NNNNNNNN is the\n                network identifier and CCCCCCCC is the Control Point name. Valid\n                characters to make up these two strings are uppercase letters\n                A through Z, numerics 0 through 9, and the special characters\n                #, $, and @. The first character of the name must NOT be\n                numeric. Each string must be a maximum length of 8 characters\n                with no embedded spaces and the strings are joined by a dot. ')
nwAppnIfCnTgEffectCap = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 603979776))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnIfCnTgEffectCap.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnIfCnTgEffectCap.setDescription('Specifies the maximum kilo bits per second rate (link speed) for\n                the connection network. ')
nwAppnIfCnTgConnectCost = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnIfCnTgConnectCost.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnIfCnTgConnectCost.setDescription('Specifies the cost per connect time for the Connection Network.\n                0 is the lowest cost and 255 is the largest cost.')
nwAppnIfCnTgByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnIfCnTgByteCost.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnIfCnTgByteCost.setDescription('Specifies the cost per byte for the Connection Network.\n                0 is the lowest cost and 255 is the largest cost.')
nwAppnIfCnTgSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("nonsecure", 1), ("publicSwitchNw", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnIfCnTgSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnIfCnTgSecurity.setDescription('For the Connection Network, specify one of the following\n                 security selections:\n                        non-secure - specifies no security.\n                        public switched - data flows over a public switched\n                                network.\n                        underground cable - data transmitted over a secure\n                                underground cable.\n                        secure conduit - line is secure conduit that is not\n                                guarded.\n                        guarded conduit - conduit that is protected against\n                                physical tapping.\n                        encrypted - encryption over the line.\n                        guarded radiation - line is proected against physical\n                                and radiation tapping. ')
nwAppnIfCnTgPropDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 384, 9216, 147456, 294912, 2013265920))).clone(namedValues=NamedValues(("minimum", 0), ("negligible", 384), ("terrestrial", 9216), ("packetswitched", 147456), ("long", 294912), ("maximum", 2013265920)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnIfCnTgPropDelay.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnIfCnTgPropDelay.setDescription('Specifies the propagation delay which represents the time it\n                takes for a signal to travel the length of the link in\n                microseconds, with some of the more common default values\n                enumerated.  The default times in parentheses are in microseconds.\n                These default values fall into the following ranges:\n\n                        minimum                 - no propagation delay\n                        negligible, lan         - less than 480 microseconds\n                        terrestrial, telephone  - between 480 and 49,512\n                                                  microseconds\n                        packetswitched          - between 49,512 and 245,760\n                                                  microseconds\n                        long, satellite         - more than 245760 microseconds.\n                        maximum                 - the maximum propagation delay. ')
nwAppnIfCnTgUsrDef1 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnIfCnTgUsrDef1.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnIfCnTgUsrDef1.setDescription('Specifies user defined parameter 1. ')
nwAppnIfCnTgUsrDef2 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnIfCnTgUsrDef2.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnIfCnTgUsrDef2.setDescription('Specifies user defined parameter 2. ')
nwAppnIfCnTgUsrDef3 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnIfCnTgUsrDef3.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnIfCnTgUsrDef3.setDescription('Specifies user defined parameter 3. ')
nwAppnFwdIfCtrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1), )
if mibBuilder.loadTexts: nwAppnFwdIfCtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrTable.setDescription('This table contains the Message Unit (MU) and byte counters for\n                each port configured and enabled for APPN Routing Services. ')
nwAppnFwdIfCtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1, 1), ).setIndexNames((0, "CTRON-APPN-MIB", "nwAppnFwdIfCtrIfIndex"))
if mibBuilder.loadTexts: nwAppnFwdIfCtrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrEntry.setDescription('Each entry indicates Message Units (MU) and byte counts on\n                the router port for which this entry exists.')
nwAppnFwdIfCtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfCtrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrIfIndex.setDescription('Indicates the value of MIB 2 ifindex, which identifies the\n                 router port for which the entry exists. This is the primary\n                index into the APPN per-port counter table. ')
nwAppnFwdIfCtrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdIfCtrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrAdminStatus.setDescription('Sets the administrative state of the per-port Message Unit\n                (MU) and byte counters on the router port for which the entry\n                exists.  enabled(3) causes these counters to become active.\n                disabled(2) causes these counters to become inactive.')
nwAppnFwdIfCtrReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdIfCtrReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrReset.setDescription('Resets the per-port Message Unit (MU) and byte counters on the\n                router port for which this entry exists. reset (2) resets the\n                counters to 0.  nwAppnFwdIfCtrOperationalTime is also reset to 0.')
nwAppnFwdIfCtrOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfCtrOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrOperationalTime.setDescription('Indicates the amount of time in hundreths of a second that the\n                per-port Message Unit (MU) and byte counters have been active on\n                the APPN routing services port for which this entry exists.')
nwAppnFwdIfCtrInMus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfCtrInMus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrInMus.setDescription('Indicates the total number of Message Units (MU)s that have been \n                received, during nwAppnFwdIfCtrOperationaltime on the router port\n                for which this entry exists.')
nwAppnFwdIfCtrOutMus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfCtrOutMus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrOutMus.setDescription('Indicates the total number of Message Units (MU)s that have been\n                transmitted, during nwAppnFwdIfCtrOperationalTime, on the router\n                port for which this entry exists.')
nwAppnFwdIfCtrFwdMus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfCtrFwdMus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrFwdMus.setDescription('Indicates the total number of Message Units (MU)s that have\n                been forwarded during nwAppnFwdIfCtrOperationalTime on the router\n                port for which this entry exists.')
nwAppnFwdIfCtrFilteredMus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfCtrFilteredMus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrFilteredMus.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnFwdIfCtrDiscardMus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfCtrDiscardMus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrDiscardMus.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnFwdIfCtrAddrErrMus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfCtrAddrErrMus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrAddrErrMus.setDescription('Indicates the total number of Message Units (MUs) that contain\n                an address error in the SNA header that have been received\n                during nwAppnFwdIfCtrOperationalTime on the router port for which\n                this entry exists.')
nwAppnFwdIfCtrLenErrMus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfCtrLenErrMus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrLenErrMus.setDescription('Indicates the total number of Message Units (MUs) that contain\n                a length error that have been received during\n                nwAppnFwdIfCtrOperationalTime on the router port for which\n                this entry exists.')
nwAppnFwdIfCtrHdrErrMus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfCtrHdrErrMus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrHdrErrMus.setDescription('Indicates the total number of Message Units (MUs) that contain\n                a header error other than an address or length error that have\n                been received during nwAppnFwdIfCtrOperationalTime on the router\n                port for which this entry exists.')
nwAppnFwdIfCtrInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfCtrInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrInBytes.setDescription('Indicates the total number of bytes in the Message Units (MU)s\n                that have been received, during nwAppnFwdIfCtrOperationalTime,\n                on the router port for which the entry exists.')
nwAppnFwdIfCtrOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfCtrOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrOutBytes.setDescription('Indicates the total number of bytes in the Message Units (MU)s\n                that have been transmitted, during nwAppnFwdIfCtrOperationalTime,\n                on the router port for which the entry exists.')
nwAppnFwdIfCtrFwdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfCtrFwdBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrFwdBytes.setDescription('Indicates the total number of bytes in Message Units (MU)s that\n                have been forwarded during nwAppnFwdIfCtrOperationalTime on the\n                router port for which this entry exists.')
nwAppnFwdIfCtrFilteredBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfCtrFilteredBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrFilteredBytes.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnFwdIfCtrDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfCtrDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrDiscardBytes.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnFwdIfCtrHostInMus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfCtrHostInMus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrHostInMus.setDescription('Indicates the total number of Message Units (MUs) that have\n                been delivered to local half sessions during\n                nwAppnFwdIfCtrOperationalTime on the router port for which this\n                entry exists.')
nwAppnFwdIfCtrHostOutMus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfCtrHostOutMus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrHostOutMus.setDescription('Indicates the total number of Message Units (MUs) that have\n                been successfully sent from local half sessions to Path Control\n                during nwAppnFwdIfCtrOperationalTime on the router port for\n                which this entry exists.')
nwAppnFwdIfCtrHostDiscardMus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfCtrHostDiscardMus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrHostDiscardMus.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnFwdIfCtrHostInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfCtrHostInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrHostInBytes.setDescription('Indicates the total number of bytes in Message Units (MUs)\n                that have been delivered to local half sessions during\n                nwAppnFwdIfCtrOperationalTime on the router port for which this\n                entry exists.')
nwAppnFwdIfCtrHostOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfCtrHostOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrHostOutBytes.setDescription('Indicates the total number of bytes in Message Units (MUs) that\n                have been successfully sent from local half sessions to Path\n                Control during nwAppnFwdIfCtrOperationalTime on the router port\n                for which this entry exists.')
nwAppnFwdIfCtrHostDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 2, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdIfCtrHostDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdIfCtrHostDiscardBytes.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnFwdLsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1), )
if mibBuilder.loadTexts: nwAppnFwdLsTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsTable.setDescription('This table contains the configuration and management \n                information for links to adjacent link stations. This table is\n                indexed by nwAppnFwdLsName.  Operations which apply are add,\n                delete, modify, enable, and disable.  To add a row to the\n                table, the required fields in the row must be provided.\n                The required fields are nwAppnFwdLsPortName and \n                nwAppnFwdLsDestAddr.  All other fields which are not provided\n                will be defaulted.  To enable a link select enable(3) from\n                nwAppnFwdLsAdminStatus. To delete a row, set nwAppnFwdLsControl\n                to delete(3).  To disable a link set nwAppnFwdLsStopType and\n                then select disable(2) in nwAppnFwdLsAdminStatus.\n                If nwAppnFwdLsStopType is not selected, the link is disabled in\n                an orderly fashion. ')
nwAppnFwdLsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1), ).setIndexNames((0, "CTRON-APPN-MIB", "nwAppnFwdLsName"))
if mibBuilder.loadTexts: nwAppnFwdLsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsEntry.setDescription('Specifies the configuration for a link to an adjacent link\n                station for which the entry exists.')
nwAppnFwdLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsName.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsName.setDescription('Specifies the primary index to the adjacent link station table\n                (nwAppnFwdLsTable). ')
nwAppnFwdLsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsAdminStatus.setDescription('Sets the administrative state of a link to an adjacent\n                link station. enabled(3) causes the link to become established.\n                disable(2) causes the link to terminate. There are various\n                severities of disabling a link which are selected via the leaf\n                node nwAppnFwdLsStopType described further within this branch. ')
nwAppnFwdLsOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pendingDisable", 4), ("pendingEnable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsOperStatus.setDescription('Specifies the current operating status of the link for which this\n                entry exists.')
nwAppnFwdLsOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsOperationalTime.setDescription('Specifies the elapsed time, in hundredths of a second, that\n                nwAppnFwdLsAdminStatus has been either enabled or DISABLED.\n                If the operational state is pending-disable,\n                nwAppnFwdLsOperationalTime indicates the amount of time since\n                the state was enabled.  If the operational state is pending-enable,\n                nwAppnFwdLsOperationalTime indicates the amount of time since the\n                state was DISABLED.')
nwAppnFwdLsControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("other", 1), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsControl.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsControl.setDescription('Set this object to delete in order to delete the entry.')
nwAppnFwdLsPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsPortName.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsPortName.setDescription('This link station port name corresponds to the port name\n                index into the the nwAppnExtensionTable which describes the\n                router port on which the adjacent link station is defined.')
nwAppnFwdLsAdjCpName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsAdjCpName.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsAdjCpName.setDescription('Specifies the fully-qualified, 17 byte long, adjacent Control\n                Point name. The name format is NNNNNNNN.CCCCCCCC where NNNNNNNN\n                is the network identifier and CCCCCCCC is the Control Point name.\n                Valid characters to make up these two strings are uppercase\n                letters A through Z, numerics 0 through 9, and the special\n                characters $, # and @.  The first character of the name must NOT\n                be numeric. Each string must be a maximum length of 8 characters\n                with no embedded spaces and the strings are joined by a dot. ')
nwAppnFwdLsAdjCpType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("endnode", 1), ("networknode", 2))).clone('endnode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsAdjCpType.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsAdjCpType.setDescription('Specifies the adjacent node type. The following values are\n                valid: endnode(1), networknode(2). endnode(1) includes both\n                End Node and LEN node types.')
nwAppnFwdLsAutoActSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsAutoActSupport.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsAutoActSupport.setDescription('Specifies whether the link is automatically enabled when\n                a session is activated over the link. It is an error to set\n                this to yes(1) when nwAppnFwdLsCpCpSessSupp is set to yes(1). ')
nwAppnFwdLsLimitedRsrc = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsLimitedRsrc.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsLimitedRsrc.setDescription('Specifies whether this link is to be deactivated when\n                there are no sessions using the link. If\n                nwAppnFwdLsCpCpSessSupp is yes, however, the link will\n                not be deactivated if CP-CP sessions are terminated.\n                Note also that a link over a non-switched port cannot\n                be configured as a limited resource.')
nwAppnFwdLsSscpSession = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsSscpSession.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsSscpSession.setDescription('Requests a host system to initiate sessions between its SSCP and\n                dependent LUs within APPN Routing Services. If set to yes,\n                then nwAppnFwdLsPuName is required. Note: once this parameter\n                is set along with other link station parameters associated with\n                a link station definition, it cannot be modified. In order to\n                change it, the link station definition itself must be deleted and\n                then redefined with the new parameter.')
nwAppnFwdLsPuName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsPuName.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsPuName.setDescription('Specifies the name of the local PU if nwAppnFwdLsSscpSession is\n                set to yes.  Valid characters are uppercase A through Z and\n                numerics 0 through 9.  The name must start with an alphabetic\n                character. Note: once this parameter is set along with other \n                link station parameters associated with a link station definition,\n                it cannot be modified. In order to change it, the link station\n                definition itself must be deleted and then redefined with the new\n                parameter.')
nwAppnFwdLsBackLvlLenEN = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no", 1), ("xid3", 2), ("xid0", 3), ("noxid", 4))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsBackLvlLenEN.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsBackLvlLenEN.setDescription('Specifies whether or not the adjacent node is a back level\n                LEN Node. If so, specify the type of back level LEN node as\n                follows:\n\n                xid3(2) -       supports XID-3 protocols, but does not include \n                                Network Name control vector in the XID.\n\n                xid0(3) -       Supports XID-0 protocols. Not valid if\n                                nwAppnExtIfLocalLsRole is negotiable(1).\n\n                noxid(4) -      Does not support XID protocols. Valid only if\n                                nwAppnExtIfPortType is nonswitched(1) and not\n                                valid if nwAppnExtIfLocalLsRole is negotiable(1).\n                                \n                If not no(1), then nwAppnFwdLsAdjCpName and nwAppnFwdLsIdNum\n                must be specified. ')
nwAppnFwdLsCpCpSessSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsCpCpSessSupp.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCpCpSessSupp.setDescription('Specifies whether this link supports CP to CP sessions.')
nwAppnFwdLsEffectCap = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 603979776))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsEffectCap.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsEffectCap.setDescription('Specifies th maximum kilo bits per second rate (link speed)\n                for the link. ')
nwAppnFwdLsConnectCost = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsConnectCost.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsConnectCost.setDescription('Specifies the cost per connect time for the link. Zero is the\n                lowest cost and 255 is the largest cost.')
nwAppnFwdLsByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsByteCost.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsByteCost.setDescription('Specifies the cost per Byte for the link. Zero is the lowest\n                cost and 255 is the largest cost.')
nwAppnFwdLsSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("nonsecure", 1), ("publicSwitchNw", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsSecurity.setDescription('Security selections available for the link are as follows:\n\n                        non-secure        - specifies no security.\n                        public switched   - data flows over a public switched\n                                            network.\n                        underground cable - data transmitted over a secure\n                                            underground cable.\n                        secure conduit    - line is secure conduit that is not\n                                            guarded.\n                        guarded conduit   - conduit that is protected against\n                                            physical tapping.\n                        encrypted         - encryption over the line.\n                        guarded radiation - line is proected against physical\n                                            and radiation tapping. ')
nwAppnFwdLsPropDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 384, 9216, 147456, 294912, 2013265920))).clone(namedValues=NamedValues(("minimum", 0), ("negligible", 384), ("terrestrial", 9216), ("packetswitched", 147456), ("long", 294912), ("maximum", 2013265920)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsPropDelay.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsPropDelay.setDescription('Specifies the propagation delay which represents the relative\n                time it takes for a signal to travel the length of the link in\n                microseconds, with some of the more common default values\n                enumerated.  The default times in parentheses are in microseconds.\n                These default values fall into the following ranges:\n\n                        minimum                 - no propagation delay\n                        negligible, lan         - less than 480 microseconds\n                        terrestrial, telephone  - between 480 and 49,512\n                                                  microseconds\n                        packetswitched          - between 49,512 and 245,760\n                                                  microseconds\n                        long, satellite         - more than 245760 microseconds.\n                        maximum                 - the maximum propagation delay. ')
nwAppnFwdLsUsrDef1 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsUsrDef1.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsUsrDef1.setDescription('Specifies user defined parameter 1. ')
nwAppnFwdLsUsrDef2 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsUsrDef2.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsUsrDef2.setDescription('Specifies user defined parameter 2. ')
nwAppnFwdLsUsrDef3 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsUsrDef3.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsUsrDef3.setDescription('Specifies user defined parameter 3. ')
nwAppnFwdLsTrgtPacingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsTrgtPacingCount.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsTrgtPacingCount.setDescription('Species the desired pacing window size for BINDs on this\n                transmission group. The number is a value between 0 and 32767\n                and is significant only when fixed bind pacing is being used.')
nwAppnFwdLsMaxSendBtu = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(99, 65535)).clone(2048)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsMaxSendBtu.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsMaxSendBtu.setDescription('Specifies maximum Message Unit (MU) size that can be sent.')
nwAppnFwdLsNumActiveSession = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsNumActiveSession.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsNumActiveSession.setDescription('Specifies total number of active sessions on this link.\n                This includes both end point sessions and intermediate sessions.')
nwAppnFwdLsdynamicLs = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsdynamicLs.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsdynamicLs.setDescription('Specifies whether this link station was dynamically\n                allocated (yes(1)) or whether the link station was defined by\n                the user (no(2)).')
nwAppnFwdLsStopType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("immediate", 1), ("orderly", 2))).clone('orderly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsStopType.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsStopType.setDescription('Specifies the type of shutdown for a link. Once selected,\n                set disable in nwAppnFwdIfAdminStatus. The shutdown choices are\n                as follows:\n\n                 immediate(1) causes the link station to disconnect\n                              immediately without flushing remaining Message Unit (MU)s.\n                 orderly(2)   causes the link station to disconnect\n                              after successfully flushing remaining Message Unit (MU)s. ')
nwAppnFwdLsPortNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsPortNbr.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsPortNbr.setDescription('This link station port number corresponds to the index into\n                the nwAppnFwdIfTable and the nwAppnExtensionTable, which \n                together describe the port used by APPN Routing Services.')
nwAppnFwdLsDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsDestAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsDestAddr.setDescription('Specifies the destination address of the adjacent link station\n                depending on the media type. For token ring or ethernet ports,\n                the information is the 6 byte Destination MAC Address which\n                starts in byte 1 and ends in byte 6. For token ring ports, \n                the MAC address must be specified in non-canonical format.\n                For ethernet ports the MAC address must be specified in\n                canonical format. For frame relay, the  address is a non-null\n                terminated string which is the ascii representation of the DLCI.')
nwAppnFwdLsDsap = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="04")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsDsap.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsDsap.setDescription('For a token ring or ethernet network, specifies the destination\n                SAP address associated with the adjacent link station.  ')
nwAppnFwdLsBlockNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsBlockNum.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsBlockNum.setDescription('This represents the 3 hexadecimal digit block number which \n                precedes the 5 digit id number in the 8 digit node id of the\n                adjacent node. The node id is used in XIDs and Alerts. The\n                block number identifies the product type. Both the block number\n                and id number combined, uniquely identify the adjacent node\n                within the installation network.')
nwAppnFwdLsIdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 1, 1, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsIdNum.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsIdNum.setDescription('This represents the 5 hexadecimal digit id number which follows\n                the 3 digit block number in the 8 digit node id of the adjacent\n                node. The node id is used in XIDs and Alerts. The id number\n                uniquely identifies the adjacent node within a product type\n                indicated by its block number. Both the block number and id number\n                combined, uniquely identify the adjacent node within the \n                installation network.')
nwAppnFwdLsCtrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1), )
if mibBuilder.loadTexts: nwAppnFwdLsCtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrTable.setDescription('This table contains the Basic Link Unit (BLU) and byte\n                counters for each configured adjacent link station.')
nwAppnFwdLsCtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1, 1), ).setIndexNames((0, "CTRON-APPN-MIB", "nwAppnFwdLsCtrLsName"))
if mibBuilder.loadTexts: nwAppnFwdLsCtrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrEntry.setDescription('Each entry indicates the Basic Link Unit (BLU) and byte\n                count for the configured adjacent link station for which the\n                entry exists. ')
nwAppnFwdLsCtrLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsCtrLsName.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrLsName.setDescription('Specifies the primary index into the link station \n                counter table. This index is the link station name. ')
nwAppnFwdLsCtrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsCtrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrAdminStatus.setDescription('Sets the administrative state of the Basic Link Unit (BLU)\n                and byte counters on the link for which this entry exists.\n                enabled(3) causes these counters to reset and become active.\n                disabled(2) causes these counters to become inactive. ')
nwAppnFwdLsCtrReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnFwdLsCtrReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrReset.setDescription('Resets the Basic Link Unit (BLU) and byte counters on the link\n                for which this entry exists. reset(2) resets the counters to 0.\n                nwAppnFwdLsCtrOperationalTime is also reset to 0.')
nwAppnFwdLsCtrOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsCtrOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrOperationalTime.setDescription('Specifies the amount of time in hundreths of a second that the\n                Basic Link Unit (BLU) and byte counters have been active on the\n                link for which this entry exists.')
nwAppnFwdLsCtrInBlus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsCtrInBlus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrInBlus.setDescription('Specifies the total number of Basic Link Unit (BLU)s that have\n                been received, during nwAppnFwdLsCtrOperationaltime, on the link\n                for which this entry exists. This includes both information\n                (I-frame) and XID BLUs.')
nwAppnFwdLsCtrOutBlus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsCtrOutBlus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrOutBlus.setDescription('Specifies the total number of Basic Link Unit (BLU)s that have\n                been transmitted, during nwAppnFwdLsCtrOperationalTime, on the\n                link for which this entry exists. This includes both information\n                (I-frame) and XID BLUs.')
nwAppnFwdLsCtrFwdBlus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsCtrFwdBlus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrFwdBlus.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnFwdLsCtrFilteredBlus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsCtrFilteredBlus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrFilteredBlus.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnFwdLsCtrDiscardBlus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsCtrDiscardBlus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrDiscardBlus.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnFwdLsCtrAddrErrBlus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsCtrAddrErrBlus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrAddrErrBlus.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnFwdLsCtrLenErrBlus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsCtrLenErrBlus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrLenErrBlus.setDescription('Specifies the total number of received Basic Link Unit (BLU)s\n                during nwAppnFwdLsCtrOperationalTime which have invalid DLC\n                headers on the link for which this entry exists.')
nwAppnFwdLsCtrHdrErrBlus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsCtrHdrErrBlus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrHdrErrBlus.setDescription('Specifies the total number of received Basic Link Unit (BLU)s\n                during nwAppnFwdLsCtrOperationalTime which have length errors\n                on the link for which this entry exists.')
nwAppnFwdLsCtrInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsCtrInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrInBytes.setDescription('Specifies the total number of bytes that have been received,\n                during nwAppnFwdLsCtrOperationalTime, on the link for which\n                the entry exists.  This includes bytes contained in \n                information (I-frames) and XID BLUs.')
nwAppnFwdLsCtrOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsCtrOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrOutBytes.setDescription('Specifies the total number of bytes that have been transmitted,\n                during nwAppnFwdLsCtrOperationalTime, on the link for which the\n                entry exists.  This includes bytes contained in information\n                (I-frames) and XID BLUs.')
nwAppnFwdLsCtrFwdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsCtrFwdBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrFwdBytes.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnFwdLsCtrFilteredBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsCtrFilteredBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrFilteredBytes.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnFwdLsCtrDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsCtrDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrDiscardBytes.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnFwdLsCtrHostInBlus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsCtrHostInBlus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrHostInBlus.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnFwdLsCtrHostOutBlus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsCtrHostOutBlus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrHostOutBlus.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnFwdLsCtrHostDiscardBlus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsCtrHostDiscardBlus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrHostDiscardBlus.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnFwdLsCtrHostInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsCtrHostInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrHostInBytes.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnFwdLsCtrHostOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsCtrHostOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrHostOutBytes.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnFwdLsCtrHostDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 2, 3, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnFwdLsCtrHostDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnFwdLsCtrHostDiscardBytes.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnIsrAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 4, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnIsrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnIsrAdminStatus.setDescription('Intermediate Session Routing cannot be turned on and\n                 off.  Any modifications to this leaf will have no\n                 affect. ')
nwAppnIsrOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 4, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pendingDisable", 4), ("pendingEnable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnIsrOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnIsrOperStatus.setDescription('Specifies the current operating condition of the ISR routing\n                protocol, system-wide.')
nwAppnIsrAdminReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 4, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("other", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnIsrAdminReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnIsrAdminReset.setDescription('This object does not apply to this protocol. It is a common\n                object, inherited from the MIB framework used to provide a\n                common management interface to all the Cabletron Routing Services\n                protocol-specific MIBs.')
nwAppnIsrOperationalTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 4, 2, 1, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnIsrOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnIsrOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second, that\n                nwAppnOperStatus has been in its current state.')
nwAppnIsrVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 4, 2, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnIsrVersion.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnIsrVersion.setDescription('Indicates the current revision level of the ISR firmware in\n                textual format. This is the same version number as that of APPN\n                Routing Services firmware, nwAppnSysVersion. ')
nwAppnEventAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnEventAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnEventAdminStatus.setDescription('Set the administrative state of APPN Routing Services event\n                logging. enabled(3) causes the event log to become active.\n                disabled(2) causes the event log to become inactive.')
nwAppnEventMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 10, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnEventMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnEventMaxEntries.setDescription('Sets the maximum number of entries allowed in the event log\n                table.  When the number of entries reaches the value of\n                nwAppnEventMaxEntries the first (oldest) entry is deleted\n                to allow a new entry to be added.')
nwAppnEventTraceAll = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnEventTraceAll.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnEventTraceAll.setDescription('enabled(3) allows logging of all event types on all ports.\n                disabled(2) causes the filter table to specify which events to\n                log.')
nwAppnEventFilterTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 10, 2, 1), )
if mibBuilder.loadTexts: nwAppnEventFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnEventFilterTable.setDescription('This table contains descriptions of how to filter log entries.')
nwAppnEventFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 10, 2, 1, 1), ).setIndexNames((0, "CTRON-APPN-MIB", "nwAppnEventFltrProtocol"), (0, "CTRON-APPN-MIB", "nwAppnEventFltrIfNum"))
if mibBuilder.loadTexts: nwAppnEventFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnEventFilterEntry.setDescription('Each entry specifies the filter for log entries.  The\n                instance nwAppnEventProtocol refers to the instance used\n                in the nwRtgProtocolTable and nwComponentTable specified\n                by the ctrouter-mib.txt. ')
nwAppnEventFltrProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnEventFltrProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnEventFltrProtocol.setDescription('Selects the protocol to log events from.')
nwAppnEventFltrIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 10, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnEventFltrIfNum.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnEventFltrIfNum.setDescription('Specifies the APPN Routing Services port on which to log events. ')
nwAppnEventFltrControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("delete", 2), ("add", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnEventFltrControl.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnEventFltrControl.setDescription('Setting this field to delete will allow entries to be\n                removed from the table.  This is done by adding new entries\n                with instance fields that match the entry to be removed from\n                the table.  The new entry being added must have this control\n                field set to delete in order for the matching entry already\n                in the table to be deleted.  Setting this field to add will\n                add the entry to the table.')
nwAppnEventFltrType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 10, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("misc", 1), ("timer", 2), ("rcv", 4), ("xmit", 8), ("event", 16), ("error", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnEventFltrType.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnEventFltrType.setDescription('This bit field mask filter will allow only events of\n                certain types to be logged.  By default all types will be\n                logged.  Clearing event types from this field will cause\n                those types not to be logged.  Adding event types to this\n                field will enable those types to be logged. ')
nwAppnEventFltrSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 10, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("highest", 1), ("highmed", 2), ("highlow", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnEventFltrSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnEventFltrSeverity.setDescription('This filter controls the amount of logging by ignoring events\n                of lower priority than that specified by the filter value.\n                Specifying highest(1) causes all events except those of highest\n                severity to be ignored. Specifying highmed(2) causes lowest\n                severity events to be ignored.  Specifying highlow(3) causes\n                all events to be logged.  highmed(2) is the default setting.')
nwAppnEventFltrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 10, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("log", 1), ("trap", 2), ("logTrap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwAppnEventFltrAction.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnEventFltrAction.setDescription('This field specifies how the events are to be logged.\n                Specifying log(1) stores the events in the event log\n                table (defined below).  Specifying trap(2) sends events\n                out through the trap mechanism. Specifying logTrap(3)\n                does both. ')
nwAppnEventTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 10, 3, 1), )
if mibBuilder.loadTexts: nwAppnEventTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnEventTable.setDescription('This table contains all events that have been logged.')
nwAppnEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 10, 3, 1, 1), ).setIndexNames((0, "CTRON-APPN-MIB", "nwAppnEventNumber"))
if mibBuilder.loadTexts: nwAppnEventEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnEventEntry.setDescription('Each entry specifies events that have been logged.')
nwAppnEventNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 10, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnEventNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnEventNumber.setDescription('This ordinal number uniquely identifies events.')
nwAppnEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 10, 3, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnEventTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnEventTime.setDescription('This number specifies when the event was logged.')
nwAppnEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 10, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64))).clone(namedValues=NamedValues(("misc", 1), ("timer", 2), ("rcv", 4), ("xmit", 8), ("event", 16), ("diags", 32), ("error", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnEventType.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnEventType.setDescription('Specifies type of event logged.')
nwAppnEventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 10, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("highest", 1), ("highmed", 2), ("highlow", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnEventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnEventSeverity.setDescription('Specifies the severity of the event logged.')
nwAppnEventProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 10, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnEventProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnEventProtocol.setDescription('Specifies the protocol where the event occured.')
nwAppnEventIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 10, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnEventIfNum.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnEventIfNum.setDescription('Specifies the APPN Routing Services port the event occurred on.')
nwAppnEventTextString = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 5, 2, 10, 3, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAppnEventTextString.setStatus('mandatory')
if mibBuilder.loadTexts: nwAppnEventTextString.setDescription('Specifies the actual text string to be logged.')
mibBuilder.exportSymbols("CTRON-APPN-MIB", nwAppnIfCnPortTable=nwAppnIfCnPortTable, nwAppnHostsInterfaces=nwAppnHostsInterfaces, nwAppnIfCnPortEntry=nwAppnIfCnPortEntry, nwAppnFwdLsCtrLenErrBlus=nwAppnFwdLsCtrLenErrBlus, nwAppnEvent=nwAppnEvent, nwAppnFwdLsCtrHostOutBlus=nwAppnFwdLsCtrHostOutBlus, nwAppnFwdLsUsrDef3=nwAppnFwdLsUsrDef3, nwAppnEventFltrSeverity=nwAppnEventFltrSeverity, nwAppnIsrAdminReset=nwAppnIsrAdminReset, nwAppnSysRtAddResist=nwAppnSysRtAddResist, nwAppnFwdCtrAdminStatus=nwAppnFwdCtrAdminStatus, nwAppnFwdIfCtrFilteredMus=nwAppnFwdIfCtrFilteredMus, nwAppnFwdLsCtrFilteredBlus=nwAppnFwdLsCtrFilteredBlus, nwAppnIfCnTgCharEntry=nwAppnIfCnTgCharEntry, nwAppnExtIfAddress=nwAppnExtIfAddress, nwAppnExtIfMaxIfrmRcvd=nwAppnExtIfMaxIfrmRcvd, nwAppnIfCnPtFqName=nwAppnIfCnPtFqName, nwAppnSysLuName=nwAppnSysLuName, nwAppnSysIsrUpperThresh=nwAppnSysIsrUpperThresh, nwAppnFwdLsDestAddr=nwAppnFwdLsDestAddr, nwAppnFwdIfAdminStatus=nwAppnFwdIfAdminStatus, nwAppnExtIfDfltByteCost=nwAppnExtIfDfltByteCost, nwAppnHostsSystem=nwAppnHostsSystem, nwAppnFwdLsdynamicLs=nwAppnFwdLsdynamicLs, nwAppnFwdLsCtrHostOutBytes=nwAppnFwdLsCtrHostOutBytes, nwAppnExtIfDfltUsrDef1=nwAppnExtIfDfltUsrDef1, nwAppnFwdIfCtrHostInBytes=nwAppnFwdIfCtrHostInBytes, nwAppnFwdLsUsrDef1=nwAppnFwdLsUsrDef1, nwAppnSysMaxLocates=nwAppnSysMaxLocates, nwAppnFwdLsCtrAdminStatus=nwAppnFwdLsCtrAdminStatus, nwAppnIsrVersion=nwAppnIsrVersion, nwAppnFwdIfCtrDiscardMus=nwAppnFwdIfCtrDiscardMus, nwAppnSysAdministration=nwAppnSysAdministration, nwAppnFwdLsPropDelay=nwAppnFwdLsPropDelay, nwAppnEventLogTable=nwAppnEventLogTable, nwAppnSysCpName=nwAppnSysCpName, nwAppnExtIfDfltUsrDef2=nwAppnExtIfDfltUsrDef2, nwAppnFwdIfCtrOutMus=nwAppnFwdIfCtrOutMus, nwAppnFwdIfCtrFilteredBytes=nwAppnFwdIfCtrFilteredBytes, nwAppnExtIfDlcType=nwAppnExtIfDlcType, nwAppnEventEntry=nwAppnEventEntry, nwAppnIfCnTgByteCost=nwAppnIfCnTgByteCost, nwAppnFwdIfCounters=nwAppnFwdIfCounters, nwAppnSysAdminReset=nwAppnSysAdminReset, nwAppnSysConfig=nwAppnSysConfig, nwAppnFwdLsCtrAddrErrBlus=nwAppnFwdLsCtrAddrErrBlus, nwAppnSysLuTable=nwAppnSysLuTable, nwAppnComponents=nwAppnComponents, nwAppnEventLogFilterTable=nwAppnEventLogFilterTable, nwAppnSysStopType=nwAppnSysStopType, nwAppnEventFltrProtocol=nwAppnEventFltrProtocol, nwAppnExtIfDfltTargetPacing=nwAppnExtIfDfltTargetPacing, nwAppnFwdLsCtrOperationalTime=nwAppnFwdLsCtrOperationalTime, nwAppnSysVersion=nwAppnSysVersion, nwAppnFwdIfCtrFwdBytes=nwAppnFwdIfCtrFwdBytes, nwAppnFwdIfCtrHdrErrMus=nwAppnFwdIfCtrHdrErrMus, nwAppnIsrSystem=nwAppnIsrSystem, nwAppnIfCnTgPropDelay=nwAppnIfCnTgPropDelay, nwAppnFwdLsBackLvlLenEN=nwAppnFwdLsBackLvlLenEN, nwAppnSysNodeType=nwAppnSysNodeType, nwAppnIfCnTgUsrDef2=nwAppnIfCnTgUsrDef2, nwAppnFwdLsIdNum=nwAppnFwdLsIdNum, nwAppnFwdCtrInBytes=nwAppnFwdCtrInBytes, nwAppnExtIfDfltUsrDef3=nwAppnExtIfDfltUsrDef3, nwAppnSysTreeUseLimit=nwAppnSysTreeUseLimit, nwAppnExtIfDfltMaxSBtuSize=nwAppnExtIfDfltMaxSBtuSize, nwAppnFwdLsAdminStatus=nwAppnFwdLsAdminStatus, nwAppnIsrOperationalTime=nwAppnIsrOperationalTime, nwAppnEventTable=nwAppnEventTable, nwAppnFwdLsOperStatus=nwAppnFwdLsOperStatus, nwAppnFwdIfControl=nwAppnFwdIfControl, nwAppnFwdCtrOutMus=nwAppnFwdCtrOutMus, nwAppnExtEntry=nwAppnExtEntry, nwAppnFwdIfCtrHostInMus=nwAppnFwdIfCtrHostInMus, nwAppnFwdIfFrameType=nwAppnFwdIfFrameType, nwAppnSysModeCosMap=nwAppnSysModeCosMap, nwAppnFwdInterfaces=nwAppnFwdInterfaces, nwAppnExtIfPortName=nwAppnExtIfPortName, nwAppnExtIfMaxRBtuSize=nwAppnExtIfMaxRBtuSize, nwAppnFwdLsName=nwAppnFwdLsName, nwAppnFwdCtrHostOutBytes=nwAppnFwdCtrHostOutBytes, nwAppnFwdLsCtrHostDiscardBytes=nwAppnFwdLsCtrHostDiscardBytes, nwAppnFwdLsCtrReset=nwAppnFwdLsCtrReset, nwAppnIfCnTgEffectCap=nwAppnIfCnTgEffectCap, nwAppnFwdIfCtrHostOutMus=nwAppnFwdIfCtrHostOutMus, nwAppnFwdLinks=nwAppnFwdLinks, nwAppnFwdSystem=nwAppnFwdSystem, nwAppnFwdLsCtrHostDiscardBlus=nwAppnFwdLsCtrHostDiscardBlus, nwAppnFwdLsCtrOutBytes=nwAppnFwdLsCtrOutBytes, nwAppnExtIfDfltConnectCost=nwAppnExtIfDfltConnectCost, nwAppnIfCnTgConnectCost=nwAppnIfCnTgConnectCost, nwAppnFwdLsCtrDiscardBytes=nwAppnFwdLsCtrDiscardBytes, nwAppnEventMaxEntries=nwAppnEventMaxEntries, nwAppnFwdLsConnectCost=nwAppnFwdLsConnectCost, nwAppnIsrIfCounters=nwAppnIsrIfCounters, nwAppnFwdIfCtrHostDiscardMus=nwAppnFwdIfCtrHostDiscardMus, nwAppnFwdCtrOperationalTime=nwAppnFwdCtrOperationalTime, nwAppnFwdLsCounters=nwAppnFwdLsCounters, nwAppnIfCnTgFqName=nwAppnIfCnTgFqName, nwAppnFwdLsCtrTable=nwAppnFwdLsCtrTable, nwAppnFwdIfForwarding=nwAppnFwdIfForwarding, nwAppnFwdIfEntry=nwAppnFwdIfEntry, nwAppnFwdLsPuName=nwAppnFwdLsPuName, nwAppnSysIsrLowerThresh=nwAppnSysIsrLowerThresh, nwAppnDistanceVector=nwAppnDistanceVector, nwAppnFwdLsTrgtPacingCount=nwAppnFwdLsTrgtPacingCount, nwAppnSysCosSize=nwAppnSysCosSize, nwAppnFwdIfCacheHits=nwAppnFwdIfCacheHits, nwAppnSysMaxIsrSessions=nwAppnSysMaxIsrSessions, nwAppnFwdCtrLenErrMus=nwAppnFwdCtrLenErrMus, nwAppnIfCn=nwAppnIfCn, nwAppnEventFltrAction=nwAppnEventFltrAction, nwAppnFwdCtrHostOutMus=nwAppnFwdCtrHostOutMus, nwAppnMibs=nwAppnMibs, nwAppnIsrFilters=nwAppnIsrFilters, nwAppnSysCpAlias=nwAppnSysCpAlias, nwAppnSysLocateTimeout=nwAppnSysLocateTimeout, nwAppnEventFilterEntry=nwAppnEventFilterEntry, nwAppnFwdIfTable=nwAppnFwdIfTable, nwAppnFwdLsCtrFwdBlus=nwAppnFwdLsCtrFwdBlus, nwAppnEventTextString=nwAppnEventTextString, nwAppnFwdLsDsap=nwAppnFwdLsDsap, nwAppnExtIfSsap=nwAppnExtIfSsap, nwAppnExtIfLocalLsRole=nwAppnExtIfLocalLsRole, nwAppnExtIfLsXmitRcvCap=nwAppnExtIfLsXmitRcvCap, nwAppnSysMdsSendQSize=nwAppnSysMdsSendQSize, nwAppnFwdLsStopType=nwAppnFwdLsStopType, nwAppnEventLogConfig=nwAppnEventLogConfig, nwAppnIsr=nwAppnIsr, nwAppnFwdIfCacheControl=nwAppnFwdIfCacheControl, nwAppnFwdIfCtrFwdMus=nwAppnFwdIfCtrFwdMus, nwAppnFwdIfCtrHostOutBytes=nwAppnFwdIfCtrHostOutBytes, nwAppnFwdLsSscpSession=nwAppnFwdLsSscpSession, nwAppnEventType=nwAppnEventType, nwAppnIsrCounters=nwAppnIsrCounters, nwAppnFwdIfOperStatus=nwAppnFwdIfOperStatus, nwAppnFib=nwAppnFib, nwAppnEventProtocol=nwAppnEventProtocol, nwAppnIsrConfig=nwAppnIsrConfig, nwAppnRedirector=nwAppnRedirector, nwAppnIsrDatabase=nwAppnIsrDatabase, nwAppnIsrInterfaces=nwAppnIsrInterfaces, nwAppnFwdLsMaxSendBtu=nwAppnFwdLsMaxSendBtu, nwAppnIsrOperStatus=nwAppnIsrOperStatus, nwAppnIfCnTgUsrDef3=nwAppnIfCnTgUsrDef3, nwAppnSysLuControl=nwAppnSysLuControl, nwAppnFwdIfAclStatus=nwAppnFwdIfAclStatus, nwAppnIsrAdminStatus=nwAppnIsrAdminStatus, nwAppnSysLuEntry=nwAppnSysLuEntry, nwAppnIfCnTgUsrDef1=nwAppnIfCnTgUsrDef1, nwAppnFwdLsCtrEntry=nwAppnFwdLsCtrEntry, nwAppnFwdCtrFwdMus=nwAppnFwdCtrFwdMus, nwAppnFwdLsCtrOutBlus=nwAppnFwdLsCtrOutBlus, nwAppnFwdIfMtu=nwAppnFwdIfMtu, nwAppnFwdLsCtrInBytes=nwAppnFwdLsCtrInBytes, nwAppnFwdLsCtrFwdBytes=nwAppnFwdLsCtrFwdBytes, nwAppnEventTime=nwAppnEventTime, nwAppnFwdIfCtrAddrErrMus=nwAppnFwdIfCtrAddrErrMus, nwAppnSysOperStatus=nwAppnSysOperStatus, nwAppnFwdCtrHostInMus=nwAppnFwdCtrHostInMus, nwAppnFwdLsAutoActSupport=nwAppnFwdLsAutoActSupport, nwAppnEventTraceAll=nwAppnEventTraceAll, nwAppnSysMdsSupport=nwAppnSysMdsSupport, nwAppnFwdLsCtrInBlus=nwAppnFwdLsCtrInBlus, nwAppnFwdIfCtrTable=nwAppnFwdIfCtrTable, nwAppnWorkGroup=nwAppnWorkGroup, nwAppnSysAdminStatus=nwAppnSysAdminStatus, nwAppnSysCfgTables=nwAppnSysCfgTables, nwAppnFwdLsSecurity=nwAppnFwdLsSecurity, nwAppnEventAdminStatus=nwAppnEventAdminStatus, nwAppnForwarding=nwAppnForwarding, nwAppnFwdCtrInMus=nwAppnFwdCtrInMus, nwAppnExtIfDfltSecurity=nwAppnExtIfDfltSecurity, nwAppnFwdLsBlockNum=nwAppnFwdLsBlockNum, nwAppnEventIfNum=nwAppnEventIfNum, nwAppnFwdIfIndex=nwAppnFwdIfIndex, nwAppnEndSystems=nwAppnEndSystems, nwAppnIfCnPtControl=nwAppnIfCnPtControl, nwAppnFwdLsByteCost=nwAppnFwdLsByteCost, nwAppnSysIsrRcvPaceWind=nwAppnSysIsrRcvPaceWind, nwAppnExtIfStopType=nwAppnExtIfStopType, nwAppnSysMaxTdmTGs=nwAppnSysMaxTdmTGs, nwAppnFwdCtrHostDiscardBytes=nwAppnFwdCtrHostDiscardBytes, nwAppnFwdIfCtrOperationalTime=nwAppnFwdIfCtrOperationalTime, nwAppnFilters=nwAppnFilters, nwAppnFwdLsCtrHostInBlus=nwAppnFwdLsCtrHostInBlus, nwAppnSysDirCacheSize=nwAppnSysDirCacheSize, nwAppnFwdLsLimitedRsrc=nwAppnFwdLsLimitedRsrc, nwAppnExtensionTable=nwAppnExtensionTable, nwAppnFwdIfCtrInBytes=nwAppnFwdIfCtrInBytes, nwAppnFwdIfConfig=nwAppnFwdIfConfig, nwAppnFwdCtrDiscardMus=nwAppnFwdCtrDiscardMus, nwAppnFwdLsAdjCpType=nwAppnFwdLsAdjCpType, nwAppnFwdCtrDiscardBytes=nwAppnFwdCtrDiscardBytes, nwAppnExtIfActXidXchgLimit=nwAppnExtIfActXidXchgLimit, nwAppnFwdLsCtrFilteredBytes=nwAppnFwdLsCtrFilteredBytes, nwAppnFwdLsConfig=nwAppnFwdLsConfig, nwAppnAccessControl=nwAppnAccessControl, nwAppnLinkState=nwAppnLinkState, nwAppnIsrIfConfig=nwAppnIsrIfConfig, nwAppnFwdCtrHostDiscardMus=nwAppnFwdCtrHostDiscardMus, nwAppnFwdLsPortName=nwAppnFwdLsPortName, nwAppnFwdLsNumActiveSession=nwAppnFwdLsNumActiveSession, nwAppnFwdLsCtrLsName=nwAppnFwdLsCtrLsName, nwAppnFwdIfCtrEntry=nwAppnFwdIfCtrEntry, nwAppnFwdIfCtrOutBytes=nwAppnFwdIfCtrOutBytes, nwAppnEventFltrType=nwAppnEventFltrType, nwAppnEventNumber=nwAppnEventNumber, nwAppnEventFltrControl=nwAppnEventFltrControl, nwAppnSysCfgLocalNode=nwAppnSysCfgLocalNode, nwAppnExtIfLimitedRsrc=nwAppnExtIfLimitedRsrc, nwAppnFwdLsCtrDiscardBlus=nwAppnFwdLsCtrDiscardBlus, nwAppnExtIfCpCpSupp=nwAppnExtIfCpCpSupp, nwAppnExtIfOutbLsActLim=nwAppnExtIfOutbLsActLim, nwAppnRouter=nwAppnRouter, nwAppnFwdLsCpCpSessSupp=nwAppnFwdLsCpCpSessSupp, nwAppnFwdLsUsrDef2=nwAppnFwdLsUsrDef2, nwAppnFwdLsOperationalTime=nwAppnFwdLsOperationalTime, nwAppnExtIfDfltPropDelay=nwAppnExtIfDfltPropDelay, nwAppnFwdCtrReset=nwAppnFwdCtrReset, nwAppnIfCnPtName=nwAppnIfCnPtName, nwAppnFwdIfCtrIfIndex=nwAppnFwdIfCtrIfIndex, nwAppnFwdCtrHdrErrMus=nwAppnFwdCtrHdrErrMus, nwAppnExtIfTotLsActLim=nwAppnExtIfTotLsActLim, nwAppnFwdIfAclIdentifier=nwAppnFwdIfAclIdentifier, nwAppnExtIfIndex=nwAppnExtIfIndex, nwAppnSysIsrMaxRuSize=nwAppnSysIsrMaxRuSize, nwAppnFwdIfCtrDiscardBytes=nwAppnFwdIfCtrDiscardBytes, nwAppnSysBlockNum=nwAppnSysBlockNum, nwAppnFwdIfCtrReset=nwAppnFwdIfCtrReset, nwAppnSysIdNum=nwAppnSysIdNum, nwAppnTopology=nwAppnTopology, nwAppnFwdIfCacheMisses=nwAppnFwdIfCacheMisses, nwAppnFwdLsAdjCpName=nwAppnFwdLsAdjCpName, nwAppnSysRouterId=nwAppnSysRouterId, nwAppnFwdIfCtrInMus=nwAppnFwdIfCtrInMus, nwAppnFwdLsTable=nwAppnFwdLsTable, nwAppnFwdLsPortNbr=nwAppnFwdLsPortNbr, nwAppnIfCnTgSecurity=nwAppnIfCnTgSecurity, nwAppnFwdIfOperationalTime=nwAppnFwdIfOperationalTime, nwAppnFwdLsControl=nwAppnFwdLsControl, nwAppnFwdLsEntry=nwAppnFwdLsEntry, nwAppnFwdCtrAddrErrMus=nwAppnFwdCtrAddrErrMus, nwAppnExtIfNonActXidXchgLimit=nwAppnExtIfNonActXidXchgLimit, nwAppnFwdLsEffectCap=nwAppnFwdLsEffectCap, nwAppnEventSeverity=nwAppnEventSeverity, nwAppnEventFltrIfNum=nwAppnEventFltrIfNum, nwAppnSysMaxDirEntries=nwAppnSysMaxDirEntries, nwAppnFwdCtrFilteredBytes=nwAppnFwdCtrFilteredBytes, nwAppnFwdCtrOutBytes=nwAppnFwdCtrOutBytes, nwAppnFwdIfCtrLenErrMus=nwAppnFwdIfCtrLenErrMus, nwAppnIfCnTgCharTable=nwAppnIfCnTgCharTable, nwAppnExtIfPortType=nwAppnExtIfPortType, nwAppnSysTreeSize=nwAppnSysTreeSize)
mibBuilder.exportSymbols("CTRON-APPN-MIB", nwAppnSysMaxTdmNodes=nwAppnSysMaxTdmNodes, nwAppnExtIfInbLsActLim=nwAppnExtIfInbLsActLim, nwAppnFwdCounters=nwAppnFwdCounters, nwAppnSysOperationalTime=nwAppnSysOperationalTime, nwAppnFwdIfCacheEntries=nwAppnFwdIfCacheEntries, nwAppnFwdIfCtrHostDiscardBytes=nwAppnFwdIfCtrHostDiscardBytes, nwAppnSystem=nwAppnSystem, nwAppnSysRegCds=nwAppnSysRegCds, nwAppnFwdLsCtrHostInBytes=nwAppnFwdLsCtrHostInBytes, nwAppnEventFilterTable=nwAppnEventFilterTable, nwAppnFwdIfCtrAdminStatus=nwAppnFwdIfCtrAdminStatus, nwAppnExtIfDfltEffectCap=nwAppnExtIfDfltEffectCap, nwAppnFwdLsCtrHdrErrBlus=nwAppnFwdLsCtrHdrErrBlus, nwAppnFwdCtrFwdBytes=nwAppnFwdCtrFwdBytes, nwAppnFwdCtrHostInBytes=nwAppnFwdCtrHostInBytes, nwAppnFwdCtrFilteredMus=nwAppnFwdCtrFilteredMus, nwAppnMibRevText=nwAppnMibRevText)
