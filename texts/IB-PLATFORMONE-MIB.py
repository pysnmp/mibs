#
# PySNMP MIB module IB-PLATFORMONE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/infoblox/IB-PLATFORMONE-MIB
# Produced by pysmi-1.1.12 at Mon Oct 28 02:11:43 2024
# On host fv-az1014-591 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
IbFloat, ibPlatformOne, IbString, IbIpAddr = mibBuilder.importSymbols("IB-SMI-MIB", "IbFloat", "ibPlatformOne", "IbString", "IbIpAddr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, ModuleIdentity, Unsigned32, Bits, Counter64, iso, IpAddress, MibIdentifier, TimeTicks, Integer32, ObjectIdentity, enterprises, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "Unsigned32", "Bits", "Counter64", "iso", "IpAddress", "MibIdentifier", "TimeTicks", "Integer32", "ObjectIdentity", "enterprises", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ibPlatformModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1))
ibPlatformModule.setRevisions(('2016-06-12 00:00', '2016-06-07 00:00', '2016-05-06 00:00', '2015-11-19 00:00', '2015-10-29 00:00', '2015-10-09 00:00', '2015-05-19 00:00', '2014-07-30 00:00', '2013-10-29 00:00', '2013-10-22 00:00', '2013-08-02 00:00', '2013-05-07 00:00', '2012-05-24 00:00', '2012-04-13 00:00', '2011-12-02 00:00', '2011-12-01 00:00', '2011-05-05 00:00', '2010-11-15 00:00', '2010-10-19 00:00', '2010-07-28 00:00', '2009-06-05 00:00', '2008-09-29 00:00', '2005-01-10 00:00', '2004-05-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ibPlatformModule.setRevisionsDescriptions(('Add BFD service status', 'Add Outbound traps', 'Removed ibCPUTemperature OBJECT-TYPE', 'Add SNIC interface statistics', 'Add Taxii service status', 'Add Analytics service status', 'Add new float OIDs for CPU temprature', 'Add Cloud API service status', 'Add Threat Protection service status info', 'Add Discovery Capacity info', 'Add Swap Usage info', 'Added Discovery status services', 'Rename Node1, Node2 to Node, PassiveNode', 'Added DNS Cache Acceleration info', 'Add support for 8 fans and 8 raid disks', 'Added second power-supply service', 'Removed Radius service status info', 'Added Bloxtools_move service status info', 'Added BGP service status info', 'Added MIBs for Node status info', 'Added MIBs for CPU, Memory usage', 'Added security counters', 'Added copyright', 'Creation of the MIB file',))
if mibBuilder.loadTexts: ibPlatformModule.setLastUpdated('201606120000Z')
if mibBuilder.loadTexts: ibPlatformModule.setOrganization('Infoblox')
if mibBuilder.loadTexts: ibPlatformModule.setContactInfo('Please See IB-SMI-MIB.')
if mibBuilder.loadTexts: ibPlatformModule.setDescription('This file defines the Infoblox One platform MIB.')
ibClusterReplicationStatusTable = MibTable((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 2), )
if mibBuilder.loadTexts: ibClusterReplicationStatusTable.setStatus('current')
if mibBuilder.loadTexts: ibClusterReplicationStatusTable.setDescription("A table of Physical Node's Grid Replication Status.")
ibClusterReplicationStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 2, 1), ).setIndexNames((0, "IB-PLATFORMONE-MIB", "ibNodeIPAddress"))
if mibBuilder.loadTexts: ibClusterReplicationStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ibClusterReplicationStatusEntry.setDescription('A conceptual row containing info about a particular\n                  grid replication status.')
ibNodeIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 2, 1, 1), IbIpAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNodeIPAddress.setStatus('current')
if mibBuilder.loadTexts: ibNodeIPAddress.setDescription('Physical node IP address.')
ibNodeReplicationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 2, 1, 2), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNodeReplicationStatus.setStatus('current')
if mibBuilder.loadTexts: ibNodeReplicationStatus.setDescription('Replication queue status for this node.')
ibNodeQueueFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNodeQueueFromMaster.setStatus('current')
if mibBuilder.loadTexts: ibNodeQueueFromMaster.setDescription('Sent queue size from master.')
ibNodeLastRepTimeFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 2, 1, 4), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNodeLastRepTimeFromMaster.setStatus('current')
if mibBuilder.loadTexts: ibNodeLastRepTimeFromMaster.setDescription('Last sent time from master.')
ibNodeQueueToMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNodeQueueToMaster.setStatus('current')
if mibBuilder.loadTexts: ibNodeQueueToMaster.setDescription('Receive queue size to master.')
ibNodeLastRepTimeToMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 2, 1, 6), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNodeLastRepTimeToMaster.setStatus('current')
if mibBuilder.loadTexts: ibNodeLastRepTimeToMaster.setDescription('Last receive time to master.')
ibNetworkMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3))
ibHardwareType = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 4), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibHardwareType.setStatus('current')
if mibBuilder.loadTexts: ibHardwareType.setDescription('Infoblox One hardware type')
ibHardwareId = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 5), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibHardwareId.setStatus('current')
if mibBuilder.loadTexts: ibHardwareId.setDescription('Infoblox One hardware id')
ibSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 6), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSerialNumber.setStatus('current')
if mibBuilder.loadTexts: ibSerialNumber.setDescription('Infoblox One device serial number')
ibNiosVersion = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 7), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNiosVersion.setStatus('current')
if mibBuilder.loadTexts: ibNiosVersion.setDescription('Infoblox One NIOS version')
ibSystemMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8))
ibSystemMonitorCpu = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 1))
ibSystemMonitorMem = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 2))
ibSystemMonitorSwap = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 3))
ibSystemMonitorSnic = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4))
ibSystemMonitorCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSystemMonitorCpuUsage.setStatus('current')
if mibBuilder.loadTexts: ibSystemMonitorCpuUsage.setDescription('Current average CPU usage')
ibSystemMonitorMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSystemMonitorMemUsage.setStatus('current')
if mibBuilder.loadTexts: ibSystemMonitorMemUsage.setDescription('Current Memory usage')
ibSystemMonitorSwapUsage = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSystemMonitorSwapUsage.setStatus('current')
if mibBuilder.loadTexts: ibSystemMonitorSwapUsage.setDescription('Current Swap usage')
ibNetworkMonitorDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1))
ibNetworkMonitorDNSActive = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nonactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSActive.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSActive.setDescription('Equal to 1 if monitoring is active. No other data is\n\t\tlikely to be correct if not active')
ibNetworkMonitorDNSNonAA = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2))
ibNetworkMonitorDNSNonAAT1 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 1))
ibNetworkMonitorDNSNonAAT5 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 2))
ibNetworkMonitorDNSNonAAT15 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 3))
ibNetworkMonitorDNSNonAAT60 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 4))
ibNetworkMonitorDNSNonAAT1440 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 5))
ibNetworkMonitorDNSAA = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3))
ibNetworkMonitorDNSAAT1 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 1))
ibNetworkMonitorDNSAAT5 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 2))
ibNetworkMonitorDNSAAT15 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 3))
ibNetworkMonitorDNSAAT60 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 4))
ibNetworkMonitorDNSAAT1440 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 5))
ibNetworkMonitorDNSNonAAT1AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT1AvgLatency.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT1AvgLatency.setDescription('Average Latencies (in microseconds) for incoming DNS\n\t\t queries during the last 1 minute where the reply was\n\t\t non authoritative')
ibNetworkMonitorDNSNonAAT1Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT1Count.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT1Count.setDescription('Number of queries used to calculate the average latencies\n\t\t during the last 1 minute where the reply was non\n\t\t authoritative')
ibNetworkMonitorDNSNonAAT5AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT5AvgLatency.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT5AvgLatency.setDescription('Average Latencies (in microseconds) for incoming DNS\n\t\t queries during the last 5 minutes where the reply was\n\t\t non authoritative')
ibNetworkMonitorDNSNonAAT5Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT5Count.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT5Count.setDescription('Number of queries used to calculate the average latencies\n\t\t during the last 5 minutes where the reply was non\n\t\t authoritative')
ibNetworkMonitorDNSNonAAT15AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT15AvgLatency.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT15AvgLatency.setDescription('Average Latencies (in microseconds) for incoming DNS\n\t\t queries during the last 15 minutes where the reply was\n\t\t non authoritative')
ibNetworkMonitorDNSNonAAT15Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT15Count.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT15Count.setDescription('Number of queries used to calculate the average latencies\n\t\t during the last 15 minutes where the reply was non\n\t\t authoritative')
ibNetworkMonitorDNSNonAAT60AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT60AvgLatency.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT60AvgLatency.setDescription('Average Latencies (in microseconds) for incoming DNS\n\t\t queries during the last 60 minutes where the reply was\n\t\t non authoritative')
ibNetworkMonitorDNSNonAAT60Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT60Count.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT60Count.setDescription('Number of queries used to calculate the average latencies\n\t\t during the last 60 minutes where the reply was non\n\t\t authoritative')
ibNetworkMonitorDNSNonAAT1440AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT1440AvgLatency.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT1440AvgLatency.setDescription('Average Latencies (in microseconds) for incoming DNS\n\t\t queries during the last 1440 minutes (24 hours) where\n\t\t the reply was non authoritative')
ibNetworkMonitorDNSNonAAT1440Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT1440Count.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT1440Count.setDescription('Number of queries used to calculate the average latencies\n\t\t during the last 1440 minutes (24 hours) where the\n\t\t reply was non authoritative')
ibNetworkMonitorDNSAAT1AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT1AvgLatency.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT1AvgLatency.setDescription('Average Latencies (in microseconds) for incoming DNS\n\t\t queries during the last 1 minute where the reply was\n\t\t authoritative')
ibNetworkMonitorDNSAAT1Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT1Count.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT1Count.setDescription('Number of queries used to calculate the average latencies\n\t\t during the last 1 minute where the reply was\n\t\t authoritative')
ibNetworkMonitorDNSAAT5AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT5AvgLatency.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT5AvgLatency.setDescription('Average Latencies (in microseconds) for incoming DNS\n\t\t queries during the last 5 minutes where the reply was\n\t\t authoritative')
ibNetworkMonitorDNSAAT5Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT5Count.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT5Count.setDescription('Number of queries used to calculate the average latencies\n\t\t during the last 5 minutes where the reply was\n\t\t authoritative')
ibNetworkMonitorDNSAAT15AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT15AvgLatency.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT15AvgLatency.setDescription('Average Latencies (in microseconds) for incoming DNS\n\t\t queries during the last 15 minutes where the reply was\n\t\t authoritative')
ibNetworkMonitorDNSAAT15Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT15Count.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT15Count.setDescription('Number of queries used to calculate the average latencies\n\t\t during the last 15 minutes where the reply was\n\t\t authoritative')
ibNetworkMonitorDNSAAT60AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT60AvgLatency.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT60AvgLatency.setDescription('Average Latencies (in microseconds) for incoming DNS\n\t\t queries during the last 60 minutes where the reply was\n\t\t authoritative')
ibNetworkMonitorDNSAAT60Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT60Count.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT60Count.setDescription('Number of queries used to calculate the average latencies\n\t\t during the last 60 minutes where the reply was\n\t\t authoritative')
ibNetworkMonitorDNSAAT1440AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT1440AvgLatency.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT1440AvgLatency.setDescription('Average Latencies (in microseconds) for incoming DNS\n\t\t queries during the last 1440 minutes (24 hours) where\n\t\t the reply was authoritative')
ibNetworkMonitorDNSAAT1440Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT1440Count.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT1440Count.setDescription('Number of queries used to calculate the average latencies\n\t\t during the last 1440 minutes (24 hours) where the reply was\n\t\t authoritative')
ibNetworkMonitorDNSSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4))
ibNetworkMonitorDNSSecurityInvalidPort = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 1))
ibNetworkMonitorDNSSecurityInvalidPort1 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort1.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort1.setDescription('Number of DNS responses to invalid ports\n                during the last 1 minute')
ibNetworkMonitorDNSSecurityInvalidPort5 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort5.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort5.setDescription('Number of DNS responses to invalid ports\n                during the last 5 minutes')
ibNetworkMonitorDNSSecurityInvalidPort15 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort15.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort15.setDescription('Number of DNS responses to invalid ports\n                during the last 15 minutes')
ibNetworkMonitorDNSSecurityInvalidPort60 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort60.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort60.setDescription('Number of DNS responses to invalid ports\n                during the last 60 minutes')
ibNetworkMonitorDNSSecurityInvalidPort1440 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort1440.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort1440.setDescription('Number of DNS responses to invalid ports\n                during the last 1440 minutes (24 hours)')
ibNetworkMonitorDNSSecurityInvalidPortCount = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPortCount.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPortCount.setDescription('Number of DNS responses to invalid ports')
ibNetworkMonitorDNSSecurityInvalidTxid = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 2))
ibNetworkMonitorDNSSecurityInvalidTxid1 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid1.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid1.setDescription('Number of DNS responses with an invalid TXID\n                during the last 1 minute')
ibNetworkMonitorDNSSecurityInvalidTxid5 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid5.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid5.setDescription('Number of DNS responses with an invalid TXID\n                during the last 5 minutes')
ibNetworkMonitorDNSSecurityInvalidTxid15 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid15.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid15.setDescription('Number of DNS responses with an invalid TXID\n                during the last 15 minutes')
ibNetworkMonitorDNSSecurityInvalidTxid60 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid60.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid60.setDescription('Number of DNS responses with an invalid TXID\n                during the last 60 minutes')
ibNetworkMonitorDNSSecurityInvalidTxid1440 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid1440.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid1440.setDescription('Number of DNS responses with an invalid TXID\n                during the last 1440 minutes (24 hours)')
ibNetworkMonitorDNSSecurityInvalidTxidCount = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxidCount.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxidCount.setDescription('Number of DNS responses with an invalid TXID')
ibNetworkMonitorDNSSecurityInvalidPortOnly = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPortOnly.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPortOnly.setDescription('Number of DNS responses to invalid ports\n                with a valid TXID')
ibNetworkMonitorDNSSecurityInvalidTxidOnly = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxidOnly.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxidOnly.setDescription('Number of DNS responses to valid ports\n                with an invalid TXID')
ibNetworkMonitorDNSSecurityInvalidTxidAndPort = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxidAndPort.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxidAndPort.setDescription('Number of DNS responses to an invalid port\n                and with an invalid TXID')
class IbServiceStates(TextualConvention, Integer32):
    description = 'It defines the states for infoblox services\n                  Note: NTP service will always be running on NIOS,\n                  even when disabled in the GUI.This is for internal\n                  grid operations.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("working", 1), ("warning", 2), ("failed", 3), ("inactive", 4), ("unknown", 5))

class IbServiceNames(TextualConvention, Integer32):
    description = 'It defines the names for infoblox services.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))
    namedValues = NamedValues(("dhcp", 1), ("dns", 2), ("ntp", 3), ("tftp", 4), ("http-file-dist", 5), ("ftp", 6), ("bloxtools-move", 7), ("bloxtools", 8), ("node-status", 9), ("disk-usage", 10), ("enet-lan", 11), ("enet-lan2", 12), ("enet-ha", 13), ("enet-mgmt", 14), ("lcd", 15), ("memory", 16), ("replication", 17), ("db-object", 18), ("raid-summary", 19), ("raid-disk1", 20), ("raid-disk2", 21), ("raid-disk3", 22), ("raid-disk4", 23), ("raid-disk5", 24), ("raid-disk6", 25), ("raid-disk7", 26), ("raid-disk8", 27), ("fan1", 28), ("fan2", 29), ("fan3", 30), ("fan4", 31), ("fan5", 32), ("fan6", 33), ("fan7", 34), ("fan8", 35), ("power-supply1", 36), ("power-supply2", 37), ("ntp-sync", 38), ("cpu1-temp", 39), ("cpu2-temp", 40), ("sys-temp", 41), ("raid-battery", 42), ("cpu-usage", 43), ("ospf", 44), ("bgp", 45), ("mgm-service", 46), ("subgrid-conn", 47), ("network-capacity", 48), ("reporting", 49), ("dns-cache-acceleration", 50), ("ospf6", 51), ("swap-usage", 52), ("discovery-consolidator", 53), ("discovery-collector", 54), ("discovery-capacity", 55), ("threat-protection", 56), ("cloud-api", 57), ("threat-analytics", 58), ("taxii", 59), ("bfd", 60), ("outbound", 61))

ibMemberServiceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 9), )
if mibBuilder.loadTexts: ibMemberServiceStatusTable.setStatus('current')
if mibBuilder.loadTexts: ibMemberServiceStatusTable.setDescription('A table of member service status.')
ibMemberServiceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 9, 1), ).setIndexNames((0, "IB-PLATFORMONE-MIB", "ibServiceName"))
if mibBuilder.loadTexts: ibMemberServiceStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ibMemberServiceStatusEntry.setDescription('A conceptual row containing info about a particular\n                  service status.')
ibServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 9, 1, 1), IbServiceNames()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibServiceName.setStatus('current')
if mibBuilder.loadTexts: ibServiceName.setDescription('Service Name.')
ibServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 9, 1, 2), IbServiceStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibServiceStatus.setStatus('current')
if mibBuilder.loadTexts: ibServiceStatus.setDescription('Service Status.')
ibServiceDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 9, 1, 3), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibServiceDesc.setStatus('current')
if mibBuilder.loadTexts: ibServiceDesc.setDescription('Service Description.')
ibMemberNodeServiceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 10), )
if mibBuilder.loadTexts: ibMemberNodeServiceStatusTable.setStatus('current')
if mibBuilder.loadTexts: ibMemberNodeServiceStatusTable.setDescription("A table of Physical Node's Service Status.")
ibMemberNodeServiceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 10, 1), ).setIndexNames((0, "IB-PLATFORMONE-MIB", "ibNodeServiceName"))
if mibBuilder.loadTexts: ibMemberNodeServiceStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ibMemberNodeServiceStatusEntry.setDescription('A conceptual row containing info about a particular\n                  service status.')
ibNodeServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 10, 1, 1), IbServiceNames()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNodeServiceName.setStatus('current')
if mibBuilder.loadTexts: ibNodeServiceName.setDescription('Service Name.')
ibNodeServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 10, 1, 2), IbServiceStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNodeServiceStatus.setStatus('current')
if mibBuilder.loadTexts: ibNodeServiceStatus.setDescription('Service Status.')
ibNodeServiceDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 10, 1, 3), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNodeServiceDesc.setStatus('current')
if mibBuilder.loadTexts: ibNodeServiceDesc.setDescription('Service Description.')
ibMemberPasiveNodeServiceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 11), )
if mibBuilder.loadTexts: ibMemberPasiveNodeServiceStatusTable.setStatus('current')
if mibBuilder.loadTexts: ibMemberPasiveNodeServiceStatusTable.setDescription("A table of Physical Node's Service Status.")
ibMemberPasiveNodeServiceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 11, 1), ).setIndexNames((0, "IB-PLATFORMONE-MIB", "ibPasiveNodeServiceName"))
if mibBuilder.loadTexts: ibMemberPasiveNodeServiceStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ibMemberPasiveNodeServiceStatusEntry.setDescription('A conceptual row containing info about a particular\n                  service status.')
ibPasiveNodeServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 11, 1, 1), IbServiceNames()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibPasiveNodeServiceName.setStatus('current')
if mibBuilder.loadTexts: ibPasiveNodeServiceName.setDescription('Service Name.')
ibPasiveNodeServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 11, 1, 2), IbServiceStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibPasiveNodeServiceStatus.setStatus('current')
if mibBuilder.loadTexts: ibPasiveNodeServiceStatus.setDescription('Service Status.')
ibPasiveNodeServiceDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 11, 1, 3), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibPasiveNodeServiceDesc.setStatus('current')
if mibBuilder.loadTexts: ibPasiveNodeServiceDesc.setDescription('Service Description.')
ibGridStatus = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 12), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibGridStatus.setStatus('current')
if mibBuilder.loadTexts: ibGridStatus.setDescription('Grid Status')
ibHaStatus = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 13), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibHaStatus.setStatus('current')
if mibBuilder.loadTexts: ibHaStatus.setDescription('High Availability Status')
ibGridMasterCandStatus = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 14), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibGridMasterCandStatus.setStatus('current')
if mibBuilder.loadTexts: ibGridMasterCandStatus.setDescription('Grid Master candidate status')
ibGridMasterVIP = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 15), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibGridMasterVIP.setStatus('current')
if mibBuilder.loadTexts: ibGridMasterVIP.setDescription('Grid Master virtual IP address')
ibGridReplicationState = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 16), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibGridReplicationState.setStatus('current')
if mibBuilder.loadTexts: ibGridReplicationState.setDescription('Grid Replication State')
ibCPU1Temperature = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 17), IbFloat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibCPU1Temperature.setStatus('current')
if mibBuilder.loadTexts: ibCPU1Temperature.setDescription('Infoblox CPU One temperature.')
ibCPU2Temperature = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 18), IbFloat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibCPU2Temperature.setStatus('current')
if mibBuilder.loadTexts: ibCPU2Temperature.setDescription('Infoblox CPU Two temperature.')
class IbSnicNames(TextualConvention, Integer32):
    description = 'It defines the names for SNIC supported interfaces.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("lan1", 1), ("lan2", 2), ("ha", 3))

ibSystemMonitorSnicStatsTable1 = MibTable((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 1), )
if mibBuilder.loadTexts: ibSystemMonitorSnicStatsTable1.setStatus('current')
if mibBuilder.loadTexts: ibSystemMonitorSnicStatsTable1.setDescription('A table of SNIC statistics during last 1 min.')
ibSystemMonitorSnicStatsEntry1 = MibTableRow((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 1, 1), ).setIndexNames((0, "IB-PLATFORMONE-MIB", "ibSnicName1"))
if mibBuilder.loadTexts: ibSystemMonitorSnicStatsEntry1.setStatus('current')
if mibBuilder.loadTexts: ibSystemMonitorSnicStatsEntry1.setDescription('A conceptual row containing info about a particular\n                  SNIC statistics.')
ibSnicName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 1, 1, 1), IbSnicNames()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicName1.setStatus('current')
if mibBuilder.loadTexts: ibSnicName1.setDescription('SmartNic Name.')
ibSnicRxBits1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicRxBits1.setStatus('current')
if mibBuilder.loadTexts: ibSnicRxBits1.setDescription('SmartNic recieved bits per second.')
ibSnicRxPackets1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicRxPackets1.setStatus('current')
if mibBuilder.loadTexts: ibSnicRxPackets1.setDescription('SmartNic recieved packets per second.')
ibSnicTxBits1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicTxBits1.setStatus('current')
if mibBuilder.loadTexts: ibSnicTxBits1.setDescription('SmartNic sent bits per second.')
ibSnicTxPackets1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicTxPackets1.setStatus('current')
if mibBuilder.loadTexts: ibSnicTxPackets1.setDescription('SmartNic sent packets per second.')
ibSnicDropBits1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicDropBits1.setStatus('current')
if mibBuilder.loadTexts: ibSnicDropBits1.setDescription('SmartNic dropped bits per second.')
ibSnicDropPackets1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicDropPackets1.setStatus('current')
if mibBuilder.loadTexts: ibSnicDropPackets1.setDescription('SmartNic dropped packets per second.')
ibSystemMonitorSnicStatsTable5 = MibTable((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 2), )
if mibBuilder.loadTexts: ibSystemMonitorSnicStatsTable5.setStatus('current')
if mibBuilder.loadTexts: ibSystemMonitorSnicStatsTable5.setDescription('A table of SNIC statistics during last 5 min.')
ibSystemMonitorSnicStatsEntry5 = MibTableRow((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 2, 1), ).setIndexNames((0, "IB-PLATFORMONE-MIB", "ibSnicName5"))
if mibBuilder.loadTexts: ibSystemMonitorSnicStatsEntry5.setStatus('current')
if mibBuilder.loadTexts: ibSystemMonitorSnicStatsEntry5.setDescription('A conceptual row containing info about a particular\n                  SNIC statistics.')
ibSnicName5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 2, 1, 1), IbSnicNames()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicName5.setStatus('current')
if mibBuilder.loadTexts: ibSnicName5.setDescription('SmartNic Name.')
ibSnicRxBits5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicRxBits5.setStatus('current')
if mibBuilder.loadTexts: ibSnicRxBits5.setDescription('SmartNic recieved bits per second.')
ibSnicRxPackets5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicRxPackets5.setStatus('current')
if mibBuilder.loadTexts: ibSnicRxPackets5.setDescription('SmartNic recieved packets per second.')
ibSnicTxBits5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicTxBits5.setStatus('current')
if mibBuilder.loadTexts: ibSnicTxBits5.setDescription('SmartNic sent bits per second.')
ibSnicTxPackets5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicTxPackets5.setStatus('current')
if mibBuilder.loadTexts: ibSnicTxPackets5.setDescription('SmartNic sent packets per second.')
ibSnicDropBits5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicDropBits5.setStatus('current')
if mibBuilder.loadTexts: ibSnicDropBits5.setDescription('SmartNic dropped bits per second.')
ibSnicDropPackets5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSnicDropPackets5.setStatus('current')
if mibBuilder.loadTexts: ibSnicDropPackets5.setDescription('SmartNic dropped packets per second.')
mibBuilder.exportSymbols("IB-PLATFORMONE-MIB", ibNetworkMonitorDNSNonAAT1Count=ibNetworkMonitorDNSNonAAT1Count, ibNiosVersion=ibNiosVersion, ibNetworkMonitorDNSAAT1440AvgLatency=ibNetworkMonitorDNSAAT1440AvgLatency, ibNodeServiceDesc=ibNodeServiceDesc, ibClusterReplicationStatusEntry=ibClusterReplicationStatusEntry, ibNetworkMonitorDNSAAT15=ibNetworkMonitorDNSAAT15, ibNetworkMonitorDNSSecurityInvalidPort1=ibNetworkMonitorDNSSecurityInvalidPort1, ibSnicRxBits1=ibSnicRxBits1, ibNetworkMonitorDNSAAT60=ibNetworkMonitorDNSAAT60, ibMemberPasiveNodeServiceStatusEntry=ibMemberPasiveNodeServiceStatusEntry, ibNetworkMonitorDNSAAT1440=ibNetworkMonitorDNSAAT1440, ibNetworkMonitorDNSSecurityInvalidPort=ibNetworkMonitorDNSSecurityInvalidPort, ibSystemMonitorMemUsage=ibSystemMonitorMemUsage, ibServiceStatus=ibServiceStatus, IbServiceNames=IbServiceNames, ibNetworkMonitorDNSAAT1440Count=ibNetworkMonitorDNSAAT1440Count, ibCPU1Temperature=ibCPU1Temperature, ibNetworkMonitorDNSNonAA=ibNetworkMonitorDNSNonAA, ibSnicName5=ibSnicName5, ibNetworkMonitorDNSNonAAT1440AvgLatency=ibNetworkMonitorDNSNonAAT1440AvgLatency, ibNetworkMonitorDNSAAT5AvgLatency=ibNetworkMonitorDNSAAT5AvgLatency, ibNetworkMonitorDNSAAT1=ibNetworkMonitorDNSAAT1, ibSystemMonitorSnicStatsTable1=ibSystemMonitorSnicStatsTable1, ibNetworkMonitorDNSSecurityInvalidPortOnly=ibNetworkMonitorDNSSecurityInvalidPortOnly, ibNetworkMonitorDNSSecurityInvalidTxid5=ibNetworkMonitorDNSSecurityInvalidTxid5, ibNetworkMonitorDNSAAT60Count=ibNetworkMonitorDNSAAT60Count, ibNodeQueueFromMaster=ibNodeQueueFromMaster, ibNodeLastRepTimeToMaster=ibNodeLastRepTimeToMaster, ibCPU2Temperature=ibCPU2Temperature, ibHaStatus=ibHaStatus, ibNetworkMonitorDNSSecurity=ibNetworkMonitorDNSSecurity, ibNetworkMonitorDNSNonAAT1AvgLatency=ibNetworkMonitorDNSNonAAT1AvgLatency, ibSnicName1=ibSnicName1, ibSnicDropPackets1=ibSnicDropPackets1, ibNetworkMonitorDNSNonAAT60AvgLatency=ibNetworkMonitorDNSNonAAT60AvgLatency, ibNetworkMonitorDNSNonAAT60=ibNetworkMonitorDNSNonAAT60, ibNetworkMonitorDNSSecurityInvalidPort1440=ibNetworkMonitorDNSSecurityInvalidPort1440, ibNodeQueueToMaster=ibNodeQueueToMaster, ibNodeIPAddress=ibNodeIPAddress, ibMemberPasiveNodeServiceStatusTable=ibMemberPasiveNodeServiceStatusTable, ibSnicTxBits1=ibSnicTxBits1, ibNetworkMonitorDNSSecurityInvalidTxid60=ibNetworkMonitorDNSSecurityInvalidTxid60, ibMemberServiceStatusEntry=ibMemberServiceStatusEntry, ibNodeServiceName=ibNodeServiceName, ibPasiveNodeServiceStatus=ibPasiveNodeServiceStatus, ibServiceDesc=ibServiceDesc, ibGridReplicationState=ibGridReplicationState, ibNetworkMonitorDNSAAT1Count=ibNetworkMonitorDNSAAT1Count, ibNetworkMonitorDNS=ibNetworkMonitorDNS, ibSnicTxPackets1=ibSnicTxPackets1, ibServiceName=ibServiceName, ibSystemMonitorSnicStatsEntry1=ibSystemMonitorSnicStatsEntry1, ibSystemMonitorCpu=ibSystemMonitorCpu, ibSnicDropPackets5=ibSnicDropPackets5, ibPlatformModule=ibPlatformModule, ibNetworkMonitorDNSAA=ibNetworkMonitorDNSAA, ibMemberServiceStatusTable=ibMemberServiceStatusTable, PYSNMP_MODULE_ID=ibPlatformModule, ibNodeReplicationStatus=ibNodeReplicationStatus, ibNetworkMonitorDNSAAT5Count=ibNetworkMonitorDNSAAT5Count, ibNetworkMonitorDNSSecurityInvalidTxidCount=ibNetworkMonitorDNSSecurityInvalidTxidCount, ibMemberNodeServiceStatusEntry=ibMemberNodeServiceStatusEntry, ibPasiveNodeServiceDesc=ibPasiveNodeServiceDesc, ibSnicRxPackets5=ibSnicRxPackets5, ibSnicRxPackets1=ibSnicRxPackets1, ibNetworkMonitorDNSAAT15Count=ibNetworkMonitorDNSAAT15Count, ibSystemMonitorSwapUsage=ibSystemMonitorSwapUsage, ibSnicDropBits5=ibSnicDropBits5, ibSystemMonitorSnic=ibSystemMonitorSnic, ibNetworkMonitorDNSNonAAT1440Count=ibNetworkMonitorDNSNonAAT1440Count, ibNodeServiceStatus=ibNodeServiceStatus, ibNetworkMonitorDNSSecurityInvalidTxidOnly=ibNetworkMonitorDNSSecurityInvalidTxidOnly, ibNetworkMonitorDNSSecurityInvalidPort5=ibNetworkMonitorDNSSecurityInvalidPort5, ibNodeLastRepTimeFromMaster=ibNodeLastRepTimeFromMaster, ibNetworkMonitorDNSAAT60AvgLatency=ibNetworkMonitorDNSAAT60AvgLatency, ibGridMasterCandStatus=ibGridMasterCandStatus, ibNetworkMonitorDNSSecurityInvalidTxid1440=ibNetworkMonitorDNSSecurityInvalidTxid1440, ibGridStatus=ibGridStatus, ibSystemMonitorCpuUsage=ibSystemMonitorCpuUsage, ibSnicTxPackets5=ibSnicTxPackets5, ibSystemMonitor=ibSystemMonitor, ibNetworkMonitorDNSSecurityInvalidPort15=ibNetworkMonitorDNSSecurityInvalidPort15, ibNetworkMonitorDNSNonAAT1=ibNetworkMonitorDNSNonAAT1, ibNetworkMonitorDNSNonAAT5=ibNetworkMonitorDNSNonAAT5, ibNetworkMonitorDNSNonAAT5AvgLatency=ibNetworkMonitorDNSNonAAT5AvgLatency, ibNetworkMonitorDNSNonAAT15=ibNetworkMonitorDNSNonAAT15, ibSystemMonitorSnicStatsTable5=ibSystemMonitorSnicStatsTable5, ibNetworkMonitorDNSSecurityInvalidPort60=ibNetworkMonitorDNSSecurityInvalidPort60, IbServiceStates=IbServiceStates, ibNetworkMonitorDNSNonAAT15Count=ibNetworkMonitorDNSNonAAT15Count, ibMemberNodeServiceStatusTable=ibMemberNodeServiceStatusTable, ibSystemMonitorSnicStatsEntry5=ibSystemMonitorSnicStatsEntry5, ibNetworkMonitorDNSSecurityInvalidTxid=ibNetworkMonitorDNSSecurityInvalidTxid, ibNetworkMonitorDNSSecurityInvalidTxid1=ibNetworkMonitorDNSSecurityInvalidTxid1, ibNetworkMonitorDNSNonAAT15AvgLatency=ibNetworkMonitorDNSNonAAT15AvgLatency, ibSystemMonitorMem=ibSystemMonitorMem, ibNetworkMonitorDNSNonAAT1440=ibNetworkMonitorDNSNonAAT1440, ibNetworkMonitorDNSAAT15AvgLatency=ibNetworkMonitorDNSAAT15AvgLatency, ibNetworkMonitorDNSAAT1AvgLatency=ibNetworkMonitorDNSAAT1AvgLatency, ibNetworkMonitorDNSSecurityInvalidPortCount=ibNetworkMonitorDNSSecurityInvalidPortCount, ibNetworkMonitorDNSSecurityInvalidTxid15=ibNetworkMonitorDNSSecurityInvalidTxid15, ibSystemMonitorSwap=ibSystemMonitorSwap, ibNetworkMonitorDNSNonAAT5Count=ibNetworkMonitorDNSNonAAT5Count, ibNetworkMonitorDNSAAT5=ibNetworkMonitorDNSAAT5, ibPasiveNodeServiceName=ibPasiveNodeServiceName, ibNetworkMonitorDNSSecurityInvalidTxidAndPort=ibNetworkMonitorDNSSecurityInvalidTxidAndPort, IbSnicNames=IbSnicNames, ibGridMasterVIP=ibGridMasterVIP, ibClusterReplicationStatusTable=ibClusterReplicationStatusTable, ibNetworkMonitorDNSNonAAT60Count=ibNetworkMonitorDNSNonAAT60Count, ibNetworkMonitor=ibNetworkMonitor, ibSnicTxBits5=ibSnicTxBits5, ibHardwareId=ibHardwareId, ibSnicRxBits5=ibSnicRxBits5, ibSerialNumber=ibSerialNumber, ibHardwareType=ibHardwareType, ibNetworkMonitorDNSActive=ibNetworkMonitorDNSActive, ibSnicDropBits1=ibSnicDropBits1)
