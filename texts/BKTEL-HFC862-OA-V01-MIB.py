#
# PySNMP MIB module BKTEL-HFC862-OA-V01-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/bktel/BKTEL-HFC862-OA-V01-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 15:07:48 2024
# On host fv-az692-788 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
TruthValue, DisplayString, NESlotValue, modules, PerceivedSeverityValue, ModuleWidthValue = mibBuilder.importSymbols("BKTEL-HFC862-BASE-MIB", "TruthValue", "DisplayString", "NESlotValue", "modules", "PerceivedSeverityValue", "ModuleWidthValue")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, TimeTicks, ObjectIdentity, IpAddress, Unsigned32, Bits, Gauge32, MibIdentifier, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "TimeTicks", "ObjectIdentity", "IpAddress", "Unsigned32", "Bits", "Gauge32", "MibIdentifier", "Counter32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
oa = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116))
oaCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 1))
oaStates = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2))
oaConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 3))
oaControl = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 4))
oaMeasuringValues = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5))
oaDisplay = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6))
class RegulationMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("regModeConstantOutputPower", 1), ("regModeConstantGain", 2))

class SbsEvaluationMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("evalModeDefault", 1), ("evalModeFullScan", 2))

class SbsEvaluationState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("evaluationNotSupported", 1), ("evaluationDone", 2), ("evaluationInProgress", 3), ("evaluationFailed", 4))

class ExtIOmode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("modeActiveLowOutput", 1), ("modeActiveHighOutput", 2), ("modeRedundantMasterIrreversible", 3), ("modeRedundantMasterFallback", 4), ("modeRedundantSlave", 5))

class ExtIOmask(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("maskAlarmsOnly", 1), ("maskAlarmsAndWarnings", 2), ("maskSpecial", 3))

class LaserFeatures(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31))
    namedValues = NamedValues(("lasNonExistent", 0), ("lasCurrent", 1), ("lasCurrentLasTec", 3), ("lasCurrentLasTemperature", 5), ("lasCurrentLasTecLasTemperature", 7), ("lasCurrentLasVoltage", 9), ("lasCurrentLasTecLasVoltage", 11), ("lasCurrentLasTemperatureLasVoltage", 13), ("lasCurrentLasTecLasTemperatureLasVoltage", 15), ("lasCurrentLasPumpPower", 17), ("lasCurrentLasTecLasPumpPower", 19), ("lasCurrentLasTemperatureLasPumpPower", 21), ("lasCurrentLasTecLasTemperatureLasPumpPower", 23), ("lasCurrentLasVoltageLasPumpPower", 25), ("lasCurrentLasTecLasVoltageLasPumpPower", 27), ("lasCurrentLasTemperatureLasVoltageLasPumpPower", 29), ("lasCurrentLasTecLasTemperatureLasVoltageLasPumpPower", 31))

class NESlotWriteValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-1, 99)

oaCommonNumberOfModules = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCommonNumberOfModules.setStatus('mandatory')
if mibBuilder.loadTexts: oaCommonNumberOfModules.setDescription('Number of modules in table.')
oaCommonTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 1, 2), )
if mibBuilder.loadTexts: oaCommonTable.setStatus('mandatory')
if mibBuilder.loadTexts: oaCommonTable.setDescription('The table contains all modules of the OA-type in the NE')
oaCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 1, 2, 1), ).setIndexNames((0, "BKTEL-HFC862-OA-V01-MIB", "oaNESlot"))
if mibBuilder.loadTexts: oaCommonEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oaCommonEntry.setDescription('Common-Values for a module.')
oaNESlot = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 1, 2, 1, 1), NESlotValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaNESlot.setStatus('mandatory')
if mibBuilder.loadTexts: oaNESlot.setDescription('The slot number of the chassis for which this\n        entry contains management information.')
oaCommonType = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCommonType.setStatus('mandatory')
if mibBuilder.loadTexts: oaCommonType.setDescription('The type of physical module. modSlotEmpty indicates\n         an empty slot.  A Value of modSlotUnknown indicates\n         that the type of module is unknown.')
oaCommonDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaCommonDescr.setStatus('mandatory')
if mibBuilder.loadTexts: oaCommonDescr.setDescription('A textual description of the module.\n        If not available, this Value should be\n        set to a zero length string.')
oaCommonFirmwareId = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCommonFirmwareId.setStatus('mandatory')
if mibBuilder.loadTexts: oaCommonFirmwareId.setDescription('The firmware Id of the module.')
oaCommonModuleWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 1, 2, 1, 5), ModuleWidthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCommonModuleWidth.setStatus('optional')
if mibBuilder.loadTexts: oaCommonModuleWidth.setDescription('The width of the module in multiples of slots (1, 2, ...)')
oaMeasuringValuesTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1), )
if mibBuilder.loadTexts: oaMeasuringValuesTable.setStatus('mandatory')
if mibBuilder.loadTexts: oaMeasuringValuesTable.setDescription('')
oaMeasuringValuesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1), ).setIndexNames((0, "BKTEL-HFC862-OA-V01-MIB", "oaNESlot"))
if mibBuilder.loadTexts: oaMeasuringValuesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oaMeasuringValuesEntry.setDescription('Common-Values for a module.')
oaTemperatureLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaTemperatureLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaTemperatureLoLo.setDescription('The module temperature low alarm threshold in steps of 0.1 celsius degrees.')
oaTemperatureLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaTemperatureLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaTemperatureLo.setDescription('The module temperature low warning threshold in steps of 0.1 celsius degrees.')
oaTemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaTemperatureValue.setStatus('mandatory')
if mibBuilder.loadTexts: oaTemperatureValue.setDescription('The module temperature in steps of 0.1 celsius degrees.')
oaTemperatureHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaTemperatureHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaTemperatureHi.setDescription('The module temperature high warning threshold in steps of 0.1 celsius degrees.')
oaTemperatureHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaTemperatureHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaTemperatureHiHi.setDescription('The module temperature high alarm threshold in steps of 0.1 celsius degrees.')
oaInputPowerLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaInputPowerLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaInputPowerLoLo.setDescription('Input power low alarm threshold in steps of 0.1dBm.')
oaInputPowerLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaInputPowerLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaInputPowerLo.setDescription('Input power low warning threshold in steps of 0.1dBm.')
oaInputPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaInputPowerValue.setStatus('mandatory')
if mibBuilder.loadTexts: oaInputPowerValue.setDescription('Input power in steps of 0.1dBm.')
oaInputPowerHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaInputPowerHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaInputPowerHi.setDescription('Input power high warning threshold in steps of 0.1dBm.')
oaInputPowerHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaInputPowerHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaInputPowerHiHi.setDescription('Input power high alarm threshold in steps of 0.1dBm.')
oaOutputPwrOrGainLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaOutputPwrOrGainLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaOutputPwrOrGainLoLo.setDescription('Output power (or gain) low alarm threshold in steps of 0.1dB(m).\n                     See oaConfigRegulationMode variable too')
oaOutputPwrOrGainLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaOutputPwrOrGainLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaOutputPwrOrGainLo.setDescription('Output power (or gain) low warning threshold in steps of 0.1dB(m).\n                     See oaConfigRegulationMode variable too')
oaOutputPwrOrGainValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaOutputPwrOrGainValue.setStatus('mandatory')
if mibBuilder.loadTexts: oaOutputPwrOrGainValue.setDescription('Output power (or gain) in steps of 0.1dB(m).\n                     See oaConfigRegulationMode variable too')
oaOutputPwrOrGainHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaOutputPwrOrGainHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaOutputPwrOrGainHi.setDescription('Output power (or gain) high warning threshold in steps of 0.1dB(m).\n                     See oaConfigRegulationMode variable too')
oaOutputPwrOrGainHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaOutputPwrOrGainHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaOutputPwrOrGainHiHi.setDescription('Output power (or gain) high alarm threshold in steps of 0.1dB(m).\n                     See oaConfigRegulationMode variable too')
oaReturnLossLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaReturnLossLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaReturnLossLoLo.setDescription('ReturnLoss low alarm threshold in steps of 0.1 dB.')
oaReturnLossLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaReturnLossLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaReturnLossLo.setDescription('ReturnLoss low warning threshold in steps of 0.1 dB.')
oaReturnLossValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaReturnLossValue.setStatus('mandatory')
if mibBuilder.loadTexts: oaReturnLossValue.setDescription('ReturnLoss in steps of 0.1 dB.')
oaReturnLossHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaReturnLossHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaReturnLossHi.setDescription('ReturnLoss high warning threshold in steps of 0.1 dB.')
oaReturnLossHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaReturnLossHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaReturnLossHiHi.setDescription('ReturnLoss  high alarm threshold in steps of 0.1 dB.')
oaInputVoltageLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaInputVoltageLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaInputVoltageLoLo.setDescription('The input supply voltage low alarm threshold in steps of 0.1 Volts.')
oaInputVoltageLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaInputVoltageLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaInputVoltageLo.setDescription('The input supply voltage low warning threshold in steps of 0.1 Volts.')
oaInputVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaInputVoltageValue.setStatus('mandatory')
if mibBuilder.loadTexts: oaInputVoltageValue.setDescription("The input supply voltage in steps of 0.1 Volts.\n                     Input supply voltage nominal value, see 'oaDisplayInputVoltageNominal'")
oaInputVoltageHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaInputVoltageHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaInputVoltageHi.setDescription('The input supply voltage high warning threshold in steps of 0.1 Volts.')
oaInputVoltageHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaInputVoltageHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaInputVoltageHiHi.setDescription('The input supply voltage high alarm threshold in steps of 0.1 Volts.')
oaInternalVoltage1LoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaInternalVoltage1LoLo.setStatus('optional')
if mibBuilder.loadTexts: oaInternalVoltage1LoLo.setDescription('The internal voltage low alarm threshold in steps of 0.1 Volts.')
oaInternalVoltage1Lo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaInternalVoltage1Lo.setStatus('optional')
if mibBuilder.loadTexts: oaInternalVoltage1Lo.setDescription('The internal voltage low warning threshold in steps of 0.1 Volts.')
oaInternalVoltage1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaInternalVoltage1Value.setStatus('optional')
if mibBuilder.loadTexts: oaInternalVoltage1Value.setDescription("The internal voltage in steps of 0.1 Volts.\n                     Internal voltage nominal value, see 'oaDisplayInternalVoltage1Nominal'")
oaInternalVoltage1Hi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaInternalVoltage1Hi.setStatus('optional')
if mibBuilder.loadTexts: oaInternalVoltage1Hi.setDescription('The internal voltage high warning threshold in steps of 0.1 Volts.')
oaInternalVoltage1HiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaInternalVoltage1HiHi.setStatus('optional')
if mibBuilder.loadTexts: oaInternalVoltage1HiHi.setDescription('The internal voltage high alarm threshold in steps of 0.1 Volts.')
oaInternalVoltage2LoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaInternalVoltage2LoLo.setStatus('optional')
if mibBuilder.loadTexts: oaInternalVoltage2LoLo.setDescription('The internal voltage low alarm threshold in steps of 0.1 Volts.')
oaInternalVoltage2Lo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaInternalVoltage2Lo.setStatus('optional')
if mibBuilder.loadTexts: oaInternalVoltage2Lo.setDescription('The internal voltage low warning threshold in steps of 0.1 Volts.')
oaInternalVoltage2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaInternalVoltage2Value.setStatus('optional')
if mibBuilder.loadTexts: oaInternalVoltage2Value.setDescription("The internal voltage in steps of 0.1 Volts.\n                     Internal voltage nominal value, see 'oaDisplayInternalVoltage2Nominal'")
oaInternalVoltage2Hi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaInternalVoltage2Hi.setStatus('optional')
if mibBuilder.loadTexts: oaInternalVoltage2Hi.setDescription('The internal voltage high warning threshold in steps of 0.1 Volts.')
oaInternalVoltage2HiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaInternalVoltage2HiHi.setStatus('optional')
if mibBuilder.loadTexts: oaInternalVoltage2HiHi.setDescription('The internal voltage high alarm threshold in steps of 0.1 Volts.')
oaInternalVoltage3LoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaInternalVoltage3LoLo.setStatus('optional')
if mibBuilder.loadTexts: oaInternalVoltage3LoLo.setDescription('The internal voltage low alarm threshold in steps of 0.1 Volts.')
oaInternalVoltage3Lo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaInternalVoltage3Lo.setStatus('optional')
if mibBuilder.loadTexts: oaInternalVoltage3Lo.setDescription('The internal voltage low warning threshold in steps of 0.1 Volts.')
oaInternalVoltage3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaInternalVoltage3Value.setStatus('optional')
if mibBuilder.loadTexts: oaInternalVoltage3Value.setDescription("The internal voltage in steps of 0.1 Volts.\n                     Internal voltage nominal value, see 'oaDisplayInternalVoltage3Nominal'")
oaInternalVoltage3Hi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaInternalVoltage3Hi.setStatus('optional')
if mibBuilder.loadTexts: oaInternalVoltage3Hi.setDescription('The internal voltage high warning threshold in steps of 0.1 Volts.')
oaInternalVoltage3HiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaInternalVoltage3HiHi.setStatus('optional')
if mibBuilder.loadTexts: oaInternalVoltage3HiHi.setDescription('The internal voltage high alarm threshold in steps of 0.1 Volts.')
oaLaser1CurrentRelLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 86), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1CurrentRelLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser1CurrentRelLoLo.setDescription('Relative laser no.1 current low alarm threshold in steps of 0.1%.')
oaLaser1CurrentRelLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1CurrentRelLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser1CurrentRelLo.setDescription('Relative laser no.1 current low warning threshold in steps of 0.1%.')
oaLaser1CurrentRelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1CurrentRelValue.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser1CurrentRelValue.setDescription('The laser no.1 current relative to the current at begin of life in steps of 0.1%.')
oaLaser1CurrentRelHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1CurrentRelHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser1CurrentRelHi.setDescription('Relative laser no.1 current high warning threshold in steps of 0.1%.')
oaLaser1CurrentRelHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1CurrentRelHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser1CurrentRelHiHi.setDescription('Relative laser no.1 current high alarm threshold in steps of 0.1%.')
oaLaser1TecRelLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1TecRelLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser1TecRelLoLo.setDescription('Thermo-electric-cooler current of laser no.1 low alarm threshold in steps of 0.1%.')
oaLaser1TecRelLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1TecRelLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser1TecRelLo.setDescription('Thermo-electric-cooler current of laser no.1 low warning threshold in steps of 0.1%.')
oaLaser1TecRelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 93), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1TecRelValue.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser1TecRelValue.setDescription('The thermo-electric-cooler current of laser no.1 relative to its maximum value in steps of 0.1%.')
oaLaser1TecRelHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 94), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1TecRelHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser1TecRelHi.setDescription('Thermo-electric-cooler current of laser no.1 high warning threshold in steps of 0.1%.')
oaLaser1TecRelHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1TecRelHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser1TecRelHiHi.setDescription('Thermo-electric-cooler current of laser no.1 high alarm threshold in steps of 0.1%.')
oaLaser1TemperatureLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 96), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1TemperatureLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser1TemperatureLoLo.setDescription('Temperature of laser no.1 low alarm threshold in steps of 0.1 Celsius Degrees.')
oaLaser1TemperatureLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 97), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1TemperatureLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser1TemperatureLo.setDescription('Temperature of laser no.1 low warning threshold in steps of 0.1 Celsius Degrees.')
oaLaser1TemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 98), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1TemperatureValue.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser1TemperatureValue.setDescription('Temperature of laser no.1 in steps of 0.1 Celsius Degrees.')
oaLaser1TemperatureHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1TemperatureHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser1TemperatureHi.setDescription('Temperature of laser no.1 high warning threshold in steps of 0.1 Celsius Degrees.')
oaLaser1TemperatureHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1TemperatureHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser1TemperatureHiHi.setDescription('Temperature of laser no.1 high alarm threshold in steps of 0.1 Celsius Degrees.')
oaLaser1VoltageLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1VoltageLoLo.setStatus('optional')
if mibBuilder.loadTexts: oaLaser1VoltageLoLo.setDescription('The supply voltage of laser no.1 low alarm threshold in steps of 0.1 Volts.')
oaLaser1VoltageLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1VoltageLo.setStatus('optional')
if mibBuilder.loadTexts: oaLaser1VoltageLo.setDescription('The supply voltage of laser no.1 low warning threshold in steps of 0.1 Volts.')
oaLaser1VoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 103), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1VoltageValue.setStatus('optional')
if mibBuilder.loadTexts: oaLaser1VoltageValue.setDescription('The supply voltage of laser no.1 in steps of 0.1 Volts.')
oaLaser1VoltageHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 104), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1VoltageHi.setStatus('optional')
if mibBuilder.loadTexts: oaLaser1VoltageHi.setDescription('The supply voltage of laser no.1 high warning threshold in steps of 0.1 Volts.')
oaLaser1VoltageHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 105), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1VoltageHiHi.setStatus('optional')
if mibBuilder.loadTexts: oaLaser1VoltageHiHi.setDescription('The supply voltage of laser no.1 high alarm threshold in steps of 0.1 Volts.')
oaLaser2CurrentRelLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 111), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2CurrentRelLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser2CurrentRelLoLo.setDescription('Relative laser no.1 current low alarm threshold in steps of 0.1%.')
oaLaser2CurrentRelLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 112), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2CurrentRelLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser2CurrentRelLo.setDescription('Relative laser no.1 current low warning threshold in steps of 0.1%.')
oaLaser2CurrentRelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 113), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2CurrentRelValue.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser2CurrentRelValue.setDescription('The laser no.1 current relative to the current at begin of life in steps of 0.1%.')
oaLaser2CurrentRelHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 114), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2CurrentRelHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser2CurrentRelHi.setDescription('Relative laser no.1 current high warning threshold in steps of 0.1%.')
oaLaser2CurrentRelHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 115), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2CurrentRelHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser2CurrentRelHiHi.setDescription('Relative laser no.1 current high alarm threshold in steps of 0.1%.')
oaLaser2TecRelLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 116), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2TecRelLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser2TecRelLoLo.setDescription('Thermo-electric-cooler current of laser no.1 low alarm threshold in steps of 0.1%.')
oaLaser2TecRelLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 117), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2TecRelLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser2TecRelLo.setDescription('Thermo-electric-cooler current of laser no.1 low warning threshold in steps of 0.1%.')
oaLaser2TecRelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 118), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2TecRelValue.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser2TecRelValue.setDescription('The thermo-electric-cooler current of laser no.1 relative to its maximum value in steps of 0.1%.')
oaLaser2TecRelHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 119), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2TecRelHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser2TecRelHi.setDescription('Thermo-electric-cooler current of laser no.1 high warning threshold in steps of 0.1%.')
oaLaser2TecRelHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 120), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2TecRelHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser2TecRelHiHi.setDescription('Thermo-electric-cooler current of laser no.1 high alarm threshold in steps of 0.1%.')
oaLaser2TemperatureLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 121), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2TemperatureLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser2TemperatureLoLo.setDescription('Temperature of laser no.1 low alarm threshold in steps of 0.1 Celsius Degrees.')
oaLaser2TemperatureLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 122), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2TemperatureLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser2TemperatureLo.setDescription('Temperature of laser no.1 low warning threshold in steps of 0.1 Celsius Degrees.')
oaLaser2TemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 123), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2TemperatureValue.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser2TemperatureValue.setDescription('Temperature of laser no.1 in steps of 0.1 Celsius Degrees.')
oaLaser2TemperatureHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 124), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2TemperatureHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser2TemperatureHi.setDescription('Temperature of laser no.1 high warning threshold in steps of 0.1 Celsius Degrees.')
oaLaser2TemperatureHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 125), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2TemperatureHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser2TemperatureHiHi.setDescription('Temperature of laser no.1 high alarm threshold in steps of 0.1 Celsius Degrees.')
oaLaser2VoltageLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 126), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2VoltageLoLo.setStatus('optional')
if mibBuilder.loadTexts: oaLaser2VoltageLoLo.setDescription('The supply voltage of laser no.1 low alarm threshold in steps of 0.1 Volts.')
oaLaser2VoltageLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 127), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2VoltageLo.setStatus('optional')
if mibBuilder.loadTexts: oaLaser2VoltageLo.setDescription('The supply voltage of laser no.1 low warning threshold in steps of 0.1 Volts.')
oaLaser2VoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 128), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2VoltageValue.setStatus('optional')
if mibBuilder.loadTexts: oaLaser2VoltageValue.setDescription('The supply voltage of laser no.1 in steps of 0.1 Volts.')
oaLaser2VoltageHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 129), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2VoltageHi.setStatus('optional')
if mibBuilder.loadTexts: oaLaser2VoltageHi.setDescription('The supply voltage of laser no.1 high warning threshold in steps of 0.1 Volts.')
oaLaser2VoltageHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 130), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2VoltageHiHi.setStatus('optional')
if mibBuilder.loadTexts: oaLaser2VoltageHiHi.setDescription('The supply voltage of laser no.1 high alarm threshold in steps of 0.1 Volts.')
oaLaser3CurrentRelLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 136), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser3CurrentRelLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser3CurrentRelLoLo.setDescription('Relative laser no.1 current low alarm threshold in steps of 0.1%.')
oaLaser3CurrentRelLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 137), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser3CurrentRelLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser3CurrentRelLo.setDescription('Relative laser no.1 current low warning threshold in steps of 0.1%.')
oaLaser3CurrentRelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 138), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser3CurrentRelValue.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser3CurrentRelValue.setDescription('The laser no.1 current relative to the current at begin of life in steps of 0.1%.')
oaLaser3CurrentRelHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 139), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser3CurrentRelHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser3CurrentRelHi.setDescription('Relative laser no.1 current high warning threshold in steps of 0.1%.')
oaLaser3CurrentRelHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 140), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser3CurrentRelHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser3CurrentRelHiHi.setDescription('Relative laser no.1 current high alarm threshold in steps of 0.1%.')
oaLaser3TecRelLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 141), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser3TecRelLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser3TecRelLoLo.setDescription('Thermo-electric-cooler current of laser no.1 low alarm threshold in steps of 0.1%.')
oaLaser3TecRelLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 142), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser3TecRelLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser3TecRelLo.setDescription('Thermo-electric-cooler current of laser no.1 low warning threshold in steps of 0.1%.')
oaLaser3TecRelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 143), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser3TecRelValue.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser3TecRelValue.setDescription('The thermo-electric-cooler current of laser no.1 relative to its maximum value in steps of 0.1%.')
oaLaser3TecRelHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 144), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser3TecRelHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser3TecRelHi.setDescription('Thermo-electric-cooler current of laser no.1 high warning threshold in steps of 0.1%.')
oaLaser3TecRelHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 145), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser3TecRelHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser3TecRelHiHi.setDescription('Thermo-electric-cooler current of laser no.1 high alarm threshold in steps of 0.1%.')
oaLaser3TemperatureLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 146), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser3TemperatureLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser3TemperatureLoLo.setDescription('Temperature of laser no.1 low alarm threshold in steps of 0.1 Celsius Degrees.')
oaLaser3TemperatureLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 147), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser3TemperatureLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser3TemperatureLo.setDescription('Temperature of laser no.1 low warning threshold in steps of 0.1 Celsius Degrees.')
oaLaser3TemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 148), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser3TemperatureValue.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser3TemperatureValue.setDescription('Temperature of laser no.1 in steps of 0.1 Celsius Degrees.')
oaLaser3TemperatureHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 149), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser3TemperatureHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser3TemperatureHi.setDescription('Temperature of laser no.1 high warning threshold in steps of 0.1 Celsius Degrees.')
oaLaser3TemperatureHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 150), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser3TemperatureHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser3TemperatureHiHi.setDescription('Temperature of laser no.1 high alarm threshold in steps of 0.1 Celsius Degrees.')
oaLaser3VoltageLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 151), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser3VoltageLoLo.setStatus('optional')
if mibBuilder.loadTexts: oaLaser3VoltageLoLo.setDescription('The supply voltage of laser no.1 low alarm threshold in steps of 0.1 Volts.')
oaLaser3VoltageLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 152), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser3VoltageLo.setStatus('optional')
if mibBuilder.loadTexts: oaLaser3VoltageLo.setDescription('The supply voltage of laser no.1 low warning threshold in steps of 0.1 Volts.')
oaLaser3VoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 153), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser3VoltageValue.setStatus('optional')
if mibBuilder.loadTexts: oaLaser3VoltageValue.setDescription('The supply voltage of laser no.1 in steps of 0.1 Volts.')
oaLaser3VoltageHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 154), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser3VoltageHi.setStatus('optional')
if mibBuilder.loadTexts: oaLaser3VoltageHi.setDescription('The supply voltage of laser no.1 high warning threshold in steps of 0.1 Volts.')
oaLaser3VoltageHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 155), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser3VoltageHiHi.setStatus('optional')
if mibBuilder.loadTexts: oaLaser3VoltageHiHi.setDescription('The supply voltage of laser no.1 high alarm threshold in steps of 0.1 Volts.')
oaLaser4CurrentRelLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 161), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser4CurrentRelLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser4CurrentRelLoLo.setDescription('Relative laser no.1 current low alarm threshold in steps of 0.1%.')
oaLaser4CurrentRelLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 162), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser4CurrentRelLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser4CurrentRelLo.setDescription('Relative laser no.1 current low warning threshold in steps of 0.1%.')
oaLaser4CurrentRelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 163), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser4CurrentRelValue.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser4CurrentRelValue.setDescription('The laser no.1 current relative to the current at begin of life in steps of 0.1%.')
oaLaser4CurrentRelHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 164), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser4CurrentRelHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser4CurrentRelHi.setDescription('Relative laser no.1 current high warning threshold in steps of 0.1%.')
oaLaser4CurrentRelHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 165), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser4CurrentRelHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser4CurrentRelHiHi.setDescription('Relative laser no.1 current high alarm threshold in steps of 0.1%.')
oaLaser4TecRelLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 166), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser4TecRelLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser4TecRelLoLo.setDescription('Thermo-electric-cooler current of laser no.1 low alarm threshold in steps of 0.1%.')
oaLaser4TecRelLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 167), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser4TecRelLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser4TecRelLo.setDescription('Thermo-electric-cooler current of laser no.1 low warning threshold in steps of 0.1%.')
oaLaser4TecRelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 168), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser4TecRelValue.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser4TecRelValue.setDescription('The thermo-electric-cooler current of laser no.1 relative to its maximum value in steps of 0.1%.')
oaLaser4TecRelHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 169), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser4TecRelHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser4TecRelHi.setDescription('Thermo-electric-cooler current of laser no.1 high warning threshold in steps of 0.1%.')
oaLaser4TecRelHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 170), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser4TecRelHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser4TecRelHiHi.setDescription('Thermo-electric-cooler current of laser no.1 high alarm threshold in steps of 0.1%.')
oaLaser4TemperatureLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 171), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser4TemperatureLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser4TemperatureLoLo.setDescription('Temperature of laser no.1 low alarm threshold in steps of 0.1 Celsius Degrees.')
oaLaser4TemperatureLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 172), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser4TemperatureLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser4TemperatureLo.setDescription('Temperature of laser no.1 low warning threshold in steps of 0.1 Celsius Degrees.')
oaLaser4TemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 173), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser4TemperatureValue.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser4TemperatureValue.setDescription('Temperature of laser no.1 in steps of 0.1 Celsius Degrees.')
oaLaser4TemperatureHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 174), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser4TemperatureHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser4TemperatureHi.setDescription('Temperature of laser no.1 high warning threshold in steps of 0.1 Celsius Degrees.')
oaLaser4TemperatureHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 175), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser4TemperatureHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser4TemperatureHiHi.setDescription('Temperature of laser no.1 high alarm threshold in steps of 0.1 Celsius Degrees.')
oaLaser4VoltageLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 176), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser4VoltageLoLo.setStatus('optional')
if mibBuilder.loadTexts: oaLaser4VoltageLoLo.setDescription('The supply voltage of laser no.1 low alarm threshold in steps of 0.1 Volts.')
oaLaser4VoltageLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 177), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser4VoltageLo.setStatus('optional')
if mibBuilder.loadTexts: oaLaser4VoltageLo.setDescription('The supply voltage of laser no.1 low warning threshold in steps of 0.1 Volts.')
oaLaser4VoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 178), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser4VoltageValue.setStatus('optional')
if mibBuilder.loadTexts: oaLaser4VoltageValue.setDescription('The supply voltage of laser no.1 in steps of 0.1 Volts.')
oaLaser4VoltageHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 179), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser4VoltageHi.setStatus('optional')
if mibBuilder.loadTexts: oaLaser4VoltageHi.setDescription('The supply voltage of laser no.1 high warning threshold in steps of 0.1 Volts.')
oaLaser4VoltageHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 180), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser4VoltageHiHi.setStatus('optional')
if mibBuilder.loadTexts: oaLaser4VoltageHiHi.setDescription('The supply voltage of laser no.1 high alarm threshold in steps of 0.1 Volts.')
oaLaser5CurrentRelLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 186), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser5CurrentRelLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser5CurrentRelLoLo.setDescription('Relative laser no.1 current low alarm threshold in steps of 0.1%.')
oaLaser5CurrentRelLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 187), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser5CurrentRelLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser5CurrentRelLo.setDescription('Relative laser no.1 current low warning threshold in steps of 0.1%.')
oaLaser5CurrentRelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 188), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser5CurrentRelValue.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser5CurrentRelValue.setDescription('The laser no.1 current relative to the current at begin of life in steps of 0.1%.')
oaLaser5CurrentRelHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 189), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser5CurrentRelHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser5CurrentRelHi.setDescription('Relative laser no.1 current high warning threshold in steps of 0.1%.')
oaLaser5CurrentRelHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 190), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser5CurrentRelHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser5CurrentRelHiHi.setDescription('Relative laser no.1 current high alarm threshold in steps of 0.1%.')
oaLaser5TecRelLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 191), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser5TecRelLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser5TecRelLoLo.setDescription('Thermo-electric-cooler current of laser no.1 low alarm threshold in steps of 0.1%.')
oaLaser5TecRelLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 192), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser5TecRelLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser5TecRelLo.setDescription('Thermo-electric-cooler current of laser no.1 low warning threshold in steps of 0.1%.')
oaLaser5TecRelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 193), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser5TecRelValue.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser5TecRelValue.setDescription('The thermo-electric-cooler current of laser no.1 relative to its maximum value in steps of 0.1%.')
oaLaser5TecRelHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 194), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser5TecRelHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser5TecRelHi.setDescription('Thermo-electric-cooler current of laser no.1 high warning threshold in steps of 0.1%.')
oaLaser5TecRelHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 195), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser5TecRelHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser5TecRelHiHi.setDescription('Thermo-electric-cooler current of laser no.1 high alarm threshold in steps of 0.1%.')
oaLaser5TemperatureLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 196), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser5TemperatureLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser5TemperatureLoLo.setDescription('Temperature of laser no.1 low alarm threshold in steps of 0.1 Celsius Degrees.')
oaLaser5TemperatureLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 197), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser5TemperatureLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser5TemperatureLo.setDescription('Temperature of laser no.1 low warning threshold in steps of 0.1 Celsius Degrees.')
oaLaser5TemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 198), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser5TemperatureValue.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser5TemperatureValue.setDescription('Temperature of laser no.1 in steps of 0.1 Celsius Degrees.')
oaLaser5TemperatureHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 199), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser5TemperatureHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser5TemperatureHi.setDescription('Temperature of laser no.1 high warning threshold in steps of 0.1 Celsius Degrees.')
oaLaser5TemperatureHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 200), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser5TemperatureHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser5TemperatureHiHi.setDescription('Temperature of laser no.1 high alarm threshold in steps of 0.1 Celsius Degrees.')
oaLaser5VoltageLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 201), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser5VoltageLoLo.setStatus('optional')
if mibBuilder.loadTexts: oaLaser5VoltageLoLo.setDescription('The supply voltage of laser no.1 low alarm threshold in steps of 0.1 Volts.')
oaLaser5VoltageLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 202), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser5VoltageLo.setStatus('optional')
if mibBuilder.loadTexts: oaLaser5VoltageLo.setDescription('The supply voltage of laser no.1 low warning threshold in steps of 0.1 Volts.')
oaLaser5VoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 203), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser5VoltageValue.setStatus('optional')
if mibBuilder.loadTexts: oaLaser5VoltageValue.setDescription('The supply voltage of laser no.1 in steps of 0.1 Volts.')
oaLaser5VoltageHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 204), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser5VoltageHi.setStatus('optional')
if mibBuilder.loadTexts: oaLaser5VoltageHi.setDescription('The supply voltage of laser no.1 high warning threshold in steps of 0.1 Volts.')
oaLaser5VoltageHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 205), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser5VoltageHiHi.setStatus('optional')
if mibBuilder.loadTexts: oaLaser5VoltageHiHi.setDescription('The supply voltage of laser no.1 high alarm threshold in steps of 0.1 Volts.')
oaLaser6CurrentRelLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 211), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser6CurrentRelLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser6CurrentRelLoLo.setDescription('Relative laser no.1 current low alarm threshold in steps of 0.1%.')
oaLaser6CurrentRelLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 212), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser6CurrentRelLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser6CurrentRelLo.setDescription('Relative laser no.1 current low warning threshold in steps of 0.1%.')
oaLaser6CurrentRelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 213), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser6CurrentRelValue.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser6CurrentRelValue.setDescription('The laser no.1 current relative to the current at begin of life in steps of 0.1%.')
oaLaser6CurrentRelHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 214), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser6CurrentRelHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser6CurrentRelHi.setDescription('Relative laser no.1 current high warning threshold in steps of 0.1%.')
oaLaser6CurrentRelHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 215), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser6CurrentRelHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser6CurrentRelHiHi.setDescription('Relative laser no.1 current high alarm threshold in steps of 0.1%.')
oaLaser6TecRelLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 216), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser6TecRelLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser6TecRelLoLo.setDescription('Thermo-electric-cooler current of laser no.1 low alarm threshold in steps of 0.1%.')
oaLaser6TecRelLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 217), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser6TecRelLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser6TecRelLo.setDescription('Thermo-electric-cooler current of laser no.1 low warning threshold in steps of 0.1%.')
oaLaser6TecRelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 218), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser6TecRelValue.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser6TecRelValue.setDescription('The thermo-electric-cooler current of laser no.1 relative to its maximum value in steps of 0.1%.')
oaLaser6TecRelHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 219), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser6TecRelHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser6TecRelHi.setDescription('Thermo-electric-cooler current of laser no.1 high warning threshold in steps of 0.1%.')
oaLaser6TecRelHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 220), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser6TecRelHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser6TecRelHiHi.setDescription('Thermo-electric-cooler current of laser no.1 high alarm threshold in steps of 0.1%.')
oaLaser6TemperatureLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 221), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser6TemperatureLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser6TemperatureLoLo.setDescription('Temperature of laser no.1 low alarm threshold in steps of 0.1 Celsius Degrees.')
oaLaser6TemperatureLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 222), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser6TemperatureLo.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser6TemperatureLo.setDescription('Temperature of laser no.1 low warning threshold in steps of 0.1 Celsius Degrees.')
oaLaser6TemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 223), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser6TemperatureValue.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser6TemperatureValue.setDescription('Temperature of laser no.1 in steps of 0.1 Celsius Degrees.')
oaLaser6TemperatureHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 224), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser6TemperatureHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser6TemperatureHi.setDescription('Temperature of laser no.1 high warning threshold in steps of 0.1 Celsius Degrees.')
oaLaser6TemperatureHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 225), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser6TemperatureHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: oaLaser6TemperatureHiHi.setDescription('Temperature of laser no.1 high alarm threshold in steps of 0.1 Celsius Degrees.')
oaLaser6VoltageLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 226), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser6VoltageLoLo.setStatus('optional')
if mibBuilder.loadTexts: oaLaser6VoltageLoLo.setDescription('The supply voltage of laser no.1 low alarm threshold in steps of 0.1 Volts.')
oaLaser6VoltageLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 227), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser6VoltageLo.setStatus('optional')
if mibBuilder.loadTexts: oaLaser6VoltageLo.setDescription('The supply voltage of laser no.1 low warning threshold in steps of 0.1 Volts.')
oaLaser6VoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 228), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser6VoltageValue.setStatus('optional')
if mibBuilder.loadTexts: oaLaser6VoltageValue.setDescription('The supply voltage of laser no.1 in steps of 0.1 Volts.')
oaLaser6VoltageHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 229), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser6VoltageHi.setStatus('optional')
if mibBuilder.loadTexts: oaLaser6VoltageHi.setDescription('The supply voltage of laser no.1 high warning threshold in steps of 0.1 Volts.')
oaLaser6VoltageHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 5, 1, 1, 230), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser6VoltageHiHi.setStatus('optional')
if mibBuilder.loadTexts: oaLaser6VoltageHiHi.setDescription('The supply voltage of laser no.1 high alarm threshold in steps of 0.1 Volts.')
oaStatesTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1), )
if mibBuilder.loadTexts: oaStatesTable.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesTable.setDescription('')
oaStatesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1), ).setIndexNames((0, "BKTEL-HFC862-OA-V01-MIB", "oaNESlot"))
if mibBuilder.loadTexts: oaStatesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesEntry.setDescription('Alarms for a module.')
oaStatesBootloader = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 1), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesBootloader.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesBootloader.setDescription('The device is running in bootloader mode\n             without a legal application software.')
oaStatesCommLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 2), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesCommLoss.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesCommLoss.setDescription('The NEC has lost the connection to the device.\n             Reason may be a removed or defective device.\n             Note that this state is set by the NEC and not\n             by the device')
oaStatesInitializing = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 3), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesInitializing.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesInitializing.setDescription('The device is initializing')
oaStatesLaserShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 4), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesLaserShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesLaserShutdown.setDescription('Lasers are shutdown, no optical output')
oaStatesTemperatureLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 5), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesTemperatureLow.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesTemperatureLow.setDescription('Device internal temperature low')
oaStatesTemperatureHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 6), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesTemperatureHigh.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesTemperatureHigh.setDescription('Device internal temperature high')
oaStatesSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 7), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesSystem.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesSystem.setDescription('Internal error occured')
oaStatesInputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 8), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesInputPwrLow.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesInputPwrLow.setDescription('Optical input power low')
oaStatesInputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 9), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesInputPwrHigh.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesInputPwrHigh.setDescription('Optical input power high')
oaStatesOutputPwrOrGainLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 10), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesOutputPwrOrGainLow.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesOutputPwrOrGainLow.setDescription('Optical output power (or gain) low')
oaStatesOutputPwrOrGainHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 11), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesOutputPwrOrGainHigh.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesOutputPwrOrGainHigh.setDescription('Optical output power (or gain) high')
oaStatesReturnLossLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 12), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesReturnLossLow.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesReturnLossLow.setDescription('Return loss low')
oaStatesReturnLossHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 13), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesReturnLossHigh.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesReturnLossHigh.setDescription('Return loss high')
oaStatesRedundancySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 14), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesRedundancySwitch.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesRedundancySwitch.setDescription('This (redundant) device has been activated (redundancy switchover)')
oaStatesInputVoltageLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 15), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesInputVoltageLow.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesInputVoltageLow.setDescription('Input supply voltage low')
oaStatesInputVoltageHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 16), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesInputVoltageHigh.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesInputVoltageHigh.setDescription('Input supply voltage high')
oaStatesPowerSupplyLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 25), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesPowerSupplyLeft.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesPowerSupplyLeft.setDescription('The left (looking from front) power supply unit fails.\n                     Only valid for devices in 19 inch housing')
oaStatesPowerSupplyRight = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 26), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesPowerSupplyRight.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesPowerSupplyRight.setDescription('The right (looking from front) power supply unit fails.\n                     Only valid for devices in 19 inch housing')
oaStatesFanLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 27), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesFanLeft.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesFanLeft.setDescription('The left (looking from front) fan unit fails.\n                     Only valid for devices in 19 inch housing')
oaStatesFanRight = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 28), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesFanRight.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesFanRight.setDescription('The right (looking from front) fan unit fails.\n                     Only valid for devices in 19 inch housing')
oaStatesInternalVoltageLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 29), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesInternalVoltageLow.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesInternalVoltageLow.setDescription('One (or more) internal voltages low')
oaStatesInternalVoltageHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 30), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesInternalVoltageHigh.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesInternalVoltageHigh.setDescription('One (or more) internal voltages high')
oaStatesLaserCurrentLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 31), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesLaserCurrentLow.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesLaserCurrentLow.setDescription('Laser current of one (or more) lasers low')
oaStatesLaserCurrentHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 32), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesLaserCurrentHigh.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesLaserCurrentHigh.setDescription('Laser current of one (or more) lasers high (laser is aging)')
oaStatesTecCurrentLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 33), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesTecCurrentLow.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesTecCurrentLow.setDescription('Laser TEC current limit of one (or more) lasers reached (heating limit)')
oaStatesTecCurrentHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 34), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesTecCurrentHigh.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesTecCurrentHigh.setDescription('Laser TEC current limit of one (or more) lasers reached (cooling limit)')
oaStatesLaserTempLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 35), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesLaserTempLow.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesLaserTempLow.setDescription('Laser temperature of one (or more) lasers low')
oaStatesLaserTempHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 36), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesLaserTempHigh.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesLaserTempHigh.setDescription('Laser temperature of one (or more) lasers high')
oaStatesLaserVoltageLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 37), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesLaserVoltageLow.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesLaserVoltageLow.setDescription('Laser voltage supply of one (or more) lasers low')
oaStatesLaserVoltageHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 38), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesLaserVoltageHigh.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesLaserVoltageHigh.setDescription('Laser voltage supply of one (or more) lasers high')
oaStatesRamanBackReflectionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 39), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesRamanBackReflectionRatio.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesRamanBackReflectionRatio.setDescription('Raman amplifier back reflection ratio high alarm\n                     Only used if oaDisplayAmplifierIsRamanType == true(1)')
oaStatesRamanOscSignalMissing = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 2, 1, 1, 40), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatesRamanOscSignalMissing.setStatus('mandatory')
if mibBuilder.loadTexts: oaStatesRamanOscSignalMissing.setDescription('Raman amplifier oscillator signal missing alarm\n                     Only used if oaDisplayAmplifierIsRamanType == true(1)')
oaControlTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 4, 1), )
if mibBuilder.loadTexts: oaControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: oaControlTable.setDescription('')
oaControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 4, 1, 1), ).setIndexNames((0, "BKTEL-HFC862-OA-V01-MIB", "oaNESlot"))
if mibBuilder.loadTexts: oaControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oaControlEntry.setDescription('Alarms for a module.')
oaControlLaserShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 4, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaControlLaserShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: oaControlLaserShutdown.setDescription('Shutdown the laser(s), optical power on/off.')
oaControlReset = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 4, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaControlReset.setStatus('mandatory')
if mibBuilder.loadTexts: oaControlReset.setDescription('Reset the module.')
oaControlModuleLedBlink = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 4, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaControlModuleLedBlink.setStatus('mandatory')
if mibBuilder.loadTexts: oaControlModuleLedBlink.setDescription("Writing this variable to true(1) lets the device's\n        modul LED blink green for 10 seconds.\n        Writing this variable to false(2) stops blinking at once.\n        This variable always returns false(2) on read requests")
oaControlSbsEvaluationStart = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 4, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaControlSbsEvaluationStart.setStatus('mandatory')
if mibBuilder.loadTexts: oaControlSbsEvaluationStart.setDescription('Setting to true(1) starts an SBS threshold evaluation process.\n             Always reads as false(2)')
oaConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 3, 1), )
if mibBuilder.loadTexts: oaConfigurationTable.setStatus('mandatory')
if mibBuilder.loadTexts: oaConfigurationTable.setDescription('')
oaConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 3, 1, 1), ).setIndexNames((0, "BKTEL-HFC862-OA-V01-MIB", "oaNESlot"))
if mibBuilder.loadTexts: oaConfigurationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oaConfigurationEntry.setDescription('')
oaConfigNESlotWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 3, 1, 1, 1), NESlotWriteValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaConfigNESlotWrite.setStatus('optional')
if mibBuilder.loadTexts: oaConfigNESlotWrite.setDescription("By writing this variable a slot can be assigned\n            for devices that dont support hardware slot detection.\n            Reading '-1' means that the slot position is NOT writable.")
oaConfigRegulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 3, 1, 1, 2), RegulationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaConfigRegulationMode.setStatus('mandatory')
if mibBuilder.loadTexts: oaConfigRegulationMode.setDescription("The regulation mode of the device.\n             - regModeConstantOutputPower(1):\n               If the device runs in constant output power mode, then all *OutputPwrOrGain*\n               variables are interpreted as 'Output Power' specific.\n             - regModeConstantGain(2):\n               If the device runs in constant gain mode, then all *OutputPwrOrGain*\n               variables are interpreted as 'Gain' specific.")
oaConfigOutputPwrOrGainAdjust = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaConfigOutputPwrOrGainAdjust.setStatus('mandatory')
if mibBuilder.loadTexts: oaConfigOutputPwrOrGainAdjust.setDescription('This variable can be used to adjust the desired output power (or gain)\n             value in 0.1 dB units relative to its nominal level.\n             See oaConfigRegulationMode variable too')
oaConfigModeExtIO = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 3, 1, 1, 4), ExtIOmode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaConfigModeExtIO.setStatus('mandatory')
if mibBuilder.loadTexts: oaConfigModeExtIO.setDescription("The mode and usage of the device's external IO port.")
oaConfigMaskExtIO = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 3, 1, 1, 5), ExtIOmask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaConfigMaskExtIO.setStatus('mandatory')
if mibBuilder.loadTexts: oaConfigMaskExtIO.setDescription("The alarm/warning mask that activates the device's external IO port.")
oaConfigSbsEvaluationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 3, 1, 1, 6), SbsEvaluationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaConfigSbsEvaluationMode.setStatus('mandatory')
if mibBuilder.loadTexts: oaConfigSbsEvaluationMode.setDescription('The SBS threshold evaluation mode.')
oaDisplayTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1), )
if mibBuilder.loadTexts: oaDisplayTable.setStatus('mandatory')
if mibBuilder.loadTexts: oaDisplayTable.setDescription('')
oaDisplayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1), ).setIndexNames((0, "BKTEL-HFC862-OA-V01-MIB", "oaNESlot"))
if mibBuilder.loadTexts: oaDisplayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oaDisplayEntry.setDescription('')
oaDisplayNumberOfLasers = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayNumberOfLasers.setStatus('mandatory')
if mibBuilder.loadTexts: oaDisplayNumberOfLasers.setDescription('The number of lasers used by this optical amplifier')
oaDisplayNumberOfInternalVoltages = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayNumberOfInternalVoltages.setStatus('optional')
if mibBuilder.loadTexts: oaDisplayNumberOfInternalVoltages.setDescription('The number of internal voltages monitored by this optical amplifier')
oaDisplayExtIOSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayExtIOSupported.setStatus('mandatory')
if mibBuilder.loadTexts: oaDisplayExtIOSupported.setDescription("Return 'true(1)' if external I/O feature is supported by the device.")
oaDisplaySbsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplaySbsSupported.setStatus('mandatory')
if mibBuilder.loadTexts: oaDisplaySbsSupported.setDescription("Return 'true(1)' if SBS feature is supported by the device.")
oaDisplayReturnLossSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayReturnLossSupported.setStatus('mandatory')
if mibBuilder.loadTexts: oaDisplayReturnLossSupported.setDescription("Return 'true(1)' if ReturnLoss feature is supported by the device.")
oaDisplaySbsEvaluatedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplaySbsEvaluatedThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: oaDisplaySbsEvaluatedThreshold.setDescription('The evaluated SBS output power or gain threshold in 0.1 dB(m) units.\n             Not supported by all optical amplifiers')
oaDisplaySbsLastEvaluationState = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 7), SbsEvaluationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplaySbsLastEvaluationState.setStatus('mandatory')
if mibBuilder.loadTexts: oaDisplaySbsLastEvaluationState.setDescription("The result of last SBS threshold evaluation process.\n             Returns 'evaluationNotSupported(1)' if SBS threshold evaluation\n             is not supported by this optical amplifier")
oaDisplaySbsLastEvaluationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplaySbsLastEvaluationTime.setStatus('mandatory')
if mibBuilder.loadTexts: oaDisplaySbsLastEvaluationTime.setDescription('The time of last successfull SBS threshold evaluation process.\n             Not supported by all optical amplifiers')
oaDisplayOutputPwrOrGainNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayOutputPwrOrGainNominal.setStatus('mandatory')
if mibBuilder.loadTexts: oaDisplayOutputPwrOrGainNominal.setDescription('The nominal value of output power (or gain) in 0.1 dB(m) units.\n             See oaConfigRegulationMode variable too')
oaDisplayOutputPwrOrGainAdjusted = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayOutputPwrOrGainAdjusted.setStatus('mandatory')
if mibBuilder.loadTexts: oaDisplayOutputPwrOrGainAdjusted.setDescription('The adjusted desired value of output power (or gain) in 0.1 dB(m) units.\n             See oaConfigRegulationMode variable too')
oaDisplayInputVoltageNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayInputVoltageNominal.setStatus('optional')
if mibBuilder.loadTexts: oaDisplayInputVoltageNominal.setDescription('The nominal value of input voltage in 0.1 V units.')
oaDisplayInternalVoltage1Nominal = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayInternalVoltage1Nominal.setStatus('optional')
if mibBuilder.loadTexts: oaDisplayInternalVoltage1Nominal.setDescription('The nominal value of internal voltage no. 1 in 0.1 V units.')
oaDisplayInternalVoltage2Nominal = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayInternalVoltage2Nominal.setStatus('optional')
if mibBuilder.loadTexts: oaDisplayInternalVoltage2Nominal.setDescription('The nominal value of internal voltage no. 2 in 0.1 V units.')
oaDisplayInternalVoltage3Nominal = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayInternalVoltage3Nominal.setStatus('optional')
if mibBuilder.loadTexts: oaDisplayInternalVoltage3Nominal.setDescription('The nominal value of internal voltage no. 3 in 0.1 V units.')
oaDisplayLaser1VoltageNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayLaser1VoltageNominal.setStatus('optional')
if mibBuilder.loadTexts: oaDisplayLaser1VoltageNominal.setDescription('The nominal supply voltage of laser no.1 in 0.1 V units.')
oaDisplayLaser2VoltageNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayLaser2VoltageNominal.setStatus('optional')
if mibBuilder.loadTexts: oaDisplayLaser2VoltageNominal.setDescription('The nominal supply voltage of laser no.2 in 0.1 V units.')
oaDisplayLaser3VoltageNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayLaser3VoltageNominal.setStatus('optional')
if mibBuilder.loadTexts: oaDisplayLaser3VoltageNominal.setDescription('The nominal supply voltage of laser no.3 in 0.1 V units.')
oaDisplayLaser4VoltageNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayLaser4VoltageNominal.setStatus('optional')
if mibBuilder.loadTexts: oaDisplayLaser4VoltageNominal.setDescription('The nominal supply voltage of laser no.4 in 0.1 V units.')
oaDisplayLaser5VoltageNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayLaser5VoltageNominal.setStatus('optional')
if mibBuilder.loadTexts: oaDisplayLaser5VoltageNominal.setDescription('The nominal supply voltage of laser no.5 in 0.1 V units.')
oaDisplayLaser6VoltageNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayLaser6VoltageNominal.setStatus('optional')
if mibBuilder.loadTexts: oaDisplayLaser6VoltageNominal.setDescription('The nominal supply voltage of laser no.6 in 0.1 V units.')
oaDisplayLaser1PumpPowerRel = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayLaser1PumpPowerRel.setStatus('mandatory')
if mibBuilder.loadTexts: oaDisplayLaser1PumpPowerRel.setDescription('The pump power of laser no.1 in steps of 0.1%')
oaDisplayLaser2PumpPowerRel = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayLaser2PumpPowerRel.setStatus('mandatory')
if mibBuilder.loadTexts: oaDisplayLaser2PumpPowerRel.setDescription('The pump power of laser no.2 in steps of 0.1%')
oaDisplayLaser3PumpPowerRel = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayLaser3PumpPowerRel.setStatus('mandatory')
if mibBuilder.loadTexts: oaDisplayLaser3PumpPowerRel.setDescription('The pump power of laser no.3 in steps of 0.1%')
oaDisplayLaser4PumpPowerRel = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayLaser4PumpPowerRel.setStatus('mandatory')
if mibBuilder.loadTexts: oaDisplayLaser4PumpPowerRel.setDescription('The pump power of laser no.4 in steps of 0.1%')
oaDisplayLaser5PumpPowerRel = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayLaser5PumpPowerRel.setStatus('mandatory')
if mibBuilder.loadTexts: oaDisplayLaser5PumpPowerRel.setDescription('The pump power of laser no.5 in steps of 0.1%')
oaDisplayLaser6PumpPowerRel = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayLaser6PumpPowerRel.setStatus('mandatory')
if mibBuilder.loadTexts: oaDisplayLaser6PumpPowerRel.setDescription('The pump power of laser no.6 in steps of 0.1%')
oaDisplayLaser1FeaturesSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 40), LaserFeatures()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayLaser1FeaturesSupported.setStatus('mandatory')
if mibBuilder.loadTexts: oaDisplayLaser1FeaturesSupported.setDescription('The features supported by laser no.1\n             A bitfield containing the features supplied by this laser.\n             Note that laserCurrent is always supplied.')
oaDisplayLaser2FeaturesSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 41), LaserFeatures()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayLaser2FeaturesSupported.setStatus('mandatory')
if mibBuilder.loadTexts: oaDisplayLaser2FeaturesSupported.setDescription('The features supported by laser no.2')
oaDisplayLaser3FeaturesSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 42), LaserFeatures()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayLaser3FeaturesSupported.setStatus('mandatory')
if mibBuilder.loadTexts: oaDisplayLaser3FeaturesSupported.setDescription('The features supported by laser no.3')
oaDisplayLaser4FeaturesSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 43), LaserFeatures()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayLaser4FeaturesSupported.setStatus('mandatory')
if mibBuilder.loadTexts: oaDisplayLaser4FeaturesSupported.setDescription('The features supported by laser no.4')
oaDisplayLaser5FeaturesSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 44), LaserFeatures()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayLaser5FeaturesSupported.setStatus('mandatory')
if mibBuilder.loadTexts: oaDisplayLaser5FeaturesSupported.setDescription('The features supported by laser no.5')
oaDisplayLaser6FeaturesSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 45), LaserFeatures()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayLaser6FeaturesSupported.setStatus('mandatory')
if mibBuilder.loadTexts: oaDisplayLaser6FeaturesSupported.setDescription('The features supported by laser no.6')
oaDisplayAmplifierIsRamanType = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 116, 6, 1, 1, 50), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDisplayAmplifierIsRamanType.setStatus('mandatory')
if mibBuilder.loadTexts: oaDisplayAmplifierIsRamanType.setDescription('Returns true(1) if this amplifier is of RAMAN type')
mibBuilder.exportSymbols("BKTEL-HFC862-OA-V01-MIB", oaLaser6VoltageValue=oaLaser6VoltageValue, oaDisplayInputVoltageNominal=oaDisplayInputVoltageNominal, oaLaser2TecRelLo=oaLaser2TecRelLo, oaDisplayLaser1FeaturesSupported=oaDisplayLaser1FeaturesSupported, oaLaser6TemperatureValue=oaLaser6TemperatureValue, oaLaser2CurrentRelLo=oaLaser2CurrentRelLo, oaStatesPowerSupplyRight=oaStatesPowerSupplyRight, oaDisplayLaser6VoltageNominal=oaDisplayLaser6VoltageNominal, oa=oa, oaLaser1VoltageLoLo=oaLaser1VoltageLoLo, oaTemperatureValue=oaTemperatureValue, oaCommonModuleWidth=oaCommonModuleWidth, oaLaser1CurrentRelHi=oaLaser1CurrentRelHi, oaTemperatureHi=oaTemperatureHi, oaLaser6TecRelHiHi=oaLaser6TecRelHiHi, oaDisplayTable=oaDisplayTable, ExtIOmask=ExtIOmask, oaLaser1TemperatureHiHi=oaLaser1TemperatureHiHi, oaStatesInternalVoltageHigh=oaStatesInternalVoltageHigh, oaTemperatureLoLo=oaTemperatureLoLo, oaStatesPowerSupplyLeft=oaStatesPowerSupplyLeft, oaLaser5CurrentRelLoLo=oaLaser5CurrentRelLoLo, oaDisplayLaser3FeaturesSupported=oaDisplayLaser3FeaturesSupported, oaLaser6CurrentRelValue=oaLaser6CurrentRelValue, oaInputPowerValue=oaInputPowerValue, oaInputVoltageHi=oaInputVoltageHi, oaLaser1TecRelHiHi=oaLaser1TecRelHiHi, oaLaser5VoltageLo=oaLaser5VoltageLo, oaLaser5VoltageHiHi=oaLaser5VoltageHiHi, oaDisplayLaser6PumpPowerRel=oaDisplayLaser6PumpPowerRel, oaLaser5VoltageLoLo=oaLaser5VoltageLoLo, oaInputVoltageLo=oaInputVoltageLo, oaCommonNumberOfModules=oaCommonNumberOfModules, oaLaser2VoltageHiHi=oaLaser2VoltageHiHi, oaStatesLaserTempHigh=oaStatesLaserTempHigh, oaStatesInputPwrLow=oaStatesInputPwrLow, oaLaser3VoltageHi=oaLaser3VoltageHi, oaControlLaserShutdown=oaControlLaserShutdown, oaOutputPwrOrGainHiHi=oaOutputPwrOrGainHiHi, oaConfigModeExtIO=oaConfigModeExtIO, oaLaser5TecRelValue=oaLaser5TecRelValue, oaLaser1VoltageValue=oaLaser1VoltageValue, oaMeasuringValues=oaMeasuringValues, oaLaser2TecRelHi=oaLaser2TecRelHi, oaLaser3VoltageHiHi=oaLaser3VoltageHiHi, oaConfigurationEntry=oaConfigurationEntry, oaDisplaySbsEvaluatedThreshold=oaDisplaySbsEvaluatedThreshold, oaLaser2TemperatureLo=oaLaser2TemperatureLo, oaLaser3TemperatureHi=oaLaser3TemperatureHi, oaStatesTecCurrentHigh=oaStatesTecCurrentHigh, oaLaser5CurrentRelHi=oaLaser5CurrentRelHi, oaDisplayLaser1PumpPowerRel=oaDisplayLaser1PumpPowerRel, oaLaser4VoltageValue=oaLaser4VoltageValue, oaDisplayInternalVoltage1Nominal=oaDisplayInternalVoltage1Nominal, oaLaser5CurrentRelValue=oaLaser5CurrentRelValue, oaStatesReturnLossHigh=oaStatesReturnLossHigh, oaInternalVoltage3HiHi=oaInternalVoltage3HiHi, oaDisplayExtIOSupported=oaDisplayExtIOSupported, oaLaser1VoltageLo=oaLaser1VoltageLo, oaInternalVoltage2Value=oaInternalVoltage2Value, oaStatesTemperatureLow=oaStatesTemperatureLow, oaConfiguration=oaConfiguration, oaLaser3TecRelHi=oaLaser3TecRelHi, oaLaser3TecRelValue=oaLaser3TecRelValue, oaLaser4CurrentRelHi=oaLaser4CurrentRelHi, oaStatesOutputPwrOrGainLow=oaStatesOutputPwrOrGainLow, oaMeasuringValuesTable=oaMeasuringValuesTable, oaLaser3CurrentRelHiHi=oaLaser3CurrentRelHiHi, oaControlReset=oaControlReset, oaLaser4CurrentRelValue=oaLaser4CurrentRelValue, oaStatesFanLeft=oaStatesFanLeft, oaLaser5TemperatureHiHi=oaLaser5TemperatureHiHi, oaReturnLossLo=oaReturnLossLo, oaLaser3CurrentRelHi=oaLaser3CurrentRelHi, oaLaser4TemperatureHi=oaLaser4TemperatureHi, oaDisplayLaser2FeaturesSupported=oaDisplayLaser2FeaturesSupported, oaConfigMaskExtIO=oaConfigMaskExtIO, oaLaser1TecRelHi=oaLaser1TecRelHi, oaDisplayLaser3PumpPowerRel=oaDisplayLaser3PumpPowerRel, oaStatesRamanOscSignalMissing=oaStatesRamanOscSignalMissing, oaStatesReturnLossLow=oaStatesReturnLossLow, oaDisplayNumberOfInternalVoltages=oaDisplayNumberOfInternalVoltages, oaControlModuleLedBlink=oaControlModuleLedBlink, oaInternalVoltage1Lo=oaInternalVoltage1Lo, oaDisplaySbsSupported=oaDisplaySbsSupported, oaConfigNESlotWrite=oaConfigNESlotWrite, oaLaser4VoltageHi=oaLaser4VoltageHi, LaserFeatures=LaserFeatures, oaCommonType=oaCommonType, oaNESlot=oaNESlot, oaOutputPwrOrGainValue=oaOutputPwrOrGainValue, oaReturnLossHiHi=oaReturnLossHiHi, oaInternalVoltage1Hi=oaInternalVoltage1Hi, oaLaser3TecRelHiHi=oaLaser3TecRelHiHi, oaCommonFirmwareId=oaCommonFirmwareId, oaLaser4CurrentRelLo=oaLaser4CurrentRelLo, oaLaser6CurrentRelLoLo=oaLaser6CurrentRelLoLo, oaCommon=oaCommon, oaDisplayLaser2VoltageNominal=oaDisplayLaser2VoltageNominal, oaStatesOutputPwrOrGainHigh=oaStatesOutputPwrOrGainHigh, oaDisplayLaser2PumpPowerRel=oaDisplayLaser2PumpPowerRel, oaLaser3TecRelLoLo=oaLaser3TecRelLoLo, oaLaser1TecRelLo=oaLaser1TecRelLo, oaLaser1TecRelValue=oaLaser1TecRelValue, oaInternalVoltage3Lo=oaInternalVoltage3Lo, oaLaser6VoltageLoLo=oaLaser6VoltageLoLo, oaCommonEntry=oaCommonEntry, oaLaser1CurrentRelValue=oaLaser1CurrentRelValue, oaLaser5TemperatureValue=oaLaser5TemperatureValue, oaLaser2TemperatureValue=oaLaser2TemperatureValue, oaLaser1CurrentRelLoLo=oaLaser1CurrentRelLoLo, oaDisplayLaser1VoltageNominal=oaDisplayLaser1VoltageNominal, NESlotWriteValue=NESlotWriteValue, oaLaser1VoltageHi=oaLaser1VoltageHi, oaLaser2TemperatureHi=oaLaser2TemperatureHi, oaLaser5TecRelHi=oaLaser5TecRelHi, oaInputVoltageLoLo=oaInputVoltageLoLo, ExtIOmode=ExtIOmode, oaLaser3CurrentRelValue=oaLaser3CurrentRelValue, oaLaser5TemperatureHi=oaLaser5TemperatureHi, oaLaser4CurrentRelLoLo=oaLaser4CurrentRelLoLo, oaLaser6CurrentRelHi=oaLaser6CurrentRelHi, oaStatesLaserTempLow=oaStatesLaserTempLow, oaControlTable=oaControlTable, oaLaser3VoltageValue=oaLaser3VoltageValue, oaLaser3CurrentRelLoLo=oaLaser3CurrentRelLoLo, oaDisplayLaser3VoltageNominal=oaDisplayLaser3VoltageNominal, oaLaser2VoltageLoLo=oaLaser2VoltageLoLo, oaMeasuringValuesEntry=oaMeasuringValuesEntry, oaDisplayLaser4PumpPowerRel=oaDisplayLaser4PumpPowerRel, oaInternalVoltage2LoLo=oaInternalVoltage2LoLo, oaLaser1TemperatureValue=oaLaser1TemperatureValue, oaLaser5TemperatureLo=oaLaser5TemperatureLo, oaLaser6TemperatureLo=oaLaser6TemperatureLo, oaTemperatureLo=oaTemperatureLo, oaLaser4VoltageLoLo=oaLaser4VoltageLoLo, oaStatesFanRight=oaStatesFanRight, oaLaser1CurrentRelHiHi=oaLaser1CurrentRelHiHi, oaLaser4TecRelHiHi=oaLaser4TecRelHiHi, oaLaser6TemperatureHiHi=oaLaser6TemperatureHiHi, oaStatesLaserCurrentLow=oaStatesLaserCurrentLow, oaReturnLossHi=oaReturnLossHi, oaLaser3TecRelLo=oaLaser3TecRelLo, oaInternalVoltage2Lo=oaInternalVoltage2Lo, oaDisplayEntry=oaDisplayEntry, oaLaser1TemperatureHi=oaLaser1TemperatureHi, oaLaser3VoltageLoLo=oaLaser3VoltageLoLo, oaControlSbsEvaluationStart=oaControlSbsEvaluationStart, oaStatesTecCurrentLow=oaStatesTecCurrentLow, oaStatesLaserVoltageLow=oaStatesLaserVoltageLow, oaLaser5TecRelLo=oaLaser5TecRelLo, oaLaser6TemperatureLoLo=oaLaser6TemperatureLoLo, oaLaser4TemperatureLoLo=oaLaser4TemperatureLoLo, oaInputVoltageValue=oaInputVoltageValue, oaLaser5CurrentRelHiHi=oaLaser5CurrentRelHiHi, oaDisplayLaser5FeaturesSupported=oaDisplayLaser5FeaturesSupported, oaLaser2VoltageValue=oaLaser2VoltageValue, oaStatesInitializing=oaStatesInitializing, oaStatesCommLoss=oaStatesCommLoss, oaStates=oaStates, oaLaser4CurrentRelHiHi=oaLaser4CurrentRelHiHi, oaInternalVoltage2HiHi=oaInternalVoltage2HiHi, oaLaser6TecRelLo=oaLaser6TecRelLo, oaInputPowerLoLo=oaInputPowerLoLo, oaStatesBootloader=oaStatesBootloader, oaInputPowerLo=oaInputPowerLo, oaDisplayLaser5PumpPowerRel=oaDisplayLaser5PumpPowerRel, oaStatesRamanBackReflectionRatio=oaStatesRamanBackReflectionRatio, oaInternalVoltage3Hi=oaInternalVoltage3Hi, oaInternalVoltage2Hi=oaInternalVoltage2Hi, oaLaser2CurrentRelValue=oaLaser2CurrentRelValue, oaLaser2TecRelValue=oaLaser2TecRelValue, oaStatesEntry=oaStatesEntry, oaDisplayAmplifierIsRamanType=oaDisplayAmplifierIsRamanType, oaLaser6VoltageHiHi=oaLaser6VoltageHiHi, oaInternalVoltage3Value=oaInternalVoltage3Value, oaInputPowerHi=oaInputPowerHi, oaInternalVoltage1HiHi=oaInternalVoltage1HiHi, oaStatesInternalVoltageLow=oaStatesInternalVoltageLow, oaInternalVoltage1Value=oaInternalVoltage1Value, oaCommonTable=oaCommonTable, oaLaser3TemperatureValue=oaLaser3TemperatureValue, oaDisplayInternalVoltage2Nominal=oaDisplayInternalVoltage2Nominal, oaLaser1TemperatureLo=oaLaser1TemperatureLo, oaLaser4TecRelHi=oaLaser4TecRelHi, oaDisplayLaser6FeaturesSupported=oaDisplayLaser6FeaturesSupported, oaLaser3TemperatureHiHi=oaLaser3TemperatureHiHi, oaLaser5CurrentRelLo=oaLaser5CurrentRelLo, oaStatesTemperatureHigh=oaStatesTemperatureHigh, oaLaser6TecRelHi=oaLaser6TecRelHi, oaStatesInputVoltageHigh=oaStatesInputVoltageHigh, oaInternalVoltage1LoLo=oaInternalVoltage1LoLo, oaDisplay=oaDisplay, oaLaser1VoltageHiHi=oaLaser1VoltageHiHi, oaTemperatureHiHi=oaTemperatureHiHi, oaLaser4TecRelValue=oaLaser4TecRelValue, oaLaser2TemperatureHiHi=oaLaser2TemperatureHiHi, SbsEvaluationState=SbsEvaluationState, oaDisplayLaser4FeaturesSupported=oaDisplayLaser4FeaturesSupported, oaStatesRedundancySwitch=oaStatesRedundancySwitch, oaConfigRegulationMode=oaConfigRegulationMode, oaConfigOutputPwrOrGainAdjust=oaConfigOutputPwrOrGainAdjust, oaDisplayInternalVoltage3Nominal=oaDisplayInternalVoltage3Nominal, oaLaser6VoltageHi=oaLaser6VoltageHi, oaLaser4TecRelLo=oaLaser4TecRelLo, oaLaser6CurrentRelLo=oaLaser6CurrentRelLo, SbsEvaluationMode=SbsEvaluationMode, oaLaser2CurrentRelHi=oaLaser2CurrentRelHi, oaLaser5TecRelLoLo=oaLaser5TecRelLoLo, oaStatesTable=oaStatesTable, oaStatesLaserVoltageHigh=oaStatesLaserVoltageHigh, oaConfigSbsEvaluationMode=oaConfigSbsEvaluationMode, oaStatesLaserShutdown=oaStatesLaserShutdown, oaLaser1CurrentRelLo=oaLaser1CurrentRelLo, oaLaser5VoltageHi=oaLaser5VoltageHi, oaLaser1TecRelLoLo=oaLaser1TecRelLoLo, oaReturnLossLoLo=oaReturnLossLoLo, oaDisplayNumberOfLasers=oaDisplayNumberOfLasers, oaControl=oaControl, oaLaser2CurrentRelLoLo=oaLaser2CurrentRelLoLo, oaControlEntry=oaControlEntry, oaReturnLossValue=oaReturnLossValue, oaLaser2CurrentRelHiHi=oaLaser2CurrentRelHiHi, oaDisplaySbsLastEvaluationState=oaDisplaySbsLastEvaluationState, oaLaser2VoltageLo=oaLaser2VoltageLo, oaLaser2TecRelLoLo=oaLaser2TecRelLoLo, oaStatesInputVoltageLow=oaStatesInputVoltageLow, oaDisplayReturnLossSupported=oaDisplayReturnLossSupported, oaDisplayOutputPwrOrGainAdjusted=oaDisplayOutputPwrOrGainAdjusted, oaInputVoltageHiHi=oaInputVoltageHiHi, oaLaser6TecRelValue=oaLaser6TecRelValue, oaCommonDescr=oaCommonDescr, oaOutputPwrOrGainLoLo=oaOutputPwrOrGainLoLo, oaLaser4VoltageLo=oaLaser4VoltageLo, oaLaser4TemperatureHiHi=oaLaser4TemperatureHiHi, oaLaser6CurrentRelHiHi=oaLaser6CurrentRelHiHi, oaLaser6TemperatureHi=oaLaser6TemperatureHi, oaOutputPwrOrGainLo=oaOutputPwrOrGainLo, oaLaser5VoltageValue=oaLaser5VoltageValue, oaLaser3VoltageLo=oaLaser3VoltageLo, oaLaser4TecRelLoLo=oaLaser4TecRelLoLo, oaInputPowerHiHi=oaInputPowerHiHi, oaLaser2VoltageHi=oaLaser2VoltageHi, oaLaser3TemperatureLo=oaLaser3TemperatureLo, oaDisplaySbsLastEvaluationTime=oaDisplaySbsLastEvaluationTime, oaLaser6TecRelLoLo=oaLaser6TecRelLoLo, oaLaser3CurrentRelLo=oaLaser3CurrentRelLo, oaInternalVoltage3LoLo=oaInternalVoltage3LoLo, oaLaser4VoltageHiHi=oaLaser4VoltageHiHi, oaLaser4TemperatureLo=oaLaser4TemperatureLo, RegulationMode=RegulationMode, oaLaser1TemperatureLoLo=oaLaser1TemperatureLoLo, oaLaser4TemperatureValue=oaLaser4TemperatureValue, oaOutputPwrOrGainHi=oaOutputPwrOrGainHi)
mibBuilder.exportSymbols("BKTEL-HFC862-OA-V01-MIB", oaLaser3TemperatureLoLo=oaLaser3TemperatureLoLo, oaStatesInputPwrHigh=oaStatesInputPwrHigh, oaStatesLaserCurrentHigh=oaStatesLaserCurrentHigh, oaDisplayLaser4VoltageNominal=oaDisplayLaser4VoltageNominal, oaLaser2TemperatureLoLo=oaLaser2TemperatureLoLo, oaConfigurationTable=oaConfigurationTable, oaLaser2TecRelHiHi=oaLaser2TecRelHiHi, oaDisplayOutputPwrOrGainNominal=oaDisplayOutputPwrOrGainNominal, oaLaser6VoltageLo=oaLaser6VoltageLo, oaStatesSystem=oaStatesSystem, oaDisplayLaser5VoltageNominal=oaDisplayLaser5VoltageNominal, oaLaser5TemperatureLoLo=oaLaser5TemperatureLoLo, oaLaser5TecRelHiHi=oaLaser5TecRelHiHi)
