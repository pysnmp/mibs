#
# PySNMP MIB module AP-DIAMETER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/oracle/AP-DIAMETER-MIB
# Produced by pysmi-1.1.12 at Wed May 29 07:21:05 2024
# On host fv-az1114-382 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
acmepacketMgmt, = mibBuilder.importSymbols("ACMEPACKET-SMI", "acmepacketMgmt")
ApTransportType, ApDiamResultCode = mibBuilder.importSymbols("ACMEPACKET-TC", "ApTransportType", "ApDiamResultCode")
SysMgmtPercentage, = mibBuilder.importSymbols("APSYSMGMT-MIB", "SysMgmtPercentage")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetPortNumber, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddressType", "InetAddress")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, Gauge32, MibIdentifier, NotificationType, IpAddress, iso, Bits, Counter64, Integer32, ObjectIdentity, Unsigned32, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "MibIdentifier", "NotificationType", "IpAddress", "iso", "Bits", "Counter64", "Integer32", "ObjectIdentity", "Unsigned32", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
apDiameterModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 9148, 3, 13))
apDiameterModule.setRevisions(('2014-06-26 00:00', '2017-11-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: apDiameterModule.setRevisionsDescriptions(('Updated Organization and Contact info.', 'Added new MIB Definitions for Diameter Rx External Policy Server.',))
if mibBuilder.loadTexts: apDiameterModule.setLastUpdated('201711240000Z')
if mibBuilder.loadTexts: apDiameterModule.setOrganization('Oracle Communications')
if mibBuilder.loadTexts: apDiameterModule.setContactInfo('           \tCustomer Service\n\t\t \tPostal:\t\tOracle Communications\n\t\t\t\t\t100 Crosby Drive \n\t\t\t\t\tBedford, MA 01730\n\t\t\t\t\tUS\n\t\t    \tTel:\t\t1-800-633-0738\n\t\t\tUrl:\t\twww.oracle.com\n\t\t \tE-mail:\t\tsupport@oracle.com')
if mibBuilder.loadTexts: apDiameterModule.setDescription('The Accounting MIB for Oracle Communications Acme Packet SBCs')
apDiamMIBModule = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1))
apDiamMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1))
apDiamNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 2))
apDiamNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 2, 1))
apDiamNotifPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 2, 2))
apDiamNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 2, 2, 0))
apDiamiMIBTabularObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2))
apDiamConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 3))
apDiamObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 3, 1))
apDiamNotificationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 3, 2))
apDiamClfErrorStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 1), )
if mibBuilder.loadTexts: apDiamClfErrorStatsTable.setStatus('current')
if mibBuilder.loadTexts: apDiamClfErrorStatsTable.setDescription('Error Stats per external policy server.')
apDiamClfErrorStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 1, 1), ).setIndexNames((0, "AP-DIAMETER-MIB", "apDiamClfExtPolSvrIndex"))
if mibBuilder.loadTexts: apDiamClfErrorStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apDiamClfErrorStatsEntry.setDescription('A table entry designed to hold error status data')
apDiamClfExtPolSvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apDiamClfExtPolSvrIndex.setStatus('current')
if mibBuilder.loadTexts: apDiamClfExtPolSvrIndex.setDescription('An integer for the sole purpose of indexing the external policy servers.')
apDiamClfExtPolSvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamClfExtPolSvrName.setStatus('current')
if mibBuilder.loadTexts: apDiamClfExtPolSvrName.setDescription('Ext policy server name')
apDiamClfErrorsRecent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamClfErrorsRecent.setStatus('current')
if mibBuilder.loadTexts: apDiamClfErrorsRecent.setDescription('Number of diameter errors in recent period received on e2 interface with the CLF.')
apDiamClfErrorsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamClfErrorsTotal.setStatus('current')
if mibBuilder.loadTexts: apDiamClfErrorsTotal.setDescription('Total number of diameter errors in life time received on e2 interface with the CLF.')
apDiamClfErrorsPerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamClfErrorsPerMax.setStatus('current')
if mibBuilder.loadTexts: apDiamClfErrorsPerMax.setDescription('PerMax count of diameter errors in life time received on e2 interface with the CLF.')
apDiamInterfaceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 2), )
if mibBuilder.loadTexts: apDiamInterfaceStatsTable.setStatus('current')
if mibBuilder.loadTexts: apDiamInterfaceStatsTable.setDescription('The table of DIAMETER statistics per interface.')
apDiamInterfaceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 2, 1), ).setIndexNames((0, "AP-DIAMETER-MIB", "apDiamInterfaceType"), (0, "AP-DIAMETER-MIB", "apDiamInterfaceAddress"))
if mibBuilder.loadTexts: apDiamInterfaceStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apDiamInterfaceStatsEntry.setDescription('A table entry designed to hold interface stats data')
apDiamInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamInterfaceType.setStatus('current')
if mibBuilder.loadTexts: apDiamInterfaceType.setDescription('IPAddress type of the DIAMETER server')
apDiamInterfaceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamInterfaceAddress.setStatus('current')
if mibBuilder.loadTexts: apDiamInterfaceAddress.setDescription('IPAddress of the DIAMETER server')
apDiamMessagesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamMessagesSent.setStatus('current')
if mibBuilder.loadTexts: apDiamMessagesSent.setDescription('Number of messages sent to this DIAMETER server')
apDiamMessagesSentFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamMessagesSentFailed.setStatus('current')
if mibBuilder.loadTexts: apDiamMessagesSentFailed.setDescription('Number of messages sent failed to this DIAMETER server')
apDiamMessagesReSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamMessagesReSent.setStatus('current')
if mibBuilder.loadTexts: apDiamMessagesReSent.setDescription('Number of messages resent to this DIAMETER server')
apDiamMessagesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: apDiamMessagesReceived.setDescription('Number of messages received from this DIAMETER server')
apDiamMessagesProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamMessagesProcessed.setStatus('current')
if mibBuilder.loadTexts: apDiamMessagesProcessed.setDescription('Number of messages processed from this DIAMETER server')
apDiamConnectionTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamConnectionTimeouts.setStatus('current')
if mibBuilder.loadTexts: apDiamConnectionTimeouts.setDescription('Number of connection timeouts on this DIAMETER server')
apDiamBadStateDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamBadStateDrops.setStatus('current')
if mibBuilder.loadTexts: apDiamBadStateDrops.setDescription('Number of bad state drops from this DIAMETER server')
apDiamBadTypeDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamBadTypeDrops.setStatus('current')
if mibBuilder.loadTexts: apDiamBadTypeDrops.setDescription('Number of bad type drops from this DIAMETER server')
apDiamBadIDDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamBadIDDrops.setStatus('current')
if mibBuilder.loadTexts: apDiamBadIDDrops.setDescription('Number of bad id drops from this DIAMETER server')
apDiamAuthFailDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamAuthFailDrops.setStatus('current')
if mibBuilder.loadTexts: apDiamAuthFailDrops.setDescription('Number of authentication failure drops on this DIAMETER server')
apDiamInvalidPeerMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamInvalidPeerMessages.setStatus('current')
if mibBuilder.loadTexts: apDiamInvalidPeerMessages.setDescription('Number of invalid peer messages received from this DIAMETER server')
apDiamRxPolicyServerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3), )
if mibBuilder.loadTexts: apDiamRxPolicyServerStatsTable.setStatus('current')
if mibBuilder.loadTexts: apDiamRxPolicyServerStatsTable.setDescription('Stats per external Rx policy server')
apDiamRxPolicyServerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1), ).setIndexNames((0, "AP-DIAMETER-MIB", "apDiamRxExtPolSvrIndex"))
if mibBuilder.loadTexts: apDiamRxPolicyServerStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apDiamRxPolicyServerStatsEntry.setDescription('A table entry designed to hold Rx policy server stats')
apDiamRxExtPolSvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apDiamRxExtPolSvrIndex.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrIndex.setDescription('An integer for the sole purpose of indexing \n             a Rx policy server and persisting through reboots')
apDiamRxExtPolSvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrName.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrName.setDescription('Name of the Rx policy server')
apDiamRxExtPolSvrSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrSockets.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrSockets.setDescription('Total number of sockets created for \n             Rx policy server')
apDiamRxExtPolSvrConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrConnections.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrConnections.setDescription('Total number of transport connections \n             created for Rx policy server')
apDiamRxExtPolSvrClientTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrClientTrans.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrClientTrans.setDescription('Total number of client transactions for \n             Rx policy server')
apDiamRxExtPolSvrCTReserveReqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrCTReserveReqSent.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrCTReserveReqSent.setDescription('Total number of client transactions Reserve \n             requests sent for Rx policy server')
apDiamRxExtPolSvrCTUpdateReqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrCTUpdateReqSent.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrCTUpdateReqSent.setDescription('Total number of client transactions Update requests \n             sent for Rx policy server')
apDiamRxExtPolSvrCTRemoveReqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrCTRemoveReqSent.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrCTRemoveReqSent.setDescription('Total number of client transactions Remove \n             requests sent for Rx policy server')
apDiamRxExtPolSvrCTReTransReq = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrCTReTransReq.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrCTReTransReq.setDescription('Total number of re-transmitted requests sent for \n             client transactions for Rx policy server')
apDiamRxExtPolSvrCTInstallRespRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrCTInstallRespRecvd.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrCTInstallRespRecvd.setDescription('Total number of client transactions Install \n             responses received for Rx policy server')
apDiamRxExtPolSvrCTRejectRespRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrCTRejectRespRecvd.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrCTRejectRespRecvd.setDescription('Total number of client transactions Reject \n             responses received for Rx policy server')
apDiamRxExtPolSvrCTRemoveRespRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrCTRemoveRespRecvd.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrCTRemoveRespRecvd.setDescription('Total number of client transactions Remove \n             responses received for Rx policy server')
apDiamRxExtPolSvrCTErrorsRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrCTErrorsRecvd.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrCTErrorsRecvd.setDescription('Total number of client transactions \n             Errors received for Rx policy server')
apDiamRxExtPolSvrCTTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrCTTimeouts.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrCTTimeouts.setDescription('Total number of client transaction timeouts \n             for Rx policy server')
apDiamRxExtPolSvrCTErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrCTErrors.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrCTErrors.setDescription('Total number of client transaction errors \n             for Rx policy server')
apDiamRxExtPolSvrServerTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrServerTransactions.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrServerTransactions.setDescription('Total number of server transactions for \n             Rx policy server')
apDiamRxExtPolSvrSTReqRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrSTReqRecvd.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrSTReqRecvd.setDescription('Total number of requests received on server \n             transaction for Rx policy server')
apDiamRxExtPolSvrSTDupReqRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrSTDupReqRecvd.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrSTDupReqRecvd.setDescription('Total number of duplicate requests received \n             on server transactions for Rx policy server')
apDiamRxExtPolSvrSTSuccessRespSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrSTSuccessRespSent.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrSTSuccessRespSent.setDescription('Total number of success responses sent by \n             server transactions for Rx policy server')
apDiamRxExtPolSvrSTErrorRespSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrSTErrorRespSent.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrSTErrorRespSent.setDescription('Total number of error responses sent by server \n             transactions for Rx policy server')
apDiamRxExtPolSvrSTReqDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrSTReqDropped.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrSTReqDropped.setDescription('Total number of requests dropped  by server \n             transactions for Rx policy server')
apDiamRxExtPolSvrCERSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrCERSent.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrCERSent.setDescription('Total number of CER messages sent by this \n             Rx policy server')
apDiamRxExtPolSvrCEASuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrCEASuccess.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrCEASuccess.setDescription('Total number of CEA success messages for \n             this Rx policy server')
apDiamRxExtPolSvrCEAErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrCEAErrors.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrCEAErrors.setDescription('Total number of CEA error messages \n             for this Rx policy server')
apDiamRxExtPolSvrAARSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrAARSent.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrAARSent.setDescription('Total number of AAR messages sent by \n             this Rx policy server')
apDiamRxExtPolSvrAAASuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrAAASuccess.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrAAASuccess.setDescription('Total number of AAA success messages \n             for this Rx policy server')
apDiamRxExtPolSvrAAAErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrAAAErrors.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrAAAErrors.setDescription('Total number of AAA error messages for \n             this Rx policy server')
apDiamRxExtPolSvrSTRSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrSTRSent.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrSTRSent.setDescription('Total number of STR messages sent by \n             this Rx policy server')
apDiamRxExtPolSvrSTASuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrSTASuccess.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrSTASuccess.setDescription('Total number of STA success messages for \n             this Rx policy server')
apDiamRxExtPolSvrSTAErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrSTAErrors.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrSTAErrors.setDescription('Total number of STA error messages for \n             this Rx policy server')
apDiamRxExtPolSvrRARRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrRARRecvd.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrRARRecvd.setDescription('Total number of RAR messages received by \n             this Rx policy server')
apDiamRxExtPolSvrRAARecvdSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrRAARecvdSuccess.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrRAARecvdSuccess.setDescription('Total number of RAA success messages \n             for this Rx policy server')
apDiamRxExtPolSvrRAARecvdErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrRAARecvdErrors.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrRAARecvdErrors.setDescription('Total number of RAA error messages for \n             this Rx policy server')
apDiamRxExtPolSvrDWRSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrDWRSent.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrDWRSent.setDescription('Total number of DWR messages sent by \n             this Rx policy server')
apDiamRxExtPolSvrDWASuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrDWASuccess.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrDWASuccess.setDescription('Total number of DWA success messages for \n             this Rx policy server')
apDiamRxExtPolSvrDWAErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrDWAErrors.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrDWAErrors.setDescription('Total number of DWA error messages for \n             this Rx policy server')
apDiamRxExtPolSvrDWRRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrDWRRecvd.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrDWRRecvd.setDescription('Total number of DWR messages received by \n             this Rx policy server')
apDiamRxExtPolSvrDWARecvcSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrDWARecvcSuccess.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrDWARecvcSuccess.setDescription('Total number of DWA success messages sent \n             by this Rx policy server')
apDiamRxExtPolSvrDWARecvdErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrDWARecvdErrors.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrDWARecvdErrors.setDescription('Total number of DWA error messages sent by \n             this Rx policy server')
apDiamRxExtPolSvrASRRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrASRRecvd.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrASRRecvd.setDescription('Total number of ASR messages sent by \n             this Rx policy server')
apDiamRxExtPolSvrASARecvdSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrASARecvdSuccess.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrASARecvdSuccess.setDescription('Total number of ASA success messages for \n             this Rx policy server')
apDiamRxExtPolSvrASARecvdErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 1, 2, 3, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiamRxExtPolSvrASARecvdErrors.setStatus('current')
if mibBuilder.loadTexts: apDiamRxExtPolSvrASARecvdErrors.setDescription('Total number of ASA error messages for \n             this Rx policy server')
apDiamAcctSrvrHostName = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apDiamAcctSrvrHostName.setStatus('current')
if mibBuilder.loadTexts: apDiamAcctSrvrHostName.setDescription('The Diameter Accounting Server host name.')
apDiamAcctSrvrIPPort = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apDiamAcctSrvrIPPort.setStatus('current')
if mibBuilder.loadTexts: apDiamAcctSrvrIPPort.setDescription('The Diameter Accounting Server IP address and port number:\n                 XX.XX.XX.XX:P')
apDiamAcctSrvrOriginRealm = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apDiamAcctSrvrOriginRealm.setStatus('current')
if mibBuilder.loadTexts: apDiamAcctSrvrOriginRealm.setDescription('The Diameter Accounting Server Origin Realm.')
apDiamAcctSrvrOriginHost = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apDiamAcctSrvrOriginHost.setStatus('current')
if mibBuilder.loadTexts: apDiamAcctSrvrOriginHost.setDescription('The Diameter Accounting Server Origin Host.')
apDiamAcctSrvrTransportType = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 2, 1, 5), ApTransportType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apDiamAcctSrvrTransportType.setStatus('current')
if mibBuilder.loadTexts: apDiamAcctSrvrTransportType.setDescription('The Diameter Accounting Server Transport Type.')
apAcctMsgQueueAvailCurrent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 2, 1, 6), SysMgmtPercentage()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apAcctMsgQueueAvailCurrent.setStatus('current')
if mibBuilder.loadTexts: apAcctMsgQueueAvailCurrent.setDescription('The current measured percentage value of\n              space available.')
apAcctMsgQueueMinorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 2, 1, 7), SysMgmtPercentage()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apAcctMsgQueueMinorThreshold.setStatus('current')
if mibBuilder.loadTexts: apAcctMsgQueueMinorThreshold.setDescription('The current configured minor threshold value.')
apAcctMsgQueueMajorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 2, 1, 8), SysMgmtPercentage()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apAcctMsgQueueMajorThreshold.setStatus('current')
if mibBuilder.loadTexts: apAcctMsgQueueMajorThreshold.setDescription('The current configured major threshold value.')
apAcctMsgQueueCriticalThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 2, 1, 9), SysMgmtPercentage()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apAcctMsgQueueCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: apAcctMsgQueueCriticalThreshold.setDescription('The current configured critical threshold value')
apDiameterResultCode = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 2, 1, 10), ApDiamResultCode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apDiameterResultCode.setStatus('current')
if mibBuilder.loadTexts: apDiameterResultCode.setDescription('The Result-Code AVP (268) value \n               RFC 3588, 7.1. Result-Code AVP')
apDiameterAcctSrvrUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 2, 2, 0, 1)).setObjects(("AP-DIAMETER-MIB", "apDiamAcctSrvrHostName"), ("AP-DIAMETER-MIB", "apDiamAcctSrvrIPPort"), ("AP-DIAMETER-MIB", "apDiamAcctSrvrOriginRealm"), ("AP-DIAMETER-MIB", "apDiamAcctSrvrOriginHost"), ("AP-DIAMETER-MIB", "apDiamAcctSrvrTransportType"))
if mibBuilder.loadTexts: apDiameterAcctSrvrUpTrap.setStatus('current')
if mibBuilder.loadTexts: apDiameterAcctSrvrUpTrap.setDescription(' The trap will be generated when the Diameter Accounting Server\n              goes up')
apDiameterAcctSrvrDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 2, 2, 0, 2)).setObjects(("AP-DIAMETER-MIB", "apDiamAcctSrvrHostName"), ("AP-DIAMETER-MIB", "apDiamAcctSrvrIPPort"), ("AP-DIAMETER-MIB", "apDiamAcctSrvrOriginRealm"), ("AP-DIAMETER-MIB", "apDiamAcctSrvrOriginHost"), ("AP-DIAMETER-MIB", "apDiamAcctSrvrTransportType"))
if mibBuilder.loadTexts: apDiameterAcctSrvrDownTrap.setStatus('current')
if mibBuilder.loadTexts: apDiameterAcctSrvrDownTrap.setDescription(' The trap will be generated when the Diameter Accounting Server\n              goes down')
apAcctMsgQueueFullTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 2, 2, 0, 3)).setObjects(("AP-DIAMETER-MIB", "apAcctMsgQueueAvailCurrent"), ("AP-DIAMETER-MIB", "apAcctMsgQueueMinorThreshold"), ("AP-DIAMETER-MIB", "apAcctMsgQueueMajorThreshold"), ("AP-DIAMETER-MIB", "apAcctMsgQueueCriticalThreshold"))
if mibBuilder.loadTexts: apAcctMsgQueueFullTrap.setStatus('current')
if mibBuilder.loadTexts: apAcctMsgQueueFullTrap.setDescription('The trap will be generated when the accounting message \n             queue is full and all accounting servers are down')
apAcctMsgQueueFullClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 2, 2, 0, 4)).setObjects(("AP-DIAMETER-MIB", "apAcctMsgQueueAvailCurrent"), ("AP-DIAMETER-MIB", "apAcctMsgQueueMinorThreshold"), ("AP-DIAMETER-MIB", "apAcctMsgQueueMajorThreshold"), ("AP-DIAMETER-MIB", "apAcctMsgQueueCriticalThreshold"))
if mibBuilder.loadTexts: apAcctMsgQueueFullClearTrap.setStatus('current')
if mibBuilder.loadTexts: apAcctMsgQueueFullClearTrap.setDescription('The trap will be generated when the apAcctMsgQueueFullTrap condition clears')
apDiameterSrvrErrorResultTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 2, 2, 0, 5)).setObjects(("AP-DIAMETER-MIB", "apDiamAcctSrvrHostName"), ("AP-DIAMETER-MIB", "apDiamAcctSrvrIPPort"), ("AP-DIAMETER-MIB", "apDiamAcctSrvrOriginRealm"), ("AP-DIAMETER-MIB", "apDiamAcctSrvrOriginHost"), ("AP-DIAMETER-MIB", "apDiamAcctSrvrTransportType"), ("AP-DIAMETER-MIB", "apDiameterResultCode"))
if mibBuilder.loadTexts: apDiameterSrvrErrorResultTrap.setStatus('current')
if mibBuilder.loadTexts: apDiameterSrvrErrorResultTrap.setDescription(' The trap can be generated when the Diameter Server\n              returns 3xxx (Protocol Errors), 4xxx (Transient Failures), or\n              5xxx (Permanent Failure) Result-Code AVP (268)')
apDiameterSrvrSuccessResultTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 2, 2, 0, 6)).setObjects(("AP-DIAMETER-MIB", "apDiamAcctSrvrHostName"), ("AP-DIAMETER-MIB", "apDiamAcctSrvrIPPort"), ("AP-DIAMETER-MIB", "apDiamAcctSrvrOriginRealm"), ("AP-DIAMETER-MIB", "apDiamAcctSrvrOriginHost"), ("AP-DIAMETER-MIB", "apDiamAcctSrvrTransportType"), ("AP-DIAMETER-MIB", "apDiameterResultCode"))
if mibBuilder.loadTexts: apDiameterSrvrSuccessResultTrap.setStatus('current')
if mibBuilder.loadTexts: apDiameterSrvrSuccessResultTrap.setDescription(' The trap can be generated when the Diameter Server\n              returns a 2xxx (Success) Result-Code AVP (268) \n              after an error result')
apDiamACCTObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 3, 2, 1)).setObjects(("AP-DIAMETER-MIB", "apDiamAcctSrvrHostName"), ("AP-DIAMETER-MIB", "apDiamAcctSrvrIPPort"), ("AP-DIAMETER-MIB", "apDiamAcctSrvrOriginRealm"), ("AP-DIAMETER-MIB", "apDiamAcctSrvrOriginHost"), ("AP-DIAMETER-MIB", "apDiamAcctSrvrTransportType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apDiamACCTObjectsGroup = apDiamACCTObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apDiamACCTObjectsGroup.setDescription('A collection of mib objects accessible only to traps.')
apDiamACCTNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 3, 2, 2)).setObjects(("AP-DIAMETER-MIB", "apDiameterAcctSrvrUpTrap"), ("AP-DIAMETER-MIB", "apDiameterAcctSrvrDownTrap"), ("AP-DIAMETER-MIB", "apAcctMsgQueueFullTrap"), ("AP-DIAMETER-MIB", "apAcctMsgQueueFullClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apDiamACCTNotificationsGroup = apDiamACCTNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apDiamACCTNotificationsGroup.setDescription('A collection of traps defined for ACCT.')
apDiamACCTResultObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 3, 2, 3)).setObjects(("AP-DIAMETER-MIB", "apDiameterResultCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apDiamACCTResultObjectsGroup = apDiamACCTResultObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apDiamACCTResultObjectsGroup.setDescription('A collection of mib objects accessible only to traps.')
apDiamACCTResultNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 3, 2, 4)).setObjects(("AP-DIAMETER-MIB", "apDiameterSrvrErrorResultTrap"), ("AP-DIAMETER-MIB", "apDiameterSrvrSuccessResultTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apDiamACCTResultNotificationsGroup = apDiamACCTResultNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apDiamACCTResultNotificationsGroup.setDescription('A collection of traps defined for ACCT Result Code.')
apDiamClfErrorStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 3, 1, 1)).setObjects(("AP-DIAMETER-MIB", "apDiamClfExtPolSvrName"), ("AP-DIAMETER-MIB", "apDiamClfErrorsRecent"), ("AP-DIAMETER-MIB", "apDiamClfErrorsTotal"), ("AP-DIAMETER-MIB", "apDiamClfErrorsPerMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apDiamClfErrorStatsGroup = apDiamClfErrorStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apDiamClfErrorStatsGroup.setDescription('A collection of statistics for CLF errors perr ext pol svr.')
apDiamInterfaceStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 3, 1, 2)).setObjects(("AP-DIAMETER-MIB", "apDiamMessagesSent"), ("AP-DIAMETER-MIB", "apDiamMessagesSentFailed"), ("AP-DIAMETER-MIB", "apDiamMessagesReSent"), ("AP-DIAMETER-MIB", "apDiamMessagesReceived"), ("AP-DIAMETER-MIB", "apDiamMessagesProcessed"), ("AP-DIAMETER-MIB", "apDiamConnectionTimeouts"), ("AP-DIAMETER-MIB", "apDiamBadStateDrops"), ("AP-DIAMETER-MIB", "apDiamBadTypeDrops"), ("AP-DIAMETER-MIB", "apDiamBadIDDrops"), ("AP-DIAMETER-MIB", "apDiamAuthFailDrops"), ("AP-DIAMETER-MIB", "apDiamInvalidPeerMessages"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apDiamInterfaceStatsGroup = apDiamInterfaceStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apDiamInterfaceStatsGroup.setDescription('A collection of statistics for DIAMETER server.')
apDiamRxPolicyServerStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 13, 1, 3, 1, 3)).setObjects(("AP-DIAMETER-MIB", "apDiamRxExtPolSvrName"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrSockets"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrConnections"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrClientTrans"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrCTReserveReqSent"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrCTUpdateReqSent"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrCTRemoveReqSent"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrCTReTransReq"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrCTInstallRespRecvd"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrCTRejectRespRecvd"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrCTRemoveRespRecvd"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrCTErrorsRecvd"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrCTTimeouts"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrCTErrors"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrServerTransactions"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrSTReqRecvd"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrSTDupReqRecvd"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrSTSuccessRespSent"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrSTErrorRespSent"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrSTReqDropped"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrCERSent"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrCEASuccess"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrCEAErrors"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrAARSent"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrAAASuccess"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrAAAErrors"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrSTRSent"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrSTASuccess"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrSTAErrors"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrRARRecvd"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrRAARecvdSuccess"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrRAARecvdErrors"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrDWRSent"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrDWASuccess"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrDWAErrors"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrDWRRecvd"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrDWARecvcSuccess"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrDWARecvdErrors"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrASRRecvd"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrASARecvdSuccess"), ("AP-DIAMETER-MIB", "apDiamRxExtPolSvrASARecvdErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apDiamRxPolicyServerStatsGroup = apDiamRxPolicyServerStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apDiamRxPolicyServerStatsGroup.setDescription('A collection of objects providing Rx policy server stats')
mibBuilder.exportSymbols("AP-DIAMETER-MIB", apDiameterAcctSrvrDownTrap=apDiameterAcctSrvrDownTrap, apDiamInterfaceStatsGroup=apDiamInterfaceStatsGroup, apDiamRxExtPolSvrCTReTransReq=apDiamRxExtPolSvrCTReTransReq, apDiamMessagesReceived=apDiamMessagesReceived, apDiamACCTObjectsGroup=apDiamACCTObjectsGroup, apDiamRxExtPolSvrCEAErrors=apDiamRxExtPolSvrCEAErrors, apDiamRxExtPolSvrConnections=apDiamRxExtPolSvrConnections, apDiamConformance=apDiamConformance, apDiamClfErrorsRecent=apDiamClfErrorsRecent, apDiamRxExtPolSvrCERSent=apDiamRxExtPolSvrCERSent, apDiamObjectGroups=apDiamObjectGroups, apDiamAcctSrvrHostName=apDiamAcctSrvrHostName, apDiamRxExtPolSvrASRRecvd=apDiamRxExtPolSvrASRRecvd, apDiamAcctSrvrIPPort=apDiamAcctSrvrIPPort, apDiamRxPolicyServerStatsGroup=apDiamRxPolicyServerStatsGroup, apDiamRxExtPolSvrSTErrorRespSent=apDiamRxExtPolSvrSTErrorRespSent, apDiamRxExtPolSvrDWARecvcSuccess=apDiamRxExtPolSvrDWARecvcSuccess, apDiamRxExtPolSvrClientTrans=apDiamRxExtPolSvrClientTrans, apDiamClfExtPolSvrIndex=apDiamClfExtPolSvrIndex, apDiamAuthFailDrops=apDiamAuthFailDrops, apDiamRxExtPolSvrSTASuccess=apDiamRxExtPolSvrSTASuccess, apDiamRxExtPolSvrCTTimeouts=apDiamRxExtPolSvrCTTimeouts, apDiamRxExtPolSvrSTAErrors=apDiamRxExtPolSvrSTAErrors, apDiamMIBObjects=apDiamMIBObjects, apDiamClfErrorStatsTable=apDiamClfErrorStatsTable, PYSNMP_MODULE_ID=apDiameterModule, apDiameterModule=apDiameterModule, apDiamClfErrorStatsGroup=apDiamClfErrorStatsGroup, apDiameterSrvrSuccessResultTrap=apDiameterSrvrSuccessResultTrap, apDiamiMIBTabularObjects=apDiamiMIBTabularObjects, apDiamRxExtPolSvrCEASuccess=apDiamRxExtPolSvrCEASuccess, apAcctMsgQueueFullClearTrap=apAcctMsgQueueFullClearTrap, apDiamRxExtPolSvrCTUpdateReqSent=apDiamRxExtPolSvrCTUpdateReqSent, apDiamRxExtPolSvrAAAErrors=apDiamRxExtPolSvrAAAErrors, apDiamRxExtPolSvrCTRemoveRespRecvd=apDiamRxExtPolSvrCTRemoveRespRecvd, apDiamAcctSrvrTransportType=apDiamAcctSrvrTransportType, apDiamRxExtPolSvrCTErrors=apDiamRxExtPolSvrCTErrors, apDiamRxPolicyServerStatsTable=apDiamRxPolicyServerStatsTable, apDiamInterfaceStatsTable=apDiamInterfaceStatsTable, apDiamRxExtPolSvrSTRSent=apDiamRxExtPolSvrSTRSent, apDiamRxExtPolSvrASARecvdSuccess=apDiamRxExtPolSvrASARecvdSuccess, apDiamRxExtPolSvrIndex=apDiamRxExtPolSvrIndex, apDiamClfErrorStatsEntry=apDiamClfErrorStatsEntry, apDiamRxPolicyServerStatsEntry=apDiamRxPolicyServerStatsEntry, apDiameterAcctSrvrUpTrap=apDiameterAcctSrvrUpTrap, apDiamNotificationGroups=apDiamNotificationGroups, apDiamRxExtPolSvrServerTransactions=apDiamRxExtPolSvrServerTransactions, apDiamRxExtPolSvrAARSent=apDiamRxExtPolSvrAARSent, apDiamRxExtPolSvrDWAErrors=apDiamRxExtPolSvrDWAErrors, apDiamRxExtPolSvrSTReqDropped=apDiamRxExtPolSvrSTReqDropped, apDiamAcctSrvrOriginHost=apDiamAcctSrvrOriginHost, apDiamInterfaceAddress=apDiamInterfaceAddress, apDiamRxExtPolSvrRAARecvdSuccess=apDiamRxExtPolSvrRAARecvdSuccess, apDiamMessagesSentFailed=apDiamMessagesSentFailed, apAcctMsgQueueMajorThreshold=apAcctMsgQueueMajorThreshold, apDiamACCTNotificationsGroup=apDiamACCTNotificationsGroup, apDiamACCTResultObjectsGroup=apDiamACCTResultObjectsGroup, apDiamNotifications=apDiamNotifications, apDiamRxExtPolSvrASARecvdErrors=apDiamRxExtPolSvrASARecvdErrors, apDiameterResultCode=apDiameterResultCode, apDiamRxExtPolSvrSTSuccessRespSent=apDiamRxExtPolSvrSTSuccessRespSent, apDiamRxExtPolSvrRARRecvd=apDiamRxExtPolSvrRARRecvd, apDiamClfExtPolSvrName=apDiamClfExtPolSvrName, apDiamRxExtPolSvrCTRejectRespRecvd=apDiamRxExtPolSvrCTRejectRespRecvd, apDiamMessagesSent=apDiamMessagesSent, apDiamRxExtPolSvrRAARecvdErrors=apDiamRxExtPolSvrRAARecvdErrors, apDiamAcctSrvrOriginRealm=apDiamAcctSrvrOriginRealm, apDiamRxExtPolSvrAAASuccess=apDiamRxExtPolSvrAAASuccess, apDiamNotifObjects=apDiamNotifObjects, apDiamNotifPrefix=apDiamNotifPrefix, apDiamClfErrorsTotal=apDiamClfErrorsTotal, apDiamRxExtPolSvrSTReqRecvd=apDiamRxExtPolSvrSTReqRecvd, apDiamBadTypeDrops=apDiamBadTypeDrops, apDiamClfErrorsPerMax=apDiamClfErrorsPerMax, apDiamRxExtPolSvrName=apDiamRxExtPolSvrName, apDiamRxExtPolSvrCTErrorsRecvd=apDiamRxExtPolSvrCTErrorsRecvd, apDiamMessagesProcessed=apDiamMessagesProcessed, apDiamRxExtPolSvrCTInstallRespRecvd=apDiamRxExtPolSvrCTInstallRespRecvd, apDiamInvalidPeerMessages=apDiamInvalidPeerMessages, apAcctMsgQueueCriticalThreshold=apAcctMsgQueueCriticalThreshold, apDiamInterfaceType=apDiamInterfaceType, apDiamRxExtPolSvrDWASuccess=apDiamRxExtPolSvrDWASuccess, apDiameterSrvrErrorResultTrap=apDiameterSrvrErrorResultTrap, apDiamBadIDDrops=apDiamBadIDDrops, apDiamMIBModule=apDiamMIBModule, apDiamRxExtPolSvrDWRSent=apDiamRxExtPolSvrDWRSent, apDiamRxExtPolSvrCTRemoveReqSent=apDiamRxExtPolSvrCTRemoveReqSent, apAcctMsgQueueAvailCurrent=apAcctMsgQueueAvailCurrent, apDiamRxExtPolSvrSTDupReqRecvd=apDiamRxExtPolSvrSTDupReqRecvd, apAcctMsgQueueMinorThreshold=apAcctMsgQueueMinorThreshold, apDiamRxExtPolSvrCTReserveReqSent=apDiamRxExtPolSvrCTReserveReqSent, apDiamBadStateDrops=apDiamBadStateDrops, apDiamRxExtPolSvrDWARecvdErrors=apDiamRxExtPolSvrDWARecvdErrors, apDiamRxExtPolSvrDWRRecvd=apDiamRxExtPolSvrDWRRecvd, apDiamConnectionTimeouts=apDiamConnectionTimeouts, apDiamInterfaceStatsEntry=apDiamInterfaceStatsEntry, apDiamMessagesReSent=apDiamMessagesReSent, apDiamRxExtPolSvrSockets=apDiamRxExtPolSvrSockets, apDiamACCTResultNotificationsGroup=apDiamACCTResultNotificationsGroup, apAcctMsgQueueFullTrap=apAcctMsgQueueFullTrap, apDiamNotificationObjects=apDiamNotificationObjects)
