#
# PySNMP MIB module RSTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/internet-drafts/RSTP-MIB
# Produced by pysmi-1.1.12 at Fri Jul 19 13:03:29 2024
# On host fv-az1788-365 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
dot1dStpPortEntry, dot1dBridge, dot1dStp = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dStpPortEntry", "dot1dBridge", "dot1dStp")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, ModuleIdentity, MibIdentifier, Unsigned32, IpAddress, Integer32, Gauge32, TimeTicks, ObjectIdentity, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "ModuleIdentity", "MibIdentifier", "Unsigned32", "IpAddress", "Integer32", "Gauge32", "TimeTicks", "ObjectIdentity", "Counter64", "Counter32")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
rstpMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 17, 11))
rstpMIB.setRevisions(('2002-06-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rstpMIB.setRevisionsDescriptions(('Draft 1',))
if mibBuilder.loadTexts: rstpMIB.setLastUpdated('200206170000Z')
if mibBuilder.loadTexts: rstpMIB.setOrganization('IETF Bridge MIB Working Group')
if mibBuilder.loadTexts: rstpMIB.setContactInfo('Email: Bridge-mib@ietf.org')
if mibBuilder.loadTexts: rstpMIB.setDescription('The Bridge MIB Extension module for managing devices\n         that support the Rapid Spanning Tree Protocol defined\n         by IEEE 802.1w.')
dot1dStpVersion = MibScalar((1, 3, 6, 1, 2, 1, 17, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp", 2))).clone('rstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStpVersion.setReference('IEEE 802.1w clause 14.8.1, 17.12, 17.16.1')
if mibBuilder.loadTexts: dot1dStpVersion.setStatus('current')
if mibBuilder.loadTexts: dot1dStpVersion.setDescription("The version of Spanning Tree Protocol the bridge is\n         currently running.  The value 'stpCompatible(0)'\n         indicates the Spanning Tree Protocol specified in\n         IEEE 802.1D and 'rstp(2)' indicates the Rapid Spanning\n\n\n         Tree Protocol specified in IEEE 802.1w.  New value may\n         be defined as future versions of the protocol become\n         available.")
dot1dStpTxHoldCount = MibScalar((1, 3, 6, 1, 2, 1, 17, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStpTxHoldCount.setReference('IEEE 802.1w clause 17.16.6')
if mibBuilder.loadTexts: dot1dStpTxHoldCount.setStatus('current')
if mibBuilder.loadTexts: dot1dStpTxHoldCount.setDescription('The value used by the Port Transmit state machine to limit\n         the maximum transmission rate.')
dot1dStpPathCostDefault = MibScalar((1, 3, 6, 1, 2, 1, 17, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stp8021d1998", 1), ("stp8021t2001", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStpPathCostDefault.setReference('IEEE 802.1D & 802.1t Table 8-5')
if mibBuilder.loadTexts: dot1dStpPathCostDefault.setStatus('current')
if mibBuilder.loadTexts: dot1dStpPathCostDefault.setDescription('The version of the Spanning Tree default Path Costs that\n         are to be used by this Bridge.  A value of 8021d1998(1)\n         uses the 16-bit default Path Costs from IEEE Std. 802.1D-1998.\n         A value of stp8021t2001(2) uses the 32-bit default Path\n         Costs from IEEE Std. 802.1t.')
dot1dStpExtPortTable = MibTable((1, 3, 6, 1, 2, 1, 17, 2, 19), )
if mibBuilder.loadTexts: dot1dStpExtPortTable.setStatus('current')
if mibBuilder.loadTexts: dot1dStpExtPortTable.setDescription('A table that contains port-specific Rapid Spanning Tree\n         information.')
dot1dStpExtPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 2, 19, 1), )
dot1dStpPortEntry.registerAugmentions(("RSTP-MIB", "dot1dStpExtPortEntry"))
dot1dStpExtPortEntry.setIndexNames(*dot1dStpPortEntry.getIndexNames())
if mibBuilder.loadTexts: dot1dStpExtPortEntry.setStatus('current')
if mibBuilder.loadTexts: dot1dStpExtPortEntry.setDescription('A list of Rapid Spanning Tree information maintained by\n         each port.')
dot1dStpPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 2, 19, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStpPortProtocolMigration.setReference('IEEE 802.1w clause 14.8.2.4, 17.18.10, 17.26')
if mibBuilder.loadTexts: dot1dStpPortProtocolMigration.setStatus('current')
if mibBuilder.loadTexts: dot1dStpPortProtocolMigration.setDescription('When operating in RSTP (version 2) mode, writing TRUE(1)\n         to this object forces this port to transmit RSTP BPDUs.\n         Any other operation on this object has no effect and\n         it always returns FALSE(2) when read.')
dot1dStpPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 2, 19, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStpPortAdminEdgePort.setReference('IEEE 802.1t clause 14.8.2, 18.3.3')
if mibBuilder.loadTexts: dot1dStpPortAdminEdgePort.setStatus('current')
if mibBuilder.loadTexts: dot1dStpPortAdminEdgePort.setDescription('The administrative value of the Edge Port parameter.  A\n         value of TRUE(1) indicates that this port should be\n         assumed as an edge-port and a value of FALSE(2) indicates\n         that this port should be assumed as a non-edge-port.')
dot1dStpPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 2, 19, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpPortOperEdgePort.setReference('IEEE 802.1t clause 14.8.2, 18.3.4')
if mibBuilder.loadTexts: dot1dStpPortOperEdgePort.setStatus('current')
if mibBuilder.loadTexts: dot1dStpPortOperEdgePort.setDescription('The operational value of the Edge Port parameter.  The\n         object is initialized to the value of\n         dot1dStpPortAdminEdgePort and is set FALSE on reception of\n         a BPDU.')
dot1dStpPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 2, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStpPortAdminPointToPoint.setReference('IEEE 802.1w clause 6.4.3, 6.5, 14.8.2')
if mibBuilder.loadTexts: dot1dStpPortAdminPointToPoint.setStatus('current')
if mibBuilder.loadTexts: dot1dStpPortAdminPointToPoint.setDescription('The administrative point-to-point status of the LAN segment\n         attached to this port.  A value of forceTrue(0) indicates that\n         this port should always be treated as if it is connected to\n         a point-to-point link.  A value of forceFalse(1) indicates\n         that this port should be treated as having a shared media\n         connection.  A value of auto(2) indicates that this port is\n         considered to have a point-to-point link if it is an Aggregator\n         and all of its members are aggregatable, or if the MAC entity\n         is configured for full duplex operation, either through\n         auto-negotiation or by management means.')
dot1dStpPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 2, 19, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpPortOperPointToPoint.setReference('IEEE 802.1w clause 6.4.3, 6.5, 14.8.2')
if mibBuilder.loadTexts: dot1dStpPortOperPointToPoint.setStatus('current')
if mibBuilder.loadTexts: dot1dStpPortOperPointToPoint.setDescription('The operational point-to-point status of the LAN segment\n         attached to this port.  It indicates whether a port is\n         considered to have a point-to-point connection or not.\n         The value is determined by management or by auto-detection,\n         as described in the dot1dStpPortAdminPointToPoint object.')
dot1dStpPortAdminPathCost = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 2, 19, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStpPortAdminPathCost.setReference('IEEE 802.1D-1998: Section 8.5.5.3')
if mibBuilder.loadTexts: dot1dStpPortAdminPathCost.setStatus('current')
if mibBuilder.loadTexts: dot1dStpPortAdminPathCost.setDescription("The administratively assigned value for the contribution\n         of this port to the path cost of paths towards the spanning\n         tree root.\n\n         Writing a value of '0' assigns the automatically calculated\n         default Path Cost value to the port.  If the default Path\n         Cost is being used, this object returns '0' when read.\n\n         This complements the object dot1dStpPortPathCost, which\n         returns the operational value of the path cost.")
rstpConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 11, 1))
rstpGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 11, 1, 1))
rstpCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 11, 1, 2))
rstpBridgeGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 11, 1, 1, 1)).setObjects(("RSTP-MIB", "dot1dStpVersion"), ("RSTP-MIB", "dot1dStpTxHoldCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rstpBridgeGroup = rstpBridgeGroup.setStatus('current')
if mibBuilder.loadTexts: rstpBridgeGroup.setDescription('Rapid Spanning Tree information for the bridge.')
rstpDefaultPathCostGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 11, 1, 1, 2)).setObjects(("RSTP-MIB", "dot1dStpPathCostDefault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rstpDefaultPathCostGroup = rstpDefaultPathCostGroup.setStatus('current')
if mibBuilder.loadTexts: rstpDefaultPathCostGroup.setDescription('Default Spanning Tree path cost information.')
rstpPortGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 11, 1, 1, 3)).setObjects(("RSTP-MIB", "dot1dStpPortProtocolMigration"), ("RSTP-MIB", "dot1dStpPortAdminEdgePort"), ("RSTP-MIB", "dot1dStpPortOperEdgePort"), ("RSTP-MIB", "dot1dStpPortAdminPointToPoint"), ("RSTP-MIB", "dot1dStpPortOperPointToPoint"), ("RSTP-MIB", "dot1dStpPortAdminPathCost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rstpPortGroup = rstpPortGroup.setStatus('current')
if mibBuilder.loadTexts: rstpPortGroup.setDescription('Rapid Spanning Tree information for individual ports.')
rstpCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 17, 11, 1, 2, 1)).setObjects(("RSTP-MIB", "rstpBridgeGroup"), ("RSTP-MIB", "rstpPortGroup"), ("RSTP-MIB", "rstpDefaultPathCostGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rstpCompliance = rstpCompliance.setStatus('current')
if mibBuilder.loadTexts: rstpCompliance.setDescription('The compliance statement for device support of bridging\n         services.')
mibBuilder.exportSymbols("RSTP-MIB", dot1dStpPortProtocolMigration=dot1dStpPortProtocolMigration, rstpCompliance=rstpCompliance, dot1dStpPortAdminPathCost=dot1dStpPortAdminPathCost, rstpMIB=rstpMIB, rstpConformance=rstpConformance, dot1dStpVersion=dot1dStpVersion, dot1dStpPortOperEdgePort=dot1dStpPortOperEdgePort, dot1dStpExtPortTable=dot1dStpExtPortTable, dot1dStpPortAdminPointToPoint=dot1dStpPortAdminPointToPoint, rstpPortGroup=rstpPortGroup, rstpBridgeGroup=rstpBridgeGroup, dot1dStpTxHoldCount=dot1dStpTxHoldCount, dot1dStpPathCostDefault=dot1dStpPathCostDefault, rstpGroups=rstpGroups, dot1dStpPortAdminEdgePort=dot1dStpPortAdminEdgePort, PYSNMP_MODULE_ID=rstpMIB, rstpDefaultPathCostGroup=rstpDefaultPathCostGroup, dot1dStpExtPortEntry=dot1dStpExtPortEntry, rstpCompliances=rstpCompliances, dot1dStpPortOperPointToPoint=dot1dStpPortOperPointToPoint)
