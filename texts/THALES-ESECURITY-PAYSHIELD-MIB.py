#
# PySNMP MIB module THALES-ESECURITY-PAYSHIELD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/thales/THALES-ESECURITY-PAYSHIELD-MIB
# Produced by pysmi-1.1.12 at Mon Jul  1 11:19:05 2024
# On host fv-az1493-704 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
IpAddress, Unsigned32, Gauge32, iso, NotificationType, TimeTicks, ObjectIdentity, Integer32, Counter64, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, enterprises, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "Gauge32", "iso", "NotificationType", "TimeTicks", "ObjectIdentity", "Integer32", "Counter64", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "enterprises", "ModuleIdentity")
DisplayString, DateAndTime, TextualConvention, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention", "MacAddress", "TruthValue")
payShieldMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000))
payShieldMIB.setRevisions(('2021-12-25 08:10', '2019-02-26 08:10', '2019-02-26 08:10', '2018-11-12 08:10',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: payShieldMIB.setRevisionsDescriptions(('Added new objects payShieldVersionSoftwareFirmwareVersion and payShieldVersionSoftwareDeploymentVersion. \n\t\t Deprecated payShieldVersionSoftwareBuildNumber.', "Provides information for following components for Thales eSecurity's payShield devices (10K or later):\n\t\t  Enabled host commands, Fraud, Health, Host connection, Licensing, LMK, Logs, Management, \n\t\t  PCI Security Settings, Printer, State, Utilization, Version, Auxiliary Ethernet.", 'Deprecated payShieldVersionSoftwareHSMCoreAPIVersion and payShieldRestartAlarm.\n\t\tUpdated description of payShieldUtilHostCmdVolume.', 'Initial revision',))
if mibBuilder.loadTexts: payShieldMIB.setLastUpdated('202112250810Z')
if mibBuilder.loadTexts: payShieldMIB.setOrganization('Thales eSecurity')
if mibBuilder.loadTexts: payShieldMIB.setContactInfo('954 888 6200')
if mibBuilder.loadTexts: payShieldMIB.setDescription('Added new objects payShieldLogsErrorlogMaxLength, payShieldLogsAuditlogMaxLength, payshieldHostConnectionEthernetLoadCount, \t\t \n\t\t payShieldSettingsHashSecuritySetting, payShieldSettingsHashGeneralSetting, payShieldSettingsHashConfigureCommand,         \n\t\t payShieldSettingsHashAuditSetting and payShieldSettingsHashLMK.')
thalesEsecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 4096))
thalesEsecurityDevs = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 1))
payshield = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 1, 10000))
thalesEsecurityMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2))
raProductMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2))
payShieldUtil = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 1))
payShieldState = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 2))
payShieldStateTamper = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 2, 2))
payShieldStateFan = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 2, 3))
payShieldStatePSU = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 2, 4))
payShieldLmk = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 3))
payShieldComms = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 4))
payShieldCommsMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 4, 1))
payShieldCommsHost = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 4, 2))
payShieldCommsHostPort = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 4, 2, 4))
payShieldSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 5))
payShieldFraud = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 6))
payShieldVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 7))
payShieldLicensing = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 8))
payShieldEnabledHostCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 9))
payShieldLogs = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 10))
payShieldLogsErrorlog = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 10, 1))
payShieldLogsAuditlog = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 10, 2))
payShieldHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 11))
payShieldHealthDiagSelfTest = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 11, 1))
payShieldHealthCheckCounts = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 11, 2))
payShieldHostConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12))
payShieldHostConnectionEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 3))
payShieldHostConnectionFICON = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 4))
payShieldManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 13))
payShieldManagementEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 13, 1))
payShieldPrinter = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 14))
payShieldSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 15))
payShieldAuxiliaryEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 16))
notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 999))
payShieldNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 999, 2))
payShieldAlarmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1))
payShieldTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 999, 2, 2))
payShieldAlarmFans = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 1))
payShieldAlarmPSU = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 2))
payShieldAlarmBadPortData = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 3))
payShieldAlarmErrorLog = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 4))
payShieldAlarmBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 5))
payShieldAlarmDiagnostic = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 6))
payShieldAlarmFraud = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 7))
payShieldAlarmErase = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 8))
payShieldAlarmSettingsModified = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 9))
payShieldAlarmStateChange = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 10))
payShieldAlarmTamper = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 11))
payShieldUtilLoad = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldUtilLoad.setStatus('current')
if mibBuilder.loadTexts: payShieldUtilLoad.setDescription('Displays the instantaneous load for all host commands processed \n\t\tby the payShield in the previous time period. The load is \n\t\trepresented as a percentage of the total [licensed] processing \n\t\tcapacity of the device.')
payShieldUtilHostCmdVolume = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 484))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldUtilHostCmdVolume.setStatus('current')
if mibBuilder.loadTexts: payShieldUtilHostCmdVolume.setDescription("Displays the measurement period in seconds and the number of commands\n\t\tin the report followed by a list of all host commands and the number\n\t\tof times each of those host commands that have been processed within\n\t\tthe previous measurement period. Note that if a large variety of commands\n\t\tare processed, then this list may be incomplete and will contain the\n\t\tcommands that consumed the highest proportion of the device's capacity.")
payShieldUtilEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldUtilEnabled.setStatus('current')
if mibBuilder.loadTexts: payShieldUtilEnabled.setDescription('True if Utilization turned on')
payShieldStateDevice = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("stateUnavailable", 1), ("stateOnline", 2), ("stateOffline", 3), ("stateSecure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldStateDevice.setStatus('current')
if mibBuilder.loadTexts: payShieldStateDevice.setDescription('Indicates the current state of the payShield.')
payShieldStateTamperState = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stateUnknown", 1), ("stateOK", 2), ("stateTampered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldStateTamperState.setStatus('current')
if mibBuilder.loadTexts: payShieldStateTamperState.setDescription('Indicates whether the device is currently in a tamper state.')
payShieldStateTamperDate = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 2, 2, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldStateTamperDate.setStatus('current')
if mibBuilder.loadTexts: payShieldStateTamperDate.setDescription('The Date and Time that the last tamper event occurred. A NULL value\n\t\tindicates that the unit has not registered any tamper events.')
payShieldStateTamperCause = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("causeUnavailable", 1), ("causeTemperatureOutOfRange", 2), ("causeBatteryLow", 3), ("causeEraseButtonPressed", 4), ("causeSensorProcessorWatchdog", 5), ("causeSensorProcessorRestart", 6), ("causeVoltageOutOfRange", 7), ("causeMotionDetected", 8), ("causeCaseTampered", 9), ("causePowerLoss", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldStateTamperCause.setStatus('current')
if mibBuilder.loadTexts: payShieldStateTamperCause.setDescription('The cause of the last tamper event')
payShieldStateFanTable = MibTable((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 2, 3, 1), )
if mibBuilder.loadTexts: payShieldStateFanTable.setStatus('current')
if mibBuilder.loadTexts: payShieldStateFanTable.setDescription('A table that returns the status of fans.')
payShieldStateFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 2, 3, 1, 1), ).setIndexNames((0, "THALES-ESECURITY-PAYSHIELD-MIB", "payShieldStateFanIndex"))
if mibBuilder.loadTexts: payShieldStateFanEntry.setStatus('current')
if mibBuilder.loadTexts: payShieldStateFanEntry.setDescription('Row in the fan status table')
payShieldStateFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: payShieldStateFanIndex.setStatus('current')
if mibBuilder.loadTexts: payShieldStateFanIndex.setDescription('The index into the fan status table')
payShieldStateFanSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldStateFanSerialNum.setStatus('current')
if mibBuilder.loadTexts: payShieldStateFanSerialNum.setDescription('Displays the serial number of this fan unit.')
payShieldStateFanState = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stateOK", 1), ("stateFailure", 2), ("stateNotDetected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldStateFanState.setStatus('current')
if mibBuilder.loadTexts: payShieldStateFanState.setDescription('Indicates the current state of this fan.')
payShieldStatePSUTable = MibTable((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 2, 4, 1), )
if mibBuilder.loadTexts: payShieldStatePSUTable.setStatus('current')
if mibBuilder.loadTexts: payShieldStatePSUTable.setDescription('A table that returns the status of power supply units.')
payShieldStatePSUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 2, 4, 1, 1), ).setIndexNames((0, "THALES-ESECURITY-PAYSHIELD-MIB", "payShieldStatePSUIndex"))
if mibBuilder.loadTexts: payShieldStatePSUEntry.setStatus('current')
if mibBuilder.loadTexts: payShieldStatePSUEntry.setDescription('Row in the PSU status table')
payShieldStatePSUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: payShieldStatePSUIndex.setStatus('current')
if mibBuilder.loadTexts: payShieldStatePSUIndex.setDescription('The index into the PSU status table')
payShieldStatePSUSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldStatePSUSerialNum.setStatus('current')
if mibBuilder.loadTexts: payShieldStatePSUSerialNum.setDescription('Displays the serial number of this power supply unit.')
payShieldStatePSUState = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stateOK", 1), ("stateFailure", 2), ("stateNotDetected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldStatePSUState.setStatus('current')
if mibBuilder.loadTexts: payShieldStatePSUState.setDescription('Indicates the current state of this power supply unit.')
payShieldStateBattery = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stateOK", 1), ("stateWarning", 2), ("stateFailure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldStateBattery.setStatus('current')
if mibBuilder.loadTexts: payShieldStateBattery.setDescription('Indicates the current state of the battery.')
payShieldLmkNumLoaded = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldLmkNumLoaded.setStatus('current')
if mibBuilder.loadTexts: payShieldLmkNumLoaded.setDescription('The number of LMKs currently loaded into the device.')
payShieldLmkNumTestLmksLoaded = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldLmkNumTestLmksLoaded.setStatus('current')
if mibBuilder.loadTexts: payShieldLmkNumTestLmksLoaded.setDescription("Indicates the number of 'test' LMKs loaded (as opposed to production). \n\t\tWhen the payShield is operating in a live environment, no test \n\t\tLMKs should be loaded and this field should be returned as 0.")
payShieldLmkNumOldLmksLoaded = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldLmkNumOldLmksLoaded.setStatus('current')
if mibBuilder.loadTexts: payShieldLmkNumOldLmksLoaded.setDescription('Indicates the number of old LMKs currently loaded in the payShield. \n\t\tOld LMKs should be stored in the device only as long as they are needed for \n\t\ttranslation purposes. Once all LMK-protected data has been placed under the \n\t\tcontrol of the new LMK set, then the old LMK set should be deleted.')
payShieldLmkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 3, 4), )
if mibBuilder.loadTexts: payShieldLmkStatusTable.setStatus('current')
if mibBuilder.loadTexts: payShieldLmkStatusTable.setDescription('A table that returns the status of all possible LMK sets.')
payShieldLmkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 3, 4, 1), ).setIndexNames((0, "THALES-ESECURITY-PAYSHIELD-MIB", "payShieldLmkStatusIndex"))
if mibBuilder.loadTexts: payShieldLmkStatusEntry.setStatus('current')
if mibBuilder.loadTexts: payShieldLmkStatusEntry.setDescription('Row in the LMK Status table')
payShieldLmkStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: payShieldLmkStatusIndex.setStatus('current')
if mibBuilder.loadTexts: payShieldLmkStatusIndex.setDescription('The index into the LMK Status table')
payShieldLmkStatusLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 3, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldLmkStatusLoaded.setStatus('current')
if mibBuilder.loadTexts: payShieldLmkStatusLoaded.setDescription('Indicates whether or not an LMK set is currently loaded at this index \n\t\tin the table. Returns TRUE if loaded, else FALSE.')
payShieldLmkStatusAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 3, 4, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldLmkStatusAuth.setStatus('current')
if mibBuilder.loadTexts: payShieldLmkStatusAuth.setDescription('Authorized state of this LMK set. A value of TRUE indicates that the \n\t\tLMK is in an authorized state; FALSE indicates that it is not authorized.')
payShieldLmkStatusNumAuthActivities = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldLmkStatusNumAuthActivities.setStatus('current')
if mibBuilder.loadTexts: payShieldLmkStatusNumAuthActivities.setDescription('Indicates the number of authorized activities if the payShield \n\t\tis set to Multi-Auth mode. If not in multi-auth mode, returns 0.')
payShieldLmkStatusScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lmkSchemeUnknown", 1), ("lmkSchemeVariant", 2), ("lmkSchemeKeyblock", 3), ("lmkSchemeAES", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldLmkStatusScheme.setStatus('current')
if mibBuilder.loadTexts: payShieldLmkStatusScheme.setDescription('Indicates the scheme of the loaded LMK set (variant, keyblock, or AES).')
payShieldLmkStatusAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lmkAlgorithmUnknown", 1), ("lmkAlgorithm3DES2Key", 2), ("lmkAlgorithm3DES3Key", 3), ("lmkAlgorithmAES256", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldLmkStatusAlgorithm.setStatus('current')
if mibBuilder.loadTexts: payShieldLmkStatusAlgorithm.setDescription('Indicates the algorithm used by the LMK set for encryption.')
payShieldLmkStatusLiveTest = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lmkStatusUnknown", 1), ("lmkStatusLive", 2), ("lmkStatusTest", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldLmkStatusLiveTest.setStatus('current')
if mibBuilder.loadTexts: payShieldLmkStatusLiveTest.setDescription("Indicates the status of the currently loaded LMK set. \n\t\tThis will be either 'Live' or 'Test'. Note that test LMKs should not \n\t\tbe loaded into a payShield operating in a live customer environment.")
payShieldLmkStatusComments = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 3, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldLmkStatusComments.setStatus('current')
if mibBuilder.loadTexts: payShieldLmkStatusComments.setDescription('Textual description of the LMK set loaded. A string of length 0 \n\t\tindicates that no description is stored.')
payShieldLmkStatusCheckDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 3, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldLmkStatusCheckDigits.setStatus('current')
if mibBuilder.loadTexts: payShieldLmkStatusCheckDigits.setDescription('Indicates the check digits for an LMK.')
payShieldCommsMgmtConsoleState = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("consoleUp", 1), ("consoleDown", 2), ("consoleDisabledByGui", 3), ("consoleUnavailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldCommsMgmtConsoleState.setStatus('current')
if mibBuilder.loadTexts: payShieldCommsMgmtConsoleState.setDescription('Indicates whether the process to service Console Management requests \n\t\tis currently running. payShieldCommsMgmtConsoleStateUp (1) indicates that \n\t\tit is; all the other states indicate that the console is currently inactive.')
payShieldCommsMgmtGuiState = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("guiUp", 1), ("guiDown", 2), ("guiUnavailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldCommsMgmtGuiState.setStatus('current')
if mibBuilder.loadTexts: payShieldCommsMgmtGuiState.setDescription('Indicates whether the process to service GUI requests is currently running. \n\t\tpayShieldCommsMgmtGuiStateUp (1) indicates that it is; all the other states \n\t\tindicate that the GUI is currently inactive.')
payShieldCommsHostTCPServer = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serverUp", 1), ("serverDown", 2), ("serverNotEnabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldCommsHostTCPServer.setStatus('current')
if mibBuilder.loadTexts: payShieldCommsHostTCPServer.setDescription('Indicates whether the process to service host commands is currently \n\t\trunning over the Ethernet host port using the TCP protocol. \n\t\tpayShieldCommsHostTCPServerUp (1) indicates that it is; \n\t\tall the other states indicate that TCP is currently inactive.')
payShieldCommsHostUDPServer = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serverUp", 1), ("serverDown", 2), ("serverNotEnabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldCommsHostUDPServer.setStatus('current')
if mibBuilder.loadTexts: payShieldCommsHostUDPServer.setDescription('Indicates whether the process to service host commands is currently \n\t\trunning over the Ethernet host port using the UDP protocol. \n\t\tpayShieldCommsHostUDPServerUp (1) indicates that it is; all the other \n\t\tstates indicate that UDP is currently inactive.')
payShieldCommsHostFICONServer = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serverUp", 1), ("serverDown", 2), ("serverNotEnabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldCommsHostFICONServer.setStatus('current')
if mibBuilder.loadTexts: payShieldCommsHostFICONServer.setDescription('Indicates whether the process to service host commands is currently \n\t\trunning over the FICON host port. payShieldCommsHostFICONServerUp (1) \n\t\tindicates that it is; all the other states indicate that FICON is \n\t\tcurrently inactive. ')
payShieldCommsHostPortEthernet1 = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 4, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portUp", 1), ("portDown", 2), ("portUnavailable", 3), ("portNotConfigured", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldCommsHostPortEthernet1.setStatus('current')
if mibBuilder.loadTexts: payShieldCommsHostPortEthernet1.setDescription('Indicates if the first host ethernet port is up and running.')
payShieldCommsHostPortEthernet2 = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 4, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portUp", 1), ("portDown", 2), ("portUnavailable", 3), ("portNotConfigured", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldCommsHostPortEthernet2.setStatus('current')
if mibBuilder.loadTexts: payShieldCommsHostPortEthernet2.setDescription('Indicates if the second host ethernet port is up and running.')
payShieldCommsHostPortFICON = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 4, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portUp", 1), ("portDown", 2), ("portUnavailable", 3), ("portNotConfigured", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldCommsHostPortFICON.setStatus('current')
if mibBuilder.loadTexts: payShieldCommsHostPortFICON.setDescription('Indicates if the FICON port (if present) is up and running.')
payShieldSystemDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 5, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldSystemDateAndTime.setStatus('current')
if mibBuilder.loadTexts: payShieldSystemDateAndTime.setDescription("The date and time as reported by the system's Real Time Clock.")
payShieldSystemSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldSystemSerialNum.setStatus('current')
if mibBuilder.loadTexts: payShieldSystemSerialNum.setDescription('Displays the serial number of the payShield system.')
payShieldSystemModel = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 5, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldSystemModel.setStatus('current')
if mibBuilder.loadTexts: payShieldSystemModel.setDescription('Displays the model/series information of the payShield system.')
payShieldFraudPinVerifyLimitsExceeded = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 6, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldFraudPinVerifyLimitsExceeded.setStatus('current')
if mibBuilder.loadTexts: payShieldFraudPinVerifyLimitsExceeded.setDescription('Returns TRUE if fraud detection is turned on, and either the \n\t\tallowable PIN verifications/minute, or PIN verifications/hour, have been exceeded.')
payShieldFraudPinAttackLimitsExceeded = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 6, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldFraudPinAttackLimitsExceeded.setStatus('current')
if mibBuilder.loadTexts: payShieldFraudPinAttackLimitsExceeded.setDescription('Returns TRUE if fraud detection is turned on, AND the total number \n\t\tof PIN attacks have exceeded the allowed count.')
payShieldVersionSoftwareBaseRelease = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldVersionSoftwareBaseRelease.setStatus('current')
if mibBuilder.loadTexts: payShieldVersionSoftwareBaseRelease.setDescription('Base release of the software running on the payShield.')
payShieldVersionSoftwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldVersionSoftwareRevision.setStatus('current')
if mibBuilder.loadTexts: payShieldVersionSoftwareRevision.setDescription('Revision of the software running on the payShield.')
payShieldVersionSoftwareBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 7, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldVersionSoftwareBuildNumber.setStatus('deprecated')
if mibBuilder.loadTexts: payShieldVersionSoftwareBuildNumber.setDescription('***************** THIS OBJECT IS DEPRECATED *****************\n\n\t\tBuild number of the software running on the payShield.')
payShieldVersionSoftwareHSMCoreAPIVersion = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 7, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldVersionSoftwareHSMCoreAPIVersion.setStatus('deprecated')
if mibBuilder.loadTexts: payShieldVersionSoftwareHSMCoreAPIVersion.setDescription('***************** THIS OBJECT IS DEPRECATED *****************\n\n\t\t HSM core API version of the software running on the payShield.')
payShieldVersionSoftwareCPLDVersion = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 7, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldVersionSoftwareCPLDVersion.setStatus('current')
if mibBuilder.loadTexts: payShieldVersionSoftwareCPLDVersion.setDescription('Version of CPLD running on the payShield.')
payShieldVersionSoftwareSPVersion = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 7, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldVersionSoftwareSPVersion.setStatus('current')
if mibBuilder.loadTexts: payShieldVersionSoftwareSPVersion.setDescription('Version of Sensor Processor software running on the payShield.')
payShieldVersionSoftwareSPBootVersion = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 7, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldVersionSoftwareSPBootVersion.setStatus('current')
if mibBuilder.loadTexts: payShieldVersionSoftwareSPBootVersion.setDescription('Version of Sensor Processor boot on the payShield.')
payShieldVersionSoftwareBootstrapVersion = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 7, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldVersionSoftwareBootstrapVersion.setStatus('current')
if mibBuilder.loadTexts: payShieldVersionSoftwareBootstrapVersion.setDescription('Version of bootstrap on the payShield.')
payShieldVersionSoftwareFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 7, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldVersionSoftwareFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: payShieldVersionSoftwareFirmwareVersion.setDescription('Semantic version of firmware on the payShield.')
payShieldVersionSoftwareDeploymentVersion = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 7, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldVersionSoftwareDeploymentVersion.setStatus('current')
if mibBuilder.loadTexts: payShieldVersionSoftwareDeploymentVersion.setDescription('Semantic deployment version of firmware on the payShield.')
payShieldLicensingPerformanceModel = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldLicensingPerformanceModel.setStatus('current')
if mibBuilder.loadTexts: payShieldLicensingPerformanceModel.setDescription('The maximum calls per second this payShield unit is licensed for.')
payShieldLicensingPackage = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 8, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldLicensingPackage.setStatus('current')
if mibBuilder.loadTexts: payShieldLicensingPackage.setDescription('The license package loaded on this payShield unit.')
payShieldLicensingOptionalLicenseCount = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldLicensingOptionalLicenseCount.setStatus('current')
if mibBuilder.loadTexts: payShieldLicensingOptionalLicenseCount.setDescription('The number of optional licenses this payShield unit has installed.')
payShieldLicensingOptionalLicensesList = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 8, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldLicensingOptionalLicensesList.setStatus('current')
if mibBuilder.loadTexts: payShieldLicensingOptionalLicensesList.setDescription("The optional licenses this payShield unit is licensed for separated by ';'.")
payShieldLicensingCryptoAlgorithmCount = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldLicensingCryptoAlgorithmCount.setStatus('current')
if mibBuilder.loadTexts: payShieldLicensingCryptoAlgorithmCount.setDescription("The number of Cryptographic Algorithms enabled by the payShield's licensing.")
payShieldLicensingCryptoAlgorithmList = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 8, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldLicensingCryptoAlgorithmList.setStatus('current')
if mibBuilder.loadTexts: payShieldLicensingCryptoAlgorithmList.setDescription("List of licensed Cryptographic Algorithms. These will be descriptive strings \n\t\tfor each algorithm terminated by a semi-colon ';'. \n\t\tThe number of licensed algorithms in the list will be \n\t\tequal to payShieldLicensingCryptoAlgorithmCount.")
payShieldEnabledHostCommandsCount = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldEnabledHostCommandsCount.setStatus('current')
if mibBuilder.loadTexts: payShieldEnabledHostCommandsCount.setDescription('The number of host commands enabled on this payShield.')
payShieldEnabledHostCommandsList = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 9, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldEnabledHostCommandsList.setStatus('current')
if mibBuilder.loadTexts: payShieldEnabledHostCommandsList.setDescription("Entire list of enabled host commands separated by a semi-colon ';'.")
payShieldLogsErrorlogTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldLogsErrorlogTotalCount.setStatus('current')
if mibBuilder.loadTexts: payShieldLogsErrorlogTotalCount.setDescription('Total number of entries in the error log.')
payShieldLogsErrorlogMaxLength = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldLogsErrorlogMaxLength.setStatus('current')
if mibBuilder.loadTexts: payShieldLogsErrorlogMaxLength.setDescription('Maximum number of entries in the error log.')
payShieldLogsAuditlogTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 10, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldLogsAuditlogTotalCount.setStatus('current')
if mibBuilder.loadTexts: payShieldLogsAuditlogTotalCount.setDescription('Total number of entries in the audit log.')
payShieldLogsAuditlogMaxLength = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 10, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldLogsAuditlogMaxLength.setStatus('current')
if mibBuilder.loadTexts: payShieldLogsAuditlogMaxLength.setDescription('Maximum number of entries in the audit log.')
payShieldHealthDiagSelfTestTimeOfDay = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHealthDiagSelfTestTimeOfDay.setStatus('current')
if mibBuilder.loadTexts: payShieldHealthDiagSelfTestTimeOfDay.setDescription('The number of minutes after midnight the diagnostic tests begins at.')
payShieldHealthDiagSelfTestOK = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 11, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHealthDiagSelfTestOK.setStatus('current')
if mibBuilder.loadTexts: payShieldHealthDiagSelfTestOK.setDescription('True unless one or more of the tests in the last self test failed.')
payShieldHealthDiagSelfTestCount = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHealthDiagSelfTestCount.setStatus('current')
if mibBuilder.loadTexts: payShieldHealthDiagSelfTestCount.setDescription('The number of self tests run last test cycle on this payShield.')
payShieldHealthDiagSelfTestList = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHealthDiagSelfTestList.setStatus('current')
if mibBuilder.loadTexts: payShieldHealthDiagSelfTestList.setDescription("The complete results of the last run self test. \n\t\tSyntax of string Testname:testresult; \n\t\tTest/results pairs are separated by a colon  ':' \n\t\tThey are delimited by a semi-colon ; .\n\t\tResults are the string 'passed' or 'failed'.\n\t\tThe number of self tests in the list will be \n\t\tequal to payShieldHealthDiagSelfTestCount.")
payShieldHealthHealthCheckEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 11, 2, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHealthHealthCheckEnabled.setStatus('current')
if mibBuilder.loadTexts: payShieldHealthHealthCheckEnabled.setDescription('Whether the payShield is presently collecting health check data.')
payShieldHealthCheckCountsStartTime = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 11, 2, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHealthCheckCountsStartTime.setStatus('current')
if mibBuilder.loadTexts: payShieldHealthCheckCountsStartTime.setDescription('Date/Time of last health stats reset.')
payShieldHealthCheckCountsEndTime = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 11, 2, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHealthCheckCountsEndTime.setStatus('current')
if mibBuilder.loadTexts: payShieldHealthCheckCountsEndTime.setDescription('Date/time of when stats collecting was last disabled.\n\t\tIf health stats are not disabled, the Date/Time when this field was read.')
payShieldHealthCheckCountsRebootCount = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 11, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHealthCheckCountsRebootCount.setStatus('current')
if mibBuilder.loadTexts: payShieldHealthCheckCountsRebootCount.setDescription('Number of times the payShield rebooted since the last reset of health counters.')
payShieldHealthCheckCountsTamperCount = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 11, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHealthCheckCountsTamperCount.setStatus('current')
if mibBuilder.loadTexts: payShieldHealthCheckCountsTamperCount.setDescription('The number of tampers detected since the last reset of health counters.')
payShieldHealthCheckCountsPinFailuresMinuteLimit = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 11, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHealthCheckCountsPinFailuresMinuteLimit.setStatus('current')
if mibBuilder.loadTexts: payShieldHealthCheckCountsPinFailuresMinuteLimit.setDescription('The number of minutes in which the maximum pin verify failures was exceeded \n\t\tsince the last reset of health counters.')
payShieldHealthCheckCountsPinFailuresHourLimit = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 11, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHealthCheckCountsPinFailuresHourLimit.setStatus('current')
if mibBuilder.loadTexts: payShieldHealthCheckCountsPinFailuresHourLimit.setDescription('The number of hours in which the maximum allowable pin failures per hour was \n\t\texceeded since the last reset of health counters.')
payShieldHealthCheckCountsPinAttackLimitExceeded = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 11, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHealthCheckCountsPinAttackLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: payShieldHealthCheckCountsPinAttackLimitExceeded.setDescription('The number of times the pin attack limit was exceeded since the last reset of \n\t\thealth counters.')
payShieldHostConnectionEthernetEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionEthernetEnabled.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionEthernetEnabled.setDescription('Whether the payShield is configured to provide ethernet host interfaces.')
payShieldHostConnectionFICONEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionFICONEnabled.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionFICONEnabled.setDescription('Whether or not the payShield is configured to provide a FICON host interface.')
payShieldHostConnectionEthernetIfCount = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionEthernetIfCount.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionEthernetIfCount.setDescription('The number of physical ethernet interfaces enabled to process host commands.\n\t\t This will be 1 or 2.')
payShieldHostConnectionEthernetSSLEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 3, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionEthernetSSLEnabled.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionEthernetSSLEnabled.setDescription('If true TLS/SSL has been enabled.')
payShieldHostConnectionEthernetACLsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 3, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionEthernetACLsEnabled.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionEthernetACLsEnabled.setDescription('Whether Access Control Lists are enabled.')
payShieldHostConnectionEthernetUDPEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 3, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionEthernetUDPEnabled.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionEthernetUDPEnabled.setDescription('Whether UDP is enabled.')
payShieldHostConnectionEthernetTCPEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 3, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionEthernetTCPEnabled.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionEthernetTCPEnabled.setDescription('Whether TCP is enabled.')
payShieldHostConnectionEthernetMaxTCPConnections = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionEthernetMaxTCPConnections.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionEthernetMaxTCPConnections.setDescription('The maximum number of TCP sessions allowed per interface.\n\t\t(0-64)')
payShieldHostConnectionEthernetTCPKeepalive = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionEthernetTCPKeepalive.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionEthernetTCPKeepalive.setDescription('TCP keep alive timeout in minutes.\n\t\t(0-120)')
payShieldHostConnectionEthernetWellKnownPortTCP = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionEthernetWellKnownPortTCP.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionEthernetWellKnownPortTCP.setDescription('The well known TCP port.\n\t\t(0-65535)')
payShieldHostConnectionEthernetWellKnownPortTLS = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionEthernetWellKnownPortTLS.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionEthernetWellKnownPortTLS.setDescription('The well known TLS port.\n\t\t(0-65535)')
payShieldHostConnectionEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 3, 10), )
if mibBuilder.loadTexts: payShieldHostConnectionEthernetTable.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionEthernetTable.setDescription('The interface specific ethernet configuration/status information.\n\t\tFor interfaces that are disabled or fields that are not relevant,\n\t\tall values will be set to a NULL value.')
payShieldHostConnectionEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 3, 10, 1), ).setIndexNames((0, "THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionEthernetIndex"))
if mibBuilder.loadTexts: payShieldHostConnectionEthernetEntry.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionEthernetEntry.setDescription('An entry containing information applicable to the host ethernet connection')
payShieldHostConnectionEthernetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: payShieldHostConnectionEthernetIndex.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionEthernetIndex.setDescription('A unique value (> 0) for each host ethernet connection interface')
payShieldHostConnectionEthernetConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 3, 10, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionEthernetConfigured.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionEthernetConfigured.setDescription('Tells whether a row of the table is configured. For a 1 interface system it is possible \n\t\tthat the configured  interface could be either the first or second one.')
payShieldHostConnectionEthernetInterfaceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionEthernetInterfaceNumber.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionEthernetInterfaceNumber.setDescription('This binds a row to a physical host ethernet interface.\n\t\t1 corresponds to Ethernet interface HostPortEthernet1\n\t\t2 corresponds to Ethernet interface HostPortEthernet2')
payShieldHostConnectionEthernetConfigMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 3, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ipMethodUnknown", 0), ("ipMethodStatic", 1), ("ipMethodDHCP", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionEthernetConfigMethod.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionEthernetConfigMethod.setDescription("DHCP and static IP configuration are the possibilities. When statically configured, \n\t\tthe addresses reported are from the payShield's configuration for this interface. \n\t\tWhen DHCP, the addresses obtained via DHCP are reported.")
payShieldHostConnectionEthernetHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 3, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionEthernetHostName.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionEthernetHostName.setDescription("Network Name is present for a DHCP configured port only.\n\t\tIf the ethernet port is configured statically set to 'NotApplicable'.\n\t\tIf the ethernet port is not configured set to 'Interface not enabled'.")
payShieldHostConnectionEthernetIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 3, 10, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionEthernetIpAddress.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionEthernetIpAddress.setDescription('IP address for this interface.\n\t\tIf this interface is not enabled returns 0.0.0.0')
payShieldHostConnectionEthernetSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 3, 10, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionEthernetSubnetMask.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionEthernetSubnetMask.setDescription('Subnet mask for this interface.\n\t\tIf this interface is not enabled returns 0.0.0.0')
payShieldHostConnectionEthernetGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 3, 10, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionEthernetGateway.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionEthernetGateway.setDescription('Gateway IP address used by this interface.\n\t\tIf this interface is not enabled returns 0.0.0.0')
payShieldHostConnectionEthernetMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 3, 10, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionEthernetMacAddress.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionEthernetMacAddress.setDescription('MAC address for this ethernet interface.\n\t\tIf this interface is not enabled returns 00:00:00:00:00:00')
payShieldHostConnectionEthernetPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 3, 10, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionEthernetPortSpeed.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionEthernetPortSpeed.setDescription("Describes the speed/duplex this port is configured at.\n\t\tIf the port is configured for 'ethernet autoselect' returns:\n\t\t    'ethernet autoselect(speed/duplex )'\n\t\tIf the ethernet interface is not configured returns:\n\t\t    'Interface not enabled'")
payShieldHostConnectionNumberOfConnectionsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 3, 10, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionNumberOfConnectionsUsed.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionNumberOfConnectionsUsed.setDescription('The Number of TCP connections in use for this physical interface.\n\t\trange (0-payShieldHostConnectionMaxTCPConnections)')
payShieldHostConnectionEthernetLoadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 3, 10, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionEthernetLoadCount.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionEthernetLoadCount.setDescription('The Load Count for the host machines')
payShieldHostConnectionFICONControlUnitImage = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionFICONControlUnitImage.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionFICONControlUnitImage.setDescription('This is the control unit address defined in the mainframe I/O definition\n\t\t(CUADD on CNTLUNIT statement). \n\t\t(0-255)')
payShieldHostConnectionFICONControlUnitAddress = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionFICONControlUnitAddress.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionFICONControlUnitAddress.setDescription('The starting unit address for this control unit. \n\t\t16 devices are enumerated from this point (UNITADD on CNTLUNIT statement).\n\t\t(0-255)')
payShieldHostConnectionFICONMIH = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 12, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldHostConnectionFICONMIH.setStatus('current')
if mibBuilder.loadTexts: payShieldHostConnectionFICONMIH.setDescription('This specifies the missing interrupt handler value to be used in the read device\n\t\tcharacteristics CCW for the mainframe. It is in minutes.\n\t\tIf set to 0, the mainframe setting is used\n\t\t(0-60)')
payShieldManagementEthernetEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 13, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldManagementEthernetEnabled.setStatus('current')
if mibBuilder.loadTexts: payShieldManagementEthernetEnabled.setDescription('Whether management ethernet interface is enabled.')
payShieldManagementEthernetConfigMethod = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ipMethodUnknown", 0), ("ipMethodStatic", 1), ("ipMethodDHCP", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldManagementEthernetConfigMethod.setStatus('current')
if mibBuilder.loadTexts: payShieldManagementEthernetConfigMethod.setDescription('The method the management ethernet interface uses to obtain its ethernet address.\n\t\tStatic - uses local stored information\n\t\tDHCP - obtains settings from the network')
payShieldManagementEthernetNetworkName = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldManagementEthernetNetworkName.setStatus('current')
if mibBuilder.loadTexts: payShieldManagementEthernetNetworkName.setDescription("The name the payShield assigns to this interface if in DHCP mode.\n\t\tIf the ethernet port is configured statically, set to 'DoesNotApply'.")
payShieldManagementEthernetIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 13, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldManagementEthernetIpAddress.setStatus('current')
if mibBuilder.loadTexts: payShieldManagementEthernetIpAddress.setDescription("The management ethernet interface's IP address.\n\t\tIf payShieldManagementEthernetConfigMethod is set to DHCP, it will be set by the network. \n\t\tIf payShieldManagementEthernetConfigMethod is set to static, it will be set to the payShield's\n\t\tconfigured value.\n\t\tA value of 0.0.0.0 means it is not successfully fetched.")
payShieldManagementEthernetSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 13, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldManagementEthernetSubnetMask.setStatus('current')
if mibBuilder.loadTexts: payShieldManagementEthernetSubnetMask.setDescription("The management ethernet interface's IP subnet mask.\n\t\tIf payShieldManagementEthernetConfigMethod is set to DHCP, it will be set by the network.\n\t\tIf payShieldManagementEthernetConfigMethod is set to static, it will be set to the payShield's\n\t\tconfigured value.\n\t\tA value of 0.0.0.0 means it was not successfully fetched.")
payShieldManagementEthernetGateway = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 13, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldManagementEthernetGateway.setStatus('current')
if mibBuilder.loadTexts: payShieldManagementEthernetGateway.setDescription("The management ethernet interface's IP gateway address.\n\t\tIf payShieldManagementEthernetConfigMethod is set to DHCP, it will be set by the network.\n\t\tIf payShieldManagementEthernetConfigMethod is set to Static it will be set to the payShield's\n\t\tconfigured value.\n\t\tA value of 0.0.0.0 means it was not successfully fetched.")
payShieldManagementEthernetMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 13, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldManagementEthernetMacAddress.setStatus('current')
if mibBuilder.loadTexts: payShieldManagementEthernetMacAddress.setDescription("The management ethernet interface's MAC address. \n\t\tWill be set to 00:00:00:00:00:00 if not successfully fetched.")
payShieldManagementEthernetPortSpeed = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 13, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldManagementEthernetPortSpeed.setStatus('current')
if mibBuilder.loadTexts: payShieldManagementEthernetPortSpeed.setDescription('String that describes the speed configured and the actual connection properties.\n\t\tForm is config (actual)\n\t\t       eg :  ethernet autoselect (100baseTX full-duplex)')
payShieldPrinterLFCRReversed = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 14, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldPrinterLFCRReversed.setStatus('current')
if mibBuilder.loadTexts: payShieldPrinterLFCRReversed.setDescription('Whether LF and CR are reversed.')
payShieldPrinterTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldPrinterTimeout.setStatus('current')
if mibBuilder.loadTexts: payShieldPrinterTimeout.setDescription('Printer timeout value in milliseconds.\n\t\t(1000, 86400000)')
payShieldPrinterDelay = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 14, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldPrinterDelay.setStatus('current')
if mibBuilder.loadTexts: payShieldPrinterDelay.setDescription('Printer delay in milliseconds\n\t\t(0-7200000)')
payShieldPrinterReport = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 14, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldPrinterReport.setStatus('current')
if mibBuilder.loadTexts: payShieldPrinterReport.setDescription('The report of the dynamic state of printers in the system as produced for QP and the \n\t\tpayShield Manager. It will consist of printable characters.')
payShieldSettingsPCICompliant = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 15, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldSettingsPCICompliant.setStatus('current')
if mibBuilder.loadTexts: payShieldSettingsPCICompliant.setDescription('True if all security settings are PCI compliant.')
payShieldSettingsHashSecuritySetting = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 15, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldSettingsHashSecuritySetting.setStatus('current')
if mibBuilder.loadTexts: payShieldSettingsHashSecuritySetting.setDescription('Hash value for security settings.')
payShieldSettingsHashGeneralSetting = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 15, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldSettingsHashGeneralSetting.setStatus('current')
if mibBuilder.loadTexts: payShieldSettingsHashGeneralSetting.setDescription('Hash value for general settings.')
payShieldSettingsHashConfigureCommand = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 15, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldSettingsHashConfigureCommand.setStatus('current')
if mibBuilder.loadTexts: payShieldSettingsHashConfigureCommand.setDescription('Hash value for configure command.')
payShieldSettingsHashAuditSetting = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 15, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldSettingsHashAuditSetting.setStatus('current')
if mibBuilder.loadTexts: payShieldSettingsHashAuditSetting.setDescription('Hash value for audit settings.')
payShieldSettingsHashLMK = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 15, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldSettingsHashLMK.setStatus('current')
if mibBuilder.loadTexts: payShieldSettingsHashLMK.setDescription('Hash value for LMK.')
payShieldAuxiliaryEthernetEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 16, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldAuxiliaryEthernetEnabled.setStatus('current')
if mibBuilder.loadTexts: payShieldAuxiliaryEthernetEnabled.setDescription('Whether auxiliary ethernet interface is enabled.')
payShieldAuxiliaryEthernetConfigMethod = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ipMethodUnknown", 0), ("ipMethodStatic", 1), ("ipMethodDHCP", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldAuxiliaryEthernetConfigMethod.setStatus('current')
if mibBuilder.loadTexts: payShieldAuxiliaryEthernetConfigMethod.setDescription('The method the auxiliary ethernet interface uses to obtain its ethernet address.\n\t\tStatic - uses local stored information\n\t\tDHCP - obtains settings from the network')
payShieldAuxiliaryEthernetNetworkName = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 16, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldAuxiliaryEthernetNetworkName.setStatus('current')
if mibBuilder.loadTexts: payShieldAuxiliaryEthernetNetworkName.setDescription("The name the payShield assigns to this interface if in DHCP mode.\n\t\tIf the ethernet port is configured statically, set to 'DoesNotApply'.")
payShieldAuxiliaryEthernetIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 16, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldAuxiliaryEthernetIpAddress.setStatus('current')
if mibBuilder.loadTexts: payShieldAuxiliaryEthernetIpAddress.setDescription("The auxiliary ethernet interface's IP address.\n\t\tIf payShieldAuxiliaryEthernetConfigMethod is set to DHCP, it will be set by the network. \n\t\tIf payShieldAuxiliaryEthernetConfigMethod is set to static, it will be set to the payShield's\n\t\tconfigured value.\n\t\tA value of 0.0.0.0 means it is not successfully fetched.")
payShieldAuxiliaryEthernetSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 16, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldAuxiliaryEthernetSubnetMask.setStatus('current')
if mibBuilder.loadTexts: payShieldAuxiliaryEthernetSubnetMask.setDescription("The auxiliary ethernet interface's IP subnet mask.\n\t\tIf payShieldAuxiliaryEthernetConfigMethod is set to DHCP, it will be set by the network.\n\t\tIf payShieldAuxiliaryEthernetConfigMethod is set to static, it will be set to the payShield's\n\t\tconfigured value.\n\t\tA value of 0.0.0.0 means it was not successfully fetched.")
payShieldAuxiliaryEthernetGateway = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 16, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldAuxiliaryEthernetGateway.setStatus('current')
if mibBuilder.loadTexts: payShieldAuxiliaryEthernetGateway.setDescription("The auxiliary ethernet interface's IP gateway address.\n\t\tIf payShieldManagementEthernetConfigMethod is set to DHCP, it will be set by the network.\n\t\tIf payShieldManagementEthernetConfigMethod is set to static, it will be set to the payShield's\n\t\tconfigured value.\n\t\tA value of 0.0.0.0 means it was not successfully fetched.")
payShieldAuxiliaryEthernetMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 16, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldAuxiliaryEthernetMacAddress.setStatus('current')
if mibBuilder.loadTexts: payShieldAuxiliaryEthernetMacAddress.setDescription("The auxiliary ethernet interface's MAC address. \n\t\tWill be set to 00:00:00:00:00:00 if not successfully fetched.")
payShieldAuxiliaryEthernetPortSpeed = MibScalar((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 16, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: payShieldAuxiliaryEthernetPortSpeed.setStatus('current')
if mibBuilder.loadTexts: payShieldAuxiliaryEthernetPortSpeed.setDescription('String that describes the speed configured and the actual connection properties.\n\t\tForm is config (actual)\n\t\t       eg: ethernet autoselect (100baseTX full-duplex)')
payShieldFanNumber = MibScalar((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fan1", 1), ("fan2", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: payShieldFanNumber.setStatus('current')
if mibBuilder.loadTexts: payShieldFanNumber.setDescription('Identifies fan1 or fan2.')
payShieldFanState = MibScalar((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stateOK", 1), ("stateFailure", 2), ("stateNotDetected", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: payShieldFanState.setStatus('current')
if mibBuilder.loadTexts: payShieldFanState.setDescription('Provides the state of the fan.')
payShieldPSUNumber = MibScalar((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("psu1", 1), ("psu2", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: payShieldPSUNumber.setStatus('current')
if mibBuilder.loadTexts: payShieldPSUNumber.setDescription('Identifies the power supply unit 1 or 2.')
payShieldPSUState = MibScalar((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stateOK", 1), ("stateFailure", 2), ("stateNotDetected", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: payShieldPSUState.setStatus('current')
if mibBuilder.loadTexts: payShieldPSUState.setDescription('Provides the state of the PSU.')
payShieldBadDataPhysicalPort = MibScalar((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("portHost1", 1), ("portHost2", 2), ("portFICON", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: payShieldBadDataPhysicalPort.setStatus('current')
if mibBuilder.loadTexts: payShieldBadDataPhysicalPort.setDescription('The physical port the bad data was detected on.')
payShieldBadDataProtocol = MibScalar((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("protocolTCP", 1), ("protocolUDP", 2), ("protocolFICON", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: payShieldBadDataProtocol.setStatus('current')
if mibBuilder.loadTexts: payShieldBadDataProtocol.setDescription('The method that bad data detected was transmitted.')
payShieldErrorLogData = MibScalar((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 4, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: payShieldErrorLogData.setStatus('current')
if mibBuilder.loadTexts: payShieldErrorLogData.setDescription('A textual error log entry as stored in the system.')
payShieldBatteryState = MibScalar((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stateOK", 1), ("stateWarning", 2), ("stateFailure", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: payShieldBatteryState.setStatus('current')
if mibBuilder.loadTexts: payShieldBatteryState.setDescription('State of the battery.')
payShieldDiagnosticID = MibScalar((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("diagDES", 1), ("diagAES", 2), ("diagECDSA", 3), ("diagHMAC", 4), ("diagMD5", 5), ("diagSHA", 6), ("diagRSA", 7), ("diagRNG", 8), ("diagRTC", 9), ("diagMemory", 10), ("diagPower", 11), ("diagBattery", 12), ("diagFans", 13), ("diagTemperature", 14), ("diagVoltage", 15), ("diagUDP", 16), ("diagTCP", 17), ("diagFICON", 18)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: payShieldDiagnosticID.setStatus('current')
if mibBuilder.loadTexts: payShieldDiagnosticID.setDescription('Diagnostic identifier as a code.')
payShieldDiagnosticString = MibScalar((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 6, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: payShieldDiagnosticString.setStatus('current')
if mibBuilder.loadTexts: payShieldDiagnosticString.setDescription('Diagnostic identifier as a string.')
payShieldFraudType = MibScalar((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fraudExceededFailuresPerMinute", 1), ("fraudExceededFailuresPerHour", 2), ("fraudExceededAttackLimit", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: payShieldFraudType.setStatus('current')
if mibBuilder.loadTexts: payShieldFraudType.setDescription('Indicates what sort of fraud event took place.')
payShieldAlarmEraseTimeandDate = MibScalar((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 8, 1), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: payShieldAlarmEraseTimeandDate.setStatus('current')
if mibBuilder.loadTexts: payShieldAlarmEraseTimeandDate.setDescription('Indicates the time and date when the erase button was pressed.')
payShieldModifiedSetting = MibScalar((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("settingSecurity", 1), ("settingPCI", 2), ("settingAuditedItems", 3), ("settingEnabledPinblocks", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: payShieldModifiedSetting.setStatus('current')
if mibBuilder.loadTexts: payShieldModifiedSetting.setDescription('Collection of settings whose modifications will trigger a notification.')
payShieldDeviceState = MibScalar((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("stateUnavailable", 1), ("stateOnline", 2), ("stateOffline", 3), ("stateSecure", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: payShieldDeviceState.setStatus('current')
if mibBuilder.loadTexts: payShieldDeviceState.setDescription('Provides the new state of the payShield.')
payShieldTamperCause = MibScalar((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("causeUnavailable", 1), ("causeTemperatureOutOfRange", 2), ("causeBatteryLow", 3), ("causeEraseButtonPressed", 4), ("causeSensorProcessorWatchdog", 5), ("causeSensorProcessorRestart", 6), ("causeVoltageOutOfRange", 7), ("causeMotionDetected", 8), ("causeCaseTampered", 9), ("causePowerLoss", 10)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: payShieldTamperCause.setStatus('current')
if mibBuilder.loadTexts: payShieldTamperCause.setDescription('The cause of the tamper event.')
payShieldTamperDate = MibScalar((1, 3, 6, 1, 4, 1, 4096, 999, 2, 1, 11, 2), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: payShieldTamperDate.setStatus('current')
if mibBuilder.loadTexts: payShieldTamperDate.setDescription('The Date and Time that the tamper event occurred.')
payShieldPowerOnAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4096, 999, 2, 2, 1))
if mibBuilder.loadTexts: payShieldPowerOnAlarm.setStatus('current')
if mibBuilder.loadTexts: payShieldPowerOnAlarm.setDescription('SNMP Trap indicating the unit has been powered up.')
payShieldRestartAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4096, 999, 2, 2, 2))
if mibBuilder.loadTexts: payShieldRestartAlarm.setStatus('deprecated')
if mibBuilder.loadTexts: payShieldRestartAlarm.setDescription('************ THIS NOTIFICATION IS DEPRECATED *************\n\n\t\tSNMP trap generated when the reset button has been pressed.')
payShieldEraseAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4096, 999, 2, 2, 3)).setObjects(("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldAlarmEraseTimeandDate"))
if mibBuilder.loadTexts: payShieldEraseAlarm.setStatus('current')
if mibBuilder.loadTexts: payShieldEraseAlarm.setDescription('SNMP trap indicating that the Erase button was pressed.')
payShieldNewLicenseAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4096, 999, 2, 2, 4))
if mibBuilder.loadTexts: payShieldNewLicenseAlarm.setStatus('current')
if mibBuilder.loadTexts: payShieldNewLicenseAlarm.setDescription('SNMP trap indicating the installation of a new license.')
payShieldNewSoftwareAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4096, 999, 2, 2, 5))
if mibBuilder.loadTexts: payShieldNewSoftwareAlarm.setStatus('current')
if mibBuilder.loadTexts: payShieldNewSoftwareAlarm.setDescription('SNMP trap indicating that new software has been installed.')
payShieldPSUAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4096, 999, 2, 2, 6)).setObjects(("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldPSUNumber"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldPSUState"))
if mibBuilder.loadTexts: payShieldPSUAlarm.setStatus('current')
if mibBuilder.loadTexts: payShieldPSUAlarm.setDescription('SNMP trap indicating a change in the state of a Power supply unit.')
payShieldBatteryAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4096, 999, 2, 2, 7)).setObjects(("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldBatteryState"))
if mibBuilder.loadTexts: payShieldBatteryAlarm.setStatus('current')
if mibBuilder.loadTexts: payShieldBatteryAlarm.setDescription('SNMP trap indicating a change in the state of the Battery.')
payShieldFanAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4096, 999, 2, 2, 8)).setObjects(("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldFanNumber"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldFanState"))
if mibBuilder.loadTexts: payShieldFanAlarm.setStatus('current')
if mibBuilder.loadTexts: payShieldFanAlarm.setDescription('SNMP trap notifying a change in the state of a Fan unit.')
payShieldTamperAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4096, 999, 2, 2, 9)).setObjects(("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldTamperCause"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldTamperDate"))
if mibBuilder.loadTexts: payShieldTamperAlarm.setStatus('current')
if mibBuilder.loadTexts: payShieldTamperAlarm.setDescription('SNMP trap indicating a tamper has been detected. Detected tamper is reported.')
payShieldHostPortBadDataAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4096, 999, 2, 2, 10)).setObjects(("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldBadDataPhysicalPort"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldBadDataProtocol"))
if mibBuilder.loadTexts: payShieldHostPortBadDataAlarm.setStatus('current')
if mibBuilder.loadTexts: payShieldHostPortBadDataAlarm.setDescription('SNMP trap indicating that protocol breaking data has arrived on a port.\n\t\t Indicates which physical interface it arrived on and what protocol was being used.')
payShieldFraudAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4096, 999, 2, 2, 11)).setObjects(("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldFraudType"))
if mibBuilder.loadTexts: payShieldFraudAlarm.setStatus('current')
if mibBuilder.loadTexts: payShieldFraudAlarm.setDescription('SNMP trap that indicates a fraud limit was exceeded.')
payShieldDiagnosticTestFailureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4096, 999, 2, 2, 12)).setObjects(("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldDiagnosticID"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldDiagnosticString"))
if mibBuilder.loadTexts: payShieldDiagnosticTestFailureAlarm.setStatus('current')
if mibBuilder.loadTexts: payShieldDiagnosticTestFailureAlarm.setDescription('SNMP trap indicating that a diagnostic test has failed. Indicates which test failed.')
payShieldErrorlogAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4096, 999, 2, 2, 13)).setObjects(("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldErrorLogData"))
if mibBuilder.loadTexts: payShieldErrorlogAlarm.setStatus('current')
if mibBuilder.loadTexts: payShieldErrorlogAlarm.setDescription('SNMP trap that indicates an error log entry has been filled. Contains the entry.')
payShieldSettingsModifiedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4096, 999, 2, 2, 14)).setObjects(("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldModifiedSetting"))
if mibBuilder.loadTexts: payShieldSettingsModifiedAlarm.setStatus('current')
if mibBuilder.loadTexts: payShieldSettingsModifiedAlarm.setDescription('SNMP trap that indicates a setting of the payShield has been modified.\n\t\tIt includes a payShieldModifiedSetting object which identifies the setting that was changed.')
payShieldDeviceStateAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4096, 999, 2, 2, 15)).setObjects(("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldDeviceState"))
if mibBuilder.loadTexts: payShieldDeviceStateAlarm.setStatus('current')
if mibBuilder.loadTexts: payShieldDeviceStateAlarm.setDescription('SNMP trap that indicates a change in payShield device state.\n\t\tIt includes a payShieldDeviceState object which provides the new state of the payShield.')
payShieldMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 100))
payShieldMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 100, 1))
payShieldMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 100, 2))
payShieldMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 100, 1, 1)).setObjects(("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldDeprecatedObjectGroup"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldDeprecatedNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    payShieldMIBCompliance = payShieldMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: payShieldMIBCompliance.setDescription('******** THIS COMPLIANCE IS DEPRECATED *********\n\n            The compliance statement for SNMP entities which\n            implement the payShield MIB.\n\n            This compliance is deprecated and replaced by\n            payShieldMIBCompliance2.')
payShieldMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 100, 1, 2)).setObjects(("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldObjectGroup"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldAlarmObjectGroup"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    payShieldMIBCompliance2 = payShieldMIBCompliance2.setStatus('current')
if mibBuilder.loadTexts: payShieldMIBCompliance2.setDescription('The compliance statement for SNMP entities which\n            implement the payShield MIB.')
payShieldObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 100, 2, 1)).setObjects(("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldUtilLoad"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldUtilHostCmdVolume"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldUtilEnabled"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldStateDevice"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldStateTamperState"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldStateTamperDate"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldStateTamperCause"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldStateFanSerialNum"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldStateFanState"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldStatePSUSerialNum"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldStatePSUState"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldStateBattery"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldLmkNumLoaded"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldLmkNumTestLmksLoaded"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldLmkNumOldLmksLoaded"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldLmkStatusLoaded"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldLmkStatusAuth"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldLmkStatusNumAuthActivities"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldLmkStatusScheme"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldLmkStatusAlgorithm"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldLmkStatusLiveTest"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldLmkStatusComments"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldLmkStatusCheckDigits"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldCommsMgmtConsoleState"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldCommsMgmtGuiState"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldCommsHostTCPServer"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldCommsHostUDPServer"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldCommsHostFICONServer"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldCommsHostPortEthernet1"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldCommsHostPortEthernet2"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldCommsHostPortFICON"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldSystemDateAndTime"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldSystemSerialNum"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldSystemModel"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldFraudPinVerifyLimitsExceeded"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldFraudPinAttackLimitsExceeded"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldVersionSoftwareBaseRelease"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldVersionSoftwareRevision"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldVersionSoftwareBuildNumber"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldVersionSoftwareCPLDVersion"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldVersionSoftwareSPVersion"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldVersionSoftwareSPBootVersion"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldVersionSoftwareBootstrapVersion"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldLicensingPerformanceModel"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldLicensingPackage"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldLicensingOptionalLicenseCount"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldLicensingOptionalLicensesList"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldLicensingCryptoAlgorithmCount"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldLicensingCryptoAlgorithmList"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldEnabledHostCommandsCount"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldEnabledHostCommandsList"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldLogsErrorlogTotalCount"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldLogsErrorlogMaxLength"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldLogsAuditlogTotalCount"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldLogsAuditlogMaxLength"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHealthDiagSelfTestTimeOfDay"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHealthDiagSelfTestOK"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHealthDiagSelfTestCount"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHealthDiagSelfTestList"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHealthHealthCheckEnabled"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHealthCheckCountsStartTime"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHealthCheckCountsEndTime"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHealthCheckCountsRebootCount"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHealthCheckCountsTamperCount"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHealthCheckCountsPinFailuresMinuteLimit"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHealthCheckCountsPinFailuresHourLimit"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHealthCheckCountsPinAttackLimitExceeded"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionEthernetEnabled"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionFICONEnabled"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionEthernetIfCount"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionEthernetSSLEnabled"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionEthernetACLsEnabled"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionEthernetUDPEnabled"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionEthernetTCPEnabled"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionEthernetMaxTCPConnections"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionEthernetTCPKeepalive"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionEthernetWellKnownPortTCP"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionEthernetWellKnownPortTLS"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionEthernetConfigured"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionEthernetInterfaceNumber"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionEthernetConfigMethod"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionEthernetHostName"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionEthernetIpAddress"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionEthernetSubnetMask"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionEthernetGateway"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionEthernetMacAddress"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionEthernetPortSpeed"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionNumberOfConnectionsUsed"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionEthernetLoadCount"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionFICONControlUnitImage"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionFICONControlUnitAddress"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostConnectionFICONMIH"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldManagementEthernetEnabled"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldManagementEthernetConfigMethod"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldManagementEthernetNetworkName"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldManagementEthernetIpAddress"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldManagementEthernetSubnetMask"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldManagementEthernetGateway"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldManagementEthernetMacAddress"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldManagementEthernetPortSpeed"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldPrinterLFCRReversed"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldPrinterTimeout"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldPrinterDelay"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldPrinterReport"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldSettingsPCICompliant"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldSettingsHashSecuritySetting"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldSettingsHashGeneralSetting"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldSettingsHashConfigureCommand"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldSettingsHashAuditSetting"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldSettingsHashLMK"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldAuxiliaryEthernetEnabled"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldAuxiliaryEthernetConfigMethod"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldAuxiliaryEthernetNetworkName"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldAuxiliaryEthernetIpAddress"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldAuxiliaryEthernetSubnetMask"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldAuxiliaryEthernetGateway"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldAuxiliaryEthernetMacAddress"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldAuxiliaryEthernetPortSpeed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    payShieldObjectGroup = payShieldObjectGroup.setStatus('current')
if mibBuilder.loadTexts: payShieldObjectGroup.setDescription('Group of all payShield MIB objects.')
payShieldDeprecatedObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 100, 2, 2)).setObjects(("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldVersionSoftwareHSMCoreAPIVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    payShieldDeprecatedObjectGroup = payShieldDeprecatedObjectGroup.setStatus('deprecated')
if mibBuilder.loadTexts: payShieldDeprecatedObjectGroup.setDescription('Group of deprecated payShield MIB objects.')
payShieldAlarmObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 100, 2, 3)).setObjects(("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldFanNumber"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldFanState"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldPSUNumber"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldPSUState"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldBadDataPhysicalPort"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldBadDataProtocol"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldErrorLogData"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldBatteryState"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldDiagnosticID"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldDiagnosticString"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldFraudType"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldAlarmEraseTimeandDate"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldModifiedSetting"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldDeviceState"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldTamperCause"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldTamperDate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    payShieldAlarmObjectGroup = payShieldAlarmObjectGroup.setStatus('current')
if mibBuilder.loadTexts: payShieldAlarmObjectGroup.setDescription('Group of objects used in payShield notifications.')
payShieldNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 100, 2, 4)).setObjects(("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldPowerOnAlarm"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldEraseAlarm"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldNewLicenseAlarm"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldNewSoftwareAlarm"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldPSUAlarm"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldBatteryAlarm"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldFanAlarm"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldTamperAlarm"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldHostPortBadDataAlarm"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldFraudAlarm"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldDiagnosticTestFailureAlarm"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldErrorlogAlarm"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldSettingsModifiedAlarm"), ("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldDeviceStateAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    payShieldNotificationGroup = payShieldNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: payShieldNotificationGroup.setDescription('Group of payShield notifications.')
payShieldDeprecatedNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 4096, 2, 2, 10000, 100, 2, 5)).setObjects(("THALES-ESECURITY-PAYSHIELD-MIB", "payShieldRestartAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    payShieldDeprecatedNotificationGroup = payShieldDeprecatedNotificationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: payShieldDeprecatedNotificationGroup.setDescription('Group of deprecated payShield notifications.')
mibBuilder.exportSymbols("THALES-ESECURITY-PAYSHIELD-MIB", payShieldHostConnectionEthernetMacAddress=payShieldHostConnectionEthernetMacAddress, payShieldHostConnectionEthernetTCPEnabled=payShieldHostConnectionEthernetTCPEnabled, payShieldHostConnectionFICONMIH=payShieldHostConnectionFICONMIH, payShieldStatePSUState=payShieldStatePSUState, payShieldSettingsHashConfigureCommand=payShieldSettingsHashConfigureCommand, payShieldAlarmBattery=payShieldAlarmBattery, payShieldAuxiliaryEthernetConfigMethod=payShieldAuxiliaryEthernetConfigMethod, payShieldAlarmEraseTimeandDate=payShieldAlarmEraseTimeandDate, payShieldDeprecatedObjectGroup=payShieldDeprecatedObjectGroup, payShieldVersionSoftwareSPBootVersion=payShieldVersionSoftwareSPBootVersion, payShieldModifiedSetting=payShieldModifiedSetting, payShieldAuxiliaryEthernetSubnetMask=payShieldAuxiliaryEthernetSubnetMask, payShieldTamperAlarm=payShieldTamperAlarm, payShieldFanAlarm=payShieldFanAlarm, payShieldPrinterLFCRReversed=payShieldPrinterLFCRReversed, payShieldLogsAuditlog=payShieldLogsAuditlog, payShieldStatePSU=payShieldStatePSU, payShieldHealthCheckCountsPinFailuresHourLimit=payShieldHealthCheckCountsPinFailuresHourLimit, payShieldFraudPinVerifyLimitsExceeded=payShieldFraudPinVerifyLimitsExceeded, payShieldUtilEnabled=payShieldUtilEnabled, payShieldLmkStatusAuth=payShieldLmkStatusAuth, payShieldNewLicenseAlarm=payShieldNewLicenseAlarm, payShieldHostConnectionFICON=payShieldHostConnectionFICON, payShieldHealthCheckCountsTamperCount=payShieldHealthCheckCountsTamperCount, PYSNMP_MODULE_ID=payShieldMIB, payShieldDiagnosticString=payShieldDiagnosticString, payShieldUtil=payShieldUtil, payShieldMIBGroups=payShieldMIBGroups, payShieldVersionSoftwareSPVersion=payShieldVersionSoftwareSPVersion, payShieldVersionSoftwareRevision=payShieldVersionSoftwareRevision, payShieldStateFanTable=payShieldStateFanTable, payShieldMIBConformance=payShieldMIBConformance, payshield=payshield, payShieldManagementEthernetConfigMethod=payShieldManagementEthernetConfigMethod, payShieldPrinterTimeout=payShieldPrinterTimeout, payShieldPowerOnAlarm=payShieldPowerOnAlarm, payShieldDiagnosticID=payShieldDiagnosticID, payShieldAuxiliaryEthernetEnabled=payShieldAuxiliaryEthernetEnabled, payShieldHealth=payShieldHealth, payShieldPrinterReport=payShieldPrinterReport, payShieldHostConnectionEthernetSubnetMask=payShieldHostConnectionEthernetSubnetMask, payShieldComms=payShieldComms, payShieldLogsAuditlogTotalCount=payShieldLogsAuditlogTotalCount, payShieldHostConnectionEthernetConfigMethod=payShieldHostConnectionEthernetConfigMethod, payShieldHostConnectionNumberOfConnectionsUsed=payShieldHostConnectionNumberOfConnectionsUsed, payShieldBadDataProtocol=payShieldBadDataProtocol, payShieldHostConnectionEthernet=payShieldHostConnectionEthernet, payShieldVersionSoftwareBootstrapVersion=payShieldVersionSoftwareBootstrapVersion, payShieldEraseAlarm=payShieldEraseAlarm, payShieldCommsHostPortEthernet1=payShieldCommsHostPortEthernet1, payShieldHostConnectionFICONEnabled=payShieldHostConnectionFICONEnabled, payShieldAuxiliaryEthernetMacAddress=payShieldAuxiliaryEthernetMacAddress, payShieldNotificationGroup=payShieldNotificationGroup, payShieldLmkStatusLoaded=payShieldLmkStatusLoaded, payShieldHealthCheckCountsPinFailuresMinuteLimit=payShieldHealthCheckCountsPinFailuresMinuteLimit, payShieldBadDataPhysicalPort=payShieldBadDataPhysicalPort, payShieldDiagnosticTestFailureAlarm=payShieldDiagnosticTestFailureAlarm, payShieldLicensingOptionalLicensesList=payShieldLicensingOptionalLicensesList, payShieldHealthCheckCountsPinAttackLimitExceeded=payShieldHealthCheckCountsPinAttackLimitExceeded, payShieldHostConnection=payShieldHostConnection, payShieldUtilHostCmdVolume=payShieldUtilHostCmdVolume, payShieldFraudAlarm=payShieldFraudAlarm, payShieldHostConnectionEthernetConfigured=payShieldHostConnectionEthernetConfigured, payShieldStatePSUTable=payShieldStatePSUTable, payShieldDeviceState=payShieldDeviceState, payShieldHealthDiagSelfTest=payShieldHealthDiagSelfTest, payShieldVersionSoftwareBaseRelease=payShieldVersionSoftwareBaseRelease, payShieldAlarmFraud=payShieldAlarmFraud, payShieldStateDevice=payShieldStateDevice, payShieldVersionSoftwareDeploymentVersion=payShieldVersionSoftwareDeploymentVersion, payShieldCommsHostPortEthernet2=payShieldCommsHostPortEthernet2, payShieldHealthDiagSelfTestTimeOfDay=payShieldHealthDiagSelfTestTimeOfDay, payShieldSettingsHashLMK=payShieldSettingsHashLMK, payShieldStatePSUEntry=payShieldStatePSUEntry, payShieldAuxiliaryEthernetGateway=payShieldAuxiliaryEthernetGateway, payShieldDeprecatedNotificationGroup=payShieldDeprecatedNotificationGroup, payShieldHostConnectionFICONControlUnitAddress=payShieldHostConnectionFICONControlUnitAddress, payShieldMIB=payShieldMIB, payShieldVersionSoftwareHSMCoreAPIVersion=payShieldVersionSoftwareHSMCoreAPIVersion, payShieldLicensingCryptoAlgorithmCount=payShieldLicensingCryptoAlgorithmCount, payShieldLogsErrorlogTotalCount=payShieldLogsErrorlogTotalCount, payShieldHostConnectionEthernetIpAddress=payShieldHostConnectionEthernetIpAddress, payShieldLmkStatusScheme=payShieldLmkStatusScheme, payShieldLmkStatusNumAuthActivities=payShieldLmkStatusNumAuthActivities, payShieldCommsHostPortFICON=payShieldCommsHostPortFICON, payShieldState=payShieldState, payShieldHealthDiagSelfTestCount=payShieldHealthDiagSelfTestCount, payShieldAuxiliaryEthernetPortSpeed=payShieldAuxiliaryEthernetPortSpeed, payShieldRestartAlarm=payShieldRestartAlarm, payShieldNewSoftwareAlarm=payShieldNewSoftwareAlarm, payShieldAlarmSettingsModified=payShieldAlarmSettingsModified, payShieldLicensingOptionalLicenseCount=payShieldLicensingOptionalLicenseCount, payShieldSystemDateAndTime=payShieldSystemDateAndTime, payShieldLmkNumLoaded=payShieldLmkNumLoaded, payShieldHostConnectionEthernetEntry=payShieldHostConnectionEthernetEntry, payShieldAlarmDiagnostic=payShieldAlarmDiagnostic, payShieldSystemModel=payShieldSystemModel, payShieldHostConnectionEthernetLoadCount=payShieldHostConnectionEthernetLoadCount, thalesEsecurityDevs=thalesEsecurityDevs, payShieldStateFanSerialNum=payShieldStateFanSerialNum, payShieldLogsErrorlog=payShieldLogsErrorlog, payShieldPrinterDelay=payShieldPrinterDelay, payShieldFanNumber=payShieldFanNumber, payShieldStateFanState=payShieldStateFanState, payShieldHostConnectionEthernetIndex=payShieldHostConnectionEthernetIndex, payShieldMIBCompliance2=payShieldMIBCompliance2, payShieldHealthDiagSelfTestOK=payShieldHealthDiagSelfTestOK, payShieldMIBCompliances=payShieldMIBCompliances, payShieldHostConnectionEthernetWellKnownPortTCP=payShieldHostConnectionEthernetWellKnownPortTCP, thalesEsecurityMibs=thalesEsecurityMibs, payShieldNotifications=payShieldNotifications, payShieldStateBattery=payShieldStateBattery, payShieldLmkNumTestLmksLoaded=payShieldLmkNumTestLmksLoaded, payShieldVersion=payShieldVersion, payShieldLmk=payShieldLmk, payShieldStateTamper=payShieldStateTamper, payShieldCommsHostUDPServer=payShieldCommsHostUDPServer, payShieldManagementEthernetNetworkName=payShieldManagementEthernetNetworkName, payShieldDeviceStateAlarm=payShieldDeviceStateAlarm, payShieldStateTamperDate=payShieldStateTamperDate, payShieldStateTamperCause=payShieldStateTamperCause, payShieldFanState=payShieldFanState, payShieldHostConnectionEthernetMaxTCPConnections=payShieldHostConnectionEthernetMaxTCPConnections, payShieldHealthHealthCheckEnabled=payShieldHealthHealthCheckEnabled, payShieldLicensingPerformanceModel=payShieldLicensingPerformanceModel, payShieldSettingsPCICompliant=payShieldSettingsPCICompliant, payShieldPSUNumber=payShieldPSUNumber, payShieldHealthCheckCountsRebootCount=payShieldHealthCheckCountsRebootCount, payShieldAuxiliaryEthernetNetworkName=payShieldAuxiliaryEthernetNetworkName, payShieldErrorLogData=payShieldErrorLogData, payShieldHostConnectionEthernetWellKnownPortTLS=payShieldHostConnectionEthernetWellKnownPortTLS, payShieldSettings=payShieldSettings, notifications=notifications, payShieldSettingsHashAuditSetting=payShieldSettingsHashAuditSetting, payShieldHealthDiagSelfTestList=payShieldHealthDiagSelfTestList, thalesEsecurity=thalesEsecurity, payShieldLmkNumOldLmksLoaded=payShieldLmkNumOldLmksLoaded, payShieldCommsHostFICONServer=payShieldCommsHostFICONServer, payShieldHostConnectionEthernetHostName=payShieldHostConnectionEthernetHostName, payShieldManagementEthernetSubnetMask=payShieldManagementEthernetSubnetMask, payShieldCommsHostTCPServer=payShieldCommsHostTCPServer, payShieldTamperDate=payShieldTamperDate, payShieldCommsMgmtConsoleState=payShieldCommsMgmtConsoleState, payShieldHostConnectionEthernetEnabled=payShieldHostConnectionEthernetEnabled, payShieldHealthCheckCountsStartTime=payShieldHealthCheckCountsStartTime, raProductMibs=raProductMibs, payShieldLmkStatusCheckDigits=payShieldLmkStatusCheckDigits, payShieldCommsHost=payShieldCommsHost, payShieldAlarmPSU=payShieldAlarmPSU, payShieldSettingsHashGeneralSetting=payShieldSettingsHashGeneralSetting, payShieldFraudType=payShieldFraudType, payShieldSettingsModifiedAlarm=payShieldSettingsModifiedAlarm, payShieldCommsHostPort=payShieldCommsHostPort, payShieldHostConnectionEthernetSSLEnabled=payShieldHostConnectionEthernetSSLEnabled, payShieldVersionSoftwareFirmwareVersion=payShieldVersionSoftwareFirmwareVersion, payShieldAuxiliaryEthernetIpAddress=payShieldAuxiliaryEthernetIpAddress, payShieldSettingsHashSecuritySetting=payShieldSettingsHashSecuritySetting, payShieldPrinter=payShieldPrinter, payShieldFraud=payShieldFraud, payShieldStateFanEntry=payShieldStateFanEntry, payShieldAlarmObjects=payShieldAlarmObjects, payShieldSystem=payShieldSystem, payShieldLmkStatusAlgorithm=payShieldLmkStatusAlgorithm, payShieldLmkStatusComments=payShieldLmkStatusComments, payShieldSystemSerialNum=payShieldSystemSerialNum, payShieldManagementEthernetEnabled=payShieldManagementEthernetEnabled, payShieldFraudPinAttackLimitsExceeded=payShieldFraudPinAttackLimitsExceeded, payShieldEnabledHostCommands=payShieldEnabledHostCommands, payShieldLicensingPackage=payShieldLicensingPackage, payShieldLogsAuditlogMaxLength=payShieldLogsAuditlogMaxLength, payShieldHostConnectionFICONControlUnitImage=payShieldHostConnectionFICONControlUnitImage, payShieldEnabledHostCommandsList=payShieldEnabledHostCommandsList, payShieldMIBCompliance=payShieldMIBCompliance, payShieldUtilLoad=payShieldUtilLoad, payShieldAlarmErase=payShieldAlarmErase, payShieldStateTamperState=payShieldStateTamperState, payShieldStatePSUSerialNum=payShieldStatePSUSerialNum, payShieldBatteryAlarm=payShieldBatteryAlarm, payShieldHostPortBadDataAlarm=payShieldHostPortBadDataAlarm, payShieldObjectGroup=payShieldObjectGroup, payShieldManagementEthernet=payShieldManagementEthernet, payShieldManagementEthernetMacAddress=payShieldManagementEthernetMacAddress, payShieldHealthCheckCounts=payShieldHealthCheckCounts, payShieldHostConnectionEthernetTable=payShieldHostConnectionEthernetTable, payShieldPSUState=payShieldPSUState, payShieldVersionSoftwareBuildNumber=payShieldVersionSoftwareBuildNumber, payShieldHostConnectionEthernetTCPKeepalive=payShieldHostConnectionEthernetTCPKeepalive, payShieldHostConnectionEthernetIfCount=payShieldHostConnectionEthernetIfCount, payShieldStatePSUIndex=payShieldStatePSUIndex, payShieldTraps=payShieldTraps, payShieldManagement=payShieldManagement, payShieldErrorlogAlarm=payShieldErrorlogAlarm, payShieldHostConnectionEthernetPortSpeed=payShieldHostConnectionEthernetPortSpeed, payShieldBatteryState=payShieldBatteryState, payShieldLmkStatusEntry=payShieldLmkStatusEntry, payShieldAlarmErrorLog=payShieldAlarmErrorLog, payShieldCommsMgmt=payShieldCommsMgmt, payShieldLogsErrorlogMaxLength=payShieldLogsErrorlogMaxLength, payShieldManagementEthernetIpAddress=payShieldManagementEthernetIpAddress, payShieldManagementEthernetPortSpeed=payShieldManagementEthernetPortSpeed, payShieldHostConnectionEthernetUDPEnabled=payShieldHostConnectionEthernetUDPEnabled, payShieldStateFanIndex=payShieldStateFanIndex, payShieldStateFan=payShieldStateFan, payShieldVersionSoftwareCPLDVersion=payShieldVersionSoftwareCPLDVersion, payShieldPSUAlarm=payShieldPSUAlarm, payShieldAlarmStateChange=payShieldAlarmStateChange, payShieldAlarmObjectGroup=payShieldAlarmObjectGroup, payShieldLicensingCryptoAlgorithmList=payShieldLicensingCryptoAlgorithmList, payShieldManagementEthernetGateway=payShieldManagementEthernetGateway, payShieldTamperCause=payShieldTamperCause, payShieldEnabledHostCommandsCount=payShieldEnabledHostCommandsCount, payShieldLicensing=payShieldLicensing, payShieldLmkStatusIndex=payShieldLmkStatusIndex, payShieldLogs=payShieldLogs, payShieldHostConnectionEthernetGateway=payShieldHostConnectionEthernetGateway, payShieldHealthCheckCountsEndTime=payShieldHealthCheckCountsEndTime, payShieldHostConnectionEthernetACLsEnabled=payShieldHostConnectionEthernetACLsEnabled, payShieldAlarmFans=payShieldAlarmFans, payShieldCommsMgmtGuiState=payShieldCommsMgmtGuiState, payShieldHostConnectionEthernetInterfaceNumber=payShieldHostConnectionEthernetInterfaceNumber, payShieldAlarmTamper=payShieldAlarmTamper, payShieldLmkStatusTable=payShieldLmkStatusTable, payShieldLmkStatusLiveTest=payShieldLmkStatusLiveTest, payShieldAuxiliaryEthernet=payShieldAuxiliaryEthernet, payShieldAlarmBadPortData=payShieldAlarmBadPortData)
