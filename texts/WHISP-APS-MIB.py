#
# PySNMP MIB module WHISP-APS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/cambium/WHISP-APS-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 09:27:47 2024
# On host fv-az1146-179 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
IpAddress, Counter32, Integer32, MibIdentifier, Unsigned32, iso, ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, Bits, TimeTicks, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "Integer32", "MibIdentifier", "Unsigned32", "iso", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "Bits", "TimeTicks", "Counter64")
PhysAddress, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "MacAddress", "TextualConvention")
whispBoxRFPhysicalRadioEntry, whispBoxEsn = mibBuilder.importSymbols("WHISP-BOX-MIBV2-MIB", "whispBoxRFPhysicalRadioEntry", "whispBoxEsn")
whispModules, whispBox, whispAps = mibBuilder.importSymbols("WHISP-GLOBAL-REG-MIB", "whispModules", "whispBox", "whispAps")
WhispMACAddress, WhispLUID, EventString = mibBuilder.importSymbols("WHISP-TCV2-MIB", "WhispMACAddress", "WhispLUID", "EventString")
whispApsMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 161, 19, 1, 1, 12))
if mibBuilder.loadTexts: whispApsMibModule.setLastUpdated('200304150000Z')
if mibBuilder.loadTexts: whispApsMibModule.setOrganization('Cambium Networks')
if mibBuilder.loadTexts: whispApsMibModule.setContactInfo('Cambium Networks Support\n        email: support@cambiumnetworks.com')
if mibBuilder.loadTexts: whispApsMibModule.setDescription('This module contains MIB definitions for APs.')
whispApsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1))
whispApsLink = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2))
whispApsLinkTestConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1))
whispApsLinkTestResult = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2))
whispApsGPS = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3))
whispApsEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5))
whispApsRegEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 1))
whispGPSEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 2))
whispApsDfsEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 3))
whispApRegulatoryEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 4))
whispApRFOverloadEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 5))
whispApsMumimoTrialEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 6))
whispApsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6))
whispApsFrUtlStats = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12))
whispApsFrUtlStatsIntervalLow = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1))
whispApsFrUtlStatsIntervalMedium = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2))
whispApsFrUtlStatsIntervalHigh = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3))
whispApsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7))
whispApsDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9))
whispApsControls = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 11))
whispApsLQI = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13))
whispApsRFConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10))
gpsInput = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("generateSyncSignal", 0), ("syncToReceivedSignalTimingPort", 1), ("syncToReceivedSignalPowerPort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gpsInput.setStatus('obsolete')
if mibBuilder.loadTexts: gpsInput.setDescription('The variable is deprecated.  See gpsInput in whispBoxConfig.')
rfFreqCarrier = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("wired", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfFreqCarrier.setStatus('deprecated')
if mibBuilder.loadTexts: rfFreqCarrier.setDescription('The primary transmit frequency.\n\t\t\t\t\t\t\tAlso see radioFreqCarrier.')
apLinkSpeed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLinkSpeed.setStatus('obsolete')
if mibBuilder.loadTexts: apLinkSpeed.setDescription('The variable is deprecated.')
dwnLnkData = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dwnLnkData.setStatus('deprecated')
if mibBuilder.loadTexts: dwnLnkData.setDescription('This attribute is deprecated.  Please see radioDownlinkPercent.')
highPriorityUpLnkPct = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highPriorityUpLnkPct.setStatus('obsolete')
if mibBuilder.loadTexts: highPriorityUpLnkPct.setDescription('Percentage of uplink slots for high priority data.')
numUAckSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numUAckSlots.setStatus('obsolete')
if mibBuilder.loadTexts: numUAckSlots.setDescription('Total number of upstream ack slots.')
uAcksReservHigh = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uAcksReservHigh.setStatus('obsolete')
if mibBuilder.loadTexts: uAcksReservHigh.setDescription('Total number of upstream high priority ack slots')
numDAckSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numDAckSlots.setStatus('obsolete')
if mibBuilder.loadTexts: numDAckSlots.setDescription('Total number of downstream ack slots.')
dAcksReservHigh = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dAcksReservHigh.setStatus('obsolete')
if mibBuilder.loadTexts: dAcksReservHigh.setDescription('Total number of high priority downstream ack slots.')
numCtlSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numCtlSlots.setStatus('obsolete')
if mibBuilder.loadTexts: numCtlSlots.setDescription('This OID is deprecated, please use numCtlSlotsHW.')
numCtlSlotsReserveHigh = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numCtlSlotsReserveHigh.setStatus('obsolete')
if mibBuilder.loadTexts: numCtlSlotsReserveHigh.setDescription('Total number of High priority upstream control (contention) slots.')
upLnkDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 12), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upLnkDataRate.setStatus('current')
if mibBuilder.loadTexts: upLnkDataRate.setDescription('Sustained uplink bandwidth cap.')
upLnkLimit = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 13), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upLnkLimit.setStatus('current')
if mibBuilder.loadTexts: upLnkLimit.setDescription('Burst uplink bandwidth cap.')
dwnLnkDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 14), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dwnLnkDataRate.setStatus('current')
if mibBuilder.loadTexts: dwnLnkDataRate.setDescription('Sustained downlink bandwidth cap.')
dwnLnkLimit = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 15), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dwnLnkLimit.setStatus('current')
if mibBuilder.loadTexts: dwnLnkLimit.setDescription('Burst downlink bandwidth cap.')
sectorID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sectorID.setStatus('current')
if mibBuilder.loadTexts: sectorID.setDescription('Advertise sector number for an AP.\n                            Not supported on 450 platform.')
maxRange = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 17), Integer32()).setUnits('miles').setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxRange.setStatus('deprecated')
if mibBuilder.loadTexts: maxRange.setDescription('This attribute is deprecated.  Please see radioMaxRange.')
airLinkSecurity = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("standard", 0), ("desEnhanced", 1), ("desEnhancedAndAuthentication", 2), ("authenticationIfAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airLinkSecurity.setStatus('obsolete')
if mibBuilder.loadTexts: airLinkSecurity.setDescription('Air Link Security.\n            desEnhancedAndAuthentication(2) and authenticationIfAvailable(3)\n            are only for APAS.')
berMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("berStream", 0), ("noBerStream", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: berMode.setStatus('obsolete')
if mibBuilder.loadTexts: berMode.setDescription('AP backgroup BER mode.')
asIP1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asIP1.setStatus('obsolete')
if mibBuilder.loadTexts: asIP1.setDescription('Obsoleted. Configure with whispApsDNS.authServer1.')
asIP2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asIP2.setStatus('obsolete')
if mibBuilder.loadTexts: asIP2.setDescription('Obsoleted. Configure with whispApsDNS.authServer2.')
asIP3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asIP3.setStatus('obsolete')
if mibBuilder.loadTexts: asIP3.setDescription('Obsoleted. Configure with whispApsDNS.authServer3.')
lanIpAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanIpAp.setStatus('current')
if mibBuilder.loadTexts: lanIpAp.setDescription('LAN IP.')
lanMaskAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanMaskAp.setStatus('current')
if mibBuilder.loadTexts: lanMaskAp.setDescription('LAN subnet mask.')
defaultGwAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultGwAp.setStatus('current')
if mibBuilder.loadTexts: defaultGwAp.setDescription('Default gateway')
privateIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: privateIp.setStatus('current')
if mibBuilder.loadTexts: privateIp.setDescription('Private IP.')
gpsTrap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("gpsTrapDisabled", 0), ("gpsTrapEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gpsTrap.setStatus('current')
if mibBuilder.loadTexts: gpsTrap.setDescription('Variable to enable/disable GPS sync/out-sync traps.')
regTrap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("regTrapDisabled", 0), ("regTrapEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regTrap.setStatus('current')
if mibBuilder.loadTexts: regTrap.setDescription('Variable to enable/disable registration complete/lost traps.')
txSpreading = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("txSpreadingDisabled", 0), ("txSpreadingEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSpreading.setStatus('current')
if mibBuilder.loadTexts: txSpreading.setDescription('Variable to enable/disable Transmit Frame Spreading.  This option is for FSK only.')
apBeaconInfo = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enableApBeaconInfo", 0), ("disableApBeaconInfo", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apBeaconInfo.setStatus('current')
if mibBuilder.loadTexts: apBeaconInfo.setDescription('Variable to enable/disable displaying AP beacon info through AP eval.')
authMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("authenticationDisabled", 0), ("authenticationRequiredBam", 1), ("authenticationRequiredAP", 3), ("authenticationRequiredAAA", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authMode.setStatus('current')
if mibBuilder.loadTexts: authMode.setDescription('Variable to enable/disable authentication. The authentication optional mode\n            is for APs only. This variable can only be set when authentication feature\n            is enabled.  Setting it to 1 will use a BAM server for authentication of SMs.  Setting\n            it to 2 will make use of the Authentication Key on the AP for authenticating SMs.  The\n            keys must match on SM and AP in order for the SM to be authenticated in this mode.')
authKeyAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authKeyAp.setStatus('current')
if mibBuilder.loadTexts: authKeyAp.setDescription('Authentication key. It should be 32 character long.  Can be used on MultiPoint AP if AP Authentication mode is selected.\n            Otherwise, it is used on Backhauls.')
encryptionMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("encryptionDisabled", 0), ("encryptionEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: encryptionMode.setStatus('current')
if mibBuilder.loadTexts: encryptionMode.setDescription('Variable to enable/disable encryption.')
ntpServerIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 34), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServerIp.setStatus('obsolete')
if mibBuilder.loadTexts: ntpServerIp.setDescription('Obsoleted.  Configure with whispApsDNS.ntpServer1, whispApsDNS.ntpServer2, and whispApsDNS.ntpServer3.')
broadcastRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastRetryCount.setStatus('current')
if mibBuilder.loadTexts: broadcastRetryCount.setDescription('Broadcast Repeat Count : Range 0 -- 2. For APs.')
encryptDwBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: encryptDwBroadcast.setStatus('current')
if mibBuilder.loadTexts: encryptDwBroadcast.setDescription('To enable or disable Encrypted Downlink Broadcast. For FSK APs.')
updateAppAddress = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 37), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: updateAppAddress.setStatus('current')
if mibBuilder.loadTexts: updateAppAddress.setDescription('Update Application Address.')
dfsConfig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfsConfig.setStatus('obsolete')
if mibBuilder.loadTexts: dfsConfig.setDescription('To configure proper regions for Dynamic Frequency Shifting. For 5.2/5.4/5.7 GHz radios.')
vlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanEnable.setStatus('current')
if mibBuilder.loadTexts: vlanEnable.setDescription('To enable or disable VLAN.')
configSource = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("bam", 0), ("sm", 1), ("bamsm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSource.setStatus('current')
if mibBuilder.loadTexts: configSource.setDescription('To configure CIR, MIR and VLAN through SM or BAM.')
apRateAdapt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("onex", 0), ("onextwox", 1), ("onextwoxthreex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRateAdapt.setStatus('obsolete')
if mibBuilder.loadTexts: apRateAdapt.setDescription('To enable or disable double rate.')
numCtlSlotsHW = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numCtlSlotsHW.setStatus('deprecated')
if mibBuilder.loadTexts: numCtlSlotsHW.setDescription('This attribute is deprecated.  Please see radioControlSlots.')
displayAPEval = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: displayAPEval.setStatus('current')
if mibBuilder.loadTexts: displayAPEval.setDescription('If enable, it allows display of AP Eval Data at the SM.')
smIsolation = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("smIsolationDisable", 0), ("smIsolationDrop", 1), ("smIsolationFwd", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smIsolation.setStatus('current')
if mibBuilder.loadTexts: smIsolation.setDescription('(0) -- Disable SM Isolation.\n\t\t\t\t            (1) -- Enable SM Isolation by blocking SM destined packets.\n\t\t\t\t            (2) -- Enable SM Isolation by forwarding SM packets upstream.')
ipAccessFilterEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAccessFilterEnable.setStatus('current')
if mibBuilder.loadTexts: ipAccessFilterEnable.setDescription('To enable or disable IP access filtering to Management functions.\n            (0) - IP access will be allowed from all addresses.\n            (1) - IP access will be controlled using allowedIPAccess1-3 entries.')
allowedIPAccess1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 46), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccess1.setStatus('current')
if mibBuilder.loadTexts: allowedIPAccess1.setDescription('Allow access to AP Management from this IP.\n            0 is default setting to allow from all IPs.')
allowedIPAccess2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 47), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccess2.setStatus('current')
if mibBuilder.loadTexts: allowedIPAccess2.setDescription('Allow access to AP Management from this IP.\n            0 is default setting to allow from all IPs.')
allowedIPAccess3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 48), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccess3.setStatus('current')
if mibBuilder.loadTexts: allowedIPAccess3.setDescription('Allow access to AP Management from this IP.\n            0 is default setting to allow from all IPs.')
tslBridging = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tslBridging.setStatus('current')
if mibBuilder.loadTexts: tslBridging.setDescription('1 = We are performing Translation Bridging 0 = We are not.')
untranslatedArp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: untranslatedArp.setStatus('current')
if mibBuilder.loadTexts: untranslatedArp.setDescription('1 = We are sending untranslated ARP response. 0 = We are not.')
limitFreqBand900 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitFreqBand900.setStatus('current')
if mibBuilder.loadTexts: limitFreqBand900.setDescription('1 = We are limiting the freq band of 900 radios.  0 = We are not.')
txPwrLevel = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPwrLevel.setStatus('obsolete')
if mibBuilder.loadTexts: txPwrLevel.setDescription("Deprecated, use 'transmitterOP' instead.")
rfFreqCaralt1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfFreqCaralt1.setStatus('current')
if mibBuilder.loadTexts: rfFreqCaralt1.setDescription('First DFS Alternate RF Frequency. (Only available for DFS radios)  Used\n            as a backup frequency when Radar is detected on DFS enabled Radios.\n            The frequencies are:\n\n            5.4 radios:(5475,5485,5490 OFDM only),5495,5500,5505,5510,5515,5520,5525,\n                   5530,5535,5540,5545,5550,5555,5560,5565,5570,5575,5580,5585,5590,5595,\n                   5600,5605,5610,5615,5620,5625,5630,5635,5640,5645,5650,5655,5660,5665,\n                   5670,5675,5680,5685,5690,5695,5700,5705,(5710,5715 OFDM Only).\n\n            (5.7 Platform 10 (SAL) radios with non-connectorized antennas do not support DFS)\n\n            5.7 radios:5745,5750,5755,5760,5765,5770,5775,5780,5785,5790,5795,5800,5805.\n            5.7 radios with ISM enabled :5735,5740,5745,5750,5755,5760,5765,5770,5775,\n                   5780,5785,5790,5795,5800,5805,5810,5815,5820,5825,5830,5835,5840.\n            0:  None.')
rfFreqCaralt2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfFreqCaralt2.setStatus('current')
if mibBuilder.loadTexts: rfFreqCaralt2.setDescription('Second DFS Alternate RF Frequency. (Only available for DFS radios)  Used\n            as a backup frequency when Radar is detected on DFS enabled Radios.\n            The frequencies are:\n\n            5.4 radios:(5475,5485,5490 OFDM only),5495,5500,5505,5510,5515,5520,5525,\n                   5530,5535,5540,5545,5550,5555,5560,5565,5570,5575,5580,5585,5590,5595,\n                   5600,5605,5610,5615,5620,5625,5630,5635,5640,5645,5650,5655,5660,5665,\n                   5670,5675,5680,5685,5690,5695,5700,5705,(5710,5715 OFDM Only).\n\n            (5.7 Platform 10 (SAL) radios with non-connectorized antennas do not support DFS)\n\n            5.7 radios:5745,5750,5755,5760,5765,5770,5775,5780,5785,5790,5795,5800,5805.\n            5.7 radios with ISM enabled :5735,5740,5745,5750,5755,5760,5765,5770,5775,\n                   5780,5785,5790,5795,5800,5805,5810,5815,5820,5825,5830,5835,5840.\n            0:  None.')
scheduleWhitening = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduleWhitening.setStatus('current')
if mibBuilder.loadTexts: scheduleWhitening.setDescription('1 = Schedule Whitening allowed.  0 = Schedule Whitening not allowed.  This option is for FSK only')
remoteSpectrumAnalysisDuration = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteSpectrumAnalysisDuration.setStatus('current')
if mibBuilder.loadTexts: remoteSpectrumAnalysisDuration.setDescription('Value in seconds for a remote spectrum analysis on an SM. Range is 10-1000 seconds.')
remoteSpectrumAnalyzerLUID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 239))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteSpectrumAnalyzerLUID.setStatus('current')
if mibBuilder.loadTexts: remoteSpectrumAnalyzerLUID.setDescription('Get will always return 0.\n                            Set will start Remote Spectrum Analyzer on specified LUID.\n                            *Warning* This will cause the SM to disconnect from the AP!\n                            You will lose the session for the specified duration!\n                            If general error was returned then the LUID does not have an active session, or the\n                            SM does not support Remote Spectrum Analysis.')
bhReReg = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bhReReg.setStatus('current')
if mibBuilder.loadTexts: bhReReg.setDescription('Allows BHS re-registration every 24 hours. Enable allows re-registration and Disable does not. 24 Hour Encryption Refresh.')
dlnkBcastCIR = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlnkBcastCIR.setStatus('current')
if mibBuilder.loadTexts: dlnkBcastCIR.setDescription('Downlink Broadcast CIR (kbps)')
verifyGPSChecksum = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("doNotVerifyGPSMessageChecksum", 0), ("verifyGPSMessageChecksum", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: verifyGPSChecksum.setStatus('current')
if mibBuilder.loadTexts: verifyGPSChecksum.setDescription('Enable/Disable verification of GPS message checksums.')
apVlanOverride = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apVlanOverride.setStatus('current')
if mibBuilder.loadTexts: apVlanOverride.setDescription("Setting this option will cause an AP to retain its VLAN settings when turning it into an SM.  It will be mostly helpful for\n                       \t\trunning spectrum analysis on the AP.  Since doing that requires the AP to be turned into an SM, enabling this option will\n                       \t\tallow you to keep the AP's VLAN configuration in place while the AP is running as an SM.")
dhcpRelayAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("fullRelay", 1), ("option82Only", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayAgentEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayAgentEnable.setDescription("Enable or Disable MultiPoint AP acting as DHCP Relay Agent for all SMs and Clients underneath it.\n            (0) - Relay Agent disabled - SM/CPE devices will perform DHCP normally\n            (1) - Relay Agent enabled - AP will intercept DHCP DISCOVER message from SM and CPE, insert Option 82 containing SM's MAC address, and forward request to specified DHCP server.")
dhcpRelayAgentSrvrIP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 63), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayAgentSrvrIP.setStatus('obsolete')
if mibBuilder.loadTexts: dhcpRelayAgentSrvrIP.setDescription('Obsoleted.  Configure with whispApsDNS.dhcprServer.')
colorCodeRescanTimer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 43200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCodeRescanTimer.setStatus('current')
if mibBuilder.loadTexts: colorCodeRescanTimer.setDescription('Time in minutes for the subscriber to begin the idle timer.  This timer\n\t\t\t\t\t\twill begin as soon as a session is started.\n\t\t\t\t\t\tThis only fires if the device is in session with a non-primary color code.\n\t\t\t\t\t\tA value of zero (0) disables this timer\n\t\t\t\t\t\t(MultiPoint system Only)')
colorCodeRescanIdleTimer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCodeRescanIdleTimer.setStatus('current')
if mibBuilder.loadTexts: colorCodeRescanIdleTimer.setDescription('Time in minutes for the subscriber to check for an idle state.  If an period has pass where no unicast RF traffic has occured (idle),\n                        then the subscriber will begin to rescan.\n                        This timer will wait until the timer set in colorCodeRescanTimer has expired before beginning.\n                        This timer only fires if the device is in session with a non-primary color code.\n                        A value of zero (0) mean to rescan without waiting for idle.\n                        (MultiPoint system Only)')
authKeyOptionAP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("useDefault", 0), ("useKeySet", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authKeyOptionAP.setStatus('current')
if mibBuilder.loadTexts: authKeyOptionAP.setDescription('This option is for Multipoint APs only.  This option will only be used if Authentication Mode is set\n            to AP Pre-Shared Key.\n            0 - Use default key.\n            1 - Use set key.')
asIP4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 67), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asIP4.setStatus('obsolete')
if mibBuilder.loadTexts: asIP4.setDescription('Obsoleted. Configure with whispApsDNS.authServer4.')
asIP5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 68), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asIP5.setStatus('obsolete')
if mibBuilder.loadTexts: asIP5.setDescription('Obsoleted. Configure with whispApsDNS.authServer5.')
onlyAllowVer95OrAbove = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("onlyAllowVer95OrAboveDisabled", 0), ("onlyAllowVer95OrAboveEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onlyAllowVer95OrAbove.setStatus('current')
if mibBuilder.loadTexts: onlyAllowVer95OrAbove.setDescription('Only allow subscribers that are running version 9.5 or above.  Any radio that has a version below 9.5 will not be\n                        allowed to register.')
apRxDelay = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 70), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRxDelay.setStatus('current')
if mibBuilder.loadTexts: apRxDelay.setDescription('This is used for engineering debug and needs to be removed or moved to eng MIB before releasing the MIB.')
qinqEthType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("x88a8", 0), ("x8100", 1), ("x9100", 2), ("x9200", 3), ("x9300", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqEthType.setStatus('current')
if mibBuilder.loadTexts: qinqEthType.setDescription('EtherType for QinQ (802.1ad) outer tag (S-Tag). 0x88a8 by default.')
sMTxPowerControl = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTxPowerControl.setStatus('current')
if mibBuilder.loadTexts: sMTxPowerControl.setDescription('Enable/Disable AP control of SM TX power.\n                            Engineering use only.')
fskSMRcvTargetLvl = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, -40))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fskSMRcvTargetLvl.setStatus('obsolete')
if mibBuilder.loadTexts: fskSMRcvTargetLvl.setDescription('Desired SM Receive Level at AP (dBm, Range -40dBm to -80 dBm).\n                        FSK only.')
authSharedSecret1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 74), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSharedSecret1.setStatus('current')
if mibBuilder.loadTexts: authSharedSecret1.setDescription('Authentication Server 1 Shared Secret.')
authSharedSecret2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 75), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSharedSecret2.setStatus('current')
if mibBuilder.loadTexts: authSharedSecret2.setDescription('Authentication Server 2 Shared Secret.')
authSharedSecret3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 76), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSharedSecret3.setStatus('current')
if mibBuilder.loadTexts: authSharedSecret3.setDescription('Authentication Server 3 Shared Secret.')
whispUsrAuthSharedSecret1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 79), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispUsrAuthSharedSecret1.setStatus('obsolete')
if mibBuilder.loadTexts: whispUsrAuthSharedSecret1.setDescription('Obsoleted. Use whispApsConfig.authSharedSecret1.')
whispUsrAuthSharedSecret2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 80), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispUsrAuthSharedSecret2.setStatus('obsolete')
if mibBuilder.loadTexts: whispUsrAuthSharedSecret2.setDescription('Obsoleted. Use whispApsConfig.authSharedSecret2.')
whispUsrAuthSharedSecret3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 81), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispUsrAuthSharedSecret3.setStatus('obsolete')
if mibBuilder.loadTexts: whispUsrAuthSharedSecret3.setDescription('Obsoleted. Use whispApsConfig.authSharedSecret3.')
whispUsrAcctSvr1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 82), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispUsrAcctSvr1.setStatus('obsolete')
if mibBuilder.loadTexts: whispUsrAcctSvr1.setDescription('Obsoleted.  Use whispApsDNS.authServer1.')
whispUsrAcctSvr2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 83), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispUsrAcctSvr2.setStatus('obsolete')
if mibBuilder.loadTexts: whispUsrAcctSvr2.setDescription('Obsoleted.  Use whispApsDNS.authServer2.')
whispUsrAcctSvr3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 84), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispUsrAcctSvr3.setStatus('obsolete')
if mibBuilder.loadTexts: whispUsrAcctSvr3.setDescription('Obsoleted.  Use whispApsDNS.authServer3.')
whispUsrAuthPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("md5", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispUsrAuthPhase1.setStatus('deprecated')
if mibBuilder.loadTexts: whispUsrAuthPhase1.setDescription('Select method for User Authentication. This is deprecated.\n            \t\t\t\tPlease use whispUsrAuth.')
whispWebUseAuthServer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("useRADIUSAccountingSvr", 0), ("useRADIUSAuthenticationSvr", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispWebUseAuthServer.setStatus('obsolete')
if mibBuilder.loadTexts: whispWebUseAuthServer.setDescription('Obsoleted.  Use whispApsDNS.authServer[1-3].')
dropSession = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 87), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dropSession.setStatus('current')
if mibBuilder.loadTexts: dropSession.setDescription('SM/BHS MAC Address to drop session from the AP/BHM.')
uGPSPower = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uGPSPower.setStatus('current')
if mibBuilder.loadTexts: uGPSPower.setDescription('Enable or Disable power supply to Universal GPS module (UGPS capable APs only, when GPS_output_enable is NOT set).')
timeZone = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 124))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZone.setStatus('current')
if mibBuilder.loadTexts: timeZone.setDescription('Set the timezone offset for the radio.  This change takes affect dynamically.\n            The available timezones are:\n             0 : (UTC) UTC - Coordinated Universal Time\n             1 : (UTC) GMT - Greenwich Mean Time\n             2 : (UTC) WET - Western European Time\n             3 : (UTC-12) BIT - Baker Island Time\n             4 : (UTC-11) SST - Samoa Standard Time\n             5 : (UTC-10) CKT - Cook Island Time\n             6 : (UTC-10) HAST - Hawaii-Aleutian Standard Time\n             7 : (UTC-10) HST - Hawaii Standard Time\n             8 : (UTC-10) TAHT - Tahiti Time\n             9 : (UTC-09:30) MIT - Marquesas Islands Time\n             10 : (UTC-09) AKST - Alaska Standard Time\n             11 : (UTC-09) GIT - Gambier Island Time\n             12 : (UTC-09) HADT - Hawaii-Aleutian Daylight Time\n             13 : (UTC-08) AKDT - Alaska Daylight Time\n             14 : (UTC-08) CIST - Clipperton Island Standard Time\n             15 : (UTC-08) PST - Pacific Standard Time (North America)\n             16 : (UTC-07) MST - Mountain Standard Time (North America)\n             17 : (UTC-07) PDT - Pacific Daylight Time (North America)\n             18 : (UTC-06) CST - Central Standard Time (North America)\n             19 : (UTC-06) EAST - Easter Island Standard Time\n             20 : (UTC-06) GALT - Galapagos Time\n             21 : (UTC-06) MDT - Mountain Daylight Time (North America)\n             22 : (UTC-05) CDT - Central Daylight Time (North America)\n             23 : (UTC-05) COT - Colombia Time\n             24 : (UTC-05) ECT - Ecuador Time\n             25 : (UTC-05) EST - Eastern Standard Time (North America)\n             26 : (UTC-04:30) VET - Venezuelan Standard Time\n             27 : (UTC-04) AST - Atlantic Standard Time\n             28 : (UTC-04) BOT - Bolivia Time\n             29 : (UTC-04) CLT - Chile Standard Time\n             30 : (UTC-04) COST - Colombia Summer Time\n             31 : (UTC-04) ECT - Eastern Caribbean Time (does not recognise DST)\n             32 : (UTC-04) EDT - Eastern Daylight Time (North America)\n             33 : (UTC-04) FKT - Falkland Islands Time\n             34 : (UTC-04) GYT - Guyana Time\n             35 : (UTC-03:30) NST - Newfoundland Standard Time\n             36 : (UTC-03:30) NT - Newfoundland Time\n             37 : (UTC-03) ADT - Atlantic Daylight Time\n             38 : (UTC-03) ART - Argentina Time\n             39 : (UTC-03) BRT - Brasilia Time\n             40 : (UTC-03) CLST - Chile Summer Time\n             41 : (UTC-03) FKST - Falkland Islands Summer Time\n             42 : (UTC-03) GFT - French Guiana Time\n             43 : (UTC-03) UYT - Uruguay Standard Time\n             44 : (UTC-02:30) NDT - Newfoundland Daylight Time\n             45 : (UTC-02) GST - South Georgia and the South Sandwich Islands\n             46 : (UTC-02) UYST - Uruguay Summer Time\n             47 : (UTC-01) AZOST - Azores Standard Time\n             48 : (UTC-01) CVT - Cape Verde Time\n             49 : (UTC+01) BST - British Summer Time (British Standard Time from Feb 1968 to Oct 1971)\n             50 : (UTC+01) CET - Central European Time\n             51 : (UTC+01) DFT - AIX specific equivalent of Central European Time\n             52 : (UTC+01) IST - Irish Summer Time\n             53 : (UTC+01) WAT - West Africa Time\n             54 : (UTC+01) WEDT - Western European Daylight Time\n             55 : (UTC+01) WEST - Western European Summer Time\n             56 : (UTC+02) CAT - Central Africa Time\n             57 : (UTC+02) CEDT - Central European Daylight Time\n             58 : (UTC+02) CEST - Central European Summer Time\n             59 : (UTC+02) EET - Eastern European Time\n             60 : (UTC+02) IST - Israel Standard Time\n             61 : (UTC+02) SAST - South African Standard Time\n             62 : (UTC+03) AST - Arab Standard Time (Kuwait, Riyadh)\n             63 : (UTC+03) AST - Arabic Standard Time (Baghdad)\n             64 : (UTC+03) EAT - East Africa Time\n             65 : (UTC+03) EEDT - Eastern European Daylight Time\n             66 : (UTC+03) EEST - Eastern European Summer Time\n             67 : (UTC+03) MSK - Moscow Standard Time\n             68 : (UTC+03:30) IRST - Iran Standard Time\n             69 : (UTC+04) AMT - Armenia Time\n             70 : (UTC+04) AST - Arabian Standard Time (Abu Dhabi, Muscat)\n             71 : (UTC+04) AZT - Azerbaijan Time\n             72 : (UTC+04) GET - Georgia Standard Time\n             73 : (UTC+04) MSD - Moscow Summer Time\n             74 : (UTC+04) MUT - Mauritius Time\n             75 : (UTC+04) RET - Reunion Time\n             76 : (UTC+04) SAMT - Samara Time\n             77 : (UTC+04) SCT - Seychelles Time\n             78 : (UTC+04:30) AFT - Afghanistan Time\n             79 : (UTC+05) AMST - Armenia Summer Time\n             80 : (UTC+05) HMT - Heard and McDonald Islands Time\n             81 : (UTC+05) PKT - Pakistan Standard Time\n             82 : (UTC+05) YEKT - Yekaterinburg Time\n             83 : (UTC+05:30) IST - Indian Standard Time\n             84 : (UTC+05:30) SLT - Sri Lanka Time\n             85 : (UTC+05:45) NPT - Nepal Time\n             86 : (UTC+06) BIOT - British Indian Ocean Time\n             87 : (UTC+06) BST - Bangladesh Standard Time\n             88 : (UTC+06) BTT - Bhutan Time\n             89 : (UTC+06) OMST - Omsk Time\n             90 : (UTC+06:30) CCT - Cocos Islands Time\n             91 : (UTC+06:30) MST - Myanmar Standard Time\n             92 : (UTC+07) CXT - Christmas Island Time\n             93 : (UTC+07) ICT - Indochina Time\n             94 : (UTC+07) KRAT - Krasnoyarsk Time\n             95 : (UTC+07) THA - Thailand Standard Time\n             96 : (UTC+08) ACT - ASEAN Common Time\n             97 : (UTC+08) AWST - Australian Western Standard Time\n             98 : (UTC+08) BDT - Brunei Time\n             99 : (UTC+08) CST - China Standard Time\n             100 : (UTC+08) HKT - Hong Kong Time\n             101 : (UTC+08) IRKT - Irkutsk Time\n             102 : (UTC+08) MST - Malaysian Standard Time\n             103 : (UTC+08) PST - Philippine Standard Time\n             104 : (UTC+08) SST - Singapore Standard Time\n             105 : (UTC+09) AWDT - Australian Western Daylight Time\n             106 : (UTC+09) JST - Japan Standard Time\n             107 : (UTC+09) KST - Korea Standard Time\n             108 : (UTC+09) YAKT - Yakutsk Time\n             109 : (UTC+09:30) ACST - Australian Central Standard Time\n             110 : (UTC+10) AEST - Australian Eastern Standard Time\n             111 : (UTC+10) ChST - Chamorro Standard Time\n             112 : (UTC+10) VLAT - Vladivostok Time\n             113 : (UTC+10:30) ACDT - Australian Central Daylight Time\n             114 : (UTC+10:30) LHST - Lord Howe Standard Time\n             115 : (UTC+11) AEDT - Australian Eastern Daylight Time\n             116 : (UTC+11) MAGT - Magadan Time\n             117 : (UTC+11) SBT - Solomon Islands Time\n             118 : (UTC+11:30) NFT - Norfolk Time[1]\n             119 : (UTC+12) FJT - Fiji Time\n             120 : (UTC+12) GILT - Gilbert Island Time\n             121 : (UTC+12) PETT - Kamchatka Time\n             122 : (UTC+12:45) CHAST - Chatham Standard Time\n             123 : (UTC+13) PHOT - Phoenix Island Time\n             124 : (UTC+14) LINT - Line Islands Time')
ofdmSMRcvTargetLvl = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, -40))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ofdmSMRcvTargetLvl.setStatus('current')
if mibBuilder.loadTexts: ofdmSMRcvTargetLvl.setDescription('Desired SM Receive Level at AP (dBm, Range -40dBm to -80 dBm). As of release 12.1, on MIMO systems this is a combined power level value.')
radiusPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 91), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusPort.setStatus('current')
if mibBuilder.loadTexts: radiusPort.setDescription('Port used to connect to the RADIUS server.  Default is 1812.')
radiusAcctPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 92), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctPort.setStatus('current')
if mibBuilder.loadTexts: radiusAcctPort.setDescription('Port used to for RADIUS Accounting.  Default is 1813.')
lastSesStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 93), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastSesStatsReset.setStatus('current')
if mibBuilder.loadTexts: lastSesStatsReset.setDescription('Displays the timestamp of last reset of session stats or None otherwise.')
resetSesStats = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 94), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noReset", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetSesStats.setStatus('current')
if mibBuilder.loadTexts: resetSesStats.setDescription('Resets the session stats if true.')
rfOLTrap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 95), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfOLTrap.setStatus('current')
if mibBuilder.loadTexts: rfOLTrap.setDescription('Enable/Disable SNMP Trap for when RF Overload exceeds configured Threshold level.')
rfOLThreshold = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfOLThreshold.setStatus('current')
if mibBuilder.loadTexts: rfOLThreshold.setDescription('Percent of packet overload in the RF Downlink where SNMP is generated and sent to Network Manager.')
rfOLEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfOLEnable.setStatus('current')
if mibBuilder.loadTexts: rfOLEnable.setDescription('Enable/Disable Throughput RF Overload Monitoring monitoring.')
actionListFilename = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 98), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionListFilename.setStatus('current')
if mibBuilder.loadTexts: actionListFilename.setDescription('Name of the file that contains the Action List for Auto update commands from CNUT')
enableAutoupdate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableAutoupdate.setStatus('current')
if mibBuilder.loadTexts: enableAutoupdate.setDescription("Enables/Disables auto-update of the SM's under an AP")
accountingSmReAuthInterval = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 100), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accountingSmReAuthInterval.setStatus('current')
if mibBuilder.loadTexts: accountingSmReAuthInterval.setDescription('Select Interval for Reauthentication of SM')
syslogDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableDomain", 0), ("appendDomain", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogDomainNameAppend.setStatus('deprecated')
if mibBuilder.loadTexts: syslogDomainNameAppend.setDescription('This attribute is deprecated. Use syslogDomainNameAppend in whispBoxAttributesGroup')
syslogServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 102), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerAddr.setStatus('deprecated')
if mibBuilder.loadTexts: syslogServerAddr.setDescription('This attribute is deprecated. Use syslogServerAddr in whispBoxAttributesGroup')
syslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 103), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerPort.setStatus('current')
if mibBuilder.loadTexts: syslogServerPort.setDescription('This attribute is deprecated. Use syslogServerPort in whispBoxAttributesGroup')
syslogXmitAP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogXmitAP.setStatus('current')
if mibBuilder.loadTexts: syslogXmitAP.setDescription('Enables/Disables transmission of Syslogs from AP/BHM')
syslogXmitSMs = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogXmitSMs.setStatus('current')
if mibBuilder.loadTexts: syslogXmitSMs.setDescription('Enables/Disables transmission of Syslogs from connected SMs/BHS. This can be over-ridden by the setting on individual SMs/ the BHS.')
accountingInterimUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 106), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accountingInterimUpdateInterval.setStatus('current')
if mibBuilder.loadTexts: accountingInterimUpdateInterval.setDescription('Select Interval for Interim Updates')
gpsOutputEn = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gpsOutputEn.setStatus('current')
if mibBuilder.loadTexts: gpsOutputEn.setDescription('Enable or Disable GPS sync output enable.')
removeIdleSMs = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("stopped", 0), ("start", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: removeIdleSMs.setStatus('current')
if mibBuilder.loadTexts: removeIdleSMs.setDescription("Setting this to a value 1 will remove all SMs which are in Idle state from AP's Session list.")
lastTimeIdleSMsRemoved = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 109), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastTimeIdleSMsRemoved.setStatus('current')
if mibBuilder.loadTexts: lastTimeIdleSMsRemoved.setDescription("Displays the timestamp of last removal of Idle SMs from AP's Session list")
userAuthSharedSecret1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 110), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthSharedSecret1.setStatus('current')
if mibBuilder.loadTexts: userAuthSharedSecret1.setDescription('User Authentication Server 1 Shared Secret.')
userAuthSharedSecret2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 111), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthSharedSecret2.setStatus('current')
if mibBuilder.loadTexts: userAuthSharedSecret2.setDescription('User Authentication Server 2 Shared Secret.')
userAuthSharedSecret3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 112), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthSharedSecret3.setStatus('current')
if mibBuilder.loadTexts: userAuthSharedSecret3.setDescription('User Authentication Server 3 Shared Secret.')
trapDelayAfterBootup = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 113), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDelayAfterBootup.setStatus('current')
if mibBuilder.loadTexts: trapDelayAfterBootup.setDescription('Delays sending of SNMP traps after radio boots up for this many number of seconds.')
radioMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 206), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("mimoOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioMode.setStatus('obsolete')
if mibBuilder.loadTexts: radioMode.setDescription('This OID is obsolete.')
rfTelnetAccess = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 207), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfTelnetAccess.setStatus('current')
if mibBuilder.loadTexts: rfTelnetAccess.setDescription('Allows/prohibits uplink Telnet access (SM->AP).')
upLnkMaxBurstDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 208), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upLnkMaxBurstDataRate.setStatus('current')
if mibBuilder.loadTexts: upLnkMaxBurstDataRate.setDescription('Maximum burst uplink rate.')
dwnLnkMaxBurstDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 209), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dwnLnkMaxBurstDataRate.setStatus('current')
if mibBuilder.loadTexts: dwnLnkMaxBurstDataRate.setDescription('Maximum burst downlink rate.')
rfPPPoEPADIForwarding = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 210), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfPPPoEPADIForwarding.setStatus('current')
if mibBuilder.loadTexts: rfPPPoEPADIForwarding.setDescription('Enables/disables forwarding of PPPoE PADI packets from AP to SM.')
allowedIPAccessNMLength1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 211), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccessNMLength1.setStatus('current')
if mibBuilder.loadTexts: allowedIPAccessNMLength1.setDescription('Length of the network mask to apply to the AllowedIPAddress when assessing if access is allowed')
allowedIPAccessNMLength2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 212), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccessNMLength2.setStatus('current')
if mibBuilder.loadTexts: allowedIPAccessNMLength2.setDescription('Length of the network mask to apply to the AllowedIPAddress when assessing if access is allowed')
allowedIPAccessNMLength3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 213), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccessNMLength3.setStatus('current')
if mibBuilder.loadTexts: allowedIPAccessNMLength3.setDescription('Length of the network mask to apply to the AllowedIPAddress when assessing if access is allowed')
bridgeFloodUnknownsEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 214), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeFloodUnknownsEnable.setStatus('current')
if mibBuilder.loadTexts: bridgeFloodUnknownsEnable.setDescription('Forward unicast packets with an unknown address to all SMs. This can significantly reduce downlink throughput.\n\t\t\t\t            (0) - Drop unknown unicast packets.\n\t\t\t\t            (1) - Forward unknown unicast packets to all SMs.')
berModSelect = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 215), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("qpsk", 0), ("qam-16", 1), ("qam-64", 2), ("qam-256", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: berModSelect.setStatus('current')
if mibBuilder.loadTexts: berModSelect.setDescription('The modulation the AP generates BER at. 0 for QPSK, 1 for 16-QAM, 2 for 64-QAM, and 3 for 256-QAM.')
remoteSpectrumAnalyzerScanBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 216), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 2, 4))).clone(namedValues=NamedValues(("bandwidth5MHz", 0), ("bandwidth10MHz", 1), ("bandwidth15MHz", 3), ("bandwidth20MHz", 2), ("bandwidth30MHz", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteSpectrumAnalyzerScanBandwidth.setStatus('current')
if mibBuilder.loadTexts: remoteSpectrumAnalyzerScanBandwidth.setDescription('Scanning Bandwidth used for the Remote Spectrum Analyzer.  Only available on PMP 450.')
multicastVCDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 217), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 5, 7, 8, 9, 4, 10, 11, 12))).clone(namedValues=NamedValues(("disable", 0), ("rate2XmimoB", 5), ("rate4XmimoB", 7), ("rate6XmimoB", 8), ("rate8XmimoB", 9), ("rate1XmimoA", 4), ("rate2XmimoA", 10), ("rate4XmimoA", 11), ("rate6XmimoA", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVCDataRate.setStatus('current')
if mibBuilder.loadTexts: multicastVCDataRate.setDescription('Enables and selects the data rate of the Multicast VC.\n                            If disabled, multicast messages are sent using the broadcast VC.\n                            This VC does not automatically rate adapt.\n                            Note: SMs that cannot receive at the selected rate will receive no multicast messages.')
dlnkMcastCIR = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 218), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlnkMcastCIR.setStatus('current')
if mibBuilder.loadTexts: dlnkMcastCIR.setDescription('Downlink Multicast CIR (kbps)')
multicastRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 219), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastRetryCount.setStatus('current')
if mibBuilder.loadTexts: multicastRetryCount.setDescription('Multicast Repeat Count : Range 0 - 2. For APs.')
apConfigAdjacentChanSupport = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 220), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apConfigAdjacentChanSupport.setStatus('current')
if mibBuilder.loadTexts: apConfigAdjacentChanSupport.setDescription('Used to enable or disable adjacent channel support.\n                        This could be needed when there is no guard band between co-located APs.\n                        Only available for APs in 3 GHz, 4.9 GHz and all 5 GHz frequency bands. \n                        For 3 GHz, this caps SMs to max transmit power of 23 dBm.\n                        When disabled, allows 3 GHz SMs to max out transmit power at 25 dBm.\n                        For 4.9-5.9 GHz, this caps 450b SMs to max transmit power of 25 dBm.\n                        When disabled, allows 4.9-5.9 GHz 450b SMs to max out transmit power at 27 dBm.')
pmp430InteropMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 221), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mimoa", 0), ("siso", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmp430InteropMode.setStatus('current')
if mibBuilder.loadTexts: pmp430InteropMode.setDescription('When the AP talks to a PMP 430 it can do so in either MIMO-A or SISO mode.\n                            0 = MIMO-A\n                            1 = SISO\n                            Only applies to PMP 450 AP at 5 GHz. \n                            By default in 13.2 the AP talks in MIMO-A to PMP 430 SISO SMs.\n                            Setting this to a 1 will enable SISO mode to PMP 430 SISO SMs, as it was in 13.1.3 and before.')
framePeriod = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 223), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("twoPointFiveMs", 0), ("fiveMs", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: framePeriod.setStatus('current')
if mibBuilder.loadTexts: framePeriod.setDescription('Changes frame period to 2.5 ms or 5ms.\n                            Note: If set to 5 ms, only SM/BHS from 13.3 and onward will be able to register.\n                            Only on PMP and PTP 450.\n                            Not available in all regions.')
enableRadiusDynAuth = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 224), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableDynAuth", 0), ("enableDynAuth", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableRadiusDynAuth.setStatus('current')
if mibBuilder.loadTexts: enableRadiusDynAuth.setDescription('This option can be used to enable Radius Dynamic Authorization Extensions.Both CoA, which change the SM config parameters from the Radius server while an SM is already in session and Disconnect Message are supported. \n            This option will only be used if Authentication mode is set to Radius AAA.\n            0 - Disable Radius Dynamic Authorization Extension.\n            1 - Enable Radius Dynamic Authorization Extension.')
pmp430SMRegistration = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 225), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("allow", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmp430SMRegistration.setStatus('current')
if mibBuilder.loadTexts: pmp430SMRegistration.setDescription('Option to allow/disallow PMP 430 SMs to register to this AP.\n                        \tWhen disabled PMP 430 SMs registrations will be rejected.')
disableAuthForICCSM = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 226), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disableAuthForICCSM.setStatus('current')
if mibBuilder.loadTexts: disableAuthForICCSM.setDescription('Bypass Authentication for ICC SMs')
onlyAllowPMP450iSMRegistration = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 228), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("only450i", 0), ("all", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onlyAllowPMP450iSMRegistration.setStatus('current')
if mibBuilder.loadTexts: onlyAllowPMP450iSMRegistration.setDescription('Option to limit SM registration to only allow PMP 450i devices or allow all devices (450i/450/430) to register.\n\t\t\t\t\t\t\tPMP 430 SM registration can be further limited by the pmp430SMRegistration OID if desired.\n\t\t\t\t\t\t\tSetting this to only450i will force an Auth Fail registration failure when a PMP 450 or PMP 430 SM device\n\t\t\t\t\t\t\ttries to register.\n                        \tThis option only applies to PMP 450i AP devices.')
pmp450430LegacyMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 229), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmp450430LegacyMode.setStatus('current')
if mibBuilder.loadTexts: pmp450430LegacyMode.setDescription('Option to put the PMP 450b/450i/450m into a Legacy mode for communicating with PMP 450 SMs running SW older than 13.3 and PMP 430 SMs running SW older than 13.4.1.\n                        \tEnabling this option will have an impact on sector throughput performance so should only be enabled to allow upgrading of the mixed sector.\n                        \t450m will operate in SU-MIMO Mode.')
pagerRejectFilterSelect = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 230), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerRejectFilterSelect.setStatus('current')
if mibBuilder.loadTexts: pagerRejectFilterSelect.setDescription('Enable or disable the Pager filter which can filter out Pager signals interfering in the 900 MHz band.\n                            NOTE: Frequencies 920 MHz and above will not work when enabled.\n                            Only applicable to 900 MHz devices.')
freeRunGPSSyncBypass = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 231), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: freeRunGPSSyncBypass.setStatus('current')
if mibBuilder.loadTexts: freeRunGPSSyncBypass.setDescription('Enable to allow Free Run to begin immediately after radio bootup.  Normally, Free Run is only allowed\n                        after GPS sync has been established at least once, then lost.')
useAPManagementVIDForICCSM = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 232), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useAPManagementVIDForICCSM.setStatus('current')
if mibBuilder.loadTexts: useAPManagementVIDForICCSM.setDescription('When enabled, SM connected via ICC uses APs MVID instead of its own.')
frameAlignmentLegacyMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 233), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("mode1", 1), ("mode2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frameAlignmentLegacyMode.setStatus('current')
if mibBuilder.loadTexts: frameAlignmentLegacyMode.setDescription('Option to adjust the frame alignment for compatibility with different GPS sync sources and software versions.\n                        \tPlease see user guide for more information.\n                        \tNot applicable to 3 GHz radios running with 5ms frame, nor PMP 450m.')
noRebootFreqChange = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 234), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("noreboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: noRebootFreqChange.setStatus('current')
if mibBuilder.loadTexts: noRebootFreqChange.setDescription('Enable/Disable option to change frequency without rebooting.\n                            Engineering use only.')
mumimoTrialMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 236), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mumimoTrialMode.setStatus('current')
if mibBuilder.loadTexts: mumimoTrialMode.setDescription('Enable MU-MIMO, Trial Mode units will decrement until units are exhausted or Trial Mode is disabled.\n                            Disable MU-MIMO, radio is still functional with SU-MIMO operation. Trial Mode units will not decrement.                   \n                            450m only.')
prioritizeMgmtData = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 247), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioritizeMgmtData.setStatus('current')
if mibBuilder.loadTexts: prioritizeMgmtData.setDescription('0 - Management data will use low priority VC.\n                           1 - If high priority VC is configured will use that, otherwise will use low priority VC')
whispRegStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispRegStatus.setStatus('obsolete')
if mibBuilder.loadTexts: whispRegStatus.setDescription('This shows the registration status of a link.[This variable is deprecated, please refer whispBoxLink OIDs]')
linkTestLUID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestLUID.setStatus('deprecated')
if mibBuilder.loadTexts: linkTestLUID.setDescription('LUID selection for Link Test. Valid range: 2-255. [This variable is deprecated, please refer whispBoxLink OIDs]')
linkTestDuration = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestDuration.setStatus('deprecated')
if mibBuilder.loadTexts: linkTestDuration.setDescription('Duration for the Link Test. Valid range: 2-10 seconds. [This variable is deprecated, please refer whispBoxLink OIDs]')
linkTestAction = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("stopped", 0), ("start", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestAction.setStatus('deprecated')
if mibBuilder.loadTexts: linkTestAction.setDescription("Setting value 1 will initiate link test. Note that trying to set 0 will not stop the test.\n            In fact it will return an error message. The value of 0 just indicates the idle state\n            meaning no test is running or the current test is done.\n            That's why the word stopped is used and not the action verb stop.\n\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]")
linkTestPktLength = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestPktLength.setStatus('deprecated')
if mibBuilder.loadTexts: linkTestPktLength.setDescription('Packet length for Link Test. Valid range: 64-1714 bytes. [This variable is deprecated, please refer whispBoxLink OIDs]')
linkTestMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 0, 1, 2, 3))).clone(namedValues=NamedValues(("linktestwithmultipleVCs", 4), ("linktestwithoutbridging", 0), ("linktestwithbridging", 1), ("linktestwithbridgingandmir", 2), ("extrapolatedlinktest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestMode.setStatus('deprecated')
if mibBuilder.loadTexts: linkTestMode.setDescription('Link Test Mode\n                            0 = Link Test without Bridging\n                            1 = Link Test with Bridging\n                            2 = Link Test with Bridging and MIR\n                            3 = Extrapolated Link Test (send only a few packets measuring their quality and extrapolate out the throughput)\n                            This is an estimation of the throughput based upon the modulation, efficiency, and data slots available.\n                            It intended to provide a basic link test test without impacting service for the sector.\n                            Extrapolated Link Test is not available for FSK radios.\n                            4 = Link Test with Multiple VCs (traffic sent to all registered VCs, or specified VCs) - 450m only\n                            [This Variable is deprecated. Please refer whispBoxLink OIDs]')
linkTestSNRCalculation = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestSNRCalculation.setStatus('deprecated')
if mibBuilder.loadTexts: linkTestSNRCalculation.setDescription('Enable or disable Signal to Noise Ratio (SNR) calculations during a Link Test.\n                            Enabling(1) will calulate SNR on all receiving packets.\n                            Due to load on CPU, will slightly degrade packet per second capabilities.\n                            Only applicable to GenII OFDM products and up.\n\t\t\t\t\t\t\t[This Variable is deprecated. Please refer whispBoxLink OIDs]')
linkTestWithDualPath = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("lowpriorityvconly", 0), ("highandlowpriorityvcs", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestWithDualPath.setStatus('deprecated')
if mibBuilder.loadTexts: linkTestWithDualPath.setDescription('Link Test with:\n                            0 = Low Priority VC only\n                            1 = High and Low Priority VCs\n\t\t\t\t\t\t\t[This variable is deprecated. Please refer whispBoxLink OIDs]')
linkTestNumPkt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestNumPkt.setStatus('deprecated')
if mibBuilder.loadTexts: linkTestNumPkt.setDescription('Number of packets to send. Valid range: 0-64 where 0 will\n            flood the link for the duration of the test.\n\t\t\t[This variable is deprecated. Please refer whispBoxLink OIDs]')
linkTestForceModulation = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normalRateAdapt", 0), ("forceMaxModulation", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestForceModulation.setStatus('deprecated')
if mibBuilder.loadTexts: linkTestForceModulation.setDescription('Engineering use only.\n                            Link Test with:\n                            0 = Normal Rate Adapt algorithm\n                            1 = Force to max modultion - No Rate Adapt Algorithm\n\t\t\t\t\t\t\t[This variable is deprecated. Please refer whispBoxLink OIDs]')
linkTestDirection = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("bidirectional", 0), ("uplinkonly", 1), ("downlinkonly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestDirection.setStatus('deprecated')
if mibBuilder.loadTexts: linkTestDirection.setDescription('Link Test Direction - Engineering Use Only\n                            0 = default (will do bidirectional)\n                            1 = Uplink Only\n                            2 = Downlink Only\n                            3 = Bi-Directional (same as 0, setting to 3 will result in setting it to 0)\n\t\t\t\t\t\t\t[This variable is deprecated. Please refer whispBoxLink OIDs]')
testLUID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: testLUID.setStatus('deprecated')
if mibBuilder.loadTexts: testLUID.setDescription('LUID number of selected unit. [This variable is deprecated, please refer whispBoxLink OIDs]')
linkTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestStatus.setStatus('deprecated')
if mibBuilder.loadTexts: linkTestStatus.setDescription('Status for Link Test.[This variable is deprecated, please refer whispBoxLink OIDs]')
linkTestError = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestError.setStatus('deprecated')
if mibBuilder.loadTexts: linkTestError.setDescription('Error status of Link Test:\n            (1) Failed to recieve handshake from remote device\n            (2) No session is currently active. Please try again after session established.\n            (3) Received a bad transaction ID.  Please try again.\n            (4) We werent able to send the test request to the remote device.\n            (5) We didnt receive any results from the remote device.\n\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
testDuration = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: testDuration.setStatus('deprecated')
if mibBuilder.loadTexts: testDuration.setDescription('Duration of link test.[This variable is deprecated, please refer whispBoxLink OIDs]')
downLinkRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 5), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: downLinkRate.setStatus('deprecated')
if mibBuilder.loadTexts: downLinkRate.setDescription('Downlink Rate.[This variable is deprecated, please refer whispBoxLink OIDs]')
upLinkRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 6), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upLinkRate.setStatus('deprecated')
if mibBuilder.loadTexts: upLinkRate.setDescription('Uplink Rate.[This variable is deprecated, please refer whispBoxLink OIDs]')
downLinkEff = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 7), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: downLinkEff.setStatus('deprecated')
if mibBuilder.loadTexts: downLinkEff.setDescription('Down Link Efficiency.')
maxDwnLinkIndex = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxDwnLinkIndex.setStatus('deprecated')
if mibBuilder.loadTexts: maxDwnLinkIndex.setDescription('For link test results, the maximum possible downlink efficiency percentage (always 100%).[This variable is deprecated, please refer whispBoxLink OIDs]')
actDwnLinkIndex = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actDwnLinkIndex.setStatus('deprecated')
if mibBuilder.loadTexts: actDwnLinkIndex.setDescription('Actual down link index.[This variable is deprecated, please refer whispBoxLink OIDs]')
expDwnFragCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDwnFragCount.setStatus('deprecated')
if mibBuilder.loadTexts: expDwnFragCount.setDescription('Expected Fragment Count.[This variable is deprecated, please refer whispBoxLink OIDs]')
actDwnFragCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actDwnFragCount.setStatus('deprecated')
if mibBuilder.loadTexts: actDwnFragCount.setDescription('Actual Fragment Count.[This variable is deprecated, please refer whispBoxLink OIDs]')
upLinkEff = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 12), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: upLinkEff.setStatus('deprecated')
if mibBuilder.loadTexts: upLinkEff.setDescription('Up link efficiency.[This variable is deprecated, please refer whispBoxLink OIDs]')
expUpFragCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expUpFragCount.setStatus('deprecated')
if mibBuilder.loadTexts: expUpFragCount.setDescription('Uplink expected Fragment Count.[This variable is deprecated, please refer whispBoxLink OIDs]')
actUpFragCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actUpFragCount.setStatus('deprecated')
if mibBuilder.loadTexts: actUpFragCount.setDescription('Actual uplink Fragment Count.[This variable is deprecated, please refer whispBoxLink OIDs]')
maxUpLinkIndex = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxUpLinkIndex.setStatus('deprecated')
if mibBuilder.loadTexts: maxUpLinkIndex.setDescription('For link test results, the maximum possible uplink efficiency percentage (always 100%).[This variable is deprecated, please refer whispBoxLink OIDs]')
actUpLinkIndex = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actUpLinkIndex.setStatus('deprecated')
if mibBuilder.loadTexts: actUpLinkIndex.setDescription('Actual Up link index.[This variable is deprecated, please refer whispBoxLink OIDs]')
fragments1xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments1xDwnLinkVertical.setStatus('deprecated')
if mibBuilder.loadTexts: fragments1xDwnLinkVertical.setDescription('Number of fragments received on down link at 1X (QPSK).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
fragments2xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments2xDwnLinkVertical.setStatus('deprecated')
if mibBuilder.loadTexts: fragments2xDwnLinkVertical.setDescription('Number of fragments received on down link at 2X (16-QAM).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
fragments3xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments3xDwnLinkVertical.setStatus('deprecated')
if mibBuilder.loadTexts: fragments3xDwnLinkVertical.setDescription('Number of fragments received on down link at 3X (64-QAM).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
fragments4xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments4xDwnLinkVertical.setStatus('deprecated')
if mibBuilder.loadTexts: fragments4xDwnLinkVertical.setDescription('Number of fragments received on down link at 4X (256-QAM).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
fragments1xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments1xUpLinkVertical.setStatus('deprecated')
if mibBuilder.loadTexts: fragments1xUpLinkVertical.setDescription('Number of fragments received on up link at 1X (QPSK).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
fragments2xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments2xUpLinkVertical.setStatus('deprecated')
if mibBuilder.loadTexts: fragments2xUpLinkVertical.setDescription('Number of fragments received on up link at 2X (16-QAM).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
fragments3xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments3xUpLinkVertical.setStatus('deprecated')
if mibBuilder.loadTexts: fragments3xUpLinkVertical.setDescription('Number of fragments received on up link at 3X (64-QAM).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
fragments4xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments4xUpLinkVertical.setStatus('deprecated')
if mibBuilder.loadTexts: fragments4xUpLinkVertical.setDescription('Number of fragments received on up link at 4X (256-QAM).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
bitErrorsCorrected1xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected1xDwnLinkVertical.setStatus('deprecated')
if mibBuilder.loadTexts: bitErrorsCorrected1xDwnLinkVertical.setDescription('Number of bit errors corrected on average per fragment on down link at 1X (QPSK).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
bitErrorsCorrected2xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected2xDwnLinkVertical.setStatus('deprecated')
if mibBuilder.loadTexts: bitErrorsCorrected2xDwnLinkVertical.setDescription('Number of bit errors corrected on average per fragment on down link at 2X (16-QAM).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
bitErrorsCorrected3xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected3xDwnLinkVertical.setStatus('deprecated')
if mibBuilder.loadTexts: bitErrorsCorrected3xDwnLinkVertical.setDescription('Number of bit errors corrected on average per fragment on down link at 3X (64-QAM).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
bitErrorsCorrected4xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected4xDwnLinkVertical.setStatus('deprecated')
if mibBuilder.loadTexts: bitErrorsCorrected4xDwnLinkVertical.setDescription('Number of bit errors corrected on average per fragment on down link at 4X (256-QAM).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
bitErrorsCorrected1xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected1xUpLinkVertical.setStatus('deprecated')
if mibBuilder.loadTexts: bitErrorsCorrected1xUpLinkVertical.setDescription('Number of bit errors corrected on average per fragment on up link at 1X (QPSK).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
bitErrorsCorrected2xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected2xUpLinkVertical.setStatus('deprecated')
if mibBuilder.loadTexts: bitErrorsCorrected2xUpLinkVertical.setDescription('Number of bit errors corrected on average per fragment on up link at 2X (16-QAM).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
bitErrorsCorrected3xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected3xUpLinkVertical.setStatus('deprecated')
if mibBuilder.loadTexts: bitErrorsCorrected3xUpLinkVertical.setDescription('Number of bit errors corrected on average per fragment on up link at 3X (64-QAM).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
bitErrorsCorrected4xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected4xUpLinkVertical.setStatus('deprecated')
if mibBuilder.loadTexts: bitErrorsCorrected4xUpLinkVertical.setDescription('Number of bit errors corrected on average per fragment on up link at 4X (256-QAM).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
signalToNoiseRatioDownLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioDownLinkVertical.setStatus('deprecated')
if mibBuilder.loadTexts: signalToNoiseRatioDownLinkVertical.setDescription('Estimated Signal to Noise Ratio in dB for the down link.\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
signalToNoiseRatioUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioUpLinkVertical.setStatus('deprecated')
if mibBuilder.loadTexts: signalToNoiseRatioUpLinkVertical.setDescription('Estimated Signal to Noise Ratio in dB for the up link.\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
fragments1xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments1xDwnLinkHorizontal.setStatus('deprecated')
if mibBuilder.loadTexts: fragments1xDwnLinkHorizontal.setDescription('Number of fragments received on down link at 1X (QPSK).\n                            For MIMO only.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
fragments2xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments2xDwnLinkHorizontal.setStatus('deprecated')
if mibBuilder.loadTexts: fragments2xDwnLinkHorizontal.setDescription('Number of fragments received on down link at 2X (16-QAM).\n                            For MIMO only.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
fragments3xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments3xDwnLinkHorizontal.setStatus('deprecated')
if mibBuilder.loadTexts: fragments3xDwnLinkHorizontal.setDescription('Number of fragments received on down link at 3X (64-QAM).\n                            For MIMO only.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
fragments4xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments4xDwnLinkHorizontal.setStatus('deprecated')
if mibBuilder.loadTexts: fragments4xDwnLinkHorizontal.setDescription('Number of fragments received on down link at 4X (256-QAM).\n                            For MIMO only.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
fragments1xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments1xUpLinkHorizontal.setStatus('deprecated')
if mibBuilder.loadTexts: fragments1xUpLinkHorizontal.setDescription('Number of fragments received on up link at 1X (QPSK).\n                            For MIMO only.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
fragments2xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments2xUpLinkHorizontal.setStatus('deprecated')
if mibBuilder.loadTexts: fragments2xUpLinkHorizontal.setDescription('Number of fragments received on up link at 2X (16-QAM).\n                            For MIMO only.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
fragments3xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments3xUpLinkHorizontal.setStatus('deprecated')
if mibBuilder.loadTexts: fragments3xUpLinkHorizontal.setDescription('Number of fragments received on up link at 3X (64-QAM).\n                            For MIMO only.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
fragments4xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments4xUpLinkHorizontal.setStatus('deprecated')
if mibBuilder.loadTexts: fragments4xUpLinkHorizontal.setDescription('Number of fragments received on up link at 4X (256-QAM).\n                            For MIMO only.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
bitErrorsCorrected1xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected1xDwnLinkHorizontal.setStatus('deprecated')
if mibBuilder.loadTexts: bitErrorsCorrected1xDwnLinkHorizontal.setDescription('Number of bit errors corrected on average per fragment on down link at 1X (QPSK).\n                            For MIMO and forward.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
bitErrorsCorrected2xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected2xDwnLinkHorizontal.setStatus('deprecated')
if mibBuilder.loadTexts: bitErrorsCorrected2xDwnLinkHorizontal.setDescription('Number of bit errors corrected on average per fragment on down link at 2X (16-QAM).\n                            For MIMO and forward.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
bitErrorsCorrected3xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected3xDwnLinkHorizontal.setStatus('deprecated')
if mibBuilder.loadTexts: bitErrorsCorrected3xDwnLinkHorizontal.setDescription('Number of bit errors corrected on average per fragment on down link at 3X (64-QAM).\n                            For MIMO and forward.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
bitErrorsCorrected4xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected4xDwnLinkHorizontal.setStatus('deprecated')
if mibBuilder.loadTexts: bitErrorsCorrected4xDwnLinkHorizontal.setDescription('Number of bit errors corrected on average per fragment on down link at 4X (256-QAM).\n                            For MIMO and forward.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
bitErrorsCorrected1xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 47), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected1xUpLinkHorizontal.setStatus('deprecated')
if mibBuilder.loadTexts: bitErrorsCorrected1xUpLinkHorizontal.setDescription('Number of bit errors corrected on average per fragment on up link at 1X (QPSK).\n                            For MIMO and forward.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
bitErrorsCorrected2xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected2xUpLinkHorizontal.setStatus('deprecated')
if mibBuilder.loadTexts: bitErrorsCorrected2xUpLinkHorizontal.setDescription('Number of bit errors corrected on average per fragment on up link at 2X (16-QAM).\n                            For MIMO and forward.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
bitErrorsCorrected3xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected3xUpLinkHorizontal.setStatus('deprecated')
if mibBuilder.loadTexts: bitErrorsCorrected3xUpLinkHorizontal.setDescription('Engineering use only.\n                            Number of bit errors corrected on average per fragment on up link at 3X (64-QAM).\n                            For MIMO and forward.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
bitErrorsCorrected4xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 50), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected4xUpLinkHorizontal.setStatus('deprecated')
if mibBuilder.loadTexts: bitErrorsCorrected4xUpLinkHorizontal.setDescription('Number of bit errors corrected on average per fragment on up link at 4X (256-QAM).\n                            For MIMO and forward.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
signalToNoiseRatioDownLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioDownLinkHorizontal.setStatus('deprecated')
if mibBuilder.loadTexts: signalToNoiseRatioDownLinkHorizontal.setDescription('Estimated Signal to Noise Ratio in dB for the down link.\n                            For MIMO and forward.\n                            For MIMO this is the horizontal path.\n                            If operating in MIMO-A this will return 0.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
signalToNoiseRatioUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioUpLinkHorizontal.setStatus('deprecated')
if mibBuilder.loadTexts: signalToNoiseRatioUpLinkHorizontal.setDescription('Estimated Signal to Noise Ratio in dB for the up link.\n                            For Gen II OFDM and forward.\n                            For MIMO this is the horizontal path.\n                            If operating in MIMO-A this will return 0.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
downLinkRateExtrapolated = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 53), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: downLinkRateExtrapolated.setStatus('deprecated')
if mibBuilder.loadTexts: downLinkRateExtrapolated.setDescription('Extrapolated Downlink Rate from an extrapolated link test.\n                            Extrapolated Link Test sends only a few packets over the link and extrapolates this out to what would happen on a full link test.\n                            This is an estimation of the throughput based upon the modulation, efficiency, and data slots available.\n                            It intended to provide a basic link test test without impacting service for the sector.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
upLinkRateExtrapolated = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 54), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upLinkRateExtrapolated.setStatus('deprecated')
if mibBuilder.loadTexts: upLinkRateExtrapolated.setDescription('Extrapolated Uplink Rate from an extrapolated link test.\n                            Extrapolated Link Test sends only a few packets over the link and extrapolates this out to what would happen on a full link test.\n                            This is an estimation of the throughput based upon the modulation, efficiency, and data slots available.\n                            It intended to provide a basic link test test without impacting service for the sector.\n\t\t\t\t\t\t\t[This variable is deprecated, please refer whispBoxLink OIDs]')
whispGPSStats = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("gpsSynchronized", 1), ("gpsLostSync", 2), ("generatingSync", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispGPSStats.setStatus('current')
if mibBuilder.loadTexts: whispGPSStats.setDescription('This shows whether the AP is synchrinized\n                        to the GPS timer.')
gpsSyncSource = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsSyncSource.setStatus('current')
if mibBuilder.loadTexts: gpsSyncSource.setDescription('Source of GPS Sync Pulse.')
gpsSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsSyncStatus.setStatus('current')
if mibBuilder.loadTexts: gpsSyncStatus.setDescription('Current Live value of Sync Status.')
gpsTrackingMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsTrackingMode.setStatus('current')
if mibBuilder.loadTexts: gpsTrackingMode.setDescription('GPS tracking mode.')
gpsTime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsTime.setStatus('current')
if mibBuilder.loadTexts: gpsTime.setDescription('GPS time.')
gpsDate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsDate.setStatus('current')
if mibBuilder.loadTexts: gpsDate.setDescription('GPS date.')
gpsSatellitesTracked = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsSatellitesTracked.setStatus('current')
if mibBuilder.loadTexts: gpsSatellitesTracked.setDescription('Returns Current number of satellites GPS is tracking in string format .use gpsSatellitesTrackedInt to get the value in integer')
gpsSatellitesVisible = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsSatellitesVisible.setStatus('current')
if mibBuilder.loadTexts: gpsSatellitesVisible.setDescription('Return Number of satellites GPS is seeing in string format.Use gpsSatellitesVisibleInt to get value in integer')
gpsHeight = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsHeight.setStatus('current')
if mibBuilder.loadTexts: gpsHeight.setDescription('GPS height.')
gpsAntennaConnection = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsAntennaConnection.setStatus('current')
if mibBuilder.loadTexts: gpsAntennaConnection.setDescription('Antenna Connection status.')
gpsLatitude = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsLatitude.setStatus('current')
if mibBuilder.loadTexts: gpsLatitude.setDescription('GPS Latitude.')
gpsLongitude = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsLongitude.setStatus('current')
if mibBuilder.loadTexts: gpsLongitude.setDescription('GPS Longitude.')
gpsInvalidMsg = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsInvalidMsg.setStatus('current')
if mibBuilder.loadTexts: gpsInvalidMsg.setDescription('Number of invalid messages.')
gpsRestartCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsRestartCount.setStatus('current')
if mibBuilder.loadTexts: gpsRestartCount.setDescription('Number of GPS unit restarts.')
gpsReInitCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsReInitCount.setStatus('current')
if mibBuilder.loadTexts: gpsReInitCount.setDescription('GPS ReInit counts.  The number of times we have done a complete re-initialization of the GPS device.')
gpsReceiverInfo = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsReceiverInfo.setStatus('current')
if mibBuilder.loadTexts: gpsReceiverInfo.setDescription('A textual string contains information on GPS receiver.')
gpsFreeRun = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gpsFreeRun.setStatus('current')
if mibBuilder.loadTexts: gpsFreeRun.setDescription('This variable is deprecated.\n                              Setting this value to false will set AutoSync.\n                              Setting this value to true will set AutoSync plus Free Run.')
autoSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14))).clone(namedValues=NamedValues(("noSync", 0), ("onBoardGPSSync", 1), ("timingPortUGPSSync", 2), ("onBoardGPSAndTimingPortUGPSSync", 3), ("powrPortSync", 4), ("onBoardGPSAndPowrPortSync", 5), ("timingPortUGPSAndPowrPortSync", 6), ("onBoardGPSAndTimingPortUGPSAndPowrPortSync", 7), ("cambiumSync", 8), ("timingPortUGPSSyncAndCambiumSync", 10), ("powrPortSyncAndCambiumSync", 12), ("timingPortUGPSAndPowrPortSyncAndCambiumSync", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoSyncStatus.setStatus('current')
if mibBuilder.loadTexts: autoSyncStatus.setDescription('Current Live value of Sync Status.\n\t\t\t\t\t\tFollowing values represent what sources have sync.\n\t\t\t\t\t\t(0) No Sync\n\t\t\t\t\t\t(1) On-board GPS Sync\n\t\t\t\t\t\t(2) Timing Port/UGPS Sync\n\t\t\t\t\t\t(3) On-board GPS and Timing Port/UGPS Sync\n\t\t\t\t\t\t(4) Canopy Sync Over Power Port\n\t\t\t\t\t\t(5) On-board GPS and Canopy Sync Over Power\n\t\t\t\t\t\t(6) Timing Port/UGPS and Canopy Sync Over Power\n\t\t\t\t\t\t(7) On-board GPS, Timing Port/UGPS and Canopy Sync Over Power\n\t\t\t\t\t\t(8) Cambium Sync Over Power\n\t\t\t\t\t\t(10) Timing Port/UGPS and Cambium Sync Over Power\n\t\t\t\t\t\t(12) Canopy Sync and Cambium Sync Over Power\n\t\t\t\t\t\t(14) Timing Port/UGPS, Canopy Sync Over Power, and Cambium Sync Over Power')
gpsSatellitesTrackedInt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsSatellitesTrackedInt.setStatus('current')
if mibBuilder.loadTexts: gpsSatellitesTrackedInt.setDescription('Current number of satellites GPS is tracking in integer format.')
gpsSatellitesVisibleInt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsSatellitesVisibleInt.setStatus('current')
if mibBuilder.loadTexts: gpsSatellitesVisibleInt.setDescription('Number of satellites the GPS sees in integer format')
whispRegComplete = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 1, 1)).setObjects(("WHISP-APS-MIB", "linkLUID"), ("WHISP-APS-MIB", "linkPhysAddress"))
if mibBuilder.loadTexts: whispRegComplete.setStatus('current')
if mibBuilder.loadTexts: whispRegComplete.setDescription('Signals registration complete.')
whispRegLost = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 1, 2)).setObjects(("WHISP-APS-MIB", "linkLUID"), ("WHISP-APS-MIB", "linkPhysAddress"))
if mibBuilder.loadTexts: whispRegLost.setStatus('current')
if mibBuilder.loadTexts: whispRegLost.setDescription('Signals registration lost.')
whispRegFailure = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 1, 3)).setObjects(("WHISP-APS-MIB", "regFailESN"), ("WHISP-APS-MIB", "regGrantReason"))
if mibBuilder.loadTexts: whispRegFailure.setStatus('current')
if mibBuilder.loadTexts: whispRegFailure.setDescription('Signals a registration failure has occured.')
whispDefKeyUsed = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 1, 4)).setObjects(("WHISP-APS-MIB", "linkLUID"), ("WHISP-APS-MIB", "linkPhysAddress"))
if mibBuilder.loadTexts: whispDefKeyUsed.setStatus('current')
if mibBuilder.loadTexts: whispDefKeyUsed.setDescription('Signals Default Key used for encryptiont.')
whispGPSInSync = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 2, 1)).setObjects(("WHISP-APS-MIB", "whispGPSStats"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: whispGPSInSync.setStatus('current')
if mibBuilder.loadTexts: whispGPSInSync.setDescription('Signals a transition from not-synchronized to synchronized.')
whispGPSOutSync = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 2, 2)).setObjects(("WHISP-APS-MIB", "gpsStatus"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: whispGPSOutSync.setStatus('current')
if mibBuilder.loadTexts: whispGPSOutSync.setDescription('Signals a transition from synchronized to not-synchronized.')
whispRadarDetected = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 3, 1)).setObjects(("WHISP-APS-MIB", "dfsStatus"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: whispRadarDetected.setStatus('current')
if mibBuilder.loadTexts: whispRadarDetected.setDescription('Radar detected transmit stopped.')
whispRadarEnd = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 3, 2)).setObjects(("WHISP-APS-MIB", "dfsStatus"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: whispRadarEnd.setStatus('current')
if mibBuilder.loadTexts: whispRadarEnd.setDescription('Radar ended back to normal transmit.')
regulatoryApCheckInvalidChanFailed = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 4, 1)).setObjects(("WHISP-APS-MIB", "regulatoryStatus"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: regulatoryApCheckInvalidChanFailed.setStatus('current')
if mibBuilder.loadTexts: regulatoryApCheckInvalidChanFailed.setDescription('Regulatory Check failed for the unit due to a invalid channel for the configured region.\n                            regulatoryStatus - Text description for the failure.\n                            physAddress - the MAC address of the unit.')
regulatoryCheckFailedNoRegionAp = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 4, 2)).setObjects(("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: regulatoryCheckFailedNoRegionAp.setStatus('current')
if mibBuilder.loadTexts: regulatoryCheckFailedNoRegionAp.setDescription('Regulatory Check failed because a valid region has not be configured.\n                            physAddress - the MAC address of the unit.')
regulatoryApCheckInvalidChBwFailed = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 4, 3)).setObjects(("WHISP-APS-MIB", "regulatoryStatus"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: regulatoryApCheckInvalidChBwFailed.setStatus('current')
if mibBuilder.loadTexts: regulatoryApCheckInvalidChBwFailed.setDescription('Regulatory Check failed due to an invalid channel bandwidth for the configured region.\n                            regulatoryStatus - Text description for the failure.\n                            physAddress - the MAC address of the unit.')
rfLinkOverloadCondition = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 5, 1)).setObjects(("WHISP-APS-MIB", "rfOutDiscardRate"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: rfLinkOverloadCondition.setStatus('current')
if mibBuilder.loadTexts: rfLinkOverloadCondition.setDescription('AP has exceeded the preset discard percentage in the RF Downlink Direction.\n                            rfOutDiscardRate - Current discard Rate.\n                            physAddress - the MAC address of the unit.')
mumimoTrialEvent = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 6, 1)).setObjects(("WHISP-APS-MIB", "mumimoTrialPercentageRemaining"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: mumimoTrialEvent.setStatus('current')
if mibBuilder.loadTexts: mumimoTrialEvent.setDescription('MU-MIMO Trial Event Notification.\n                            Value indicates percentage of trial licenses remaining.')
whispLinkTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6, 1)).setObjects(("WHISP-APS-MIB", "linkTestLUID"), ("WHISP-APS-MIB", "linkTestDuration"), ("WHISP-APS-MIB", "linkTestAction"), ("WHISP-APS-MIB", "linkTestPktLength"), ("WHISP-APS-MIB", "testLUID"), ("WHISP-APS-MIB", "linkTestStatus"), ("WHISP-APS-MIB", "linkTestError"), ("WHISP-APS-MIB", "testDuration"), ("WHISP-APS-MIB", "downLinkRate"), ("WHISP-APS-MIB", "upLinkRate"), ("WHISP-APS-MIB", "downLinkRateExtrapolated"), ("WHISP-APS-MIB", "upLinkRateExtrapolated"), ("WHISP-APS-MIB", "downLinkEff"), ("WHISP-APS-MIB", "maxDwnLinkIndex"), ("WHISP-APS-MIB", "actDwnLinkIndex"), ("WHISP-APS-MIB", "expDwnFragCount"), ("WHISP-APS-MIB", "actDwnFragCount"), ("WHISP-APS-MIB", "upLinkEff"), ("WHISP-APS-MIB", "expUpFragCount"), ("WHISP-APS-MIB", "actUpFragCount"), ("WHISP-APS-MIB", "maxUpLinkIndex"), ("WHISP-APS-MIB", "actUpLinkIndex"), ("WHISP-APS-MIB", "fragments1xDwnLinkVertical"), ("WHISP-APS-MIB", "fragments2xDwnLinkVertical"), ("WHISP-APS-MIB", "fragments3xDwnLinkVertical"), ("WHISP-APS-MIB", "fragments4xDwnLinkVertical"), ("WHISP-APS-MIB", "fragments1xUpLinkVertical"), ("WHISP-APS-MIB", "fragments2xUpLinkVertical"), ("WHISP-APS-MIB", "fragments3xUpLinkVertical"), ("WHISP-APS-MIB", "fragments4xUpLinkVertical"), ("WHISP-APS-MIB", "fragments1xDwnLinkHorizontal"), ("WHISP-APS-MIB", "fragments2xDwnLinkHorizontal"), ("WHISP-APS-MIB", "fragments3xDwnLinkHorizontal"), ("WHISP-APS-MIB", "fragments4xDwnLinkHorizontal"), ("WHISP-APS-MIB", "fragments1xUpLinkHorizontal"), ("WHISP-APS-MIB", "fragments2xUpLinkHorizontal"), ("WHISP-APS-MIB", "fragments3xUpLinkHorizontal"), ("WHISP-APS-MIB", "fragments4xUpLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected1xDwnLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected2xDwnLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected3xDwnLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected4xDwnLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected1xUpLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected2xUpLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected3xUpLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected4xUpLinkVertical"), ("WHISP-APS-MIB", "signalToNoiseRatioDownLinkVertical"), ("WHISP-APS-MIB", "signalToNoiseRatioUpLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected1xDwnLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected2xDwnLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected3xDwnLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected4xDwnLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected1xUpLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected2xUpLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected3xUpLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected4xUpLinkHorizontal"), ("WHISP-APS-MIB", "signalToNoiseRatioDownLinkHorizontal"), ("WHISP-APS-MIB", "signalToNoiseRatioUpLinkHorizontal"), ("WHISP-APS-MIB", "linkTestSNRCalculation"), ("WHISP-APS-MIB", "linkTestWithDualPath"), ("WHISP-APS-MIB", "linkTestForceModulation"), ("WHISP-APS-MIB", "linkTestMode"), ("WHISP-APS-MIB", "linkTestNumPkt"), ("WHISP-APS-MIB", "linkTestDirection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispLinkTestGroup = whispLinkTestGroup.setStatus('current')
if mibBuilder.loadTexts: whispLinkTestGroup.setDescription('WHiSP APs link test group.')
whispApsConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6, 2)).setObjects(("WHISP-APS-MIB", "gpsInput"), ("WHISP-APS-MIB", "rfFreqCarrier"), ("WHISP-APS-MIB", "dwnLnkData"), ("WHISP-APS-MIB", "highPriorityUpLnkPct"), ("WHISP-APS-MIB", "numUAckSlots"), ("WHISP-APS-MIB", "uAcksReservHigh"), ("WHISP-APS-MIB", "numDAckSlots"), ("WHISP-APS-MIB", "dAcksReservHigh"), ("WHISP-APS-MIB", "numCtlSlots"), ("WHISP-APS-MIB", "numCtlSlotsReserveHigh"), ("WHISP-APS-MIB", "upLnkMaxBurstDataRate"), ("WHISP-APS-MIB", "upLnkDataRate"), ("WHISP-APS-MIB", "upLnkLimit"), ("WHISP-APS-MIB", "dwnLnkMaxBurstDataRate"), ("WHISP-APS-MIB", "dwnLnkDataRate"), ("WHISP-APS-MIB", "dwnLnkLimit"), ("WHISP-APS-MIB", "sectorID"), ("WHISP-APS-MIB", "maxRange"), ("WHISP-APS-MIB", "asIP1"), ("WHISP-APS-MIB", "asIP2"), ("WHISP-APS-MIB", "asIP3"), ("WHISP-APS-MIB", "asIP4"), ("WHISP-APS-MIB", "asIP5"), ("WHISP-APS-MIB", "lanIpAp"), ("WHISP-APS-MIB", "lanMaskAp"), ("WHISP-APS-MIB", "defaultGwAp"), ("WHISP-APS-MIB", "privateIp"), ("WHISP-APS-MIB", "gpsTrap"), ("WHISP-APS-MIB", "regTrap"), ("WHISP-APS-MIB", "txSpreading"), ("WHISP-APS-MIB", "apBeaconInfo"), ("WHISP-APS-MIB", "authMode"), ("WHISP-APS-MIB", "authKeyAp"), ("WHISP-APS-MIB", "authKeyOptionAP"), ("WHISP-APS-MIB", "enableRadiusDynAuth"), ("WHISP-APS-MIB", "disableAuthForICCSM"), ("WHISP-APS-MIB", "encryptionMode"), ("WHISP-APS-MIB", "ntpServerIp"), ("WHISP-APS-MIB", "multicastRetryCount"), ("WHISP-APS-MIB", "encryptDwBroadcast"), ("WHISP-APS-MIB", "updateAppAddress"), ("WHISP-APS-MIB", "dfsConfig"), ("WHISP-APS-MIB", "vlanEnable"), ("WHISP-APS-MIB", "configSource"), ("WHISP-APS-MIB", "apRateAdapt"), ("WHISP-APS-MIB", "numCtlSlotsHW"), ("WHISP-APS-MIB", "displayAPEval"), ("WHISP-APS-MIB", "smIsolation"), ("WHISP-APS-MIB", "bridgeFloodUnknownsEnable"), ("WHISP-APS-MIB", "ipAccessFilterEnable"), ("WHISP-APS-MIB", "allowedIPAccess1"), ("WHISP-APS-MIB", "allowedIPAccess2"), ("WHISP-APS-MIB", "allowedIPAccess3"), ("WHISP-APS-MIB", "allowedIPAccessNMLength1"), ("WHISP-APS-MIB", "allowedIPAccessNMLength2"), ("WHISP-APS-MIB", "allowedIPAccessNMLength3"), ("WHISP-APS-MIB", "rfTelnetAccess"), ("WHISP-APS-MIB", "rfPPPoEPADIForwarding"), ("WHISP-APS-MIB", "tslBridging"), ("WHISP-APS-MIB", "untranslatedArp"), ("WHISP-APS-MIB", "limitFreqBand900"), ("WHISP-APS-MIB", "txPwrLevel"), ("WHISP-APS-MIB", "rfFreqCaralt1"), ("WHISP-APS-MIB", "rfFreqCaralt2"), ("WHISP-APS-MIB", "scheduleWhitening"), ("WHISP-APS-MIB", "remoteSpectrumAnalysisDuration"), ("WHISP-APS-MIB", "remoteSpectrumAnalyzerLUID"), ("WHISP-APS-MIB", "bhReReg"), ("WHISP-APS-MIB", "dlnkBcastCIR"), ("WHISP-APS-MIB", "dlnkMcastCIR"), ("WHISP-APS-MIB", "verifyGPSChecksum"), ("WHISP-APS-MIB", "mumimoTrialMode"), ("WHISP-APS-MIB", "qinqEthType"), ("WHISP-APS-MIB", "useAPManagementVIDForICCSM"), ("WHISP-APS-MIB", "multicastVCDataRate"), ("WHISP-APS-MIB", "pmp450430LegacyMode"), ("WHISP-APS-MIB", "onlyAllowPMP450iSMRegistration"), ("WHISP-APS-MIB", "frameAlignmentLegacyMode"), ("WHISP-APS-MIB", "pmp430SMRegistration"), ("WHISP-APS-MIB", "colorCodeRescanTimer"), ("WHISP-APS-MIB", "colorCodeRescanIdleTimer"), ("WHISP-APS-MIB", "fskSMRcvTargetLvl"), ("WHISP-APS-MIB", "berModSelect"), ("WHISP-APS-MIB", "lastSesStatsReset"), ("WHISP-APS-MIB", "resetSesStats"), ("WHISP-APS-MIB", "syslogDomainNameAppend"), ("WHISP-APS-MIB", "syslogServerAddr"), ("WHISP-APS-MIB", "syslogServerPort"), ("WHISP-APS-MIB", "syslogXmitAP"), ("WHISP-APS-MIB", "syslogXmitSMs"), ("WHISP-APS-MIB", "freeRunGPSSyncBypass"), ("WHISP-APS-MIB", "uGPSPower"), ("WHISP-APS-MIB", "gpsOutputEn"), ("WHISP-APS-MIB", "prioritizeMgmtData"), ("WHISP-APS-MIB", "radioMode"), ("WHISP-APS-MIB", "noRebootFreqChange"), ("WHISP-APS-MIB", "trapDelayAfterBootup"), ("WHISP-APS-MIB", "pagerRejectFilterSelect"), ("WHISP-APS-MIB", "authSharedSecret1"), ("WHISP-APS-MIB", "authSharedSecret2"), ("WHISP-APS-MIB", "authSharedSecret3"), ("WHISP-APS-MIB", "radiusPort"), ("WHISP-APS-MIB", "radiusAcctPort"), ("WHISP-APS-MIB", "rfOLEnable"), ("WHISP-APS-MIB", "rfOLTrap"), ("WHISP-APS-MIB", "rfOLThreshold"), ("WHISP-APS-MIB", "framePeriod"), ("WHISP-APS-MIB", "remoteSpectrumAnalyzerScanBandwidth"), ("WHISP-APS-MIB", "apConfigAdjacentChanSupport"), ("WHISP-APS-MIB", "ofdmSMRcvTargetLvl"), ("WHISP-APS-MIB", "sMTxPowerControl"), ("WHISP-APS-MIB", "pmp430InteropMode"), ("WHISP-APS-MIB", "apRxDelay"), ("WHISP-APS-MIB", "apVlanOverride"), ("WHISP-APS-MIB", "dhcpRelayAgentEnable"), ("WHISP-APS-MIB", "dhcpRelayAgentSrvrIP"), ("WHISP-APS-MIB", "onlyAllowVer95OrAbove"), ("WHISP-APS-MIB", "whispWebUseAuthServer"), ("WHISP-APS-MIB", "whispUsrAuthSharedSecret1"), ("WHISP-APS-MIB", "whispUsrAuthSharedSecret2"), ("WHISP-APS-MIB", "whispUsrAuthSharedSecret3"), ("WHISP-APS-MIB", "whispUsrAcctSvr1"), ("WHISP-APS-MIB", "whispUsrAcctSvr2"), ("WHISP-APS-MIB", "whispUsrAcctSvr3"), ("WHISP-APS-MIB", "whispUsrAuthPhase1"), ("WHISP-APS-MIB", "accountingInterimUpdateInterval"), ("WHISP-APS-MIB", "accountingSmReAuthInterval"), ("WHISP-APS-MIB", "dropSession"), ("WHISP-APS-MIB", "removeIdleSMs"), ("WHISP-APS-MIB", "lastTimeIdleSMsRemoved"), ("WHISP-APS-MIB", "userAuthSharedSecret1"), ("WHISP-APS-MIB", "userAuthSharedSecret2"), ("WHISP-APS-MIB", "userAuthSharedSecret3"), ("WHISP-APS-MIB", "timeZone"), ("WHISP-APS-MIB", "actionListFilename"), ("WHISP-APS-MIB", "enableAutoupdate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispApsConfigGroup = whispApsConfigGroup.setStatus('current')
if mibBuilder.loadTexts: whispApsConfigGroup.setDescription('WHiSP APs configuration group.')
whispApsLinkTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6, 3)).setObjects(("WHISP-APS-MIB", "linkLUID"), ("WHISP-APS-MIB", "linkDescr"), ("WHISP-APS-MIB", "linkPhysAddress"), ("WHISP-APS-MIB", "linkManagementIP"), ("WHISP-APS-MIB", "linkFragmentsReceived1XVertical"), ("WHISP-APS-MIB", "linkFragmentsReceived2XVertical"), ("WHISP-APS-MIB", "linkFragmentsReceived3XVertical"), ("WHISP-APS-MIB", "linkFragmentsReceived4XVertical"), ("WHISP-APS-MIB", "signalToNoiseRatioVertical"), ("WHISP-APS-MIB", "linkFragmentsReceived1XHorizontal"), ("WHISP-APS-MIB", "linkFragmentsReceived2XHorizontal"), ("WHISP-APS-MIB", "linkFragmentsReceived3XHorizontal"), ("WHISP-APS-MIB", "linkFragmentsReceived4XHorizontal"), ("WHISP-APS-MIB", "signalToNoiseRatioHorizontal"), ("WHISP-APS-MIB", "linkSignalStrengthRatio"), ("WHISP-APS-MIB", "linkRadioDbmHorizontal"), ("WHISP-APS-MIB", "linkRadioDbmVertical"), ("WHISP-APS-MIB", "maxSMTxPwr"), ("WHISP-APS-MIB", "productType"), ("WHISP-APS-MIB", "linkAdaptRateLowPri"), ("WHISP-APS-MIB", "linkAdaptRateHighPri"), ("WHISP-APS-MIB", "avgPowerLevelInt"), ("WHISP-APS-MIB", "mimoPowerLevelVertical"), ("WHISP-APS-MIB", "mimoPowerLevelHorizontal"), ("WHISP-APS-MIB", "autoUpdateStatus"), ("WHISP-APS-MIB", "linkMtu"), ("WHISP-APS-MIB", "linkSpeed"), ("WHISP-APS-MIB", "linkOperStatus"), ("WHISP-APS-MIB", "linkInOctets"), ("WHISP-APS-MIB", "linkInUcastPkts"), ("WHISP-APS-MIB", "linkInNUcastPkts"), ("WHISP-APS-MIB", "linkInDiscards"), ("WHISP-APS-MIB", "linkInError"), ("WHISP-APS-MIB", "linkInUnknownProtos"), ("WHISP-APS-MIB", "linkOutOctets"), ("WHISP-APS-MIB", "linkOutUcastPkts"), ("WHISP-APS-MIB", "linkOutNUcastPkts"), ("WHISP-APS-MIB", "linkOutDiscards"), ("WHISP-APS-MIB", "linkOutError"), ("WHISP-APS-MIB", "linkOutQLen"), ("WHISP-APS-MIB", "linkSessState"), ("WHISP-APS-MIB", "linkESN"), ("WHISP-APS-MIB", "linkRSSI"), ("WHISP-APS-MIB", "linkAveJitter"), ("WHISP-APS-MIB", "linkLastJitter"), ("WHISP-APS-MIB", "linkAirDelay"), ("WHISP-APS-MIB", "linkRegCount"), ("WHISP-APS-MIB", "linkReRegCount"), ("WHISP-APS-MIB", "linkTimeOut"), ("WHISP-APS-MIB", "linkLastRSSI"), ("WHISP-APS-MIB", "sessionCount"), ("WHISP-APS-MIB", "softwareVersion"), ("WHISP-APS-MIB", "linkSwVersion"), ("WHISP-APS-MIB", "spatialFrequency"), ("WHISP-APS-MIB", "softwareBootVersion"), ("WHISP-APS-MIB", "fpgaVersion"), ("WHISP-APS-MIB", "linkSiteName"), ("WHISP-APS-MIB", "avgPowerLevel"), ("WHISP-APS-MIB", "lastPowerLevel"), ("WHISP-APS-MIB", "sesDownLinkRate"), ("WHISP-APS-MIB", "sesDownLinkLimit"), ("WHISP-APS-MIB", "sesUpLinkRate"), ("WHISP-APS-MIB", "sesUpLinkLimit"), ("WHISP-APS-MIB", "adaptRate"), ("WHISP-APS-MIB", "sesLoUpCIR"), ("WHISP-APS-MIB", "sesLoDownCIR"), ("WHISP-APS-MIB", "sesHiUpCIR"), ("WHISP-APS-MIB", "sesHiDownCIR"), ("WHISP-APS-MIB", "platformVer"), ("WHISP-APS-MIB", "smSessionTmr"), ("WHISP-APS-MIB", "smSessionSeqNumMismatch"), ("WHISP-APS-MIB", "dataVCNum"), ("WHISP-APS-MIB", "hiPriQEn"), ("WHISP-APS-MIB", "dataVCNumHiQ"), ("WHISP-APS-MIB", "linkInOctetsHiQ"), ("WHISP-APS-MIB", "linkInUcastPktsHiQ"), ("WHISP-APS-MIB", "linkInNUcastPktsHiQ"), ("WHISP-APS-MIB", "linkInDiscardsHiQ"), ("WHISP-APS-MIB", "linkInErrorHiQ"), ("WHISP-APS-MIB", "linkInUnknownProtosHiQ"), ("WHISP-APS-MIB", "linkOutOctetsHiQ"), ("WHISP-APS-MIB", "linkOutUcastPktsHiQ"), ("WHISP-APS-MIB", "linkOutNUcastPktsHiQ"), ("WHISP-APS-MIB", "linkOutDiscardsHiQ"), ("WHISP-APS-MIB", "linkOutErrorHiQ"), ("WHISP-APS-MIB", "vcQOverflow"), ("WHISP-APS-MIB", "vcQOverflowHiQ"), ("WHISP-APS-MIB", "p7p8HiPriQEn"), ("WHISP-APS-MIB", "p7p8HiPriQ"), ("WHISP-APS-MIB", "linkAirDelayns"), ("WHISP-APS-MIB", "linkQualityAPData"), ("WHISP-APS-MIB", "radiusReplyMsg"), ("WHISP-APS-MIB", "radiusFramedIPAddress"), ("WHISP-APS-MIB", "radiusFramedIPNetmask"), ("WHISP-APS-MIB", "radiusDefaultGateway"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispApsLinkTableGroup = whispApsLinkTableGroup.setStatus('current')
if mibBuilder.loadTexts: whispApsLinkTableGroup.setDescription('WHiSP APs Link Table group.')
whispApsNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6, 4)).setObjects(("WHISP-APS-MIB", "whispRegComplete"), ("WHISP-APS-MIB", "whispRegLost"), ("WHISP-APS-MIB", "whispRegFailure"), ("WHISP-APS-MIB", "whispDefKeyUsed"), ("WHISP-APS-MIB", "whispGPSInSync"), ("WHISP-APS-MIB", "whispGPSOutSync"), ("WHISP-APS-MIB", "whispRadarDetected"), ("WHISP-APS-MIB", "whispRadarEnd"), ("WHISP-APS-MIB", "regulatoryApCheckInvalidChanFailed"), ("WHISP-APS-MIB", "regulatoryCheckFailedNoRegionAp"), ("WHISP-APS-MIB", "regulatoryApCheckInvalidChBwFailed"), ("WHISP-APS-MIB", "rfLinkOverloadCondition"), ("WHISP-APS-MIB", "mumimoTrialEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispApsNotifGroup = whispApsNotifGroup.setStatus('current')
if mibBuilder.loadTexts: whispApsNotifGroup.setDescription('WHiSP APs notification group.')
whispApsFailedRegTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6, 5)).setObjects(("WHISP-APS-MIB", "regGrantReason"), ("WHISP-APS-MIB", "regFailESN"), ("WHISP-APS-MIB", "regFailTime"), ("WHISP-APS-MIB", "regFailSeqNum"), ("WHISP-APS-MIB", "regFailReasonText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispApsFailedRegTableGroup = whispApsFailedRegTableGroup.setStatus('current')
if mibBuilder.loadTexts: whispApsFailedRegTableGroup.setDescription('WHiSP APs Failed Registration Table group.')
whispApsFrUtlStatsIntervalLowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6, 7)).setObjects(("WHISP-APS-MIB", "frUtlLowTotalDownlinkUtilization"), ("WHISP-APS-MIB", "frUtlLowTotalUplinkUtilization"), ("WHISP-APS-MIB", "frUtlLowTotalDownlinkSlots"), ("WHISP-APS-MIB", "frUtlLowDownlinkLowPrioSlots"), ("WHISP-APS-MIB", "frUtlLowDownlinkHiPrioSlots"), ("WHISP-APS-MIB", "frUtlLowDownlinkBcastSlots"), ("WHISP-APS-MIB", "frUtlLowDownlinkAckSlots"), ("WHISP-APS-MIB", "frUtlLowDownlinkCntlMsgSlots"), ("WHISP-APS-MIB", "frUtlLowTotalUplinkSlots"), ("WHISP-APS-MIB", "frUtlLowUplinkLowPrioSlots"), ("WHISP-APS-MIB", "frUtlLowUplinkHiPrioSlots"), ("WHISP-APS-MIB", "frUtlLowUplinkAckSlots"), ("WHISP-APS-MIB", "frUtlLowMaxDownlinkSlots"), ("WHISP-APS-MIB", "frUtlLowMaxUplinkSlots"), ("WHISP-APS-MIB", "frUtlLowEthInDiscards"), ("WHISP-APS-MIB", "frUtlLowEthOutDiscards"), ("WHISP-APS-MIB", "frUtlLowRFInDiscards"), ("WHISP-APS-MIB", "frUtlLowRFOutDiscards"), ("WHISP-APS-MIB", "frUtlLowIntervalBwReqPercentage"), ("WHISP-APS-MIB", "frUtlLowIntervalBwReqRx"), ("WHISP-APS-MIB", "frUtlLowIntervalBwReqMissed"), ("WHISP-APS-MIB", "frUtlLowContentionSlots"), ("WHISP-APS-MIB", "frUtlLowAvgDownlinkSlots"), ("WHISP-APS-MIB", "frUtlLowAvgUplinkSlots"), ("WHISP-APS-MIB", "frUtlLowAvgContentionSlots"), ("WHISP-APS-MIB", "frUtlLowMaxContentionSlots"), ("WHISP-APS-MIB", "frUtlLowDownlinkAckUtilization"), ("WHISP-APS-MIB", "frUtlLowDownlinkBcastMcastUtilization"), ("WHISP-APS-MIB", "frUtlLowMumimoDownlinkSectorUtilization"), ("WHISP-APS-MIB", "frUtlLowMumimoDownlinkMumimoUtilization"), ("WHISP-APS-MIB", "frUtlLowMumimoDownlinkSumimoUtilization"), ("WHISP-APS-MIB", "frUtlLowMumimoDownlinkMultiplexingGain"), ("WHISP-APS-MIB", "frUtlLowMumimoDownlinkAvgGroupSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispApsFrUtlStatsIntervalLowGroup = whispApsFrUtlStatsIntervalLowGroup.setStatus('current')
if mibBuilder.loadTexts: whispApsFrUtlStatsIntervalLowGroup.setDescription('WHiSP APs Frame Utilization Statistics group for interval of 1 minute. Only supported for PMP and PTP 450 AP and Backhauls.')
whispApsFrUtlStatsIntervalMediumGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6, 8)).setObjects(("WHISP-APS-MIB", "frUtlMedTotalDownlinkUtilization"), ("WHISP-APS-MIB", "frUtlMedTotalUplinkUtilization"), ("WHISP-APS-MIB", "frUtlMedTotalDownlinkSlots"), ("WHISP-APS-MIB", "frUtlMedDownlinkLowPrioSlots"), ("WHISP-APS-MIB", "frUtlMedDownlinkHiPrioSlots"), ("WHISP-APS-MIB", "frUtlMedDownlinkBcastSlots"), ("WHISP-APS-MIB", "frUtlMedDownlinkAckSlots"), ("WHISP-APS-MIB", "frUtlMedDownlinkCntlMsgSlots"), ("WHISP-APS-MIB", "frUtlMedTotalUplinkSlots"), ("WHISP-APS-MIB", "frUtlMedUplinkLowPrioSlots"), ("WHISP-APS-MIB", "frUtlMedUplinkHiPrioSlots"), ("WHISP-APS-MIB", "frUtlMedUplinkAckSlots"), ("WHISP-APS-MIB", "frUtlMedMaxDownlinkSlots"), ("WHISP-APS-MIB", "frUtlMedMaxUplinkSlots"), ("WHISP-APS-MIB", "frUtlMedEthInDiscards"), ("WHISP-APS-MIB", "frUtlMedEthOutDiscards"), ("WHISP-APS-MIB", "frUtlMedRFInDiscards"), ("WHISP-APS-MIB", "frUtlMedRFOutDiscards"), ("WHISP-APS-MIB", "frUtlMediumIntervalBwReqPercentage"), ("WHISP-APS-MIB", "frUtlMediumIntervalBwReqRx"), ("WHISP-APS-MIB", "frUtlMediumIntervalBwReqMissed"), ("WHISP-APS-MIB", "frUtlMediumContentionSlots"), ("WHISP-APS-MIB", "frUtlMediumAvgDownlinkSlots"), ("WHISP-APS-MIB", "frUtlMediumAvgUplinkSlots"), ("WHISP-APS-MIB", "frUtlMediumAvgContentionSlots"), ("WHISP-APS-MIB", "frUtlMediumMaxContentionSlots"), ("WHISP-APS-MIB", "frUtlMedDownlinkAckUtilization"), ("WHISP-APS-MIB", "frUtlMedDownlinkBcastMcastUtilization"), ("WHISP-APS-MIB", "frUtlMedMumimoDownlinkSectorUtilization"), ("WHISP-APS-MIB", "frUtlMedMumimoDownlinkMumimoUtilization"), ("WHISP-APS-MIB", "frUtlMedMumimoDownlinkSumimoUtilization"), ("WHISP-APS-MIB", "frUtlMedMumimoDownlinkMultiplexingGain"), ("WHISP-APS-MIB", "frUtlMedMumimoDownlinkAvgGroupSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispApsFrUtlStatsIntervalMediumGroup = whispApsFrUtlStatsIntervalMediumGroup.setStatus('current')
if mibBuilder.loadTexts: whispApsFrUtlStatsIntervalMediumGroup.setDescription('WHiSP APs Frame Utilization Statistics group for interval of 5 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
whispApsFrUtlStatsIntervalHighGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6, 9)).setObjects(("WHISP-APS-MIB", "frUtlHighTotalDownlinkUtilization"), ("WHISP-APS-MIB", "frUtlHighTotalUplinkUtilization"), ("WHISP-APS-MIB", "frUtlHighTotalDownlinkSlots"), ("WHISP-APS-MIB", "frUtlHighDownlinkLowPrioSlots"), ("WHISP-APS-MIB", "frUtlHighDownlinkHiPrioSlots"), ("WHISP-APS-MIB", "frUtlHighDownlinkBcastSlots"), ("WHISP-APS-MIB", "frUtlHighDownlinkAckSlots"), ("WHISP-APS-MIB", "frUtlHighDownlinkCntlMsgSlots"), ("WHISP-APS-MIB", "frUtlHighTotalUplinkSlots"), ("WHISP-APS-MIB", "frUtlHighUplinkLowPrioSlots"), ("WHISP-APS-MIB", "frUtlHighUplinkHiPrioSlots"), ("WHISP-APS-MIB", "frUtlHighUplinkAckSlots"), ("WHISP-APS-MIB", "frUtlHighMaxDownlinkSlots"), ("WHISP-APS-MIB", "frUtlHighMaxUplinkSlots"), ("WHISP-APS-MIB", "frUtlHighEthInDiscards"), ("WHISP-APS-MIB", "frUtlHighEthOutDiscards"), ("WHISP-APS-MIB", "frUtlHighRFInDiscards"), ("WHISP-APS-MIB", "frUtlHighRFOutDiscards"), ("WHISP-APS-MIB", "frUtlHighIntervalBwReqPercentage"), ("WHISP-APS-MIB", "frUtlHighIntervalBwReqRx"), ("WHISP-APS-MIB", "frUtlHighIntervalBwReqMissed"), ("WHISP-APS-MIB", "frUtlHighContentionSlots"), ("WHISP-APS-MIB", "frUtlHighAvgDownlinkSlots"), ("WHISP-APS-MIB", "frUtlHighAvgUplinkSlots"), ("WHISP-APS-MIB", "frUtlHighAvgContentionSlots"), ("WHISP-APS-MIB", "frUtlHighMaxContentionSlots"), ("WHISP-APS-MIB", "frUtlHighDownlinkAckUtilization"), ("WHISP-APS-MIB", "frUtlHighDownlinkBcastMcastUtilization"), ("WHISP-APS-MIB", "frUtlHighMumimoDownlinkSectorUtilization"), ("WHISP-APS-MIB", "frUtlHighMumimoDownlinkMumimoUtilization"), ("WHISP-APS-MIB", "frUtlHighMumimoDownlinkSumimoUtilization"), ("WHISP-APS-MIB", "frUtlHighMumimoDownlinkMultiplexingGain"), ("WHISP-APS-MIB", "frUtlHighMumimoDownlinkAvgGroupSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispApsFrUtlStatsIntervalHighGroup = whispApsFrUtlStatsIntervalHighGroup.setStatus('current')
if mibBuilder.loadTexts: whispApsFrUtlStatsIntervalHighGroup.setDescription('WHiSP APs Frame Utilization Statistics group for interval of 15 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlLowTotalDownlinkUtilization = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowTotalDownlinkUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlLowTotalDownlinkUtilization.setDescription('Percentage of total downlink utilization in the last 1 minute. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlLowTotalUplinkUtilization = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowTotalUplinkUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlLowTotalUplinkUtilization.setDescription('Percentage of total uplink utilization in the last 1 minute. Only supported for PMP 450 AP platform.')
frUtlLowTotalDownlinkSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowTotalDownlinkSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlLowTotalDownlinkSlots.setDescription('Total downlink data slots in the last 1 minute. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlLowDownlinkLowPrioSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowDownlinkLowPrioSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlLowDownlinkLowPrioSlots.setDescription('Number of data slots used for downlink low priority traffic in the last 1 minute. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlLowDownlinkHiPrioSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowDownlinkHiPrioSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlLowDownlinkHiPrioSlots.setDescription('Number of data slots used for downlink high priority traffic in the last 1 minute. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlLowDownlinkBcastSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowDownlinkBcastSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlLowDownlinkBcastSlots.setDescription('Number of data slots used for downlink broadcast and multicast traffic in the last 1 minute. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlLowDownlinkAckSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowDownlinkAckSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlLowDownlinkAckSlots.setDescription('Number of data slots used for Downlink Canopy MAC Acknowledgements in the last 1 minute. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlLowDownlinkCntlMsgSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowDownlinkCntlMsgSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlLowDownlinkCntlMsgSlots.setDescription('Number of data slots used for downlink registration control messages in the last 1 minute. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlLowTotalUplinkSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowTotalUplinkSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlLowTotalUplinkSlots.setDescription('Total uplink data slots in the last 1 minute. Only supported for PMP 450 AP platform.')
frUtlLowUplinkLowPrioSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowUplinkLowPrioSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlLowUplinkLowPrioSlots.setDescription('Number of data slots used for uplink low priority traffic in the last 1 minute. Only supported for PMP 450 AP platform.')
frUtlLowUplinkHiPrioSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowUplinkHiPrioSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlLowUplinkHiPrioSlots.setDescription('Number of data slots used for uplink high priority traffic in the last 1 minute. Only supported for PMP 450 AP platform.')
frUtlLowUplinkAckSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowUplinkAckSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlLowUplinkAckSlots.setDescription('Number of data slots used for Uplink Canopy MAC Acknowledgements in the last 1 minute. Only supported for PMP 450 AP platform.')
frUtlLowMaxDownlinkSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowMaxDownlinkSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlLowMaxDownlinkSlots.setDescription('Maximum possible downlink data slots for a minute. \n                        This is calculated as ((Downlink slots in a frame) * (Number of frames in a second) * 60). \n                        Downlink slots in a frame depends on the frame configuration. \n                        Number of frames in a second depends on the configured frame period of 5 ms (200 frames) or 2.5 ms (400 frames). \n                        Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlLowMaxUplinkSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowMaxUplinkSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlLowMaxUplinkSlots.setDescription('Maximum possible uplink data slots for a minute. \n                        This is calculated as ((Uplink slots in a frame) * (Number of frames in a second) * 60). \n                        Uplink slots in a frame depends on the frame configuration. \n                        Number of frames in a second depends on the configured frame period of 5 ms (200 frames) or 2.5 ms (400 frames).  \n                        Only supported for PMP 450 AP platform.')
frUtlLowEthInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowEthInDiscards.setStatus('current')
if mibBuilder.loadTexts: frUtlLowEthInDiscards.setDescription('Number of incoming ethernet packets discarded in the last 1 minute. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlLowEthOutDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowEthOutDiscards.setStatus('current')
if mibBuilder.loadTexts: frUtlLowEthOutDiscards.setDescription('Number of outgoing ethernet packets discarded in the last 1 minute. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlLowRFInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowRFInDiscards.setStatus('current')
if mibBuilder.loadTexts: frUtlLowRFInDiscards.setDescription('Number of incoming radio packets discarded in the last 1 minute. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlLowRFOutDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowRFOutDiscards.setStatus('current')
if mibBuilder.loadTexts: frUtlLowRFOutDiscards.setDescription('Number of outgoing radio packets discarded in the last 1 minute. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlLowIntervalBwReqPercentage = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowIntervalBwReqPercentage.setStatus('current')
if mibBuilder.loadTexts: frUtlLowIntervalBwReqPercentage.setDescription('Percentage of bandwidth request received in the last 1 minute.\n                        \tOnly supported for PMP 450 platform.\n                        \tPMP 430 SMs will not be included in this statistic.')
frUtlLowIntervalBwReqRx = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowIntervalBwReqRx.setStatus('current')
if mibBuilder.loadTexts: frUtlLowIntervalBwReqRx.setDescription('Number of bandwidth request received in the last 1 minute.\n                        \tOnly supported for PMP 450 platform.\n                        \tPMP 430 SMs will not be included in this statistic.')
frUtlLowIntervalBwReqMissed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowIntervalBwReqMissed.setStatus('current')
if mibBuilder.loadTexts: frUtlLowIntervalBwReqMissed.setDescription('Number of bandwidth request missed in the last 1 minute.\n                            Only supported for PMP 450 platform.\n                            PMP 430 SMs will not be included in this statistic.')
frUtlLowContentionSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowContentionSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlLowContentionSlots.setDescription('Number of scheduled contention slots available in the last 1 minute. \n                        \tOnly supported for PMP 450 AP platform.')
frUtlLowAvgDownlinkSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowAvgDownlinkSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlLowAvgDownlinkSlots.setDescription('Average downlink data slots per frame in the last 1 minute. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlLowAvgUplinkSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowAvgUplinkSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlLowAvgUplinkSlots.setDescription('Average uplink data slots per frame in the last 1 minute. Only supported for PMP 450 AP platform.')
frUtlLowAvgContentionSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowAvgContentionSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlLowAvgContentionSlots.setDescription('Average contention slots per frame in the last 1 minute. \n                        \tOnly supported for PMP 450 AP platform.')
frUtlLowMaxContentionSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowMaxContentionSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlLowMaxContentionSlots.setDescription('Maximum possible contention slots for 1 minute. \n                        This is calculated as (((Uplink slots in a frame) + (Contention slots in a frame)) * (Number of frames in a second) * 60(seconds)). \n                        Uplink slots and contention slots in a frame depend on the frame configuration. \n                        Number of frames in a second depends on the configured frame period of 5 ms (200 frames) or 2.5 ms (400 frames). \n                        Only supported for PMP 450 AP platform.')
frUtlLowDownlinkAckUtilization = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowDownlinkAckUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlLowDownlinkAckUtilization.setDescription('Percentage of downlink Canopy MAC Acknowledgment utilization in the last 1 minute.')
frUtlLowDownlinkBcastMcastUtilization = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowDownlinkBcastMcastUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlLowDownlinkBcastMcastUtilization.setDescription('Percentage of downlink Broadcast/Multicast utilization in the last 1 minute.')
frUtlLowMumimoDownlinkSectorUtilization = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowMumimoDownlinkSectorUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlLowMumimoDownlinkSectorUtilization.setDescription('Percentage of MU-MIMO downlink Sector utilization in the last 1 minute.\n                        \tMU-MIMO only.')
frUtlLowMumimoDownlinkMumimoUtilization = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowMumimoDownlinkMumimoUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlLowMumimoDownlinkMumimoUtilization.setDescription('Percentage of MU-MIMO downlink utilization in the last 1 minute.\n                        \tMU-MIMO only.')
frUtlLowMumimoDownlinkSumimoUtilization = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowMumimoDownlinkSumimoUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlLowMumimoDownlinkSumimoUtilization.setDescription('Percentage of SU-MIMO downlink utilization in the last 1 minute.\n                        \tMU-MIMO only.')
frUtlLowMumimoDownlinkMultiplexingGain = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 700))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowMumimoDownlinkMultiplexingGain.setStatus('current')
if mibBuilder.loadTexts: frUtlLowMumimoDownlinkMultiplexingGain.setDescription('MU-MIMO Multiplexing Gain in the last 1 minute.\n                        \tThis value is scaled up by 100 (ie. 269 = 2.69).\n                        \tMU-MIMO only.')
frUtlLowMumimoDownlinkAvgGroupSize = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 700))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowMumimoDownlinkAvgGroupSize.setStatus('current')
if mibBuilder.loadTexts: frUtlLowMumimoDownlinkAvgGroupSize.setDescription('Average MU-MIMO Group Size in the last 1 minute.\n                        \tThis value is scaled up by 100 (ie. 269 = 2.69).\n                        \tMU-MIMO only.')
frUtlMedTotalDownlinkUtilization = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedTotalDownlinkUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlMedTotalDownlinkUtilization.setDescription('Percentage of total downlink utilization in the last 5 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlMedTotalUplinkUtilization = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedTotalUplinkUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlMedTotalUplinkUtilization.setDescription('Percentage of total uplink utilization in the last 5 minutes. Only supported for PMP 450 AP platform.')
frUtlMedTotalDownlinkSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedTotalDownlinkSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlMedTotalDownlinkSlots.setDescription('Total downlink data slots in the last 5 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlMedDownlinkLowPrioSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedDownlinkLowPrioSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlMedDownlinkLowPrioSlots.setDescription('Number of data slots used for downlink low priority traffic in the last 5 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlMedDownlinkHiPrioSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedDownlinkHiPrioSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlMedDownlinkHiPrioSlots.setDescription('Number of data slots used for downlink high priority traffic in the last 5 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlMedDownlinkBcastSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedDownlinkBcastSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlMedDownlinkBcastSlots.setDescription('Number of data slots used for downlink broadcast and multicast traffic in the last 5 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlMedDownlinkAckSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedDownlinkAckSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlMedDownlinkAckSlots.setDescription('Number of data slots used for Downlink Canopy MAC Acknowledgements in the last 5 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlMedDownlinkCntlMsgSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedDownlinkCntlMsgSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlMedDownlinkCntlMsgSlots.setDescription('Number of data slots used for downlink registration control messages in the last 5 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlMedTotalUplinkSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedTotalUplinkSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlMedTotalUplinkSlots.setDescription('Total uplink data slots in the last 5 minutes. Only supported for PMP 450 AP platform.')
frUtlMedUplinkLowPrioSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedUplinkLowPrioSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlMedUplinkLowPrioSlots.setDescription('Number of data slots used for uplink low priority traffic in the last 5 minutes. Only supported for PMP 450 AP platform.')
frUtlMedUplinkHiPrioSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedUplinkHiPrioSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlMedUplinkHiPrioSlots.setDescription('Number of data slots used for uplink high priority traffic in the last 5 minutes. Only supported for PMP 450 AP platform.')
frUtlMedUplinkAckSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedUplinkAckSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlMedUplinkAckSlots.setDescription('Number of data slots used for Uplink Canopy MAC Acknowledgements in the last 5 minutes. Only supported for PMP 450 AP platform.')
frUtlMedMaxDownlinkSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedMaxDownlinkSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlMedMaxDownlinkSlots.setDescription('Maximum possible downlink data slots for 5 minutes. \n                        This is calculated as ((Downlink slots in a frame) * (Number of frames in a second) * 5 * 60 (seconds)). \n                        Downlink slots in a frame depends on the frame configuration. \n                        Number of frames in a second depends on the configured frame period of 5 ms (200 frames) or 2.5 ms (400 frames). \n                        Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlMedMaxUplinkSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedMaxUplinkSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlMedMaxUplinkSlots.setDescription('Maximum possible uplink data slots for 5 minutes. \n                        This is calculated as ((Uplink slots in a frame) * (Number of frames in a second) * 5 * 60(seconds)). \n                        Uplink slots in a frame depends on the frame configuration. \n                        Number of frames in a second depends on the configured frame period of 5 ms (200 frames) or 2.5 ms (400 frames). \n                        Only supported for PMP 450 AP platform.')
frUtlMedEthInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedEthInDiscards.setStatus('current')
if mibBuilder.loadTexts: frUtlMedEthInDiscards.setDescription('Number of incoming ethernet packets discarded in the last 5 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlMedEthOutDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedEthOutDiscards.setStatus('current')
if mibBuilder.loadTexts: frUtlMedEthOutDiscards.setDescription('Number of outgoing ethernet packets discarded in the last 5 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlMedRFInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedRFInDiscards.setStatus('current')
if mibBuilder.loadTexts: frUtlMedRFInDiscards.setDescription('Number of incoming radio packets discarded in the last 5 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlMedRFOutDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedRFOutDiscards.setStatus('current')
if mibBuilder.loadTexts: frUtlMedRFOutDiscards.setDescription('Number of outgoing radio packets discarded in the last 5 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlMediumIntervalBwReqPercentage = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMediumIntervalBwReqPercentage.setStatus('current')
if mibBuilder.loadTexts: frUtlMediumIntervalBwReqPercentage.setDescription('Percentage of bandwidth request received in the last 5 minutes.\n                        \tOnly supported for PMP 450 platform.\n\t\t\t\t\t\t\tPMP 430 SMs will not be included in this statistic.')
frUtlMediumIntervalBwReqRx = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMediumIntervalBwReqRx.setStatus('current')
if mibBuilder.loadTexts: frUtlMediumIntervalBwReqRx.setDescription('Number of bandwidth request received in the last 5 minutes.\n                        \tOnly supported for PMP 450 platform.\n                        \tPMP 430 SMs will not be included in this statistic.')
frUtlMediumIntervalBwReqMissed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMediumIntervalBwReqMissed.setStatus('current')
if mibBuilder.loadTexts: frUtlMediumIntervalBwReqMissed.setDescription('Number of bandwidth request missed in the last 5 minutes.\n                            Only supported for PMP 450 platform.\n                            PMP 430 SMs will not be included in this statistic.')
frUtlMediumContentionSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMediumContentionSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlMediumContentionSlots.setDescription('Number of scheduled contention slots available in the last 5 minutes. \n                        \tOnly supported for PMP 450 AP platform.')
frUtlMediumAvgDownlinkSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMediumAvgDownlinkSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlMediumAvgDownlinkSlots.setDescription('Average downlink data slots per frame in the last 5 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlMediumAvgUplinkSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMediumAvgUplinkSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlMediumAvgUplinkSlots.setDescription('Average uplink data slots per frame in the last 5 minutes. Only supported for PMP 450 AP platform.')
frUtlMediumAvgContentionSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMediumAvgContentionSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlMediumAvgContentionSlots.setDescription('Average contention slots per frame in the last 5 minutes. \n                        \tOnly supported for PMP 450 AP platform.')
frUtlMediumMaxContentionSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMediumMaxContentionSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlMediumMaxContentionSlots.setDescription('Maximum possible contention slots for 5 minutes. \n                        This is calculated as (((Uplink slots in a frame) + (Contention slots in a frame)) * (Number of frames in a second) * 5 * 60(seconds)). \n                        Uplink slots and contention slots in a frame depend on the frame configuration. \n                        Number of frames in a second depends on the configured frame period of 5 ms (200 frames) or 2.5 ms (400 frames). \n                        Only supported for PMP 450 AP platform.')
frUtlMedDownlinkAckUtilization = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedDownlinkAckUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlMedDownlinkAckUtilization.setDescription('Percentage of downlink Canopy MAC Acknowledgment utilization in the last 5 minutes.')
frUtlMedDownlinkBcastMcastUtilization = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedDownlinkBcastMcastUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlMedDownlinkBcastMcastUtilization.setDescription('Percentage of downlink Broadcast/Multicast utilization in the last 5 minutes.')
frUtlMedMumimoDownlinkSectorUtilization = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedMumimoDownlinkSectorUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlMedMumimoDownlinkSectorUtilization.setDescription('Percentage of MU-MIMO downlink Sector utilization in the last 5 minutes.\n                        \tMU-MIMO only.')
frUtlMedMumimoDownlinkMumimoUtilization = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedMumimoDownlinkMumimoUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlMedMumimoDownlinkMumimoUtilization.setDescription('Percentage of MU-MIMO downlink utilization in the last 5 minutes.\n                        \tMU-MIMO only.')
frUtlMedMumimoDownlinkSumimoUtilization = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedMumimoDownlinkSumimoUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlMedMumimoDownlinkSumimoUtilization.setDescription('Percentage of SU-MIMO downlink utilization in the last 5 minutes.\n                        \tMU-MIMO only.')
frUtlMedMumimoDownlinkMultiplexingGain = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 700))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedMumimoDownlinkMultiplexingGain.setStatus('current')
if mibBuilder.loadTexts: frUtlMedMumimoDownlinkMultiplexingGain.setDescription('MU-MIMO Multiplexing Gain in the last 5 minutes.\n                        \tThis value is scaled up by 100 (ie. 269 = 2.69).\n                        \tMU-MIMO only.')
frUtlMedMumimoDownlinkAvgGroupSize = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 2, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 700))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedMumimoDownlinkAvgGroupSize.setStatus('current')
if mibBuilder.loadTexts: frUtlMedMumimoDownlinkAvgGroupSize.setDescription('Average MU-MIMO Group Size in the last 5 minutes.\n                        \tThis value is scaled up by 100 (ie. 269 = 2.69).\n                        \tMU-MIMO only.')
frUtlHighTotalDownlinkUtilization = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighTotalDownlinkUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlHighTotalDownlinkUtilization.setDescription('Percentage of total downlink utilization in the last 15 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlHighTotalUplinkUtilization = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighTotalUplinkUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlHighTotalUplinkUtilization.setDescription('Percentage of total uplink utilization in the last 15 minutes. Only supported for PMP 450 AP platform.')
frUtlHighTotalDownlinkSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighTotalDownlinkSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlHighTotalDownlinkSlots.setDescription('Total downlink data slots in the last 15 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlHighDownlinkLowPrioSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighDownlinkLowPrioSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlHighDownlinkLowPrioSlots.setDescription('Number of data slots used for downlink low priority traffic in the last 15 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlHighDownlinkHiPrioSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighDownlinkHiPrioSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlHighDownlinkHiPrioSlots.setDescription('Number of data slots used for downlink high priority traffic in the last 15 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlHighDownlinkBcastSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighDownlinkBcastSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlHighDownlinkBcastSlots.setDescription('Number of data slots used for downlink broadcast and multicast traffic in the last 15 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlHighDownlinkAckSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighDownlinkAckSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlHighDownlinkAckSlots.setDescription('Number of data slots used for Downlink Canopy MAC Acknowledgements in the last 15 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlHighDownlinkCntlMsgSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighDownlinkCntlMsgSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlHighDownlinkCntlMsgSlots.setDescription('Number of data slots used for downlink registration control messages in the last 15 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlHighTotalUplinkSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighTotalUplinkSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlHighTotalUplinkSlots.setDescription('Total uplink data slots in the last 15 minutes. Only supported for PMP 450 AP platform.')
frUtlHighUplinkLowPrioSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighUplinkLowPrioSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlHighUplinkLowPrioSlots.setDescription('Number of data slots used for uplink low priority traffic in the last 15 minutes. Only supported for PMP 450 AP platform.')
frUtlHighUplinkHiPrioSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighUplinkHiPrioSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlHighUplinkHiPrioSlots.setDescription('Number of data slots used for uplink high priority traffic in the last 15 minutes. Only supported for PMP 450 AP platform.')
frUtlHighUplinkAckSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighUplinkAckSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlHighUplinkAckSlots.setDescription('Number of data slots used for Uplink Canopy MAC Acknowledgements in the last 15 minutes. Only supported for PMP 450 AP platform.')
frUtlHighMaxDownlinkSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighMaxDownlinkSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlHighMaxDownlinkSlots.setDescription('Maximum possible downlink data slots for 15 minutes. \n                        This is calculated as ((Downlink slots in a frame) * (Number of frames in a second) * 15 * 60(seconds)). \n                        Downlink slots in a frame depends on the frame configuration. \n                        Number of frames in a second depends on the configured frame period of 5 ms (200 frames) or 2.5 ms (400 frames). \n                        Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlHighMaxUplinkSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighMaxUplinkSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlHighMaxUplinkSlots.setDescription('Maximum possible uplink data slots for 15 minutes. \n                        This is calculated as ((Uplink slots in a frame) * (Number of frames in a second) * 15 * 60(seconds)). \n                        Uplink slots in a frame depends on the frame configuration. \n                        Number of frames in a second depends on the configured frame period of 5 ms (200 frames) or 2.5 ms (400 frames). \n                        Only supported for PMP 450 AP platform.')
frUtlHighEthInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighEthInDiscards.setStatus('current')
if mibBuilder.loadTexts: frUtlHighEthInDiscards.setDescription('Number of incoming ethernet packets discarded in the last 15 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlHighEthOutDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighEthOutDiscards.setStatus('current')
if mibBuilder.loadTexts: frUtlHighEthOutDiscards.setDescription('Number of outgoing ethernet packets discarded in the last 15 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlHighRFInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighRFInDiscards.setStatus('current')
if mibBuilder.loadTexts: frUtlHighRFInDiscards.setDescription('Number of incoming radio packets discarded in the last 15 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlHighRFOutDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighRFOutDiscards.setStatus('current')
if mibBuilder.loadTexts: frUtlHighRFOutDiscards.setDescription('Number of outgoing radio packets discarded in the last 15 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlHighIntervalBwReqPercentage = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighIntervalBwReqPercentage.setStatus('current')
if mibBuilder.loadTexts: frUtlHighIntervalBwReqPercentage.setDescription('Percentage of bandwidth request received in the last 15 minutes.\n                        \tOnly supported for PMP 450 platform.\n                        \tPMP 430 SMs will not be included in this statistic.')
frUtlHighIntervalBwReqRx = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighIntervalBwReqRx.setStatus('current')
if mibBuilder.loadTexts: frUtlHighIntervalBwReqRx.setDescription('Number of bandwidth request received in the last 15 minutes.\n                        \tOnly supported for PMP 450 platform.\n                        \tPMP 430 SMs will not be included in this statistic.')
frUtlHighIntervalBwReqMissed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighIntervalBwReqMissed.setStatus('current')
if mibBuilder.loadTexts: frUtlHighIntervalBwReqMissed.setDescription('Number of bandwidth request missed in the last 15 minutes.\n                            Only supported for PMP 450 platform.\n                            PMP 430 SMs will not be included in this statistic.')
frUtlHighContentionSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighContentionSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlHighContentionSlots.setDescription('Number of scheduled contention slots available in the last 15 minutes. \n                        \tOnly supported for PMP 450 AP platform.')
frUtlHighAvgDownlinkSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighAvgDownlinkSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlHighAvgDownlinkSlots.setDescription('Average downlink data slots per frame in the last 15 minutes. Only supported for PMP and PTP 450 AP and Backhauls.')
frUtlHighAvgUplinkSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighAvgUplinkSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlHighAvgUplinkSlots.setDescription('Average uplink data slots per frame in the last 15 minutes. Only supported for PMP 450 AP platform.')
frUtlHighAvgContentionSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighAvgContentionSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlHighAvgContentionSlots.setDescription('Average contention slots per frame in the last 15 minutes. \n                        \tOnly supported for PMP 450 AP platform.')
frUtlHighMaxContentionSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighMaxContentionSlots.setStatus('current')
if mibBuilder.loadTexts: frUtlHighMaxContentionSlots.setDescription('Maximum possible contention slots for 15 minutes. \n                        This is calculated as (((Uplink slots in a frame) + (Contention slots in a frame)) * (Number of frames in a second) * 15 * 60(seconds)). \n                        Uplink slots and contention slots in a frame depend on the frame configuration. \n                        Number of frames in a second depends on the configured frame period of 5 ms (200 frames) or 2.5 ms (400 frames). \n                        Only supported for PMP 450 AP platform.')
frUtlHighDownlinkAckUtilization = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighDownlinkAckUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlHighDownlinkAckUtilization.setDescription('Percentage of downlink Canopy MAC Acknowledgment utilization in the last 15 minutes.\n                        \tMU-MIMO only.')
frUtlHighDownlinkBcastMcastUtilization = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighDownlinkBcastMcastUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlHighDownlinkBcastMcastUtilization.setDescription('Percentage of downlink Broadcast/Multicast utilization in the last 15 minutes.')
frUtlHighMumimoDownlinkSectorUtilization = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighMumimoDownlinkSectorUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlHighMumimoDownlinkSectorUtilization.setDescription('Percentage of MU-MIMO downlink Sector utilization in the last 15 minutes.\n                        \tMU-MIMO only.')
frUtlHighMumimoDownlinkMumimoUtilization = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighMumimoDownlinkMumimoUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlHighMumimoDownlinkMumimoUtilization.setDescription('Percentage of MU-MIMO downlink utilization in the last 15 minutes.\n                        \tMU-MIMO only.')
frUtlHighMumimoDownlinkSumimoUtilization = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighMumimoDownlinkSumimoUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlHighMumimoDownlinkSumimoUtilization.setDescription('Percentage of SU-MIMO downlink utilization in the last 15 minutes.\n                        \tMU-MIMO only.')
frUtlHighMumimoDownlinkMultiplexingGain = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 700))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighMumimoDownlinkMultiplexingGain.setStatus('current')
if mibBuilder.loadTexts: frUtlHighMumimoDownlinkMultiplexingGain.setDescription('MU-MIMO Multiplexing Gain in the last 15 minutes.\n                        \tThis value is scaled up by 100 (ie. 269 = 2.69).\n                        \tMU-MIMO only.')
frUtlHighMumimoDownlinkAvgGroupSize = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 3, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 700))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighMumimoDownlinkAvgGroupSize.setStatus('current')
if mibBuilder.loadTexts: frUtlHighMumimoDownlinkAvgGroupSize.setDescription('Average MU-MIMO Group Size in the last 15 minutes.\n                        \tThis value is scaled up by 100 (ie. 269 = 2.69).\n                        \tMU-MIMO only.')
whispApsFrUtlStatsMumimoSpatialTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 4), )
if mibBuilder.loadTexts: whispApsFrUtlStatsMumimoSpatialTable.setStatus('current')
if mibBuilder.loadTexts: whispApsFrUtlStatsMumimoSpatialTable.setDescription('MU-MIMO Spatial Utilization Metrics.')
whispApsFrUtlStatsMumimoSpatialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 4, 1), ).setIndexNames((0, "WHISP-APS-MIB", "frUtlMumimoDownlinkUtilizationSfBin"))
if mibBuilder.loadTexts: whispApsFrUtlStatsMumimoSpatialEntry.setStatus('current')
if mibBuilder.loadTexts: whispApsFrUtlStatsMumimoSpatialEntry.setDescription('MU-MIMO Spatial Utilization Metrics.')
frUtlMumimoDownlinkUtilizationSfBin = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMumimoDownlinkUtilizationSfBin.setStatus('current')
if mibBuilder.loadTexts: frUtlMumimoDownlinkUtilizationSfBin.setDescription('Spatial Frequency Bin.\n\t\t\t\t\t\t\tMU-MIMO only.')
frUtlMumimoDownlinkUtilizationSfRange = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMumimoDownlinkUtilizationSfRange.setStatus('current')
if mibBuilder.loadTexts: frUtlMumimoDownlinkUtilizationSfRange.setDescription('Spatial Frequency Range.\n\t\t\t\t\t\t\tMU-MIMO only.')
frUtlMumimoDownlinkUtilizationAzimuth = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMumimoDownlinkUtilizationAzimuth.setStatus('current')
if mibBuilder.loadTexts: frUtlMumimoDownlinkUtilizationAzimuth.setDescription('Azimuth Ranges per Spatial Frequency bin.\n\t\t\t\t\t\t\tMU-MIMO only.')
frUtlMumimoDownlinkUtilizationVcRange = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMumimoDownlinkUtilizationVcRange.setStatus('current')
if mibBuilder.loadTexts: frUtlMumimoDownlinkUtilizationVcRange.setDescription('VCs in Spatial Frequency Range.\n\t\t\t\t\t\t\tMU-MIMO only.')
frUtlMumimoDownlinkInstantaneousUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMumimoDownlinkInstantaneousUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlMumimoDownlinkInstantaneousUtilization.setDescription('Instantanous MU-MIMO downlink utilization. This updates every 500ms.\n                        \tMU-MIMO only.')
frUtlLowTotalMumimoDownlinkUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowTotalMumimoDownlinkUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlLowTotalMumimoDownlinkUtilization.setDescription('Percentage of total MU-MIMO downlink utilization in the last 1 minute.\n                        \tMU-MIMO only.')
frUtlMedTotalMumimoDownlinkUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedTotalMumimoDownlinkUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlMedTotalMumimoDownlinkUtilization.setDescription('Percentage of total MU-MIMO downlink utilization in the last 5 minutes.\n                        \tMU-MIMO only.')
frUtlHighTotalMumimoDownlinkUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighTotalMumimoDownlinkUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlHighTotalMumimoDownlinkUtilization.setDescription('Percentage of total MU-MIMO downlink utilization in the last 15 minutes.\n                        \tMU-MIMO only.')
frUtlLowMaxMumimoDownlinkUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowMaxMumimoDownlinkUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlLowMaxMumimoDownlinkUtilization.setDescription('Maximum MU-MIMO downlink utilization in the last 1 minute.\n                        \tMU-MIMO only.')
frUtlMedMaxMumimoDownlinkUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedMaxMumimoDownlinkUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlMedMaxMumimoDownlinkUtilization.setDescription('Maximum MU-MIMO downlink utilization in the last 5 minutes.\n                        \tMU-MIMO only.')
frUtlHighMaxMumimoDownlinkUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighMaxMumimoDownlinkUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlHighMaxMumimoDownlinkUtilization.setDescription('Maximum MU-MIMO downlink utilization in the last 15 minutes.\n                        \tMU-MIMO only.')
frUtlLowMinMumimoDownlinkUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlLowMinMumimoDownlinkUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlLowMinMumimoDownlinkUtilization.setDescription('Minimum MU-MIMO downlink utilization in the last 1 minute.\n                        \tMU-MIMO only.')
frUtlMedMinMumimoDownlinkUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMedMinMumimoDownlinkUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlMedMinMumimoDownlinkUtilization.setDescription('Minimum MU-MIMO downlink utilization in the last 5 minutes.\n                        \tMU-MIMO only.')
frUtlHighMinMumimoDownlinkUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlHighMinMumimoDownlinkUtilization.setStatus('current')
if mibBuilder.loadTexts: frUtlHighMinMumimoDownlinkUtilization.setDescription('Minimum MU-MIMO downlink utilization in the last 15 minutes.\n                        \tMU-MIMO only.')
whispApsFrUtlStatsMumimoDistributionTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 5), )
if mibBuilder.loadTexts: whispApsFrUtlStatsMumimoDistributionTable.setStatus('current')
if mibBuilder.loadTexts: whispApsFrUtlStatsMumimoDistributionTable.setDescription('MU-MIMO Distribution Metrics.')
whispApsFrUtlStatsMumimoDistributionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 5, 1), ).setIndexNames((0, "WHISP-APS-MIB", "frUtlMumimoDownlinkDistributionIndex"))
if mibBuilder.loadTexts: whispApsFrUtlStatsMumimoDistributionEntry.setStatus('current')
if mibBuilder.loadTexts: whispApsFrUtlStatsMumimoDistributionEntry.setDescription('MU-MIMO Distribution Metrics.')
frUtlMumimoDownlinkDistributionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMumimoDownlinkDistributionIndex.setStatus('current')
if mibBuilder.loadTexts: frUtlMumimoDownlinkDistributionIndex.setDescription('MU-MIMO downlink Distribution Table Index.\n\t\t\t\t\t\t\tMU-MIMO only.')
frUtlMumimoDownlinkDistributionGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMumimoDownlinkDistributionGroup.setStatus('current')
if mibBuilder.loadTexts: frUtlMumimoDownlinkDistributionGroup.setDescription('MU-MIMO downlink Distribution Group.\n\t\t\t\t\t\t\tMU-MIMO only.')
frUtlMumimoDownlinkDistributionVc = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMumimoDownlinkDistributionVc.setStatus('current')
if mibBuilder.loadTexts: frUtlMumimoDownlinkDistributionVc.setDescription('MU-MIMO downlink VC Distribution.\n\t\t\t\t\t\t\tMU-MIMO only.')
frUtlMumimoDownlinkDistributionMedianSlotCount = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 12, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUtlMumimoDownlinkDistributionMedianSlotCount.setStatus('current')
if mibBuilder.loadTexts: frUtlMumimoDownlinkDistributionMedianSlotCount.setDescription('MU-MIMO downlink Median Slot Count Distribution.\n                        \tMU-MIMO only.')
regCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regCount.setStatus('current')
if mibBuilder.loadTexts: regCount.setDescription('Number of registered SMs.')
gpsStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsStatus.setStatus('current')
if mibBuilder.loadTexts: gpsStatus.setDescription('GPS status.')
radioSlicingAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioSlicingAp.setStatus('obsolete')
if mibBuilder.loadTexts: radioSlicingAp.setDescription('The variable is deprecated.')
radioTxGainAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioTxGainAp.setStatus('current')
if mibBuilder.loadTexts: radioTxGainAp.setDescription('Radio transmit gain setting.')
dataSlotDwn = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSlotDwn.setStatus('current')
if mibBuilder.loadTexts: dataSlotDwn.setDescription('Number of data slot down.')
dataSlotUp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSlotUp.setStatus('current')
if mibBuilder.loadTexts: dataSlotUp.setDescription('Number of data slot up.')
dataSlotUpHi = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSlotUpHi.setStatus('current')
if mibBuilder.loadTexts: dataSlotUpHi.setDescription('Number of high priority data slot up.')
upLnkAckSlot = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upLnkAckSlot.setStatus('current')
if mibBuilder.loadTexts: upLnkAckSlot.setDescription('Uplink ack slots.')
upLnkAckSlotHi = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upLnkAckSlotHi.setStatus('current')
if mibBuilder.loadTexts: upLnkAckSlotHi.setDescription('Hige priority uplink ack slots.')
dwnLnkAckSlot = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dwnLnkAckSlot.setStatus('current')
if mibBuilder.loadTexts: dwnLnkAckSlot.setDescription('Downlink ack slots.')
dwnLnkAckSlotHi = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dwnLnkAckSlotHi.setStatus('current')
if mibBuilder.loadTexts: dwnLnkAckSlotHi.setDescription('Hige priority downlink ack slots.')
numCtrSlot = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numCtrSlot.setStatus('current')
if mibBuilder.loadTexts: numCtrSlot.setDescription('Number of contention slots.')
numCtrSlotHi = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numCtrSlotHi.setStatus('current')
if mibBuilder.loadTexts: numCtrSlotHi.setDescription('High priority control slot.')
dfsStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsStatus.setStatus('current')
if mibBuilder.loadTexts: dfsStatus.setDescription('Dynamic frequency shifting status.')
dfsStatusPrimary = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsStatusPrimary.setStatus('current')
if mibBuilder.loadTexts: dfsStatusPrimary.setDescription('Dynamic frequency shifting status for Primary Channel.')
dfsStatusAlt1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsStatusAlt1.setStatus('current')
if mibBuilder.loadTexts: dfsStatusAlt1.setDescription('Dynamic frequency shifting status for Alternate Channel 1')
dfsStatusAlt2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsStatusAlt2.setStatus('current')
if mibBuilder.loadTexts: dfsStatusAlt2.setDescription('Dynamic frequency shifting status for Alternate Channel 2')
maxRegSMCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxRegSMCount.setStatus('current')
if mibBuilder.loadTexts: maxRegSMCount.setDescription('Maximum number of unique Subscriber Modules registered with this AP at once')
systemTime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTime.setStatus('current')
if mibBuilder.loadTexts: systemTime.setDescription('Displays the system time of the unit')
lastNTPTime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastNTPTime.setStatus('current')
if mibBuilder.loadTexts: lastNTPTime.setDescription('Displays the last NTP time acquired by the AP')
regulatoryStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regulatoryStatus.setStatus('current')
if mibBuilder.loadTexts: regulatoryStatus.setDescription('The current status of the regulatory check on the AP.')
dhcpRlyAgntStat_reqRecvd = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 22), Counter32()).setLabel("dhcpRlyAgntStat-reqRecvd").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_reqRecvd.setStatus('current')
if mibBuilder.loadTexts: dhcpRlyAgntStat_reqRecvd.setDescription('Number of DHCP Requests received by the DHCP Relay.')
dhcpRlyAgntStat_reqRelayed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 23), Counter32()).setLabel("dhcpRlyAgntStat-reqRelayed").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_reqRelayed.setStatus('current')
if mibBuilder.loadTexts: dhcpRlyAgntStat_reqRelayed.setDescription('Number of DHCP Requests relayed by the DHCP Relay.')
dhcpRlyAgntStat_reqDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 24), Counter32()).setLabel("dhcpRlyAgntStat-reqDiscards").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_reqDiscards.setStatus('current')
if mibBuilder.loadTexts: dhcpRlyAgntStat_reqDiscards.setDescription('Number of DHCP Requests discarded by the DHCP Relay.')
dhcpRlyAgntStat_respRecvd = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 25), Counter32()).setLabel("dhcpRlyAgntStat-respRecvd").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_respRecvd.setStatus('current')
if mibBuilder.loadTexts: dhcpRlyAgntStat_respRecvd.setDescription('Number of DHCP Replies received by the DHCP Relay.')
dhcpRlyAgntStat_respRelayed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 26), Counter32()).setLabel("dhcpRlyAgntStat-respRelayed").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_respRelayed.setStatus('current')
if mibBuilder.loadTexts: dhcpRlyAgntStat_respRelayed.setDescription('Number of DHCP Replies relayed by the DHCP Relay.')
dhcpRlyAgntStat_respDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 27), Counter32()).setLabel("dhcpRlyAgntStat-respDiscards").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_respDiscards.setStatus('current')
if mibBuilder.loadTexts: dhcpRlyAgntStat_respDiscards.setDescription('Number of DHCP Replies discarded by the DHCP Relay.')
dhcpRlyAgntStat_untrustedDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 28), Counter32()).setLabel("dhcpRlyAgntStat-untrustedDiscards").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_untrustedDiscards.setStatus('current')
if mibBuilder.loadTexts: dhcpRlyAgntStat_untrustedDiscards.setDescription('Number of untrusted messages discarded by the DHCP Relay.')
dhcpRlyAgntStat_maxHopDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 29), Counter32()).setLabel("dhcpRlyAgntStat-maxHopDiscards").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_maxHopDiscards.setStatus('current')
if mibBuilder.loadTexts: dhcpRlyAgntStat_maxHopDiscards.setDescription('Number of messages discarded by the DHCP Relay due to exceeded max hop.')
dhcpRlyAgntStat_pktTooBig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 30), Counter32()).setLabel("dhcpRlyAgntStat-pktTooBig").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_pktTooBig.setStatus('current')
if mibBuilder.loadTexts: dhcpRlyAgntStat_pktTooBig.setDescription('Number of messages forwarded without relay information by the DHCP Relay due to relay information exceeding max message size.')
dhcpRlyAgntStat_invalidGiaddrDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 31), Counter32()).setLabel("dhcpRlyAgntStat-invalidGiaddrDiscards").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_invalidGiaddrDiscards.setStatus('current')
if mibBuilder.loadTexts: dhcpRlyAgntStat_invalidGiaddrDiscards.setDescription('Number of messages discarded by the DHCP Relay due to invalid giaddr in packet.')
regFailureCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regFailureCount.setStatus('current')
if mibBuilder.loadTexts: regFailureCount.setDescription('The Total number or Registration Grant Failures.')
ntpLogSNMP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 33), EventString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpLogSNMP.setStatus('current')
if mibBuilder.loadTexts: ntpLogSNMP.setDescription('NTP Log')
uGPSPowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uGPSPowerStatus.setStatus('current')
if mibBuilder.loadTexts: uGPSPowerStatus.setDescription('Current UGPS Power Status (UGPS capable APs only).')
rfOutDiscardRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOutDiscardRate.setStatus('current')
if mibBuilder.loadTexts: rfOutDiscardRate.setDescription('Percentage of OutDiscards on the RF link (RF Overload %) in the last minute.')
autoUpdateGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoUpdateGlobalStatus.setStatus('current')
if mibBuilder.loadTexts: autoUpdateGlobalStatus.setDescription('Status of the Auto-Update Command')
currentRadioFreqCarrier = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentRadioFreqCarrier.setStatus('current')
if mibBuilder.loadTexts: currentRadioFreqCarrier.setDescription("Returns the current operating frequency of the AP.\n\t\t\t\t\t\t  Units vary by platform:\n\t\t\t\t\t\t    FSK 5.2, 5.4, 5.7 GHz: OID returns MHz\n\t\t\t\t\t\t    FSK 900 MHz, 2.4 GHz: OID returns 100's of KHz\n\t\t\t\t\t\t    OFDM: OID returns 10's of KHz")
mumimoMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 38), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mumimoMode.setStatus('current')
if mibBuilder.loadTexts: mumimoMode.setDescription('Returns the current operating mode of MU-MIMO.\n                          PMP 450m only.')
vcCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcCount.setStatus('current')
if mibBuilder.loadTexts: vcCount.setDescription('Number of VCs allocated across all registered SMs.')
mumimoTrialPercentageRemaining = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mumimoTrialPercentageRemaining.setStatus('current')
if mibBuilder.loadTexts: mumimoTrialPercentageRemaining.setDescription('Percentage of remaining MU-MIMO Trial Licenses')
ntpDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableDomain", 0), ("appendDomain", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpDomainNameAppend.setStatus('current')
if mibBuilder.loadTexts: ntpDomainNameAppend.setDescription("Select whether to append the configured management domain name to\n            the configured trap names.  For example, if dnsMgmtDomainName is\n\t\t\tset to 'example.com', ntpServer is set to 'ntp', and ntpDomainNameAppend\n            is set to appendDomain, the ntpServer name used would be 'ntp.example.com'.")
ntpServer1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServer1.setStatus('current')
if mibBuilder.loadTexts: ntpServer1.setDescription('NTP Server 1 Address.\n            Format is either an IP address or DNS name.')
ntpServer2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServer2.setStatus('current')
if mibBuilder.loadTexts: ntpServer2.setDescription('NTP Server 2 Address.\n            Format is either an IP address or DNS name.')
ntpServer3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServer3.setStatus('current')
if mibBuilder.loadTexts: ntpServer3.setDescription('NTP Server 3 Address.\n            Format is either an IP address or DNS name.')
dhcprDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableDomain", 0), ("appendDomain", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcprDomainNameAppend.setStatus('current')
if mibBuilder.loadTexts: dhcprDomainNameAppend.setDescription("Select whether to append the configured management domain name to\n            the configured trap names.  For example, if dnsMgmtDomainName is\n\t\t\tset to 'example.com', dhcprServer is set to 'dhcpr', and dhcprDomainNameAppend\n            is set to appendDomain, the dhcprServer name used would be 'dhcpr.example.com'.")
dhcprServer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcprServer.setStatus('current')
if mibBuilder.loadTexts: dhcprServer.setDescription('DHCP Server IP which will be used for forwarding DHCP messages\n\t\t\tby the DHCP Relay Agent in the MultiPoint AP.\n              - Format is either an IP address or DNS name.\n              - Default is 255.255.255.255 (broadcast).')
authDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableDNSDomain", 0), ("enableDNSDomain", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authDomainNameAppend.setStatus('current')
if mibBuilder.loadTexts: authDomainNameAppend.setDescription("Select whether to append the configured management domain name to\n            the configured trap names.  For example, if dnsMgmtDomainName is\n\t\t\tset to 'example.com', authServer1 is set to 'auth1', and authDomainNameAppend\n            is set to appendDomain, the authServer1 name used would be 'auth1.example.com'.")
authServer1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authServer1.setStatus('current')
if mibBuilder.loadTexts: authServer1.setDescription('Authentication Server 1.\n            Format is either an IP address or DNS name.')
authServer2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authServer2.setStatus('current')
if mibBuilder.loadTexts: authServer2.setDescription('Authentication Server 2.\n            Format is either an IP address or DNS name.')
authServer3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authServer3.setStatus('current')
if mibBuilder.loadTexts: authServer3.setDescription('Authentication Server 3.\n            Format is either an IP address or DNS name.')
authServer4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authServer4.setStatus('current')
if mibBuilder.loadTexts: authServer4.setDescription('Authentication Server 4.\n            Format is either an IP address or DNS name.')
authServer5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authServer5.setStatus('current')
if mibBuilder.loadTexts: authServer5.setDescription('Authentication Server 5.\n            Format is either an IP address or DNS name.')
acctDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableDomain", 0), ("appendDomain", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acctDomainNameAppend.setStatus('obsolete')
if mibBuilder.loadTexts: acctDomainNameAppend.setDescription('Obsoleted.  Use whispApsDNS.authDomainNameAppend.')
userAuthServer1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthServer1.setStatus('current')
if mibBuilder.loadTexts: userAuthServer1.setDescription('User Authentication Server 1.\n            Format is either an IP address or DNS name.')
userAuthServer2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthServer2.setStatus('current')
if mibBuilder.loadTexts: userAuthServer2.setDescription('User Authentication Server 2.\n            Format is either an IP address or DNS name.')
userAuthServer3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthServer3.setStatus('current')
if mibBuilder.loadTexts: userAuthServer3.setDescription('User Authentication Server 3.\n            Format is either an IP address or DNS name.')
userAuthDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableDNSDomain", 0), ("enableDNSDomain", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthDomainNameAppend.setStatus('current')
if mibBuilder.loadTexts: userAuthDomainNameAppend.setDescription("Select whether to append the configured management domain name to\n            the configured user authentication server names.  For example, if dnsMgmtDomainName is\n\t\t\tset to 'example.com', authServer1 is set to 'auth1', and userAuthDomainNameAppend\n            is set to enableDNSDomain, the authServer1 name used would be 'auth1.example.com'.")
clearLinkTableStats = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearLinkTableStats.setStatus('current')
if mibBuilder.loadTexts: clearLinkTableStats.setDescription('Setting this to a nonzero value will clear the link table stats.')
whispApsLQILowInterval = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 1), )
if mibBuilder.loadTexts: whispApsLQILowInterval.setStatus('current')
if mibBuilder.loadTexts: whispApsLQILowInterval.setDescription('Link Quality Indicator one minute interval table.')
whispApsLQILowIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 1, 1), ).setIndexNames((0, "WHISP-APS-MIB", "lqiLowLinkLUID"))
if mibBuilder.loadTexts: whispApsLQILowIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: whispApsLQILowIntervalEntry.setDescription('Link Quality Indicator for one minute Interval entry.')
lqiLowLinkLUID = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 239))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiLowLinkLUID.setStatus('current')
if mibBuilder.loadTexts: lqiLowLinkLUID.setDescription('Logical User Identfication (LUID) number')
lqiLowLQI = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiLowLQI.setStatus('current')
if mibBuilder.loadTexts: lqiLowLQI.setDescription("Link Quality Indicator for one minute interval. \n                            Ranges from 0 to 100 where 100 is the best.\n                            It's calculated based on receive power, modulation rate, re-registrations and beacon percentage.")
lqiLowDownlinkQualityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiLowDownlinkQualityIndex.setStatus('current')
if mibBuilder.loadTexts: lqiLowDownlinkQualityIndex.setDescription('Downlink Quality Index for one minute interval in percentage. 100% is best quality')
lqiLowDownlinkAverageActualRate = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiLowDownlinkAverageActualRate.setStatus('current')
if mibBuilder.loadTexts: lqiLowDownlinkAverageActualRate.setDescription('Downlink Actual average transmit modulation rate in tenths for one minute interval. eg: 73 is 7.3X')
lqiLowDownlinkExpectedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiLowDownlinkExpectedRate.setStatus('current')
if mibBuilder.loadTexts: lqiLowDownlinkExpectedRate.setDescription('Downlink Expected Rate in tenths for one minute interval. eg: 80 is 8X\n                            This is based upon the uplink receive power and does not take into account interference.')
lqiLowUplinkQualityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiLowUplinkQualityIndex.setStatus('current')
if mibBuilder.loadTexts: lqiLowUplinkQualityIndex.setDescription('Uplink Quality Index for one minute interval in percentage. 100% is best quality')
lqiLowUplinkAverageActualRate = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiLowUplinkAverageActualRate.setStatus('current')
if mibBuilder.loadTexts: lqiLowUplinkAverageActualRate.setDescription('Uplink Actual average transmit modulation rate in tenths for one minute interval. eg: 73 is 7.3X')
lqiLowUplinkExpectedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiLowUplinkExpectedRate.setStatus('current')
if mibBuilder.loadTexts: lqiLowUplinkExpectedRate.setDescription('Uplink Expected Rate in tenths for one minute interval. eg: 80 is 8X\n                            This is based upon the uplink receive power and does not take into account interference.')
lqiLowBeaconQualityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiLowBeaconQualityIndex.setStatus('current')
if mibBuilder.loadTexts: lqiLowBeaconQualityIndex.setDescription('Beacon Quality Index for one minute interval in percentage. 100% is best quality')
lqiLowBeaconPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiLowBeaconPercent.setStatus('current')
if mibBuilder.loadTexts: lqiLowBeaconPercent.setDescription('Received beacon percentage for one minute interval')
lqiLowReRegQualityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiLowReRegQualityIndex.setStatus('current')
if mibBuilder.loadTexts: lqiLowReRegQualityIndex.setDescription('Beacon Quality Index for one minute interval in percentage. 100% is best quality')
lqiLowReRegCount = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiLowReRegCount.setStatus('current')
if mibBuilder.loadTexts: lqiLowReRegCount.setDescription('Re Registration count for one minute interval')
whispApsLQIMidInterval = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 2), )
if mibBuilder.loadTexts: whispApsLQIMidInterval.setStatus('current')
if mibBuilder.loadTexts: whispApsLQIMidInterval.setDescription('Link Quality Indicator five minutes interval table.')
whispApsLQIMidIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 2, 1), ).setIndexNames((0, "WHISP-APS-MIB", "lqiMidLinkLUID"))
if mibBuilder.loadTexts: whispApsLQIMidIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: whispApsLQIMidIntervalEntry.setDescription('Link Quality Indicator for five minutes interval entry.')
lqiMidLinkLUID = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 239))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiMidLinkLUID.setStatus('current')
if mibBuilder.loadTexts: lqiMidLinkLUID.setDescription('Logical User Identfication (LUID) number')
lqiMidLQI = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiMidLQI.setStatus('current')
if mibBuilder.loadTexts: lqiMidLQI.setDescription("Link Quality Indicator for five minutes interval. \n                            Ranges from 0 to 100 where 100 is the best.\n                            It's calculated based on receive power, modulation rate, re-registrations and beacon percentage.")
lqiMidDownlinkQualityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiMidDownlinkQualityIndex.setStatus('current')
if mibBuilder.loadTexts: lqiMidDownlinkQualityIndex.setDescription('Downlink Quality Index for five minute interval in percentage. 100% is best quality')
lqiMidDownlinkAverageActualRate = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiMidDownlinkAverageActualRate.setStatus('current')
if mibBuilder.loadTexts: lqiMidDownlinkAverageActualRate.setDescription('Downlink Actual average transmit modulation rate in tenths for five minute interval. eg: 73 is 7.3X')
lqiMidDownlinkExpectedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiMidDownlinkExpectedRate.setStatus('current')
if mibBuilder.loadTexts: lqiMidDownlinkExpectedRate.setDescription('Downlink Expected Rate in tenths for five minute interval. eg: 80 is 8X')
lqiMidUplinkQualityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiMidUplinkQualityIndex.setStatus('current')
if mibBuilder.loadTexts: lqiMidUplinkQualityIndex.setDescription('Uplink Quality Index for five minute interval in percentage. 100% is best quality')
lqiMidUplinkAverageActualRate = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiMidUplinkAverageActualRate.setStatus('current')
if mibBuilder.loadTexts: lqiMidUplinkAverageActualRate.setDescription('Uplink Actual average transmit modulation rate in tenths for five minute interval. eg: 73 is 7.3X')
lqiMidUplinkExpectedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiMidUplinkExpectedRate.setStatus('current')
if mibBuilder.loadTexts: lqiMidUplinkExpectedRate.setDescription('Uplink Expected Rate in tenths for five minute interval. eg: 80 is 8X\n                            This is based upon the uplink receive power and does not take into account interference.')
lqiMidBeaconPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiMidBeaconPercent.setStatus('current')
if mibBuilder.loadTexts: lqiMidBeaconPercent.setDescription('Received beacon percent for five minute interval')
lqiMidBeaconQualityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiMidBeaconQualityIndex.setStatus('current')
if mibBuilder.loadTexts: lqiMidBeaconQualityIndex.setDescription('Beacon Quality Index for five minute interval in percentage. 100% is best quality')
lqiMidReRegCount = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiMidReRegCount.setStatus('current')
if mibBuilder.loadTexts: lqiMidReRegCount.setDescription('Re Registration count for five minute interval')
lqiMidReRegQualityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiMidReRegQualityIndex.setStatus('current')
if mibBuilder.loadTexts: lqiMidReRegQualityIndex.setDescription('Beacon Quality Index for five minute interval in percentage. 100% is best quality')
whispApsLQIHighInterval = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 3), )
if mibBuilder.loadTexts: whispApsLQIHighInterval.setStatus('current')
if mibBuilder.loadTexts: whispApsLQIHighInterval.setDescription('Link Quality Indicator fifteen minutes interval table.')
whispApsLQIHighIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 3, 1), ).setIndexNames((0, "WHISP-APS-MIB", "lqiHighLinkLUID"))
if mibBuilder.loadTexts: whispApsLQIHighIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: whispApsLQIHighIntervalEntry.setDescription('Link Quality Indicator for fifteen minutes interval entry.')
lqiHighLinkLUID = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 239))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiHighLinkLUID.setStatus('current')
if mibBuilder.loadTexts: lqiHighLinkLUID.setDescription('Logical User Identfication (LUID) number')
lqiHighLQI = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiHighLQI.setStatus('current')
if mibBuilder.loadTexts: lqiHighLQI.setDescription("Link Quality Indicator for fifteen minutes interval. \n                            Ranges from 0 to 100 where 100 is the best.\n                            It's calculated based on receive power, modulation rate, re-registrations and beacon percentage.")
lqiHighDownlinkQualityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiHighDownlinkQualityIndex.setStatus('current')
if mibBuilder.loadTexts: lqiHighDownlinkQualityIndex.setDescription('Downlink Quality Index for fifteen minute interval in percentage. 100% is best quality')
lqiHighDownlinkAverageActualRate = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiHighDownlinkAverageActualRate.setStatus('current')
if mibBuilder.loadTexts: lqiHighDownlinkAverageActualRate.setDescription('Downlink Actual average transmit modulation rate in tenths for fifteen minute interval. eg: 73 is 7.3X')
lqiHighDownlinkExpectedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiHighDownlinkExpectedRate.setStatus('current')
if mibBuilder.loadTexts: lqiHighDownlinkExpectedRate.setDescription('Downlink Expected Rate in tenths for fifteen minute interval. eg: 80 is 8X\n                            This is based upon the uplink receive power and does not take into account interference.')
lqiHighUplinkQualityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiHighUplinkQualityIndex.setStatus('current')
if mibBuilder.loadTexts: lqiHighUplinkQualityIndex.setDescription('Uplink Quality Index for fifteen minute interval in percentage. 100% is best quality')
lqiHighUplinkAverageActualRate = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiHighUplinkAverageActualRate.setStatus('current')
if mibBuilder.loadTexts: lqiHighUplinkAverageActualRate.setDescription('Uplink Actual average transmit modulation rate in tenths for fifteen minute interval. eg: 73 is 7.3X')
lqiHighUplinkExpectedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiHighUplinkExpectedRate.setStatus('current')
if mibBuilder.loadTexts: lqiHighUplinkExpectedRate.setDescription('Uplink Expected Rate in tenths for fifteen minute interval. eg: 80 is 8X\n                            This is based upon the uplink receive power and does not take into account interference.')
lqiHighBeaconQualityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiHighBeaconQualityIndex.setStatus('current')
if mibBuilder.loadTexts: lqiHighBeaconQualityIndex.setDescription('Beacon Quality Index for fifteen minute interval in percentage. 100% is best quality')
lqiHighBeaconPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiHighBeaconPercent.setStatus('current')
if mibBuilder.loadTexts: lqiHighBeaconPercent.setDescription('Received beacon percent for fifteen minute interval')
lqiHighReRegQualityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiHighReRegQualityIndex.setStatus('current')
if mibBuilder.loadTexts: lqiHighReRegQualityIndex.setDescription('Beacon Quality Index for fifteen minute interval in percentage. 100% is best quality')
lqiHighReRegCount = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 13, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lqiHighReRegCount.setStatus('current')
if mibBuilder.loadTexts: lqiHighReRegCount.setDescription('Re Registration count for fifteen minute interval')
whispApsRFConfigRadios = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1), )
if mibBuilder.loadTexts: whispApsRFConfigRadios.setStatus('current')
if mibBuilder.loadTexts: whispApsRFConfigRadios.setDescription('Radio configuration table.')
whispApsRFConfigRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1), )
whispBoxRFPhysicalRadioEntry.registerAugmentions(("WHISP-APS-MIB", "whispApsRFConfigRadioEntry"))
whispApsRFConfigRadioEntry.setIndexNames(*whispBoxRFPhysicalRadioEntry.getIndexNames())
if mibBuilder.loadTexts: whispApsRFConfigRadioEntry.setStatus('current')
if mibBuilder.loadTexts: whispApsRFConfigRadioEntry.setDescription('Radio configuration entry.')
radioFreqCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("wired", 0)))).setUnits('kHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioFreqCarrier.setStatus('current')
if mibBuilder.loadTexts: radioFreqCarrier.setDescription('RF Frequency.  Please see the whispBoxRFPhysicalRadioFrequencies SNMP table for a list of available\n            frequencies.\n            0:  wired.')
radioDownlinkPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioDownlinkPercent.setStatus('current')
if mibBuilder.loadTexts: radioDownlinkPercent.setDescription('This is the percentage of frame data space allocated for downlink.\n                       Various radio platforms and regions will have different allowable downlink percentages.')
radioMaxRange = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1, 3), Integer32()).setUnits('miles').setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioMaxRange.setStatus('current')
if mibBuilder.loadTexts: radioMaxRange.setDescription('Access point max range.')
radioControlSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioControlSlots.setStatus('current')
if mibBuilder.loadTexts: radioControlSlots.setDescription('Total number of contention slots for HW Scheduling Point-to-Mulitpoint mode (Not applicable for PtoP radios).\n                       For PMP 450 the minimum is 1 control slot, others minimum is zero.\n                       Maximum contention slots is 15.')
radioTransmitOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1, 5), Integer32()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioTransmitOutputPower.setStatus('current')
if mibBuilder.loadTexts: radioTransmitOutputPower.setDescription('Transmitter output power.')
radioColorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioColorCode.setStatus('current')
if mibBuilder.loadTexts: radioColorCode.setDescription('Color code.')
whispLinkTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4), )
if mibBuilder.loadTexts: whispLinkTable.setStatus('current')
if mibBuilder.loadTexts: whispLinkTable.setDescription('Link Status Table')
whispLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1), ).setIndexNames((0, "WHISP-APS-MIB", "linkLUID"))
if mibBuilder.loadTexts: whispLinkEntry.setStatus('current')
if mibBuilder.loadTexts: whispLinkEntry.setDescription('Link Status')
linkLUID = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 239))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkLUID.setStatus('current')
if mibBuilder.loadTexts: linkLUID.setDescription('LUID number.')
linkDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDescr.setStatus('current')
if mibBuilder.loadTexts: linkDescr.setDescription('A textual string containing information about the\n            unit.  This string should include the name of\n            the manufacturer, the product name and the version\n            of the hardware interface.')
linkPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPhysAddress.setStatus('current')
if mibBuilder.loadTexts: linkPhysAddress.setDescription('Physical Address of the unit.')
linkMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkMtu.setStatus('current')
if mibBuilder.loadTexts: linkMtu.setDescription('The size of the largest datagram which can be\n            sent/received on the interface, specified in\n            octets.  For interfaces that are used for\n            transmitting network datagrams, this is the size\n            of the largest network datagram that can be sent\n            on the interface.')
linkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSpeed.setStatus('current')
if mibBuilder.loadTexts: linkSpeed.setDescription("An estimate of the interface's current bandwidth\n            in bits per second.  For interfaces which do not\n            vary in bandwidth or for those where no accurate\n            estimation can be made, this object should contain\n            the nominal bandwidth.")
linkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOperStatus.setStatus('obsolete')
if mibBuilder.loadTexts: linkOperStatus.setDescription('This variable is not used.')
linkInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInOctets.setStatus('current')
if mibBuilder.loadTexts: linkInOctets.setDescription('The total number of octets received on the\n            interface, including framing characters.')
linkInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: linkInUcastPkts.setDescription('The number of subnetwork-unicast packets\n            delivered to a higher-layer protocol.')
linkInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: linkInNUcastPkts.setDescription('The number of non-unicast (i.e., subnetwork-\n            broadcast or subnetwork-multicast) packets\n            delivered to a higher-layer protocol.')
linkInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInDiscards.setStatus('current')
if mibBuilder.loadTexts: linkInDiscards.setDescription('The number of inbound packets which were chosen\n            to be discarded even though no errors had been\n            detected to prevent their being deliverable to a\n            higher-layer protocol.  One possible reason for\n            discarding such a packet could be to free up\n            buffer space.')
linkInError = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInError.setStatus('current')
if mibBuilder.loadTexts: linkInError.setDescription('The number of inbound packets that contained\n            errors preventing them from being deliverable to a\n            higher-layer protocol.')
linkInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: linkInUnknownProtos.setDescription('The number of packets received via the interface\n            which were discarded because of an unknown or\n            unsupported protocol.')
linkOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutOctets.setStatus('current')
if mibBuilder.loadTexts: linkOutOctets.setDescription('The total number of octets transmitted out of the\n            interface, including framing characters.')
linkOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: linkOutUcastPkts.setDescription('The total number of packets that higher-level\n            protocols requested be transmitted to a\n            subnetwork-unicast address, including those that\n            were discarded or not sent.')
linkOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: linkOutNUcastPkts.setDescription('The total number of packets that higher-level\n            protocols requested be transmitted to a non-\n            unicast (i.e., a subnetwork-broadcast or\n            subnetwork-multicast) address, including those\n            that were discarded or not sent.')
linkOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutDiscards.setStatus('current')
if mibBuilder.loadTexts: linkOutDiscards.setDescription('The number of outbound packets which were chosen\n            to be discarded even though no errors had been\n            detected to prevent their being transmitted.  One\n            possible reason for discarding such a packet could\n            be to free up buffer space.')
linkOutError = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutError.setStatus('current')
if mibBuilder.loadTexts: linkOutError.setDescription('The number of outbound packets that could not be\n            transmitted because of errors.')
linkOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutQLen.setStatus('current')
if mibBuilder.loadTexts: linkOutQLen.setDescription('Number of packets in output packet queue.')
linkSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 0), ("inSession", 1), ("clearing", 2), ("reRegDnRst", 3), ("authChal", 4), ("registering", 5), ("notInUse", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSessState.setStatus('current')
if mibBuilder.loadTexts: linkSessState.setDescription('Current operational state of an interface.\n            0 = Idle\n            1 = In Session\n            2 = Clearing\n            3 = Re-registration downlink reset\n            4 = Authentication Challenge\n            5 = Registering\n            6 = Not in use')
linkESN = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 20), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkESN.setStatus('current')
if mibBuilder.loadTexts: linkESN.setDescription('Link Electronic serial number. It is MAC address.')
linkRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRSSI.setStatus('current')
if mibBuilder.loadTexts: linkRSSI.setDescription('The average RSSI reading of all packets received from an SM. Applicable to FSK radios only.')
linkAveJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 22), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAveJitter.setStatus('current')
if mibBuilder.loadTexts: linkAveJitter.setDescription('The average Jitter reading of all packets received from an SM.  Applicable to FSK radios only.')
linkLastJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 23), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkLastJitter.setStatus('current')
if mibBuilder.loadTexts: linkLastJitter.setDescription('Last jitter value. Applicable to FSK radios only.')
linkAirDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAirDelay.setStatus('current')
if mibBuilder.loadTexts: linkAirDelay.setDescription('The current round trip air delay in bits measured between the AP and SM.')
linkRegCount = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRegCount.setStatus('current')
if mibBuilder.loadTexts: linkRegCount.setDescription('The number of times an SM has registered to an AP.')
linkReRegCount = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkReRegCount.setStatus('current')
if mibBuilder.loadTexts: linkReRegCount.setDescription('The number of times an SM has tried to register with the AP while it still has\n            an active session with the AP.')
linkTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTimeOut.setStatus('current')
if mibBuilder.loadTexts: linkTimeOut.setDescription('Link time out.')
linkLastRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkLastRSSI.setStatus('current')
if mibBuilder.loadTexts: linkLastRSSI.setDescription('The last RSSI reading of all packets received from an SM. Applicable to FSK radios only.')
sessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionCount.setStatus('current')
if mibBuilder.loadTexts: sessionCount.setDescription('How many times has this mac been in/out of session.')
softwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('current')
if mibBuilder.loadTexts: softwareVersion.setDescription('The software version of registered SM.')
softwareBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareBootVersion.setStatus('current')
if mibBuilder.loadTexts: softwareBootVersion.setDescription('The software boot version of registered SM.')
fpgaVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpgaVersion.setStatus('current')
if mibBuilder.loadTexts: fpgaVersion.setDescription('The FPGA version of registered SM.')
linkSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSiteName.setStatus('current')
if mibBuilder.loadTexts: linkSiteName.setDescription('The site name of the registered SM.')
avgPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avgPowerLevel.setStatus('current')
if mibBuilder.loadTexts: avgPowerLevel.setDescription("The average power level of registered SM.\n                            For systems that support power control, this value can read 'NA' when the AP adjusts the transmit power of a SM\n                            until new packets are received from the SM with it transmitting at its new power level.\n                            For MIMO this is the combined receive power.")
lastPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastPowerLevel.setStatus('current')
if mibBuilder.loadTexts: lastPowerLevel.setDescription('The last power level of registered SM.\n                            For MIMO radios this is the combined receive power.')
sesDownLinkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sesDownLinkRate.setStatus('current')
if mibBuilder.loadTexts: sesDownLinkRate.setDescription('Down link rate.')
sesDownLinkLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sesDownLinkLimit.setStatus('current')
if mibBuilder.loadTexts: sesDownLinkLimit.setDescription('Down link limit.')
sesUpLinkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sesUpLinkRate.setStatus('current')
if mibBuilder.loadTexts: sesUpLinkRate.setDescription('Uplink rate.')
sesUpLinkLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sesUpLinkLimit.setStatus('current')
if mibBuilder.loadTexts: sesUpLinkLimit.setDescription('Uplink limit.')
adaptRate = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptRate.setStatus('current')
if mibBuilder.loadTexts: adaptRate.setDescription('Adapt rate of registered SM.')
sesLoUpCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sesLoUpCIR.setStatus('current')
if mibBuilder.loadTexts: sesLoUpCIR.setDescription('Low priority up link CIR.')
sesLoDownCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sesLoDownCIR.setStatus('current')
if mibBuilder.loadTexts: sesLoDownCIR.setDescription('Low priority down link CIR.')
sesHiUpCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sesHiUpCIR.setStatus('current')
if mibBuilder.loadTexts: sesHiUpCIR.setDescription('High priority up link CIR.')
sesHiDownCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sesHiDownCIR.setStatus('current')
if mibBuilder.loadTexts: sesHiDownCIR.setDescription('High priority down link CIR.')
platformVer = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformVer.setStatus('current')
if mibBuilder.loadTexts: platformVer.setDescription('Platform Version.')
smSessionTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 46), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSessionTmr.setStatus('current')
if mibBuilder.loadTexts: smSessionTmr.setDescription('SM session uptime')
smSessionSeqNumMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSessionSeqNumMismatch.setStatus('current')
if mibBuilder.loadTexts: smSessionSeqNumMismatch.setDescription('The count of how many sequence number mismatch between the AP/BHM and the SM/BHS during the authentication\n                        challenge and authentication response messages.  This status is only valid in a system where encryption is\n                        enabled and no authentication server is configured.')
dataVCNum = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataVCNum.setStatus('current')
if mibBuilder.loadTexts: dataVCNum.setDescription('The normal priority Data VC number in use for this link.')
hiPriQEn = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiPriQEn.setStatus('current')
if mibBuilder.loadTexts: hiPriQEn.setDescription('Returns whether High Priority channel is enabled.  On P7/P8 devices will return 0 always.  Use p7p8HiPriQEn OID for P7/P8 radios.')
dataVCNumHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataVCNumHiQ.setStatus('current')
if mibBuilder.loadTexts: dataVCNumHiQ.setDescription('The high priority Data VC number in use for this link, if any.  If 0, no High Priority channel is in place.')
linkInOctetsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInOctetsHiQ.setStatus('current')
if mibBuilder.loadTexts: linkInOctetsHiQ.setDescription('The total number of octets received on High Priority Queue, including framing characters.')
linkInUcastPktsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInUcastPktsHiQ.setStatus('current')
if mibBuilder.loadTexts: linkInUcastPktsHiQ.setDescription('The number of subnetwork-unicast packets on High Priority Queue\n            delivered to a higher-layer protocol.')
linkInNUcastPktsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInNUcastPktsHiQ.setStatus('current')
if mibBuilder.loadTexts: linkInNUcastPktsHiQ.setDescription('The number of non-unicast (i.e., subnetwork-\n            broadcast or subnetwork-multicast) packets on High Priority Queue\n            delivered to a higher-layer protocol.')
linkInDiscardsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInDiscardsHiQ.setStatus('current')
if mibBuilder.loadTexts: linkInDiscardsHiQ.setDescription('The number of inbound packets on High Priority Queue which were chosen\n            to be discarded even though no errors had been\n            detected to prevent their being deliverable to a\n            higher-layer protocol.  One possible reason for\n            discarding such a packet could be to free up\n            buffer space.')
linkInErrorHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInErrorHiQ.setStatus('current')
if mibBuilder.loadTexts: linkInErrorHiQ.setDescription('The number of inbound packets on High Priority Queue that contained\n            errors preventing them from being deliverable to a\n            higher-layer protocol.')
linkInUnknownProtosHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInUnknownProtosHiQ.setStatus('current')
if mibBuilder.loadTexts: linkInUnknownProtosHiQ.setDescription('The number of packets received on High Priority Queue via the interface\n            which were discarded because of an unknown or\n            unsupported protocol.')
linkOutOctetsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutOctetsHiQ.setStatus('current')
if mibBuilder.loadTexts: linkOutOctetsHiQ.setDescription('The total number of octets on High Priority Queue transmitted out of the\n            interface, including framing characters.')
linkOutUcastPktsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutUcastPktsHiQ.setStatus('current')
if mibBuilder.loadTexts: linkOutUcastPktsHiQ.setDescription('The total number of packets on High Priority Queue that higher-level\n            protocols requested be transmitted to a\n            subnetwork-unicast address, including those that\n            were discarded or not sent.')
linkOutNUcastPktsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutNUcastPktsHiQ.setStatus('current')
if mibBuilder.loadTexts: linkOutNUcastPktsHiQ.setDescription('The total number of packets on High Priority Queue that higher-level\n            protocols requested be transmitted to a non-\n            unicast (i.e., a subnetwork-broadcast or\n            subnetwork-multicast) address, including those\n            that were discarded or not sent.')
linkOutDiscardsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutDiscardsHiQ.setStatus('current')
if mibBuilder.loadTexts: linkOutDiscardsHiQ.setDescription('The number of outbound packets on High Priority Queue which were chosen\n            to be discarded even though no errors had been\n            detected to prevent their being transmitted.  One\n            possible reason for discarding such a packet could\n            be to free up buffer space.')
linkOutErrorHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutErrorHiQ.setStatus('current')
if mibBuilder.loadTexts: linkOutErrorHiQ.setDescription('The number of outbound packets on High Priority Queue that could not be\n            transmitted because of errors.')
vcQOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcQOverflow.setStatus('current')
if mibBuilder.loadTexts: vcQOverflow.setDescription('The number of packets dropped due to Queue overflow on VC.')
vcQOverflowHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcQOverflowHiQ.setStatus('current')
if mibBuilder.loadTexts: vcQOverflowHiQ.setDescription('The number of packets dropped due to Queue overflow on High Priority VC, if enabled.')
p7p8HiPriQEn = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled-or-NA", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p7p8HiPriQEn.setStatus('current')
if mibBuilder.loadTexts: p7p8HiPriQEn.setDescription('Returns whether P7/P8 hi priority channel is enabled.  On non-P7/P8 devices will return 0 always.')
p7p8HiPriQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p7p8HiPriQ.setStatus('current')
if mibBuilder.loadTexts: p7p8HiPriQ.setDescription('Hi Priority Queue statistics for P7 or P8 radios, if enabled.  If not enabled, or not a P7 or P8, will return 0.')
linkAirDelayns = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAirDelayns.setStatus('current')
if mibBuilder.loadTexts: linkAirDelayns.setDescription('The current round trip air delay in nanoseconds measured between the AP and SM.')
linkQualityAPData = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 67), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkQualityAPData.setStatus('current')
if mibBuilder.loadTexts: linkQualityAPData.setDescription("Engineering use only.\n                                The current link quality of the SM's data from the AP.\n                                This is relative to the current modulation rate (1X, 2X, 3X, etc).")
linkManagementIP = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 69), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkManagementIP.setStatus('current')
if mibBuilder.loadTexts: linkManagementIP.setDescription('Management IP Address of the unit.  0 indicates SM is not publically addressable.')
linkFragmentsReceived1XVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFragmentsReceived1XVertical.setStatus('current')
if mibBuilder.loadTexts: linkFragmentsReceived1XVertical.setDescription('Engineering use only.\n                            Number of fragments received in 1x (QPSK) modulation.\n                            For GenII OFDM and forward.\n                            For MIMO this is the vertical path.')
linkFragmentsReceived2XVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFragmentsReceived2XVertical.setStatus('current')
if mibBuilder.loadTexts: linkFragmentsReceived2XVertical.setDescription('Engineering use only.\n                            Number of fragments received in 2x (16-QAM) modulation.\n                            For GenII OFDM and forward.\n                            For MIMO this is the vertical path.')
linkFragmentsReceived3XVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFragmentsReceived3XVertical.setStatus('current')
if mibBuilder.loadTexts: linkFragmentsReceived3XVertical.setDescription('Engineering use only.\n                            Number of fragments received in 3x (64-QAM) modulation.\n                            For GenII OFDM and forward.\n                            For MIMO this is the vertical path.')
linkFragmentsReceived4XVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFragmentsReceived4XVertical.setStatus('current')
if mibBuilder.loadTexts: linkFragmentsReceived4XVertical.setDescription('Engineering use only.\n                            Number of fragments received in 4x (256-QAM) modulation.\n                            For GenII OFDM and forward.\n                            For MIMO this is the vertical path.')
signalToNoiseRatioVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioVertical.setStatus('current')
if mibBuilder.loadTexts: signalToNoiseRatioVertical.setDescription('Estimate of the receive signal to noise ratio in dB.\n                            For GenII OFDM and forward.\n                            For MIMO this is the vertical path.')
radiusReplyMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 75), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusReplyMsg.setStatus('current')
if mibBuilder.loadTexts: radiusReplyMsg.setDescription('The RADIUS Reply-Msg populated for the SM.\n                            This is only valid when using a backen AAA server.')
autoUpdateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: autoUpdateStatus.setDescription('status of the auto update process')
radiusFramedIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 77), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusFramedIPAddress.setStatus('current')
if mibBuilder.loadTexts: radiusFramedIPAddress.setDescription('This Attribute indicates the IP address to be configured for the SM management interface.')
radiusFramedIPNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 78), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusFramedIPNetmask.setStatus('current')
if mibBuilder.loadTexts: radiusFramedIPNetmask.setDescription('This Attribute indicates the netmask to be configured for the SM management interface.')
radiusDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 79), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: radiusDefaultGateway.setDescription('This Attribute indicates the default gateway to be configured for the SM management interface.')
linkFragmentsReceived1XHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFragmentsReceived1XHorizontal.setStatus('current')
if mibBuilder.loadTexts: linkFragmentsReceived1XHorizontal.setDescription('Engineering use only.\n                            Number of fragments received in 1x (QPSK) modulation.\n                            For MIMO only.\n                            For MIMO this is the horizontal path.\n                            If operating in MIMO-A this will return 0.')
linkFragmentsReceived2XHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFragmentsReceived2XHorizontal.setStatus('current')
if mibBuilder.loadTexts: linkFragmentsReceived2XHorizontal.setDescription('Engineering use only.\n                            Number of fragments received in 2x (16-QAM) modulation.\n                            For MIMO only.\n                            For MIMO this is the horizontal path.\n                            If operating in MIMO-A this will return 0.')
linkFragmentsReceived3XHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFragmentsReceived3XHorizontal.setStatus('current')
if mibBuilder.loadTexts: linkFragmentsReceived3XHorizontal.setDescription('Engineering use only.\n                            Number of fragments received in 3x (64-QAM) modulation.\n                            For MIMO only.\n                            For MIMO this is the horizontal path.\n                            If operating in MIMO-A this will return 0.')
linkFragmentsReceived4XHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFragmentsReceived4XHorizontal.setStatus('current')
if mibBuilder.loadTexts: linkFragmentsReceived4XHorizontal.setDescription('Engineering use only.\n                            Number of fragments received in 4x (256-QAM) modulation.\n                            For MIMO only.\n                            For MIMO this is the horizontal path.\n                            If operating in MIMO-A this will return 0.')
signalToNoiseRatioHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioHorizontal.setStatus('current')
if mibBuilder.loadTexts: signalToNoiseRatioHorizontal.setDescription('Estimate of the receive signal to noise ratio in dB.\n                            MIMO radios only.\n                            For MIMO this is the horizontal path.\n                            If operating in MIMO-A this will return 0.')
linkSignalStrengthRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 86), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSignalStrengthRatio.setStatus('current')
if mibBuilder.loadTexts: linkSignalStrengthRatio.setDescription('Signal Strength Ratio in dB is the power received by the vertical antenna input (dB) -\n                            power received by the horizontal antenna input (dB).\n                            MIMO radios only.')
linkRadioDbmHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 87), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRadioDbmHorizontal.setStatus('current')
if mibBuilder.loadTexts: linkRadioDbmHorizontal.setDescription('Receive power level of the horizontal antenna in dBm.\n                            MIMO radios only.')
linkRadioDbmVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 88), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRadioDbmVertical.setStatus('current')
if mibBuilder.loadTexts: linkRadioDbmVertical.setDescription('Receive power level of the vertical antenna in dBm.\n                            MIMO radios only.')
maxSMTxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxSMTxPwr.setStatus('current')
if mibBuilder.loadTexts: maxSMTxPwr.setDescription('Returns whether SM is transmitting at its configured max power level.')
productType = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 0), ("pmp450MIMOOFDM", 1), ("pmp430SISOOFDM", 2), ("pmp450SISOOFDM", 3), ("ptp450", 4), ("pmp450i", 5), ("ptp450i", 6), ("pmp450b", 7), ("ptp450b", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productType.setStatus('current')
if mibBuilder.loadTexts: productType.setDescription('Returns which type of product the SM/BHS is.\n                            450 platform only.')
linkAdaptRateLowPri = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 8))).clone(namedValues=NamedValues(("noSession", 0), ("rate1X", 1), ("rate2X", 2), ("rete3X", 3), ("rate4X", 4), ("rate6X", 6), ("rate8X", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAdaptRateLowPri.setStatus('current')
if mibBuilder.loadTexts: linkAdaptRateLowPri.setDescription('The current transmitting rate of the low priority VC.\n                            0 : SM is not in session\n                            1 : 1X QPSK SISO\n                            2 : 2X 16-QAM SISO or QPSK MIMO\n                            3 : 3X 64-QAM SISO\n                            4 : 4X 256-QAM SISO or 16-QAM MIMO\n                            6 : 6X 64-QAM MIMO\n                            8 : 8X 256-QAM MIMO')
linkAdaptRateHighPri = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 6, 8))).clone(namedValues=NamedValues(("noHighPriorityChannel", -1), ("noSession", 0), ("rate1X", 1), ("rate2X", 2), ("rete3X", 3), ("rate4X", 4), ("rate6X", 6), ("rate8X", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAdaptRateHighPri.setStatus('current')
if mibBuilder.loadTexts: linkAdaptRateHighPri.setDescription('The current transmitting rate of the high priority VC.\n                            -1 : High Priority Channel not configured\n                            0 : SM is not in session\n                            1 : 1X QPSK SISO\n                            2 : 2X 16-QAM SISO or QPSK MIMO\n                            3 : 3X 64-QAM SISO\n                            4 : 4X 256-QAM SISO or 16-QAM MIMO\n                            6 : 6X 64-QAM MIMO\n                            8 : 8X 256-QAM MIMO')
avgPowerLevelInt = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 93), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avgPowerLevelInt.setStatus('current')
if mibBuilder.loadTexts: avgPowerLevelInt.setDescription("The average power level of registered SM as Integer.\n                            For systems that support power control, this value can read '0' when the AP adjusts the transmit power of a SM\n                            until new packets are received from the SM with it transmitting at its new power level.\n                            For MIMO this is the combined receive power.")
mimoPowerLevelVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 94), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mimoPowerLevelVertical.setStatus('current')
if mibBuilder.loadTexts: mimoPowerLevelVertical.setDescription('For MIMO radios, the Vertical power level of registered SM as Integer.\n\t\t\t\t\t\t\tThe Vertical Power (+45) level in case of 2.4GHz Dual slant MIMO')
mimoPowerLevelHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mimoPowerLevelHorizontal.setStatus('current')
if mibBuilder.loadTexts: mimoPowerLevelHorizontal.setDescription('For MIMO radios, the Horizontal power level of registered SM as Integer.\n\t\t\t\t\t\t\tThe Horizontal Power(-45) level in case of 2.4GHz Dual slant MIMO')
linkSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 96), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSwVersion.setStatus('current')
if mibBuilder.loadTexts: linkSwVersion.setDescription('The swversion of registered SM, to be used internally.')
spatialFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 97), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spatialFrequency.setStatus('current')
if mibBuilder.loadTexts: spatialFrequency.setDescription('The spatial frequency of registered SM.\n                        \tSpatial Frequency is the phase advance of the wavefront from one antenna column\n                        \tto the next caused by the angle at which the wavefront impinges on the array.  \n                        \tIt is represented in integer units, with 1024 equating to 360 degrees per column.  \n                        \tA value of 2048 is used to signify a spatial frequency that is not yet known or otherwise invalid. \n                        \tPMP 450m only.')
whispFailedRegTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8), )
if mibBuilder.loadTexts: whispFailedRegTable.setStatus('current')
if mibBuilder.loadTexts: whispFailedRegTable.setDescription('List of link test results')
whispFailedRegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8, 1), ).setIndexNames((0, "WHISP-APS-MIB", "regFailSeqNum"))
if mibBuilder.loadTexts: whispFailedRegEntry.setStatus('current')
if mibBuilder.loadTexts: whispFailedRegEntry.setDescription('List of Failed ESNs')
regGrantReason = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("reggnt-valid", 0), ("reggnt-outofrange", 1), ("reggnt-nolUIDS", 2), ("reggnt-rerange", 3), ("reggnt-authfail", 4), ("reggnt-encryptfail", 5), ("reggnt-poweradjust", 6), ("reggnt-novcs", 7), ("reggnt-failvcreserve", 8), ("reggnt-failvcactive", 9), ("reggnt-failhivcdata", 10), ("reggnt-failsmlimit", 11), ("reggnt-fail95orabove", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: regGrantReason.setStatus('current')
if mibBuilder.loadTexts: regGrantReason.setDescription('The registration failure reason')
regFailESN = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regFailESN.setStatus('current')
if mibBuilder.loadTexts: regFailESN.setDescription('The ESN that failed to register')
regFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regFailTime.setStatus('current')
if mibBuilder.loadTexts: regFailTime.setDescription('The number of ticks that occurred when the ESN failed to register')
regFailSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regFailSeqNum.setStatus('current')
if mibBuilder.loadTexts: regFailSeqNum.setDescription('The sequence when the register failure was given.')
regFailReasonText = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regFailReasonText.setStatus('current')
if mibBuilder.loadTexts: regFailReasonText.setDescription('The text description of the failure.')
mibBuilder.exportSymbols("WHISP-APS-MIB", lqiLowLQI=lqiLowLQI, numCtlSlotsHW=numCtlSlotsHW, linkInDiscards=linkInDiscards, avgPowerLevel=avgPowerLevel, asIP2=asIP2, whispApsEvent=whispApsEvent, frUtlMedRFOutDiscards=frUtlMedRFOutDiscards, linkMtu=linkMtu, fragments1xDwnLinkHorizontal=fragments1xDwnLinkHorizontal, apLinkSpeed=apLinkSpeed, maxRegSMCount=maxRegSMCount, whispUsrAuthSharedSecret2=whispUsrAuthSharedSecret2, frUtlLowAvgUplinkSlots=frUtlLowAvgUplinkSlots, regTrap=regTrap, authSharedSecret3=authSharedSecret3, useAPManagementVIDForICCSM=useAPManagementVIDForICCSM, frUtlMediumAvgUplinkSlots=frUtlMediumAvgUplinkSlots, actionListFilename=actionListFilename, fragments2xUpLinkHorizontal=fragments2xUpLinkHorizontal, fragments3xDwnLinkHorizontal=fragments3xDwnLinkHorizontal, linkRSSI=linkRSSI, defaultGwAp=defaultGwAp, dataVCNumHiQ=dataVCNumHiQ, authDomainNameAppend=authDomainNameAppend, prioritizeMgmtData=prioritizeMgmtData, lqiLowLinkLUID=lqiLowLinkLUID, linkInUcastPkts=linkInUcastPkts, lqiMidLQI=lqiMidLQI, onlyAllowVer95OrAbove=onlyAllowVer95OrAbove, dhcpRlyAgntStat_respRecvd=dhcpRlyAgntStat_respRecvd, rfTelnetAccess=rfTelnetAccess, rfOLThreshold=rfOLThreshold, softwareVersion=softwareVersion, linkAdaptRateLowPri=linkAdaptRateLowPri, lqiLowUplinkQualityIndex=lqiLowUplinkQualityIndex, accountingSmReAuthInterval=accountingSmReAuthInterval, configSource=configSource, whispApsConfigGroup=whispApsConfigGroup, lqiLowDownlinkAverageActualRate=lqiLowDownlinkAverageActualRate, lqiLowUplinkAverageActualRate=lqiLowUplinkAverageActualRate, apBeaconInfo=apBeaconInfo, frUtlLowTotalUplinkUtilization=frUtlLowTotalUplinkUtilization, frUtlMediumAvgContentionSlots=frUtlMediumAvgContentionSlots, whispApsFrUtlStatsMumimoDistributionEntry=whispApsFrUtlStatsMumimoDistributionEntry, fragments3xDwnLinkVertical=fragments3xDwnLinkVertical, pagerRejectFilterSelect=pagerRejectFilterSelect, whispApsLQI=whispApsLQI, whispLinkEntry=whispLinkEntry, regGrantReason=regGrantReason, bitErrorsCorrected4xDwnLinkHorizontal=bitErrorsCorrected4xDwnLinkHorizontal, authServer4=authServer4, linkInUnknownProtos=linkInUnknownProtos, linkTestDirection=linkTestDirection, fragments2xDwnLinkHorizontal=fragments2xDwnLinkHorizontal, lqiLowBeaconQualityIndex=lqiLowBeaconQualityIndex, frUtlLowIntervalBwReqPercentage=frUtlLowIntervalBwReqPercentage, signalToNoiseRatioDownLinkHorizontal=signalToNoiseRatioDownLinkHorizontal, frUtlHighIntervalBwReqPercentage=frUtlHighIntervalBwReqPercentage, frUtlLowTotalDownlinkUtilization=frUtlLowTotalDownlinkUtilization, upLinkEff=upLinkEff, bridgeFloodUnknownsEnable=bridgeFloodUnknownsEnable, lqiHighLQI=lqiHighLQI, apRateAdapt=apRateAdapt, apRxDelay=apRxDelay, lastTimeIdleSMsRemoved=lastTimeIdleSMsRemoved, signalToNoiseRatioVertical=signalToNoiseRatioVertical, frUtlLowMumimoDownlinkSectorUtilization=frUtlLowMumimoDownlinkSectorUtilization, frUtlLowTotalDownlinkSlots=frUtlLowTotalDownlinkSlots, frUtlHighDownlinkLowPrioSlots=frUtlHighDownlinkLowPrioSlots, linkReRegCount=linkReRegCount, whispApsConfig=whispApsConfig, signalToNoiseRatioHorizontal=signalToNoiseRatioHorizontal, frameAlignmentLegacyMode=frameAlignmentLegacyMode, verifyGPSChecksum=verifyGPSChecksum, radiusFramedIPAddress=radiusFramedIPAddress, frUtlLowDownlinkCntlMsgSlots=frUtlLowDownlinkCntlMsgSlots, frUtlHighRFInDiscards=frUtlHighRFInDiscards, authSharedSecret2=authSharedSecret2, bitErrorsCorrected1xUpLinkHorizontal=bitErrorsCorrected1xUpLinkHorizontal, frUtlHighEthOutDiscards=frUtlHighEthOutDiscards, fragments1xDwnLinkVertical=fragments1xDwnLinkVertical, dhcpRlyAgntStat_reqDiscards=dhcpRlyAgntStat_reqDiscards, dhcpRlyAgntStat_pktTooBig=dhcpRlyAgntStat_pktTooBig, smSessionTmr=smSessionTmr, regCount=regCount, lqiHighDownlinkQualityIndex=lqiHighDownlinkQualityIndex, linkSessState=linkSessState, gpsSyncSource=gpsSyncSource, gpsSatellitesTracked=gpsSatellitesTracked, mimoPowerLevelVertical=mimoPowerLevelVertical, gpsLongitude=gpsLongitude, whispUsrAuthSharedSecret1=whispUsrAuthSharedSecret1, frUtlMedMumimoDownlinkSectorUtilization=frUtlMedMumimoDownlinkSectorUtilization, broadcastRetryCount=broadcastRetryCount, regFailSeqNum=regFailSeqNum, fragments4xDwnLinkVertical=fragments4xDwnLinkVertical, linkInOctets=linkInOctets, upLnkLimit=upLnkLimit, lanIpAp=lanIpAp, whispApsControls=whispApsControls, frUtlHighMaxDownlinkSlots=frUtlHighMaxDownlinkSlots, frUtlHighIntervalBwReqMissed=frUtlHighIntervalBwReqMissed, lqiHighLinkLUID=lqiHighLinkLUID, linkOutUcastPktsHiQ=linkOutUcastPktsHiQ, frUtlLowDownlinkBcastMcastUtilization=frUtlLowDownlinkBcastMcastUtilization, upLnkDataRate=upLnkDataRate, whispApsFailedRegTableGroup=whispApsFailedRegTableGroup, fragments1xUpLinkHorizontal=fragments1xUpLinkHorizontal, frUtlMedUplinkAckSlots=frUtlMedUplinkAckSlots, whispRadarDetected=whispRadarDetected, frUtlLowMaxMumimoDownlinkUtilization=frUtlLowMaxMumimoDownlinkUtilization, dwnLnkAckSlot=dwnLnkAckSlot, frUtlLowMinMumimoDownlinkUtilization=frUtlLowMinMumimoDownlinkUtilization, gpsTrap=gpsTrap, linkOutNUcastPktsHiQ=linkOutNUcastPktsHiQ, ntpServer2=ntpServer2, linkOutNUcastPkts=linkOutNUcastPkts, frUtlMedDownlinkAckUtilization=frUtlMedDownlinkAckUtilization, ntpServer1=ntpServer1, frUtlLowTotalUplinkSlots=frUtlLowTotalUplinkSlots, authKeyOptionAP=authKeyOptionAP, fskSMRcvTargetLvl=fskSMRcvTargetLvl, frUtlLowUplinkLowPrioSlots=frUtlLowUplinkLowPrioSlots, frUtlLowDownlinkAckSlots=frUtlLowDownlinkAckSlots, lastNTPTime=lastNTPTime, spatialFrequency=spatialFrequency, whispApsLQIMidInterval=whispApsLQIMidInterval, frUtlHighTotalMumimoDownlinkUtilization=frUtlHighTotalMumimoDownlinkUtilization, encryptDwBroadcast=encryptDwBroadcast, whispGPSEvent=whispGPSEvent, txSpreading=txSpreading, allowedIPAccess3=allowedIPAccess3, ntpDomainNameAppend=ntpDomainNameAppend, dfsStatusPrimary=dfsStatusPrimary, lqiMidUplinkQualityIndex=lqiMidUplinkQualityIndex, dhcpRlyAgntStat_respDiscards=dhcpRlyAgntStat_respDiscards, whispLinkTable=whispLinkTable, linkOutQLen=linkOutQLen, vcQOverflow=vcQOverflow, whispApsLQIHighIntervalEntry=whispApsLQIHighIntervalEntry, maxUpLinkIndex=maxUpLinkIndex, lqiLowBeaconPercent=lqiLowBeaconPercent, authServer2=authServer2, radioColorCode=radioColorCode, dwnLnkMaxBurstDataRate=dwnLnkMaxBurstDataRate, linkOutErrorHiQ=linkOutErrorHiQ, frUtlHighAvgContentionSlots=frUtlHighAvgContentionSlots, linkOutUcastPkts=linkOutUcastPkts, linkLUID=linkLUID, noRebootFreqChange=noRebootFreqChange, bitErrorsCorrected4xDwnLinkVertical=bitErrorsCorrected4xDwnLinkVertical, linkAirDelay=linkAirDelay, regulatoryApCheckInvalidChanFailed=regulatoryApCheckInvalidChanFailed, autoUpdateStatus=autoUpdateStatus, downLinkRate=downLinkRate, frUtlLowUplinkAckSlots=frUtlLowUplinkAckSlots, frUtlMumimoDownlinkDistributionGroup=frUtlMumimoDownlinkDistributionGroup, lqiHighReRegCount=lqiHighReRegCount, frUtlHighMumimoDownlinkAvgGroupSize=frUtlHighMumimoDownlinkAvgGroupSize, frUtlMediumIntervalBwReqRx=frUtlMediumIntervalBwReqRx, dhcprDomainNameAppend=dhcprDomainNameAppend, bitErrorsCorrected3xDwnLinkVertical=bitErrorsCorrected3xDwnLinkVertical, disableAuthForICCSM=disableAuthForICCSM, whispRadarEnd=whispRadarEnd, frUtlMumimoDownlinkDistributionMedianSlotCount=frUtlMumimoDownlinkDistributionMedianSlotCount, whispApsFrUtlStatsMumimoSpatialTable=whispApsFrUtlStatsMumimoSpatialTable, frUtlHighDownlinkHiPrioSlots=frUtlHighDownlinkHiPrioSlots, whispApsFrUtlStatsMumimoSpatialEntry=whispApsFrUtlStatsMumimoSpatialEntry, resetSesStats=resetSesStats, asIP3=asIP3, linkOutOctets=linkOutOctets, whispApsFrUtlStatsIntervalMedium=whispApsFrUtlStatsIntervalMedium, fragments3xUpLinkVertical=fragments3xUpLinkVertical, whispApsMumimoTrialEvent=whispApsMumimoTrialEvent, whispApsMibModule=whispApsMibModule, whispUsrAcctSvr3=whispUsrAcctSvr3, radioTxGainAp=radioTxGainAp, linkFragmentsReceived3XHorizontal=linkFragmentsReceived3XHorizontal, upLnkMaxBurstDataRate=upLnkMaxBurstDataRate, upLinkRate=upLinkRate, whispApsGroups=whispApsGroups, frUtlLowUplinkHiPrioSlots=frUtlLowUplinkHiPrioSlots, encryptionMode=encryptionMode, ofdmSMRcvTargetLvl=ofdmSMRcvTargetLvl, whispApRFOverloadEvent=whispApRFOverloadEvent, frUtlMediumIntervalBwReqMissed=frUtlMediumIntervalBwReqMissed, linkRadioDbmVertical=linkRadioDbmVertical, remoteSpectrumAnalysisDuration=remoteSpectrumAnalysisDuration, linkOutDiscards=linkOutDiscards, numCtrSlotHi=numCtrSlotHi, whispApsFrUtlStatsIntervalMediumGroup=whispApsFrUtlStatsIntervalMediumGroup, whispApsFrUtlStats=whispApsFrUtlStats, berMode=berMode, whispUsrAcctSvr1=whispUsrAcctSvr1, lastSesStatsReset=lastSesStatsReset, dataSlotDwn=dataSlotDwn, lqiHighDownlinkAverageActualRate=lqiHighDownlinkAverageActualRate, vcQOverflowHiQ=vcQOverflowHiQ, lqiLowReRegQualityIndex=lqiLowReRegQualityIndex, gpsInput=gpsInput, frUtlMedUplinkHiPrioSlots=frUtlMedUplinkHiPrioSlots, whispApsLQILowIntervalEntry=whispApsLQILowIntervalEntry, authServer5=authServer5, avgPowerLevelInt=avgPowerLevelInt, linkInError=linkInError, highPriorityUpLnkPct=highPriorityUpLnkPct, whispApsLQIMidIntervalEntry=whispApsLQIMidIntervalEntry, frUtlMedDownlinkLowPrioSlots=frUtlMedDownlinkLowPrioSlots, enableAutoupdate=enableAutoupdate, dhcpRlyAgntStat_invalidGiaddrDiscards=dhcpRlyAgntStat_invalidGiaddrDiscards, linkFragmentsReceived1XHorizontal=linkFragmentsReceived1XHorizontal, fragments2xUpLinkVertical=fragments2xUpLinkVertical, whispRegStatus=whispRegStatus, linkInNUcastPktsHiQ=linkInNUcastPktsHiQ, gpsRestartCount=gpsRestartCount, sesDownLinkRate=sesDownLinkRate, regFailTime=regFailTime, lqiHighUplinkQualityIndex=lqiHighUplinkQualityIndex, whispWebUseAuthServer=whispWebUseAuthServer, freeRunGPSSyncBypass=freeRunGPSSyncBypass, uGPSPowerStatus=uGPSPowerStatus, frUtlMumimoDownlinkUtilizationSfBin=frUtlMumimoDownlinkUtilizationSfBin, radiusFramedIPNetmask=radiusFramedIPNetmask, p7p8HiPriQ=p7p8HiPriQ, bitErrorsCorrected1xUpLinkVertical=bitErrorsCorrected1xUpLinkVertical, bitErrorsCorrected2xDwnLinkHorizontal=bitErrorsCorrected2xDwnLinkHorizontal, frUtlHighUplinkAckSlots=frUtlHighUplinkAckSlots, frUtlHighContentionSlots=frUtlHighContentionSlots, frUtlLowMumimoDownlinkMultiplexingGain=frUtlLowMumimoDownlinkMultiplexingGain, upLinkRateExtrapolated=upLinkRateExtrapolated, frUtlMedMumimoDownlinkMultiplexingGain=frUtlMedMumimoDownlinkMultiplexingGain, linkSwVersion=linkSwVersion, linkInDiscardsHiQ=linkInDiscardsHiQ, rfFreqCarrier=rfFreqCarrier, frUtlHighDownlinkBcastMcastUtilization=frUtlHighDownlinkBcastMcastUtilization, uAcksReservHigh=uAcksReservHigh, dwnLnkData=dwnLnkData, removeIdleSMs=removeIdleSMs, lqiMidLinkLUID=lqiMidLinkLUID, numUAckSlots=numUAckSlots, frUtlLowAvgDownlinkSlots=frUtlLowAvgDownlinkSlots, linkSignalStrengthRatio=linkSignalStrengthRatio, testDuration=testDuration, dfsStatusAlt2=dfsStatusAlt2, syslogServerAddr=syslogServerAddr, frUtlMedRFInDiscards=frUtlMedRFInDiscards, linkTestWithDualPath=linkTestWithDualPath, testLUID=testLUID, linkFragmentsReceived3XVertical=linkFragmentsReceived3XVertical, whispApsLinkTableGroup=whispApsLinkTableGroup, frUtlLowMaxUplinkSlots=frUtlLowMaxUplinkSlots, frUtlMumimoDownlinkUtilizationVcRange=frUtlMumimoDownlinkUtilizationVcRange, frUtlMedTotalMumimoDownlinkUtilization=frUtlMedTotalMumimoDownlinkUtilization, sesHiDownCIR=sesHiDownCIR)
mibBuilder.exportSymbols("WHISP-APS-MIB", rfFreqCaralt2=rfFreqCaralt2, dhcprServer=dhcprServer, asIP5=asIP5, frUtlLowTotalMumimoDownlinkUtilization=frUtlLowTotalMumimoDownlinkUtilization, bitErrorsCorrected3xUpLinkVertical=bitErrorsCorrected3xUpLinkVertical, onlyAllowPMP450iSMRegistration=onlyAllowPMP450iSMRegistration, userAuthServer3=userAuthServer3, ntpServerIp=ntpServerIp, radiusDefaultGateway=radiusDefaultGateway, fragments4xDwnLinkHorizontal=fragments4xDwnLinkHorizontal, linkAveJitter=linkAveJitter, ipAccessFilterEnable=ipAccessFilterEnable, whispApRegulatoryEvent=whispApRegulatoryEvent, signalToNoiseRatioUpLinkVertical=signalToNoiseRatioUpLinkVertical, frUtlHighDownlinkAckSlots=frUtlHighDownlinkAckSlots, frUtlMedTotalDownlinkSlots=frUtlMedTotalDownlinkSlots, dhcpRlyAgntStat_untrustedDiscards=dhcpRlyAgntStat_untrustedDiscards, rfLinkOverloadCondition=rfLinkOverloadCondition, whispFailedRegTable=whispFailedRegTable, berModSelect=berModSelect, lqiMidDownlinkExpectedRate=lqiMidDownlinkExpectedRate, gpsSatellitesTrackedInt=gpsSatellitesTrackedInt, clearLinkTableStats=clearLinkTableStats, lqiLowDownlinkQualityIndex=lqiLowDownlinkQualityIndex, actDwnLinkIndex=actDwnLinkIndex, whispApsLinkTestResult=whispApsLinkTestResult, whispUsrAuthSharedSecret3=whispUsrAuthSharedSecret3, whispGPSStats=whispGPSStats, sesUpLinkRate=sesUpLinkRate, frUtlMumimoDownlinkDistributionVc=frUtlMumimoDownlinkDistributionVc, rfFreqCaralt1=rfFreqCaralt1, syslogXmitSMs=syslogXmitSMs, whispUsrAcctSvr2=whispUsrAcctSvr2, linkTimeOut=linkTimeOut, expDwnFragCount=expDwnFragCount, frUtlMedMumimoDownlinkSumimoUtilization=frUtlMedMumimoDownlinkSumimoUtilization, dhcpRlyAgntStat_respRelayed=dhcpRlyAgntStat_respRelayed, bitErrorsCorrected2xUpLinkHorizontal=bitErrorsCorrected2xUpLinkHorizontal, linkManagementIP=linkManagementIP, linkInNUcastPkts=linkInNUcastPkts, regulatoryStatus=regulatoryStatus, pmp430InteropMode=pmp430InteropMode, tslBridging=tslBridging, smIsolation=smIsolation, multicastRetryCount=multicastRetryCount, lqiLowReRegCount=lqiLowReRegCount, whispApsLinkTestConfig=whispApsLinkTestConfig, enableRadiusDynAuth=enableRadiusDynAuth, linkAirDelayns=linkAirDelayns, frUtlHighMaxContentionSlots=frUtlHighMaxContentionSlots, ntpServer3=ntpServer3, frUtlHighAvgDownlinkSlots=frUtlHighAvgDownlinkSlots, userAuthServer2=userAuthServer2, frUtlHighDownlinkAckUtilization=frUtlHighDownlinkAckUtilization, fragments2xDwnLinkVertical=fragments2xDwnLinkVertical, p7p8HiPriQEn=p7p8HiPriQEn, frUtlHighTotalUplinkSlots=frUtlHighTotalUplinkSlots, allowedIPAccess2=allowedIPAccess2, downLinkRateExtrapolated=downLinkRateExtrapolated, framePeriod=framePeriod, whispApsGPS=whispApsGPS, frUtlMedMaxDownlinkSlots=frUtlMedMaxDownlinkSlots, numCtlSlotsReserveHigh=numCtlSlotsReserveHigh, whispApsRFConfigRadioEntry=whispApsRFConfigRadioEntry, dwnLnkLimit=dwnLnkLimit, radiusAcctPort=radiusAcctPort, platformVer=platformVer, lqiLowDownlinkExpectedRate=lqiLowDownlinkExpectedRate, linkTestMode=linkTestMode, displayAPEval=displayAPEval, whispDefKeyUsed=whispDefKeyUsed, pmp450430LegacyMode=pmp450430LegacyMode, maxRange=maxRange, radioMaxRange=radioMaxRange, frUtlLowMumimoDownlinkSumimoUtilization=frUtlLowMumimoDownlinkSumimoUtilization, lqiMidReRegQualityIndex=lqiMidReRegQualityIndex, fragments4xUpLinkHorizontal=fragments4xUpLinkHorizontal, whispGPSOutSync=whispGPSOutSync, bitErrorsCorrected2xUpLinkVertical=bitErrorsCorrected2xUpLinkVertical, frUtlMedDownlinkCntlMsgSlots=frUtlMedDownlinkCntlMsgSlots, mumimoTrialPercentageRemaining=mumimoTrialPercentageRemaining, fpgaVersion=fpgaVersion, linkFragmentsReceived4XVertical=linkFragmentsReceived4XVertical, lqiHighBeaconPercent=lqiHighBeaconPercent, maxSMTxPwr=maxSMTxPwr, frUtlHighMumimoDownlinkSectorUtilization=frUtlHighMumimoDownlinkSectorUtilization, dlnkBcastCIR=dlnkBcastCIR, accountingInterimUpdateInterval=accountingInterimUpdateInterval, remoteSpectrumAnalyzerLUID=remoteSpectrumAnalyzerLUID, allowedIPAccessNMLength1=allowedIPAccessNMLength1, sesLoDownCIR=sesLoDownCIR, frUtlLowDownlinkAckUtilization=frUtlLowDownlinkAckUtilization, bitErrorsCorrected3xUpLinkHorizontal=bitErrorsCorrected3xUpLinkHorizontal, fragments3xUpLinkHorizontal=fragments3xUpLinkHorizontal, lastPowerLevel=lastPowerLevel, frUtlHighTotalDownlinkUtilization=frUtlHighTotalDownlinkUtilization, userAuthSharedSecret2=userAuthSharedSecret2, frUtlHighMumimoDownlinkMumimoUtilization=frUtlHighMumimoDownlinkMumimoUtilization, linkTestNumPkt=linkTestNumPkt, whispApsFrUtlStatsMumimoDistributionTable=whispApsFrUtlStatsMumimoDistributionTable, mumimoTrialEvent=mumimoTrialEvent, limitFreqBand900=limitFreqBand900, allowedIPAccess1=allowedIPAccess1, timeZone=timeZone, whispRegComplete=whispRegComplete, regFailESN=regFailESN, whispApsStatus=whispApsStatus, linkFragmentsReceived2XVertical=linkFragmentsReceived2XVertical, frUtlMedDownlinkHiPrioSlots=frUtlMedDownlinkHiPrioSlots, linkSpeed=linkSpeed, softwareBootVersion=softwareBootVersion, frUtlMumimoDownlinkDistributionIndex=frUtlMumimoDownlinkDistributionIndex, bhReReg=bhReReg, frUtlLowRFInDiscards=frUtlLowRFInDiscards, linkFragmentsReceived2XHorizontal=linkFragmentsReceived2XHorizontal, whispApsDfsEvent=whispApsDfsEvent, autoUpdateGlobalStatus=autoUpdateGlobalStatus, linkLastJitter=linkLastJitter, whispApsRFConfig=whispApsRFConfig, dfsStatus=dfsStatus, regFailureCount=regFailureCount, rfOLTrap=rfOLTrap, remoteSpectrumAnalyzerScanBandwidth=remoteSpectrumAnalyzerScanBandwidth, authServer3=authServer3, frUtlMumimoDownlinkUtilizationSfRange=frUtlMumimoDownlinkUtilizationSfRange, dlnkMcastCIR=dlnkMcastCIR, frUtlMedMaxMumimoDownlinkUtilization=frUtlMedMaxMumimoDownlinkUtilization, radioTransmitOutputPower=radioTransmitOutputPower, gpsTime=gpsTime, authServer1=authServer1, bitErrorsCorrected1xDwnLinkVertical=bitErrorsCorrected1xDwnLinkVertical, bitErrorsCorrected1xDwnLinkHorizontal=bitErrorsCorrected1xDwnLinkHorizontal, linkRegCount=linkRegCount, linkOperStatus=linkOperStatus, frUtlMedTotalUplinkSlots=frUtlMedTotalUplinkSlots, frUtlHighUplinkHiPrioSlots=frUtlHighUplinkHiPrioSlots, linkFragmentsReceived1XVertical=linkFragmentsReceived1XVertical, linkTestPktLength=linkTestPktLength, whispApsFrUtlStatsIntervalHigh=whispApsFrUtlStatsIntervalHigh, linkTestError=linkTestError, whispApsNotifGroup=whispApsNotifGroup, linkFragmentsReceived4XHorizontal=linkFragmentsReceived4XHorizontal, lqiMidUplinkExpectedRate=lqiMidUplinkExpectedRate, frUtlHighMaxUplinkSlots=frUtlHighMaxUplinkSlots, upLnkAckSlotHi=upLnkAckSlotHi, dwnLnkDataRate=dwnLnkDataRate, frUtlLowMaxDownlinkSlots=frUtlLowMaxDownlinkSlots, frUtlMedTotalDownlinkUtilization=frUtlMedTotalDownlinkUtilization, dhcpRelayAgentSrvrIP=dhcpRelayAgentSrvrIP, txPwrLevel=txPwrLevel, hiPriQEn=hiPriQEn, upLnkAckSlot=upLnkAckSlot, dhcpRlyAgntStat_maxHopDiscards=dhcpRlyAgntStat_maxHopDiscards, radiusReplyMsg=radiusReplyMsg, lqiHighUplinkExpectedRate=lqiHighUplinkExpectedRate, frUtlMedMaxUplinkSlots=frUtlMedMaxUplinkSlots, dataSlotUp=dataSlotUp, linkPhysAddress=linkPhysAddress, radioControlSlots=radioControlSlots, frUtlHighDownlinkCntlMsgSlots=frUtlHighDownlinkCntlMsgSlots, rfOLEnable=rfOLEnable, actUpLinkIndex=actUpLinkIndex, sesHiUpCIR=sesHiUpCIR, dataVCNum=dataVCNum, dhcpRlyAgntStat_reqRecvd=dhcpRlyAgntStat_reqRecvd, downLinkEff=downLinkEff, asIP1=asIP1, frUtlLowAvgContentionSlots=frUtlLowAvgContentionSlots, allowedIPAccessNMLength3=allowedIPAccessNMLength3, frUtlMedDownlinkAckSlots=frUtlMedDownlinkAckSlots, dfsConfig=dfsConfig, frUtlLowMumimoDownlinkMumimoUtilization=frUtlLowMumimoDownlinkMumimoUtilization, frUtlHighTotalDownlinkSlots=frUtlHighTotalDownlinkSlots, radioSlicingAp=radioSlicingAp, multicastVCDataRate=multicastVCDataRate, fragments4xUpLinkVertical=fragments4xUpLinkVertical, frUtlMediumAvgDownlinkSlots=frUtlMediumAvgDownlinkSlots, updateAppAddress=updateAppAddress, dhcpRlyAgntStat_reqRelayed=dhcpRlyAgntStat_reqRelayed, linkQualityAPData=linkQualityAPData, ntpLogSNMP=ntpLogSNMP, privateIp=privateIp, frUtlMumimoDownlinkInstantaneousUtilization=frUtlMumimoDownlinkInstantaneousUtilization, frUtlMedDownlinkBcastMcastUtilization=frUtlMedDownlinkBcastMcastUtilization, authMode=authMode, frUtlHighTotalUplinkUtilization=frUtlHighTotalUplinkUtilization, syslogXmitAP=syslogXmitAP, frUtlHighMinMumimoDownlinkUtilization=frUtlHighMinMumimoDownlinkUtilization, frUtlLowEthOutDiscards=frUtlLowEthOutDiscards, frUtlLowRFOutDiscards=frUtlLowRFOutDiscards, frUtlMedMumimoDownlinkMumimoUtilization=frUtlMedMumimoDownlinkMumimoUtilization, linkTestLUID=linkTestLUID, mumimoTrialMode=mumimoTrialMode, asIP4=asIP4, lqiLowUplinkExpectedRate=lqiLowUplinkExpectedRate, lqiHighReRegQualityIndex=lqiHighReRegQualityIndex, frUtlHighMumimoDownlinkMultiplexingGain=frUtlHighMumimoDownlinkMultiplexingGain, dropSession=dropSession, frUtlMedTotalUplinkUtilization=frUtlMedTotalUplinkUtilization, whispRegFailure=whispRegFailure, lqiMidBeaconPercent=lqiMidBeaconPercent, authKeyAp=authKeyAp, bitErrorsCorrected4xUpLinkVertical=bitErrorsCorrected4xUpLinkVertical, whispApsRFConfigRadios=whispApsRFConfigRadios, radioFreqCarrier=radioFreqCarrier, scheduleWhitening=scheduleWhitening, regFailReasonText=regFailReasonText, lqiHighDownlinkExpectedRate=lqiHighDownlinkExpectedRate, whispApsFrUtlStatsIntervalLowGroup=whispApsFrUtlStatsIntervalLowGroup, frUtlLowDownlinkBcastSlots=frUtlLowDownlinkBcastSlots, sesDownLinkLimit=sesDownLinkLimit, linkOutDiscardsHiQ=linkOutDiscardsHiQ, acctDomainNameAppend=acctDomainNameAppend, frUtlLowIntervalBwReqRx=frUtlLowIntervalBwReqRx, linkRadioDbmHorizontal=linkRadioDbmHorizontal, frUtlMedMumimoDownlinkAvgGroupSize=frUtlMedMumimoDownlinkAvgGroupSize, syslogServerPort=syslogServerPort, linkTestForceModulation=linkTestForceModulation, qinqEthType=qinqEthType, sectorID=sectorID, maxDwnLinkIndex=maxDwnLinkIndex, gpsStatus=gpsStatus, linkInOctetsHiQ=linkInOctetsHiQ, linkDescr=linkDescr, trapDelayAfterBootup=trapDelayAfterBootup, whispGPSInSync=whispGPSInSync, userAuthDomainNameAppend=userAuthDomainNameAppend, frUtlLowMaxContentionSlots=frUtlLowMaxContentionSlots, frUtlMumimoDownlinkUtilizationAzimuth=frUtlMumimoDownlinkUtilizationAzimuth, colorCodeRescanTimer=colorCodeRescanTimer, gpsFreeRun=gpsFreeRun, bitErrorsCorrected2xDwnLinkVertical=bitErrorsCorrected2xDwnLinkVertical, currentRadioFreqCarrier=currentRadioFreqCarrier, whispApsLink=whispApsLink, airLinkSecurity=airLinkSecurity, lqiMidReRegCount=lqiMidReRegCount, linkTestStatus=linkTestStatus, linkTestDuration=linkTestDuration, dhcpRelayAgentEnable=dhcpRelayAgentEnable, frUtlHighRFOutDiscards=frUtlHighRFOutDiscards, frUtlLowIntervalBwReqMissed=frUtlLowIntervalBwReqMissed, sesUpLinkLimit=sesUpLinkLimit, lqiHighUplinkAverageActualRate=lqiHighUplinkAverageActualRate, linkSiteName=linkSiteName, whispUsrAuthPhase1=whispUsrAuthPhase1, userAuthSharedSecret3=userAuthSharedSecret3, frUtlHighMumimoDownlinkSumimoUtilization=frUtlHighMumimoDownlinkSumimoUtilization, frUtlLowDownlinkLowPrioSlots=frUtlLowDownlinkLowPrioSlots, actUpFragCount=actUpFragCount, expUpFragCount=expUpFragCount, regulatoryApCheckInvalidChBwFailed=regulatoryApCheckInvalidChBwFailed, frUtlMedDownlinkBcastSlots=frUtlMedDownlinkBcastSlots, whispApsRegEvent=whispApsRegEvent, autoSyncStatus=autoSyncStatus)
mibBuilder.exportSymbols("WHISP-APS-MIB", dfsStatusAlt1=dfsStatusAlt1, gpsDate=gpsDate, userAuthServer1=userAuthServer1, lqiHighBeaconQualityIndex=lqiHighBeaconQualityIndex, frUtlMediumMaxContentionSlots=frUtlMediumMaxContentionSlots, frUtlHighUplinkLowPrioSlots=frUtlHighUplinkLowPrioSlots, signalToNoiseRatioDownLinkVertical=signalToNoiseRatioDownLinkVertical, frUtlHighAvgUplinkSlots=frUtlHighAvgUplinkSlots, linkOutError=linkOutError, frUtlHighDownlinkBcastSlots=frUtlHighDownlinkBcastSlots, gpsSatellitesVisibleInt=gpsSatellitesVisibleInt, whispApsLQIHighInterval=whispApsLQIHighInterval, lqiMidDownlinkAverageActualRate=lqiMidDownlinkAverageActualRate, whispApsLQILowInterval=whispApsLQILowInterval, mimoPowerLevelHorizontal=mimoPowerLevelHorizontal, adaptRate=adaptRate, frUtlHighIntervalBwReqRx=frUtlHighIntervalBwReqRx, lanMaskAp=lanMaskAp, PYSNMP_MODULE_ID=whispApsMibModule, gpsInvalidMsg=gpsInvalidMsg, gpsAntennaConnection=gpsAntennaConnection, whispRegLost=whispRegLost, linkAdaptRateHighPri=linkAdaptRateHighPri, frUtlMedEthInDiscards=frUtlMedEthInDiscards, linkInErrorHiQ=linkInErrorHiQ, linkESN=linkESN, signalToNoiseRatioUpLinkHorizontal=signalToNoiseRatioUpLinkHorizontal, gpsLatitude=gpsLatitude, frUtlHighMaxMumimoDownlinkUtilization=frUtlHighMaxMumimoDownlinkUtilization, linkInUnknownProtosHiQ=linkInUnknownProtosHiQ, dAcksReservHigh=dAcksReservHigh, whispLinkTestGroup=whispLinkTestGroup, numDAckSlots=numDAckSlots, regulatoryCheckFailedNoRegionAp=regulatoryCheckFailedNoRegionAp, radioDownlinkPercent=radioDownlinkPercent, dataSlotUpHi=dataSlotUpHi, frUtlMedMinMumimoDownlinkUtilization=frUtlMedMinMumimoDownlinkUtilization, frUtlMedEthOutDiscards=frUtlMedEthOutDiscards, bitErrorsCorrected4xUpLinkHorizontal=bitErrorsCorrected4xUpLinkHorizontal, bitErrorsCorrected3xDwnLinkHorizontal=bitErrorsCorrected3xDwnLinkHorizontal, whispApsFrUtlStatsIntervalHighGroup=whispApsFrUtlStatsIntervalHighGroup, systemTime=systemTime, productType=productType, vlanEnable=vlanEnable, numCtrSlot=numCtrSlot, frUtlMediumContentionSlots=frUtlMediumContentionSlots, sessionCount=sessionCount, whispFailedRegEntry=whispFailedRegEntry, gpsReceiverInfo=gpsReceiverInfo, lqiMidBeaconQualityIndex=lqiMidBeaconQualityIndex, authSharedSecret1=authSharedSecret1, frUtlHighEthInDiscards=frUtlHighEthInDiscards, mumimoMode=mumimoMode, frUtlMediumIntervalBwReqPercentage=frUtlMediumIntervalBwReqPercentage, gpsOutputEn=gpsOutputEn, linkInUcastPktsHiQ=linkInUcastPktsHiQ, smSessionSeqNumMismatch=smSessionSeqNumMismatch, pmp430SMRegistration=pmp430SMRegistration, whispApsDNS=whispApsDNS, gpsSatellitesVisible=gpsSatellitesVisible, gpsReInitCount=gpsReInitCount, frUtlLowMumimoDownlinkAvgGroupSize=frUtlLowMumimoDownlinkAvgGroupSize, vcCount=vcCount, apConfigAdjacentChanSupport=apConfigAdjacentChanSupport, colorCodeRescanIdleTimer=colorCodeRescanIdleTimer, allowedIPAccessNMLength2=allowedIPAccessNMLength2, rfOutDiscardRate=rfOutDiscardRate, lqiMidUplinkAverageActualRate=lqiMidUplinkAverageActualRate, sMTxPowerControl=sMTxPowerControl, fragments1xUpLinkVertical=fragments1xUpLinkVertical, actDwnFragCount=actDwnFragCount, frUtlMedUplinkLowPrioSlots=frUtlMedUplinkLowPrioSlots, lqiMidDownlinkQualityIndex=lqiMidDownlinkQualityIndex, radiusPort=radiusPort, syslogDomainNameAppend=syslogDomainNameAppend, gpsHeight=gpsHeight, frUtlLowContentionSlots=frUtlLowContentionSlots, uGPSPower=uGPSPower, linkTestSNRCalculation=linkTestSNRCalculation, whispApsFrUtlStatsIntervalLow=whispApsFrUtlStatsIntervalLow, untranslatedArp=untranslatedArp, frUtlLowDownlinkHiPrioSlots=frUtlLowDownlinkHiPrioSlots, radioMode=radioMode, gpsTrackingMode=gpsTrackingMode, linkOutOctetsHiQ=linkOutOctetsHiQ, apVlanOverride=apVlanOverride, numCtlSlots=numCtlSlots, linkTestAction=linkTestAction, sesLoUpCIR=sesLoUpCIR, frUtlLowEthInDiscards=frUtlLowEthInDiscards, userAuthSharedSecret1=userAuthSharedSecret1, dwnLnkAckSlotHi=dwnLnkAckSlotHi, linkLastRSSI=linkLastRSSI, gpsSyncStatus=gpsSyncStatus, rfPPPoEPADIForwarding=rfPPPoEPADIForwarding)
