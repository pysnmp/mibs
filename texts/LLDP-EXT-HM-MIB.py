#
# PySNMP MIB module LLDP-EXT-HM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/hirschmann/lldp_hm.mib
# Produced by pysmi-1.1.12 at Wed Dec  4 17:55:12 2024
# On host fv-az2036-124 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
lldpLocPortNum, lldpRemLocalPortNum, lldpExtensions, lldpPortConfigEntry, lldpRemIndex, lldpRemTimeMark = mibBuilder.importSymbols("LLDP-MIB", "lldpLocPortNum", "lldpRemLocalPortNum", "lldpExtensions", "lldpPortConfigEntry", "lldpRemIndex", "lldpRemTimeMark")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Integer32, ObjectIdentity, TimeTicks, Counter32, Counter64, iso, NotificationType, Gauge32, ModuleIdentity, Unsigned32, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Integer32", "ObjectIdentity", "TimeTicks", "Counter32", "Counter64", "iso", "NotificationType", "Gauge32", "ModuleIdentity", "Unsigned32", "IpAddress", "Bits")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
lldpXHmMIB = ModuleIdentity((1, 0, 8802, 1, 1, 2, 1, 5, 32867))
lldpXHmMIB.setRevisions(('2008-09-12 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: lldpXHmMIB.setRevisionsDescriptions(('Part of Hirschmann LLDP device information extension',))
if mibBuilder.loadTexts: lldpXHmMIB.setLastUpdated('200809121200Z')
if mibBuilder.loadTexts: lldpXHmMIB.setOrganization('Hirschmann Automation & Control')
if mibBuilder.loadTexts: lldpXHmMIB.setContactInfo('  URL: www.hirschmann-ac.com\r\n             \r\n              Contact: Oliver Kleineberg\r\n               Postal: Hirschmann Automation & Control\r\n                       Stuttgarter Strasse 45-51\r\n                       DE-72654 Neckartenzlingen\r\n                       Germany\r\n                  Tel: +49-7127-14-1035\r\n                  Fax: +49-7127-14-1561\r\n               E-mail: oliver.kleineberg@hirschmann.de')
if mibBuilder.loadTexts: lldpXHmMIB.setDescription('The LLDP Management Information Base extension module for\r\n    Hirschmann organizationally defined discovery information.\r\n    In order to assure the uniqueness of the LLDP-MIB,\r\n    lldpXHmMIB is branched from lldpExtensions using the Hirschmann\r\n    OUI value as the node.')
lldpXHmObjects = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1))
lldpXHmConfig = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 1))
lldpXHmLocalData = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2))
lldpXHmRemoteData = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3))
class LldpXHmLocGMRPServiceReqSyntax(TextualConvention, Integer32):
    description = '(1) corresponds to forward All Multicast Groups requirement\r\n     (2) corresponds to forward Unregistered Multicast Groups requirement\r\n     (3) not applicable\r\n     If GMRP is not configured on the interface, the value should be set to\r\n     3 and the field should not be evaluated.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("forwardAll", 1), ("forwardUnregistered", 2), ("notApplicable", 3))

class LldpXHmLocIGMPVersionSyntax(TextualConvention, Bits):
    description = 'This bitmap shows which IGMP version is configured on the local device:\r\n    Bit(0): a 1 indicates IGMPv1 configured.\r\n    Bit(1): a 1 indicates IGMPv2 configured.\r\n    Bit(2): a 1 indicates IGMPv2 configured.\r\n    \r\n    All IGMP Versions are mutually exclusive, so only one bit should be set\r\n    at any given time. If all bits are set to 0, IGMP is not configured on the\r\n    device.'
    status = 'current'
    namedValues = NamedValues(("iGMPv1", 0), ("iGMPv2", 1), ("iGMPv3", 2))

class LldpXHmLocPortSecModeSyntax(TextualConvention, Integer32):
    description = 'This Integer Value Shows the 802.1X Port Security configuration for a local port:\r\n            (1) not applicable, no 802.1X support or not configured\r\n            (2) force Authorized, general port access without authorization\r\n            (3) force Unauthorized, no general port access, even with autorization\r\n            (4) automatic, access based on successful authorization\r\n            '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 1), ("forceAuthorized", 2), ("forceUnauthorized", 3), ("automatic", 4))

class LldpXHmLocPTPSupportSyntax(TextualConvention, Bits):
    description = 'This bitmap shows which PTP versions are supported by the local system, based on installed hardware:\r\n        Bit(0): a 1 indicates that PTP is supported in software only\r\n        Bit(1): a 1 indicates that PTPv1 is supported\r\n        Bit(2): a 1 indicates that PTPv2 is supported\r\n        Bit(3): a 1 indicates that PTPTC is supported\r\n    PTPTC indicates the capability to act as a PTP transparent clock.\r\n    If no bits are set, the device does not support any PTP standard and all\r\n    following fields should be set to (0) or (not applicable).'
    status = 'current'
    namedValues = NamedValues(("swsupport", 0), ("ptpv1capable", 1), ("ptpv2capable", 2), ("ptptccapable", 3))

class LldpXHmLocPTPStatusSyntax(TextualConvention, Bits):
    description = 'This bitmap shows which PTP versions are enabled on the local system:\r\n        Bit(0): a 1 indicates that PTPv1 is enabled\r\n        Bit(1): a 1 indicates that PTPv2 is enabled\r\n    Both bits should not be set simultaneously, as either only PTPv1 or PTPv2\r\n    can be enabled on a device.\r\n    If no bits are set, no PTP standard is enabled on the port/device and all\r\n    following fields should be set to (0) or similar (e.g. not applicable).'
    status = 'current'
    namedValues = NamedValues(("ptpv1enabled", 0), ("ptpv2enabled", 1))

class LldpXHmLocPTPv2DataTransferSyntax(TextualConvention, Integer32):
    description = 'This Integer is only viable if PTPv2 is enabled. It shows the data transfer\r\n    type configured on the local port and device.\r\n    If only PTPv1 is enabled or no PTP available, this should be set to 4 and not\r\n    evaluated.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("ptp2Ieee8023", 1), ("ptp2UdpIpv4", 2), ("ptp2UdpIpv6", 3), ("notApplicable", 4))

class LldpXHmLocPTPv2DelayMechanismSyntax(TextualConvention, Integer32):
    description = 'This Integer is only viable if PTPv2 is enabled. It shows the delay\r\n    mechanism configured on the local port and device.\r\n    If only PTPv1 is enabled or no PTP available, this should be set to 4 and not\r\n    evaluated.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("p2p", 1), ("e2e", 2), ("disabled", 3), ("notApplicable", 4))

class LldpXHmRemGMRPServiceReqSyntax(TextualConvention, Integer32):
    description = '(1) corresponds to forward All Multicast Groups requirement\r\n     (2) corresponds to forward Unregistered Multicast Groups requirement\r\n    If GMRP is not configured on the interface, the value should be set to\r\n     3 and the field should not be evaluated.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("forwardAll", 1), ("forwardUnregistered", 2), ("notApplicable", 3))

class LldpXHmRemPTPv2DataTransferSyntax(TextualConvention, Integer32):
    description = 'This field is only viable if PTPv2 is enabled. It shows the data transfer\r\n    type configured on the remote port and device.\r\n    If only PTPv1 is enabled or no PTP available, this should be set to 4 and not\r\n    evaluated.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("ptp2Ieee8023", 1), ("ptp2UdpIpv4", 2), ("ptp2UdpIpv6", 3), ("notApplicable", 4))

class LldpXHmRemPTPv2DelayMechanismSyntax(TextualConvention, Integer32):
    description = 'This field is only viable if PTPv2 is enabled. It shows the delay\r\n    mechanism configured on the remote port and device.\r\n    If only PTPv1 is enabled or no PTP available, this should be set to 4 and not\r\n    evaluated.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("p2p", 1), ("e2e", 2), ("disabled", 3), ("notApplicable", 4))

class LldpXHmRemPTPSupportSyntax(TextualConvention, Bits):
    description = 'This bitmap shows which PTP versions are supported by the remote system, based on installed hardware:\r\n        Bit(0): a 1 indicates that PTP is supported in software only\r\n        Bit(1): a 1 indicates that PTPv1 is supported\r\n        Bit(2): a 1 indicates that PTPv2 is supported\r\n        Bit(3): a 1 indicates that PTPTC is supported\r\n    PTPTC indicates the capability to act as a PTP transparent clock.\r\n    If no bits are set, the device does not support any PTP standard and all\r\n    following fields should be set to (0) or (not applicable).'
    status = 'current'
    namedValues = NamedValues(("swsupport", 0), ("ptpv1capable", 1), ("ptpv2capable", 2), ("ptptccapable", 3))

class LldpXHmRemPTPStatusSyntax(TextualConvention, Bits):
    description = 'This Bitmap shows which PTP versions are enabled on the remote system:\r\n        Bit(0): a 1 indicates that PTPv1 is enabled\r\n        Bit(1): a 1 indicates that PTPv2 is enabled\r\n    Both bits should not be set simultaneously, as either only PTPv1 or PTPv2\r\n    can be enabled on a device.\r\n    If no bits are set, no PTP standard is enabled on the port/device and all\r\n    following fields should be set to (0) or similar (e.g. not applicable).\r\n    '
    status = 'current'
    namedValues = NamedValues(("ptpv1enabled", 0), ("ptpv2enabled", 1))

class LldpXHmRemPortSecModeSyntax(TextualConvention, Integer32):
    description = 'This Integer Value Shows the 802.1X Port Security configuration for a remote port:\r\n            (1) not applicable, no 802.1X support or not configured\r\n            (2) force Authorized, general port access without authorization\r\n            (3) force Unauthorized, no general port access, even with autorization\r\n            (4) automatic, access based on successful authorization\r\n            '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 1), ("forceAuthorized", 2), ("forceUnauthorized", 3), ("automatic", 4))

class LldpXHmRemIGMPVersionSyntax(TextualConvention, Bits):
    description = 'Shows which IGMP version is configured on the remote device:\r\n    Bit(0): a 1 indicates IGMPv1 configured.\r\n    Bit(1): a 1 indicates IGMPv2 configured.\r\n    Bit(2): a 1 indicates IGMPv2 configured.\r\n    \r\n    All IGMP Versions are mutually exclusive, so only one bit should be set\r\n    to 1 at any given time. If all bits are set to 0, IGMP is not configured\r\n    on the device.'
    status = 'current'
    namedValues = NamedValues(("iGMPv1", 0), ("iGMPv2", 1), ("iGMPv3", 2))

lldpXHmConfigGMRPTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 1, 1), )
if mibBuilder.loadTexts: lldpXHmConfigGMRPTable.setStatus('current')
if mibBuilder.loadTexts: lldpXHmConfigGMRPTable.setDescription('A table that controls GMRP LLDP TLV Information\r\n            to be transmitted on individual ports.')
lldpXHmConfigGMRPEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 1, 1, 1), )
lldpPortConfigEntry.registerAugmentions(("LLDP-EXT-HM-MIB", "lldpXHmConfigGMRPEntry"))
lldpXHmConfigGMRPEntry.setIndexNames(*lldpPortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXHmConfigGMRPEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXHmConfigGMRPEntry.setDescription('LLDP configuration information that controls the\r\n    transmission of Hirschmann GMRP organizationally defined Configuration\r\n    TLV on LLDP transmission capable ports.\r\n\r\n    This configuration object augments the lldpPortConfigEntry of\r\n    the LLDP-MIB, therefore it is only present along with the port\r\n    configuration defined by the associated lldpPortConfigEntry\r\n    entry.\r\n\r\n    Each active lldpConfigEntry must be restored from non-volatile\r\n    storage (along with the corresponding lldpPortConfigEntry)\r\n    after a re-initialization of the management system.')
lldpXHmConfigGMRPTxEnable = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 1, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXHmConfigGMRPTxEnable.setReference('internal')
if mibBuilder.loadTexts: lldpXHmConfigGMRPTxEnable.setStatus('current')
if mibBuilder.loadTexts: lldpXHmConfigGMRPTxEnable.setDescription('The lldpXHmConfigGMRPTxEnable, which is defined as\r\n            a truth value and configured by the network management,\r\n            determines whether the Hirschmann GMRP organizationally defined\r\n            port TLV transmission is allowed on a given LLDP\r\n            transmission capable port.\r\n\r\n            The value of this object must be restored from non-volatile\r\n            storage after a re-initialization of the management system.')
lldpXHmConfigIGMPTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 1, 2), )
if mibBuilder.loadTexts: lldpXHmConfigIGMPTable.setStatus('current')
if mibBuilder.loadTexts: lldpXHmConfigIGMPTable.setDescription('A table that controls IGMP LLDP TLV Information\r\n            to be transmitted on individual ports.')
lldpXHmConfigIGMPEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 1, 2, 1), )
lldpPortConfigEntry.registerAugmentions(("LLDP-EXT-HM-MIB", "lldpXHmConfigIGMPEntry"))
lldpXHmConfigIGMPEntry.setIndexNames(*lldpPortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXHmConfigIGMPEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXHmConfigIGMPEntry.setDescription('LLDP configuration information that controls the\r\n            transmission of Hirschmann IGMP organizationally defined Configuration\r\n            TLV on LLDP transmission capable ports.\r\n\r\n            This configuration object augments the lldpPortConfigEntry of\r\n            the LLDP-MIB, therefore it is only present along with the port\r\n            configuration defined by the associated lldpPortConfigEntry\r\n            entry.\r\n\r\n            Each active lldpConfigEntry must be restored from non-volatile\r\n            storage (along with the corresponding lldpPortConfigEntry)\r\n            after a re-initialization of the management system.')
lldpXHmConfigIGMPTxEnable = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 1, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXHmConfigIGMPTxEnable.setReference('internal')
if mibBuilder.loadTexts: lldpXHmConfigIGMPTxEnable.setStatus('current')
if mibBuilder.loadTexts: lldpXHmConfigIGMPTxEnable.setDescription('The lldpXHmConfigIGMPTxEnable, which is defined as\r\n            a truth value and configured by the network management,\r\n            determines whether the Hirschmann IGMP organizationally defined\r\n            port TLV transmission is allowed on a given LLDP\r\n            transmission capable port.\r\n\r\n            The value of this object must be restored from non-volatile\r\n            storage after a re-initialization of the management system.')
lldpXHmConfigPortSecTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 1, 3), )
if mibBuilder.loadTexts: lldpXHmConfigPortSecTable.setStatus('current')
if mibBuilder.loadTexts: lldpXHmConfigPortSecTable.setDescription('A table that controls 802.1X Port Security LLDP TLV Information\r\n            to be transmitted on individual ports.')
lldpXHmConfigPortSecEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 1, 3, 1), )
lldpPortConfigEntry.registerAugmentions(("LLDP-EXT-HM-MIB", "lldpXHmConfigPortSecEntry"))
lldpXHmConfigPortSecEntry.setIndexNames(*lldpPortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXHmConfigPortSecEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXHmConfigPortSecEntry.setDescription('LLDP configuration information that controls the\r\n            transmission of Hirschmann 802.1X Port Security organizationally\r\n            defined Configuration TLV on LLDP transmission capable ports.\r\n\r\n            This configuration object augments the lldpPortConfigEntry of\r\n            the LLDP-MIB, therefore it is only present along with the port\r\n            configuration defined by the associated lldpPortConfigEntry\r\n            entry.\r\n\r\n            Each active lldpConfigEntry must be restored from non-volatile\r\n            storage (along with the corresponding lldpPortConfigEntry)\r\n            after a re-initialization of the management system.')
lldpXHmConfigPortSecTxEnable = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 1, 3, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXHmConfigPortSecTxEnable.setReference('internal')
if mibBuilder.loadTexts: lldpXHmConfigPortSecTxEnable.setStatus('current')
if mibBuilder.loadTexts: lldpXHmConfigPortSecTxEnable.setDescription('The lldpXHmConfigPortSecTxEnable, which is defined as\r\n            a truth value and configured by the network management,\r\n            determines whether the Hirschmann 802.1X Port Security \r\n            organizationally defined port TLV transmission is allowed \r\n            on a given LLDP transmission capable port.\r\n\r\n            The value of this object must be restored from non-volatile\r\n            storage after a re-initialization of the management system.')
lldpXHmConfigPTPTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 1, 4), )
if mibBuilder.loadTexts: lldpXHmConfigPTPTable.setStatus('current')
if mibBuilder.loadTexts: lldpXHmConfigPTPTable.setDescription('A table that controls PTP LLDP TLV Information\r\n            to be transmitted on individual ports.')
lldpXHmConfigPTPEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 1, 4, 1), )
lldpPortConfigEntry.registerAugmentions(("LLDP-EXT-HM-MIB", "lldpXHmConfigPTPEntry"))
lldpXHmConfigPTPEntry.setIndexNames(*lldpPortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXHmConfigPTPEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXHmConfigPTPEntry.setDescription('LLDP configuration information that controls the\r\n            transmission of Hirschmann PTP organizationally defined Configuration\r\n            TLV on LLDP transmission capable ports.\r\n\r\n            This configuration object augments the lldpPortConfigEntry of\r\n            the LLDP-MIB, therefore it is only present along with the port\r\n            configuration defined by the associated lldpPortConfigEntry\r\n            entry.\r\n\r\n            Each active lldpConfigEntry must be restored from non-volatile\r\n            storage (along with the corresponding lldpPortConfigEntry)\r\n            after a re-initialization of the management system.')
lldpXHmConfigPTPTxEnable = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 1, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXHmConfigPTPTxEnable.setReference('internal')
if mibBuilder.loadTexts: lldpXHmConfigPTPTxEnable.setStatus('current')
if mibBuilder.loadTexts: lldpXHmConfigPTPTxEnable.setDescription('The lldpXHmConfigPTPTxEnable, which is defined as\r\n            a truth value and configured by the network management,\r\n            determines whether the Hirschmann PTP organizationally defined\r\n            port TLV transmission is allowed on a given LLDP\r\n            transmission capable port.\r\n\r\n            The value of this object must be restored from non-volatile\r\n            storage after a re-initialization of the management system.')
lldpXHmLocGMRPTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 1), )
if mibBuilder.loadTexts: lldpXHmLocGMRPTable.setReference('IEEE 802.1D-2004, Section 10')
if mibBuilder.loadTexts: lldpXHmLocGMRPTable.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocGMRPTable.setDescription('This table contains one or more rows per Port and GMRP\r\n             information about each port of the local system.\r\n             \r\n             GMRP is a protocol used for constraining IP Multicast traffic\r\n             defined by the IEEE in standard 802.1p, published in standard 802.1D')
lldpXHmLocGMRPEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 1, 1), ).setIndexNames((0, "LLDP-MIB", "lldpLocPortNum"))
if mibBuilder.loadTexts: lldpXHmLocGMRPEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocGMRPEntry.setDescription('GMRP Information about a particular\r\n            port component.')
lldpXHmLocGMRPSupport = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmLocGMRPSupport.setReference('internal')
if mibBuilder.loadTexts: lldpXHmLocGMRPSupport.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocGMRPSupport.setDescription('The truth value used to indicate whether the given port\r\n            (associated with the local system) supports GMRP.\r\n            If this is set to (false), all following fields should be\r\n            set to not applicable and should not be evaluated.')
lldpXHmLocGMRPStatus = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmLocGMRPStatus.setReference('internal')
if mibBuilder.loadTexts: lldpXHmLocGMRPStatus.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocGMRPStatus.setDescription('The truth value used to indicate whether GMRP\r\n            is enabled on the the given port associated with the local system.\r\n            If this is set to (false), all following fields should be\r\n            set to not applicable and should not be evaluated.')
lldpXHmLocGMRPServiceReq = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 1, 1, 3), LldpXHmLocGMRPServiceReqSyntax()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmLocGMRPServiceReq.setReference('internal')
if mibBuilder.loadTexts: lldpXHmLocGMRPServiceReq.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocGMRPServiceReq.setDescription('Integer value, used to indicate which GMRP service requirement\r\n            is enabled on the the given port associated with the local system.\r\n            ')
lldpXHmLocIGMPTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 2), )
if mibBuilder.loadTexts: lldpXHmLocIGMPTable.setReference('RFCs 1112, 2236, 3376 e.g. at www.rfc.net')
if mibBuilder.loadTexts: lldpXHmLocIGMPTable.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocIGMPTable.setDescription('This table contains one or more rows per Port and IGMP\r\n             information about each port of the local system.\r\n             \r\n             IGMP is a protocol used for constraining IP multicast traffic\r\n             specified in IETF RFCs 1112, 2236(IGMPv2) and 3376(IGMPv3)')
lldpXHmLocIGMPEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 2, 1), ).setIndexNames((0, "LLDP-MIB", "lldpLocPortNum"))
if mibBuilder.loadTexts: lldpXHmLocIGMPEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocIGMPEntry.setDescription('IGMP Information about a particular\r\n            port component.')
lldpXHmLocIGMPSupport = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmLocIGMPSupport.setReference('internal')
if mibBuilder.loadTexts: lldpXHmLocIGMPSupport.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocIGMPSupport.setDescription('The truth value used to indicate whether the given port\r\n            (associated with the local system) supports IGMP.\r\n            If this is set to (false), all following fields should be\r\n            set to not applicable and should not be evaluated.')
lldpXHmLocIGMPStatus = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmLocIGMPStatus.setReference('internal')
if mibBuilder.loadTexts: lldpXHmLocIGMPStatus.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocIGMPStatus.setDescription('The truth value used to indicate whether IGMP is enabled\r\n            on the the given port associated with the local system.\r\n            If this is set to (false), all following fields should be\r\n            set to not applicable and should not be evaluated.')
lldpXHmLocIGMPVersion = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 2, 1, 3), LldpXHmLocIGMPVersionSyntax()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmLocIGMPVersion.setReference('internal')
if mibBuilder.loadTexts: lldpXHmLocIGMPVersion.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocIGMPVersion.setDescription('This bitmap shows which IGMP version is configured on the local device.')
lldpXHmLocPortSecTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 3), )
if mibBuilder.loadTexts: lldpXHmLocPortSecTable.setReference('IEEE Standard 802.1X - 2004')
if mibBuilder.loadTexts: lldpXHmLocPortSecTable.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocPortSecTable.setDescription('This table contains one or more rows per Port and \r\n            802.1X Port Security information about each port of\r\n            the local system.\r\n            \r\n            IEEE 802.1X Port Security is a standard, defining rules for\r\n            a port based network access control with a client/supplicant\r\n            requesting access to the network from an authenticator/RADIUS server')
lldpXHmLocPortSecEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 3, 1), ).setIndexNames((0, "LLDP-MIB", "lldpLocPortNum"))
if mibBuilder.loadTexts: lldpXHmLocPortSecEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocPortSecEntry.setDescription('802.1X Port Security Information about a particular\r\n            port component.')
lldpXHmLocPortSecSupport = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 3, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmLocPortSecSupport.setReference('internal')
if mibBuilder.loadTexts: lldpXHmLocPortSecSupport.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocPortSecSupport.setDescription('The truth value used to indicate whether the given port\r\n            (associated with the local system) supports 802.1X Port Security.\r\n            If this is set to (false), all following fields should be\r\n            set to not applicable and should not be evaluated.')
lldpXHmLocPortSecStatus = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmLocPortSecStatus.setReference('internal')
if mibBuilder.loadTexts: lldpXHmLocPortSecStatus.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocPortSecStatus.setDescription('The truth value used to indicate whether 802.1X Port Security\r\n            is enabled on the the given port associated with the local system.\r\n            If this is set to (false), all following fields should be\r\n            set to not applicable and should not be evaluated.')
lldpXHmLocPortSecMode = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 3, 1, 3), LldpXHmLocPortSecModeSyntax()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmLocPortSecMode.setReference('internal')
if mibBuilder.loadTexts: lldpXHmLocPortSecMode.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocPortSecMode.setDescription('This Integer value contains informations about a local ports 802.1X\r\n            configuration.')
lldpXHmLocPTPTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 4), )
if mibBuilder.loadTexts: lldpXHmLocPTPTable.setReference('IEEE 1588 - 2002 Precision Time Protocol')
if mibBuilder.loadTexts: lldpXHmLocPTPTable.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocPTPTable.setDescription('This table contains one or more rows per Port and PTP\r\n             information about the local system.\r\n             \r\n             The Precision Time Protocol (PTP) is defined in IEEE Standard 1588\r\n             and describes a protocol for network (system) clock synchronization\r\n             with very high precision.')
lldpXHmLocPTPEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 4, 1), ).setIndexNames((0, "LLDP-MIB", "lldpLocPortNum"))
if mibBuilder.loadTexts: lldpXHmLocPTPEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocPTPEntry.setDescription('Port and PTP Information about a particular\r\n            port component')
lldpXHmLocPTPSupport = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 4, 1, 1), LldpXHmLocPTPSupportSyntax()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmLocPTPSupport.setReference('internal')
if mibBuilder.loadTexts: lldpXHmLocPTPSupport.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocPTPSupport.setDescription('This bitmap shows which PTP versions are supported by the local system, based on installed hardware')
lldpXHmLocPTPStatus = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 4, 1, 2), LldpXHmLocPTPStatusSyntax()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmLocPTPStatus.setReference('internal')
if mibBuilder.loadTexts: lldpXHmLocPTPStatus.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocPTPStatus.setDescription('This bitmap shows which PTP versions are enabled on the local system')
lldpXHmLocPTPSyncInterval = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmLocPTPSyncInterval.setReference('internal')
if mibBuilder.loadTexts: lldpXHmLocPTPSyncInterval.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocPTPSyncInterval.setDescription('This Integer shows the PTPv1 and PTPv2 Synchronization Interval.\r\n            If no PTP is available or configured, this value should be set to -128.')
lldpXHmLocPTPv2AnnounceInterval = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmLocPTPv2AnnounceInterval.setReference('internal')
if mibBuilder.loadTexts: lldpXHmLocPTPv2AnnounceInterval.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocPTPv2AnnounceInterval.setDescription('This Integer shows the PTPv2 Announce Interval. If PTPv2 is not\r\n            configured or available, this should be set to -128.')
lldpXHmLocPTPv2DataTransfer = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 4, 1, 5), LldpXHmLocPTPv2DataTransferSyntax()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmLocPTPv2DataTransfer.setReference('internal')
if mibBuilder.loadTexts: lldpXHmLocPTPv2DataTransfer.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocPTPv2DataTransfer.setDescription('This Integer shows the enabled PTPv2 data transfer method.\r\n            ')
lldpXHmLocPTPv2DelayMechanism = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 4, 1, 6), LldpXHmLocPTPv2DelayMechanismSyntax()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmLocPTPv2DelayMechanism.setReference('internal')
if mibBuilder.loadTexts: lldpXHmLocPTPv2DelayMechanism.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocPTPv2DelayMechanism.setDescription('This Integer shows the enabled PTPv2 delay mechanism')
lldpXHmLocPTPClockValues = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 4, 1, 7), Bits().clone(namedValues=NamedValues(("slave", 0), ("master", 1), ("transparent", 2), ("boundary", 3), ("grandmaster", 4), ("multidomain", 5), ("simplemode", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmLocPTPClockValues.setReference('internal')
if mibBuilder.loadTexts: lldpXHmLocPTPClockValues.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocPTPClockValues.setDescription('This bitmap shows, which clock type(s) are configured\r\n            on a specific port and/or device:\r\n            Bit (0) set to 1 indicates a slave clock\r\n            Bit (1) set to 1 indicates a master clock\r\n            Bit (2) set to 1 indicates a transparent clock\r\n            Bit (3) set to 1 indicates a boundary clock\r\n            Bit (4) set to 1 indicates a grandmaster clock\r\n            Bit (5) set to 1 indicates a clock in multi domain mode\r\n            Bit (6) set to 1 indicates a clock in simple mode\r\n            \r\n            If no PTP is configured, all bits should be set to 0.')
lldpXHmLocPTPv2SubdomainNumber = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmLocPTPv2SubdomainNumber.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocPTPv2SubdomainNumber.setDescription('This Integer shows the PTPv2 subdomain number configured on the local device.\r\n            In case PTPv1 is configured, this value is of no relevance and will not be evaluated.')
lldpXHmLocPTPv1SubdomainName = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 2, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmLocPTPv1SubdomainName.setStatus('current')
if mibBuilder.loadTexts: lldpXHmLocPTPv1SubdomainName.setDescription('This Octet String contains the PTPv1 subdomain name, an ASCII String\r\n            with a maximum of 16 characters length, configured on the local\r\n            device.\r\n            If PTPv2 or no PTP is configured, this should be set to 0.')
lldpXHmRemGMRPTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 1), )
if mibBuilder.loadTexts: lldpXHmRemGMRPTable.setReference('IEEE 802.1D-2004, Section 10')
if mibBuilder.loadTexts: lldpXHmRemGMRPTable.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemGMRPTable.setDescription('This table contains one or more rows per Port and GMRP\r\n             information about the remote system.\r\n             \r\n             GMRP is a protocol used for constraining IP Multicast traffic\r\n             defined by the IEEE in standard 802.1p, published in standard 802.1D')
lldpXHmRemGMRPEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 1, 1), ).setIndexNames((0, "LLDP-MIB", "lldpRemTimeMark"), (0, "LLDP-MIB", "lldpRemLocalPortNum"), (0, "LLDP-MIB", "lldpRemIndex"))
if mibBuilder.loadTexts: lldpXHmRemGMRPEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemGMRPEntry.setDescription('GMRP Information about a particular\r\n            port component.')
lldpXHmRemGMRPSupport = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmRemGMRPSupport.setReference('internal')
if mibBuilder.loadTexts: lldpXHmRemGMRPSupport.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemGMRPSupport.setDescription('The truth value used to indicate whether the given port\r\n            (associated with the remote system) supports GMRP.\r\n            If this is set to (false), all following fields should be\r\n            set to not applicable and should not be evaluated.')
lldpXHmRemGMRPStatus = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmRemGMRPStatus.setReference('internal')
if mibBuilder.loadTexts: lldpXHmRemGMRPStatus.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemGMRPStatus.setDescription('The truth value used to indicate whether GMRP is enabled on the\r\n            the given port associated with the remote system.\r\n            If this is set to (false), all following fields should be\r\n            set to not applicable and should not be evaluated.')
lldpXHmRemGMRPServiceReq = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 1, 1, 3), LldpXHmRemGMRPServiceReqSyntax()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmRemGMRPServiceReq.setReference('internal')
if mibBuilder.loadTexts: lldpXHmRemGMRPServiceReq.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemGMRPServiceReq.setDescription('Integer value, used to indicate which GMRP service requirement\r\n            is enabled on the the given port associated with the remote system.\r\n            ')
lldpXHmRemIGMPTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 2), )
if mibBuilder.loadTexts: lldpXHmRemIGMPTable.setReference('RFCs 1112, 2236, 3376 at www.rfc.net')
if mibBuilder.loadTexts: lldpXHmRemIGMPTable.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemIGMPTable.setDescription('This table contains one or more rows per Port and IGMP\r\n             information about each port of the remote system.\r\n             \r\n             IGMP is a protocol used for constraining IP multicast traffic\r\n             specified in IETF RFCs 1112, 2236(IGMPv2) and 3376(IGMPv3)')
lldpXHmRemIGMPEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 2, 1), ).setIndexNames((0, "LLDP-MIB", "lldpRemTimeMark"), (0, "LLDP-MIB", "lldpRemLocalPortNum"), (0, "LLDP-MIB", "lldpRemIndex"))
if mibBuilder.loadTexts: lldpXHmRemIGMPEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemIGMPEntry.setDescription('IGMP Information about a particular\r\n            port component.')
lldpXHmRemIGMPSupport = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmRemIGMPSupport.setReference('internal')
if mibBuilder.loadTexts: lldpXHmRemIGMPSupport.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemIGMPSupport.setDescription('The truth value used to indicate whether the given port\r\n            (associated with the remote system) supports IGMP.\r\n            If this is set to (false), all following fields should be\r\n            set to not applicable and should not be evaluated.')
lldpXHmRemIGMPStatus = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmRemIGMPStatus.setReference('internal')
if mibBuilder.loadTexts: lldpXHmRemIGMPStatus.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemIGMPStatus.setDescription('The truth value used to indicate whether IGMP is enabled on\r\n            the the given port associated with the remote system.\r\n            If this is set to (false), all following fields should be\r\n            set to not applicable and should not be evaluated.')
lldpXHmRemIGMPVersion = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 2, 1, 3), LldpXHmRemIGMPVersionSyntax()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmRemIGMPVersion.setReference('internal')
if mibBuilder.loadTexts: lldpXHmRemIGMPVersion.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemIGMPVersion.setDescription('This bitmap shows which IGMP version is configured on the remote device.')
lldpXHmRemPortSecTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 3), )
if mibBuilder.loadTexts: lldpXHmRemPortSecTable.setReference('IEEE Standard 802.1X - 2004')
if mibBuilder.loadTexts: lldpXHmRemPortSecTable.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemPortSecTable.setDescription('This table contains one or more rows per Port and \r\n            802.1X Port Security information about each port of\r\n            the remote system.\r\n            IEEE 802.1X Port Security is a standard, defining rules for\r\n            a port based network access control with a client/supplicant\r\n            requesting access to the network from an authenticator/RADIUS server')
lldpXHmRemPortSecEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 3, 1), ).setIndexNames((0, "LLDP-MIB", "lldpRemTimeMark"), (0, "LLDP-MIB", "lldpRemLocalPortNum"), (0, "LLDP-MIB", "lldpRemIndex"))
if mibBuilder.loadTexts: lldpXHmRemPortSecEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemPortSecEntry.setDescription('802.1X Port Security Information about a particular\r\n            port component.')
lldpXHmRemPortSecSupport = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 3, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmRemPortSecSupport.setReference('internal')
if mibBuilder.loadTexts: lldpXHmRemPortSecSupport.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemPortSecSupport.setDescription('The truth value used to indicate whether the given port\r\n            (associated with the remote system) supports 802.1X Port Security.\r\n            If this is set to (false), all following fields should be\r\n            set to not applicable and should not be evaluated.')
lldpXHmRemPortSecStatus = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmRemPortSecStatus.setReference('internal')
if mibBuilder.loadTexts: lldpXHmRemPortSecStatus.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemPortSecStatus.setDescription('The truth value used to indicate whether 802.1X Port Security\r\n            is enabled on the the given port associated with the remote system.\r\n            If this is set to (false), all following fields should be\r\n            set to not applicable and should not be evaluated.')
lldpXHmRemPortSecMode = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 3, 1, 3), LldpXHmRemPortSecModeSyntax()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmRemPortSecMode.setReference('internal')
if mibBuilder.loadTexts: lldpXHmRemPortSecMode.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemPortSecMode.setDescription('This Integer value contains informations about a remote ports 802.1X\r\n            configuration.')
lldpXHmRemPTPTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 4), )
if mibBuilder.loadTexts: lldpXHmRemPTPTable.setReference('IEEE 1588 - 2002 Precision Time Protocol')
if mibBuilder.loadTexts: lldpXHmRemPTPTable.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemPTPTable.setDescription('This table contains one or more rows per Port and PTP\r\n             information about the remote system.\r\n             \r\n             The Precision Time Protocol (PTP) is defined in IEEE Standard 1588\r\n             and describes a protocol for network (system) clock synchronization\r\n             with very high precision.')
lldpXHmRemPTPEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 4, 1), ).setIndexNames((0, "LLDP-MIB", "lldpRemTimeMark"), (0, "LLDP-MIB", "lldpRemLocalPortNum"), (0, "LLDP-MIB", "lldpRemIndex"))
if mibBuilder.loadTexts: lldpXHmRemPTPEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemPTPEntry.setDescription('Port and PTP Information about a particular\r\n            port component')
lldpXHmRemPTPSupport = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 4, 1, 1), LldpXHmRemPTPSupportSyntax()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmRemPTPSupport.setReference('internal')
if mibBuilder.loadTexts: lldpXHmRemPTPSupport.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemPTPSupport.setDescription('Shows which PTP versions are supported by the remote system, based on installed hardware')
lldpXHmRemPTPStatus = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 4, 1, 2), LldpXHmRemPTPStatusSyntax()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmRemPTPStatus.setReference('internal')
if mibBuilder.loadTexts: lldpXHmRemPTPStatus.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemPTPStatus.setDescription('Shows which PTP versions are enabled on the remote system')
lldpXHmRemPTPSyncInterval = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmRemPTPSyncInterval.setReference('internal')
if mibBuilder.loadTexts: lldpXHmRemPTPSyncInterval.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemPTPSyncInterval.setDescription('Shows the PTPv1 and PTPv2 Synchronization Interval.\r\n            If no PTP is available or configured, this value should be set to -128.')
lldpXHmRemPTPv2AnnounceInterval = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmRemPTPv2AnnounceInterval.setReference('internal')
if mibBuilder.loadTexts: lldpXHmRemPTPv2AnnounceInterval.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemPTPv2AnnounceInterval.setDescription('Shows the PTPv2 Announce Interval. If PTPv2 is not\r\n            configured or available, this should be set to -128.')
lldpXHmRemPTPv2DataTransfer = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 4, 1, 5), LldpXHmRemPTPv2DataTransferSyntax()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmRemPTPv2DataTransfer.setReference('internal')
if mibBuilder.loadTexts: lldpXHmRemPTPv2DataTransfer.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemPTPv2DataTransfer.setDescription('This field is only viable if PTPv2 is enabled. It shows the data transfer\r\n            type configured on the remote port and device.')
lldpXHmRemPTPv2DelayMechanism = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 4, 1, 6), LldpXHmRemPTPv2DelayMechanismSyntax()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmRemPTPv2DelayMechanism.setReference('internal')
if mibBuilder.loadTexts: lldpXHmRemPTPv2DelayMechanism.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemPTPv2DelayMechanism.setDescription('Shows the enabled PTPv2 delay mechanism')
lldpXHmRemPTPClockValues = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 4, 1, 7), Bits().clone(namedValues=NamedValues(("slave", 0), ("master", 1), ("transparent", 2), ("boundary", 3), ("grandmaster", 4), ("multidomain", 5), ("simplemode", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmRemPTPClockValues.setReference('internal')
if mibBuilder.loadTexts: lldpXHmRemPTPClockValues.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemPTPClockValues.setDescription('Shows, which clock type(s) are configured on a specific remote port\r\n            and/or device:\r\n            Bit (0) set to 1 indicates a slave clock\r\n            Bit (1) set to 1 indicates a master clock\r\n            Bit (2) set to 1 indicates a transparent clock\r\n            Bit (3) set to 1 indicates a boundary clock\r\n            Bit (4) set to 1 indicates a grandmaster clock\r\n            Bit (5) set to 1 indicates a clock in multi domain mode\r\n            Bit (6) set to 1 indicates a clock in simple mode\r\n            \r\n            If no PTP is configured, all bits should be set to 0.')
lldpXHmRemPTPv2SubdomainNumber = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmRemPTPv2SubdomainNumber.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemPTPv2SubdomainNumber.setDescription('Shows the PTPv2 subdomain number configured on the remote device.\r\n            In case PTPv1 is configured, this value is of no relevance and will not be evaluated.')
lldpXHmRemPTPv1SubdomainName = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 32867, 1, 3, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXHmRemPTPv1SubdomainName.setStatus('current')
if mibBuilder.loadTexts: lldpXHmRemPTPv1SubdomainName.setDescription('This Octet String contains the PTPv1 subdomain name, an ASCII String\r\n            with a maximum of 16 characters length, configured on the remote device.\r\n            If PTPv2 is configured, this field should be set to 0.')
mibBuilder.exportSymbols("LLDP-EXT-HM-MIB", lldpXHmLocGMRPEntry=lldpXHmLocGMRPEntry, lldpXHmLocIGMPTable=lldpXHmLocIGMPTable, lldpXHmRemPTPSyncInterval=lldpXHmRemPTPSyncInterval, lldpXHmLocPortSecTable=lldpXHmLocPortSecTable, lldpXHmLocGMRPSupport=lldpXHmLocGMRPSupport, lldpXHmLocPTPSyncInterval=lldpXHmLocPTPSyncInterval, lldpXHmRemPortSecSupport=lldpXHmRemPortSecSupport, PYSNMP_MODULE_ID=lldpXHmMIB, lldpXHmLocPTPv2DataTransfer=lldpXHmLocPTPv2DataTransfer, lldpXHmConfigIGMPEntry=lldpXHmConfigIGMPEntry, lldpXHmLocPTPv2AnnounceInterval=lldpXHmLocPTPv2AnnounceInterval, lldpXHmRemIGMPTable=lldpXHmRemIGMPTable, lldpXHmConfigPTPEntry=lldpXHmConfigPTPEntry, lldpXHmLocPortSecSupport=lldpXHmLocPortSecSupport, lldpXHmConfigIGMPTable=lldpXHmConfigIGMPTable, LldpXHmLocGMRPServiceReqSyntax=LldpXHmLocGMRPServiceReqSyntax, lldpXHmLocPTPTable=lldpXHmLocPTPTable, lldpXHmLocIGMPSupport=lldpXHmLocIGMPSupport, LldpXHmLocPortSecModeSyntax=LldpXHmLocPortSecModeSyntax, lldpXHmRemPTPv2SubdomainNumber=lldpXHmRemPTPv2SubdomainNumber, lldpXHmRemPTPv2AnnounceInterval=lldpXHmRemPTPv2AnnounceInterval, lldpXHmRemPTPv2DataTransfer=lldpXHmRemPTPv2DataTransfer, lldpXHmLocPTPv2DelayMechanism=lldpXHmLocPTPv2DelayMechanism, lldpXHmRemIGMPEntry=lldpXHmRemIGMPEntry, lldpXHmConfigPortSecEntry=lldpXHmConfigPortSecEntry, lldpXHmRemPortSecEntry=lldpXHmRemPortSecEntry, lldpXHmConfigPortSecTable=lldpXHmConfigPortSecTable, lldpXHmLocPortSecMode=lldpXHmLocPortSecMode, LldpXHmLocIGMPVersionSyntax=LldpXHmLocIGMPVersionSyntax, lldpXHmRemGMRPSupport=lldpXHmRemGMRPSupport, lldpXHmLocIGMPVersion=lldpXHmLocIGMPVersion, lldpXHmConfigPTPTable=lldpXHmConfigPTPTable, lldpXHmRemGMRPEntry=lldpXHmRemGMRPEntry, lldpXHmRemPortSecStatus=lldpXHmRemPortSecStatus, lldpXHmLocGMRPTable=lldpXHmLocGMRPTable, lldpXHmConfigGMRPTable=lldpXHmConfigGMRPTable, lldpXHmConfigIGMPTxEnable=lldpXHmConfigIGMPTxEnable, lldpXHmRemPTPv1SubdomainName=lldpXHmRemPTPv1SubdomainName, lldpXHmRemPTPStatus=lldpXHmRemPTPStatus, lldpXHmLocPTPv1SubdomainName=lldpXHmLocPTPv1SubdomainName, lldpXHmRemPTPEntry=lldpXHmRemPTPEntry, lldpXHmRemPortSecTable=lldpXHmRemPortSecTable, lldpXHmRemIGMPStatus=lldpXHmRemIGMPStatus, lldpXHmLocPTPv2SubdomainNumber=lldpXHmLocPTPv2SubdomainNumber, lldpXHmRemPortSecMode=lldpXHmRemPortSecMode, LldpXHmLocPTPv2DataTransferSyntax=LldpXHmLocPTPv2DataTransferSyntax, LldpXHmRemPTPStatusSyntax=LldpXHmRemPTPStatusSyntax, lldpXHmLocGMRPServiceReq=lldpXHmLocGMRPServiceReq, lldpXHmConfigPTPTxEnable=lldpXHmConfigPTPTxEnable, lldpXHmRemPTPTable=lldpXHmRemPTPTable, lldpXHmLocGMRPStatus=lldpXHmLocGMRPStatus, lldpXHmRemIGMPVersion=lldpXHmRemIGMPVersion, lldpXHmLocPTPClockValues=lldpXHmLocPTPClockValues, lldpXHmRemPTPv2DelayMechanism=lldpXHmRemPTPv2DelayMechanism, lldpXHmLocPTPStatus=lldpXHmLocPTPStatus, lldpXHmConfig=lldpXHmConfig, lldpXHmRemGMRPServiceReq=lldpXHmRemGMRPServiceReq, LldpXHmRemPTPSupportSyntax=LldpXHmRemPTPSupportSyntax, lldpXHmLocPortSecEntry=lldpXHmLocPortSecEntry, lldpXHmRemPTPClockValues=lldpXHmRemPTPClockValues, LldpXHmLocPTPv2DelayMechanismSyntax=LldpXHmLocPTPv2DelayMechanismSyntax, LldpXHmRemPortSecModeSyntax=LldpXHmRemPortSecModeSyntax, lldpXHmConfigPortSecTxEnable=lldpXHmConfigPortSecTxEnable, lldpXHmLocIGMPEntry=lldpXHmLocIGMPEntry, LldpXHmRemGMRPServiceReqSyntax=LldpXHmRemGMRPServiceReqSyntax, lldpXHmRemoteData=lldpXHmRemoteData, lldpXHmRemGMRPTable=lldpXHmRemGMRPTable, lldpXHmLocalData=lldpXHmLocalData, lldpXHmConfigGMRPEntry=lldpXHmConfigGMRPEntry, lldpXHmObjects=lldpXHmObjects, lldpXHmRemPTPSupport=lldpXHmRemPTPSupport, LldpXHmRemPTPv2DelayMechanismSyntax=LldpXHmRemPTPv2DelayMechanismSyntax, lldpXHmMIB=lldpXHmMIB, LldpXHmRemIGMPVersionSyntax=LldpXHmRemIGMPVersionSyntax, lldpXHmLocPTPSupport=lldpXHmLocPTPSupport, lldpXHmLocIGMPStatus=lldpXHmLocIGMPStatus, LldpXHmLocPTPStatusSyntax=LldpXHmLocPTPStatusSyntax, LldpXHmRemPTPv2DataTransferSyntax=LldpXHmRemPTPv2DataTransferSyntax, lldpXHmLocPTPEntry=lldpXHmLocPTPEntry, LldpXHmLocPTPSupportSyntax=LldpXHmLocPTPSupportSyntax, lldpXHmLocPortSecStatus=lldpXHmLocPortSecStatus, lldpXHmRemIGMPSupport=lldpXHmRemIGMPSupport, lldpXHmRemGMRPStatus=lldpXHmRemGMRPStatus, lldpXHmConfigGMRPTxEnable=lldpXHmConfigGMRPTxEnable)
