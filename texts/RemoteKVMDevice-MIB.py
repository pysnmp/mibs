#
# PySNMP MIB module RemoteKVMDevice-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/raritan/RemoteKVMDevice-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 11:20:35 2024
# On host fv-az525-771 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Gauge32, ObjectIdentity, ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, Counter32, Integer32, enterprises, IpAddress, Unsigned32, MibIdentifier, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ObjectIdentity", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "Counter32", "Integer32", "enterprises", "IpAddress", "Unsigned32", "MibIdentifier", "Bits", "Counter64")
TextualConvention, DisplayString, DateAndTime, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime", "TruthValue")
raritan = ModuleIdentity((1, 3, 6, 1, 4, 1, 13742))
raritan.setRevisions(('2016-10-13 12:00', '2014-11-06 12:00', '2013-11-01 12:00', '2011-12-20 12:00', '2011-07-08 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: raritan.setRevisionsDescriptions(('Version updated for added get', 'Version updated for added support for SX G2', 'Version updated for added support for KX G3', 'Version updated for product release 2.5.0.  Add support for Disconnect User - Force User Off', 'Version updated for product release 2.4.5.',))
if mibBuilder.loadTexts: raritan.setLastUpdated('201610131200Z')
if mibBuilder.loadTexts: raritan.setOrganization('Raritan Inc.')
if mibBuilder.loadTexts: raritan.setContactInfo(' Technical Support \n   Raritan Inc.\n   400 Cottontail Lane\n   Somerset, New Jersey, 08873\n   E-mail: support@raritan.com')
if mibBuilder.loadTexts: raritan.setDescription("The MIB module representing Raritan Computers'\n        implementation of enterprise specific MIBs\n        for KX products.")
remoteKVMDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 3))
remoteKVMDeviceNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 3, 0))
remoteKVMDeviceGet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 3, 1))
rcpObjectName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rcpObjectName.setStatus('current')
if mibBuilder.loadTexts: rcpObjectName.setDescription('The model type of the device')
rcpObjectInstance = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rcpObjectInstance.setStatus('current')
if mibBuilder.loadTexts: rcpObjectInstance.setDescription('The device name')
userName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: userName.setStatus('current')
if mibBuilder.loadTexts: userName.setDescription('User Name')
targetUser = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: targetUser.setStatus('current')
if mibBuilder.loadTexts: targetUser.setDescription('The user record being operated on')
groupName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 6), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: groupName.setStatus('current')
if mibBuilder.loadTexts: groupName.setDescription('The group record being operated on')
rcpIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rcpIPAddress.setStatus('current')
if mibBuilder.loadTexts: rcpIPAddress.setDescription('The IP address')
deviceName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 8), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: deviceName.setStatus('current')
if mibBuilder.loadTexts: deviceName.setDescription('Device name')
portStatus = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 9), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: portStatus.setStatus('current')
if mibBuilder.loadTexts: portStatus.setDescription('Port status and availability:\ninactive - Target cannot be detected. (UI Status:down, Availability:idle)\navailable - Target can be accessed. (UI Status:up, Availability:idle)\nconnected - A user is connected but capacity is available. (UI Status:up/down, Availability:connected)\nbusy - Reached maximum access capacity. (UI Status:up/down, Availability:busy)')
portName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: portName.setStatus('current')
if mibBuilder.loadTexts: portName.setDescription('Port Name')
clusterID = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 11), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clusterID.setStatus('current')
if mibBuilder.loadTexts: clusterID.setDescription('The cluster ID of the CommandCenter managing this device')
ipPort = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 12), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipPort.setStatus('current')
if mibBuilder.loadTexts: ipPort.setDescription('The IP Port')
resetType = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 13), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: resetType.setStatus('current')
if mibBuilder.loadTexts: resetType.setDescription('How the device reset was performed')
interface = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lan", 1), ("modem", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: interface.setStatus('current')
if mibBuilder.loadTexts: interface.setDescription('Interface type')
ethernetInterface = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("lan0", 0), ("lan1", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ethernetInterface.setStatus('current')
if mibBuilder.loadTexts: ethernetInterface.setDescription('Ethernet Interface')
backupRestoreAction = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("backup", 0), ("restore", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: backupRestoreAction.setStatus('current')
if mibBuilder.loadTexts: backupRestoreAction.setDescription('Backup Restore Action.')
imageType = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 17), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: imageType.setStatus('current')
if mibBuilder.loadTexts: imageType.setDescription('Image type to update.')
imageVersion = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 18), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: imageVersion.setStatus('current')
if mibBuilder.loadTexts: imageVersion.setDescription('The version of the Upgrade image')
status = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 19), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: status.setStatus('current')
if mibBuilder.loadTexts: status.setDescription('The success status of an operation')
fileVersion = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 20), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fileVersion.setStatus('current')
if mibBuilder.loadTexts: fileVersion.setDescription('The file version')
fileType = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 21), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fileType.setStatus('current')
if mibBuilder.loadTexts: fileType.setDescription('The file type')
outletName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 22), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: outletName.setStatus('current')
if mibBuilder.loadTexts: outletName.setDescription('Name of the power outlet.')
portNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 23), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: portNumber.setStatus('current')
if mibBuilder.loadTexts: portNumber.setDescription('Port number')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 24), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
if mibBuilder.loadTexts: serialNumber.setDescription('Serial Number of the Device or CIM')
cimName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 25), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cimName.setStatus('current')
if mibBuilder.loadTexts: cimName.setDescription('Name of the cim.')
count = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 26), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: count.setStatus('current')
if mibBuilder.loadTexts: count.setDescription('A generic counter')
restoredLanPort = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 27), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: restoredLanPort.setStatus('current')
if mibBuilder.loadTexts: restoredLanPort.setDescription('Lan port restored after the failure')
remoteIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 28), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: remoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: remoteIpAddress.setDescription('The IP address of a client')
oldIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 29), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oldIpAddress.setStatus('current')
if mibBuilder.loadTexts: oldIpAddress.setDescription('The IP address')
newIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 30), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: newIpAddress.setStatus('current')
if mibBuilder.loadTexts: newIpAddress.setDescription('The IP address')
newNetmask = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 31), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: newNetmask.setStatus('current')
if mibBuilder.loadTexts: newNetmask.setDescription('The net mask ')
oldNetmask = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 32), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oldNetmask.setStatus('current')
if mibBuilder.loadTexts: oldNetmask.setDescription('The net mask')
oldGateway = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 33), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oldGateway.setStatus('current')
if mibBuilder.loadTexts: oldGateway.setDescription('The Gateway ip')
newGateway = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 34), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: newGateway.setStatus('current')
if mibBuilder.loadTexts: newGateway.setDescription('The Gateway ip')
sxAlertString = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 38), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sxAlertString.setStatus('current')
if mibBuilder.loadTexts: sxAlertString.setDescription(' Serial Alert string on a port. ')
pduName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 39), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pduName.setStatus('current')
if mibBuilder.loadTexts: pduName.setDescription(' Name of the connected PDU ')
changeEventText = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeEventText.setStatus('current')
if mibBuilder.loadTexts: changeEventText.setDescription("A configurable parameter was changed.  The\ndescription text identifies the object changed and its new value.  The format\nof the text is 'IPv 4 Parameter : parameter = new value, . IPv6 Parameter :\nparameter = new value, ...")
certificateAuthorityName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 41), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: certificateAuthorityName.setStatus('current')
if mibBuilder.loadTexts: certificateAuthorityName.setDescription('Certificate Authority Name')
sysDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 42), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sysDateAndTime.setStatus('current')
if mibBuilder.loadTexts: sysDateAndTime.setDescription('The system date and time.')
fipsModeStatus = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 43), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fipsModeStatus.setStatus('current')
if mibBuilder.loadTexts: fipsModeStatus.setDescription('FIPS Mode status (0-Disabled, 1-Enabled)')
bannerChanges = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("modified", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bannerChanges.setStatus('current')
if mibBuilder.loadTexts: bannerChanges.setDescription('KX2 Banner Changes ')
bannerAction = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("declined", 0), ("accepted", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bannerAction.setStatus('current')
if mibBuilder.loadTexts: bannerAction.setDescription('User Acceptance / Rejection of Initial Banner Consent')
portList = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 46), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: portList.setStatus('current')
if mibBuilder.loadTexts: portList.setDescription('Port List')
fileName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 47), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fileName.setStatus('current')
if mibBuilder.loadTexts: fileName.setDescription('Name of the file used in the operation')
systemUsageMemory = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUsageMemory.setStatus('current')
if mibBuilder.loadTexts: systemUsageMemory.setDescription('Percent current memory usage')
systemUsageCPU = MibScalar((1, 3, 6, 1, 4, 1, 13742, 3, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUsageCPU.setStatus('current')
if mibBuilder.loadTexts: systemUsageCPU.setDescription('Percent processor usage')
systemPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 3, 1, 3), )
if mibBuilder.loadTexts: systemPowerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: systemPowerSupplyTable.setDescription('Status of all power supplies')
systemPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 3, 1, 3, 1), ).setIndexNames((0, "RemoteKVMDevice-MIB", "systemPowerSupplyNumber"))
if mibBuilder.loadTexts: systemPowerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: systemPowerSupplyEntry.setDescription('Power supply data')
systemPowerSupplyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: systemPowerSupplyNumber.setStatus('current')
if mibBuilder.loadTexts: systemPowerSupplyNumber.setDescription('System power supply identifier')
systemPowerSupplyPowerOn = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 3, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemPowerSupplyPowerOn.setStatus('current')
if mibBuilder.loadTexts: systemPowerSupplyPowerOn.setDescription('Is the system power supply on (true)')
portDataTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 3, 1, 4), )
if mibBuilder.loadTexts: portDataTable.setStatus('current')
if mibBuilder.loadTexts: portDataTable.setDescription('Retrieve data for all ports')
portDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 3, 1, 4, 1), ).setIndexNames((0, "RemoteKVMDevice-MIB", "portDataIndex"))
if mibBuilder.loadTexts: portDataEntry.setStatus('current')
if mibBuilder.loadTexts: portDataEntry.setDescription('Port identification and current information')
portDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: portDataIndex.setStatus('current')
if mibBuilder.loadTexts: portDataIndex.setDescription('table index')
portDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 3, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDataNumber.setStatus('current')
if mibBuilder.loadTexts: portDataNumber.setDescription('Physical port number')
portDataName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 3, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDataName.setStatus('current')
if mibBuilder.loadTexts: portDataName.setDescription('User assigned port name')
portDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 3, 1, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDataType.setStatus('current')
if mibBuilder.loadTexts: portDataType.setDescription('Port connection type')
portDataStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 3, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("available", 2), ("connected", 3), ("busy", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDataStatus.setStatus('current')
if mibBuilder.loadTexts: portDataStatus.setDescription('Port status and availability:\ninactive - Target cannot be detected. (UI Status:down, Availability:idle)\navailable - Target can be accessed. (UI Status:up, Availability:idle)\nconnected - A user is connected but capacity is available. (UI Status:up/down, Availability:connected)\nbusy - Reached maximum access capacity. (UI Status:up/down, Availability:busy)')
rebootStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 1)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"))
if mibBuilder.loadTexts: rebootStarted.setStatus('current')
if mibBuilder.loadTexts: rebootStarted.setDescription('The reboot process has started')
rebootCompleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 2)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"))
if mibBuilder.loadTexts: rebootCompleted.setStatus('current')
if mibBuilder.loadTexts: rebootCompleted.setDescription('The reboot process is complete')
userLogin = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 3)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "rcpIPAddress"))
if mibBuilder.loadTexts: userLogin.setStatus('current')
if mibBuilder.loadTexts: userLogin.setDescription('A user logged in')
userLogout = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 4)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "rcpIPAddress"))
if mibBuilder.loadTexts: userLogout.setStatus('current')
if mibBuilder.loadTexts: userLogout.setDescription('A user logged out')
userAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 5)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "rcpIPAddress"))
if mibBuilder.loadTexts: userAuthenticationFailure.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFailure.setDescription('A user authentication attempt failed')
portConnect = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 6)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "portName"))
if mibBuilder.loadTexts: portConnect.setStatus('current')
if mibBuilder.loadTexts: portConnect.setDescription('A user connected to a port')
portDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 7)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "portName"))
if mibBuilder.loadTexts: portDisconnect.setStatus('current')
if mibBuilder.loadTexts: portDisconnect.setDescription('A user disconnected from a port')
userSessionTimeout = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 8)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "rcpIPAddress"))
if mibBuilder.loadTexts: userSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: userSessionTimeout.setDescription('A user timed out from the device')
userConnectionLost = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 9)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "rcpIPAddress"))
if mibBuilder.loadTexts: userConnectionLost.setStatus('current')
if mibBuilder.loadTexts: userConnectionLost.setDescription('A user lost connection to the device')
portStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 10)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "deviceName"), ("RemoteKVMDevice-MIB", "portName"), ("RemoteKVMDevice-MIB", "portStatus"))
if mibBuilder.loadTexts: portStatusChange.setStatus('current')
if mibBuilder.loadTexts: portStatusChange.setDescription('A port status has changed')
userAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 11)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "targetUser"))
if mibBuilder.loadTexts: userAdded.setStatus('current')
if mibBuilder.loadTexts: userAdded.setDescription('A user was added to the system')
userModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 12)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "targetUser"))
if mibBuilder.loadTexts: userModified.setStatus('current')
if mibBuilder.loadTexts: userModified.setDescription('A user account was modified')
userDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 13)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "targetUser"))
if mibBuilder.loadTexts: userDeleted.setStatus('current')
if mibBuilder.loadTexts: userDeleted.setDescription('A user was deleted from the system')
groupAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 14)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "groupName"))
if mibBuilder.loadTexts: groupAdded.setStatus('current')
if mibBuilder.loadTexts: groupAdded.setDescription('A group was added to the system')
groupModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 15)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "groupName"))
if mibBuilder.loadTexts: groupModified.setStatus('current')
if mibBuilder.loadTexts: groupModified.setDescription('A group was modified')
groupDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 16)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "groupName"))
if mibBuilder.loadTexts: groupDeleted.setStatus('current')
if mibBuilder.loadTexts: groupDeleted.setDescription('A group was deleted from the system')
startCCManagement = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 17)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "rcpIPAddress"))
if mibBuilder.loadTexts: startCCManagement.setStatus('current')
if mibBuilder.loadTexts: startCCManagement.setDescription('The device was put under CommandCenter management')
stopCCManagement = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 18)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "rcpIPAddress"))
if mibBuilder.loadTexts: stopCCManagement.setStatus('current')
if mibBuilder.loadTexts: stopCCManagement.setDescription('The device was removed from CommandCenter management')
factoryReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 19)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "rcpIPAddress"))
if mibBuilder.loadTexts: factoryReset.setStatus('current')
if mibBuilder.loadTexts: factoryReset.setDescription('The device was reset to factory default setting')
deviceUpdateStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 20)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "rcpIPAddress"), ("RemoteKVMDevice-MIB", "imageVersion"))
if mibBuilder.loadTexts: deviceUpdateStarted.setStatus('current')
if mibBuilder.loadTexts: deviceUpdateStarted.setDescription('The device update has started')
deviceUpdateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 21)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "rcpIPAddress"), ("RemoteKVMDevice-MIB", "imageVersion"), ("RemoteKVMDevice-MIB", "status"))
if mibBuilder.loadTexts: deviceUpdateCompleted.setStatus('current')
if mibBuilder.loadTexts: deviceUpdateCompleted.setDescription('The device update is complete')
configBackup = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 22)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "rcpIPAddress"), ("RemoteKVMDevice-MIB", "fileType"), ("RemoteKVMDevice-MIB", "fileVersion"), ("RemoteKVMDevice-MIB", "status"))
if mibBuilder.loadTexts: configBackup.setStatus('current')
if mibBuilder.loadTexts: configBackup.setDescription('The device configuration has been backed up')
configRestore = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 23)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "rcpIPAddress"), ("RemoteKVMDevice-MIB", "fileType"), ("RemoteKVMDevice-MIB", "fileVersion"), ("RemoteKVMDevice-MIB", "status"))
if mibBuilder.loadTexts: configRestore.setStatus('current')
if mibBuilder.loadTexts: configRestore.setDescription('The device configuration has been restored')
userPasswordChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 24)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "targetUser"), ("RemoteKVMDevice-MIB", "rcpIPAddress"))
if mibBuilder.loadTexts: userPasswordChanged.setStatus('current')
if mibBuilder.loadTexts: userPasswordChanged.setDescription('A user password was changed')
powerNotification = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 25)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "outletName"), ("RemoteKVMDevice-MIB", "status"))
if mibBuilder.loadTexts: powerNotification.setStatus('current')
if mibBuilder.loadTexts: powerNotification.setDescription('The power outlet status (1-Active or 0-Inactive) notification ')
networkFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 26)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "ethernetInterface"))
if mibBuilder.loadTexts: networkFailure.setStatus('current')
if mibBuilder.loadTexts: networkFailure.setDescription('A network failure was detected on an ethernet port')
networkParameterChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 27)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "remoteIpAddress"), ("RemoteKVMDevice-MIB", "oldIpAddress"), ("RemoteKVMDevice-MIB", "newIpAddress"), ("RemoteKVMDevice-MIB", "oldNetmask"), ("RemoteKVMDevice-MIB", "newNetmask"), ("RemoteKVMDevice-MIB", "newGateway"), ("RemoteKVMDevice-MIB", "oldGateway"))
if mibBuilder.loadTexts: networkParameterChanged.setStatus('current')
if mibBuilder.loadTexts: networkParameterChanged.setDescription('A network parameter change was detected')
vmImageConnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 28)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "rcpIPAddress"))
if mibBuilder.loadTexts: vmImageConnected.setStatus('current')
if mibBuilder.loadTexts: vmImageConnected.setDescription('A Virtual Media Connected')
vmImageDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 29)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "rcpIPAddress"))
if mibBuilder.loadTexts: vmImageDisconnected.setStatus('current')
if mibBuilder.loadTexts: vmImageDisconnected.setDescription('A Virtual Media disconnected')
cimUpdateStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 30)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"))
if mibBuilder.loadTexts: cimUpdateStarted.setStatus('current')
if mibBuilder.loadTexts: cimUpdateStarted.setDescription('CIM update started')
cimUpdateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 31)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"))
if mibBuilder.loadTexts: cimUpdateCompleted.setStatus('current')
if mibBuilder.loadTexts: cimUpdateCompleted.setDescription('CIM update completed')
cimConnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 32)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "cimName"), ("RemoteKVMDevice-MIB", "serialNumber"), ("RemoteKVMDevice-MIB", "portNumber"))
if mibBuilder.loadTexts: cimConnected.setStatus('current')
if mibBuilder.loadTexts: cimConnected.setDescription('CIM Connected')
cimDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 33)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "cimName"), ("RemoteKVMDevice-MIB", "serialNumber"), ("RemoteKVMDevice-MIB", "portNumber"))
if mibBuilder.loadTexts: cimDisconnected.setStatus('current')
if mibBuilder.loadTexts: cimDisconnected.setDescription('CIM Disconnected')
powerOutletNotification = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 34)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "outletName"), ("RemoteKVMDevice-MIB", "status"))
if mibBuilder.loadTexts: powerOutletNotification.setStatus('current')
if mibBuilder.loadTexts: powerOutletNotification.setDescription('Powerstip-device outlet status Notification')
portConnectionDenied = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 35)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "portName"))
if mibBuilder.loadTexts: portConnectionDenied.setStatus('current')
if mibBuilder.loadTexts: portConnectionDenied.setDescription('A connection to the target port is denied')
firmwareFileDiscarded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 36)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"))
if mibBuilder.loadTexts: firmwareFileDiscarded.setStatus('current')
if mibBuilder.loadTexts: firmwareFileDiscarded.setDescription('A firmaware file discarded ')
firmwareUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 37)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"))
if mibBuilder.loadTexts: firmwareUpdateFailed.setStatus('current')
if mibBuilder.loadTexts: firmwareUpdateFailed.setDescription('A firmware update failed ')
firmwareValidationFailed = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 38)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"))
if mibBuilder.loadTexts: firmwareValidationFailed.setStatus('current')
if mibBuilder.loadTexts: firmwareValidationFailed.setDescription('A firmware validation failed ')
securityViolation = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 39)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "rcpIPAddress"))
if mibBuilder.loadTexts: securityViolation.setStatus('current')
if mibBuilder.loadTexts: securityViolation.setDescription('Security violation.')
deviceUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 40)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"))
if mibBuilder.loadTexts: deviceUpdateFailed.setStatus('current')
if mibBuilder.loadTexts: deviceUpdateFailed.setDescription('Device update has failed.')
passwordSettingsChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 41)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "status"))
if mibBuilder.loadTexts: passwordSettingsChanged.setStatus('current')
if mibBuilder.loadTexts: passwordSettingsChanged.setDescription(' Strong password settings changed ')
ethernetFailover = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 42)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "restoredLanPort"))
if mibBuilder.loadTexts: ethernetFailover.setStatus('current')
if mibBuilder.loadTexts: ethernetFailover.setDescription('A ethernet failover was detected and restored on new ethernet interface')
ipConflictDetected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 43)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "rcpIPAddress"), ("RemoteKVMDevice-MIB", "count"))
if mibBuilder.loadTexts: ipConflictDetected.setStatus('current')
if mibBuilder.loadTexts: ipConflictDetected.setDescription('IP address conflict is detected.')
ipConflictResolved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 44)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "rcpIPAddress"))
if mibBuilder.loadTexts: ipConflictResolved.setStatus('current')
if mibBuilder.loadTexts: ipConflictResolved.setDescription('IP address conflict is resolved.')
sxPortAlert = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 45)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "portNumber"), ("RemoteKVMDevice-MIB", "sxAlertString"))
if mibBuilder.loadTexts: sxPortAlert.setStatus('current')
if mibBuilder.loadTexts: sxPortAlert.setDescription('Port keyword detected.')
pduConnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 46)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "portNumber"), ("RemoteKVMDevice-MIB", "pduName"))
if mibBuilder.loadTexts: pduConnected.setStatus('current')
if mibBuilder.loadTexts: pduConnected.setDescription(' A PDU is connected to the device directly through power port')
pduDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 47)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "portNumber"), ("RemoteKVMDevice-MIB", "pduName"))
if mibBuilder.loadTexts: pduDisconnected.setStatus('current')
if mibBuilder.loadTexts: pduDisconnected.setDescription(' A PDU is disconnected from a power port')
networkParameterChangedv2 = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 48)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "remoteIpAddress"), ("RemoteKVMDevice-MIB", "changeEventText"))
if mibBuilder.loadTexts: networkParameterChangedv2.setStatus('current')
if mibBuilder.loadTexts: networkParameterChangedv2.setDescription('A network parameter change was detected')
portConnectv2 = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 49)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "portName"), ("RemoteKVMDevice-MIB", "rcpIPAddress"))
if mibBuilder.loadTexts: portConnectv2.setStatus('current')
if mibBuilder.loadTexts: portConnectv2.setDescription('A user connected to a port')
portDisconnectv2 = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 50)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "portName"), ("RemoteKVMDevice-MIB", "rcpIPAddress"))
if mibBuilder.loadTexts: portDisconnectv2.setStatus('current')
if mibBuilder.loadTexts: portDisconnectv2.setDescription('A user disconnected from a port')
userForcedLogout = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 51)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "rcpIPAddress"))
if mibBuilder.loadTexts: userForcedLogout.setStatus('current')
if mibBuilder.loadTexts: userForcedLogout.setDescription('A user was forcibly logged out by Admin')
userUploadedCertificate = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 52)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "rcpIPAddress"), ("RemoteKVMDevice-MIB", "certificateAuthorityName"))
if mibBuilder.loadTexts: userUploadedCertificate.setStatus('current')
if mibBuilder.loadTexts: userUploadedCertificate.setDescription('A user uploaded a SSL Certificate.')
bladeChassisCommError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 53)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "deviceName"), ("RemoteKVMDevice-MIB", "portNumber"), ("RemoteKVMDevice-MIB", "portName"))
if mibBuilder.loadTexts: bladeChassisCommError.setStatus('current')
if mibBuilder.loadTexts: bladeChassisCommError.setDescription('A communications error with blade chassis device connected to this port was detected.')
setDateTime = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 54)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "deviceName"), ("RemoteKVMDevice-MIB", "sysDateAndTime"))
if mibBuilder.loadTexts: setDateTime.setStatus('current')
if mibBuilder.loadTexts: setDateTime.setDescription('The device time and date have been set.')
setFIPSMode = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 55)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "deviceName"), ("RemoteKVMDevice-MIB", "fipsModeStatus"))
if mibBuilder.loadTexts: setFIPSMode.setStatus('current')
if mibBuilder.loadTexts: setFIPSMode.setDescription('FIPS Mode status has been changed on the device.')
securityBannerChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 56)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "rcpIPAddress"), ("RemoteKVMDevice-MIB", "bannerChanges"))
if mibBuilder.loadTexts: securityBannerChanged.setStatus('current')
if mibBuilder.loadTexts: securityBannerChanged.setDescription('Security Banner has changed ')
securityBannerAction = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 57)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "rcpIPAddress"), ("RemoteKVMDevice-MIB", "bannerAction"))
if mibBuilder.loadTexts: securityBannerAction.setStatus('current')
if mibBuilder.loadTexts: securityBannerAction.setDescription('User Acceptance/Rejection of Security Banner ')
scanStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 58)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "portList"), ("RemoteKVMDevice-MIB", "rcpIPAddress"))
if mibBuilder.loadTexts: scanStarted.setStatus('current')
if mibBuilder.loadTexts: scanStarted.setDescription('A user started a port scan')
scanStopped = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 59)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "portList"), ("RemoteKVMDevice-MIB", "rcpIPAddress"))
if mibBuilder.loadTexts: scanStopped.setStatus('current')
if mibBuilder.loadTexts: scanStopped.setDescription('A user stopped a port scan')
userDisconnectedFromPort = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 60)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "targetUser"), ("RemoteKVMDevice-MIB", "portName"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "rcpIPAddress"))
if mibBuilder.loadTexts: userDisconnectedFromPort.setStatus('current')
if mibBuilder.loadTexts: userDisconnectedFromPort.setDescription('A user was forcibly disconnected from a port by Admin')
automaticScriptConfiguration = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 61)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "rcpIPAddress"), ("RemoteKVMDevice-MIB", "fileName"), ("RemoteKVMDevice-MIB", "status"))
if mibBuilder.loadTexts: automaticScriptConfiguration.setStatus('current')
if mibBuilder.loadTexts: automaticScriptConfiguration.setDescription('The system attempted to run a script downloaded via TFTP')
dsamUpdateStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 62)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"))
if mibBuilder.loadTexts: dsamUpdateStarted.setStatus('current')
if mibBuilder.loadTexts: dsamUpdateStarted.setDescription('DSAM update started')
dsamUpdateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 63)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"))
if mibBuilder.loadTexts: dsamUpdateCompleted.setStatus('current')
if mibBuilder.loadTexts: dsamUpdateCompleted.setDescription('DSAM update completed')
dsamConnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 64)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "serialNumber"))
if mibBuilder.loadTexts: dsamConnected.setStatus('current')
if mibBuilder.loadTexts: dsamConnected.setDescription('DSAM Connected')
dsamDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 3, 0, 65)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "serialNumber"))
if mibBuilder.loadTexts: dsamDisconnected.setStatus('current')
if mibBuilder.loadTexts: dsamDisconnected.setDescription('DSAM Disconnected')
raritanMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 9))
raritanMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 9, 1))
raritanMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 9, 2))
raritanMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 9, 1, 1)).setObjects(("RemoteKVMDevice-MIB", "raritanMibBasicGroup"), ("RemoteKVMDevice-MIB", "raritanMibTrapGroup"), ("RemoteKVMDevice-MIB", "raritanMibGetGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    raritanMibCompliance = raritanMibCompliance.setStatus('current')
if mibBuilder.loadTexts: raritanMibCompliance.setDescription('Compliance statement for the private Raritan MIB.')
raritanMibBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 9, 2, 1)).setObjects(("RemoteKVMDevice-MIB", "rcpObjectName"), ("RemoteKVMDevice-MIB", "rcpObjectInstance"), ("RemoteKVMDevice-MIB", "userName"), ("RemoteKVMDevice-MIB", "targetUser"), ("RemoteKVMDevice-MIB", "groupName"), ("RemoteKVMDevice-MIB", "rcpIPAddress"), ("RemoteKVMDevice-MIB", "deviceName"), ("RemoteKVMDevice-MIB", "portStatus"), ("RemoteKVMDevice-MIB", "portName"), ("RemoteKVMDevice-MIB", "clusterID"), ("RemoteKVMDevice-MIB", "ipPort"), ("RemoteKVMDevice-MIB", "resetType"), ("RemoteKVMDevice-MIB", "interface"), ("RemoteKVMDevice-MIB", "ethernetInterface"), ("RemoteKVMDevice-MIB", "backupRestoreAction"), ("RemoteKVMDevice-MIB", "imageType"), ("RemoteKVMDevice-MIB", "imageVersion"), ("RemoteKVMDevice-MIB", "status"), ("RemoteKVMDevice-MIB", "fileVersion"), ("RemoteKVMDevice-MIB", "fileType"), ("RemoteKVMDevice-MIB", "outletName"), ("RemoteKVMDevice-MIB", "portNumber"), ("RemoteKVMDevice-MIB", "serialNumber"), ("RemoteKVMDevice-MIB", "cimName"), ("RemoteKVMDevice-MIB", "count"), ("RemoteKVMDevice-MIB", "restoredLanPort"), ("RemoteKVMDevice-MIB", "remoteIpAddress"), ("RemoteKVMDevice-MIB", "oldIpAddress"), ("RemoteKVMDevice-MIB", "newIpAddress"), ("RemoteKVMDevice-MIB", "newNetmask"), ("RemoteKVMDevice-MIB", "oldNetmask"), ("RemoteKVMDevice-MIB", "oldGateway"), ("RemoteKVMDevice-MIB", "newGateway"), ("RemoteKVMDevice-MIB", "sxAlertString"), ("RemoteKVMDevice-MIB", "pduName"), ("RemoteKVMDevice-MIB", "changeEventText"), ("RemoteKVMDevice-MIB", "certificateAuthorityName"), ("RemoteKVMDevice-MIB", "sysDateAndTime"), ("RemoteKVMDevice-MIB", "fipsModeStatus"), ("RemoteKVMDevice-MIB", "bannerChanges"), ("RemoteKVMDevice-MIB", "bannerAction"), ("RemoteKVMDevice-MIB", "portList"), ("RemoteKVMDevice-MIB", "fileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    raritanMibBasicGroup = raritanMibBasicGroup.setStatus('current')
if mibBuilder.loadTexts: raritanMibBasicGroup.setDescription('Objects used in the traps.')
raritanMibTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 13742, 9, 2, 2)).setObjects(("RemoteKVMDevice-MIB", "rebootStarted"), ("RemoteKVMDevice-MIB", "rebootCompleted"), ("RemoteKVMDevice-MIB", "userLogin"), ("RemoteKVMDevice-MIB", "userLogout"), ("RemoteKVMDevice-MIB", "userAuthenticationFailure"), ("RemoteKVMDevice-MIB", "portConnect"), ("RemoteKVMDevice-MIB", "portDisconnect"), ("RemoteKVMDevice-MIB", "userSessionTimeout"), ("RemoteKVMDevice-MIB", "userConnectionLost"), ("RemoteKVMDevice-MIB", "portStatusChange"), ("RemoteKVMDevice-MIB", "userAdded"), ("RemoteKVMDevice-MIB", "userModified"), ("RemoteKVMDevice-MIB", "userDeleted"), ("RemoteKVMDevice-MIB", "groupAdded"), ("RemoteKVMDevice-MIB", "groupModified"), ("RemoteKVMDevice-MIB", "groupDeleted"), ("RemoteKVMDevice-MIB", "startCCManagement"), ("RemoteKVMDevice-MIB", "stopCCManagement"), ("RemoteKVMDevice-MIB", "factoryReset"), ("RemoteKVMDevice-MIB", "deviceUpdateStarted"), ("RemoteKVMDevice-MIB", "deviceUpdateCompleted"), ("RemoteKVMDevice-MIB", "configBackup"), ("RemoteKVMDevice-MIB", "configRestore"), ("RemoteKVMDevice-MIB", "userPasswordChanged"), ("RemoteKVMDevice-MIB", "powerNotification"), ("RemoteKVMDevice-MIB", "networkFailure"), ("RemoteKVMDevice-MIB", "networkParameterChanged"), ("RemoteKVMDevice-MIB", "vmImageConnected"), ("RemoteKVMDevice-MIB", "vmImageDisconnected"), ("RemoteKVMDevice-MIB", "cimUpdateStarted"), ("RemoteKVMDevice-MIB", "cimUpdateCompleted"), ("RemoteKVMDevice-MIB", "cimConnected"), ("RemoteKVMDevice-MIB", "cimDisconnected"), ("RemoteKVMDevice-MIB", "powerOutletNotification"), ("RemoteKVMDevice-MIB", "portConnectionDenied"), ("RemoteKVMDevice-MIB", "firmwareFileDiscarded"), ("RemoteKVMDevice-MIB", "firmwareUpdateFailed"), ("RemoteKVMDevice-MIB", "firmwareValidationFailed"), ("RemoteKVMDevice-MIB", "securityViolation"), ("RemoteKVMDevice-MIB", "deviceUpdateFailed"), ("RemoteKVMDevice-MIB", "passwordSettingsChanged"), ("RemoteKVMDevice-MIB", "ethernetFailover"), ("RemoteKVMDevice-MIB", "ipConflictDetected"), ("RemoteKVMDevice-MIB", "ipConflictResolved"), ("RemoteKVMDevice-MIB", "sxPortAlert"), ("RemoteKVMDevice-MIB", "pduConnected"), ("RemoteKVMDevice-MIB", "pduDisconnected"), ("RemoteKVMDevice-MIB", "networkParameterChangedv2"), ("RemoteKVMDevice-MIB", "portConnectv2"), ("RemoteKVMDevice-MIB", "portDisconnectv2"), ("RemoteKVMDevice-MIB", "userForcedLogout"), ("RemoteKVMDevice-MIB", "userUploadedCertificate"), ("RemoteKVMDevice-MIB", "bladeChassisCommError"), ("RemoteKVMDevice-MIB", "setDateTime"), ("RemoteKVMDevice-MIB", "setFIPSMode"), ("RemoteKVMDevice-MIB", "securityBannerChanged"), ("RemoteKVMDevice-MIB", "securityBannerAction"), ("RemoteKVMDevice-MIB", "scanStarted"), ("RemoteKVMDevice-MIB", "scanStopped"), ("RemoteKVMDevice-MIB", "userDisconnectedFromPort"), ("RemoteKVMDevice-MIB", "automaticScriptConfiguration"), ("RemoteKVMDevice-MIB", "dsamUpdateStarted"), ("RemoteKVMDevice-MIB", "dsamUpdateCompleted"), ("RemoteKVMDevice-MIB", "dsamConnected"), ("RemoteKVMDevice-MIB", "dsamDisconnected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    raritanMibTrapGroup = raritanMibTrapGroup.setStatus('current')
if mibBuilder.loadTexts: raritanMibTrapGroup.setDescription('Raritan traps.')
raritanMibGetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 9, 2, 3)).setObjects(("RemoteKVMDevice-MIB", "systemUsageMemory"), ("RemoteKVMDevice-MIB", "systemUsageCPU"), ("RemoteKVMDevice-MIB", "systemPowerSupplyPowerOn"), ("RemoteKVMDevice-MIB", "portDataNumber"), ("RemoteKVMDevice-MIB", "portDataName"), ("RemoteKVMDevice-MIB", "portDataType"), ("RemoteKVMDevice-MIB", "portDataStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    raritanMibGetGroup = raritanMibGetGroup.setStatus('current')
if mibBuilder.loadTexts: raritanMibGetGroup.setDescription('Raritan retrievable objects')
mibBuilder.exportSymbols("RemoteKVMDevice-MIB", portDataStatus=portDataStatus, oldNetmask=oldNetmask, networkParameterChanged=networkParameterChanged, sxPortAlert=sxPortAlert, firmwareFileDiscarded=firmwareFileDiscarded, scanStarted=scanStarted, ipPort=ipPort, remoteIpAddress=remoteIpAddress, portName=portName, fipsModeStatus=fipsModeStatus, cimName=cimName, certificateAuthorityName=certificateAuthorityName, ethernetFailover=ethernetFailover, networkFailure=networkFailure, portDataEntry=portDataEntry, userSessionTimeout=userSessionTimeout, clusterID=clusterID, remoteKVMDeviceNotifications=remoteKVMDeviceNotifications, bannerAction=bannerAction, userDisconnectedFromPort=userDisconnectedFromPort, remoteKVMDevice=remoteKVMDevice, systemPowerSupplyEntry=systemPowerSupplyEntry, securityBannerAction=securityBannerAction, userLogin=userLogin, rcpObjectName=rcpObjectName, portDataTable=portDataTable, portDataNumber=portDataNumber, fileName=fileName, systemPowerSupplyPowerOn=systemPowerSupplyPowerOn, resetType=resetType, fileVersion=fileVersion, configRestore=configRestore, ethernetInterface=ethernetInterface, systemPowerSupplyTable=systemPowerSupplyTable, pduDisconnected=pduDisconnected, userForcedLogout=userForcedLogout, dsamUpdateCompleted=dsamUpdateCompleted, systemUsageMemory=systemUsageMemory, raritanMibGroups=raritanMibGroups, deviceUpdateCompleted=deviceUpdateCompleted, automaticScriptConfiguration=automaticScriptConfiguration, firmwareValidationFailed=firmwareValidationFailed, pduConnected=pduConnected, groupName=groupName, ipConflictDetected=ipConflictDetected, bladeChassisCommError=bladeChassisCommError, cimDisconnected=cimDisconnected, portConnectionDenied=portConnectionDenied, raritanMibConformance=raritanMibConformance, deviceName=deviceName, backupRestoreAction=backupRestoreAction, systemUsageCPU=systemUsageCPU, cimUpdateCompleted=cimUpdateCompleted, factoryReset=factoryReset, userName=userName, dsamDisconnected=dsamDisconnected, userConnectionLost=userConnectionLost, sxAlertString=sxAlertString, portDataName=portDataName, portStatus=portStatus, portNumber=portNumber, oldIpAddress=oldIpAddress, raritanMibBasicGroup=raritanMibBasicGroup, systemPowerSupplyNumber=systemPowerSupplyNumber, newIpAddress=newIpAddress, portDataType=portDataType, rebootCompleted=rebootCompleted, portDisconnect=portDisconnect, cimConnected=cimConnected, sysDateAndTime=sysDateAndTime, userPasswordChanged=userPasswordChanged, portList=portList, bannerChanges=bannerChanges, userModified=userModified, raritanMibGetGroup=raritanMibGetGroup, securityBannerChanged=securityBannerChanged, remoteKVMDeviceGet=remoteKVMDeviceGet, targetUser=targetUser, userUploadedCertificate=userUploadedCertificate, oldGateway=oldGateway, passwordSettingsChanged=passwordSettingsChanged, portConnect=portConnect, imageType=imageType, deviceUpdateFailed=deviceUpdateFailed, configBackup=configBackup, networkParameterChangedv2=networkParameterChangedv2, changeEventText=changeEventText, imageVersion=imageVersion, powerNotification=powerNotification, rcpIPAddress=rcpIPAddress, fileType=fileType, groupDeleted=groupDeleted, vmImageConnected=vmImageConnected, restoredLanPort=restoredLanPort, newGateway=newGateway, deviceUpdateStarted=deviceUpdateStarted, userAdded=userAdded, status=status, interface=interface, count=count, powerOutletNotification=powerOutletNotification, userDeleted=userDeleted, ipConflictResolved=ipConflictResolved, vmImageDisconnected=vmImageDisconnected, serialNumber=serialNumber, groupAdded=groupAdded, rebootStarted=rebootStarted, firmwareUpdateFailed=firmwareUpdateFailed, newNetmask=newNetmask, setDateTime=setDateTime, rcpObjectInstance=rcpObjectInstance, userAuthenticationFailure=userAuthenticationFailure, PYSNMP_MODULE_ID=raritan, cimUpdateStarted=cimUpdateStarted, portDisconnectv2=portDisconnectv2, groupModified=groupModified, outletName=outletName, raritanMibTrapGroup=raritanMibTrapGroup, pduName=pduName, startCCManagement=startCCManagement, dsamConnected=dsamConnected, stopCCManagement=stopCCManagement, portStatusChange=portStatusChange, securityViolation=securityViolation, raritanMibCompliances=raritanMibCompliances, scanStopped=scanStopped, raritanMibCompliance=raritanMibCompliance, raritan=raritan, portDataIndex=portDataIndex, userLogout=userLogout, portConnectv2=portConnectv2, setFIPSMode=setFIPSMode, dsamUpdateStarted=dsamUpdateStarted)
