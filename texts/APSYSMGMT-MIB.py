#
# PySNMP MIB module APSYSMGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/oracle/APSYSMGMT-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 11:49:32 2024
# On host fv-az1427-842 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
acmepacketMgmt, = mibBuilder.importSymbols("ACMEPACKET-SMI", "acmepacketMgmt")
ApHardwareModuleFamily, ApRedundancyState = mibBuilder.importSymbols("ACMEPACKET-TC", "ApHardwareModuleFamily", "ApRedundancyState")
apLicenseDatabaseRegCap, = mibBuilder.importSymbols("APLICENSE-MIB", "apLicenseDatabaseRegCap")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
InetAddressPrefixLength, InetZoneIndex, InetVersion, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetZoneIndex", "InetVersion", "InetAddress", "InetAddressType")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, ModuleIdentity, Counter32, iso, NotificationType, TimeTicks, Gauge32, ObjectIdentity, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "ModuleIdentity", "Counter32", "iso", "NotificationType", "TimeTicks", "Gauge32", "ObjectIdentity", "Bits", "Counter64")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
apSystemManagementModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 9148, 3, 2))
apSystemManagementModule.setRevisions(('2012-02-06 12:00', '2007-07-11 12:00', '2005-01-04 12:00', '2003-01-06 12:00', '2012-07-13 00:00', '2013-10-22 00:00', '2014-06-20 00:00', '2014-06-26 00:00', '2017-10-11 00:00', '2018-08-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: apSystemManagementModule.setRevisionsDescriptions((' Cleaned up Module-Identity statement', ' Added RFactor, media supervision timer and h248 \n\t\t\tcontrol association traps', ' The system management MIB for Oracle Communications Acme Packet SBCs', ' Obsoleted two incorrect statistcs fields,\n\t\t\tabSigRealmStatsAverageLatency and \n\t\t\tapSigRealmStatsMaxLatency', 'Updated contact info', 'Updated Descriptions for apSysMgmtDOSTrap\n\t\t   \tand apSysMgmtInetAddrDOSTrap', ' Added CPULoadAvg group and associated traps. ', 'Updated Organization and Contact info.', 'Obsoleted Mgcp Objects.', 'Obsoleted apSysMgmtNTPClockSkewTrap.',))
if mibBuilder.loadTexts: apSystemManagementModule.setLastUpdated('201808170000Z')
if mibBuilder.loadTexts: apSystemManagementModule.setOrganization('Oracle Communications')
if mibBuilder.loadTexts: apSystemManagementModule.setContactInfo('           \tCustomer Service\n\t\t \tPostal:\t\tOracle Communications\n\t\t\t\t\t100 Crosby Drive \n\t\t\t\t\tBedford, MA 01730\n\t\t\t\t\tUS\n\t\t    \tTel:\t\t1-800-633-0738\n\t\t\tUrl:\t\twww.oracle.com\n\t\t \tE-mail:\t\tsupport@oracle.com')
if mibBuilder.loadTexts: apSystemManagementModule.setDescription(' The system management MIB for Oracle Communications Acme Packet SBCs\n\t\t\tnow includes statistical data for session agents.')
apSysMgmtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1))
apSysMgmtNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 2))
class SysMgmtPercentage(TextualConvention, Integer32):
    description = 'This value is percentage. For example, if the value from \n\t\tGETs is 15, which means 15%, or 0.15.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 100)

class ApSessionAgentStatusOptions(TextualConvention, Integer32):
    description = 'Possibilities for the status of Session-Agent'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("disabled", 0), ("outOfService", 1), ("standby", 2), ("inService", 3), ("constraintsViolation", 4), ("inServiceTimedOut", 5), ("oosprovisionedresponse", 6))

class ApSessionAgentType(TextualConvention, Integer32):
    description = 'Possible types of the Session-Agent'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("sip", 1), ("h323", 2))

class ApNetMgmtCtrlType(TextualConvention, Integer32):
    description = 'Possible types of the Network Management Control'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("gap-rate", 1), ("gap-percent", 2), ("priority", 3))

class ApSipInterfaceStatusOptions(TextualConvention, Integer32):
    description = 'Possibilities for the status of Sip-Interface'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4))
    namedValues = NamedValues(("inService", 3), ("constraintsViolation", 4))

class ApSigRealmStatusOptions(TextualConvention, Integer32):
    description = 'Possibilities for the status of Realm'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4, 7))
    namedValues = NamedValues(("inService", 3), ("constraintsViolation", 4), ("callLoadReduction", 7))

class ApNetMgmtCtrlState(TextualConvention, Integer32):
    description = 'state of the Network Management Control'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("disabled", 0), ("enabled", 1))

apSysMgmtMIBGeneralObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1))
apSysCPUUtil = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 1), SysMgmtPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysCPUUtil.setStatus('current')
if mibBuilder.loadTexts: apSysCPUUtil.setDescription('The percentage of total CPU utilization measured in 1 second.')
apSysMemoryUtil = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 2), SysMgmtPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysMemoryUtil.setStatus('current')
if mibBuilder.loadTexts: apSysMemoryUtil.setDescription('The percentage of Memory utilization')
apSysHealthScore = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 3), SysMgmtPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysHealthScore.setStatus('current')
if mibBuilder.loadTexts: apSysHealthScore.setDescription('System health percentage. 100, which understands\n\t\tas 100%, is healthiest.')
apSysRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 4), ApRedundancyState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysRedundancy.setStatus('current')
if mibBuilder.loadTexts: apSysRedundancy.setDescription('In redundancy set, one SBC is active, one is standby. \n\t\tThis object reflects the current status of running redundancy engine.\n\t\tIt cannot be used to tell whether redundancy is configured.')
apSysGlobalConSess = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 5), Integer32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysGlobalConSess.setStatus('current')
if mibBuilder.loadTexts: apSysGlobalConSess.setDescription('The total instant number of Global Concurrent Sessions \n\t\tat the moment.')
apSysGlobalCPS = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 6), Integer32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysGlobalCPS.setStatus('current')
if mibBuilder.loadTexts: apSysGlobalCPS.setDescription('The number of global call per second. This is an instant value.')
apSysNATCapacity = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 7), SysMgmtPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysNATCapacity.setStatus('current')
if mibBuilder.loadTexts: apSysNATCapacity.setDescription('The percentage of NAT table (in CAM) utilization.')
apSysARPCapacity = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 8), SysMgmtPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysARPCapacity.setStatus('current')
if mibBuilder.loadTexts: apSysARPCapacity.setDescription('The percentage of ARP table (in CAM) utilization.')
apSysState = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("online", 0), ("becomingoffline", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysState.setStatus('current')
if mibBuilder.loadTexts: apSysState.setDescription('The current system state.  Online denotes regular call\n\t\tprocessing, while offline implies no call processing\n\t\tbut other administrative functions are available.')
apSysLicenseCapacity = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 10), SysMgmtPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysLicenseCapacity.setStatus('current')
if mibBuilder.loadTexts: apSysLicenseCapacity.setDescription('The percentage of licensed sessions currently in progress.')
apSysSipStatsActiveLocalContacts = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysSipStatsActiveLocalContacts.setStatus('current')
if mibBuilder.loadTexts: apSysSipStatsActiveLocalContacts.setDescription('Number of current cached registered contacts in the SBC.')
apSysMgcpGWEndpoints = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysMgcpGWEndpoints.setStatus('obsolete')
if mibBuilder.loadTexts: apSysMgcpGWEndpoints.setDescription('Number of current registered GW endpoints in the SBC. Obsoleted. Polling would return 0.')
apSysH323Registration = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysH323Registration.setStatus('current')
if mibBuilder.loadTexts: apSysH323Registration.setDescription('Number of H323 registrations in the SBC.')
apSysRegCacheLimit = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 14), Integer32()).setUnits('contacts').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysRegCacheLimit.setStatus('current')
if mibBuilder.loadTexts: apSysRegCacheLimit.setDescription('The maximum number of contacts allowed to be accepted into the\n\t\tregistration cache.  A value of 0 indicates no limit.')
apSysShortSessionThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 15), Unsigned32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysShortSessionThreshold.setStatus('current')
if mibBuilder.loadTexts: apSysShortSessionThreshold.setDescription('The threshold for which a trap will be emitted when the amount\n\t\tof short sessions exceeds this value.')
apSysApplicationCPULoadRate = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 16), SysMgmtPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysApplicationCPULoadRate.setStatus('current')
if mibBuilder.loadTexts: apSysApplicationCPULoadRate.setDescription('The average load rate of the service applications taken over a period, upto 10 seconds.')
apSysRegistrationCapacity = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 17), SysMgmtPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysRegistrationCapacity.setStatus('obsolete')
if mibBuilder.loadTexts: apSysRegistrationCapacity.setDescription('The percentage of licensed registrations currently in use.')
apSysRejectedMessages = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysRejectedMessages.setStatus('current')
if mibBuilder.loadTexts: apSysRejectedMessages.setDescription('Number of messages rejected by the SBC due to matching criteria.')
apSysSipEndptDemTrustToUntrust = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysSipEndptDemTrustToUntrust.setStatus('current')
if mibBuilder.loadTexts: apSysSipEndptDemTrustToUntrust.setDescription('The global counter for SIP endpoint demotion from\n             trusted to untrusted.')
apSysSipEndptDemUntrustToDeny = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysSipEndptDemUntrustToDeny.setStatus('current')
if mibBuilder.loadTexts: apSysSipEndptDemUntrustToDeny.setDescription('The global counter for SIP endpoint demotion from\n             untrusted to deny.')
apSysMgcpEndptDemTrustToUntrust = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysMgcpEndptDemTrustToUntrust.setStatus('obsolete')
if mibBuilder.loadTexts: apSysMgcpEndptDemTrustToUntrust.setDescription('The global counter for MGCP endpoint demotion from\n             trusted to untrusted. Obsoleted. Polling would return 0.')
apSysMgcpEndptDemUntrustToDeny = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysMgcpEndptDemUntrustToDeny.setStatus('obsolete')
if mibBuilder.loadTexts: apSysMgcpEndptDemUntrustToDeny.setDescription('The global counter for MGCP endpoint demotion from\n             untrusted to deny. Obsoleted. Polling would return 0.')
apSysStorageSpaceTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 23), )
if mibBuilder.loadTexts: apSysStorageSpaceTable.setStatus('current')
if mibBuilder.loadTexts: apSysStorageSpaceTable.setDescription('A table to hold the total space and available space\n                per volume arranged into rows, and indexed by the\n                volume name. These are all read only.')
apSysSipStatsActiveDatabaseContacts = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysSipStatsActiveDatabaseContacts.setStatus('current')
if mibBuilder.loadTexts: apSysSipStatsActiveDatabaseContacts.setDescription('Number of current cached database-type contacts in the SBC.')
apSysSipTotalCallsRejected = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysSipTotalCallsRejected.setStatus('current')
if mibBuilder.loadTexts: apSysSipTotalCallsRejected.setDescription('The total number of SIP calls rejected.')
apSysCurrentEndptsDenied = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysCurrentEndptsDenied.setStatus('current')
if mibBuilder.loadTexts: apSysCurrentEndptsDenied.setDescription('The total number of endpoints currently denied.')
apSysSipStatsActiveSubscriptions = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysSipStatsActiveSubscriptions.setStatus('current')
if mibBuilder.loadTexts: apSysSipStatsActiveSubscriptions.setDescription('Number of active subscriptions in the SBC.')
apSysSipStatsPerMaxSubscriptions = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysSipStatsPerMaxSubscriptions.setStatus('current')
if mibBuilder.loadTexts: apSysSipStatsPerMaxSubscriptions.setDescription('Lifetime PerMax subscriptions count.')
apSysSipStatsMaximumActiveSubscriptions = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysSipStatsMaximumActiveSubscriptions.setStatus('current')
if mibBuilder.loadTexts: apSysSipStatsMaximumActiveSubscriptions.setDescription('Count of lifetime maximum active subscriptions.')
apSysSipStatsTotalSubscriptions = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysSipStatsTotalSubscriptions.setStatus('current')
if mibBuilder.loadTexts: apSysSipStatsTotalSubscriptions.setDescription('Count of lifetime total subscriptions for the SBC.')
apSysMgmtH248MgcName = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysMgmtH248MgcName.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtH248MgcName.setDescription('Name of H248 Core side MGC.')
apSysMgmtH248Realm = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysMgmtH248Realm.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtH248Realm.setDescription('Realm of H248 Core side MGC.')
apSysMgmtH248PortMapUsage = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysMgmtH248PortMapUsage.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtH248PortMapUsage.setDescription('Port map usage on this core side MGC.')
apSysXCodeCapacity = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 34), SysMgmtPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysXCodeCapacity.setStatus('current')
if mibBuilder.loadTexts: apSysXCodeCapacity.setDescription('The percentage of transcoding utilization')
apSysXCodeAMRCapacity = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 35), SysMgmtPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysXCodeAMRCapacity.setStatus('current')
if mibBuilder.loadTexts: apSysXCodeAMRCapacity.setDescription('The percentage of licensed AMR transcoding utilization')
apSysXCodeAMRWBCapacity = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 36), SysMgmtPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysXCodeAMRWBCapacity.setStatus('current')
if mibBuilder.loadTexts: apSysXCodeAMRWBCapacity.setDescription('The percentage of licensed AMR-WB transcoding utilization')
apSysETCCoreUtilTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 37), )
if mibBuilder.loadTexts: apSysETCCoreUtilTable.setStatus('current')
if mibBuilder.loadTexts: apSysETCCoreUtilTable.setDescription('A table to hold the total space and available space\n                per volume arranged into rows, and indexed by the\n                volume name. These are all read only.')
apSysETCCoreUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 37, 1), ).setIndexNames((0, "APSYSMGMT-MIB", "apSysETCIndex"), (0, "APSYSMGMT-MIB", "apSysETCCoreIndex"))
if mibBuilder.loadTexts: apSysETCCoreUtilEntry.setStatus('current')
if mibBuilder.loadTexts: apSysETCCoreUtilEntry.setDescription('A table entry designed to hold storage space data,\n                on a single volume')
apSysETCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: apSysETCIndex.setStatus('current')
if mibBuilder.loadTexts: apSysETCIndex.setDescription('A monotonically increasing integer for the sole\n                purpose of indexing ETC.')
apSysETCCoreIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 37, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: apSysETCCoreIndex.setStatus('current')
if mibBuilder.loadTexts: apSysETCCoreIndex.setDescription('A monotonically increasing integer for the sole\n                purpose of indexing ETC CPU Core')
apSysETCCoreCPUUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 37, 1, 3), SysMgmtPercentage()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysETCCoreCPUUtil.setStatus('current')
if mibBuilder.loadTexts: apSysETCCoreCPUUtil.setDescription('The percentage of CPU utilization.')
apSysETCMemoryPoolUtilTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 38), )
if mibBuilder.loadTexts: apSysETCMemoryPoolUtilTable.setStatus('current')
if mibBuilder.loadTexts: apSysETCMemoryPoolUtilTable.setDescription('A table to hold the total space and available space\n                per volume arranged into rows, and indexed by the\n                volume name. These are all read only.')
apSysXCodeEVRCCapacity = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 39), SysMgmtPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysXCodeEVRCCapacity.setStatus('current')
if mibBuilder.loadTexts: apSysXCodeEVRCCapacity.setDescription('The percentage of licensed EVRC transcoding utilization')
apSysXCodeEVRCBCapacity = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 40), SysMgmtPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysXCodeEVRCBCapacity.setStatus('current')
if mibBuilder.loadTexts: apSysXCodeEVRCBCapacity.setDescription('The percentage of licensed EVRCB transcoding utilization')
apSysAcpTlsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 41), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysAcpTlsEnabled.setStatus('current')
if mibBuilder.loadTexts: apSysAcpTlsEnabled.setDescription('A value of TRUE indicates ACP over TLS connection is supported and enabled. A FALSE value indicates\n                ACP over TLS connection is not enabled.')
apSysXCodeG729Capacity = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 42), SysMgmtPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysXCodeG729Capacity.setStatus('current')
if mibBuilder.loadTexts: apSysXCodeG729Capacity.setDescription('The percentage of licensed G729 transcoding utilization')
apSysCPULoadAvgOneMinute = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 43), SysMgmtPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysCPULoadAvgOneMinute.setStatus('obsolete')
if mibBuilder.loadTexts: apSysCPULoadAvgOneMinute.setDescription('The percentage of CPU Load across all cores measured over 1 minute.')
apSysCPULoadAvgFiveMinute = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 44), SysMgmtPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysCPULoadAvgFiveMinute.setStatus('obsolete')
if mibBuilder.loadTexts: apSysCPULoadAvgFiveMinute.setDescription('The percentage of CPU Load across all cores measured over 5 minutes.')
apSysCPULoadAvgFiftnMinute = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 45), SysMgmtPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysCPULoadAvgFiftnMinute.setStatus('obsolete')
if mibBuilder.loadTexts: apSysCPULoadAvgFiftnMinute.setDescription('The percentage of CPU Load across all cores measured over 15 minutes.')
apSysXCodeOpusCapacity = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 46), SysMgmtPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysXCodeOpusCapacity.setStatus('current')
if mibBuilder.loadTexts: apSysXCodeOpusCapacity.setDescription('The percentage of licensed Opus transcoding utilization')
apSysXCodeSILKCapacity = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 47), SysMgmtPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysXCodeSILKCapacity.setStatus('current')
if mibBuilder.loadTexts: apSysXCodeSILKCapacity.setDescription('The percentage of licensed SILK transcoding utilization')
apSysXCodeEVRCNWCapacity = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 48), SysMgmtPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysXCodeEVRCNWCapacity.setStatus('current')
if mibBuilder.loadTexts: apSysXCodeEVRCNWCapacity.setDescription('The percentage of licensed EVRCNW transcoding utilization')
apSysXCodeEVSCapacity = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 49), SysMgmtPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysXCodeEVSCapacity.setStatus('current')
if mibBuilder.loadTexts: apSysXCodeEVSCapacity.setDescription('The percentage of licensed EVS transcoding utilization')
apSysETCMemoryPoolUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 38, 1), ).setIndexNames((0, "APSYSMGMT-MIB", "apSysETCIndex"), (0, "APSYSMGMT-MIB", "apSysETCMemoryPoolIndex"))
if mibBuilder.loadTexts: apSysETCMemoryPoolUtilEntry.setStatus('current')
if mibBuilder.loadTexts: apSysETCMemoryPoolUtilEntry.setDescription('A table entry designed to hold storage space data,\n                on a single volume')
apSysETCMemoryPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 38, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: apSysETCMemoryPoolIndex.setStatus('current')
if mibBuilder.loadTexts: apSysETCMemoryPoolIndex.setDescription('A monotonically increasing integer for the sole\n                purpose of indexing ETC MemoryPool')
apSysETCMemoryPoolMemUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 38, 1, 2), SysMgmtPercentage()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysETCMemoryPoolMemUtil.setStatus('current')
if mibBuilder.loadTexts: apSysETCMemoryPoolMemUtil.setDescription('The percentage of Memory utilization')
apSysStorageSpaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 23, 1), ).setIndexNames((0, "APSYSMGMT-MIB", "apSysVolumeIndex"))
if mibBuilder.loadTexts: apSysStorageSpaceEntry.setStatus('current')
if mibBuilder.loadTexts: apSysStorageSpaceEntry.setDescription('A table entry designed to hold storage space data,\n                on a single volume')
apSysVolumeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysVolumeIndex.setStatus('current')
if mibBuilder.loadTexts: apSysVolumeIndex.setDescription('A monotonically increasing integer for the sole\n                purpose of indexing volumes')
apSysVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 23, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysVolumeName.setStatus('current')
if mibBuilder.loadTexts: apSysVolumeName.setDescription('The name of the volume')
apSysVolumeTotalSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 23, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysVolumeTotalSpace.setStatus('current')
if mibBuilder.loadTexts: apSysVolumeTotalSpace.setDescription('The total size of the volume, in MB')
apSysVolumeAvailSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 1, 23, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSysVolumeAvailSpace.setStatus('current')
if mibBuilder.loadTexts: apSysVolumeAvailSpace.setDescription('The total space available on the volume, in KB')
apSysMgmtMIBSessionObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2))
apCombinedSessionAgentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 1), )
if mibBuilder.loadTexts: apCombinedSessionAgentStatsTable.setStatus('obsolete')
if mibBuilder.loadTexts: apCombinedSessionAgentStatsTable.setDescription('A table to hold statistics information on H323 and sip\n\t\tsession agents arranged into rows, indexed by unique integers.\n\t\tThese are all read only.')
apCombinedSessionAgentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 1, 1), ).setIndexNames((0, "APSYSMGMT-MIB", "apCombinedStatsSessionAgentIndex"))
if mibBuilder.loadTexts: apCombinedSessionAgentStatsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: apCombinedSessionAgentStatsEntry.setDescription('A table entry designed to hold statistics, on a single\n\t\tsession agent')
apCombinedStatsSessionAgentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCombinedStatsSessionAgentIndex.setStatus('obsolete')
if mibBuilder.loadTexts: apCombinedStatsSessionAgentIndex.setDescription('A monotonically increasing integer for the sole\n\t\tpurpose of indexing session agents.  When it reaches the\n\t\tmaximum value the agent wraps the value back to 1.')
apCombinedStatsSessionAgentHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCombinedStatsSessionAgentHostname.setStatus('obsolete')
if mibBuilder.loadTexts: apCombinedStatsSessionAgentHostname.setDescription('The hostname of the session agent the following statistics\n\t\tare being calculated for')
apCombinedStatsSessionAgentType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 1, 1, 3), ApSessionAgentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCombinedStatsSessionAgentType.setStatus('obsolete')
if mibBuilder.loadTexts: apCombinedStatsSessionAgentType.setDescription('The type of the specified Session-Agent, can be either\n\t\tsip or h323')
apCombinedStatsCurrentActiveSessionsInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCombinedStatsCurrentActiveSessionsInbound.setStatus('obsolete')
if mibBuilder.loadTexts: apCombinedStatsCurrentActiveSessionsInbound.setDescription('Number of current active inbound sessions')
apCombinedStatsCurrentSessionRateInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCombinedStatsCurrentSessionRateInbound.setStatus('obsolete')
if mibBuilder.loadTexts: apCombinedStatsCurrentSessionRateInbound.setDescription('Current Inbound Session rate in CPS')
apCombinedStatsCurrentActiveSessionsOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCombinedStatsCurrentActiveSessionsOutbound.setStatus('obsolete')
if mibBuilder.loadTexts: apCombinedStatsCurrentActiveSessionsOutbound.setDescription('Number of current active outbound sessions')
apCombinedStatsCurrentSessionRateOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCombinedStatsCurrentSessionRateOutbound.setStatus('obsolete')
if mibBuilder.loadTexts: apCombinedStatsCurrentSessionRateOutbound.setDescription('Current outbound session rate in CPS')
apCombinedStatsTotalSessionsInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCombinedStatsTotalSessionsInbound.setStatus('obsolete')
if mibBuilder.loadTexts: apCombinedStatsTotalSessionsInbound.setDescription('Total Number of inbound sessions')
apCombinedStatsTotalSessionsNotAdmittedInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCombinedStatsTotalSessionsNotAdmittedInbound.setStatus('obsolete')
if mibBuilder.loadTexts: apCombinedStatsTotalSessionsNotAdmittedInbound.setDescription('Total number of inbound sessions rejected due to \n\t\tinsufficient bandwidth')
apCombinedStatsPeriodHighInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCombinedStatsPeriodHighInbound.setStatus('obsolete')
if mibBuilder.loadTexts: apCombinedStatsPeriodHighInbound.setDescription('Highest number of concurrent inbound sessions during \n\t\tthe period')
apCombinedStatsAverageRateInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCombinedStatsAverageRateInbound.setStatus('obsolete')
if mibBuilder.loadTexts: apCombinedStatsAverageRateInbound.setDescription('Average rate of inbound sessions during the period in CPS')
apCombinedStatsTotalSessionsOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCombinedStatsTotalSessionsOutbound.setStatus('obsolete')
if mibBuilder.loadTexts: apCombinedStatsTotalSessionsOutbound.setDescription('Total Number of outbound sessions')
apCombinedStatsTotalSessionsNotAdmittedOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCombinedStatsTotalSessionsNotAdmittedOutbound.setStatus('obsolete')
if mibBuilder.loadTexts: apCombinedStatsTotalSessionsNotAdmittedOutbound.setDescription('Total number of outbound sessions rejected due to \n\t\tinsufficient bandwidth')
apCombinedStatsPeriodHighOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCombinedStatsPeriodHighOutbound.setStatus('obsolete')
if mibBuilder.loadTexts: apCombinedStatsPeriodHighOutbound.setDescription('Highest number of concurrent outbound sessions during the\n\t\tperiod')
apCombinedStatsAverageRateOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCombinedStatsAverageRateOutbound.setStatus('obsolete')
if mibBuilder.loadTexts: apCombinedStatsAverageRateOutbound.setDescription('Average rate of outbound sessions during the period in CPS')
apCombinedStatsMaxBurstRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCombinedStatsMaxBurstRate.setStatus('obsolete')
if mibBuilder.loadTexts: apCombinedStatsMaxBurstRate.setDescription('Maximum burst rate of traffic measured during the \n\t\tperiod (combined inbound and outbound)')
apCombinedStatsPeriodSeizures = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCombinedStatsPeriodSeizures.setStatus('obsolete')
if mibBuilder.loadTexts: apCombinedStatsPeriodSeizures.setDescription('Total number of seizures during the period')
apCombinedStatsPeriodAnswers = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCombinedStatsPeriodAnswers.setStatus('obsolete')
if mibBuilder.loadTexts: apCombinedStatsPeriodAnswers.setDescription('Total number of answered sessions during the period')
apCombinedStatsPeriodASR = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCombinedStatsPeriodASR.setStatus('obsolete')
if mibBuilder.loadTexts: apCombinedStatsPeriodASR.setDescription('The answer-to-seizure ratio, expressed as a percentage.\n\t\tFor example, a value of 90 would represent 90%, or .90')
apCombinedStatsAverageLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCombinedStatsAverageLatency.setStatus('obsolete')
if mibBuilder.loadTexts: apCombinedStatsAverageLatency.setDescription('Average observed one-way signalling latency during the period\n                in milliseconds')
apCombinedStatsMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCombinedStatsMaxLatency.setStatus('obsolete')
if mibBuilder.loadTexts: apCombinedStatsMaxLatency.setDescription('Maximum observed one-way signalling latency during the period\n                in milliseconds')
apCombinedStatsSessionAgentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 1, 1, 22), ApSessionAgentStatusOptions()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCombinedStatsSessionAgentStatus.setStatus('obsolete')
if mibBuilder.loadTexts: apCombinedStatsSessionAgentStatus.setDescription('The current status of the specified session agent, which \n\t\tis expressed as INS, OOSnonresp, OOSconstraintsviolation, \n\t\tBecomingOOS, or ForcedOOS')
apSipSessionAgentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 2), )
if mibBuilder.loadTexts: apSipSessionAgentStatsTable.setStatus('current')
if mibBuilder.loadTexts: apSipSessionAgentStatsTable.setDescription('A table to hold statistics information on SIP session \n\t\tagents arranged into rows, indexed by unique integers.\n\t\tThese are all read only.')
apSipSessionAgentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 2, 1), ).setIndexNames((0, "APSYSMGMT-MIB", "apSipSAStatsSessionAgentIndex"))
if mibBuilder.loadTexts: apSipSessionAgentStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apSipSessionAgentStatsEntry.setDescription('A table entry designed to hold statistics, on a single\n\t\tsession agent')
apSipSAStatsSessionAgentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsSessionAgentIndex.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsSessionAgentIndex.setDescription('A monotonically increasing integer for the sole\n\t\tpurpose of indexing session agents.  When it reaches the\n\t\tmaximum value the agent wraps the value back to 1.')
apSipSAStatsSessionAgentHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsSessionAgentHostname.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsSessionAgentHostname.setDescription('The hostname of the session agent the following statistics\n\t\tare being calculated for')
apSipSAStatsSessionAgentType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 2, 1, 3), ApSessionAgentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsSessionAgentType.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsSessionAgentType.setDescription('The type of the specified Session-Agent, can be either\n\t\tsip or h323')
apSipSAStatsCurrentActiveSessionsInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsCurrentActiveSessionsInbound.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsCurrentActiveSessionsInbound.setDescription('Number of current active inbound sessions')
apSipSAStatsCurrentSessionRateInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsCurrentSessionRateInbound.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsCurrentSessionRateInbound.setDescription('Current Inbound Session rate in CPS')
apSipSAStatsCurrentActiveSessionsOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsCurrentActiveSessionsOutbound.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsCurrentActiveSessionsOutbound.setDescription('Number of current active outbound sessions')
apSipSAStatsCurrentSessionRateOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsCurrentSessionRateOutbound.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsCurrentSessionRateOutbound.setDescription('Current outbound session rate in CPS')
apSipSAStatsTotalSessionsInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsTotalSessionsInbound.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsTotalSessionsInbound.setDescription('Total Number of inbound sessions')
apSipSAStatsTotalSessionsNotAdmittedInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsTotalSessionsNotAdmittedInbound.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsTotalSessionsNotAdmittedInbound.setDescription('Total number of inbound sessions rejected due to \n\t\tinsufficient bandwidth')
apSipSAStatsPeriodHighInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsPeriodHighInbound.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsPeriodHighInbound.setDescription('Highest number of concurrent inbound sessions during \n\t\tthe period')
apSipSAStatsAverageRateInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsAverageRateInbound.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsAverageRateInbound.setDescription('Average rate of inbound sessions during the period in CPS')
apSipSAStatsTotalSessionsOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsTotalSessionsOutbound.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsTotalSessionsOutbound.setDescription('Total Number of outbound sessions')
apSipSAStatsTotalSessionsNotAdmittedOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsTotalSessionsNotAdmittedOutbound.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsTotalSessionsNotAdmittedOutbound.setDescription('Total number of outbound sessions rejected due to \n\t\tinsufficient bandwidth')
apSipSAStatsPeriodHighOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsPeriodHighOutbound.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsPeriodHighOutbound.setDescription('Highest number of concurrent outbound sessions during the\n\t\tperiod')
apSipSAStatsAverageRateOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsAverageRateOutbound.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsAverageRateOutbound.setDescription('Average rate of outbound sessions during the period in CPS')
apSipSAStatsMaxBurstRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsMaxBurstRate.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsMaxBurstRate.setDescription('Maximum burst rate of traffic measured during the \n\t\tperiod (combined inbound and outbound)')
apSipSAStatsPeriodSeizures = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsPeriodSeizures.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsPeriodSeizures.setDescription('Total number of seizures during the period')
apSipSAStatsPeriodAnswers = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsPeriodAnswers.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsPeriodAnswers.setDescription('Total number of answered sessions during the period')
apSipSAStatsPeriodASR = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsPeriodASR.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsPeriodASR.setDescription('The answer-to-seizure ratio, expressed as a percentage.\n\t\tFor example, a value of 90 would represent 90%, or .90')
apSipSAStatsAverageLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 2, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsAverageLatency.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsAverageLatency.setDescription('Average observed one-way signalling latency during the period\n                in milliseconds')
apSipSAStatsMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 2, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsMaxLatency.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsMaxLatency.setDescription('Maximum observed one-way signalling latency during the period\n                in milliseconds')
apSipSAStatsSessionAgentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 2, 1, 22), ApSessionAgentStatusOptions()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsSessionAgentStatus.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsSessionAgentStatus.setDescription('The current status of the specified session agent, which \n\t\tis expressed as INS, OOSnonresp, OOSconstraintsviolation, \n\t\tBecomingOOS, or ForcedOOS')
apH323SessionAgentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 3), )
if mibBuilder.loadTexts: apH323SessionAgentStatsTable.setStatus('current')
if mibBuilder.loadTexts: apH323SessionAgentStatsTable.setDescription('A table to hold statistics information on H323 session \n\t\tagents arranged into rows, indexed by unique integers.\n\t\tThese are all read only.')
apH323SessionAgentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 3, 1), ).setIndexNames((0, "APSYSMGMT-MIB", "apH323SAStatsSessionAgentIndex"))
if mibBuilder.loadTexts: apH323SessionAgentStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apH323SessionAgentStatsEntry.setDescription('A table entry designed to hold statistics, on a single\n\t\tsession agent')
apH323SAStatsSessionAgentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apH323SAStatsSessionAgentIndex.setStatus('current')
if mibBuilder.loadTexts: apH323SAStatsSessionAgentIndex.setDescription('A monotonically increasing integer for the sole\n\t\tpurpose of indexing session agents.  When it reaches the\n\t\tmaximum value the agent wraps the value back to 1.')
apH323SAStatsSessionAgentHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apH323SAStatsSessionAgentHostname.setStatus('current')
if mibBuilder.loadTexts: apH323SAStatsSessionAgentHostname.setDescription('The hostname of the session agent the following statistics\n\t\tare being calculated for')
apH323SAStatsSessionAgentType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 3, 1, 3), ApSessionAgentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apH323SAStatsSessionAgentType.setStatus('current')
if mibBuilder.loadTexts: apH323SAStatsSessionAgentType.setDescription('The type of the specified Session-Agent, can be either\n\t\tsip or h323')
apH323SAStatsCurrentActiveSessionsInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apH323SAStatsCurrentActiveSessionsInbound.setStatus('current')
if mibBuilder.loadTexts: apH323SAStatsCurrentActiveSessionsInbound.setDescription('Number of current active inbound sessions')
apH323SAStatsCurrentSessionRateInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apH323SAStatsCurrentSessionRateInbound.setStatus('current')
if mibBuilder.loadTexts: apH323SAStatsCurrentSessionRateInbound.setDescription('Current Inbound Session rate in CPS')
apH323SAStatsCurrentActiveSessionsOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apH323SAStatsCurrentActiveSessionsOutbound.setStatus('current')
if mibBuilder.loadTexts: apH323SAStatsCurrentActiveSessionsOutbound.setDescription('Number of current active outbound sessions')
apH323SAStatsCurrentSessionRateOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apH323SAStatsCurrentSessionRateOutbound.setStatus('current')
if mibBuilder.loadTexts: apH323SAStatsCurrentSessionRateOutbound.setDescription('Current outbound session rate in CPS')
apH323SAStatsTotalSessionsInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apH323SAStatsTotalSessionsInbound.setStatus('current')
if mibBuilder.loadTexts: apH323SAStatsTotalSessionsInbound.setDescription('Total Number of inbound sessions')
apH323SAStatsTotalSessionsNotAdmittedInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apH323SAStatsTotalSessionsNotAdmittedInbound.setStatus('current')
if mibBuilder.loadTexts: apH323SAStatsTotalSessionsNotAdmittedInbound.setDescription('Total number of inbound sessions rejected due to \n\t\tinsufficient bandwidth')
apH323SAStatsPeriodHighInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apH323SAStatsPeriodHighInbound.setStatus('current')
if mibBuilder.loadTexts: apH323SAStatsPeriodHighInbound.setDescription('Highest number of concurrent inbound sessions during \n\t\tthe period')
apH323SAStatsAverageRateInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apH323SAStatsAverageRateInbound.setStatus('current')
if mibBuilder.loadTexts: apH323SAStatsAverageRateInbound.setDescription('Average rate of inbound sessions during the period in CPS')
apH323SAStatsTotalSessionsOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apH323SAStatsTotalSessionsOutbound.setStatus('current')
if mibBuilder.loadTexts: apH323SAStatsTotalSessionsOutbound.setDescription('Total Number of outbound sessions')
apH323SAStatsTotalSessionsNotAdmittedOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apH323SAStatsTotalSessionsNotAdmittedOutbound.setStatus('current')
if mibBuilder.loadTexts: apH323SAStatsTotalSessionsNotAdmittedOutbound.setDescription('Total number of outbound sessions rejected due to \n\t\tinsufficient bandwidth')
apH323SAStatsPeriodHighOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apH323SAStatsPeriodHighOutbound.setStatus('current')
if mibBuilder.loadTexts: apH323SAStatsPeriodHighOutbound.setDescription('Highest number of concurrent outbound sessions during the\n\t\tperiod')
apH323SAStatsAverageRateOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apH323SAStatsAverageRateOutbound.setStatus('current')
if mibBuilder.loadTexts: apH323SAStatsAverageRateOutbound.setDescription('Average rate of outbound sessions during the period in CPS')
apH323SAStatsMaxBurstRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 3, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apH323SAStatsMaxBurstRate.setStatus('current')
if mibBuilder.loadTexts: apH323SAStatsMaxBurstRate.setDescription('Maximum burst rate of traffic measured during the \n\t\tperiod (combined inbound and outbound)')
apH323SAStatsPeriodSeizures = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apH323SAStatsPeriodSeizures.setStatus('current')
if mibBuilder.loadTexts: apH323SAStatsPeriodSeizures.setDescription('Total number of seizures during the period')
apH323SAStatsPeriodAnswers = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apH323SAStatsPeriodAnswers.setStatus('current')
if mibBuilder.loadTexts: apH323SAStatsPeriodAnswers.setDescription('Total number of answered sessions during the period')
apH323SAStatsPeriodASR = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apH323SAStatsPeriodASR.setStatus('current')
if mibBuilder.loadTexts: apH323SAStatsPeriodASR.setDescription('The answer-to-seizure ratio, expressed as a percentage.\n\t\tFor example, a value of 90 would represent 90%, or .90')
apH323SAStatsAverageLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 3, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apH323SAStatsAverageLatency.setStatus('current')
if mibBuilder.loadTexts: apH323SAStatsAverageLatency.setDescription('Average observed one-way signalling latency during the period\n                in milliseconds')
apH323SAStatsMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 3, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apH323SAStatsMaxLatency.setStatus('current')
if mibBuilder.loadTexts: apH323SAStatsMaxLatency.setDescription('Maximum observed one-way signalling latency during the period\n                in milliseconds')
apH323SAStatsSessionAgentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 3, 1, 22), ApSessionAgentStatusOptions()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apH323SAStatsSessionAgentStatus.setStatus('current')
if mibBuilder.loadTexts: apH323SAStatsSessionAgentStatus.setDescription('The current status of the specified session agent, which \n\t\tis expressed as INS, OOSnonresp, OOSconstraintsviolation, \n\t\tBecomingOOS, or ForcedOOS')
apSigRealmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4), )
if mibBuilder.loadTexts: apSigRealmStatsTable.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsTable.setDescription('A table to hold statistics information on realms\n\t\tarranged into rows, indexed by unique integers.\n\t\tThese are all read only.')
apSigRealmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1), ).setIndexNames((0, "APSYSMGMT-MIB", "apSigRealmStatsRealmIndex"))
if mibBuilder.loadTexts: apSigRealmStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsEntry.setDescription('A table entry designed to hold statistics, on a single\n\t\trealm')
apSigRealmStatsRealmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsRealmIndex.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsRealmIndex.setDescription('A monotonically increasing integer for the sole\n\t\tpurpose of indexing realms.  When it reaches the\n\t\tmaximum value the agent wraps the value back to 1.')
apSigRealmStatsRealmName = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsRealmName.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsRealmName.setDescription('The name of the realm the following statistics\n\t\tare being calculated for')
apSigRealmStatsCurrentActiveSessionsInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsCurrentActiveSessionsInbound.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsCurrentActiveSessionsInbound.setDescription('Number of current active inbound sessions')
apSigRealmStatsCurrentSessionRateInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsCurrentSessionRateInbound.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsCurrentSessionRateInbound.setDescription('Current Inbound Session rate in CPS')
apSigRealmStatsCurrentActiveSessionsOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsCurrentActiveSessionsOutbound.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsCurrentActiveSessionsOutbound.setDescription('Number of current active outbound sessions')
apSigRealmStatsCurrentSessionRateOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsCurrentSessionRateOutbound.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsCurrentSessionRateOutbound.setDescription('Current outbound session rate in CPS')
apSigRealmStatsTotalSessionsInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsTotalSessionsInbound.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsTotalSessionsInbound.setDescription('Total Number of inbound sessions')
apSigRealmStatsTotalSessionsNotAdmittedInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsTotalSessionsNotAdmittedInbound.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsTotalSessionsNotAdmittedInbound.setDescription('Total number of inbound sessions rejected due to \n\t\tinsufficient bandwidth')
apSigRealmStatsPeriodHighInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsPeriodHighInbound.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsPeriodHighInbound.setDescription('Highest number of concurrent inbound sessions during \n\t\tthe period')
apSigRealmStatsAverageRateInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsAverageRateInbound.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsAverageRateInbound.setDescription('Average rate of inbound sessions during the period in CPS')
apSigRealmStatsTotalSessionsOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsTotalSessionsOutbound.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsTotalSessionsOutbound.setDescription('Total Number of outbound sessions')
apSigRealmStatsTotalSessionsNotAdmittedOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsTotalSessionsNotAdmittedOutbound.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsTotalSessionsNotAdmittedOutbound.setDescription('Total number of outbound sessions rejected due to \n\t\tinsufficient bandwidth')
apSigRealmStatsPeriodHighOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsPeriodHighOutbound.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsPeriodHighOutbound.setDescription('Highest number of concurrent outbound sessions during the\n\t\tperiod')
apSigRealmStatsAverageRateOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsAverageRateOutbound.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsAverageRateOutbound.setDescription('Average rate of outbound sessions during the period in CPS')
apSigRealmStatsMaxBurstRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsMaxBurstRate.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsMaxBurstRate.setDescription('Maximum burst rate of traffic measured during the \n\t\tperiod (combined inbound and outbound)')
apSigRealmStatsPeriodSeizures = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsPeriodSeizures.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsPeriodSeizures.setDescription('Total number of seizures during the period')
apSigRealmStatsPeriodAnswers = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsPeriodAnswers.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsPeriodAnswers.setDescription('Total number of answered sessions during the period')
apSigRealmStatsPeriodASR = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsPeriodASR.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsPeriodASR.setDescription('The answer-to-seizure ratio, expressed as a percentage.\n\t\tFor example, a value of 90 would represent 90%, or .90')
apSigRealmStatsAverageLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 19), Unsigned32())
if mibBuilder.loadTexts: apSigRealmStatsAverageLatency.setStatus('obsolete')
if mibBuilder.loadTexts: apSigRealmStatsAverageLatency.setDescription('Average observed one-way signalling latency during the period\n                in milliseconds')
apSigRealmStatsMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 20), Unsigned32())
if mibBuilder.loadTexts: apSigRealmStatsMaxLatency.setStatus('obsolete')
if mibBuilder.loadTexts: apSigRealmStatsMaxLatency.setDescription('Maximum observed one-way signalling latency during the period\n                in milliseconds')
apSigRealmStatsMinutesLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsMinutesLeft.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsMinutesLeft.setDescription('The number of monthly-minutes left in the pool per calendar\n\t\tmonth for a given realm')
apSigRealmStatsMinutesReject = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsMinutesReject.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsMinutesReject.setDescription('Peg counts of number of rejected calls due to\n\t\t monthly-minutes constraints exceeded')
apSigRealmStatsShortSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsShortSessions.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsShortSessions.setDescription('The lifetime number of sessions whose duration was less than\n\t\tthe configured short session duration. \n\n\t\tPlease note that the object is only supported in D-series SBCs.')
apSigRealmStatsAverageQoSRFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsAverageQoSRFactor.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsAverageQoSRFactor.setDescription('Average QoS RFactor observed during the period')
apSigRealmStatsMaximumQoSRFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsMaximumQoSRFactor.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsMaximumQoSRFactor.setDescription('Average QoS RFactor observed during the period')
apSigRealmStatsCurrentMajorRFactorExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsCurrentMajorRFactorExceeded.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsCurrentMajorRFactorExceeded.setDescription('Peg counts of number of times the Major Rfactor \n\t\t threshold was exceeded during the period')
apSigRealmStatsTotalMajorRFactorExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsTotalMajorRFactorExceeded.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsTotalMajorRFactorExceeded.setDescription('Peg counts of number of times the Major Rfactor \n\t\t threshold was exceeded during the lifetime')
apSigRealmStatsCurrentCriticalRFactorExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsCurrentCriticalRFactorExceeded.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsCurrentCriticalRFactorExceeded.setDescription('Peg counts of number of times the Critical Rfactor \n\t\t threshold was exceeded during the period')
apSigRealmStatsTotalCriticalRFactorExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsTotalCriticalRFactorExceeded.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsTotalCriticalRFactorExceeded.setDescription('Peg counts of number of times the Critical Rfactor \n\t\t threshold was exceeded during the lifetime')
apSigRealmStatsRealmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 30), ApSigRealmStatusOptions()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsRealmStatus.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsRealmStatus.setDescription('The current status of the specified realm, which \n\t\tis expressed as INS,constraintsviolation, \n\t\tor callLoadReduction')
apSigRealmStatsActiveLocalContacts = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsActiveLocalContacts.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsActiveLocalContacts.setDescription('Number of current cached registered contacts, for a given realm, in the SBC.')
apSigRealmStatsActiveSubscriptions = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsActiveSubscriptions.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsActiveSubscriptions.setDescription('Number of active subscriptions for the given realm.')
apSigRealmStatsPerMaxSubscriptions = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsPerMaxSubscriptions.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsPerMaxSubscriptions.setDescription('Lifetime PerMax subscriptions count for the given realm.')
apSigRealmStatsMaximumActiveSubscriptions = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsMaximumActiveSubscriptions.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsMaximumActiveSubscriptions.setDescription('Count of lifetime maximum active subscriptions for the given realm.')
apSigRealmStatsTotalSubscriptions = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 2, 4, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsTotalSubscriptions.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsTotalSubscriptions.setDescription('Count of lifetime total subscriptions for the SBC.')
apSysMgmtMIBNetMgmtCtrlObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 3))
apNetMgmtCtrlStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 3, 1), )
if mibBuilder.loadTexts: apNetMgmtCtrlStatsTable.setStatus('current')
if mibBuilder.loadTexts: apNetMgmtCtrlStatsTable.setDescription('A table to hold statistics information on network\n\t\tmanagement controls arranged into rows, indexed by\n\t\tunique names of the control rules. These are all read only.')
apNetMgmtCtrlStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 3, 1, 1), ).setIndexNames((1, "APSYSMGMT-MIB", "apNetMgmtCtrlStatsName"))
if mibBuilder.loadTexts: apNetMgmtCtrlStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apNetMgmtCtrlStatsEntry.setDescription('A table entry designed to hold statistics, on a single\n\t\tnetwork management control')
apNetMgmtCtrlStatsName = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNetMgmtCtrlStatsName.setStatus('current')
if mibBuilder.loadTexts: apNetMgmtCtrlStatsName.setDescription('The name of the network management control the\n\t\tfollowing statistics are being calculated for')
apNetMgmtCtrlStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 3, 1, 1, 2), ApNetMgmtCtrlType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNetMgmtCtrlStatsType.setStatus('current')
if mibBuilder.loadTexts: apNetMgmtCtrlStatsType.setDescription('The type of the specified network management\n\t\tcontrol, which can be gap-rate,\tgap-percent or\n\t\tpriority')
apNetMgmtCtrlStatsIncomingTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNetMgmtCtrlStatsIncomingTotal.setStatus('current')
if mibBuilder.loadTexts: apNetMgmtCtrlStatsIncomingTotal.setDescription('Total number of incoming calls that have\n\t\tmatched a destination identifier of the\n\t\tspecified network management control')
apNetMgmtCtrlStatsRejectedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNetMgmtCtrlStatsRejectedTotal.setStatus('current')
if mibBuilder.loadTexts: apNetMgmtCtrlStatsRejectedTotal.setDescription('Total number of incoming calls that have\n\t\tbeen rejected by the specified network\n\t\tmanagement control')
apNetMgmtCtrlStatsDivertedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNetMgmtCtrlStatsDivertedTotal.setStatus('current')
if mibBuilder.loadTexts: apNetMgmtCtrlStatsDivertedTotal.setDescription('Total number of incoming calls that have\n\t\tbeen diverted by the specified network\n\t\tmanagement control')
apNetMgmtCtrlStatsIncomingCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNetMgmtCtrlStatsIncomingCurrent.setStatus('current')
if mibBuilder.loadTexts: apNetMgmtCtrlStatsIncomingCurrent.setDescription('Number of incoming calls during the current\n\t\tperiod that have matched a destination identifier\n\t\tof the specified network management control')
apNetMgmtCtrlStatsRejectedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNetMgmtCtrlStatsRejectedCurrent.setStatus('current')
if mibBuilder.loadTexts: apNetMgmtCtrlStatsRejectedCurrent.setDescription('Number of incoming calls during the current\n\t\tperiod that have been rejected by the specified\n\t\tnetwork management control')
apNetMgmtCtrlStatsDivertedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 3, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNetMgmtCtrlStatsDivertedCurrent.setStatus('current')
if mibBuilder.loadTexts: apNetMgmtCtrlStatsDivertedCurrent.setDescription('Number of incoming calls during the current\n\t\tperiod that have been diverted by the specified\n\t\tnetwork management control')
apNetMgmtCtrlStatsIncomingPeriodMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 3, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNetMgmtCtrlStatsIncomingPeriodMax.setStatus('current')
if mibBuilder.loadTexts: apNetMgmtCtrlStatsIncomingPeriodMax.setDescription('Maximum number of incoming calls during a period\n\t\tthat have matched a destination\tidentifier of the\n\t\tspecified network management control')
apNetMgmtCtrlStatsRejectedPeriodMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 3, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNetMgmtCtrlStatsRejectedPeriodMax.setStatus('current')
if mibBuilder.loadTexts: apNetMgmtCtrlStatsRejectedPeriodMax.setDescription('Maximum number of incoming calls during a period\n\t\tthat have been rejected by the specified network\n\t\tmanagement control')
apNetMgmtCtrlStatsDivertedPeriodMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNetMgmtCtrlStatsDivertedPeriodMax.setStatus('current')
if mibBuilder.loadTexts: apNetMgmtCtrlStatsDivertedPeriodMax.setDescription('Maximum number of incoming calls during a period\n\t\tthat have been diverted by the specified network\n\t\tmanagement control')
apNetMgmtCtrlStatsState = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 3, 1, 1, 12), ApNetMgmtCtrlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNetMgmtCtrlStatsState.setStatus('current')
if mibBuilder.loadTexts: apNetMgmtCtrlStatsState.setDescription('The state of the specified network management\n                control, which can be disabled or enabled')
apSysMgmtMIBENUMServerStatusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 4))
apENUMServerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 4, 1), )
if mibBuilder.loadTexts: apENUMServerStatusTable.setStatus('obsolete')
if mibBuilder.loadTexts: apENUMServerStatusTable.setDescription('This table is being replaced by apAppsEnumStatusTable\n\t    defined in ap-apps.mib.\n\t    \n\t    A read-only table to hold the status of configured ENUM servers,\n\t    indexed by the name of the enum server and server IP.')
apENUMServerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 4, 1, 1), ).setIndexNames((0, "APSYSMGMT-MIB", "apENUMConfigName"), (0, "APSYSMGMT-MIB", "apENUMServerIpAddress"))
if mibBuilder.loadTexts: apENUMServerStatusEntry.setStatus('obsolete')
if mibBuilder.loadTexts: apENUMServerStatusEntry.setDescription('An entry designed to hold the status of a single ENUM server')
apENUMConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apENUMConfigName.setStatus('obsolete')
if mibBuilder.loadTexts: apENUMConfigName.setDescription('The name of the enum-config element that contains this \n\t    ENUM server.')
apENUMServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 4, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apENUMServerIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: apENUMServerIpAddress.setDescription('The IP address of this ENUM server.')
apENUMServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("inservice", 0), ("lowerpriority", 1), ("oosunreachable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apENUMServerStatus.setStatus('obsolete')
if mibBuilder.loadTexts: apENUMServerStatus.setDescription('The status of this ENUM server.')
apSysMgmtMIBNSEPStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 5))
apNSEPStatsCurrentActiveSessionsInbound = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 5, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNSEPStatsCurrentActiveSessionsInbound.setStatus('current')
if mibBuilder.loadTexts: apNSEPStatsCurrentActiveSessionsInbound.setDescription('Number of current active inbound NS/EP sessions')
apNSEPStatsTotalSessionsInbound = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNSEPStatsTotalSessionsInbound.setStatus('current')
if mibBuilder.loadTexts: apNSEPStatsTotalSessionsInbound.setDescription('Total Number of inbound NS/EP sessions during the period')
apNSEPStatsPeriodHighInbound = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 5, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNSEPStatsPeriodHighInbound.setStatus('current')
if mibBuilder.loadTexts: apNSEPStatsPeriodHighInbound.setDescription('Highest number of concurrent inbound NS/EP sessions during \n\t    the period')
apNSEPStatsPeriod = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 5, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNSEPStatsPeriod.setStatus('current')
if mibBuilder.loadTexts: apNSEPStatsPeriod.setDescription('The period for which the stats are collected in secs')
apNSEPStatsRPHTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 5, 5), )
if mibBuilder.loadTexts: apNSEPStatsRPHTable.setStatus('current')
if mibBuilder.loadTexts: apNSEPStatsRPHTable.setDescription('A table to hold statistics information on NS/EP \n\t    sessions arranged into rows, indexed by\n\t    unique RPH values (namespace.rpriority) \n\t    These are all read only.')
apNSEPStatsRPHEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 5, 5, 1), ).setIndexNames((1, "APSYSMGMT-MIB", "apNSEPStatsRPHValue"))
if mibBuilder.loadTexts: apNSEPStatsRPHEntry.setStatus('current')
if mibBuilder.loadTexts: apNSEPStatsRPHEntry.setDescription('A table entry designed to hold statistics, on a single\n\t    RPH value')
apNSEPStatsRPHValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 5, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNSEPStatsRPHValue.setStatus('current')
if mibBuilder.loadTexts: apNSEPStatsRPHValue.setDescription('The RPH Value the following statistics are being \n\t    calculated for')
apNSEPStatsRPHCurrentActiveSessionsInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 5, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNSEPStatsRPHCurrentActiveSessionsInbound.setStatus('current')
if mibBuilder.loadTexts: apNSEPStatsRPHCurrentActiveSessionsInbound.setDescription('Number of current active inbound NS/EP sessions')
apNSEPStatsRPHTotalSessionsInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 5, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNSEPStatsRPHTotalSessionsInbound.setStatus('current')
if mibBuilder.loadTexts: apNSEPStatsRPHTotalSessionsInbound.setDescription('Total Number of inbound NS/EP sessions')
apNSEPStatsRPHPeriodHighInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 5, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNSEPStatsRPHPeriodHighInbound.setStatus('current')
if mibBuilder.loadTexts: apNSEPStatsRPHPeriodHighInbound.setDescription('Highest number of concurrent inbound NS/EP sessions during \n\t    the period')
apNSEPStatsRPHTotalSessionsNotAdmittedInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 5, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNSEPStatsRPHTotalSessionsNotAdmittedInbound.setStatus('current')
if mibBuilder.loadTexts: apNSEPStatsRPHTotalSessionsNotAdmittedInbound.setDescription('Total number of inbound NS/EP sessions rejected')
apNSEPStatsRPHCurrentActiveSessionsOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 5, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNSEPStatsRPHCurrentActiveSessionsOutbound.setStatus('current')
if mibBuilder.loadTexts: apNSEPStatsRPHCurrentActiveSessionsOutbound.setDescription('Number of current active outbound NS/EP sessions')
apNSEPStatsRPHTotalSessionsOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 5, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNSEPStatsRPHTotalSessionsOutbound.setStatus('current')
if mibBuilder.loadTexts: apNSEPStatsRPHTotalSessionsOutbound.setDescription('Total Number of outbound NS/EP sessions')
apNSEPStatsRPHPeriodHighOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 5, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNSEPStatsRPHPeriodHighOutbound.setStatus('current')
if mibBuilder.loadTexts: apNSEPStatsRPHPeriodHighOutbound.setDescription('Highest number of concurrent outbound NS/EP sessions during \n\t    the period')
apNSEPStatsRPHTotalSessionsNotAdmittedOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 5, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNSEPStatsRPHTotalSessionsNotAdmittedOutbound.setStatus('current')
if mibBuilder.loadTexts: apNSEPStatsRPHTotalSessionsNotAdmittedOutbound.setDescription('Total number of outbound NS/EP sessions rejected')
apSysMgmtMIBLDAPServerStatusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 6))
apLDAPServerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 6, 1), )
if mibBuilder.loadTexts: apLDAPServerStatusTable.setStatus('current')
if mibBuilder.loadTexts: apLDAPServerStatusTable.setDescription('A read-only table to hold the status of configured LDAP servers,\n\t    indexed by server IP.')
apLDAPServerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 6, 1, 1), ).setIndexNames((0, "APSYSMGMT-MIB", "apLDAPConfigName"), (0, "APSYSMGMT-MIB", "apLDAPServerIpAddress"))
if mibBuilder.loadTexts: apLDAPServerStatusEntry.setStatus('current')
if mibBuilder.loadTexts: apLDAPServerStatusEntry.setDescription('An entry designed to hold the status of a single LDAP server')
apLDAPConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 6, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLDAPConfigName.setStatus('current')
if mibBuilder.loadTexts: apLDAPConfigName.setDescription('The name of the ldap-config element that contains this \n\t    LDAP server.')
apLDAPServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 6, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLDAPServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: apLDAPServerIpAddress.setDescription('The IP address of this LDAP server.')
apLDAPServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("inservice", 1), ("sessionlost", 2), ("servertimeout", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLDAPServerStatus.setStatus('current')
if mibBuilder.loadTexts: apLDAPServerStatus.setDescription('The status of this LDAP server.')
apSysMgmtSystemTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 7))
apSysMgmtTrapTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 7, 1), )
if mibBuilder.loadTexts: apSysMgmtTrapTable.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTrapTable.setDescription('A table to hold the traps reported by the\n                 Session Border Controller.\n                 Traps arranged into rows, indexed by system time, \n                 and trap table instance index.\n                These are all read only.')
apSysMgmtTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 7, 1, 1), ).setIndexNames((0, "APSYSMGMT-MIB", "apTrapTableSystemTime"), (0, "APSYSMGMT-MIB", "apTrapTableInstanceIndex"))
if mibBuilder.loadTexts: apSysMgmtTrapTableEntry.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTrapTableEntry.setDescription('A table entry designed to hold traps, on a\n                 Session Border Controller.')
apTrapTableSystemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 7, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: apTrapTableSystemTime.setStatus('current')
if mibBuilder.loadTexts: apTrapTableSystemTime.setDescription('The system time of the session border controller.')
apTrapTableInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 7, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: apTrapTableInstanceIndex.setStatus('current')
if mibBuilder.loadTexts: apTrapTableInstanceIndex.setDescription('The instance index of the trapID incremented with a resolution of a second.')
apTrapTableNumVariables = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 7, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapTableNumVariables.setStatus('current')
if mibBuilder.loadTexts: apTrapTableNumVariables.setDescription('The number of information encoded in the trap.')
apTrapTableSysUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 7, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapTableSysUptime.setStatus('current')
if mibBuilder.loadTexts: apTrapTableSysUptime.setDescription('The snmp sysUptime when the trap was generated.')
apTrapTableTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 7, 1, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapTableTrapId.setStatus('current')
if mibBuilder.loadTexts: apTrapTableTrapId.setDescription('The trapID associated with the fault condition.')
apSysMgmtInterfaceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 8))
apSysMgmtPhyUtilTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 8, 1), )
if mibBuilder.loadTexts: apSysMgmtPhyUtilTable.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtPhyUtilTable.setDescription('A Table that contains RX and TX utilization\n                information on media ports.')
apSysMgmtPhyUtilTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: apSysMgmtPhyUtilTableEntry.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtPhyUtilTableEntry.setDescription('A table entry that contains RX and TX utilization\n                information on media ports.')
apPhyUtilTableRXUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 8, 1, 1, 1), SysMgmtPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPhyUtilTableRXUtil.setStatus('current')
if mibBuilder.loadTexts: apPhyUtilTableRXUtil.setDescription('The RX Network utilization of the physical port\n                measured over a 1 second period.')
apPhyUtilTableTXUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 8, 1, 1, 2), SysMgmtPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPhyUtilTableTXUtil.setStatus('current')
if mibBuilder.loadTexts: apPhyUtilTableTXUtil.setDescription('The TX Network utilization of the physical port\n                measured over a 1 second period.')
apSysMgmtTrapInformationTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 7, 2), )
if mibBuilder.loadTexts: apSysMgmtTrapInformationTable.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTrapInformationTable.setDescription('A table to hold the trap information reported by the\n                 Session Border Controller.\n                 Information arranged into rows, indexed by system time,\n                 trap table instance index and trap information data index.\n                These are all read only.')
apSysMgmtTrapInformationTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 7, 2, 1), ).setIndexNames((0, "APSYSMGMT-MIB", "apTrapTableSystemTime"), (0, "APSYSMGMT-MIB", "apTrapTableInstanceIndex"), (0, "APSYSMGMT-MIB", "apTrapInformationTableDataIndex"))
if mibBuilder.loadTexts: apSysMgmtTrapInformationTableEntry.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTrapInformationTableEntry.setDescription('A table entry designed to hold trap information, \n                 reported by a Session Border Controller.')
apTrapInformationTableDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 7, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: apTrapInformationTableDataIndex.setStatus('current')
if mibBuilder.loadTexts: apTrapInformationTableDataIndex.setDescription('The index of the information encoded in the trap.')
apTrapInformationTableDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 4, 6, 64, 70))).clone(namedValues=NamedValues(("snmpTypeUnknown", 0), ("snmpTypeInteger", 2), ("snmpTypeOctetString", 4), ("snmpTypeObjectIdentifier", 6), ("snmpTypeObjectIpAddress", 64), ("snmpTypeInteger64", 70)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapInformationTableDataType.setStatus('current')
if mibBuilder.loadTexts: apTrapInformationTableDataType.setDescription(' snmp type enumerated encoded in the trap.\n                 snmpTypeInteger is the size of integer.\n                 snmpTypeObjectIpAddress is an octet string of length 4.')
apTrapInformationTableDataLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 7, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapInformationTableDataLength.setStatus('current')
if mibBuilder.loadTexts: apTrapInformationTableDataLength.setDescription('The octet length of the information encoded in the trap.')
apTrapInformationTableDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 2, 1, 7, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapInformationTableDataOctets.setStatus('current')
if mibBuilder.loadTexts: apTrapInformationTableDataOctets.setDescription('The information represented in octets:\n                snmpTypeInteger, snmpTypeObjectCounter32, \n                snmpTypeObjectGauge, snmpTypeObjectOpaque and snmpTypeUnsignedInteger32 are 4 octets long.\n                snmpTypeCounter64 is 8 octets long.\n                snmpTypeObjectIpAddress, snmpTypeObjectNSAPAddress, are 4 octets long.\n                Note - Data is aligned in network order.')
apSysMgmtTrapType = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 2, 1), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtTrapType.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTrapType.setDescription('The object ID of the item which value is exceeds its monitoring\n\tthreshold')
apSysMgmtTrapValue = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 2, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtTrapValue.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTrapValue.setDescription('The value of the object which causes the trap to occur.')
apSysMgmtSlotID = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 2, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSlotID.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSlotID.setDescription('The slot the trap occurs on.')
apSysMgmtSlotType = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 2, 4), ApHardwareModuleFamily()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSlotType.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSlotType.setDescription('The slot type the trap occurs on.')
apSysMgmtRedundancyState = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("unassigned", 3), ("recovery", 4), ("outOfService", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtRedundancyState.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRedundancyState.setDescription('The new redundancy state for the generating entity.')
apSysMgmtSingleUnitRedundancyState = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 2, 6), ApRedundancyState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSingleUnitRedundancyState.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSingleUnitRedundancyState.setDescription('The new redundancy state for the generating entity.')
apSysMgmtSipInterfaceActiveLocalContacts = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 2, 7), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSipInterfaceActiveLocalContacts.setStatus('obsolete')
if mibBuilder.loadTexts: apSysMgmtSipInterfaceActiveLocalContacts.setDescription('Number of current cached registered contacts per Sip Interface.')
apSysMgmtSipInterfaceRegCacheLimit = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 2, 8), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSipInterfaceRegCacheLimit.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSipInterfaceRegCacheLimit.setDescription('The maximum number of contacts allowed to be accepted into the\n                registration cache per Sip Interface.  A value of 0 indicates no limit.')
apSystemManagementNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 3))
apSystemManagementNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 3, 0))
apSysMgmtGroupTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 3, 0, 1)).setObjects(("APSYSMGMT-MIB", "apSysMgmtTrapType"), ("APSYSMGMT-MIB", "apSysMgmtTrapValue"))
if mibBuilder.loadTexts: apSysMgmtGroupTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtGroupTrap.setDescription(' The trap will generated if value of the monitoring object\n\t      exceeds a certain threshold. ')
apSysMgmtGroupClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 3, 0, 2)).setObjects(("APSYSMGMT-MIB", "apSysMgmtTrapType"))
if mibBuilder.loadTexts: apSysMgmtGroupClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtGroupClearTrap.setDescription(' The trap will generated if value of the monitoring object\n\t      returns to within a certain threshold.  This signifies that\n\t      an alarm caused by that monitoring object has been cleared. ')
apSysMgmtSingleUnitRedundancyTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 3, 0, 3)).setObjects(("APSYSMGMT-MIB", "apSysMgmtSlotID"), ("APSYSMGMT-MIB", "apSysMgmtSlotType"), ("APSYSMGMT-MIB", "apSysMgmtSingleUnitRedundancyState"))
if mibBuilder.loadTexts: apSysMgmtSingleUnitRedundancyTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSingleUnitRedundancyTrap.setDescription(" The trap will generated a slot's status changes.\n\t      The varbinds contain the new information for the generating\n\t      slot.")
apSysMgmtMonitorObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5))
apSysMgmtPowerLocation = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("left", 0), ("right", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtPowerLocation.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtPowerLocation.setDescription('0=left:power supply A, 1=right:power supply B.')
apSysMgmtPowerPresence = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtPowerPresence.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtPowerPresence.setDescription('0=power supply down/not present, 1=power supply up/present.')
apSysMgmtTempValue = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 3), Unsigned32()).setUnits('degrees celsius').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtTempValue.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTempValue.setDescription('the value is the temperature of the system in degrees celsius.')
apSysMgmtFanLocation = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("left", 0), ("middle", 1), ("right", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtFanLocation.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtFanLocation.setDescription('0=left fan unit, 1=middle fan unit, 2=right fan unit.')
apSysMgmtFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 5), Integer32()).setUnits('%').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtFanSpeed.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtFanSpeed.setDescription('the value is the percentage of fan speed of given fan location.')
apSysMgmtTaskSuspend = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtTaskSuspend.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTaskSuspend.setDescription('The text string of the critical task that has entered the suspended\n\t state.  If the text of the message exceeds 255 bytes, the message\n\t will be truncated to 255 bytes. ')
apSysMgmtRedRole = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtRedRole.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRedRole.setDescription('0=primary unit in a redundant pair,\n\t 1=secondary unit in a redundant pair.')
apSysMgmtRedTransState = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("out-of-service", 0), ("active", 1), ("standby", 2), ("no-peer", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtRedTransState.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRedTransState.setDescription('the state that the system, give by location, is transitioning too.')
apSysMgmtMediaPorts = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 9), SysMgmtPercentage()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtMediaPorts.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtMediaPorts.setDescription('The value is the failure rate percentage at which the system\n\t cannot allocate media ports.')
apSysMgmtMediaBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 10), SysMgmtPercentage()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtMediaBandwidth.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtMediaBandwidth.setDescription('The value is the failure rate percentage at which the system\n\t cannot allocate media bandwidth.')
apSysMgmtGatewayUnreachable = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtGatewayUnreachable.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtGatewayUnreachable.setDescription('The value is the gateway that is or was unreachable from the system.\n\t The string will be formated as \n\t gateway x.x.x.x [unreachable | reachable] on slot y port z subport w\n         .')
apSysMgmtRadiusDown = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("all-servers-down", 0), ("some-servers-down", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtRadiusDown.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRadiusDown.setDescription('the value identifies if all the radius connections are down or if\n\t just some of the radius connects have become unreachable.')
apSysMgmtH323InitFail = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtH323InitFail.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtH323InitFail.setDescription('The text string is the H.323 stack-name that has failed to initilize.\n\t If the text of the message exceeds 255 bytes, the message\n\t will be truncated to 255 bytes. ')
apSysMgmtCfgSaveFail = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtCfgSaveFail.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtCfgSaveFail.setDescription('The text string is the reason phrase why the save config has failed\n\t to execute properly on the system.\n\t If the text of the message exceeds 255 bytes, the message\n\t will be truncated to 255 bytes. ')
apSysMgmtHardwareError = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtHardwareError.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtHardwareError.setDescription('The text string is the type of hardware error\n\tthat has occurred.\n\t If the text of the message exceeds 255 bytes, the message\n\t will be truncated to 255 bytes. ')
apSysMgmtSAHostname = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSAHostname.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSAHostname.setDescription('The hostname of the Session Agent that is changing status')
apSysMgmtSAIP = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSAIP.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSAIP.setDescription('The ip address of the Session Agent that is changing status')
apSysMgmtSAStatus = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inservice", 0), ("outofservice", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSAStatus.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSAStatus.setDescription('The status that the Session Agent is changing into')
apSysMgmtSAStatusReason = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("administrative", 0), ("oosbyproxyerror", 1), ("standby", 2), ("inservice", 3), ("constraintsexceeded", 4), ("unresponsive", 5), ("oosprovisionedresponse", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSAStatusReason.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSAStatusReason.setDescription('The reason for the status change of the Session Agent')
apSysMgmtAuthFailLevel = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("login", 0), ("user", 1), ("priv", 2), ("shell", 3), ("li-admin", 4), ("provisioner", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtAuthFailLevel.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtAuthFailLevel.setDescription('The state a user was trying to switch to or from when failing to\n\tauthenticate.')
apSysMgmtAuthFailProto = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("console", 0), ("telnet", 1), ("ftp", 2), ("ssh", 3), ("sftp", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtAuthFailProto.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtAuthFailProto.setDescription('The protocol a user was using when failing to authenticate')
apSysMgmtAuthFailOrigin = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtAuthFailOrigin.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtAuthFailOrigin.setDescription('The origin of a user who failed to authenticate.\n       \tThe string will formated as such <xx.xx.xx.xx>:<yyyy> where\n\t xx.xx.xx.xx is the IPv4 address, and yyyy is the port.')
apSysMgmtSystemState = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("online", 0), ("becoming-offline", 1), ("offline", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSystemState.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSystemState.setDescription('The current value of the system-state')
apSysMgmtTaskDelete = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtTaskDelete.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTaskDelete.setDescription('The text string of the task that has been deleted from the system.\n\t If the text of the message exceeds 255 bytes, the message\n\t will be truncated to 255 bytes. ')
apSysMgmtAlgdCPULoad = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 25), SysMgmtPercentage()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtAlgdCPULoad.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtAlgdCPULoad.setDescription('The value is the CPU utilization percentage of application tasks.')
apSysMgmtSipInterfaceRealmName = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSipInterfaceRealmName.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSipInterfaceRealmName.setDescription('The realm of the Sip Interface that is changing status')
apSysMgmtSipInterfaceIP = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSipInterfaceIP.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSipInterfaceIP.setDescription('The ip address of the Sip Interface that is changing status')
apSysMgmtSipInterfaceStatus = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inservice", 0), ("outofservice", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSipInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSipInterfaceStatus.setDescription('The status that the Sip Interface is changing into')
apSysMgmtSipInterfaceStatusReason = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("administrative", 0), ("oosbyproxyerror", 1), ("standby", 2), ("inservice", 3), ("constraintsexceeded", 4), ("unresponsive", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSipInterfaceStatusReason.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSipInterfaceStatusReason.setDescription('The reason for the status change of the Sip Interface')
apSysMgmtCollectPushServerUnreachable = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtCollectPushServerUnreachable.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtCollectPushServerUnreachable.setDescription('The value is the push server that is or was unreachable from the \n\t system collector. ')
apSysMgmtNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtNTPServer.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtNTPServer.setDescription('The value is the server that is or was unreachable from the \n\t NTP. ')
apSysMgmtBorderGatewayId = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtBorderGatewayId.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtBorderGatewayId.setDescription('The identifier of a Border Gateway.')
apSysMgmtRFactor = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtRFactor.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRFactor.setDescription('The R-factor value of the call that has exceeded a\n\tconfigured threshold.')
apSysMgmtCallId = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtCallId.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtCallId.setDescription('A call correlation identifier.')
apSysMgmtSurrogateRegHost = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSurrogateRegHost.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSurrogateRegHost.setDescription('The registrar host name for a surrogate registration')
apSysMgmtSurrogateRegAor = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSurrogateRegAor.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSurrogateRegAor.setDescription('The address of record used in a surrogate registration')
apSysMgmtRealmID = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtRealmID.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRealmID.setDescription('The Realm ID.')
apSysMgmtCollectorPushNodeName = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtCollectorPushNodeName.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtCollectorPushNodeName.setDescription('The node name from which the collector file was transferred successfully.')
apSysMgmtCollectorPushUniqueFileName = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtCollectorPushUniqueFileName.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtCollectorPushUniqueFileName.setDescription('The unique collector fileID that was transferred successfully.')
apSysMgmtCollectorPushReceiverAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtCollectorPushReceiverAddress.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtCollectorPushReceiverAddress.setDescription('The address of the push-receiver to where the collector file was transferred successfully.')
apSysMgmtRealmName = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtRealmName.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRealmName.setDescription('The realm whose session constraint status is changing')
apSysMgmtRealmStatusReason = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("administrative", 0), ("oosbyproxyerror", 1), ("standby", 2), ("inservice", 3), ("constraintsexceeded", 4), ("unresponsive", 5), ("oosprovisionedresponse", 6), ("callloadreduction", 7)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtRealmStatusReason.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRealmStatusReason.setDescription('The reason for the status change of the Realm Status')
apSysMgmtGatewaySynchronized = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtGatewaySynchronized.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtGatewaySynchronized.setDescription('The value is the default gateway that is synchronized in the ARP table of the system.\n         The string will formated as such <xx.xx.xx.xx> where\n         xx.xx.xx.xx is the IPv4 address.')
apSysCallRecordingServerName = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysCallRecordingServerName.setStatus('current')
if mibBuilder.loadTexts: apSysCallRecordingServerName.setDescription('Call Recording Server name')
apSysCallRecordingServerState = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("not-monitoring", 1), ("primary-active", 2), ("secondary-active", 3), ("no-active", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysCallRecordingServerState.setStatus('current')
if mibBuilder.loadTexts: apSysCallRecordingServerState.setDescription('The current state of the Call Recording Server')
apSysCDRPushReceiverAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 46), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysCDRPushReceiverAddressType.setStatus('current')
if mibBuilder.loadTexts: apSysCDRPushReceiverAddressType.setDescription('The address type of the receiver.')
apSysCDRPushReceiverAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 47), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysCDRPushReceiverAddress.setStatus('current')
if mibBuilder.loadTexts: apSysCDRPushReceiverAddress.setDescription('The address of the push receiver.')
apSysCDRPushReceiverFailureReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("file-access-error", 1), ("connection-error", 2), ("authentication-error", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysCDRPushReceiverFailureReasonCode.setStatus('current')
if mibBuilder.loadTexts: apSysCDRPushReceiverFailureReasonCode.setDescription('The reason code for the failure.')
apSysAdminAuditLogFullReason = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("file-size", 0), ("percentage-full", 1), ("file-transfer-time", 2), ("maxspaceused-deletingfile", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysAdminAuditLogFullReason.setStatus('current')
if mibBuilder.loadTexts: apSysAdminAuditLogFullReason.setDescription('The reason code for Audit log full.')
apSysAdminWriteErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("not-open", 1), ("io-error", 2), ("comress-error", 3), ("encrypt-error", 4), ("no-space", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysAdminWriteErrorCode.setStatus('current')
if mibBuilder.loadTexts: apSysAdminWriteErrorCode.setDescription('The reason code for write failure')
apSysAdminFileName = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysAdminFileName.setStatus('current')
if mibBuilder.loadTexts: apSysAdminFileName.setDescription('file name')
apSysAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 52), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysAddressType.setStatus('current')
if mibBuilder.loadTexts: apSysAddressType.setDescription('The address type.')
apSysAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 53), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysAddress.setStatus('current')
if mibBuilder.loadTexts: apSysAddress.setDescription('address')
apSysReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("login-error", 1), ("file-transfer-error", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysReasonCode.setStatus('current')
if mibBuilder.loadTexts: apSysReasonCode.setDescription('The reason code for the failure.')
apSysMgmtPhyUtilCurrent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 55), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtPhyUtilCurrent.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtPhyUtilCurrent.setDescription('The current measured percentage value of\n              RX/TX utilization, whichever is higher.')
apSysMgmtPhyUtilMinorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 56), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtPhyUtilMinorThreshold.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtPhyUtilMinorThreshold.setDescription('The current configured minor threshold value.')
apSysMgmtPhyUtilMajorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 57), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtPhyUtilMajorThreshold.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtPhyUtilMajorThreshold.setDescription('The current configured major threshold value.')
apSysMgmtPhyUtilCriticalThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 58), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtPhyUtilCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtPhyUtilCriticalThreshold.setDescription('The current configured critical threshold value')
apSysMgmtPhyRejectOverUtil = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 59), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtPhyRejectOverUtil.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtPhyRejectOverUtil.setDescription('Whether or not the overloadProtection feature\n              is enabled and active.')
apSysMgmtSpaceAvailCurrent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 60), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSpaceAvailCurrent.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSpaceAvailCurrent.setDescription('The current measured percentage value of\n              space available.')
apSysMgmtSpaceAvailMinorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 61), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSpaceAvailMinorThreshold.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSpaceAvailMinorThreshold.setDescription('The current configured minor threshold value.')
apSysMgmtSpaceAvailMajorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 62), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSpaceAvailMajorThreshold.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSpaceAvailMajorThreshold.setDescription('The current configured major threshold value.')
apSysMgmtSpaceAvailCriticalThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 63), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSpaceAvailCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSpaceAvailCriticalThreshold.setDescription('The current configured critical threshold value')
apSysMgmtPartitionPath = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 64), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtPartitionPath.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtPartitionPath.setDescription('partition path')
apSysMgmtTcaOid = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 65), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtTcaOid.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTcaOid.setDescription('The Object ID for the Threshold Crossing Alert counter\n\t     that is changing alert level')
apSysMgmtTcaCurrent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 66), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtTcaCurrent.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTcaCurrent.setDescription('The current configured TCA minor threshold value.')
apSysMgmtTcaMinorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 67), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtTcaMinorThreshold.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTcaMinorThreshold.setDescription('The current configured TCA minor threshold value.')
apSysMgmtTcaMajorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 68), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtTcaMajorThreshold.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTcaMajorThreshold.setDescription('The current configured TCA major threshold value.')
apSysMgmtTcaCriticalThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 69), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtTcaCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTcaCriticalThreshold.setDescription('The current configured TCA critical threshold value.')
apSysEPSName = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysEPSName.setStatus('current')
if mibBuilder.loadTexts: apSysEPSName.setDescription('The name of the external policy server.')
apSysEPSFqdn = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 71), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysEPSFqdn.setStatus('current')
if mibBuilder.loadTexts: apSysEPSFqdn.setDescription('The FQDN of the external policy server.')
apSysEPSAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 72), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysEPSAddress.setStatus('current')
if mibBuilder.loadTexts: apSysEPSAddress.setDescription('The ip address and port of the external policy server.')
apSysEPSRealm = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 73), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysEPSRealm.setStatus('current')
if mibBuilder.loadTexts: apSysEPSRealm.setDescription('Realm associated with the policy server.')
apSysEPSOperationType = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 74), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysEPSOperationType.setStatus('current')
if mibBuilder.loadTexts: apSysEPSOperationType.setDescription('Operation mode (RACF/CLF) of the policy server.')
apSysMgmtDatabaseContactMinorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 75), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtDatabaseContactMinorThreshold.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtDatabaseContactMinorThreshold.setDescription('The current configured minor threshold value.')
apSysMgmtDatabaseContactMajorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 76), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtDatabaseContactMajorThreshold.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtDatabaseContactMajorThreshold.setDescription('The current configured major threshold value.')
apSysMgmtDatabaseContactCriticalThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 77), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtDatabaseContactCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtDatabaseContactCriticalThreshold.setDescription('The current configured critical threshold value')
apSysMgmtTacacsDown = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("all-servers-down", 0), ("some-servers-down", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtTacacsDown.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTacacsDown.setDescription('the value identifies if all the tacacs connections are down or if\n\t just some of the tacacs connects have become unreachable.')
apSysMgmtOCSRDown = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("all-servers-down", 0), ("some-servers-down", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtOCSRDown.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtOCSRDown.setDescription('the value identifies if all the OCSR connections are down or if\n\t just some of the OCSR connections are unreachable.')
apSysMgmtCSVCfgSaveFail = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 5, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtCSVCfgSaveFail.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtCSVCfgSaveFail.setDescription('The text string is the reason phrase why the save config has failed\n         to execute properly on the system.\n         If the text of the message exceeds 255 bytes, the message\n         will be truncated to 255 bytes. ')
apSystemManagementMonitorPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6))
apSystemManagementMonitors = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0))
apSysMgmtPowerTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 1)).setObjects(("APSYSMGMT-MIB", "apSysMgmtPowerLocation"), ("APSYSMGMT-MIB", "apSysMgmtPowerPresence"))
if mibBuilder.loadTexts: apSysMgmtPowerTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtPowerTrap.setDescription(' The trap will be generated if a power supply is powered down,\n\t      powered up, inserted/present or removed/not present. ')
apSysMgmtTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 2)).setObjects(("APSYSMGMT-MIB", "apSysMgmtTempValue"))
if mibBuilder.loadTexts: apSysMgmtTempTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTempTrap.setDescription(' The trap will be generated if the temperature falls below\n\t\tthe monitoring threshold. ')
apSysMgmtFanTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 3)).setObjects(("APSYSMGMT-MIB", "apSysMgmtFanLocation"), ("APSYSMGMT-MIB", "apSysMgmtFanSpeed"))
if mibBuilder.loadTexts: apSysMgmtFanTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtFanTrap.setDescription(' The trap will be generated if a fan unit speed falls\n\t\tbelow the monitoring threshold. ')
apSysMgmtTaskSuspendTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 4)).setObjects(("APSYSMGMT-MIB", "apSysMgmtTaskSuspend"))
if mibBuilder.loadTexts: apSysMgmtTaskSuspendTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTaskSuspendTrap.setDescription(' The trap will be generated if a critical task running\n\t\t on the system enters a suspened state.')
apSysMgmtRedundancyTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 5)).setObjects(("APSYSMGMT-MIB", "apSysMgmtRedRole"), ("APSYSMGMT-MIB", "apSysMgmtRedTransState"))
if mibBuilder.loadTexts: apSysMgmtRedundancyTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRedundancyTrap.setDescription(' The trap will be generated if a state change occurs on either\n\t\t the primary or secondary system in a redundant(HA) pair.')
apSysMgmtMediaPortsTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 6)).setObjects(("APSYSMGMT-MIB", "apSysMgmtMediaPorts"))
if mibBuilder.loadTexts: apSysMgmtMediaPortsTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtMediaPortsTrap.setDescription(" The trap will be generated if port allocation fails at\n\t\ta percentage rate higher or equal to the system's default\n\t\tthreshold rate.")
apSysMgmtMediaBandwidthTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 7)).setObjects(("APSYSMGMT-MIB", "apSysMgmtMediaBandwidth"))
if mibBuilder.loadTexts: apSysMgmtMediaBandwidthTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtMediaBandwidthTrap.setDescription(" The trap will be generated if bandwidth allocation fails at\n\t\ta percentage rage higher or equal to the system's default\n\t\tthreshold rate.")
apSysMgmtMediaOutOfMemory = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 8))
if mibBuilder.loadTexts: apSysMgmtMediaOutOfMemory.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtMediaOutOfMemory.setDescription(' The trap will be generated if media procees cannot allocate\n\t\tmemory.')
apSysMgmtMediaUnknownRealm = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 9))
if mibBuilder.loadTexts: apSysMgmtMediaUnknownRealm.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtMediaUnknownRealm.setDescription(' The trap will be generated if media proccess cannot find\n\t\tassociated realm for flow.')
apSysMgmtGatewayUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 10)).setObjects(("APSYSMGMT-MIB", "apSysMgmtGatewayUnreachable"))
if mibBuilder.loadTexts: apSysMgmtGatewayUnreachableTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtGatewayUnreachableTrap.setDescription(' The trap will be generated if gateway specified becomes\n\t\tunreachable by the system.')
apSysMgmtRadiusDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 11)).setObjects(("APSYSMGMT-MIB", "apSysMgmtRadiusDown"))
if mibBuilder.loadTexts: apSysMgmtRadiusDownTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRadiusDownTrap.setDescription(' The trap will be generated if all or some configured\n\t\tradius accounting servers haved timed out from a\n\t\tRADIUS Server.')
apSysMgmtH323InitFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 12)).setObjects(("APSYSMGMT-MIB", "apSysMgmtH323InitFail"))
if mibBuilder.loadTexts: apSysMgmtH323InitFailTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtH323InitFailTrap.setDescription(' The trap will be generated if H.323 stack has failed to\n\t\tinitialize properly and has been terminated.')
apSysMgmtCfgSaveFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 13)).setObjects(("APSYSMGMT-MIB", "apSysMgmtCfgSaveFail"))
if mibBuilder.loadTexts: apSysMgmtCfgSaveFailTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtCfgSaveFailTrap.setDescription(' The trap will be generated if an error occurs while the\n\t\tsystem is trying to save the configuration to memory.')
apSysMgmtHardwareErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 14)).setObjects(("APSYSMGMT-MIB", "apSysMgmtHardwareError"))
if mibBuilder.loadTexts: apSysMgmtHardwareErrorTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtHardwareErrorTrap.setDescription(' The trap will be generated if an error condition is\n                detected in the Switch or CAM subsystems.')
apSysMgmtSAStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 15)).setObjects(("APSYSMGMT-MIB", "apSysMgmtSAHostname"), ("APSYSMGMT-MIB", "apSysMgmtSAIP"), ("APSYSMGMT-MIB", "apSysMgmtSAStatus"), ("APSYSMGMT-MIB", "apSysMgmtSAStatusReason"))
if mibBuilder.loadTexts: apSysMgmtSAStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSAStatusChangeTrap.setDescription('Generated when a session agent changes status.')
apSysMgmtAuthenticationFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 16)).setObjects(("APSYSMGMT-MIB", "apSysMgmtAuthFailLevel"), ("APSYSMGMT-MIB", "apSysMgmtAuthFailProto"), ("APSYSMGMT-MIB", "apSysMgmtAuthFailOrigin"))
if mibBuilder.loadTexts: apSysMgmtAuthenticationFailedTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtAuthenticationFailedTrap.setDescription(' The trap will be generated if a user fails authentication\n\t        on the console or over telnet, ftp, ssh, or sftp.')
apSysMgmtSystemStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 17)).setObjects(("APSYSMGMT-MIB", "apSysMgmtSystemState"))
if mibBuilder.loadTexts: apSysMgmtSystemStateTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSystemStateTrap.setDescription(' The trap will be generated when the SBC is instructed\n              to change system-state or the transition from\n              becoming_offline to offline occurs.')
apSysMgmtMediaPortsClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 18))
if mibBuilder.loadTexts: apSysMgmtMediaPortsClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtMediaPortsClearTrap.setDescription(" The trap will be generated if the port allocation failure\n\t        rate drops below the system's default acceptable threshold.")
apSysMgmtMediaBandwidthClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 19))
if mibBuilder.loadTexts: apSysMgmtMediaBandwidthClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtMediaBandwidthClearTrap.setDescription(" The trap will be generated if bandwidth allocation failure\n\t        rate drops below the system's default acceptable failure \n\t\tthreshold.")
apSysMgmtMediaOutOfMemoryClear = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 20))
if mibBuilder.loadTexts: apSysMgmtMediaOutOfMemoryClear.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtMediaOutOfMemoryClear.setDescription(' The trap will be generated if the media out-of-memory alarm\n\t        is manually cleared, there is no automatic trigger to clear\n\t\tthat particular alarm.')
apSysMgmtGatewayUnreachableClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 21)).setObjects(("APSYSMGMT-MIB", "apSysMgmtGatewayUnreachable"))
if mibBuilder.loadTexts: apSysMgmtGatewayUnreachableClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtGatewayUnreachableClearTrap.setDescription(' The trap will be generated if gateway specified again becomes\n\t\treachable after being previously unreachable.')
apSysMgmtRadiusDownClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 22))
if mibBuilder.loadTexts: apSysMgmtRadiusDownClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRadiusDownClearTrap.setDescription(' The trap will be generated when all configured radius\n\t        accounting servers have resumed communication after any or\n\t\tall have previously timed out.')
apSysMgmtTaskDeleteTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 23)).setObjects(("APSYSMGMT-MIB", "apSysMgmtTaskDelete"))
if mibBuilder.loadTexts: apSysMgmtTaskDeleteTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTaskDeleteTrap.setDescription(' The trap will be generated if a task running\n\t\t on the system is deleted.')
apSysMgmtAlgdCPULoadTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 24)).setObjects(("APSYSMGMT-MIB", "apSysMgmtAlgdCPULoad"))
if mibBuilder.loadTexts: apSysMgmtAlgdCPULoadTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtAlgdCPULoadTrap.setDescription(' The trap will be generated if the CPU utilization percentage of\n\t\t application tasks has exceeded the threshold algd-load-limit.')
apSysMgmtAlgdCPULoadClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 25))
if mibBuilder.loadTexts: apSysMgmtAlgdCPULoadClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtAlgdCPULoadClearTrap.setDescription(' The trap will be generated when the CPU utilization percentage\n\t\t of application tasks has fallen below the threshold\n\t\t algd-load-limit.')
apSysMgmtInterfaceStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 26)).setObjects(("APSYSMGMT-MIB", "apSysMgmtSipInterfaceRealmName"), ("APSYSMGMT-MIB", "apSysMgmtSipInterfaceIP"), ("APSYSMGMT-MIB", "apSysMgmtSipInterfaceStatus"), ("APSYSMGMT-MIB", "apSysMgmtSipInterfaceStatusReason"))
if mibBuilder.loadTexts: apSysMgmtInterfaceStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtInterfaceStatusChangeTrap.setDescription(' The trap will be generated when there is a change\n\t\tin the status of the sip interface.')
apSysMgmtENUMStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 27)).setObjects(("APSYSMGMT-MIB", "apENUMConfigName"), ("APSYSMGMT-MIB", "apENUMServerIpAddress"), ("APSYSMGMT-MIB", "apENUMServerStatus"))
if mibBuilder.loadTexts: apSysMgmtENUMStatusChangeTrap.setStatus('obsolete')
if mibBuilder.loadTexts: apSysMgmtENUMStatusChangeTrap.setDescription(' The trap will be generated if the reachability status of an ENUM \n\tserver changes.\n\n\tThe trap is being replaced by apAppsENUMStatusChangeTrap.')
apSysMgmtPushServerUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 28)).setObjects(("APSYSMGMT-MIB", "apSysMgmtCollectPushServerUnreachable"))
if mibBuilder.loadTexts: apSysMgmtPushServerUnreachableTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtPushServerUnreachableTrap.setDescription(' The trap will be generated if server specified becomes\n\t        unreachable by the system collector.')
apSysMgmtPushServerUnreachableClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 29)).setObjects(("APSYSMGMT-MIB", "apSysMgmtCollectPushServerUnreachable"))
if mibBuilder.loadTexts: apSysMgmtPushServerUnreachableClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtPushServerUnreachableClearTrap.setDescription(' The trap will be generated if server specified becomes\n\t        unreachable by the system collector.')
apSysMgmtNTPServerUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 30)).setObjects(("APSYSMGMT-MIB", "apSysMgmtNTPServer"))
if mibBuilder.loadTexts: apSysMgmtNTPServerUnreachableTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtNTPServerUnreachableTrap.setDescription(' The trap will be generated if server specified becomes\n\t        unreachable by the NTP process.')
apSysMgmtNTPServerUnreachableClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 31)).setObjects(("APSYSMGMT-MIB", "apSysMgmtNTPServer"))
if mibBuilder.loadTexts: apSysMgmtNTPServerUnreachableClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtNTPServerUnreachableClearTrap.setDescription(' The trap will be generated if server specified was \n\t        unreachable by the NTP process and now is reachable.')
apSysMgmtNTPServiceDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 32))
if mibBuilder.loadTexts: apSysMgmtNTPServiceDownTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtNTPServiceDownTrap.setDescription(' The trap will be generated if all servers in service\n\t        are down')
apSysMgmtNTPServiceDownClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 33))
if mibBuilder.loadTexts: apSysMgmtNTPServiceDownClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtNTPServiceDownClearTrap.setDescription(' The trap will be generated if all servers were down and\n\t        there is at least one is up in service.')
apSysMgmtMediaSupervisionTimerExpTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 34)).setObjects(("APSYSMGMT-MIB", "apSysMgmtCallId"))
if mibBuilder.loadTexts: apSysMgmtMediaSupervisionTimerExpTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtMediaSupervisionTimerExpTrap.setDescription(" The trap will be generated when a media supervision timer\n\t\thas expired.  This behavior is disabled by default but may\n\t\tbe enabled by changing the 'media-supervision-traps'\n\t\tparameter of the 'media-manager' configuration element.  The\n\t\tincluded object is the call identifier for the call which had\n\t\tthe timer expire.")
apSysMgmntH248AssociationLostTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 35)).setObjects(("APSYSMGMT-MIB", "apSysMgmtBorderGatewayId"))
if mibBuilder.loadTexts: apSysMgmntH248AssociationLostTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmntH248AssociationLostTrap.setDescription(' This trap will be generated when an H248 control\n\t\tassociation between a border gateway and session controller\n\t\tis lost.  The included object is the border gateway\n\t\tidentifier.')
apSysMgmntH248AssociationLostClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 36)).setObjects(("APSYSMGMT-MIB", "apSysMgmtBorderGatewayId"))
if mibBuilder.loadTexts: apSysMgmntH248AssociationLostClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmntH248AssociationLostClearTrap.setDescription(' This trap will be generated when an H248 control\n\t\tassociation between a border gateway and session controller\n\t\thas been restored.  The included object is the border\n\t\tgateway identifier.')
apSysMgmtRFactorBelowThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 37)).setObjects(("APSYSMGMT-MIB", "apSysMgmtRFactor"), ("APSYSMGMT-MIB", "apSysMgmtCallId"))
if mibBuilder.loadTexts: apSysMgmtRFactorBelowThresholdTrap.setStatus('obsolete')
if mibBuilder.loadTexts: apSysMgmtRFactorBelowThresholdTrap.setDescription(' This trap will be generated when a call using the\n\t\tvq-qos statistics gathering function determines that\n\t\tthe R-factor has gone below a configured threshold.\n\t\tThe included objects are the current RFactor value\n\t\tand a call identifier.')
apSysMgmtRFactorBelowThresholdClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 38)).setObjects(("APSYSMGMT-MIB", "apSysMgmtCallId"))
if mibBuilder.loadTexts: apSysMgmtRFactorBelowThresholdClearTrap.setStatus('obsolete')
if mibBuilder.loadTexts: apSysMgmtRFactorBelowThresholdClearTrap.setDescription(' This trap will be generated when a call using the\n\t\tvq-qos statistics gathering function determines that\n\t\tthe R-factor has recovered after having gone below a \n\t\tconfigurable threshold.  The included object is a call\n\t\tidentifier')
apSysMgmtSurrogateRegFailed = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 39)).setObjects(("APSYSMGMT-MIB", "apSysMgmtSurrogateRegHost"), ("APSYSMGMT-MIB", "apSysMgmtSurrogateRegAor"))
if mibBuilder.loadTexts: apSysMgmtSurrogateRegFailed.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSurrogateRegFailed.setDescription(' The trap will be generated if a surrogate registration\n\t        failed after the maximum configured attempts.')
apSysMgmtRealmMinutesExceedTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 40)).setObjects(("APSYSMGMT-MIB", "apSysMgmtRealmID"))
if mibBuilder.loadTexts: apSysMgmtRealmMinutesExceedTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRealmMinutesExceedTrap.setDescription(' The trap will be generated if monthly minutes exceed for a realm.')
apSysMgmtRealmMinutesExceedClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 41)).setObjects(("APSYSMGMT-MIB", "apSysMgmtRealmID"))
if mibBuilder.loadTexts: apSysMgmtRealmMinutesExceedClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRealmMinutesExceedClearTrap.setDescription(' The trap will be generated if monthly minutes reset.')
apSysMgmtLDAPStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 42)).setObjects(("APSYSMGMT-MIB", "apLDAPConfigName"), ("APSYSMGMT-MIB", "apLDAPServerIpAddress"), ("APSYSMGMT-MIB", "apLDAPServerStatus"))
if mibBuilder.loadTexts: apSysMgmtLDAPStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtLDAPStatusChangeTrap.setDescription(' The trap will be generated if the reachability status of an \n\t\tLDAP server changes.')
apSysMgmtNTPClockSkewTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 43))
if mibBuilder.loadTexts: apSysMgmtNTPClockSkewTrap.setStatus('obsolete')
if mibBuilder.loadTexts: apSysMgmtNTPClockSkewTrap.setDescription(' The trap will be generated if NTP has to adjust the clock by\n\t        more than 1000 seconds.\n\n\t\tThe trap is no longer supported in Linux-based platforms \n\t\tdue to third party NTP server limitations.')
apSysMgmtCollectorPushSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 44)).setObjects(("APSYSMGMT-MIB", "apSysMgmtCollectorPushNodeName"), ("APSYSMGMT-MIB", "apSysMgmtCollectorPushUniqueFileName"), ("APSYSMGMT-MIB", "apSysMgmtCollectorPushReceiverAddress"))
if mibBuilder.loadTexts: apSysMgmtCollectorPushSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtCollectorPushSuccessTrap.setDescription(' The trap will be generated when the collector completes a push\n            operation successfully.')
apSysMgmtRealmStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 45)).setObjects(("APSYSMGMT-MIB", "apSysMgmtRealmName"), ("APSYSMGMT-MIB", "apSysMgmtRealmStatusReason"))
if mibBuilder.loadTexts: apSysMgmtRealmStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRealmStatusChangeTrap.setDescription(' The trap will be generated when there is a change\n\t\tin the status of the realm constraints.')
apSysMgmtRegCacheThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 46)).setObjects(("APSYSMGMT-MIB", "apSysSipStatsActiveLocalContacts"), ("APSYSMGMT-MIB", "apSysRegCacheLimit"))
if mibBuilder.loadTexts: apSysMgmtRegCacheThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRegCacheThresholdTrap.setDescription('The trap will be generated when the number of contacts stored \n\t    in the registration cache exceeds the configured threshold.')
apSysMgmtRegCacheThresholdClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 47)).setObjects(("APSYSMGMT-MIB", "apSysSipStatsActiveLocalContacts"), ("APSYSMGMT-MIB", "apSysRegCacheLimit"))
if mibBuilder.loadTexts: apSysMgmtRegCacheThresholdClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRegCacheThresholdClearTrap.setDescription('The trap will be generated when the number of contacts stored \n\t    in the registration cache falls below the configured threshold.')
apSysMgmtShortSessionExceedTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 48)).setObjects(("APSYSMGMT-MIB", "apSysMgmtRealmID"))
if mibBuilder.loadTexts: apSysMgmtShortSessionExceedTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtShortSessionExceedTrap.setDescription('The trap will be generated when the amount of short sessions\n\t\tin a realm exceeds the short session threshold within the\n\t\tshort session window.')
apSysMgmtGatewaySynchronizedTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 49)).setObjects(("APSYSMGMT-MIB", "apSysMgmtGatewaySynchronized"))
if mibBuilder.loadTexts: apSysMgmtGatewaySynchronizedTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtGatewaySynchronizedTrap.setDescription('The trap will be generated when the default gateway is synchronized in the ARP table.')
apSysMgmtCallRecordingStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 50)).setObjects(("APSYSMGMT-MIB", "apSysCallRecordingServerName"), ("APSYSMGMT-MIB", "apSysCallRecordingServerState"))
if mibBuilder.loadTexts: apSysMgmtCallRecordingStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtCallRecordingStateChangeTrap.setDescription('The trap will be generated when a call recording server\n                changes state.')
apSysMgmtRealmIcmpFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 51)).setObjects(("APSYSMGMT-MIB", "apSysMgmtRealmID"))
if mibBuilder.loadTexts: apSysMgmtRealmIcmpFailureTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRealmIcmpFailureTrap.setDescription(' The trap will be generated when ICMP heartbeat failure.')
apSysMgmtRealmIcmpFailureClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 52)).setObjects(("APSYSMGMT-MIB", "apSysMgmtRealmID"))
if mibBuilder.loadTexts: apSysMgmtRealmIcmpFailureClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRealmIcmpFailureClearTrap.setDescription(' The trap will be generated ICMP heartbeat failure cleared.')
apSysMgmtCDRPushReceiverFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 53)).setObjects(("APSYSMGMT-MIB", "apSysCDRPushReceiverAddressType"), ("APSYSMGMT-MIB", "apSysCDRPushReceiverAddress"), ("APSYSMGMT-MIB", "apSysCDRPushReceiverFailureReasonCode"))
if mibBuilder.loadTexts: apSysMgmtCDRPushReceiverFailureTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtCDRPushReceiverFailureTrap.setDescription(' The trap will be generated when an enabled cdr push receiver fails.')
apSysMgmtCDRPushReceiverFailureClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 54)).setObjects(("APSYSMGMT-MIB", "apSysCDRPushReceiverAddressType"), ("APSYSMGMT-MIB", "apSysCDRPushReceiverAddress"))
if mibBuilder.loadTexts: apSysMgmtCDRPushReceiverFailureClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtCDRPushReceiverFailureClearTrap.setDescription(' The trap will be generated when an enabled cdr push receiver resumes normal operation after a failure.')
apSysMgmtCDRPushAllReceiversFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 55))
if mibBuilder.loadTexts: apSysMgmtCDRPushAllReceiversFailureTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtCDRPushAllReceiversFailureTrap.setDescription(' The trap will be generated when all enabled cdr push receivers fail.')
apSysMgmtCDRPushAllReceiversFailureClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 56))
if mibBuilder.loadTexts: apSysMgmtCDRPushAllReceiversFailureClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtCDRPushAllReceiversFailureClearTrap.setDescription(' The trap will be generated when one or more enabled cdr push receivers return to normal operation,\n          after failures were encountered on all receivers.')
apSysMgmtRejectedMesagesThresholdExeededTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 57)).setObjects(("APSYSMGMT-MIB", "apSysRejectedMessages"))
if mibBuilder.loadTexts: apSysMgmtRejectedMesagesThresholdExeededTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRejectedMesagesThresholdExeededTrap.setDescription(' The trap will be generated when the number of rejected messages exceed the configured threshold within the configured window.')
apSysMgmtAdminAuditLogFullTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 58)).setObjects(("APSYSMGMT-MIB", "apSysAdminAuditLogFullReason"), ("APSYSMGMT-MIB", "apSysAdminFileName"))
if mibBuilder.loadTexts: apSysMgmtAdminAuditLogFullTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtAdminAuditLogFullTrap.setDescription(' The trap will be generated when one of the audit log full threshold [time interval/file-size/percentage-full] is satisfied.')
apSysMgmtAdminAuditLogFullClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 59))
if mibBuilder.loadTexts: apSysMgmtAdminAuditLogFullClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtAdminAuditLogFullClearTrap.setDescription(' The trap will be generated when free audit log storage space becomes available.')
apSysMgmtAdminAuditPushFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 60)).setObjects(("APSYSMGMT-MIB", "apSysAddressType"), ("APSYSMGMT-MIB", "apSysAddress"), ("APSYSMGMT-MIB", "apSysReasonCode"))
if mibBuilder.loadTexts: apSysMgmtAdminAuditPushFailTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtAdminAuditPushFailTrap.setDescription(' The trap will be generated when audit file transfer fails.')
apSysMgmtAdminAuditPushFailClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 61)).setObjects(("APSYSMGMT-MIB", "apSysAddressType"), ("APSYSMGMT-MIB", "apSysAddress"))
if mibBuilder.loadTexts: apSysMgmtAdminAuditPushFailClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtAdminAuditPushFailClearTrap.setDescription(' The trap will be generated when audit file is successfully transferred.')
apSysMgmtAdminWriteFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 62)).setObjects(("APSYSMGMT-MIB", "apSysAdminWriteErrorCode"), ("APSYSMGMT-MIB", "apSysAdminFileName"))
if mibBuilder.loadTexts: apSysMgmtAdminWriteFailTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtAdminWriteFailTrap.setDescription(' The trap will be generated when a write to file fails.')
apSysMgmtAdminWriteFailClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 63))
if mibBuilder.loadTexts: apSysMgmtAdminWriteFailClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtAdminWriteFailClearTrap.setDescription(' The trap will be generated when a write to file succeeds.')
apSysMgmtAdminAuthLockoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 64)).setObjects(("APSYSMGMT-MIB", "apSysMgmtAuthFailProto"))
if mibBuilder.loadTexts: apSysMgmtAdminAuthLockoutTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtAdminAuthLockoutTrap.setDescription(' The trap will be generated on system lockout after multiple auth failures.')
apSysMgmtLPLookupExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 65))
if mibBuilder.loadTexts: apSysMgmtLPLookupExceededTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtLPLookupExceededTrap.setDescription(' The trap will be generated the first time the Additional\n\tLocal Policy Lookups limit is reached  in the recent window\n\tperiod.  This trap will only occur once during a window\n\tperiod.')
apSysMgmtPhyUtilThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 66)).setObjects(("IF-MIB", "ifIndex"), ("APSYSMGMT-MIB", "apSysMgmtPhyUtilCurrent"), ("APSYSMGMT-MIB", "apSysMgmtPhyUtilMinorThreshold"), ("APSYSMGMT-MIB", "apSysMgmtPhyUtilMajorThreshold"), ("APSYSMGMT-MIB", "apSysMgmtPhyUtilCriticalThreshold"), ("APSYSMGMT-MIB", "apSysMgmtPhyRejectOverUtil"))
if mibBuilder.loadTexts: apSysMgmtPhyUtilThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtPhyUtilThresholdTrap.setDescription(" The trap will be generated when the media-port's utilization\n        crosses a configured threshold. This trap will indicate if the\n        OverloadProtection feature is turned active.")
apSysMgmtPhyUtilThresholdClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 67)).setObjects(("IF-MIB", "ifIndex"), ("APSYSMGMT-MIB", "apSysMgmtPhyUtilCurrent"), ("APSYSMGMT-MIB", "apSysMgmtPhyUtilMinorThreshold"), ("APSYSMGMT-MIB", "apSysMgmtPhyUtilMajorThreshold"), ("APSYSMGMT-MIB", "apSysMgmtPhyUtilCriticalThreshold"), ("APSYSMGMT-MIB", "apSysMgmtPhyRejectOverUtil"))
if mibBuilder.loadTexts: apSysMgmtPhyUtilThresholdClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtPhyUtilThresholdClearTrap.setDescription(" The trap will be generated once a media-ports' utilization falls\n        below the lowest configured threshold.")
apSysMgmtSpaceAvailThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 68)).setObjects(("APSYSMGMT-MIB", "apSysMgmtSpaceAvailCurrent"), ("APSYSMGMT-MIB", "apSysMgmtSpaceAvailMinorThreshold"), ("APSYSMGMT-MIB", "apSysMgmtSpaceAvailMajorThreshold"), ("APSYSMGMT-MIB", "apSysMgmtSpaceAvailCriticalThreshold"), ("APSYSMGMT-MIB", "apSysMgmtPartitionPath"))
if mibBuilder.loadTexts: apSysMgmtSpaceAvailThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSpaceAvailThresholdTrap.setDescription(' The trap will be generated when the space available on a partition\n        crosses a configured space threshold.')
apSysMgmtSpaceAvailThresholdClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 69)).setObjects(("APSYSMGMT-MIB", "apSysMgmtSpaceAvailCurrent"), ("APSYSMGMT-MIB", "apSysMgmtSpaceAvailMinorThreshold"), ("APSYSMGMT-MIB", "apSysMgmtSpaceAvailMajorThreshold"), ("APSYSMGMT-MIB", "apSysMgmtSpaceAvailCriticalThreshold"), ("APSYSMGMT-MIB", "apSysMgmtPartitionPath"))
if mibBuilder.loadTexts: apSysMgmtSpaceAvailThresholdClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSpaceAvailThresholdClearTrap.setDescription(' The trap will be generated when the space available on a partition\n        falls below the lowest configured space threshold.')
apSysMgmtCdrFileDeleteTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 70)).setObjects(("APSYSMGMT-MIB", "apSysAdminFileName"))
if mibBuilder.loadTexts: apSysMgmtCdrFileDeleteTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtCdrFileDeleteTrap.setDescription(' The trap will be generated when a CDR file is deleted due to lack\n        of space on the partition or the drive exceeds the number of files\n        specified in account-config.')
apSysMgmtSataAccessErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 71))
if mibBuilder.loadTexts: apSysMgmtSataAccessErrorTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSataAccessErrorTrap.setDescription(' The trap will be generated when there is fatal access error on\n          the SATA hard drive.')
apSysMgmtTcaTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 72)).setObjects(("APSYSMGMT-MIB", "apSysMgmtTcaOid"), ("APSYSMGMT-MIB", "apSysMgmtTcaCurrent"), ("APSYSMGMT-MIB", "apSysMgmtTcaMinorThreshold"), ("APSYSMGMT-MIB", "apSysMgmtTcaMajorThreshold"), ("APSYSMGMT-MIB", "apSysMgmtTcaCriticalThreshold"))
if mibBuilder.loadTexts: apSysMgmtTcaTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTcaTrap.setDescription(' The trap will be generated when a Threshold Crossing Alert counter\n        crosses a configured TCA threshold')
apSysMgmtTcaClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 73)).setObjects(("APSYSMGMT-MIB", "apSysMgmtTcaOid"), ("APSYSMGMT-MIB", "apSysMgmtTcaCurrent"), ("APSYSMGMT-MIB", "apSysMgmtTcaMinorThreshold"), ("APSYSMGMT-MIB", "apSysMgmtTcaMajorThreshold"), ("APSYSMGMT-MIB", "apSysMgmtTcaCriticalThreshold"))
if mibBuilder.loadTexts: apSysMgmtTcaClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTcaClearTrap.setDescription(' The trap will be generated when a Threshold Crossing Alert counter\n         has fallen below the lowest configured TCA reset-threshold value')
apSysMgmtExtPolicyServerConnDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 74)).setObjects(("APSYSMGMT-MIB", "apSysEPSName"), ("APSYSMGMT-MIB", "apSysEPSFqdn"), ("APSYSMGMT-MIB", "apSysEPSAddress"), ("APSYSMGMT-MIB", "apSysEPSRealm"), ("APSYSMGMT-MIB", "apSysEPSOperationType"))
if mibBuilder.loadTexts: apSysMgmtExtPolicyServerConnDownTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtExtPolicyServerConnDownTrap.setDescription(' The trap will be generated when a connection to an external-policy-server is lost.')
apSysMgmtExtPolicyServerConnEstTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 75)).setObjects(("APSYSMGMT-MIB", "apSysEPSName"), ("APSYSMGMT-MIB", "apSysEPSFqdn"), ("APSYSMGMT-MIB", "apSysEPSAddress"), ("APSYSMGMT-MIB", "apSysEPSRealm"), ("APSYSMGMT-MIB", "apSysEPSOperationType"))
if mibBuilder.loadTexts: apSysMgmtExtPolicyServerConnEstTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtExtPolicyServerConnEstTrap.setDescription(' The trap will be generated when a connection to an external-policy-server is established.')
apSysMgmtDatabaseRegCacheCapTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 76)).setObjects(("APSYSMGMT-MIB", "apSysSipStatsActiveDatabaseContacts"), ("APSYSMGMT-MIB", "apSysMgmtDatabaseContactMinorThreshold"), ("APSYSMGMT-MIB", "apSysMgmtDatabaseContactMajorThreshold"), ("APSYSMGMT-MIB", "apSysMgmtDatabaseContactCriticalThreshold"), ("APLICENSE-MIB", "apLicenseDatabaseRegCap"))
if mibBuilder.loadTexts: apSysMgmtDatabaseRegCacheCapTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtDatabaseRegCacheCapTrap.setDescription('The trap will be generated when the number of database-type \n            contacts stored in the registration cache exceeds the licensed\n            threshold.')
apSysMgmtDatabaseRegCacheCapClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 77)).setObjects(("APSYSMGMT-MIB", "apSysSipStatsActiveDatabaseContacts"), ("APSYSMGMT-MIB", "apSysMgmtDatabaseContactMinorThreshold"), ("APSYSMGMT-MIB", "apSysMgmtDatabaseContactMajorThreshold"), ("APSYSMGMT-MIB", "apSysMgmtDatabaseContactCriticalThreshold"), ("APLICENSE-MIB", "apLicenseDatabaseRegCap"))
if mibBuilder.loadTexts: apSysMgmtDatabaseRegCacheCapClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtDatabaseRegCacheCapClearTrap.setDescription('The trap will be generated when the number of database-type \n            contacts stored in the registration cache falls below the\n            licensed threshold.')
apSysMgmtTacacsDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 78)).setObjects(("APSYSMGMT-MIB", "apSysMgmtTacacsDown"))
if mibBuilder.loadTexts: apSysMgmtTacacsDownTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTacacsDownTrap.setDescription(' The trap will be generated when all or some configured\n\t\tTACACS servers become unreachable.')
apSysMgmtTacacsDownClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 79))
if mibBuilder.loadTexts: apSysMgmtTacacsDownClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTacacsDownClearTrap.setDescription(' The trap will be generated when all configured TACACS\n\t        servers become reachable again.')
apSysMgmtOCSRDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 80)).setObjects(("APSYSMGMT-MIB", "apSysMgmtOCSRDown"))
if mibBuilder.loadTexts: apSysMgmtOCSRDownTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtOCSRDownTrap.setDescription(' The trap will be generated if all or some configured\n\t\tOCSR servers haved timed out from a OCSR Server.')
apSysMgmtOCSRDownClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 81))
if mibBuilder.loadTexts: apSysMgmtOCSRDownClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtOCSRDownClearTrap.setDescription(' The trap will be generated when all configured OCSR\n\t        accounting servers have resumed communication after any or\n\t\tall have previously timed out.')
apSysMgmtSipInterfaceRegCacheThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 82)).setObjects(("APSYSMGMT-MIB", "apSysMgmtSipInterfaceRealmName"), ("APSYSMGMT-MIB", "apSigRealmStatsActiveLocalContacts"), ("APSYSMGMT-MIB", "apSysMgmtSipInterfaceRegCacheLimit"))
if mibBuilder.loadTexts: apSysMgmtSipInterfaceRegCacheThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSipInterfaceRegCacheThresholdTrap.setDescription('The trap will be generated when the number of contacts stored\n            in the registration cache exceeds the configured threshold for the sip interface.')
apSysMgmtSipInterfaceRegCacheThresholdClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 83)).setObjects(("APSYSMGMT-MIB", "apSysMgmtSipInterfaceRealmName"), ("APSYSMGMT-MIB", "apSigRealmStatsActiveLocalContacts"), ("APSYSMGMT-MIB", "apSysMgmtSipInterfaceRegCacheLimit"))
if mibBuilder.loadTexts: apSysMgmtSipInterfaceRegCacheThresholdClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSipInterfaceRegCacheThresholdClearTrap.setDescription('The trap will be generated when the number of contacts stored\n            in the registration cache falls below the configured threshold for the sip interface.')
apSysMgmtH248PortMapUsageTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 84)).setObjects(("APSYSMGMT-MIB", "apSysMgmtH248MgcName"), ("APSYSMGMT-MIB", "apSysMgmtH248Realm"), ("APSYSMGMT-MIB", "apSysMgmtH248PortMapUsage"))
if mibBuilder.loadTexts: apSysMgmtH248PortMapUsageTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtH248PortMapUsageTrap.setDescription('The trap will be geenerated when the port map usage on H.248 core side\n\t      Exceeds 90%')
apSysMgmtH248PortMapUsageClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 85)).setObjects(("APSYSMGMT-MIB", "apSysMgmtH248MgcName"), ("APSYSMGMT-MIB", "apSysMgmtH248Realm"))
if mibBuilder.loadTexts: apSysMgmtH248PortMapUsageClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtH248PortMapUsageClearTrap.setDescription(' The trap will be generated when the port map usage on H.248 core side\n              Goes down below 90%..')
apSysMgmtCPULoadAvgTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 86)).setObjects(("APSYSMGMT-MIB", "apSysCPULoadAvgFiveMinute"))
if mibBuilder.loadTexts: apSysMgmtCPULoadAvgTrap.setStatus('obsolete')
if mibBuilder.loadTexts: apSysMgmtCPULoadAvgTrap.setDescription('The trap will be generated when CPU Load Average Alarm exceeds its minor alarm threshold.')
apSysMgmtCPULoadAvgClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 87)).setObjects(("APSYSMGMT-MIB", "apSysCPULoadAvgFiveMinute"))
if mibBuilder.loadTexts: apSysMgmtCPULoadAvgClearTrap.setStatus('obsolete')
if mibBuilder.loadTexts: apSysMgmtCPULoadAvgClearTrap.setDescription('The trap will be generated when CPU Load Average deceeds its minor alarm threshold.')
apSysMgmtCSVCfgSaveFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 6, 0, 88)).setObjects(("APSYSMGMT-MIB", "apSysMgmtCSVCfgSaveFail"))
if mibBuilder.loadTexts: apSysMgmtCSVCfgSaveFailTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtCSVCfgSaveFailTrap.setDescription(' The trap will be generated if an error occurs while the\n                system is trying to Upload Csv Configuration to memory.')
apSysMgmtDOSObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 7))
apSysMgmtDOSNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 7, 1))
apSysMgmtDOSIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 7, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtDOSIpAddress.setStatus('deprecated')
if mibBuilder.loadTexts: apSysMgmtDOSIpAddress.setDescription('The blocked IP address.')
apSysMgmtDOSRealmID = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtDOSRealmID.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtDOSRealmID.setDescription('The blocked Realm ID.')
apSysMgmtDOSFromUri = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtDOSFromUri.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtDOSFromUri.setDescription('The FROM header of the message that caused the block (if available).')
apSysMgmtDOSInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 7, 1, 4), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtDOSInetAddressType.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtDOSInetAddressType.setDescription('The blocked IP address family.')
apSysMgmtDOSInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 7, 1, 5), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtDOSInetAddress.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtDOSInetAddress.setDescription('The blocked IP address.')
apSysMgmtDOSReason = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtDOSReason.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtDOSReason.setDescription('The reason for demotion.')
apSysMgmtDOSNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 8))
apSysMgmtDOSNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 8, 0))
apSysMgmtDOSTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 8, 0, 1)).setObjects(("APSYSMGMT-MIB", "apSysMgmtDOSIpAddress"), ("APSYSMGMT-MIB", "apSysMgmtDOSRealmID"))
if mibBuilder.loadTexts: apSysMgmtDOSTrap.setStatus('obsolete')
if mibBuilder.loadTexts: apSysMgmtDOSTrap.setDescription(' The trap will generated if IP address and realm ID is denied of service.\n\n\t      This trap is for IPv4 only and being obsoleted and replaced by \n\t      apSysMgmtInetAddrDOSTrap which supports IPv4 and IPv6 addresses.')
apSysMgmtExpDOSTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 8, 0, 2)).setObjects(("APSYSMGMT-MIB", "apSysMgmtDOSIpAddress"), ("APSYSMGMT-MIB", "apSysMgmtDOSRealmID"), ("APSYSMGMT-MIB", "apSysMgmtDOSFromUri"))
if mibBuilder.loadTexts: apSysMgmtExpDOSTrap.setStatus('deprecated')
if mibBuilder.loadTexts: apSysMgmtExpDOSTrap.setDescription('This trap is generated when an IP is placed on a deny list due\n\t      to denial-of-service attempts, and provides the ip address that\n\t      has been demoted, the realm-id of that IP, and (if available) \n\t      the URI portion of the SIP From header of the message that\n\t      caused the demotion.')
apSysMgmtInetAddrDOSTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 8, 0, 3)).setObjects(("APSYSMGMT-MIB", "apSysMgmtDOSInetAddressType"), ("APSYSMGMT-MIB", "apSysMgmtDOSInetAddress"), ("APSYSMGMT-MIB", "apSysMgmtDOSRealmID"), ("APSYSMGMT-MIB", "apSysMgmtDOSFromUri"))
if mibBuilder.loadTexts: apSysMgmtInetAddrDOSTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtInetAddrDOSTrap.setDescription('This trap is generated when an IP is placed on a deny list due\n\t      to denial-of-service attempts, and provides the ip address that\n\t      has been demoted, the realm-id of that IP, and (if available) \n\t      the URI portion of the SIP From header of the message that\n\t      caused the demotion.\n\n\t      This trap is a replacement for apSysMgmtDOSTrap and \n\t      supports both IPv4 and IPv6 addresses.')
apSysMgmtInetAddrWithReasonDOSTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 8, 0, 4)).setObjects(("APSYSMGMT-MIB", "apSysMgmtDOSInetAddressType"), ("APSYSMGMT-MIB", "apSysMgmtDOSInetAddress"), ("APSYSMGMT-MIB", "apSysMgmtDOSRealmID"), ("APSYSMGMT-MIB", "apSysMgmtDOSFromUri"), ("APSYSMGMT-MIB", "apSysMgmtDOSReason"))
if mibBuilder.loadTexts: apSysMgmtInetAddrWithReasonDOSTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtInetAddrWithReasonDOSTrap.setDescription('This trap is generated when an IP is placed on a deny list due\n\t      to denial-of-service attempts, and provides the ip address that\n\t      has been demoted, the realm-id of that IP, (if available) \n\t      the URI portion of the SIP From header of the message that\n\t      caused the demotion and the reason for demotion.')
apSysMgmtInetAddrTrustedToUntrustedDOSTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 8, 0, 5)).setObjects(("APSYSMGMT-MIB", "apSysMgmtDOSInetAddressType"), ("APSYSMGMT-MIB", "apSysMgmtDOSInetAddress"), ("APSYSMGMT-MIB", "apSysMgmtDOSRealmID"), ("APSYSMGMT-MIB", "apSysMgmtDOSFromUri"), ("APSYSMGMT-MIB", "apSysMgmtDOSReason"))
if mibBuilder.loadTexts: apSysMgmtInetAddrTrustedToUntrustedDOSTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtInetAddrTrustedToUntrustedDOSTrap.setDescription('This trap is generated when an IP is placed on a untrusted list from trusted list\n\t      , and provides the ip address that\n\t      has been demoted, the realm-id of that IP, (if available) \n\t      the URI portion of the SIP From header of the message that caused the demotion.')
apSysMgmtSipRejectionObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 9))
apSysMgmtSipRejectionNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 9, 1))
apSysMgmtSipRejFromUriUser = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 9, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSipRejFromUriUser.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSipRejFromUriUser.setDescription('The user portion of the FROM URI of the rejected SIP request')
apSysMgmtSipRejToUriUser = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSipRejToUriUser.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSipRejToUriUser.setDescription('The user portion of the TO URI of the rejected SIP request')
apSysMgmtSipRejRequestUri = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSipRejRequestUri.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSipRejRequestUri.setDescription('The Request URI of the rejected SIP request')
apSysMgmtSipRejContactUri = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSipRejContactUri.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSipRejContactUri.setDescription('the contact uri of the rejected sip request')
apSysMgmtSipRejIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 9, 1, 5), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSipRejIpAddress.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSipRejIpAddress.setDescription('The remote IP address of the rejected SIP request')
apSysMgmtSipRejMsgType = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("registration", 0), ("call", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSipRejMsgType.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSipRejMsgType.setDescription('The type of SIP Request.')
apSysMgmtSipRejMethod = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 9, 1, 7), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSipRejMethod.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSipRejMethod.setDescription('The method of the SIP rejection message.')
apSysMgmtSipRejReason = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 2, 9, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSysMgmtSipRejReason.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSipRejReason.setDescription('The REASON string of the SIP rejection message.')
apSysMgmtSipRejectionNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 10))
apSysMgmtSipRejectionNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 10, 0))
apSysMgmtSipRejectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 2, 10, 0, 1)).setObjects(("APSYSMGMT-MIB", "apSysMgmtSipRejFromUriUser"), ("APSYSMGMT-MIB", "apSysMgmtSipRejToUriUser"), ("APSYSMGMT-MIB", "apSysMgmtSipRejRequestUri"), ("APSYSMGMT-MIB", "apSysMgmtSipRejContactUri"), ("APSYSMGMT-MIB", "apSysMgmtSipRejIpAddress"), ("APSYSMGMT-MIB", "apSysMgmtSipRejMsgType"), ("APSYSMGMT-MIB", "apSysMgmtSipRejMethod"), ("APSYSMGMT-MIB", "apSysMgmtSipRejReason"))
if mibBuilder.loadTexts: apSysMgmtSipRejectionTrap.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSipRejectionTrap.setDescription('This trap is sent when either a SIP Invite or \n\t      Registration request fails.')
apSystemManagementConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4))
apSystemManagementCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 1))
apSystemManagementGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2))
apSystemManagementNotificationsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3))
apSystemManagementMonitorGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 4))
apSysMgmtGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 1)).setObjects(("APSYSMGMT-MIB", "apSysCPUUtil"), ("APSYSMGMT-MIB", "apSysMemoryUtil"), ("APSYSMGMT-MIB", "apSysHealthScore"), ("APSYSMGMT-MIB", "apSysRedundancy"), ("APSYSMGMT-MIB", "apSysGlobalConSess"), ("APSYSMGMT-MIB", "apSysGlobalCPS"), ("APSYSMGMT-MIB", "apSysNATCapacity"), ("APSYSMGMT-MIB", "apSysARPCapacity"), ("APSYSMGMT-MIB", "apSysState"), ("APSYSMGMT-MIB", "apSysLicenseCapacity"), ("APSYSMGMT-MIB", "apSysCurrentEndptsDenied"), ("APSYSMGMT-MIB", "apSysXCodeCapacity"), ("APSYSMGMT-MIB", "apSysXCodeAMRCapacity"), ("APSYSMGMT-MIB", "apSysXCodeAMRWBCapacity"), ("APSYSMGMT-MIB", "apSysAcpTlsEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtGeneralGroup = apSysMgmtGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtGeneralGroup.setDescription('A collection of objects providing the system manager MIB \n\t\tcapability.')
apSysMgmtCombinedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 2)).setObjects(("APSYSMGMT-MIB", "apCombinedStatsSessionAgentIndex"), ("APSYSMGMT-MIB", "apCombinedStatsSessionAgentHostname"), ("APSYSMGMT-MIB", "apCombinedStatsSessionAgentType"), ("APSYSMGMT-MIB", "apCombinedStatsCurrentActiveSessionsInbound"), ("APSYSMGMT-MIB", "apCombinedStatsCurrentSessionRateInbound"), ("APSYSMGMT-MIB", "apCombinedStatsCurrentActiveSessionsOutbound"), ("APSYSMGMT-MIB", "apCombinedStatsCurrentSessionRateOutbound"), ("APSYSMGMT-MIB", "apCombinedStatsTotalSessionsInbound"), ("APSYSMGMT-MIB", "apCombinedStatsTotalSessionsNotAdmittedInbound"), ("APSYSMGMT-MIB", "apCombinedStatsPeriodHighInbound"), ("APSYSMGMT-MIB", "apCombinedStatsAverageRateInbound"), ("APSYSMGMT-MIB", "apCombinedStatsTotalSessionsOutbound"), ("APSYSMGMT-MIB", "apCombinedStatsTotalSessionsNotAdmittedOutbound"), ("APSYSMGMT-MIB", "apCombinedStatsPeriodHighOutbound"), ("APSYSMGMT-MIB", "apCombinedStatsAverageRateOutbound"), ("APSYSMGMT-MIB", "apCombinedStatsMaxBurstRate"), ("APSYSMGMT-MIB", "apCombinedStatsPeriodSeizures"), ("APSYSMGMT-MIB", "apCombinedStatsPeriodAnswers"), ("APSYSMGMT-MIB", "apCombinedStatsPeriodASR"), ("APSYSMGMT-MIB", "apCombinedStatsAverageLatency"), ("APSYSMGMT-MIB", "apCombinedStatsMaxLatency"), ("APSYSMGMT-MIB", "apCombinedStatsSessionAgentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtCombinedGroup = apSysMgmtCombinedGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtCombinedGroup.setDescription('A collection of statistics for session H323 and SIP sessions.')
apSysMgmtSipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 3)).setObjects(("APSYSMGMT-MIB", "apSipSAStatsSessionAgentIndex"), ("APSYSMGMT-MIB", "apSipSAStatsSessionAgentHostname"), ("APSYSMGMT-MIB", "apSipSAStatsSessionAgentType"), ("APSYSMGMT-MIB", "apSipSAStatsCurrentActiveSessionsInbound"), ("APSYSMGMT-MIB", "apSipSAStatsCurrentSessionRateInbound"), ("APSYSMGMT-MIB", "apSipSAStatsCurrentActiveSessionsOutbound"), ("APSYSMGMT-MIB", "apSipSAStatsCurrentSessionRateOutbound"), ("APSYSMGMT-MIB", "apSipSAStatsTotalSessionsInbound"), ("APSYSMGMT-MIB", "apSipSAStatsTotalSessionsNotAdmittedInbound"), ("APSYSMGMT-MIB", "apSipSAStatsPeriodHighInbound"), ("APSYSMGMT-MIB", "apSipSAStatsAverageRateInbound"), ("APSYSMGMT-MIB", "apSipSAStatsTotalSessionsOutbound"), ("APSYSMGMT-MIB", "apSipSAStatsTotalSessionsNotAdmittedOutbound"), ("APSYSMGMT-MIB", "apSipSAStatsPeriodHighOutbound"), ("APSYSMGMT-MIB", "apSipSAStatsAverageRateOutbound"), ("APSYSMGMT-MIB", "apSipSAStatsMaxBurstRate"), ("APSYSMGMT-MIB", "apSipSAStatsPeriodSeizures"), ("APSYSMGMT-MIB", "apSipSAStatsPeriodAnswers"), ("APSYSMGMT-MIB", "apSipSAStatsPeriodASR"), ("APSYSMGMT-MIB", "apSipSAStatsAverageLatency"), ("APSYSMGMT-MIB", "apSipSAStatsMaxLatency"), ("APSYSMGMT-MIB", "apSipSAStatsSessionAgentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtSipGroup = apSysMgmtSipGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSipGroup.setDescription('A collection of statistics for SIP sessions.')
apSysMgmtH323Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 4)).setObjects(("APSYSMGMT-MIB", "apH323SAStatsSessionAgentIndex"), ("APSYSMGMT-MIB", "apH323SAStatsSessionAgentHostname"), ("APSYSMGMT-MIB", "apH323SAStatsSessionAgentType"), ("APSYSMGMT-MIB", "apH323SAStatsCurrentActiveSessionsInbound"), ("APSYSMGMT-MIB", "apH323SAStatsCurrentSessionRateInbound"), ("APSYSMGMT-MIB", "apH323SAStatsCurrentActiveSessionsOutbound"), ("APSYSMGMT-MIB", "apH323SAStatsCurrentSessionRateOutbound"), ("APSYSMGMT-MIB", "apH323SAStatsTotalSessionsInbound"), ("APSYSMGMT-MIB", "apH323SAStatsTotalSessionsNotAdmittedInbound"), ("APSYSMGMT-MIB", "apH323SAStatsPeriodHighInbound"), ("APSYSMGMT-MIB", "apH323SAStatsAverageRateInbound"), ("APSYSMGMT-MIB", "apH323SAStatsTotalSessionsOutbound"), ("APSYSMGMT-MIB", "apH323SAStatsTotalSessionsNotAdmittedOutbound"), ("APSYSMGMT-MIB", "apH323SAStatsPeriodHighOutbound"), ("APSYSMGMT-MIB", "apH323SAStatsAverageRateOutbound"), ("APSYSMGMT-MIB", "apH323SAStatsMaxBurstRate"), ("APSYSMGMT-MIB", "apH323SAStatsPeriodSeizures"), ("APSYSMGMT-MIB", "apH323SAStatsPeriodAnswers"), ("APSYSMGMT-MIB", "apH323SAStatsPeriodASR"), ("APSYSMGMT-MIB", "apH323SAStatsAverageLatency"), ("APSYSMGMT-MIB", "apH323SAStatsMaxLatency"), ("APSYSMGMT-MIB", "apH323SAStatsSessionAgentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtH323Group = apSysMgmtH323Group.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtH323Group.setDescription('A collection of statistics for H323 sessions.')
apSysMgmtSigRealmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 5)).setObjects(("APSYSMGMT-MIB", "apSigRealmStatsRealmIndex"), ("APSYSMGMT-MIB", "apSigRealmStatsRealmName"), ("APSYSMGMT-MIB", "apSigRealmStatsCurrentActiveSessionsInbound"), ("APSYSMGMT-MIB", "apSigRealmStatsCurrentSessionRateInbound"), ("APSYSMGMT-MIB", "apSigRealmStatsCurrentActiveSessionsOutbound"), ("APSYSMGMT-MIB", "apSigRealmStatsCurrentSessionRateOutbound"), ("APSYSMGMT-MIB", "apSigRealmStatsTotalSessionsInbound"), ("APSYSMGMT-MIB", "apSigRealmStatsTotalSessionsNotAdmittedInbound"), ("APSYSMGMT-MIB", "apSigRealmStatsPeriodHighInbound"), ("APSYSMGMT-MIB", "apSigRealmStatsAverageRateInbound"), ("APSYSMGMT-MIB", "apSigRealmStatsTotalSessionsOutbound"), ("APSYSMGMT-MIB", "apSigRealmStatsTotalSessionsNotAdmittedOutbound"), ("APSYSMGMT-MIB", "apSigRealmStatsPeriodHighOutbound"), ("APSYSMGMT-MIB", "apSigRealmStatsAverageRateOutbound"), ("APSYSMGMT-MIB", "apSigRealmStatsMaxBurstRate"), ("APSYSMGMT-MIB", "apSigRealmStatsPeriodSeizures"), ("APSYSMGMT-MIB", "apSigRealmStatsPeriodAnswers"), ("APSYSMGMT-MIB", "apSigRealmStatsPeriodASR"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtSigRealmGroup = apSysMgmtSigRealmGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSigRealmGroup.setDescription('A collection of statistics for realms.')
apSysMgmtCtrlStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 6)).setObjects(("APSYSMGMT-MIB", "apNetMgmtCtrlStatsName"), ("APSYSMGMT-MIB", "apNetMgmtCtrlStatsType"), ("APSYSMGMT-MIB", "apNetMgmtCtrlStatsIncomingTotal"), ("APSYSMGMT-MIB", "apNetMgmtCtrlStatsRejectedTotal"), ("APSYSMGMT-MIB", "apNetMgmtCtrlStatsDivertedTotal"), ("APSYSMGMT-MIB", "apNetMgmtCtrlStatsIncomingCurrent"), ("APSYSMGMT-MIB", "apNetMgmtCtrlStatsRejectedCurrent"), ("APSYSMGMT-MIB", "apNetMgmtCtrlStatsDivertedCurrent"), ("APSYSMGMT-MIB", "apNetMgmtCtrlStatsIncomingPeriodMax"), ("APSYSMGMT-MIB", "apNetMgmtCtrlStatsRejectedPeriodMax"), ("APSYSMGMT-MIB", "apNetMgmtCtrlStatsDivertedPeriodMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtCtrlStatsGroup = apSysMgmtCtrlStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtCtrlStatsGroup.setDescription('A collection of stats reflecting network management\n\t\tcontrols.')
apSysMgmtENUMServerStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 7)).setObjects(("APSYSMGMT-MIB", "apENUMConfigName"), ("APSYSMGMT-MIB", "apENUMServerIpAddress"), ("APSYSMGMT-MIB", "apENUMServerStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtENUMServerStatusGroup = apSysMgmtENUMServerStatusGroup.setStatus('obsolete')
if mibBuilder.loadTexts: apSysMgmtENUMServerStatusGroup.setDescription('Report the status of configured ENUM servers.')
apSysMgmtNSEPStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 8)).setObjects(("APSYSMGMT-MIB", "apNSEPStatsCurrentActiveSessionsInbound"), ("APSYSMGMT-MIB", "apNSEPStatsTotalSessionsInbound"), ("APSYSMGMT-MIB", "apNSEPStatsPeriodHighInbound"), ("APSYSMGMT-MIB", "apNSEPStatsPeriod"), ("APSYSMGMT-MIB", "apNSEPStatsRPHValue"), ("APSYSMGMT-MIB", "apNSEPStatsRPHCurrentActiveSessionsInbound"), ("APSYSMGMT-MIB", "apNSEPStatsRPHTotalSessionsInbound"), ("APSYSMGMT-MIB", "apNSEPStatsRPHPeriodHighInbound"), ("APSYSMGMT-MIB", "apNSEPStatsRPHTotalSessionsNotAdmittedInbound"), ("APSYSMGMT-MIB", "apNSEPStatsRPHCurrentActiveSessionsOutbound"), ("APSYSMGMT-MIB", "apNSEPStatsRPHTotalSessionsOutbound"), ("APSYSMGMT-MIB", "apNSEPStatsRPHPeriodHighOutbound"), ("APSYSMGMT-MIB", "apNSEPStatsRPHTotalSessionsNotAdmittedOutbound"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtNSEPStatsGroup = apSysMgmtNSEPStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtNSEPStatsGroup.setDescription('Objects to monitor NS/EP sessions.')
apSysMgmtExtSigRealmStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 9)).setObjects(("APSYSMGMT-MIB", "apSigRealmStatsMinutesLeft"), ("APSYSMGMT-MIB", "apSigRealmStatsMinutesReject"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtExtSigRealmStatsGroup = apSysMgmtExtSigRealmStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtExtSigRealmStatsGroup.setDescription('Objects added to the realm table for extended stat\n\t\treporting.')
apSysMgmtLDAPServerStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 10)).setObjects(("APSYSMGMT-MIB", "apLDAPConfigName"), ("APSYSMGMT-MIB", "apLDAPServerIpAddress"), ("APSYSMGMT-MIB", "apLDAPServerStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtLDAPServerStatusGroup = apSysMgmtLDAPServerStatusGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtLDAPServerStatusGroup.setDescription('Objects to monitor NS/EP sessions.')
apSysMgmtRegistrationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 11)).setObjects(("APSYSMGMT-MIB", "apSysSipStatsActiveLocalContacts"), ("APSYSMGMT-MIB", "apSysMgcpGWEndpoints"), ("APSYSMGMT-MIB", "apSysH323Registration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtRegistrationGroup = apSysMgmtRegistrationGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRegistrationGroup.setDescription('Objects to monitor registration.')
apSysMgmtRegCacheLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 12)).setObjects(("APSYSMGMT-MIB", "apSysRegCacheLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtRegCacheLimitGroup = apSysMgmtRegCacheLimitGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRegCacheLimitGroup.setDescription('Objects for monitoring registration cache usage.')
apSysMgmtShortSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 13)).setObjects(("APSYSMGMT-MIB", "apSysShortSessionThreshold"), ("APSYSMGMT-MIB", "apSigRealmStatsShortSessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtShortSessionGroup = apSysMgmtShortSessionGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtShortSessionGroup.setDescription('Objects to monitor short duration sessions.')
apSysMgmtTrapTableObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 14)).setObjects(("APSYSMGMT-MIB", "apTrapTableNumVariables"), ("APSYSMGMT-MIB", "apTrapTableSysUptime"), ("APSYSMGMT-MIB", "apTrapInformationTableDataType"), ("APSYSMGMT-MIB", "apTrapInformationTableDataLength"), ("APSYSMGMT-MIB", "apTrapInformationTableDataOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtTrapTableObjectGroup = apSysMgmtTrapTableObjectGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTrapTableObjectGroup.setDescription('Attributes of the trap table in the Session Border Controller.')
apSysMgmtRealmStatsQoSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 15)).setObjects(("APSYSMGMT-MIB", "apSigRealmStatsAverageQoSRFactor"), ("APSYSMGMT-MIB", "apSigRealmStatsMaximumQoSRFactor"), ("APSYSMGMT-MIB", "apSigRealmStatsCurrentMajorRFactorExceeded"), ("APSYSMGMT-MIB", "apSigRealmStatsTotalMajorRFactorExceeded"), ("APSYSMGMT-MIB", "apSigRealmStatsCurrentCriticalRFactorExceeded"), ("APSYSMGMT-MIB", "apSigRealmStatsTotalCriticalRFactorExceeded"), ("APSYSMGMT-MIB", "apSigRealmStatsRealmStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtRealmStatsQoSGroup = apSysMgmtRealmStatsQoSGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRealmStatsQoSGroup.setDescription('Objects to monitor QoS statistics for a realm.')
apSysMgmtApplicationCPUUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 16)).setObjects(("APSYSMGMT-MIB", "apSysApplicationCPULoadRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtApplicationCPUUsageGroup = apSysMgmtApplicationCPUUsageGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtApplicationCPUUsageGroup.setDescription('Objects to monitor application CPU usage.')
apSysMgmtRegistrationCapacityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 17)).setObjects(("APSYSMGMT-MIB", "apSysRegistrationCapacity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtRegistrationCapacityGroup = apSysMgmtRegistrationCapacityGroup.setStatus('obsolete')
if mibBuilder.loadTexts: apSysMgmtRegistrationCapacityGroup.setDescription('Objects to monitor registration use against licensed capacity.')
apSysMgmtRejectedMessagesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 18)).setObjects(("APSYSMGMT-MIB", "apSysRejectedMessages"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtRejectedMessagesGroup = apSysMgmtRejectedMessagesGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRejectedMessagesGroup.setDescription('Objects to track the number of messages rejected by the SBC.')
apSysMgmtEndPtDemotionObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 19)).setObjects(("APSYSMGMT-MIB", "apSysSipEndptDemTrustToUntrust"), ("APSYSMGMT-MIB", "apSysSipEndptDemUntrustToDeny"), ("APSYSMGMT-MIB", "apSysMgcpEndptDemTrustToUntrust"), ("APSYSMGMT-MIB", "apSysMgcpEndptDemUntrustToDeny"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtEndPtDemotionObjectGroup = apSysMgmtEndPtDemotionObjectGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtEndPtDemotionObjectGroup.setDescription('Attributes for counting global endpoint demotions.')
apSysMgmtCallRecordingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 20)).setObjects(("APSYSMGMT-MIB", "apSysCallRecordingServerName"), ("APSYSMGMT-MIB", "apSysCallRecordingServerState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtCallRecordingGroup = apSysMgmtCallRecordingGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtCallRecordingGroup.setDescription('Objects to monitor Call Recording Servers.')
apSysMgmtPhyUtilGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 21)).setObjects(("APSYSMGMT-MIB", "apPhyUtilTableRXUtil"), ("APSYSMGMT-MIB", "apPhyUtilTableTXUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtPhyUtilGroup = apSysMgmtPhyUtilGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtPhyUtilGroup.setDescription('Objects to monitor PHY utilization.')
apSysMgmtStorageSpaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 22)).setObjects(("APSYSMGMT-MIB", "apSysVolumeIndex"), ("APSYSMGMT-MIB", "apSysVolumeName"), ("APSYSMGMT-MIB", "apSysVolumeTotalSpace"), ("APSYSMGMT-MIB", "apSysVolumeAvailSpace"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtStorageSpaceGroup = apSysMgmtStorageSpaceGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtStorageSpaceGroup.setDescription('Objects to monitor storage space.')
apSysMgmtCtrlStatsGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 23)).setObjects(("APSYSMGMT-MIB", "apNetMgmtCtrlStatsState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtCtrlStatsGroup2 = apSysMgmtCtrlStatsGroup2.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtCtrlStatsGroup2.setDescription('A collection of stats reflecting network management\n                controls.')
apSysMgmtDatabaseRegGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 24)).setObjects(("APSYSMGMT-MIB", "apSysSipStatsActiveDatabaseContacts"), ("APSYSMGMT-MIB", "apSysMgmtDatabaseContactMinorThreshold"), ("APSYSMGMT-MIB", "apSysMgmtDatabaseContactMajorThreshold"), ("APSYSMGMT-MIB", "apSysMgmtDatabaseContactCriticalThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtDatabaseRegGroup = apSysMgmtDatabaseRegGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtDatabaseRegGroup.setDescription('Objects to monitor database registration functionality.')
apSysMgmtCallsRejectedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 25)).setObjects(("APSYSMGMT-MIB", "apSysSipTotalCallsRejected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtCallsRejectedGroup = apSysMgmtCallsRejectedGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtCallsRejectedGroup.setDescription('Number of SIP Calls rejected.')
apSysMgmtRealmRegCacheSummaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 26)).setObjects(("APSYSMGMT-MIB", "apSigRealmStatsActiveLocalContacts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtRealmRegCacheSummaryGroup = apSysMgmtRealmRegCacheSummaryGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRealmRegCacheSummaryGroup.setDescription('Display the number of active local contacts for a given realm.')
apSysMgmtSubscriptionSummaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 27)).setObjects(("APSYSMGMT-MIB", "apSigRealmStatsActiveSubscriptions"), ("APSYSMGMT-MIB", "apSigRealmStatsPerMaxSubscriptions"), ("APSYSMGMT-MIB", "apSigRealmStatsMaximumActiveSubscriptions"), ("APSYSMGMT-MIB", "apSigRealmStatsTotalSubscriptions"), ("APSYSMGMT-MIB", "apSysSipStatsActiveSubscriptions"), ("APSYSMGMT-MIB", "apSysSipStatsPerMaxSubscriptions"), ("APSYSMGMT-MIB", "apSysSipStatsMaximumActiveSubscriptions"), ("APSYSMGMT-MIB", "apSysSipStatsTotalSubscriptions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtSubscriptionSummaryGroup = apSysMgmtSubscriptionSummaryGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSubscriptionSummaryGroup.setDescription('Display Subscription counts on a per-realm or system-wide basis.')
apSysMgmtETCUtilGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 28)).setObjects(("APSYSMGMT-MIB", "apSysETCCoreCPUUtil"), ("APSYSMGMT-MIB", "apSysETCMemoryPoolMemUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtETCUtilGroup = apSysMgmtETCUtilGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtETCUtilGroup.setDescription('Objects group including CPU utilization and memory pool utilization in a ETC card.')
apSysMgmtXCodeEVRCUtilGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 29)).setObjects(("APSYSMGMT-MIB", "apSysXCodeEVRCCapacity"), ("APSYSMGMT-MIB", "apSysXCodeEVRCBCapacity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtXCodeEVRCUtilGroup = apSysMgmtXCodeEVRCUtilGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtXCodeEVRCUtilGroup.setDescription('Objects to monitor licensed EVRC and EVRCB transcoding utilization')
apSysMgmtXCodeG729UtilGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 30)).setObjects(("APSYSMGMT-MIB", "apSysXCodeG729Capacity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtXCodeG729UtilGroup = apSysMgmtXCodeG729UtilGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtXCodeG729UtilGroup.setDescription('Object to monitor licensed G729 transcoding utilization')
apSysMgmtCPULoadAvgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 31)).setObjects(("APSYSMGMT-MIB", "apSysCPULoadAvgOneMinute"), ("APSYSMGMT-MIB", "apSysCPULoadAvgFiveMinute"), ("APSYSMGMT-MIB", "apSysCPULoadAvgFiftnMinute"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtCPULoadAvgGroup = apSysMgmtCPULoadAvgGroup.setStatus('obsolete')
if mibBuilder.loadTexts: apSysMgmtCPULoadAvgGroup.setDescription('Object to monitor CPU Load Average across all CPU cores.')
apSysMgmtXCodeOpusUtilGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 32)).setObjects(("APSYSMGMT-MIB", "apSysXCodeOpusCapacity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtXCodeOpusUtilGroup = apSysMgmtXCodeOpusUtilGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtXCodeOpusUtilGroup.setDescription('Object to monitor licensed Opus transcoding utilization')
apSysMgmtXCodeSILKUtilGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 33)).setObjects(("APSYSMGMT-MIB", "apSysXCodeSILKCapacity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtXCodeSILKUtilGroup = apSysMgmtXCodeSILKUtilGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtXCodeSILKUtilGroup.setDescription('Object to monitor licensed SILK transcoding utilization')
apSysMgmtXCodeEVRCNWUtilGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 34)).setObjects(("APSYSMGMT-MIB", "apSysXCodeEVRCNWCapacity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtXCodeEVRCNWUtilGroup = apSysMgmtXCodeEVRCNWUtilGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtXCodeEVRCNWUtilGroup.setDescription('Object to monitor licensed EVRCNW transcoding utilization')
apSysMgmtXCodeEVSUtilGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 2, 35)).setObjects(("APSYSMGMT-MIB", "apSysXCodeEVSCapacity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtXCodeEVSUtilGroup = apSysMgmtXCodeEVSUtilGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtXCodeEVSUtilGroup.setDescription('Object to monitor licensed EVS transcoding utilization')
apSysMgmtNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 1)).setObjects(("APSYSMGMT-MIB", "apSysMgmtGroupTrap"), ("APSYSMGMT-MIB", "apSysMgmtGroupClearTrap"), ("APSYSMGMT-MIB", "apSysMgmtPowerTrap"), ("APSYSMGMT-MIB", "apSysMgmtTempTrap"), ("APSYSMGMT-MIB", "apSysMgmtFanTrap"), ("APSYSMGMT-MIB", "apSysMgmtTaskSuspendTrap"), ("APSYSMGMT-MIB", "apSysMgmtRedundancyTrap"), ("APSYSMGMT-MIB", "apSysMgmtMediaPortsTrap"), ("APSYSMGMT-MIB", "apSysMgmtMediaBandwidthTrap"), ("APSYSMGMT-MIB", "apSysMgmtMediaOutOfMemory"), ("APSYSMGMT-MIB", "apSysMgmtMediaUnknownRealm"), ("APSYSMGMT-MIB", "apSysMgmtGatewayUnreachableTrap"), ("APSYSMGMT-MIB", "apSysMgmtRadiusDownTrap"), ("APSYSMGMT-MIB", "apSysMgmtCfgSaveFailTrap"), ("APSYSMGMT-MIB", "apSysMgmtHardwareErrorTrap"), ("APSYSMGMT-MIB", "apSysMgmtSAStatusChangeTrap"), ("APSYSMGMT-MIB", "apSysMgmtAuthenticationFailedTrap"), ("APSYSMGMT-MIB", "apSysMgmtSystemStateTrap"), ("APSYSMGMT-MIB", "apSysMgmtMediaPortsClearTrap"), ("APSYSMGMT-MIB", "apSysMgmtMediaBandwidthClearTrap"), ("APSYSMGMT-MIB", "apSysMgmtMediaOutOfMemoryClear"), ("APSYSMGMT-MIB", "apSysMgmtGatewayUnreachableClearTrap"), ("APSYSMGMT-MIB", "apSysMgmtRadiusDownClearTrap"), ("APSYSMGMT-MIB", "apSysMgmtTaskDeleteTrap"), ("APSYSMGMT-MIB", "apSysMgmtCdrFileDeleteTrap"), ("APSYSMGMT-MIB", "apSysMgmtSataAccessErrorTrap"), ("APSYSMGMT-MIB", "apSysMgmtTcaTrap"), ("APSYSMGMT-MIB", "apSysMgmtTcaClearTrap"), ("APSYSMGMT-MIB", "apSysMgmtTacacsDownTrap"), ("APSYSMGMT-MIB", "apSysMgmtTacacsDownClearTrap"), ("APSYSMGMT-MIB", "apSysMgmtOCSRDownTrap"), ("APSYSMGMT-MIB", "apSysMgmtOCSRDownClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtNotificationsGroup = apSysMgmtNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtNotificationsGroup.setDescription('A collection of traps generated by the smgmt mib.')
apSysMgmtH323NotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 2)).setObjects(("APSYSMGMT-MIB", "apSysMgmtH323InitFailTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtH323NotificationsGroup = apSysMgmtH323NotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtH323NotificationsGroup.setDescription('A collection of traps generated by the h323.')
apSysMgmtNotificationsGroup2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 3)).setObjects(("APSYSMGMT-MIB", "apSysMgmtSingleUnitRedundancyTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtNotificationsGroup2 = apSysMgmtNotificationsGroup2.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtNotificationsGroup2.setDescription('A collection of traps to extend reporting capabilities.')
apSysMgmtNotificationsGroup3 = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 4)).setObjects(("APSYSMGMT-MIB", "apSysMgmtAlgdCPULoadTrap"), ("APSYSMGMT-MIB", "apSysMgmtAlgdCPULoadClearTrap"), ("APSYSMGMT-MIB", "apSysMgmtInterfaceStatusChangeTrap"), ("APSYSMGMT-MIB", "apSysMgmtENUMStatusChangeTrap"), ("APSYSMGMT-MIB", "apSysMgmtRealmStatusChangeTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtNotificationsGroup3 = apSysMgmtNotificationsGroup3.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtNotificationsGroup3.setDescription('A collection of traps to extend reporting capabilities.')
apSysMgmtHDRNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 5)).setObjects(("APSYSMGMT-MIB", "apSysMgmtPushServerUnreachableTrap"), ("APSYSMGMT-MIB", "apSysMgmtPushServerUnreachableClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtHDRNotificationsGroup = apSysMgmtHDRNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtHDRNotificationsGroup.setDescription('A collection of traps to extend reporting capabilities.')
apSysMgmtObsoleteNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 6)).setObjects(("APSYSMGMT-MIB", "apSysMgmtDOSTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtObsoleteNotificationsGroup = apSysMgmtObsoleteNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtObsoleteNotificationsGroup.setDescription('A collection of traps to extend reporting capabilities.')
apSysMgmtRegNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 7)).setObjects(("APSYSMGMT-MIB", "apSysMgmtSurrogateRegFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtRegNotificationsGroup = apSysMgmtRegNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRegNotificationsGroup.setDescription('A collection of traps to extend reporting capabilities.')
apSysMgmtNTPNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 8)).setObjects(("APSYSMGMT-MIB", "apSysMgmtNTPServerUnreachableTrap"), ("APSYSMGMT-MIB", "apSysMgmtNTPServerUnreachableClearTrap"), ("APSYSMGMT-MIB", "apSysMgmtNTPServiceDownTrap"), ("APSYSMGMT-MIB", "apSysMgmtNTPServiceDownClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtNTPNotificationsGroup = apSysMgmtNTPNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtNTPNotificationsGroup.setDescription('A collection of traps to extend reporting capabilities.')
apSysMgmtMediaNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 9)).setObjects(("APSYSMGMT-MIB", "apSysMgmtMediaSupervisionTimerExpTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtMediaNotificationsGroup = apSysMgmtMediaNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtMediaNotificationsGroup.setDescription('A collection of traps to extend reporting capabilities.')
apSysMgmtH248NotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 10)).setObjects(("APSYSMGMT-MIB", "apSysMgmntH248AssociationLostTrap"), ("APSYSMGMT-MIB", "apSysMgmntH248AssociationLostClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtH248NotificationsGroup = apSysMgmtH248NotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtH248NotificationsGroup.setDescription('A collection of traps to extend reporting capabilities.')
apSysMgmtRFactorNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 11)).setObjects(("APSYSMGMT-MIB", "apSysMgmtRFactorBelowThresholdTrap"), ("APSYSMGMT-MIB", "apSysMgmtRFactorBelowThresholdClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtRFactorNotificationsGroup = apSysMgmtRFactorNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRFactorNotificationsGroup.setDescription('A collection of traps to extend reporting capabilities.')
apSysMgmtRealmExceedNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 12)).setObjects(("APSYSMGMT-MIB", "apSysMgmtRealmMinutesExceedTrap"), ("APSYSMGMT-MIB", "apSysMgmtRealmMinutesExceedClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtRealmExceedNotificationsGroup = apSysMgmtRealmExceedNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRealmExceedNotificationsGroup.setDescription('A collection of traps to extend reporting capabilities.')
apSysMgmtDOSNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 13)).setObjects(("APSYSMGMT-MIB", "apSysMgmtExpDOSTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtDOSNotificationsGroup = apSysMgmtDOSNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtDOSNotificationsGroup.setDescription('A collection of traps to extend reporting capabilities.')
apSysMgmtClockSkewNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 14)).setObjects(("APSYSMGMT-MIB", "apSysMgmtNTPClockSkewTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtClockSkewNotificationsGroup = apSysMgmtClockSkewNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtClockSkewNotificationsGroup.setDescription('A collection of traps to extend reporting capabilities.')
apSysMgmtLDAPServerStatusNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 15)).setObjects(("APSYSMGMT-MIB", "apSysMgmtLDAPStatusChangeTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtLDAPServerStatusNotificationsGroup = apSysMgmtLDAPServerStatusNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtLDAPServerStatusNotificationsGroup.setDescription('Objects to monitor NS/EP sessions.')
apSysMgmtSipRejectNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 16)).setObjects(("APSYSMGMT-MIB", "apSysMgmtSipRejectionTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtSipRejectNotificationsGroup = apSysMgmtSipRejectNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSipRejectNotificationsGroup.setDescription('Objects to monitor NS/EP sessions.')
apSysMgmtCollectorPushSuccessNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 17)).setObjects(("APSYSMGMT-MIB", "apSysMgmtCollectorPushSuccessTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtCollectorPushSuccessNotificationsGroup = apSysMgmtCollectorPushSuccessNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtCollectorPushSuccessNotificationsGroup.setDescription('Objects to monitor a successful HDR push operation.')
apSysMgmtRegCacheLimitNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 18)).setObjects(("APSYSMGMT-MIB", "apSysMgmtRegCacheThresholdTrap"), ("APSYSMGMT-MIB", "apSysMgmtRegCacheThresholdClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtRegCacheLimitNotificationsGroup = apSysMgmtRegCacheLimitNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRegCacheLimitNotificationsGroup.setDescription('Objects for monitoring registration cache usage.')
apSysMgmtShortSessionNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 19)).setObjects(("APSYSMGMT-MIB", "apSysMgmtShortSessionExceedTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtShortSessionNotificationsGroup = apSysMgmtShortSessionNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtShortSessionNotificationsGroup.setDescription('Objects to monitor short duration sessions.')
apSysMgmtMonitorNetworkGatewaySynchronizedNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 20)).setObjects(("APSYSMGMT-MIB", "apSysMgmtGatewaySynchronizedTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtMonitorNetworkGatewaySynchronizedNotificationsGroup = apSysMgmtMonitorNetworkGatewaySynchronizedNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtMonitorNetworkGatewaySynchronizedNotificationsGroup.setDescription('Objects to monitor synchronized gateway trap.')
apSysMgmtCallRecordingNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 21)).setObjects(("APSYSMGMT-MIB", "apSysMgmtCallRecordingStateChangeTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtCallRecordingNotificationsGroup = apSysMgmtCallRecordingNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtCallRecordingNotificationsGroup.setDescription('Objects to monitor Call Recording Servers.')
apSysMgmtSipExtNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 22)).setObjects(("APSYSMGMT-MIB", "apSysMgmtInterfaceStatusChangeTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtSipExtNotificationsGroup = apSysMgmtSipExtNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSipExtNotificationsGroup.setDescription('Extended notifications sent by sip interface.')
apSysMgmtIcmpFailureNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 23)).setObjects(("APSYSMGMT-MIB", "apSysMgmtRealmIcmpFailureTrap"), ("APSYSMGMT-MIB", "apSysMgmtRealmIcmpFailureClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtIcmpFailureNotificationsGroup = apSysMgmtIcmpFailureNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtIcmpFailureNotificationsGroup.setDescription('Objects to monitor Icmp Failure.')
apSysMgmtCDRPushReceiverNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 24)).setObjects(("APSYSMGMT-MIB", "apSysMgmtCDRPushReceiverFailureTrap"), ("APSYSMGMT-MIB", "apSysMgmtCDRPushReceiverFailureClearTrap"), ("APSYSMGMT-MIB", "apSysMgmtCDRPushAllReceiversFailureTrap"), ("APSYSMGMT-MIB", "apSysMgmtCDRPushAllReceiversFailureClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtCDRPushReceiverNotificationsGroup = apSysMgmtCDRPushReceiverNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtCDRPushReceiverNotificationsGroup.setDescription('Objects to monitor cdr push receiver failures.')
apSysMgmtInetAddrDOSNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 25)).setObjects(("APSYSMGMT-MIB", "apSysMgmtInetAddrDOSTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtInetAddrDOSNotificationsGroup = apSysMgmtInetAddrDOSNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtInetAddrDOSNotificationsGroup.setDescription('A collection of traps to extend reporting capabilities. This\n\t\tincludes capability to report both IPv4 and IPv6 addresses')
apSysMgmtRejectedMessagesNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 26)).setObjects(("APSYSMGMT-MIB", "apSysMgmtRejectedMesagesThresholdExeededTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtRejectedMessagesNotificationsGroup = apSysMgmtRejectedMessagesNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtRejectedMessagesNotificationsGroup.setDescription('Traps used for notificaton of rejected messages')
apSysMgmtInetAddrWithReasonDOSNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 27)).setObjects(("APSYSMGMT-MIB", "apSysMgmtInetAddrWithReasonDOSTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtInetAddrWithReasonDOSNotificationsGroup = apSysMgmtInetAddrWithReasonDOSNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtInetAddrWithReasonDOSNotificationsGroup.setDescription('A collection of traps to extend reporting capabilities. This\n\t\tincludes capability to report both IPv4 and IPv6 addresses')
apSysMgmtAdminGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 28)).setObjects(("APSYSMGMT-MIB", "apSysMgmtAdminAuthLockoutTrap"), ("APSYSMGMT-MIB", "apSysMgmtAdminAuditLogFullTrap"), ("APSYSMGMT-MIB", "apSysMgmtAdminAuditLogFullClearTrap"), ("APSYSMGMT-MIB", "apSysMgmtAdminAuditPushFailTrap"), ("APSYSMGMT-MIB", "apSysMgmtAdminAuditPushFailClearTrap"), ("APSYSMGMT-MIB", "apSysMgmtAdminWriteFailTrap"), ("APSYSMGMT-MIB", "apSysMgmtAdminWriteFailClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtAdminGroup = apSysMgmtAdminGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtAdminGroup.setDescription('Traps to monitor admin security related events')
apSysMgmtLPGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 29)).setObjects(("APSYSMGMT-MIB", "apSysMgmtLPLookupExceededTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtLPGroup = apSysMgmtLPGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtLPGroup.setDescription('Traps to monitor Local Policy routing ')
apSysMgmtPhyUtilNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 30)).setObjects(("APSYSMGMT-MIB", "apSysMgmtPhyUtilThresholdTrap"), ("APSYSMGMT-MIB", "apSysMgmtPhyUtilThresholdClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtPhyUtilNotificationsGroup = apSysMgmtPhyUtilNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtPhyUtilNotificationsGroup.setDescription('Traps to monitor PHY utilization.')
apSysMgmtStorageSpaceNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 31)).setObjects(("APSYSMGMT-MIB", "apSysMgmtSpaceAvailThresholdTrap"), ("APSYSMGMT-MIB", "apSysMgmtSpaceAvailThresholdClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtStorageSpaceNotificationsGroup = apSysMgmtStorageSpaceNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtStorageSpaceNotificationsGroup.setDescription('Traps to monitor storage space available.')
apSysMgmtTcaGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 32)).setObjects(("APSYSMGMT-MIB", "apSysMgmtTcaClearTrap"), ("APSYSMGMT-MIB", "apSysMgmtTcaTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtTcaGroup = apSysMgmtTcaGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTcaGroup.setDescription('Traps to monitor Threshold Crossing Alerts.')
apSysMgmtDatabaseRegNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 33)).setObjects(("APSYSMGMT-MIB", "apSysMgmtDatabaseRegCacheCapTrap"), ("APSYSMGMT-MIB", "apSysMgmtDatabaseRegCacheCapClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtDatabaseRegNotificationsGroup = apSysMgmtDatabaseRegNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtDatabaseRegNotificationsGroup.setDescription('Traps to monitor database registration threshold crossing.')
apSysMgmtTacacsNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 34)).setObjects(("APSYSMGMT-MIB", "apSysMgmtTacacsDownTrap"), ("APSYSMGMT-MIB", "apSysMgmtTacacsDownClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtTacacsNotificationsGroup = apSysMgmtTacacsNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtTacacsNotificationsGroup.setDescription('Traps to monitor TACACS+ server connections.')
apSysMgmtOCSRNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 35)).setObjects(("APSYSMGMT-MIB", "apSysMgmtOCSRDownTrap"), ("APSYSMGMT-MIB", "apSysMgmtOCSRDownClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtOCSRNotificationsGroup = apSysMgmtOCSRNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtOCSRNotificationsGroup.setDescription('Traps to monitor OCSR connections.')
apSysMgmtSipInterfaceRegCacheLimitNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 36)).setObjects(("APSYSMGMT-MIB", "apSysMgmtSipInterfaceRegCacheThresholdTrap"), ("APSYSMGMT-MIB", "apSysMgmtSipInterfaceRegCacheThresholdClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtSipInterfaceRegCacheLimitNotificationsGroup = apSysMgmtSipInterfaceRegCacheLimitNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtSipInterfaceRegCacheLimitNotificationsGroup.setDescription('Objects for monitoring registration cache usage for sip interface.')
apSysMgmtH248PortMapUsageNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 37)).setObjects(("APSYSMGMT-MIB", "apSysMgmtH248PortMapUsageTrap"), ("APSYSMGMT-MIB", "apSysMgmtH248PortMapUsageClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtH248PortMapUsageNotificationsGroup = apSysMgmtH248PortMapUsageNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtH248PortMapUsageNotificationsGroup.setDescription('Traps to monitor H248 Port map usage.')
apSysMgmtInetAddrDOSTrustedtoUntrustedNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 38)).setObjects(("APSYSMGMT-MIB", "apSysMgmtInetAddrTrustedToUntrustedDOSTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtInetAddrDOSTrustedtoUntrustedNotificationsGroup = apSysMgmtInetAddrDOSTrustedtoUntrustedNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSysMgmtInetAddrDOSTrustedtoUntrustedNotificationsGroup.setDescription('A collection of traps to extend reporting capabilities. This\n\t\tincludes capability to report both IPv4 and IPv6 addresses')
apSysMgmtCPULoadAvgNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 39)).setObjects(("APSYSMGMT-MIB", "apSysMgmtCPULoadAvgTrap"), ("APSYSMGMT-MIB", "apSysMgmtCPULoadAvgClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtCPULoadAvgNotificationsGroup = apSysMgmtCPULoadAvgNotificationsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: apSysMgmtCPULoadAvgNotificationsGroup.setDescription('Traps to monitor CPU Load Average.')
apSysMgmtCsvConfigSaveFailTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 2, 4, 3, 40)).setObjects(("APSYSMGMT-MIB", "apSysMgmtCSVCfgSaveFailTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSysMgmtCsvConfigSaveFailTrapGroup = apSysMgmtCsvConfigSaveFailTrapGroup.setStatus('obsolete')
if mibBuilder.loadTexts: apSysMgmtCsvConfigSaveFailTrapGroup.setDescription('Traps to monitor Csv Config Upload...')
mibBuilder.exportSymbols("APSYSMGMT-MIB", apSysMgmtSipInterfaceRealmName=apSysMgmtSipInterfaceRealmName, apLDAPServerIpAddress=apLDAPServerIpAddress, apSysMgmtSlotType=apSysMgmtSlotType, apSysMgmtDOSObjects=apSysMgmtDOSObjects, apSysXCodeEVSCapacity=apSysXCodeEVSCapacity, apCombinedStatsSessionAgentIndex=apCombinedStatsSessionAgentIndex, apSigRealmStatsShortSessions=apSigRealmStatsShortSessions, apSysMgmtCDRPushReceiverNotificationsGroup=apSysMgmtCDRPushReceiverNotificationsGroup, apSystemManagementMonitorPrefix=apSystemManagementMonitorPrefix, apSysMgmtPhyUtilTable=apSysMgmtPhyUtilTable, apSysETCMemoryPoolMemUtil=apSysETCMemoryPoolMemUtil, apSysMgmtGatewayUnreachable=apSysMgmtGatewayUnreachable, apSysMgmtMediaPortsClearTrap=apSysMgmtMediaPortsClearTrap, apCombinedStatsTotalSessionsNotAdmittedOutbound=apCombinedStatsTotalSessionsNotAdmittedOutbound, apNSEPStatsPeriod=apNSEPStatsPeriod, apSysMgmtRFactorBelowThresholdTrap=apSysMgmtRFactorBelowThresholdTrap, apSigRealmStatsCurrentActiveSessionsInbound=apSigRealmStatsCurrentActiveSessionsInbound, apSysMgmtRedRole=apSysMgmtRedRole, apSysMgmtPhyUtilCurrent=apSysMgmtPhyUtilCurrent, apSysSipStatsPerMaxSubscriptions=apSysSipStatsPerMaxSubscriptions, apH323SAStatsTotalSessionsInbound=apH323SAStatsTotalSessionsInbound, apNetMgmtCtrlStatsRejectedPeriodMax=apNetMgmtCtrlStatsRejectedPeriodMax, apSysH323Registration=apSysH323Registration, apSysETCCoreCPUUtil=apSysETCCoreCPUUtil, apSysMgmtSipInterfaceActiveLocalContacts=apSysMgmtSipInterfaceActiveLocalContacts, apSysMgmtExtSigRealmStatsGroup=apSysMgmtExtSigRealmStatsGroup, apSystemManagementMonitorGroups=apSystemManagementMonitorGroups, apSysReasonCode=apSysReasonCode, apSysMgmtGatewaySynchronizedTrap=apSysMgmtGatewaySynchronizedTrap, apSysMgmtTacacsNotificationsGroup=apSysMgmtTacacsNotificationsGroup, apSysMgmtStorageSpaceNotificationsGroup=apSysMgmtStorageSpaceNotificationsGroup, apSysMgmtNTPServer=apSysMgmtNTPServer, apSysMgmtNSEPStatsGroup=apSysMgmtNSEPStatsGroup, apSysMgmtDatabaseRegCacheCapClearTrap=apSysMgmtDatabaseRegCacheCapClearTrap, apSysVolumeName=apSysVolumeName, apSysEPSRealm=apSysEPSRealm, apSysMgmtTcaGroup=apSysMgmtTcaGroup, apSysMgmtPhyUtilThresholdClearTrap=apSysMgmtPhyUtilThresholdClearTrap, apCombinedStatsPeriodASR=apCombinedStatsPeriodASR, apSysSipStatsTotalSubscriptions=apSysSipStatsTotalSubscriptions, apSysMgmtAdminAuditLogFullTrap=apSysMgmtAdminAuditLogFullTrap, apTrapInformationTableDataType=apTrapInformationTableDataType, apSysApplicationCPULoadRate=apSysApplicationCPULoadRate, apSysMgmtDOSReason=apSysMgmtDOSReason, apSysMgmtNTPServerUnreachableTrap=apSysMgmtNTPServerUnreachableTrap, apSysMgmtTcaMajorThreshold=apSysMgmtTcaMajorThreshold, apCombinedStatsTotalSessionsInbound=apCombinedStatsTotalSessionsInbound, apSysCallRecordingServerName=apSysCallRecordingServerName, apNetMgmtCtrlStatsRejectedTotal=apNetMgmtCtrlStatsRejectedTotal, apSysEPSName=apSysEPSName, apSysMgmtH323InitFail=apSysMgmtH323InitFail, apSysRedundancy=apSysRedundancy, apSysMgcpEndptDemTrustToUntrust=apSysMgcpEndptDemTrustToUntrust, apSysMgmtShortSessionGroup=apSysMgmtShortSessionGroup, apSysMgmtSipRejectionNotificationPrefix=apSysMgmtSipRejectionNotificationPrefix, apH323SAStatsMaxLatency=apH323SAStatsMaxLatency, apSipSAStatsMaxBurstRate=apSipSAStatsMaxBurstRate, apSysMgmtCPULoadAvgTrap=apSysMgmtCPULoadAvgTrap, apSysMgmtMIBGeneralObjects=apSysMgmtMIBGeneralObjects, apSysMgmtRadiusDown=apSysMgmtRadiusDown, apSysMgmtSipRejectionNotificationObjects=apSysMgmtSipRejectionNotificationObjects, apSysXCodeG729Capacity=apSysXCodeG729Capacity, apSysRegCacheLimit=apSysRegCacheLimit, apSysMgmtNTPNotificationsGroup=apSysMgmtNTPNotificationsGroup, apSysMgmtSipRejMsgType=apSysMgmtSipRejMsgType, apSysMgmtDatabaseRegNotificationsGroup=apSysMgmtDatabaseRegNotificationsGroup, apCombinedStatsPeriodHighOutbound=apCombinedStatsPeriodHighOutbound, apSigRealmStatsCurrentActiveSessionsOutbound=apSigRealmStatsCurrentActiveSessionsOutbound, apSysMgmtPartitionPath=apSysMgmtPartitionPath, apSysETCMemoryPoolIndex=apSysETCMemoryPoolIndex, apNSEPStatsRPHCurrentActiveSessionsInbound=apNSEPStatsRPHCurrentActiveSessionsInbound, apCombinedStatsSessionAgentStatus=apCombinedStatsSessionAgentStatus, apCombinedStatsCurrentSessionRateOutbound=apCombinedStatsCurrentSessionRateOutbound, apCombinedSessionAgentStatsTable=apCombinedSessionAgentStatsTable, apSysMgmtRejectedMesagesThresholdExeededTrap=apSysMgmtRejectedMesagesThresholdExeededTrap, apNetMgmtCtrlStatsDivertedTotal=apNetMgmtCtrlStatsDivertedTotal, apSysMgmtMIBNSEPStatsObjects=apSysMgmtMIBNSEPStatsObjects, apSysMgmtTaskDelete=apSysMgmtTaskDelete, apSysMgmtDatabaseRegCacheCapTrap=apSysMgmtDatabaseRegCacheCapTrap, apSysMgmtSystemState=apSysMgmtSystemState, apSigRealmStatsTotalCriticalRFactorExceeded=apSigRealmStatsTotalCriticalRFactorExceeded, apSysMgmtNotificationObjects=apSysMgmtNotificationObjects, apSigRealmStatsTotalSessionsOutbound=apSigRealmStatsTotalSessionsOutbound, apSysMgmtExpDOSTrap=apSysMgmtExpDOSTrap, apSysETCMemoryPoolUtilTable=apSysETCMemoryPoolUtilTable, apSysMgmtSystemStateTrap=apSysMgmtSystemStateTrap, apSysMgmtPhyRejectOverUtil=apSysMgmtPhyRejectOverUtil, apSysMgmtXCodeG729UtilGroup=apSysMgmtXCodeG729UtilGroup, apSysMgmtAdminGroup=apSysMgmtAdminGroup, apSysMgmtSingleUnitRedundancyTrap=apSysMgmtSingleUnitRedundancyTrap, apSysETCCoreUtilTable=apSysETCCoreUtilTable, apSysMgmtCtrlStatsGroup=apSysMgmtCtrlStatsGroup, apSysMgmtSipInterfaceIP=apSysMgmtSipInterfaceIP, apSysMgmtTaskSuspend=apSysMgmtTaskSuspend, apSysEPSOperationType=apSysEPSOperationType, apSysMgmtH323Group=apSysMgmtH323Group, apSysMgmtH248PortMapUsageTrap=apSysMgmtH248PortMapUsageTrap, apSipSAStatsCurrentActiveSessionsInbound=apSipSAStatsCurrentActiveSessionsInbound, apSystemManagementModule=apSystemManagementModule, ApSessionAgentStatusOptions=ApSessionAgentStatusOptions, apSigRealmStatsMaximumQoSRFactor=apSigRealmStatsMaximumQoSRFactor, apSysMgmtCollectorPushSuccessTrap=apSysMgmtCollectorPushSuccessTrap, apSigRealmStatsPerMaxSubscriptions=apSigRealmStatsPerMaxSubscriptions, apSystemManagementConformance=apSystemManagementConformance, apSystemManagementGroups=apSystemManagementGroups, apNetMgmtCtrlStatsIncomingTotal=apNetMgmtCtrlStatsIncomingTotal, apSysMgmtInetAddrDOSNotificationsGroup=apSysMgmtInetAddrDOSNotificationsGroup, apSysMgmtDOSNotificationsGroup=apSysMgmtDOSNotificationsGroup, apSysMgmtENUMStatusChangeTrap=apSysMgmtENUMStatusChangeTrap, apH323SAStatsMaxBurstRate=apH323SAStatsMaxBurstRate, SysMgmtPercentage=SysMgmtPercentage, apSysMgmtLDAPServerStatusGroup=apSysMgmtLDAPServerStatusGroup, apSysMgmtCallRecordingStateChangeTrap=apSysMgmtCallRecordingStateChangeTrap, apTrapTableNumVariables=apTrapTableNumVariables, apSysMgmtNTPServerUnreachableClearTrap=apSysMgmtNTPServerUnreachableClearTrap, apSysGlobalConSess=apSysGlobalConSess, apSipSAStatsTotalSessionsOutbound=apSipSAStatsTotalSessionsOutbound, apSigRealmStatsCurrentSessionRateOutbound=apSigRealmStatsCurrentSessionRateOutbound, apSysEPSFqdn=apSysEPSFqdn, apSysMgmtSipRejMethod=apSysMgmtSipRejMethod, apSysMgmtAlgdCPULoad=apSysMgmtAlgdCPULoad, apSysMgmtFanTrap=apSysMgmtFanTrap, apSysRejectedMessages=apSysRejectedMessages, apSysMgmtSpaceAvailMinorThreshold=apSysMgmtSpaceAvailMinorThreshold, apCombinedStatsAverageRateOutbound=apCombinedStatsAverageRateOutbound, apSysMgmtRegCacheLimitNotificationsGroup=apSysMgmtRegCacheLimitNotificationsGroup, apSysMgmtCfgSaveFailTrap=apSysMgmtCfgSaveFailTrap, apH323SAStatsTotalSessionsNotAdmittedOutbound=apH323SAStatsTotalSessionsNotAdmittedOutbound, apNetMgmtCtrlStatsIncomingPeriodMax=apNetMgmtCtrlStatsIncomingPeriodMax, apSysMgmtRejectedMessagesNotificationsGroup=apSysMgmtRejectedMessagesNotificationsGroup, apSysMgmtMediaBandwidthClearTrap=apSysMgmtMediaBandwidthClearTrap, apSysGlobalCPS=apSysGlobalCPS, apSysMgmtXCodeOpusUtilGroup=apSysMgmtXCodeOpusUtilGroup, apSysNATCapacity=apSysNATCapacity, apSysMgmtPhyUtilGroup=apSysMgmtPhyUtilGroup, apSysMgmtDOSInetAddress=apSysMgmtDOSInetAddress, apSysMgmtAdminAuditPushFailClearTrap=apSysMgmtAdminAuditPushFailClearTrap, apNSEPStatsRPHTotalSessionsNotAdmittedInbound=apNSEPStatsRPHTotalSessionsNotAdmittedInbound, apNetMgmtCtrlStatsIncomingCurrent=apNetMgmtCtrlStatsIncomingCurrent, apSysMgmtPhyUtilCriticalThreshold=apSysMgmtPhyUtilCriticalThreshold, apSysMgmtCPULoadAvgGroup=apSysMgmtCPULoadAvgGroup, apSysMgmtSlotID=apSysMgmtSlotID, apTrapTableInstanceIndex=apTrapTableInstanceIndex, apSysMgmtSipRejectionTrap=apSysMgmtSipRejectionTrap, apCombinedStatsMaxBurstRate=apCombinedStatsMaxBurstRate, apSysXCodeOpusCapacity=apSysXCodeOpusCapacity, apSysMgmtPowerTrap=apSysMgmtPowerTrap, apSipSAStatsPeriodSeizures=apSipSAStatsPeriodSeizures, apSysMgmtGatewayUnreachableClearTrap=apSysMgmtGatewayUnreachableClearTrap, apSysMgmtMIBObjects=apSysMgmtMIBObjects, apSysMgmtH248NotificationsGroup=apSysMgmtH248NotificationsGroup, apSipSessionAgentStatsTable=apSipSessionAgentStatsTable, apSysMgcpEndptDemUntrustToDeny=apSysMgcpEndptDemUntrustToDeny, apSysMgmtH248Realm=apSysMgmtH248Realm, apSysMgmtEndPtDemotionObjectGroup=apSysMgmtEndPtDemotionObjectGroup, apSysMgmtStorageSpaceGroup=apSysMgmtStorageSpaceGroup, apSysMgmtRejectedMessagesGroup=apSysMgmtRejectedMessagesGroup, apSysMgmtXCodeEVRCNWUtilGroup=apSysMgmtXCodeEVRCNWUtilGroup, apSysMgmtTempTrap=apSysMgmtTempTrap, apSysMgmtTrapType=apSysMgmtTrapType, apH323SAStatsTotalSessionsOutbound=apH323SAStatsTotalSessionsOutbound, apSysMgmtRegCacheThresholdTrap=apSysMgmtRegCacheThresholdTrap, apSysMgmtCDRPushAllReceiversFailureTrap=apSysMgmtCDRPushAllReceiversFailureTrap, apSigRealmStatsTotalSessionsInbound=apSigRealmStatsTotalSessionsInbound, apSysMgmtTaskSuspendTrap=apSysMgmtTaskSuspendTrap, apNetMgmtCtrlStatsState=apNetMgmtCtrlStatsState, apSysMgmtCDRPushAllReceiversFailureClearTrap=apSysMgmtCDRPushAllReceiversFailureClearTrap, apNSEPStatsRPHEntry=apNSEPStatsRPHEntry, apSysMgmtObsoleteNotificationsGroup=apSysMgmtObsoleteNotificationsGroup, apSysMgmtDOSTrap=apSysMgmtDOSTrap, apSysMgmtMediaUnknownRealm=apSysMgmtMediaUnknownRealm, apSysMgmtRealmMinutesExceedClearTrap=apSysMgmtRealmMinutesExceedClearTrap, apSysMgmtLPGroup=apSysMgmtLPGroup, apSysMgmtRadiusDownClearTrap=apSysMgmtRadiusDownClearTrap, apSysMgmtSipRejToUriUser=apSysMgmtSipRejToUriUser, apSysMgmtOCSRDownTrap=apSysMgmtOCSRDownTrap, apSigRealmStatsTotalSubscriptions=apSigRealmStatsTotalSubscriptions, apSigRealmStatsActiveLocalContacts=apSigRealmStatsActiveLocalContacts, apSysMgmtSurrogateRegHost=apSysMgmtSurrogateRegHost, apSysAdminWriteErrorCode=apSysAdminWriteErrorCode, apSysMgmtMediaPortsTrap=apSysMgmtMediaPortsTrap, apSysMgmtRegCacheThresholdClearTrap=apSysMgmtRegCacheThresholdClearTrap, apLDAPServerStatusTable=apLDAPServerStatusTable, apH323SAStatsCurrentActiveSessionsInbound=apH323SAStatsCurrentActiveSessionsInbound, apSysMgmntH248AssociationLostTrap=apSysMgmntH248AssociationLostTrap, apSysMgmtSpaceAvailCriticalThreshold=apSysMgmtSpaceAvailCriticalThreshold, apCombinedStatsPeriodHighInbound=apCombinedStatsPeriodHighInbound, apNetMgmtCtrlStatsRejectedCurrent=apNetMgmtCtrlStatsRejectedCurrent, apSigRealmStatsAverageRateOutbound=apSigRealmStatsAverageRateOutbound, apSysMgmtH248PortMapUsage=apSysMgmtH248PortMapUsage, apSysSipStatsActiveSubscriptions=apSysSipStatsActiveSubscriptions, apSysMgmtCSVCfgSaveFail=apSysMgmtCSVCfgSaveFail, ApSipInterfaceStatusOptions=ApSipInterfaceStatusOptions, apSigRealmStatsAverageRateInbound=apSigRealmStatsAverageRateInbound, apSigRealmStatsMinutesLeft=apSigRealmStatsMinutesLeft, apSysAdminAuditLogFullReason=apSysAdminAuditLogFullReason, apH323SAStatsCurrentActiveSessionsOutbound=apH323SAStatsCurrentActiveSessionsOutbound, apSysCPULoadAvgOneMinute=apSysCPULoadAvgOneMinute, apSigRealmStatsCurrentMajorRFactorExceeded=apSigRealmStatsCurrentMajorRFactorExceeded, apSysMgmtTrapTableObjectGroup=apSysMgmtTrapTableObjectGroup, apSysMgmtSipInterfaceRegCacheThresholdTrap=apSysMgmtSipInterfaceRegCacheThresholdTrap, apNSEPStatsRPHCurrentActiveSessionsOutbound=apNSEPStatsRPHCurrentActiveSessionsOutbound, apSysLicenseCapacity=apSysLicenseCapacity, apSysMgmtRedundancyState=apSysMgmtRedundancyState, apSysMgmtAuthFailLevel=apSysMgmtAuthFailLevel, apSysETCIndex=apSysETCIndex, apSysMgmtSipRejIpAddress=apSysMgmtSipRejIpAddress, apNSEPStatsTotalSessionsInbound=apNSEPStatsTotalSessionsInbound, apNetMgmtCtrlStatsDivertedPeriodMax=apNetMgmtCtrlStatsDivertedPeriodMax, apSysMgmtSigRealmGroup=apSysMgmtSigRealmGroup, apSysMgmtRealmStatusChangeTrap=apSysMgmtRealmStatusChangeTrap, apSysMgmtInetAddrDOSTrustedtoUntrustedNotificationsGroup=apSysMgmtInetAddrDOSTrustedtoUntrustedNotificationsGroup, apSysMgcpGWEndpoints=apSysMgcpGWEndpoints, apSysMgmtAdminWriteFailClearTrap=apSysMgmtAdminWriteFailClearTrap, apSysMgmtCfgSaveFail=apSysMgmtCfgSaveFail, apH323SAStatsPeriodHighInbound=apH323SAStatsPeriodHighInbound, apH323SAStatsPeriodASR=apH323SAStatsPeriodASR, apSysMgmtInterfaceObjects=apSysMgmtInterfaceObjects, apSysAddress=apSysAddress, apSipSessionAgentStatsEntry=apSipSessionAgentStatsEntry, apH323SessionAgentStatsEntry=apH323SessionAgentStatsEntry, apSysMgmtSipExtNotificationsGroup=apSysMgmtSipExtNotificationsGroup, apSysMgmtPowerPresence=apSysMgmtPowerPresence, apSysSipEndptDemTrustToUntrust=apSysSipEndptDemTrustToUntrust, apSipSAStatsAverageRateInbound=apSipSAStatsAverageRateInbound, apSysMgmtCPULoadAvgClearTrap=apSysMgmtCPULoadAvgClearTrap, apSysMgmtLPLookupExceededTrap=apSysMgmtLPLookupExceededTrap, apTrapTableSystemTime=apTrapTableSystemTime, apSysAcpTlsEnabled=apSysAcpTlsEnabled, apSysSipEndptDemUntrustToDeny=apSysSipEndptDemUntrustToDeny, apSysMgmtNotificationsGroup2=apSysMgmtNotificationsGroup2, apH323SAStatsAverageLatency=apH323SAStatsAverageLatency, apSipSAStatsPeriodHighInbound=apSipSAStatsPeriodHighInbound, apPhyUtilTableRXUtil=apPhyUtilTableRXUtil, apSysStorageSpaceTable=apSysStorageSpaceTable, apSysMgmtGroupClearTrap=apSysMgmtGroupClearTrap, apSysState=apSysState, apCombinedStatsMaxLatency=apCombinedStatsMaxLatency, apSysMgmtPhyUtilNotificationsGroup=apSysMgmtPhyUtilNotificationsGroup, apSysMgmtMIBLDAPServerStatusObjects=apSysMgmtMIBLDAPServerStatusObjects, apSysMgmtCollectorPushUniqueFileName=apSysMgmtCollectorPushUniqueFileName, apSysMgmtDOSIpAddress=apSysMgmtDOSIpAddress, apSysCallRecordingServerState=apSysCallRecordingServerState, apSysMgmtSpaceAvailThresholdClearTrap=apSysMgmtSpaceAvailThresholdClearTrap, apENUMConfigName=apENUMConfigName, apSysMgmtGroupTrap=apSysMgmtGroupTrap, apSystemManagementNotificationsGroups=apSystemManagementNotificationsGroups, apSysMgmtInterfaceStatusChangeTrap=apSysMgmtInterfaceStatusChangeTrap, apSipSAStatsSessionAgentType=apSipSAStatsSessionAgentType, apCombinedStatsAverageLatency=apCombinedStatsAverageLatency, apNSEPStatsRPHValue=apNSEPStatsRPHValue, apSysMgmtMIBNetMgmtCtrlObjects=apSysMgmtMIBNetMgmtCtrlObjects, apSysMgmtPushServerUnreachableClearTrap=apSysMgmtPushServerUnreachableClearTrap, apSysMgmtRedundancyTrap=apSysMgmtRedundancyTrap)
mibBuilder.exportSymbols("APSYSMGMT-MIB", apSysMgmtCallRecordingNotificationsGroup=apSysMgmtCallRecordingNotificationsGroup, apSipSAStatsPeriodASR=apSipSAStatsPeriodASR, apSigRealmStatsMaximumActiveSubscriptions=apSigRealmStatsMaximumActiveSubscriptions, apSysMgmtHardwareErrorTrap=apSysMgmtHardwareErrorTrap, apSysMgmtGatewaySynchronized=apSysMgmtGatewaySynchronized, apSysMgmtIcmpFailureNotificationsGroup=apSysMgmtIcmpFailureNotificationsGroup, apSysMgmtNTPClockSkewTrap=apSysMgmtNTPClockSkewTrap, apSysMgmtRFactorBelowThresholdClearTrap=apSysMgmtRFactorBelowThresholdClearTrap, apSysMgmtDOSNotificationPrefix=apSysMgmtDOSNotificationPrefix, apSysCDRPushReceiverAddress=apSysCDRPushReceiverAddress, apSysMgmtPhyUtilThresholdTrap=apSysMgmtPhyUtilThresholdTrap, apSysMgmtTacacsDownTrap=apSysMgmtTacacsDownTrap, apSysMgmtAdminAuthLockoutTrap=apSysMgmtAdminAuthLockoutTrap, apSysMgmtRealmStatsQoSGroup=apSysMgmtRealmStatsQoSGroup, apNetMgmtCtrlStatsEntry=apNetMgmtCtrlStatsEntry, apSysMgmtFanLocation=apSysMgmtFanLocation, apH323SAStatsAverageRateOutbound=apH323SAStatsAverageRateOutbound, apSysMgmtSipRejRequestUri=apSysMgmtSipRejRequestUri, apSysMgmtInetAddrWithReasonDOSTrap=apSysMgmtInetAddrWithReasonDOSTrap, apSysMgmtCallRecordingGroup=apSysMgmtCallRecordingGroup, apH323SAStatsCurrentSessionRateInbound=apH323SAStatsCurrentSessionRateInbound, apSigRealmStatsPeriodSeizures=apSigRealmStatsPeriodSeizures, ApSigRealmStatusOptions=ApSigRealmStatusOptions, apSysMgmtHardwareError=apSysMgmtHardwareError, apSysMgmtTcaCurrent=apSysMgmtTcaCurrent, apCombinedStatsPeriodAnswers=apCombinedStatsPeriodAnswers, apSysVolumeTotalSpace=apSysVolumeTotalSpace, apSysMgmtTrapInformationTableEntry=apSysMgmtTrapInformationTableEntry, apSysXCodeSILKCapacity=apSysXCodeSILKCapacity, apSipSAStatsSessionAgentStatus=apSipSAStatsSessionAgentStatus, apSysMgmtCDRPushReceiverFailureClearTrap=apSysMgmtCDRPushReceiverFailureClearTrap, apSysMgmtSataAccessErrorTrap=apSysMgmtSataAccessErrorTrap, apSysMgmtRealmRegCacheSummaryGroup=apSysMgmtRealmRegCacheSummaryGroup, apH323SAStatsAverageRateInbound=apH323SAStatsAverageRateInbound, apSigRealmStatsPeriodAnswers=apSigRealmStatsPeriodAnswers, apSysMgmtOCSRNotificationsGroup=apSysMgmtOCSRNotificationsGroup, apSysMgmtTcaOid=apSysMgmtTcaOid, apSysMgmtSubscriptionSummaryGroup=apSysMgmtSubscriptionSummaryGroup, apENUMServerStatusEntry=apENUMServerStatusEntry, apSysMgmtSipRejectionObjects=apSysMgmtSipRejectionObjects, apH323SAStatsTotalSessionsNotAdmittedInbound=apH323SAStatsTotalSessionsNotAdmittedInbound, apSysMgmtRadiusDownTrap=apSysMgmtRadiusDownTrap, apSysMgmtDOSFromUri=apSysMgmtDOSFromUri, apSysSipStatsActiveDatabaseContacts=apSysSipStatsActiveDatabaseContacts, apSysMgmtSAHostname=apSysMgmtSAHostname, apSystemManagementCompliances=apSystemManagementCompliances, apSysMgmtMIBSessionObjects=apSysMgmtMIBSessionObjects, apSysMgmtSAStatusChangeTrap=apSysMgmtSAStatusChangeTrap, apSigRealmStatsPeriodASR=apSigRealmStatsPeriodASR, apSipSAStatsCurrentSessionRateInbound=apSipSAStatsCurrentSessionRateInbound, apH323SAStatsPeriodSeizures=apH323SAStatsPeriodSeizures, apSysXCodeEVRCCapacity=apSysXCodeEVRCCapacity, apSysMgmtTcaTrap=apSysMgmtTcaTrap, apSysMgmtRealmIcmpFailureTrap=apSysMgmtRealmIcmpFailureTrap, apSysMgmntH248AssociationLostClearTrap=apSysMgmntH248AssociationLostClearTrap, apSysMgmtExtPolicyServerConnEstTrap=apSysMgmtExtPolicyServerConnEstTrap, apSysMgmtTacacsDownClearTrap=apSysMgmtTacacsDownClearTrap, apSysMgmtSipRejFromUriUser=apSysMgmtSipRejFromUriUser, apSysARPCapacity=apSysARPCapacity, apNSEPStatsPeriodHighInbound=apNSEPStatsPeriodHighInbound, apENUMServerStatusTable=apENUMServerStatusTable, apSysMgmtSipInterfaceRegCacheLimitNotificationsGroup=apSysMgmtSipInterfaceRegCacheLimitNotificationsGroup, apSigRealmStatsRealmIndex=apSigRealmStatsRealmIndex, apSysSipTotalCallsRejected=apSysSipTotalCallsRejected, apSysXCodeAMRWBCapacity=apSysXCodeAMRWBCapacity, apSysEPSAddress=apSysEPSAddress, apSysMgmtRegCacheLimitGroup=apSysMgmtRegCacheLimitGroup, apSysMgmtTrapTable=apSysMgmtTrapTable, apNSEPStatsRPHPeriodHighInbound=apNSEPStatsRPHPeriodHighInbound, apSysMgmtH248PortMapUsageClearTrap=apSysMgmtH248PortMapUsageClearTrap, apSysMgmtDOSNotifications=apSysMgmtDOSNotifications, apSysMgmtSipRejectionNotifications=apSysMgmtSipRejectionNotifications, apNetMgmtCtrlStatsTable=apNetMgmtCtrlStatsTable, apSysMgmtMediaPorts=apSysMgmtMediaPorts, apH323SAStatsSessionAgentType=apH323SAStatsSessionAgentType, apSysMgmtSAStatus=apSysMgmtSAStatus, apSipSAStatsAverageRateOutbound=apSipSAStatsAverageRateOutbound, apNSEPStatsCurrentActiveSessionsInbound=apNSEPStatsCurrentActiveSessionsInbound, apSysMgmtSurrogateRegAor=apSysMgmtSurrogateRegAor, apH323SessionAgentStatsTable=apH323SessionAgentStatsTable, apSysMgmtCollectorPushSuccessNotificationsGroup=apSysMgmtCollectorPushSuccessNotificationsGroup, apSigRealmStatsMaxBurstRate=apSigRealmStatsMaxBurstRate, apSysMgmtRealmExceedNotificationsGroup=apSysMgmtRealmExceedNotificationsGroup, apSysMemoryUtil=apSysMemoryUtil, apSysMgmtSipRejReason=apSysMgmtSipRejReason, apSysMgmtTempValue=apSysMgmtTempValue, apPhyUtilTableTXUtil=apPhyUtilTableTXUtil, apSysMgmtCollectorPushReceiverAddress=apSysMgmtCollectorPushReceiverAddress, apSysMgmtMediaNotificationsGroup=apSysMgmtMediaNotificationsGroup, apSigRealmStatsRealmStatus=apSigRealmStatsRealmStatus, apSysMgmtCPULoadAvgNotificationsGroup=apSysMgmtCPULoadAvgNotificationsGroup, apSigRealmStatsTotalSessionsNotAdmittedOutbound=apSigRealmStatsTotalSessionsNotAdmittedOutbound, apCombinedStatsCurrentActiveSessionsInbound=apCombinedStatsCurrentActiveSessionsInbound, apSipSAStatsPeriodHighOutbound=apSipSAStatsPeriodHighOutbound, apLDAPServerStatus=apLDAPServerStatus, apNSEPStatsRPHTotalSessionsOutbound=apNSEPStatsRPHTotalSessionsOutbound, apSysMgmtAlgdCPULoadClearTrap=apSysMgmtAlgdCPULoadClearTrap, apNSEPStatsRPHTotalSessionsInbound=apNSEPStatsRPHTotalSessionsInbound, apCombinedStatsTotalSessionsNotAdmittedInbound=apCombinedStatsTotalSessionsNotAdmittedInbound, apSysMgmtSpaceAvailThresholdTrap=apSysMgmtSpaceAvailThresholdTrap, apSysRegistrationCapacity=apSysRegistrationCapacity, apSysMgmtETCUtilGroup=apSysMgmtETCUtilGroup, apCombinedStatsPeriodSeizures=apCombinedStatsPeriodSeizures, apSysSipStatsMaximumActiveSubscriptions=apSysSipStatsMaximumActiveSubscriptions, apSysMgmtDatabaseContactMajorThreshold=apSysMgmtDatabaseContactMajorThreshold, apSysMgmtXCodeSILKUtilGroup=apSysMgmtXCodeSILKUtilGroup, apSysMgmtRealmStatusReason=apSysMgmtRealmStatusReason, apSysMgmtShortSessionExceedTrap=apSysMgmtShortSessionExceedTrap, apSysMgmtInetAddrDOSTrap=apSysMgmtInetAddrDOSTrap, apSipSAStatsTotalSessionsInbound=apSipSAStatsTotalSessionsInbound, apSigRealmStatsPeriodHighOutbound=apSigRealmStatsPeriodHighOutbound, apCombinedStatsCurrentActiveSessionsOutbound=apCombinedStatsCurrentActiveSessionsOutbound, apNSEPStatsRPHTable=apNSEPStatsRPHTable, apSysMgmtCdrFileDeleteTrap=apSysMgmtCdrFileDeleteTrap, apCombinedStatsSessionAgentHostname=apCombinedStatsSessionAgentHostname, apSysMgmtBorderGatewayId=apSysMgmtBorderGatewayId, apSysMgmtAlgdCPULoadTrap=apSysMgmtAlgdCPULoadTrap, apSysMgmtSipInterfaceRegCacheLimit=apSysMgmtSipInterfaceRegCacheLimit, apSysMgmtExtPolicyServerConnDownTrap=apSysMgmtExtPolicyServerConnDownTrap, apSysMgmtTacacsDown=apSysMgmtTacacsDown, apSysMgmtDOSRealmID=apSysMgmtDOSRealmID, apSysMgmtSipInterfaceStatusReason=apSysMgmtSipInterfaceStatusReason, apSysMgmtTrapInformationTable=apSysMgmtTrapInformationTable, apSysMgmtCtrlStatsGroup2=apSysMgmtCtrlStatsGroup2, apH323SAStatsPeriodAnswers=apH323SAStatsPeriodAnswers, apSigRealmStatsAverageLatency=apSigRealmStatsAverageLatency, apSysXCodeCapacity=apSysXCodeCapacity, apSysVolumeIndex=apSysVolumeIndex, apSipSAStatsAverageLatency=apSipSAStatsAverageLatency, apSigRealmStatsCurrentCriticalRFactorExceeded=apSigRealmStatsCurrentCriticalRFactorExceeded, apSysMgmtLDAPStatusChangeTrap=apSysMgmtLDAPStatusChangeTrap, apCombinedStatsCurrentSessionRateInbound=apCombinedStatsCurrentSessionRateInbound, apSysETCMemoryPoolUtilEntry=apSysETCMemoryPoolUtilEntry, apSysMgmtPhyUtilMajorThreshold=apSysMgmtPhyUtilMajorThreshold, apSysMgmtRealmName=apSysMgmtRealmName, apSysMgmtENUMServerStatusGroup=apSysMgmtENUMServerStatusGroup, apSysMgmtH248PortMapUsageNotificationsGroup=apSysMgmtH248PortMapUsageNotificationsGroup, apTrapTableSysUptime=apTrapTableSysUptime, apSysMgmtAuthFailProto=apSysMgmtAuthFailProto, apSigRealmStatsEntry=apSigRealmStatsEntry, apSysXCodeAMRCapacity=apSysXCodeAMRCapacity, apSysMgmtDatabaseRegGroup=apSysMgmtDatabaseRegGroup, apNetMgmtCtrlStatsType=apNetMgmtCtrlStatsType, apSysMgmtApplicationCPUUsageGroup=apSysMgmtApplicationCPUUsageGroup, apSysMgmtRFactorNotificationsGroup=apSysMgmtRFactorNotificationsGroup, ApSessionAgentType=ApSessionAgentType, apSysMgmtGeneralGroup=apSysMgmtGeneralGroup, apSysMgmtSingleUnitRedundancyState=apSysMgmtSingleUnitRedundancyState, apSysVolumeAvailSpace=apSysVolumeAvailSpace, apCombinedSessionAgentStatsEntry=apCombinedSessionAgentStatsEntry, apSigRealmStatsTotalSessionsNotAdmittedInbound=apSigRealmStatsTotalSessionsNotAdmittedInbound, apH323SAStatsPeriodHighOutbound=apH323SAStatsPeriodHighOutbound, apSysMgmtTrapTableEntry=apSysMgmtTrapTableEntry, apSysMgmtMediaOutOfMemoryClear=apSysMgmtMediaOutOfMemoryClear, apLDAPConfigName=apLDAPConfigName, apSysMgmtClockSkewNotificationsGroup=apSysMgmtClockSkewNotificationsGroup, apSysMgmtSpaceAvailCurrent=apSysMgmtSpaceAvailCurrent, apSysMgmtMediaOutOfMemory=apSysMgmtMediaOutOfMemory, apH323SAStatsSessionAgentStatus=apH323SAStatsSessionAgentStatus, apSysCPULoadAvgFiftnMinute=apSysCPULoadAvgFiftnMinute, apSysMgmtDatabaseContactMinorThreshold=apSysMgmtDatabaseContactMinorThreshold, apSysMgmtHDRNotificationsGroup=apSysMgmtHDRNotificationsGroup, apSipSAStatsSessionAgentIndex=apSipSAStatsSessionAgentIndex, apSysCurrentEndptsDenied=apSysCurrentEndptsDenied, apSysMgmtPhyUtilMinorThreshold=apSysMgmtPhyUtilMinorThreshold, apSysMgmtNotificationsGroup3=apSysMgmtNotificationsGroup3, PYSNMP_MODULE_ID=apSystemManagementModule, apSigRealmStatsPeriodHighInbound=apSigRealmStatsPeriodHighInbound, apSysMgmtMonitorNetworkGatewaySynchronizedNotificationsGroup=apSysMgmtMonitorNetworkGatewaySynchronizedNotificationsGroup, apSysMgmtNTPServiceDownClearTrap=apSysMgmtNTPServiceDownClearTrap, apSigRealmStatsMinutesReject=apSigRealmStatsMinutesReject, apTrapInformationTableDataIndex=apTrapInformationTableDataIndex, apSysMgmtAdminWriteFailTrap=apSysMgmtAdminWriteFailTrap, apSigRealmStatsAverageQoSRFactor=apSigRealmStatsAverageQoSRFactor, apSysMgmtMIBENUMServerStatusObjects=apSysMgmtMIBENUMServerStatusObjects, apSysMgmtPowerLocation=apSysMgmtPowerLocation, apSysMgmtPhyUtilTableEntry=apSysMgmtPhyUtilTableEntry, apSysMgmtCSVCfgSaveFailTrap=apSysMgmtCSVCfgSaveFailTrap, apSysShortSessionThreshold=apSysShortSessionThreshold, apSysXCodeEVRCBCapacity=apSysXCodeEVRCBCapacity, apNSEPStatsRPHPeriodHighOutbound=apNSEPStatsRPHPeriodHighOutbound, apSystemManagementNotifications=apSystemManagementNotifications, apSigRealmStatsCurrentSessionRateInbound=apSigRealmStatsCurrentSessionRateInbound, apSysMgmtMediaBandwidthTrap=apSysMgmtMediaBandwidthTrap, apSysMgmtOCSRDown=apSysMgmtOCSRDown, apTrapTableTrapId=apTrapTableTrapId, apSysMgmtTrapValue=apSysMgmtTrapValue, apNSEPStatsRPHTotalSessionsNotAdmittedOutbound=apNSEPStatsRPHTotalSessionsNotAdmittedOutbound, apSysMgmtRFactor=apSysMgmtRFactor, apSysMgmtMediaSupervisionTimerExpTrap=apSysMgmtMediaSupervisionTimerExpTrap, apSipSAStatsTotalSessionsNotAdmittedOutbound=apSipSAStatsTotalSessionsNotAdmittedOutbound, apSysMgmtXCodeEVRCUtilGroup=apSysMgmtXCodeEVRCUtilGroup, apSipSAStatsCurrentActiveSessionsOutbound=apSipSAStatsCurrentActiveSessionsOutbound, apSysMgmtH323InitFailTrap=apSysMgmtH323InitFailTrap, apSipSAStatsPeriodAnswers=apSipSAStatsPeriodAnswers, apSysSipStatsActiveLocalContacts=apSysSipStatsActiveLocalContacts, apSipSAStatsTotalSessionsNotAdmittedInbound=apSipSAStatsTotalSessionsNotAdmittedInbound, apSysMgmtGatewayUnreachableTrap=apSysMgmtGatewayUnreachableTrap, apSystemManagementNotificationPrefix=apSystemManagementNotificationPrefix, apSysCPULoadAvgFiveMinute=apSysCPULoadAvgFiveMinute, apSysMgmtNotificationsGroup=apSysMgmtNotificationsGroup, apCombinedStatsSessionAgentType=apCombinedStatsSessionAgentType, apCombinedStatsTotalSessionsOutbound=apCombinedStatsTotalSessionsOutbound, apH323SAStatsCurrentSessionRateOutbound=apH323SAStatsCurrentSessionRateOutbound, apSysMgmtH323NotificationsGroup=apSysMgmtH323NotificationsGroup, apSysMgmtSAStatusReason=apSysMgmtSAStatusReason, apSysMgmtCollectorPushNodeName=apSysMgmtCollectorPushNodeName, apSysMgmtDatabaseContactCriticalThreshold=apSysMgmtDatabaseContactCriticalThreshold, apSysMgmtShortSessionNotificationsGroup=apSysMgmtShortSessionNotificationsGroup, apENUMServerStatus=apENUMServerStatus, apSysMgmtOCSRDownClearTrap=apSysMgmtOCSRDownClearTrap, apSigRealmStatsTable=apSigRealmStatsTable, apSysMgmtCDRPushReceiverFailureTrap=apSysMgmtCDRPushReceiverFailureTrap, apSysAdminFileName=apSysAdminFileName, apSysMgmtTcaClearTrap=apSysMgmtTcaClearTrap, apSysMgmtRedTransState=apSysMgmtRedTransState, apSysMgmtLDAPServerStatusNotificationsGroup=apSysMgmtLDAPServerStatusNotificationsGroup, apSigRealmStatsRealmName=apSigRealmStatsRealmName, apSystemManagementMonitors=apSystemManagementMonitors, apSysMgmtRealmMinutesExceedTrap=apSysMgmtRealmMinutesExceedTrap, apSysMgmtTcaMinorThreshold=apSysMgmtTcaMinorThreshold, apSysMgmtAdminAuditLogFullClearTrap=apSysMgmtAdminAuditLogFullClearTrap, apSysHealthScore=apSysHealthScore, apSysETCCoreUtilEntry=apSysETCCoreUtilEntry, apSipSAStatsSessionAgentHostname=apSipSAStatsSessionAgentHostname, apSysMgmtRegistrationGroup=apSysMgmtRegistrationGroup, apCombinedStatsAverageRateInbound=apCombinedStatsAverageRateInbound, apSysMgmtSipGroup=apSysMgmtSipGroup, apSysMgmtRegNotificationsGroup=apSysMgmtRegNotificationsGroup, apSigRealmStatsActiveSubscriptions=apSigRealmStatsActiveSubscriptions, apSysMgmtH248MgcName=apSysMgmtH248MgcName, apTrapInformationTableDataOctets=apTrapInformationTableDataOctets, apNetMgmtCtrlStatsDivertedCurrent=apNetMgmtCtrlStatsDivertedCurrent, apSysMgmtNTPServiceDownTrap=apSysMgmtNTPServiceDownTrap, apTrapInformationTableDataLength=apTrapInformationTableDataLength, apSysMgmtSipRejectNotificationsGroup=apSysMgmtSipRejectNotificationsGroup, apSysMgmtCallId=apSysMgmtCallId, apSigRealmStatsTotalMajorRFactorExceeded=apSigRealmStatsTotalMajorRFactorExceeded, apSysMgmtInetAddrWithReasonDOSNotificationsGroup=apSysMgmtInetAddrWithReasonDOSNotificationsGroup, apNetMgmtCtrlStatsName=apNetMgmtCtrlStatsName, apSysMgmtTcaCriticalThreshold=apSysMgmtTcaCriticalThreshold, apSipSAStatsCurrentSessionRateOutbound=apSipSAStatsCurrentSessionRateOutbound, apSysMgmtRealmID=apSysMgmtRealmID, apSysMgmtDOSInetAddressType=apSysMgmtDOSInetAddressType, apSysMgmtCsvConfigSaveFailTrapGroup=apSysMgmtCsvConfigSaveFailTrapGroup, apSysXCodeEVRCNWCapacity=apSysXCodeEVRCNWCapacity, apSysMgmtCollectPushServerUnreachable=apSysMgmtCollectPushServerUnreachable, apSysCDRPushReceiverAddressType=apSysCDRPushReceiverAddressType, apSysMgmtRegistrationCapacityGroup=apSysMgmtRegistrationCapacityGroup, apH323SAStatsSessionAgentIndex=apH323SAStatsSessionAgentIndex, apSysMgmtPushServerUnreachableTrap=apSysMgmtPushServerUnreachableTrap, apSigRealmStatsMaxLatency=apSigRealmStatsMaxLatency, apH323SAStatsSessionAgentHostname=apH323SAStatsSessionAgentHostname, apSysMgmtCombinedGroup=apSysMgmtCombinedGroup)
mibBuilder.exportSymbols("APSYSMGMT-MIB", apSysStorageSpaceEntry=apSysStorageSpaceEntry, apSysMgmtSipInterfaceRegCacheThresholdClearTrap=apSysMgmtSipInterfaceRegCacheThresholdClearTrap, apSysMgmtDOSNotificationObjects=apSysMgmtDOSNotificationObjects, apSysETCCoreIndex=apSysETCCoreIndex, apSysCDRPushReceiverFailureReasonCode=apSysCDRPushReceiverFailureReasonCode, apSysMgmtSipRejContactUri=apSysMgmtSipRejContactUri, apSipSAStatsMaxLatency=apSipSAStatsMaxLatency, apSysMgmtFanSpeed=apSysMgmtFanSpeed, apSysMgmtMonitorObjects=apSysMgmtMonitorObjects, apSysMgmtSystemTrapObjects=apSysMgmtSystemTrapObjects, apSysMgmtSipInterfaceStatus=apSysMgmtSipInterfaceStatus, apSysMgmtSpaceAvailMajorThreshold=apSysMgmtSpaceAvailMajorThreshold, apSysMgmtAuthenticationFailedTrap=apSysMgmtAuthenticationFailedTrap, ApNetMgmtCtrlState=ApNetMgmtCtrlState, apSysMgmtSurrogateRegFailed=apSysMgmtSurrogateRegFailed, apSysMgmtTaskDeleteTrap=apSysMgmtTaskDeleteTrap, apENUMServerIpAddress=apENUMServerIpAddress, apSysMgmtMediaBandwidth=apSysMgmtMediaBandwidth, apSysMgmtAuthFailOrigin=apSysMgmtAuthFailOrigin, apSysMgmtCallsRejectedGroup=apSysMgmtCallsRejectedGroup, apSysMgmtSAIP=apSysMgmtSAIP, apSysMgmtRealmIcmpFailureClearTrap=apSysMgmtRealmIcmpFailureClearTrap, apSysMgmtXCodeEVSUtilGroup=apSysMgmtXCodeEVSUtilGroup, apSysMgmtAdminAuditPushFailTrap=apSysMgmtAdminAuditPushFailTrap, apLDAPServerStatusEntry=apLDAPServerStatusEntry, apSysAddressType=apSysAddressType, apSysMgmtInetAddrTrustedToUntrustedDOSTrap=apSysMgmtInetAddrTrustedToUntrustedDOSTrap, apSysCPUUtil=apSysCPUUtil, ApNetMgmtCtrlType=ApNetMgmtCtrlType)
