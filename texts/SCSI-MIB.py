#
# PySNMP MIB module SCSI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/equallogic/SCSI-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 15:38:54 2024
# On host fv-az973-242 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Gauge32, ModuleIdentity, Unsigned32, mib_2, MibIdentifier, NotificationType, Bits, ObjectIdentity, TimeTicks, Counter64, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "Unsigned32", "mib-2", "MibIdentifier", "NotificationType", "Bits", "ObjectIdentity", "TimeTicks", "Counter64", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Integer32")
TimeStamp, DisplayString, AutonomousType, RowPointer, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "AutonomousType", "RowPointer", "TextualConvention", "RowStatus", "TruthValue")
scsiModule = ModuleIdentity((1, 3, 6, 1, 2, 1, 999))
scsiModule.setRevisions(('2002-02-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: scsiModule.setRevisionsDescriptions((' Initial version published as RFC nnnn.',))
if mibBuilder.loadTexts: scsiModule.setLastUpdated('200202250000Z')
if mibBuilder.loadTexts: scsiModule.setOrganization('IETF')
if mibBuilder.loadTexts: scsiModule.setContactInfo(' \n          Michele Hallak-Stamler \n \n          Sanrad Intelligent Network \n          32 Habarzel Street \n          Tel Aviv, Israel \n      \n          Phone: +972 3 7674809 \n          E-mail: michele@sanrad.com \n    \n    \n          Yaron Lederman \n          Siliquent Technologies Ltd. \n          33 Bezalel Street  \n          Ramat Gan, Israel  \n          \n          Phone: +972 3 7552320 \n          E-mail: yaronl@siliquent.com \n    \n          Mark Bakke \n          Postal: Cisco Systems, Inc \n          6450 Wedgwood Road, Suite 130 \n          Maple Grove, MN \n          USA 55311 \n    \n          Phone: +1 763-398-1000 \n          Fax: +1 763-398-1001 \n          E-mail: mbakke@cisco.com \n    \n          Marjorie Krueger \n          Postal: Hewlett-Packard \n          Networked Storage Architecture \n          Networked Storage Solutions Org. \n          8000 Foothills Blvd. \n          Roseville, CA 95747 \n    \n          Phone: +1 916-785-2656 \n          Phone: +1 916-785-0391 \n          E-mail: marjorie_krueger@hp.com \n    \n          Keith McCloghrie \n          Cisco Systems, Inc. \n          Postal: 170 West Tasman Drive \n          San Jose, CA USA 95134 \n    \n          Phone: +1 408 526-5260 \n          E-mail: kzm@cisco.com \n    \n          ')
if mibBuilder.loadTexts: scsiModule.setDescription('The SCSI MIB')
class ScsiLUNOrZero(TextualConvention, OctetString):
    description = ' This Textual Convention represents either a SCSI Logical \n          Unit Number (LUN) or a zero-length string.  Objects defined \n          with this syntax must specify the meaning of the zero-length \n          string.  The format of a LUN is: \n          - a zero-length octet string or  \n          - a string of two octets if the underlying transport protocol \n          is SBP-3 or SPI-4 using data group transfers or \n          - a string of eight octets for all other cases.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(2, 2), ValueSizeConstraint(8, 8), )
class ScsiIndexValue(TextualConvention, Unsigned32):
    description = ' An arbitrary integer value, greater than zero, for use as a \n          unique index value.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class ScsiPortIndexValueOrZero(TextualConvention, Unsigned32):
    description = 'This textual convention is an extension of the \n          ScsiIndexValue convention.  The latter defines a greater than \n          zero value used to identify an index.  This extension permits \n          the additional value of zero and is applicable only to \n          indices of SCSI port.  Usage of the zero is object-specific \n          and must therefore be defined as part of the description of \n          any object, which uses this syntax.  Examples of the usage of \n          zero might include situations where index was unknown, or \n          when none or all indices need to be referenced.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class ScsiIndexValueOrZero(TextualConvention, Unsigned32):
    description = 'This textual convention is an extension of the \n          ScsiIndexValue convention.  The latter defines a greater than \n          zero value used to identify an index.  This extension permits \n          the additional value of zero. Usage of the zero is object-\n          specific and must therefore be defined as part of the \n          description of any object, which uses this syntax.  Examples \n          of the usage of zero might include situations where index was \n          unknown, or when none or all indices need to be referenced.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class ScsiIdentifier(TextualConvention, OctetString):
    description = 'This Textual Convention represents a generic SCSI device or \n          port identifier. \n          The format depends on the transport used: \n          - SPI: only bits:0-3 for a port identifier (LSB is 0 and MSB \n          is 3). Other bits must be zero.  \n          - SPI: identifier of a device is a zero-length octet string. \n          - FCP: 3 bytes for a port identifier \n          - FCP: identifier of a device is a zero-length octet string. \n          - SRP: 16 bytes for a port identifier. \n          - SRP: it is a zero-length octet string for a device \n          identifier. \n          - iSCSI: 256 bytes for a device identifier. \n          - iSCSI: 258 bytes for a target port identifier. \n          - iSCSI: 262 bytes for an initiator port identifier. \n          - SBP: it is a zero-length octet string for a device \n          identifier. \n          - SBP: 2 bytes for an initiator port identifier. \n          - SBP: 11 bytes for a target port identifier. '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 1), ValueSizeConstraint(2, 2), ValueSizeConstraint(3, 3), ValueSizeConstraint(11, 11), ValueSizeConstraint(16, 16), ValueSizeConstraint(256, 256), ValueSizeConstraint(258, 258), ValueSizeConstraint(262, 262), )
class ScsiName(TextualConvention, OctetString):
    description = ' This Textual Convention represents a generic SCSI device or \n          port name. \n          The format depends on the transport used: \n          - SPI: it is a zero-length octet string for a device or port \n          name. \n          - FCP: 8 bytes for a port name. \n          - FCP: it is a zero-length octet string for a device name. \n          - SRP: 16 bytes for a port name. \n          - SRP: it is a zero-length octet string for a device name. \n          - iSCSI: 256 bytes for a device name. \n          - iSCSI: 258 bytes for a target port name. \n          - iSCSI: 262 bytes for an initiator port name. \n          - SBP: it is a zero-length octet string for a device name. \n          - SBP: 8 bytes for an initiator port name. \n          - SBP: 11 bytes for a target port name. '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), ValueSizeConstraint(11, 11), ValueSizeConstraint(16, 16), ValueSizeConstraint(256, 256), ValueSizeConstraint(258, 258), ValueSizeConstraint(262, 262), )
class ScsiNameIdOrZero(TextualConvention, OctetString):
    description = ' This Textual Convention represents either the SCSI name of \n          a logical unit or a zero-length string.  Objects defined with \n          this syntax must specify the meaning of the zero-length \n          string.  The format of the name of a LU is: \n          - a zero-length octet string or  \n          - a string of eight octets.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), )
class ScsiDeviceOrPort(TextualConvention, Integer32):
    description = 'This type specifies whether a particular configuration is \n          applicable to a port or to a device.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("device", 1), ("port", 2), ("other", 3))

class ScsiIdCodeSet(TextualConvention, Unsigned32):
    reference = ' ANSI - SCSI Primary Commands - 2 (SPC-2), Revision 20, 18 \n          July 2001 Chapter 8: section 8.4.4, page 210 Vital Product \n          Data Parameters [16]'
    description = "This Textual Convention specifies the code set in use with \n          this identifier. \n          The format is the same as contained in the identifier's \n          Identification Descriptor within the Logical Unit's Device \n          Identification Page."
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 15)

class ScsiIdAssociation(TextualConvention, Unsigned32):
    reference = ' ANSI - SCSI Primary Commands - 2 (SPC-2), Revision 20, 18 \n          July 2001 - Chapter 8: section 8.4.4, page 210 Vital Product \n          Data Parameters [16]'
    description = "This Textual Convention specifies what the identifier is \n          associated with (e.g, with the addressed physical/logical \n          device or with a particular port).   \n          The format is the same as contained in the identifier's \n          Identification Descriptor within the Logical Unit's Device \n          Identification Page."
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 3)

class ScsiIdType(TextualConvention, Unsigned32):
    reference = ' ANSI - SCSI Primary Commands - 2 (SPC-2), Revision 20, \n          Chapter 8: section 8.4.4, page 210 Vital Product Data \n          Parameters  [16]'
    description = "This Textual Convention specifies the type of the \n          identifier.  \n          The format is the same as contained in the identifier's \n          Identification Descriptor within the Logical Unit's Device \n          Identification Page."
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 15)

class ScsiIdValue(TextualConvention, OctetString):
    reference = ' ANSI - SCSI Primary Commands - 2 (SPC-2), Revision 20, 18 \n          July 2001 - Chapter 8: section 8.4.4, page 210 Vital Product \n          Data Parameters [16]'
    description = "This Textual Convention represents an identifier. The \n          objects of type ScsiIdCodeSet, ScsIdAssociation, ScsiIdType, \n          define together the format. \n          The format is the same as contained in the identifier's \n          Identification Descriptor within the Logical Unit's Device \n          Identification Page."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class HrSWInstalledIndexOrZero(TextualConvention, Integer32):
    reference = 'hrSWInstalledTable is defined in the Host Resources MIB, RFC \n          2790.'
    description = "The index value for a software module's row in the Host \n          Resources MIB's hrSWInstalledTable.  A zero value indicates \n          that no row in the hrSWInstalledTable is applicable."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

scsiObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1))
scsiNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 2))
scsiConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 3))
scsiTransportTypes = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 1))
scsiGeneral = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 2))
scsiInitiator = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 3))
scsiTarget = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 4))
scsiLogicalUnit = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 5))
scsiTranportOther = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 1, 1))
scsiTranportSPI = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 1, 2))
scsiTransportFCP = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 1, 3))
scsiTransportSRP = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 1, 4))
scsiTransportISCSI = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 1, 5))
scsiTransportSBP = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 1, 6))
scsiInstanceTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 2, 1), )
if mibBuilder.loadTexts: scsiInstanceTable.setStatus('current')
if mibBuilder.loadTexts: scsiInstanceTable.setDescription('A list of SCSI instances present on the system. \n          The SCSI Instance is the top-level entity, to which \n          everything else belongs. An SNMP agent could represent more \n          than one instance if it represents either a stack of devices, \n          or virtual partitions of a larger device, or a host running \n          multiple SCSI implementations from different vendors.')
scsiInstanceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"))
if mibBuilder.loadTexts: scsiInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: scsiInstanceEntry.setDescription('An entry (row) containing management information applicable \n          to a particular SCSI instance.')
scsiInstIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiInstIndex.setStatus('current')
if mibBuilder.loadTexts: scsiInstIndex.setDescription('This object represents an arbitrary integer used to uniquely \n          identify a particular SCSI instance.')
scsiInstAlias = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiInstAlias.setStatus('current')
if mibBuilder.loadTexts: scsiInstAlias.setDescription('This object represents an administrative string, configured \n          by the administrator. It can be a zero-length string.')
scsiInstSoftwareIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 1, 3), HrSWInstalledIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiInstSoftwareIndex.setReference('hrSWInstalledIndex is defined in the Host Resources MIB, RFC \n          2790.')
if mibBuilder.loadTexts: scsiInstSoftwareIndex.setStatus('current')
if mibBuilder.loadTexts: scsiInstSoftwareIndex.setDescription("If this management instance corresponds to an installed \n          software module, then this object's value is the value of the \n \n          hrSWInstalledIndex of that module.  If there is no \n          correspondence to an installed software module (or no module \n          which has a hrSWInstalledIndex value), then the value of this \n          object is zero.")
scsiInstVendorVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiInstVendorVersion.setStatus('current')
if mibBuilder.loadTexts: scsiInstVendorVersion.setDescription('This object represents a text string set by the manufacturer \n          describing the version of this instance.  The format of this \n          string is determined solely by the manufacturer, and is for \n          informational purposes only.  It is unrelated to the SCSI \n          specification version numbers.')
scsiInstScsiNotificationsEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiInstScsiNotificationsEnable.setStatus('current')
if mibBuilder.loadTexts: scsiInstScsiNotificationsEnable.setDescription('This object allows to enable/disable sending all the \n          notifications defined in this MIB.')
scsiDeviceTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 2, 2), )
if mibBuilder.loadTexts: scsiDeviceTable.setStatus('current')
if mibBuilder.loadTexts: scsiDeviceTable.setDescription('A list of SCSI Devices present on the system.')
scsiDeviceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 2, 2, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"))
if mibBuilder.loadTexts: scsiDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: scsiDeviceEntry.setDescription('An entry (row) containing management information applicable \n          to a particular SCSI Device included in this SCSI manageable \n          instance.')
scsiDeviceIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 2, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: scsiDeviceIndex.setDescription(' This object is an arbitrary integer used to uniquely \n          identify a particular device within a particular SCSI \n          instance.')
scsiDeviceAlias = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiDeviceAlias.setStatus('current')
if mibBuilder.loadTexts: scsiDeviceAlias.setDescription(' This object represents is an admistrative name for this \n          device. If no name is assigned, the value of this object is \n          the zero-length string.')
scsiDeviceRole = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 2, 1, 3), Bits().clone(namedValues=NamedValues(("target", 0), ("initiator", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDeviceRole.setStatus('current')
if mibBuilder.loadTexts: scsiDeviceRole.setDescription(' This object determines whether this device is acting as an \n          initiator device, or as a target device or as both.')
scsiDevicePortNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDevicePortNumber.setStatus('current')
if mibBuilder.loadTexts: scsiDevicePortNumber.setDescription('This object represents the number of ports contained in this \n       device.')
scsiDeviceResets = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDeviceResets.setStatus('current')
if mibBuilder.loadTexts: scsiDeviceResets.setDescription('This object represents the number of times that this device \n          has reset.')
scsiPortTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 2, 3), )
if mibBuilder.loadTexts: scsiPortTable.setStatus('current')
if mibBuilder.loadTexts: scsiPortTable.setDescription('A list of SCSI Ports for each SCSI device in each instance.')
scsiPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 2, 3, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"))
if mibBuilder.loadTexts: scsiPortEntry.setStatus('current')
if mibBuilder.loadTexts: scsiPortEntry.setDescription('An entry (row) containing management information applicable \n          to a particular SCSI port of a particular SCSI device in a \n          particular SCSI instance.')
scsiPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 3, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiPortIndex.setStatus('current')
if mibBuilder.loadTexts: scsiPortIndex.setDescription('An arbitrary integer used to uniquely identify a particular \n          port of a given device within a particular SCSI instance.')
scsiPortRole = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 3, 1, 2), Bits().clone(namedValues=NamedValues(("target", 0), ("initiator", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiPortRole.setStatus('current')
if mibBuilder.loadTexts: scsiPortRole.setDescription('This object indicates whether this port is acting as an \n          initiator port, or as a target port or as both.')
scsiPortTrnsptPtr = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiPortTrnsptPtr.setStatus('current')
if mibBuilder.loadTexts: scsiPortTrnsptPtr.setDescription('This object is a pointer to the corresponding row in the \n       scsiTrnsptTable')
scsiPortBusyStatuses = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiPortBusyStatuses.setStatus('current')
if mibBuilder.loadTexts: scsiPortBusyStatuses.setDescription('This object represents the number of port busy status sent \n          or received by this port. Note: Initiator ports only receive \n          busy status and target ports only send busy status.')
scsiTrnsptTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 2, 5), )
if mibBuilder.loadTexts: scsiTrnsptTable.setStatus('current')
if mibBuilder.loadTexts: scsiTrnsptTable.setDescription('This table contains a list of transports in use with each \n          SCSI device.')
scsiTrnsptEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 2, 5, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiTrnsptIndex"))
if mibBuilder.loadTexts: scsiTrnsptEntry.setStatus('current')
if mibBuilder.loadTexts: scsiTrnsptEntry.setDescription('An entry (row) containing parameters applicable to a \n          transport used by a particular device of a particular SCSI \n          manageable instance.')
scsiTrnsptIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 5, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiTrnsptIndex.setStatus('current')
if mibBuilder.loadTexts: scsiTrnsptIndex.setDescription('An arbitrary integer used to uniquely identify a particular \n          transport within a given device within a particular SCSI \n          instance.')
scsiTrnsptType = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTrnsptType.setStatus('current')
if mibBuilder.loadTexts: scsiTrnsptType.setDescription(' This object represents the type of transport for this \n          particular transport.')
scsiTrnsptPointer = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTrnsptPointer.setStatus('current')
if mibBuilder.loadTexts: scsiTrnsptPointer.setDescription(" This object represents a pointer to a conceptual row in a \n          'transport' MIB allowing a manager to get useful information \n          for the transport described by this entry. \n          For example, if the transport of this device is iSCSI, this \n          object will point to the iSCSI Instance of the iSCSI MIB. \n          If there is no MIB for this transport, this object has the \n          value 0.0.")
scsiTrnsptDevName = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 2, 5, 1, 4), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTrnsptDevName.setStatus('current')
if mibBuilder.loadTexts: scsiTrnsptDevName.setDescription(' This object represents the name of this device in one of \n          the format(s) appropriate for this type of transport.')
scsiIntrDevTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 3, 1), )
if mibBuilder.loadTexts: scsiIntrDevTable.setStatus('current')
if mibBuilder.loadTexts: scsiIntrDevTable.setDescription('This table contains information for each local initiator \n          device.')
scsiIntrDevEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 3, 1, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"))
if mibBuilder.loadTexts: scsiIntrDevEntry.setStatus('current')
if mibBuilder.loadTexts: scsiIntrDevEntry.setDescription('An entry (row) containing information applicable to an \n          initiator device within a particular SCSI instance.')
scsiIntrDevTgtAccessMode = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("autoEnable", 2), ("manualEnable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiIntrDevTgtAccessMode.setStatus('current')
if mibBuilder.loadTexts: scsiIntrDevTgtAccessMode.setDescription('This object controls whether a discovered target is \n          immediately authorized or not: \n          - autoEnable (2) means that when an initiator discovers a \n          target, it can use it immediately,  \n          - manualEnable (3) means that the initiator must wait for an \n          operator to set scsiIntrDscTgtConfigured = true before it is \n          authorized.')
scsiIntrDevOutResets = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrDevOutResets.setStatus('current')
if mibBuilder.loadTexts: scsiIntrDevOutResets.setDescription(' This object represents the number of resets sent by this \n          initiator.')
scsiIntrPrtTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 3, 3), )
if mibBuilder.loadTexts: scsiIntrPrtTable.setStatus('current')
if mibBuilder.loadTexts: scsiIntrPrtTable.setDescription('This table contains all the initiator ports of local SCSI \n          Initiator or Target/Initiator devices.')
scsiIntrPrtEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 3, 3, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"))
if mibBuilder.loadTexts: scsiIntrPrtEntry.setStatus('current')
if mibBuilder.loadTexts: scsiIntrPrtEntry.setDescription('An entry (row) containing information applicable to a \n          particular initiator port of a particular device within a \n          SCSI instance. ')
scsiIntrPrtName = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 3, 1, 1), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPrtName.setStatus('current')
if mibBuilder.loadTexts: scsiIntrPrtName.setDescription(' This object represents the name of the port assigned for \n          use by the SCSI protocol. The format will depend of the type \n          of transport this port is using.')
scsiIntrPrtIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 3, 1, 2), ScsiIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPrtIdentifier.setStatus('current')
if mibBuilder.loadTexts: scsiIntrPrtIdentifier.setDescription(' This object represents the identifier of the port in one of \n          the format(s) appropriate for the type of transport in use.')
scsiIntrPrtOutCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 3, 1, 3), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPrtOutCommands.setStatus('current')
if mibBuilder.loadTexts: scsiIntrPrtOutCommands.setDescription('This object represents the number of commands sent by this \n          initiator.')
scsiIntrPrtWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 3, 1, 4), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPrtWrittenMegaBytes.setStatus('current')
if mibBuilder.loadTexts: scsiIntrPrtWrittenMegaBytes.setDescription('This object represents the amount of data in Megabytes sent \n          by this initiator.')
scsiIntrPrtReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 3, 1, 5), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPrtReadMegaBytes.setStatus('current')
if mibBuilder.loadTexts: scsiIntrPrtReadMegaBytes.setDescription('This object represents the amount of data in Megabytes \n          received by this initiator.')
scsiIntrPrtHSOutCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 3, 1, 6), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPrtHSOutCommands.setStatus('current')
if mibBuilder.loadTexts: scsiIntrPrtHSOutCommands.setDescription('This object represents the number of commands sent by this \n          initiator device. This object provides support for systems \n          which can quickly generate lots of commands because they run \n          at high speed.')
scsiRemoteTarget = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 3, 4))
scsiDscTgtTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1), )
if mibBuilder.loadTexts: scsiDscTgtTable.setStatus('current')
if mibBuilder.loadTexts: scsiDscTgtTable.setDescription('This table includes all the remote (not in the local system) \n          target ports that are authorized to attach to each local \n          initiator port of this SCSI instance.')
scsiDscTgtEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiDscTgtIntrPortIndex"), (0, "SCSI-MIB", "scsiDscTgtIndex"))
if mibBuilder.loadTexts: scsiDscTgtEntry.setStatus('current')
if mibBuilder.loadTexts: scsiDscTgtEntry.setDescription('An entry (row) represents an authorization for one or all \n          local initiator ports of a local device (scsiDeviceIndex) \n          within a local SCSI instance (scsiInstIndex), to attach to a \n          remote target port or device (scsiDscTgtIndex).  The \n \n          authorization is either for all local ports if \n          scsiDscTgtIntrPortIndex is zero, or otherwise only for the \n          specific port identified by scsiDscTgtIntrPortIndex. \n          Note that when an entry in this table is deleted, then any \n          corresponding entries in the scsiDscLunsTable should be \n          deleted as well.')
scsiDscTgtIntrPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1, 1), ScsiPortIndexValueOrZero())
if mibBuilder.loadTexts: scsiDscTgtIntrPortIndex.setStatus('current')
if mibBuilder.loadTexts: scsiDscTgtIntrPortIndex.setDescription('This object relates to a particular local device within a \n          particular SCSI instance and specifies: \n          - the index of the local scsi initiator port, \n          - or zero, if this entry refers to the local device and \n          therefore refers to all the local initiator ports.')
scsiDscTgtIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1, 2), ScsiIndexValue())
if mibBuilder.loadTexts: scsiDscTgtIndex.setStatus('current')
if mibBuilder.loadTexts: scsiDscTgtIndex.setDescription('This object is an arbitrary integer used to uniquely \n          identify a particular authorized target amongst those \n          authorized for one or more ports (of a particular device \n          within a particular SCSI instance) to attach to.')
scsiDscTgtDevOrPort = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1, 3), ScsiDeviceOrPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiDscTgtDevOrPort.setStatus('current')
if mibBuilder.loadTexts: scsiDscTgtDevOrPort.setDescription('This object specifies whether the authorization represented \n          by this row applies to a remote target port or remote target \n          device.')
scsiDscTgtName = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1, 4), ScsiName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiDscTgtName.setStatus('current')
if mibBuilder.loadTexts: scsiDscTgtName.setDescription(' This object represents the name of this \n          authorized/discovered target device or port.')
scsiDscTgtConfigured = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiDscTgtConfigured.setStatus('current')
if mibBuilder.loadTexts: scsiDscTgtConfigured.setDescription('This object means: \n          -true(1): this entry has been configured by an administrator \n          -false(2): this entry has been added from other source. \n          An administrator can modify this value from false to true.')
scsiDscTgtDiscovered = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtDiscovered.setStatus('current')
if mibBuilder.loadTexts: scsiDscTgtDiscovered.setDescription('This object means: \n          -true(1): this entry has been discovered by the SCSI instance. \n          -false(2): this entry has been added from other source. \n          This entry is read-only because an administrator cannot \n          change it. \n          Note that it is an implementation decision to determine how \n          long to retain a row with configured=false, as and when the \n          target is no longer visible/accessible to the local \n          initiator.')
scsiDscTgtInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1, 7), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtInCommands.setStatus('current')
if mibBuilder.loadTexts: scsiDscTgtInCommands.setDescription('This object represents the number of commands received by \n          this target port or device.')
scsiDscTgtWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1, 8), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtWrittenMegaBytes.setStatus('current')
if mibBuilder.loadTexts: scsiDscTgtWrittenMegaBytes.setDescription('This object represents the amount of data in Megabytes \n          written by this target port or device.')
scsiDscTgtReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1, 9), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtReadMegaBytes.setStatus('current')
if mibBuilder.loadTexts: scsiDscTgtReadMegaBytes.setDescription('This object represents the amount of data in Megabytes read \n          by this target port or device.')
scsiDscTgtHSInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1, 10), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtHSInCommands.setStatus('current')
if mibBuilder.loadTexts: scsiDscTgtHSInCommands.setDescription('This object represents the number of commands received by \n          this target port or device. This object provides support for \n          systems which can quickly generate lots of commands because \n          they run at high speed.')
scsiDscTgtLastCreation = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtLastCreation.setStatus('current')
if mibBuilder.loadTexts: scsiDscTgtLastCreation.setDescription('This object represents the value of sysUpTime when this row \n          was created.')
scsiDscTgtRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiDscTgtRowStatus.setStatus('current')
if mibBuilder.loadTexts: scsiDscTgtRowStatus.setDescription('This object allows to configure dynamically a new entry in \n          this table via SNMP or eventually delete it. \n \n          An administrator is not allowed to delete an entry for which \n          the value of the object scsiIntrDscTgtDiscovered is equal to \n          true.  \n          Note that when an entry in this table is deleted, then any \n          corresponding entries in the scsiDscLunsTable must also be \n          automatically deleted. ')
scsiDscLunTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 2), )
if mibBuilder.loadTexts: scsiDscLunTable.setStatus('current')
if mibBuilder.loadTexts: scsiDscLunTable.setDescription('This table includes all the remote (not in the local system) \n          logical unit numbers (LUNS) discovered via each local \n          initiator port of each local device within a particular SCSI \n          instance.')
scsiDscLunEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 2, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiDscTgtIntrPortIndex"), (0, "SCSI-MIB", "scsiDscTgtIndex"), (0, "SCSI-MIB", "scsiDscLunIndex"))
if mibBuilder.loadTexts: scsiDscLunEntry.setStatus('current')
if mibBuilder.loadTexts: scsiDscLunEntry.setDescription('An entry (row) represents a discovered LUN at a particular \n          SCSI target device (scsiDscTgtIndex), where the LUN was \n          discovered by a particular local initiator device within a \n          particular SCSI instance, possibly via a particular local \n          initiator port. \n          Note that when an entry in the scsiDscTgtTable is deleted, \n          then any corresponding entries in this table is automatically \n          deleted.')
scsiDscLunIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 2, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiDscLunIndex.setStatus('current')
if mibBuilder.loadTexts: scsiDscLunIndex.setDescription('This object is an arbitrary integer used to uniquely \n          identify a particular LUN discovered by a particular scsi \n          initiator port or a particular SCSI initiator device within a \n          particular SCSI instance. Entries in the scsiDscLunIdTable \n \n          are associated with a LUN by having the value of this object \n          in their INDEX.')
scsiDscLunLun = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 2, 1, 2), ScsiLUNOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunLun.setStatus('current')
if mibBuilder.loadTexts: scsiDscLunLun.setDescription('This object contains the Logical Unit Number (LUN) of the \n          discovered logical unit. \n          A value of zero has no meaning in this case.')
scsiDscLunIdTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 3), )
if mibBuilder.loadTexts: scsiDscLunIdTable.setStatus('current')
if mibBuilder.loadTexts: scsiDscLunIdTable.setDescription('This table includes all the known LU Identifiers of the \n          remote (not in the local system) logical units discovered via \n          each local initiator port or device of this SCSI instance.')
scsiDscLunIdEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 3, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiDscTgtIntrPortIndex"), (0, "SCSI-MIB", "scsiDscTgtIndex"), (0, "SCSI-MIB", "scsiDscLunIndex"), (0, "SCSI-MIB", "scsiDscLunIdIndex"))
if mibBuilder.loadTexts: scsiDscLunIdEntry.setStatus('current')
if mibBuilder.loadTexts: scsiDscLunIdEntry.setDescription('An entry (row) represents the LU Identifier of a discovered \n          LUN at a particular SCSI target device (scsiDscTgtIndex), \n          where the LUN was discovered by a particular local initiator \n          device within a particular SCSI instance, possibly via a \n          particular local initiator port.')
scsiDscLunIdIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 3, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiDscLunIdIndex.setStatus('current')
if mibBuilder.loadTexts: scsiDscLunIdIndex.setDescription('This object is an arbitrary integer used to uniquely \n          identify a particular LUN Identifier discovered by each scsi \n          initiator device or particular SCSI initiator port within a \n          particular SCSI instance.')
scsiDscLunIdCodeSet = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 3, 1, 2), ScsiIdCodeSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunIdCodeSet.setReference(' ANSI - SCSI Primary Commands - 2 (SPC-2),Revision 20,   \n          Chapter 8: section 8.4.4, page 210 Vital Product Data \n          Parameters [16]')
if mibBuilder.loadTexts: scsiDscLunIdCodeSet.setStatus('current')
if mibBuilder.loadTexts: scsiDscLunIdCodeSet.setDescription("This object specifies the code set in use with this \n          identifier. \n          The value is represented in the same format as is contained \n          in the identifier's Identification Descriptor within the \n          Logical Unit's Device Identification Page.")
scsiDscLunIdAssociation = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 3, 1, 3), ScsiIdAssociation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunIdAssociation.setReference(' ANSI - SCSI Primary Commands - 2 (SPC-2), Revision 20, \n          Chapter 8: section 8.4.4, page 210 Vital Product Data \n          Parameters [16]')
if mibBuilder.loadTexts: scsiDscLunIdAssociation.setStatus('current')
if mibBuilder.loadTexts: scsiDscLunIdAssociation.setDescription("This object specifies what the identifier is associated with \n          (e.g, with the addressed physical/logical device or with a \n          particular port).  The value is represented in the same \n          format as is contained in the identifier's Identification \n          Descriptor within the Logical Unit's Device Identification \n          Page.")
scsiDscLunIdType = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 3, 1, 4), ScsiIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunIdType.setReference(' ANSI - SCSI Primary Commands - 2 (SPC-2), Revision 20, \n          Chapter 8: section 8.4.4, page 210 Vital Product Data \n          Parameters  [16]')
if mibBuilder.loadTexts: scsiDscLunIdType.setStatus('current')
if mibBuilder.loadTexts: scsiDscLunIdType.setDescription("This object specifies the type of the identifier.  \n          The value is represented in the same format as is contained \n          in the identifier's Identification Descriptor within the \n          Logical Unit's Device Identification Page.")
scsiDscLunIdValue = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 3, 1, 5), ScsiIdValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunIdValue.setReference(' ANSI - SCSI Primary Commands - 2 (SPC-2), \n          Chapter 8: section 8.4.4, page 210 Vital Product Data \n     Parameters  [16]')
if mibBuilder.loadTexts: scsiDscLunIdValue.setStatus('current')
if mibBuilder.loadTexts: scsiDscLunIdValue.setDescription(" This object represents the actual value of this identifier. \n          The format is defined by the objects scsiDscLunIdCodeSet, \n          scsiDscLunIdAssociation, scsiDscLunIdType. \n          The value is represented in the same format as is contained \n          in the identifier's Identification Descriptor within the \n          Logical Unit's Device Identification Page.")
scsiAttTgtPortTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 6), )
if mibBuilder.loadTexts: scsiAttTgtPortTable.setStatus('current')
if mibBuilder.loadTexts: scsiAttTgtPortTable.setDescription('This table includes all the remote (not in the local system) \n          target ports that are currently attached to each local \n          initiator port of this SCSI instance.')
scsiAttTgtPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 6, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"), (0, "SCSI-MIB", "scsiAttTgtPortIndex"))
if mibBuilder.loadTexts: scsiAttTgtPortEntry.setStatus('current')
if mibBuilder.loadTexts: scsiAttTgtPortEntry.setDescription('An entry (row) represents a remote target port \n       (scsiAttTgtPortIndex) currently attached to a particular \n       initiator port (scsiPortIndex) of a particular SCSI initiator \n       device within a particular SCSI instance.')
scsiAttTgtPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 6, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiAttTgtPortIndex.setStatus('current')
if mibBuilder.loadTexts: scsiAttTgtPortIndex.setDescription('An arbitrary integer used to uniquely identify a particular \n          target currently attached to a particular SCSI initiator port \n          of a particular SCSI initiator device within a particular \n          SCSI instance.')
scsiAttTgtPortDscTgtIdx = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 6, 1, 2), ScsiIndexValueOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttTgtPortDscTgtIdx.setStatus('current')
if mibBuilder.loadTexts: scsiAttTgtPortDscTgtIdx.setDescription('This object contains the value of the scsiAttTgtPortIndex \n          index variable for the row in the scsiDscTgtTable \n          representing this currently attached target port.  If the \n          currently attached target port is not represented in the \n          scsiDscTgtTable, then the value of this object is zero.')
scsiAttTgtPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 6, 1, 3), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttTgtPortName.setStatus('current')
if mibBuilder.loadTexts: scsiAttTgtPortName.setDescription(' This object contains the name of the attached target port.')
scsiAttTgtPortIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 3, 4, 6, 1, 4), ScsiIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttTgtPortIdentifier.setStatus('current')
if mibBuilder.loadTexts: scsiAttTgtPortIdentifier.setDescription(' This object contains the identifier of the attached target \n          port.')
scsiTgtDevTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 4, 1), )
if mibBuilder.loadTexts: scsiTgtDevTable.setStatus('current')
if mibBuilder.loadTexts: scsiTgtDevTable.setDescription('This table contains information about each local target \n          device.')
scsiTgtDevEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 4, 1, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"))
if mibBuilder.loadTexts: scsiTgtDevEntry.setStatus('current')
if mibBuilder.loadTexts: scsiTgtDevEntry.setDescription('An entry (row) containing information applicable to a \n          particular local target device within a particular SCSI \n          instance. ')
scsiTgtDevNumberOfLUs = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtDevNumberOfLUs.setStatus('current')
if mibBuilder.loadTexts: scsiTgtDevNumberOfLUs.setDescription('This object is the number of Logical Units accessible via \n          this local target device.')
scsiTgtDeviceStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("available", 2), ("broken", 3), ("readying", 4), ("abnormal", 5), ("nonAddrFailure", 6), ("nonAddrFailReadying", 7), ("nonAddrFailAbnormal", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtDeviceStatus.setReference('SCSI Controller Commands-2 (SCC-2) standard NCITS.318-1998 \n          6.3.1.8 REPORT STATES service action')
if mibBuilder.loadTexts: scsiTgtDeviceStatus.setStatus('current')
if mibBuilder.loadTexts: scsiTgtDeviceStatus.setDescription(' This object represents the status of this SCSI device, \n          summarizing the state of both the addressable devices (i.e., \n          the logical units) and the non-addressable devices within \n          this SCSI device: \n          - unknown(1): This value is used when the status cannot be \n          determined \n          - available(2): All addressable and non-addressable devices \n          within the SCSI device are fully operational (i.e., no \n          logical units have an abnormal status). \n          - broken(3): The SCSI device is not operational and cannot be \n          made operational without external intervention. \n          - readying(4): One or more logical units within the SCSI \n          device are being initialized and access to the SCSI device is \n \n          temporarily limited (i.e., one or more of the logical unit \n          have a readying status). \n          - abnormal(5): One or more addressable devices within the \n          SCSI device are indicating a status other than available; \n          nevertheless, the SCSI device is operational (i.e., one or \n          more of the logical units have an abnormal status). \n          - nonAddrFailure(6): One or more non-addressable devices \n          within the SCSI device have failed; nevertheless, the SCSI \n          device is operational (i.e., no logical units have an \n          abnormal or readying status). \n          - nonAddrFailReadying(7): One or more non-addressable devices \n          within the SCSI device have failed; nevertheless,one or more \n          logical units within the SCSI device are being initialized \n          and access to the SCSI device is temporarily limited. \n          - nonAddrFailAbnormal(8): One or more non-addressable devices \n          within the SCSI device have failed and one or more \n          addressable devices within the SCSI device are indicating a \n          status other than available however the SCSI device is \n          operational. \n          ')
scsiTgtDevNonAccessibleLUs = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtDevNonAccessibleLUs.setStatus('current')
if mibBuilder.loadTexts: scsiTgtDevNonAccessibleLUs.setDescription('This object is the number of Logical Units existing but not \n          currently accessible via this local target device.')
scsiTgtPortTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 4, 2), )
if mibBuilder.loadTexts: scsiTgtPortTable.setStatus('current')
if mibBuilder.loadTexts: scsiTgtPortTable.setDescription('This table includes all the local target ports of all the \n          local target devices.')
scsiTgtPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 4, 2, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"))
if mibBuilder.loadTexts: scsiTgtPortEntry.setStatus('current')
if mibBuilder.loadTexts: scsiTgtPortEntry.setDescription('An entry (row) containing information applicable to a \n          particular local target port of a particular local target \n          device within a particular SCSI instance. ')
scsiTgtPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 2, 1, 1), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortName.setStatus('current')
if mibBuilder.loadTexts: scsiTgtPortName.setDescription(' This object represents the name of the port assigned for \n          use in the SCSI protocol.')
scsiTgtPortIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 2, 1, 2), ScsiIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortIdentifier.setStatus('current')
if mibBuilder.loadTexts: scsiTgtPortIdentifier.setDescription(' This object represents the identifier of the port in one of \n          the format(s) appropriate for the type of transport.')
scsiTgtPortInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 2, 1, 3), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortInCommands.setStatus('current')
if mibBuilder.loadTexts: scsiTgtPortInCommands.setDescription(' This object represents the number of commands received by \n          this target port.')
scsiTgtPortWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 2, 1, 4), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortWrittenMegaBytes.setStatus('current')
if mibBuilder.loadTexts: scsiTgtPortWrittenMegaBytes.setDescription(' This object represents the amount of data written in \n          Megabytes by this target port.')
scsiTgtPortReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 2, 1, 5), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortReadMegaBytes.setStatus('current')
if mibBuilder.loadTexts: scsiTgtPortReadMegaBytes.setDescription(' This object represents the amount of data read in Megabytes \n          by this target port.')
scsiTgtPortHSInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 2, 1, 6), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortHSInCommands.setStatus('current')
if mibBuilder.loadTexts: scsiTgtPortHSInCommands.setDescription(' This object represents the number of commands received. \n          This object provides support for systems that can quickly \n          generate lots of commands because they run at high speed.')
scsiRemoteInitiators = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 1, 4, 3))
scsiAuthorizedIntrTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1), )
if mibBuilder.loadTexts: scsiAuthorizedIntrTable.setStatus('current')
if mibBuilder.loadTexts: scsiAuthorizedIntrTable.setDescription('This table includes all the authorized initiator devices or \n          ports that may attach a target device or port of the local \n          SCSI instance. Statistics are kept for each such \n          authorization; thus, the authorizations should be configured \n          in the manner, which will cause the desired set of statistics \n          to be collected and that will determine the correct LUN map.')
scsiAuthorizedIntrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiAuthIntrTgtPortIndex"), (0, "SCSI-MIB", "scsiAuthIntrIndex"))
if mibBuilder.loadTexts: scsiAuthorizedIntrEntry.setStatus('current')
if mibBuilder.loadTexts: scsiAuthorizedIntrEntry.setDescription('An entry (row) represents a remote initiator port or remote \n          initiator device that may attach to the local target port or \n          device within a particular SCSI instance.')
scsiAuthIntrTgtPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1, 1), ScsiPortIndexValueOrZero())
if mibBuilder.loadTexts: scsiAuthIntrTgtPortIndex.setStatus('current')
if mibBuilder.loadTexts: scsiAuthIntrTgtPortIndex.setDescription('This object contains either the index of the port, or zero \n          to indicate any port, on the particular local target device.')
scsiAuthIntrIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1, 2), ScsiIndexValue())
if mibBuilder.loadTexts: scsiAuthIntrIndex.setStatus('current')
if mibBuilder.loadTexts: scsiAuthIntrIndex.setDescription('This object is an arbitrary integer used to uniquely \n          identify a SCSI initiator which is authorized to attach to a \n          particular local target device or port of a particular SCSI \n          instance.')
scsiAuthIntrDevOrPort = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1, 3), ScsiDeviceOrPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiAuthIntrDevOrPort.setStatus('current')
if mibBuilder.loadTexts: scsiAuthIntrDevOrPort.setDescription('This object specifies if this entry refers to a remote \n          initiator port or a device. \n          A value of device(1) means that the authorized remote \n          initiator is a device and includes all its ports. \n          A value of port(2) means that the authorized remote initiator \n          is a port.')
scsiAuthIntrName = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1, 4), ScsiName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiAuthIntrName.setStatus('current')
if mibBuilder.loadTexts: scsiAuthIntrName.setDescription('This object represents the name of the remote initiator \n          device or port authorized by this row.')
scsiAuthIntrLunMapIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1, 5), ScsiIndexValueOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiAuthIntrLunMapIndex.setStatus('current')
if mibBuilder.loadTexts: scsiAuthIntrLunMapIndex.setDescription('This object identifies the set of entries in the \n          scsiLunMapTable for which scsiLunMapIndex has the same value \n          as the value of this object.  The identified set of entries \n          constitute the LUN map to be used for accessing logical units \n          when the remote initiator port or device corresponding to \n          this entry is attached to any local target port or device \n          corresponding to this entry. \n          Note that this object has a value of zero if this entry \n          should use the default LUN map.')
scsiAuthIntrAttachedTimes = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1, 6), Counter32()).setUnits('Times').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrAttachedTimes.setStatus('current')
if mibBuilder.loadTexts: scsiAuthIntrAttachedTimes.setDescription('This object indicates the number of times that this remote \n          initiator has transitioned from unattached to attached to \n          this local target device or port.')
scsiAuthIntrOutCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1, 7), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrOutCommands.setStatus('current')
if mibBuilder.loadTexts: scsiAuthIntrOutCommands.setDescription('This object indicates the number of commands that the remote \n          initiator corresponding to this entry has sent to the local \n          target device or port corresponding to this entry.')
scsiAuthIntrReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1, 8), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrReadMegaBytes.setStatus('current')
if mibBuilder.loadTexts: scsiAuthIntrReadMegaBytes.setDescription('This object indicates the amount of data in Megabytes that \n          the remote initiator corresponding to this entry has read \n \n          from the local target device or port corresponding to this \n          entry.')
scsiAuthIntrWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1, 9), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrWrittenMegaBytes.setStatus('current')
if mibBuilder.loadTexts: scsiAuthIntrWrittenMegaBytes.setDescription('This object indicates the amount of data in Megabytes that \n          the remote initiator corresponding to this entry has written \n          from the local target device or port corresponding to this \n          entry.')
scsiAuthIntrHSOutCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1, 10), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrHSOutCommands.setStatus('current')
if mibBuilder.loadTexts: scsiAuthIntrHSOutCommands.setDescription('This object represents the number of commands sent by the \n          remote initiator corresponding to this entry to the local \n          target device or port corresponding to this entry. This \n          object provides support for systems which can quickly \n          generate lots of commands because they run at high speed.')
scsiAuthIntrLastCreation = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrLastCreation.setStatus('current')
if mibBuilder.loadTexts: scsiAuthIntrLastCreation.setDescription('This object indicates the value of sysUpTime when this row \n          was last created.')
scsiAuthIntrRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiAuthIntrRowStatus.setStatus('current')
if mibBuilder.loadTexts: scsiAuthIntrRowStatus.setDescription('This object allows an administrator to create or delete this \n          entry.')
scsiAttIntrPrtTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 2), )
if mibBuilder.loadTexts: scsiAttIntrPrtTable.setStatus('current')
if mibBuilder.loadTexts: scsiAttIntrPrtTable.setDescription('This table includes all the remote initiator ports that are \n          currently attached to a local target port of all local \n          devices within all SCSI instances.')
scsiAttIntrPrtEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 2, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"), (0, "SCSI-MIB", "scsiAttIntrPrtIdx"))
if mibBuilder.loadTexts: scsiAttIntrPrtEntry.setStatus('current')
if mibBuilder.loadTexts: scsiAttIntrPrtEntry.setDescription('An entry (row) represents a remote initiator currently \n          attached to a particular local target port of a particular \n          target device of a particular SCSI instance.')
scsiAttIntrPrtIdx = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 2, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiAttIntrPrtIdx.setStatus('current')
if mibBuilder.loadTexts: scsiAttIntrPrtIdx.setDescription(' This object represents an arbitrary integer used to \n          uniquely identify a particular attached remote initiator port \n          to a particular target port within a particular SCSI target \n          device within a particular SCSI instance.')
scsiAttIntrPrtAuthIntrIdx = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 2, 1, 2), ScsiIndexValueOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttIntrPrtAuthIntrIdx.setStatus('current')
if mibBuilder.loadTexts: scsiAttIntrPrtAuthIntrIdx.setDescription('This object is the corresponding index in the \n          scsiAuthorizedIntrTable for this current attached remote \n          initiator or zero if this remote attached initiator is not \n          configured in that table.')
scsiAttIntrPrtName = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 2, 1, 3), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttIntrPrtName.setStatus('current')
if mibBuilder.loadTexts: scsiAttIntrPrtName.setDescription(' This object represents the name of the remote initiator \n          attached to this local target port.')
scsiAttIntrPrtId = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 4, 3, 2, 1, 4), ScsiIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttIntrPrtId.setStatus('current')
if mibBuilder.loadTexts: scsiAttIntrPrtId.setDescription(' This object represents the identifier of the remote \n          initiator attached to this local target port.')
scsiLuTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 5, 1), )
if mibBuilder.loadTexts: scsiLuTable.setStatus('current')
if mibBuilder.loadTexts: scsiLuTable.setDescription(' This table contains all the logical units exposed by local \n          target devices.')
scsiLuEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiLuIndex"))
if mibBuilder.loadTexts: scsiLuEntry.setStatus('current')
if mibBuilder.loadTexts: scsiLuEntry.setDescription('An entry (row) contains information applicable to a \n          particular logical unit of a particular local target device \n          within a particular SCSI instance. ')
scsiLuIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiLuIndex.setStatus('current')
if mibBuilder.loadTexts: scsiLuIndex.setDescription(' This object represents an arbitrary integer used to \n          uniquely identify a particular logical unit within a \n          particular SCSI target device within a particular SCSI \n          instance.')
scsiLuDefaultLun = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 2), ScsiLUNOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuDefaultLun.setStatus('current')
if mibBuilder.loadTexts: scsiLuDefaultLun.setDescription(' This object represents the default Logical Unit Number \n          (LUN) for this logical unit; it is the LUN that will appear \n          to an initiator that was not configured to see another LUN.  \n          Note that this object will have a zero-length string if this \n          Logical Unit does not have a default LUN.')
scsiLuWwnName = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 3), ScsiNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuWwnName.setStatus('current')
if mibBuilder.loadTexts: scsiLuWwnName.setDescription(' This object represents the World-Wide Name of this LU. \n          A value of zero has no meaning in this case.')
scsiLuVendorId = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuVendorId.setStatus('current')
if mibBuilder.loadTexts: scsiLuVendorId.setDescription(' This object represents a string identifying the vendor of \n          this LU according to the value in SCSI device page.')
scsiLuProductId = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuProductId.setStatus('current')
if mibBuilder.loadTexts: scsiLuProductId.setDescription(' This object represents a string identifying the product for \n          this LU according to the value in SCSI device page.')
scsiLuRevisionId = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuRevisionId.setStatus('current')
if mibBuilder.loadTexts: scsiLuRevisionId.setDescription('This object represents a string defining the product \n          revision of this LU according to the value in SCSI device \n          page.')
scsiLuPeripheralType = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuPeripheralType.setReference(' ANSI - SCSI Primary Commands - 2 (SPC-2), T10 Project 1236-\n          D, Revision 20, 18 July 2001  [16]')
if mibBuilder.loadTexts: scsiLuPeripheralType.setStatus('current')
if mibBuilder.loadTexts: scsiLuPeripheralType.setDescription('This object is the value returned to SCSI query VPD page 83. \n          It can be: direct-access device, sequential-access device, \n          printer, communication device and so on.  \n          The values that can be returned here are defined in SCSI \n          Primary Commands -2.')
scsiLuStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("available", 2), ("notAvailable", 3), ("broken", 4), ("readying", 5), ("abnormal", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuStatus.setReference(' SCSI Controller Commands-2 (SCC-2) standard NCITS.318-1998 \n          6.3.1.8 REPORT STATES service action')
if mibBuilder.loadTexts: scsiLuStatus.setStatus('current')
if mibBuilder.loadTexts: scsiLuStatus.setDescription(' This object represents the status of this logical unit: \n          - unknown(1): The status of this logical unit cannot be \n          determined. \n          - available(2): The logical unit is fully operational (i.e., \n          accepts media access SCSI commands and has no state \n          information to report). \n          - notAvailable(3): The logical unit is capable of being \n          supported but not available (i.e., no logical unit is \n          currently present or the logical unit is present but not \n          configured for use). \n          - broken(4): The logical unit has failed and cannot respond \n          to SCSI commands. \n          - readying(5): The logical unit is being initialized and \n          access is temporarily limited. \n          - abnormal(6): The logical unit has state information \n          available that indicates it is operating with limits. The \n          scsiLuState indicates what those limits are. \n     ')
scsiLuState = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 9), Bits().clone(namedValues=NamedValues(("dataLost", 0), ("dynamicReconfigurationInProgress", 1), ("exposed", 2), ("fractionallyExposed", 3), ("partiallyExposed", 4), ("protectedRebuild", 5), ("protectionDisabled", 6), ("rebuild", 7), ("recalculate", 8), ("spareInUse", 9), ("verifyInProgress", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuState.setReference(' SCSI Controller Commands-2 (SCC-2) standard NCITS.318-1998 \n          6.3.1.8 REPORT STATES service action')
if mibBuilder.loadTexts: scsiLuState.setStatus('current')
if mibBuilder.loadTexts: scsiLuState.setDescription(' This object represents the state of a logical unit and its \n          meaning is according the bit position: \n          0    Data lost: Within the logical unit data has been lost. \n          1    Dynamic reconfiguration in progress: The logical unit is \n               being reconfigured. In this state all data is still \n               protected. \n          2    Exposed: Within the logical unit data is not protected. \n               In this state all data is still valid, however, loss of \n               data/data-availability is unavoidable in the event of a \n               failure. \n          3    Fractionally exposed: Within the logical unit part of \n               the data is not protected. In this state all data is \n               still valid, however, a failure may cause a loss of data \n               or a loss of data availability. \n          4    Partially exposed: Within the logical unit one or more \n               underlying storage devices have failed. In this state \n               all data is still protected. \n          5    Protected rebuild: The logical unit is in the process of \n               a rebuild operation. In this state all data is \n               protected. \n          6    Protection disabled: Within the logical unit the data \n               protection method has been disabled. \n               In this state all data is still valid, however, however, \n               loss of data/data-availability is unavoidable in the \n               event of a failure. \n          7    Rebuild: The data protection method is in the process of \n               rebuilding data. In this state data is not protected. \n          8    Recalculate: The logical unit is in the process of a \n               recalculate operation. \n          9    Spare in use: Within the logical unit a storage device \n               in full or part being used to store data. In this state \n               all data is still protected. \n \n          10   Verify in progress: Within the logical unit data is \n               being verified.')
scsiLuInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 10), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuInCommands.setStatus('current')
if mibBuilder.loadTexts: scsiLuInCommands.setDescription(' This object represents the number of commands received by \n          this logical unit.')
scsiLuReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 11), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuReadMegaBytes.setStatus('current')
if mibBuilder.loadTexts: scsiLuReadMegaBytes.setDescription(' This object represents the amount of data in Megabytes read \n          from this logical unit.')
scsiLuWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 12), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuWrittenMegaBytes.setStatus('current')
if mibBuilder.loadTexts: scsiLuWrittenMegaBytes.setDescription(' This object represents the amount of data in Megabytes \n          written by this logical unit.')
scsiLuInResets = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 13), Counter32()).setUnits('resets').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuInResets.setStatus('current')
if mibBuilder.loadTexts: scsiLuInResets.setDescription(' This object represents the number of resets received by \n          this logical unit.')
scsiLuOutQueueFullStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuOutQueueFullStatus.setStatus('current')
if mibBuilder.loadTexts: scsiLuOutQueueFullStatus.setDescription(' This object represents the number of queue full statuses \n          received by this logical unit.')
scsiLuHSInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 1, 1, 15), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuHSInCommands.setStatus('current')
if mibBuilder.loadTexts: scsiLuHSInCommands.setDescription(' This object represents the number of commands received by \n          this logical unit. This object provides support for systems \n          that can quickly generate lots of commands because they run \n          at high speed.')
scsiLuIdTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 5, 2), )
if mibBuilder.loadTexts: scsiLuIdTable.setStatus('current')
if mibBuilder.loadTexts: scsiLuIdTable.setDescription('A table of identifiers for all logical units exposed by \n          local targets device.')
scsiLuIdEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 5, 2, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiLuIndex"), (0, "SCSI-MIB", "scsiLuIdIndex"))
if mibBuilder.loadTexts: scsiLuIdEntry.setStatus('current')
if mibBuilder.loadTexts: scsiLuIdEntry.setDescription('An entry (row) containing information applicable to a \n          particular identifier for a particular logical unit of a \n          particular target device within a particular SCSI instance. ')
scsiLuIdIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 2, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiLuIdIndex.setStatus('current')
if mibBuilder.loadTexts: scsiLuIdIndex.setDescription(' This object represents an arbitrary integer used to \n          uniquely identify a particular LU Identifier within a \n \n          particular logical unit within a particular SCSI target \n          device within a particular SCSI instance.')
scsiLuIdCodeSet = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 2, 1, 2), ScsiIdCodeSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuIdCodeSet.setReference(' ANSI - SCSI Primary Commands - 2 ((SPC-2), Revision 20,   \n          Chapter 8: section 8.4.4, page 210 Vital Product Data \n          Parameters [16]')
if mibBuilder.loadTexts: scsiLuIdCodeSet.setStatus('current')
if mibBuilder.loadTexts: scsiLuIdCodeSet.setDescription("This object specifies the code set in use with this \n          identifier. \n          The value is represented in the same format as is contained \n          in the identifier's Identification Descriptor within the \n          Logical Unit's Device Identification Page.")
scsiLuIdAssociation = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 2, 1, 3), ScsiIdAssociation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuIdAssociation.setReference(' ANSI - SCSI Primary Commands - 2 (SPC-2), Revision 20, \n          Chapter 8: section 8.4.4, page 210 Vital Product Data \n          Parameters [16]')
if mibBuilder.loadTexts: scsiLuIdAssociation.setStatus('current')
if mibBuilder.loadTexts: scsiLuIdAssociation.setDescription("This object specifies what the identifier is associated with \n          (e.g, with the addressed physical/logical device or with a \n          particular port).  The value is represented in the same \n          format as is contained in the identifier's Identification \n          Descriptor within the Logical Unit's Device Identification \n          Page.")
scsiLuIdType = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 2, 1, 4), ScsiIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuIdType.setReference(' ANSI - SCSI Primary Commands - 2 (SPC-2), Revision 20, \n          Chapter 8: section 8.4.4, page 210 Vital Product Data \n          Parameters  [16]')
if mibBuilder.loadTexts: scsiLuIdType.setStatus('current')
if mibBuilder.loadTexts: scsiLuIdType.setDescription("This object specifies the type of the identifier.  \n          The value is represented in the same format as is contained \n          in the identifier's Identification Descriptor within the \n          Logical Unit's Device Identification Page.")
scsiLuIdValue = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 2, 1, 5), ScsiIdValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuIdValue.setReference(' ANSI - SCSI Primary Commands - 2 (SPC-2), \n          Chapter 8: section 8.4.4, page 210 Vital Product Data \n     Parameters  [16]')
if mibBuilder.loadTexts: scsiLuIdValue.setStatus('current')
if mibBuilder.loadTexts: scsiLuIdValue.setDescription(" This object represents the actual value of this identifier. \n          The format is defined by the objects scsiLuIdCodeSet, \n          scsiLuIdAssociation, scsiLuIdType. \n          The value is represented in the same format as is contained \n          in the identifier's Identification Descriptor within the \n          Logical Unit's Device Identification Page.")
scsiLunMapTable = MibTable((1, 3, 6, 1, 2, 1, 999, 1, 5, 3), )
if mibBuilder.loadTexts: scsiLunMapTable.setStatus('current')
if mibBuilder.loadTexts: scsiLunMapTable.setDescription('This table includes LUNs additional to the default one. A \n          logical unit may have a different Logical Unit Number for \n          different initiators. This table provides a mapping between a \n          logical unit and a logical unit number.')
scsiLunMapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 999, 1, 5, 3, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiLunMapIndex"), (0, "SCSI-MIB", "scsiLunMapLun"))
if mibBuilder.loadTexts: scsiLunMapEntry.setStatus('current')
if mibBuilder.loadTexts: scsiLunMapEntry.setDescription('An entry containing information about the mapping of a \n       particular Logical Unit to a particular LUN.  The set of \n       entries which all have the same values of scsiInstIndex, \n       scsiDeviceIndex and scsiLunMapIndex constitute a LUN Map within \n       a particular SCSI instance.')
scsiLunMapIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 3, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiLunMapIndex.setStatus('current')
if mibBuilder.loadTexts: scsiLunMapIndex.setDescription(' This object represents an arbitrary integer used to \n          uniquely identify a particular LunMap within a particular \n          SCSI target device within a particular SCSI instance.')
scsiLunMapLun = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 3, 1, 2), ScsiLUNOrZero())
if mibBuilder.loadTexts: scsiLunMapLun.setStatus('current')
if mibBuilder.loadTexts: scsiLunMapLun.setDescription('This object specifies the Logical Unit Number, to which a \n          logical unit is mapped by this row. \n          A value of zero has no meaning in this case.')
scsiLunMapLuIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 3, 1, 3), ScsiIndexValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiLunMapLuIndex.setStatus('current')
if mibBuilder.loadTexts: scsiLunMapLuIndex.setDescription('This object identifies the logical unit for which the value \n          of scsiLuIndex is the same as the value of this object.  The \n          identified logical unit is the one mapped to a LUN by this \n          row.')
scsiLunMapRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 999, 1, 5, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiLunMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: scsiLunMapRowStatus.setDescription('This object allows an administrator to create and delete \n          this entry.')
scsiNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 2, 0))
scsiTgtDeviceStatusChanged = NotificationType((1, 3, 6, 1, 2, 1, 999, 2, 0, 1)).setObjects(("SCSI-MIB", "scsiTgtDeviceStatus"))
if mibBuilder.loadTexts: scsiTgtDeviceStatusChanged.setStatus('current')
if mibBuilder.loadTexts: scsiTgtDeviceStatusChanged.setDescription(" A notification will be generated for each occurrence of the \n          abnormal status (e.g., if the SCSI target device's current \n          status is abnormal) providing that the SCSI instance's value \n          of scsiInstScsiNotificationsEnable is enabled. \n \n          An SNMP agent implementing the SCSI MIB should not send more \n          than three SCSI identical notifications in any 10-second \n          period.")
scsiLuStatusChanged = NotificationType((1, 3, 6, 1, 2, 1, 999, 2, 0, 2)).setObjects(("SCSI-MIB", "scsiLuStatus"))
if mibBuilder.loadTexts: scsiLuStatusChanged.setStatus('current')
if mibBuilder.loadTexts: scsiLuStatusChanged.setDescription(" A notification will be generated each time that \n          scsiLuStatus will change providing that the SCSI instance's \n          value of scsiInstScsiNotificationsEnable is enabled. \n          An SNMP agent implementing the SCSI MIB should not send more \n          than three SCSI identical notifications in any 10-second \n          period.")
scsiCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 3, 1))
scsiCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 999, 3, 1, 1)).setObjects(("SCSI-MIB", "scsiDeviceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiCompliance = scsiCompliance.setStatus('current')
if mibBuilder.loadTexts: scsiCompliance.setDescription('Describes the requirements for compliance to this SCSI MIB. \n          If an implementation can be both a target and an initiator, \n          all groups are mandatory.')
scsiGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 999, 3, 2))
scsiDeviceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 1)).setObjects(("SCSI-MIB", "scsiInstAlias"), ("SCSI-MIB", "scsiInstSoftwareIndex"), ("SCSI-MIB", "scsiInstVendorVersion"), ("SCSI-MIB", "scsiInstScsiNotificationsEnable"), ("SCSI-MIB", "scsiDeviceAlias"), ("SCSI-MIB", "scsiDeviceRole"), ("SCSI-MIB", "scsiDevicePortNumber"), ("SCSI-MIB", "scsiPortRole"), ("SCSI-MIB", "scsiPortTrnsptPtr"), ("SCSI-MIB", "scsiTrnsptType"), ("SCSI-MIB", "scsiTrnsptPointer"), ("SCSI-MIB", "scsiTrnsptDevName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiDeviceGroup = scsiDeviceGroup.setStatus('current')
if mibBuilder.loadTexts: scsiDeviceGroup.setDescription('A collection of objects providing information about SCSI \n          instances, devices and ports.')
scsiInitiatorGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 2)).setObjects(("SCSI-MIB", "scsiIntrDevTgtAccessMode"), ("SCSI-MIB", "scsiIntrPrtName"), ("SCSI-MIB", "scsiIntrPrtIdentifier"), ("SCSI-MIB", "scsiAttTgtPortDscTgtIdx"), ("SCSI-MIB", "scsiAttTgtPortName"), ("SCSI-MIB", "scsiAttTgtPortIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiInitiatorGroup = scsiInitiatorGroup.setStatus('current')
if mibBuilder.loadTexts: scsiInitiatorGroup.setDescription('This group is relevant for an initiator device and port.')
scsiDiscoveryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 3)).setObjects(("SCSI-MIB", "scsiDscTgtDevOrPort"), ("SCSI-MIB", "scsiDscTgtName"), ("SCSI-MIB", "scsiDscTgtConfigured"), ("SCSI-MIB", "scsiDscTgtDiscovered"), ("SCSI-MIB", "scsiDscTgtRowStatus"), ("SCSI-MIB", "scsiDscTgtLastCreation"), ("SCSI-MIB", "scsiDscLunLun"), ("SCSI-MIB", "scsiDscLunIdCodeSet"), ("SCSI-MIB", "scsiDscLunIdAssociation"), ("SCSI-MIB", "scsiDscLunIdType"), ("SCSI-MIB", "scsiDscLunIdValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiDiscoveryGroup = scsiDiscoveryGroup.setStatus('current')
if mibBuilder.loadTexts: scsiDiscoveryGroup.setDescription('This group is relevant for the discovered targets by an \n          initiator port.')
scsiTargetGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 4)).setObjects(("SCSI-MIB", "scsiTgtDevNumberOfLUs"), ("SCSI-MIB", "scsiTgtDeviceStatus"), ("SCSI-MIB", "scsiTgtDevNonAccessibleLUs"), ("SCSI-MIB", "scsiTgtPortName"), ("SCSI-MIB", "scsiTgtPortIdentifier"), ("SCSI-MIB", "scsiAttIntrPrtAuthIntrIdx"), ("SCSI-MIB", "scsiAttIntrPrtName"), ("SCSI-MIB", "scsiAttIntrPrtId"), ("SCSI-MIB", "scsiLuDefaultLun"), ("SCSI-MIB", "scsiLuWwnName"), ("SCSI-MIB", "scsiLuVendorId"), ("SCSI-MIB", "scsiLuProductId"), ("SCSI-MIB", "scsiLuRevisionId"), ("SCSI-MIB", "scsiLuPeripheralType"), ("SCSI-MIB", "scsiLuStatus"), ("SCSI-MIB", "scsiLuState"), ("SCSI-MIB", "scsiLuIdCodeSet"), ("SCSI-MIB", "scsiLuIdAssociation"), ("SCSI-MIB", "scsiLuIdType"), ("SCSI-MIB", "scsiLuIdValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiTargetGroup = scsiTargetGroup.setStatus('current')
if mibBuilder.loadTexts: scsiTargetGroup.setDescription('This group is relevant for a target device and port.')
scsiLunMapGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 5)).setObjects(("SCSI-MIB", "scsiLunMapLuIndex"), ("SCSI-MIB", "scsiLunMapRowStatus"), ("SCSI-MIB", "scsiAuthIntrDevOrPort"), ("SCSI-MIB", "scsiAuthIntrName"), ("SCSI-MIB", "scsiAuthIntrLunMapIndex"), ("SCSI-MIB", "scsiAuthIntrLastCreation"), ("SCSI-MIB", "scsiAuthIntrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiLunMapGroup = scsiLunMapGroup.setStatus('current')
if mibBuilder.loadTexts: scsiLunMapGroup.setDescription('This group is a collection of attributes regarding the \n          mapping between logical unit number, logical unit and target \n          device.')
scsiTargetStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 6)).setObjects(("SCSI-MIB", "scsiTgtPortInCommands"), ("SCSI-MIB", "scsiTgtPortWrittenMegaBytes"), ("SCSI-MIB", "scsiTgtPortReadMegaBytes"), ("SCSI-MIB", "scsiLuInCommands"), ("SCSI-MIB", "scsiLuReadMegaBytes"), ("SCSI-MIB", "scsiLuWrittenMegaBytes"), ("SCSI-MIB", "scsiLuInResets"), ("SCSI-MIB", "scsiLuOutQueueFullStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiTargetStatsGroup = scsiTargetStatsGroup.setStatus('current')
if mibBuilder.loadTexts: scsiTargetStatsGroup.setDescription('This group is a collection of statistics for all \n          implementations of the SCSI MIB that contain targets.')
scsiTargetHSStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 7)).setObjects(("SCSI-MIB", "scsiTgtPortHSInCommands"), ("SCSI-MIB", "scsiLuHSInCommands"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiTargetHSStatsGroup = scsiTargetHSStatsGroup.setStatus('current')
if mibBuilder.loadTexts: scsiTargetHSStatsGroup.setDescription('This group is a collection of high speed statistics for all \n          implementations of the SCSI MIB that contain targets.')
scsiLunMapStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 8)).setObjects(("SCSI-MIB", "scsiAuthIntrAttachedTimes"), ("SCSI-MIB", "scsiAuthIntrOutCommands"), ("SCSI-MIB", "scsiAuthIntrReadMegaBytes"), ("SCSI-MIB", "scsiAuthIntrWrittenMegaBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiLunMapStatsGroup = scsiLunMapStatsGroup.setStatus('current')
if mibBuilder.loadTexts: scsiLunMapStatsGroup.setDescription('This group is a collection of statistics regarding \n          initiators authorized to attach local logical unit and target \n          device.')
scsiLunMapHSStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 9)).setObjects(("SCSI-MIB", "scsiAuthIntrHSOutCommands"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiLunMapHSStatsGroup = scsiLunMapHSStatsGroup.setStatus('current')
if mibBuilder.loadTexts: scsiLunMapHSStatsGroup.setDescription('This group is a collection of high speed statistics \n          regarding initiators authorized to attach local logical unit \n          and target device.')
scsiInitiatorStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 10)).setObjects(("SCSI-MIB", "scsiIntrDevOutResets"), ("SCSI-MIB", "scsiIntrPrtOutCommands"), ("SCSI-MIB", "scsiIntrPrtWrittenMegaBytes"), ("SCSI-MIB", "scsiIntrPrtReadMegaBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiInitiatorStatsGroup = scsiInitiatorStatsGroup.setStatus('current')
if mibBuilder.loadTexts: scsiInitiatorStatsGroup.setDescription('This group is a collection of statistics for all \n          implementations of the SCSI MIB that contain initiators.')
scsiInitiatorHSStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 11)).setObjects(("SCSI-MIB", "scsiIntrPrtHSOutCommands"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiInitiatorHSStatsGroup = scsiInitiatorHSStatsGroup.setStatus('current')
if mibBuilder.loadTexts: scsiInitiatorHSStatsGroup.setDescription('This group is a collection of high speed statistics for all \n          implementations of the SCSI MIB that contain initiators.')
scsiDiscoveryStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 12)).setObjects(("SCSI-MIB", "scsiDscTgtInCommands"), ("SCSI-MIB", "scsiDscTgtReadMegaBytes"), ("SCSI-MIB", "scsiDscTgtWrittenMegaBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiDiscoveryStatsGroup = scsiDiscoveryStatsGroup.setStatus('current')
if mibBuilder.loadTexts: scsiDiscoveryStatsGroup.setDescription('This group is a collection of statistics for all \n          implementations of the SCSI MIB that contain discovered \n          initiators.')
scsiDiscoveryHSStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 13)).setObjects(("SCSI-MIB", "scsiDscTgtHSInCommands"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiDiscoveryHSStatsGroup = scsiDiscoveryHSStatsGroup.setStatus('current')
if mibBuilder.loadTexts: scsiDiscoveryHSStatsGroup.setDescription('This group is a collection of high speed statistics for all \n       implementations of the SCSI MIB that contain discovered \n       initiators.')
scsiDeviceStatGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 999, 3, 2, 14)).setObjects(("SCSI-MIB", "scsiDeviceResets"), ("SCSI-MIB", "scsiPortBusyStatuses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiDeviceStatGroup = scsiDeviceStatGroup.setStatus('current')
if mibBuilder.loadTexts: scsiDeviceStatGroup.setDescription('A collection of statistics regarding about SCSI devices and \n          ports.')
mibBuilder.exportSymbols("SCSI-MIB", scsiIntrPrtName=scsiIntrPrtName, scsiDscTgtDevOrPort=scsiDscTgtDevOrPort, scsiTgtPortReadMegaBytes=scsiTgtPortReadMegaBytes, ScsiIndexValueOrZero=ScsiIndexValueOrZero, scsiPortTable=scsiPortTable, scsiAttIntrPrtAuthIntrIdx=scsiAttIntrPrtAuthIntrIdx, scsiObjects=scsiObjects, ScsiIndexValue=ScsiIndexValue, scsiLuIdType=scsiLuIdType, scsiAuthIntrTgtPortIndex=scsiAuthIntrTgtPortIndex, scsiLuVendorId=scsiLuVendorId, scsiLuIdTable=scsiLuIdTable, scsiAuthIntrWrittenMegaBytes=scsiAuthIntrWrittenMegaBytes, scsiDscTgtHSInCommands=scsiDscTgtHSInCommands, scsiInitiatorHSStatsGroup=scsiInitiatorHSStatsGroup, scsiAuthIntrRowStatus=scsiAuthIntrRowStatus, scsiAttTgtPortTable=scsiAttTgtPortTable, scsiLuIdIndex=scsiLuIdIndex, scsiDscTgtReadMegaBytes=scsiDscTgtReadMegaBytes, scsiInstanceEntry=scsiInstanceEntry, scsiTrnsptIndex=scsiTrnsptIndex, scsiDeviceRole=scsiDeviceRole, scsiTrnsptEntry=scsiTrnsptEntry, scsiIntrDevTgtAccessMode=scsiIntrDevTgtAccessMode, scsiLuWwnName=scsiLuWwnName, ScsiIdentifier=ScsiIdentifier, PYSNMP_MODULE_ID=scsiModule, scsiDiscoveryStatsGroup=scsiDiscoveryStatsGroup, scsiLuReadMegaBytes=scsiLuReadMegaBytes, scsiDiscoveryHSStatsGroup=scsiDiscoveryHSStatsGroup, scsiAuthorizedIntrTable=scsiAuthorizedIntrTable, scsiModule=scsiModule, scsiLuIdAssociation=scsiLuIdAssociation, scsiTgtPortTable=scsiTgtPortTable, scsiTransportISCSI=scsiTransportISCSI, scsiDscTgtIndex=scsiDscTgtIndex, ScsiLUNOrZero=ScsiLUNOrZero, scsiInstSoftwareIndex=scsiInstSoftwareIndex, scsiLuIdValue=scsiLuIdValue, scsiInstScsiNotificationsEnable=scsiInstScsiNotificationsEnable, scsiLogicalUnit=scsiLogicalUnit, scsiDscTgtIntrPortIndex=scsiDscTgtIntrPortIndex, scsiGroups=scsiGroups, scsiDscLunIdEntry=scsiDscLunIdEntry, scsiAuthIntrIndex=scsiAuthIntrIndex, scsiTargetStatsGroup=scsiTargetStatsGroup, scsiLunMapIndex=scsiLunMapIndex, scsiIntrPrtOutCommands=scsiIntrPrtOutCommands, scsiAttIntrPrtEntry=scsiAttIntrPrtEntry, scsiTransportSBP=scsiTransportSBP, scsiLunMapStatsGroup=scsiLunMapStatsGroup, scsiAttIntrPrtName=scsiAttIntrPrtName, scsiPortTrnsptPtr=scsiPortTrnsptPtr, scsiInitiator=scsiInitiator, scsiDeviceAlias=scsiDeviceAlias, scsiAuthIntrAttachedTimes=scsiAuthIntrAttachedTimes, scsiAuthIntrLunMapIndex=scsiAuthIntrLunMapIndex, scsiTgtPortIdentifier=scsiTgtPortIdentifier, scsiDscTgtWrittenMegaBytes=scsiDscTgtWrittenMegaBytes, scsiTgtDeviceStatus=scsiTgtDeviceStatus, scsiAuthIntrHSOutCommands=scsiAuthIntrHSOutCommands, scsiAttIntrPrtTable=scsiAttIntrPrtTable, scsiDscTgtName=scsiDscTgtName, scsiDscLunIdIndex=scsiDscLunIdIndex, scsiDscLunIdTable=scsiDscLunIdTable, scsiDscLunIdAssociation=scsiDscLunIdAssociation, scsiIntrDevOutResets=scsiIntrDevOutResets, scsiIntrPrtIdentifier=scsiIntrPrtIdentifier, scsiTransportFCP=scsiTransportFCP, scsiTgtPortHSInCommands=scsiTgtPortHSInCommands, scsiAuthIntrName=scsiAuthIntrName, scsiLuOutQueueFullStatus=scsiLuOutQueueFullStatus, scsiDscTgtLastCreation=scsiDscTgtLastCreation, scsiDscLunEntry=scsiDscLunEntry, scsiTranportOther=scsiTranportOther, scsiDscLunIdCodeSet=scsiDscLunIdCodeSet, scsiDscLunIdValue=scsiDscLunIdValue, scsiAuthIntrReadMegaBytes=scsiAuthIntrReadMegaBytes, scsiLuIdCodeSet=scsiLuIdCodeSet, scsiDscTgtInCommands=scsiDscTgtInCommands, scsiAuthIntrDevOrPort=scsiAuthIntrDevOrPort, ScsiIdCodeSet=ScsiIdCodeSet, scsiLuWrittenMegaBytes=scsiLuWrittenMegaBytes, scsiLunMapLuIndex=scsiLunMapLuIndex, scsiInstAlias=scsiInstAlias, ScsiIdValue=ScsiIdValue, ScsiName=ScsiName, scsiDscLunLun=scsiDscLunLun, ScsiPortIndexValueOrZero=ScsiPortIndexValueOrZero, scsiDeviceStatGroup=scsiDeviceStatGroup, scsiRemoteInitiators=scsiRemoteInitiators, scsiIntrPrtHSOutCommands=scsiIntrPrtHSOutCommands, scsiAttTgtPortIndex=scsiAttTgtPortIndex, scsiLunMapHSStatsGroup=scsiLunMapHSStatsGroup, scsiDscLunIndex=scsiDscLunIndex, scsiTrnsptPointer=scsiTrnsptPointer, scsiDscLunIdType=scsiDscLunIdType, scsiLunMapGroup=scsiLunMapGroup, ScsiNameIdOrZero=ScsiNameIdOrZero, scsiLuPeripheralType=scsiLuPeripheralType, scsiAttTgtPortEntry=scsiAttTgtPortEntry, scsiLunMapEntry=scsiLunMapEntry, scsiInstIndex=scsiInstIndex, scsiPortIndex=scsiPortIndex, scsiDscTgtEntry=scsiDscTgtEntry, HrSWInstalledIndexOrZero=HrSWInstalledIndexOrZero, scsiDeviceResets=scsiDeviceResets, scsiDscTgtDiscovered=scsiDscTgtDiscovered, scsiInstanceTable=scsiInstanceTable, scsiIntrDevEntry=scsiIntrDevEntry, scsiIntrPrtWrittenMegaBytes=scsiIntrPrtWrittenMegaBytes, scsiLunMapRowStatus=scsiLunMapRowStatus, scsiTrnsptTable=scsiTrnsptTable, scsiTgtDevNumberOfLUs=scsiTgtDevNumberOfLUs, scsiTgtDevEntry=scsiTgtDevEntry, scsiAttTgtPortName=scsiAttTgtPortName, scsiDscLunTable=scsiDscLunTable, scsiTransportTypes=scsiTransportTypes, scsiDscTgtTable=scsiDscTgtTable, scsiDeviceEntry=scsiDeviceEntry, scsiConformance=scsiConformance, scsiAuthIntrLastCreation=scsiAuthIntrLastCreation, scsiTgtPortWrittenMegaBytes=scsiTgtPortWrittenMegaBytes, scsiPortBusyStatuses=scsiPortBusyStatuses, scsiCompliance=scsiCompliance, ScsiIdAssociation=ScsiIdAssociation, scsiGeneral=scsiGeneral, scsiDevicePortNumber=scsiDevicePortNumber, scsiNotifications=scsiNotifications, scsiDeviceTable=scsiDeviceTable, scsiLuDefaultLun=scsiLuDefaultLun, scsiDscTgtRowStatus=scsiDscTgtRowStatus, scsiTargetGroup=scsiTargetGroup, scsiTransportSRP=scsiTransportSRP, scsiLuIdEntry=scsiLuIdEntry, scsiAttTgtPortDscTgtIdx=scsiAttTgtPortDscTgtIdx, scsiLunMapTable=scsiLunMapTable, scsiInitiatorGroup=scsiInitiatorGroup, scsiTargetHSStatsGroup=scsiTargetHSStatsGroup, scsiIntrDevTable=scsiIntrDevTable, scsiTgtDevNonAccessibleLUs=scsiTgtDevNonAccessibleLUs, scsiLunMapLun=scsiLunMapLun, scsiAttTgtPortIdentifier=scsiAttTgtPortIdentifier, scsiAuthIntrOutCommands=scsiAuthIntrOutCommands, scsiTgtDeviceStatusChanged=scsiTgtDeviceStatusChanged, scsiAuthorizedIntrEntry=scsiAuthorizedIntrEntry, scsiInitiatorStatsGroup=scsiInitiatorStatsGroup, scsiLuInResets=scsiLuInResets, scsiRemoteTarget=scsiRemoteTarget, scsiTgtDevTable=scsiTgtDevTable, scsiLuStatus=scsiLuStatus, scsiLuProductId=scsiLuProductId, scsiTgtPortEntry=scsiTgtPortEntry, scsiLuRevisionId=scsiLuRevisionId, ScsiDeviceOrPort=ScsiDeviceOrPort, scsiLuState=scsiLuState, scsiTgtPortName=scsiTgtPortName, scsiTrnsptType=scsiTrnsptType, scsiLuInCommands=scsiLuInCommands, scsiNotificationsPrefix=scsiNotificationsPrefix, scsiAttIntrPrtIdx=scsiAttIntrPrtIdx, scsiTarget=scsiTarget, scsiTranportSPI=scsiTranportSPI, scsiIntrPrtReadMegaBytes=scsiIntrPrtReadMegaBytes, scsiTrnsptDevName=scsiTrnsptDevName, scsiAttIntrPrtId=scsiAttIntrPrtId, scsiLuEntry=scsiLuEntry, scsiIntrPrtTable=scsiIntrPrtTable, scsiLuStatusChanged=scsiLuStatusChanged, scsiDeviceGroup=scsiDeviceGroup, scsiDeviceIndex=scsiDeviceIndex, scsiPortEntry=scsiPortEntry, ScsiIdType=ScsiIdType, scsiLuTable=scsiLuTable, scsiDscTgtConfigured=scsiDscTgtConfigured, scsiLuIndex=scsiLuIndex, scsiIntrPrtEntry=scsiIntrPrtEntry, scsiCompliances=scsiCompliances, scsiInstVendorVersion=scsiInstVendorVersion, scsiLuHSInCommands=scsiLuHSInCommands, scsiPortRole=scsiPortRole, scsiDiscoveryGroup=scsiDiscoveryGroup, scsiTgtPortInCommands=scsiTgtPortInCommands)
