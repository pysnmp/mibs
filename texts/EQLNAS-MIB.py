#
# PySNMP MIB module EQLNAS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/equallogic/EQLNAS-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 10:55:30 2024
# On host fv-az1117-982 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
eqlApplianceIndex, eqlApplianceNetworkType, eqlApplianceNetworkID = mibBuilder.importSymbols("EQLAPPLIANCE-MIB", "eqlApplianceIndex", "eqlApplianceNetworkType", "eqlApplianceNetworkID")
SiteIndexOrZero, SiteIndex, eqliscsiVolumeReplSiteIndex, StatusDisabledDefault = mibBuilder.importSymbols("EQLVOLUME-MIB", "SiteIndexOrZero", "SiteIndex", "eqliscsiVolumeReplSiteIndex", "StatusDisabledDefault")
equalLogic, = mibBuilder.importSymbols("EQUALLOGIC-SMI", "equalLogic")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, TimeTicks, Integer32, Counter64, NotificationType, Unsigned32, MibIdentifier, Bits, Counter32, ModuleIdentity, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, enterprises, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "Integer32", "Counter64", "NotificationType", "Unsigned32", "MibIdentifier", "Bits", "Counter32", "ModuleIdentity", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "enterprises", "iso")
DateAndTime, TruthValue, RowStatus, TextualConvention, RowPointer, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TruthValue", "RowStatus", "TextualConvention", "RowPointer", "DisplayString")
eqlNASModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 12740, 18))
eqlNASModule.setRevisions(('2009-07-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: eqlNASModule.setRevisionsDescriptions(('Initial revision',))
if mibBuilder.loadTexts: eqlNASModule.setLastUpdated('201503171528Z')
if mibBuilder.loadTexts: eqlNASModule.setOrganization('EqualLogic Inc.')
if mibBuilder.loadTexts: eqlNASModule.setContactInfo('Contact: Customer Support\n         Postal:  Dell Inc\n                  300 Innovative Way, Suite 301, Nashua, NH 03062\n         Tel:     +1 603-579-9762\n         E-mail:  US-NH-CS-TechnicalSupport@dell.com\n         WEB:     www.equallogic.com')
if mibBuilder.loadTexts: eqlNASModule.setDescription('Appliances information.\n\n        Copyright (c) 2004-2011 by Dell, Inc. \n        \n        All rights reserved.  This software may not be copied, disclosed, \n        transferred, or used except in accordance with a license granted \n        by Dell, Inc.  This software embodies proprietary information \n        and trade secrets of Dell, Inc. \n        ')
eqlNASObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 18, 1))
class UNIXPermissions(TextualConvention, Unsigned32):
    description = 'This textual convention defines a format to display file and directory permissions in UNIX'
    status = 'current'
    displayHint = 'o'

class ClusterNameType(TextualConvention, OctetString):
    description = 'Name of the Spartan cluster'
    status = 'current'
    displayHint = 't'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 64)

class ClusterIdType(TextualConvention, OctetString):
    description = 'This textual convention defines string for a cluster-id.\n            Get this string from node. Size defined in ClusterIdType in xmlApiObjects.xml'
    status = 'current'
    displayHint = 't'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 50)

class CertificateType(TextualConvention, OctetString):
    description = 'RSA Certifcate. Max possible size for the whole certificate is 4096 bytes.\n                This type represents a segment of the certificate.'
    status = 'current'
    displayHint = 't'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 1750)

class NASContainerNameType(TextualConvention, OctetString):
    description = 'Name used to identify NAS Container. Contains only letters, digits and underscores. Must begin with either letter or an underscore.'
    status = 'current'
    displayHint = 't'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 230)

eqlNASApplianceTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 1), )
if mibBuilder.loadTexts: eqlNASApplianceTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceTable.setDescription('EqualLogic-Persistent Appliance Table.\n                     This table contains a list of NAS pools that this group is managing.\n                     TimeoutAll:60')
eqlNASApplianceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 1, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlNASApplianceEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceEntry.setDescription('An entry (row) containing NAS Container info.')
eqlNASApplianceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceRowStatus.setDescription('This field is used indicate the status of this entry.')
eqlNASAppliancePoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASAppliancePoolSize.setStatus('current')
if mibBuilder.loadTexts: eqlNASAppliancePoolSize.setDescription('This field is used indicate the size of the NAS Container in MB.')
eqlNASApplianceEQLPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceEQLPoolIndex.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceEQLPoolIndex.setDescription('This field is used to indicate the EQL pool used by the NAS appliance.')
eqlNASApplianceReplRemoteUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASApplianceReplRemoteUserName.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceReplRemoteUserName.setDescription('This field is used to indicate the Username EQL will use for NAS replication for all partners.')
eqlNASApplianceNFSv4Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASApplianceNFSv4Mode.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceNFSv4Mode.setDescription('This field enables or disables NFSv4 Access NAS appliance.')
eqlNASContainerTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3), )
if mibBuilder.loadTexts: eqlNASContainerTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerTable.setDescription('EqualLogic-Dynamic Appliance Table.\n                     This table contains a list of NAS Appliance configurations for containers the group is managing.\n                     TimeoutAll:60')
eqlNASContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"))
if mibBuilder.loadTexts: eqlNASContainerEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerEntry.setDescription('An entry (row) containing NAS Container info.')
eqlNASContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlNASContainerIndex.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerIndex.setDescription('Unique Identifier used to create and manage NAS Containers. When creating NAS Containers, value must be retrieved using eqlApplianceUniqueIDValue with eqlApplianceUniqueIDType set to fsid.')
eqlNASContainerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerRowStatus.setDescription('Row status variable used to manage this row.')
eqlNASContainerName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 230))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerName.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerName.setDescription('Name used to identify NAS Container. Contains only letters, digits and underscores. Must begin with either letter or an underscore. ')
eqlNASContainerCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 4), Unsigned32()).setUnits('MB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerCapacity.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerCapacity.setDescription('Size of NAS Container in MB.')
eqlNASContainerUsedSpaceAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 5), Unsigned32()).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerUsedSpaceAlert.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerUsedSpaceAlert.setDescription('Alert user when NAS container used space reaches certain % value of NAS container size.Default value is choosen from eqlNASApplianceConfigUsedSpaceAlert')
eqlNASContainerSnapshotHardQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 6), Unsigned32()).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerSnapshotHardQuota.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerSnapshotHardQuota.setDescription('This threshold, represented as a % of NAS container size, triggers auto-deletion of snapshots. The oldest snapshots are deleted first. Default value is choosen from eqlNASApplianceConfigSnapHardQuota')
eqlNASContainerSnapshotUsedSpaceAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerSnapshotUsedSpaceAlert.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerSnapshotUsedSpaceAlert.setDescription('Alert user when NAS container snapshot used space reaches certain % value of NAS container snapshot size.Default value is choosen from eqlNASApplianceConfigSnapSpaceAlert ')
eqlNASContainerUnixFilePermissions = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 8), UNIXPermissions()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerUnixFilePermissions.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerUnixFilePermissions.setDescription(' This field is applicable only when Security style is set to NFS')
eqlNASContainerUnixDirPermissions = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 9), UNIXPermissions()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerUnixDirPermissions.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerUnixDirPermissions.setDescription(' This field is applicable only when Security style is set to NFS')
eqlNASContainerQuotaEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerQuotaEnabled.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerQuotaEnabled.setDescription('')
eqlNASContainerFileAccessSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mixed", 1), ("ntfs", 2), ("unix", 3))).clone('ntfs')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerFileAccessSecurity.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerFileAccessSecurity.setDescription('')
eqlNASContainerAccessTimeManagementGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("always", 1), ("everyFiveMinutes", 2), ("hourly", 3), ("daily", 4), ("weekly", 5))).clone('daily')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerAccessTimeManagementGranularity.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerAccessTimeManagementGranularity.setDescription('Access time management granularity.')
eqlNASContainerOptimizationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerOptimizationEnabled.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerOptimizationEnabled.setDescription('Enable or disable optimization')
eqlNASContainerDedupMethodType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("variable-chunk", 1), ("object", 2))).clone('variable-chunk')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerDedupMethodType.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerDedupMethodType.setDescription('Dedup method to use on this file system when optimization is enabled. Reserved for future use. Currently not supported.')
eqlNASContainerCompressionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerCompressionEnabled.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerCompressionEnabled.setDescription('enable or disable compression. Restricted by the type of license')
eqlNASContainerModificationTimeFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 365)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerModificationTimeFilter.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerModificationTimeFilter.setDescription('Exclude files modified less than the specified number of days before. 30 to 365 days')
eqlNASContainerAccessTimeFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 365)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerAccessTimeFilter.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerAccessTimeFilter.setDescription('Exclude files accessed less than the specified number of days before. 30 to 365 days')
eqlNASContainerExcludeFilesByNamePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerExcludeFilesByNamePattern.setStatus('deprecated')
if mibBuilder.loadTexts: eqlNASContainerExcludeFilesByNamePattern.setDescription('Regular expression identifying the file name pattern to exclude from optimization. Empty string means no exclusion.')
eqlNASContainerAction = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("delete-host-access-cfg", 1))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerAction.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerAction.setDescription('Use this column to perform actions on this container.')
eqlNASContainerDefaultUserQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 20), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerDefaultUserQuota.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerDefaultUserQuota.setDescription('Default quota per user when quotas are enabled on NAS Containers.')
eqlNASContainerDefaultUserQuotaAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 21), Unsigned32()).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerDefaultUserQuotaAlert.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerDefaultUserQuotaAlert.setDescription('Specified as a percentage of default group quota as a default for containers in this nas-group.\n\tThis is the amount of used space that triggers user alerts')
eqlNASContainerDefaultGroupQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 22), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerDefaultGroupQuota.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerDefaultGroupQuota.setDescription('Default quota per group when quotas are enabled on NAS Containers.')
eqlNASContainerDefaultGroupQuotaAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 23), Unsigned32()).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerDefaultGroupQuotaAlert.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerDefaultGroupQuotaAlert.setDescription('Specified as a percentage of default group quota as a default for containers in this nas-group.\n\tThis is the amount of used space that triggers user alerts')
eqlNASContainerOptimizationFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("use-filters", 0), ("ignore-filters", 1))).clone('use-filters')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerOptimizationFilterMode.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerOptimizationFilterMode.setDescription('Specifies the filter mode to be applied to qualify files for data reduction. \n                    user-filters implies files need to meet the access time and modify time filter \n                    criteria before they can be considered for data reduction. \n                    ignore-filters implies files are considered for data reduction irrespective of \n                    the access time and modify time filter criteria, using an access time and modification\n\t\t\t\t\ttime value of 1 day. This mode is recommended for containers with archive data only.')
eqlNASContainerRehydrateOnReadEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 25), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerRehydrateOnReadEnabled.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerRehydrateOnReadEnabled.setDescription('Enable or disable rehydrate on read in a data reduction disabled nas container')
eqlNASContainerUniqueIDTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 2), )
if mibBuilder.loadTexts: eqlNASContainerUniqueIDTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerUniqueIDTable.setDescription('EqualLogic-Dynamic Unique ID table.\n                     This table is used to retrieve Unique ID values when creating new objects.\n                     TimeoutAll:60')
eqlNASContainerUniqueIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 2, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASContainerUniqueIDType"))
if mibBuilder.loadTexts: eqlNASContainerUniqueIDEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerUniqueIDEntry.setDescription('An entry (row) containing unique ID information.')
eqlNASContainerUniqueIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("snapshot", 1), ("quota", 2))))
if mibBuilder.loadTexts: eqlNASContainerUniqueIDType.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerUniqueIDType.setDescription('Indicates the type of the id. For now only Snapshot and quota Ids are needed for at the container scope')
eqlNASContainerUniqueIDValueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerUniqueIDValueLen.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerUniqueIDValueLen.setDescription('Length of the value represented by column eqlNASContainerUniqueIDValue')
eqlNASContainerUniqueIDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerUniqueIDValue.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerUniqueIDValue.setDescription('Value of eqlNASContainerUniqueIDType represented in network byte order.')
eqlNASApplianceDefaultCfgTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4), )
if mibBuilder.loadTexts: eqlNASApplianceDefaultCfgTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceDefaultCfgTable.setDescription('EqualLogic-Dynamic (semi) Appliance Table.\n                     This table contains a list of NAS Appliance default configurations for containers the group is managing.\n                     TimeoutAll:60')
eqlNASApplianceDefaultCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlNASApplianceDefaultCfgEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceDefaultCfgEntry.setDescription('An entry (row) containing NAS Container Status info.')
eqlNASApplianceConfigUsedSpaceAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 1), Unsigned32().clone(80)).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceConfigUsedSpaceAlert.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceConfigUsedSpaceAlert.setDescription('Specified as a percentage of NAS container size as a default for containers in this nas-group.\n                     This is the amount of used space that triggers user alerts')
eqlNASApplianceConfigSnapSpaceAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 2), Unsigned32().clone(80)).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceConfigSnapSpaceAlert.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceConfigSnapSpaceAlert.setDescription('Specified as a percentage of NAS container size as a default for containers in this nas-group.\n                     The is the amount of space consumed by snapshots at which user alerts are triggered')
eqlNASApplianceConfigSnapHardQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 3), Unsigned32().clone(50)).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceConfigSnapHardQuota.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceConfigSnapHardQuota.setDescription('Specified as a percentage of NAS container size as a default for containers in this nas-group.\n                     This is the threshold that triggers auto-deletion of snapshots. Oldest first.')
eqlNASApplianceContainerUnixFilePerms = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 4), UNIXPermissions().clone(484)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceContainerUnixFilePerms.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceContainerUnixFilePerms.setDescription('Define the default UNIX permissions of new files created from Windows clients. Default value is 0744')
eqlNASApplianceContainerUnixDirPerms = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 5), UNIXPermissions().clone(493)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceContainerUnixDirPerms.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceContainerUnixDirPerms.setDescription(' Define the default UNIX permissions of new directories created from Windows clients. Default value is 0755')
eqlNASApplianceContainerFileSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mixed", 1), ("ntfs", 2), ("unix", 3))).clone('ntfs')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceContainerFileSecurity.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceContainerFileSecurity.setDescription('Used to define how the system will maintain and verify file access security.')
eqlNASApplianceDefaultUserQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultUserQuota.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceDefaultUserQuota.setDescription('Default quota per user when quotas are enabled on NAS Containers.')
eqlNASApplianceDefaultUserQuotaAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 8), Unsigned32()).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultUserQuotaAlert.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceDefaultUserQuotaAlert.setDescription('Specified as a percentage of default group quota as a default for containers in this nas-group.\n                     This is the amount of used space that triggers user alerts')
eqlNASApplianceDefaultGroupQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultGroupQuota.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceDefaultGroupQuota.setDescription('Default quota per group when quotas are enabled on NAS Containers.')
eqlNASApplianceDefaultGroupQuotaAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 10), Unsigned32()).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultGroupQuotaAlert.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceDefaultGroupQuotaAlert.setDescription('Specified as a percentage of default group quota as a default for containers in this nas-group.\n                     This is the amount of used space that triggers user alerts')
eqlNASApplianceDefaultCIFSAllowGuestAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSAllowGuestAccess.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSAllowGuestAccess.setDescription('Choose whether to allow unknown users to access the share as guests. ')
eqlNASApplianceCIFSAuthenticationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allow-everyone", 1), ("active-directory", 2), ("local-users", 3))).clone('allow-everyone')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCIFSAuthenticationMode.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceCIFSAuthenticationMode.setDescription('')
eqlNASApplianceDefaultCIFSLockEnforcement = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("all-locks", 0), ("share-locks-op-locks", 1), ("only-share-locks", 2))).clone('all-locks')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSLockEnforcement.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSLockEnforcement.setDescription(' Define the types of locks that the system will enforce, in addition to share locks which are always enforced.  Byte range locks allow applications to ensure data integrity.  Opportunistic locks (oplocks) increase the efficiency of client machine caching and improve performance. NOTE: This software release does not support changing the locking enforcement policy. Only the default option (all-locks) is supported.')
eqlNASApplianceNFSExportReadWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read-write", 1), ("read-only", 2))).clone('read-write')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceNFSExportReadWrite.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceNFSExportReadWrite.setDescription("Define the access rights for the NFS export. If the access rights for the NFS export are stricter than those defined for a specific file, the file's access rights will be overridden by those of the NFS export. ")
eqlNASApplianceNFSExportTrustedUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all-except-root", 1), ("none", 2), ("all", 3))).clone('all-except-root')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceNFSExportTrustedUsers.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceNFSExportTrustedUsers.setDescription(' Define which users are trusted. Other users will be identified as guests. ')
eqlNASApplianceAccessTimeManagementGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("always", 1), ("everyFiveMinutes", 2), ("hourly", 3), ("daily", 4), ("weekly", 5))).clone('daily')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceAccessTimeManagementGranularity.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceAccessTimeManagementGranularity.setDescription('Access time management granularity.')
eqlNASApplianceOptimizationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceOptimizationEnabled.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceOptimizationEnabled.setDescription('Enable or disable optimization. Reserved for future use. Not supported currently.')
eqlNASApplianceDedupMethodType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("variable-chunk", 1), ("object", 2))).clone('variable-chunk')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDedupMethodType.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceDedupMethodType.setDescription('Dedup method to use on this file system when optimization is enabled. Reserved for future use. Currently not supported.')
eqlNASApplianceCompressionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCompressionEnabled.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceCompressionEnabled.setDescription('enable or disable compression. Restricted by the type of license. Reserved for future use. Not supported currently.')
eqlNASApplianceModificationTimeFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 365)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceModificationTimeFilter.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceModificationTimeFilter.setDescription('Exclude files modified less than the specified number of days before. 30 to 365 days.')
eqlNASApplianceAccessTimeFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 365)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceAccessTimeFilter.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceAccessTimeFilter.setDescription('Exclude files accessed less than the specified number of days before. 30 to 365 days.')
eqlNASApplianceExcludeFilesByNamePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceExcludeFilesByNamePattern.setStatus('deprecated')
if mibBuilder.loadTexts: eqlNASApplianceExcludeFilesByNamePattern.setDescription('Regular expression identifying the file name pattern to exclude from optimization. Empty string means no exclusion.')
eqlNASApplianceDefaultCIFSAntivirusEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 23), StatusDisabledDefault().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSAntivirusEnabled.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSAntivirusEnabled.setDescription('Default which determines whether the antivirus service is disabled or enabled for a CIFS share at the time of creation.')
eqlNASApplianceDefaultCIFSAntivirusPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("quarantine", 0), ("do-nothing", 1), ("remove", 2))).clone('quarantine')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSAntivirusPolicy.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSAntivirusPolicy.setDescription('Default which determines the action to be taken on a virus-infected file.  This field is deprecated and unsupported.  The value now always will be quarantine(0).')
eqlNASApplianceDefaultCIFSAntivirusExtensions = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSAntivirusExtensions.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSAntivirusExtensions.setDescription('Default which determines which files should be / should not be scanned for viruses. This is a comma-separated list. The value of the next field determines if the files with the corresponding extensions will be scanned or not for viruses. Cannot contain wild characters * and ?. Extensions are case-insensitive.')
eqlNASApplianceDefaultCIFSAntivirusExtensionsPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("exclude", 0), ("include", 1))).clone('exclude')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSAntivirusExtensionsPolicy.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSAntivirusExtensionsPolicy.setDescription('Default which determines whether the files whose extensions match with those specified in the field above should be scanned OR should not be scanned for viruses.  This field is deprecated and unsupported.  The value now always will be exclude(0).')
eqlNASApplianceDefaultCIFSAntivirusExcludeDirPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSAntivirusExcludeDirPaths.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSAntivirusExcludeDirPaths.setDescription('Default which determines the list of the directory paths which should not be scanned for viruses. It is a comma-separated list. Paths can contain wildcards * and ?. NOTE: * will not match several path components. ')
eqlNASApplianceDefaultCIFSAntivirusLargeFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 28), Unsigned32().clone(3072)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSAntivirusLargeFileSize.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSAntivirusLargeFileSize.setDescription('Default which determines the largest file size in MB which is sent to Antivirus server for scanning on the fly. The files larger than the specified size are not scanned. Access to these large files will be allowed or denied based on the CIFS Antivirus Large File Open option.')
eqlNASApplianceDefaultCIFSAntivirusLargeFileOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("allow", 1))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSAntivirusLargeFileOpen.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSAntivirusLargeFileOpen.setDescription('Default which determines if CIFS clients are allowed to open files larger than the value defined by AntivirusLargeFileSize.')
eqlNASApplianceDefaultNFSExportsFileId32bit = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultNFSExportsFileId32bit.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceDefaultNFSExportsFileId32bit.setDescription('Default option to trigger 32-bit compatibility mode for NFS export. When enabled, reported FileId (inode) information contains only lower 32-bits set. When disabled, reported FileId (inode) information contains full 64-bit values.')
eqlNASContainerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5), )
if mibBuilder.loadTexts: eqlNASContainerStatusTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerStatusTable.setDescription('EqualLogic-Dynamic NAS Container Table.\n                     This table contains a list of NAS Appliance configurations for containers the group is managing.\n                     TimeoutAll:60')
eqlNASContainerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"))
if mibBuilder.loadTexts: eqlNASContainerStatusEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerStatusEntry.setDescription('An entry (row) containing NAS Container Status info.')
eqlNASContainerStatusConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerStatusConnections.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerStatusConnections.setDescription('')
eqlNASContainerStatusUsedSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerStatusUsedSpace.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerStatusUsedSpace.setDescription('Space used by NAS Containers including both snapshot space and filesystem usage)')
eqlNASContainerStatusSnapshotSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerStatusSnapshotSpace.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerStatusSnapshotSpace.setDescription('Amount of used space in MB used by NAS Containers for storage of snapshot data. This is not snapshot reserve but rather snapshot reserve space currently in use. Initially this value would be 0.')
eqlNASContainerStatusNumNFSExports = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerStatusNumNFSExports.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerStatusNumNFSExports.setDescription('')
eqlNASContainerStatusNumCIFSShares = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerStatusNumCIFSShares.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerStatusNumCIFSShares.setDescription('')
eqlNASContainerStatusAllocatedSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerStatusAllocatedSpace.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerStatusAllocatedSpace.setDescription('Amount of space in MB allocated by NAS Containers')
eqlNASContainerStatusFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerStatusFreeSpace.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerStatusFreeSpace.setDescription('Amount of total free space in MB including both snapshot and filesystem')
eqlNASContainerStatusNumOfSnapshots = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerStatusNumOfSnapshots.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerStatusNumOfSnapshots.setDescription('Number of snapshots')
eqlNASContainerStatusOptimizationSpaceSavings = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerStatusOptimizationSpaceSavings.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerStatusOptimizationSpaceSavings.setDescription('Amount of space saved in MB due to applying optimization')
eqlNASContainerStatusOptimized = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerStatusOptimized.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerStatusOptimized.setDescription('True if optimization was enabled once, false otherwise')
eqlNASContainerStatusReplState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("standalone", 0), ("source", 1), ("destination", 2), ("promoted", 3), ("not-available", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerStatusReplState.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerStatusReplState.setDescription('This column gives information about the replication\n                     status of this FileSystem. Standalone means the filesystem \n                     is not being replicated. Source means this filesystem is a \n                     source to a remote filesystem. Destination means this \n                     filesystem is destination for a source filesystem. \n                     Promoted means this filesystem used to be a destination \n                     but is right now promoted.')
eqlNASContainerStatusNextSnapshotID = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerStatusNextSnapshotID.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerStatusNextSnapshotID.setDescription('This column denotes the next SnapshotID avaiable for this particular container.')
eqlNASApplianceNFSExportsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6), )
if mibBuilder.loadTexts: eqlNASApplianceNFSExportsTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceNFSExportsTable.setDescription('Equallogic-Dynamic NAS NFS Exports Table.\n\t\t    This table contains a list of NFS exports configuration entry.\n                    TimeoutAll:60')
eqlNASApplianceNFSExportsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASApplianceNFSExportName"))
if mibBuilder.loadTexts: eqlNASApplianceNFSExportsEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceNFSExportsEntry.setDescription('An entry (row) containing NFS exports configuration.')
eqlNASApplianceNFSExportName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: eqlNASApplianceNFSExportName.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceNFSExportName.setDescription('Contains only letters, digits and underscores. Must begin with a letter.')
eqlNASApplianceNFSExportsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceNFSExportsRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceNFSExportsRowStatus.setDescription('Rowstatus variable used to manage this conceptual row.')
eqlNASApplianceNFSExportDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceNFSExportDirectory.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceNFSExportDirectory.setDescription('Full path to the Directory to be exported.')
eqlNASApplianceNFSAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read-write", 1), ("read-only", 2))).clone('read-write')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceNFSAccess.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceNFSAccess.setDescription('')
eqlNASApplianceNFSLimitReportedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6, 1, 5), Unsigned32()).setUnits('MB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceNFSLimitReportedSize.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceNFSLimitReportedSize.setDescription('Default value is zero and it means the actual size of NFS export will be returned. When the value is non-zeo, this value will be used instead of actual NFS Export size.')
eqlNASApplianceNFSAccessClientIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6, 1, 6), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceNFSAccessClientIPType.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceNFSAccessClientIPType.setDescription('Type of eqlNASApplianceNFSAccessClientIP field.')
eqlNASApplianceNFSAccessClientIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceNFSAccessClientIP.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceNFSAccessClientIP.setDescription('Value of this column along with eqlNASApplianceNFSAccessClientNetmask will determine access policy for clients')
eqlNASApplianceNFSAccessClientNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6, 1, 8), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceNFSAccessClientNetmaskType.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceNFSAccessClientNetmaskType.setDescription('Type of eqlNASApplianceNFSAccessClientNetmask field. This value must match with eqlNASApplianceNFSAccessClientIPType field.')
eqlNASApplianceNFSAccessClientNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6, 1, 9), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceNFSAccessClientNetmask.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceNFSAccessClientNetmask.setDescription('Value of this column along with eqlNASApplianceNFSAccessClientIP will determine access policy for clients')
eqlNASApplianceNFSTrustUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all-except-root", 1), ("none", 2), ("all", 3))).clone('all-except-root')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceNFSTrustUsers.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceNFSTrustUsers.setDescription(' Trusted users who can access the NFS Export')
eqlNASApplianceNFSExportsFileId32bit = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceNFSExportsFileId32bit.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceNFSExportsFileId32bit.setDescription('Determines 32-bit compatibility mode for this NFS export. When enabled, reported FileId (inode) information contains only lower 32-bits. When disabled, reported FileId (inode) information contains full 64-bit values.')
eqlNASApplianceCIFSTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8), )
if mibBuilder.loadTexts: eqlNASApplianceCIFSTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceCIFSTable.setDescription('Equallogic-Dynamic NAS CIFS Table.\n\t\t    This table contains a list of CIFS configuration entry.\n                    TimeoutAll:60')
eqlNASApplianceCIFSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASApplianceCIFSShareName"))
if mibBuilder.loadTexts: eqlNASApplianceCIFSEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceCIFSEntry.setDescription('An entry (row) containing CIFS configuration.')
eqlNASApplianceCIFSShareName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: eqlNASApplianceCIFSShareName.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceCIFSShareName.setDescription('Contains only letters, digits and underscores.')
eqlNASApplianceCIFSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCIFSRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceCIFSRowStatus.setDescription(' Rowstatus variable used to manage this conceptual row.')
eqlNASApplianceCIFSExportedDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCIFSExportedDirectory.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceCIFSExportedDirectory.setDescription('Full Path to the directory to be exported.')
eqlNASApplianceCIFSAllowGuestAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1, 4), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCIFSAllowGuestAccess.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceCIFSAllowGuestAccess.setDescription('When set to true, guests will be allowed to access this share.')
eqlNASApplianceCIFSLockEnforcement = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("all-locks", 0), ("no-byte-range-locks", 1), ("only-share-locks", 2))).clone('all-locks')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCIFSLockEnforcement.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceCIFSLockEnforcement.setDescription('Locking enforcement policy for this CIFS Share. This software release does not support changing the locking enforcement policy. Only the default option (all-locks) is supported.')
eqlNASApplianceCIFSAntivirusEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1, 6), StatusDisabledDefault().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCIFSAntivirusEnabled.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceCIFSAntivirusEnabled.setDescription('When set to enabled, antivirus service will be enabled for this share. Else it will be disabled.')
eqlNASApplianceCIFSAntivirusPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("quarantine", 0), ("do-nothing", 1), ("remove", 2))).clone('quarantine')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCIFSAntivirusPolicy.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceCIFSAntivirusPolicy.setDescription('Determines the action to take when a file is found to be infected by a virus.  This field is deprecated and unsupported.  The value now always will be quarantine(0).')
eqlNASApplianceCIFSAntivirusExtensions = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCIFSAntivirusExtensions.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceCIFSAntivirusExtensions.setDescription('Comma-separated list of the file extensions which should / should not be virus-scanned. The value of the next field i.e. eqlNASApplianceCIFSAntivirusExtensionsPolicy determines if the files with the corresponding extensions will be scanned or not for viruses. Cannot contain wild characters * and ?. Extensions are case-insensitive.')
eqlNASApplianceCIFSAntivirusExtensionsPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("exclude", 0), ("include", 1))).clone('exclude')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCIFSAntivirusExtensionsPolicy.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceCIFSAntivirusExtensionsPolicy.setDescription('Determines whether the files whose extensions match with those specified in the field above i.e. eqlNASApplianceCIFSAntivirusExtensions, should be scanned OR should not be scanned for viruses.  This field is deprecated and unsupported.  The value now always will be exclude(0).')
eqlNASApplianceCIFSAntivirusExcludeDirPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCIFSAntivirusExcludeDirPaths.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceCIFSAntivirusExcludeDirPaths.setDescription('Comma-separated list of the directory paths which should not be scanned for viruses. Paths can contain wildcards * and ?. NOTE: * will not match several path components. ')
eqlNASApplianceCIFSAntivirusLargeFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1, 11), Unsigned32().clone(3072)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCIFSAntivirusLargeFileSize.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceCIFSAntivirusLargeFileSize.setDescription('Determines the largest file size in MB which is sent to Antivirus server for scanning on the fly. The files larger than the specified size are not scanned. Access to these large files will be allowed or denied based on the CIFS Antivirus Large File Open policy.')
eqlNASApplianceCIFSAntivirusLargeFileOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("allow", 1))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCIFSAntivirusLargeFileOpen.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceCIFSAntivirusLargeFileOpen.setDescription('Determines if CIFS clients are allowed to open files larger than the value defined by CIFSAntivirusLargeFileSize.')
eqlNASContainerDirectoryOpsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 9), )
if mibBuilder.loadTexts: eqlNASContainerDirectoryOpsTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerDirectoryOpsTable.setDescription('Equallogic-Dynamic NAS Container Directory Operations Table. This table is used for directory operations.\n                     TimeoutAll:60')
eqlNASContainerDirectoryOpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 9, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASContainerDirectoryOpsIndex"))
if mibBuilder.loadTexts: eqlNASContainerDirectoryOpsEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerDirectoryOpsEntry.setDescription('An entry for directory operations.')
eqlNASContainerDirectoryOpsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlNASContainerDirectoryOpsIndex.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerDirectoryOpsIndex.setDescription('This field specifies a unique index for identifying a NAS container directory ops entry.')
eqlNASContainerDirectoryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerDirectoryRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerDirectoryRowStatus.setDescription(' Rowstatus variable used to manage directories. Operations supported will be create and delete. Get and Getnext operations on this table will return error.')
eqlNASContainerDirectoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerDirectoryName.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerDirectoryName.setDescription('Full Path to the directory to be created or deleted. Ex: /home/user1. Create directory will fail if parent directory does not exist.')
eqlNASContainerDirectoryCaseInsensitive = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerDirectoryCaseInsensitive.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerDirectoryCaseInsensitive.setDescription('Determines whether the directory created is case insensitve or not.')
eqlNASSnapshotTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 3), )
if mibBuilder.loadTexts: eqlNASSnapshotTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotTable.setDescription('EqualLogic-Dynamic snapshot Table\n                     This table contains a list of snapshots associated with the associated container.\n                     TimeoutAll:60')
eqlNASSnapshotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 3, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASSnapshotIndex"))
if mibBuilder.loadTexts: eqlNASSnapshotEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotEntry.setDescription('An entry (row) containing snap shot info.')
eqlNASSnapshotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlNASSnapshotIndex.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotIndex.setDescription('This field specifies a unique index which identifies a NAScontainer SnapShot.')
eqlNASSnapshotRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotRowStatus.setDescription('The rowstatus....')
eqlNASSnapshotName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 230))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotName.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotName.setDescription('This field specifies the friendly name used to identify a SnapShot.\n                     The name is auto-generated based on the NAScontainer name, optionally it can be\n                     provided or changed after the fact by the administrator.')
eqlNASSnapshotSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASSnapshotSize.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotSize.setDescription('This field specifies the amount of space in MB a SnapShot consumes.\n                     Note: Deleting the SnapShot is not guaranteed to return the space specified,\n                     since a single block can be associated with multiple SnapShots. This value is xxxxc.')
eqlNASSnapshotTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASSnapshotTimestamp.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotTimestamp.setDescription('EQL-SECONDARY-KEY\n                     This field specifies the creation date/time for snapshot.\n                     Time is represented as the time in seconds since 00:00:00 UTC, 1970-01-01.')
eqlNASSnapshotRollBack = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 3, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotRollBack.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotRollBack.setDescription('True indicates the NASContainer is to be resotred to the state of this Snapshot.')
eqlNASSnapshotPolicyIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyIdx.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotPolicyIdx.setDescription('This value identifies the snapshot policy for this snapshot.')
eqlNASSnapshotPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4), )
if mibBuilder.loadTexts: eqlNASSnapshotPolicyTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotPolicyTable.setDescription('EqualLogic-Persistent NAS SnapSnot Policy Table.\n                     TimeoutAll:60')
eqlNASSnapshotPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASSnapshotPolicyIndex"))
if mibBuilder.loadTexts: eqlNASSnapshotPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotPolicyEntry.setDescription('An entry (row) containing NAS snapshot scheduling policy \n                     information.The policy determines when to create \n                     snapshot(s) of a appliance container.')
eqlNASSnapshotPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: eqlNASSnapshotPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotPolicyIndex.setDescription('This value uniquely identifies the snapshot policies for a container.')
eqlNASSnapshotPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotPolicyRowStatus.setDescription('This value is used to manage the conceptual row.')
eqlNASSnapshotPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyName.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotPolicyName.setDescription('This value specifies user friendly name for the policy. \n           It is unique within the context of a volume. Spaces are not allowed.')
eqlNASSnapshotPolicyMaxKeep = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(10)).setUnits('snapshots').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyMaxKeep.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotPolicyMaxKeep.setDescription('\n           The value of this object determines the maximum no of snapshots\n           created by this policy that can exist at a given time. When number\n           of snapshots created by this policy reaches this value, for creating\n           a new snapshot oldest snapshot created using this policy will be \n           deleted.\n           In a set operation, if the new value of this object is less than\n           the old value, required number of oldest snapshots created by this\n           policy will be deleted. \n          ')
eqlNASSnapshotPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("once", 1), ("daily", 2), ("weekly", 3), ("monthly", 4), ("hourly", 5))).clone('daily')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyType.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotPolicyType.setDescription('\n           The value of this object determines the basic type of this policy.\n           Except when set to once, the effective repetition period of the \n           policy is determined using the value of this object along with\n           the value of eqlNASSnapshotPolicyRepeatFactor. \n           (See description of eqlNASSnapshotPolicyRepeatFactor \n            for more information.)\n          ')
eqlNASSnapshotPolicyRepeatFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyRepeatFactor.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotPolicyRepeatFactor.setDescription('The value of this object along with eqlNASSnapshotPolicyType\n           determines the effective repetition interval for this policy.\n           The valid values are\n\n              PolicyType            RepeatFactor  \n                 once                    1\n                 hourly                  1\n                 daily                  1-2147483647\n                 weekly                 1-2147483647\n                 monthly                1-2147483647\n\n           If the policy type is daily and the value of this object is 2,\n           snapshots will be taken once in every 2 days.\n          ')
eqlNASSnapshotPolicyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1439))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyStartTime.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotPolicyStartTime.setDescription(' \n            The value of this object represents the time to start creating\n            snapshot(s) within a day expressed as number of minutes \n            from 12:00AM. The maximum value for this column is 24*60-1 which \n            represents 11:59PM.\n          ')
eqlNASSnapshotPolicyEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1439))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyEndTime.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotPolicyEndTime.setDescription(" \n            The value of this object represents the time to stop creating\n            snapshot(s) within a day expressed as number of minutes \n            from 12:00AM. The maximum value for this column is 24*60-1 which \n            represents 11:59PM. \n \n            If eqlNASSnapshotPolicyType is once, the value of\n            this column doesn't have any significance. \n\n            If the value of this column is greater than start time, it \n            represents end-time on the same day as start time. If the value \n            is less than or equal to start time, it represents end-time on the\n            next day of start time.\n            This value doesnt have significance when frequency is set to zero.\n            Endtime is exclusive when calculating no of snapshots.\n\n            Example:\n                     StartTime      EndTime    Frequency    NoofSnapshots\n                       1320(10pm)   1380(11pm)    30mins        2\n                       1320(10pm)   240(4am)      60mins        6\n                       1320(10pm)   1320(10pm)    60mins        24\n                       1320(10pm)   1319(9:59pm)  60mins        24\n                       1320(10pm)     -            0mins         1\n          ")
eqlNASSnapshotPolicyTimeFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1439))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyTimeFrequency.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotPolicyTimeFrequency.setDescription("The value of this object determines how frequent snapshots must be \n           taken between start time and end time. This value doesn't have \n           significance when policy type is set to once. For other policytypes,\n           the value of end time is exclusive. \n           For example if starttime is 180 (3:00AM) and endtime is \n           240(4:00AM), when frequency is set to 30, snapshots will be \n           created at 3:00AM, 3:30AM.\n           If the value is zero, it represents invalid frequency and\n           in such case, end time doesnt have significance.\n          ")
eqlNASSnapshotPolicyStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('days').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyStartDate.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotPolicyStartDate.setDescription(' The value of this object determines the date from which the policy\n            will be active. By default, this is the policy creation date.\n            The value is expressed as number of days since epoch.\n          ')
eqlNASSnapshotPolicyEndDate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2147483647)).setUnits('days').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyEndDate.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotPolicyEndDate.setDescription(' The value of this object determines the date after which the policy\n            will be inactive.It doesnt have significance when policy type\n            is once. Default value is the mamixum value allowed. When set to maximum\n            value, the policy will be active until it gets deleted.\n            The value is expressed as number of days since epoch.\n          ')
eqlNASSnapshotPolicyWeekMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyWeekMask.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotPolicyWeekMask.setDescription(' The value of this column is significant only if policytype is\n            set to weekly or monthly.  When the value is 0x7fffffff, it \n            represents a special meaning to the value of occurence. See\n            the description for occurence below.\n            The LSB to LSB+6 bits of the mask are significant.\n            Each bit represents a day in the week with LSB being Mon and LSB+6\n            being Sun.\n            If mask is 0x00000041 - snapshots will be created on Monday and \n            Sunday. If mask is 0x0000007f - snapshots will be created on all\n            weekdays which is effectively a daily policy. If mask is 0x0000001f,\n            it represents week days.If mask is 0x00000060, it represents\n            weekend days.\n          ')
eqlNASSnapshotPolicyMonthMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyMonthMask.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotPolicyMonthMask.setDescription(' The value of this column is currently not being used.')
eqlNASSnapshotPolicyOccurence = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyOccurence.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotPolicyOccurence.setDescription('\n           The value of this column is significant only if the policy type is\n           set to monthly.\n\n           If weekmask is set to 0x7fffffff, the value of this column represents\n           the occurence of a day with in a month. Example:If the value of this \n           column is 5, it represents 5th day of the month. When the week mask\n           is set to a value other than 0x7fffffff, the value of this column\n           defines the occurence of a day as defined by weekmask. Example: When\n            weekmask is set to 0x00000001 (Monday) and value of this column\n           represents the following.\n \n                        Value            Meaning\n\n                          0x1               First monday of the month\n                          0x2               Second monday of the month\n                          0x3               Third monday of the month\n                          0x4               Fourth monday of the month\n                          0x7fffffff        Last monday of the month\n          ')
eqlNASSnapshotPolicyReplication = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 18), SiteIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyReplication.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotPolicyReplication.setDescription('When a row is created with this object set to a non-zero value, and\n                     a replication relationship has been configured for the base\n                     volume, the snapshots created will be queued to be replicated to the\n                     remote location as defined by the corresponding entry in the site table.\n                     The value for this object cannot be changed once the schedule\n                     is created.')
eqlNASSnapshotPolicyAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyAdminStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotPolicyAdminStatus.setDescription('When disabled, the schedule will stop creating snapshots until re-enabled.')
eqlNASSnapshotPolicyCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("snapshot-replication-policy", 0), ("optimization-policy", 1), ("optimization-default-policy", 2))).clone('snapshot-replication-policy')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyCategory.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotPolicyCategory.setDescription('Set to optimization-policy, if the schedule is for data reduction. Set to optimization-default-policy if the\n\t\t\t\t\t\tschedule is default data reduction policy. Default data reduction policy is created automatically and not\n\t\t\t\t\t\tallowed to be deleted.')
eqlNASSnapshotPolicyStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 5), )
if mibBuilder.loadTexts: eqlNASSnapshotPolicyStatusTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotPolicyStatusTable.setDescription('EqualLogic-Dynamic NAS SnapSnot Policy Table.\n                     TimeoutAll:60')
eqlNASSnapshotPolicyStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 5, 1), )
eqlNASSnapshotPolicyEntry.registerAugmentions(("EQLNAS-MIB", "eqlNASSnapshotPolicyStatusEntry"))
eqlNASSnapshotPolicyStatusEntry.setIndexNames(*eqlNASSnapshotPolicyEntry.getIndexNames())
if mibBuilder.loadTexts: eqlNASSnapshotPolicyStatusEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotPolicyStatusEntry.setDescription('An entry containing NAS snapshot scheduling policy \n                     information.')
eqlNASSnapshotPolicyStatusNextCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyStatusNextCreate.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotPolicyStatusNextCreate.setDescription('\n           The value of this column represents number of seconds since epoch\n           at which the next snapshot by this policy is going to be created.\n          ')
eqlNASSnapshotPolicyStatusOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("expired", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyStatusOperStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASSnapshotPolicyStatusOperStatus.setDescription('\n           The value of this column represents the current operational status of this policy.\n           The policy status is set to expired after end date. The policy status is set to active\n           for optimization policies which are currently running.\n          ')
eqlNASQuotaTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 6), )
if mibBuilder.loadTexts: eqlNASQuotaTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASQuotaTable.setDescription('EqualLogic-Dynamic quota Table\n                     This table contains a list of quotas associated with the associated container.\n                     TimeoutAll:60')
eqlNASQuotaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 6, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASQuotaTargetType"), (0, "EQLNAS-MIB", "eqlNASQuotaTargetName"))
if mibBuilder.loadTexts: eqlNASQuotaEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASQuotaEntry.setDescription('An entry (row) containing quota info.')
eqlNASQuotaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 6, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASQuotaRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASQuotaRowStatus.setDescription('The rowstatus....')
eqlNASQuotaTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unused", 0), ("allofgroup", 1), ("anyuseringroup", 2), ("user", 3), ("defaultuser", 4), ("defaultgroup", 5), ("allquotas", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASQuotaTargetType.setStatus('current')
if mibBuilder.loadTexts: eqlNASQuotaTargetType.setDescription('Type of target for this quota definition row')
eqlNASQuotaTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASQuotaTargetName.setStatus('current')
if mibBuilder.loadTexts: eqlNASQuotaTargetName.setDescription('The name of the user or group as indicated by the target type. AD groups can be 129 bytes ')
eqlNASQuotaWarnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 6, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASQuotaWarnLimit.setStatus('current')
if mibBuilder.loadTexts: eqlNASQuotaWarnLimit.setDescription('This field specifies the amount of space in MB at which an alert is generated.')
eqlNASQuotaHardLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 6, 1, 5), Unsigned32()).setUnits('MB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASQuotaHardLimit.setStatus('current')
if mibBuilder.loadTexts: eqlNASQuotaHardLimit.setDescription('This field specifies the amount of space in MB at which writes are disallowed.')
eqlNASQuotaUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASQuotaUsage.setStatus('current')
if mibBuilder.loadTexts: eqlNASQuotaUsage.setDescription('This field specifies the amount of space in MB currently in use by targetname.')
eqlNASReplSiteTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10), )
if mibBuilder.loadTexts: eqlNASReplSiteTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplSiteTable.setDescription('EqualLogic-Persistent\n      TimeoutAll:60')
eqlNASReplSiteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASReplSitePartnershipId"))
if mibBuilder.loadTexts: eqlNASReplSiteEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplSiteEntry.setDescription('')
eqlNASReplSitePartnershipId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplSitePartnershipId.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplSitePartnershipId.setDescription('This is the partnership Id used by Exastore to identify the partnership in the XML API')
eqlNASReplSiteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplSiteRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplSiteRowStatus.setDescription('The status of the row')
eqlNASReplSiteVolumeReplSiteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 3), SiteIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplSiteVolumeReplSiteIndex.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplSiteVolumeReplSiteIndex.setDescription('The value of eqliscsiVolumeReplSiteIndex to index into eqliscsiVolumeReplSiteTable.')
eqlNASReplSiteLocalClusterInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplSiteLocalClusterInetAddrType.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplSiteLocalClusterInetAddrType.setDescription('The IP address type for the LocalCluster SAN VIP')
eqlNASReplSiteLocalClusterInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplSiteLocalClusterInetAddr.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplSiteLocalClusterInetAddr.setDescription('The IP address for the LocalCluster SAN VIP')
eqlNASReplSiteRemoteClusterInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 6), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplSiteRemoteClusterInetAddrType.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplSiteRemoteClusterInetAddrType.setDescription('The IP address type for the RemoteCluster SAN VIP')
eqlNASReplSiteRemoteClusterInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 7), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplSiteRemoteClusterInetAddr.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplSiteRemoteClusterInetAddr.setDescription('The IP address for the RemoteCluster SAN VIP')
eqlNASReplSitePartnershipState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("configured", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplSitePartnershipState.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplSitePartnershipState.setDescription('This field gives the state of the partnership. enabled \n       means the user has enabled NAS replication for this \n       partnership. congiured means that we have configured \n       this partnership with exastore. The state will always \n       start with enabled, and then convert to configured \n       once we push the partnership down to exastore.')
eqlNASReplSiteUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplSiteUserName.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplSiteUserName.setDescription('The replication username for the remote site. This\n         is only used for senind messages to spartan agent.')
eqlNASReplSitePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: eqlNASReplSitePassword.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplSitePassword.setDescription('The replication usernames password for the remote site.\n         This is only used for senind messages to spartan agent.')
eqlNASReplSiteRemoteClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplSiteRemoteClusterName.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplSiteRemoteClusterName.setDescription('This field specifies the partners cluster name, which is the remote eqlApplianceName.')
eqlNASReplSiteAction = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("configure", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplSiteAction.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplSiteAction.setDescription('This column will be used to perform actions on this partnership.\n       The configure action will be used to configure the partnership \n       with Exastore. The delete action will be used to delete partnership at Exastore')
eqlNASReplSiteRemoteUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: eqlNASReplSiteRemoteUserName.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplSiteRemoteUserName.setDescription('The replication username at the remote site. This\n         is only used for senind messages to spartan agent. This is same as eqlNASApplianceReplRemoteUserName. ')
eqlNASReplSiteRemotePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: eqlNASReplSiteRemotePassword.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplSiteRemotePassword.setDescription('The replication usernames password at the remote site.\n         This is only used for senind messages to spartan agent.')
eqlNASReplSiteRemoteClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 15), ClusterIdType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplSiteRemoteClusterId.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplSiteRemoteClusterId.setDescription('Get this string from node.')
eqlNASReplSiteRemoteClusterMPV = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplSiteRemoteClusterMPV.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplSiteRemoteClusterMPV.setDescription('The Management Protocol Version (MPV) of the remote cluster.')
eqlNASReplSiteRemoteNetworkAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 17), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplSiteRemoteNetworkAddrType.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplSiteRemoteNetworkAddrType.setDescription('The IP address type (IPv4/IPv6) for the network ID \n      of the remote cluster. NAS replication traffic is sent \n      to this network. This is used for creating route to \n      reach the remote cluster.')
eqlNASReplSiteRemoteNetworkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 18), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplSiteRemoteNetworkAddr.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplSiteRemoteNetworkAddr.setDescription('The network address/ID of the remote cluster.\n      The network address/ID to reach the remote cluster \n      NAS replication traffic is sent to this network.')
eqlNASReplSiteRemoteNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 19), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplSiteRemoteNetworkMask.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplSiteRemoteNetworkMask.setDescription('The netmask of the remote network.\n      NAS replication traffic is sent to this network.\n      This is used for creating route to reach the\n      remote cluster.')
eqlNASReplicationTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11), )
if mibBuilder.loadTexts: eqlNASReplicationTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationTable.setDescription('EqualLogic-Dynamic\n     TimeoutAll:60')
eqlNASReplicationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASReplSitePartnershipId"), (0, "EQLNAS-MIB", "eqlNASReplicationId"))
if mibBuilder.loadTexts: eqlNASReplicationEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationEntry.setDescription('')
class EqlNASReplicationStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("unknown", 0), ("idle", 1), ("active", 2), ("waitingretry", 3), ("failed", 4), ("paused", 5), ("cancelled", 6), ("resuming", 7), ("deleting", 8), ("pausing", 9), ("finished", 10), ("cancelling", 11), ("promoted", 12), ("promoting", 13), ("idlewaittoschedule", 14), ("demoting", 15))

eqlNASReplicationId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplicationId.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationId.setDescription('This is the replication Id used by Exastore to identify the replication in the XML API')
eqlNASReplicationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplicationRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationRowStatus.setDescription('The status of the row')
eqlNASReplicationLastRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationLastRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationLastRecoveryTime.setDescription('This field specifies the date/time of the last recovery snapshot\n                     that has been copied. Time is represented as the time in seconds \n                     since 00:00:00 UTC, 1970-01-01.')
eqlNASReplicationNextRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationNextRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationNextRecoveryTime.setDescription('This field specifies the date/time of the next recovery snapshot\n                     that will be copied. Time is represented as the time in seconds \n                     since 00:00:00 UTC, 1970-01-01.')
eqlNASReplicationSourceClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationSourceClusterName.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationSourceClusterName.setDescription('This field specifies the source cluster name, which is the \n                     eqlApplianceName of the cluster hosting the source FS.')
eqlNASReplicationSourceFSId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationSourceFSId.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationSourceFSId.setDescription('Unique Identifier for the source FileSystem. This is the FSid.')
eqlNASReplicationSourceFSName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 230))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplicationSourceFSName.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationSourceFSName.setDescription('Name used to identify the source NAS Container. Contains only \n                     letters, digits and underscores. Must begin with either letter \n                     or an underscore. ')
eqlNASReplicationDestClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationDestClusterName.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationDestClusterName.setDescription('This field specifies the destination cluster name, which is the \n                     eqlApplianceName of the cluster hosting the destination FS.')
eqlNASReplicationDestFSId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationDestFSId.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationDestFSId.setDescription('Unique Identifier for the destination FileSystem. This is the FSid.')
eqlNASReplicationDestFSName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 230))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplicationDestFSName.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationDestFSName.setDescription('Name used to identify the destination NAS Container. Contains \n                     only letters, digits and underscores. Must begin with either \n                     letter or an underscore. ')
eqlNASReplicationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 11), EqlNASReplicationStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationStatus.setDescription('The status of this replication relationship.')
eqlNASReplicationMinToComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationMinToComplete.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationMinToComplete.setDescription('Minutes left in completion of the current replication process.')
eqlNASReplicationTransferredPer = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 13), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationTransferredPer.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationTransferredPer.setDescription('Provides a percent transferred for the current replication process.')
eqlNASReplicationAction = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109))).clone(namedValues=NamedValues(("none", 0), ("replicate", 1), ("pause", 2), ("resume", 3), ("cancel", 4), ("demote", 5), ("promote", 6), ("force-promote", 7), ("delete", 8), ("force-delete", 9), ("outbound-delete", 100), ("outbound-force-delete", 101), ("inbound-delete", 102), ("inbound-promote", 103), ("inbound-promote-restore-cfg", 104), ("inbound-promote-keep-demote", 105), ("inbound-promote-keep-demote-restore-cfg", 106), ("inbound-delete-failback", 107), ("inbound-delete-failback-restore-cfg", 108), ("restore-cfg", 109)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplicationAction.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationAction.setDescription('Use this column to perform actions on this replication relationship.')
eqlNASReplPartnerInfoMapTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 12), )
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapTable.setDescription('EqualLogic-Dynamic\n      This table is used to get the NAS cluster name for the replsite provided.')
eqlNASReplPartnerInfoMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 12, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLVOLUME-MIB", "eqliscsiVolumeReplSiteIndex"))
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapEntry.setDescription('')
eqlNASReplPartnerInfoMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 12, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapRowStatus.setDescription('The status of the row')
eqlNASReplPartnerInfoMapClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 12, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapClusterName.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapClusterName.setDescription('This field specifies the partners cluster name, which is the remotes eqlApplianceName.')
eqlNASReplPartnerInfoMapClusterSanVIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 12, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapClusterSanVIPType.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapClusterSanVIPType.setDescription('Type of eqlNASReplPartnerInfoMapClusterSanVIP field.')
eqlNASReplPartnerInfoMapClusterSanVIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 12, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapClusterSanVIP.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapClusterSanVIP.setDescription('Value of this column holds the SAN VIP of the remote cluster')
eqlNASReplPartnerInfoMapClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 12, 1, 5), ClusterIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapClusterId.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapClusterId.setDescription('String containing local cluster Id. It should be unique within the network.\n                     It is generated by IDC code.')
eqlNASReplPartnerInfoMapClusterMPV = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 12, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapClusterMPV.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapClusterMPV.setDescription('The Management Protocol Version (MPV) of the cluster (usually remote).')
eqlNASReplPartnerInfoMapNetworkAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 12, 1, 7), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapNetworkAddrType.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapNetworkAddrType.setDescription('Type (IPv4 or IPv6) of the network where the partner is reachable.')
eqlNASReplPartnerInfoMapNetworkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 12, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapNetworkAddr.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapNetworkAddr.setDescription('The address/ID of the network where the partner is reachable.')
eqlNASReplPartnerInfoMapNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 12, 1, 9), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapNetworkMask.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapNetworkMask.setDescription('The netmask of the network where the partner is reachable.')
eqlNASReplPartnerIdMapTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 13), )
if mibBuilder.loadTexts: eqlNASReplPartnerIdMapTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerIdMapTable.setDescription('EqualLogic-Dynamic\n      This table is used to get the NAS partnership Id for the given remote NAS cluster name.')
eqlNASReplPartnerIdMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 13, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASReplPartnerInfoMapClusterName"))
if mibBuilder.loadTexts: eqlNASReplPartnerIdMapEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerIdMapEntry.setDescription('')
eqlNASReplPartnerIdMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 13, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplPartnerIdMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerIdMapRowStatus.setDescription('The status of the row')
eqlNASReplPartnerIdMapPartnershipId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 13, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplPartnerIdMapPartnershipId.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerIdMapPartnershipId.setDescription('This is the partnership Id used by Exastore for the given eqlNASReplPartnerInfoMapClusterName.')
eqlNASContainerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 14), )
if mibBuilder.loadTexts: eqlNASContainerCfgTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerCfgTable.setDescription('EqualLogic-Dynamic\n      This table is used to restore NAS file system configuration on given filesystem (a.k.a. container).')
eqlNASContainerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 14, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASContainerCfgIndex"))
if mibBuilder.loadTexts: eqlNASContainerCfgEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerCfgEntry.setDescription('The index is composed of:\n       * eqlApplianceIndex    - appliance index of the cluster hosting the target FS, \n       * eqlNASContainerIndex - container index of the target FS,\n       * eqlNASContainerCfgIndex - unique identifer for the configuration applicable \n                                   to the filesystem.')
eqlNASContainerCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 14, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlNASContainerCfgIndex.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerCfgIndex.setDescription('Unique identifier of the configuration items set.')
eqlNASContainerCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 14, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerCfgRowStatus.setDescription('The status of the row')
eqlNASContainerCfgSourceClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 14, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASContainerCfgSourceClusterName.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerCfgSourceClusterName.setDescription('This field specifies the source cluster name, which is the \n                     eqlApplianceName of the cluster hosting the source FS.')
eqlNASContainerCfgSourceFSName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 14, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 230))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASContainerCfgSourceFSName.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerCfgSourceFSName.setDescription('Name used to identify the source NAS Container. Contains only \n                     letters, digits and underscores. Must begin with either letter \n                     or an underscore. ')
eqlNASContainerCfgModules = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 14, 1, 5), Bits().clone(namedValues=NamedValues(("nfsExport", 0), ("cifsShare", 1), ("quotaRule", 2), ("snapshotScheduler", 3), ("volumeParameters", 4), ("volumeName", 5), ("volumeSize", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASContainerCfgModules.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerCfgModules.setDescription('Bitmap of filesystem configuration modules to be restored. Identifies which filesystem configuration modules to apply to the filesystem.')
eqlNASContainerCfgRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 14, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerCfgRequestId.setStatus('current')
if mibBuilder.loadTexts: eqlNASContainerCfgRequestId.setDescription('The NAS Container configuration request id.')
eqlNASFSScanTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 15), )
if mibBuilder.loadTexts: eqlNASFSScanTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASFSScanTable.setDescription('EqualLogic-Dynamic\n      This table is used to control the FS-Scan throttling on Spartan appliances.')
eqlNASFSScanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 15, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlNASFSScanEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASFSScanEntry.setDescription('The index is composed of:\n       eqlApplianceIndex    - appliance index of the cluster hosting the target FS ')
eqlNASFSScanRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("maintenance", 1), ("off", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASFSScanRate.setStatus('current')
if mibBuilder.loadTexts: eqlNASFSScanRate.setDescription('This field specifies the rate of FS Scan throttling to apply to a Spartan node.')
eqlNASReplicationHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 16), )
if mibBuilder.loadTexts: eqlNASReplicationHistoryTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationHistoryTable.setDescription('EqualLogic-Dynamic\n      TImeoutAll:60')
eqlNASReplicationHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 16, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASReplSitePartnershipId"), (0, "EQLNAS-MIB", "eqlNASReplicationId"), (0, "EQLNAS-MIB", "eqlNASReplicationHistorySampleIndex"))
if mibBuilder.loadTexts: eqlNASReplicationHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationHistoryEntry.setDescription('NAS Replication Historical data.')
eqlNASReplicationHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 16, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationHistorySampleIndex.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationHistorySampleIndex.setDescription('Index into list of replication history data')
eqlNASReplicationHistoryStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationHistoryStartTime.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationHistoryStartTime.setDescription('32 bit binary start time for transfer in seconds from start of Unix epoch')
eqlNASReplicationHistoryEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationHistoryEndTime.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationHistoryEndTime.setDescription('32 bit binary end time for transfer in seconds from start of Unix epoch')
eqlNASReplicationHistoryTransferredMb = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 16, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationHistoryTransferredMb.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationHistoryTransferredMb.setDescription('Megabytes transferred')
eqlNASReplicationHistoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 16, 1, 5), EqlNASReplicationStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationHistoryStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationHistoryStatus.setDescription('transfer status')
eqlNASReplicationHistorySrcContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 16, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 230))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationHistorySrcContainer.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationHistorySrcContainer.setDescription("Name of replication source container (alias 'file system')")
eqlNASReplicationHistoryDestContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 16, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 230))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationHistoryDestContainer.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplicationHistoryDestContainer.setDescription("Name of replication destination container (alias 'file system')")
eqlNASApplianceAntivirusHostTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 17), )
if mibBuilder.loadTexts: eqlNASApplianceAntivirusHostTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceAntivirusHostTable.setDescription('EqualLogic-Dynamic table used to store information of the antivirus hosts for a\nNAS appliance.\n                     TimeoutAll:60')
eqlNASApplianceAntivirusHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 17, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASApplianceAntivirusHostIndex"))
if mibBuilder.loadTexts: eqlNASApplianceAntivirusHostEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceAntivirusHostEntry.setDescription('An entry contains the antivirus host information for a NAS appliance.')
eqlNASApplianceAntivirusHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 17, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlNASApplianceAntivirusHostIndex.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceAntivirusHostIndex.setDescription('This field specifies an index that uniquely identifies the antivirus host\nentry.')
eqlNASApplianceAntivirusHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 17, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceAntivirusHostRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceAntivirusHostRowStatus.setDescription('This field is used to manage the conceptual row entry.')
eqlNASApplianceAntivirusHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 17, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceAntivirusHostName.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceAntivirusHostName.setDescription('Hostname/ip address of the antivirus host. ')
eqlNASApplianceAntivirusHostPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 17, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1344)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceAntivirusHostPortNumber.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceAntivirusHostPortNumber.setDescription('Port number to be used for the antivirus service on the antivirus host. ')
eqlNASApplianceAntivirusHostTransactionState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("configStart", 0), ("configInProgress", 1), ("configCommit", 2), ("configStartCommit", 3))).clone('configStart')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceAntivirusHostTransactionState.setStatus('current')
if mibBuilder.loadTexts: eqlNASApplianceAntivirusHostTransactionState.setDescription('This field denotes the transaction state of the operations on the eqlNASApplianceAntivirusHostTable.')
eqlNASChassisTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 18), )
if mibBuilder.loadTexts: eqlNASChassisTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisTable.setDescription('EqualLogic-Dynamic NAS chassis table.\n                     TimeoutAll:60')
eqlNASChassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 18, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASChassisIndex"))
if mibBuilder.loadTexts: eqlNASChassisEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisEntry.setDescription('An entry (row) containing the NAS chassis information.')
eqlNASChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 18, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlNASChassisIndex.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisIndex.setDescription('The NAS Chassis index.')
eqlNASChassisRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 18, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASChassisRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisRowStatus.setDescription('This field is used to manage the conceptual row entry.')
eqlNASChassisName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 18, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASChassisName.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisName.setDescription('The NAS chassis name.')
eqlNASChassisRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 18, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisRequestId.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisRequestId.setDescription('The NAS Chassis create operation request id.')
eqlNASChassisFileSystemMember = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 18, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisFileSystemMember.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisFileSystemMember.setDescription('The NAS Chassis filesystem participation state.')
eqlNASChassisModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 18, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASChassisModelName.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisModelName.setDescription('The NAS chassis model name.')
eqlNASChassisStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19), )
if mibBuilder.loadTexts: eqlNASChassisStatusTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisStatusTable.setDescription('EqualLogic-Dynamic NAS chassis status table.\n                     TimeoutAll:60')
eqlNASChassisStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASChassisIndex"))
if mibBuilder.loadTexts: eqlNASChassisStatusEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisStatusEntry.setDescription('An entry (row) containing the NAS chassis status.')
class EqlNASChassisComponentStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("optimal", 0), ("not-optimal", 1), ("critical", 2), ("not-available", 3))

class EqlNASChassisACPowerStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("redundant", 0), ("partial", 1), ("not-available", 2))

class EqlNASChassisControllerState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("standby", 0), ("unformatted", 1), ("formatted", 2), ("detached", 3), ("down", 4), ("not-available", 5))

class EqlNASChassisSanType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("iscsi", 0), ("eql", 1), ("fc", 2), ("not-available", 3))

class EqlNASChassisNetworkSpeed(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("one-gb-ethernet", 0), ("ten-gb-ethernet", 1), ("twenty-gb-ethernet", 2), ("one-gb-fibre-channel", 3), ("two-gb-fibre-channel", 4), ("four-gb-fibre-channel", 5), ("eight-gb-fibre-channel", 6), ("not-available", 7))

class EqlNASChassisControllerLocation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("one", 0), ("two", 1), ("irrelevant", 2), ("not-available", 3))

eqlNASChassisOverallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 1), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisOverallStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisOverallStatus.setDescription('The overall NAS chassis status.')
eqlNASChassisChassisTag = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisChassisTag.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisChassisTag.setDescription('The NAS chassis tag.')
eqlNASChassisModel = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisModel.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisModel.setDescription('The NAS chassis model.')
eqlNASChassisSanType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 4), EqlNASChassisSanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisSanType.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisSanType.setDescription('The NAS chassis san type.')
eqlNASChassisOverallControllerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 5), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisOverallControllerStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisOverallControllerStatus.setDescription('The NAS chassis overall controller status.')
eqlNASChassisClientNetworkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 6), EqlNASChassisNetworkSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisClientNetworkSpeed.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisClientNetworkSpeed.setDescription('The lowest network speed among the NAS chassis client network interfaces.')
eqlNASChassisBackplaneNetworkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 7), EqlNASChassisNetworkSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisBackplaneNetworkSpeed.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisBackplaneNetworkSpeed.setDescription('The lowest network speed among the NAS chassis backplane network interfaces.')
eqlNASChassisInternalNetworkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 8), EqlNASChassisNetworkSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisInternalNetworkSpeed.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisInternalNetworkSpeed.setDescription('The lowest network speed among the NAS chassis internal network interfaces.')
eqlNASChassisSanNetworkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 9), EqlNASChassisNetworkSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisSanNetworkSpeed.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisSanNetworkSpeed.setDescription('The lowest network speed among the NAS chassis san network interfaces.')
eqlNASChassisClientNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 10), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisClientNetworkStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisClientNetworkStatus.setDescription('The NAS chassis client network status.')
eqlNASChassisBackplaneNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 11), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisBackplaneNetworkStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisBackplaneNetworkStatus.setDescription('The NAS chassis backplane network status.')
eqlNASChassisInternalNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 12), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisInternalNetworkStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisInternalNetworkStatus.setDescription('The NAS chassis internal network status.')
eqlNASChassisSanNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 13), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisSanNetworkStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisSanNetworkStatus.setDescription('The NAS chassis san network status.')
eqlNASChassisOverallFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 14), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisOverallFanStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisOverallFanStatus.setDescription('The NAS chassis overall fan status.')
eqlNASChassisOverallPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 15), EqlNASChassisACPowerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisOverallPowerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisOverallPowerSupplyStatus.setDescription('The NAS chassis overall power supply status.')
eqlNASChassisFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 2), )
if mibBuilder.loadTexts: eqlNASChassisFanStatusTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisFanStatusTable.setDescription('EqualLogic-Dynamic NAS chassis fan status table.\n                     TimeoutAll:60')
eqlNASChassisFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 2, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASChassisIndex"), (0, "EQLNAS-MIB", "eqlNASChassisFanName"))
if mibBuilder.loadTexts: eqlNASChassisFanStatusEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisFanStatusEntry.setDescription('An entry (row) containing the NAS chassis fan status.')
eqlNASChassisFanName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisFanName.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisFanName.setDescription('The NAS chassis fan name.')
eqlNASChassisFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 2, 1, 2), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisFanStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisFanStatus.setDescription('The NAS chassis fan status.')
eqlNASChassisFanRpm = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisFanRpm.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisFanRpm.setDescription('The NAS Chassis fan RPM.')
eqlNASChassisFanRpmRange = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisFanRpmRange.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisFanRpmRange.setDescription('The NAS Chassis fan RPM range.')
eqlNASChassisPowerSupplyStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 3), )
if mibBuilder.loadTexts: eqlNASChassisPowerSupplyStatusTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisPowerSupplyStatusTable.setDescription('EqualLogic-Dynamic NAS chassis power supply status table.\n                     TimeoutAll:60')
eqlNASChassisPowerSupplyStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 3, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASChassisIndex"), (0, "EQLNAS-MIB", "eqlNASChassisPowerSupplyName"))
if mibBuilder.loadTexts: eqlNASChassisPowerSupplyStatusEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisPowerSupplyStatusEntry.setDescription('An entry (row) containing the NAS chassis power supply status.')
eqlNASChassisPowerSupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisPowerSupplyName.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisPowerSupplyName.setDescription('The NAS chassis power supply name.')
eqlNASChassisPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 3, 1, 2), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisPowerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisPowerSupplyStatus.setDescription('The NAS chassis power supply status.')
eqlNASChassisControllerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20), )
if mibBuilder.loadTexts: eqlNASChassisControllerStatusTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerStatusTable.setDescription('EqualLogic-Dynamic NAS chassis controller status table.\n                     TimeoutAll:60')
eqlNASChassisControllerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASChassisControllerIndex"))
if mibBuilder.loadTexts: eqlNASChassisControllerStatusEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerStatusEntry.setDescription('An entry (row) containing the NAS chassis controller status.')
eqlNASChassisControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerIndex.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerIndex.setDescription('The NAS Chassis controller index.')
eqlNASChassisControllerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 2), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerStatus.setDescription('The NAS Chassis controller status.')
eqlNASChassisControllerState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 3), EqlNASChassisControllerState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerState.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerState.setDescription('The NAS Chassis controller state.')
eqlNASChassisControllerLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 4), EqlNASChassisControllerLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerLocation.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerLocation.setDescription('The NAS Chassis controller location.')
eqlNASChassisControllerAmbientTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 5), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerAmbientTemperatureStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerAmbientTemperatureStatus.setDescription('The NAS Chassis controller ambient temperaure status.')
eqlNASChassisControllerAmbientTemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerAmbientTemperatureValue.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerAmbientTemperatureValue.setDescription('The NAS Chassis controller ambient temperaure value.')
eqlNASChassisControllerSystemControllerId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerSystemControllerId.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerSystemControllerId.setDescription('The NAS Chassis controller system controller id.')
eqlNASChassisControllerBPSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 8), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerBPSStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerBPSStatus.setDescription('The NAS Chassis controller BPS status.')
eqlNASChassisControllerBPSIsAccessible = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerBPSIsAccessible.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerBPSIsAccessible.setDescription('The NAS Chassis controller BPS accessibility.')
eqlNASChassisControllerBPSModel = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerBPSModel.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerBPSModel.setDescription('The NAS Chassis controller BPS model.')
eqlNASChassisControllerBPSCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 11), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerBPSCharge.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerBPSCharge.setDescription('The NAS Chassis controller BPS charge percentage.')
eqlNASChassisControllerCPUOverallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 12), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerCPUOverallStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerCPUOverallStatus.setDescription('The NAS Chassis controller overall CPU status.')
eqlNASChassisControllerCPUCurrentCoresCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerCPUCurrentCoresCount.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerCPUCurrentCoresCount.setDescription('The NAS Chassis controller current CPU cores count.')
eqlNASChassisControllerOverallFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 14), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerOverallFanStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerOverallFanStatus.setDescription('The NAS Chassis controller overall fan status.')
eqlNASChassisControllerOverallLocalDiskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 15), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerOverallLocalDiskStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerOverallLocalDiskStatus.setDescription('The NAS Chassis controller overall local disk status.')
eqlNASChassisControllerOverallRaidControllerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 16), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerOverallRaidControllerStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerOverallRaidControllerStatus.setDescription('The NAS Chassis controller overall raid controller status.')
eqlNASChassisControllerOverallVirtualDiskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 17), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerOverallVirtualDiskStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerOverallVirtualDiskStatus.setDescription('The NAS Chassis controller overall virtual disk status.')
eqlNASChassisControllerMemoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 18), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerMemoryStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerMemoryStatus.setDescription('The NAS Chassis controller memory status.')
eqlNASChassisControllerMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerMemorySize.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerMemorySize.setDescription('The NAS Chassis controller total memory size.')
eqlNASChassisControllerBackplaneNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 20), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerBackplaneNetworkStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerBackplaneNetworkStatus.setDescription('The NAS Chassis controller backplane network status.')
eqlNASChassisControllerBackplaneNetworkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 21), EqlNASChassisNetworkSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerBackplaneNetworkSpeed.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerBackplaneNetworkSpeed.setDescription('The lowest network speed among the NAS chassis backplane network interfaces.')
eqlNASChassisControllerClientNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 22), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerClientNetworkStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerClientNetworkStatus.setDescription('The NAS Chassis controller client network status.')
eqlNASChassisControllerClientNetworkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 23), EqlNASChassisNetworkSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerClientNetworkSpeed.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerClientNetworkSpeed.setDescription('The lowest network speed among the NAS chassis client network interfaces.')
eqlNASChassisControllerInternalNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 24), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerInternalNetworkStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerInternalNetworkStatus.setDescription('The NAS Chassis controller internal network status.')
eqlNASChassisControllerInternalNetworkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 25), EqlNASChassisNetworkSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerInternalNetworkSpeed.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerInternalNetworkSpeed.setDescription('The lowest network speed among the NAS chassis internal network interfaces.')
eqlNASChassisControllerSanNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 26), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerSanNetworkStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerSanNetworkStatus.setDescription('The NAS Chassis controller san network status.')
eqlNASChassisControllerSanNetworkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 27), EqlNASChassisNetworkSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerSanNetworkSpeed.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerSanNetworkSpeed.setDescription('The lowest network speed among the NAS chassis san network interfaces.')
eqlNASChassisControllerOverallPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 28), EqlNASChassisACPowerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerOverallPowerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerOverallPowerSupplyStatus.setDescription('The NAS Chassis controller overall power supply status.')
eqlNASChassisControllerFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 2), )
if mibBuilder.loadTexts: eqlNASChassisControllerFanStatusTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerFanStatusTable.setDescription('EqualLogic-Dynamic NAS chassis controller fan status table.\n                     TimeoutAll:60')
eqlNASChassisControllerFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 2, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASChassisControllerIndex"), (0, "EQLNAS-MIB", "eqlNASChassisControllerFanName"))
if mibBuilder.loadTexts: eqlNASChassisControllerFanStatusEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerFanStatusEntry.setDescription('An entry (row) containing the NAS chassis controller fan status.')
eqlNASChassisControllerFanName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerFanName.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerFanName.setDescription('The NAS chassis controller fan name.')
eqlNASChassisControllerFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 2, 1, 2), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerFanStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerFanStatus.setDescription('The NAS chassis controller fan status.')
eqlNASChassisControllerFanRpm = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerFanRpm.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerFanRpm.setDescription('The NAS chassis controller fan RPM.')
eqlNASChassisControllerFanRpmRange = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerFanRpmRange.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerFanRpmRange.setDescription('The NAS chassis controller fan RPM range.')
eqlNASChassisControllerPowerSupplyStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 3), )
if mibBuilder.loadTexts: eqlNASChassisControllerPowerSupplyStatusTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerPowerSupplyStatusTable.setDescription('EqualLogic-Dynamic NAS chassis controller power supply status table.\n                     TimeoutAll:60')
eqlNASChassisControllerPowerSupplyStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 3, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASChassisControllerIndex"), (0, "EQLNAS-MIB", "eqlNASChassisControllerPowerSupplyName"))
if mibBuilder.loadTexts: eqlNASChassisControllerPowerSupplyStatusEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerPowerSupplyStatusEntry.setDescription('An entry (row) containing the NAS chassis controller power supply status.')
eqlNASChassisControllerPowerSupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerPowerSupplyName.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerPowerSupplyName.setDescription('The NAS chassis controller power supply name.')
eqlNASChassisControllerPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 3, 1, 2), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerPowerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerPowerSupplyStatus.setDescription('The NAS chassis controller power supply status.')
eqlNASChassisControllerDiskStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 4), )
if mibBuilder.loadTexts: eqlNASChassisControllerDiskStatusTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerDiskStatusTable.setDescription('EqualLogic-Dynamic NAS chassis controller physical disk status table.\n                     TimeoutAll:60')
eqlNASChassisControllerDiskStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 4, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASChassisControllerIndex"), (0, "EQLNAS-MIB", "eqlNASChassisControllerDiskName"))
if mibBuilder.loadTexts: eqlNASChassisControllerDiskStatusEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerDiskStatusEntry.setDescription('An entry (row) containing the NAS chassis controller physical disk status.')
eqlNASChassisControllerDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerDiskName.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerDiskName.setDescription('The NAS chassis controller physical disk name.')
eqlNASChassisControllerDiskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 4, 1, 2), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerDiskStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerDiskStatus.setDescription('The NAS chassis controller physical disk status.')
eqlNASChassisControllerNicStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 5), )
if mibBuilder.loadTexts: eqlNASChassisControllerNicStatusTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerNicStatusTable.setDescription('EqualLogic-Dynamic NAS chassis controller nic status table.\n                     TimeoutAll:60')
eqlNASChassisControllerNicStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 5, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASChassisControllerIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceNetworkType"), (0, "EQLNAS-MIB", "eqlNASChassisControllerNicName"))
if mibBuilder.loadTexts: eqlNASChassisControllerNicStatusEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerNicStatusEntry.setDescription('An entry (row) containing the NAS chassis controller nic status.')
eqlNASChassisControllerNicName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerNicName.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerNicName.setDescription('The NAS chassis controller nic name.')
eqlNASChassisControllerNicState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("not-available", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerNicState.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerNicState.setDescription('The NAS chassis controller nic state.')
eqlNASChassisControllerNicSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 5, 1, 3), EqlNASChassisNetworkSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerNicSpeed.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerNicSpeed.setDescription('The NAS chassis controller nic speed.')
eqlNASChassisControllerNicSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerNicSlot.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerNicSlot.setDescription('The NAS chassis controller nic slot.')
eqlNASChassisControllerNicPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerNicPort.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerNicPort.setDescription('The NAS chassis controller nic port.')
eqlNASChassisControllerNicDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("full", 0), ("half", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerNicDuplex.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerNicDuplex.setDescription('The NAS chassis controller nic duplex mode.')
eqlNASChassisControllerNicFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerNicFlowControl.setStatus('current')
if mibBuilder.loadTexts: eqlNASChassisControllerNicFlowControl.setDescription('The NAS chassis controller nic flow control state.')
eqlNASDiagsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 21), )
if mibBuilder.loadTexts: eqlNASDiagsTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASDiagsTable.setDescription('EqualLogic-Dynamic table controlling the NAS diags.')
eqlNASDiagsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 21, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlNASDiagsEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASDiagsEntry.setDescription('An entry (row) containing the diags information.')
eqlNASDiagsStart = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("general", 1), ("file", 2), ("network", 3), ("performance", 4), ("clientconnectivity", 5), ("fileaccessibility", 6), ("protocolslog", 7), ("logs", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASDiagsStart.setStatus('current')
if mibBuilder.loadTexts: eqlNASDiagsStart.setDescription('This field selects the diagnostic to start.')
eqlNASDiagsCaseNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 21, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASDiagsCaseNumber.setStatus('current')
if mibBuilder.loadTexts: eqlNASDiagsCaseNumber.setDescription('This field holds the OPTIONAL Dell Support case number for the\n                     NAS diagnostics.')
eqlNASDiagsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("running", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASDiagsStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASDiagsStatus.setDescription('This field holds the status of the NAS diagnostics\n                     operation.')
eqlNASClientStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 22), )
if mibBuilder.loadTexts: eqlNASClientStaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASClientStaticRouteTable.setDescription('EqualLogic-Dynamic table controlling the NAS client static routes. The static \n                    route entries are used to route the CLIENT traffic from the cluster members to\n                    gateways on the CLIENT network.')
eqlNASClientStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 22, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceNetworkID"), (0, "EQLNAS-MIB", "eqlNASClientStaticRouteNetworkAddrType"), (0, "EQLNAS-MIB", "eqlNASClientStaticRouteNetworkAddr"), (0, "EQLNAS-MIB", "eqlNASClientStaticRouteNetworkMaskType"), (0, "EQLNAS-MIB", "eqlNASClientStaticRouteNetworkMask"))
if mibBuilder.loadTexts: eqlNASClientStaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASClientStaticRouteEntry.setDescription('An entry (row) containing the NAS static route information for a subnet of the client network.')
eqlNASClientStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 22, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClientStaticRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASClientStaticRouteRowStatus.setDescription('SNMP Row Status')
eqlNASClientStaticRouteNetworkAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 22, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClientStaticRouteNetworkAddrType.setStatus('current')
if mibBuilder.loadTexts: eqlNASClientStaticRouteNetworkAddrType.setDescription('This field specifies the type (v4/v6) for the network address of the\n                    static route.')
eqlNASClientStaticRouteNetworkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 22, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClientStaticRouteNetworkAddr.setStatus('current')
if mibBuilder.loadTexts: eqlNASClientStaticRouteNetworkAddr.setDescription('This field contains the network IP address for the static route\n                    (e.g. 200.200.200.0).')
eqlNASClientStaticRouteNetworkMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 22, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClientStaticRouteNetworkMaskType.setStatus('current')
if mibBuilder.loadTexts: eqlNASClientStaticRouteNetworkMaskType.setDescription('This field specifies the type (v4/v6) for the network mask of the\n                    static route.The IP address of the network mask is assumed to be the \n                    same as that of the network address.')
eqlNASClientStaticRouteNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 22, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClientStaticRouteNetworkMask.setStatus('current')
if mibBuilder.loadTexts: eqlNASClientStaticRouteNetworkMask.setDescription('This field contains the network mask for the static route \n                    (e.g. 255.255.255.0).')
eqlNASClientStaticRouteGatewayAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 22, 1, 6), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClientStaticRouteGatewayAddrType.setStatus('current')
if mibBuilder.loadTexts: eqlNASClientStaticRouteGatewayAddrType.setDescription('This field specifies the type (v4/v6) of the gateway IP address.')
eqlNASClientStaticRouteGatewayAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 22, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClientStaticRouteGatewayAddr.setStatus('current')
if mibBuilder.loadTexts: eqlNASClientStaticRouteGatewayAddr.setDescription('This field contains the gateway IP address for the static route\n                    (e.g. 10.127.20.30).')
eqlNASClusterUpdateTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 23), )
if mibBuilder.loadTexts: eqlNASClusterUpdateTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASClusterUpdateTable.setDescription('EqualLogic-Dynamic(semi) table to update NAS Cluster Firmware.\n                     TimeoutAll:60')
eqlNASClusterUpdateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 23, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlNASClusterUpdateEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASClusterUpdateEntry.setDescription('An entry (row) containing the NAS Cluster firmware update information.')
eqlNASClusterUpdateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 23, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClusterUpdateRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASClusterUpdateRowStatus.setDescription('Rowstatus variable used to manage this conceptual row.')
eqlNASClusterUpdateFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 23, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 261))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClusterUpdateFilename.setStatus('current')
if mibBuilder.loadTexts: eqlNASClusterUpdateFilename.setDescription('This field holds the NAS Cluster firmware update script filename.')
eqlNASClusterUpdateEQLGroupMPV = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 23, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClusterUpdateEQLGroupMPV.setStatus('current')
if mibBuilder.loadTexts: eqlNASClusterUpdateEQLGroupMPV.setDescription('The Management Protocol Version (MPV) of the EQL Group.')
eqlNASClusterUpdateClusterMPV = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 23, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClusterUpdateClusterMPV.setStatus('current')
if mibBuilder.loadTexts: eqlNASClusterUpdateClusterMPV.setDescription('The Management Protocol Version (MPV) of the NAS Appliance Cluster.')
eqlNASClusterUpdateEQLGroupCurrentCompLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 23, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClusterUpdateEQLGroupCurrentCompLevel.setStatus('current')
if mibBuilder.loadTexts: eqlNASClusterUpdateEQLGroupCurrentCompLevel.setDescription('This field represents the current compatibility level of the EQL group.')
eqlNASClusterUpdateRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 23, 1, 6), Counter64()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClusterUpdateRequestId.setStatus('current')
if mibBuilder.loadTexts: eqlNASClusterUpdateRequestId.setDescription('This field represents the the NAS cluster update operation request identifier.')
eqlNASClusterInfoTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 24), )
if mibBuilder.loadTexts: eqlNASClusterInfoTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASClusterInfoTable.setDescription("EqualLogic-Dynamic(semi) table used to get local or remote NAS cluster's id and certificate\n                     TimeoutAll:60")
eqlNASClusterInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 24, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASClusterInfoSiteType"), (0, "EQLVOLUME-MIB", "eqliscsiVolumeReplSiteIndex"), (0, "EQLNAS-MIB", "eqlNASClusterInfoSegmentId"))
if mibBuilder.loadTexts: eqlNASClusterInfoEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASClusterInfoEntry.setDescription('An entry contains the cluster Id and certificate')
eqlNASClusterInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 24, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClusterInfoRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASClusterInfoRowStatus.setDescription('This field is used indicate the status of this entry.')
eqlNASClusterInfoSiteType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2))))
if mibBuilder.loadTexts: eqlNASClusterInfoSiteType.setStatus('current')
if mibBuilder.loadTexts: eqlNASClusterInfoSiteType.setDescription('This field specifies whether the Certificate request is for local or\n                     from remote replication partner site.')
eqlNASClusterInfoSegmentId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 24, 1, 3), Unsigned32())
if mibBuilder.loadTexts: eqlNASClusterInfoSegmentId.setStatus('current')
if mibBuilder.loadTexts: eqlNASClusterInfoSegmentId.setDescription('Index into list Certificate data')
eqlNASClusterInfoSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 24, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClusterInfoSegmentSize.setStatus('current')
if mibBuilder.loadTexts: eqlNASClusterInfoSegmentSize.setDescription('Size of the Certificate data segment')
eqlNASClusterInfoMoreSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 24, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClusterInfoMoreSegment.setStatus('current')
if mibBuilder.loadTexts: eqlNASClusterInfoMoreSegment.setDescription('True returned if there is are more segment to be feteched for \n                    the certificate')
eqlNASClusterInfoCertificate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 24, 1, 6), CertificateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClusterInfoCertificate.setStatus('current')
if mibBuilder.loadTexts: eqlNASClusterInfoCertificate.setDescription('String containing RSA certificate for local cluster.')
eqlNASClusterInfoClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 24, 1, 7), ClusterIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClusterInfoClusterId.setStatus('current')
if mibBuilder.loadTexts: eqlNASClusterInfoClusterId.setDescription('String containing local cluster Id. It should be unique within the network.\n                     It is generated by IDC code.')
eqlNASReplPartnerClusterIdMapTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 25), )
if mibBuilder.loadTexts: eqlNASReplPartnerClusterIdMapTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerClusterIdMapTable.setDescription('EqualLogic-Dynamic\n      This table is used to get the NAS Cluster Id for the given remote NAS SAN VIP.')
eqlNASReplPartnerClusterIdMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 25, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASReplPartnerClusterIdMapSanVIPType"), (0, "EQLNAS-MIB", "eqlNASReplPartnerClusterIdMapSanVIP"))
if mibBuilder.loadTexts: eqlNASReplPartnerClusterIdMapEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerClusterIdMapEntry.setDescription('')
eqlNASReplPartnerClusterIdMapSanVIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 25, 1, 1), InetAddressType())
if mibBuilder.loadTexts: eqlNASReplPartnerClusterIdMapSanVIPType.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerClusterIdMapSanVIPType.setDescription('The SAN VIP type of the cluster.')
eqlNASReplPartnerClusterIdMapSanVIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 25, 1, 2), InetAddress())
if mibBuilder.loadTexts: eqlNASReplPartnerClusterIdMapSanVIP.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerClusterIdMapSanVIP.setDescription('The SAN VIP address of the cluster.')
eqlNASReplPartnerClusterIdMapClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 25, 1, 3), ClusterIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplPartnerClusterIdMapClusterId.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerClusterIdMapClusterId.setDescription('Cluster Id, a unique identifier of the cluster assingned at the \n       time of cluster creation.')
eqlNASReplPartnerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 26), )
if mibBuilder.loadTexts: eqlNASReplPartnerConfigTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerConfigTable.setDescription('EqualLogic-Dynamic \n                     This table is used to configure NAS replication partnership \n                     (Trust) with a remote NAS cluster.\n                     TimeoutAll:60')
eqlNASReplPartnerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 26, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASClusterInfoClusterId"), (0, "EQLNAS-MIB", "eqlNASClusterInfoSegmentId"))
if mibBuilder.loadTexts: eqlNASReplPartnerConfigEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerConfigEntry.setDescription('An entry contains some of the information needed to create \n                     replication partnership with a remote NAS cluster. \n                     The combination of index and entry provides the information \n                     needed to create partnership/trust with the remote cluster.')
eqlNASReplPartnerConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 26, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplPartnerConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerConfigRowStatus.setDescription('This field is used indicate the status of this entry.')
eqlNASReplPartnerConfigCertificate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 26, 1, 2), CertificateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplPartnerConfigCertificate.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerConfigCertificate.setDescription('String containing all or a portion of the certificate \n                     used in authenticating the remote cluster.')
eqlNASReplPartnerConfigInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 26, 1, 3), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplPartnerConfigInetAddrType.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerConfigInetAddrType.setDescription('The address type for the RemoteCluster SAN VIP')
eqlNASReplPartnerConfigInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 26, 1, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplPartnerConfigInetAddr.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplPartnerConfigInetAddr.setDescription('The RemoteCluster SAN VIP')
eqlNASReplTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27), )
if mibBuilder.loadTexts: eqlNASReplTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplTable.setDescription('EqualLogic-Dynamic\n     TimeoutAll:60\n     This table is used to configure and monitor NAS replication relationships \n     in FluidFS versions 3.0 and later. Prior versions used eqlNASReplicationTable \n     for that purpose.')
class EqlNASReplicationError(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("none", 0), ("disconnected", 1), ("internal", 2), ("fs-down", 3), ("config", 4), ("not-sec", 5), ("sec-busy", 6), ("sec-fs-down", 7), ("versions-dont-match", 8), ("no-space", 9), ("sec-cur-not-empty", 10), ("no-base-found", 11), ("pri-vol-reclaim", 12), ("sec-vol-reclaim", 13), ("fs-pri-not-optimal", 14), ("fs-sec-not-optimal", 15), ("fs-pri-not-available-threads", 16), ("fs-sec-not-available-threads", 17), ("jumbo-frame", 18), ("dest-repl-disabled", 19), ("snap-clone-base", 20))

class EqlNASReplicationRole(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("source", 1), ("destination", 2))

eqlNASReplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASReplSiteRemoteClusterId"), (0, "EQLNAS-MIB", "eqlNASReplRemoteFSId"))
if mibBuilder.loadTexts: eqlNASReplEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplEntry.setDescription('')
eqlNASReplRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplRowStatus.setDescription('The status of the row')
eqlNASReplRemoteFSId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplRemoteFSId.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplRemoteFSId.setDescription('Unique Identifier for the remote container. This is the FSid.')
eqlNASReplVolumeReplSiteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 3), SiteIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplVolumeReplSiteIndex.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplVolumeReplSiteIndex.setDescription('The value of eqliscsiVolumeReplSiteIndex to index into \n                     eqliscsiVolumeReplSiteTable.')
eqlNASReplRemoteClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplRemoteClusterName.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplRemoteClusterName.setDescription('This field specifies the remote cluster name, which is the \n                     eqlApplianceName of the remote cluster.')
eqlNASReplRemoteFSName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 230))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplRemoteFSName.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplRemoteFSName.setDescription('Name used to identify the remote NAS Container. Contains \n                     only letters, digits and underscores. Must begin with either \n                     letter or an underscore. ')
eqlNASReplAchievedRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplAchievedRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplAchievedRecoveryTime.setDescription('This field specifies the date/time of the last recovery snapshot\n                     that has been copied. Time is represented as the time in seconds \n                     since 00:00:00 UTC, 1970-01-01.')
eqlNASReplNextRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplNextRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplNextRecoveryTime.setDescription('This field specifies the date/time of the next recovery snapshot\n                     that will be copied. Time is represented as the time in seconds \n                     since 00:00:00 UTC, 1970-01-01.')
eqlNASReplTargetRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplTargetRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplTargetRecoveryTime.setDescription('This field specifies the date/time of the target/goal for\n                     next recovery snapshot to be copied. This is N/A to EQL.\n                     Time is represented as the time in seconds since 00:00:00 UTC, \n                     1970-01-01.')
eqlNASReplTransferredPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 9), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplTransferredPercent.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplTransferredPercent.setDescription('Provides a percent transferred for the current replication process.')
eqlNASReplTransferredMB = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplTransferredMB.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplTransferredMB.setDescription('Provides data transferred (in MB) for the current replication process.')
eqlNASReplStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 11), EqlNASReplicationStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplStatus.setDescription('The status of this replication relationship.')
eqlNASReplAction = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112))).clone(namedValues=NamedValues(("none", 0), ("replicate", 1), ("pause", 2), ("resume", 3), ("cancel", 4), ("demote", 5), ("promote", 6), ("force-promote", 7), ("delete", 8), ("force-delete", 9), ("outbound-delete", 100), ("outbound-force-delete", 101), ("inbound-delete", 102), ("inbound-promote", 103), ("inbound-promote-restore-cfg", 104), ("inbound-promote-keep-demote", 105), ("inbound-promote-keep-demote-restore-cfg", 106), ("inbound-delete-failback", 107), ("inbound-delete-failback-restore-cfg", 108), ("restore-cfg", 109), ("inbound-pause", 110), ("inbound-resume", 111), ("internal-promote", 112)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplAction.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplAction.setDescription('Use this column to perform actions on this replication relationship.')
eqlNASReplSecsToComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplSecsToComplete.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplSecsToComplete.setDescription('Seconds left in completion of the current replication process.')
eqlNASReplError = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 14), EqlNASReplicationError()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplError.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplError.setDescription('Error encountered during replication.')
eqlNASReplRole = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 15), EqlNASReplicationRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplRole.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplRole.setDescription('The role(src/dest) of this container in the relication relationship.')
eqlNASReplCurrentXferRateKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplCurrentXferRateKbps.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplCurrentXferRateKbps.setDescription('The current rate of data transfer(kbps) for the replication under \n    progress.')
eqlNASQuotaUsageTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 7), )
if mibBuilder.loadTexts: eqlNASQuotaUsageTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASQuotaUsageTable.setDescription('EqualLogic-Dynamic quota Table\n                     This table contains a list of quota usages associated with the associated container.\n                     TimeoutAll:60')
eqlNASQuotaUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 7, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASQuotaUsageTargetType"), (0, "EQLNAS-MIB", "eqlNASQuotaUsageTargetName"))
if mibBuilder.loadTexts: eqlNASQuotaUsageEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASQuotaUsageEntry.setDescription('An entry (row) containing quota info.')
eqlNASQuotaUsageRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 7, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASQuotaUsageRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASQuotaUsageRowStatus.setDescription('The rowstatus....')
eqlNASQuotaUsageTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unused", 0), ("allofgroup", 1), ("anyuseringroup", 2), ("user", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASQuotaUsageTargetType.setStatus('current')
if mibBuilder.loadTexts: eqlNASQuotaUsageTargetType.setDescription('Type of target for this quota definition row')
eqlNASQuotaUsageTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 129))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASQuotaUsageTargetName.setStatus('current')
if mibBuilder.loadTexts: eqlNASQuotaUsageTargetName.setDescription('The name of the user or group as indicated by the target type. AD groups can be 129 bytes ')
eqlNASQuotaUsageMB = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASQuotaUsageMB.setStatus('current')
if mibBuilder.loadTexts: eqlNASQuotaUsageMB.setDescription('This field specifies the amount of space in MB currently in use by targetname.')
eqlNASGroupQuotaEffectiveRuleTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 8), )
if mibBuilder.loadTexts: eqlNASGroupQuotaEffectiveRuleTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASGroupQuotaEffectiveRuleTable.setDescription('EqualLogic-Dynamic quota Table\n                     This table contains a list of group quota effective rules associated with the associated container.\n                     TimeoutAll:60')
eqlNASGroupQuotaEffectiveRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 8, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASGroupQuotaEffectiveRuleTargetName"))
if mibBuilder.loadTexts: eqlNASGroupQuotaEffectiveRuleEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASGroupQuotaEffectiveRuleEntry.setDescription('An entry (row) containing quota info.')
eqlNASGroupQuotaEffectiveRuleTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 8, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 129))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASGroupQuotaEffectiveRuleTargetName.setStatus('current')
if mibBuilder.loadTexts: eqlNASGroupQuotaEffectiveRuleTargetName.setDescription('The name of the group. AD groups can be 129 bytes ')
eqlNASGroupQuotaEffectiveRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 8, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASGroupQuotaEffectiveRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASGroupQuotaEffectiveRuleRowStatus.setDescription('The rowstatus....')
eqlNASGroupQuotaEffectiveRuleSoftLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASGroupQuotaEffectiveRuleSoftLimit.setStatus('current')
if mibBuilder.loadTexts: eqlNASGroupQuotaEffectiveRuleSoftLimit.setDescription('This is the amount of used space that triggers user alerts')
eqlNASGroupQuotaEffectiveRuleHardLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASGroupQuotaEffectiveRuleHardLimit.setStatus('current')
if mibBuilder.loadTexts: eqlNASGroupQuotaEffectiveRuleHardLimit.setDescription('This field specifies the amount of space in MB at which writes are disallowed.')
eqlNASGroupQuotaEffectiveRuleSoftLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 8, 1, 5), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASGroupQuotaEffectiveRuleSoftLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: eqlNASGroupQuotaEffectiveRuleSoftLimitEnabled.setDescription('Specifies whether alerts based on softlimit are enabled.')
eqlNASGroupQuotaEffectiveRuleHardLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 8, 1, 6), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASGroupQuotaEffectiveRuleHardLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: eqlNASGroupQuotaEffectiveRuleHardLimitEnabled.setDescription('This field specifies whether hard limit is enforced')
eqlNASUserQuotaEffectiveRuleTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9), )
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleTable.setDescription('EqualLogic-Dynamic quota Table\n                     This table contains a list of user quota effective rules associated with the associated container.\n                     TimeoutAll:60')
eqlNASUserQuotaEffectiveRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASUserQuotaEffectiveRuleTargetName"))
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleEntry.setDescription('An entry (row) containing quota info.')
eqlNASUserQuotaEffectiveRuleTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 129))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleTargetName.setStatus('current')
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleTargetName.setDescription('The name of the user.')
eqlNASUserQuotaEffectiveRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleRowStatus.setDescription('The rowstatus....')
eqlNASUserQuotaEffectiveRuleUserSoftLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleUserSoftLimit.setStatus('current')
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleUserSoftLimit.setDescription('This is the amount of used space that triggers user alerts')
eqlNASUserQuotaEffectiveRuleUserHardLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleUserHardLimit.setStatus('current')
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleUserHardLimit.setDescription('This field specifies the amount of space in MB at which writes are disallowed.')
eqlNASUserQuotaEffectiveRuleGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 129))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleGroupName.setStatus('current')
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleGroupName.setDescription('The name of the primary group of the user')
eqlNASUserQuotaEffectiveRuleGroupSoftLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleGroupSoftLimit.setStatus('current')
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleGroupSoftLimit.setDescription("This is the amount of used space that triggers user alerts based on primary group's warn level")
eqlNASUserQuotaEffectiveRuleGroupHardLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleGroupHardLimit.setStatus('current')
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleGroupHardLimit.setDescription("This field specifies the amount of space in MB at which writes are disallowed based on primary group's hard limit.")
eqlNASUserQuotaEffectiveRuleUserSoftLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9, 1, 8), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleUserSoftLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleUserSoftLimitEnabled.setDescription('Specifies whether alerts based on user softlimit are enabled.')
eqlNASUserQuotaEffectiveRuleUserHardLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9, 1, 9), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleUserHardLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleUserHardLimitEnabled.setDescription('This field specifies whether user hard limit is enforced')
eqlNASUserQuotaEffectiveRuleGroupSoftLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9, 1, 10), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleGroupSoftLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleGroupSoftLimitEnabled.setDescription("Specifies whether alerts based on primary group's softlimit are enabled.")
eqlNASUserQuotaEffectiveRuleGroupHardLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9, 1, 11), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleGroupHardLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleGroupHardLimitEnabled.setDescription("This field specifies whether primary group's hard limit is enforced")
eqlNASConfigStateTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 28), )
if mibBuilder.loadTexts: eqlNASConfigStateTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASConfigStateTable.setDescription('EqualLogic-Dynamic table controlling the NAS cluster configuration state.')
eqlNASConfigStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 28, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlNASConfigStateEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASConfigStateEntry.setDescription('An entry (row) containing the NAS Cluster configuration state information.')
eqlNASConfigStateConfigFinished = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 28, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASConfigStateConfigFinished.setStatus('current')
if mibBuilder.loadTexts: eqlNASConfigStateConfigFinished.setDescription('True if NAS Cluster configuration is completed.')
eqlNASConfigStateHardwareReplaceInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 28, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASConfigStateHardwareReplaceInProgress.setStatus('current')
if mibBuilder.loadTexts: eqlNASConfigStateHardwareReplaceInProgress.setDescription('True if NAS Cluster hardware replacement is in progress.')
eqlNASClientTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 29), )
if mibBuilder.loadTexts: eqlNASClientTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASClientTable.setDescription('EqualLogic-Dynamic \n                     This table contains NAS Client information.\n                     TimeoutAll:60')
eqlNASClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 29, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASClientNodeIndex"), (0, "EQLNAS-MIB", "eqlNASClientIPAddressType"), (0, "EQLNAS-MIB", "eqlNASClientIPAddress"), (0, "EQLNAS-MIB", "eqlNASClientUserName"), (0, "EQLNAS-MIB", "eqlNASClientProtocol"))
if mibBuilder.loadTexts: eqlNASClientEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASClientEntry.setDescription('An entry (row) containing NAS client information.')
eqlNASClientNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 29, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClientNodeIndex.setStatus('current')
if mibBuilder.loadTexts: eqlNASClientNodeIndex.setDescription('NAS client node index.')
eqlNASClientIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 29, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClientIPAddressType.setStatus('current')
if mibBuilder.loadTexts: eqlNASClientIPAddressType.setDescription('This field specifies the type of address (v4/v6) of this IP address entry.')
eqlNASClientIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 29, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClientIPAddress.setStatus('current')
if mibBuilder.loadTexts: eqlNASClientIPAddress.setDescription('NAS client IPv4 address.')
eqlNASClientUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 29, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 85))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClientUserName.setStatus('current')
if mibBuilder.loadTexts: eqlNASClientUserName.setDescription('NAS client user name.')
eqlNASClientProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 29, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("cifs", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClientProtocol.setStatus('current')
if mibBuilder.loadTexts: eqlNASClientProtocol.setDescription('NAS client protocol.')
eqlNASClientConnectedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 29, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClientConnectedTime.setStatus('current')
if mibBuilder.loadTexts: eqlNASClientConnectedTime.setDescription('The time in seconds that has elapsed since this client connection was first\n                     established with the NAS controller.')
eqlNASClientIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 29, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClientIdleTime.setStatus('current')
if mibBuilder.loadTexts: eqlNASClientIdleTime.setDescription('The time in seconds that has elapsed since this client connection is idle.')
eqlNASClientNumOpenFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 29, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClientNumOpenFiles.setStatus('current')
if mibBuilder.loadTexts: eqlNASClientNumOpenFiles.setDescription('The number of open files from this client connection.')
eqlNASClientIsGuest = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 29, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClientIsGuest.setStatus('current')
if mibBuilder.loadTexts: eqlNASClientIsGuest.setDescription('True if the client initiating this connection is a guest.')
eqlNASStatsClusterTrafficRateTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30), )
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateTable.setDescription('EqualLogic-Dynamic\n                     This table contains NAS traffic rate statistics for the NAS cluster.\n                     TimeoutAll:60')
eqlNASStatsClusterTrafficRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateEntry.setDescription('An entry (row) containing peristent NAS cluster traffic rate statistics.')
eqlNASStatsClusterTrafficRateTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateTimestamp.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateTimestamp.setDescription('This field specifies the date/time when the statistics were collected.\n                     Time is represented as the time in seconds since 00:00:00 UTC, 1970-01-01.')
eqlNASStatsClusterTrafficRateNfsReadMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNfsReadMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNfsReadMBsPerSec.setDescription('The number of MBs read per second via NFS per cluster.')
eqlNASStatsClusterTrafficRateNfsWriteMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNfsWriteMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNfsWriteMBsPerSec.setDescription('The number of MBs written per second via NFS per cluster.')
eqlNASStatsClusterTrafficRateNdmpReadMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNdmpReadMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNdmpReadMBsPerSec.setDescription('The number of MBs read per second via NDMP per cluster.')
eqlNASStatsClusterTrafficRateNdmpWriteMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNdmpWriteMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNdmpWriteMBsPerSec.setDescription('The number of MBs written per second via NDMP per cluster.')
eqlNASStatsClusterTrafficRateCifsReadMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateCifsReadMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateCifsReadMBsPerSec.setDescription('The number of MBs read per second via CIFS per cluster.')
eqlNASStatsClusterTrafficRateCifsWriteMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateCifsWriteMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateCifsWriteMBsPerSec.setDescription('The number of MBs written per second via CIFS per second per cluster.')
eqlNASStatsClusterTrafficRateReplicationReadMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateReplicationReadMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateReplicationReadMBsPerSec.setDescription('The number of replication MBs read per second per cluster.')
eqlNASStatsClusterTrafficRateReplicationWriteMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateReplicationWriteMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateReplicationWriteMBsPerSec.setDescription('The number of replication MBs written per second per cluster.')
eqlNASStatsClusterTrafficRateStorageSubSystemReadMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateStorageSubSystemReadMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateStorageSubSystemReadMBsPerSec.setDescription('The number of storage subsystem MBs read per second per cluster.')
eqlNASStatsClusterTrafficRateStorageSubSystemWriteMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateStorageSubSystemWriteMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateStorageSubSystemWriteMBsPerSec.setDescription('The number of storage subsystem MBs written per second per cluster.')
eqlNASStatsClusterTrafficRateNetworkOverheadReadMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNetworkOverheadReadMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNetworkOverheadReadMBsPerSec.setDescription('The number of network overhead MBs read per second per cluster.')
eqlNASStatsClusterTrafficRateNetworkOverheadWriteMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNetworkOverheadWriteMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNetworkOverheadWriteMBsPerSec.setDescription('The number of network overhead MBs written per second per cluster.')
eqlNASStatsClusterTrafficRateNetworkPacketDropsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNetworkPacketDropsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNetworkPacketDropsPerSec.setDescription('The number of network packet drops per second per cluster.')
eqlNASStatsClusterTrafficRateNfsIOPSRead = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNfsIOPSRead.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNfsIOPSRead.setDescription('The number of NFS IO read operations per second per cluster.')
eqlNASStatsClusterTrafficRateNfsIOPSWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNfsIOPSWrite.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNfsIOPSWrite.setDescription('The number of NFS IO write operations per second per cluster.')
eqlNASStatsClusterTrafficRateNfsIOPSOther = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNfsIOPSOther.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNfsIOPSOther.setDescription('The number of NFS IO other operations per second per cluster.')
eqlNASStatsClusterTrafficRateCifsIOPSRead = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateCifsIOPSRead.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateCifsIOPSRead.setDescription('The number of CIFS IO read operations per second per cluster.')
eqlNASStatsClusterTrafficRateCifsIOPSWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateCifsIOPSWrite.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateCifsIOPSWrite.setDescription('The number of CIFS IO write operations per second per cluster.')
eqlNASStatsClusterTrafficRateCifsIOPSOther = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateCifsIOPSOther.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateCifsIOPSOther.setDescription('The number of CIFS IO other operations per second per cluster.')
eqlNASStatsClusterTrafficRateTotalPrimaryMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateTotalPrimaryMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateTotalPrimaryMBsPerSec.setDescription('The total number of primary MBs per second per cluster.')
eqlNASStatsClusterTrafficRateTotalSecondaryMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateTotalSecondaryMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateTotalSecondaryMBsPerSec.setDescription('The total number of secondary MBs per second per cluster.')
eqlNASStatsControllerTrafficRateTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31), )
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateTable.setDescription('EqualLogic-Dynamic\n                     This table contains NAS traffic rate statistics for the NAS controller.\n                     TimeoutAll:60')
eqlNASStatsControllerTrafficRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASStatsControllerTrafficRateIndex"))
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateEntry.setDescription('An entry (row) containing NAS controller traffic rate statistics.')
eqlNASStatsControllerTrafficRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateIndex.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateIndex.setDescription('NAS controller index.')
eqlNASStatsControllerTrafficRateTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateTimestamp.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateTimestamp.setDescription('This field specifies the date/time when the statistics were collected.\n                     Time is represented as the time in seconds since 00:00:00 UTC, 1970-01-01.')
eqlNASStatsControllerTrafficRateNfsReadMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNfsReadMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNfsReadMBsPerSec.setDescription('The number of MBs read per second via NFS per controller.')
eqlNASStatsControllerTrafficRateNfsWriteMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNfsWriteMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNfsWriteMBsPerSec.setDescription('The number of MBs written per second via NFS per controller.')
eqlNASStatsControllerTrafficRateNdmpReadMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNdmpReadMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNdmpReadMBsPerSec.setDescription('The number of MBs read per second via NDMP per controller.')
eqlNASStatsControllerTrafficRateNdmpWriteMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNdmpWriteMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNdmpWriteMBsPerSec.setDescription('The number of MBs written per second via NDMP per controller.')
eqlNASStatsControllerTrafficRateCifsReadMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateCifsReadMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateCifsReadMBsPerSec.setDescription('The number of MBs read per second via CIFS per controller.')
eqlNASStatsControllerTrafficRateCifsWriteMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateCifsWriteMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateCifsWriteMBsPerSec.setDescription('The number of MBs written per second via CIFS per controller')
eqlNASStatsControllerTrafficRateReplicationReadMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateReplicationReadMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateReplicationReadMBsPerSec.setDescription('The number of replication MBs read per second per controller.')
eqlNASStatsControllerTrafficRateReplicationWriteMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateReplicationWriteMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateReplicationWriteMBsPerSec.setDescription('The number of replication MBs written per second per controller.')
eqlNASStatsControllerTrafficRateStorageSubSystemReadMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateStorageSubSystemReadMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateStorageSubSystemReadMBsPerSec.setDescription('The number of storage subsytem MBs read per second per controller.')
eqlNASStatsControllerTrafficRateStorageSubSystemWriteMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateStorageSubSystemWriteMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateStorageSubSystemWriteMBsPerSec.setDescription('The number of storage subsystem MBs written per second per controller.')
eqlNASStatsControllerTrafficRateNetworkOverheadReadMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNetworkOverheadReadMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNetworkOverheadReadMBsPerSec.setDescription('The number of network overhead MBs per second per controller.')
eqlNASStatsControllerTrafficRateNetworkOverheadWriteMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNetworkOverheadWriteMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNetworkOverheadWriteMBsPerSec.setDescription('The number of network overhead MBs per second per controller.')
eqlNASStatsControllerTrafficRateNetworkPacketDropsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNetworkPacketDropsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNetworkPacketDropsPerSec.setDescription('The number of network packet drops per second per controller.')
eqlNASStatsControllerTrafficRateNfsIOPSRead = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNfsIOPSRead.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNfsIOPSRead.setDescription('The number of NFS IO read operations per second per controller.')
eqlNASStatsControllerTrafficRateNfsIOPSWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNfsIOPSWrite.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNfsIOPSWrite.setDescription('The number of NFS IO write operations per second per controller.')
eqlNASStatsControllerTrafficRateNfsIOPSOther = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNfsIOPSOther.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNfsIOPSOther.setDescription('The number of NFS IO other operations per second per controller.')
eqlNASStatsControllerTrafficRateCifsIOPSRead = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateCifsIOPSRead.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateCifsIOPSRead.setDescription('The number of CIFS IO read operations per second per controller.')
eqlNASStatsControllerTrafficRateCifsIOPSWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateCifsIOPSWrite.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateCifsIOPSWrite.setDescription('The number of CIFS IO write operations per second per controller.')
eqlNASStatsControllerTrafficRateCifsIOPSOther = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateCifsIOPSOther.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateCifsIOPSOther.setDescription('The number of CIFS IO other operations per second per controller.')
eqlNASStatsControllerTrafficRateTotalPrimaryMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateTotalPrimaryMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateTotalPrimaryMBsPerSec.setDescription('The total primary MBs per second per controller.')
eqlNASStatsControllerTrafficRateTotalPrimaryMBsPerSecToAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateTotalPrimaryMBsPerSecToAverage.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateTotalPrimaryMBsPerSecToAverage.setDescription('The total primary MBs per second average per controller.')
eqlNASStatsControllerTrafficRateTotalSecondaryMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateTotalSecondaryMBsPerSec.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateTotalSecondaryMBsPerSec.setDescription('The total secondary MBs per second per controller.')
eqlNASStatsControllerLoadBalancingTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 2), )
if mibBuilder.loadTexts: eqlNASStatsControllerLoadBalancingTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerLoadBalancingTable.setDescription('EqualLogic-Dynamic \n                     NAS controller load balancing statistics table.\n                     TimeoutAll:60')
eqlNASStatsControllerLoadBalancingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 2, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASStatsControllerLoadBalancingIndex"))
if mibBuilder.loadTexts: eqlNASStatsControllerLoadBalancingEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerLoadBalancingEntry.setDescription('An entry (row) containing controller load balancing statistics.')
eqlNASStatsControllerLoadBalancingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerLoadBalancingIndex.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerLoadBalancingIndex.setDescription('NAS controller index.')
eqlNASStatsControllerLoadBalancingTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerLoadBalancingTimestamp.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerLoadBalancingTimestamp.setDescription('This field specifies the date/time when the statistics were collected.\n                     Time is represented as the time in seconds since 00:00:00 UTC, 1970-01-01.')
eqlNASStatsControllerCPULoadPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 2, 1, 3), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerCPULoadPercent.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerCPULoadPercent.setDescription('The percentage of time the CPU is executing instructions.')
eqlNASStatsControllerTotalCifsConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTotalCifsConnections.setStatus('current')
if mibBuilder.loadTexts: eqlNASStatsControllerTotalCifsConnections.setDescription('The total number of CIFS connections terminated on the controller.')
eqlNASCacheInfoTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 40), )
if mibBuilder.loadTexts: eqlNASCacheInfoTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASCacheInfoTable.setDescription('EqualLogic-Dynamic \n                     This table contains NAS Cache information.\n                     TimeoutAll:60')
eqlNASCacheInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 40, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASCacheInfoIndex"))
if mibBuilder.loadTexts: eqlNASCacheInfoEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASCacheInfoEntry.setDescription('An entry (row) containing NAS cache information.')
eqlNASCacheInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 40, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASCacheInfoIndex.setStatus('current')
if mibBuilder.loadTexts: eqlNASCacheInfoIndex.setDescription('Cache index of the cached index.')
eqlNASCacheInfoCacheObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 40, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASCacheInfoCacheObjectName.setStatus('current')
if mibBuilder.loadTexts: eqlNASCacheInfoCacheObjectName.setDescription('Name of the cached object.')
eqlNASCacheInfoCacheObjectExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 40, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASCacheInfoCacheObjectExpiryTime.setStatus('current')
if mibBuilder.loadTexts: eqlNASCacheInfoCacheObjectExpiryTime.setDescription('Cache refresh time in seconds. A value of 0 means this is a persistent cache.')
eqlNASCacheInfoCacheObjectState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 40, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASCacheInfoCacheObjectState.setStatus('current')
if mibBuilder.loadTexts: eqlNASCacheInfoCacheObjectState.setDescription('Current cached object state.')
eqlNASCacheInfoAction = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 40, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("refresh-all", 1), ("refresh", 2), ("restart-agent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASCacheInfoAction.setStatus('current')
if mibBuilder.loadTexts: eqlNASCacheInfoAction.setDescription('Action on this NAS cache.')
eqlNASReplHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 41), )
if mibBuilder.loadTexts: eqlNASReplHistoryTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplHistoryTable.setDescription('EqualLogic-Dynamic table used to hold NAS replication history data.\n                    Used with FluidFS version 3.0 and later versions. For FluidFS version 2.0\n                    the table eqlNASReplicationHistory is used instead.')
eqlNASReplHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 41, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASReplHistoryUniqueId"))
if mibBuilder.loadTexts: eqlNASReplHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplHistoryEntry.setDescription('An entry (row) containing the NAS Replication history information.')
eqlNASReplHistoryUniqueId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 41, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplHistoryUniqueId.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplHistoryUniqueId.setDescription('Unique ID assigned by Fluid FS 3.0 software')
eqlNASReplHistoryEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 41, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplHistoryEventTime.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplHistoryEventTime.setDescription('Time when event was recorded by the FluidFS. Often the same as the end time.')
eqlNASReplHistorySourceContainerName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 41, 1, 3), NASContainerNameType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplHistorySourceContainerName.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplHistorySourceContainerName.setDescription('Name of source NAS container being replicated.')
eqlNASReplHistorySourceClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 41, 1, 4), ClusterNameType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplHistorySourceClusterName.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplHistorySourceClusterName.setDescription('Name of source cluster where source container exists. This is not currenlty required\n                    so if memory is limited, this could be deleted from the MIB.')
eqlNASReplHistoryDestContainerName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 41, 1, 5), NASContainerNameType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplHistoryDestContainerName.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplHistoryDestContainerName.setDescription('Name of destination NAS container receiving replication data')
eqlNASReplHistoryDestClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 41, 1, 6), ClusterNameType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplHistoryDestClusterName.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplHistoryDestClusterName.setDescription('Name of destination cluster where destionation container exists')
eqlNASReplHistoryStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 41, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplHistoryStartTime.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplHistoryStartTime.setDescription('Start time for replication')
eqlNASReplHistoryEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 41, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplHistoryEndTime.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplHistoryEndTime.setDescription('End time for replication')
eqlNASReplHistoryTransferredMb = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 41, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplHistoryTransferredMb.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplHistoryTransferredMb.setDescription('Number of megabytes transferred.')
eqlNASReplHistoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 41, 1, 10), EqlNASReplicationStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplHistoryStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASReplHistoryStatus.setDescription("The status of this replication relationship. Mainly use value 'finished' or 'failed'.")
eqlNASTaskTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 42), )
if mibBuilder.loadTexts: eqlNASTaskTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASTaskTable.setDescription('EqualLogic-Persistent task table. \n                     A row in this table represents a task currently executing in the NAS.')
eqlNASTaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 42, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASTaskIndex"))
if mibBuilder.loadTexts: eqlNASTaskEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASTaskEntry.setDescription('A row in the table represents a task. Any given task will have multiple sub tasks. Each sub task involves executing a management operation.  The system will execute each sub task one after another until the task is completed.')
eqlNASTaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 42, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlNASTaskIndex.setStatus('current')
if mibBuilder.loadTexts: eqlNASTaskIndex.setDescription('This field specifies an index that uniquely identifies a task.')
eqlNASTaskRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 42, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASTaskRowStatus.setDescription('This field is used to manage the conceptual row.')
eqlNASTaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 42, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("resync", 1), ("failback", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskType.setStatus('current')
if mibBuilder.loadTexts: eqlNASTaskType.setDescription('This field represents the type of the task.')
eqlNASTaskContext = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 42, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskContext.setStatus('current')
if mibBuilder.loadTexts: eqlNASTaskContext.setDescription('A generic task context')
eqlNASTaskNumSubTasks = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 42, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskNumSubTasks.setStatus('current')
if mibBuilder.loadTexts: eqlNASTaskNumSubTasks.setDescription('Number of subtasks in this task.')
eqlNASTaskSubTaskInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 42, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 100, 110, 120, 130, 140, 150, 160, 170, 300, 310, 320, 330, 340, 350, 360, 370, 380, 10000))).clone(namedValues=NamedValues(("none", 0), ("resync-primaryContainerPromote", 100), ("resync-primaryContainerReplicationDelete", 110), ("resync-recoveryContainerReplicationConfigure", 120), ("resync-recoveryContainerReplicate", 130), ("resync-recoveryContainerSourcePromote", 140), ("resync-recoveryContainerReplicationDelete", 150), ("resync-primaryContainerReplicationConfigure", 160), ("resync-recoveryContainerPromote", 170), ("failback-primaryContainerPromote", 300), ("failback-primaryContainerReplicationDelete", 310), ("failback-recoveryContainerReplicationConfigure", 320), ("failback-recoveryContainerDisableSchedules", 330), ("failback-recoveryContainerReplicate", 340), ("failback-recoveryContainerFinalReplication", 350), ("failback-recoveryContainerPromote", 360), ("failback-recoveryContainerReplicationDelete", 370), ("failback-primaryContainerReplicationConfigure", 380), ("complete", 10000)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskSubTaskInProgress.setStatus('current')
if mibBuilder.loadTexts: eqlNASTaskSubTaskInProgress.setDescription('Subtask that is currently in progress for this task.')
eqlNASTaskSubtaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 42, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskSubtaskStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASTaskSubtaskStatus.setDescription('Status of currently executing subtask.')
eqlNASTaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 42, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user-action-required", 1), ("in-progress", 2), ("complete", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASTaskStatus.setDescription('set to true if user action is required for the task to proceed further.')
eqlNASTaskUserAction = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 42, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("retry", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskUserAction.setStatus('current')
if mibBuilder.loadTexts: eqlNASTaskUserAction.setDescription('user action on the task.')
eqlNASTaskStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 42, 1, 10), Counter32()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskStartTime.setStatus('current')
if mibBuilder.loadTexts: eqlNASTaskStartTime.setDescription('time at which this task started represented as number of seconds since epoch.')
eqlNASTaskContainerReplInfoTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 43), )
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoTable.setDescription('EqualLogic-Persistent\n     TimeoutAll:60\n     This table is used to track the replication relationship on the NAS Container which has a NAS task')
eqlNASTaskContainerReplInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 43, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASReplSiteRemoteClusterId"), (0, "EQLNAS-MIB", "eqlNASTaskContainerReplInfoRemoteFSId"))
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoEntry.setDescription('')
eqlNASTaskContainerReplInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 43, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoRowStatus.setDescription('The status of the row')
eqlNASTaskContainerReplInfoRemoteFSId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 43, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoRemoteFSId.setStatus('current')
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoRemoteFSId.setDescription('Unique Identifier for the remote container. This is the FSid.')
eqlNASTaskContainerReplInfoVolumeReplSiteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 43, 1, 3), SiteIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoVolumeReplSiteIndex.setStatus('current')
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoVolumeReplSiteIndex.setDescription('The value of eqliscsiVolumeReplSiteIndex to index into \n                     eqliscsiVolumeReplSiteTable.')
eqlNASTaskContainerReplInfoRemoteClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 43, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoRemoteClusterName.setStatus('current')
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoRemoteClusterName.setDescription('This field specifies the remote cluster name, which is the \n                     eqlApplianceName of the remote cluster.')
eqlNASTaskContainerReplInfoLocalFSName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 43, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 230))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoLocalFSName.setStatus('current')
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoLocalFSName.setDescription('Name used to identify the local NAS Container. Contains \n                     only letters, digits and underscores. Must begin with either \n                     letter or an underscore. ')
eqlNASTaskContainerReplInfoRemoteFSName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 43, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 230))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoRemoteFSName.setStatus('current')
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoRemoteFSName.setDescription('Name used to identify the remote NAS Container. Contains \n                     only letters, digits and underscores. Must begin with either \n                     letter or an underscore. ')
eqlNASTaskContainerReplInfoLocalClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 43, 1, 7), ClusterIdType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoLocalClusterId.setStatus('current')
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoLocalClusterId.setDescription('Local Cluster Id.')
eqlNASTaskContainerReplInfoTaskId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 43, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoTaskId.setStatus('current')
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoTaskId.setDescription('This field specifies an Id that uniquely identifies a task.')
eqlNASLostContainerTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 44), )
if mibBuilder.loadTexts: eqlNASLostContainerTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASLostContainerTable.setDescription('EqualLogic-Dynamic Appliance Table.\n                     This table contains a list of NAS Appliance configurations for containers lost during a configuration restore.\n                     TimeoutAll:60')
eqlNASLostContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 44, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"))
if mibBuilder.loadTexts: eqlNASLostContainerEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASLostContainerEntry.setDescription('An entry (row) containing NAS Lost Container info.')
eqlNASLostContainerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 44, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASLostContainerRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASLostContainerRowStatus.setDescription('Row status variable used to manage this row.')
eqlNASLostContainerName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 44, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 230))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASLostContainerName.setStatus('current')
if mibBuilder.loadTexts: eqlNASLostContainerName.setDescription('Name used to identify NAS Container. Contains only letters, digits and underscores. Must begin with either letter or an underscore. ')
eqlNASLostContainerCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 44, 1, 3), Unsigned32()).setUnits('MB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASLostContainerCapacity.setStatus('current')
if mibBuilder.loadTexts: eqlNASLostContainerCapacity.setDescription('Size of NAS Container in MB.')
eqlNASLostContainerUsedSpaceAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 44, 1, 4), Unsigned32()).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASLostContainerUsedSpaceAlert.setStatus('current')
if mibBuilder.loadTexts: eqlNASLostContainerUsedSpaceAlert.setDescription('Alert user when NAS container used space reaches certain % value of NAS container size.Default value is choosen from eqlNASApplianceConfigUsedSpaceAlert')
eqlNASLostContainerSnapshotUsedSpaceAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 44, 1, 5), Unsigned32()).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASLostContainerSnapshotUsedSpaceAlert.setStatus('current')
if mibBuilder.loadTexts: eqlNASLostContainerSnapshotUsedSpaceAlert.setDescription('Alert user when NAS container snapshot used space reaches certain % value of NAS container snapshot size.Default value is choosen from eqlNASApplianceConfigSnapSpaceAlert ')
eqlNASSanStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 45), )
if mibBuilder.loadTexts: eqlNASSanStaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: eqlNASSanStaticRouteTable.setDescription('EqualLogic-Dynamic\n      This table is used to manage static route entries on NAS cluster. The \n      static route entries are used to route SAN traffic from cluster members \n      to gateways on the SAN network.\n      TimeoutAll:60')
eqlNASSanStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 45, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceNetworkID"), (0, "EQLNAS-MIB", "eqlNASSanStaticRouteNetworkAddrType"), (0, "EQLNAS-MIB", "eqlNASSanStaticRouteNetworkAddr"), (0, "EQLNAS-MIB", "eqlNASSanStaticRouteNetworkMaskType"), (0, "EQLNAS-MIB", "eqlNASSanStaticRouteNetworkMask"))
if mibBuilder.loadTexts: eqlNASSanStaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: eqlNASSanStaticRouteEntry.setDescription('')
eqlNASSanStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 45, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSanStaticRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlNASSanStaticRouteRowStatus.setDescription('The status of the row')
eqlNASSanStaticRouteNetworkAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 45, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSanStaticRouteNetworkAddrType.setStatus('current')
if mibBuilder.loadTexts: eqlNASSanStaticRouteNetworkAddrType.setDescription('This field specifies the type of address (v4/v6) for the \n                    Network address of the static route.')
eqlNASSanStaticRouteNetworkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 45, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSanStaticRouteNetworkAddr.setStatus('current')
if mibBuilder.loadTexts: eqlNASSanStaticRouteNetworkAddr.setDescription('This field contains the Network IP address for the static \n                    route (e.g., 200.200.200.0)')
eqlNASSanStaticRouteNetworkMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 45, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSanStaticRouteNetworkMaskType.setStatus('current')
if mibBuilder.loadTexts: eqlNASSanStaticRouteNetworkMaskType.setDescription('This field specifies the type (v4/v6) for the \n                    Network mask of the static route.')
eqlNASSanStaticRouteNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 45, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSanStaticRouteNetworkMask.setStatus('current')
if mibBuilder.loadTexts: eqlNASSanStaticRouteNetworkMask.setDescription('This field contains the Network mask for the static route \n                    (e.g., 255.255.255.0). The IP address type of the mask is\n                    assumed to be the same as that of the network address')
eqlNASSanStaticRouteGatewayAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 45, 1, 6), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSanStaticRouteGatewayAddrType.setStatus('current')
if mibBuilder.loadTexts: eqlNASSanStaticRouteGatewayAddrType.setDescription('This field specifies the type of address (v4/v6) of the \n                    gateway IP address.')
eqlNASSanStaticRouteGatewayAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 45, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSanStaticRouteGatewayAddr.setStatus('current')
if mibBuilder.loadTexts: eqlNASSanStaticRouteGatewayAddr.setDescription('This field contains the gateway IP address for the static \n                    route (e.g., 10.127.20.30)')
mibBuilder.exportSymbols("EQLNAS-MIB", eqlNASApplianceCIFSEntry=eqlNASApplianceCIFSEntry, eqlNASApplianceCIFSAntivirusPolicy=eqlNASApplianceCIFSAntivirusPolicy, eqlNASReplPartnerIdMapRowStatus=eqlNASReplPartnerIdMapRowStatus, eqlNASStatsControllerLoadBalancingEntry=eqlNASStatsControllerLoadBalancingEntry, eqlNASContainerRowStatus=eqlNASContainerRowStatus, eqlNASChassisSanNetworkStatus=eqlNASChassisSanNetworkStatus, eqlNASModule=eqlNASModule, eqlNASChassisOverallStatus=eqlNASChassisOverallStatus, eqlNASReplRemoteClusterName=eqlNASReplRemoteClusterName, eqlNASSnapshotPolicyStartTime=eqlNASSnapshotPolicyStartTime, eqlNASQuotaTable=eqlNASQuotaTable, EqlNASReplicationStatus=EqlNASReplicationStatus, eqlNASChassisControllerNicSlot=eqlNASChassisControllerNicSlot, eqlNASChassisRequestId=eqlNASChassisRequestId, eqlNASSanStaticRouteGatewayAddr=eqlNASSanStaticRouteGatewayAddr, eqlNASApplianceAccessTimeFilter=eqlNASApplianceAccessTimeFilter, eqlNASApplianceDefaultCIFSAllowGuestAccess=eqlNASApplianceDefaultCIFSAllowGuestAccess, eqlNASReplPartnerInfoMapRowStatus=eqlNASReplPartnerInfoMapRowStatus, eqlNASSnapshotPolicyWeekMask=eqlNASSnapshotPolicyWeekMask, eqlNASUserQuotaEffectiveRuleUserHardLimit=eqlNASUserQuotaEffectiveRuleUserHardLimit, eqlNASClientStaticRouteGatewayAddr=eqlNASClientStaticRouteGatewayAddr, eqlNASContainerIndex=eqlNASContainerIndex, eqlNASReplicationHistoryStatus=eqlNASReplicationHistoryStatus, eqlNASContainerModificationTimeFilter=eqlNASContainerModificationTimeFilter, eqlNASStatsControllerTrafficRateReplicationWriteMBsPerSec=eqlNASStatsControllerTrafficRateReplicationWriteMBsPerSec, eqlNASClientStaticRouteTable=eqlNASClientStaticRouteTable, eqlNASReplPartnerInfoMapNetworkAddrType=eqlNASReplPartnerInfoMapNetworkAddrType, eqlNASStatsControllerLoadBalancingTimestamp=eqlNASStatsControllerLoadBalancingTimestamp, eqlNASSanStaticRouteNetworkMaskType=eqlNASSanStaticRouteNetworkMaskType, eqlNASClientStaticRouteNetworkAddrType=eqlNASClientStaticRouteNetworkAddrType, eqlNASContainerDedupMethodType=eqlNASContainerDedupMethodType, eqlNASClientEntry=eqlNASClientEntry, eqlNASReplPartnerClusterIdMapClusterId=eqlNASReplPartnerClusterIdMapClusterId, eqlNASCacheInfoAction=eqlNASCacheInfoAction, eqlNASChassisControllerDiskStatus=eqlNASChassisControllerDiskStatus, eqlNASReplPartnerInfoMapClusterMPV=eqlNASReplPartnerInfoMapClusterMPV, eqlNASTaskEntry=eqlNASTaskEntry, eqlNASReplicationTable=eqlNASReplicationTable, eqlNASChassisModel=eqlNASChassisModel, eqlNASQuotaTargetType=eqlNASQuotaTargetType, eqlNASStatsControllerTrafficRateTotalSecondaryMBsPerSec=eqlNASStatsControllerTrafficRateTotalSecondaryMBsPerSec, eqlNASStatsClusterTrafficRateCifsWriteMBsPerSec=eqlNASStatsClusterTrafficRateCifsWriteMBsPerSec, eqlNASClientIsGuest=eqlNASClientIsGuest, eqlNASApplianceCIFSAuthenticationMode=eqlNASApplianceCIFSAuthenticationMode, eqlNASStatsControllerTrafficRateStorageSubSystemWriteMBsPerSec=eqlNASStatsControllerTrafficRateStorageSubSystemWriteMBsPerSec, eqlNASReplSiteRemoteClusterInetAddrType=eqlNASReplSiteRemoteClusterInetAddrType, eqlNASGroupQuotaEffectiveRuleEntry=eqlNASGroupQuotaEffectiveRuleEntry, eqlNASDiagsEntry=eqlNASDiagsEntry, eqlNASTaskContainerReplInfoRemoteFSId=eqlNASTaskContainerReplInfoRemoteFSId, eqlNASReplicationHistoryTable=eqlNASReplicationHistoryTable, eqlNASContainerDirectoryOpsEntry=eqlNASContainerDirectoryOpsEntry, eqlNASContainerStatusConnections=eqlNASContainerStatusConnections, eqlNASApplianceNFSExportReadWrite=eqlNASApplianceNFSExportReadWrite, eqlNASQuotaHardLimit=eqlNASQuotaHardLimit, eqlNASReplPartnerClusterIdMapEntry=eqlNASReplPartnerClusterIdMapEntry, eqlNASClientTable=eqlNASClientTable, eqlNASApplianceNFSExportsTable=eqlNASApplianceNFSExportsTable, eqlNASChassisControllerCPUCurrentCoresCount=eqlNASChassisControllerCPUCurrentCoresCount, eqlNASContainerDirectoryName=eqlNASContainerDirectoryName, eqlNASLostContainerUsedSpaceAlert=eqlNASLostContainerUsedSpaceAlert, eqlNASApplianceDefaultCIFSAntivirusExtensions=eqlNASApplianceDefaultCIFSAntivirusExtensions, eqlNASStatsClusterTrafficRateStorageSubSystemReadMBsPerSec=eqlNASStatsClusterTrafficRateStorageSubSystemReadMBsPerSec, eqlNASSanStaticRouteNetworkMask=eqlNASSanStaticRouteNetworkMask, EqlNASChassisNetworkSpeed=EqlNASChassisNetworkSpeed, eqlNASReplSitePartnershipState=eqlNASReplSitePartnershipState, eqlNASApplianceCIFSShareName=eqlNASApplianceCIFSShareName, eqlNASClusterInfoTable=eqlNASClusterInfoTable, eqlNASContainerTable=eqlNASContainerTable, eqlNASChassisClientNetworkStatus=eqlNASChassisClientNetworkStatus, eqlNASGroupQuotaEffectiveRuleHardLimit=eqlNASGroupQuotaEffectiveRuleHardLimit, eqlNASSnapshotPolicyOccurence=eqlNASSnapshotPolicyOccurence, eqlNASStatsControllerTrafficRateCifsIOPSRead=eqlNASStatsControllerTrafficRateCifsIOPSRead, eqlNASContainerStatusEntry=eqlNASContainerStatusEntry, eqlNASChassisControllerSystemControllerId=eqlNASChassisControllerSystemControllerId, eqlNASApplianceCIFSExportedDirectory=eqlNASApplianceCIFSExportedDirectory, eqlNASChassisOverallFanStatus=eqlNASChassisOverallFanStatus, eqlNASApplianceAntivirusHostRowStatus=eqlNASApplianceAntivirusHostRowStatus, eqlNASTaskContainerReplInfoTable=eqlNASTaskContainerReplInfoTable, eqlNASReplicationDestFSId=eqlNASReplicationDestFSId, eqlNASApplianceDefaultNFSExportsFileId32bit=eqlNASApplianceDefaultNFSExportsFileId32bit, eqlNASSanStaticRouteNetworkAddr=eqlNASSanStaticRouteNetworkAddr, eqlNASReplPartnerIdMapEntry=eqlNASReplPartnerIdMapEntry, eqlNASReplHistoryEventTime=eqlNASReplHistoryEventTime, eqlNASStatsClusterTrafficRateNfsWriteMBsPerSec=eqlNASStatsClusterTrafficRateNfsWriteMBsPerSec, eqlNASApplianceNFSv4Mode=eqlNASApplianceNFSv4Mode, eqlNASContainerDirectoryOpsIndex=eqlNASContainerDirectoryOpsIndex, eqlNASObjects=eqlNASObjects, eqlNASSnapshotPolicyStatusEntry=eqlNASSnapshotPolicyStatusEntry, eqlNASReplicationNextRecoveryTime=eqlNASReplicationNextRecoveryTime, eqlNASGroupQuotaEffectiveRuleSoftLimitEnabled=eqlNASGroupQuotaEffectiveRuleSoftLimitEnabled, eqlNASGroupQuotaEffectiveRuleSoftLimit=eqlNASGroupQuotaEffectiveRuleSoftLimit, eqlNASReplEntry=eqlNASReplEntry, eqlNASApplianceCIFSAntivirusLargeFileOpen=eqlNASApplianceCIFSAntivirusLargeFileOpen, eqlNASReplSiteRemoteUserName=eqlNASReplSiteRemoteUserName, eqlNASContainerEntry=eqlNASContainerEntry, eqlNASClusterUpdateRowStatus=eqlNASClusterUpdateRowStatus, eqlNASApplianceExcludeFilesByNamePattern=eqlNASApplianceExcludeFilesByNamePattern, eqlNASChassisOverallPowerSupplyStatus=eqlNASChassisOverallPowerSupplyStatus, eqlNASQuotaUsageTargetName=eqlNASQuotaUsageTargetName, eqlNASStatsControllerTrafficRateNetworkPacketDropsPerSec=eqlNASStatsControllerTrafficRateNetworkPacketDropsPerSec, eqlNASContainerUniqueIDEntry=eqlNASContainerUniqueIDEntry, eqlNASChassisControllerBPSStatus=eqlNASChassisControllerBPSStatus, eqlNASContainerUniqueIDValue=eqlNASContainerUniqueIDValue, eqlNASReplHistoryTable=eqlNASReplHistoryTable, eqlNASChassisStatusEntry=eqlNASChassisStatusEntry, eqlNASApplianceCIFSRowStatus=eqlNASApplianceCIFSRowStatus, eqlNASContainerCfgSourceClusterName=eqlNASContainerCfgSourceClusterName, PYSNMP_MODULE_ID=eqlNASModule, eqlNASReplPartnerConfigRowStatus=eqlNASReplPartnerConfigRowStatus, eqlNASSnapshotRollBack=eqlNASSnapshotRollBack, eqlNASChassisControllerState=eqlNASChassisControllerState, eqlNASChassisStatusTable=eqlNASChassisStatusTable, eqlNASSnapshotPolicyStatusNextCreate=eqlNASSnapshotPolicyStatusNextCreate, eqlNASReplPartnerInfoMapTable=eqlNASReplPartnerInfoMapTable, eqlNASApplianceAccessTimeManagementGranularity=eqlNASApplianceAccessTimeManagementGranularity, eqlNASSnapshotPolicyReplication=eqlNASSnapshotPolicyReplication, eqlNASSnapshotPolicyType=eqlNASSnapshotPolicyType, eqlNASApplianceCIFSAntivirusExcludeDirPaths=eqlNASApplianceCIFSAntivirusExcludeDirPaths, eqlNASQuotaEntry=eqlNASQuotaEntry, eqlNASCacheInfoCacheObjectName=eqlNASCacheInfoCacheObjectName, eqlNASReplSiteRemoteNetworkAddr=eqlNASReplSiteRemoteNetworkAddr, eqlNASContainerDefaultGroupQuotaAlert=eqlNASContainerDefaultGroupQuotaAlert, eqlNASSnapshotTimestamp=eqlNASSnapshotTimestamp, eqlNASContainerUniqueIDType=eqlNASContainerUniqueIDType, eqlNASContainerCfgEntry=eqlNASContainerCfgEntry, eqlNASFSScanTable=eqlNASFSScanTable, eqlNASChassisControllerNicName=eqlNASChassisControllerNicName, eqlNASUserQuotaEffectiveRuleEntry=eqlNASUserQuotaEffectiveRuleEntry, eqlNASStatsClusterTrafficRateNfsIOPSRead=eqlNASStatsClusterTrafficRateNfsIOPSRead, eqlNASReplTransferredPercent=eqlNASReplTransferredPercent, eqlNASContainerStatusOptimized=eqlNASContainerStatusOptimized, eqlNASReplSitePartnershipId=eqlNASReplSitePartnershipId, eqlNASApplianceNFSExportDirectory=eqlNASApplianceNFSExportDirectory, eqlNASQuotaRowStatus=eqlNASQuotaRowStatus, eqlNASChassisControllerStatusTable=eqlNASChassisControllerStatusTable, eqlNASSanStaticRouteRowStatus=eqlNASSanStaticRouteRowStatus, eqlNASChassisControllerPowerSupplyStatus=eqlNASChassisControllerPowerSupplyStatus, eqlNASApplianceNFSExportsFileId32bit=eqlNASApplianceNFSExportsFileId32bit, eqlNASChassisControllerBPSCharge=eqlNASChassisControllerBPSCharge, eqlNASUserQuotaEffectiveRuleUserHardLimitEnabled=eqlNASUserQuotaEffectiveRuleUserHardLimitEnabled, eqlNASTaskUserAction=eqlNASTaskUserAction, eqlNASChassisControllerDiskName=eqlNASChassisControllerDiskName, eqlNASSnapshotRowStatus=eqlNASSnapshotRowStatus, eqlNASChassisFanStatusEntry=eqlNASChassisFanStatusEntry, eqlNASReplVolumeReplSiteIndex=eqlNASReplVolumeReplSiteIndex, eqlNASChassisControllerNicState=eqlNASChassisControllerNicState, eqlNASUserQuotaEffectiveRuleTable=eqlNASUserQuotaEffectiveRuleTable, eqlNASApplianceNFSAccessClientNetmask=eqlNASApplianceNFSAccessClientNetmask, eqlNASStatsClusterTrafficRateCifsIOPSRead=eqlNASStatsClusterTrafficRateCifsIOPSRead, eqlNASContainerCfgModules=eqlNASContainerCfgModules, eqlNASReplTable=eqlNASReplTable, eqlNASClientStaticRouteNetworkMask=eqlNASClientStaticRouteNetworkMask, eqlNASReplAchievedRecoveryTime=eqlNASReplAchievedRecoveryTime, eqlNASChassisSanType=eqlNASChassisSanType, eqlNASStatsClusterTrafficRateTable=eqlNASStatsClusterTrafficRateTable, eqlNASTaskContainerReplInfoEntry=eqlNASTaskContainerReplInfoEntry, eqlNASReplPartnerConfigInetAddr=eqlNASReplPartnerConfigInetAddr, eqlNASUserQuotaEffectiveRuleGroupName=eqlNASUserQuotaEffectiveRuleGroupName, eqlNASContainerUsedSpaceAlert=eqlNASContainerUsedSpaceAlert, eqlNASReplicationSourceFSName=eqlNASReplicationSourceFSName, eqlNASContainerDefaultUserQuotaAlert=eqlNASContainerDefaultUserQuotaAlert, eqlNASStatsControllerTrafficRateNfsWriteMBsPerSec=eqlNASStatsControllerTrafficRateNfsWriteMBsPerSec, eqlNASSnapshotPolicyMonthMask=eqlNASSnapshotPolicyMonthMask, eqlNASSanStaticRouteTable=eqlNASSanStaticRouteTable, eqlNASChassisBackplaneNetworkStatus=eqlNASChassisBackplaneNetworkStatus, eqlNASContainerStatusAllocatedSpace=eqlNASContainerStatusAllocatedSpace, eqlNASReplHistoryDestContainerName=eqlNASReplHistoryDestContainerName, eqlNASReplHistoryDestClusterName=eqlNASReplHistoryDestClusterName, eqlNASStatsClusterTrafficRateNfsIOPSWrite=eqlNASStatsClusterTrafficRateNfsIOPSWrite, eqlNASTaskContainerReplInfoTaskId=eqlNASTaskContainerReplInfoTaskId, eqlNASChassisControllerInternalNetworkSpeed=eqlNASChassisControllerInternalNetworkSpeed, eqlNASApplianceCIFSLockEnforcement=eqlNASApplianceCIFSLockEnforcement, eqlNASReplTargetRecoveryTime=eqlNASReplTargetRecoveryTime, eqlNASReplHistorySourceClusterName=eqlNASReplHistorySourceClusterName, eqlNASApplianceContainerUnixFilePerms=eqlNASApplianceContainerUnixFilePerms, eqlNASChassisControllerNicStatusEntry=eqlNASChassisControllerNicStatusEntry, eqlNASChassisControllerBackplaneNetworkSpeed=eqlNASChassisControllerBackplaneNetworkSpeed, eqlNASContainerQuotaEnabled=eqlNASContainerQuotaEnabled, eqlNASApplianceDedupMethodType=eqlNASApplianceDedupMethodType, eqlNASStatsControllerTrafficRateCifsWriteMBsPerSec=eqlNASStatsControllerTrafficRateCifsWriteMBsPerSec, eqlNASContainerStatusReplState=eqlNASContainerStatusReplState, eqlNASContainerCfgSourceFSName=eqlNASContainerCfgSourceFSName, ClusterNameType=ClusterNameType, eqlNASContainerExcludeFilesByNamePattern=eqlNASContainerExcludeFilesByNamePattern, eqlNASReplicationStatus=eqlNASReplicationStatus, eqlNASConfigStateHardwareReplaceInProgress=eqlNASConfigStateHardwareReplaceInProgress, eqlNASStatsControllerTrafficRateNetworkOverheadReadMBsPerSec=eqlNASStatsControllerTrafficRateNetworkOverheadReadMBsPerSec, eqlNASContainerDirectoryCaseInsensitive=eqlNASContainerDirectoryCaseInsensitive, eqlNASContainerAccessTimeFilter=eqlNASContainerAccessTimeFilter, eqlNASChassisControllerAmbientTemperatureValue=eqlNASChassisControllerAmbientTemperatureValue, eqlNASUserQuotaEffectiveRuleGroupHardLimitEnabled=eqlNASUserQuotaEffectiveRuleGroupHardLimitEnabled, eqlNASStatsControllerTrafficRateNetworkOverheadWriteMBsPerSec=eqlNASStatsControllerTrafficRateNetworkOverheadWriteMBsPerSec, eqlNASTaskStatus=eqlNASTaskStatus, eqlNASClientUserName=eqlNASClientUserName, eqlNASClusterUpdateRequestId=eqlNASClusterUpdateRequestId, eqlNASReplPartnerConfigEntry=eqlNASReplPartnerConfigEntry, eqlNASApplianceDefaultCfgEntry=eqlNASApplianceDefaultCfgEntry, eqlNASStatsControllerTrafficRateNdmpReadMBsPerSec=eqlNASStatsControllerTrafficRateNdmpReadMBsPerSec, eqlNASReplPartnerIdMapTable=eqlNASReplPartnerIdMapTable, eqlNASQuotaUsageMB=eqlNASQuotaUsageMB, eqlNASStatsControllerTrafficRateReplicationReadMBsPerSec=eqlNASStatsControllerTrafficRateReplicationReadMBsPerSec, eqlNASChassisControllerNicSpeed=eqlNASChassisControllerNicSpeed, eqlNASQuotaUsageTargetType=eqlNASQuotaUsageTargetType, eqlNASSnapshotPolicyAdminStatus=eqlNASSnapshotPolicyAdminStatus, eqlNASContainerStatusSnapshotSpace=eqlNASContainerStatusSnapshotSpace, eqlNASApplianceAntivirusHostTable=eqlNASApplianceAntivirusHostTable, eqlNASChassisRowStatus=eqlNASChassisRowStatus, eqlNASStatsControllerTotalCifsConnections=eqlNASStatsControllerTotalCifsConnections, eqlNASClientProtocol=eqlNASClientProtocol, eqlNASStatsClusterTrafficRateTotalPrimaryMBsPerSec=eqlNASStatsClusterTrafficRateTotalPrimaryMBsPerSec, eqlNASReplStatus=eqlNASReplStatus, eqlNASReplHistoryStatus=eqlNASReplHistoryStatus, eqlNASChassisControllerOverallLocalDiskStatus=eqlNASChassisControllerOverallLocalDiskStatus, eqlNASChassisControllerAmbientTemperatureStatus=eqlNASChassisControllerAmbientTemperatureStatus, eqlNASChassisControllerBPSIsAccessible=eqlNASChassisControllerBPSIsAccessible, eqlNASApplianceContainerUnixDirPerms=eqlNASApplianceContainerUnixDirPerms, eqlNASReplicationHistoryDestContainer=eqlNASReplicationHistoryDestContainer, eqlNASStatsControllerTrafficRateTotalPrimaryMBsPerSecToAverage=eqlNASStatsControllerTrafficRateTotalPrimaryMBsPerSecToAverage, eqlNASApplianceDefaultUserQuotaAlert=eqlNASApplianceDefaultUserQuotaAlert, eqlNASReplSiteRemoteClusterName=eqlNASReplSiteRemoteClusterName, eqlNASUserQuotaEffectiveRuleRowStatus=eqlNASUserQuotaEffectiveRuleRowStatus, eqlNASContainerSnapshotUsedSpaceAlert=eqlNASContainerSnapshotUsedSpaceAlert, eqlNASApplianceDefaultCIFSLockEnforcement=eqlNASApplianceDefaultCIFSLockEnforcement, eqlNASChassisControllerNicPort=eqlNASChassisControllerNicPort, eqlNASQuotaWarnLimit=eqlNASQuotaWarnLimit, eqlNASLostContainerSnapshotUsedSpaceAlert=eqlNASLostContainerSnapshotUsedSpaceAlert, eqlNASApplianceDefaultCIFSAntivirusPolicy=eqlNASApplianceDefaultCIFSAntivirusPolicy, eqlNASSnapshotPolicyTable=eqlNASSnapshotPolicyTable, eqlNASContainerCfgTable=eqlNASContainerCfgTable, eqlNASChassisFanName=eqlNASChassisFanName, eqlNASChassisControllerClientNetworkSpeed=eqlNASChassisControllerClientNetworkSpeed, eqlNASStatsControllerCPULoadPercent=eqlNASStatsControllerCPULoadPercent, eqlNASReplPartnerInfoMapNetworkMask=eqlNASReplPartnerInfoMapNetworkMask, eqlNASChassisControllerStatusEntry=eqlNASChassisControllerStatusEntry, eqlNASReplSiteLocalClusterInetAddr=eqlNASReplSiteLocalClusterInetAddr, eqlNASClientStaticRouteRowStatus=eqlNASClientStaticRouteRowStatus, eqlNASApplianceReplRemoteUserName=eqlNASApplianceReplRemoteUserName, eqlNASContainerDefaultUserQuota=eqlNASContainerDefaultUserQuota, eqlNASQuotaTargetName=eqlNASQuotaTargetName, eqlNASClusterUpdateFilename=eqlNASClusterUpdateFilename, eqlNASStatsClusterTrafficRateNfsIOPSOther=eqlNASStatsClusterTrafficRateNfsIOPSOther, eqlNASChassisSanNetworkSpeed=eqlNASChassisSanNetworkSpeed, eqlNASApplianceNFSTrustUsers=eqlNASApplianceNFSTrustUsers, eqlNASReplPartnerClusterIdMapSanVIPType=eqlNASReplPartnerClusterIdMapSanVIPType, eqlNASChassisTable=eqlNASChassisTable, eqlNASSnapshotPolicyMaxKeep=eqlNASSnapshotPolicyMaxKeep, eqlNASContainerUnixFilePermissions=eqlNASContainerUnixFilePermissions, eqlNASChassisControllerCPUOverallStatus=eqlNASChassisControllerCPUOverallStatus, eqlNASClientNumOpenFiles=eqlNASClientNumOpenFiles, eqlNASLostContainerName=eqlNASLostContainerName, eqlNASSnapshotSize=eqlNASSnapshotSize, eqlNASContainerSnapshotHardQuota=eqlNASContainerSnapshotHardQuota, eqlNASChassisFanRpm=eqlNASChassisFanRpm, eqlNASConfigStateEntry=eqlNASConfigStateEntry)
mibBuilder.exportSymbols("EQLNAS-MIB", eqlNASDiagsStart=eqlNASDiagsStart, eqlNASChassisModelName=eqlNASChassisModelName, eqlNASReplicationRowStatus=eqlNASReplicationRowStatus, eqlNASReplPartnerIdMapPartnershipId=eqlNASReplPartnerIdMapPartnershipId, eqlNASChassisControllerFanStatus=eqlNASChassisControllerFanStatus, eqlNASClientIPAddress=eqlNASClientIPAddress, eqlNASSnapshotPolicyIndex=eqlNASSnapshotPolicyIndex, eqlNASContainerCapacity=eqlNASContainerCapacity, eqlNASChassisControllerIndex=eqlNASChassisControllerIndex, eqlNASContainerName=eqlNASContainerName, eqlNASClusterInfoRowStatus=eqlNASClusterInfoRowStatus, eqlNASApplianceNFSAccess=eqlNASApplianceNFSAccess, eqlNASApplianceNFSExportTrustedUsers=eqlNASApplianceNFSExportTrustedUsers, eqlNASApplianceAntivirusHostIndex=eqlNASApplianceAntivirusHostIndex, eqlNASChassisEntry=eqlNASChassisEntry, eqlNASChassisControllerFanRpmRange=eqlNASChassisControllerFanRpmRange, eqlNASApplianceAntivirusHostName=eqlNASApplianceAntivirusHostName, eqlNASReplicationHistoryStartTime=eqlNASReplicationHistoryStartTime, eqlNASReplRole=eqlNASReplRole, eqlNASApplianceOptimizationEnabled=eqlNASApplianceOptimizationEnabled, eqlNASChassisPowerSupplyName=eqlNASChassisPowerSupplyName, eqlNASClusterInfoSegmentSize=eqlNASClusterInfoSegmentSize, UNIXPermissions=UNIXPermissions, eqlNASApplianceConfigSnapHardQuota=eqlNASApplianceConfigSnapHardQuota, eqlNASReplError=eqlNASReplError, eqlNASReplSiteUserName=eqlNASReplSiteUserName, eqlNASSnapshotPolicyStatusOperStatus=eqlNASSnapshotPolicyStatusOperStatus, eqlNASChassisBackplaneNetworkSpeed=eqlNASChassisBackplaneNetworkSpeed, eqlNASGroupQuotaEffectiveRuleTargetName=eqlNASGroupQuotaEffectiveRuleTargetName, eqlNASStatsClusterTrafficRateCifsIOPSWrite=eqlNASStatsClusterTrafficRateCifsIOPSWrite, eqlNASContainerStatusNumOfSnapshots=eqlNASContainerStatusNumOfSnapshots, eqlNASChassisControllerPowerSupplyStatusTable=eqlNASChassisControllerPowerSupplyStatusTable, eqlNASReplicationSourceFSId=eqlNASReplicationSourceFSId, eqlNASApplianceDefaultCIFSAntivirusEnabled=eqlNASApplianceDefaultCIFSAntivirusEnabled, eqlNASApplianceNFSAccessClientIPType=eqlNASApplianceNFSAccessClientIPType, eqlNASReplicationHistorySampleIndex=eqlNASReplicationHistorySampleIndex, eqlNASChassisControllerFanName=eqlNASChassisControllerFanName, eqlNASReplSecsToComplete=eqlNASReplSecsToComplete, eqlNASContainerStatusOptimizationSpaceSavings=eqlNASContainerStatusOptimizationSpaceSavings, eqlNASClusterUpdateEntry=eqlNASClusterUpdateEntry, eqlNASTaskRowStatus=eqlNASTaskRowStatus, eqlNASStatsControllerLoadBalancingTable=eqlNASStatsControllerLoadBalancingTable, eqlNASApplianceTable=eqlNASApplianceTable, eqlNASContainerCompressionEnabled=eqlNASContainerCompressionEnabled, eqlNASStatsControllerTrafficRateStorageSubSystemReadMBsPerSec=eqlNASStatsControllerTrafficRateStorageSubSystemReadMBsPerSec, eqlNASCacheInfoIndex=eqlNASCacheInfoIndex, eqlNASClusterUpdateTable=eqlNASClusterUpdateTable, eqlNASApplianceDefaultCIFSAntivirusLargeFileSize=eqlNASApplianceDefaultCIFSAntivirusLargeFileSize, ClusterIdType=ClusterIdType, eqlNASReplicationEntry=eqlNASReplicationEntry, eqlNASClusterInfoSegmentId=eqlNASClusterInfoSegmentId, eqlNASContainerOptimizationEnabled=eqlNASContainerOptimizationEnabled, eqlNASChassisControllerOverallVirtualDiskStatus=eqlNASChassisControllerOverallVirtualDiskStatus, eqlNASDiagsCaseNumber=eqlNASDiagsCaseNumber, eqlNASApplianceDefaultGroupQuota=eqlNASApplianceDefaultGroupQuota, eqlNASReplSiteVolumeReplSiteIndex=eqlNASReplSiteVolumeReplSiteIndex, eqlNASReplPartnerInfoMapEntry=eqlNASReplPartnerInfoMapEntry, eqlNASApplianceNFSExportsEntry=eqlNASApplianceNFSExportsEntry, EqlNASChassisSanType=EqlNASChassisSanType, eqlNASContainerUnixDirPermissions=eqlNASContainerUnixDirPermissions, eqlNASStatsClusterTrafficRateTimestamp=eqlNASStatsClusterTrafficRateTimestamp, eqlNASLostContainerCapacity=eqlNASLostContainerCapacity, eqlNASChassisClientNetworkSpeed=eqlNASChassisClientNetworkSpeed, eqlNASChassisPowerSupplyStatus=eqlNASChassisPowerSupplyStatus, eqlNASStatsClusterTrafficRateNdmpWriteMBsPerSec=eqlNASStatsClusterTrafficRateNdmpWriteMBsPerSec, eqlNASSnapshotPolicyRepeatFactor=eqlNASSnapshotPolicyRepeatFactor, eqlNASStatsClusterTrafficRateReplicationWriteMBsPerSec=eqlNASStatsClusterTrafficRateReplicationWriteMBsPerSec, eqlNASStatsClusterTrafficRateStorageSubSystemWriteMBsPerSec=eqlNASStatsClusterTrafficRateStorageSubSystemWriteMBsPerSec, eqlNASApplianceNFSAccessClientIP=eqlNASApplianceNFSAccessClientIP, eqlNASChassisControllerBackplaneNetworkStatus=eqlNASChassisControllerBackplaneNetworkStatus, eqlNASTaskContainerReplInfoLocalClusterId=eqlNASTaskContainerReplInfoLocalClusterId, eqlNASApplianceContainerFileSecurity=eqlNASApplianceContainerFileSecurity, eqlNASChassisControllerPowerSupplyStatusEntry=eqlNASChassisControllerPowerSupplyStatusEntry, eqlNASChassisIndex=eqlNASChassisIndex, eqlNASChassisControllerClientNetworkStatus=eqlNASChassisControllerClientNetworkStatus, eqlNASChassisControllerNicDuplex=eqlNASChassisControllerNicDuplex, eqlNASApplianceEQLPoolIndex=eqlNASApplianceEQLPoolIndex, eqlNASUserQuotaEffectiveRuleUserSoftLimitEnabled=eqlNASUserQuotaEffectiveRuleUserSoftLimitEnabled, eqlNASApplianceCompressionEnabled=eqlNASApplianceCompressionEnabled, eqlNASApplianceRowStatus=eqlNASApplianceRowStatus, eqlNASApplianceCIFSAntivirusLargeFileSize=eqlNASApplianceCIFSAntivirusLargeFileSize, eqlNASContainerStatusTable=eqlNASContainerStatusTable, eqlNASTaskSubTaskInProgress=eqlNASTaskSubTaskInProgress, eqlNASChassisPowerSupplyStatusEntry=eqlNASChassisPowerSupplyStatusEntry, eqlNASClientStaticRouteEntry=eqlNASClientStaticRouteEntry, eqlNASTaskTable=eqlNASTaskTable, eqlNASChassisControllerOverallFanStatus=eqlNASChassisControllerOverallFanStatus, eqlNASStatsControllerTrafficRateNfsReadMBsPerSec=eqlNASStatsControllerTrafficRateNfsReadMBsPerSec, eqlNASStatsControllerLoadBalancingIndex=eqlNASStatsControllerLoadBalancingIndex, eqlNASLostContainerEntry=eqlNASLostContainerEntry, eqlNASStatsClusterTrafficRateNetworkPacketDropsPerSec=eqlNASStatsClusterTrafficRateNetworkPacketDropsPerSec, eqlNASClientIPAddressType=eqlNASClientIPAddressType, eqlNASStatsClusterTrafficRateReplicationReadMBsPerSec=eqlNASStatsClusterTrafficRateReplicationReadMBsPerSec, eqlNASStatsClusterTrafficRateNdmpReadMBsPerSec=eqlNASStatsClusterTrafficRateNdmpReadMBsPerSec, eqlNASClientStaticRouteNetworkMaskType=eqlNASClientStaticRouteNetworkMaskType, eqlNASApplianceNFSLimitReportedSize=eqlNASApplianceNFSLimitReportedSize, eqlNASChassisControllerInternalNetworkStatus=eqlNASChassisControllerInternalNetworkStatus, eqlNASApplianceCIFSAntivirusExtensions=eqlNASApplianceCIFSAntivirusExtensions, eqlNASReplSiteRemoteClusterInetAddr=eqlNASReplSiteRemoteClusterInetAddr, eqlNASReplicationHistorySrcContainer=eqlNASReplicationHistorySrcContainer, EqlNASChassisControllerLocation=EqlNASChassisControllerLocation, eqlNASContainerCfgRowStatus=eqlNASContainerCfgRowStatus, eqlNASReplicationAction=eqlNASReplicationAction, eqlNASQuotaUsage=eqlNASQuotaUsage, eqlNASChassisControllerSanNetworkSpeed=eqlNASChassisControllerSanNetworkSpeed, eqlNASReplPartnerInfoMapClusterSanVIP=eqlNASReplPartnerInfoMapClusterSanVIP, eqlNASApplianceCIFSTable=eqlNASApplianceCIFSTable, eqlNASSnapshotPolicyEndTime=eqlNASSnapshotPolicyEndTime, eqlNASSnapshotPolicyIdx=eqlNASSnapshotPolicyIdx, eqlNASChassisName=eqlNASChassisName, eqlNASReplPartnerInfoMapClusterName=eqlNASReplPartnerInfoMapClusterName, eqlNASSnapshotIndex=eqlNASSnapshotIndex, eqlNASSanStaticRouteEntry=eqlNASSanStaticRouteEntry, eqlNASReplHistoryUniqueId=eqlNASReplHistoryUniqueId, eqlNASReplicationHistoryTransferredMb=eqlNASReplicationHistoryTransferredMb, eqlNASChassisControllerNicFlowControl=eqlNASChassisControllerNicFlowControl, eqlNASChassisInternalNetworkStatus=eqlNASChassisInternalNetworkStatus, eqlNASContainerDefaultGroupQuota=eqlNASContainerDefaultGroupQuota, eqlNASUserQuotaEffectiveRuleGroupSoftLimitEnabled=eqlNASUserQuotaEffectiveRuleGroupSoftLimitEnabled, eqlNASApplianceConfigUsedSpaceAlert=eqlNASApplianceConfigUsedSpaceAlert, eqlNASChassisControllerStatus=eqlNASChassisControllerStatus, eqlNASClusterUpdateClusterMPV=eqlNASClusterUpdateClusterMPV, eqlNASChassisControllerDiskStatusTable=eqlNASChassisControllerDiskStatusTable, eqlNASTaskSubtaskStatus=eqlNASTaskSubtaskStatus, eqlNASContainerAccessTimeManagementGranularity=eqlNASContainerAccessTimeManagementGranularity, eqlNASConfigStateConfigFinished=eqlNASConfigStateConfigFinished, eqlNASStatsControllerTrafficRateCifsIOPSWrite=eqlNASStatsControllerTrafficRateCifsIOPSWrite, eqlNASReplicationMinToComplete=eqlNASReplicationMinToComplete, eqlNASChassisControllerLocation=eqlNASChassisControllerLocation, eqlNASApplianceAntivirusHostPortNumber=eqlNASApplianceAntivirusHostPortNumber, eqlNASContainerOptimizationFilterMode=eqlNASContainerOptimizationFilterMode, CertificateType=CertificateType, eqlNASUserQuotaEffectiveRuleGroupSoftLimit=eqlNASUserQuotaEffectiveRuleGroupSoftLimit, eqlNASReplSiteAction=eqlNASReplSiteAction, eqlNASReplicationDestClusterName=eqlNASReplicationDestClusterName, eqlNASGroupQuotaEffectiveRuleHardLimitEnabled=eqlNASGroupQuotaEffectiveRuleHardLimitEnabled, eqlNASChassisControllerOverallPowerSupplyStatus=eqlNASChassisControllerOverallPowerSupplyStatus, eqlNASSnapshotPolicyName=eqlNASSnapshotPolicyName, eqlNASGroupQuotaEffectiveRuleTable=eqlNASGroupQuotaEffectiveRuleTable, eqlNASStatsClusterTrafficRateTotalSecondaryMBsPerSec=eqlNASStatsClusterTrafficRateTotalSecondaryMBsPerSec, eqlNASReplSiteRemoteNetworkAddrType=eqlNASReplSiteRemoteNetworkAddrType, EqlNASChassisComponentStatus=EqlNASChassisComponentStatus, eqlNASStatsControllerTrafficRateTimestamp=eqlNASStatsControllerTrafficRateTimestamp, eqlNASSnapshotPolicyEndDate=eqlNASSnapshotPolicyEndDate, eqlNASTaskContainerReplInfoLocalFSName=eqlNASTaskContainerReplInfoLocalFSName, eqlNASReplSitePassword=eqlNASReplSitePassword, eqlNASSnapshotTable=eqlNASSnapshotTable, eqlNASReplPartnerInfoMapClusterSanVIPType=eqlNASReplPartnerInfoMapClusterSanVIPType, eqlNASStatsClusterTrafficRateNetworkOverheadWriteMBsPerSec=eqlNASStatsClusterTrafficRateNetworkOverheadWriteMBsPerSec, eqlNASTaskStartTime=eqlNASTaskStartTime, eqlNASSnapshotPolicyEntry=eqlNASSnapshotPolicyEntry, eqlNASCacheInfoTable=eqlNASCacheInfoTable, eqlNASStatsClusterTrafficRateNfsReadMBsPerSec=eqlNASStatsClusterTrafficRateNfsReadMBsPerSec, eqlNASSanStaticRouteNetworkAddrType=eqlNASSanStaticRouteNetworkAddrType, eqlNASQuotaUsageRowStatus=eqlNASQuotaUsageRowStatus, eqlNASApplianceDefaultCIFSAntivirusExcludeDirPaths=eqlNASApplianceDefaultCIFSAntivirusExcludeDirPaths, eqlNASReplPartnerConfigCertificate=eqlNASReplPartnerConfigCertificate, eqlNASReplPartnerInfoMapNetworkAddr=eqlNASReplPartnerInfoMapNetworkAddr, eqlNASUserQuotaEffectiveRuleTargetName=eqlNASUserQuotaEffectiveRuleTargetName, eqlNASChassisFanStatus=eqlNASChassisFanStatus, eqlNASTaskContainerReplInfoRemoteClusterName=eqlNASTaskContainerReplInfoRemoteClusterName, eqlNASContainerFileAccessSecurity=eqlNASContainerFileAccessSecurity, eqlNASApplianceNFSAccessClientNetmaskType=eqlNASApplianceNFSAccessClientNetmaskType, eqlNASReplHistoryEntry=eqlNASReplHistoryEntry, EqlNASChassisACPowerStatus=EqlNASChassisACPowerStatus, eqlNASApplianceEntry=eqlNASApplianceEntry, eqlNASReplPartnerClusterIdMapSanVIP=eqlNASReplPartnerClusterIdMapSanVIP, eqlNASFSScanRate=eqlNASFSScanRate, eqlNASChassisControllerFanRpm=eqlNASChassisControllerFanRpm, eqlNASChassisPowerSupplyStatusTable=eqlNASChassisPowerSupplyStatusTable, eqlNASTaskIndex=eqlNASTaskIndex, eqlNASClusterInfoEntry=eqlNASClusterInfoEntry, eqlNASCacheInfoCacheObjectExpiryTime=eqlNASCacheInfoCacheObjectExpiryTime, eqlNASApplianceNFSExportName=eqlNASApplianceNFSExportName, eqlNASApplianceModificationTimeFilter=eqlNASApplianceModificationTimeFilter, eqlNASTaskNumSubTasks=eqlNASTaskNumSubTasks, eqlNASReplSiteRowStatus=eqlNASReplSiteRowStatus, eqlNASSnapshotPolicyTimeFrequency=eqlNASSnapshotPolicyTimeFrequency, eqlNASCacheInfoEntry=eqlNASCacheInfoEntry, eqlNASLostContainerRowStatus=eqlNASLostContainerRowStatus, eqlNASChassisControllerFanStatusTable=eqlNASChassisControllerFanStatusTable, eqlNASChassisControllerSanNetworkStatus=eqlNASChassisControllerSanNetworkStatus, eqlNASChassisFanStatusTable=eqlNASChassisFanStatusTable, eqlNASTaskContainerReplInfoRemoteFSName=eqlNASTaskContainerReplInfoRemoteFSName, eqlNASContainerStatusNumNFSExports=eqlNASContainerStatusNumNFSExports, eqlNASStatsControllerTrafficRateCifsIOPSOther=eqlNASStatsControllerTrafficRateCifsIOPSOther, eqlNASContainerCfgIndex=eqlNASContainerCfgIndex, eqlNASConfigStateTable=eqlNASConfigStateTable, eqlNASChassisFileSystemMember=eqlNASChassisFileSystemMember, eqlNASApplianceAntivirusHostTransactionState=eqlNASApplianceAntivirusHostTransactionState, eqlNASReplSiteLocalClusterInetAddrType=eqlNASReplSiteLocalClusterInetAddrType, eqlNASContainerCfgRequestId=eqlNASContainerCfgRequestId, eqlNASDiagsStatus=eqlNASDiagsStatus, eqlNASSanStaticRouteGatewayAddrType=eqlNASSanStaticRouteGatewayAddrType, eqlNASLostContainerTable=eqlNASLostContainerTable, eqlNASContainerStatusUsedSpace=eqlNASContainerStatusUsedSpace, eqlNASContainerUniqueIDValueLen=eqlNASContainerUniqueIDValueLen, eqlNASApplianceDefaultCfgTable=eqlNASApplianceDefaultCfgTable, eqlNASChassisControllerPowerSupplyName=eqlNASChassisControllerPowerSupplyName, eqlNASStatsClusterTrafficRateCifsIOPSOther=eqlNASStatsClusterTrafficRateCifsIOPSOther, eqlNASReplNextRecoveryTime=eqlNASReplNextRecoveryTime, eqlNASClientStaticRouteGatewayAddrType=eqlNASClientStaticRouteGatewayAddrType, eqlNASApplianceDefaultCIFSAntivirusLargeFileOpen=eqlNASApplianceDefaultCIFSAntivirusLargeFileOpen, EqlNASReplicationRole=EqlNASReplicationRole, EqlNASReplicationError=EqlNASReplicationError, eqlNASSnapshotPolicyCategory=eqlNASSnapshotPolicyCategory, eqlNASReplicationTransferredPer=eqlNASReplicationTransferredPer, eqlNASApplianceCIFSAntivirusEnabled=eqlNASApplianceCIFSAntivirusEnabled, eqlNASFSScanEntry=eqlNASFSScanEntry, eqlNASReplPartnerClusterIdMapTable=eqlNASReplPartnerClusterIdMapTable, eqlNASReplAction=eqlNASReplAction, eqlNASQuotaUsageEntry=eqlNASQuotaUsageEntry, eqlNASContainerStatusNumCIFSShares=eqlNASContainerStatusNumCIFSShares, eqlNASSnapshotPolicyStatusTable=eqlNASSnapshotPolicyStatusTable, eqlNASReplSiteTable=eqlNASReplSiteTable, eqlNASStatsControllerTrafficRateCifsReadMBsPerSec=eqlNASStatsControllerTrafficRateCifsReadMBsPerSec, eqlNASReplHistoryTransferredMb=eqlNASReplHistoryTransferredMb, eqlNASTaskContext=eqlNASTaskContext, eqlNASChassisOverallControllerStatus=eqlNASChassisOverallControllerStatus, eqlNASContainerRehydrateOnReadEnabled=eqlNASContainerRehydrateOnReadEnabled, eqlNASTaskContainerReplInfoVolumeReplSiteIndex=eqlNASTaskContainerReplInfoVolumeReplSiteIndex, eqlNASStatsControllerTrafficRateNdmpWriteMBsPerSec=eqlNASStatsControllerTrafficRateNdmpWriteMBsPerSec, eqlNASChassisControllerBPSModel=eqlNASChassisControllerBPSModel, eqlNASReplSiteRemoteClusterId=eqlNASReplSiteRemoteClusterId, eqlNASReplicationHistoryEntry=eqlNASReplicationHistoryEntry, eqlNASChassisInternalNetworkSpeed=eqlNASChassisInternalNetworkSpeed, eqlNASQuotaUsageTable=eqlNASQuotaUsageTable, eqlNASReplicationSourceClusterName=eqlNASReplicationSourceClusterName, eqlNASChassisControllerNicStatusTable=eqlNASChassisControllerNicStatusTable, eqlNASChassisChassisTag=eqlNASChassisChassisTag, eqlNASContainerDirectoryOpsTable=eqlNASContainerDirectoryOpsTable, eqlNASAppliancePoolSize=eqlNASAppliancePoolSize, eqlNASTaskContainerReplInfoRowStatus=eqlNASTaskContainerReplInfoRowStatus, eqlNASReplPartnerConfigInetAddrType=eqlNASReplPartnerConfigInetAddrType, eqlNASReplHistoryStartTime=eqlNASReplHistoryStartTime, eqlNASReplicationId=eqlNASReplicationId, eqlNASClientIdleTime=eqlNASClientIdleTime, NASContainerNameType=NASContainerNameType, eqlNASClusterUpdateEQLGroupCurrentCompLevel=eqlNASClusterUpdateEQLGroupCurrentCompLevel, eqlNASClusterInfoSiteType=eqlNASClusterInfoSiteType, eqlNASReplRemoteFSName=eqlNASReplRemoteFSName, eqlNASContainerDirectoryRowStatus=eqlNASContainerDirectoryRowStatus, eqlNASReplSiteRemoteNetworkMask=eqlNASReplSiteRemoteNetworkMask, eqlNASStatsControllerTrafficRateEntry=eqlNASStatsControllerTrafficRateEntry, eqlNASClusterInfoClusterId=eqlNASClusterInfoClusterId, eqlNASContainerAction=eqlNASContainerAction, eqlNASReplRowStatus=eqlNASReplRowStatus, eqlNASStatsClusterTrafficRateEntry=eqlNASStatsClusterTrafficRateEntry, eqlNASSnapshotPolicyRowStatus=eqlNASSnapshotPolicyRowStatus, eqlNASApplianceDefaultUserQuota=eqlNASApplianceDefaultUserQuota, eqlNASContainerStatusNextSnapshotID=eqlNASContainerStatusNextSnapshotID, eqlNASReplPartnerInfoMapClusterId=eqlNASReplPartnerInfoMapClusterId, eqlNASClusterInfoCertificate=eqlNASClusterInfoCertificate, eqlNASCacheInfoCacheObjectState=eqlNASCacheInfoCacheObjectState)
mibBuilder.exportSymbols("EQLNAS-MIB", eqlNASStatsControllerTrafficRateNfsIOPSWrite=eqlNASStatsControllerTrafficRateNfsIOPSWrite, eqlNASReplicationHistoryEndTime=eqlNASReplicationHistoryEndTime, eqlNASChassisControllerMemorySize=eqlNASChassisControllerMemorySize, eqlNASReplSiteEntry=eqlNASReplSiteEntry, eqlNASApplianceCIFSAllowGuestAccess=eqlNASApplianceCIFSAllowGuestAccess, eqlNASClusterInfoMoreSegment=eqlNASClusterInfoMoreSegment, eqlNASApplianceNFSExportsRowStatus=eqlNASApplianceNFSExportsRowStatus, eqlNASApplianceAntivirusHostEntry=eqlNASApplianceAntivirusHostEntry, eqlNASStatsControllerTrafficRateIndex=eqlNASStatsControllerTrafficRateIndex, eqlNASReplicationLastRecoveryTime=eqlNASReplicationLastRecoveryTime, eqlNASUserQuotaEffectiveRuleGroupHardLimit=eqlNASUserQuotaEffectiveRuleGroupHardLimit, eqlNASReplicationDestFSName=eqlNASReplicationDestFSName, eqlNASContainerStatusFreeSpace=eqlNASContainerStatusFreeSpace, eqlNASClientNodeIndex=eqlNASClientNodeIndex, eqlNASClientConnectedTime=eqlNASClientConnectedTime, eqlNASApplianceCIFSAntivirusExtensionsPolicy=eqlNASApplianceCIFSAntivirusExtensionsPolicy, eqlNASContainerUniqueIDTable=eqlNASContainerUniqueIDTable, eqlNASSnapshotEntry=eqlNASSnapshotEntry, eqlNASStatsControllerTrafficRateNfsIOPSRead=eqlNASStatsControllerTrafficRateNfsIOPSRead, eqlNASApplianceDefaultCIFSAntivirusExtensionsPolicy=eqlNASApplianceDefaultCIFSAntivirusExtensionsPolicy, eqlNASApplianceDefaultGroupQuotaAlert=eqlNASApplianceDefaultGroupQuotaAlert, eqlNASReplHistorySourceContainerName=eqlNASReplHistorySourceContainerName, eqlNASStatsControllerTrafficRateNfsIOPSOther=eqlNASStatsControllerTrafficRateNfsIOPSOther, eqlNASChassisControllerMemoryStatus=eqlNASChassisControllerMemoryStatus, EqlNASChassisControllerState=EqlNASChassisControllerState, eqlNASChassisControllerOverallRaidControllerStatus=eqlNASChassisControllerOverallRaidControllerStatus, eqlNASStatsClusterTrafficRateCifsReadMBsPerSec=eqlNASStatsClusterTrafficRateCifsReadMBsPerSec, eqlNASReplTransferredMB=eqlNASReplTransferredMB, eqlNASReplRemoteFSId=eqlNASReplRemoteFSId, eqlNASClientStaticRouteNetworkAddr=eqlNASClientStaticRouteNetworkAddr, eqlNASGroupQuotaEffectiveRuleRowStatus=eqlNASGroupQuotaEffectiveRuleRowStatus, eqlNASTaskType=eqlNASTaskType, eqlNASStatsControllerTrafficRateTable=eqlNASStatsControllerTrafficRateTable, eqlNASChassisControllerDiskStatusEntry=eqlNASChassisControllerDiskStatusEntry, eqlNASSnapshotName=eqlNASSnapshotName, eqlNASStatsControllerTrafficRateTotalPrimaryMBsPerSec=eqlNASStatsControllerTrafficRateTotalPrimaryMBsPerSec, eqlNASApplianceConfigSnapSpaceAlert=eqlNASApplianceConfigSnapSpaceAlert, eqlNASChassisControllerFanStatusEntry=eqlNASChassisControllerFanStatusEntry, eqlNASReplSiteRemoteClusterMPV=eqlNASReplSiteRemoteClusterMPV, eqlNASClusterUpdateEQLGroupMPV=eqlNASClusterUpdateEQLGroupMPV, eqlNASStatsClusterTrafficRateNetworkOverheadReadMBsPerSec=eqlNASStatsClusterTrafficRateNetworkOverheadReadMBsPerSec, eqlNASReplCurrentXferRateKbps=eqlNASReplCurrentXferRateKbps, eqlNASReplPartnerConfigTable=eqlNASReplPartnerConfigTable, eqlNASSnapshotPolicyStartDate=eqlNASSnapshotPolicyStartDate, eqlNASUserQuotaEffectiveRuleUserSoftLimit=eqlNASUserQuotaEffectiveRuleUserSoftLimit, eqlNASReplHistoryEndTime=eqlNASReplHistoryEndTime, eqlNASReplSiteRemotePassword=eqlNASReplSiteRemotePassword, eqlNASDiagsTable=eqlNASDiagsTable, eqlNASChassisFanRpmRange=eqlNASChassisFanRpmRange)
