#
# PySNMP MIB module XUPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/eaton/XUPS-MIB
# Produced by pysmi-1.1.12 at Thu May 30 02:15:25 2024
# On host fv-az1567-87 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
xupsEnvRemoteHumidityUpperLimit, xupsContactType, xupsEnvRemoteTempLowerLimit, xupsContactIndex, xupsEnvRemoteTemp, xupsContactDescr, xupsEnvRemoteTempUpperLimit, xupsContactState, xupsEnvRemoteHumidity, xupsEnvRemoteHumidityLowerLimit = mibBuilder.importSymbols("EATON-EMP-MIB", "xupsEnvRemoteHumidityUpperLimit", "xupsContactType", "xupsEnvRemoteTempLowerLimit", "xupsContactIndex", "xupsEnvRemoteTemp", "xupsContactDescr", "xupsEnvRemoteTempUpperLimit", "xupsContactState", "xupsEnvRemoteHumidity", "xupsEnvRemoteHumidityLowerLimit")
eaton, xupsEnvironment = mibBuilder.importSymbols("EATON-OIDS", "eaton", "xupsEnvironment")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
IpAddress, NotificationType, Unsigned32, Gauge32, Integer32, Bits, MibIdentifier, ModuleIdentity, Counter32, TimeTicks, Counter64, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "Unsigned32", "Gauge32", "Integer32", "Bits", "MibIdentifier", "ModuleIdentity", "Counter32", "TimeTicks", "Counter64", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xupsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 534, 1))
xupsMIB.setRevisions(('2019-09-27 00:00', '2019-09-12 00:00', '2019-09-10 00:00', '2019-04-12 00:00', '2019-03-05 00:00', '2019-02-19 00:00', '2018-09-12 00:00', '2018-04-23 00:00', '2012-11-26 15:13', '2012-04-03 00:00', '2011-02-25 00:00', '2008-10-02 00:00', '2007-05-03 00:00', '2007-03-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: xupsMIB.setRevisionsDescriptions(('xupsOutputSource data can monitor the ESS mode.', 'Provide new data that reflects some battery alarm : xupsBatteryFailure,\n         xupsBatteryNotPresent, xupsBatteryAged, xupsBatteryLowCapacity.', 'Change the data xupsBatteryLastReplacedDate to read-only because the card\n         sets it automatically when the battery replacement is detected.', "Provide the status of the main AC Input in xupsInputStatus.\n         Provide the status of the AC Output in xupsOutputStatus and a new trap\n         and alarm 'load not protected' in xupsOutputNotProtected.", 'Provide more UPS identification data as xupsIdentPartNumber and xupsIdentSerialNumber.\n         Provide a collection xupsAgent that contains identification data of the card :\n         xupsAgentManufacturer, xupsAgentModel, xupsAgentSoftwareVersion, xupsAgentPartNumber,\n         xupsAgentSerialNumber', 'To ensure consistency whith the measures done on the UPS, the data following are renamed :\n         xupsInputAverageCurrent to xupsInputTotalCurrent,\n         xupsOutputAverageCurrent to xupsOutputTotalCurrent,\n         xupsBypassAverageCurrent to xupsBypassTotalCurrent.', 'Add new data xupsInputId, xupsInputName, xupsInputCurrentHighPrecision in the table xupsInputTable.\n         Add new sub collection xupsInputTotal with xupsInputAverageVoltage, xupsInputAverageCurrent,\n         xupsInputTotalWatts, xupsInputTotalVA, xupsInputAveragePowerFactor inside.\n         Add new data xupsOutputId, xupsOutputName, xupsOutputCurrentHighPrecision,\n         xupsOutputPercentLoad, xupsOutputVA in the table xupsOutputTable.\n         Add new sub collection xupsOutputTotal with xupsOutputAverageVoltage, xupsOutputAverageCurrent,\n         xupsOutputTotalWatts, xupsOutputTotalVA, xupsOutputAveragePowerFactor inside.\n         Add new data xupsBypassId, xupsBypassName, xupsBypassCurrentHighPrecision,\n         xupsBypassWatts in the table xupsBypassTable.\n         Add new sub collection xupsBypassTotal with xupsBypassTotalAverageVoltage, xupsBypassAverageCurrent,\n         xupsBypassTotalWatts, xupsBypassTotalVA, xupsBypassTotalAverageFactor inside.', 'Add new data xupsTestTrap, xupstdTestTrap that will allow to initiate a \n         test trap sent out from the agent to the trap receivers.', 'Add the identifier of measures xupsInputId, xupsOutputId and xupsBypassId,\n         respectively in the table xupsInputTable, xupsOutputTable and xupsBypassTable.', 'Add new data xupsOutputHourlyPowerUsage, xupsOutputCumulativePowerUsage,\n         and xupsOutputCumulativePowerUsageTimer into the collection xupsOutput.\n         Add new data xupsRecepHourlyPowerUsage, xupsRecepCumulativePowerUsage,\n         and xupsRecepCumulativePowerUsageTimer into the collection xupsRecepTable.', 'Add new data xupsSwitchable', 'Added new values of batteryDisconnected(6), batteryUnderTest(7), \n             and checkBattery(8)  to xupsBatteryAbmStatus.', 'Added new value of pxg(5) to xupsSendTrapType\n             for Power Xpert Gateway implementations.', 'Initial SNMPv2-SMI-compliant Version of PowerMIB.\n             Incorporates all revisions of the original xups\n             MIB file through Version 3.13 21-May-04.',))
if mibBuilder.loadTexts: xupsMIB.setLastUpdated('201909270000Z')
if mibBuilder.loadTexts: xupsMIB.setOrganization('Eaton Corporation')
if mibBuilder.loadTexts: xupsMIB.setContactInfo('Eaton Power Quality Technical Support (PQTS) group\n            www.eaton.com/powerxpert \n            Technical Resource Center phone numbers \n            United States:  1.800.843.9433 or 919.870.3028\n            Canada:  1.800.461.9166 ext. 260\n            All other countries:  Call your local service representative.')
if mibBuilder.loadTexts: xupsMIB.setDescription("Defines Eaton's proprietary PowerMIB for UPS and\n             related device data.\n\n            Copyright (C) Exide Electronics 1992-98\n            Copyright (C) Powerware Corporation 1999-2004\n            Copyright (C) Eaton Corporation (2005-).")
xupsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 1))
xupsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 2))
xupsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 3))
xupsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 4))
xupsBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 5))
xupsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7))
xupsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 8))
xupsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 9))
xupsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 10))
xupsTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 11))
xupsRecep = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 12))
xupsTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 13))
xupsAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 14))
xupsInputTotal = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 3, 8))
xupsOutputTotal = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 4, 9))
xupsBypassTotal = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 5, 4))
xupsIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsIdentManufacturer.setStatus('current')
if mibBuilder.loadTexts: xupsIdentManufacturer.setDescription('The UPS Manufacturer Name (e.g. Eaton Corporation).')
xupsIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsIdentModel.setStatus('current')
if mibBuilder.loadTexts: xupsIdentModel.setDescription('The UPS Model (e.g. Powerware Plus Model 18).')
xupsIdentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsIdentSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: xupsIdentSoftwareVersion.setDescription('The firmware revision level(s) of the UPS microcontroller(s).')
xupsIdentOemCode = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsIdentOemCode.setStatus('current')
if mibBuilder.loadTexts: xupsIdentOemCode.setDescription('A binary code indicating who the UPS was manufactured or labeled for.  \n         0 or 255 indicates Eaton itself.')
xupsIdentPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsIdentPartNumber.setStatus('current')
if mibBuilder.loadTexts: xupsIdentPartNumber.setDescription('The catalog part number of the UPS device.')
xupsIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsIdentSerialNumber.setStatus('current')
if mibBuilder.loadTexts: xupsIdentSerialNumber.setDescription('The serial number of the UPS device.')
xupsBatTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatTimeRemaining.setStatus('current')
if mibBuilder.loadTexts: xupsBatTimeRemaining.setDescription('Battery run time in seconds before UPS turns off due\n         to low battery.')
xupsBatVoltage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Volts DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatVoltage.setStatus('current')
if mibBuilder.loadTexts: xupsBatVoltage.setDescription('Battery voltage as reported by the UPS meters.')
xupsBatCurrent = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setUnits('Amps DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatCurrent.setStatus('current')
if mibBuilder.loadTexts: xupsBatCurrent.setDescription('Battery Current as reported by the UPS metering.\n         Current is positive when discharging, negative\n         when recharging the battery.')
xupsBatCapacity = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatCapacity.setStatus('current')
if mibBuilder.loadTexts: xupsBatCapacity.setDescription('Battery percent charge.')
xupsBatteryAbmStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("batteryCharging", 1), ("batteryDischarging", 2), ("batteryFloating", 3), ("batteryResting", 4), ("unknown", 5), ("batteryDisconnected", 6), ("batteryUnderTest", 7), ("checkBattery", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatteryAbmStatus.setStatus('current')
if mibBuilder.loadTexts: xupsBatteryAbmStatus.setDescription('Gives the status of the Advanced Battery Management and Battery state;\n     batteryFloating(3) status means that the charger is temporarily \n     charging the battery to its float voltage; batteryResting(4) is the \n     state when the battery is fully charged and none of the other actions \n     (charging/discharging/floating) is being done.\n     checkBattery(8) indicates that the Battery state is uncertain\n     following a poor battery test result.')
xupsBatteryLastReplacedDate = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatteryLastReplacedDate.setStatus('current')
if mibBuilder.loadTexts: xupsBatteryLastReplacedDate.setDescription('The date when the Batteries in this UPS were last replaced. Free text format,\n     so the preferred local date format may be used (MM/DD/YYYY, DD-Mon-YYYY, etc).')
xupsBatteryFailure = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatteryFailure.setStatus('current')
if mibBuilder.loadTexts: xupsBatteryFailure.setDescription('Indicates if a battery fault detected or battery tests failed.')
xupsBatteryNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatteryNotPresent.setStatus('current')
if mibBuilder.loadTexts: xupsBatteryNotPresent.setDescription('Indicates if the UPS has no battery either internal or external.')
xupsBatteryAged = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatteryAged.setStatus('current')
if mibBuilder.loadTexts: xupsBatteryAged.setDescription('Indicates if the battery is over aged.')
xupsBatteryLowCapacity = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatteryLowCapacity.setStatus('current')
if mibBuilder.loadTexts: xupsBatteryLowCapacity.setDescription('Indicates if the battery capacity is below the threshold set in the UPS.')
xupsInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputFrequency.setStatus('current')
if mibBuilder.loadTexts: xupsInputFrequency.setDescription('The utility line frequency in tenths of Hz.')
xupsInputLineBads = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputLineBads.setStatus('current')
if mibBuilder.loadTexts: xupsInputLineBads.setDescription('The number of times the Input was out of tolerance\n         in voltage or frequency.')
xupsInputNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputNumPhases.setStatus('current')
if mibBuilder.loadTexts: xupsInputNumPhases.setDescription('The number of input phases (normally 1 to 3).')
xupsInputTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 3, 4), )
if mibBuilder.loadTexts: xupsInputTable.setStatus('current')
if mibBuilder.loadTexts: xupsInputTable.setDescription('A list of input table entries.  The number of entries\n        is given by the value of xupsInputNumPhases.')
xupsInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1), ).setIndexNames((0, "XUPS-MIB", "xupsInputPhase"))
if mibBuilder.loadTexts: xupsInputEntry.setStatus('current')
if mibBuilder.loadTexts: xupsInputEntry.setDescription('The input table entry containing the current,\n         voltage, etc. readings for one phase.')
xupsInputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputPhase.setStatus('current')
if mibBuilder.loadTexts: xupsInputPhase.setDescription('The number of the phase.  Serves as index for input table.')
xupsInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputVoltage.setStatus('current')
if mibBuilder.loadTexts: xupsInputVoltage.setDescription('The measured input voltage from the UPS meters in volts.')
xupsInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputCurrent.setStatus('current')
if mibBuilder.loadTexts: xupsInputCurrent.setDescription('The measured input current from the UPS meters in amps.')
xupsInputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputWatts.setStatus('current')
if mibBuilder.loadTexts: xupsInputWatts.setDescription('The measured input real power in watts.')
xupsInputId = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1toN", 1), ("phase2toN", 2), ("phase3toN", 3), ("phase1to2", 4), ("phase2to3", 5), ("phase3to1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputId.setStatus('current')
if mibBuilder.loadTexts: xupsInputId.setDescription('value indicates what measurement is being stored in this table row :\n\t\tphase1 to neutral, phase2 to neutral, phase3 to neutral,\n\t\tphase1 to phase2, phase2 to phase3, phase3 to phase1.')
xupsInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputName.setStatus('current')
if mibBuilder.loadTexts: xupsInputName.setDescription('A descriptive name for the phase, example : L1/A for the phase 1.')
xupsInputCurrentHighPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS tenth of Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputCurrentHighPrecision.setStatus('current')
if mibBuilder.loadTexts: xupsInputCurrentHighPrecision.setDescription('The measured input current from the UPS meters in tenth of amps.')
xupsInputSource = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("primaryUtility", 3), ("bypassFeed", 4), ("secondaryUtility", 5), ("generator", 6), ("flywheel", 7), ("fuelcell", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputSource.setStatus('current')
if mibBuilder.loadTexts: xupsInputSource.setDescription("The present external source of input power.  The enumeration\n        'none(2)' indicates that there is no external source of \n        power, for example, the UPS is On Battery (an internal source).\n\t\t'primaryUtility' indicates the normal case of utility input power.\n        The 'bypassFeed' can only be used when the Bypass source is known\n        to be a separate utility feed than the primaryUtility(3).\n\t\t'secondaryUtility' indicates that a secondary utility feed is supplying\n\t\tpower (on a dual AC input UPS).\n        'generator' indicates that input power is provided by a generator.\n\t\tNote that the alternate energy sources of 'flywheel' and 'fuelcell' are \n\t\tnot necessarily AC input sources.")
xupsDualInputStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bothSourcesBad", 1), ("primarySourceGood", 2), ("secondarySourceGood", 3), ("bothSourcesGood", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsDualInputStatus.setStatus('current')
if mibBuilder.loadTexts: xupsDualInputStatus.setDescription("The present status of the sources of input power in a dual source UPS.  \n        The enumeration primarySourceGood(2) indicates that the primary source\n        of power is present and within 'normal' ranges for voltage and\n        frequency, but the secondary source is either not present or not in an\n        acceptable range.\n\t\t'secondarySourceGood' indicates that only the Secondary power feed is \n\t\tavailable and within its limits.\n        The enumeration bothSourcesGood(4) indicates that both sources are present\n        and within their respective 'normal' ranges; \n        bothSourcesBad(1) indicates that neither source is present, or, if present, \n        is not within acceptable ranges.\n        This object will only be implemented for UPSs with two sources of input\n        power, e.g., redundant AC feeds or a separate Bypass or Generator source.\n        The secondary source will not be an AC power source in all cases.")
xupsSecondaryInputWatch = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsSecondaryInputWatch.setStatus('current')
if mibBuilder.loadTexts: xupsSecondaryInputWatch.setDescription('This object enables(2) or disables(1) the alarms and traps related to the\n        availability and use of the secondary input of a dual-input UPS\n        (i.e., OnAlternatePowerSource and AltPowerNotAvailable).\n        To avoid nuisance alarms and traps, this object should be set to  \n        disabled(1) when the UPS is not wired to a secondary source of power.\n        This object will only be implemented for UPSs with two sources of input\n        power, i.e., redundant AC feeds or a separate Bypass or Generator source.')
xupsInputAverageVoltage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputAverageVoltage.setStatus('current')
if mibBuilder.loadTexts: xupsInputAverageVoltage.setDescription('The measured input voltage from the UPS meters in volts.\n         Related to the phase 1 if the UPS is single phase,\n         either it is average of all the simple phase voltage.')
xupsInputTotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS tenth of Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputTotalCurrent.setStatus('current')
if mibBuilder.loadTexts: xupsInputTotalCurrent.setDescription('The measured input current from the UPS meters in tenth of amps.\n         Related to the phase 1 if the UPS is single phase,\n         either it is average of all the simple phase current.')
xupsInputTotalWatts = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputTotalWatts.setStatus('current')
if mibBuilder.loadTexts: xupsInputTotalWatts.setDescription('The measured input active power in watts.\n         Sum of all the simple phase watts.')
xupsInputTotalVA = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputTotalVA.setStatus('current')
if mibBuilder.loadTexts: xupsInputTotalVA.setDescription('The measured input apparent power in VA.\n         Sum of all the simple phase VA.')
xupsInputAveragePowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputAveragePowerFactor.setStatus('current')
if mibBuilder.loadTexts: xupsInputAveragePowerFactor.setDescription('Indicates the total power factor of the input in hundredths.\n       0.92 would be returned as 92.')
xupsInputStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inputBad", 1), ("inputGood", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputStatus.setStatus('current')
if mibBuilder.loadTexts: xupsInputStatus.setDescription("The present status of the primary AC input of the UPS.\n        The enumeration inputGood(2) indicates that the primary source\n        of power is present and within 'normal' ranges for voltage and\n        frequency.\n        inputBad(1) indicates that neither source is present, or, if present,\n        is not within acceptable ranges.")
xupsOutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputLoad.setStatus('current')
if mibBuilder.loadTexts: xupsOutputLoad.setDescription('The UPS output load in percent of rated capacity.')
xupsOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputFrequency.setStatus('current')
if mibBuilder.loadTexts: xupsOutputFrequency.setDescription('The measured UPS output frequency in tenths of Hz.')
xupsOutputNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputNumPhases.setStatus('current')
if mibBuilder.loadTexts: xupsOutputNumPhases.setDescription('The number of metered output phases.')
xupsOutputTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 4, 4), )
if mibBuilder.loadTexts: xupsOutputTable.setStatus('current')
if mibBuilder.loadTexts: xupsOutputTable.setDescription('A list of output table entries.  The number of entries\n        is given by the value of xupsOutputNumPhases.')
xupsOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1), ).setIndexNames((0, "XUPS-MIB", "xupsOutputPhase"))
if mibBuilder.loadTexts: xupsOutputEntry.setStatus('current')
if mibBuilder.loadTexts: xupsOutputEntry.setDescription('Output Table Entry containing voltage, current, etc.')
xupsOutputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputPhase.setStatus('current')
if mibBuilder.loadTexts: xupsOutputPhase.setDescription('The number of the phase.  Serves as index for output table.')
xupsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputVoltage.setStatus('current')
if mibBuilder.loadTexts: xupsOutputVoltage.setDescription('The measured output voltage from the UPS metering in volts.')
xupsOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputCurrent.setStatus('current')
if mibBuilder.loadTexts: xupsOutputCurrent.setDescription('The measured UPS output current in amps.')
xupsOutputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputWatts.setStatus('current')
if mibBuilder.loadTexts: xupsOutputWatts.setDescription('The measured real output power in watts.')
xupsOutputId = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1toN", 1), ("phase2toN", 2), ("phase3toN", 3), ("phase1to2", 4), ("phase2to3", 5), ("phase3to1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputId.setStatus('current')
if mibBuilder.loadTexts: xupsOutputId.setDescription('value indicates what measurement is being stored in this table row :\n\t\tphase1 to neutral, phase2 to neutral, phase3 to neutral,\n\t\tphase1 to phase2, phase2 to phase3, phase3 to phase1. ')
xupsOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputName.setStatus('current')
if mibBuilder.loadTexts: xupsOutputName.setDescription('A descriptive name for the phase.')
xupsOutputCurrentHighPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS tenth of Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputCurrentHighPrecision.setStatus('current')
if mibBuilder.loadTexts: xupsOutputCurrentHighPrecision.setDescription('The measured output current from the UPS meters in tenth of amps.')
xupsOutputPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputPercentLoad.setStatus('current')
if mibBuilder.loadTexts: xupsOutputPercentLoad.setDescription('The percentage of the UPS power capacity presently\n         being used on this output line')
xupsOutputVA = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputVA.setStatus('current')
if mibBuilder.loadTexts: xupsOutputVA.setDescription('The measured apparent output power in VA.')
xupsOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("normal", 3), ("bypass", 4), ("battery", 5), ("booster", 6), ("reducer", 7), ("parallelCapacity", 8), ("parallelRedundant", 9), ("highEfficiencyMode", 10), ("maintenanceBypass", 11), ("essMode", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputSource.setStatus('current')
if mibBuilder.loadTexts: xupsOutputSource.setDescription("The present source of output power.  The enumeration\n        none(2) indicates that there is no source of output\n        power (and therefore no output power), for example,\n        the system has opened the output breaker.\n\t\t'normal', 'bypass', and 'battery' indicate those common UPS statuses.\n\t\t'booster' and 'reducer' indicate boost or buck operation, for \n\t\tline-interactive UPSs only.\n\t\t'parallelCapacity' and 'parallelRedundant' indicate a normal parallel\n\t\tUPS system, in either Parallel for Capacity or Redundancy configuration.\n\t\t'highEfficiencyMode' is normal but enhanced by High Efficiency mode.\n\t\t'maintenanceBypass' indicates that the UPS is in Maintenance/Manual \n\t\tBypass mode.\n\t\t'essMode' is normal but enhanced by Energy Saver System.\n\t\t'other' covers any other, unusual conditions.")
xupsOutputHourlyPowerUsage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Wh').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputHourlyPowerUsage.setStatus('current')
if mibBuilder.loadTexts: xupsOutputHourlyPowerUsage.setDescription('Units are Watt-hours.This is the energy consumed during the last hour.')
xupsOutputCumulativePowerUsage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Wh').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsOutputCumulativePowerUsage.setStatus('current')
if mibBuilder.loadTexts: xupsOutputCumulativePowerUsage.setDescription('Units are Watt-hours.This is the energy consumed since the last reset.\n         This object is writable so that it can be reset to 0.\n         When it is written to 0, the xupsOutputCumulativeWhTimer will be reset to 0 as well.')
xupsOutputCumulativePowerUsageTimer = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 8), Counter32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputCumulativePowerUsageTimer.setStatus('current')
if mibBuilder.loadTexts: xupsOutputCumulativePowerUsageTimer.setDescription('Time in seconds since the cumulative power usage was last reset.')
xupsOutputAverageVoltage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputAverageVoltage.setStatus('current')
if mibBuilder.loadTexts: xupsOutputAverageVoltage.setDescription('The measured output voltage from the UPS meters in volts.\n         Related to the phase 1 if the UPS is single phase,\n         either it is average of all the simple phase voltage.')
xupsOutputTotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS tenth of Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputTotalCurrent.setStatus('current')
if mibBuilder.loadTexts: xupsOutputTotalCurrent.setDescription('The measured output current from the UPS meters in tenth of amps.\n         Related to the phase 1 if the UPS is single phase,\n         either it is average of all the simple phase current.')
xupsOutputTotalWatts = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputTotalWatts.setStatus('current')
if mibBuilder.loadTexts: xupsOutputTotalWatts.setDescription('The measured output active power in watts.\n         Sum of all the simple phase watts.')
xupsOutputTotalVA = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputTotalVA.setStatus('current')
if mibBuilder.loadTexts: xupsOutputTotalVA.setDescription('The measured output apparent power in VA.\n         Sum of all the simple phase VA.')
xupsOutputAveragePowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputAveragePowerFactor.setStatus('current')
if mibBuilder.loadTexts: xupsOutputAveragePowerFactor.setDescription('Indicates the total power factor of the output in hundredths.\n       0.92 would be returned as 92.')
xupsOutputStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outputNotPowered", 1), ("outputNotProtected", 2), ("outputProtected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputStatus.setStatus('current')
if mibBuilder.loadTexts: xupsOutputStatus.setDescription('The present status of the AC output of the UPS.  \n        The enumeration outputNotPowered(1) indicates that the output is not powered.\n        outputNotProtected(2) indicates that the output is powered but not protected,\n        due to following reasons : On bypass, battery fault, or UPS internal failure\n        that makes the ups will be inoperant in case of AC input failure.\n        outputProtected(3) indicates that the output is powered and protected.')
xupsBypassFrequency = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassFrequency.setStatus('current')
if mibBuilder.loadTexts: xupsBypassFrequency.setDescription('The bypass frequency in tenths of Hz.')
xupsBypassNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassNumPhases.setStatus('current')
if mibBuilder.loadTexts: xupsBypassNumPhases.setDescription('The number of lines in the UPS bypass table.')
xupsBypassTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 5, 3), )
if mibBuilder.loadTexts: xupsBypassTable.setStatus('current')
if mibBuilder.loadTexts: xupsBypassTable.setDescription('A list of bypass table entries.  The number of entries\n        is given by the value of xupsBypassNumPhases.')
xupsBypassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 5, 3, 1), ).setIndexNames((0, "XUPS-MIB", "xupsBypassPhase"))
if mibBuilder.loadTexts: xupsBypassEntry.setStatus('current')
if mibBuilder.loadTexts: xupsBypassEntry.setDescription('Bypass Table Entry containing voltage for each phase.')
xupsBypassPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassPhase.setStatus('current')
if mibBuilder.loadTexts: xupsBypassPhase.setDescription('The Bypass Phase, index for the table.')
xupsBypassVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassVoltage.setStatus('current')
if mibBuilder.loadTexts: xupsBypassVoltage.setDescription('The measured UPS bypass voltage in volts.')
xupsBypassId = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1toN", 1), ("phase2toN", 2), ("phase3toN", 3), ("phase1to2", 4), ("phase2to3", 5), ("phase3to1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassId.setStatus('current')
if mibBuilder.loadTexts: xupsBypassId.setDescription('value indicates what measurement is being stored in this table row :\n\t\tphase1 to neutral, phase2 to neutral, phase3 to neutral,\n\t\tphase1 to phase2, phase2 to phase3, phase3 to phase1. ')
xupsBypassName = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 5, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassName.setStatus('current')
if mibBuilder.loadTexts: xupsBypassName.setDescription('A descriptive name for the phase.')
xupsBypassCurrentHighPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS tenth of Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassCurrentHighPrecision.setStatus('current')
if mibBuilder.loadTexts: xupsBypassCurrentHighPrecision.setDescription('The measured bypass current from the UPS meters in tenth of amps.')
xupsBypassWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassWatts.setStatus('current')
if mibBuilder.loadTexts: xupsBypassWatts.setDescription('The measured real bypass power in watts.')
xupsBypassAverageVoltage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassAverageVoltage.setStatus('current')
if mibBuilder.loadTexts: xupsBypassAverageVoltage.setDescription('The measured bypass voltage from the UPS meters in volts.\n         Related to the phase 1 if the UPS is single phase,\n         either it is average of all the simple phase voltage.')
xupsBypassTotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 5, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS tenth of Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassTotalCurrent.setStatus('current')
if mibBuilder.loadTexts: xupsBypassTotalCurrent.setDescription('The measured bypass current from the UPS meters in tenth of amps.\n         Related to the phase 1 if the UPS is single phase,\n         either it is average of all the simple phase current.')
xupsBypassTotalWatts = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 5, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassTotalWatts.setStatus('current')
if mibBuilder.loadTexts: xupsBypassTotalWatts.setDescription('The measured bypass active power in watts.\n         Sum of all the simple phase watts.')
xupsBypassTotalVA = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 5, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassTotalVA.setStatus('current')
if mibBuilder.loadTexts: xupsBypassTotalVA.setDescription('The measured output apparent power in VA.\n         Sum of all the simple phase VA.')
xupsBypassAveragePowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassAveragePowerFactor.setStatus('current')
if mibBuilder.loadTexts: xupsBypassAveragePowerFactor.setDescription('Indicates the total power factor of the input in hundredths.\n       0.92 would be returned as 92.')
xupsEnvAmbientTemp = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsEnvAmbientTemp.setStatus('current')
if mibBuilder.loadTexts: xupsEnvAmbientTemp.setDescription('The reading of the ambient temperature in the vicinity of the \n        UPS or SNMP agent.')
xupsEnvAmbientLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsEnvAmbientLowerLimit.setStatus('current')
if mibBuilder.loadTexts: xupsEnvAmbientLowerLimit.setDescription('The Lower Limit of the ambient temperature; if xupsEnvAmbientTemp \n        falls below this value, the xupsAmbientTempBad alarm will occur.')
xupsEnvAmbientUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsEnvAmbientUpperLimit.setStatus('current')
if mibBuilder.loadTexts: xupsEnvAmbientUpperLimit.setDescription('The Upper Limit of the ambient temperature; if xupsEnvAmbientTemp \n        rises above this value, the xupsAmbientTempBad alarm will occur.\n        This value should be greater than xupsEnvAmbientLowerLimit.')
xupsEnvAmbientHumidity = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsEnvAmbientHumidity.setStatus('current')
if mibBuilder.loadTexts: xupsEnvAmbientHumidity.setDescription('The reading of the ambient humidity in the vicinity of the \n        UPS or SNMP agent.')
xupsAlarms = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 7, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarms.setStatus('current')
if mibBuilder.loadTexts: xupsAlarms.setDescription('The current number of alarm conditions.')
xupsAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 7, 2), )
if mibBuilder.loadTexts: xupsAlarmTable.setStatus('current')
if mibBuilder.loadTexts: xupsAlarmTable.setDescription('A list of alarm table entries.  The number of entries\n        is given by the value of xupsAlarms.\n        Note that this table is sparsely (non-consecutively)\n        numbered and will be empty if there are no active alarms.')
xupsAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 7, 2, 1), ).setIndexNames((0, "XUPS-MIB", "xupsAlarmID"))
if mibBuilder.loadTexts: xupsAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: xupsAlarmEntry.setDescription('Alarm Table Entry containing descriptive information \n         for one alarm entry.')
xupsAlarmID = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmID.setStatus('current')
if mibBuilder.loadTexts: xupsAlarmID.setDescription('A unique identifier for an alarm condition.')
xupsAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmDescr.setStatus('current')
if mibBuilder.loadTexts: xupsAlarmDescr.setDescription('A reference to an alarm description object.  The object\n         referenced should not be accessible, but rather be used to\n         provide a unique description of the alarm condition.')
xupsAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmTime.setStatus('current')
if mibBuilder.loadTexts: xupsAlarmTime.setDescription('The value of the MIB-II variable sysUpTime when the alarm\n         condition occurred.')
xupsOnBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 3))
xupsLowBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 4))
xupsUtilityPowerRestored = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 5))
xupsReturnFromLowBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 6))
xupsOutputOverload = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 7))
xupsInternalFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 8))
xupsBatteryDischarged = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 9))
xupsInverterFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 10))
xupsOnBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 11))
xupsBypassNotAvailable = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 12))
xupsOutputOff = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 13))
xupsInputFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 14))
xupsBuildingAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 15))
xupsShutdownImminent = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 16))
xupsOnInverter = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 17))
xupsAlarmNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 7, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmNumEvents.setStatus('current')
if mibBuilder.loadTexts: xupsAlarmNumEvents.setDescription('The number of entries in the UPS event history queue.')
xupsAlarmEventTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 7, 19), )
if mibBuilder.loadTexts: xupsAlarmEventTable.setStatus('current')
if mibBuilder.loadTexts: xupsAlarmEventTable.setDescription('A table of the UPS internal event history queue.')
xupsAlarmEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 7, 19, 1), ).setIndexNames((0, "XUPS-MIB", "xupsAlarmEventID"))
if mibBuilder.loadTexts: xupsAlarmEventEntry.setStatus('current')
if mibBuilder.loadTexts: xupsAlarmEventEntry.setDescription('One of the entries in the UPS event history queue.')
xupsAlarmEventID = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 400)))
if mibBuilder.loadTexts: xupsAlarmEventID.setStatus('current')
if mibBuilder.loadTexts: xupsAlarmEventID.setDescription('A unique number that reflects the order in which the event\n         occurred. The oldest event in the queue will be number 1.\n         Subsequent events will be numbered 2, 3, 4, etc.')
xupsAlarmEventDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 19, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmEventDateAndTime.setStatus('deprecated')
if mibBuilder.loadTexts: xupsAlarmEventDateAndTime.setDescription('The time and date that an event occurred as recorded in the UPS\n         internal event queue.  This string will reflect the time and\n         date as set in the UPS itself and will not be referenced to sysUpTime.\n         The format is MM/DD/YYYY:HH:MM:SS.  Time is 24 hour standard.')
xupsAlarmEventKind = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("occurred", 1), ("cleared", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmEventKind.setStatus('deprecated')
if mibBuilder.loadTexts: xupsAlarmEventKind.setDescription('Enumerated value that tells whether the event is an\n         occurrence of an alarm condition or a clearing of an\n         alarm condition.')
xupsAlarmEventDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmEventDescr.setStatus('deprecated')
if mibBuilder.loadTexts: xupsAlarmEventDescr.setDescription("A description of the event stored in the UPS event queue.  \n         This description will be a sixteen bit integer value \n         representing one of the defined alarms in the Powerware Binary \n         Computer Mode communication specification; for example,\n         a value of 0 represents the 'Inverter AC Over Voltage'\n         alarm (byte 1, bit 0 in the BCM Alarm Map).")
xupsAlarmEventMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 19, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmEventMsg.setStatus('current')
if mibBuilder.loadTexts: xupsAlarmEventMsg.setDescription('A text string describing each entry in the Event Log.  The format of this\n         text message is free (not fixed) for the operator to read; good contents \n         would be a time & date stamp, the event type, and a description of the event.')
xupsBreakerOpen = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 20))
xupsAlarmEntryAdded = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 21))
xupsAlarmEntryRemoved = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 22))
xupsAlarmBatteryBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 23))
xupsOutputOffAsRequested = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 24))
xupsDiagnosticTestFailed = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 25))
xupsCommunicationsLost = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 26))
xupsUpsShutdownPending = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 27))
xupsAlarmTestInProgress = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 28))
xupsAmbientTempBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 29))
xupsLossOfRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 30))
xupsAlarmTempBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 31))
xupsAlarmChargerFailed = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 32))
xupsAlarmFanFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 33))
xupsAlarmFuseFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 34))
xupsPowerSwitchBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 35))
xupsModuleFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 36))
xupsOnAlternatePowerSource = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 37))
xupsAltPowerNotAvailable = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 38))
xupsNoticeCondition = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 39))
xupsRemoteTempBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 40))
xupsRemoteHumidityBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 41))
xupsAlarmOutputBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 42))
xupsAlarmAwaitingPower = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 43))
xupsOnMaintenanceBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 44))
xupsOutputNotProtected = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 51))
xupsTestStart = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("testBattery", 1), ("noTestStarted", 2), ("testSystem", 3), ("testSecondarySource", 4), ("flashLightsTest", 5), ("cancelTest", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsTestStart.setStatus('current')
if mibBuilder.loadTexts: xupsTestStart.setDescription("Setting this object initiates the requested Test.\n\t\tThe test types which a UPS might support are 'testBattery', \n\t\t'testSystem' (a UPS General Systems test, however defined by the UPS), \n\t\t'testSecondarySource' (test if the Secondary power source is good on a \n\t\tdual input UPS), and \n\t\t'flashLightsTest' (start a test which flashes the UPS lights, and if \n\t\tavailable, sounds the horn to help locate the UPS).\n        If a UPS does not support the requested test, the set operation may \n\t\tsucceed but the xupsTestBatteryStatus will end up as notSupported.\n        When read, this object indicates the last test requested via this object, \n\t\tif any; 'noTestStarted' could be the initial value.\n        Currently only the 'flashLightsTest' can be canceled with 'cancelTest'.")
xupsTestBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("passed", 2), ("failed", 3), ("inProgress", 4), ("notSupported", 5), ("inhibited", 6), ("scheduled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsTestBatteryStatus.setStatus('current')
if mibBuilder.loadTexts: xupsTestBatteryStatus.setDescription("Reading this enumerated value gives an indication of the (last) \n         UPS Battery test status.\n\t\t 'inhibited' means that the battery test could not be run.\n\t\t 'scheduled' means that the battery test could not be run at the time\n\t\t of request, but will be run at some later (UPS-determined) time.")
xupsLastGeneralTest = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("noTestStarted", 2), ("testSystem", 3), ("testSecondarySource", 4), ("flashLightsTest", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsLastGeneralTest.setStatus('current')
if mibBuilder.loadTexts: xupsLastGeneralTest.setDescription('Indicates the last UPS test requested via xupsTestStart or by other \n         non-SNMP means, other than for the testBattery (1) case.\n         The results of the test indicated by this object are reported in \n         xupsLastGeneralTestResult.')
xupsLastGeneralTestResult = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("passed", 2), ("failed", 3), ("inProgress", 4), ("notSupported", 5), ("inhibited", 6), ("scheduled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsLastGeneralTestResult.setStatus('current')
if mibBuilder.loadTexts: xupsLastGeneralTestResult.setDescription('Reading this enumerated value gives the result of the test indicated\n         in xupsLastGeneralTest.')
xupsTestTrap = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("startTestTrap", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsTestTrap.setStatus('current')
if mibBuilder.loadTexts: xupsTestTrap.setDescription('Setting startTestTrap to 1 will initiate a test trap \n\t       to be sent out from the agent.  All other set values are invalid.')
xupsControlOutputOffDelay = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsControlOutputOffDelay.setStatus('current')
if mibBuilder.loadTexts: xupsControlOutputOffDelay.setDescription('Setting this value to other than zero will cause the UPS\n         output to turn off after the number of seconds.\n         Setting it to 0 will cause an attempt to abort a pending\n         shutdown.')
xupsControlOutputOnDelay = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsControlOutputOnDelay.setStatus('current')
if mibBuilder.loadTexts: xupsControlOutputOnDelay.setDescription('Setting this value to other than zero will cause the UPS\n         output to turn on after the number of seconds.\n         Setting it to 0 will cause an attempt to abort a pending\n         startup.')
xupsControlOutputOffTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsControlOutputOffTrapDelay.setStatus('current')
if mibBuilder.loadTexts: xupsControlOutputOffTrapDelay.setDescription('When xupsControlOutputOffDelay reaches this value, a trap will\n         be sent.')
xupsControlOutputOnTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsControlOutputOnTrapDelay.setStatus('deprecated')
if mibBuilder.loadTexts: xupsControlOutputOnTrapDelay.setDescription('When xupsControlOutputOnDelay reaches this value, a\n         xupsOutputOff trap will be sent.')
xupsControlToBypassDelay = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsControlToBypassDelay.setStatus('current')
if mibBuilder.loadTexts: xupsControlToBypassDelay.setDescription('Setting this value to other than zero will cause the UPS\n         output to go to Bypass after the number of seconds.\n         If the Bypass is unavailable, this may cause the UPS\n         to not supply power to the load.\n         Setting it to 0 will cause an attempt to abort a pending\n         shutdown.')
xupsLoadShedSecsWithRestart = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsLoadShedSecsWithRestart.setStatus('current')
if mibBuilder.loadTexts: xupsLoadShedSecsWithRestart.setDescription("Setting this value will cause the UPS output to turn off \n        after the set number of seconds, then restart (after a UPS-defined\n        'down time') when the utility is again available.  \n        Unlike xupsControlOutputOffDelay, which might or might not,\n        this object always maps to the XCP 0x8A Load Dump & Restart command,\n        so the desired shutdown and restart behavior is guaranteed to happen.\n        Once set, this command cannot be aborted.\n        This is the preferred Control object to use when performing \n        an On Battery OS Shutdown.")
xupsSwitchable = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switchable", 1), ("notSwitchable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsSwitchable.setStatus('current')
if mibBuilder.loadTexts: xupsSwitchable.setDescription('Parameter which indicates whether UPS commands received via any \n\t\t communication path (aside from manual controls) are able (switchable) \n\t\t or not able (notSwitchable) to control the UPS.')
xupsConfigOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsConfigOutputVoltage.setStatus('current')
if mibBuilder.loadTexts: xupsConfigOutputVoltage.setDescription('The nominal UPS Output voltage per phase in volts.')
xupsConfigInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsConfigInputVoltage.setStatus('current')
if mibBuilder.loadTexts: xupsConfigInputVoltage.setDescription('The nominal UPS Input voltage per phase in volts.')
xupsConfigOutputWatts = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsConfigOutputWatts.setStatus('current')
if mibBuilder.loadTexts: xupsConfigOutputWatts.setDescription('The nominal UPS available real power output in watts.')
xupsConfigOutputFreq = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsConfigOutputFreq.setStatus('current')
if mibBuilder.loadTexts: xupsConfigOutputFreq.setDescription('The nominal output frequency in tenths of Hz.')
xupsConfigDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsConfigDateAndTime.setStatus('current')
if mibBuilder.loadTexts: xupsConfigDateAndTime.setDescription('Date and time information for the UPS.  Setting this variable\n         will initiate a set UPS date and time to this value.  Reading\n         this variable will return the UPS time and date.  This value\n         is not referenced to sysUpTime.  It is simply the clock value\n         from the UPS real time clock.\n         Format is as follows: MM/DD/YYYY:HH:MM:SS.')
xupsConfigLowOutputVoltageLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsConfigLowOutputVoltageLimit.setStatus('current')
if mibBuilder.loadTexts: xupsConfigLowOutputVoltageLimit.setDescription('The Lower limit for acceptable Output Voltage, per the UPS\n         specifications.')
xupsConfigHighOutputVoltageLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsConfigHighOutputVoltageLimit.setStatus('current')
if mibBuilder.loadTexts: xupsConfigHighOutputVoltageLimit.setDescription('The Upper limit for acceptable Output Voltage, per the UPS\n         specifications.')
xupsConfigInstallDate = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsConfigInstallDate.setStatus('current')
if mibBuilder.loadTexts: xupsConfigInstallDate.setDescription('The date when this UPS was installed.  Free text format, so the \n         preferred local date format may be used (MM/DD/YYYY, DD-Mon-YYYY, etc).')
xupsMaxTrapLevel = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("critical", 2), ("major", 3), ("minor", 4), ("allTraps", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsMaxTrapLevel.setStatus('current')
if mibBuilder.loadTexts: xupsMaxTrapLevel.setDescription('The level of severity of traps which will be sent to the\n         requesting host; individual trap receivers will have\n         individual values for this variable.  Values are:\n         (1) none: no traps will be sent to this host;\n         (2) critical: only traps for Critical alarm conditions will\n             be sent to this host;\n         (3) major: Critical and Major traps will be sent;\n         (4) minor: All levels of alarming traps will be sent: Critical, \n             Major, and Minor\n            (This level was added in PowerMIB v3.11)\n         (5) allTraps: all Traps will be sent to this host\n            (Critical, Major, Minor, Informational).')
xupsSendTrapType = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("stnd", 1), ("xups", 2), ("stndPlus", 3), ("xupsPlus", 4), ("pxg", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsSendTrapType.setStatus('current')
if mibBuilder.loadTexts: xupsSendTrapType.setDescription('The type of traps which will be sent to the\n         requesting host; individual trap receivers will have\n         individual values for this variable.  The additional\n         variables in types (3) and (4) are useful for determining\n         which UPS is the source on multi-port network adapters,\n         and for getting additional descriptive information.\n         Types (1) through (4) are all SNMP version 1 trap PDUs.\n         Values are:\n         (1) stnd: Traps as defined in the Standard UPS MIB (RFC1628)\n            and Generic (MIB II) traps as defined in RFC 1215.\n         (2) xups: xupsTrapDefined Traps as defined in the PowerMIB\n            and Generic (MIB II) traps as defined in RFC 1215.\n         (3 Deprecated) stndPlus: same as stnd plus variables from the interface\n            group and, where appropriate, xupsTrapMessage.\n         (4 Deprecated) xupsPlus: xupsTrapPortN Traps (same as xups plus \n            variables from the interface group) and, \n            for authFail, xupsTrapMessage.\n         (5 pxg: Traps as defined in the Power Xpert Gateway MIB\n            (PXG-MIB).')
xupsTrapMessage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 11, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsTrapMessage.setStatus('current')
if mibBuilder.loadTexts: xupsTrapMessage.setDescription('A descriptive text message which may be sent with traps to\n         further explain the reason for the trap.\n         This object is not-accessible to MIB browsers, but had to be changed to\n         read-only to satisfy SMIv2 syntax checkers since it is included in traps.')
xupsTrapSource = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 11, 4))
xupsHeartbeatMinsInterval = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 11, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsHeartbeatMinsInterval.setStatus('current')
if mibBuilder.loadTexts: xupsHeartbeatMinsInterval.setDescription('How often to send the xupstdHeartbeat trap, in units of minutes.\n         A setting of 0 disables the Heartbeat function.')
xupsNumReceptacles = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsNumReceptacles.setStatus('current')
if mibBuilder.loadTexts: xupsNumReceptacles.setDescription('The number of independently controllable Receptacles, as described in the \n         xupsRecepTable.')
xupsRecepTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 12, 2), )
if mibBuilder.loadTexts: xupsRecepTable.setStatus('current')
if mibBuilder.loadTexts: xupsRecepTable.setDescription('A list of receptacle table entries.  The number of entries\n        is given by the value of xupsNumReceptacles.')
xupsRecepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1), ).setIndexNames((0, "XUPS-MIB", "xupsRecepIndex"))
if mibBuilder.loadTexts: xupsRecepEntry.setStatus('current')
if mibBuilder.loadTexts: xupsRecepEntry.setDescription('A receptacle table entry containing the status and\n         control values for one receptacle.')
xupsRecepIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsRecepIndex.setStatus('current')
if mibBuilder.loadTexts: xupsRecepIndex.setDescription('The number of the Receptacle. Serves as index for Receptacle table.')
xupsRecepStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("pendingOff", 3), ("pendingOn", 4), ("unknown", 5), ("reserved", 6), ("failedClosed", 7), ("failedOpen", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsRecepStatus.setStatus('current')
if mibBuilder.loadTexts: xupsRecepStatus.setDescription('The Recep Status 1=On/Close, 2=Off/Open, 3=On w/Pending Off, \n         4=Off w/Pending ON, 5=Unknown, 6=Reserved for future, \n         7=Failed in Closed position, 8=Failed in Open position.')
xupsRecepOffDelaySecs = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsRecepOffDelaySecs.setStatus('current')
if mibBuilder.loadTexts: xupsRecepOffDelaySecs.setDescription('The Delay until the Receptacle is turned Off.  Setting \n        this value to other than -1 will cause the UPS output to \n        turn off after the number of seconds (0 is immediately).  \n        Setting it to -1 will cause an attempt to abort a pending shutdown.\n        When this object is set while the UPS is On Battery, it is not necessary\n        to set xupsRecepOnDelaySecs, since the outlet will turn back on \n        automatically when power is available again.')
xupsRecepOnDelaySecs = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsRecepOnDelaySecs.setStatus('current')
if mibBuilder.loadTexts: xupsRecepOnDelaySecs.setDescription('The Delay until the Receptacle is turned On.  Setting \n        this value to other than -1 will cause the UPS output to \n        turn on after the number of seconds (0 is immediately).  \n        Setting it to -1 will cause an attempt to abort a pending restart.')
xupsRecepAutoOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsRecepAutoOffDelay.setStatus('current')
if mibBuilder.loadTexts: xupsRecepAutoOffDelay.setDescription('The delay after going On Battery until the Receptacle is \n        automatically turned Off.  A value of -1 means that this Output should \n        never be turned Off automatically, but must be turned Off only by command.\n        Values from 0 to 30 are valid, but probably innappropriate.\n        The AutoOffDelay can be used to prioritize loads in the event of a prolonged \n        power outage; less critical loads will turn off earlier to extend battery \n        time for the more critical loads. If the utility power is restored before the \n        AutoOff delay counts down to 0 on an outlet, that outlet will not turn Off.')
xupsRecepAutoOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsRecepAutoOnDelay.setStatus('current')
if mibBuilder.loadTexts: xupsRecepAutoOnDelay.setDescription('Seconds delay after the Outlet is signaled to turn On before the Output is\n        Automatically turned ON. A value of -1 means that this Output should never\n        be turned On automatically, but only when specifically commanded to do so.\n        A value of 0 means that the Receptacle should come On immediately\n        at power-up or for an On command.')
xupsRecepShedSecsWithRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsRecepShedSecsWithRestart.setStatus('current')
if mibBuilder.loadTexts: xupsRecepShedSecsWithRestart.setDescription("Setting this value will cause the UPS output to turn off \n        after the set number of seconds, then restart (after a UPS-defined\n        'down time') when the utility is again available.  \n        Unlike xupsRecepOffDelaySecs, which might or might not,\n        this object always maps to the XCP 0x8A Load Dump & Restart command,\n        so the desired shutdown and restart behavior is guaranteed to happen.\n        Once set, this command cannot be aborted.")
xupsRecepHourlyPowerUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Wh').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsRecepHourlyPowerUsage.setStatus('current')
if mibBuilder.loadTexts: xupsRecepHourlyPowerUsage.setDescription('Units are Watt-hours.This is the energy consumed during the last hour.')
xupsRecepCumulativePowerUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Wh').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsRecepCumulativePowerUsage.setStatus('current')
if mibBuilder.loadTexts: xupsRecepCumulativePowerUsage.setDescription('Units are Watt-hours.This is the energy consumed since the last reset.\n         This object is writable so that it can be reset to 0.\n         When it is written to 0, the xupsRecepCumulativePowerUsageTimer will be reset to 0 as well.')
xupsRecepCumulativePowerUsageTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 10), Counter32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsRecepCumulativePowerUsageTimer.setStatus('current')
if mibBuilder.loadTexts: xupsRecepCumulativePowerUsageTimer.setDescription('Time in seconds since the cumulative power usage was last reset.')
xupsTopologyType = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 13, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsTopologyType.setStatus('current')
if mibBuilder.loadTexts: xupsTopologyType.setDescription("Value which denotes the type of UPS by its power topology.  Values are the\n        same as those described in the XCP Topology block's Overall Topology field.")
xupsTopoMachineCode = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsTopoMachineCode.setStatus('current')
if mibBuilder.loadTexts: xupsTopoMachineCode.setDescription("ID Value which denotes the Powerware model of the UPS for software.  \n        Values are the same as those described in the XCP Configuration \n        block's Machine Code field.")
xupsTopoUnitNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsTopoUnitNumber.setStatus('current')
if mibBuilder.loadTexts: xupsTopoUnitNumber.setDescription("Identifies which unit and what type of data is being reported.\n        A value of 0 means that this MIB information comes from the top-level system \n        view (eg, manifold module or system bypass cabinet reporting total system \n        output).  Standalone units also use a value of 0, since they are the 'full \n        system' view.\n        A value of 1 or higher indicates the number of the module in the system\n        which is reporting only its own data in the PowerMIB objects.")
xupsTopoPowerStrategy = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("highAlert", 1), ("standard", 2), ("enableHighEfficiency", 3), ("immediateHighEfficiency", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsTopoPowerStrategy.setStatus('current')
if mibBuilder.loadTexts: xupsTopoPowerStrategy.setDescription('Value which denotes which Power Strategy is currently set for the UPS.\n        The values are:\n        highAlert(1) - The UPS shall optimize its operating state to maximize its \n                power-protection levels.  This mode will be held for at most 24 hours.\n        standard(2) - Balanced, normal power protection strategy. UPS will not enter \n                HE operating mode from this setting.\n        enableHighEfficiency(3) - The UPS is enabled to enter HE operating mode to \n                optimize its operating state to maximize its efficiency, when \n                conditions change to permit it (as determined by the UPS).\n        forceHighEfficiency(4) - If this value is permitted to be Set for this UPS,\n                and if conditions permit, requires the UPS to enter High Efficiency \n                mode now, without delay (for as long as utility conditions permit).\n                After successfully set to forceHighEfficiency(4), \n                xupsTopoPowerStrategy changes to value enableHighEfficiency(3).\n        xupsOutputSource will indicate if the UPS status is actually operating in \n        High Efficiency mode.')
xupsAgentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 14, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAgentManufacturer.setStatus('current')
if mibBuilder.loadTexts: xupsAgentManufacturer.setDescription('The card agent Manufacturer Name (e.g. Eaton Corporation).')
xupsAgentModel = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 14, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAgentModel.setStatus('current')
if mibBuilder.loadTexts: xupsAgentModel.setDescription('The card agent model')
xupsAgentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 14, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAgentSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: xupsAgentSoftwareVersion.setDescription('The agent firmware version.')
xupsAgentPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 14, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAgentPartNumber.setStatus('current')
if mibBuilder.loadTexts: xupsAgentPartNumber.setDescription('The card agent catalog part number.')
xupsAgentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 14, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAgentSerialNumber.setStatus('current')
if mibBuilder.loadTexts: xupsAgentSerialNumber.setDescription('The card agent catalog serial number.')
xupsTrapDefined = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1))
xupsTrapOidDefined = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0))
xupstdControlOff = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 1)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdControlOff.setStatus('current')
if mibBuilder.loadTexts: xupstdControlOff.setDescription('The UPS output power will turn off in a number of\n    seconds equal to upsControlOutputOffTrapDelay.')
xupstdControlOn = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 2)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdControlOn.setStatus('current')
if mibBuilder.loadTexts: xupstdControlOn.setDescription('The UPS output power will turn on in a number of\n    seconds equal to upsControlOutputOnTrapDelay.')
xupstdOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 3)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdOnBattery.setStatus('current')
if mibBuilder.loadTexts: xupstdOnBattery.setDescription('The UPS has no AC input power and is running on \n     battery.')
xupstdLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 4)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdLowBattery.setStatus('current')
if mibBuilder.loadTexts: xupstdLowBattery.setDescription('The UPS batteries are low.  Tied to low battery \n    alarm condition.')
xupstdUtilityPowerRestored = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 5)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdUtilityPowerRestored.setStatus('current')
if mibBuilder.loadTexts: xupstdUtilityPowerRestored.setDescription('Input power has been restored after running on battery.')
xupstdReturnFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 6)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdReturnFromLowBattery.setStatus('current')
if mibBuilder.loadTexts: xupstdReturnFromLowBattery.setDescription('The battery has recovered from a low battery condition.')
xupstdOutputOverload = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 7)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdOutputOverload.setStatus('current')
if mibBuilder.loadTexts: xupstdOutputOverload.setDescription('The ups has sensed an overload of greater than \n     106 percent.  Tied to the 106% overload alarm.')
xupstdInternalFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 8)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdInternalFailure.setStatus('current')
if mibBuilder.loadTexts: xupstdInternalFailure.setDescription('Some component of the ups - rectifier, inverter,\n     control panel has failed.  Tied to alarms indi-\n     cating failure.')
xupstdBatteryDischarged = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 9)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdBatteryDischarged.setStatus('current')
if mibBuilder.loadTexts: xupstdBatteryDischarged.setDescription('The Battery Totally Discharged Alarm has occurred.')
xupstdInverterFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 10)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdInverterFailure.setStatus('current')
if mibBuilder.loadTexts: xupstdInverterFailure.setDescription('The ups inverter is unavailable or malfunctioning due to an internal failure.')
xupstdOnBypass = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 11)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdOnBypass.setStatus('current')
if mibBuilder.loadTexts: xupstdOnBypass.setDescription('The ups has gone on bypass for some reason.')
xupstdBypassNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 12)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdBypassNotAvailable.setStatus('current')
if mibBuilder.loadTexts: xupstdBypassNotAvailable.setDescription('The ups bypass is unavailable')
xupstdOutputOff = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 13)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdOutputOff.setStatus('current')
if mibBuilder.loadTexts: xupstdOutputOff.setDescription('The ups output is switched off.')
xupstdInputFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 14)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdInputFailure.setStatus('current')
if mibBuilder.loadTexts: xupstdInputFailure.setDescription('The ups input power is incorrect in voltage,\n     frequency, or phase rotation.')
xupstdBuildingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 15)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdBuildingAlarm.setStatus('current')
if mibBuilder.loadTexts: xupstdBuildingAlarm.setDescription('One of the defined building alarms has occurred.')
xupstdShutdownImminent = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 16)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdShutdownImminent.setStatus('current')
if mibBuilder.loadTexts: xupstdShutdownImminent.setDescription('The ups shutdown imminent alarm has occurred.')
xupstdOnInverter = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 17)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdOnInverter.setStatus('current')
if mibBuilder.loadTexts: xupstdOnInverter.setDescription('The ups is returned to utility power running the inverter \n     after either a transfer to bypass or a run on battery.')
xupstdBreakerOpen = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 20)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdBreakerOpen.setStatus('current')
if mibBuilder.loadTexts: xupstdBreakerOpen.setDescription('One of the UPS breakers or contactors has been opened.')
xupstdAlarmEntryAdded = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 21)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAlarmEntryAdded.setStatus('current')
if mibBuilder.loadTexts: xupstdAlarmEntryAdded.setDescription('An alarm not defined in the xups Well Known Alarms\n     (eg, an alarm defined in RFC1628)\n     has been added to the Alarm Table.')
xupstdAlarmEntryRemoved = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 22)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAlarmEntryRemoved.setStatus('current')
if mibBuilder.loadTexts: xupstdAlarmEntryRemoved.setDescription('An alarm not defined in the xups Well Known Alarms\n     has been removed from the Alarm Table.')
xupstdAlarmBatteryBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 23)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAlarmBatteryBad.setStatus('current')
if mibBuilder.loadTexts: xupstdAlarmBatteryBad.setDescription('One or more batteries have been determined to require replacement.')
xupstdOutputOffAsRequested = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 24)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdOutputOffAsRequested.setStatus('current')
if mibBuilder.loadTexts: xupstdOutputOffAsRequested.setDescription('The UPS has shutdown as requested, i.e., the output is off.')
xupstdDiagnosticTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 25)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdDiagnosticTestFailed.setStatus('current')
if mibBuilder.loadTexts: xupstdDiagnosticTestFailed.setDescription('The result of the last diagnostic test indicates a failure.')
xupstdCommunicationsLost = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 26)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdCommunicationsLost.setStatus('current')
if mibBuilder.loadTexts: xupstdCommunicationsLost.setDescription('A problem has been encountered in the communications\n     between the agent and the UPS.')
xupstdUpsShutdownPending = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 27)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdUpsShutdownPending.setStatus('current')
if mibBuilder.loadTexts: xupstdUpsShutdownPending.setDescription('An xupsControlOutputOffDelay countdown is underway.')
xupstdAlarmTestInProgress = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 28)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAlarmTestInProgress.setStatus('current')
if mibBuilder.loadTexts: xupstdAlarmTestInProgress.setDescription('A test is in progress, as initiated and indicated by the xupsTest Group.  \n     When the test is complete, one of the following traps will be sent:\n     - xupstdDiagnosticTestFailed if the test fails,\n     - xupstdDiagnosticTestPassed on success, or\n     - xupstdAlarmEntryRemoved in other cases (e.g., Test Canceled).')
xupstdAmbientTempBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 29)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("XUPS-MIB", "xupsEnvAmbientTemp"), ("XUPS-MIB", "xupsEnvAmbientLowerLimit"), ("XUPS-MIB", "xupsEnvAmbientUpperLimit"))
if mibBuilder.loadTexts: xupstdAmbientTempBad.setStatus('current')
if mibBuilder.loadTexts: xupstdAmbientTempBad.setDescription('The ambient temperature, xupsEnvAmbientTemp, has fallen below \n    the set lower limit, xupsEnvAmbientLowerLimit, or has risen above \n    the set upper limit, xupsEnvAmbientUpperLimit.')
xupstdContactActiveNotice = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 30)).setObjects(("EATON-EMP-MIB", "xupsContactIndex"), ("EATON-EMP-MIB", "xupsContactType"), ("EATON-EMP-MIB", "xupsContactState"), ("EATON-EMP-MIB", "xupsContactDescr"))
if mibBuilder.loadTexts: xupstdContactActiveNotice.setStatus('current')
if mibBuilder.loadTexts: xupstdContactActiveNotice.setDescription('The Contact indicated by xupsContactIndex is in its Active state.\n     The following are the situations that generate this trap:\n        For xupsContactType:    and     xupsContactState: \n            normallyOpen(1)     and     closedWithNotice(4)\n            normallyClosed(2)   and     openWithNotice(3)\n            anyChange(3)        and     openWithNotice(3) or closedWithNotice(4)')
xupstdContactInactiveNotice = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 31)).setObjects(("EATON-EMP-MIB", "xupsContactIndex"), ("EATON-EMP-MIB", "xupsContactType"), ("EATON-EMP-MIB", "xupsContactState"), ("EATON-EMP-MIB", "xupsContactDescr"))
if mibBuilder.loadTexts: xupstdContactInactiveNotice.setStatus('current')
if mibBuilder.loadTexts: xupstdContactInactiveNotice.setDescription('The Contact indicated by xupsContactIndex has changed to its Inactive state.')
xupstdLossOfRedundancy = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 32)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdLossOfRedundancy.setStatus('current')
if mibBuilder.loadTexts: xupstdLossOfRedundancy.setDescription('A parallel UPS system is no longer operating in N+1 redundant mode;\n       this may be due to module failure or removal, or due to overloading.')
xupstdAlarmTempBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 33)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAlarmTempBad.setStatus('current')
if mibBuilder.loadTexts: xupstdAlarmTempBad.setDescription('An internal temperature is out of tolerance.')
xupstdAlarmChargerFailed = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 34)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAlarmChargerFailed.setStatus('current')
if mibBuilder.loadTexts: xupstdAlarmChargerFailed.setDescription('An uncorrected problem has been detected within the UPS charger subsystem.')
xupstdAlarmFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 35)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAlarmFanFailure.setStatus('current')
if mibBuilder.loadTexts: xupstdAlarmFanFailure.setDescription('The failure of one or more fans in the UPS has been detected.')
xupstdAlarmFuseFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 36)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAlarmFuseFailure.setStatus('current')
if mibBuilder.loadTexts: xupstdAlarmFuseFailure.setDescription('The failure of one or more fuses has been detected.')
xupstdPowerSwitchBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 37)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdPowerSwitchBad.setStatus('current')
if mibBuilder.loadTexts: xupstdPowerSwitchBad.setDescription('A Relay, Contactor, or Breaker has failed.')
xupstdModuleFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 38)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdModuleFailure.setStatus('current')
if mibBuilder.loadTexts: xupstdModuleFailure.setDescription('One module in a parallel or composite system has failed.')
xupstdOnAlternatePowerSource = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 39)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("XUPS-MIB", "xupsInputSource"))
if mibBuilder.loadTexts: xupstdOnAlternatePowerSource.setStatus('current')
if mibBuilder.loadTexts: xupstdOnAlternatePowerSource.setDescription('The system is being powered by its Alternate Power Source, such as a \n     Secondary utility feed (on a dual AC input UPS), generator, flywheel, \n     or fuel cell.')
xupstdAltPowerNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 40)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAltPowerNotAvailable.setStatus('current')
if mibBuilder.loadTexts: xupstdAltPowerNotAvailable.setDescription('On systems with a separate alternate power source (eg, dual AC inputs), \n     that alternate power source is currently not available.  This could be \n     a problem if the primary power source (eg, utility) fails for a period \n     of time longer than that for which the internal batteries can supply power.')
xupstdNoticeCondition = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 41)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdNoticeCondition.setStatus('current')
if mibBuilder.loadTexts: xupstdNoticeCondition.setDescription('Some Notice condition exists which is not covered by the other traps.\n     This is like an xupstdInternalFailure, but at a lower severity level.')
xupstdRemoteTempBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 42)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("EATON-EMP-MIB", "xupsEnvRemoteTemp"), ("EATON-EMP-MIB", "xupsEnvRemoteTempLowerLimit"), ("EATON-EMP-MIB", "xupsEnvRemoteTempUpperLimit"))
if mibBuilder.loadTexts: xupstdRemoteTempBad.setStatus('current')
if mibBuilder.loadTexts: xupstdRemoteTempBad.setDescription('The remote temperature, xupsEnvRemoteTemp, has fallen below \n    the set lower limit, xupsEnvRemoteTempLowerLimit, or has risen above \n    the set upper limit, xupsEnvRemoteTempUpperLimit.')
xupstdRemoteHumidityBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 43)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("EATON-EMP-MIB", "xupsEnvRemoteHumidity"), ("EATON-EMP-MIB", "xupsEnvRemoteHumidityLowerLimit"), ("EATON-EMP-MIB", "xupsEnvRemoteHumidityUpperLimit"))
if mibBuilder.loadTexts: xupstdRemoteHumidityBad.setStatus('current')
if mibBuilder.loadTexts: xupstdRemoteHumidityBad.setDescription('The remote temperature, xupsEnvRemoteHumidity, has fallen below \n    the set lower limit, xupsEnvRemoteHumidityLowerLimit, or has risen above \n    the set upper limit, xupsEnvRemoteHumidityUpperLimit.')
xupstdHeartbeat = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 44)).setObjects(("XUPS-MIB", "xupsInputSource"), ("XUPS-MIB", "xupsOutputSource"), ("XUPS-MIB", "xupsAlarms"))
if mibBuilder.loadTexts: xupstdHeartbeat.setStatus('current')
if mibBuilder.loadTexts: xupstdHeartbeat.setDescription('A periodic status trap message.  It is sent at an interval\n    set by object xupsHeartbeatMinsInterval.\n    The included variables provide a brief statement of the UPS status.')
xupstdDiagnosticTestPassed = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 45)).setObjects(("XUPS-MIB", "xupsTestBatteryStatus"), ("XUPS-MIB", "xupsLastGeneralTest"), ("XUPS-MIB", "xupsLastGeneralTestResult"))
if mibBuilder.loadTexts: xupstdDiagnosticTestPassed.setStatus('current')
if mibBuilder.loadTexts: xupstdDiagnosticTestPassed.setDescription('A diagnostic test just completed, and its result is Passed.\n    The included variables provide additional information on the test.')
xupstdOutputBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 46)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdOutputBad.setStatus('current')
if mibBuilder.loadTexts: xupstdOutputBad.setDescription('The output condition (other than OutputOverload) is out of tolerance.')
xupstdAwaitingPower = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 47)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAwaitingPower.setStatus('current')
if mibBuilder.loadTexts: xupstdAwaitingPower.setDescription('The UPS output is off and the UPS is awaiting the return of input power.')
xupstdOnMaintenanceBypass = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 48)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdOnMaintenanceBypass.setStatus('current')
if mibBuilder.loadTexts: xupstdOnMaintenanceBypass.setDescription('The UPS has been placed on Maintenance / Manual Bypass by an operator.')
xupstdCommEstablished = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 49)).setObjects(("XUPS-MIB", "xupsIdentModel"), ("XUPS-MIB", "xupsOutputSource"))
if mibBuilder.loadTexts: xupstdCommEstablished.setStatus('current')
if mibBuilder.loadTexts: xupstdCommEstablished.setDescription('This trap is sent when the SNMP agent first establishes a communication \n     link with the UPS.\n     The included variables provide identification and UPS status information.')
xupstdAgentDown = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 50))
if mibBuilder.loadTexts: xupstdAgentDown.setStatus('current')
if mibBuilder.loadTexts: xupstdAgentDown.setDescription('This trap is sent when the SNMP agent is exiting or closing down gracefully.\n     This may be triggered by a signal from the OS to stop this process.  In many\n     implementations, it will be followed quickly by a restart of this vital process.')
xupstdOutputNotProtected = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 51)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdOutputNotProtected.setStatus('current')
if mibBuilder.loadTexts: xupstdOutputNotProtected.setDescription('The ups output is not protectet for any reason in the UPS.')
xupstdTestTrap = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1, 0, 100)).setObjects(("SNMPv2-MIB", "sysName"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdTestTrap.setStatus('current')
if mibBuilder.loadTexts: xupstdTestTrap.setDescription('This trap is sent to the trap receivers to check proper reception of traps.')
xupsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 100))
xupsIdentFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 2)).setObjects(("XUPS-MIB", "xupsIdentManufacturer"), ("XUPS-MIB", "xupsIdentModel"), ("XUPS-MIB", "xupsIdentSoftwareVersion"), ("XUPS-MIB", "xupsIdentOemCode"), ("XUPS-MIB", "xupsIdentPartNumber"), ("XUPS-MIB", "xupsIdentSerialNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsIdentFullGroup = xupsIdentFullGroup.setStatus('current')
if mibBuilder.loadTexts: xupsIdentFullGroup.setDescription('The Full set of xupsIdent subgroup objects.')
xupsBatteryFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 3)).setObjects(("XUPS-MIB", "xupsBatTimeRemaining"), ("XUPS-MIB", "xupsBatVoltage"), ("XUPS-MIB", "xupsBatCurrent"), ("XUPS-MIB", "xupsBatCapacity"), ("XUPS-MIB", "xupsBatteryAbmStatus"), ("XUPS-MIB", "xupsBatteryLastReplacedDate"), ("XUPS-MIB", "xupsBatteryFailure"), ("XUPS-MIB", "xupsBatteryNotPresent"), ("XUPS-MIB", "xupsBatteryAged"), ("XUPS-MIB", "xupsBatteryLowCapacity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsBatteryFullGroup = xupsBatteryFullGroup.setStatus('current')
if mibBuilder.loadTexts: xupsBatteryFullGroup.setDescription('The Full set of xupsBattery subgroup objects.')
xupsInputFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 4)).setObjects(("XUPS-MIB", "xupsInputFrequency"), ("XUPS-MIB", "xupsInputLineBads"), ("XUPS-MIB", "xupsInputNumPhases"), ("XUPS-MIB", "xupsInputSource"), ("XUPS-MIB", "xupsDualInputStatus"), ("XUPS-MIB", "xupsSecondaryInputWatch"), ("XUPS-MIB", "xupsInputStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsInputFullGroup = xupsInputFullGroup.setStatus('current')
if mibBuilder.loadTexts: xupsInputFullGroup.setDescription('The Full set of xupsInput subgroup objects.')
xupsInputTableFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 5)).setObjects(("XUPS-MIB", "xupsInputPhase"), ("XUPS-MIB", "xupsInputVoltage"), ("XUPS-MIB", "xupsInputCurrent"), ("XUPS-MIB", "xupsInputWatts"), ("XUPS-MIB", "xupsInputId"), ("XUPS-MIB", "xupsInputName"), ("XUPS-MIB", "xupsInputCurrentHighPrecision"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsInputTableFullGroup = xupsInputTableFullGroup.setStatus('current')
if mibBuilder.loadTexts: xupsInputTableFullGroup.setDescription('The Full set of xupsInputTable subgroup objects.')
xupsOutputFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 6)).setObjects(("XUPS-MIB", "xupsOutputLoad"), ("XUPS-MIB", "xupsOutputFrequency"), ("XUPS-MIB", "xupsOutputNumPhases"), ("XUPS-MIB", "xupsOutputSource"), ("XUPS-MIB", "xupsOutputHourlyPowerUsage"), ("XUPS-MIB", "xupsOutputCumulativePowerUsage"), ("XUPS-MIB", "xupsOutputCumulativePowerUsageTimer"), ("XUPS-MIB", "xupsOutputStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsOutputFullGroup = xupsOutputFullGroup.setStatus('current')
if mibBuilder.loadTexts: xupsOutputFullGroup.setDescription('The Full set of xupsOutput subgroup objects.')
xupsOutputTableFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 7)).setObjects(("XUPS-MIB", "xupsOutputPhase"), ("XUPS-MIB", "xupsOutputVoltage"), ("XUPS-MIB", "xupsOutputCurrent"), ("XUPS-MIB", "xupsOutputWatts"), ("XUPS-MIB", "xupsOutputId"), ("XUPS-MIB", "xupsOutputName"), ("XUPS-MIB", "xupsOutputCurrentHighPrecision"), ("XUPS-MIB", "xupsOutputPercentLoad"), ("XUPS-MIB", "xupsOutputVA"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsOutputTableFullGroup = xupsOutputTableFullGroup.setStatus('current')
if mibBuilder.loadTexts: xupsOutputTableFullGroup.setDescription('The Full set of xupsOutputTable subgroup objects.')
xupsBypassFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 8)).setObjects(("XUPS-MIB", "xupsBypassFrequency"), ("XUPS-MIB", "xupsBypassNumPhases"), ("XUPS-MIB", "xupsBypassPhase"), ("XUPS-MIB", "xupsBypassVoltage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsBypassFullGroup = xupsBypassFullGroup.setStatus('current')
if mibBuilder.loadTexts: xupsBypassFullGroup.setDescription('The Full set of xupsBypass subgroup objects.')
xupsEnvironmentFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 9)).setObjects(("XUPS-MIB", "xupsEnvAmbientTemp"), ("XUPS-MIB", "xupsEnvAmbientLowerLimit"), ("XUPS-MIB", "xupsEnvAmbientUpperLimit"), ("XUPS-MIB", "xupsEnvAmbientHumidity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsEnvironmentFullGroup = xupsEnvironmentFullGroup.setStatus('current')
if mibBuilder.loadTexts: xupsEnvironmentFullGroup.setDescription('The Full set of xupsEnvironment subgroup objects.')
xupsAlarmFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 10)).setObjects(("XUPS-MIB", "xupsAlarms"), ("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsAlarmTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsAlarmFullGroup = xupsAlarmFullGroup.setStatus('current')
if mibBuilder.loadTexts: xupsAlarmFullGroup.setDescription('The Full set of xupsAlarm subgroup objects.')
xupsAlarmEventsFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 11)).setObjects(("XUPS-MIB", "xupsAlarmNumEvents"), ("XUPS-MIB", "xupsAlarmEventMsg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsAlarmEventsFullGroup = xupsAlarmEventsFullGroup.setStatus('current')
if mibBuilder.loadTexts: xupsAlarmEventsFullGroup.setDescription('The Full set of Alarm/Event history subgroup objects.')
xupsTestFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 12)).setObjects(("XUPS-MIB", "xupsTestStart"), ("XUPS-MIB", "xupsTestBatteryStatus"), ("XUPS-MIB", "xupsLastGeneralTest"), ("XUPS-MIB", "xupsLastGeneralTestResult"), ("XUPS-MIB", "xupsTestTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsTestFullGroup = xupsTestFullGroup.setStatus('current')
if mibBuilder.loadTexts: xupsTestFullGroup.setDescription('The Full set of xupsTest subgroup objects.')
xupsControlFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 13)).setObjects(("XUPS-MIB", "xupsControlOutputOffDelay"), ("XUPS-MIB", "xupsControlOutputOnDelay"), ("XUPS-MIB", "xupsControlOutputOffTrapDelay"), ("XUPS-MIB", "xupsControlToBypassDelay"), ("XUPS-MIB", "xupsLoadShedSecsWithRestart"), ("XUPS-MIB", "xupsSwitchable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsControlFullGroup = xupsControlFullGroup.setStatus('current')
if mibBuilder.loadTexts: xupsControlFullGroup.setDescription('The Full set of xupsControl subgroup objects.')
xupsConfigFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 14)).setObjects(("XUPS-MIB", "xupsConfigOutputVoltage"), ("XUPS-MIB", "xupsConfigInputVoltage"), ("XUPS-MIB", "xupsConfigOutputWatts"), ("XUPS-MIB", "xupsConfigOutputFreq"), ("XUPS-MIB", "xupsConfigDateAndTime"), ("XUPS-MIB", "xupsConfigLowOutputVoltageLimit"), ("XUPS-MIB", "xupsConfigHighOutputVoltageLimit"), ("XUPS-MIB", "xupsConfigInstallDate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsConfigFullGroup = xupsConfigFullGroup.setStatus('current')
if mibBuilder.loadTexts: xupsConfigFullGroup.setDescription('The Full set of xupsConfig subgroup objects.')
xupsTrapControlFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 15)).setObjects(("XUPS-MIB", "xupsMaxTrapLevel"), ("XUPS-MIB", "xupsSendTrapType"), ("XUPS-MIB", "xupsTrapMessage"), ("XUPS-MIB", "xupsHeartbeatMinsInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsTrapControlFullGroup = xupsTrapControlFullGroup.setStatus('current')
if mibBuilder.loadTexts: xupsTrapControlFullGroup.setDescription('The Full set of xupsTrapControl subgroup objects.')
xupsRecepFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 16)).setObjects(("XUPS-MIB", "xupsNumReceptacles"), ("XUPS-MIB", "xupsRecepIndex"), ("XUPS-MIB", "xupsRecepStatus"), ("XUPS-MIB", "xupsRecepOffDelaySecs"), ("XUPS-MIB", "xupsRecepOnDelaySecs"), ("XUPS-MIB", "xupsRecepAutoOffDelay"), ("XUPS-MIB", "xupsRecepAutoOnDelay"), ("XUPS-MIB", "xupsRecepShedSecsWithRestart"), ("XUPS-MIB", "xupsRecepHourlyPowerUsage"), ("XUPS-MIB", "xupsRecepCumulativePowerUsage"), ("XUPS-MIB", "xupsRecepCumulativePowerUsageTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsRecepFullGroup = xupsRecepFullGroup.setStatus('current')
if mibBuilder.loadTexts: xupsRecepFullGroup.setDescription('The Full set of xupsRecep subgroup objects.')
xupsTopologyFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 17)).setObjects(("XUPS-MIB", "xupsTopologyType"), ("XUPS-MIB", "xupsTopoMachineCode"), ("XUPS-MIB", "xupsTopoUnitNumber"), ("XUPS-MIB", "xupsTopoPowerStrategy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsTopologyFullGroup = xupsTopologyFullGroup.setStatus('current')
if mibBuilder.loadTexts: xupsTopologyFullGroup.setDescription('The Full set of xupsTopology subgroup objects.')
xupstdNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 18)).setObjects(("XUPS-MIB", "xupstdControlOff"), ("XUPS-MIB", "xupstdControlOn"), ("XUPS-MIB", "xupstdOnBattery"), ("XUPS-MIB", "xupstdLowBattery"), ("XUPS-MIB", "xupstdUtilityPowerRestored"), ("XUPS-MIB", "xupstdReturnFromLowBattery"), ("XUPS-MIB", "xupstdOutputOverload"), ("XUPS-MIB", "xupstdInternalFailure"), ("XUPS-MIB", "xupstdBatteryDischarged"), ("XUPS-MIB", "xupstdInverterFailure"), ("XUPS-MIB", "xupstdOnBypass"), ("XUPS-MIB", "xupstdBypassNotAvailable"), ("XUPS-MIB", "xupstdOutputOff"), ("XUPS-MIB", "xupstdInputFailure"), ("XUPS-MIB", "xupstdBuildingAlarm"), ("XUPS-MIB", "xupstdShutdownImminent"), ("XUPS-MIB", "xupstdOnInverter"), ("XUPS-MIB", "xupstdBreakerOpen"), ("XUPS-MIB", "xupstdAlarmEntryAdded"), ("XUPS-MIB", "xupstdAlarmEntryRemoved"), ("XUPS-MIB", "xupstdAlarmBatteryBad"), ("XUPS-MIB", "xupstdOutputOffAsRequested"), ("XUPS-MIB", "xupstdDiagnosticTestFailed"), ("XUPS-MIB", "xupstdCommunicationsLost"), ("XUPS-MIB", "xupstdUpsShutdownPending"), ("XUPS-MIB", "xupstdAlarmTempBad"), ("XUPS-MIB", "xupstdAlarmTestInProgress"), ("XUPS-MIB", "xupstdAmbientTempBad"), ("XUPS-MIB", "xupstdLossOfRedundancy"), ("XUPS-MIB", "xupstdAlarmChargerFailed"), ("XUPS-MIB", "xupstdAlarmFanFailure"), ("XUPS-MIB", "xupstdAlarmFuseFailure"), ("XUPS-MIB", "xupstdPowerSwitchBad"), ("XUPS-MIB", "xupstdModuleFailure"), ("XUPS-MIB", "xupstdOnAlternatePowerSource"), ("XUPS-MIB", "xupstdAltPowerNotAvailable"), ("XUPS-MIB", "xupstdNoticeCondition"), ("XUPS-MIB", "xupstdHeartbeat"), ("XUPS-MIB", "xupstdDiagnosticTestPassed"), ("XUPS-MIB", "xupstdOutputBad"), ("XUPS-MIB", "xupstdAwaitingPower"), ("XUPS-MIB", "xupstdOnMaintenanceBypass"), ("XUPS-MIB", "xupstdCommEstablished"), ("XUPS-MIB", "xupstdAgentDown"), ("XUPS-MIB", "xupstdOutputNotProtected"), ("XUPS-MIB", "xupstdTestTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupstdNotifyGroup = xupstdNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: xupstdNotifyGroup.setDescription('The Alarm and Event notifications from the xupsTrapDefined source (xupstd).')
xupstdEMPNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 19)).setObjects(("XUPS-MIB", "xupstdContactActiveNotice"), ("XUPS-MIB", "xupstdContactInactiveNotice"), ("XUPS-MIB", "xupstdRemoteTempBad"), ("XUPS-MIB", "xupstdRemoteHumidityBad"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupstdEMPNotifyGroup = xupstdEMPNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: xupstdEMPNotifyGroup.setDescription("The EMP's Alarm and Event notifications from the xupsTrapDefined source (xupstd).")
xupsMibFullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 534, 1, 100, 20)).setObjects(("XUPS-MIB", "xupsIdentFullGroup"), ("XUPS-MIB", "xupsBatteryFullGroup"), ("XUPS-MIB", "xupsInputFullGroup"), ("XUPS-MIB", "xupsInputTableFullGroup"), ("XUPS-MIB", "xupsOutputFullGroup"), ("XUPS-MIB", "xupsOutputTableFullGroup"), ("XUPS-MIB", "xupsBypassFullGroup"), ("XUPS-MIB", "xupsEnvironmentFullGroup"), ("XUPS-MIB", "xupsAlarmFullGroup"), ("XUPS-MIB", "xupsAlarmEventsFullGroup"), ("XUPS-MIB", "xupsTestFullGroup"), ("XUPS-MIB", "xupsControlFullGroup"), ("XUPS-MIB", "xupsConfigFullGroup"), ("XUPS-MIB", "xupsTrapControlFullGroup"), ("XUPS-MIB", "xupsRecepFullGroup"), ("XUPS-MIB", "xupsTopologyFullGroup"), ("XUPS-MIB", "xupstdNotifyGroup"), ("XUPS-MIB", "xupstdEMPNotifyGroup"), ("XUPS-MIB", "xupsBypassTableFullGroup"), ("XUPS-MIB", "xupsInputTotalFullGroup"), ("XUPS-MIB", "xupsOutputTotalFullGroup"), ("XUPS-MIB", "xupsBypassTotalFullGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsMibFullCompliance = xupsMibFullCompliance.setStatus('current')
if mibBuilder.loadTexts: xupsMibFullCompliance.setDescription('A compliance statement for all of everything in this MIB.')
xupsDeprecatedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 21)).setObjects(("XUPS-MIB", "xupsAlarmEventDateAndTime"), ("XUPS-MIB", "xupsAlarmEventKind"), ("XUPS-MIB", "xupsAlarmEventDescr"), ("XUPS-MIB", "xupsControlOutputOnTrapDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsDeprecatedGroup = xupsDeprecatedGroup.setStatus('deprecated')
if mibBuilder.loadTexts: xupsDeprecatedGroup.setDescription('Contains objects which are now deprecated.')
xupsBypassTableFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 22)).setObjects(("XUPS-MIB", "xupsBypassId"), ("XUPS-MIB", "xupsBypassName"), ("XUPS-MIB", "xupsBypassCurrentHighPrecision"), ("XUPS-MIB", "xupsBypassWatts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsBypassTableFullGroup = xupsBypassTableFullGroup.setStatus('current')
if mibBuilder.loadTexts: xupsBypassTableFullGroup.setDescription('The Full set of xupsBypassTable subgroup objects.')
xupsInputTotalFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 23)).setObjects(("XUPS-MIB", "xupsInputAverageVoltage"), ("XUPS-MIB", "xupsInputTotalCurrent"), ("XUPS-MIB", "xupsInputTotalWatts"), ("XUPS-MIB", "xupsInputTotalVA"), ("XUPS-MIB", "xupsInputAveragePowerFactor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsInputTotalFullGroup = xupsInputTotalFullGroup.setStatus('current')
if mibBuilder.loadTexts: xupsInputTotalFullGroup.setDescription('The Full set of xupsInputTotal subgroup objects.')
xupsOutputTotalFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 24)).setObjects(("XUPS-MIB", "xupsOutputAverageVoltage"), ("XUPS-MIB", "xupsOutputTotalCurrent"), ("XUPS-MIB", "xupsOutputTotalWatts"), ("XUPS-MIB", "xupsOutputTotalVA"), ("XUPS-MIB", "xupsOutputAveragePowerFactor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsOutputTotalFullGroup = xupsOutputTotalFullGroup.setStatus('current')
if mibBuilder.loadTexts: xupsOutputTotalFullGroup.setDescription('The Full set of xupsOutputTotal subgroup objects.')
xupsBypassTotalFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 25)).setObjects(("XUPS-MIB", "xupsBypassAverageVoltage"), ("XUPS-MIB", "xupsBypassTotalCurrent"), ("XUPS-MIB", "xupsBypassTotalWatts"), ("XUPS-MIB", "xupsBypassTotalVA"), ("XUPS-MIB", "xupsBypassAveragePowerFactor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsBypassTotalFullGroup = xupsBypassTotalFullGroup.setStatus('current')
if mibBuilder.loadTexts: xupsBypassTotalFullGroup.setDescription('The Full set of xupsOutputTotal subgroup objects.')
xupsAgentFullGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 1, 100, 26)).setObjects(("XUPS-MIB", "xupsAgentManufacturer"), ("XUPS-MIB", "xupsAgentModel"), ("XUPS-MIB", "xupsAgentSoftwareVersion"), ("XUPS-MIB", "xupsAgentPartNumber"), ("XUPS-MIB", "xupsAgentSerialNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xupsAgentFullGroup = xupsAgentFullGroup.setStatus('current')
if mibBuilder.loadTexts: xupsAgentFullGroup.setDescription('The Full set of xupsAgent subgroup objects.')
mibBuilder.exportSymbols("XUPS-MIB", xupsAlarm=xupsAlarm, xupsIdentModel=xupsIdentModel, xupsUpsShutdownPending=xupsUpsShutdownPending, xupsRecepStatus=xupsRecepStatus, xupsBatVoltage=xupsBatVoltage, xupsLastGeneralTest=xupsLastGeneralTest, xupstdBreakerOpen=xupstdBreakerOpen, xupsOutputFrequency=xupsOutputFrequency, xupsAgentSerialNumber=xupsAgentSerialNumber, xupsOutputSource=xupsOutputSource, xupsBatTimeRemaining=xupsBatTimeRemaining, xupsBypassTotalWatts=xupsBypassTotalWatts, xupsMaxTrapLevel=xupsMaxTrapLevel, xupsAlarmEventDescr=xupsAlarmEventDescr, xupstdBatteryDischarged=xupstdBatteryDischarged, xupstdContactInactiveNotice=xupstdContactInactiveNotice, xupstdAgentDown=xupstdAgentDown, xupsRecep=xupsRecep, PYSNMP_MODULE_ID=xupsMIB, xupsDiagnosticTestFailed=xupsDiagnosticTestFailed, xupstdBypassNotAvailable=xupstdBypassNotAvailable, xupsRecepOffDelaySecs=xupsRecepOffDelaySecs, xupstdOutputBad=xupstdOutputBad, xupstdOnInverter=xupstdOnInverter, xupsInputCurrentHighPrecision=xupsInputCurrentHighPrecision, xupsOutputAverageVoltage=xupsOutputAverageVoltage, xupstdTestTrap=xupstdTestTrap, xupstdNoticeCondition=xupstdNoticeCondition, xupsIdent=xupsIdent, xupsInputName=xupsInputName, xupsAlarmBatteryBad=xupsAlarmBatteryBad, xupsTestFullGroup=xupsTestFullGroup, xupsAmbientTempBad=xupsAmbientTempBad, xupsOutputVA=xupsOutputVA, xupsOnBypass=xupsOnBypass, xupsTrapControlFullGroup=xupsTrapControlFullGroup, xupsIdentSoftwareVersion=xupsIdentSoftwareVersion, xupsTrapSource=xupsTrapSource, xupsAlarmTable=xupsAlarmTable, xupsAlarmFullGroup=xupsAlarmFullGroup, xupsTestBatteryStatus=xupsTestBatteryStatus, xupstdAlarmTempBad=xupstdAlarmTempBad, xupsOutputEntry=xupsOutputEntry, xupsAlarmEventsFullGroup=xupsAlarmEventsFullGroup, xupsAgent=xupsAgent, xupsControlOutputOffDelay=xupsControlOutputOffDelay, xupsMibFullCompliance=xupsMibFullCompliance, xupsOutputTotalCurrent=xupsOutputTotalCurrent, xupstdOnAlternatePowerSource=xupstdOnAlternatePowerSource, xupsBatteryDischarged=xupsBatteryDischarged, xupsBypassEntry=xupsBypassEntry, xupsBattery=xupsBattery, xupsRemoteTempBad=xupsRemoteTempBad, xupsBuildingAlarm=xupsBuildingAlarm, xupsInputId=xupsInputId, xupstdRemoteTempBad=xupstdRemoteTempBad, xupsAlarmFanFailure=xupsAlarmFanFailure, xupsBypassTotalCurrent=xupsBypassTotalCurrent, xupstdNotifyGroup=xupstdNotifyGroup, xupsModuleFailure=xupsModuleFailure, xupsOutputTotalVA=xupsOutputTotalVA, xupstdModuleFailure=xupstdModuleFailure, xupsBypassNotAvailable=xupsBypassNotAvailable, xupsAlarmTestInProgress=xupsAlarmTestInProgress, xupsOutputStatus=xupsOutputStatus, xupstdAlarmEntryAdded=xupstdAlarmEntryAdded, xupsOnAlternatePowerSource=xupsOnAlternatePowerSource, xupstdControlOn=xupstdControlOn, xupsInputNumPhases=xupsInputNumPhases, xupsConfigFullGroup=xupsConfigFullGroup, xupsBypass=xupsBypass, xupsRecepTable=xupsRecepTable, xupsBatCapacity=xupsBatCapacity, xupsAlarmNumEvents=xupsAlarmNumEvents, xupsInputStatus=xupsInputStatus, xupsInputAveragePowerFactor=xupsInputAveragePowerFactor, xupsTrapControl=xupsTrapControl, xupsInputLineBads=xupsInputLineBads, xupsAlarmTempBad=xupsAlarmTempBad, xupsOutputId=xupsOutputId, xupsOutputCurrent=xupsOutputCurrent, xupsEnvAmbientHumidity=xupsEnvAmbientHumidity, xupsLowBattery=xupsLowBattery, xupsRecepHourlyPowerUsage=xupsRecepHourlyPowerUsage, xupsBypassAverageVoltage=xupsBypassAverageVoltage, xupsConfigDateAndTime=xupsConfigDateAndTime, xupstdAlarmFuseFailure=xupstdAlarmFuseFailure, xupsOnBattery=xupsOnBattery, xupsBypassNumPhases=xupsBypassNumPhases, xupstdLossOfRedundancy=xupstdLossOfRedundancy, xupstdLowBattery=xupstdLowBattery, xupsInputTable=xupsInputTable, xupsIdentSerialNumber=xupsIdentSerialNumber, xupsInputPhase=xupsInputPhase, xupsConfigOutputVoltage=xupsConfigOutputVoltage, xupstdAwaitingPower=xupstdAwaitingPower, xupstdOutputNotProtected=xupstdOutputNotProtected, xupstdOutputOffAsRequested=xupstdOutputOffAsRequested, xupsOutputTotalWatts=xupsOutputTotalWatts, xupstdControlOff=xupstdControlOff, xupsEnvAmbientLowerLimit=xupsEnvAmbientLowerLimit, xupsAlarmEntryRemoved=xupsAlarmEntryRemoved, xupsSecondaryInputWatch=xupsSecondaryInputWatch, xupstdBuildingAlarm=xupstdBuildingAlarm, xupsIdentManufacturer=xupsIdentManufacturer, xupstdAlarmEntryRemoved=xupstdAlarmEntryRemoved, xupsBypassAveragePowerFactor=xupsBypassAveragePowerFactor, xupsConfigInputVoltage=xupsConfigInputVoltage, xupstdHeartbeat=xupstdHeartbeat, xupsTrapOidDefined=xupsTrapOidDefined, xupstdOutputOff=xupstdOutputOff, xupsTest=xupsTest, xupsOutputTotalFullGroup=xupsOutputTotalFullGroup, xupsTrapMessage=xupsTrapMessage, xupsBypassFrequency=xupsBypassFrequency, xupsBypassTotal=xupsBypassTotal, xupsOutputWatts=xupsOutputWatts, xupsOutputOverload=xupsOutputOverload, xupsInputFailure=xupsInputFailure, xupsConfig=xupsConfig, xupsRecepAutoOnDelay=xupsRecepAutoOnDelay, xupsTestStart=xupsTestStart, xupstdAlarmFanFailure=xupstdAlarmFanFailure, xupsEnvAmbientTemp=xupsEnvAmbientTemp, xupsAlarmDescr=xupsAlarmDescr, xupsReturnFromLowBattery=xupsReturnFromLowBattery, xupsConfigOutputWatts=xupsConfigOutputWatts, xupsBatteryAbmStatus=xupsBatteryAbmStatus, xupstdAlarmTestInProgress=xupstdAlarmTestInProgress, xupstdCommEstablished=xupstdCommEstablished, xupsOutputPhase=xupsOutputPhase, xupsTopoPowerStrategy=xupsTopoPowerStrategy, xupstdInverterFailure=xupstdInverterFailure, xupstdContactActiveNotice=xupstdContactActiveNotice, xupsBreakerOpen=xupsBreakerOpen, xupsRecepFullGroup=xupsRecepFullGroup, xupsTopologyFullGroup=xupsTopologyFullGroup, xupsOutputCurrentHighPrecision=xupsOutputCurrentHighPrecision, xupsLoadShedSecsWithRestart=xupsLoadShedSecsWithRestart, xupsInverterFailure=xupsInverterFailure, xupsBatteryNotPresent=xupsBatteryNotPresent, xupsRecepOnDelaySecs=xupsRecepOnDelaySecs, xupsRecepAutoOffDelay=xupsRecepAutoOffDelay, xupsInputTotalWatts=xupsInputTotalWatts, xupsTopologyType=xupsTopologyType, xupsAgentSoftwareVersion=xupsAgentSoftwareVersion, xupsInputFullGroup=xupsInputFullGroup, xupsInputTotalCurrent=xupsInputTotalCurrent, xupsOutputCumulativePowerUsage=xupsOutputCumulativePowerUsage, xupsRecepCumulativePowerUsageTimer=xupsRecepCumulativePowerUsageTimer, xupstdCommunicationsLost=xupstdCommunicationsLost, xupsOutputTableFullGroup=xupsOutputTableFullGroup, xupsTopoUnitNumber=xupsTopoUnitNumber, xupsInputCurrent=xupsInputCurrent, xupsInputWatts=xupsInputWatts, xupsOutputLoad=xupsOutputLoad, xupsAlarmTime=xupsAlarmTime, xupsConfigHighOutputVoltageLimit=xupsConfigHighOutputVoltageLimit, xupstdOnBattery=xupstdOnBattery, xupstdInternalFailure=xupstdInternalFailure, xupsBypassWatts=xupsBypassWatts, xupsBypassVoltage=xupsBypassVoltage, xupsHeartbeatMinsInterval=xupsHeartbeatMinsInterval, xupsControl=xupsControl, xupsAlarmEventTable=xupsAlarmEventTable, xupsInputTotalVA=xupsInputTotalVA, xupsOutputCumulativePowerUsageTimer=xupsOutputCumulativePowerUsageTimer, xupsBypassCurrentHighPrecision=xupsBypassCurrentHighPrecision, xupsEnvironmentFullGroup=xupsEnvironmentFullGroup, xupsRecepShedSecsWithRestart=xupsRecepShedSecsWithRestart, xupsRecepEntry=xupsRecepEntry, xupstdRemoteHumidityBad=xupstdRemoteHumidityBad, xupsInputEntry=xupsInputEntry, xupsConformance=xupsConformance, xupsOutputPercentLoad=xupsOutputPercentLoad, xupsAlarmEventID=xupsAlarmEventID, xupsAlarmChargerFailed=xupsAlarmChargerFailed, xupsOutputTable=xupsOutputTable, xupsAlarmEventDateAndTime=xupsAlarmEventDateAndTime, xupsTrapDefined=xupsTrapDefined, xupsAlarms=xupsAlarms, xupsIdentOemCode=xupsIdentOemCode, xupsBypassTotalVA=xupsBypassTotalVA, xupsControlOutputOnDelay=xupsControlOutputOnDelay, xupsDeprecatedGroup=xupsDeprecatedGroup, xupstdPowerSwitchBad=xupstdPowerSwitchBad, xupsControlToBypassDelay=xupsControlToBypassDelay, xupsOutputTotal=xupsOutputTotal, xupsAlarmFuseFailure=xupsAlarmFuseFailure, xupstdUtilityPowerRestored=xupstdUtilityPowerRestored, xupsOnInverter=xupsOnInverter, xupsInputAverageVoltage=xupsInputAverageVoltage, xupsInputTotalFullGroup=xupsInputTotalFullGroup, xupsEnvAmbientUpperLimit=xupsEnvAmbientUpperLimit, xupstdUpsShutdownPending=xupstdUpsShutdownPending, xupsNumReceptacles=xupsNumReceptacles, xupsRecepCumulativePowerUsage=xupsRecepCumulativePowerUsage, xupsRecepIndex=xupsRecepIndex, xupsAlarmEntryAdded=xupsAlarmEntryAdded, xupsOutputNumPhases=xupsOutputNumPhases, xupsConfigLowOutputVoltageLimit=xupsConfigLowOutputVoltageLimit, xupsInternalFailure=xupsInternalFailure, xupsAgentManufacturer=xupsAgentManufacturer, xupsTopology=xupsTopology, xupstdAmbientTempBad=xupstdAmbientTempBad, xupsOutputAveragePowerFactor=xupsOutputAveragePowerFactor, xupsAlarmEntry=xupsAlarmEntry, xupstdDiagnosticTestFailed=xupstdDiagnosticTestFailed, xupsAlarmEventMsg=xupsAlarmEventMsg, xupsIdentPartNumber=xupsIdentPartNumber, xupsUtilityPowerRestored=xupsUtilityPowerRestored, xupsControlOutputOnTrapDelay=xupsControlOutputOnTrapDelay, xupsBatteryLastReplacedDate=xupsBatteryLastReplacedDate, xupsOutputNotProtected=xupsOutputNotProtected, xupsBatteryFailure=xupsBatteryFailure, xupsInputFrequency=xupsInputFrequency, xupsRemoteHumidityBad=xupsRemoteHumidityBad, xupsShutdownImminent=xupsShutdownImminent, xupsInput=xupsInput, xupsAlarmEventEntry=xupsAlarmEventEntry, xupsAlarmEventKind=xupsAlarmEventKind, xupsCommunicationsLost=xupsCommunicationsLost, xupsTopoMachineCode=xupsTopoMachineCode, xupsAgentModel=xupsAgentModel, xupstdOutputOverload=xupstdOutputOverload, xupsInputVoltage=xupsInputVoltage, xupsBypassId=xupsBypassId, xupsBatCurrent=xupsBatCurrent, xupsBypassName=xupsBypassName, xupstdOnBypass=xupstdOnBypass, xupstdDiagnosticTestPassed=xupstdDiagnosticTestPassed, xupsControlFullGroup=xupsControlFullGroup, xupsInputTotal=xupsInputTotal, xupsOutputVoltage=xupsOutputVoltage, xupsSendTrapType=xupsSendTrapType, xupsBypassFullGroup=xupsBypassFullGroup, xupstdEMPNotifyGroup=xupstdEMPNotifyGroup, xupsBypassTableFullGroup=xupsBypassTableFullGroup, xupsBypassTotalFullGroup=xupsBypassTotalFullGroup, xupsAlarmID=xupsAlarmID, xupsAltPowerNotAvailable=xupsAltPowerNotAvailable, xupstdAlarmChargerFailed=xupstdAlarmChargerFailed, xupsAgentFullGroup=xupsAgentFullGroup, xupstdShutdownImminent=xupstdShutdownImminent, xupsOutputHourlyPowerUsage=xupsOutputHourlyPowerUsage, xupsBypassTable=xupsBypassTable, xupsAgentPartNumber=xupsAgentPartNumber, xupsOutputFullGroup=xupsOutputFullGroup, xupsBatteryLowCapacity=xupsBatteryLowCapacity, xupsInputSource=xupsInputSource, xupsMIB=xupsMIB, xupsNoticeCondition=xupsNoticeCondition, xupsBypassPhase=xupsBypassPhase, xupsLastGeneralTestResult=xupsLastGeneralTestResult)
mibBuilder.exportSymbols("XUPS-MIB", xupsSwitchable=xupsSwitchable, xupsOutput=xupsOutput, xupstdReturnFromLowBattery=xupstdReturnFromLowBattery, xupsIdentFullGroup=xupsIdentFullGroup, xupsOnMaintenanceBypass=xupsOnMaintenanceBypass, xupsDualInputStatus=xupsDualInputStatus, xupstdAltPowerNotAvailable=xupstdAltPowerNotAvailable, xupsBatteryAged=xupsBatteryAged, xupsOutputOff=xupsOutputOff, xupsLossOfRedundancy=xupsLossOfRedundancy, xupsAlarmAwaitingPower=xupsAlarmAwaitingPower, xupsTestTrap=xupsTestTrap, xupsOutputOffAsRequested=xupsOutputOffAsRequested, xupsConfigInstallDate=xupsConfigInstallDate, xupsPowerSwitchBad=xupsPowerSwitchBad, xupstdAlarmBatteryBad=xupstdAlarmBatteryBad, xupsInputTableFullGroup=xupsInputTableFullGroup, xupstdOnMaintenanceBypass=xupstdOnMaintenanceBypass, xupsAlarmOutputBad=xupsAlarmOutputBad, xupsControlOutputOffTrapDelay=xupsControlOutputOffTrapDelay, xupsOutputName=xupsOutputName, xupsConfigOutputFreq=xupsConfigOutputFreq, xupstdInputFailure=xupstdInputFailure, xupsBatteryFullGroup=xupsBatteryFullGroup)
