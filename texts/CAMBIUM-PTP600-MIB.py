#
# PySNMP MIB module CAMBIUM-PTP600-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/cambium/CAMBIUM-PTP600-MIB
# Produced by pysmi-1.1.12 at Fri Jul 19 11:33:18 2024
# On host fv-az702-886 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, NotificationType, Counter64, TimeTicks, enterprises, Counter32, Gauge32, MibIdentifier, Integer32, ModuleIdentity, Bits, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "Counter64", "TimeTicks", "enterprises", "Counter32", "Gauge32", "MibIdentifier", "Integer32", "ModuleIdentity", "Bits", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cambium = ModuleIdentity((1, 3, 6, 1, 4, 1, 17713))
cambium.setRevisions(('2014-03-04 14:14', '2013-09-14 23:38', '2012-08-13 18:12', '2012-05-01 11:58', '2012-02-13 12:38', '2011-11-08 13:47', '2010-12-07 13:28', '2010-11-02 13:33', '2010-07-16 15:41', '2010-04-23 10:07', '2010-02-19 18:55', '2009-07-10 15:20', '2009-02-27 17:11', '2008-12-15 12:19', '2008-06-30 10:16', '2008-02-29 09:42', '2007-07-31 18:39', '2006-11-23 14:36', '2006-07-24 10:08',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cambium.setRevisionsDescriptions(('PTP600-10-07:\n         Reinstated incompatibleRegionCodesTrap.\n         Reinstated incompatibleMasterAndSlaveTrap.\n         Reinstated encryptionEnabledMismatchTrap.', 'PTP600-10-06:\n         Removed incompatibleRegionCodesTrap.\n         Removed incompatibleMasterAndSlaveTrap.\n         Removed encryptionEnabledMismatchTrap.', 'PTP600-10-04:\n         Added ethernetBridgingStatus, ethernetBridgingAvailability.\n         Added ethernetBridgingStatusAlarm, ethernetBridgingStatusAlarmTrap.', 'PTP600-10-03: make linkName & groupID read-write.', 'PTP600-10-01: Updated ORGANIZATION and CONTACT-INFO.', 'PTP600-10-00:\n         Added new SNTP attributes, replace syslogLocalLog with syslogState. Add L2/L3 QoS attributes.\n         Added securityLevel. Renamed vLANPriorityQueueMapping with ethernetPriorityQueueMapping.\n         Added syslogClient and secureModeAlarm traps.', 'PTP600-09-10: Added searchState, accessMethod and groupID.', 'PTP600-09-02: Added latitude, longitude, altitude.', 'PTP600-09-01:\n         Changed root OID.\n         Renamed ethernet & fiber attributes & traps.\n         Replaced vLANManagementVIDValidation with managementMode.\n         Added linkName, siteName, hTTPSAccessEnabled, tDDSynchronizationMode.\n         Added syslog attributes & traps.\n         Added SNMPTrapTable for dual trap receivers.', 'PTP600-08-50: Security enhancements.', 'PTP600-08-04: Added SNMPv3 support, DFS Table, Automatic Tx Power Control. BIT STRING types now OCTET STRING.', 'PTP600-08-03: Added VLAN Priority Table, more read-only attributes, plus alarm tidy-up.', 'PTP600-08-01: Improve TDD Synchronization status and alarms.', 'PTP600-08-00: Support 4.8 & 4.9 GHz variant & 20 MHz bandwidth, Link Symmetry, TDD Synchronization.', 'PTP600-07-00: Added IEEE 802.1q & 802.1ad VLAN support.', 'PTP600-06-00: Added OOB, HTTP & telnet access controls.', 'PTP600-05-00: Added groups, attributes and notifications for diagnostic alarms.', 'PTP600-04-00: Converted to SMIv2.', 'PTP600-03-01',))
if mibBuilder.loadTexts: cambium.setLastUpdated('201403041414Z')
if mibBuilder.loadTexts: cambium.setOrganization('Cambium Networks Ltd.')
if mibBuilder.loadTexts: cambium.setContactInfo('Post:  Simon Whitaker\n                 Cambium Networks Ltd.\n                 Unit B2,\n                 Linhay Business Park,\n                 Eastern Road,\n                 Ashburton,\n                 Devon.\n                 TQ13 7UP\n                 United Kingdom\n         Phone:  +44 (0) 1364 655 500\n         Email:  simon.whitaker@cambiumnetworks.com')
if mibBuilder.loadTexts: cambium.setDescription('MIB for 300Mbps non-line-of-sight (NLOS) wireless ethernet bridge.')
ptp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 1))
ptmp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 2))
ptp600 = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6))
dfs = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6, 3))
bridge = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6, 4))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6, 5))
ethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6, 6))
telecom = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6, 7))
licence = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6, 8))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6, 9))
phyControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6, 10))
phyStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6, 12))
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6, 13))
smtp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6, 15))
snmpControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6, 16))
sntp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6, 17))
reset = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6, 18))
versions = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6, 19))
pubStats = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6, 20))
encryption = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6, 22))
tDDControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6, 23))
aAAControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6, 25))
syslogControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6, 24))
supplementary = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6, 96))
ptpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6, 98))
ptpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6, 99))
ptpTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0))
ptpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 17713, 6, 97)).setObjects(("CAMBIUM-PTP600-MIB", "dfsGroup"), ("CAMBIUM-PTP600-MIB", "bridgeGroup"), ("CAMBIUM-PTP600-MIB", "configurationGroup"), ("CAMBIUM-PTP600-MIB", "ethernetGroup"), ("CAMBIUM-PTP600-MIB", "telecomGroup"), ("CAMBIUM-PTP600-MIB", "licenceGroup"), ("CAMBIUM-PTP600-MIB", "managementGroup"), ("CAMBIUM-PTP600-MIB", "phyControlGroup"), ("CAMBIUM-PTP600-MIB", "phyStatusGroup"), ("CAMBIUM-PTP600-MIB", "alarmsGroup"), ("CAMBIUM-PTP600-MIB", "smtpGroup"), ("CAMBIUM-PTP600-MIB", "snmpControlGroup"), ("CAMBIUM-PTP600-MIB", "sntpGroup"), ("CAMBIUM-PTP600-MIB", "resetGroup"), ("CAMBIUM-PTP600-MIB", "versionsGroup"), ("CAMBIUM-PTP600-MIB", "pubStatsGroup"), ("CAMBIUM-PTP600-MIB", "encryptionGroup"), ("CAMBIUM-PTP600-MIB", "tDDControlGroup"), ("CAMBIUM-PTP600-MIB", "aAAControlGroup"), ("CAMBIUM-PTP600-MIB", "syslogControlGroup"), ("CAMBIUM-PTP600-MIB", "supplementaryGroup"), ("CAMBIUM-PTP600-MIB", "notificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ptpCompliance = ptpCompliance.setStatus('current')
if mibBuilder.loadTexts: ptpCompliance.setDescription('The compliance statement for the Cambium PTP MIB')
dfsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 6, 98, 3)).setObjects(("CAMBIUM-PTP600-MIB", "dfsTableNumber"), ("CAMBIUM-PTP600-MIB", "dfsMeans"), ("CAMBIUM-PTP600-MIB", "dfsNineNinePointNinePercentiles"), ("CAMBIUM-PTP600-MIB", "dfsPeaks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfsGroup = dfsGroup.setStatus('current')
if mibBuilder.loadTexts: dfsGroup.setDescription('The dfs object group.')
bridgeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 6, 98, 4)).setObjects(("CAMBIUM-PTP600-MIB", "localPacketFiltering"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgeGroup = bridgeGroup.setStatus('current')
if mibBuilder.loadTexts: bridgeGroup.setDescription('The bridge object group.')
configurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 6, 98, 5)).setObjects(("CAMBIUM-PTP600-MIB", "iPv4Address"), ("CAMBIUM-PTP600-MIB", "subnetMask"), ("CAMBIUM-PTP600-MIB", "gatewayIPAddress"), ("CAMBIUM-PTP600-MIB", "targetMACAddress"), ("CAMBIUM-PTP600-MIB", "masterSlaveMode"), ("CAMBIUM-PTP600-MIB", "maximumTransmitPower"), ("CAMBIUM-PTP600-MIB", "antennaGain"), ("CAMBIUM-PTP600-MIB", "cableLoss"), ("CAMBIUM-PTP600-MIB", "eIRP"), ("CAMBIUM-PTP600-MIB", "ethernetCappedMaxWirelessSpeed"), ("CAMBIUM-PTP600-MIB", "channelBandwidth"), ("CAMBIUM-PTP600-MIB", "remoteIPAddress"), ("CAMBIUM-PTP600-MIB", "linkName"), ("CAMBIUM-PTP600-MIB", "siteName"), ("CAMBIUM-PTP600-MIB", "accessMethod"), ("CAMBIUM-PTP600-MIB", "groupID"), ("CAMBIUM-PTP600-MIB", "iPv6Address"), ("CAMBIUM-PTP600-MIB", "iPVersion"), ("CAMBIUM-PTP600-MIB", "iPv6AutoConfiguredLinkLocalAddress"), ("CAMBIUM-PTP600-MIB", "iPv6PrefixLength"), ("CAMBIUM-PTP600-MIB", "iPv6GatewayAddress"), ("CAMBIUM-PTP600-MIB", "remoteInternetAddressType"), ("CAMBIUM-PTP600-MIB", "remoteInternetAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configurationGroup = configurationGroup.setStatus('current')
if mibBuilder.loadTexts: configurationGroup.setDescription('The configuration object group.')
ethernetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 6, 98, 6)).setObjects(("CAMBIUM-PTP600-MIB", "dataPortAutoNegotiation"), ("CAMBIUM-PTP600-MIB", "dataPortAutoNegAdvertisement"), ("CAMBIUM-PTP600-MIB", "dataPortAutoMdix"), ("CAMBIUM-PTP600-MIB", "dataPortStatus"), ("CAMBIUM-PTP600-MIB", "dataPortSpeedAndDuplex"), ("CAMBIUM-PTP600-MIB", "dataPortWirelessDownAlert"), ("CAMBIUM-PTP600-MIB", "useVLANForManagementInterfaces"), ("CAMBIUM-PTP600-MIB", "vLANManagementPriority"), ("CAMBIUM-PTP600-MIB", "vLANManagementVID"), ("CAMBIUM-PTP600-MIB", "managementPortStatus"), ("CAMBIUM-PTP600-MIB", "managementPortSpeedAndDuplex"), ("CAMBIUM-PTP600-MIB", "ethernetPriorityTableNumber"), ("CAMBIUM-PTP600-MIB", "l2CPPriorityTableNumber"), ("CAMBIUM-PTP600-MIB", "iPDSCPPriorityTableNumber"), ("CAMBIUM-PTP600-MIB", "mPLSTCPriorityTableNumber"), ("CAMBIUM-PTP600-MIB", "managementMode"), ("CAMBIUM-PTP600-MIB", "managementPortWirelessDownAlert"), ("CAMBIUM-PTP600-MIB", "qOSPriorityScheme"), ("CAMBIUM-PTP600-MIB", "unknownNetworkPriorityQueueMapping"), ("CAMBIUM-PTP600-MIB", "dSCPManagementPriority"), ("CAMBIUM-PTP600-MIB", "ethernetBridgingStatus"), ("CAMBIUM-PTP600-MIB", "ethernetPriorityQueueMapping"), ("CAMBIUM-PTP600-MIB", "l2CPPriorityQueueMapping"), ("CAMBIUM-PTP600-MIB", "iPDSCPPriorityQueueMapping"), ("CAMBIUM-PTP600-MIB", "mPLSTCPriorityQueueMapping"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetGroup = ethernetGroup.setStatus('current')
if mibBuilder.loadTexts: ethernetGroup.setDescription('The ethernet object group.')
telecomGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 6, 98, 7)).setObjects(("CAMBIUM-PTP600-MIB", "telecomsInterface"), ("CAMBIUM-PTP600-MIB", "telecomsChannelAStatus"), ("CAMBIUM-PTP600-MIB", "telecomsChannelBStatus"), ("CAMBIUM-PTP600-MIB", "channelALineCode"), ("CAMBIUM-PTP600-MIB", "channelBLineCode"), ("CAMBIUM-PTP600-MIB", "channelACableLength"), ("CAMBIUM-PTP600-MIB", "channelBCableLength"), ("CAMBIUM-PTP600-MIB", "channelALoopback"), ("CAMBIUM-PTP600-MIB", "channelBLoopback"), ("CAMBIUM-PTP600-MIB", "telecomsChannelSelection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    telecomGroup = telecomGroup.setStatus('current')
if mibBuilder.loadTexts: telecomGroup.setDescription('The telecom object group.')
licenceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 6, 98, 8)).setObjects(("CAMBIUM-PTP600-MIB", "regionCode"), ("CAMBIUM-PTP600-MIB", "productVariant"), ("CAMBIUM-PTP600-MIB", "productName"), ("CAMBIUM-PTP600-MIB", "ethernetFiberSupport"), ("CAMBIUM-PTP600-MIB", "frequencyVariant"), ("CAMBIUM-PTP600-MIB", "bandwidthVariant"), ("CAMBIUM-PTP600-MIB", "constantPowerSpectralDensity"), ("CAMBIUM-PTP600-MIB", "sNMPv3Enable"), ("CAMBIUM-PTP600-MIB", "hAZLOCConfiguration"), ("CAMBIUM-PTP600-MIB", "securityLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    licenceGroup = licenceGroup.setStatus('current')
if mibBuilder.loadTexts: licenceGroup.setDescription('The licence object group.')
managementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 6, 98, 9)).setObjects(("CAMBIUM-PTP600-MIB", "targetRange"), ("CAMBIUM-PTP600-MIB", "rangingMode"), ("CAMBIUM-PTP600-MIB", "installStatus"), ("CAMBIUM-PTP600-MIB", "installArmState"), ("CAMBIUM-PTP600-MIB", "tFTPServerIPAddress"), ("CAMBIUM-PTP600-MIB", "tFTPServerPortNumber"), ("CAMBIUM-PTP600-MIB", "tFTPSoftwareUpgradeFileName"), ("CAMBIUM-PTP600-MIB", "tFTPStartSoftwareUpgrade"), ("CAMBIUM-PTP600-MIB", "tFTPSoftwareUpgradeStatus"), ("CAMBIUM-PTP600-MIB", "tFTPSoftwareUpgradeStatusText"), ("CAMBIUM-PTP600-MIB", "tFTPSoftwareUpgradeStatusAdditionalText"), ("CAMBIUM-PTP600-MIB", "hTTPAccessEnabled"), ("CAMBIUM-PTP600-MIB", "telnetAccessEnabled"), ("CAMBIUM-PTP600-MIB", "hTTPPortNumber"), ("CAMBIUM-PTP600-MIB", "hTTPSPortNumber"), ("CAMBIUM-PTP600-MIB", "telnetPortNumber"), ("CAMBIUM-PTP600-MIB", "hTTPSAccessEnabled"), ("CAMBIUM-PTP600-MIB", "tFTPServerInternetAddressType"), ("CAMBIUM-PTP600-MIB", "tFTPServerInternetAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    managementGroup = managementGroup.setStatus('current')
if mibBuilder.loadTexts: managementGroup.setDescription('The management object group.')
phyControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 6, 98, 10)).setObjects(("CAMBIUM-PTP600-MIB", "linkSymmetry"), ("CAMBIUM-PTP600-MIB", "linkModeOptimisation"), ("CAMBIUM-PTP600-MIB", "userConfiguredMaxModulationMode"), ("CAMBIUM-PTP600-MIB", "remoteMaximumTransmitPower"), ("CAMBIUM-PTP600-MIB", "txColorCode"), ("CAMBIUM-PTP600-MIB", "rxColorCode"), ("CAMBIUM-PTP600-MIB", "automaticTxPowerControl"), ("CAMBIUM-PTP600-MIB", "remoteRxTargetPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    phyControlGroup = phyControlGroup.setStatus('current')
if mibBuilder.loadTexts: phyControlGroup.setDescription('The phyControl object group.')
phyStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 6, 98, 12)).setObjects(("CAMBIUM-PTP600-MIB", "receivePower"), ("CAMBIUM-PTP600-MIB", "vectorError"), ("CAMBIUM-PTP600-MIB", "transmitPower"), ("CAMBIUM-PTP600-MIB", "range"), ("CAMBIUM-PTP600-MIB", "linkLoss"), ("CAMBIUM-PTP600-MIB", "receiveChannel"), ("CAMBIUM-PTP600-MIB", "transmitChannel"), ("CAMBIUM-PTP600-MIB", "receiveModulationMode"), ("CAMBIUM-PTP600-MIB", "transmitModulationMode"), ("CAMBIUM-PTP600-MIB", "receiveFreqMHz"), ("CAMBIUM-PTP600-MIB", "transmitFreqMHz"), ("CAMBIUM-PTP600-MIB", "signalStrengthRatio"), ("CAMBIUM-PTP600-MIB", "receiveFreqKHz"), ("CAMBIUM-PTP600-MIB", "transmitFreqKHz"), ("CAMBIUM-PTP600-MIB", "searchState"), ("CAMBIUM-PTP600-MIB", "rawReceivePower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    phyStatusGroup = phyStatusGroup.setStatus('current')
if mibBuilder.loadTexts: phyStatusGroup.setDescription('The phyStatus object group.')
alarmsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 6, 98, 13)).setObjects(("CAMBIUM-PTP600-MIB", "unitOutOfCalibration"), ("CAMBIUM-PTP600-MIB", "incompatibleRegionCodes"), ("CAMBIUM-PTP600-MIB", "noWirelessChannelAvailable"), ("CAMBIUM-PTP600-MIB", "wirelessLinkDisabledWarning"), ("CAMBIUM-PTP600-MIB", "dataPortDisabledWarning"), ("CAMBIUM-PTP600-MIB", "dataPortFiberStatus"), ("CAMBIUM-PTP600-MIB", "dataPortConfigurationMismatch"), ("CAMBIUM-PTP600-MIB", "incompatibleMasterAndSlave"), ("CAMBIUM-PTP600-MIB", "tDDSynchronizationStatus"), ("CAMBIUM-PTP600-MIB", "managementPortDisabledWarning"), ("CAMBIUM-PTP600-MIB", "tDDSynchronizationAlarm"), ("CAMBIUM-PTP600-MIB", "linkModeOptimizationMismatch"), ("CAMBIUM-PTP600-MIB", "managementPortConfigurationMismatch"), ("CAMBIUM-PTP600-MIB", "secureModeAlarm"), ("CAMBIUM-PTP600-MIB", "ethernetBridgingStatusAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alarmsGroup = alarmsGroup.setStatus('current')
if mibBuilder.loadTexts: alarmsGroup.setDescription('The alarms object group.')
smtpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 6, 98, 15)).setObjects(("CAMBIUM-PTP600-MIB", "sMTPEmailAlert"), ("CAMBIUM-PTP600-MIB", "sMTPServerIPAddress"), ("CAMBIUM-PTP600-MIB", "sMTPServerPortNumber"), ("CAMBIUM-PTP600-MIB", "sMTPSourceEmailAddress"), ("CAMBIUM-PTP600-MIB", "sMTPDestinationEmailAddress"), ("CAMBIUM-PTP600-MIB", "sMTPEnabledMessages"), ("CAMBIUM-PTP600-MIB", "sMTPServerInternetAddressType"), ("CAMBIUM-PTP600-MIB", "sMTPServerInternetAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    smtpGroup = smtpGroup.setStatus('current')
if mibBuilder.loadTexts: smtpGroup.setDescription('The smtp object group.')
snmpControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 6, 98, 16)).setObjects(("CAMBIUM-PTP600-MIB", "sNMPPortNumber"), ("CAMBIUM-PTP600-MIB", "sNMPCommunityString"), ("CAMBIUM-PTP600-MIB", "sNMPTrapTableNumber"), ("CAMBIUM-PTP600-MIB", "sNMPTrapVersion"), ("CAMBIUM-PTP600-MIB", "sNMPEnabledTraps"), ("CAMBIUM-PTP600-MIB", "enabledDiagnosticAlarms"), ("CAMBIUM-PTP600-MIB", "sNMPSendAllTrapsAtStartup"), ("CAMBIUM-PTP600-MIB", "sNMPTrapIPAddress"), ("CAMBIUM-PTP600-MIB", "sNMPTrapPortNumber"), ("CAMBIUM-PTP600-MIB", "sNMPTrapInternetAddressType"), ("CAMBIUM-PTP600-MIB", "sNMPTrapInternetAddress"), ("CAMBIUM-PTP600-MIB", "sNMPTrapReceiverEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snmpControlGroup = snmpControlGroup.setStatus('current')
if mibBuilder.loadTexts: snmpControlGroup.setDescription('The snmpControl object group.')
sntpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 6, 98, 17)).setObjects(("CAMBIUM-PTP600-MIB", "sNTPState"), ("CAMBIUM-PTP600-MIB", "sNTPPollInterval"), ("CAMBIUM-PTP600-MIB", "sNTPSync"), ("CAMBIUM-PTP600-MIB", "sNTPLastSync"), ("CAMBIUM-PTP600-MIB", "systemClock"), ("CAMBIUM-PTP600-MIB", "timeZone"), ("CAMBIUM-PTP600-MIB", "daylightSaving"), ("CAMBIUM-PTP600-MIB", "sNTPPrimaryServer"), ("CAMBIUM-PTP600-MIB", "sNTPPrimaryServerDeadTime"), ("CAMBIUM-PTP600-MIB", "sNTPServerRetries"), ("CAMBIUM-PTP600-MIB", "sNTPServerTimeout"), ("CAMBIUM-PTP600-MIB", "sNTPServerTableNumber"), ("CAMBIUM-PTP600-MIB", "sNTPServerIPAddress"), ("CAMBIUM-PTP600-MIB", "sNTPServerPortNumber"), ("CAMBIUM-PTP600-MIB", "sNTPServerStatus"), ("CAMBIUM-PTP600-MIB", "sNTPServerInternetAddressType"), ("CAMBIUM-PTP600-MIB", "sNTPServerInternetAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sntpGroup = sntpGroup.setStatus('current')
if mibBuilder.loadTexts: sntpGroup.setDescription('The sntp object group.')
resetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 6, 98, 18)).setObjects(("CAMBIUM-PTP600-MIB", "systemReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    resetGroup = resetGroup.setStatus('current')
if mibBuilder.loadTexts: resetGroup.setDescription('The reset object group.')
versionsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 6, 98, 19)).setObjects(("CAMBIUM-PTP600-MIB", "softwareVersion"), ("CAMBIUM-PTP600-MIB", "hardwareVersion"), ("CAMBIUM-PTP600-MIB", "secondarySoftwareVersion"), ("CAMBIUM-PTP600-MIB", "bootVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    versionsGroup = versionsGroup.setStatus('current')
if mibBuilder.loadTexts: versionsGroup.setDescription('The versions object group.')
pubStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 6, 98, 20)).setObjects(("CAMBIUM-PTP600-MIB", "receiveDataRate"), ("CAMBIUM-PTP600-MIB", "transmitDataRate"), ("CAMBIUM-PTP600-MIB", "aggregateDataRate"), ("CAMBIUM-PTP600-MIB", "wirelessLinkAvailability"), ("CAMBIUM-PTP600-MIB", "wirelessLinkStatus"), ("CAMBIUM-PTP600-MIB", "byteErrorRatio"), ("CAMBIUM-PTP600-MIB", "receiveModulationModeDetail"), ("CAMBIUM-PTP600-MIB", "ethernetBridgingAvailability"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pubStatsGroup = pubStatsGroup.setStatus('current')
if mibBuilder.loadTexts: pubStatsGroup.setDescription('The pubStats object group.')
encryptionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 6, 98, 22)).setObjects(("CAMBIUM-PTP600-MIB", "encryptionAlgorithm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    encryptionGroup = encryptionGroup.setStatus('current')
if mibBuilder.loadTexts: encryptionGroup.setDescription('The encryption object group.')
tDDControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 6, 98, 23)).setObjects(("CAMBIUM-PTP600-MIB", "tDDSynchronizationMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tDDControlGroup = tDDControlGroup.setStatus('current')
if mibBuilder.loadTexts: tDDControlGroup.setDescription('The tDDControl object group.')
aAAControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 6, 98, 25)).setObjects(("CAMBIUM-PTP600-MIB", "userTableNumber"), ("CAMBIUM-PTP600-MIB", "userName"), ("CAMBIUM-PTP600-MIB", "userRole"), ("CAMBIUM-PTP600-MIB", "userEnabled"), ("CAMBIUM-PTP600-MIB", "userPassword"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aAAControlGroup = aAAControlGroup.setStatus('current')
if mibBuilder.loadTexts: aAAControlGroup.setDescription('The aAAControl object group.')
syslogControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 6, 98, 24)).setObjects(("CAMBIUM-PTP600-MIB", "syslogClient"), ("CAMBIUM-PTP600-MIB", "syslogState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    syslogControlGroup = syslogControlGroup.setStatus('current')
if mibBuilder.loadTexts: syslogControlGroup.setDescription('The syslogControl object group.')
supplementaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 6, 98, 96)).setObjects(("CAMBIUM-PTP600-MIB", "longitude"), ("CAMBIUM-PTP600-MIB", "latitude"), ("CAMBIUM-PTP600-MIB", "altitude"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    supplementaryGroup = supplementaryGroup.setStatus('current')
if mibBuilder.loadTexts: supplementaryGroup.setDescription('The supplementary object group.')
notificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 17713, 6, 98, 99)).setObjects(("CAMBIUM-PTP600-MIB", "channelChangeTrap"), ("CAMBIUM-PTP600-MIB", "dfsImpulsiveInterferenceTrap"), ("CAMBIUM-PTP600-MIB", "dataPortStatusTrap"), ("CAMBIUM-PTP600-MIB", "telecomsChannelAStatusTrap"), ("CAMBIUM-PTP600-MIB", "telecomsChannelBStatusTrap"), ("CAMBIUM-PTP600-MIB", "channelALoopbackTrap"), ("CAMBIUM-PTP600-MIB", "channelBLoopbackTrap"), ("CAMBIUM-PTP600-MIB", "regionCodeTrap"), ("CAMBIUM-PTP600-MIB", "installStatusTrap"), ("CAMBIUM-PTP600-MIB", "installArmStateTrap"), ("CAMBIUM-PTP600-MIB", "unitOutOfCalibrationTrap"), ("CAMBIUM-PTP600-MIB", "incompatibleRegionCodesTrap"), ("CAMBIUM-PTP600-MIB", "noWirelessChannelAvailableTrap"), ("CAMBIUM-PTP600-MIB", "wirelessLinkDisabledWarningTrap"), ("CAMBIUM-PTP600-MIB", "dataPortDisabledWarningTrap"), ("CAMBIUM-PTP600-MIB", "dataPortFiberStatusTrap"), ("CAMBIUM-PTP600-MIB", "dataPortConfigurationMismatchTrap"), ("CAMBIUM-PTP600-MIB", "incompatibleMasterAndSlaveTrap"), ("CAMBIUM-PTP600-MIB", "sNTPSyncTrap"), ("CAMBIUM-PTP600-MIB", "tDDSynchronizationAlarmTrap"), ("CAMBIUM-PTP600-MIB", "managementPortStatusTrap"), ("CAMBIUM-PTP600-MIB", "managementPortDisabledWarningTrap"), ("CAMBIUM-PTP600-MIB", "linkModeOptimizationMismatchTrap"), ("CAMBIUM-PTP600-MIB", "managementPortConfigurationMismatchTrap"), ("CAMBIUM-PTP600-MIB", "syslogStateTrap"), ("CAMBIUM-PTP600-MIB", "syslogLocalNearlyFullTrap"), ("CAMBIUM-PTP600-MIB", "syslogLocalWrappedTrap"), ("CAMBIUM-PTP600-MIB", "syslogClientTrap"), ("CAMBIUM-PTP600-MIB", "secureModeAlarmTrap"), ("CAMBIUM-PTP600-MIB", "ethernetBridgingStatusAlarmTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    notificationsGroup = notificationsGroup.setStatus('current')
if mibBuilder.loadTexts: notificationsGroup.setDescription('The notifications group.')
dfsTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 6, 3, 2), )
if mibBuilder.loadTexts: dfsTable.setStatus('current')
if mibBuilder.loadTexts: dfsTable.setDescription(' A table storing a snapshot of various DFS measurements for each channel')
dfsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 6, 3, 2, 1), ).setIndexNames((0, "CAMBIUM-PTP600-MIB", "dfsTableIndex"))
if mibBuilder.loadTexts: dfsTableEntry.setStatus('current')
if mibBuilder.loadTexts: dfsTableEntry.setDescription('Table DfsTable')
ethernetPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 6, 6, 15), )
if mibBuilder.loadTexts: ethernetPriorityTable.setStatus('current')
if mibBuilder.loadTexts: ethernetPriorityTable.setDescription(' A priority queue mapping table. This is a list of packet queues indexed by Ethernet priority.')
ethernetPriorityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 6, 6, 15, 1), ).setIndexNames((0, "CAMBIUM-PTP600-MIB", "ethernetPriorityTableIndex"))
if mibBuilder.loadTexts: ethernetPriorityTableEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetPriorityTableEntry.setDescription('Table EthernetPriorityTable')
l2CPPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 6, 6, 17), )
if mibBuilder.loadTexts: l2CPPriorityTable.setStatus('current')
if mibBuilder.loadTexts: l2CPPriorityTable.setDescription(' A priority queue mapping table. This is a list of packet queues indexed by L2CP priority.')
l2CPPriorityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 6, 6, 17, 1), ).setIndexNames((0, "CAMBIUM-PTP600-MIB", "l2CPPriorityTableIndex"))
if mibBuilder.loadTexts: l2CPPriorityTableEntry.setStatus('current')
if mibBuilder.loadTexts: l2CPPriorityTableEntry.setDescription('Table L2CPPriorityTable')
iPDSCPPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 6, 6, 19), )
if mibBuilder.loadTexts: iPDSCPPriorityTable.setStatus('current')
if mibBuilder.loadTexts: iPDSCPPriorityTable.setDescription(' A priority queue mapping table. This is a list of packet queues indexed by L3 IP DSCP priority.')
iPDSCPPriorityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 6, 6, 19, 1), ).setIndexNames((0, "CAMBIUM-PTP600-MIB", "iPDSCPPriorityTableIndex"))
if mibBuilder.loadTexts: iPDSCPPriorityTableEntry.setStatus('current')
if mibBuilder.loadTexts: iPDSCPPriorityTableEntry.setDescription('Table IPDSCPPriorityTable')
mPLSTCPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 6, 6, 21), )
if mibBuilder.loadTexts: mPLSTCPriorityTable.setStatus('current')
if mibBuilder.loadTexts: mPLSTCPriorityTable.setDescription(' A priority queue mapping table. This is a list of priority queues indexed by MPLS TC priority.')
mPLSTCPriorityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 6, 6, 21, 1), ).setIndexNames((0, "CAMBIUM-PTP600-MIB", "mPLSTCPriorityTableIndex"))
if mibBuilder.loadTexts: mPLSTCPriorityTableEntry.setStatus('current')
if mibBuilder.loadTexts: mPLSTCPriorityTableEntry.setDescription('Table MPLSTCPriorityTable')
sNMPTrapTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 6, 16, 4), )
if mibBuilder.loadTexts: sNMPTrapTable.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapTable.setDescription(' SNMP trap configuration table.')
sNMPTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 6, 16, 4, 1), ).setIndexNames((0, "CAMBIUM-PTP600-MIB", "sNMPTrapTableIndex"))
if mibBuilder.loadTexts: sNMPTrapTableEntry.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapTableEntry.setDescription('Table SNMPTrapTable')
sNTPServerTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 6, 17, 15), )
if mibBuilder.loadTexts: sNTPServerTable.setStatus('current')
if mibBuilder.loadTexts: sNTPServerTable.setDescription('')
sNTPServerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 6, 17, 15, 1), ).setIndexNames((0, "CAMBIUM-PTP600-MIB", "sNTPServerTableIndex"))
if mibBuilder.loadTexts: sNTPServerTableEntry.setStatus('current')
if mibBuilder.loadTexts: sNTPServerTableEntry.setDescription('Table SNTPServerTable')
userTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 6, 25, 2), )
if mibBuilder.loadTexts: userTable.setStatus('current')
if mibBuilder.loadTexts: userTable.setDescription(' The User Table Control group contains objects specifically for user account management.')
userTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 6, 25, 2, 1), ).setIndexNames((0, "CAMBIUM-PTP600-MIB", "userTableIndex"))
if mibBuilder.loadTexts: userTableEntry.setStatus('current')
if mibBuilder.loadTexts: userTableEntry.setDescription('Table UserTable')
dfsTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsTableNumber.setStatus('current')
if mibBuilder.loadTexts: dfsTableNumber.setDescription('Number of entries in the dfsTable')
dfsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)))
if mibBuilder.loadTexts: dfsTableIndex.setStatus('current')
if mibBuilder.loadTexts: dfsTableIndex.setDescription('used to index values in the dfsTable.')
dfsMeans = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsMeans.setStatus('current')
if mibBuilder.loadTexts: dfsMeans.setDescription('Snapshot of DFS means')
dfsNineNinePointNinePercentiles = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsNineNinePointNinePercentiles.setStatus('current')
if mibBuilder.loadTexts: dfsNineNinePointNinePercentiles.setDescription('Snapshot of DFS 99.9 percentiles')
dfsPeaks = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsPeaks.setStatus('current')
if mibBuilder.loadTexts: dfsPeaks.setDescription('Snapshot of DFS peaks')
localPacketFiltering = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localPacketFiltering.setStatus('current')
if mibBuilder.loadTexts: localPacketFiltering.setDescription("When Local Packet Filtering is Enabled, the bridge \n             learns the source MAC addresses of devices transmitting \n             Ethernet packets on the local Ethernet network, and only \n             bridges packets to the remote unit if the destination MAC \n             address has not been learnt as a 'local' device. When \n             Local Packet Filtering is Disabled then the bridge does \n             not learn the source MAC addresses of devices \n             transmitting Ethernet packets on the local Ethernet \n             network, and bridges ALL Ethernet packets received to the \n             remote unit. Local Packet Filtering should be enabled if \n             no external routing hardware is present")
iPv4Address = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4Address.setStatus('current')
if mibBuilder.loadTexts: iPv4Address.setDescription('Internet protocol (IPv4) address. This address is used \n             by the family of Internet protocols to uniquely identify \n             the unit on a network. NB: A system reboot is required to \n             activate changes to this attribute.')
subnetMask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask.setStatus('current')
if mibBuilder.loadTexts: subnetMask.setDescription('A subnet allows the flow of network traffic between \n             hosts to be segregated based on a network configuration. \n             By organizing hosts into logical groups, subnetting can \n             improve network security and performance. NB: A system \n             reboot is required to activate changes to this attribute')
gatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayIPAddress.setStatus('current')
if mibBuilder.loadTexts: gatewayIPAddress.setDescription('The IPv4 address of a computer on the current network \n             that is currently acting as an IPv4 network gateway. A \n             gateway acts as an entrance / exit to packets from / to \n             other networks. NB: A system reboot is required to \n             activate changes to this attribute')
targetMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetMACAddress.setStatus('current')
if mibBuilder.loadTexts: targetMACAddress.setDescription('MAC address of the PTP wireless unit forming the other \n             end of the PTP link')
masterSlaveMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("master", 0), ("slave", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: masterSlaveMode.setStatus('current')
if mibBuilder.loadTexts: masterSlaveMode.setDescription('The PTP wireless link operates using a master and slave \n             relationship')
maximumTransmitPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumTransmitPower.setStatus('current')
if mibBuilder.loadTexts: maximumTransmitPower.setDescription('Maximum transmit power the wireless unit is permitted to \n             use when establishing and maintaining the wireless link')
antennaGain = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 610))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: antennaGain.setStatus('current')
if mibBuilder.loadTexts: antennaGain.setDescription('Antenna Gain. Expressed in 10ths of dBi. NB: This \n             attribute is ignored for variants with an integral \n             antenna.')
cableLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableLoss.setStatus('current')
if mibBuilder.loadTexts: cableLoss.setDescription('Loss in the cable between the ODU and the antenna. \n             Expressed in 10ths of dB. NB: This attribute is ignored \n             for variants with an integral antenna.')
eIRP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eIRP.setStatus('current')
if mibBuilder.loadTexts: eIRP.setDescription('Effective Isotropic Radiated Power (EIRP) describes the \n             strength of the radio signal leaving the wireless unit. \n             Expressed in 10ths of dBm')
ethernetCappedMaxWirelessSpeed = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetCappedMaxWirelessSpeed.setStatus('current')
if mibBuilder.loadTexts: ethernetCappedMaxWirelessSpeed.setDescription('Ethernet frames will be discarded in the ODU if the data \n             rate over the wireless link exceeds the Ethernet link \n             speed at the local or remote Data port. The Ethernet \n             Capped Max Wireless Speed control limits the wireless \n             data rate based on the local and remote Ethernet link \n             speed. Set this control to Enabled if either ODU is \n             connected to an Ethernet link operating at less than 1000 \n             Mbps. NB: This attribute is automatically disabled when \n             the installation agent is armed. To disarm the \n             installation agent use the installation wizard.')
channelBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("bw30MHz", 0), ("bw15MHz", 1), ("bw10MHz", 2), ("bw5MHz", 3), ("bw20MHz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelBandwidth.setStatus('current')
if mibBuilder.loadTexts: channelBandwidth.setDescription('This control sets the bandwidth of the transmit and \n             receive radio channels')
remoteIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 5, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteIPAddress.setStatus('current')
if mibBuilder.loadTexts: remoteIPAddress.setDescription('IP Address of the peer wireless unit')
linkName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 5, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkName.setStatus('current')
if mibBuilder.loadTexts: linkName.setDescription('Name of the PTP link allocated by the System \n             Administrator. Used to establish a connection with the \n             correct PTP wireless unit at the other end of the link. \n             NOTE: The link name MUST be the same at both ends of the \n             PTP link.')
siteName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 5, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteName.setStatus('current')
if mibBuilder.loadTexts: siteName.setDescription('This field contains a user-provided description of the \n             site name together with any additional notes')
accessMethod = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("linkAccess", 0), ("linkNameAccess", 1), ("groupAccess", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessMethod.setStatus('current')
if mibBuilder.loadTexts: accessMethod.setDescription('ODUs must be configured in pairs before a link can be \n             established. The Access Method attribute determines how \n             the paired ODUs will recognise each other. For the Link \n             Access method, each ODU must be configured with Target \n             MAC Address equal to the MAC Address of the other unit. \n             For the Link Name Access method, both units must be \n             configured with the same Link Name. For the Group Access \n             method, both units must be configured with the same Group \n             ID.')
groupID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 5, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupID.setStatus('current')
if mibBuilder.loadTexts: groupID.setDescription('When Access Method is set to Group Access, the Group ID \n             identifies all the units belonging to the same group')
iPv6Address = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 5, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv6Address.setStatus('current')
if mibBuilder.loadTexts: iPv6Address.setDescription('Internet protocol (IPv6) address. This address is used \n             by the family of Internet protocols to uniquely identify \n             the unit on a network. NB: A system reboot is required to \n             activate changes to this attribute.')
iPVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 5, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("iPv4", 0), ("iPv6", 1), ("dualIPv4andIPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPVersion.setStatus('current')
if mibBuilder.loadTexts: iPVersion.setDescription('IP protocol selection. Choice of IPv4, IPv6 or Dual.')
iPv6AutoConfiguredLinkLocalAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 5, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPv6AutoConfiguredLinkLocalAddress.setStatus('current')
if mibBuilder.loadTexts: iPv6AutoConfiguredLinkLocalAddress.setDescription('The auto configured link local IPv6 address')
iPv6PrefixLength = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 5, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv6PrefixLength.setStatus('current')
if mibBuilder.loadTexts: iPv6PrefixLength.setDescription('IPv6 prefix length')
iPv6GatewayAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 5, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv6GatewayAddress.setStatus('current')
if mibBuilder.loadTexts: iPv6GatewayAddress.setDescription('The IPv6 address of a computer on the current network \n             that is currently acting as an IPv6 network gateway. A \n             gateway acts as an entrance / exit to packets from / to \n             other networks. Note that it is usual to use the \n             link-local address of the gateway. NB: A system reboot is \n             required to activate changes to this attribute')
remoteInternetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 5, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("ipv4z", 3), ("ipv6z", 4), ("unknown6", 5), ("unknown7", 6), ("unknown8", 7), ("unknown9", 8), ("unknown10", 9), ("unknown11", 10), ("unknown12", 11), ("unknown13", 12), ("unknown14", 13), ("unknown15", 14), ("unknown16", 15), ("dns", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteInternetAddressType.setStatus('current')
if mibBuilder.loadTexts: remoteInternetAddressType.setDescription('The type of Internet address specified by the associated \n             remoteInternetAddressType.')
remoteInternetAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 5, 25), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteInternetAddress.setStatus('current')
if mibBuilder.loadTexts: remoteInternetAddress.setDescription('INET address used to identify the peer wireless unit')
dataPortAutoNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: dataPortAutoNegotiation.setDescription('This controls whether the local Ethernet interface \n             configuration is automatically negotiated or forced. Do \n             not use a forced setting together with auto negotiation \n             at the Ethernet link partner. If you want to run your \n             Ethernet link at a fixed speed and duplex then you would \n             normally leave auto negotiation enabled and only enable \n             the single Auto Neg Advertisement option that you want \n             the link to run in - FORCING ETHERNET CONFIGURATION IS A \n             LAST RESORT WHICH SHOULD ONLY BE PERFORMED IF YOU ARE \n             HAVING PROBLEMS WITH AUTO NEGOTIATION - AND YOU MUST \n             ENSURE THAT YOU CONFIGURE BOTH THIS UNIT AND THE ETHERNET \n             LINK PARTNER TO WHICH IT IS CONNECTED IDENTICALLY (THE \n             LINK PARTNER MUST NOT HAVE AUTO NEGOTIATION ENABLED \n             EITHER, OTHERWISE A DUPLEX MISMATCH WILL OCCUR). NB: The \n             new setting will only take effect after a system reboot.')
dataPortAutoNegAdvertisement = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 6, 2), Bits().clone(namedValues=NamedValues(("negInvalid", 2), ("neg10MbpsHalfDuplex", 3), ("neg10MbpsFullDuplex", 4), ("neg100MbpsHalfDuplex", 5), ("neg100MbpsFullDuplex", 6), ("neg1000MbpsFullDuplex", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortAutoNegAdvertisement.setStatus('current')
if mibBuilder.loadTexts: dataPortAutoNegAdvertisement.setDescription('This sets the different Ethernet configurations that \n             will be advertised during auto negotiation. Note the new \n             setting will only take effect after a system reboot. \n             WARNING: Duplex mismatch may result if both ends of the \n             Ethernet link do not have the same settings. Do not auto \n             negotiation together with a fixed setting at the Ethernet \n             link partner. WARNING: Make sure that you select \n             option(s) that you know your connected equipment can \n             cater for!')
dataPortAutoMdix = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortAutoMdix.setStatus('current')
if mibBuilder.loadTexts: dataPortAutoMdix.setDescription('This enables/disables the Auto MDI/MDIX capability. NB: \n             The new setting will only take effect after a system \n             reboot')
dataPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("copperLinkUp", 1), ("fiberLinkUp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortStatus.setStatus('current')
if mibBuilder.loadTexts: dataPortStatus.setDescription('Current status of the Ethernet link. NB: a change of \n             state may generate an SNMP trap and/or SMTP email alert')
dataPortSpeedAndDuplex = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("speed1000MbpsFullDuplex", 0), ("speed100MbpsFullDuplex", 1), ("speed100MbpsHalfDuplex", 2), ("speed10MbpsFullDuplex", 3), ("speed10MbpsHalfDuplex", 4), ("speedUnknown6", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortSpeedAndDuplex.setStatus('current')
if mibBuilder.loadTexts: dataPortSpeedAndDuplex.setDescription('The current speed and duplex of the Ethernet link')
dataPortWirelessDownAlert = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortWirelessDownAlert.setStatus('current')
if mibBuilder.loadTexts: dataPortWirelessDownAlert.setDescription('When enabled, this causes the Ethernet link to be \n             dropped briefly when the wireless link drops. This is so \n             that spanning tree algorithms can quickly detect that \n             there is a problem.')
useVLANForManagementInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noVLANTagging", 0), ("iEEE8021QTaggedCTagType8100", 1), ("iEEE8021adTaggedSTagorBTagType88a8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useVLANForManagementInterfaces.setStatus('current')
if mibBuilder.loadTexts: useVLANForManagementInterfaces.setDescription('This controls whether the management interfaces \n             (WWW/SNMP/SMTP/SNTP) use VLAN tags or not. NB: The new \n             setting will only take effect after a system reboot')
vLANManagementPriority = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("p0", 0), ("p1", 1), ("p2", 2), ("p3", 3), ("p4", 4), ("p5", 5), ("p6", 6), ("p7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLANManagementPriority.setStatus('current')
if mibBuilder.loadTexts: vLANManagementPriority.setDescription('This VLAN Priority (0-7) will be included in packets \n             generated by the management interfaces. NB: The new \n             setting will only take effect after a system reboot')
vLANManagementVID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLANManagementVID.setStatus('current')
if mibBuilder.loadTexts: vLANManagementVID.setDescription('This VLAN VID (0-4094) will be included in packets \n             generated by the management interfaces. Note the new \n             setting will only take effect after a system reboot')
managementPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 6, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("copperLinkUp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPortStatus.setStatus('current')
if mibBuilder.loadTexts: managementPortStatus.setDescription('Current status of the out-of-band management link. NB: a \n             change of state may generate an SNMP trap and/or SMTP \n             email alert')
managementPortSpeedAndDuplex = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 6, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("speed100MbpsFullDuplex", 1), ("speed100MbpsHalfDuplex", 2), ("speed10MbpsFullDuplex", 3), ("speed10MbpsHalfDuplex", 4), ("speedUnknown6", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPortSpeedAndDuplex.setStatus('current')
if mibBuilder.loadTexts: managementPortSpeedAndDuplex.setDescription('The current speed and duplex of the out-of-band \n             management link')
ethernetPriorityTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 6, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPriorityTableNumber.setStatus('current')
if mibBuilder.loadTexts: ethernetPriorityTableNumber.setDescription('Number of entries in the vLANPriorityTable.')
l2CPPriorityTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 6, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2CPPriorityTableNumber.setStatus('current')
if mibBuilder.loadTexts: l2CPPriorityTableNumber.setDescription('Number of entries in the l2CPPriorityTable.')
iPDSCPPriorityTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 6, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPDSCPPriorityTableNumber.setStatus('current')
if mibBuilder.loadTexts: iPDSCPPriorityTableNumber.setDescription('Number of entries in the iPDSCPPriorityTable.')
mPLSTCPriorityTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 6, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mPLSTCPriorityTableNumber.setStatus('current')
if mibBuilder.loadTexts: mPLSTCPriorityTableNumber.setDescription('Number of entries in the mPLSTCPriorityTable.')
managementMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 6, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("outofBandLocal", 0), ("outofBand", 1), ("inBand", 2), ("inBandLocal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementMode.setStatus('current')
if mibBuilder.loadTexts: managementMode.setDescription("Out-of-Band Management (only available on certain \n             hardware models): End-to-end out-of-band mode in which \n             the management agent can be reached from the management \n             port at the local ODU and (assuming that the wireless \n             link is established) the management port at the remote \n             ODU. Out-of-Band Local Management (only available on \n             certain hardware models): Similar to the standard \n             Out-of-Band mode, except that management frames are not \n             forwarded over the wireless link. In-Band Management \n             (default): The management agent can be reached from the \n             data port at the local ODU and (assuming that the \n             wireless link is established) the data port at the remote \n             ODU. In this mode the management port is disabled. \n             In-Band Local Management (only available when 'Use VLAN \n             For Management Interfaces' configures a VLAN tag): \n             Similar to the standard In-Band mode, except that \n             management frames are not forwarded over the wireless \n             link.")
managementPortWirelessDownAlert = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 6, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPortWirelessDownAlert.setStatus('current')
if mibBuilder.loadTexts: managementPortWirelessDownAlert.setDescription('When enabled, this causes the management link to be \n             dropped briefly when the wireless link drops. This is so \n             that spanning tree algorithms can quickly detect that \n             there is a problem.')
qOSPriorityScheme = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 6, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ethernet", 0), ("iPMPLS", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qOSPriorityScheme.setStatus('current')
if mibBuilder.loadTexts: qOSPriorityScheme.setDescription('Selects classification based on fields in the Ethernet \n             header (Layer 2) or in the Network header (Layer 3). The \n             unit recognises two network layer protocols: IP and MPLS')
unknownNetworkPriorityQueueMapping = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 6, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unknownNetworkPriorityQueueMapping.setStatus('current')
if mibBuilder.loadTexts: unknownNetworkPriorityQueueMapping.setDescription('Configures the classification of unknown network \n             protocols to an egress queue at the wireless port. \n             Unknown means something other than IP and MPLS')
dSCPManagementPriority = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 6, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dSCPManagementPriority.setStatus('current')
if mibBuilder.loadTexts: dSCPManagementPriority.setDescription('This Differentiated Services Code Point value will be \n             inserted in the IP Header of all IP Datagrams transmitted \n             by the management interfaces')
ethernetBridgingStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 6, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetBridgingStatus.setStatus('current')
if mibBuilder.loadTexts: ethernetBridgingStatus.setDescription('Current status of Ethernet packet bridging over the \n             wireless link')
ethernetPriorityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 6, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("p0", 1), ("p1", 2), ("p2", 3), ("p3", 4), ("p4", 5), ("p5", 6), ("p6", 7), ("p7", 8), ("untagged", 9))))
if mibBuilder.loadTexts: ethernetPriorityTableIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetPriorityTableIndex.setDescription('Ethernet priority flag, used to index values in the \n             ethernetPriorityTable')
ethernetPriorityQueueMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 6, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetPriorityQueueMapping.setStatus('current')
if mibBuilder.loadTexts: ethernetPriorityQueueMapping.setDescription('Configures the classification of this Ethernet priority \n             (also known as IEEE 802.1p value) to an egress queue at \n             the wireless port')
l2CPPriorityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 6, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bridge", 1), ("mRP", 2), ("cFM", 3), ("rAPS", 4), ("eAPS", 5))))
if mibBuilder.loadTexts: l2CPPriorityTableIndex.setStatus('current')
if mibBuilder.loadTexts: l2CPPriorityTableIndex.setDescription('L2CP priority flag, used to index values in the \n             l2CPPriorityTable')
l2CPPriorityQueueMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 6, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2CPPriorityQueueMapping.setStatus('current')
if mibBuilder.loadTexts: l2CPPriorityQueueMapping.setDescription('Configures the classification of this layer two control \n             protocol (L2CP) to an egress queue at the wireless port')
iPDSCPPriorityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 6, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: iPDSCPPriorityTableIndex.setStatus('current')
if mibBuilder.loadTexts: iPDSCPPriorityTableIndex.setDescription('IP DSCP priority flag, used to index values in the \n             iPDSCPPriorityTable')
iPDSCPPriorityQueueMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 6, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPDSCPPriorityQueueMapping.setStatus('current')
if mibBuilder.loadTexts: iPDSCPPriorityQueueMapping.setDescription('Configures the classification of this IP differentiated \n             services code point (DSCP) value to an egress queue at \n             the wireless port')
mPLSTCPriorityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 6, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: mPLSTCPriorityTableIndex.setStatus('current')
if mibBuilder.loadTexts: mPLSTCPriorityTableIndex.setDescription('MPLS TC priority flag, used to index values in the \n             mPLSTCPriorityTable')
mPLSTCPriorityQueueMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 6, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mPLSTCPriorityQueueMapping.setStatus('current')
if mibBuilder.loadTexts: mPLSTCPriorityQueueMapping.setDescription('Configures the classification of this MPLS traffic class \n             (the field formerly known as EXP) to an egress queue at \n             the wireless port')
telecomsInterface = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("e1", 1), ("t1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telecomsInterface.setStatus('current')
if mibBuilder.loadTexts: telecomsInterface.setDescription("The line interface type. If this is set to 'None' then \n             the telecoms interfaces are disabled, and the telecom \n             group attributes will be ignored.")
telecomsChannelAStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 0), ("noSignalLocal", 1), ("noSignalRemote", 2), ("noSignalLocalandRemote", 3), ("up", 4), ("remoteTiming", 5), ("noSignalLocalandRemoteTiming", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telecomsChannelAStatus.setStatus('current')
if mibBuilder.loadTexts: telecomsChannelAStatus.setDescription('Current status of telecoms channel A. NB: a change of \n             state may generate an SNMP trap and/or SMTP email alert')
telecomsChannelBStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 0), ("noSignalLocal", 1), ("noSignalRemote", 2), ("noSignalLocalandRemote", 3), ("up", 4), ("remoteTiming", 5), ("noSignalLocalandRemoteTiming", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telecomsChannelBStatus.setStatus('current')
if mibBuilder.loadTexts: telecomsChannelBStatus.setDescription('Current status of telecoms channel B. NB: a change of \n             state may generate an SNMP trap and/or SMTP email alert')
channelALineCode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("aMI", 0), ("b8ZSHDB3", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelALineCode.setStatus('current')
if mibBuilder.loadTexts: channelALineCode.setDescription('The line code setting of the telecoms interface. This \n             must match the setting of the device connected to this \n             interface')
channelBLineCode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("aMI", 0), ("b8ZSHDB3", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelBLineCode.setStatus('current')
if mibBuilder.loadTexts: channelBLineCode.setDescription('The line code setting of the telecoms interface. This \n             must match the setting of the device connected to this \n             interface')
channelACableLength = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("feet133", 0), ("feet266", 1), ("feet399", 2), ("feet533", 3), ("feet655", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelACableLength.setStatus('current')
if mibBuilder.loadTexts: channelACableLength.setDescription('The length of the cable connected to the telecoms \n             interface, measured in feet')
channelBCableLength = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("feet133", 0), ("feet266", 1), ("feet399", 2), ("feet533", 3), ("feet655", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelBCableLength.setStatus('current')
if mibBuilder.loadTexts: channelBCableLength.setDescription('The length of the cable connected to the telecoms \n             interface, measured in feet')
channelALoopback = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("copper", 1), ("wireless", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelALoopback.setStatus('current')
if mibBuilder.loadTexts: channelALoopback.setDescription("The loopback status of telecoms channel A. This is \n             intended for installation testing and should be set to \n             'None' for normal operation. The wire connections to a \n             unit can be tested by applying a 'Copper' loopback to the \n             local unit. The wireless connection to the remote unit \n             can be tested by applying a 'Wireless' loopback to the \n             remote unit with no loopback on the local unit. NB: a \n             change of state may generate an SNMP trap and/or SMTP \n             email alert")
channelBLoopback = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("copper", 1), ("wireless", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelBLoopback.setStatus('current')
if mibBuilder.loadTexts: channelBLoopback.setDescription("The loopback status of telecoms channel B. This is \n             intended for installation testing and should be set to \n             'None' for normal operation. The wire connections to a \n             unit can be tested by applying a 'Copper' loopback to the \n             local unit. The wireless connection to the remote unit \n             can be tested by applying a 'Wireless' loopback to the \n             remote unit with no loopback on the local unit. NB: a \n             change of state may generate an SNMP trap and/or SMTP \n             email alert")
telecomsChannelSelection = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("channelAOnly", 0), ("channelsAandB", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telecomsChannelSelection.setStatus('current')
if mibBuilder.loadTexts: telecomsChannelSelection.setDescription('Indicates which telecoms channels have been enabled. If \n             only Channel A has been enabled, then the Channel B \n             attributes will be ignored.')
regionCode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("regionCodeInvalid", 0), ("regionCode1", 1), ("regionCode2", 2), ("regionCode3", 3), ("regionCode4", 4), ("regionCode5", 5), ("regionCode6", 6), ("regionCode7", 7), ("regionCode8", 8), ("regionCode9", 9), ("regionCode10", 10), ("regionCode11", 11), ("regionCode12", 12), ("regionCode13", 13), ("regionCode14", 14), ("regionCode15", 15), ("regionCode16", 16), ("regionCode17", 17), ("regionCode18", 18), ("regionCode19", 19), ("regionCode20", 20), ("regionCode21", 21), ("regionCode22", 22), ("regionCode23", 23), ("regionCode24", 24), ("regionCode25", 25), ("regionCode26", 26), ("regionCode27", 27), ("regionCode28", 28), ("regionCode29", 29), ("regionCode30", 30), ("regionCode31", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: regionCode.setStatus('current')
if mibBuilder.loadTexts: regionCode.setDescription('The region code prohibits the wireless unit from \n             operating outside the regulated limits. An invalid region \n             code indicates a corrupted license key. NB: a change of \n             state may generate an SNMP trap and/or SMTP email alert')
productVariant = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("pTPxx400Full", 0), ("pTPxx400Deprecated1", 1), ("pTPxx400Deprecated2", 2), ("pTPxx400Lite", 3), ("spare1", 4), ("pTPxx300", 5), ("spare2", 6), ("spare3", 7), ("pTPxx500FullDeprecated", 8), ("pTPxx500LiteDeprecated", 9), ("pTPxx500", 10), ("pTPxx600Lite", 11), ("pTPxx600Full", 12), ("spare5", 13), ("spare6", 14), ("pTP800", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVariant.setStatus('current')
if mibBuilder.loadTexts: productVariant.setDescription('The product variant')
productName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productName.setStatus('current')
if mibBuilder.loadTexts: productName.setDescription('Name of the product variant')
ethernetFiberSupport = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetFiberSupport.setStatus('current')
if mibBuilder.loadTexts: ethernetFiberSupport.setDescription('Ethernet fiber support availability on this wireless \n             unit')
frequencyVariant = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("freq5800MHz", 0), ("freq5400MHz", 1), ("freq4900MHz", 2), ("freq2500MHz", 3), ("freq5800MHz2", 4), ("freq5400MHz2", 5), ("freq4500MHz", 6), ("freq5900MHz", 7), ("freq5200MHz", 8), ("freq5100MHz", 9), ("freq4800MHz", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frequencyVariant.setStatus('current')
if mibBuilder.loadTexts: frequencyVariant.setDescription('Frequency variant of the wireless unit')
bandwidthVariant = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("bw30MHz", 0), ("bw15MHz", 1), ("bw10MHz", 2), ("bw5MHz", 3), ("bw20MHz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthVariant.setStatus('current')
if mibBuilder.loadTexts: bandwidthVariant.setDescription('Bandwidth variant of the wireless unit')
constantPowerSpectralDensity = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("constant", 0), ("fullPower", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: constantPowerSpectralDensity.setStatus('current')
if mibBuilder.loadTexts: constantPowerSpectralDensity.setDescription('Constant power spectral density mode control')
sNMPv3Enable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPv3Enable.setStatus('current')
if mibBuilder.loadTexts: sNMPv3Enable.setDescription('SNMPv3 availability control')
hAZLOCConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("nonHAZLOCUnit", 0), ("gasGroupA", 1), ("gasGroupB", 2), ("gasGroupC", 3), ("gasGroupD", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hAZLOCConfiguration.setStatus('current')
if mibBuilder.loadTexts: hAZLOCConfiguration.setDescription('The HAZLOC/ATEX Configuration of this unit. The Gas \n             Group is configured by the license key.')
securityLevel = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("fIPS", 1), ("uCAPL", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityLevel.setStatus('current')
if mibBuilder.loadTexts: securityLevel.setDescription('The maximum configurable security level')
targetRange = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetRange.setStatus('current')
if mibBuilder.loadTexts: targetRange.setDescription('Initial target range used in installation +/-1, \n             expressed in tenths of a kilometer. When Auto-Ranging \n             this must be set to 0')
rangingMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("auto0to40km", 0), ("auto0to100km", 1), ("auto0to200km", 2), ("targetRange", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rangingMode.setStatus('current')
if mibBuilder.loadTexts: rangingMode.setDescription('Type of ranging to use during installation, either \n             Auto-Ranging or use a selectable Target Range')
installStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("wrongPeer", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: installStatus.setStatus('current')
if mibBuilder.loadTexts: installStatus.setDescription('A non-zero value indicates that signalling was received \n             with the wrong MAC address or a mismatched link name. NB: \n             It is very unusual to detect this, because units with \n             mis-configured Target MAC Address will normally fail to \n             establish a wireless link. However, rare circumstances \n             may establish a partial wireless link and detect this \n             situation. NB: A non-zero value on start-up, or a change \n             of value during operation, may generate an SNMP trap \n             and/or SMTP email alert')
installArmState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disarmed", 0), ("armed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: installArmState.setStatus('current')
if mibBuilder.loadTexts: installArmState.setDescription('Indicates if the unit is being installed. NB: a change \n             of state may generate an SNMP trap and/or SMTP email \n             alert')
tFTPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 9, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: tFTPServerIPAddress.setDescription('IP address of the TFTP Server from which the TFTP \n             Software Upgrade File Name will be retrieved')
tFTPServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: tFTPServerPortNumber.setDescription('The port number of the TFTP Server from which the TFTP \n             Software Upgrade File Name will be retrieved')
tFTPSoftwareUpgradeFileName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 9, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeFileName.setStatus('current')
if mibBuilder.loadTexts: tFTPSoftwareUpgradeFileName.setDescription('Filename of the Software Upgrade to be loaded from the \n             TFTP Server')
tFTPStartSoftwareUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPStartSoftwareUpgrade.setStatus('current')
if mibBuilder.loadTexts: tFTPStartSoftwareUpgrade.setDescription("Write '1' to this attribute to start the TFTP software \n             upgrade process. The attribute will be reset to 0 when \n             the upgrade process has finished. Continuing with the \n             software upgrade will cause spectrum management (DSO) \n             channel metrics collection to stop. The wireless unit \n             will no longer search for the optimal operational radio \n             channel. The performance of this wireless link may \n             deterioate over time. If operating in a region where \n             RADAR detection is mandatory you must complete the \n             software upgrade and reboot the unit. Channel metrics \n             collection will only be restarted after the wireless unit \n             has been rebooted")
tFTPSoftwareUpgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 0), ("uploadinprogress", 1), ("uploadsuccessfulprogrammingFLASH", 2), ("upgradesuccessfulreboottorunthenewsoftwareimage", 3), ("upgradefailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatus.setStatus('current')
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatus.setDescription('The current status of the TFTP Software upgrade process')
tFTPSoftwareUpgradeStatusText = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 9, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatusText.setStatus('current')
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatusText.setDescription('Descriptive text describing the status of the TFTP \n             Software upgrade process, including any error details')
tFTPSoftwareUpgradeStatusAdditionalText = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 9, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatusAdditionalText.setStatus('current')
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatusAdditionalText.setDescription('Any additional text describing the status of the TFTP \n             Software upgrade process, including any error details')
hTTPAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 9, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPAccessEnabled.setStatus('current')
if mibBuilder.loadTexts: hTTPAccessEnabled.setDescription('This controls whether or not HTTP access is enabled, \n             i.e. if this is disabled (0) then the unit will not \n             respond to any requests on the HTTP port. Remote \n             management via HTTPS is not affected by this setting. Any \n             change in this setting will not take effect until the \n             unit has been rebooted. (Factory default = Enabled)')
telnetAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 9, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetAccessEnabled.setStatus('current')
if mibBuilder.loadTexts: telnetAccessEnabled.setDescription('This controls whether or not Telnet access is enabled, \n             i.e. if this is disabled (0) then the unit will not \n             respond to any requests on the TELNET port. Any change in \n             this setting will not take effect until the unit has been \n             rebooted. (Factory default = Disabled)')
hTTPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 9, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPPortNumber.setStatus('current')
if mibBuilder.loadTexts: hTTPPortNumber.setDescription('This controls the port number for HTTP access. A value \n             of zero will use the default port number. Any change in \n             this setting will not take effect until the unit has been \n             rebooted. (Factory default = 80)')
hTTPSPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 9, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPSPortNumber.setStatus('current')
if mibBuilder.loadTexts: hTTPSPortNumber.setDescription('This controls the port number for HTTPS access. A value \n             of zero will use the default port number. Availability of \n             HTTPS is controlled via the License Key. Any change in \n             this setting will not take effect until the unit has been \n             rebooted. (Factory default = 443)')
telnetPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 9, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortNumber.setStatus('current')
if mibBuilder.loadTexts: telnetPortNumber.setDescription('This controls the port number for TELNET access. A value \n             of zero will use the default port number. Any change in \n             this setting will not take effect until the unit has been \n             rebooted. (Factory default = 23)')
hTTPSAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 9, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPSAccessEnabled.setStatus('current')
if mibBuilder.loadTexts: hTTPSAccessEnabled.setDescription('This controls whether or not HTTPS access is enabled, \n             i.e. if this is disabled (0) then the unit will not \n             respond to any requests on the HTTPS port. Remote \n             management via HTTP is not affected by this setting. Any \n             change in this setting will not take effect until the \n             unit has been rebooted. (Factory default = Enabled)')
tFTPServerInternetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 9, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("ipv4z", 3), ("ipv6z", 4), ("unknown6", 5), ("unknown7", 6), ("unknown8", 7), ("unknown9", 8), ("unknown10", 9), ("unknown11", 10), ("unknown12", 11), ("unknown13", 12), ("unknown14", 13), ("unknown15", 14), ("unknown16", 15), ("dns", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPServerInternetAddressType.setStatus('current')
if mibBuilder.loadTexts: tFTPServerInternetAddressType.setDescription('The type of Internet address specified by the associated \n             tFTPServerInternetAddress.')
tFTPServerInternetAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 9, 19), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPServerInternetAddress.setStatus('current')
if mibBuilder.loadTexts: tFTPServerInternetAddress.setDescription('INET address of the TFTP Server from which the TFTP \n             Software Upgrade File Name will be retrieved')
linkSymmetry = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("symmetryAdaptive", 0), ("symmetry2to1", 1), ("symmetry1to1", 2), ("symmetry1to2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSymmetry.setStatus('current')
if mibBuilder.loadTexts: linkSymmetry.setDescription('Link Symmetry: in fixed symmetric mode the master spends \n             an equal amount of time transmitting and receiving; in \n             fixed asymmetric modes the master transmit and receive \n             times have a fixed ratio; in adaptive mode the transmit \n             and receive periods adjust with applied load.')
linkModeOptimisation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("iPTraffic", 0), ("tDMTraffic", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkModeOptimisation.setStatus('current')
if mibBuilder.loadTexts: linkModeOptimisation.setDescription("Optimises the wireless link behavior for the type of \n             traffic to be carried. In 'IP Traffic' mode, the wireless \n             link will minimise transmission errors by automatically \n             adapting the modulation mode. In 'TDM Traffic' mode, the \n             wireless link will minimise transmission latency and \n             preserve throughput by maintaining a higher modulation \n             mode in the presence of a limited number of errors. The \n             'TDM Traffic' mode is recommended for E1/T1 applications \n             and connectionless protocols.")
userConfiguredMaxModulationMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("modBpsk63percent", 0), ("modQpsk63percent", 1), ("modQpsk87percent", 2), ("mod16qam63percent", 3), ("mod16qam87percent", 4), ("mod64qam75percent", 5), ("mod64qam92percent", 6), ("mod256qam81percent", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userConfiguredMaxModulationMode.setStatus('current')
if mibBuilder.loadTexts: userConfiguredMaxModulationMode.setDescription('The maximum receive modulation mode controls the MAX \n             mode used for adaptive modulation. NOTE: This attribute \n             is automatically disabled when the installation agent is \n             armed. To disarm the installation agent use the \n             installation wizard')
remoteMaximumTransmitPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteMaximumTransmitPower.setStatus('current')
if mibBuilder.loadTexts: remoteMaximumTransmitPower.setDescription('Maximum transmit power the remote wireless unit is \n             permitted to use when establishing and maintaining the \n             wireless link')
txColorCode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("a", 0), ("b", 1), ("c", 2), ("d", 3), ("e", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txColorCode.setStatus('current')
if mibBuilder.loadTexts: txColorCode.setDescription('Transmit Color Code. This attribute need only be \n             considered when the unit is installed in a network of \n             PTP600 units and where some of the units are operating on \n             the same frequency. In this case, the value would \n             normally be derived by a network planner. In all other \n             cases, it is recommended that this attribute is left at \n             the default value. NOTE: For the link to operate, the \n             value of this parameter must in all cases match the value \n             of the Rx Color Code parameter at the far end of the \n             link.')
rxColorCode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("a", 0), ("b", 1), ("c", 2), ("d", 3), ("e", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxColorCode.setStatus('current')
if mibBuilder.loadTexts: rxColorCode.setDescription('Receive Color Code. This attribute need only be \n             considered when the unit is installed in a network of \n             PTP600 units and where some of the units are operating on \n             the same frequency. In this case, the value would \n             normally be derived by a network planner. In all other \n             cases, it is recommended that this attribute is left at \n             the default value. NOTE: For the link to operate, the \n             value of this parameter must in all cases match the value \n             of the Tx Color Code parameter at the far end of the \n             link.')
automaticTxPowerControl = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("enabledwithinitialestimate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: automaticTxPowerControl.setStatus('current')
if mibBuilder.loadTexts: automaticTxPowerControl.setDescription('When enabled, the transmit power of the local end is \n             automatically adjusted to maintain a configurable target \n             receive signal level at the remote end of the link. When \n             set to Enable with initial estimate, the Slave estimates \n             the optional transmit power before it responds to the \n             Master.')
remoteRxTargetPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 10, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-600, -400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteRxTargetPower.setStatus('current')
if mibBuilder.loadTexts: remoteRxTargetPower.setDescription('This is the target receive level for the end of the link \n             which is remote from the end being configured. When \n             Automatic Power Control is enabled, the transmit power of \n             the local end is automatically adjusted in order to \n             maintain the receive signal level at the remote end \n             within a range centered on this value')
receivePower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receivePower.setStatus('current')
if mibBuilder.loadTexts: receivePower.setDescription('Receive power expressed in tenths of a dBm')
vectorError = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vectorError.setStatus('current')
if mibBuilder.loadTexts: vectorError.setDescription("The vector error measurement compares the received \n             signal's IQ modulation characteristics to an ideal signal \n             to determine the composite error vector magnitude. The \n             value represented by this attribute is the average vector \n             error over the previous second expressed in tenths of a \n             dB")
transmitPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitPower.setStatus('current')
if mibBuilder.loadTexts: transmitPower.setDescription('Transmit power expressed in tenths of a dBm')
range = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 12, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range.setStatus('current')
if mibBuilder.loadTexts: range.setDescription('Distance between the two peer wireless units expressed \n             in tenths of a kilometer')
linkLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 12, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkLoss.setStatus('current')
if mibBuilder.loadTexts: linkLoss.setDescription('The wireless link loss expressed in tenths of a dB')
receiveChannel = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 12, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveChannel.setStatus('current')
if mibBuilder.loadTexts: receiveChannel.setDescription('Current active receive channel')
transmitChannel = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 12, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitChannel.setStatus('current')
if mibBuilder.loadTexts: transmitChannel.setDescription('Current active transmit channel')
receiveModulationMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("modAcquisition", 0), ("modBpsk63percent", 1), ("modQpsk63percentSingle", 2), ("modTransient1", 3), ("modQpsk87percentSingle", 4), ("modTransient2", 5), ("mod16qam63percentSingleA", 6), ("modTransient3", 7), ("mod16qam87percentSingle", 8), ("modTransient4", 9), ("mod64qam75percentSingle", 10), ("modTransient5", 11), ("mod64qam92percentSingle", 12), ("modTransient6", 13), ("mod256qam81percentSingle", 14), ("mod16qam63percentSingleB", 15), ("mod16qam63percentDual", 16), ("modTransient7", 17), ("mod16qam87percentDual", 18), ("modTransient8", 19), ("mod64qam75percentDual", 20), ("modTransient9", 21), ("mod64qam92percentDual", 22), ("modTransient10", 23), ("mod256qam81percentDual", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveModulationMode.setStatus('current')
if mibBuilder.loadTexts: receiveModulationMode.setDescription('Current active receive modulation mode')
transmitModulationMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 12, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("modAcquisition", 0), ("modBpsk63percent", 1), ("modQpsk63percentSingle", 2), ("modTransient1", 3), ("modQpsk87percentSingle", 4), ("modTransient2", 5), ("mod16qam63percentSingleA", 6), ("modTransient3", 7), ("mod16qam87percentSingle", 8), ("modTransient4", 9), ("mod64qam75percentSingle", 10), ("modTransient5", 11), ("mod64qam92percentSingle", 12), ("modTransient6", 13), ("mod256qam81percentSingle", 14), ("mod16qam63percentSingleB", 15), ("mod16qam63percentDual", 16), ("modTransient7", 17), ("mod16qam87percentDual", 18), ("modTransient8", 19), ("mod64qam75percentDual", 20), ("modTransient9", 21), ("mod64qam92percentDual", 22), ("modTransient10", 23), ("mod256qam81percentDual", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitModulationMode.setStatus('current')
if mibBuilder.loadTexts: transmitModulationMode.setDescription('Current active transmit modulation mode')
receiveFreqMHz = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 12, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5925))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveFreqMHz.setStatus('current')
if mibBuilder.loadTexts: receiveFreqMHz.setDescription('Current receive frequency expressed in integer MHz')
transmitFreqMHz = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 12, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5925))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitFreqMHz.setStatus('current')
if mibBuilder.loadTexts: transmitFreqMHz.setDescription('Current transmit frequency expressed in integer MHz')
signalStrengthRatio = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 12, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalStrengthRatio.setStatus('current')
if mibBuilder.loadTexts: signalStrengthRatio.setDescription('Signal strength ratio (Vertical / Horizontal) : the \n             number of dB larger the Vertical antenna input is than \n             the Horizontal antenna input expressed in tenths of a dB')
receiveFreqKHz = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 12, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5925000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveFreqKHz.setStatus('current')
if mibBuilder.loadTexts: receiveFreqKHz.setDescription('Current receive frequency expressed as KHz')
transmitFreqKHz = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 12, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5925000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitFreqKHz.setStatus('current')
if mibBuilder.loadTexts: transmitFreqKHz.setDescription('Current transmit frequency expressed as KHz')
searchState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 12, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("registering", 0), ("searching", 1), ("acquiring", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: searchState.setStatus('current')
if mibBuilder.loadTexts: searchState.setDescription("Search status of the wireless modem. 'Registering' means \n             that the modem has locked to an OFDM signal, and the \n             wireless link is up. 'Searching' means that no wireless \n             signal has been detected. 'Acquiring' means that a \n             wireless signal has been detected, but the modem has not \n             locked to an OFDM signal.")
rawReceivePower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 12, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rawReceivePower.setStatus('current')
if mibBuilder.loadTexts: rawReceivePower.setDescription('Raw receive power expressed in tenths of a dBm')
unitOutOfCalibration = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("calibrated", 0), ("outOfCalibration", 1), ("outOfCalibrationPAsShutdown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitOutOfCalibration.setStatus('current')
if mibBuilder.loadTexts: unitOutOfCalibration.setDescription('The unit is out of calibration')
incompatibleRegionCodes = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("incompatibleLicenceKeys", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: incompatibleRegionCodes.setStatus('current')
if mibBuilder.loadTexts: incompatibleRegionCodes.setDescription('The master and slave units have incompatible region \n             codes. NB: Both units must have compatible license keys')
noWirelessChannelAvailable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 13, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("noWirelessChannelAvailable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: noWirelessChannelAvailable.setStatus('current')
if mibBuilder.loadTexts: noWirelessChannelAvailable.setDescription('Spectrum Management was unable to locate a suitable \n             wireless channel to operate on')
wirelessLinkDisabledWarning = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("disabledBySNMPifAdminStatus", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkDisabledWarning.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkDisabledWarning.setDescription('The SNMP ifAdminStatus of the wireless interface has \n             disabled wireless traffic')
dataPortDisabledWarning = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 13, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("disabledBySNMPifAdminStatus", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortDisabledWarning.setStatus('current')
if mibBuilder.loadTexts: dataPortDisabledWarning.setDescription('The SNMP ifAdminStatus of the Ethernet interface has \n             disabled Ethernet traffic')
dataPortFiberStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 13, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ok", 0), ("installedFiberNotLicensed", 1), ("fiberLinkNotEstablishedButLOSNotDetected", 2), ("fiberLinkNotEstablishedAndLOSDetected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortFiberStatus.setStatus('current')
if mibBuilder.loadTexts: dataPortFiberStatus.setDescription('If the fiber link is not OK, there are three possible \n             causes: Either the fiber link has been installed but \n             disabled (because the license key does not include fiber \n             support), the link could not be established even though \n             no LOS was detected (i.e. an optical carrier was \n             detected, which could be due to a broken TX fiber, or \n             because the link is disabled at the fiber link partner), \n             or the link could not be established and LOS is detected \n             (i.e. no optical carrier is detected). NB: a change of \n             status may generate an SNMP trap and/or SMTP email alert')
dataPortConfigurationMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 13, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noError", 0), ("mismatchDetected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortConfigurationMismatch.setStatus('current')
if mibBuilder.loadTexts: dataPortConfigurationMismatch.setDescription('The detection of Ethernet fragments (runt packets) when \n             the link is in full duplex is an indication of an \n             auto-negotiation or forced configuration mismatch')
incompatibleMasterAndSlave = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 13, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("incompatibleProductVariants", 1), ("differentSoftwareVersionsRunning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: incompatibleMasterAndSlave.setStatus('current')
if mibBuilder.loadTexts: incompatibleMasterAndSlave.setDescription('A non-zero value indicates that the master and slave \n             ends of a link are different hardware products, or have \n             different software versions. NB: It is very unusual to \n             detect this, because incompatible units will normally \n             fail to establish a wireless link. However, some \n             combinations may establish a partial wireless link and \n             detect this situation. NB: A non-zero value may generate \n             an SNMP trap and/or SMTP email alert')
tDDSynchronizationStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 13, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("locked", 0), ("holdover", 1), ("holdoverNotConnected", 2), ("acquiringLock", 3), ("noTimingReference", 4), ("timingSystemNotConnected", 5), ("initialising", 6), ("clusterTimingMaster", 7), ("tDDSyncNotActive", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDDSynchronizationStatus.setStatus('current')
if mibBuilder.loadTexts: tDDSynchronizationStatus.setDescription('An alarm value (displayed in red) indicates that one of \n             the following conditions has not been met (i) An external \n             timing system is connected or internal timing has been \n             configured. (ii) The timing system is providing a useable \n             reference. (iii) The ODU is locked to this reference.')
managementPortDisabledWarning = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 13, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("disabledBySNMPifAdminStatus", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPortDisabledWarning.setStatus('current')
if mibBuilder.loadTexts: managementPortDisabledWarning.setDescription('The SNMP ifAdminStatus of the out-of-band management \n             interface has disabled Ethernet traffic')
tDDSynchronizationAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 13, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("notSynchronized", 1), ("timingSystemFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDDSynchronizationAlarm.setStatus('current')
if mibBuilder.loadTexts: tDDSynchronizationAlarm.setDescription('Not Synchronized indicates failure of the external \n             timing system for a period greater than the holdover \n             timer. TDD frame timing will have drifted, and this link \n             may cause interference with other links in a synchronized \n             network. Timing System Failure is an early warning, \n             indicating that 80% of the holdover period has expired.')
linkModeOptimizationMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 13, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("linkModeOptimizationMismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkModeOptimizationMismatch.setStatus('current')
if mibBuilder.loadTexts: linkModeOptimizationMismatch.setDescription('The remote node of this link has been configured with a \n             different link mode optimization')
managementPortConfigurationMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 13, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noError", 0), ("mismatchDetected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPortConfigurationMismatch.setStatus('current')
if mibBuilder.loadTexts: managementPortConfigurationMismatch.setDescription('The detection of Ethernet fragments (runt packets) when \n             the link is in full duplex is an indication of an \n             auto-negotiation or forced configuration mismatch. This \n             alarm is only raised if an Out-of-Band Management Mode \n             has been configured.')
secureModeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 13, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("secureModeIsActive", 0), ("secureModeIsNotConfigured", 1), ("secureModeIsConfiguredButNotActive", 2), ("secureModeIsNotSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureModeAlarm.setStatus('current')
if mibBuilder.loadTexts: secureModeAlarm.setDescription('The secure mode (e.g. FIPS, UC-APL) state of the unit. \n             The secure mode is not configured(1) state indicates that \n             the unit is capable of secure mode operation, and one or \n             more of the following security materials has not been \n             configured: Key Of Keys, Private Key, Public Certificate, \n             DRNG Entropy Status, Wireless Encryption Key. The secure \n             mode mode is configured but not active(2) state indicates \n             that the unit is capable of secure mode operation, and \n             the security material has been configured, but the \n             configuration of interfaces is not consistent with secure \n             mode operation. The secure mode is not supported(3) state \n             indicates that the unit is not capable of secure mode \n             operation. The secure mode capability requires \n             appropriate hardware compatibility, license key and \n             software image.')
ethernetBridgingStatusAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 13, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ethernetBridgingEnabled", 0), ("ethernetBridgingDisabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetBridgingStatusAlarm.setStatus('current')
if mibBuilder.loadTexts: ethernetBridgingStatusAlarm.setDescription('Ethernet traffic bridging is disabled because the \n             wireless link is not operating at the configured Lowest \n             Ethernet Modulation Mode')
sMTPEmailAlert = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPEmailAlert.setStatus('current')
if mibBuilder.loadTexts: sMTPEmailAlert.setDescription('Simple Mail Transfer Protocol is used to send equipment \n             alerts via email to a specified email address')
sMTPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 15, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: sMTPServerIPAddress.setDescription('IP address of the SMTP server')
sMTPServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: sMTPServerPortNumber.setDescription('Port number of the SMTP server')
sMTPSourceEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 15, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPSourceEmailAddress.setStatus('current')
if mibBuilder.loadTexts: sMTPSourceEmailAddress.setDescription("The 'from' email address used when constructing the \n             automatically generated e-mail message")
sMTPDestinationEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 15, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPDestinationEmailAddress.setStatus('current')
if mibBuilder.loadTexts: sMTPDestinationEmailAddress.setDescription("The 'to' email address used when constructing the \n             automatically generated e-mail message")
sMTPEnabledMessages = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 15, 6), Bits().clone(namedValues=NamedValues(("telecomsChannelUpDown", 1), ("managementPortUpDown", 2), ("dataPortUpDown", 3), ("enabledDiagnosticAlarms", 4), ("dFSImpulseInterference", 5), ("channelChange", 6), ("wirelessLinkUpDown", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPEnabledMessages.setStatus('current')
if mibBuilder.loadTexts: sMTPEnabledMessages.setDescription('This controls which SMTP messages the unit will send')
sMTPServerInternetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 15, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("ipv4z", 3), ("ipv6z", 4), ("unknown6", 5), ("unknown7", 6), ("unknown8", 7), ("unknown9", 8), ("unknown10", 9), ("unknown11", 10), ("unknown12", 11), ("unknown13", 12), ("unknown14", 13), ("unknown15", 14), ("unknown16", 15), ("dns", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sMTPServerInternetAddressType.setStatus('current')
if mibBuilder.loadTexts: sMTPServerInternetAddressType.setDescription('The type of Internet address specified by the associated \n             sMTPServerInternetAddress.')
sMTPServerInternetAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 15, 8), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPServerInternetAddress.setStatus('current')
if mibBuilder.loadTexts: sMTPServerInternetAddress.setDescription('Internet address of the SMTP server')
sNMPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 16, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPPortNumber.setStatus('current')
if mibBuilder.loadTexts: sNMPPortNumber.setDescription('The IP port number used to access the SNMP MIB (i.e. \n             Gets and Sets) (default = 161). NB: A system reboot is \n             required to activate changes to this attribute')
sNMPCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 16, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPCommunityString.setStatus('current')
if mibBuilder.loadTexts: sNMPCommunityString.setDescription('The SNMP community string. NB: A system reboot is \n             required to activate changes to this attribute')
sNMPTrapTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 16, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPTrapTableNumber.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapTableNumber.setDescription('Number of entries in the sNMPTrapTable.')
sNMPTrapVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 16, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("v1", 0), ("v2c", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapVersion.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapVersion.setDescription('The SNMP protocol version to use for SNMP Traps. NB: A \n             system reboot is required to activate changes to this \n             attribute')
sNMPEnabledTraps = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 16, 6), Bits().clone(namedValues=NamedValues(("managementPortUpDown", 0), ("dataPortUpDown", 1), ("authenticationFailure", 2), ("enabledDiagnosticAlarms", 3), ("dFSImpulseInterference", 4), ("channelChange", 5), ("wirelessLinkUpDown", 6), ("coldStart", 7), ("telecomsChannelUpDown", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPEnabledTraps.setStatus('current')
if mibBuilder.loadTexts: sNMPEnabledTraps.setDescription('This controls which SNMP Traps the unit will send')
enabledDiagnosticAlarms = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 16, 7), Bits().clone(namedValues=NamedValues(("incompatibleMasterAndSlave", 0), ("incompatibleRegionCodes", 1), ("unknown6", 2), ("unknown5", 3), ("unitOutOfCalibration", 4), ("installArmState", 5), ("installStatus", 6), ("regionCode", 7), ("telecomsChannelAStatus", 8), ("dataPortFiberStatus", 9), ("dataPortStatus", 10), ("dataPortDisabledWarning", 11), ("wirelessLinkDisabledWarning", 12), ("sNTPSynchronizationFailed", 13), ("noWirelessChannelAvailable", 14), ("dataPortConfigurationMismatch", 15), ("syslogDisabledWarning", 16), ("linkModeOptimizationMismatch", 17), ("managementPortStatus", 18), ("managementPortDisabledWarning", 19), ("tDDSynchronizationAlarm", 20), ("telecomsChannelBLoopback", 21), ("telecomsChannelALoopback", 22), ("telecomsChannelBStatus", 23), ("ethernetBridgingStatus", 26), ("secureMode", 27), ("syslogClientDisabledWarning", 28), ("managementPortConfigurationMismatch", 29), ("syslogLocalWrapped", 30), ("syslogLocalNearlyFull", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enabledDiagnosticAlarms.setStatus('current')
if mibBuilder.loadTexts: enabledDiagnosticAlarms.setDescription("Controls which individual diagnostic alarms are enabled. \n             The unit may be configured to generate SNMP traps and/or \n             SMTP email alerts for these enabled alarms by selecting \n             'Enabled Diagnostic Alarms' on the 'SNMP Enabled Traps' \n             and/or 'SMTP Enabled Messages' attributes")
sNMPSendAllTrapsAtStartup = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 16, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPSendAllTrapsAtStartup.setStatus('current')
if mibBuilder.loadTexts: sNMPSendAllTrapsAtStartup.setDescription('Controls whether or not all the enabled traps and alarms \n             (including cleared alarms) are reported at start-up.')
sNMPTrapTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: sNMPTrapTableIndex.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapTableIndex.setDescription('SNMP trap value, used to index the SNMPTrapTable.')
sNMPTrapIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 16, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapIPAddress.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapIPAddress.setDescription('The IP address to which all SNMP Traps are sent. NB: A \n             system reboot is required to activate changes to this \n             attribute.')
sNMPTrapPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 16, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapPortNumber.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapPortNumber.setDescription('Destination port for SNMP Traps (default=162). NB: A \n             system reboot is required to activate changes to this \n             attribute.')
sNMPTrapInternetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 16, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("ipv4z", 3), ("ipv6z", 4), ("unknown6", 5), ("unknown7", 6), ("unknown8", 7), ("unknown9", 8), ("unknown10", 9), ("unknown11", 10), ("unknown12", 11), ("unknown13", 12), ("unknown14", 13), ("unknown15", 14), ("unknown16", 15), ("dns", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPTrapInternetAddressType.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapInternetAddressType.setDescription('The type of Internet address specified by the associated \n             sNMPTrapInternetAddress.')
sNMPTrapInternetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 16, 4, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapInternetAddress.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapInternetAddress.setDescription('The Internet address to which all SNMP Traps are sent.')
sNMPTrapReceiverEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 16, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapReceiverEnabled.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapReceiverEnabled.setDescription('A value of 0 disables the sending of SNMP trap to \n             corresponding receiver. A value of 1 enables the sending \n             of SNMP trap to corresponding receiver.')
sNTPState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPState.setStatus('current')
if mibBuilder.loadTexts: sNTPState.setDescription('SNTP control state')
sNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 17, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 43200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPPollInterval.setStatus('current')
if mibBuilder.loadTexts: sNTPPollInterval.setDescription('The SNTP server polling interval')
sNTPSync = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 17, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noSync", 0), ("inSync", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPSync.setStatus('current')
if mibBuilder.loadTexts: sNTPSync.setDescription('If SNTP Sync fails then check the server settings in the \n             Remote Management page, or disable SNTP')
sNTPLastSync = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 17, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPLastSync.setStatus('current')
if mibBuilder.loadTexts: sNTPLastSync.setDescription('Last SNTP sync time')
systemClock = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 17, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemClock.setStatus('current')
if mibBuilder.loadTexts: systemClock.setDescription('System clock presented as local time')
timeZone = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 17, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50))).clone(namedValues=NamedValues(("gmtMinus1200", 0), ("gmtMinus1130", 1), ("gmtMinus1100", 2), ("gmtMinus1030", 3), ("gmtMinus1000", 4), ("gmtMinus0930", 5), ("gmtMinus0900", 6), ("gmtMinus0830", 7), ("gmtMinus0800", 8), ("gmtMinus0730", 9), ("gmtMinus0700", 10), ("gmtMinus0630", 11), ("gmtMinus0600", 12), ("gmtMinus0530", 13), ("gmtMinus0500", 14), ("gmtMinus0430", 15), ("gmtMinus0400", 16), ("gmtMinus0330", 17), ("gmtMinus0300", 18), ("gmtMinus0230", 19), ("gmtMinus0200", 20), ("gmtMinus0130", 21), ("gmtMinus0100", 22), ("gmtMinus0030", 23), ("gmtZero", 24), ("gmtPlus0030", 25), ("gmtPlus0100", 26), ("gmtPlus0130", 27), ("gmtPlus0200", 28), ("gmtPlus0230", 29), ("gmtPlus0300", 30), ("gmtPlus0330", 31), ("gmtPlus0400", 32), ("gmtPlus0430", 33), ("gmtPlus0500", 34), ("gmtPlus0530", 35), ("gmtPlus0600", 36), ("gmtPlus0630", 37), ("gmtPlus0700", 38), ("gmtPlus0730", 39), ("gmtPlus0800", 40), ("gmtPlus0830", 41), ("gmtPlus0900", 42), ("gmtPlus0930", 43), ("gmtPlus1000", 44), ("gmtPlus1030", 45), ("gmtPlus1100", 46), ("gmtPlus1130", 47), ("gmtPlus1200", 48), ("gmtPlus1230", 49), ("gmtPlus1300", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZone.setStatus('current')
if mibBuilder.loadTexts: timeZone.setDescription('Time zone offsets from Greenwich Mean Time (GMT)')
daylightSaving = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 17, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daylightSaving.setStatus('current')
if mibBuilder.loadTexts: daylightSaving.setDescription('Daylight Saving Time')
sNTPPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 17, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("server1", 0), ("server2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPPrimaryServer.setStatus('current')
if mibBuilder.loadTexts: sNTPPrimaryServer.setDescription('Specifies the primary SNTP server, determining the order \n             in which the servers are tried.')
sNTPPrimaryServerDeadTime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 17, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPPrimaryServerDeadTime.setStatus('current')
if mibBuilder.loadTexts: sNTPPrimaryServerDeadTime.setDescription('Time (in seconds) to wait before retrying communications \n             with an unresponsive primary SNTP server. Setting the \n             value to 0 disables the timer.')
sNTPServerRetries = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 17, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerRetries.setStatus('current')
if mibBuilder.loadTexts: sNTPServerRetries.setDescription('Number of times the PTP will retry after an SNTP server \n             fails to respond.')
sNTPServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 17, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerTimeout.setStatus('current')
if mibBuilder.loadTexts: sNTPServerTimeout.setDescription('Time (in seconds) the PTP will wait for a response from \n             an SNTP server.')
sNTPServerTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 17, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPServerTableNumber.setStatus('current')
if mibBuilder.loadTexts: sNTPServerTableNumber.setDescription('Number of entries in the SNTPServerTable.')
sNTPServerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 17, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: sNTPServerTableIndex.setStatus('current')
if mibBuilder.loadTexts: sNTPServerTableIndex.setDescription('Index range for the SNTPServerTable.')
sNTPServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 17, 15, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: sNTPServerIPAddress.setDescription('The IP address of a valid SNTP server')
sNTPServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 17, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: sNTPServerPortNumber.setDescription('The IP port number of the SNTP server. Defaults to port \n             123.')
sNTPServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 17, 15, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPServerStatus.setStatus('current')
if mibBuilder.loadTexts: sNTPServerStatus.setDescription('Status message reflecting the result of communications \n             with the SNTP server when last polled')
sNTPServerInternetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 17, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("ipv4z", 3), ("ipv6z", 4), ("unknown6", 5), ("unknown7", 6), ("unknown8", 7), ("unknown9", 8), ("unknown10", 9), ("unknown11", 10), ("unknown12", 11), ("unknown13", 12), ("unknown14", 13), ("unknown15", 14), ("unknown16", 15), ("dns", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPServerInternetAddressType.setStatus('current')
if mibBuilder.loadTexts: sNTPServerInternetAddressType.setDescription('The type of Internet address specified by the associated \n             sNTPServerInternetAddress.')
sNTPServerInternetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 17, 15, 1, 6), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerInternetAddress.setStatus('current')
if mibBuilder.loadTexts: sNTPServerInternetAddress.setDescription('The Internet address of a valid SNTP server')
systemReset = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("running", 0), ("consoleReboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemReset.setStatus('current')
if mibBuilder.loadTexts: systemReset.setDescription("Setting this attribute to '1' will cause a system \n             reboot. NB: a system reboot will apply any pending new \n             settings held in memory")
softwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 19, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('current')
if mibBuilder.loadTexts: softwareVersion.setDescription('Current software version')
hardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 19, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareVersion.setStatus('current')
if mibBuilder.loadTexts: hardwareVersion.setDescription('Hardware platform version')
secondarySoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 19, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secondarySoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: secondarySoftwareVersion.setDescription('Secondary software version, used when the primary \n             software image is invalid or erased')
bootVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 19, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootVersion.setStatus('current')
if mibBuilder.loadTexts: bootVersion.setDescription('Boot code software version')
receiveDataRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveDataRate.setStatus('current')
if mibBuilder.loadTexts: receiveDataRate.setDescription('Average data rate over the last one second interval \n             (kbps)')
transmitDataRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 20, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitDataRate.setStatus('current')
if mibBuilder.loadTexts: transmitDataRate.setDescription('Average data rate over the last one second interval \n             (kbps)')
aggregateDataRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 20, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregateDataRate.setStatus('current')
if mibBuilder.loadTexts: aggregateDataRate.setDescription('Average data rate over the last one second interval \n             (kbps)')
wirelessLinkAvailability = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 20, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkAvailability.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkAvailability.setDescription('Link availability calculated since the last reset of the \n             system counters, as a percentage multiplied by 10000 to \n             give four decimal places of precision')
wirelessLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 0), ("registering", 1), ("searching", 2), ("acquiring", 3), ("radarCAC", 4), ("initialising", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkStatus.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkStatus.setDescription('Current status of the wireless link')
byteErrorRatio = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 20, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: byteErrorRatio.setStatus('current')
if mibBuilder.loadTexts: byteErrorRatio.setDescription('Reciprocal of the byte error ratio calculated since the \n             last reset of the system counters')
receiveModulationModeDetail = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 20, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("runningAtMaximumReceiveMode", 0), ("runningAtUserConfiguredMaxModulationMode", 1), ("restrictedBecauseInstallationIsArmed", 2), ("restrictedBecauseOfByteErrorsOnTheWirelessLink", 3), ("restrictedBecauseTheLinkParametersAreUpdating", 4), ("restrictedBecauseChannelChangeIsInProgress", 5), ("restrictedDueToTheLowEthernetLinkSpeed", 6), ("runningAtMaximumReceiveModeForChannelBandwidth", 7), ("limitedByTheWirelessConditions", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveModulationModeDetail.setStatus('current')
if mibBuilder.loadTexts: receiveModulationModeDetail.setDescription('The reason for the current receive modulation mode')
ethernetBridgingAvailability = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 20, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetBridgingAvailability.setStatus('current')
if mibBuilder.loadTexts: ethernetBridgingAvailability.setDescription('Link availability bridging Ethernet traffic calculated \n             since the last reset of the system counters, as a \n             percentage multiplied by 10000 to give four decimal \n             places of precision')
encryptionAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("aESRijndael", 1), ("aES256bitRijndael", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: encryptionAlgorithm.setStatus('current')
if mibBuilder.loadTexts: encryptionAlgorithm.setDescription('The Encryption Algorithm used by the wireless link. NB: \n             A system reboot is required to activate changes to this \n             attribute. NB: The same Encryption Algorithm must be \n             configured at BOTH ends of the link for it to function \n             correctly')
tDDSynchronizationMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDDSynchronizationMode.setStatus('current')
if mibBuilder.loadTexts: tDDSynchronizationMode.setDescription('TDD Synchronization Mode selection')
userTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 25, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userTableNumber.setStatus('current')
if mibBuilder.loadTexts: userTableNumber.setDescription('Number of entries in the userTable')
userTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 25, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: userTableIndex.setStatus('current')
if mibBuilder.loadTexts: userTableIndex.setDescription('used to index values in the userTable.')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 25, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setStatus('current')
if mibBuilder.loadTexts: userName.setDescription('User name which must be entered, along with the \n             appropriate password, in order to gain access to the \n             system.')
userRole = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 25, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("readOnly", 0), ("systemAdministrator", 1), ("securityOfficer", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userRole.setStatus('current')
if mibBuilder.loadTexts: userRole.setDescription('Role of the selected user. A Security Officer has access \n             to and can modify all settings. A System Administrator \n             has access to and can modify all non-security settings. A \n             Read Only user can view settings, but cannot make any \n             changes.')
userEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 25, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userEnabled.setStatus('current')
if mibBuilder.loadTexts: userEnabled.setDescription('Enable / Disable the selected user')
userPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 6, 25, 2, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPassword.setStatus('current')
if mibBuilder.loadTexts: userPassword.setDescription('User password, which must be entered in order to gain \n             access to the system.')
syslogClient = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogClient.setStatus('current')
if mibBuilder.loadTexts: syslogClient.setDescription('Enable or disable the syslog client')
syslogState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 24, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogState.setStatus('current')
if mibBuilder.loadTexts: syslogState.setDescription('The syslog service has been enabled or disabled')
longitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 96, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: longitude.setStatus('current')
if mibBuilder.loadTexts: longitude.setDescription('The longitude of the unit, measured in decimal degrees. \n             This object is set by the SNMP manager and has no \n             internal function.')
latitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 96, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latitude.setStatus('current')
if mibBuilder.loadTexts: latitude.setDescription('The latitude of the unit, measured in decimal degrees. \n             This object is set by the SNMP manager and has no \n             internal function.')
altitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 6, 96, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: altitude.setStatus('current')
if mibBuilder.loadTexts: altitude.setDescription('The altitude of the unit, measured in metres. This \n             object is set by the SNMP manager and has no internal \n             function.')
channelChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 1)).setObjects(("CAMBIUM-PTP600-MIB", "receiveChannel"))
if mibBuilder.loadTexts: channelChangeTrap.setStatus('current')
if mibBuilder.loadTexts: channelChangeTrap.setDescription('The PTP radio has changed wireless channel.\n                 This has been caused by either\n                 i) mandatory radar avoidance,\n                    a DFS impulsive interference event will also be\n                    detected,\n                 or\n                 ii) Dynamic Spectrum Optimization, (DSO)\n                     DSO improves link performance by selecting the\n                     most appropriate transmit and receive channels\n                     with the lowest level of interference.')
dfsImpulsiveInterferenceTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 2)).setObjects(("CAMBIUM-PTP600-MIB", "receiveChannel"))
if mibBuilder.loadTexts: dfsImpulsiveInterferenceTrap.setStatus('current')
if mibBuilder.loadTexts: dfsImpulsiveInterferenceTrap.setDescription('DFS impulsive interference detected event')
dataPortStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 3)).setObjects(("CAMBIUM-PTP600-MIB", "dataPortStatus"))
if mibBuilder.loadTexts: dataPortStatusTrap.setStatus('current')
if mibBuilder.loadTexts: dataPortStatusTrap.setDescription('Current status of the Ethernet link. NB: a change of \n             state may generate an SNMP trap and/or SMTP email alert')
telecomsChannelAStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 4)).setObjects(("CAMBIUM-PTP600-MIB", "telecomsChannelAStatus"))
if mibBuilder.loadTexts: telecomsChannelAStatusTrap.setStatus('current')
if mibBuilder.loadTexts: telecomsChannelAStatusTrap.setDescription('Current status of telecoms channel A. NB: a change of \n             state may generate an SNMP trap and/or SMTP email alert')
telecomsChannelBStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 5)).setObjects(("CAMBIUM-PTP600-MIB", "telecomsChannelBStatus"))
if mibBuilder.loadTexts: telecomsChannelBStatusTrap.setStatus('current')
if mibBuilder.loadTexts: telecomsChannelBStatusTrap.setDescription('Current status of telecoms channel B. NB: a change of \n             state may generate an SNMP trap and/or SMTP email alert')
channelALoopbackTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 6)).setObjects(("CAMBIUM-PTP600-MIB", "channelALoopback"))
if mibBuilder.loadTexts: channelALoopbackTrap.setStatus('current')
if mibBuilder.loadTexts: channelALoopbackTrap.setDescription("The loopback status of telecoms channel A. This is \n             intended for installation testing and should be set to \n             'None' for normal operation. The wire connections to a \n             unit can be tested by applying a 'Copper' loopback to the \n             local unit. The wireless connection to the remote unit \n             can be tested by applying a 'Wireless' loopback to the \n             remote unit with no loopback on the local unit. NB: a \n             change of state may generate an SNMP trap and/or SMTP \n             email alert")
channelBLoopbackTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 7)).setObjects(("CAMBIUM-PTP600-MIB", "channelBLoopback"))
if mibBuilder.loadTexts: channelBLoopbackTrap.setStatus('current')
if mibBuilder.loadTexts: channelBLoopbackTrap.setDescription("The loopback status of telecoms channel B. This is \n             intended for installation testing and should be set to \n             'None' for normal operation. The wire connections to a \n             unit can be tested by applying a 'Copper' loopback to the \n             local unit. The wireless connection to the remote unit \n             can be tested by applying a 'Wireless' loopback to the \n             remote unit with no loopback on the local unit. NB: a \n             change of state may generate an SNMP trap and/or SMTP \n             email alert")
regionCodeTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 8)).setObjects(("CAMBIUM-PTP600-MIB", "regionCode"))
if mibBuilder.loadTexts: regionCodeTrap.setStatus('current')
if mibBuilder.loadTexts: regionCodeTrap.setDescription('The region code prohibits the wireless unit from \n             operating outside the regulated limits. An invalid region \n             code indicates a corrupted license key. NB: a change of \n             state may generate an SNMP trap and/or SMTP email alert')
installStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 9)).setObjects(("CAMBIUM-PTP600-MIB", "installStatus"))
if mibBuilder.loadTexts: installStatusTrap.setStatus('current')
if mibBuilder.loadTexts: installStatusTrap.setDescription('A non-zero value indicates that signalling was received \n             with the wrong MAC address or a mismatched link name. NB: \n             It is very unusual to detect this, because units with \n             mis-configured Target MAC Address will normally fail to \n             establish a wireless link. However, rare circumstances \n             may establish a partial wireless link and detect this \n             situation. NB: A non-zero value on start-up, or a change \n             of value during operation, may generate an SNMP trap \n             and/or SMTP email alert')
installArmStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 10)).setObjects(("CAMBIUM-PTP600-MIB", "installArmState"))
if mibBuilder.loadTexts: installArmStateTrap.setStatus('current')
if mibBuilder.loadTexts: installArmStateTrap.setDescription('Indicates if the unit is being installed. NB: a change \n             of state may generate an SNMP trap and/or SMTP email \n             alert')
unitOutOfCalibrationTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 11)).setObjects(("CAMBIUM-PTP600-MIB", "unitOutOfCalibration"))
if mibBuilder.loadTexts: unitOutOfCalibrationTrap.setStatus('current')
if mibBuilder.loadTexts: unitOutOfCalibrationTrap.setDescription('The unit is out of calibration')
incompatibleRegionCodesTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 14)).setObjects(("CAMBIUM-PTP600-MIB", "incompatibleRegionCodes"))
if mibBuilder.loadTexts: incompatibleRegionCodesTrap.setStatus('current')
if mibBuilder.loadTexts: incompatibleRegionCodesTrap.setDescription('The master and slave units have incompatible region \n             codes. NB: Both units must have compatible license keys')
noWirelessChannelAvailableTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 15)).setObjects(("CAMBIUM-PTP600-MIB", "noWirelessChannelAvailable"))
if mibBuilder.loadTexts: noWirelessChannelAvailableTrap.setStatus('current')
if mibBuilder.loadTexts: noWirelessChannelAvailableTrap.setDescription('Spectrum Management was unable to locate a suitable \n             wireless channel to operate on')
wirelessLinkDisabledWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 16)).setObjects(("CAMBIUM-PTP600-MIB", "wirelessLinkDisabledWarning"))
if mibBuilder.loadTexts: wirelessLinkDisabledWarningTrap.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkDisabledWarningTrap.setDescription('The SNMP ifAdminStatus of the wireless interface has \n             disabled wireless traffic')
dataPortDisabledWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 17)).setObjects(("CAMBIUM-PTP600-MIB", "dataPortDisabledWarning"))
if mibBuilder.loadTexts: dataPortDisabledWarningTrap.setStatus('current')
if mibBuilder.loadTexts: dataPortDisabledWarningTrap.setDescription('The SNMP ifAdminStatus of the Ethernet interface has \n             disabled Ethernet traffic')
dataPortFiberStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 18)).setObjects(("CAMBIUM-PTP600-MIB", "dataPortFiberStatus"))
if mibBuilder.loadTexts: dataPortFiberStatusTrap.setStatus('current')
if mibBuilder.loadTexts: dataPortFiberStatusTrap.setDescription('If the fiber link is not OK, there are three possible \n             causes: Either the fiber link has been installed but \n             disabled (because the license key does not include fiber \n             support), the link could not be established even though \n             no LOS was detected (i.e. an optical carrier was \n             detected, which could be due to a broken TX fiber, or \n             because the link is disabled at the fiber link partner), \n             or the link could not be established and LOS is detected \n             (i.e. no optical carrier is detected). NB: a change of \n             status may generate an SNMP trap and/or SMTP email alert')
dataPortConfigurationMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 19)).setObjects(("CAMBIUM-PTP600-MIB", "dataPortConfigurationMismatch"))
if mibBuilder.loadTexts: dataPortConfigurationMismatchTrap.setStatus('current')
if mibBuilder.loadTexts: dataPortConfigurationMismatchTrap.setDescription('The detection of Ethernet fragments (runt packets) when \n             the link is in full duplex is an indication of an \n             auto-negotiation or forced configuration mismatch')
incompatibleMasterAndSlaveTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 20)).setObjects(("CAMBIUM-PTP600-MIB", "incompatibleMasterAndSlave"))
if mibBuilder.loadTexts: incompatibleMasterAndSlaveTrap.setStatus('current')
if mibBuilder.loadTexts: incompatibleMasterAndSlaveTrap.setDescription('A non-zero value indicates that the master and slave \n             ends of a link are different hardware products, or have \n             different software versions. NB: It is very unusual to \n             detect this, because incompatible units will normally \n             fail to establish a wireless link. However, some \n             combinations may establish a partial wireless link and \n             detect this situation. NB: A non-zero value may generate \n             an SNMP trap and/or SMTP email alert')
sNTPSyncTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 21)).setObjects(("CAMBIUM-PTP600-MIB", "sNTPSync"))
if mibBuilder.loadTexts: sNTPSyncTrap.setStatus('current')
if mibBuilder.loadTexts: sNTPSyncTrap.setDescription('If SNTP Sync fails then check the server settings in the \n             Remote Management page, or disable SNTP')
tDDSynchronizationAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 22)).setObjects(("CAMBIUM-PTP600-MIB", "tDDSynchronizationAlarm"))
if mibBuilder.loadTexts: tDDSynchronizationAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: tDDSynchronizationAlarmTrap.setDescription('Not Synchronized indicates failure of the external \n             timing system for a period greater than the holdover \n             timer. TDD frame timing will have drifted, and this link \n             may cause interference with other links in a synchronized \n             network. Timing System Failure is an early warning, \n             indicating that 80% of the holdover period has expired.')
managementPortStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 23)).setObjects(("CAMBIUM-PTP600-MIB", "managementPortStatus"))
if mibBuilder.loadTexts: managementPortStatusTrap.setStatus('current')
if mibBuilder.loadTexts: managementPortStatusTrap.setDescription('Current status of the out-of-band management link. NB: a \n             change of state may generate an SNMP trap and/or SMTP \n             email alert')
managementPortDisabledWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 24)).setObjects(("CAMBIUM-PTP600-MIB", "managementPortDisabledWarning"))
if mibBuilder.loadTexts: managementPortDisabledWarningTrap.setStatus('current')
if mibBuilder.loadTexts: managementPortDisabledWarningTrap.setDescription('The SNMP ifAdminStatus of the out-of-band management \n             interface has disabled Ethernet traffic')
linkModeOptimizationMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 25)).setObjects(("CAMBIUM-PTP600-MIB", "linkModeOptimizationMismatch"))
if mibBuilder.loadTexts: linkModeOptimizationMismatchTrap.setStatus('current')
if mibBuilder.loadTexts: linkModeOptimizationMismatchTrap.setDescription('The remote node of this link has been configured with a \n             different link mode optimization')
managementPortConfigurationMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 28)).setObjects(("CAMBIUM-PTP600-MIB", "managementPortConfigurationMismatch"))
if mibBuilder.loadTexts: managementPortConfigurationMismatchTrap.setStatus('current')
if mibBuilder.loadTexts: managementPortConfigurationMismatchTrap.setDescription('The detection of Ethernet fragments (runt packets) when \n             the link is in full duplex is an indication of an \n             auto-negotiation or forced configuration mismatch. This \n             alarm is only raised if an Out-of-Band Management Mode \n             has been configured.')
syslogStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 30)).setObjects(("CAMBIUM-PTP600-MIB", "syslogState"))
if mibBuilder.loadTexts: syslogStateTrap.setStatus('current')
if mibBuilder.loadTexts: syslogStateTrap.setDescription('The syslog service has been enabled or disabled')
syslogLocalNearlyFullTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 31))
if mibBuilder.loadTexts: syslogLocalNearlyFullTrap.setStatus('current')
if mibBuilder.loadTexts: syslogLocalNearlyFullTrap.setDescription('The syslog local log is nearly full (90%)')
syslogLocalWrappedTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 32))
if mibBuilder.loadTexts: syslogLocalWrappedTrap.setStatus('current')
if mibBuilder.loadTexts: syslogLocalWrappedTrap.setDescription('The syslog local log has wrapped')
syslogClientTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 33)).setObjects(("CAMBIUM-PTP600-MIB", "syslogClient"))
if mibBuilder.loadTexts: syslogClientTrap.setStatus('current')
if mibBuilder.loadTexts: syslogClientTrap.setDescription('Enable or disable the syslog client')
secureModeAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 34)).setObjects(("CAMBIUM-PTP600-MIB", "secureModeAlarm"))
if mibBuilder.loadTexts: secureModeAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: secureModeAlarmTrap.setDescription('The secure mode (e.g. FIPS, UC-APL) state of the unit. \n             The secure mode is not configured(1) state indicates that \n             the unit is capable of secure mode operation, and one or \n             more of the following security materials has not been \n             configured: Key Of Keys, Private Key, Public Certificate, \n             DRNG Entropy Status, Wireless Encryption Key. The secure \n             mode mode is configured but not active(2) state indicates \n             that the unit is capable of secure mode operation, and \n             the security material has been configured, but the \n             configuration of interfaces is not consistent with secure \n             mode operation. The secure mode is not supported(3) state \n             indicates that the unit is not capable of secure mode \n             operation. The secure mode capability requires \n             appropriate hardware compatibility, license key and \n             software image.')
ethernetBridgingStatusAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 6, 99, 0, 35)).setObjects(("CAMBIUM-PTP600-MIB", "ethernetBridgingStatusAlarm"))
if mibBuilder.loadTexts: ethernetBridgingStatusAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ethernetBridgingStatusAlarmTrap.setDescription('Ethernet traffic bridging is disabled because the \n             wireless link is not operating at the configured Lowest \n             Ethernet Modulation Mode')
mibBuilder.exportSymbols("CAMBIUM-PTP600-MIB", receiveFreqMHz=receiveFreqMHz, sNMPSendAllTrapsAtStartup=sNMPSendAllTrapsAtStartup, ethernetBridgingAvailability=ethernetBridgingAvailability, ptpGroups=ptpGroups, managementPortConfigurationMismatchTrap=managementPortConfigurationMismatchTrap, sntpGroup=sntpGroup, managementPortStatusTrap=managementPortStatusTrap, phyControlGroup=phyControlGroup, sNMPTrapVersion=sNMPTrapVersion, dfsTable=dfsTable, sNTPPrimaryServerDeadTime=sNTPPrimaryServerDeadTime, sNTPState=sNTPState, sMTPEnabledMessages=sMTPEnabledMessages, sNMPEnabledTraps=sNMPEnabledTraps, sMTPSourceEmailAddress=sMTPSourceEmailAddress, securityLevel=securityLevel, tFTPServerIPAddress=tFTPServerIPAddress, phyStatus=phyStatus, userTableNumber=userTableNumber, l2CPPriorityTableEntry=l2CPPriorityTableEntry, incompatibleMasterAndSlave=incompatibleMasterAndSlave, secureModeAlarm=secureModeAlarm, latitude=latitude, altitude=altitude, syslogClientTrap=syslogClientTrap, vectorError=vectorError, siteName=siteName, wirelessLinkDisabledWarningTrap=wirelessLinkDisabledWarningTrap, hTTPSPortNumber=hTTPSPortNumber, dataPortDisabledWarningTrap=dataPortDisabledWarningTrap, sNTPLastSync=sNTPLastSync, sNTPServerTimeout=sNTPServerTimeout, linkName=linkName, masterSlaveMode=masterSlaveMode, iPv6Address=iPv6Address, sMTPServerIPAddress=sMTPServerIPAddress, tFTPServerInternetAddressType=tFTPServerInternetAddressType, softwareVersion=softwareVersion, noWirelessChannelAvailable=noWirelessChannelAvailable, telecomsChannelAStatus=telecomsChannelAStatus, receiveModulationModeDetail=receiveModulationModeDetail, sNMPPortNumber=sNMPPortNumber, productVariant=productVariant, cableLoss=cableLoss, userRole=userRole, ptp=ptp, transmitFreqKHz=transmitFreqKHz, ptpTraps=ptpTraps, tDDSynchronizationAlarm=tDDSynchronizationAlarm, secondarySoftwareVersion=secondarySoftwareVersion, mPLSTCPriorityQueueMapping=mPLSTCPriorityQueueMapping, receiveModulationMode=receiveModulationMode, hardwareVersion=hardwareVersion, targetRange=targetRange, sNTPServerIPAddress=sNTPServerIPAddress, installArmStateTrap=installArmStateTrap, smtp=smtp, incompatibleRegionCodes=incompatibleRegionCodes, dataPortSpeedAndDuplex=dataPortSpeedAndDuplex, configurationGroup=configurationGroup, regionCodeTrap=regionCodeTrap, remoteInternetAddressType=remoteInternetAddressType, syslogLocalWrappedTrap=syslogLocalWrappedTrap, vLANManagementVID=vLANManagementVID, hTTPPortNumber=hTTPPortNumber, dfsNineNinePointNinePercentiles=dfsNineNinePointNinePercentiles, alarmsGroup=alarmsGroup, tDDControlGroup=tDDControlGroup, l2CPPriorityTableNumber=l2CPPriorityTableNumber, rxColorCode=rxColorCode, productName=productName, bootVersion=bootVersion, PYSNMP_MODULE_ID=cambium, managementPortConfigurationMismatch=managementPortConfigurationMismatch, pubStatsGroup=pubStatsGroup, bridge=bridge, channelBandwidth=channelBandwidth, sNTPServerTableIndex=sNTPServerTableIndex, iPVersion=iPVersion, sNMPTrapInternetAddressType=sNMPTrapInternetAddressType, channelBLoopback=channelBLoopback, mPLSTCPriorityTableNumber=mPLSTCPriorityTableNumber, dataPortConfigurationMismatchTrap=dataPortConfigurationMismatchTrap, systemClock=systemClock, incompatibleRegionCodesTrap=incompatibleRegionCodesTrap, byteErrorRatio=byteErrorRatio, syslogClient=syslogClient, bridgeGroup=bridgeGroup, tFTPSoftwareUpgradeFileName=tFTPSoftwareUpgradeFileName, sMTPEmailAlert=sMTPEmailAlert, sNMPTrapIPAddress=sNMPTrapIPAddress, managementPortDisabledWarningTrap=managementPortDisabledWarningTrap, dfsTableEntry=dfsTableEntry, tFTPSoftwareUpgradeStatus=tFTPSoftwareUpgradeStatus, managementPortSpeedAndDuplex=managementPortSpeedAndDuplex, dataPortStatusTrap=dataPortStatusTrap, tFTPServerInternetAddress=tFTPServerInternetAddress, syslogStateTrap=syslogStateTrap, ptpTrapPrefix=ptpTrapPrefix, alarms=alarms, sNTPSync=sNTPSync, mPLSTCPriorityTableEntry=mPLSTCPriorityTableEntry, sNMPTrapTableEntry=sNMPTrapTableEntry, remoteIPAddress=remoteIPAddress, userEnabled=userEnabled, l2CPPriorityTable=l2CPPriorityTable, sntp=sntp, linkLoss=linkLoss, l2CPPriorityQueueMapping=l2CPPriorityQueueMapping, dfsGroup=dfsGroup, managementGroup=managementGroup, iPv6PrefixLength=iPv6PrefixLength, snmpControl=snmpControl, ptp600=ptp600, resetGroup=resetGroup, sNTPServerTableNumber=sNTPServerTableNumber, sNTPSyncTrap=sNTPSyncTrap, tDDSynchronizationAlarmTrap=tDDSynchronizationAlarmTrap, channelACableLength=channelACableLength, supplementary=supplementary, bandwidthVariant=bandwidthVariant, aAAControl=aAAControl, telnetAccessEnabled=telnetAccessEnabled, dataPortFiberStatus=dataPortFiberStatus, syslogControl=syslogControl, tFTPServerPortNumber=tFTPServerPortNumber, linkSymmetry=linkSymmetry, aggregateDataRate=aggregateDataRate, longitude=longitude, sNMPTrapInternetAddress=sNMPTrapInternetAddress, ptpCompliance=ptpCompliance, mPLSTCPriorityTable=mPLSTCPriorityTable, licenceGroup=licenceGroup, sNMPTrapTable=sNMPTrapTable, antennaGain=antennaGain, telecomsChannelBStatus=telecomsChannelBStatus, hTTPAccessEnabled=hTTPAccessEnabled, transmitModulationMode=transmitModulationMode, dfsPeaks=dfsPeaks, unitOutOfCalibration=unitOutOfCalibration, localPacketFiltering=localPacketFiltering, unknownNetworkPriorityQueueMapping=unknownNetworkPriorityQueueMapping, groupID=groupID, sNTPPollInterval=sNTPPollInterval, remoteMaximumTransmitPower=remoteMaximumTransmitPower, ethernetPriorityTableIndex=ethernetPriorityTableIndex, channelBCableLength=channelBCableLength, dataPortAutoNegotiation=dataPortAutoNegotiation, tDDSynchronizationMode=tDDSynchronizationMode, userName=userName, encryption=encryption, sNTPServerTable=sNTPServerTable, telecomsChannelBStatusTrap=telecomsChannelBStatusTrap, ethernetPriorityTableEntry=ethernetPriorityTableEntry, ethernet=ethernet, sNMPCommunityString=sNMPCommunityString, sNTPServerInternetAddress=sNTPServerInternetAddress, smtpGroup=smtpGroup, managementMode=managementMode, configuration=configuration, dataPortDisabledWarning=dataPortDisabledWarning, telecomsChannelAStatusTrap=telecomsChannelAStatusTrap, receiveFreqKHz=receiveFreqKHz, telecom=telecom, frequencyVariant=frequencyVariant, accessMethod=accessMethod, regionCode=regionCode, transmitFreqMHz=transmitFreqMHz, daylightSaving=daylightSaving, syslogLocalNearlyFullTrap=syslogLocalNearlyFullTrap, constantPowerSpectralDensity=constantPowerSpectralDensity, remoteInternetAddress=remoteInternetAddress, ethernetFiberSupport=ethernetFiberSupport, sNMPTrapTableNumber=sNMPTrapTableNumber, userTableEntry=userTableEntry, installStatusTrap=installStatusTrap, ptmp=ptmp, managementPortStatus=managementPortStatus, transmitChannel=transmitChannel, managementPortDisabledWarning=managementPortDisabledWarning, linkModeOptimisation=linkModeOptimisation, rawReceivePower=rawReceivePower, sNTPPrimaryServer=sNTPPrimaryServer, eIRP=eIRP, userConfiguredMaxModulationMode=userConfiguredMaxModulationMode, tDDSynchronizationStatus=tDDSynchronizationStatus, sNTPServerPortNumber=sNTPServerPortNumber, userPassword=userPassword, channelALoopbackTrap=channelALoopbackTrap, secureModeAlarmTrap=secureModeAlarmTrap, ethernetBridgingStatusAlarmTrap=ethernetBridgingStatusAlarmTrap, encryptionAlgorithm=encryptionAlgorithm, dataPortStatus=dataPortStatus, sNMPv3Enable=sNMPv3Enable, notificationsGroup=notificationsGroup, sNMPTrapTableIndex=sNMPTrapTableIndex, ethernetGroup=ethernetGroup, installStatus=installStatus, iPv6GatewayAddress=iPv6GatewayAddress, ethernetPriorityQueueMapping=ethernetPriorityQueueMapping, encryptionGroup=encryptionGroup, linkModeOptimizationMismatchTrap=linkModeOptimizationMismatchTrap, tDDControl=tDDControl, dfsImpulsiveInterferenceTrap=dfsImpulsiveInterferenceTrap, dataPortAutoMdix=dataPortAutoMdix, tFTPSoftwareUpgradeStatusAdditionalText=tFTPSoftwareUpgradeStatusAdditionalText, iPDSCPPriorityQueueMapping=iPDSCPPriorityQueueMapping, tFTPStartSoftwareUpgrade=tFTPStartSoftwareUpgrade, ethernetBridgingStatusAlarm=ethernetBridgingStatusAlarm, channelBLoopbackTrap=channelBLoopbackTrap, iPDSCPPriorityTable=iPDSCPPriorityTable, sNTPServerStatus=sNTPServerStatus, systemReset=systemReset, sNTPServerTableEntry=sNTPServerTableEntry, maximumTransmitPower=maximumTransmitPower, telnetPortNumber=telnetPortNumber, channelALineCode=channelALineCode, vLANManagementPriority=vLANManagementPriority, telecomsChannelSelection=telecomsChannelSelection, timeZone=timeZone, searchState=searchState, sNTPServerRetries=sNTPServerRetries, versions=versions, dfsTableNumber=dfsTableNumber, iPv4Address=iPv4Address, signalStrengthRatio=signalStrengthRatio, ethernetBridgingStatus=ethernetBridgingStatus, licence=licence, pubStats=pubStats, phyStatusGroup=phyStatusGroup, hTTPSAccessEnabled=hTTPSAccessEnabled, l2CPPriorityTableIndex=l2CPPriorityTableIndex, userTable=userTable, mPLSTCPriorityTableIndex=mPLSTCPriorityTableIndex, telecomsInterface=telecomsInterface, channelALoopback=channelALoopback, dataPortFiberStatusTrap=dataPortFiberStatusTrap, transmitDataRate=transmitDataRate, ethernetPriorityTableNumber=ethernetPriorityTableNumber, iPDSCPPriorityTableNumber=iPDSCPPriorityTableNumber, useVLANForManagementInterfaces=useVLANForManagementInterfaces, iPDSCPPriorityTableIndex=iPDSCPPriorityTableIndex, tFTPSoftwareUpgradeStatusText=tFTPSoftwareUpgradeStatusText, transmitPower=transmitPower, ethernetPriorityTable=ethernetPriorityTable, reset=reset, remoteRxTargetPower=remoteRxTargetPower, sMTPServerInternetAddress=sMTPServerInternetAddress, dataPortConfigurationMismatch=dataPortConfigurationMismatch, dfsTableIndex=dfsTableIndex, aAAControlGroup=aAAControlGroup, receivePower=receivePower, incompatibleMasterAndSlaveTrap=incompatibleMasterAndSlaveTrap, gatewayIPAddress=gatewayIPAddress)
mibBuilder.exportSymbols("CAMBIUM-PTP600-MIB", telecomGroup=telecomGroup, installArmState=installArmState, sMTPDestinationEmailAddress=sMTPDestinationEmailAddress, iPDSCPPriorityTableEntry=iPDSCPPriorityTableEntry, hAZLOCConfiguration=hAZLOCConfiguration, ethernetCappedMaxWirelessSpeed=ethernetCappedMaxWirelessSpeed, syslogState=syslogState, range=range, dfs=dfs, unitOutOfCalibrationTrap=unitOutOfCalibrationTrap, userTableIndex=userTableIndex, receiveChannel=receiveChannel, sNMPTrapPortNumber=sNMPTrapPortNumber, dataPortAutoNegAdvertisement=dataPortAutoNegAdvertisement, enabledDiagnosticAlarms=enabledDiagnosticAlarms, wirelessLinkAvailability=wirelessLinkAvailability, supplementaryGroup=supplementaryGroup, dataPortWirelessDownAlert=dataPortWirelessDownAlert, dfsMeans=dfsMeans, managementPortWirelessDownAlert=managementPortWirelessDownAlert, linkModeOptimizationMismatch=linkModeOptimizationMismatch, sMTPServerPortNumber=sMTPServerPortNumber, sNTPServerInternetAddressType=sNTPServerInternetAddressType, phyControl=phyControl, sMTPServerInternetAddressType=sMTPServerInternetAddressType, txColorCode=txColorCode, cambium=cambium, iPv6AutoConfiguredLinkLocalAddress=iPv6AutoConfiguredLinkLocalAddress, dSCPManagementPriority=dSCPManagementPriority, syslogControlGroup=syslogControlGroup, wirelessLinkDisabledWarning=wirelessLinkDisabledWarning, channelBLineCode=channelBLineCode, receiveDataRate=receiveDataRate, automaticTxPowerControl=automaticTxPowerControl, management=management, sNMPTrapReceiverEnabled=sNMPTrapReceiverEnabled, noWirelessChannelAvailableTrap=noWirelessChannelAvailableTrap, rangingMode=rangingMode, channelChangeTrap=channelChangeTrap, targetMACAddress=targetMACAddress, snmpControlGroup=snmpControlGroup, qOSPriorityScheme=qOSPriorityScheme, subnetMask=subnetMask, wirelessLinkStatus=wirelessLinkStatus, versionsGroup=versionsGroup)
