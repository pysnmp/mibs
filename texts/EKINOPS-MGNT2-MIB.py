#
# PySNMP MIB module EKINOPS-MGNT2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/ekinops/EKINOPS-MGNT2-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 08:52:39 2024
# On host fv-az2028-26 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
EkiLoadPermutMode, EkiOnOff, EkiLoadGWSW, EkiLoadState, EkiProtocol, EkiApiState, EkiLoadPermutMethod, EkiSynchroMode, ekinops, EkiState = mibBuilder.importSymbols("EKINOPS-MIB", "EkiLoadPermutMode", "EkiOnOff", "EkiLoadGWSW", "EkiLoadState", "EkiProtocol", "EkiApiState", "EkiLoadPermutMethod", "EkiSynchroMode", "ekinops", "EkiState")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, ObjectIdentity, MibIdentifier, Gauge32, Counter64, Integer32, Counter32, Bits, TimeTicks, iso, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "ObjectIdentity", "MibIdentifier", "Gauge32", "Counter64", "Integer32", "Counter32", "Bits", "TimeTicks", "iso", "NotificationType", "ModuleIdentity")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
mgnt2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 20044, 7))
mgnt2.setRevisions(('2005-11-24 00:00', '2006-01-24 00:00', '2006-03-10 00:00', '2006-05-10 00:00', '2006-05-23 00:00', '2006-09-28 00:00', '2006-12-13 00:00', '2007-02-09 00:00', '2007-04-24 00:00', '2007-06-19 00:00', '2007-08-27 00:00', '2007-11-27 00:00', '2008-05-20 00:00', '2008-06-18 00:00', '2008-08-18 00:00', '2008-10-07 00:00', '2008-11-19 00:00', '2009-01-05 00:00', '2009-12-15 00:00', '2010-01-04 00:00', '2010-02-16 00:00', '2010-07-16 00:00', '2010-10-27 00:00', '2011-03-17 00:00', '2011-04-07 00:00', '2011-04-13 00:00', '2011-05-27 00:00', '2011-06-08 00:00', '2011-06-30 00:00', '2011-09-12 00:00', '2012-02-08 00:00', '2012-03-19 00:00', '2012-07-16 00:00', '2013-05-28 00:00', '2013-05-30 00:00', '2013-08-29 00:00', '2013-09-04 00:00', '2013-09-11 00:00', '2013-11-06 00:00', '2014-07-30 00:00', '2014-09-01 00:00', '2015-02-11 00:00', '2015-04-01 00:00', '2015-04-14 00:00', '2015-04-14 00:00', '2015-10-09 00:00', '2015-11-05 00:00', '2016-05-27 00:00', '2016-06-15 00:00', '2016-10-12 00:00', '2017-01-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mgnt2.setRevisionsDescriptions(('Initial version.', 'Add the ekicraft package table.', 'Change Rack full to Rack Not Full', 'Gateways are managed by a table', 'Replace PBU by PM', 'CRAFT/LINUX Inventory Insertion', 'Plug-in inventory table insertion', 'Add Backpanel ,Fan inventory and error counters', 'Add detailed traps', 'Add ABS3 objects', 'Add Groups number in board table for pm1008dc', 'Update Ekinops Address,Helps on objects,Add Dcc management', 'Add syslog and ntp servers ip addresses', 'Add Inactivity Time out', 'Add Cli access, create a textual convention for DCC access.Add Craft Access', 'Invert code on DCC mode', 'Insert Chassis Ethernet Split', 'Insert Chassis Global Conf', 'Correction on traps', 'Insert CRIT/URG/NURG/Acknowledge', 'Add CondType and NMS parameters', 'Add perf management for the NMS', 'Add new filters for traps', 'Add new filters for traps', 'New mode on new ehternet input', 'Polling Manager fail insertion', 'Rajout AlarmType sur Extraction Fan', 'Rajout Cold Reset', 'PerfCapStatus new type', 'New data for Atom', 'PM labelling removal', 'Add mgnt2SubFunctionLabel for 100G', 'Minor cosmetic updates', 'RSTP configuration object', 'Dust filter insertion, CPU Temp warning', 'LLDP configuration object', 'MGNT Shutdown adding', 'Log file mode insertion', 'RADIUS objects', 'Node Controller objects', 'Probcause,AlarmType - NMS completion', 'HTTP configuration', 'Add bindings for Node Controller', 'RSTP Thresholds', 'Users privilege', 'Add in mgnt2SlotStatus', 'Appropriate Limits on SYNTAX of some OBJECT-TYPE ', 'Add objects for fail login attemps', 'Removable Fan modules handling', 'Modification of numbering of the fans', 'FTP, TFTP enable disable',))
if mibBuilder.loadTexts: mgnt2.setLastUpdated('201701100000Z')
if mibBuilder.loadTexts: mgnt2.setOrganization('Ekinops')
if mibBuilder.loadTexts: mgnt2.setContactInfo('Ekinops\n\n          3, rue Blaise Pascal\n          F-22300 Lannion / FRANCE\n\n          Tel : +33 (0)2 96 05 00 30\n          Fax : +33 (0)2 96 48 62 39\n\n          E-mail: support@ekinops.net')
if mibBuilder.loadTexts: mgnt2.setDescription('MIB for Ekinops 360 management.')
class Mgnt2CliAccessValues(TextualConvention, Integer32):
    description = 'different type of access by ethernet for the CLI'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("noCliByEthernet", 0), ("cliBySSH", 1), ("cliByTelnet", 2))

class Mgnt2CraftAccessValues(TextualConvention, Integer32):
    description = 'enables access to the CRAFT'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("noCraftAccess", 0), ("craftEnable", 1), ("craftEnableHttps", 2))

class Mgnt2DccAccessValues(TextualConvention, Integer32):
    description = 'different modes for the Dcc access'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("mode1Slots2s4s6s8s10", 0), ("mode2Slots2s6s10s14s18", 1))

class Mgnt2TrapModeValues(TextualConvention, Integer32):
    description = 'different modes for the trap generation'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("syntheticTrap", 0), ("detailedTrap", 1), ("nmsTrap", 2))

class Mgnt2AckMode(TextualConvention, Integer32):
    description = 'different modes to acknowledge alarms'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("modeA", 1), ("modeB", 2))

class Mgnt2PerfResyncValues(TextualConvention, Integer32):
    description = 'different modes for the trap generation'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("perfResyncIdle", 1), ("perfResyncSync", 2), ("perfResyncReady", 3), ("perfResyncDelete", 4))

class Mgnt2NetMode(TextualConvention, Integer32):
    description = 'different modes for the network management'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("switch", 1), ("gateway", 2))

class Mgnt2MasterEthMode(TextualConvention, Integer32):
    description = 'different modes for the Master'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("static", 1), ("dhcp", 2))

class Mgnt2SubnetEthMode(TextualConvention, Integer32):
    description = 'different modes for the Subnet'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("static", 1), ("dhcp", 2))

class Mgnt2AuthTypeValues(TextualConvention, Integer32):
    description = 'Various types of authentication processes'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("authLocal", 0), ("authRADIUS", 1), ("authLDAP", 2))

class Mgnt2LogFileMode(TextualConvention, Integer32):
    description = 'different modes for the log files'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("disabled", 0), ("linear", 1), ("rotary", 2))

class Mgnt2SlotStatus(TextualConvention, Integer32):
    description = 'Status of the slot'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("slotEmpty", 0), ("pmReady", 1), ("pmReset", 2), ("pmLoad", 3), ("pmPassive", 4), ("pmUnknown", 5), ("pmNotReady", 6))

mgnt2SNMPAgentData = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 1))
mgnt2Hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2))
mgnt2Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 3))
mgnt2SoftwareManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 4))
mgnt2ConfigManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 5))
mgnt2RemoteInventory = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 6))
mgnt2ErrorCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 7))
mgnt2Perf = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 8))
mgnt2IPmanagment = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1))
mgnt2GigmManagerIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 1), )
if mibBuilder.loadTexts: mgnt2GigmManagerIpAddressTable.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmManagerIpAddressTable.setDescription('Manager IP address Table.')
mgnt2GigmManagerIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 1, 1), ).setIndexNames((0, "EKINOPS-MGNT2-MIB", "mgnt2GigmManagerIpIndex"))
if mibBuilder.loadTexts: mgnt2GigmManagerIpAddressEntry.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmManagerIpAddressEntry.setDescription('')
mgnt2GigmManagerIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgnt2GigmManagerIpIndex.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmManagerIpIndex.setDescription('Index of the IP address of the manager')
mgnt2GigmManagerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgnt2GigmManagerIpAddress.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmManagerIpAddress.setDescription('IP address of the manager:This OID defines the IP\n         address of the SNMP Manager attached to the Mgnt2')
mgnt2GigmManagerIpAddressTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgnt2GigmManagerIpAddressTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmManagerIpAddressTableRowStatus.setDescription('The status of this row.')
mgnt2GigmManagerTrapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgnt2GigmManagerTrapPort.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmManagerTrapPort.setDescription('Manager UDP port.')
mgnt2GigmManagerEnableCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 1, 1, 5), EkiOnOff()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgnt2GigmManagerEnableCtrl.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmManagerEnableCtrl.setDescription('Enabling trap of Ctrl.')
mgnt2GigmManagerEnableConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 1, 1, 6), EkiOnOff()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgnt2GigmManagerEnableConfig.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmManagerEnableConfig.setDescription('Enabling trap of config.')
mgnt2GigmManagerEnableEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 1, 1, 7), EkiOnOff()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgnt2GigmManagerEnableEvent.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmManagerEnableEvent.setDescription('Enabling trap of event.')
mgnt2GigmManagerEnableAlarmCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 1, 1, 8), EkiOnOff()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgnt2GigmManagerEnableAlarmCrit.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmManagerEnableAlarmCrit.setDescription('Enabling trap of crit alarm.')
mgnt2GigmManagerEnableAlarmMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 1, 1, 9), EkiOnOff()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgnt2GigmManagerEnableAlarmMajor.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmManagerEnableAlarmMajor.setDescription('Enabling trap of major alarm.')
mgnt2GigmManagerEnableAlarmMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 1, 1, 10), EkiOnOff()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgnt2GigmManagerEnableAlarmMinor.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmManagerEnableAlarmMinor.setDescription('Enabling trap of minor alarm.')
mgnt2GigmManagerRegistrationTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 1, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgnt2GigmManagerRegistrationTimeout.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmManagerRegistrationTimeout.setDescription('Time-out for manager activities.')
mgnt2GigmManagerEnableAlarmWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 1, 1, 12), EkiOnOff()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgnt2GigmManagerEnableAlarmWarning.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmManagerEnableAlarmWarning.setDescription('Enabling trap of warning alarm.')
mgnt2GigmManagerEnableAlarmIndeterminate = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 1, 1, 13), EkiOnOff()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgnt2GigmManagerEnableAlarmIndeterminate.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmManagerEnableAlarmIndeterminate.setDescription('Enabling trap of indeterminate alarm.')
mgnt2GigmBoardIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmBoardIpAddress.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmBoardIpAddress.setDescription('IP address of the Chassis:This OID defines the IP\n        address of the Mgnt2')
mgnt2GigmIPAddresByDHCP = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 3), EkiState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmIPAddresByDHCP.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmIPAddresByDHCP.setDescription('IP address retrieved by DHCP:If enabled, the IP\n        address is retrieved by DHCP, in which case changes\n        take effect after a board reset. If disabled the\n        object, mgnt2GigmBoardIpAddress defines the address')
mgnt2GigmNetmask = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmNetmask.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmNetmask.setDescription('Netmask for the board IP address:This OID defined\n        the IP Subnet mask of the Mgnt2')
mgnt2GigmGatewayAddressTable = MibTable((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 5), )
if mibBuilder.loadTexts: mgnt2GigmGatewayAddressTable.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmGatewayAddressTable.setDescription('Gateway IP address Table: This table contains all\n\tthe gateway IP addresses.')
mgnt2GigmGatewayAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 5, 1), ).setIndexNames((0, "EKINOPS-MGNT2-MIB", "mgnt2GigmGatewayIndex"))
if mibBuilder.loadTexts: mgnt2GigmGatewayAddressEntry.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmGatewayAddressEntry.setDescription('')
mgnt2GigmGatewayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgnt2GigmGatewayIndex.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmGatewayIndex.setDescription('Index of the IP address of the gateway')
mgnt2GigmGatewayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 5, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgnt2GigmGatewayAddress.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmGatewayAddress.setDescription('IP address of the gateway :This OID defines the IP\n         address of the gateway attached to the Chassis')
mgnt2GigmGatewayOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 5, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgnt2GigmGatewayOrder.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmGatewayOrder.setDescription('Gateway priority: This OID defines the priority of \n\tthe gateway (lower number for higher priority)')
mgnt2GigmSyslog = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmSyslog.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmSyslog.setDescription('IP address of the syslog server:This OID defines\n        the IP address of the syslog of the Mgnt2')
mgnt2GigmNtpServer = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmNtpServer.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmNtpServer.setDescription('IP address of the ntp server:This OID defines\n        the IP address of the ntp server for the Mgnt2')
mgnt2GigmNodeIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmNodeIpAddress.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmNodeIpAddress.setDescription('Node IP address :This OID defines\n          the Node IP address in node controller mode for the Mgnt2')
mgnt2ModulesManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 1, 2))
mgnt2GigmBoardTable = MibTable((1, 3, 6, 1, 4, 1, 20044, 7, 1, 2, 1), )
if mibBuilder.loadTexts: mgnt2GigmBoardTable.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmBoardTable.setDescription('List of PMs plugged in the Chassis')
mgnt2GigmBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20044, 7, 1, 2, 1, 1), ).setIndexNames((0, "EKINOPS-MGNT2-MIB", "mgnt2IndexBoards"))
if mibBuilder.loadTexts: mgnt2GigmBoardEntry.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmBoardEntry.setDescription('Row Definition for the PMs table')
mgnt2IndexBoards = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2IndexBoards.setStatus('current')
if mibBuilder.loadTexts: mgnt2IndexBoards.setDescription('Index for PMs table')
mgnt2Position = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2Position.setStatus('current')
if mibBuilder.loadTexts: mgnt2Position.setDescription('PM Slot number:This OID gives the slot number in\n              which the PM is plugged')
mgnt2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2Name.setStatus('current')
if mibBuilder.loadTexts: mgnt2Name.setDescription('PM name:This OID gives the name of the PM plugged\n              in the Mgnt2')
mgnt2PortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2PortNumber.setStatus('current')
if mibBuilder.loadTexts: mgnt2PortNumber.setDescription('Number of Client Ports:This OID gives the number of\n              client ports on the PM plugged in the Mgnt2')
mgnt2LineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2LineNumber.setStatus('current')
if mibBuilder.loadTexts: mgnt2LineNumber.setDescription('Number of Line Ports:This OID gives the number of line\n              ports on the PM plugged in the Mgnt2')
mgnt2GroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2GroupNumber.setStatus('current')
if mibBuilder.loadTexts: mgnt2GroupNumber.setDescription('Number of Groups:This OID gives the number of group\n              of clients on the PM plugged in the Mgnt2')
mgnt2RootOIDInventory = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 2, 1, 1, 7), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2RootOIDInventory.setStatus('current')
if mibBuilder.loadTexts: mgnt2RootOIDInventory.setDescription('root oid of the inventory leaf of the corresponding PM')
mgnt2SlotOcc = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2SlotOcc.setStatus('current')
if mibBuilder.loadTexts: mgnt2SlotOcc.setDescription('PM Slot occupied:This OID gives the slots taken\n               by this PM')
mgnt2SubFunctionLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2SubFunctionLabel.setStatus('current')
if mibBuilder.loadTexts: mgnt2SubFunctionLabel.setDescription('Sub Function Label: This OID gives the name of the sub\n                 function embedded on the Chassis. (applied only on the\n                 100G Chassis)')
mgnt2SlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 2, 1, 1, 10), Mgnt2SlotStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2SlotStatus.setStatus('current')
if mibBuilder.loadTexts: mgnt2SlotStatus.setDescription('Slot Status: This OID gives the status of the slot \n                 in the Chassis: See Textual COnvention')
mgnt2GigmSelectedBoard = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmSelectedBoard.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmSelectedBoard.setDescription('PM Slot number selected:PM selected for further\n        operations in the Ekinops module board tree. This\n        number is the slot number.')
mgnt2GigmMibsTable = MibTable((1, 3, 6, 1, 4, 1, 20044, 7, 1, 4), )
if mibBuilder.loadTexts: mgnt2GigmMibsTable.setStatus('obsolete')
if mibBuilder.loadTexts: mgnt2GigmMibsTable.setDescription('List of MIBs supported by the Chassis SNMPAgent')
mgnt2GigmMibsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20044, 7, 1, 4, 1), ).setIndexNames((0, "EKINOPS-MGNT2-MIB", "mgnt2IndexMibs"))
if mibBuilder.loadTexts: mgnt2GigmMibsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: mgnt2GigmMibsEntry.setDescription('Row definition for MIBs table')
mgnt2IndexMibs = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2IndexMibs.setStatus('obsolete')
if mibBuilder.loadTexts: mgnt2IndexMibs.setDescription('Index for MIBs table')
mgnt2MibName = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2MibName.setStatus('obsolete')
if mibBuilder.loadTexts: mgnt2MibName.setDescription('MIB name:This OID gives the name of the MIBs\n              supported by the SNMP Agent')
mgnt2MibPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2MibPartNumber.setStatus('obsolete')
if mibBuilder.loadTexts: mgnt2MibPartNumber.setDescription('MIB Part Number:This OID gives the part number of the MIBs\n              supported by the SNMP Agent')
mgnt2GigmLogicalName = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmLogicalName.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmLogicalName.setDescription('Mgnt2 name:This OID defines the name of the Mgnt2')
mgnt2GigmEqptType = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2GigmEqptType.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmEqptType.setDescription('Equipment type:This OID defines the type of the Equipment')
mgnt2GigmTrapCount = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 1, 7))
mgnt2GigmTrapCounter = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2GigmTrapCounter.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmTrapCounter.setDescription('Trap counter:This OID counts the number of trap sent')
mgnt2GigmResetTrapCounter = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 7, 2), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmResetTrapCounter.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmResetTrapCounter.setDescription('Reset trap counter:This OID reset the trap counter to 0')
mgnt2GigmSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 1, 8))
mgnt2GigmRoCommunity = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 8, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmRoCommunity.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmRoCommunity.setDescription('SNMP Get community:This OID defines the community for the \n\tSNMP Get function')
mgnt2GigmRwCommunity = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 8, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmRwCommunity.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmRwCommunity.setDescription('SNMP Set community:This OID defines the community for the \n\tSNMP Set function')
mgnt2GigmTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 8, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmTrapCommunity.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmTrapCommunity.setDescription('SNMP Trap community:This OID defines the community for the \n\tSNMP Trap function')
mgnt2GigmTime = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 1, 9))
mgnt2GigmCurrentHour = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmCurrentHour.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmCurrentHour.setDescription("Chassis Hour time:This OID defines the hour of the chassis' time")
mgnt2GigmCurrentMinute = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmCurrentMinute.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmCurrentMinute.setDescription("Chassis Minute time:This OID defines the minute of the chassis' time")
mgnt2GigmCurrentYear = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1970, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmCurrentYear.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmCurrentYear.setDescription("Chassis year date:This OID defines the year of the chassis' date")
mgnt2GigmCurrentMonth = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmCurrentMonth.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmCurrentMonth.setDescription("Chassis month date:This OID defines the month of the chassis' date")
mgnt2GigmCurrentDay = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmCurrentDay.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmCurrentDay.setDescription("Chassis day date:This OID defines the day of the chassis' date")
mgnt2Authentication = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 1, 10))
mgnt2GigmRadiusServer = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 10, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmRadiusServer.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmRadiusServer.setDescription('IP address of the RADIUS server:This OID defines\n        the IP address of the external RADIUS server for authentication')
mgnt2GigmRadiusPort = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmRadiusPort.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmRadiusPort.setDescription('TCP port number of the RADIUS server:This OID defines\n        the TCP port number of the external RADIUS server for\n \tauthentication')
mgnt2GigmRadiusSecret = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 10, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmRadiusSecret.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmRadiusSecret.setDescription('Shared secret of the RADIUS server:This OID defines\n        the shared secret password of the RADIUS server for\n \tauthentication')
mgnt2GigmLdapHost = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 10, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmLdapHost.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2GigmLdapHost.setDescription('IP address of the LDAP host:This OID defines\n        the IP address of the external LDAP server for authentication')
mgnt2GigmLdapPort = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 10, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmLdapPort.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2GigmLdapPort.setDescription('TCP port number of the LDAP server:This OID defines\n        the TCP port number of the external LDAP server for\n \tauthentication')
mgnt2GigmLdapBase = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 10, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmLdapBase.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2GigmLdapBase.setDescription("LDAP base:This OID defines the name of the search \n        base of the LDAP server for\n \tauthentication<Help>LDAP base name spelled as follows:\n\t'ou=users,ou=network,dc=yourcompany,dc=net'")
mgnt2GigmLdapVersion = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 10, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmLdapVersion.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2GigmLdapVersion.setDescription('Protocol number in use by the LDAP server:This OID defines\n        the protocol version used by the external LDAP server for\n \tauthentication<Help>Protocol version used by the external LDAP\n\tserver for authentication')
mgnt2GigmLdapBindDn = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 10, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmLdapBindDn.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2GigmLdapBindDn.setDescription("LDAP Bind DN:This OID defines the login name used to connect \n        into the LDAP server base for\n \tauthentication<Help>LDAP binddn spelled as follows:\n\t'cn=ldap_admin,dc=yourcompany,dc=net'")
mgnt2GigmLdapBindPw = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 10, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmLdapBindPw.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2GigmLdapBindPw.setDescription('Credentials to bind the LDAP server with:This OID defines\n         the credentials to bind the LDAP server with for\n  \tauthentication<Help>Credentials for LDAP access (bindpw)')
mgnt2GigmLdapScope = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 10, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmLdapScope.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2GigmLdapScope.setDescription('Scope for LDAP base search:This OID defines\n        the search scope for an LDAP base search\n\t<Help>LDAP search scope')
mgnt2GigmLdapPamPasswd = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 10, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmLdapPamPasswd.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2GigmLdapPamPasswd.setDescription("PAM password handling:This OID defines\n        the way the PAM password is handled for LDAP authentication\n\t<Help>The 'pam_password' option sould be one of the following:\n\t'clear', 'crypt', 'md5', 'racf', 'exop'")
mgnt2GigmAuthenticationType = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 1, 10, 12), Mgnt2AuthTypeValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmAuthenticationType.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmAuthenticationType.setDescription('Authentication type in use')
mgnt2DwlUploadingTable = MibTable((1, 3, 6, 1, 4, 1, 20044, 7, 4, 1), )
if mibBuilder.loadTexts: mgnt2DwlUploadingTable.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2DwlUploadingTable.setDescription('SNMP Agent SW packages in ram: List of the SNMP\n              agent software packages available in /ram for\n              download on the Chassis managment module flash')
mgnt2DwlUploadingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20044, 7, 4, 1, 1), ).setIndexNames((0, "EKINOPS-MGNT2-MIB", "mgnt2IndexUpload"))
if mibBuilder.loadTexts: mgnt2DwlUploadingEntry.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2DwlUploadingEntry.setDescription('Row definition for the package uploading table')
mgnt2IndexUpload = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2IndexUpload.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2IndexUpload.setDescription('Index for uploading table')
mgnt2DwlUploadFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2DwlUploadFileName.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2DwlUploadFileName.setDescription('Package filename in RAM:This OID gives the name of\n              the SNMP agent software packages in RAM')
mgnt2ImmediateReplacement = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 1, 1, 3), EkiState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2ImmediateReplacement.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2ImmediateReplacement.setDescription('Immediat Agent Replacement:This OID indicates to\n              switch to selected SNMP agent immediately or after\n              reset of the MGNT2')
mgnt2FileUpload = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 1, 1, 4), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2FileUpload.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2FileUpload.setDescription('Agent File Upload:This OID validates the upload of\n              the SNMP agent from RAM to FLASH')
mgnt2DeletePackageFromRam = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 1, 1, 5), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2DeletePackageFromRam.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2DeletePackageFromRam.setDescription('Delete Package from RAM:This OID requests to delete\n              the SNMP Agent SW package from RAM')
mgnt2FlashingInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 1, 1, 6), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2FlashingInProgress.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2FlashingInProgress.setDescription('Flashing in Progress:This OID indicates whether there\n              is a file upload to FLASH in progress')
mgnt2DwlPackageTable = MibTable((1, 3, 6, 1, 4, 1, 20044, 7, 4, 2), )
if mibBuilder.loadTexts: mgnt2DwlPackageTable.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2DwlPackageTable.setDescription('List of SNMP agent software packages \n               present in flash memory')
mgnt2DwlPackageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20044, 7, 4, 2, 1), ).setIndexNames((0, "EKINOPS-MGNT2-MIB", "mgnt2IndexPackage"))
if mibBuilder.loadTexts: mgnt2DwlPackageEntry.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2DwlPackageEntry.setDescription('Row definition for the package management table')
mgnt2IndexPackage = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2IndexPackage.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2IndexPackage.setDescription('Index for package management table')
mgnt2DwlPackageFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2DwlPackageFileName.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2DwlPackageFileName.setDescription('Package File name in FLASH:This OID gives the name\n              of the SNMP agent software package in FLASH')
mgnt2ExtractedPack = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 2, 1, 3), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2ExtractedPack.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2ExtractedPack.setDescription('Extracted SNMP agent software pack.: Indicates\n              whether the package is currently extracted in the FLASH.\n              If it is, it must not be deleted')
mgnt2SwitchTo = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 2, 1, 4), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2SwitchTo.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2SwitchTo.setDescription('Switch to package:This OID activates the SNMP Agent\n              Software package')
mgnt2Immediate = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 2, 1, 5), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2Immediate.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2Immediate.setDescription('Immediate SNMP agent activation: This OID indicates\n              whether the package is scheduled for immediate\n              activation or activation will take place following the\n              next reset')
mgnt2DeletePackageFromFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 2, 1, 6), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2DeletePackageFromFlash.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2DeletePackageFromFlash.setDescription('Delete package from FLASH:This OID deletes the SNMP\n              agent software package from the FLASH')
mgnt2PackageExtractionInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 2, 1, 7), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2PackageExtractionInProgress.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2PackageExtractionInProgress.setDescription('Package extraction in progress:This OID indicates that\n              a SNMP agent software activation is in progress')
mgnt2DwlUploadingTableUpdate = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 4, 3), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2DwlUploadingTableUpdate.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2DwlUploadingTableUpdate.setDescription('Uploading Table update:This OID updates the contents of\n              the uploading table')
mgnt2LoadPMTable = MibTable((1, 3, 6, 1, 4, 1, 20044, 7, 4, 4), )
if mibBuilder.loadTexts: mgnt2LoadPMTable.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2LoadPMTable.setDescription('List of the PM module software files (GW/SW)\n              present on the repository')
mgnt2LoadPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20044, 7, 4, 4, 1), ).setIndexNames((0, "EKINOPS-MGNT2-MIB", "mgnt2LoadPMIndex"))
if mibBuilder.loadTexts: mgnt2LoadPMEntry.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2LoadPMEntry.setDescription('Row definition for the LOAD article table')
mgnt2LoadPMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2LoadPMIndex.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2LoadPMIndex.setDescription('Index for Load article table')
mgnt2LoadFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2LoadFileName.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2LoadFileName.setDescription('PM Upgrade filename:This OID gives the name of\n              the file')
mgnt2LoadFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 4, 1, 3), EkiLoadGWSW()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2LoadFileType.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2LoadFileType.setDescription('PM upgrade file type:This OID gives the type of\n              file (gateware or software)')
mgnt2LoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 4, 1, 4), EkiLoadState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2LoadState.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2LoadState.setDescription('PM upgrade status:This OID gives the status of the\n              selected Load file')
mgnt2LoadModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2LoadModuleNumber.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2LoadModuleNumber.setDescription('PM ugprade target:This OID defines the slot number\n              of the PM to upgrade')
mgnt2LoadResetMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 4, 1, 6), EkiLoadPermutMethod()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2LoadResetMethod.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2LoadResetMethod.setDescription('PM upgrade reset method:This OID defines the reset\n              method (manual, immediate or scheduled)')
mgnt2LoadResetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 4, 1, 7), EkiLoadPermutMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2LoadResetMode.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2LoadResetMode.setDescription('PM upgrade reset mode:This OID defines the type of\n              reset (cold or warm)')
mgnt2LoadBankNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2LoadBankNumber.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2LoadBankNumber.setDescription("PM upgrade bank number:This OID defines the target\n               bank number in the PM's flash")
mgnt2LoadDownloadProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2LoadDownloadProgress.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2LoadDownloadProgress.setDescription('PM upgrade progress:This OID gives the upgrade\n              progress (percentage)')
mgnt2LoadTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 4, 1, 10), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2LoadTransfer.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2LoadTransfer.setDescription("PM upgrade transfer:This OID launchs the transfer\n              of the associated file to the selected PM's flash")
mgnt2LoadDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 4, 1, 11), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2LoadDelete.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2LoadDelete.setDescription('PM upgrade delete file:This OID deletes the\n              associated file from the RAM of the management board')
mgnt2LoadPMTableUpdate = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 4, 5), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2LoadPMTableUpdate.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2LoadPMTableUpdate.setDescription('Load PM Table update:This OID updates the contents\n              of the Load table')
mgnt2DwlEkicraftPkgTable = MibTable((1, 3, 6, 1, 4, 1, 20044, 7, 4, 6), )
if mibBuilder.loadTexts: mgnt2DwlEkicraftPkgTable.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2DwlEkicraftPkgTable.setDescription('List of Ekicraft software packages \n               present in flash memory')
mgnt2DwlEkicraftPkgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20044, 7, 4, 6, 1), ).setIndexNames((0, "EKINOPS-MGNT2-MIB", "mgnt2IndexEkicraftPkg"))
if mibBuilder.loadTexts: mgnt2DwlEkicraftPkgEntry.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2DwlEkicraftPkgEntry.setDescription('Row definition for the package management table')
mgnt2IndexEkicraftPkg = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2IndexEkicraftPkg.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2IndexEkicraftPkg.setDescription('Index for Ekicraft package management table')
mgnt2DwlEkicraftPkgFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2DwlEkicraftPkgFileName.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2DwlEkicraftPkgFileName.setDescription('Package File name in FLASH:This OID gives the name\n              of the Ekicraft software package in FLASH')
mgnt2DwlEkicraftExtractedPack = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 6, 1, 3), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2DwlEkicraftExtractedPack.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2DwlEkicraftExtractedPack.setDescription('Extracted Ekicraft software pack.: Indicates\n              whether the package is currently extracted in the FLASH.\n              If it is, it must not be deleted')
mgnt2DwlEkicraftSwitchTo = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 6, 1, 4), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2DwlEkicraftSwitchTo.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2DwlEkicraftSwitchTo.setDescription('Switch to package:This OID activates the Ekicraft\n              Software package')
mgnt2DwlEkicraftImmediate = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 6, 1, 5), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2DwlEkicraftImmediate.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2DwlEkicraftImmediate.setDescription('Immediate Ekicraft activation: This OID indicates\n              whether the package is scheduled for immediate\n              activation or activation will take place following the\n              next reset')
mgnt2DeleteEkicraftPkgFromFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 6, 1, 6), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2DeleteEkicraftPkgFromFlash.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2DeleteEkicraftPkgFromFlash.setDescription('Delete package from FLASH:This OID deletes the Ekicraft\n              software package from the FLASH')
mgnt2EkicraftPkgExtractionInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 4, 6, 1, 7), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2EkicraftPkgExtractionInProgress.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2EkicraftPkgExtractionInProgress.setDescription('Package extraction in progress:This OID indicates that\n              an Ekicraft activation is in progress')
mgnt2CnfUploadConfigFilesTable = MibTable((1, 3, 6, 1, 4, 1, 20044, 7, 5, 1), )
if mibBuilder.loadTexts: mgnt2CnfUploadConfigFilesTable.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2CnfUploadConfigFilesTable.setDescription('List of configuration files uploaded to RAM')
mgnt2CnfUploadConfigFilesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20044, 7, 5, 1, 1), ).setIndexNames((0, "EKINOPS-MGNT2-MIB", "mgnt2CnfUploadConfigIndex"))
if mibBuilder.loadTexts: mgnt2CnfUploadConfigFilesEntry.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2CnfUploadConfigFilesEntry.setDescription('Row definition for the package uploading table')
mgnt2CnfUploadConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2CnfUploadConfigIndex.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2CnfUploadConfigIndex.setDescription('Index of config files')
mgnt2CnfConfigFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2CnfConfigFileName.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2CnfConfigFileName.setDescription('Configuration filename in RAM:This OID gives the\n              name of the configuration file in RAM')
mgnt2CnfConfigSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CnfConfigSlot.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2CnfConfigSlot.setDescription('Configuration target:This OID defines the target\n              slot number for the configuration file')
mgnt2CnfConfigUpload = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 5, 1, 1, 4), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CnfConfigUpload.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2CnfConfigUpload.setDescription('Configuration Upload:This OID uploads the\n              configuration file to the specified slot number\n              in the PM FLASH')
mgnt2CnfDeleteConfigFile = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 5, 1, 1, 5), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CnfDeleteConfigFile.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2CnfDeleteConfigFile.setDescription('Configuration delete from RAM:This OID deletes the\n              configuration file from RAM')
mgnt2CnfManageConfigFilesTable = MibTable((1, 3, 6, 1, 4, 1, 20044, 7, 5, 2), )
if mibBuilder.loadTexts: mgnt2CnfManageConfigFilesTable.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2CnfManageConfigFilesTable.setDescription('List of configuration files uploaded to RAM')
mgnt2CnfManageConfigFilesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20044, 7, 5, 2, 1), ).setIndexNames((0, "EKINOPS-MGNT2-MIB", "mgnt2CnfManageConfigIndex"))
if mibBuilder.loadTexts: mgnt2CnfManageConfigFilesEntry.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2CnfManageConfigFilesEntry.setDescription('Row definition for the package uploading table')
mgnt2CnfManageConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2CnfManageConfigIndex.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2CnfManageConfigIndex.setDescription('Index of config file slots')
mgnt2CnfManageConfigFileID = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 5, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CnfManageConfigFileID.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2CnfManageConfigFileID.setDescription('Configuration file ID in FLASH:This OID gives the\n              ID of the configuration file in MGNT2 FLASH')
mgnt2CnfManageConfigFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 5, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CnfManageConfigFileName.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2CnfManageConfigFileName.setDescription('Configuration file name in FLASH:This OID gives the\n              name of the configuration file in MGNT2 FLASH')
mgnt2CnfModuleSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CnfModuleSlotNumber.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2CnfModuleSlotNumber.setDescription('Configuration target:This OID defines the target\n              module slot number for the configuration file')
mgnt2CnfBackupConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 5, 2, 1, 5), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CnfBackupConfig.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2CnfBackupConfig.setDescription('Configuration backup:This OID backups the\n              configuration of the specified module to the\n              selected file in MGNT2 FLASH')
mgnt2CnfRestoreConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 5, 2, 1, 6), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CnfRestoreConfig.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2CnfRestoreConfig.setDescription('Configuration Restore:This OID restores the\n              configuration of the specified module from the\n              selected file in MGNT2 FLASH')
mgnt2CnfExportConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 5, 2, 1, 7), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CnfExportConfig.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2CnfExportConfig.setDescription('Configuration Export:This OID exports the selected\n              file in MGNT2 FLASH to a file in RAM')
mgnt2CnfDeleteConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 5, 2, 1, 8), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CnfDeleteConfig.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2CnfDeleteConfig.setDescription('Configuration delete from FLASH:This OID deletes the\n              configuration file from the MGNT2 FLASH')
mgnt2RinvHwPlatform = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 6, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2RinvHwPlatform.setStatus('current')
if mibBuilder.loadTexts: mgnt2RinvHwPlatform.setDescription('Chassis Hardware inventory:This OID gives the\n        Hardware inventory of the Mgnt2 management module')
mgnt2RinvSoftwarePackage = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 6, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2RinvSoftwarePackage.setStatus('current')
if mibBuilder.loadTexts: mgnt2RinvSoftwarePackage.setDescription('Chassis Software package inventory:this OID gives\n        the Software package inventory of the Mgnt2\n        management module')
mgnt2RinvGateware = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 6, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2RinvGateware.setStatus('current')
if mibBuilder.loadTexts: mgnt2RinvGateware.setDescription('Chassis Gateware inventory:This OID gives the\n        gateware inventory of the Mgnt2 management module')
mgnt2RinvAgent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 6, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2RinvAgent.setStatus('current')
if mibBuilder.loadTexts: mgnt2RinvAgent.setDescription('Chassis Software inventory:This OID gives the\n        software inventory of the Mgnt2 management module')
mgnt2RinvCraft = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 6, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2RinvCraft.setStatus('current')
if mibBuilder.loadTexts: mgnt2RinvCraft.setDescription('Chassis Craft inventory:This OID gives the\n        craft inventory of the Mgnt2 management module')
mgnt2RinvLinux = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 6, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2RinvLinux.setStatus('current')
if mibBuilder.loadTexts: mgnt2RinvLinux.setDescription('Chassis Linux inventory:This OID gives the\n        linux inventory of the Mgnt2 management module')
class EkiPlugInState(TextualConvention, Integer32):
    description = 'Plug-in state'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("absent", 0), ("loaded", 1), ("versionError", 2), ("symbolError", 3))

mgnt2GigmPlugInTable = MibTable((1, 3, 6, 1, 4, 1, 20044, 7, 6, 7), )
if mibBuilder.loadTexts: mgnt2GigmPlugInTable.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmPlugInTable.setDescription('List of Plug-ins present')
mgnt2GigmPlugInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20044, 7, 6, 7, 1), ).setIndexNames((0, "EKINOPS-MGNT2-MIB", "mgnt2IndexPlugIns"))
if mibBuilder.loadTexts: mgnt2GigmPlugInEntry.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmPlugInEntry.setDescription('Row Definition for the Plug-ins table')
mgnt2IndexPlugIns = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2IndexPlugIns.setStatus('current')
if mibBuilder.loadTexts: mgnt2IndexPlugIns.setDescription('Index for PMs table')
mgnt2PlugInRinv = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 6, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2PlugInRinv.setStatus('current')
if mibBuilder.loadTexts: mgnt2PlugInRinv.setDescription('Plug-in RI:This OID gives the remote inventory of the plug-in')
mgnt2PollingPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 6, 7, 1, 3), EkiPlugInState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2PollingPresent.setStatus('current')
if mibBuilder.loadTexts: mgnt2PollingPresent.setDescription('Polling present:This OID gives the presence of the polling plug-in')
mgnt2SnmpPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 6, 7, 1, 4), EkiPlugInState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2SnmpPresent.setStatus('current')
if mibBuilder.loadTexts: mgnt2SnmpPresent.setDescription('Snmp present:This OID gives the presence of the snmp plug-in')
mgnt2RinvBackpanel = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 6, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2RinvBackpanel.setStatus('current')
if mibBuilder.loadTexts: mgnt2RinvBackpanel.setDescription('Backpanel inventory:This OID gives the\n        Backpanel inventory of the chassis')
mgnt2RinvFan = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 6, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2RinvFan.setStatus('current')
if mibBuilder.loadTexts: mgnt2RinvFan.setDescription('Fan inventory:This OID gives the\n        fan inventory of the chassis')
mgnt2RinvUboot = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 6, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2RinvUboot.setStatus('current')
if mibBuilder.loadTexts: mgnt2RinvUboot.setDescription('U-Boot inventory:This OID gives the\n        U-Boot inventory')
mgnt2GigmErrorCounterTable = MibTable((1, 3, 6, 1, 4, 1, 20044, 7, 7, 1), )
if mibBuilder.loadTexts: mgnt2GigmErrorCounterTable.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmErrorCounterTable.setDescription('List of error counters')
mgnt2GigmErrorCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20044, 7, 7, 1, 1), ).setIndexNames((0, "EKINOPS-MGNT2-MIB", "mgnt2IndexErrorCounter"))
if mibBuilder.loadTexts: mgnt2GigmErrorCounterEntry.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmErrorCounterEntry.setDescription('Row Definition for the error counters table')
mgnt2IndexErrorCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2IndexErrorCounter.setStatus('current')
if mibBuilder.loadTexts: mgnt2IndexErrorCounter.setDescription('Index for error counters table')
mgnt2ErrorCounterSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2ErrorCounterSlotNumber.setStatus('current')
if mibBuilder.loadTexts: mgnt2ErrorCounterSlotNumber.setDescription('Slot number:This OID gives the slot number for the corresponding counter')
mgnt2ErrorCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2ErrorCounterValue.setStatus('current')
if mibBuilder.loadTexts: mgnt2ErrorCounterValue.setDescription('Count value:This OID gives the value of the error counter')
mgnt2GigmResetErrorCounters = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 7, 2), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmResetErrorCounters.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmResetErrorCounters.setDescription('Reset error counters:This OID reset the error counters to 0')
mgnt2PerfCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 20044, 7, 8, 1), )
if mibBuilder.loadTexts: mgnt2PerfCapabilityTable.setStatus('current')
if mibBuilder.loadTexts: mgnt2PerfCapabilityTable.setDescription('List of Perf capability of PMs plugged in the Chassis')
mgnt2PerfCapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20044, 7, 8, 1, 1), ).setIndexNames((0, "EKINOPS-MGNT2-MIB", "mgnt2PerfCapIndexBoards"))
if mibBuilder.loadTexts: mgnt2PerfCapabilityEntry.setStatus('current')
if mibBuilder.loadTexts: mgnt2PerfCapabilityEntry.setDescription('Row Definition for the Perf capability table')
mgnt2PerfCapIndexBoards = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2PerfCapIndexBoards.setStatus('current')
if mibBuilder.loadTexts: mgnt2PerfCapIndexBoards.setDescription('Index for Perf cap table')
mgnt2PerfCapPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2PerfCapPosition.setStatus('current')
if mibBuilder.loadTexts: mgnt2PerfCapPosition.setDescription('PM Slot number:This OID gives the slot number in\n              which the PM is plugged')
mgnt2PerfCapName = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 8, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2PerfCapName.setStatus('current')
if mibBuilder.loadTexts: mgnt2PerfCapName.setDescription('PM name:This OID gives the name of the PM plugged\n              in the Mgnt2')
mgnt2PerfCapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 8, 1, 1, 4), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2PerfCapStatus.setStatus('current')
if mibBuilder.loadTexts: mgnt2PerfCapStatus.setDescription('Status of the perf cap:This OID gives the capability\n              of the pm to do performance')
mgnt2PerfCapOidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 7, 8, 1, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2PerfCapOidEnable.setStatus('current')
if mibBuilder.loadTexts: mgnt2PerfCapOidEnable.setDescription('OID of the object perf enable:This OID gives the OID of \n               the perf enable object of the correspondind mib of the module')
mgnt2GigmPerf15minSync = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 8, 2), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmPerf15minSync.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmPerf15minSync.setDescription('15 min sync perf : this oid send a 15min sync to all modules')
mgnt2GigmPerf24hSync = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 8, 3), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2GigmPerf24hSync.setStatus('current')
if mibBuilder.loadTexts: mgnt2GigmPerf24hSync.setDescription('15 min sync perf : this oid send a 24h sync to all modules')
mgnt2PerfResyncNMS = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 8, 4), Mgnt2PerfResyncValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2PerfResyncNMS.setStatus('current')
if mibBuilder.loadTexts: mgnt2PerfResyncNMS.setDescription('Resync Perf : this oid allows to create an historical perf file for all modules')
mgnt2alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1))
mgnt2controls = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 2))
mgnt2config = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3))
mgnt2AlmsynthAlm0 = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 0))
mgnt2AlmMgntDefFuseB = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 0, 16), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmMgntDefFuseB.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmMgntDefFuseB.setDescription('\n        Mgnt Fuse B Fail :This OID indicates \n        that the fuse of the power input \n        B is in fail condition on the Management \n        board  <Help>  Status of the MGNT \n        Fuse B <Condtype> MGNT_DEF_FUSE_B \n        <Probcause> powerProblem (36) <Alarmtype> \n        equipmentAlarm (5) <Polarity> (2)\n        ')
mgnt2AlmMgntDefFuseA = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 0, 15), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmMgntDefFuseA.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmMgntDefFuseA.setDescription('\n        Mgnt Fuse A Fail :This OID indicates \n        that the fuse of the power input \n        A is in fail condition on the Management \n        board  <Help>  Status of the MGNT \n        Fuse A <Condtype> MGNT_DEF_FUSE_A \n        <Probcause> powerProblem (36) <Alarmtype> \n        equipmentAlarm (5) <Polarity> (2)\n        ')
mgnt2AlmDef48b = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 0, 12), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmDef48b.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmDef48b.setDescription('\n        Power Input B Present :This OID \n        indicates that there is not input \n        power on the right power connector \n        (B)  <Help>  This alarm indicates \n        if the power input B is present \n        (right power connector) <Condtype> \n        DEF_48B <Probcause> powerProblem \n        (36) <Alarmtype> equipmentAlarm \n        (5) <Polarity> (2) \n        ')
mgnt2AlmDef48a = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 0, 11), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmDef48a.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmDef48a.setDescription('\n        Power Input A Present :This OID \n        indicates that there is not input \n        power on the right power connector \n        (A)  <Help>  This alarm indicates \n        if the power input B is present \n        (left power connector) <Condtype> \n        DEF_48A <Probcause> powerProblem \n        (36) <Alarmtype> equipmentAlarm \n        (5) <Polarity> (2) \n        ')
mgnt2AlmFansFailure = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 0, 10), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmFansFailure.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmFansFailure.setDescription('\n        Chassis Fan Module Failure :This \n        OID indicates that at least one \n        of the three FAN unit of the FAN \n        module is in fail condition <Condtype> \n        FANS_FAILURE <Probcause> other(1) \n        <Alarmtype> equipmentAlarm (5)\n         <Polarity> (2) \n        ')
mgnt2AlmAbsFailure = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 0, 9), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmAbsFailure.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmAbsFailure.setDescription('\n        Chassis Management Module Failure \n        :This OID indicates that the Chassis \n        Management module is in fail condition \n        <Condtype> ABS_FAILURE <Probcause> \n        other(1) <Alarmtype> equipmentAlarm \n        (5) <Polarity> (2) \n        ')
mgnt2AlmsynthAlm1 = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 1))
mgnt2AlmAcknowledge = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 1, 16), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmAcknowledge.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmAcknowledge.setDescription('\n        Alarm Ack.  :This OID indicates \n        the alarms have been acknowledged \n        by the user (locally or remotely) \n          <Help>  This status indicates \n        the alarms have been acknowledged \n        by the user (locally or remotely) \n        <Condtype> ACKNOWLEDGE <Probcause> \n        other(1) <Alarmtype> other (1)\n         <Polarity> (2) \n        ')
mgnt2AlmCritVisual = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 1, 3), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmCritVisual.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmCritVisual.setDescription('\n        Critical Chassis Alarm :This OID \n        indicates at least one Critical \n        alarm is active on the complete \n        chassis (including TR-FAN, MGNT \n        and PM)  <Help>  This alarm indicates \n        at least one Critical alarm is\n         active on the complete chassis \n        (including TR-FAN, MGNT and PM)\n \n        <Condtype> CRIT_VISUAL <Probcause> \n        other(1) <Alarmtype> other (1)\n         <Polarity> (2) \n        ')
mgnt2AlmUrgVisual = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 1, 2), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmUrgVisual.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmUrgVisual.setDescription('\n        Major Chassis Alarm  :This OID \n        indicates at least one Major alarm \n        is active on the complete chassis \n        (including TR-FAN, MGNT and PM) \n          <Help>  This alarm indicates\n         at least one Major alarm is active \n        on the complete chassis (including \n        TR-FAN, MGNT and PM) <Condtype> \n        URG_VISUAL <Probcause> other(1) \n        <Alarmtype> other (1) <Polarity> \n        (2) \n        ')
mgnt2AlmNurgVisual = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 1, 1), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmNurgVisual.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmNurgVisual.setDescription('\n        Minor Chassis Alarm  :This OID \n        indicates at least one Minor alarm \n        is active on the complete chassis \n        (including TR-FAN, MGNT and PM) \n         <Help>  This alarm indicates at \n        least one Minor alarm is active \n        on the complete chassis (including \n        TR-FAN, MGNT and PM) <Condtype> \n        NURG_VISUAL <Probcause> other(1) \n        <Alarmtype> other (1) <Polarity> \n        (2) \n        ')
mgnt2AlmboardMgmntSet1 = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 16))
mgnt2AlmPmFanAbsent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 16, 14), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPmFanAbsent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPmFanAbsent.setDescription('\n        FAN module present in Chassis\n         :This OID indicates the presence \n        of the FAN module in the Chassis. \n         <Help>  This alarm indicates if \n        the FAN module is detected in the \n        chassis. <Condtype> PM_FAN_ABSENT \n        <Probcause> other(1) <Alarmtype> \n        equipmentAlarm (5)  <Polarity>\n         (2) \n        ')
mgnt2AlmPmSlot11Absent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 16, 12), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPmSlot11Absent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPmSlot11Absent.setDescription('\n        PM present in Chassis slot 11\n         :This OID indicates the presence \n        of a PM in Slot 11 of the Chassis \n        .  <Help>  This status indicates \n        if a PM is detected in slot 11\n         <Condtype> PM_SLOT11_ABSENT <Probcause> \n        other(1) <Alarmtype> other (1)\n         <Polarity> (2) \n        ')
mgnt2AlmPmSlot10Absent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 16, 11), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPmSlot10Absent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPmSlot10Absent.setDescription('\n        PM present in Chassis slot 10\n         :This OID indicates the presence \n        of a PM in Slot 10 of the Chassis \n        .  <Help>  This status indicates \n        if a PM is detected in slot 10\n         <Condtype> PM_SLOT10_ABSENT <Probcause> \n        other(1) <Alarmtype> other (1)\n         <Polarity> (2) \n        ')
mgnt2AlmPmSlot9Absent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 16, 10), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPmSlot9Absent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPmSlot9Absent.setDescription('\n        PM present in Chassis slot 9 :This \n        OID indicates the presence of a \n        PM in Slot 9 of the Chassis . \n         <Help>  This status indicates\n         if a PM is detected in slot 9\n         <Condtype> PM_SLOT9_ABSENT <Probcause> \n        other(1) <Alarmtype> other (1)\n         <Polarity> (2) \n        ')
mgnt2AlmPmSlot8Absent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 16, 9), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPmSlot8Absent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPmSlot8Absent.setDescription('\n        PM present in Chassis slot 8 :This \n        OID indicates the presence of a \n        PM in Slot 8 of the Chassis . \n         <Help>  This status indicates\n         if a PM is detected in slot 8\n         <Condtype> PM_SLOT8_ABSENT <Probcause> \n        other(1) <Alarmtype> other (1)\n         <Polarity> (2) \n        ')
mgnt2AlmPmSlot7Absent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 16, 8), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPmSlot7Absent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPmSlot7Absent.setDescription('\n        PM present in Chassis slot 7 :This \n        OID indicates the presence of a \n        PM in Slot 7 of the Chassis . \n         <Help>  This status indicates\n         if a PM is detected in slot 7\n         <Condtype> PM_SLOT7_ABSENT <Probcause> \n        other(1) <Alarmtype> other (1)\n         <Polarity> (2) \n        ')
mgnt2AlmPmSlot6Absent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 16, 7), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPmSlot6Absent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPmSlot6Absent.setDescription('\n        PM present in Chassis slot 6 :This \n        OID indicates the presence of a \n        PM in Slot 6 of the Chassis . \n         <Help>  This status indicates\n         if a PM is detected in slot 6\n         <Condtype> PM_SLOT6_ABSENT <Probcause> \n        other(1) <Alarmtype> other (1)\n         <Polarity> (2) \n        ')
mgnt2AlmPmSlot5Absent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 16, 6), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPmSlot5Absent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPmSlot5Absent.setDescription('\n        PM present in Chassis slot 5 :This \n        OID indicates the presence of a \n        PM in Slot 5 of the Chassis . \n         <Help>  This status indicates\n         if a PM is detected in slot 5\n         <Condtype> PM_SLOT5_ABSENT <Probcause> \n        other(1) <Alarmtype> other (1)\n         <Polarity> (2) \n        ')
mgnt2AlmPmSlot4Absent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 16, 5), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPmSlot4Absent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPmSlot4Absent.setDescription('\n        PM present in Chassis slot 4 :This \n        OID indicates the presence of a \n        PM in Slot 4 of the Chassis . \n         <Help>  This status indicates\n         if a PM is detected in slot 4\n         <Condtype> PM_SLOT4_ABSENT <Probcause> \n        other(1) <Alarmtype> other (1)\n         <Polarity> (2) \n        ')
mgnt2AlmPmSlot3Absent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 16, 4), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPmSlot3Absent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPmSlot3Absent.setDescription('\n        PM present in Chassis slot 3 :This \n        OID indicates the presence of a \n        PM in Slot 3 of the Chassis . \n         <Help>  This status indicates\n         if a PM is detected in slot 3\n         <Condtype> PM_SLOT3_ABSENT <Probcause> \n        other(1) <Alarmtype> other (1)\n         <Polarity> (2) \n        ')
mgnt2AlmPmSlot2Absent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 16, 3), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPmSlot2Absent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPmSlot2Absent.setDescription('\n        PM present in Chassis slot 2 :This \n        OID indicates the presence of a \n        PM in Slot 2 of the Chassis . \n         <Help>  This status indicates\n         if a PM is detected in slot 2\n         <Condtype> PM_SLOT2_ABSENT <Probcause> \n        other(1) <Alarmtype> other (1)\n         <Polarity> (2) \n        ')
mgnt2AlmPmSlot1Absent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 16, 2), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPmSlot1Absent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPmSlot1Absent.setDescription('\n        PM present in Chassis slot 1 :This \n        OID indicates the presence of a \n        PM in Slot 1 of the Chassis . \n         <Help>  This status indicates\n         if a PM is detected in slot 1\n         <Condtype> PM_SLOT1_ABSENT <Probcause> \n        other(1) <Alarmtype> other (1)\n         <Polarity> (2) \n        ')
mgnt2AlmboardMgmntSet2 = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 17))
mgnt2AlmPmSlot20Absent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 17, 9), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPmSlot20Absent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPmSlot20Absent.setDescription('\n        PM present in Chassis slot 20\n         :This OID indicates the presence \n        of a PM in Slot 20 of the Chassis \n        .  <Help>  This status indicates \n        if a PM is detected in slot 20\n         <Condtype> PM_SLOT20_ABSENT <Probcause> \n        other(1) <Alarmtype> other (1)\n         <Polarity> (2) \n        ')
mgnt2AlmPmSlot19Absent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 17, 8), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPmSlot19Absent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPmSlot19Absent.setDescription('\n        PM present in Chassis slot 19\n         :This OID indicates the presence \n        of a PM in Slot 19 of the Chassis \n        .  <Help>  This status indicates \n        if a PM is detected in slot 19\n         <Condtype> PM_SLOT19_ABSENT <Probcause> \n        other(1) <Alarmtype> other (1)\n         <Polarity> (2) \n        ')
mgnt2AlmPmSlot18Absent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 17, 7), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPmSlot18Absent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPmSlot18Absent.setDescription('\n        PM present in Chassis slot 18\n         :This OID indicates the presence \n        of a PM in Slot 18 of the Chassis \n        .  <Help>  This status indicates \n        if a PM is detected in slot 18\n         <Condtype> PM_SLOT18_ABSENT <Probcause> \n        other(1) <Alarmtype> other (1)\n         <Polarity> (2) \n        ')
mgnt2AlmPmSlot17Absent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 17, 6), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPmSlot17Absent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPmSlot17Absent.setDescription('\n        PM present in Chassis slot 17\n         :This OID indicates the presence \n        of a PM in Slot 17 of the Chassis \n        .  <Help>  This status indicates \n        if a PM is detected in slot 17\n         <Condtype> PM_SLOT17_ABSENT <Probcause> \n        other(1) <Alarmtype> other (1)\n         <Polarity> (2) \n        ')
mgnt2AlmPmSlot16Absent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 17, 5), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPmSlot16Absent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPmSlot16Absent.setDescription('\n        PM present in Chassis slot 16\n         :This OID indicates the presence \n        of a PM in Slot 16 of the Chassis \n        .  <Help>  This status indicates \n        if a PM is detected in slot 16\n         <Condtype> PM_SLOT16_ABSENT <Probcause> \n        other(1) <Alarmtype> other (1)\n         <Polarity> (2) \n        ')
mgnt2AlmPmSlot15Absent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 17, 4), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPmSlot15Absent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPmSlot15Absent.setDescription('\n        PM present in Chassis slot 15\n         :This OID indicates the presence \n        of a PM in Slot 15 of the Chassis \n        .  <Help>  This status indicates \n        if a PM is detected in slot 15\n         <Condtype> PM_SLOT15_ABSENT <Probcause> \n        other(1) <Alarmtype> other (1)\n         <Polarity> (2) \n        ')
mgnt2AlmPmSlot14Absent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 17, 3), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPmSlot14Absent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPmSlot14Absent.setDescription('\n        PM present in Chassis slot 14\n         :This OID indicates the presence \n        of a PM in Slot 14 of the Chassis \n        .  <Help>  This status indicates \n        if a PM is detected in slot 14\n         <Condtype> PM_SLOT14_ABSENT <Probcause> \n        other(1) <Alarmtype> other (1)\n         <Polarity> (2) \n        ')
mgnt2AlmPmSlot13Absent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 17, 2), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPmSlot13Absent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPmSlot13Absent.setDescription('\n        PM present in Chassis slot 13\n         :This OID indicates the presence \n        of a PM in Slot 13 of the Chassis \n        .  <Help>  This status indicates \n        if a PM is detected in slot 13\n         <Condtype> PM_SLOT13_ABSENT <Probcause> \n        other(1) <Alarmtype> other (1)\n         <Polarity> (2) \n        ')
mgnt2AlmPmSlot12Absent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 17, 1), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPmSlot12Absent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPmSlot12Absent.setDescription('\n        PM present in Chassis slot 12\n         :This OID indicates the presence \n        of a PM in Slot 12 of the Chassis \n        .  <Help>  This status indicates \n        if a PM is detected in slot 12\n         <Condtype> PM_SLOT12_ABSENT <Probcause> \n        other(1) <Alarmtype> other (1)\n         <Polarity> (2) \n        ')
mgnt2AlmfanMgmnt = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 20))
mgnt2AlmFanFilterAbsent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 20, 16), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmFanFilterAbsent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmFanFilterAbsent.setDescription('\n        Dust Filter Presence :This OID \n        indicates that the dust filter\n         is not present<Help>  This alarm \n        indicates if the Dust Filter is \n        detected in the chassis. <Condtype> \n        FAN_FILTER_ABSENT <Probcause> other(1) \n        <Alarmtype> equipmentAlarm (5)\n         <Polarity> (2) \n        ')
mgnt2AlmPbFan6Fail = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 20, 7), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPbFan6Fail.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPbFan6Fail.setDescription('\n        Fan Unit #6 Failed On Fan Module \n        :This OID indicates a failure on \n        fan 6. Removal of the fan unit\n         or no rotation sets the OID. \n         <Help>  This alarm indicates if \n        the FAN #6 is in fail condition \n        <Condtype> PB_FAN6_FAIL <Probcause> \n        heatingVentCoolingSystemProblem \n        (22) <Alarmtype> equipmentAlarm \n        (5) <Polarity> (2) \n        ')
mgnt2AlmPbFan5Fail = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 20, 6), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPbFan5Fail.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPbFan5Fail.setDescription('\n        Fan Unit #5 Failed On Fan Module \n        :This OID indicates a failure on \n        fan 5. Removal of the fan unit\n         or no rotation sets the OID. \n         <Help>  This alarm indicates if \n        the FAN #5 is in fail condition \n        <Condtype> PB_FAN5_FAIL <Probcause> \n        heatingVentCoolingSystemProblem \n        (22) <Alarmtype> equipmentAlarm \n        (5) <Polarity> (2) \n        ')
mgnt2AlmPbFan4Fail = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 20, 5), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPbFan4Fail.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPbFan4Fail.setDescription('\n        Fan Unit #4 Failed On Fan Module \n        :This OID indicates a failure on \n        fan 4. Removal of the fan unit\n         or no rotation sets the OID. \n         <Help>  This alarm indicates if \n        the FAN #4 is in fail condition \n        <Condtype> PB_FAN4_FAIL <Probcause> \n        heatingVentCoolingSystemProblem \n        (22) <Alarmtype> equipmentAlarm \n        (5) <Polarity> (2) \n        ')
mgnt2AlmPbFan3Fail = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 20, 4), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPbFan3Fail.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPbFan3Fail.setDescription('\n        Fan Unit #3 Failed On Fan Module \n        :This OID indicates a failure on \n        fan 3. Removal of the fan unit\n         or no rotation sets the OID. \n         <Help>  This alarm indicates if \n        the FAN #3 is in fail condition \n        <Condtype> PB_FAN3_FAIL <Probcause> \n        heatingVentCoolingSystemProblem \n        (22) <Alarmtype> equipmentAlarm \n        (5) <Polarity> (2) \n        ')
mgnt2AlmPbFan2Fail = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 20, 3), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPbFan2Fail.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPbFan2Fail.setDescription('\n        Fan Unit #2 Failed On Fan Module \n        :This OID indicates a failure on \n        fan 2. Removal of the fan unit\n         or no rotation sets the OID. \n         <Help>  This alarm indicates if \n        the FAN #2 is in fail condition \n        <Condtype> PB_FAN2_FAIL <Probcause> \n        heatingVentCoolingSystemProblem \n        (22) <Alarmtype> equipmentAlarm \n        (5) <Polarity> (2) \n        ')
mgnt2AlmPbFan1Fail = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 20, 2), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPbFan1Fail.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPbFan1Fail.setDescription('\n        Fan Unit #1 Failed On Fan Module \n        :This OID indicates a failure on \n        fan 1. Removal of the fan unit\n         or no rotation sets the OID. \n         <Help>  This alarm indicates if \n        the FAN #1 is in fail condition \n        <Condtype> PB_FAN1_FAIL <Probcause> \n        heatingVentCoolingSystemProblem \n        (22) <Alarmtype> equipmentAlarm \n        (5) <Polarity> (2) \n        ')
mgnt2AlmfanPwrMgmnt = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 24))
mgnt2AlmFanDefFuseB = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 24, 16), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmFanDefFuseB.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmFanDefFuseB.setDescription('\n        Fan Fuse B Fail :This OID indicates \n        that the fuse of the power input \n        B is in fail condition on the Fan \n        board  <Help>  Status of the FAN \n        Fuse B <Condtype> FAN_DEF_FUSE_B \n        <Probcause> powerProblem (36) <Alarmtype> \n        equipmentAlarm (5) <Polarity> (2)\n        ')
mgnt2AlmFanDefFuseA = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 24, 15), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmFanDefFuseA.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmFanDefFuseA.setDescription('\n        Fan Fuse A Fail :This OID indicates \n        that the fuse of the power input \n        A is in fail condition on the Fan \n        board  <Help>  Status of the FAN \n        Fuse A <Condtype> FAN_DEF_FUSE_A \n        <Probcause> powerProblem (36) <Alarmtype> \n        equipmentAlarm (5) <Polarity> (2)\n        ')
mgnt2AlmFanPwrFail1 = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 24, 13), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmFanPwrFail1.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmFanPwrFail1.setDescription('\n        Fan Main Power :This OID indicates \n        a failure on the main power of\n          the FAN module  <Help>  This\n         alarm indicates if one of the\n         tow main power convert of the\n         FAN module is in fail condition \n        <Condtype> FAN_PWR_FAIL_1 <Probcause> \n        powerProblem (36) <Alarmtype> equipmentAlarm \n        (5) <Polarity> (2) \n        ')
mgnt2AlmFanPwrProtOn = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 24, 12), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmFanPwrProtOn.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmFanPwrProtOn.setDescription('\n        Fan Backup Power :This OID indicates \n        the backup power on the FAN module \n        is switched on <Condtype> FAN_PWR_PROT_ON \n        <Probcause> powerProblem (36) <Alarmtype> \n        equipmentAlarm (5) <Polarity> (2)\n        ')
mgnt2AlmremoveablefanModuleFail = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 25))
mgnt2AlmFan4ModuleAbsent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 25, 4), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmFan4ModuleAbsent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmFan4ModuleAbsent.setDescription('\n        FAN Module #4 Present In Chassis \n        :This OID indicates the presence \n        of the FAN module #4 in the Chassis.<Help> \n         This alarm indicates if the FAN \n        module #4 is detected in the chassis. \n        <Condtype> FAN4_MODULE_ABSENT <Probcause> \n        other(1) <Alarmtype> equipmentAlarm \n        (5)  <Polarity> (2) \n        ')
mgnt2AlmFan3ModuleAbsent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 25, 3), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmFan3ModuleAbsent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmFan3ModuleAbsent.setDescription('\n        FAN Module #3 Present In Chassis \n        :This OID indicates the presence \n        of the FAN module #3 in the Chassis.<Help> \n         This alarm indicates if the FAN \n        module #3 is detected in the chassis. \n        <Condtype> FAN3_MODULE_ABSENT <Probcause> \n        other(1) <Alarmtype> equipmentAlarm \n        (5)  <Polarity> (2) \n        ')
mgnt2AlmFan2ModuleAbsent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 25, 2), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmFan2ModuleAbsent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmFan2ModuleAbsent.setDescription('\n        FAN Module #2 Present In Chassis \n        :This OID indicates the presence \n        of the FAN module #2 in the Chassis.<Help> \n         This alarm indicates if the FAN \n        module #2 is detected in the chassis. \n        <Condtype> FAN2_MODULE_ABSENT <Probcause> \n        other(1) <Alarmtype> equipmentAlarm \n        (5)  <Polarity> (2) \n        ')
mgnt2AlmFan1ModuleAbsent = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 25, 1), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmFan1ModuleAbsent.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmFan1ModuleAbsent.setDescription('\n        FAN Module #1 Present In Chassis \n        :This OID indicates the presence \n        of the FAN module #1 in the Chassis.<Help> \n         This alarm indicates if the FAN \n        module #1 is detected in the chassis. \n        <Condtype> FAN1_MODULE_ABSENT <Probcause> \n        other(1) <Alarmtype> equipmentAlarm \n        (5)  <Polarity> (2) \n        ')
mgnt2AlmremoveableFanModuleMgmnt = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 26))
mgnt2AlmFan4ModuleFail = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 26, 4), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmFan4ModuleFail.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmFan4ModuleFail.setDescription('\n        FAN Module #4 Failure :This OID \n        indicates a failure on FAN module \n        #4 <Help>  This alarm indicates \n        if the FAN module #4 is in fail \n        condition <Condtype> FAN4_MODULE_FAIL \n        <Probcause> heatingVentCoolingSystemProblem \n        (22) <Alarmtype> equipmentAlarm \n        (5) <Polarity> (2) \n        ')
mgnt2AlmFan3ModuleFail = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 26, 3), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmFan3ModuleFail.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmFan3ModuleFail.setDescription('\n        FAN Module #3 Failure :This OID \n        indicates a failure on FAN module \n        #3 <Help>  This alarm indicates \n        if the FAN module #3 is in fail \n        condition <Condtype> FAN3_MODULE_FAIL \n        <Probcause> heatingVentCoolingSystemProblem \n        (22) <Alarmtype> equipmentAlarm \n        (5) <Polarity> (2) \n        ')
mgnt2AlmFan2ModuleFail = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 26, 2), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmFan2ModuleFail.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmFan2ModuleFail.setDescription('\n        FAN Module #2 Failure :This OID \n        indicates a failure on FAN module \n        #2 <Help>  This alarm indicates \n        if the FAN module #2 is in fail \n        condition <Condtype> FAN2_MODULE_FAIL \n        <Probcause> heatingVentCoolingSystemProblem \n        (22) <Alarmtype> equipmentAlarm \n        (5) <Polarity> (2) \n        ')
mgnt2AlmFan1ModuleFail = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 26, 1), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmFan1ModuleFail.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmFan1ModuleFail.setDescription('\n        FAN Module #1 Failure :This OID \n        indicates a failure on FAN module \n        #1 <Help>  This alarm indicates \n        if the FAN module #1 is in fail \n        condition <Condtype> FAN1_MODULE_FAIL \n        <Probcause> heatingVentCoolingSystemProblem \n        (22) <Alarmtype> equipmentAlarm \n        (5) <Polarity> (2) \n        ')
mgnt2AlmswAlarm1 = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 32))
mgnt2AlmPollingManagerError = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 32, 3), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmPollingManagerError.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmPollingManagerError.setDescription("\n        Polling Manager fail :This OID \n        indicates a failure on the Manager \n        polling the PM's     <Help>   \n         <Help>  This alarm indicates if \n        there is a polling manager failure \n        between the MGNT and the Pm's <Condtype> \n        POLLING_MANAGER_ERROR <Probcause> \n        adapterError (2) <Alarmtype> equipmentAlarm \n        (5) <Polarity> (2) \n        ")
mgnt2AlmFifoCmdError = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 32, 2), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmFifoCmdError.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmFifoCmdError.setDescription('\n        SNMP Agent to Transport comm FIFO \n        fail :This OID indicates a failure \n        inside the FIFO stack. The FIFO \n        containing     the messages from \n        the agent (write) to the PMs is \n        full      <Help>  This alarm indicates \n        if there is a communication mismatch \n        between the MGNT board and all\n         PM <Condtype> FIFO_CMD_ERROR <Probcause> \n        adapterError (2) <Alarmtype> equipmentAlarm \n        (5) <Polarity> (2) \n        ')
mgnt2AlmApiError = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 32, 1), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmApiError.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmApiError.setDescription('\n        Comm fail between Agent and Transport \n        :This OID indicates a failure detected \n        on the Agent.The failure    is\n         located on a communication process \n        with the modules.     <Help>  This \n        alarm indicates if there is a communication \n        mismatch between the MGNT board \n        and a single PM <Condtype> API_ERROR \n        <Probcause> adapterError (2) <Alarmtype> \n        equipmentAlarm (5) <Polarity> (2)\n        ')
mgnt2AlmapiErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmapiErrorCode.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmapiErrorCode.setDescription('\n        API Error Identification :Error \n        number and description of the abs1AlmApiError \n        object <Condtype> API_ERROR_CODE_1 \n        <Probcause>  <Alarmtype>\n        ')
mgnt2AlmlogMgmnt = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 34))
mgnt2AlmLog80Full = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 34, 2), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmLog80Full.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmLog80Full.setDescription('\n        Log File Full Warning :This OID \n        indicates that a log file is 80% \n        full.  <Help>  This alarm indicates \n        that one of the log file is 80% \n        Full <Condtype> LOG_80_FULL <Probcause> \n        fileError (18) <Alarmtype> equipmentAlarm \n        (5) <Polarity> (2) \n        ')
mgnt2AlmLogFileFull = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 34, 1), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmLogFileFull.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmLogFileFull.setDescription('\n        Log File Full Alarm :This OID\n         indicates that a log file is full. \n        This file must be cleared to insure \n        correct log function  <Help>  This \n        alarm indicates that one of the \n        log file is Full <Condtype> LOG_FILE_FULL \n        <Probcause> fileError (18) <Alarmtype> \n        equipmentAlarm (5) <Polarity> (2)\n        ')
mgnt2AlmntpSyncLoss = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 35))
mgnt2AlmCpuTempOverRange = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 35, 2), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmCpuTempOverRange.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmCpuTempOverRange.setDescription('\n        CPU HighTemperature Warning :This \n        OID indicates a temperature over \n        the expected range on the CPU<Help> \n         This warning indicates that the \n        temperature of the CPU is reaching \n        its internal limit <Condtype> CPU_TEMP_OVER_RANGE \n        <Probcause> other(1) <Alarmtype> \n        equipmentAlarm (5) <Polarity> (2)\n        ')
mgnt2AlmNtpSyncLoss = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 1, 35, 1), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmNtpSyncLoss.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmNtpSyncLoss.setDescription('\n        NTP Sync Loss  :This OID indicates \n        a loss of synchronisation with\n         the NTP Server.  <Help>  This\n         alarm indicates a loss of synchronisation \n        with the NTP Server. <Condtype> \n        NTP_SYNC_LOSS <Probcause> timingProblem \n        (53) <Alarmtype> timeDomainViolation \n        (11) <Polarity> (2) \n        ')
mgnt2Ctrlsynth5 = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 2, 5))
mgnt2CtrlChassisColdReset = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 2, 5, 4), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CtrlChassisColdReset.setStatus('current')
if mibBuilder.loadTexts: mgnt2CtrlChassisColdReset.setDescription("\n        Cold Reset of the Management Module \n        :This oid triggers a 'cold' reset \n        of the Chassis . This type of reset \n        is not traffic affecting and the \n        modules configuration  remains\n         unchanged.   <Help>  This control \n        initiates a cold reset of the MGNT \n        board,\n        ")
mgnt2CtrlChassisWarmReset = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 2, 5, 3), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CtrlChassisWarmReset.setStatus('current')
if mibBuilder.loadTexts: mgnt2CtrlChassisWarmReset.setDescription("\n        Reset of the Management Module \n        :This oid triggers a 'warm' reset \n        of the Chassis . This type of reset \n        is not traffic affecting and the \n        modules configuration  remains\n         unchanged.   <Help>  This control \n        initiates a warm reset of the MGNT \n        board,\n        ")
mgnt2CtrlChassisShutdown = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 2, 5, 2), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CtrlChassisShutdown.setStatus('current')
if mibBuilder.loadTexts: mgnt2CtrlChassisShutdown.setDescription('\n        Shut Down of the Management Module \n        :This OID shall be set before shutting \n        down the Chassis power. A delay \n        of 5 sec is necessary between this \n        OID is set and power is shut down. \n         <Help>  This control initiates \n        a shutdown of the MGNT board,\n        ')
mgnt2CtrltestLed = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 2, 18))
mgnt2CtrlLedOff = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 2, 18, 3), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CtrlLedOff.setStatus('current')
if mibBuilder.loadTexts: mgnt2CtrlLedOff.setDescription('\n        Switch off Leds Test :This OID \n        switches off all the Leds as a\n         test feature  <Help>  This control \n        initiates a test leds turning all \n        the LEDs of the complete chassis \n        to OFF\n        ')
mgnt2CtrlRedLed = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 2, 18, 2), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CtrlRedLed.setStatus('current')
if mibBuilder.loadTexts: mgnt2CtrlRedLed.setDescription('\n        Red Leds Test :This OID switches \n        on all the red Leds as a test feature \n         <Help>  This control initiates \n        a test leds turning all the LEDs \n        of the chassis to red\n        ')
mgnt2CtrlGreenLed = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 2, 18, 1), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CtrlGreenLed.setStatus('current')
if mibBuilder.loadTexts: mgnt2CtrlGreenLed.setDescription('\n        Green Leds Test :This OID switches \n        on all the green Leds as a test \n        feature  <Help>  This control initiates \n        a test leds turning all the LEDs \n        of the chassis to green\n        ')
mgnt2CtrllogFile = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 2, 19))
mgnt2CtrlLogFileReset = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 2, 19, 1), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CtrlLogFileReset.setStatus('current')
if mibBuilder.loadTexts: mgnt2CtrlLogFileReset.setDescription('\n        Log File Reset :This OID clears \n        all the log files\n        ')
mgnt2CtrlmgntSaveConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 2, 23))
mgnt2CtrlSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 2, 23, 1), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CtrlSaveConfig.setStatus('current')
if mibBuilder.loadTexts: mgnt2CtrlSaveConfig.setDescription('\n        Save Configuration :This OID is \n        used save the configuration related \n        to the enable and mode traps objects \n         <Help>  This control saves the \n        customer configuration on the MGNT \n        board\n        ')
mgnt2CtrlmgntGetGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 2, 24))
mgnt2CtrlGetGlobalConfig = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 2, 24, 1), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CtrlGetGlobalConfig.setStatus('current')
if mibBuilder.loadTexts: mgnt2CtrlGetGlobalConfig.setDescription("\n        Get Global Chassis Config :This \n        OID is used to create a global\n         configuration file of the chassis \n         <Help>  This control creates a \n        single configuration file from\n         PM's and MGNT configuration file \n        into the RAM\n        ")
mgnt2CtrlmgntPutGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 2, 25))
mgnt2CtrlPutGlobalConfig = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 2, 25, 1), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CtrlPutGlobalConfig.setStatus('current')
if mibBuilder.loadTexts: mgnt2CtrlPutGlobalConfig.setDescription("\n        Put Global Chassis Config :This \n        OID is used to extract a global \n        configuration file of the chassis \n         <Help>  This control creates configuration \n        files  to PM's and MGNT from a\n         single configuration file in the \n        RAM\n        ")
mgnt2CtrlmgntAcknowledge = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 2, 26))
mgnt2CtrlAcknowledge = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 2, 26, 1), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CtrlAcknowledge.setStatus('current')
if mibBuilder.loadTexts: mgnt2CtrlAcknowledge.setDescription('\n        Alarm Ack. :This OID is used to \n        acknowledge the current active\n         alarms of the chassis    <Help> \n          This control is used to acknowledge \n        the current active alarms of the \n        chassis\n        ')
mgnt2CfgethPort2 = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 17))
mgnt2CfgChassisEthernetSplit = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 17, 2), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgChassisEthernetSplit.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgChassisEthernetSplit.setDescription('\n        Chassis Ethernet Split  :This\n         OID enables the split between\n         the two kendings.  <Help>  Enable/Disable \n         the switch between the two kendings\n        ')
mgnt2CfgEthPort2Disable = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 17, 1), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgEthPort2Disable.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgEthPort2Disable.setDescription("\n        2nd Ethernet Port Disable :This \n        OID disables  'Ethernet Port 2' \n        .When  not required, this port\n         must be disabled  in order to\n         prevent unwanted access.  <Help> \n         Disable the second Ethernet port\n        ")
mgnt2CfgmgntDccEnable = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 18), Mgnt2DccAccessValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgmgntDccEnable.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgmgntDccEnable.setDescription('\n        DCC Access :This OID selects \n         the mode to enable the DCC on\n         the slots. This Mode enables the \n        Slots 2-4-6-8-10 , or the Slots \n        2-6-10-14-18.  <Help>  Defines\n         the DCC access on the backplane \n        of the chassis (Slots 2-4-6-8-10 \n        or Slots 2-6-10-14-18)\n        ')
mgnt2CfgpmTrapEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 20))
mgnt2CfgPmConfigTrapEn = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 20, 6), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgPmConfigTrapEn.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgPmConfigTrapEn.setDescription('\n        Config Traps Enable :This OID, \n        when set, enables the generation \n        of a trap when the configuration \n        of a PM plugged in the chassis\n         is modified  <Help>  In detailed \n        traps mechanism, enable the trap \n        emission on PM configuration modificatio\n        ')
mgnt2CfgPmControlTrapEn = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 20, 5), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgPmControlTrapEn.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgPmControlTrapEn.setDescription('\n        Control Traps Enable :This OID, \n        when set, enables the generation \n        of a trap when a control is sent \n        to a PM plugged in the chassis\n           \n  <Help>  In detailed traps \n        mechanism, enable the trap emission \n        on control sent to PM\n        ')
mgnt2CfgPmMinorTrapEn = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 20, 3), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgPmMinorTrapEn.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgPmMinorTrapEn.setDescription('\n        Minor Alarm Traps Enable :This \n        OID, when set, enables the generation \n        of the minor alarm trap for all \n        the PM plugged in the chassis \n         <Help>  In detailed traps mechanism, \n        enable the trap emission on minor \n        alarm detected on PM\n        ')
mgnt2CfgPmMajorTrapEn = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 20, 2), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgPmMajorTrapEn.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgPmMajorTrapEn.setDescription('\n        Major Alarm Traps Enable :This \n        OID, when set, enables the generation \n        of the major alarm trap for all \n        the PM plugged in the chassis \n         <Help>  In detailed traps mechanism, \n        enable the trap emission on major \n        alarm detected on PM\n        ')
mgnt2CfgPmCriticalTrapEn = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 20, 1), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgPmCriticalTrapEn.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgPmCriticalTrapEn.setDescription('\n        Critical Alarm Traps Enable :This \n        OID, when set, enables the generation \n        of the critical alarm trap for\n         all the PM plugged in the chassis \n         <Help>  In detailed traps mechanism, \n        enable the trap emission on critical \n        alarm detected on PM\n        ')
mgnt2CfgmgntTrapEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 21))
mgnt2CfgMgntEventTrapEn = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 21, 7), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgMgntEventTrapEn.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgMgntEventTrapEn.setDescription('\n        MGNT Event Traps Enable :This\n         OID, when set, enables the generation \n        of a trap when an event occurs\n         on the chassis  <Help>  In detailed \n        traps mechanism, enable the trap \n        emission on event detected in the \n        chassis\n        ')
mgnt2CfgMgntConfigTrapEn = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 21, 6), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgMgntConfigTrapEn.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgMgntConfigTrapEn.setDescription('\n        MGNT Config Traps Enable :This \n        OID, when set, enables the generation \n        of a trap when the configuration \n        of a MGNT plugged in the chassis \n        is modified  <Help>  In detailed \n        traps mechanism, enable the trap \n        emission on MGNT configuration\n         modification\n        ')
mgnt2CfgMgntControlTrapEn = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 21, 5), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgMgntControlTrapEn.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgMgntControlTrapEn.setDescription('\n        MGNT Control Traps Enable :This \n        OID, when set, enables the generation \n        of a trap when a control is sent \n        to a MGNT plugged in the chassis \n          \n  <Help>  In detailed traps\n         mechanism, enable the trap emission \n        on control sent to MGNT\n        ')
mgnt2CfgMgntMinorTrapEn = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 21, 3), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgMgntMinorTrapEn.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgMgntMinorTrapEn.setDescription('\n        MGNT Minor Alarm Traps Enable\n         :This OID, when set, enables the \n        generation of the minor alarm trap \n        for the MGNT and FAN board  <Help> \n         In detailed traps mechanism, enable \n        the trap emission on minor alarm \n        detected on MGNT and FAN\n        ')
mgnt2CfgMgntMajorTrapEn = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 21, 2), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgMgntMajorTrapEn.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgMgntMajorTrapEn.setDescription('\n        MGNT Major Traps Enable :This\n         OID, when set, enables the generation \n        of the major alarm trap for the \n        MGNT and FAN board  <Help>  In\n         detailed traps mechanism, enable \n        the trap emission on major alarm \n        detected on MGNT and FAN\n        ')
mgnt2CfgMgntCriticalTrapEn = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 21, 1), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgMgntCriticalTrapEn.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgMgntCriticalTrapEn.setDescription('\n        MGNT Critical Alarm Traps Enable \n        :This OID, when set, enables the \n        generation of the critical alarm \n        trap for the MGNT and FAN board \n         <Help>  In detailed traps mechanism, \n        enable the trap emission on critical \n        alarm detected on MGNT and FAN\n        ')
mgnt2CfgmgntTrapMode = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 22), Mgnt2TrapModeValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgmgntTrapMode.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgmgntTrapMode.setDescription('\n        Traps Mode :This OID is used to \n        define the trap mode (synthetic \n        or detailed mode)  <Help>  Selects \n        the traps mechanism\n        ')
mgnt2CfgsyslogEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 23))
mgnt2CfgSyslogAlarmEn = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 23, 4), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgSyslogAlarmEn.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgSyslogAlarmEn.setDescription('\n        Syslog Alarm Enable :This OID, \n        when set, enables the generation \n        of a syslog, when an alarm occurs \n         <Help>  Enable a syslog emission \n        on an alarm detected on the chassi\n        ')
mgnt2CfgSyslogCtrlEn = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 23, 3), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgSyslogCtrlEn.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgSyslogCtrlEn.setDescription('\n        Syslog Control Enable :This OID, \n        when set, enables the generation \n        of a syslog, when a control is\n         set   <Help>  Enable a syslog\n         emission on a control operated \n        on the chassis\n        ')
mgnt2CfgSyslogConfigEn = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 23, 2), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgSyslogConfigEn.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgSyslogConfigEn.setDescription('\n        Syslog Config Enable :This OID, \n        when set, enables the generation \n        of a syslog, when the configuration \n        has been changed.   <Help>  Enable \n        a syslog emission on a configuration \n        change detected on the chassis\n        ')
mgnt2CfgSyslogEventEn = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 23, 1), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgSyslogEventEn.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgSyslogEventEn.setDescription('\n        Syslog Event Enable :This OID, \n        when set, enables the generation \n        of a syslog, when an event has\n         been detected  <Help>  Enable\n         a syslog emission on event detected \n        on the chassis\n        ')
mgnt2CfgntpTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgntpTimeZone.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgntpTimeZone.setDescription('\n        NTP Time Zone  :This OID defines \n        the time zone of the MGNT board \n        for the NTP server  <Help>  This \n        object defines the time zone of \n        the MGNT board (from -12 to +12 \n        hours from the GMT).\n        ')
mgnt2CfgpmConfEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 25))
mgnt2CfgPmRestoreEnable = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 25, 2), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgPmRestoreEnable.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgPmRestoreEnable.setDescription('\n        Automatic Config Restore :This \n        OID enables the automatic PM configuration \n        restore mechanism on PM insertion \n         <Help>  This parameter enables \n        the automatic PM configuration\n         restore mechanism on PM insertio\n        ')
mgnt2CfgPmBackupEnable = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 25, 1), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgPmBackupEnable.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgPmBackupEnable.setDescription('\n        Automatic Config Backup :This\n         OID enables the automatic PM configuration \n        backup mechanism on PM insertion \n        or PM configuration modification. \n         <Help>  This parameter enables \n        the automatic PM configuration\n         backup mechanism on PM insertion \n        or PM configuration modificatio\n        ')
mgnt2CfginactivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfginactivityTimeout.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfginactivityTimeout.setDescription('\n        Idle Timeout  :This OID defines \n        the idle timeout (in minutes) to \n        automatically logout from the craft \n        and from the CLI.  <Help>  This \n        object defines the idle timeout \n        (in minutes) to automatically logout \n        from the craft and from the CLI\n        ')
mgnt2CfgcliAccess = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 27), Mgnt2CliAccessValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgcliAccess.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgcliAccess.setDescription('\n        CLI access  :This OID selects\n         the protocol for the remote access \n        to a CLI user.  <Help>  This object \n        defines the protocol used for a \n        remote CLI.\n        ')
mgnt2CfgcraftAccess = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 28), Mgnt2CraftAccessValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgcraftAccess.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgcraftAccess.setDescription('\n        CRAFT access :This OID selects \n        the remote access to a CRAFT user. \n         <Help>  This object defines the \n        access for a remote CRAFT.\n        ')
mgnt2CfgperfModes1 = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 29), EkiSynchroMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgperfModes1.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgperfModes1.setDescription('\n        PERF Synchro Source :This OID\n         selects the source of the synchronisation \n        (Internal/External).  <Help>  This \n        object defines the source of the \n        synchronization to operate performance \n        monitoring.\n        ')
mgnt2CfgalarmModelActiv = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 30), Mgnt2AckMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgalarmModelActiv.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgalarmModelActiv.setDescription('\n        Acknowledge mode  :This OID defines \n        the alarms akcnowledge mode   <Help> \n         This configuration defines the \n        alarms akcnowledge mode\n        ')
mgnt2CfgnetworkInput = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 31), Mgnt2NetMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgnetworkInput.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgnetworkInput.setDescription('\n        Network input :This OID selects \n        the connection of the Ethernet\n         Network input to either the switches \n        (2) or the daughter board (1) , \n        in this case the MGNT can act as \n        a router  <Help>   This configuration \n        defines the use of the Network\n         input of the front panel\n        ')
mgnt2CfgmasterEthMode = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 32), Mgnt2MasterEthMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgmasterEthMode.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgmasterEthMode.setDescription('\n        DHCP Master Ethernet Mode :This \n        OID selects the mode of the Master \n        Ethernet  in DHCP mode (2) or in \n        Static Mode(1)  <Help>  This configuration \n        defines the use of the Master Ethernet \n        Mode\n        ')
mgnt2CfgsubnetMode = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 33), Mgnt2SubnetEthMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgsubnetMode.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgsubnetMode.setDescription('\n        DHCP Subnet Mode :This OID selects \n        the mode of the Subnet in DHCP\n         mode (2) or in Static Mode(1)\n         <Help>  This configuration defines \n        the use of the Subnet Mode\n        ')
mgnt2CfgrstpMode = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 34))
mgnt2CfgRstpEnable = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 34, 1), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgRstpEnable.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgRstpEnable.setDescription('\n        RSTP Enable :This OID enables\n         the RSTP algorythm <Help>  This \n        configuration defines the use of \n         RSTP\n        ')
mgnt2CfglldpMode = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 35))
mgnt2CfgLldpEnable = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 35, 1), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgLldpEnable.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgLldpEnable.setDescription('\n        LLDP Enable :This OID enables\n         the LLDP algorythm <Help>  This \n        configuration defines the use of \n         LLDP\n        ')
mgnt2CfglogMode = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 36), Mgnt2LogFileMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfglogMode.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfglogMode.setDescription('\n        Log Mode :This OID enables the \n        log file mode<Help>  This configuration \n        defines the use of  the log mod\n        ')
mgnt2CfgnodeMode = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 37))
mgnt2CfgNodeControllerEnable = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 37, 1), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgNodeControllerEnable.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgNodeControllerEnable.setDescription('\n        Node Controller Mode :This OID \n        enables the node controller mode<Help> \n         This configuration defines the \n        use of  the node controller mod\n        ')
mgnt2CfgunprivilegedUsersMode = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 38))
mgnt2CfgRestrictUnprivilegeUsers = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 38, 1), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgRestrictUnprivilegeUsers.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgRestrictUnprivilegeUsers.setDescription('\n        Restrict Unprivileged Users Rights \n        :This OID enables the restriction \n        of unprivileged user rights to\n         modify their own password <Help> \n        This parameter enables the restriction \n        of unprivileged user rights to\n         modify their own password\n        ')
mgnt2CfgoscDccLinkUpThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgoscDccLinkUpThreshold.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgoscDccLinkUpThreshold.setDescription('\n        OSC/DCC Link Up Thresh. [10-30]s \n        :This OID defines the confirmation \n        threshold to consider an OSC/DCC \n        link as up <Help> This parameter \n        defines the confirmation threshold \n        to consider an OSC/DCC link as\n         up\n        ')
mgnt2CfgoscDccLinkDownThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgoscDccLinkDownThreshold.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgoscDccLinkDownThreshold.setDescription('\n        OSC/DCC Link Down Thresh. [2-3]s \n        :This OID defines the confirmation \n        threshold to consider an OSC/DCC \n        link as down <Help> This parameter \n        defines the confirmation threshold \n        to consider an OSC/DCC link as\n         down.\n        ')
mgnt2CfgaccountAutoLock = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgaccountAutoLock.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgaccountAutoLock.setDescription('\n        Account Auto-Lock [-1 / 1-10]\n         err :This OID defines the number \n        of error password to lock an account. \n        This counter is reset on successful \n        login or after an administrator \n        defined period (see Fail count\n         reset) Set to -1 to disables the \n        feature.<Help> This parameter defines \n        the number of error password to \n        lock an account. This counter is \n        reset on successful login or after \n        an administrator defined period \n        (see Fail count reset) Set to -1 \n        to disables the feature.\n        ')
mgnt2CfgfailCountReset = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgfailCountReset.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgfailCountReset.setDescription('\n        Fail Count Reset [-1 / 1-10] hrs \n        :This OID defines the minimum time \n        (in hours) to reset the failed\n         login counter. This counter is \n        also reset on successful login. \n        Set to -1 to disable the feature.<Help> \n        This parameter defines the minimum \n        time (in hours) to reset the failed \n        login counter. This counter is\n         also reset on successful login. \n        Set to -1 to disable the feature\n        ')
mgnt2CfgftpMode = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 44))
mgnt2CfgFtpEnable = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 44, 1), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgFtpEnable.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgFtpEnable.setDescription('\n        FTP Enable :This OID enables the \n        FTP protocol  <Help>  This configuration \n        enables the FTP protocol \n        ')
mgnt2CfgtftpMode = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 45))
mgnt2CfgTftpEnable = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 2, 3, 45, 1), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2CfgTftpEnable.setStatus('current')
if mibBuilder.loadTexts: mgnt2CfgTftpEnable.setDescription('\n        TFTP Enable :This OID enables\n         the TFTP protocol  <Help>  This \n        configuration enables the TFTP\n         protocol  \n        ')
mgnt2TrapBoardNumber = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 3, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2TrapBoardNumber.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapBoardNumber.setDescription('This OID gives the slot number of the PM that sent the last trap')
mgnt2TrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 3, 51), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2TrapSeverity.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapSeverity.setDescription('This OID gives the trap severity')
mgnt2TrapSourcePm = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 3, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2TrapSourcePm.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapSourcePm.setDescription('This OID gives the mnemonic of the pm who sent a trap')
mgnt2TrapSourcePortType = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 3, 53), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2TrapSourcePortType.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapSourcePortType.setDescription('This OID gives the type of the port who sent a trap')
mgnt2TrapSourcePortNumber = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 3, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2TrapSourcePortNumber.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapSourcePortNumber.setDescription('This OID gives the port number of the PM that sent the last trap')
mgnt2TrapSourceLabel = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 3, 55), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2TrapSourceLabel.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapSourceLabel.setDescription('This OID gives the label of the alarm who sent a trap')
mgnt2TrapSourceValue = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 3, 56), EkiOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2TrapSourceValue.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapSourceValue.setDescription('This OID gives the value of the alarm who sent a trap')
mgnt2TrapEventLabel = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 3, 57), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2TrapEventLabel.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapEventLabel.setDescription('This OID gives the label of the event')
mgnt2TrapNodeControllerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 3, 58), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2TrapNodeControllerIpAddress.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapNodeControllerIpAddress.setDescription('This OID gives the IP address of the Node Controller')
mgnt2TrapChassisId = MibScalar((1, 3, 6, 1, 4, 1, 20044, 7, 3, 59), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2TrapChassisId.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapChassisId.setDescription('This OID gives the chassis ID ')
mgnt2TrapApi = NotificationType((1, 3, 6, 1, 4, 1, 20044, 7, 3, 1)).setObjects(("EKINOPS-MGNT2-MIB", "mgnt2TrapBoardNumber"), ("EKINOPS-MGNT2-MIB", "mgnt2AlmapiErrorCode"))
if mibBuilder.loadTexts: mgnt2TrapApi.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapApi.setDescription('Api error trap with its number')
mgnt2TrapSwError = NotificationType((1, 3, 6, 1, 4, 1, 20044, 7, 3, 2)).setObjects(("EKINOPS-MGNT2-MIB", "mgnt2AlmFifoCmdError"))
if mibBuilder.loadTexts: mgnt2TrapSwError.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapSwError.setDescription('Chassis software error other API')
mgnt2TrapBoardInserted = NotificationType((1, 3, 6, 1, 4, 1, 20044, 7, 3, 4)).setObjects(("EKINOPS-MGNT2-MIB", "mgnt2TrapBoardNumber"))
if mibBuilder.loadTexts: mgnt2TrapBoardInserted.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapBoardInserted.setDescription('A board has been plugged in')
mgnt2TrapBoardRemoved = NotificationType((1, 3, 6, 1, 4, 1, 20044, 7, 3, 5)).setObjects(("EKINOPS-MGNT2-MIB", "mgnt2TrapBoardNumber"))
if mibBuilder.loadTexts: mgnt2TrapBoardRemoved.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapBoardRemoved.setDescription('A board has been plugged out')
mgnt2TrapRestoreConfDone = NotificationType((1, 3, 6, 1, 4, 1, 20044, 7, 3, 6)).setObjects(("EKINOPS-MGNT2-MIB", "mgnt2TrapBoardNumber"))
if mibBuilder.loadTexts: mgnt2TrapRestoreConfDone.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapRestoreConfDone.setDescription('The Configuration has been restored from the management board')
mgnt2TrapGlobalPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 20044, 7, 3, 8)).setObjects(("EKINOPS-MGNT2-MIB", "mgnt2AlmDef48b"), ("EKINOPS-MGNT2-MIB", "mgnt2AlmDef48a"))
if mibBuilder.loadTexts: mgnt2TrapGlobalPowerFail.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapGlobalPowerFail.setDescription('A global power supply failure has been detected')
mgnt2TrapFanPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 20044, 7, 3, 9)).setObjects(("EKINOPS-MGNT2-MIB", "mgnt2AlmFanDefFuseB"), ("EKINOPS-MGNT2-MIB", "mgnt2AlmFanDefFuseA"), ("EKINOPS-MGNT2-MIB", "mgnt2AlmFanPwrFail1"))
if mibBuilder.loadTexts: mgnt2TrapFanPowerFail.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapFanPowerFail.setDescription('A Fan power supply failure has been detected')
mgnt2TrapGigmPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 20044, 7, 3, 10)).setObjects(("EKINOPS-MGNT2-MIB", "mgnt2AlmMgntDefFuseA"), ("EKINOPS-MGNT2-MIB", "mgnt2AlmMgntDefFuseB"))
if mibBuilder.loadTexts: mgnt2TrapGigmPowerFail.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapGigmPowerFail.setDescription('A power supply default has been detected in the management board')
mgnt2TrapFanFail = NotificationType((1, 3, 6, 1, 4, 1, 20044, 7, 3, 11)).setObjects(("EKINOPS-MGNT2-MIB", "mgnt2AlmPbFan1Fail"), ("EKINOPS-MGNT2-MIB", "mgnt2AlmPbFan2Fail"), ("EKINOPS-MGNT2-MIB", "mgnt2AlmPbFan3Fail"), ("EKINOPS-MGNT2-MIB", "mgnt2AlmPbFan4Fail"), ("EKINOPS-MGNT2-MIB", "mgnt2AlmPbFan5Fail"), ("EKINOPS-MGNT2-MIB", "mgnt2AlmPbFan6Fail"))
if mibBuilder.loadTexts: mgnt2TrapFanFail.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapFanFail.setDescription('A Fan failure has been detected')
mgnt2TrapLogFileFull = NotificationType((1, 3, 6, 1, 4, 1, 20044, 7, 3, 20)).setObjects(("EKINOPS-MGNT2-MIB", "mgnt2TrapBoardNumber"), ("EKINOPS-MGNT2-MIB", "mgnt2AlmLog80Full"), ("EKINOPS-MGNT2-MIB", "mgnt2AlmLogFileFull"))
if mibBuilder.loadTexts: mgnt2TrapLogFileFull.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapLogFileFull.setDescription('Indicates that the corresponding log file is almost full')
mgnt2TrapAlarm = NotificationType((1, 3, 6, 1, 4, 1, 20044, 7, 3, 30)).setObjects(("EKINOPS-MGNT2-MIB", "mgnt2TrapSeverity"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapSourcePm"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapBoardNumber"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapSourcePortType"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapSourcePortNumber"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapSourceLabel"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapSourceValue"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapNodeControllerIpAddress"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapChassisId"))
if mibBuilder.loadTexts: mgnt2TrapAlarm.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapAlarm.setDescription('Indicates that an alarm state has changed')
mgnt2TrapEvent = NotificationType((1, 3, 6, 1, 4, 1, 20044, 7, 3, 31)).setObjects(("EKINOPS-MGNT2-MIB", "mgnt2TrapBoardNumber"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapEventLabel"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapNodeControllerIpAddress"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapChassisId"))
if mibBuilder.loadTexts: mgnt2TrapEvent.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapEvent.setDescription('Indicates that an event has occured')
mgnt2TrapControl = NotificationType((1, 3, 6, 1, 4, 1, 20044, 7, 3, 32)).setObjects(("EKINOPS-MGNT2-MIB", "mgnt2TrapSourcePm"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapBoardNumber"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapSourcePortType"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapSourcePortNumber"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapSourceLabel"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapSourceValue"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapNodeControllerIpAddress"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapChassisId"))
if mibBuilder.loadTexts: mgnt2TrapControl.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapControl.setDescription('Indicates that a control has been set to the module')
mgnt2TrapConfig = NotificationType((1, 3, 6, 1, 4, 1, 20044, 7, 3, 33)).setObjects(("EKINOPS-MGNT2-MIB", "mgnt2TrapSourcePm"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapBoardNumber"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapSourcePortType"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapSourcePortNumber"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapSourceLabel"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapSourceValue"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapNodeControllerIpAddress"), ("EKINOPS-MGNT2-MIB", "mgnt2TrapChassisId"))
if mibBuilder.loadTexts: mgnt2TrapConfig.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapConfig.setDescription('Indicates that a config word has been changed')
mibBuilder.exportSymbols("EKINOPS-MGNT2-MIB", mgnt2AlmPmSlot15Absent=mgnt2AlmPmSlot15Absent, mgnt2IndexPackage=mgnt2IndexPackage, mgnt2Ctrlsynth5=mgnt2Ctrlsynth5, mgnt2GigmNtpServer=mgnt2GigmNtpServer, mgnt2TrapLogFileFull=mgnt2TrapLogFileFull, mgnt2GigmCurrentMinute=mgnt2GigmCurrentMinute, mgnt2CtrlmgntSaveConfig=mgnt2CtrlmgntSaveConfig, mgnt2CfgunprivilegedUsersMode=mgnt2CfgunprivilegedUsersMode, mgnt2AlmFan1ModuleAbsent=mgnt2AlmFan1ModuleAbsent, mgnt2ErrorCounters=mgnt2ErrorCounters, mgnt2Perf=mgnt2Perf, mgnt2GigmTrapCount=mgnt2GigmTrapCount, mgnt2GigmTrapCounter=mgnt2GigmTrapCounter, mgnt2config=mgnt2config, mgnt2AlmMgntDefFuseB=mgnt2AlmMgntDefFuseB, mgnt2GigmGatewayAddressEntry=mgnt2GigmGatewayAddressEntry, mgnt2AlmfanMgmnt=mgnt2AlmfanMgmnt, mgnt2CfglogMode=mgnt2CfglogMode, mgnt2CnfManageConfigFileID=mgnt2CnfManageConfigFileID, mgnt2CnfManageConfigFilesEntry=mgnt2CnfManageConfigFilesEntry, mgnt2AlmPmSlot9Absent=mgnt2AlmPmSlot9Absent, mgnt2MibName=mgnt2MibName, Mgnt2SlotStatus=Mgnt2SlotStatus, mgnt2DwlEkicraftSwitchTo=mgnt2DwlEkicraftSwitchTo, mgnt2GigmLdapPamPasswd=mgnt2GigmLdapPamPasswd, mgnt2IndexMibs=mgnt2IndexMibs, mgnt2AlmPmFanAbsent=mgnt2AlmPmFanAbsent, mgnt2PerfCapPosition=mgnt2PerfCapPosition, mgnt2AlmPmSlot11Absent=mgnt2AlmPmSlot11Absent, mgnt2CtrlGetGlobalConfig=mgnt2CtrlGetGlobalConfig, mgnt2CfgsyslogEnable=mgnt2CfgsyslogEnable, mgnt2LoadFileType=mgnt2LoadFileType, mgnt2CtrlPutGlobalConfig=mgnt2CtrlPutGlobalConfig, mgnt2CnfExportConfig=mgnt2CnfExportConfig, mgnt2CfgEthPort2Disable=mgnt2CfgEthPort2Disable, mgnt2RinvFan=mgnt2RinvFan, mgnt2GigmManagerEnableAlarmMajor=mgnt2GigmManagerEnableAlarmMajor, mgnt2PollingPresent=mgnt2PollingPresent, mgnt2Hardware=mgnt2Hardware, mgnt2PerfCapOidEnable=mgnt2PerfCapOidEnable, mgnt2CtrlChassisShutdown=mgnt2CtrlChassisShutdown, mgnt2GigmSyslog=mgnt2GigmSyslog, mgnt2CnfManageConfigFilesTable=mgnt2CnfManageConfigFilesTable, mgnt2CnfModuleSlotNumber=mgnt2CnfModuleSlotNumber, mgnt2AlmFanPwrFail1=mgnt2AlmFanPwrFail1, mgnt2CfgPmCriticalTrapEn=mgnt2CfgPmCriticalTrapEn, mgnt2CfgPmControlTrapEn=mgnt2CfgPmControlTrapEn, mgnt2CfgPmBackupEnable=mgnt2CfgPmBackupEnable, mgnt2DeletePackageFromFlash=mgnt2DeletePackageFromFlash, mgnt2CnfConfigSlot=mgnt2CnfConfigSlot, mgnt2GigmIPAddresByDHCP=mgnt2GigmIPAddresByDHCP, mgnt2AlmPollingManagerError=mgnt2AlmPollingManagerError, mgnt2CfgSyslogAlarmEn=mgnt2CfgSyslogAlarmEn, mgnt2DwlPackageTable=mgnt2DwlPackageTable, mgnt2DwlPackageEntry=mgnt2DwlPackageEntry, mgnt2CfgmgntTrapEnable=mgnt2CfgmgntTrapEnable, mgnt2CtrlRedLed=mgnt2CtrlRedLed, mgnt2TrapConfig=mgnt2TrapConfig, mgnt2AlmFan3ModuleFail=mgnt2AlmFan3ModuleFail, mgnt2AlmPmSlot7Absent=mgnt2AlmPmSlot7Absent, mgnt2GigmMibsEntry=mgnt2GigmMibsEntry, mgnt2AlmDef48a=mgnt2AlmDef48a, mgnt2DwlUploadingTable=mgnt2DwlUploadingTable, mgnt2AlmPbFan3Fail=mgnt2AlmPbFan3Fail, mgnt2AlmPbFan6Fail=mgnt2AlmPbFan6Fail, mgnt2DeletePackageFromRam=mgnt2DeletePackageFromRam, mgnt2PlugInRinv=mgnt2PlugInRinv, mgnt2CnfUploadConfigIndex=mgnt2CnfUploadConfigIndex, mgnt2CtrlmgntAcknowledge=mgnt2CtrlmgntAcknowledge, mgnt2GigmLdapHost=mgnt2GigmLdapHost, mgnt2IndexEkicraftPkg=mgnt2IndexEkicraftPkg, mgnt2GigmNetmask=mgnt2GigmNetmask, mgnt2DwlEkicraftPkgEntry=mgnt2DwlEkicraftPkgEntry, mgnt2GigmLdapPort=mgnt2GigmLdapPort, mgnt2CfgntpTimeZone=mgnt2CfgntpTimeZone, mgnt2CfglldpMode=mgnt2CfglldpMode, mgnt2TrapGigmPowerFail=mgnt2TrapGigmPowerFail, mgnt2TrapSwError=mgnt2TrapSwError, mgnt2AlmPmSlot2Absent=mgnt2AlmPmSlot2Absent, mgnt2GigmCurrentHour=mgnt2GigmCurrentHour, mgnt2AlmboardMgmntSet2=mgnt2AlmboardMgmntSet2, mgnt2CnfDeleteConfig=mgnt2CnfDeleteConfig, mgnt2GigmBoardIpAddress=mgnt2GigmBoardIpAddress, mgnt2GigmAuthenticationType=mgnt2GigmAuthenticationType, mgnt2TrapBoardNumber=mgnt2TrapBoardNumber, mgnt2RootOIDInventory=mgnt2RootOIDInventory, mgnt2CnfConfigFileName=mgnt2CnfConfigFileName, mgnt2IndexUpload=mgnt2IndexUpload, mgnt2TrapAlarm=mgnt2TrapAlarm, mgnt2CfgpmConfEnable=mgnt2CfgpmConfEnable, mgnt2CfgethPort2=mgnt2CfgethPort2, mgnt2FileUpload=mgnt2FileUpload, mgnt2AlmFanDefFuseA=mgnt2AlmFanDefFuseA, mgnt2AlmDef48b=mgnt2AlmDef48b, mgnt2CfgpmTrapEnable=mgnt2CfgpmTrapEnable, mgnt2DwlEkicraftExtractedPack=mgnt2DwlEkicraftExtractedPack, mgnt2TrapEventLabel=mgnt2TrapEventLabel, mgnt2AlmPmSlot13Absent=mgnt2AlmPmSlot13Absent, mgnt2DwlPackageFileName=mgnt2DwlPackageFileName, mgnt2AlmCritVisual=mgnt2AlmCritVisual, mgnt2AlmMgntDefFuseA=mgnt2AlmMgntDefFuseA, mgnt2IPmanagment=mgnt2IPmanagment, mgnt2LoadPMTableUpdate=mgnt2LoadPMTableUpdate, mgnt2AlmFan1ModuleFail=mgnt2AlmFan1ModuleFail, mgnt2CfgMgntEventTrapEn=mgnt2CfgMgntEventTrapEn, mgnt2CfgTftpEnable=mgnt2CfgTftpEnable, mgnt2CfgMgntMajorTrapEn=mgnt2CfgMgntMajorTrapEn, mgnt2PerfResyncNMS=mgnt2PerfResyncNMS, mgnt2AlmAbsFailure=mgnt2AlmAbsFailure, mgnt2GigmCurrentYear=mgnt2GigmCurrentYear, mgnt2GigmManagerRegistrationTimeout=mgnt2GigmManagerRegistrationTimeout, Mgnt2SubnetEthMode=Mgnt2SubnetEthMode, mgnt2AlmPmSlot8Absent=mgnt2AlmPmSlot8Absent, mgnt2RemoteInventory=mgnt2RemoteInventory, mgnt2RinvLinux=mgnt2RinvLinux, Mgnt2TrapModeValues=Mgnt2TrapModeValues, mgnt2GigmNodeIpAddress=mgnt2GigmNodeIpAddress, mgnt2AlmremoveablefanModuleFail=mgnt2AlmremoveablefanModuleFail, mgnt2AlmPmSlot5Absent=mgnt2AlmPmSlot5Absent, mgnt2CfgMgntMinorTrapEn=mgnt2CfgMgntMinorTrapEn, mgnt2LoadPMTable=mgnt2LoadPMTable, mgnt2DeleteEkicraftPkgFromFlash=mgnt2DeleteEkicraftPkgFromFlash, mgnt2CtrltestLed=mgnt2CtrltestLed, mgnt2RinvHwPlatform=mgnt2RinvHwPlatform, mgnt2SNMPAgentData=mgnt2SNMPAgentData, mgnt2SoftwareManagement=mgnt2SoftwareManagement, mgnt2AlmAcknowledge=mgnt2AlmAcknowledge, mgnt2AlmPbFan5Fail=mgnt2AlmPbFan5Fail, mgnt2LoadState=mgnt2LoadState, mgnt2CtrlChassisWarmReset=mgnt2CtrlChassisWarmReset, mgnt2GigmSelectedBoard=mgnt2GigmSelectedBoard, mgnt2AlmFansFailure=mgnt2AlmFansFailure, mgnt2DwlUploadingEntry=mgnt2DwlUploadingEntry, mgnt2LoadModuleNumber=mgnt2LoadModuleNumber, mgnt2CfgPmMajorTrapEn=mgnt2CfgPmMajorTrapEn, mgnt2CfgFtpEnable=mgnt2CfgFtpEnable, mgnt2CfgmgntDccEnable=mgnt2CfgmgntDccEnable, mgnt2GigmManagerEnableAlarmWarning=mgnt2GigmManagerEnableAlarmWarning, mgnt2AlmNurgVisual=mgnt2AlmNurgVisual, mgnt2CfgPmConfigTrapEn=mgnt2CfgPmConfigTrapEn, mgnt2RinvUboot=mgnt2RinvUboot, mgnt2LoadResetMethod=mgnt2LoadResetMethod, mgnt2GigmResetErrorCounters=mgnt2GigmResetErrorCounters, mgnt2GigmManagerTrapPort=mgnt2GigmManagerTrapPort, mgnt2CtrlLedOff=mgnt2CtrlLedOff, mgnt2GigmPerf24hSync=mgnt2GigmPerf24hSync, mgnt2CnfUploadConfigFilesTable=mgnt2CnfUploadConfigFilesTable, mgnt2GigmSecurity=mgnt2GigmSecurity, mgnt2GigmCurrentMonth=mgnt2GigmCurrentMonth, mgnt2GigmLdapBindDn=mgnt2GigmLdapBindDn, mgnt2TrapBoardInserted=mgnt2TrapBoardInserted, mgnt2CfgPmRestoreEnable=mgnt2CfgPmRestoreEnable, mgnt2AlmPbFan4Fail=mgnt2AlmPbFan4Fail, mgnt2GigmPlugInTable=mgnt2GigmPlugInTable, mgnt2TrapSourceLabel=mgnt2TrapSourceLabel, mgnt2GigmRoCommunity=mgnt2GigmRoCommunity, mgnt2AlmFan3ModuleAbsent=mgnt2AlmFan3ModuleAbsent, mgnt2LoadDelete=mgnt2LoadDelete, mgnt2DwlEkicraftPkgFileName=mgnt2DwlEkicraftPkgFileName, mgnt2SlotOcc=mgnt2SlotOcc, mgnt2AlmPbFan1Fail=mgnt2AlmPbFan1Fail, mgnt2AlmPmSlot6Absent=mgnt2AlmPmSlot6Absent, mgnt2TrapControl=mgnt2TrapControl, mgnt2AlmLog80Full=mgnt2AlmLog80Full, mgnt2GigmManagerIpAddress=mgnt2GigmManagerIpAddress, mgnt2TrapSeverity=mgnt2TrapSeverity, mgnt2TrapApi=mgnt2TrapApi, mgnt2Name=mgnt2Name, mgnt2AlmPmSlot19Absent=mgnt2AlmPmSlot19Absent, mgnt2Position=mgnt2Position, mgnt2TrapSourcePm=mgnt2TrapSourcePm, mgnt2TrapFanFail=mgnt2TrapFanFail, mgnt2ConfigManagement=mgnt2ConfigManagement, mgnt2IndexPlugIns=mgnt2IndexPlugIns, mgnt2CfgmgntTrapMode=mgnt2CfgmgntTrapMode, mgnt2CnfManageConfigFileName=mgnt2CnfManageConfigFileName, mgnt2CfgrstpMode=mgnt2CfgrstpMode, mgnt2CtrlmgntGetGlobalConfig=mgnt2CtrlmgntGetGlobalConfig, mgnt2SubFunctionLabel=mgnt2SubFunctionLabel, mgnt2LoadTransfer=mgnt2LoadTransfer, mgnt2CtrlSaveConfig=mgnt2CtrlSaveConfig, mgnt2GigmRwCommunity=mgnt2GigmRwCommunity, mgnt2AlmNtpSyncLoss=mgnt2AlmNtpSyncLoss, mgnt2TrapSourceValue=mgnt2TrapSourceValue, mgnt2CtrlChassisColdReset=mgnt2CtrlChassisColdReset, mgnt2GigmPerf15minSync=mgnt2GigmPerf15minSync, mgnt2GigmLdapBase=mgnt2GigmLdapBase, Mgnt2PerfResyncValues=Mgnt2PerfResyncValues, mgnt2AlmremoveableFanModuleMgmnt=mgnt2AlmremoveableFanModuleMgmnt, mgnt2CtrlGreenLed=mgnt2CtrlGreenLed, mgnt2TrapFanPowerFail=mgnt2TrapFanPowerFail, mgnt2CfgLldpEnable=mgnt2CfgLldpEnable, mgnt2AlmPmSlot1Absent=mgnt2AlmPmSlot1Absent, mgnt2TrapChassisId=mgnt2TrapChassisId, mgnt2PortNumber=mgnt2PortNumber, mgnt2CfgperfModes1=mgnt2CfgperfModes1, mgnt2AlmPmSlot14Absent=mgnt2AlmPmSlot14Absent, mgnt2PerfCapabilityEntry=mgnt2PerfCapabilityEntry, mgnt2GigmManagerIpAddressTableRowStatus=mgnt2GigmManagerIpAddressTableRowStatus, mgnt2LoadBankNumber=mgnt2LoadBankNumber, mgnt2GigmBoardEntry=mgnt2GigmBoardEntry, mgnt2RinvSoftwarePackage=mgnt2RinvSoftwarePackage, mgnt2Immediate=mgnt2Immediate, mgnt2CtrllogFile=mgnt2CtrllogFile, mgnt2GigmErrorCounterEntry=mgnt2GigmErrorCounterEntry, mgnt2AlmsynthAlm0=mgnt2AlmsynthAlm0, mgnt2CfgoscDccLinkDownThreshold=mgnt2CfgoscDccLinkDownThreshold, mgnt2CfgPmMinorTrapEn=mgnt2CfgPmMinorTrapEn, mgnt2CfgoscDccLinkUpThreshold=mgnt2CfgoscDccLinkUpThreshold, mgnt2RinvBackpanel=mgnt2RinvBackpanel, mgnt2GigmTrapCommunity=mgnt2GigmTrapCommunity, mgnt2GigmLdapVersion=mgnt2GigmLdapVersion, Mgnt2AuthTypeValues=Mgnt2AuthTypeValues, mgnt2RinvCraft=mgnt2RinvCraft, mgnt2Authentication=mgnt2Authentication, mgnt2TrapRestoreConfDone=mgnt2TrapRestoreConfDone, mgnt2CfgtftpMode=mgnt2CfgtftpMode, mgnt2DwlUploadFileName=mgnt2DwlUploadFileName, mgnt2GigmManagerEnableAlarmIndeterminate=mgnt2GigmManagerEnableAlarmIndeterminate, mgnt2CfgmasterEthMode=mgnt2CfgmasterEthMode, Mgnt2CliAccessValues=Mgnt2CliAccessValues, mgnt2AlmFan2ModuleFail=mgnt2AlmFan2ModuleFail, mgnt2GigmGatewayAddress=mgnt2GigmGatewayAddress, mgnt2SnmpPresent=mgnt2SnmpPresent, mgnt2=mgnt2, mgnt2CnfRestoreConfig=mgnt2CnfRestoreConfig, mgnt2CfgChassisEthernetSplit=mgnt2CfgChassisEthernetSplit, mgnt2GigmGatewayAddressTable=mgnt2GigmGatewayAddressTable, mgnt2GigmLdapBindPw=mgnt2GigmLdapBindPw, mgnt2GigmManagerEnableEvent=mgnt2GigmManagerEnableEvent, mgnt2AlmlogMgmnt=mgnt2AlmlogMgmnt, mgnt2CfgSyslogCtrlEn=mgnt2CfgSyslogCtrlEn, Mgnt2NetMode=Mgnt2NetMode, mgnt2AlmLogFileFull=mgnt2AlmLogFileFull, mgnt2GigmEqptType=mgnt2GigmEqptType, mgnt2CnfConfigUpload=mgnt2CnfConfigUpload, mgnt2GigmManagerIpAddressEntry=mgnt2GigmManagerIpAddressEntry, mgnt2TrapSourcePortType=mgnt2TrapSourcePortType, mgnt2GigmLogicalName=mgnt2GigmLogicalName, mgnt2AlmFanFilterAbsent=mgnt2AlmFanFilterAbsent, mgnt2AlmFifoCmdError=mgnt2AlmFifoCmdError, mgnt2GigmBoardTable=mgnt2GigmBoardTable, mgnt2AlmFanDefFuseB=mgnt2AlmFanDefFuseB, mgnt2CnfManageConfigIndex=mgnt2CnfManageConfigIndex, mgnt2GigmResetTrapCounter=mgnt2GigmResetTrapCounter, mgnt2LoadDownloadProgress=mgnt2LoadDownloadProgress, mgnt2AlmPbFan2Fail=mgnt2AlmPbFan2Fail, mgnt2GigmLdapScope=mgnt2GigmLdapScope, mgnt2GigmManagerEnableAlarmCrit=mgnt2GigmManagerEnableAlarmCrit, mgnt2CfginactivityTimeout=mgnt2CfginactivityTimeout, mgnt2GigmGatewayIndex=mgnt2GigmGatewayIndex, mgnt2IndexBoards=mgnt2IndexBoards, mgnt2CfgMgntControlTrapEn=mgnt2CfgMgntControlTrapEn, mgnt2CtrlAcknowledge=mgnt2CtrlAcknowledge)
mibBuilder.exportSymbols("EKINOPS-MGNT2-MIB", mgnt2GigmCurrentDay=mgnt2GigmCurrentDay, mgnt2GigmManagerEnableCtrl=mgnt2GigmManagerEnableCtrl, mgnt2GigmManagerEnableConfig=mgnt2GigmManagerEnableConfig, mgnt2ImmediateReplacement=mgnt2ImmediateReplacement, mgnt2GroupNumber=mgnt2GroupNumber, mgnt2CfgaccountAutoLock=mgnt2CfgaccountAutoLock, mgnt2GigmRadiusServer=mgnt2GigmRadiusServer, mgnt2AlmCpuTempOverRange=mgnt2AlmCpuTempOverRange, mgnt2PackageExtractionInProgress=mgnt2PackageExtractionInProgress, mgnt2GigmTime=mgnt2GigmTime, mgnt2RinvAgent=mgnt2RinvAgent, mgnt2GigmPlugInEntry=mgnt2GigmPlugInEntry, mgnt2AlmPmSlot4Absent=mgnt2AlmPmSlot4Absent, mgnt2controls=mgnt2controls, mgnt2CfgnetworkInput=mgnt2CfgnetworkInput, mgnt2ExtractedPack=mgnt2ExtractedPack, mgnt2AlmPmSlot18Absent=mgnt2AlmPmSlot18Absent, mgnt2CtrlmgntPutGlobalConfig=mgnt2CtrlmgntPutGlobalConfig, mgnt2AlmapiErrorCode=mgnt2AlmapiErrorCode, mgnt2ModulesManagement=mgnt2ModulesManagement, mgnt2CfgnodeMode=mgnt2CfgnodeMode, mgnt2GigmManagerIpIndex=mgnt2GigmManagerIpIndex, mgnt2PerfCapIndexBoards=mgnt2PerfCapIndexBoards, mgnt2GigmRadiusSecret=mgnt2GigmRadiusSecret, mgnt2ErrorCounterSlotNumber=mgnt2ErrorCounterSlotNumber, mgnt2SwitchTo=mgnt2SwitchTo, mgnt2CfgRestrictUnprivilegeUsers=mgnt2CfgRestrictUnprivilegeUsers, Mgnt2DccAccessValues=Mgnt2DccAccessValues, Mgnt2CraftAccessValues=Mgnt2CraftAccessValues, mgnt2CfgRstpEnable=mgnt2CfgRstpEnable, mgnt2AlmfanPwrMgmnt=mgnt2AlmfanPwrMgmnt, mgnt2TrapEvent=mgnt2TrapEvent, Mgnt2AckMode=Mgnt2AckMode, mgnt2LoadPMIndex=mgnt2LoadPMIndex, Mgnt2LogFileMode=Mgnt2LogFileMode, mgnt2AlmPmSlot12Absent=mgnt2AlmPmSlot12Absent, mgnt2AlmFan2ModuleAbsent=mgnt2AlmFan2ModuleAbsent, mgnt2AlmPmSlot17Absent=mgnt2AlmPmSlot17Absent, mgnt2GigmMibsTable=mgnt2GigmMibsTable, mgnt2CfgMgntConfigTrapEn=mgnt2CfgMgntConfigTrapEn, mgnt2CfgalarmModelActiv=mgnt2CfgalarmModelActiv, mgnt2CfgcraftAccess=mgnt2CfgcraftAccess, mgnt2AlmFanPwrProtOn=mgnt2AlmFanPwrProtOn, mgnt2TrapNodeControllerIpAddress=mgnt2TrapNodeControllerIpAddress, mgnt2alarms=mgnt2alarms, mgnt2EkicraftPkgExtractionInProgress=mgnt2EkicraftPkgExtractionInProgress, mgnt2DwlUploadingTableUpdate=mgnt2DwlUploadingTableUpdate, mgnt2AlmboardMgmntSet1=mgnt2AlmboardMgmntSet1, mgnt2AlmsynthAlm1=mgnt2AlmsynthAlm1, mgnt2AlmFan4ModuleAbsent=mgnt2AlmFan4ModuleAbsent, mgnt2AlmntpSyncLoss=mgnt2AlmntpSyncLoss, mgnt2TrapSourcePortNumber=mgnt2TrapSourcePortNumber, PYSNMP_MODULE_ID=mgnt2, mgnt2DwlEkicraftPkgTable=mgnt2DwlEkicraftPkgTable, mgnt2GigmErrorCounterTable=mgnt2GigmErrorCounterTable, mgnt2AlmApiError=mgnt2AlmApiError, mgnt2Traps=mgnt2Traps, mgnt2GigmManagerEnableAlarmMinor=mgnt2GigmManagerEnableAlarmMinor, mgnt2ErrorCounterValue=mgnt2ErrorCounterValue, mgnt2AlmPmSlot3Absent=mgnt2AlmPmSlot3Absent, mgnt2LoadFileName=mgnt2LoadFileName, EkiPlugInState=EkiPlugInState, mgnt2CfgNodeControllerEnable=mgnt2CfgNodeControllerEnable, mgnt2PerfCapName=mgnt2PerfCapName, mgnt2CnfUploadConfigFilesEntry=mgnt2CnfUploadConfigFilesEntry, mgnt2GigmRadiusPort=mgnt2GigmRadiusPort, mgnt2DwlEkicraftImmediate=mgnt2DwlEkicraftImmediate, mgnt2AlmUrgVisual=mgnt2AlmUrgVisual, mgnt2AlmPmSlot10Absent=mgnt2AlmPmSlot10Absent, mgnt2IndexErrorCounter=mgnt2IndexErrorCounter, mgnt2RinvGateware=mgnt2RinvGateware, mgnt2PerfCapabilityTable=mgnt2PerfCapabilityTable, mgnt2CfgSyslogConfigEn=mgnt2CfgSyslogConfigEn, mgnt2CfgsubnetMode=mgnt2CfgsubnetMode, mgnt2LoadResetMode=mgnt2LoadResetMode, mgnt2AlmPmSlot20Absent=mgnt2AlmPmSlot20Absent, mgnt2LineNumber=mgnt2LineNumber, mgnt2FlashingInProgress=mgnt2FlashingInProgress, mgnt2PerfCapStatus=mgnt2PerfCapStatus, mgnt2CtrlLogFileReset=mgnt2CtrlLogFileReset, mgnt2CnfBackupConfig=mgnt2CnfBackupConfig, mgnt2CfgSyslogEventEn=mgnt2CfgSyslogEventEn, mgnt2AlmswAlarm1=mgnt2AlmswAlarm1, mgnt2CfgMgntCriticalTrapEn=mgnt2CfgMgntCriticalTrapEn, mgnt2GigmManagerIpAddressTable=mgnt2GigmManagerIpAddressTable, mgnt2GigmGatewayOrder=mgnt2GigmGatewayOrder, mgnt2TrapGlobalPowerFail=mgnt2TrapGlobalPowerFail, mgnt2AlmFan4ModuleFail=mgnt2AlmFan4ModuleFail, Mgnt2MasterEthMode=Mgnt2MasterEthMode, mgnt2AlmPmSlot16Absent=mgnt2AlmPmSlot16Absent, mgnt2TrapBoardRemoved=mgnt2TrapBoardRemoved, mgnt2CfgcliAccess=mgnt2CfgcliAccess, mgnt2CnfDeleteConfigFile=mgnt2CnfDeleteConfigFile, mgnt2MibPartNumber=mgnt2MibPartNumber, mgnt2CfgftpMode=mgnt2CfgftpMode, mgnt2LoadPMEntry=mgnt2LoadPMEntry, mgnt2SlotStatus=mgnt2SlotStatus, mgnt2CfgfailCountReset=mgnt2CfgfailCountReset)
