#
# PySNMP MIB module CTRON-SFPS-DIRECTORY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTRON-SFPS-DIRECTORY-MIB
# Produced by pysmi-1.1.12 at Wed Nov  6 08:30:11 2024
# On host fv-az984-999 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
sfpsServiceCenter, sfpsTopologyDirStats, sfpsTopologyRemoteNodes, sfpsTopologyNodes, sfpsDirFilterAPI, sfpsTopologyAliases, sfpsTopologyDAPITest, sfpsTopologyDAPI = mibBuilder.importSymbols("CTRON-SFPS-INCLUDE-MIB", "sfpsServiceCenter", "sfpsTopologyDirStats", "sfpsTopologyRemoteNodes", "sfpsTopologyNodes", "sfpsDirFilterAPI", "sfpsTopologyAliases", "sfpsTopologyDAPITest", "sfpsTopologyDAPI")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Counter64, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, Bits, Counter32, NotificationType, TimeTicks, IpAddress, ObjectIdentity, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter64", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "Bits", "Counter32", "NotificationType", "TimeTicks", "IpAddress", "ObjectIdentity", "Unsigned32", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class SfpsSwitchPort(Integer32):
    pass

class SfpsAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class HexInteger(Integer32):
    pass

sfpsNodeTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1), )
if mibBuilder.loadTexts: sfpsNodeTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsNodeTable.setDescription('A table of bottom layer protocol addresses and related \n                information of recently or curently active nodes \n                (end-stations).  This table replaces the sfpsEndSystemTable.')
sfpsNodeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1), ).setIndexNames((0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsNodeTableBaseHash"), (0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsNodeTableHashIndex"))
if mibBuilder.loadTexts: sfpsNodeTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsNodeTableEntry.setDescription('Each entry contains information pertaining to recently or\n                currently active nodes.')
sfpsNodeTableBaseHash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableBaseHash.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsNodeTableBaseHash.setDescription('A hash of the sfpsNodeTableAddress used to identify the \n                instance.')
sfpsNodeTableHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableHashIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsNodeTableHashIndex.setDescription('A count of the non-unique sfpsNodeTableAddress hashes used to\n                identify the instance.')
sfpsNodeTableSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableSwitchType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsNodeTableSwitchType.setDescription('The address type of the bottom layer address.')
sfpsNodeTableSwitchAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableSwitchAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsNodeTableSwitchAddress.setDescription('The bottom layer address value.')
sfpsNodeTablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTablePort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsNodeTablePort.setDescription('The port on which the node was discovered.')
sfpsNodeTableBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableBaseType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsNodeTableBaseType.setDescription('The address type of the bottom layer address.')
sfpsNodeTableBaseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableBaseAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsNodeTableBaseAddress.setDescription('The bottom layer address value.')
sfpsNodeTableEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableEntryType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsNodeTableEntryType.setDescription('The type of entry represented.  This is determined\n                by the way in which the node was learned.')
sfpsNodeTableCallTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 9), HexInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableCallTag.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsNodeTableCallTag.setDescription('The tag, reference number, associated with the \n                packet responsible for the generation of this entry')
sfpsNodeTableLastHeard = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableLastHeard.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsNodeTableLastHeard.setDescription('The elapsed time since the node for this entry last\n                sourced a packet.')
sfpsNodeTableAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableAge.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsNodeTableAge.setDescription('The elapsed time since this entry was created.')
sfpsNodeTableAliasCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableAliasCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsNodeTableAliasCount.setDescription('The number of higher layer protocol addresses learned \n                about this node from the same packet it was discovered from.')
sfpsNodeTableVlanCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableVlanCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsNodeTableVlanCount.setDescription('The number of vlans to which this node is mapped.')
sfpsNodeTableNodeLocked = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableNodeLocked.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsNodeTableNodeLocked.setDescription('')
sfpsNodeTableNodeLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableNodeLocal.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsNodeTableNodeLocal.setDescription('')
sfpsNodeTableSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableSelf.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsNodeTableSelf.setDescription('')
sfpsNodeTableNext = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTableNext.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsNodeTableNext.setDescription('')
sfpsNodeTablePrev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 5, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNodeTablePrev.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsNodeTablePrev.setDescription('')
sfpsAliasTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1), )
if mibBuilder.loadTexts: sfpsAliasTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasTable.setDescription('A table of upper layer protocol addresses (aliases) and\n                abstract group names related to the bottom layer protocol \n                addresses (nodes) found in the sfpsNodeTable.  This table \n                replaces the sfpsEntitiesTable.')
sfpsAliasTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1), ).setIndexNames((0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsAliasTableAliasHash"), (0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsAliasTableBaseHash"), (0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsAliasTableHashIndex"))
if mibBuilder.loadTexts: sfpsAliasTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasTableEntry.setDescription('Each entry contains information pertaining to upper\n                layer protocol addresses.')
sfpsAliasTableAliasHash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableAliasHash.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasTableAliasHash.setDescription('A hash of the sfpsAliasTableAliasAddress used to \n                identify the instance.')
sfpsAliasTableBaseHash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableBaseHash.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasTableBaseHash.setDescription('A hash of the sfpsAliasTableNodeAddress used to\n                identify the instance.')
sfpsAliasTableHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableHashIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasTableHashIndex.setDescription('A count of the non-unique pairs of sfpsAliasTableAliasHash  \n                and sfpsAliasTableNodeHash used to identify the instance.')
sfpsAliasTableSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableSwitchType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasTableSwitchType.setDescription('The address type of the bottom layer address of the\n                switch on which this node was found.')
sfpsAliasTableSwitchAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableSwitchAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasTableSwitchAddress.setDescription('The bottom layer address value (formatted in printable \n                characters) of the switch on which this node was found.')
sfpsAliasTablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTablePort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasTablePort.setDescription('The port on which the node was discovered.')
sfpsAliasTableBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableBaseType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasTableBaseType.setDescription('The address type of the bottom layer address of the node.')
sfpsAliasTableBaseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableBaseAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasTableBaseAddress.setDescription('The bottom layer address value (formatted in printable \n                characters) of the node.')
sfpsAliasTableAliasType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableAliasType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasTableAliasType.setDescription('The address type of the higher layer address.')
sfpsAliasTableAliasAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableAliasAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasTableAliasAddress.setDescription('The higher layer address value formatted in\n                printable characters.')
sfpsAliasTableAliasAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableAliasAge.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasTableAliasAge.setDescription('The elapsed time since this alias was discovered and \n                made visible in this table.')
sfpsAliasTableSwitchOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableSwitchOctets.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasTableSwitchOctets.setDescription('The base address of the switch on which the node \n                associated with this alias entry was found.')
sfpsAliasTableBaseOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableBaseOctets.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasTableBaseOctets.setDescription('The bottom layer address of the node associated with\n                this alias entry.')
sfpsAliasTableAliasOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableAliasOctets.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasTableAliasOctets.setDescription('The higher layer address (alias), or the abstract \n                group value.')
sfpsAliasTableOpaqueTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableOpaqueTag.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasTableOpaqueTag.setDescription('An identifier for the type of alias this entry represents.')
sfpsAliasTableVlanPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("inherited", 2), ("autoRegistered", 3), ("static", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableVlanPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasTableVlanPolicy.setDescription('The way in which this user was assigned to a vlan. \n                Inherited(2) signifies that the user was assigned its vlan\n                based on the default for its port.  Auto-Registered(3)\n                indicates that the user was assigned to its vlan based on\n                packet analysis and vlan manager criteria. Static(4) signifies\n                the user was assigned its vlan by the vlan manager application.')
sfpsAliasTableBaseLock = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableBaseLock.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasTableBaseLock.setDescription('')
sfpsAliasTableAliasLock = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableAliasLock.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasTableAliasLock.setDescription('')
sfpsAliasTableAliasState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("remote", 2), ("local", 3), ("hidden", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableAliasState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasTableAliasState.setDescription('')
sfpsAliasTableSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableSelf.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasTableSelf.setDescription('')
sfpsAliasTableNext = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTableNext.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasTableNext.setDescription('')
sfpsAliasTablePrev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasTablePrev.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasTablePrev.setDescription('')
sfpsAliasDeltaTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 2), )
if mibBuilder.loadTexts: sfpsAliasDeltaTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasDeltaTable.setDescription('A table of of newly discovered/lost upper layer protocol \n                addresses (aliases) related to the bottom layer protocol \n                addresses (nodes) found in the sfpsNodeTable.')
sfpsAliasDeltaTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 2, 1), ).setIndexNames((0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsAliasDeltaTableIndex"))
if mibBuilder.loadTexts: sfpsAliasDeltaTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasDeltaTableEntry.setDescription('Each entry contains information pertaining to a newly\n                discovered or lost upper layer protocol addresses.')
sfpsAliasDeltaTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasDeltaTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasDeltaTableIndex.setDescription('The index into the table. This allows the server to\n                read the information and process it sequentially.')
sfpsAliasDeltaTablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasDeltaTablePort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasDeltaTablePort.setDescription('The port on which the node was discovered.')
sfpsAliasDeltaTableBase = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 2, 1, 3), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasDeltaTableBase.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasDeltaTableBase.setDescription('The bottom layer address value (MAC) of the node.')
sfpsAliasDeltaTableAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasDeltaTableAlias.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasDeltaTableAlias.setDescription('The higher layer address associated with the discovered node.')
sfpsAliasDeltaTableAliasLength = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasDeltaTableAliasLength.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasDeltaTableAliasLength.setDescription('The number of alias octets in sfpsAliasDeltaTableAliasOctets.')
sfpsAliasDeltaTableOpaqueTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasDeltaTableOpaqueTag.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasDeltaTableOpaqueTag.setDescription('A textual identifier for the type of alias this entry \n                represents.')
sfpsAliasDeltaTableAliasState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("added", 2), ("deleted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasDeltaTableAliasState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasDeltaTableAliasState.setDescription('This enumeration describes the state of the delta table entry.\n                A value of (2) indicates the entry has been added to the alias\n                table.  A value of (3) indicates the entry has been deleted \n                from the alias table.')
sfpsAliasDeltaTableNodeLock = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasDeltaTableNodeLock.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasDeltaTableNodeLock.setDescription('')
sfpsAliasDeltaTableAliasLock = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasDeltaTableAliasLock.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasDeltaTableAliasLock.setDescription('')
sfpsAliasDeltaTableTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasDeltaTableTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasDeltaTableTimestamp.setDescription('')
sfpsAliasDeltaCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasDeltaCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasDeltaCount.setDescription('A count of the number of entries in the alias delta table.')
sfpsAliasDeltaSetBack = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lock", 1), ("unlock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsAliasDeltaSetBack.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasDeltaSetBack.setDescription('Used to lock the table so that all the entries may be\n                read without additions or losses.  Then after the table\n                has been read the table is unlocked to clear those entries\n                which have been read and allow new entries to be added or\n                lost.')
sfpsAliasDeltaFullFlag = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("unfull", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAliasDeltaFullFlag.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAliasDeltaFullFlag.setDescription('')
sfpsDAPITestVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("delete", 3), ("resolve", 4), ("multiResolve", 5), ("fillDirectory", 6), ("ageDirectory", 7), ("mapVlanOnPort", 8), ("mapVlanOffPort", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPITestVerb.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPITestVerb.setDescription('Specifies the action to be initiated as a result of setting this leaf')
sfpsDAPITestSwitchMac = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 2), SfpsAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPITestSwitchMac.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPITestSwitchMac.setDescription("Specifies the actual user's MAC value for the action.")
sfpsDAPITestPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 3), SfpsSwitchPort()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPITestPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPITestPort.setDescription('Specifies the Source Port os a user when mapping a user')
sfpsDAPITestAddrOneTag = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("macDX", 1), ("ipxSap", 2), ("ipxRIP", 3), ("inetYP", 4), ("inetUDP", 5), ("ipxIpx", 6), ("inetIP", 7), ("inetRPC", 8), ("inetRIP", 9), ("macDXMcast", 10), ("atDDP", 11), ("empty", 12), ("vlan", 13), ("hostName", 14), ("netBiosName", 15), ("inetIPMask", 16), ("ipxSap8022", 17), ("ipxSapSnap", 18), ("ipxSapEnet", 19), ("ipxRip8022", 20), ("ipxRipSnap", 21), ("ipxRipEnet", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPITestAddrOneTag.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPITestAddrOneTag.setDescription('Indicates the Address tag of the user.')
sfpsDAPITestAddrOneValue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPITestAddrOneValue.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPITestAddrOneValue.setDescription('Indicates the Address value of the user.')
sfpsDAPITestAddrTwoTag = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("macDX", 1), ("ipxSap", 2), ("ipxRIP", 3), ("inetYP", 4), ("inetUDP", 5), ("ipxIpx", 6), ("inetIP", 7), ("inetRPC", 8), ("inetRIP", 9), ("macDXMcast", 10), ("atDDP", 11), ("empty", 12), ("vlan", 13), ("hostName", 14), ("netBiosName", 15), ("inetIPMask", 16), ("ipxSap8022", 17), ("ipxSapSnap", 18), ("ipxSapEnet", 19), ("ipxRip8022", 20), ("ipxRipSnap", 21), ("ipxRipEnet", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPITestAddrTwoTag.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPITestAddrTwoTag.setDescription('Indicates the address tag of the user.')
sfpsDAPITestAddrTwoValue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPITestAddrTwoValue.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPITestAddrTwoValue.setDescription('Indicates the Address value of the user')
sfpsDAPITestCallTag = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPITestCallTag.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPITestCallTag.setDescription('Specify the Call Tag value of the user.')
sfpsDAPITestOutputTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 9), )
if mibBuilder.loadTexts: sfpsDAPITestOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPITestOutputTable.setDescription('A Table of the DAPITest switch ports, both input and output.')
sfpsDAPITestOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 9, 1), ).setIndexNames((0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsDAPITestOutputIndex"))
if mibBuilder.loadTexts: sfpsDAPITestOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPITestOutputEntry.setDescription('Each entry contains information pertaining to a DAPITest\n            switch port.')
sfpsDAPITestOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDAPITestOutputIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPITestOutputIndex.setDescription('Index of entries in the DAPITest Output Table.')
sfpsDAPITestOutputSwitchMac = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 9, 1, 2), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDAPITestOutputSwitchMac.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPITestOutputSwitchMac.setDescription("Specifies the actual user's MAC value for the action.")
sfpsDAPITestOutputPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDAPITestOutputPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPITestOutputPort.setDescription('Specifies the Source Port of a user when mapping a user.')
sfpsDAPITestOutputAddrOneTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("macDX", 1), ("ipxSap", 2), ("ipxRIP", 3), ("inetYP", 4), ("inetUDP", 5), ("ipxIpx", 6), ("inetIP", 7), ("inetRPC", 8), ("inetRIP", 9), ("macDXMcast", 10), ("atDDP", 11), ("empty", 12), ("vlan", 13), ("hostName", 14), ("netBiosName", 15), ("inetIPMask", 16), ("ipxSap8022", 17), ("ipxSapSnap", 18), ("ipxSapEnet", 19), ("ipxRip8022", 20), ("ipxRipSnap", 21), ("ipxRipEnet", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDAPITestOutputAddrOneTag.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPITestOutputAddrOneTag.setDescription('Indicates the Address tag of the user.')
sfpsDAPITestOutputAddrOneValue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDAPITestOutputAddrOneValue.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPITestOutputAddrOneValue.setDescription('Indicates the address value of the user.')
sfpsDAPITestOutputAddrTwoTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("macDX", 1), ("ipxSap", 2), ("ipxRIP", 3), ("inetYP", 4), ("inetUDP", 5), ("ipxIpx", 6), ("inetIP", 7), ("inetRPC", 8), ("inetRIP", 9), ("macDXMcast", 10), ("atDDP", 11), ("empty", 12), ("vlan", 13), ("hostName", 14), ("netBiosName", 15), ("inetIPMask", 16), ("ipxSap8022", 17), ("ipxSapSnap", 18), ("ipxSapEnet", 19), ("ipxRip8022", 20), ("ipxRipSnap", 21), ("ipxRipEnet", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDAPITestOutputAddrTwoTag.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPITestOutputAddrTwoTag.setDescription('Indicates the address tag of the user.')
sfpsDAPITestOutputAddrTwoValue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 9, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDAPITestOutputAddrTwoValue.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPITestOutputAddrTwoValue.setDescription('Indicates the address value of the user.')
sfpsDAPITestOutputCallTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 9, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDAPITestOutputCallTag.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPITestOutputCallTag.setDescription('Specify the Call Tag value of the user.')
sfpsDAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("delete", 3), ("clearPort", 4), ("clearPortLocals", 5), ("clearSwitchRefs", 6), ("lockNode", 7), ("unlockNode", 8), ("restrictPort", 9), ("unrestrictPort", 10), ("ageNodes", 11), ("ageAliases", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPIVerb.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPIVerb.setDescription('Describes the action to perform with the information provided\n           in the other leafs of this MIB group.  This leaf should be set\n           last (after all other desired information is provided).')
sfpsDAPIPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPIPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPIPort.setDescription('Describes the port of the entry.')
sfpsDAPINodeType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 10, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPINodeType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPINodeType.setDescription('Describes the node type with a well-known string.')
sfpsDAPINodeValue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 10, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPINodeValue.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPINodeValue.setDescription('The value of the node address (i.e., base MAC) for this entry.')
sfpsDAPIAliasType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 10, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPIAliasType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPIAliasType.setDescription('Describes the alias type associated with this node. This must be\n           a well-known string.')
sfpsDAPIAliasValue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 10, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPIAliasValue.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPIAliasValue.setDescription('The value of the alias (i.e., protocol address) for this entry.')
sfpsDAPIAge = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 10, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDAPIAge.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDAPIAge.setDescription('In minutes')
sfpsServiceCenterDirectoryTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 3), )
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryTable.setDescription('This table gives directory semantics to call processing.')
sfpsServiceCenterDirectoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 3, 1), ).setIndexNames((0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsServiceCenterDirectoryHashLeaf"))
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryEntry.setDescription('Each entry contains the configuration of the Directory Entry.')
sfpsServiceCenterDirectoryHashLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 3, 1, 1), HexInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryHashLeaf.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryHashLeaf.setDescription('Server hash, part of instance key.')
sfpsServiceCenterDirectoryMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryMetric.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryMetric.setDescription('Defines order servers are called low to high.')
sfpsServiceCenterDirectoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryName.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryName.setDescription('Server name.')
sfpsServiceCenterDirectoryOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("kStatusRunning", 1), ("kStatusHalted", 2), ("kStatusPending", 3), ("kStatusFaulted", 4), ("kStatusNotStarted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryOperStatus.setDescription('Operational state of entry.')
sfpsServiceCenterDirectoryAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryAdminStatus.setDescription('Administrative State of Entry.')
sfpsServiceCenterDirectoryStatusTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 3, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryStatusTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryStatusTime.setDescription('Time Tick of last operStatus change.')
sfpsServiceCenterDirectoryRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryRequests.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryRequests.setDescription('Requests made to server.')
sfpsServiceCenterDirectoryResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryResponses.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterDirectoryResponses.setDescription('GOOD replies by server.')
sfpsTopologyDirStatsTotalUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsTotalUsage.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsTotalUsage.setDescription('Total number of bytes used by the Directory.')
sfpsTopologyDirStatsDynamicUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsDynamicUsage.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsDynamicUsage.setDescription('Total number of bytes dynamically used by the Directory.')
sfpsTopologyDirStatsNumOfNodes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsNumOfNodes.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsNumOfNodes.setDescription('Current number of nodes in the Directory.')
sfpsTopologyDirStatsNodeUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsNodeUsage.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsNodeUsage.setDescription('Total number of bytes used by the nodes.')
sfpsTopologyDirStatsNumLocalNodes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsNumLocalNodes.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsNumLocalNodes.setDescription('Number of nodes local to the switch.')
sfpsTopologyDirStatsLocalNodeUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsLocalNodeUsage.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsLocalNodeUsage.setDescription('Total number of bytes used by the local nodes.')
sfpsTopologyDirStatsMaxLocalNodes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsMaxLocalNodes.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsMaxLocalNodes.setDescription('The maximum number of local nodes that resided in Directory\n                since the switch initiated.')
sfpsTopologyDirStatsNumRemoteNodes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsNumRemoteNodes.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsNumRemoteNodes.setDescription('Number of remote nodes in the Directory.')
sfpsTopologyDirStatsRemoteNodeUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsRemoteNodeUsage.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsRemoteNodeUsage.setDescription('Total number of bytes used for the Remote nodes.')
sfpsTopologyDirStatsMaxRemoteNodes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsMaxRemoteNodes.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsMaxRemoteNodes.setDescription('The maximum number of remote nodes that resided in Directory\n                since the switch initiated.')
sfpsTopologyDirStatsNumOfAliases = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsNumOfAliases.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsNumOfAliases.setDescription('Number of aliases in the Directory. An alias is an entry\n                that maps to a node. It may be layer 3 information, Vlan \n                information, etc. There can be several alias entries which\n                bind to on node entry.')
sfpsTopologyDirStatsAliasUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsAliasUsage.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsAliasUsage.setDescription('Total number of bytes used by the aliases in the Directory.')
sfpsTopologyDirStatsStaticUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsStaticUsage.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsStaticUsage.setDescription('Total number of bytes statically used for Directory.')
sfpsTopologyDirStatsObjectsUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsObjectsUsage.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsObjectsUsage.setDescription('Total number of objects used in Directory.')
sfpsTopologyDirStatsNodeTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsNodeTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsNodeTableSize.setDescription('Total number of node entries in Node Table.')
sfpsTopologyDirStatsNodeTableUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsNodeTableUsage.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsNodeTableUsage.setDescription('Number of bytes used for Node Table.')
sfpsTopologyDirStatsAliasTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsAliasTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsAliasTableSize.setDescription('Total number of alias entries in Alias Table.')
sfpsTopologyDirStatsAliasTableUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsAliasTableUsage.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsAliasTableUsage.setDescription('Number of bytes used for Alias Table.')
sfpsTopologyDirStatsNodeCollisions = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsNodeCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsNodeCollisions.setDescription('Total number of collisions - Node Table.')
sfpsTopologyDirStatsNodeLongestChain = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsNodeLongestChain.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsNodeLongestChain.setDescription('')
sfpsTopologyDirStatsAliasCollisions = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsAliasCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsAliasCollisions.setDescription('Total number of collisions - Alias Table.')
sfpsTopologyDirStatsAliasLongestChain = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsAliasLongestChain.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsAliasLongestChain.setDescription('')
sfpsTopologyDirStatsLocalAddsRefused = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsLocalAddsRefused.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsLocalAddsRefused.setDescription('The number of adds into the Directory of local nodes which\n                were refused.')
sfpsTopologyDirStatsAliasRemotesReplaced = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsAliasRemotesReplaced.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsAliasRemotesReplaced.setDescription('The number of remote entries which had to be replaced in\n                the Directory.')
sfpsTopologyDirStatsAliasMultiPortClears = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsAliasMultiPortClears.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsAliasMultiPortClears.setDescription('The number of times the Directory entries were cleared for\n                multiple ports. Used for debugging.')
sfpsTopologyDirStatsReservedForRemoteNodes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsReservedForRemoteNodes.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsReservedForRemoteNodes.setDescription('The number of entries in the Directory reserved for Remote\n                nodes. Remote nodes may exceed this reserved area but if\n                the Directory becomes full from local nodes, then the remote\n                nodes will be cycled through this reserved area.')
sfpsTopologyDirStatsNumSwitches = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsNumSwitches.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsNumSwitches.setDescription('')
sfpsTopologyDirStatsSwitchUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsSwitchUsage.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsSwitchUsage.setDescription('')
sfpsTopologyDirStatsMaxSwitches = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsMaxSwitches.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsMaxSwitches.setDescription('')
sfpsTopologyDirStatsSwitchTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsSwitchTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsSwitchTableSize.setDescription('')
sfpsTopologyDirStatsSwitchTableUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsSwitchTableUsage.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsSwitchTableUsage.setDescription('')
sfpsTopologyDirStatsSwitchLookups = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsSwitchLookups.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsSwitchLookups.setDescription('')
sfpsTopologyDirStatsSwitchCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsSwitchCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsSwitchCacheHits.setDescription('')
sfpsTopologyDirStatsNumVlans = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsNumVlans.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsNumVlans.setDescription('')
sfpsTopologyDirStatsVlanUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsVlanUsage.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsVlanUsage.setDescription('')
sfpsTopologyDirStatsMaxVlans = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsMaxVlans.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsMaxVlans.setDescription('')
sfpsTopologyDirStatsVlanTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsVlanTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsVlanTableSize.setDescription('')
sfpsTopologyDirStatsVlanTableUsage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsVlanTableUsage.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsVlanTableUsage.setDescription('')
sfpsTopologyDirStatsVlanLookups = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsVlanLookups.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsVlanLookups.setDescription('')
sfpsTopologyDirStatsVlanCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsVlanCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsVlanCacheHits.setDescription('')
sfpsTopologyDirStatsNodeAliasMax = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsNodeAliasMax.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsNodeAliasMax.setDescription('')
sfpsTopologyDirStatsLocalAliasRefused = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsLocalAliasRefused.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsLocalAliasRefused.setDescription('')
sfpsTopologyDirStatsRemoteAliasRemoved = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyDirStatsRemoteAliasRemoved.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyDirStatsRemoteAliasRemoved.setDescription('')
sfpsDirAliasStatsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 13), )
if mibBuilder.loadTexts: sfpsDirAliasStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirAliasStatsTable.setDescription('')
sfpsDirAliasStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 13, 1), ).setIndexNames((0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsDirAliasStatsAliasType"))
if mibBuilder.loadTexts: sfpsDirAliasStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirAliasStatsEntry.setDescription('')
sfpsDirAliasStatsAliasType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirAliasStatsAliasType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirAliasStatsAliasType.setDescription('A number which correlates to an alias name.')
sfpsDirAliasStatsAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirAliasStatsAliasName.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirAliasStatsAliasName.setDescription('A human readable name which represents the Alias type.')
sfpsDirAliasStatsNumOfAliases = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirAliasStatsNumOfAliases.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirAliasStatsNumOfAliases.setDescription('The current number of alias entries of this AliasType.')
sfpsDirAliasStatsAliasUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirAliasStatsAliasUsage.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirAliasStatsAliasUsage.setDescription('The amount of memory (bytes) used by entries of this alias \n                type.')
sfpsDirAliasStatsMaxAliases = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 11, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirAliasStatsMaxAliases.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirAliasStatsMaxAliases.setDescription('The maximum number of entries of this Alias Type that have\n                been in the Directory.')
sfpsDirFilterAliasTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3), )
if mibBuilder.loadTexts: sfpsDirFilterAliasTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasTable.setDescription('')
sfpsDirFilterAliasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1), ).setIndexNames((0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsDirFilterAliasLockCount"), (0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsDirFilterAliasAliasHash"), (0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsDirFilterAliasBaseHash"), (0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsDirFilterAliasHashIndex"))
if mibBuilder.loadTexts: sfpsDirFilterAliasEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasEntry.setDescription('')
sfpsDirFilterAliasLockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasLockCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasLockCount.setDescription('')
sfpsDirFilterAliasAliasHash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasAliasHash.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasAliasHash.setDescription('')
sfpsDirFilterAliasBaseHash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasBaseHash.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasBaseHash.setDescription('')
sfpsDirFilterAliasHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasHashIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasHashIndex.setDescription('')
sfpsDirFilterAliasDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasDomain.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasDomain.setDescription('')
sfpsDirFilterAliasChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasChassisType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasChassisType.setDescription('')
sfpsDirFilterAliasChassisLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasChassisLoad.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasChassisLoad.setDescription('')
sfpsDirFilterAliasSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasSwitchType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasSwitchType.setDescription('')
sfpsDirFilterAliasSwitchLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasSwitchLoad.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasSwitchLoad.setDescription('')
sfpsDirFilterAliasInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasInPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasInPort.setDescription('')
sfpsDirFilterAliasBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasBaseType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasBaseType.setDescription('')
sfpsDirFilterAliasBaseLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasBaseLoad.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasBaseLoad.setDescription('')
sfpsDirFilterAliasNodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasNodeState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasNodeState.setDescription('')
sfpsDirFilterAliasNodeAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasNodeAge.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasNodeAge.setDescription('')
sfpsDirFilterAliasNodeLock = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked-to-port", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasNodeLock.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasNodeLock.setDescription('')
sfpsDirFilterAliasLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasLinkType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasLinkType.setDescription('')
sfpsDirFilterAliasLinkLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasLinkLoad.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasLinkLoad.setDescription('')
sfpsDirFilterAliasLinkAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 18), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasLinkAge.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasLinkAge.setDescription('')
sfpsDirFilterAliasLinkLock = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked-to-node", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasLinkLock.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasLinkLock.setDescription('')
sfpsDirFilterAliasVlanLearned = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("inherited", 2), ("amr", 3), ("static", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasVlanLearned.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasVlanLearned.setDescription('')
sfpsDirFilterAliasOpaqueTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasOpaqueTag.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasOpaqueTag.setDescription('')
sfpsDirFilterAliasChassisOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasChassisOctets.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasChassisOctets.setDescription('')
sfpsDirFilterAliasSwitchOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasSwitchOctets.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasSwitchOctets.setDescription('')
sfpsDirFilterAliasNodeOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasNodeOctets.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasNodeOctets.setDescription('')
sfpsDirFilterAliasLinkOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasLinkOctets.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasLinkOctets.setDescription('')
sfpsDirFilterAliasNodeLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasNodeLocal.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasNodeLocal.setDescription('')
sfpsDirFilterAliasLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("remote", 2), ("local", 3), ("hidden", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAliasLinkState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAliasLinkState.setDescription('')
sfpsDirFilterNodeTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2), )
if mibBuilder.loadTexts: sfpsDirFilterNodeTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeTable.setDescription('')
sfpsDirFilterNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1), ).setIndexNames((0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsDirFilterNodeLockCount"), (0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsDirFilterNodeNodeIndex"), (0, "CTRON-SFPS-DIRECTORY-MIB", "sfpsDirFilterNodeLinkIndex"))
if mibBuilder.loadTexts: sfpsDirFilterNodeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeEntry.setDescription('')
sfpsDirFilterNodeLockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeLockCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeLockCount.setDescription('')
sfpsDirFilterNodeNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeNodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeNodeIndex.setDescription('')
sfpsDirFilterNodeLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeLinkIndex.setDescription('')
sfpsDirFilterNodeNodeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeNodeCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeNodeCount.setDescription('')
sfpsDirFilterNodeLinkCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeLinkCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeLinkCount.setDescription('')
sfpsDirFilterNodeDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeDomainName.setDescription('')
sfpsDirFilterNodeChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeChassisType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeChassisType.setDescription('')
sfpsDirFilterNodeChassisLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeChassisLoad.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeChassisLoad.setDescription('')
sfpsDirFilterNodeSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeSwitchType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeSwitchType.setDescription('')
sfpsDirFilterNodeSwitchLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeSwitchLoad.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeSwitchLoad.setDescription('')
sfpsDirFilterNodeInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeInPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeInPort.setDescription('')
sfpsDirFilterNodeBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeBaseType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeBaseType.setDescription('')
sfpsDirFilterNodeBaseLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeBaseLoad.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeBaseLoad.setDescription('')
sfpsDirFilterNodeNodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeNodeState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeNodeState.setDescription('')
sfpsDirFilterNodeNodeAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeNodeAge.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeNodeAge.setDescription('')
sfpsDirFilterNodeNodeLock = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked-to-port", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeNodeLock.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeNodeLock.setDescription('')
sfpsDirFilterNodeLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeLinkType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeLinkType.setDescription('')
sfpsDirFilterNodeLinkLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeLinkLoad.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeLinkLoad.setDescription('')
sfpsDirFilterNodeLinkAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeLinkAge.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeLinkAge.setDescription('')
sfpsDirFilterNodeLinkLock = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked-to-node", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeLinkLock.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeLinkLock.setDescription('')
sfpsDirFilterNodeVlanLearned = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("inherit", 2), ("autoReg", 3), ("static", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeVlanLearned.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeVlanLearned.setDescription('')
sfpsDirFilterNodeOpaqueTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeOpaqueTag.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeOpaqueTag.setDescription('')
sfpsDirFilterNodeChassisOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeChassisOctets.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeChassisOctets.setDescription('')
sfpsDirFilterNodeSwitchOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeSwitchOctets.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeSwitchOctets.setDescription('')
sfpsDirFilterNodeNodeOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeNodeOctets.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeNodeOctets.setDescription('')
sfpsDirFilterNodeLinkOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeLinkOctets.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeLinkOctets.setDescription('')
sfpsDirFilterNodeNodeLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeNodeLocal.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeNodeLocal.setDescription('')
sfpsDirFilterNodeLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("remote", 2), ("local", 3), ("hidden", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterNodeLinkState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterNodeLinkState.setDescription('')
sfpsDirFilterAPILockAdmin = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("lock", 2), ("unlock", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirFilterAPILockAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAPILockAdmin.setDescription('')
sfpsDirFilterAPILockStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("locked", 2), ("unlocked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAPILockStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAPILockStatus.setDescription('')
sfpsDirFilterAPILockCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirFilterAPILockCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAPILockCount.setDescription('')
sfpsDirFilterAPIValueType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirFilterAPIValueType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAPIValueType.setDescription('')
sfpsDirFilterAPIValue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirFilterAPIValue.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAPIValue.setDescription('')
sfpsDirFilterAPILockTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirFilterAPILockTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAPILockTimeOut.setDescription('')
sfpsDirFilterAPILockTimeElapsed = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirFilterAPILockTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirFilterAPILockTimeElapsed.setDescription('')
mibBuilder.exportSymbols("CTRON-SFPS-DIRECTORY-MIB", sfpsAliasTableOpaqueTag=sfpsAliasTableOpaqueTag, sfpsDirFilterNodeChassisOctets=sfpsDirFilterNodeChassisOctets, sfpsTopologyDirStatsRemoteNodeUsage=sfpsTopologyDirStatsRemoteNodeUsage, sfpsTopologyDirStatsAliasTableUsage=sfpsTopologyDirStatsAliasTableUsage, sfpsDirFilterAliasLinkLock=sfpsDirFilterAliasLinkLock, sfpsDirFilterAliasNodeState=sfpsDirFilterAliasNodeState, sfpsDirFilterAliasSwitchLoad=sfpsDirFilterAliasSwitchLoad, sfpsDirFilterNodeLockCount=sfpsDirFilterNodeLockCount, sfpsNodeTableEntry=sfpsNodeTableEntry, sfpsAliasDeltaFullFlag=sfpsAliasDeltaFullFlag, sfpsNodeTablePort=sfpsNodeTablePort, sfpsTopologyDirStatsSwitchTableUsage=sfpsTopologyDirStatsSwitchTableUsage, sfpsServiceCenterDirectoryOperStatus=sfpsServiceCenterDirectoryOperStatus, sfpsTopologyDirStatsVlanTableUsage=sfpsTopologyDirStatsVlanTableUsage, sfpsDirFilterAliasChassisLoad=sfpsDirFilterAliasChassisLoad, sfpsAliasDeltaTableAliasLock=sfpsAliasDeltaTableAliasLock, sfpsDirAliasStatsTable=sfpsDirAliasStatsTable, sfpsDirFilterNodeNodeLock=sfpsDirFilterNodeNodeLock, sfpsAliasTableNext=sfpsAliasTableNext, sfpsNodeTableSwitchAddress=sfpsNodeTableSwitchAddress, sfpsDAPITestOutputEntry=sfpsDAPITestOutputEntry, sfpsTopologyDirStatsLocalAliasRefused=sfpsTopologyDirStatsLocalAliasRefused, sfpsDirFilterAliasLinkType=sfpsDirFilterAliasLinkType, sfpsDAPIAge=sfpsDAPIAge, sfpsAliasTableAliasAddress=sfpsAliasTableAliasAddress, sfpsTopologyDirStatsAliasMultiPortClears=sfpsTopologyDirStatsAliasMultiPortClears, sfpsNodeTable=sfpsNodeTable, sfpsDirFilterAliasNodeOctets=sfpsDirFilterAliasNodeOctets, sfpsDirFilterNodeBaseLoad=sfpsDirFilterNodeBaseLoad, sfpsTopologyDirStatsNumOfAliases=sfpsTopologyDirStatsNumOfAliases, sfpsAliasDeltaTableAliasState=sfpsAliasDeltaTableAliasState, sfpsDAPITestAddrOneTag=sfpsDAPITestAddrOneTag, sfpsDirFilterNodeLinkState=sfpsDirFilterNodeLinkState, SfpsAddress=SfpsAddress, sfpsDAPITestOutputAddrTwoValue=sfpsDAPITestOutputAddrTwoValue, sfpsAliasTableBaseType=sfpsAliasTableBaseType, sfpsTopologyDirStatsNodeCollisions=sfpsTopologyDirStatsNodeCollisions, sfpsNodeTableBaseType=sfpsNodeTableBaseType, sfpsServiceCenterDirectoryEntry=sfpsServiceCenterDirectoryEntry, sfpsTopologyDirStatsReservedForRemoteNodes=sfpsTopologyDirStatsReservedForRemoteNodes, sfpsTopologyDirStatsStaticUsage=sfpsTopologyDirStatsStaticUsage, sfpsAliasDeltaTable=sfpsAliasDeltaTable, sfpsDAPITestAddrOneValue=sfpsDAPITestAddrOneValue, HexInteger=HexInteger, sfpsTopologyDirStatsSwitchTableSize=sfpsTopologyDirStatsSwitchTableSize, sfpsAliasTableBaseAddress=sfpsAliasTableBaseAddress, sfpsAliasTableSwitchOctets=sfpsAliasTableSwitchOctets, sfpsDirFilterNodeLinkOctets=sfpsDirFilterNodeLinkOctets, sfpsNodeTableNodeLocal=sfpsNodeTableNodeLocal, sfpsDAPINodeType=sfpsDAPINodeType, sfpsTopologyDirStatsAliasTableSize=sfpsTopologyDirStatsAliasTableSize, sfpsDirFilterAliasBaseLoad=sfpsDirFilterAliasBaseLoad, sfpsDAPITestOutputTable=sfpsDAPITestOutputTable, sfpsAliasTableBaseOctets=sfpsAliasTableBaseOctets, sfpsDirFilterNodeLinkCount=sfpsDirFilterNodeLinkCount, sfpsTopologyDirStatsNumRemoteNodes=sfpsTopologyDirStatsNumRemoteNodes, sfpsTopologyDirStatsLocalAddsRefused=sfpsTopologyDirStatsLocalAddsRefused, sfpsDirAliasStatsAliasName=sfpsDirAliasStatsAliasName, sfpsNodeTablePrev=sfpsNodeTablePrev, sfpsDirFilterNodeNodeLocal=sfpsDirFilterNodeNodeLocal, sfpsAliasTablePort=sfpsAliasTablePort, sfpsTopologyDirStatsVlanUsage=sfpsTopologyDirStatsVlanUsage, sfpsTopologyDirStatsVlanCacheHits=sfpsTopologyDirStatsVlanCacheHits, sfpsAliasTableSwitchAddress=sfpsAliasTableSwitchAddress, sfpsDirFilterNodeLinkLock=sfpsDirFilterNodeLinkLock, sfpsDirFilterAliasTable=sfpsDirFilterAliasTable, sfpsAliasTableVlanPolicy=sfpsAliasTableVlanPolicy, sfpsDirFilterAPILockAdmin=sfpsDirFilterAPILockAdmin, sfpsDAPITestVerb=sfpsDAPITestVerb, sfpsDirAliasStatsMaxAliases=sfpsDirAliasStatsMaxAliases, sfpsDirFilterNodeNodeState=sfpsDirFilterNodeNodeState, sfpsAliasTableAliasHash=sfpsAliasTableAliasHash, sfpsTopologyDirStatsAliasRemotesReplaced=sfpsTopologyDirStatsAliasRemotesReplaced, sfpsDirFilterAliasLinkLoad=sfpsDirFilterAliasLinkLoad, sfpsDirFilterNodeNodeCount=sfpsDirFilterNodeNodeCount, sfpsDAPITestOutputSwitchMac=sfpsDAPITestOutputSwitchMac, sfpsServiceCenterDirectoryTable=sfpsServiceCenterDirectoryTable, sfpsTopologyDirStatsAliasCollisions=sfpsTopologyDirStatsAliasCollisions, sfpsDirFilterAliasAliasHash=sfpsDirFilterAliasAliasHash, sfpsAliasDeltaTableIndex=sfpsAliasDeltaTableIndex, sfpsAliasTableBaseLock=sfpsAliasTableBaseLock, sfpsTopologyDirStatsMaxVlans=sfpsTopologyDirStatsMaxVlans, sfpsAliasDeltaTableOpaqueTag=sfpsAliasDeltaTableOpaqueTag, sfpsDirFilterNodeTable=sfpsDirFilterNodeTable, sfpsTopologyDirStatsMaxLocalNodes=sfpsTopologyDirStatsMaxLocalNodes, sfpsDAPIAliasType=sfpsDAPIAliasType, sfpsNodeTableSwitchType=sfpsNodeTableSwitchType, sfpsNodeTableAge=sfpsNodeTableAge, sfpsTopologyDirStatsLocalNodeUsage=sfpsTopologyDirStatsLocalNodeUsage, sfpsAliasTableAliasState=sfpsAliasTableAliasState, sfpsDirFilterAliasOpaqueTag=sfpsDirFilterAliasOpaqueTag, sfpsDirFilterAliasNodeLocal=sfpsDirFilterAliasNodeLocal, sfpsDAPITestAddrTwoValue=sfpsDAPITestAddrTwoValue, sfpsAliasDeltaSetBack=sfpsAliasDeltaSetBack, sfpsTopologyDirStatsTotalUsage=sfpsTopologyDirStatsTotalUsage, sfpsDirAliasStatsAliasType=sfpsDirAliasStatsAliasType, sfpsTopologyDirStatsSwitchLookups=sfpsTopologyDirStatsSwitchLookups, sfpsDirFilterNodeBaseType=sfpsDirFilterNodeBaseType, sfpsDirFilterAliasLinkState=sfpsDirFilterAliasLinkState, sfpsNodeTableVlanCount=sfpsNodeTableVlanCount, sfpsDAPITestOutputCallTag=sfpsDAPITestOutputCallTag, sfpsDAPINodeValue=sfpsDAPINodeValue, sfpsTopologyDirStatsRemoteAliasRemoved=sfpsTopologyDirStatsRemoteAliasRemoved, sfpsAliasDeltaCount=sfpsAliasDeltaCount, sfpsNodeTableSelf=sfpsNodeTableSelf, sfpsNodeTableCallTag=sfpsNodeTableCallTag, sfpsTopologyDirStatsVlanLookups=sfpsTopologyDirStatsVlanLookups, sfpsDirFilterAPILockCount=sfpsDirFilterAPILockCount, sfpsDirFilterNodeNodeOctets=sfpsDirFilterNodeNodeOctets, sfpsDAPITestOutputAddrTwoTag=sfpsDAPITestOutputAddrTwoTag, sfpsDirFilterNodeLinkAge=sfpsDirFilterNodeLinkAge, sfpsDAPITestOutputIndex=sfpsDAPITestOutputIndex, sfpsDirFilterNodeEntry=sfpsDirFilterNodeEntry, sfpsServiceCenterDirectoryHashLeaf=sfpsServiceCenterDirectoryHashLeaf, sfpsTopologyDirStatsNodeAliasMax=sfpsTopologyDirStatsNodeAliasMax, sfpsServiceCenterDirectoryResponses=sfpsServiceCenterDirectoryResponses, sfpsDirFilterNodeOpaqueTag=sfpsDirFilterNodeOpaqueTag, sfpsTopologyDirStatsMaxRemoteNodes=sfpsTopologyDirStatsMaxRemoteNodes, sfpsDirFilterAliasDomain=sfpsDirFilterAliasDomain, sfpsDirFilterAliasChassisType=sfpsDirFilterAliasChassisType, sfpsDirFilterAliasBaseHash=sfpsDirFilterAliasBaseHash, sfpsDirFilterAPIValue=sfpsDirFilterAPIValue, sfpsAliasDeltaTableTimestamp=sfpsAliasDeltaTableTimestamp, sfpsDirFilterAliasNodeLock=sfpsDirFilterAliasNodeLock, sfpsNodeTableEntryType=sfpsNodeTableEntryType, sfpsDAPITestOutputPort=sfpsDAPITestOutputPort, sfpsDirFilterAliasNodeAge=sfpsDirFilterAliasNodeAge, sfpsTopologyDirStatsObjectsUsage=sfpsTopologyDirStatsObjectsUsage, sfpsTopologyDirStatsNodeLongestChain=sfpsTopologyDirStatsNodeLongestChain, sfpsNodeTableHashIndex=sfpsNodeTableHashIndex, sfpsNodeTableBaseHash=sfpsNodeTableBaseHash, sfpsAliasTableAliasOctets=sfpsAliasTableAliasOctets, sfpsDAPITestCallTag=sfpsDAPITestCallTag, sfpsDirAliasStatsNumOfAliases=sfpsDirAliasStatsNumOfAliases, sfpsTopologyDirStatsAliasUsage=sfpsTopologyDirStatsAliasUsage, sfpsDAPITestPort=sfpsDAPITestPort, sfpsTopologyDirStatsNumSwitches=sfpsTopologyDirStatsNumSwitches, sfpsDirFilterAliasLockCount=sfpsDirFilterAliasLockCount, sfpsDirFilterAliasBaseType=sfpsDirFilterAliasBaseType, sfpsDirFilterAPILockTimeOut=sfpsDirFilterAPILockTimeOut, sfpsTopologyDirStatsMaxSwitches=sfpsTopologyDirStatsMaxSwitches, sfpsDirFilterAliasLinkAge=sfpsDirFilterAliasLinkAge, sfpsDirFilterAliasInPort=sfpsDirFilterAliasInPort, sfpsServiceCenterDirectoryAdminStatus=sfpsServiceCenterDirectoryAdminStatus, sfpsNodeTableAliasCount=sfpsNodeTableAliasCount, sfpsDirFilterAliasChassisOctets=sfpsDirFilterAliasChassisOctets, sfpsDirFilterAPILockTimeElapsed=sfpsDirFilterAPILockTimeElapsed, sfpsDirFilterNodeLinkIndex=sfpsDirFilterNodeLinkIndex, sfpsDAPIAliasValue=sfpsDAPIAliasValue, sfpsDirFilterNodeDomainName=sfpsDirFilterNodeDomainName, sfpsNodeTableNext=sfpsNodeTableNext, sfpsAliasDeltaTableAliasLength=sfpsAliasDeltaTableAliasLength, sfpsAliasTablePrev=sfpsAliasTablePrev, sfpsDAPITestOutputAddrOneTag=sfpsDAPITestOutputAddrOneTag, sfpsDAPITestOutputAddrOneValue=sfpsDAPITestOutputAddrOneValue, sfpsTopologyDirStatsVlanTableSize=sfpsTopologyDirStatsVlanTableSize, sfpsDirAliasStatsEntry=sfpsDirAliasStatsEntry, sfpsTopologyDirStatsNodeTableSize=sfpsTopologyDirStatsNodeTableSize, sfpsDirFilterNodeSwitchOctets=sfpsDirFilterNodeSwitchOctets, sfpsAliasTableSwitchType=sfpsAliasTableSwitchType, sfpsTopologyDirStatsNodeTableUsage=sfpsTopologyDirStatsNodeTableUsage, sfpsDirFilterNodeLinkLoad=sfpsDirFilterNodeLinkLoad, sfpsAliasTableAliasLock=sfpsAliasTableAliasLock, sfpsTopologyDirStatsAliasLongestChain=sfpsTopologyDirStatsAliasLongestChain, sfpsDirFilterNodeLinkType=sfpsDirFilterNodeLinkType, sfpsDAPIPort=sfpsDAPIPort, sfpsAliasDeltaTableBase=sfpsAliasDeltaTableBase, sfpsDAPITestAddrTwoTag=sfpsDAPITestAddrTwoTag, sfpsTopologyDirStatsSwitchUsage=sfpsTopologyDirStatsSwitchUsage, sfpsAliasTable=sfpsAliasTable, sfpsAliasDeltaTablePort=sfpsAliasDeltaTablePort, sfpsServiceCenterDirectoryName=sfpsServiceCenterDirectoryName, sfpsDirFilterAPILockStatus=sfpsDirFilterAPILockStatus, sfpsTopologyDirStatsDynamicUsage=sfpsTopologyDirStatsDynamicUsage, sfpsAliasTableHashIndex=sfpsAliasTableHashIndex, sfpsAliasDeltaTableEntry=sfpsAliasDeltaTableEntry, sfpsDirFilterNodeChassisLoad=sfpsDirFilterNodeChassisLoad, sfpsServiceCenterDirectoryStatusTime=sfpsServiceCenterDirectoryStatusTime, sfpsDirFilterNodeInPort=sfpsDirFilterNodeInPort, sfpsServiceCenterDirectoryMetric=sfpsServiceCenterDirectoryMetric, sfpsServiceCenterDirectoryRequests=sfpsServiceCenterDirectoryRequests, sfpsAliasTableBaseHash=sfpsAliasTableBaseHash, sfpsDirFilterAliasLinkOctets=sfpsDirFilterAliasLinkOctets, sfpsDirFilterNodeSwitchType=sfpsDirFilterNodeSwitchType, sfpsTopologyDirStatsNumOfNodes=sfpsTopologyDirStatsNumOfNodes, sfpsDirFilterNodeSwitchLoad=sfpsDirFilterNodeSwitchLoad, sfpsDirFilterNodeChassisType=sfpsDirFilterNodeChassisType, sfpsNodeTableLastHeard=sfpsNodeTableLastHeard, sfpsTopologyDirStatsNodeUsage=sfpsTopologyDirStatsNodeUsage, sfpsAliasTableAliasType=sfpsAliasTableAliasType, sfpsDirFilterNodeNodeAge=sfpsDirFilterNodeNodeAge, sfpsDAPIVerb=sfpsDAPIVerb, sfpsDAPITestSwitchMac=sfpsDAPITestSwitchMac, sfpsDirFilterNodeNodeIndex=sfpsDirFilterNodeNodeIndex, sfpsDirFilterAliasHashIndex=sfpsDirFilterAliasHashIndex, sfpsNodeTableBaseAddress=sfpsNodeTableBaseAddress, sfpsTopologyDirStatsNumVlans=sfpsTopologyDirStatsNumVlans, sfpsDirFilterAliasVlanLearned=sfpsDirFilterAliasVlanLearned, sfpsDirFilterNodeVlanLearned=sfpsDirFilterNodeVlanLearned, sfpsDirFilterAliasSwitchOctets=sfpsDirFilterAliasSwitchOctets, sfpsDirFilterAliasSwitchType=sfpsDirFilterAliasSwitchType, SfpsSwitchPort=SfpsSwitchPort, sfpsAliasTableSelf=sfpsAliasTableSelf, sfpsDirAliasStatsAliasUsage=sfpsDirAliasStatsAliasUsage, sfpsAliasTableAliasAge=sfpsAliasTableAliasAge, sfpsDirFilterAliasEntry=sfpsDirFilterAliasEntry, sfpsAliasDeltaTableNodeLock=sfpsAliasDeltaTableNodeLock, sfpsAliasTableEntry=sfpsAliasTableEntry, sfpsAliasDeltaTableAlias=sfpsAliasDeltaTableAlias, sfpsTopologyDirStatsNumLocalNodes=sfpsTopologyDirStatsNumLocalNodes, sfpsNodeTableNodeLocked=sfpsNodeTableNodeLocked, sfpsTopologyDirStatsSwitchCacheHits=sfpsTopologyDirStatsSwitchCacheHits, sfpsDirFilterAPIValueType=sfpsDirFilterAPIValueType)
