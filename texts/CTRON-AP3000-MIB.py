#
# PySNMP MIB module CTRON-AP3000-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTRON-AP3000-MIB
# Produced by pysmi-1.1.12 at Wed May 29 10:55:22 2024
# On host fv-az1200-312 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Integer32, enterprises, iso, Bits, ModuleIdentity, Gauge32, MibIdentifier, Counter64, ObjectIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, mgmt, Counter32, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "enterprises", "iso", "Bits", "ModuleIdentity", "Gauge32", "MibIdentifier", "Counter64", "ObjectIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "mgmt", "Counter32", "IpAddress", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class DisplayString(OctetString):
    pass

class TruthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 1))
    namedValues = NamedValues(("false", 2), ("true", 1))

cabletron = MibIdentifier((1, 3, 6, 1, 4, 1, 52))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4))
ctronAP3000 = ModuleIdentity((1, 3, 6, 1, 4, 1, 52, 4, 13))
ctronAP3000.setRevisions(('2007-10-30 18:45',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ctronAP3000.setRevisionsDescriptions(("1. May 06,04, add the textual definition not_supported(2) in apRadioSecurityWPAMode in SYNTAX.\n  2. May 06,04, add 3's group :apEtherInterfaceMgnt,apVLANMgnt,apAuthenticationMgnt.\n  3. June 24,04,\n      -Add three elements(.1--.3) into apSecurityMgnt.apSecuritySsh\n      -Add two elements into apAuthenticationMgnt.apAuthenticationServerTable.apAuthenticationServerEntry as\n            apAuthenticationAcctPort  INTEGER\n            apAuthenticationAcctInterimUpdate   INTEGER\n      -Add four elements(.13--.16) into apRadioInterfaceMgnt.apRadioInterfaceTable.apRadioInterfaceEntry\n      -Add apRogueApMgnt.\n  4. July 05,04,\n      -Add apFilterControlMgnt.\n      -Add apWStationSessionMgnt.\n      -Add apAdminMgnt.\n      -Add apResetMgt.\n      -Add apSNTPMgnt.\n      -Add apDNSMgnt.\n      -Add apIappMgnt.\n      -Add apSyslogMgnt.\n      -Add apEventLogMgnt.\n      -Add one element-apMacFilterControl(.2) into macFilterMgnt.\n      -Rename 'snmpTrapMgnt' with 'apSnmpMgnt' with change the oid.\n      -Deprecate the trapDot11InterfaceAGFail in apSnmpMgnt.trapConfiguration.\n      -Add the trapDot11InterfaceAFail(.21) into apSnmpMgnt.trapConfiguration.\n      -Add the trapDot11InterfaceGFail(.22) into apSnmpMgnt.trapConfiguration.\n      -Add the three objects into apSnmpMgnt.\n            -the apSnmpTrapDestinationTable(.3)\n            -the apSnmpCommunityReadOnly(.4)\n            -the apSnmpCommunityReadWrite(.5)\n      -Add the dot11InterfaceAFail(.21) into apNotificationTrapObjects.\n      -Add the dot11InterfaceGFail(.22) into apNotificationTrapObjects.\n      -Add the dot11InterfaceAFail(.21) into apNotificationTrapObjects.\n      -Deprecate the apInterfaceVlanId_A in apVLANMgnt.\n      -Deprecate the apInterfaceVlanId_G in apVLANMgnt.\n      -Add the apNativeVlanTable into apVLANMgnt.\n  5.July 05,04\n      -Remove the Object deifnition-dot11InterfaceAGFail in apFilterControlMgnt.in apNotificationTrapTree.apNotificationTrapObjects.\n      -Add qosQueueingMode in qosMgnt.\n  6.July 22,04\n      -Add apWStationSessionVlanID in qosMgnt.apWStationSessionTable.apWStationSessionEntry.\n  7.August 30,04\n      -replace 'ENTERASYS-AP3000-PRIVATE-MIB' with 'CTRON-AP3000-MIB'\n      -Remove the object definition-'rogueApAuthenticate INTEGER' which is not implemented.\n      -Fix some syntax error.\n  8.September 01,04\n      -Add rogueApRADIUSAuthenticate into  apRogueApMgnt.apRougeApControl.\n  9. October 27,04\n      -Deprecated apRadioInterfaceTable from apRadioInterfaceMgnt.\n      -Add enterpriseApRadioTable and enterpriseApVapRadioTable into apRadioInterfaceMgnt.\n      -Add qosSVPStatus into qosMgnt.\n  10. November 10,04\n      -Add apVLANMgntEtherUntaggedVlanId into apVLANMgnt.\n      -Add apAuthenticationAcctState into apAuthenticationMgnt.apAuthenticationServerTable.\n  11. November 30,04\n      -Modify apRadioSecuritySharedKeyLen from Read-write to Read-Only in  apRadioInterfaceMgnt.apRadioSecurityTable.apRadioSecurityEntry.\n      -Redefine the SYNTAX of apAuthenticationServer from IpAddress to DisplayString (SIZE(1..32)) in\n       apAuthenticationMgnt.apAuthenticationServerTable.apAuthenticationServerEntry.\n      -Redefine the SYNTAX of apSyslogServerIPAddress from IpAddress to DisplayString (SIZE(1..32)) in\n       apSyslogConfigMgnt.apSyslogServerTable.ApSyslogServerEntry.\n  12. December 09,04\n      -Add vapAuthenticationTable in apAuthenticationMgnt.\n      -Add apvGlobalIBSSRelayMode in apFilterControlMgnt.\n      -Add apvFilterControlTable in apFilterControlMgnt.\n  13. December 29,04\n      -Add apvMacFilterOperateTable in macFilterMgnt.\n      -Add apvMacFilterTable in macFilterMgnt.\n      -Remark macFilterTable in macFilterMgnt.\n      -Remark apMacFilterControl in macFilterMgnt.\n  14. January 17,05\n      -Add the dot11WirelessSTPDetection Object in\n       apNotificationTrapTree.apNotificationTrapObjects\n  15. March 30,05\n      -typo error from stockhoim(25) to stockolm(25),\n      -Add apWSLSupportMgnt.\n  16. July 01,05\n      -Fix the description of the apAuthenticationServer in the apAuthenticationMgnt.apAuthenticationServerTable.\n  17. August 05,05\n      -Add enterpriseApRadioWdsTable in apRadioInterfaceMgnt.\n      -Add enterpriseApRadioWdsPeerTable in apRadioInterfaceMgnt.\n      -Add enterpriseApRadioWEPKeysTable in apRadioInterfaceMgnt.\n      -Add apvMACAuthenticationPasswd in apAuthenticationMgnt.apvAuthenticationSetupTable.\n      -Add apWSLSupportControlStatus in apWSLSupportMgnt.\n      -Add apWSLRFAreaPollControl in apWSLSupportMgnt.\n      -Add apWSLRFAreaPollControlStatus in apWSLSupportMgnt.\n  18. August 19,05\n      -obsolete apMacFilterControl in macFilterMgnt.\n      -update the description of wdsApRole.\n      -update the description of apWStationSessionTxByteCount and apWStationSessionRxByteCount.\n  20. August 26,05\n      -change enterpriseApVapRadioClosedSystem from enterpriseApVapRadioClosedSystem  in EnterpriseApVapRadioEntry.\n  21. September 09,05\n      -modify value list for apRadioSecurityWEPAuthType in apRadioSecurityEntry.\n      -obsolete apRadioSecurityWPACipher in apRadioSecurityEntry.\n      -add apRadioSecurityWPACipherSuite, apRadioApSecurityWPAPreAuthentication, apRadioApSecurityWPAPmksaLifetime in apRadioSecurityEntry.\n  22. September 23,05\n      -macFilterTable in macFilterMgnt should be remarked based on the record\n       on Dec 29,04. So make to be deprecated.\n      -apMacFilterControl in macFilterMgnt should be remarked based on the record\n       on Dec 29,04.  So make to be deprecated.\n  23. November 04,05\n      -modify from aes_ccmp(0) to aesccmp(0) in apRadioSecurityWEPAuthType in apRadioSecurityEntry.\n      -modify SYNTAX INTEGER from (1..64) to (0..255)in enterpriseApVapRadioMaxAssoc.\n      -Add wdsApAckTimeout into enterpriseApRadioWdsEntry.\n      -Add swProductName and swCountrySetting into sysEntity.\n      -Add enterpriseApRadioAvAntennaListTable apRadioInterfaceMgnt\n      -Add enterpriseApRadioAvAntennaListEntry apRadioInterfaceMgnt\n  24. November 11,05\n      -Add swWDSActivationKey into sysEntity.\n      -Modify SYNTAX INTEGER in enterpriseApRadioMulticastDataRate\n  25. November 15,05\n      -Add enterpriseApRadioAutoDataRate into EnterpriseApRadioEntry\n  26. December 06,05\n      -modify SYNTAX DisplayString (SIZE(0..20)) to (SIZE(0..64))in apAuthenticationKey.\n  27. December 09,05\n      -Add wdsPeerRSSI into EnterpriseApRadioWdsPeerEntry\n  28. January 10,06\n      -remove swWDSActivationKey from sysEntity.\n  29. January 18,06\n      -modify value list for wdsApRole in enterpriseApRadioWdsEntry.\n  30. February 15,06\n      -Add rogueApClear into apRougeApControl.\n  31. August 11,06\n      -Modify mib syntax follow SMIv2.\n      -Modify apvMacFilterActivity SYNTAX in ApvMacFilterEntry.\n      -Add apSnmpVersionFilter in apSnmpMgnt.\n      -Modify apRadioSecurityWEPAuthType SYNTAX in apRadioSecurityEntry.\n      -Modify enterpriseApRadioMulticastDataRate SYNTAX in EnterpriseApRadioEntry.\n  32. September 22,06\n      -Add apWMMMgnt.\n            -the apWMMControlTable(.1)\n            -the apWMMBssParamTable(.2)\n            -the apWMMApParamTable(.3)\n      -Modify SYNTAX DisplayString from (SIZE(1..6)) to (SIZE(1..17))in wdsPeerBssid.\n 33. January 15,07\n      -Redefine the SYNTAX of apAuthenticationServer from IpAddress to DisplayString (SIZE(1..64)) in apAuthenticationMgnt.apAuthenticationServerTable.apAuthenticationServerEntry.\n 34. April 10,07\n      -Add enterpriseApRadioPreamble in enterpriseApRadioEntry.\n 35. October 30,07\n      -Add enterpriseApRadioSWRetryMode in enterpriseApRadioEntry.\n     ",))
if mibBuilder.loadTexts: ctronAP3000.setLastUpdated('200710301845Z')
if mibBuilder.loadTexts: ctronAP3000.setOrganization('Enterasys Networks, Inc')
if mibBuilder.loadTexts: ctronAP3000.setContactInfo('Postal: Enterasys Networks\n             35 Industrial Way, P.O. Box 5005\n             Rochester, NH 03867-0505\n\n     Phone:  +1 603 332 9400\n     E-mail: support@enterasys.com\n     WWW:    http://www.enterasys.com')
if mibBuilder.loadTexts: ctronAP3000.setDescription('This mib module defines a portion of the SNMP enterprise\n         MIBs under Enterasys Networks enterprise OID as an extension\n         to the Enterasys AP3000 MIB.\n\n         This Enterasys Networks Proprietary MIB was designed to be\n         used for read-write access to configuration objects in AP3000.')
comPortMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 1))
macFilterMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 2))
qosMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 3))
linkQualityMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 4))
apSnmpMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 5))
sysEntity = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 6))
apSecurityMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 7))
apRadioInterfaceMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 8))
apEtherInterfaceMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 9))
apFilterControlMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 10))
apVLANMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 11))
apAuthenticationMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 12))
apWStationSessionMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 13))
apRogueApMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 14))
apAdminMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 15))
apResetMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 16))
apSNTPMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 17))
apDNSMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 18))
apIappMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 19))
apSyslogConfigMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 20))
apEventLogMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 21))
apWSLSupportMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 22))
apWMMMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 23))
apNotificationTrapTree = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 100))
apFilterControlBridge = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apFilterControlBridge.setStatus('current')
if mibBuilder.loadTexts: apFilterControlBridge.setDescription('This value indicates the local bridge filter setting.')
enterpriseApFilterControlAPManage = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApFilterControlAPManage.setStatus('current')
if mibBuilder.loadTexts: enterpriseApFilterControlAPManage.setDescription('This value indicates the AP management filter setting.')
enterpriseApFilterControlEthernet = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApFilterControlEthernet.setStatus('current')
if mibBuilder.loadTexts: enterpriseApFilterControlEthernet.setDescription('This value indicates the ethernet filter setting.')
enterpriseApFilterProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 10, 4), )
if mibBuilder.loadTexts: enterpriseApFilterProtocolTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseApFilterProtocolTable.setDescription('Table of descriptive and status information about\n                     configuration of the filter protocol table.')
enterpriseApFilterProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 10, 4, 1), ).setIndexNames((0, "CTRON-AP3000-MIB", "enterpriseApFilterProtocolIndex"))
if mibBuilder.loadTexts: enterpriseApFilterProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseApFilterProtocolEntry.setDescription('An entry in the filter protocol table, containing information\n                     about configuration of one filter table entry.')
enterpriseApFilterProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: enterpriseApFilterProtocolIndex.setStatus('current')
if mibBuilder.loadTexts: enterpriseApFilterProtocolIndex.setDescription('Index of the Protocol Filters.')
enterpriseApFilterProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 10, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApFilterProtocolName.setStatus('current')
if mibBuilder.loadTexts: enterpriseApFilterProtocolName.setDescription('This value indicates the name of the protocol filter.  One of\n                         the following:\n                         Aironet_DDP, Appletalk_ARP, ARP, Banyan, Berkeley_Trailer_Negotiation,\n                         CDP, DEC_LAT, DEC_MOP, DEC_MOP_Dump_Load, DEC_XNS, EAPOL,\n                         Enet_Config_Test, Ethertalk, IP, LAN_Test, NetBEUI, Novell_IPX(new),\n                         Novell_IPX(old), RARP, Telxon_TXP, X.25_Level3\n                        ')
enterpriseApFilterProtocolISODesignator = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 10, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApFilterProtocolISODesignator.setStatus('current')
if mibBuilder.loadTexts: enterpriseApFilterProtocolISODesignator.setDescription('This value indicates the name of the protocol filter.')
enterpriseApFilterProtocolState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApFilterProtocolState.setStatus('current')
if mibBuilder.loadTexts: enterpriseApFilterProtocolState.setDescription('This value indicates whether the protocol filter is enabled.')
apvGlobalIBSSRelayMode = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("perVapModeEnable", 1), ("allVapModeEnable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apvGlobalIBSSRelayMode.setStatus('current')
if mibBuilder.loadTexts: apvGlobalIBSSRelayMode.setDescription('This value indicates the setting of the global IBSS Relay mode among the VAPs.\n            In Per-VAP Mode enable, the traffic between the VAPs should be blocked.\n            In Al-VAP Mode enable, the traffic between should not be blocked.')
apvFilterControlTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 10, 6), )
if mibBuilder.loadTexts: apvFilterControlTable.setStatus('current')
if mibBuilder.loadTexts: apvFilterControlTable.setDescription('Table of the control and status information about\n                     configuration of the filter Control for each Vap.')
apvFilterControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 10, 6, 1), ).setIndexNames((0, "CTRON-AP3000-MIB", "apvFilterControlIndex"))
if mibBuilder.loadTexts: apvFilterControlEntry.setStatus('current')
if mibBuilder.loadTexts: apvFilterControlEntry.setDescription('An entry in the table, containing information\n                     about configuration of the filter for each Vap of the AP.')
apvFilterControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 10, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apvFilterControlIndex.setStatus('current')
if mibBuilder.loadTexts: apvFilterControlIndex.setDescription('Index of the configuration.')
apvIBSSFilterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 10, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apvIBSSFilterControl.setStatus('current')
if mibBuilder.loadTexts: apvIBSSFilterControl.setDescription('This value indicates the local bridge filter(IBSS Relay Filter) setting.')
apvAPManageFilterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 10, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apvAPManageFilterControl.setStatus('current')
if mibBuilder.loadTexts: apvAPManageFilterControl.setDescription('This value indicates the AP management filter setting.')
comPortControl = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comPortControl.setStatus('current')
if mibBuilder.loadTexts: comPortControl.setDescription('The administrative enable/disable state for\n        COM Port Control in a System.')
macFilterTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 2, 1), )
if mibBuilder.loadTexts: macFilterTable.setStatus('deprecated')
if mibBuilder.loadTexts: macFilterTable.setDescription('Table of status information about\n                     each configured MAC Filtering Entry.')
macFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 2, 1, 1), ).setIndexNames((0, "CTRON-AP3000-MIB", "macFilterIndex"))
if mibBuilder.loadTexts: macFilterEntry.setStatus('deprecated')
if mibBuilder.loadTexts: macFilterEntry.setDescription('An entry in the table, containing information\n                     about configuration of MAC Filter.')
macFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: macFilterIndex.setStatus('deprecated')
if mibBuilder.loadTexts: macFilterIndex.setDescription('Filter index.')
macFilterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 2, 1, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFilterAddress.setStatus('deprecated')
if mibBuilder.loadTexts: macFilterAddress.setDescription('This values indicates the MAC address of the\n            MAC Filter entry.')
macFilterAllowedToGo = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFilterAllowedToGo.setStatus('deprecated')
if mibBuilder.loadTexts: macFilterAllowedToGo.setDescription('The administrative allow/deny state for\n            that specified MAC Filter Entry.')
macFilterOpeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("other", 0), ("valid", 1), ("invalid", 2), ("create", 3))).clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macFilterOpeStatus.setStatus('deprecated')
if mibBuilder.loadTexts: macFilterOpeStatus.setDescription('This object indicates the status of this entry.\n            other(0) - this entry is currently in use but\n                the conditions under which it will remain\n                so differ from the following values.\n            valid(1) - this value to indicate this entry is currently\n                in used.\n            invalid(2) - write this value to the corresponding entry,\n                the whole entry will be removed. Since the order of entry\n                shall be re-order while it has been deleted. To re-freshed\n                the whole table is recommended for new index.\n            create(3) - write this value to indicate that the new MAC address\n                will be added after next writing MAC address to that new entry.\n                The adding action will be taken on the index that grater than 1.\n         ')
apMacFilterControl = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMacFilterControl.setStatus('deprecated')
if mibBuilder.loadTexts: apMacFilterControl.setDescription('This value indicates the control of the MAC filter setting.')
apvMacFilterOperateTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 2, 3), )
if mibBuilder.loadTexts: apvMacFilterOperateTable.setStatus('current')
if mibBuilder.loadTexts: apvMacFilterOperateTable.setDescription('The Table used to manage the function in\n                     MAC Filter Table.')
apvMacFilterOperateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: apvMacFilterOperateEntry.setStatus('current')
if mibBuilder.loadTexts: apvMacFilterOperateEntry.setDescription('An entry in the table, containing information\n                     about configuration in one VAP of the AP.')
apvMacFilterPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allowed", 1), ("denied", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apvMacFilterPermission.setStatus('current')
if mibBuilder.loadTexts: apvMacFilterPermission.setDescription('This values indicates the Permission on all the active\n             filter entry for each Vap. The negative permission will\n             be applied on any inactive entry or any MAC that is not\n             in the table.')
apvMacFilterAddressToAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 2, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apvMacFilterAddressToAdd.setStatus('current')
if mibBuilder.loadTexts: apvMacFilterAddressToAdd.setDescription('This values indicates the MAC address to be added to the\n            local MAC filter table as an active entry for each Vap.')
apvMacFilterTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 2, 4), )
if mibBuilder.loadTexts: apvMacFilterTable.setStatus('current')
if mibBuilder.loadTexts: apvMacFilterTable.setDescription('Table of status information about\n                     each configured MAC Address Filtering Entry.')
apvMacFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CTRON-AP3000-MIB", "apvMacFilterIndex"))
if mibBuilder.loadTexts: apvMacFilterEntry.setStatus('current')
if mibBuilder.loadTexts: apvMacFilterEntry.setDescription('An entry in the table, containing information\n                     about configuration in one radio of the AP.\n                     MacFilterEntry is created and managed using\n                     localMACFilterMgnt Table.')
apvMacFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apvMacFilterIndex.setStatus('current')
if mibBuilder.loadTexts: apvMacFilterIndex.setDescription('MAC Filter index in each VAP.')
apvMacFilterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 2, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apvMacFilterAddress.setStatus('current')
if mibBuilder.loadTexts: apvMacFilterAddress.setDescription('This values indicates the MAC address of the\n            filter entry.')
apvMacFilterActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allow", 1), ("denied", 2), ("deleteEntry", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apvMacFilterActivity.setStatus('current')
if mibBuilder.loadTexts: apvMacFilterActivity.setDescription('This value indicates the Activity of the MAC table\n             entry by the filter permission. If allow(1), the filter\n             permission will be applied to the MAC address.\n             If denied(2), the filter permission will not be applied\n             to the MAC address.\n             If delete_entry(3), the filter entry will be deleted.')
qosModeControl = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("qosoff", 1), ("qossa", 2), ("qosda", 3), ("qosether", 4), ("qos8021p", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosModeControl.setStatus('current')
if mibBuilder.loadTexts: qosModeControl.setDescription('The administrative status and control of the QoS mode for the QoS management.')
qosMACTypeTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 3, 2), )
if mibBuilder.loadTexts: qosMACTypeTable.setStatus('current')
if mibBuilder.loadTexts: qosMACTypeTable.setDescription('Table of status information about\n                     each configured MAC Type Entry for the QoS Management.')
qosMACTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 3, 2, 1), ).setIndexNames((0, "CTRON-AP3000-MIB", "qosMACTypeIndex"))
if mibBuilder.loadTexts: qosMACTypeEntry.setStatus('current')
if mibBuilder.loadTexts: qosMACTypeEntry.setDescription('An entry in the table, containing information\n                     about configuration MAC Type Entry for the QoS Management.')
qosMACTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: qosMACTypeIndex.setStatus('current')
if mibBuilder.loadTexts: qosMACTypeIndex.setDescription('Qos MAC Type index.')
qosMACTypeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 3, 2, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosMACTypeAddress.setStatus('current')
if mibBuilder.loadTexts: qosMACTypeAddress.setDescription('This values indicates the MAC address of that specified\n            index in the entry.')
qosMACTypePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosMACTypePriority.setStatus('current')
if mibBuilder.loadTexts: qosMACTypePriority.setDescription('This values indicates the level of priority of that specified\n            MAC Address in entry.')
qosMACTypeOpeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("other", 0), ("valid", 1), ("invalid", 2), ("create", 3))).clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosMACTypeOpeStatus.setStatus('current')
if mibBuilder.loadTexts: qosMACTypeOpeStatus.setDescription('This object indicates the status of this entry.\n            other(0) - this entry is currently in use but\n                the conditions under which it will remain\n                so differ from the following values.\n            valid(1) - this value to indicate this entry is currently\n                in used.\n            invalid(2) - write this value to the corresponding entry,\n                the whole entry will be removed. Since the order of entry\n                shall be re-order while it has been deleted. To re-freshed\n                the whole table is recommended for new index.\n            create(3) - write this value to indicate that the new MAC address\n                will be added after next writing MAC address to that new entry.\n                The adding action will be taken on the index that grater than 1.\n          ')
qosEtherTypeTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 3, 3), )
if mibBuilder.loadTexts: qosEtherTypeTable.setStatus('current')
if mibBuilder.loadTexts: qosEtherTypeTable.setDescription('Table of status information about\n                     each configured Ether Type Entry for QoS Management.')
qosEtherTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 3, 3, 1), ).setIndexNames((0, "CTRON-AP3000-MIB", "qosMACTypeIndex"))
if mibBuilder.loadTexts: qosEtherTypeEntry.setStatus('current')
if mibBuilder.loadTexts: qosEtherTypeEntry.setDescription('An entry in the table, containing information\n                     about configuration Ether Type for QoS Management.')
qosEtherTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: qosEtherTypeIndex.setStatus('current')
if mibBuilder.loadTexts: qosEtherTypeIndex.setDescription('Qos Ether Type index in the table.')
qosEtherTypeHexValue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 3, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosEtherTypeHexValue.setStatus('current')
if mibBuilder.loadTexts: qosEtherTypeHexValue.setDescription('The Hex Value to indicate the type of Ether of that specified\n            index in the entry.')
qosEtherTypePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosEtherTypePriority.setStatus('current')
if mibBuilder.loadTexts: qosEtherTypePriority.setDescription('This values indicates the level of priority of that specified\n            MAC Address in entry.')
qosEtherTypeOpeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("other", 0), ("valid", 1), ("invalid", 2), ("create", 3))).clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosEtherTypeOpeStatus.setStatus('current')
if mibBuilder.loadTexts: qosEtherTypeOpeStatus.setDescription('This object indicates the status of this entry.\n            other(0) - this entry is currently in use but\n                the conditions under which it will remain\n                so differ from the following values.\n            valid(1) - this value to indicate this entry is currently\n                in used.\n            invalid(2) - write this value to the corresponding entry,\n                the whole entry will be removed. Since the order of entry\n                shall be re-order while it has been deleted. To re-freshed\n                the whole table is recommended for new index.\n            create(3) - write this value to indicate that the new Ether Value\n                will be added after next writing Ether Type Value to that new entry.\n                The adding action will be taken on the index that grater than 1.\n          ')
qosQueueingMode = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("weighted-fair", 1), ("strict-priority", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosQueueingMode.setStatus('current')
if mibBuilder.loadTexts: qosQueueingMode.setDescription('The administrative control of the QoS Queuing mode for the QoS management.')
qosSVPStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosSVPStatus.setStatus('current')
if mibBuilder.loadTexts: qosSVPStatus.setDescription('The administrative enable/disable state for SVP.')
linkQualityTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 4, 1), )
if mibBuilder.loadTexts: linkQualityTable.setStatus('current')
if mibBuilder.loadTexts: linkQualityTable.setDescription('Table of status information about\n                     the radio Interface Link Quality Entry.')
linkQualityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 4, 1, 1), ).setIndexNames((0, "CTRON-AP3000-MIB", "linkQualityRadioIndex"), (0, "CTRON-AP3000-MIB", "linkQualityStaIndex"))
if mibBuilder.loadTexts: linkQualityEntry.setStatus('current')
if mibBuilder.loadTexts: linkQualityEntry.setDescription('An entry in the table, containing information\n                     about configuration of  the radio Interface Link Quality.')
linkQualityRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: linkQualityRadioIndex.setStatus('current')
if mibBuilder.loadTexts: linkQualityRadioIndex.setDescription('This is the value to define the index\n        of the radio interface.')
linkQualityStaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: linkQualityStaIndex.setStatus('current')
if mibBuilder.loadTexts: linkQualityStaIndex.setDescription('This is value to define the index\n        of link station.')
linkQualityStaMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 4, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkQualityStaMacAddress.setStatus('current')
if mibBuilder.loadTexts: linkQualityStaMacAddress.setDescription('This values indicates the MAC address of the\n            link station.')
linkQualityStaRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkQualityStaRssi.setStatus('current')
if mibBuilder.loadTexts: linkQualityStaRssi.setDescription('This values indicates the percentage RSSI of the\n            link station.')
trapControl = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapControl.setStatus('current')
if mibBuilder.loadTexts: trapControl.setDescription('The administrative enable/disable state for\n        SNMP Trap Control in a System.')
trapConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 2))
trapSysSystemUp = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapSysSystemUp.setStatus('current')
if mibBuilder.loadTexts: trapSysSystemUp.setDescription('The administrative enable/disable state for\n     SNMP sysSystemUp trap.')
trapSysSystemDown = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapSysSystemDown.setStatus('current')
if mibBuilder.loadTexts: trapSysSystemDown.setDescription('The administrative enable/disable state for\n     SNMP sysSystemDown trap.')
trapSysRadiusServerChanged = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapSysRadiusServerChanged.setStatus('current')
if mibBuilder.loadTexts: trapSysRadiusServerChanged.setDescription('The administrative enable/disable state for\n     SNMP sysRadiusServerChanged trap.')
trapDot11StationAssociation = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDot11StationAssociation.setStatus('current')
if mibBuilder.loadTexts: trapDot11StationAssociation.setDescription('The administrative enable/disable state for\n     SNMP dot11StationAssociation trap.')
trapDot11StationReAssociation = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDot11StationReAssociation.setStatus('current')
if mibBuilder.loadTexts: trapDot11StationReAssociation.setDescription('The administrative enable/disable state for\n     SNMP dot11StationReAssociation trap.')
trapDot11StationAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDot11StationAuthentication.setStatus('current')
if mibBuilder.loadTexts: trapDot11StationAuthentication.setDescription('The administrative enable/disable state for\n     SNMP dot11StationAuthentication trap.')
trapDot11StationRequestFail = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDot11StationRequestFail.setStatus('current')
if mibBuilder.loadTexts: trapDot11StationRequestFail.setDescription('The administrative enable/disable state for\n     SNMP dot11StationRequestFail trap.')
trapLocalMacAddrAuthFail = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapLocalMacAddrAuthFail.setStatus('current')
if mibBuilder.loadTexts: trapLocalMacAddrAuthFail.setDescription('The administrative enable/disable state for\n     SNMP localMacAddrAuthFail trap.')
trapLocalMacAddrAuthSuccess = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapLocalMacAddrAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: trapLocalMacAddrAuthSuccess.setDescription('The administrative enable/disable state for\n     SNMP localMacAddrAuthSuccess trap.')
trapDot1xAuthNotInitiated = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDot1xAuthNotInitiated.setStatus('current')
if mibBuilder.loadTexts: trapDot1xAuthNotInitiated.setDescription('The administrative enable/disable state for\n     SNMP dot1xAuthNotInitiated trap.')
trapDot1xAuthSuccess = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDot1xAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: trapDot1xAuthSuccess.setDescription('The administrative enable/disable state for\n     SNMP dot1xAuthSuccess trap.')
trapDot1xAuthFail = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDot1xAuthFail.setStatus('current')
if mibBuilder.loadTexts: trapDot1xAuthFail.setDescription('The administrative enable/disable state for\n     SNMP  dot1xAuthFail trap.')
trapDot1xMacAddrAuthSuccess = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDot1xMacAddrAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: trapDot1xMacAddrAuthSuccess.setDescription('The administrative enable/disable state for\n     SNMP dot1xMacAddrAuthSuccess trap.')
trapDot1xMacAddrAuthFail = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDot1xMacAddrAuthFail.setStatus('current')
if mibBuilder.loadTexts: trapDot1xMacAddrAuthFail.setDescription('The administrative enable/disable state for\n     SNMP dot1xMacAddrAuthFail trap.')
trapPppLogonFail = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapPppLogonFail.setStatus('current')
if mibBuilder.loadTexts: trapPppLogonFail.setDescription('The administrative enable/disable state for\n     SNMP pppLogonFail trap.')
trapIappStationRoamedFrom = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIappStationRoamedFrom.setStatus('current')
if mibBuilder.loadTexts: trapIappStationRoamedFrom.setDescription('The administrative enable/disable state for\n     SNMP iappStationRoamedFrom trap.')
trapIappStationRoamedTo = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIappStationRoamedTo.setStatus('current')
if mibBuilder.loadTexts: trapIappStationRoamedTo.setDescription('The administrative enable/disable state for\n     SNMP iappStationRoamedFrom trap.')
trapIappContextDataSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIappContextDataSent.setStatus('current')
if mibBuilder.loadTexts: trapIappContextDataSent.setDescription('The administrative enable/disable state for\n     SNMP iappContextDataSent trap.')
trapSntpServerFail = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapSntpServerFail.setStatus('current')
if mibBuilder.loadTexts: trapSntpServerFail.setDescription('The administrative enable/disable state for\n     SNMP sntpServerFail trap.')
trapDot11InterfaceAFail = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDot11InterfaceAFail.setStatus('current')
if mibBuilder.loadTexts: trapDot11InterfaceAFail.setDescription('The administrative enable/disable state for\n     SNMP dot11InterfaceAFail trap.')
trapDot11InterfaceGFail = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDot11InterfaceGFail.setStatus('current')
if mibBuilder.loadTexts: trapDot11InterfaceGFail.setDescription('The administrative enable/disable state for\n     SNMP dot11InterfaceGFail trap.')
trapDot11WirelessSTPDetection = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDot11WirelessSTPDetection.setStatus('current')
if mibBuilder.loadTexts: trapDot11WirelessSTPDetection.setDescription('The administrative enable/disable state for\n     SNMP dot11WirelessSTPDetection trap.')
apSnmpTrapDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 3), )
if mibBuilder.loadTexts: apSnmpTrapDestinationTable.setStatus('current')
if mibBuilder.loadTexts: apSnmpTrapDestinationTable.setDescription('Table of descriptive and status information about\n                     configuration of each trap receiving server.')
apSnmpTrapDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 3, 1), ).setIndexNames((0, "CTRON-AP3000-MIB", "apSnmpTrapDestinationIndex"))
if mibBuilder.loadTexts: apSnmpTrapDestinationEntry.setStatus('current')
if mibBuilder.loadTexts: apSnmpTrapDestinationEntry.setDescription('An entry in the table, containing information\n                     about configuration of one trap receiving server.')
apSnmpTrapDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: apSnmpTrapDestinationIndex.setStatus('current')
if mibBuilder.loadTexts: apSnmpTrapDestinationIndex.setDescription('Index of the Trap Destination Table.')
apSnmpTrapDestinationCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSnmpTrapDestinationCommunity.setStatus('current')
if mibBuilder.loadTexts: apSnmpTrapDestinationCommunity.setDescription('The SNMP Trap Community')
apSnmpTrapDestinationIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSnmpTrapDestinationIP.setStatus('current')
if mibBuilder.loadTexts: apSnmpTrapDestinationIP.setDescription('The IP address of the trap receiving server.')
apSnmpTrapDestinationState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSnmpTrapDestinationState.setStatus('current')
if mibBuilder.loadTexts: apSnmpTrapDestinationState.setDescription('This value indicates whether the trap receiving server is enabled.')
apSnmpCommunityReadOnly = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSnmpCommunityReadOnly.setStatus('current')
if mibBuilder.loadTexts: apSnmpCommunityReadOnly.setDescription('The SNMP Read Only Community.  The value if read,\n                     will only show ******.')
apSnmpCommunityReadWrite = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSnmpCommunityReadWrite.setStatus('current')
if mibBuilder.loadTexts: apSnmpCommunityReadWrite.setDescription('The SNMP Read Write Community.  The value if read,\n                     will only show *****.')
apSnmpVersionFilter = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enableSNMPv1SNMPv2c", 1), ("disableSNMPv1SNMPv2c", 2))).clone('enableSNMPv1SNMPv2c')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSnmpVersionFilter.setStatus('current')
if mibBuilder.loadTexts: apSnmpVersionFilter.setDescription('To set the version-filter of SNMP.')
swHardwareVer = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swHardwareVer.setStatus('current')
if mibBuilder.loadTexts: swHardwareVer.setDescription('Hardware version of the main board.')
swBootRomVer = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBootRomVer.setStatus('current')
if mibBuilder.loadTexts: swBootRomVer.setDescription('Boot ROM code version of the main board.')
swOpCodeVer = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swOpCodeVer.setStatus('current')
if mibBuilder.loadTexts: swOpCodeVer.setDescription('Operation code version of the main board.')
swSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSerialNumber.setStatus('current')
if mibBuilder.loadTexts: swSerialNumber.setDescription('Serial Number of the Access Point.')
swProductName = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 6, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProductName.setStatus('current')
if mibBuilder.loadTexts: swProductName.setDescription('The Product Name of the Access Point.')
swCountrySetting = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 6, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCountrySetting.setStatus('current')
if mibBuilder.loadTexts: swCountrySetting.setDescription('The current CountryCode Setting of the Access Point.')
apRadioSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 7, 1), )
if mibBuilder.loadTexts: apRadioSecurityTable.setStatus('current')
if mibBuilder.loadTexts: apRadioSecurityTable.setDescription('Table of descriptive and status information about\n                     configuration of each radio in terms of security settings.')
apRadioSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 7, 1, 1), ).setIndexNames((0, "CTRON-AP3000-MIB", "apRadioSecurityIndex"))
if mibBuilder.loadTexts: apRadioSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: apRadioSecurityEntry.setDescription('An entry in the table, containing information\n                     about configuration of one radio of the AP.')
apRadioSecurityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apRadioSecurityIndex.setStatus('current')
if mibBuilder.loadTexts: apRadioSecurityIndex.setDescription('Radio Index for security settings.')
apRadioSecurityWEPAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("opensystem", 0), ("sharedkey", 1), ("wpa", 2), ("wpapsk", 3), ("wpawpa2mixed", 4), ("wpawpa2pskmixed", 5), ("wpa2", 6), ("wpa2psk", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSecurityWEPAuthType.setStatus('current')
if mibBuilder.loadTexts: apRadioSecurityWEPAuthType.setDescription('This value indicates the type of WEP authentication in use for this radio interface.\n                                                        opensystem(0)         Set authentication open\n                                                        sharedkey(1)          Set authentication shared\n                                                        wpa(2)                Set WPA Mode\n                                                        wpapsk(3)             Set WPA-PSK Mode\n                                                        wpa-wpa2-mixed(4)     Set WPA-WPA2-Mixed Mode\n                                                        wpawpa2pskmixed(5)    Set WPA-WPA2 PSK Mixed Mode\n                                                        wpa2(6)               Set WPA2 Mode\n                                                        wpa2psk(7)            Set WPA2-PSK Mode\n            ')
apRadioSecuritySharedKeyLen = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("sixtyFour", 1), ("oneHundredTwentyEight", 2), ("oneHundredFiftyTwo", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioSecuritySharedKeyLen.setStatus('current')
if mibBuilder.loadTexts: apRadioSecuritySharedKeyLen.setDescription('This value indicates the shared key length for this radio interface.')
apRadioSecurityWPAMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("supported", 0), ("required", 1), ("notSupported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSecurityWPAMode.setStatus('current')
if mibBuilder.loadTexts: apRadioSecurityWPAMode.setDescription('This value indicates the state of WPA for this radio interface.')
apRadioSecurityWPAKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dot1x", 0), ("presharedkey", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSecurityWPAKeyType.setStatus('current')
if mibBuilder.loadTexts: apRadioSecurityWPAKeyType.setDescription('This value indicates the type of WPA Key Management in use for this radio interface.')
apRadioSecurityWPACipher = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("wep", 0), ("tkip", 1), ("aes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSecurityWPACipher.setStatus('obsolete')
if mibBuilder.loadTexts: apRadioSecurityWPACipher.setDescription('This value indicates the type of WPA Cipher in use for this radio interface.')
apRadioSecurityWPAPSKType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hex", 0), ("alphanumeric", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSecurityWPAPSKType.setStatus('current')
if mibBuilder.loadTexts: apRadioSecurityWPAPSKType.setDescription('This value indicates the type of WPA Pre Shared Key in use for this radio interface.')
apRadioSecurityWPAPSK = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 7, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSecurityWPAPSK.setStatus('current')
if mibBuilder.loadTexts: apRadioSecurityWPAPSK.setDescription('This value indicates WPA Pre Shared Key in use for this radio interface.')
apRadioSecurityWEPKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hexadecimal", 0), ("alphanumeric", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSecurityWEPKeyType.setStatus('current')
if mibBuilder.loadTexts: apRadioSecurityWEPKeyType.setDescription('This value indicates the type of WEP Key in use for this radio interface.')
apRadioSecurityWEPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 7, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSecurityWEPEnabled.setStatus('current')
if mibBuilder.loadTexts: apRadioSecurityWEPEnabled.setDescription('This value indicates whether WEP is enabled.')
apRadioSecurityWPACipherSuite = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("aesccmp", 0), ("tkip", 1), ("wep", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSecurityWPACipherSuite.setStatus('current')
if mibBuilder.loadTexts: apRadioSecurityWPACipherSuite.setDescription('This value indicates the type of WPA Cipher Suite in use for this radio interface.')
apRadioApSecurityWPAPreAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioApSecurityWPAPreAuthentication.setStatus('current')
if mibBuilder.loadTexts: apRadioApSecurityWPAPreAuthentication.setDescription('Whether Pre-Authentication is enabled.')
apRadioApSecurityWPAPmksaLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioApSecurityWPAPmksaLifetime.setStatus('current')
if mibBuilder.loadTexts: apRadioApSecurityWPAPmksaLifetime.setDescription('The number (in minutes) for Pmksa-Lifetime.')
apSecuritySsh = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 7, 2))
apSecuritySshServerEnabled = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 7, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSecuritySshServerEnabled.setStatus('current')
if mibBuilder.loadTexts: apSecuritySshServerEnabled.setDescription('This value indicates whether SSH server is enabled.')
apSecuritySshServerPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 7, 2, 2), Integer32().clone(22)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSecuritySshServerPort.setStatus('current')
if mibBuilder.loadTexts: apSecuritySshServerPort.setDescription("This value indicates SSH server's port number.")
apSecuritySshTelnetServerEnabled = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 7, 2, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSecuritySshTelnetServerEnabled.setStatus('current')
if mibBuilder.loadTexts: apSecuritySshTelnetServerEnabled.setDescription('This value indicates whether telnet server is enabled.')
enterpriseApRadioTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 2), )
if mibBuilder.loadTexts: enterpriseApRadioTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioTable.setDescription('Table of descriptive and status information about\n                     configuration of each radio.')
enterpriseApRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 2, 1), ).setIndexNames((0, "CTRON-AP3000-MIB", "enterpriseApRadioIndex"))
if mibBuilder.loadTexts: enterpriseApRadioEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioEntry.setDescription('An entry in the table, containing information\n                     about configuration of one radio of the AP.')
enterpriseApRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: enterpriseApRadioIndex.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioIndex.setDescription('Radio Index for configuration.')
enterpriseApRadioAutoChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioAutoChannel.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioAutoChannel.setDescription('This value indicates whether auto channel selection is enabled or not\n                         for this radio interface')
enterpriseApRadioTransmitPower = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("quarter", 3), ("eighth", 4), ("min", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioTransmitPower.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioTransmitPower.setDescription('This value indicates the transmit power for this radio interface.')
enterpriseApRadioTurboMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioTurboMode.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioTurboMode.setDescription('This value indicates whether turbo mode is enabled for this radio interface.')
enterpriseApRadioDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 9, 11, 12, 18, 24, 36, 48, 54, 255))).clone(namedValues=NamedValues(("oneMbps", 1), ("twoMbps", 2), ("fiveAndHalfMbps", 5), ("sixMbps", 6), ("nineMbps", 9), ("elevenMbps", 11), ("twelveMbps", 12), ("eighteenMbps", 18), ("twentyFourMbps", 24), ("thirtySixMbps", 36), ("fourtyEightMbps", 48), ("fiftyFourMbps", 54), ("auto", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioDataRate.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioDataRate.setDescription('This value indicates the data rate for this radio interface.\n                        Radio interface A operates at 6, 9, 12, 18, 24, 36, 48, 54.\n            Radio interface G operates all listed data rates.   The auto\n                        setting will attempt to set the best data rate for the interface')
enterpriseApRadioGMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bOnly", 1), ("gOnly", 2), ("bg", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioGMode.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioGMode.setDescription('This value indicates the radio mode for the 802.11g radio.\n                        This setting is only valid for the 802.11g interface.')
enterpriseApRadioAntennaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("left", 2), ("right", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioAntennaMode.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioAntennaMode.setDescription('This value indicates the antenna mode in use for the G-radio.\n                         The values are interpreted as follows:\n                                both(1) means use both built-in antennas,\n                                left(2) means use left side.\n                                right(3) means use right side.\n                                invalid(4) means not support.\n                        This setting is only valid for the 802.11g interface.')
rogueApState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rogueApState.setStatus('current')
if mibBuilder.loadTexts: rogueApState.setDescription('This value is used to enable/disable Rogue Ap Detection for\n                        this radio interface.')
rogueApInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 10080))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rogueApInterval.setStatus('current')
if mibBuilder.loadTexts: rogueApInterval.setDescription('How often to scan for Rogue Aps.  The interval in minutes, with default\n                        of 720(minutes).')
rogueApDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rogueApDuration.setStatus('current')
if mibBuilder.loadTexts: rogueApDuration.setDescription('How long to scan each channel (in milliseconds).   A longer duration will yield more\n                        complete results. A shorter duration will allow clients a better chance\n                        of remaining connected.  Default value is 350(milliseconds).')
rogueApScanNow = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rogueApScanNow.setStatus('current')
if mibBuilder.loadTexts: rogueApScanNow.setDescription('When writing the value to enable, the AP will trigger the Rouge AP scan function.\n             The value will always return disable(2).')
enterpriseApRadioAntennaModeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("external", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApRadioAntennaModeControl.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioAntennaModeControl.setDescription('This value indicates which antenna is in use for the radio Interface.\n                         The values are interpreted as follows:\n                                fixed(1) specify to use built-in antennas,\n                                external(2) specify to use one external antenna.\n                        ')
enterpriseApRadioFixedAntennaType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("diversity", 1), ("left", 2), ("right", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioFixedAntennaType.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioFixedAntennaType.setDescription('This value indicates which antenna type is in use\n             as the fixed antenna is selected.\n                        ')
enterpriseApRadioAntennaID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioAntennaID.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioAntennaID.setDescription('This value indicates which antenna ID will be in use for the radio Interface.\n                        ')
enterpriseApRadioMulticastDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 9, 11, 12, 18, 24, 36, 48, 54))).clone(namedValues=NamedValues(("oneMbps", 1), ("twoMbps", 2), ("fiveAndHalfMbps", 5), ("sixMbps", 6), ("nineMbps", 9), ("elevenMbps", 11), ("twelveMbps", 12), ("eighteenMbps", 18), ("twentyFourMbps", 24), ("thirtySixMbps", 36), ("fortyEightMbps", 48), ("fiftyFourMbps", 54)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioMulticastDataRate.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioMulticastDataRate.setDescription('This value indicates the data rate for mc/bc packets from this\n            radio interface. sixMbps(6), nineMbps(9), twelveMbps(12), eighteenMbps(18),\n            twentyFourMbps(24), thirtySixMbps(36), fortyEightMbps(48), and fiftyFourMbps(54)\n            are for 11a and g-only mode. The default for b-only and b+g mode is\n            oneMbps(1),  twoMbps(2), fiveAndHalfMbps(5) and elevenMbps(11).')
enterpriseApRadioAutoDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioAutoDataRate.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioAutoDataRate.setDescription('This value indicates whether automated data rate is enabled or not\n                         for this radio interface')
enterpriseApRadioPreamble = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("long", 1), ("short", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioPreamble.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioPreamble.setDescription('This value indicates the preamble length of 11g.\n                         The values are interpreted as follows:\n                                long(1) sets the preamble length to long.\n                                short(2) sets the preamble length to short.\n                                invalid(3) means not support.\n                        This setting is only valid for the 802.11g interface.')
enterpriseApRadioSWRetryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioSWRetryMode.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioSWRetryMode.setDescription('This value indicates whether SW retty mode  is enabled or not\n                         for this radio interface')
enterpriseApVapRadioTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 3), )
if mibBuilder.loadTexts: enterpriseApVapRadioTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseApVapRadioTable.setDescription('Table of descriptive and status information about\n                     configuration of each Vap radio.')
enterpriseApVapRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 3, 1), ).setIndexNames((0, "CTRON-AP3000-MIB", "enterpriseApVapRadioIndex"))
if mibBuilder.loadTexts: enterpriseApVapRadioEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseApVapRadioEntry.setDescription('An entry in the table, containing information\n                     about configuration of one Vap radio of the AP.')
enterpriseApVapRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: enterpriseApVapRadioIndex.setStatus('current')
if mibBuilder.loadTexts: enterpriseApVapRadioIndex.setDescription('Radio Index for configuration.')
enterpriseApVapRadioState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApVapRadioState.setStatus('current')
if mibBuilder.loadTexts: enterpriseApVapRadioState.setDescription('This value indicates the state of the radio interface.')
enterpriseApVapRadioSecureAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApVapRadioSecureAccess.setStatus('current')
if mibBuilder.loadTexts: enterpriseApVapRadioSecureAccess.setDescription('This value indicates whether secure access is enabled for this radio interface.')
enterpriseApVapRadioMaxAssoc = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApVapRadioMaxAssoc.setStatus('current')
if mibBuilder.loadTexts: enterpriseApVapRadioMaxAssoc.setDescription('This value indicates the max number of clients allowed on this radio interface.')
enterpriseApVapRadioTransmitKey = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApVapRadioTransmitKey.setStatus('current')
if mibBuilder.loadTexts: enterpriseApVapRadioTransmitKey.setDescription('This value indicates default transmit key in use for this radio interface.')
enterpriseApVapRadioDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApVapRadioDescription.setStatus('current')
if mibBuilder.loadTexts: enterpriseApVapRadioDescription.setDescription('This value indicates the description for this radio interface.')
enterpriseApVapRadioDefefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApVapRadioDefefaultPriority.setStatus('current')
if mibBuilder.loadTexts: enterpriseApVapRadioDefefaultPriority.setDescription('This values indicates the level of default priority of that specified\n            VAP in entry.')
enterpriseApRadioWdsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 4), )
if mibBuilder.loadTexts: enterpriseApRadioWdsTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioWdsTable.setDescription('Table of configuration information for Wds for each\n                Radio interface.')
enterpriseApRadioWdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 4, 1), ).setIndexNames((0, "CTRON-AP3000-MIB", "enterpriseApRadioIndex"))
if mibBuilder.loadTexts: enterpriseApRadioWdsEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioWdsEntry.setDescription('An entry in the table, containing information\n                     about configuration of peer Bridging\n                     for one radio of the AP.  The table is indexed by radio\n                     Index (corresponding to enterpriseApRadioTable).  The table does not contain the radio index as\n                     a member of the table.')
wdsApRole = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("roleAp", 1), ("roleBridgeMaster", 2), ("roleBridge", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdsApRole.setStatus('current')
if mibBuilder.loadTexts: wdsApRole.setDescription('This value indicates the role of the Ap for this radio,\n             roleAp(1):            AP operation.\n             roleBridgeMaster(2):  Root-Bridge mode.\n             roleBridge(3):        Bridge Mode.\n            ')
wdsApAckTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdsApAckTimeout.setStatus('current')
if mibBuilder.loadTexts: wdsApAckTimeout.setDescription('This value indicates the WDS Ack timeout for this radio in us,\n            and the following values can be set to the system:\n               0    Set wireless Ack Timeout as system default\n               20   0 to 1  miles: Ack timeout is 20 us\n               40   1 to 3  miles: Ack timeout is 40 us\n               75   3 to 6  miles: Ack timeout is 75 us\n               115  6 to 10 miles: Ack timeout is 115 us\n                         ')
enterpriseApRadioWdsPeerTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 5), )
if mibBuilder.loadTexts: enterpriseApRadioWdsPeerTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioWdsPeerTable.setDescription('Table of configuration information for Wds Peers for each\n                Radio interface.')
enterpriseApRadioWdsPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 5, 1), ).setIndexNames((0, "CTRON-AP3000-MIB", "enterpriseApRadioIndex"), (0, "CTRON-AP3000-MIB", "wdsPeerIndex"))
if mibBuilder.loadTexts: enterpriseApRadioWdsPeerEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioWdsPeerEntry.setDescription('An entry in the table, containing information\n                     about configuration of peer Bridging\n                                         for one radio of the AP.  The table is indexed by radio\n                                         Index (corresponding to enterpriseApRadioTable) and the peer\n                                         index (Up to 8).  The table does not contain the radio index as\n                                         a member of the table.')
wdsPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: wdsPeerIndex.setStatus('current')
if mibBuilder.loadTexts: wdsPeerIndex.setDescription('Peer Index for the radio interface.')
wdsPeerBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdsPeerBssid.setStatus('current')
if mibBuilder.loadTexts: wdsPeerBssid.setDescription('The BSSID for this peer.')
wdsPeerRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsPeerRSSI.setStatus('current')
if mibBuilder.loadTexts: wdsPeerRSSI.setDescription('This value indicates the RSSI value of the WDS peer link.')
enterpriseApRadioWEPKeysTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 6), )
if mibBuilder.loadTexts: enterpriseApRadioWEPKeysTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioWEPKeysTable.setDescription('Conceptual table for WEP default keys.')
enterpriseApRadioWEPKeysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 6, 1), ).setIndexNames((0, "CTRON-AP3000-MIB", "enterpriseApRadioIndex"), (0, "CTRON-AP3000-MIB", "enterpriseApRadioWEPKeysIndex"))
if mibBuilder.loadTexts: enterpriseApRadioWEPKeysEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioWEPKeysEntry.setDescription('An Entry (conceptual row) in the WEP Default Keys Table.\n             A collection of objects containing information used to\n             determine if a WEPkey as been defined and if so, the\n             value of the WEPkey.')
enterpriseApRadioWEPKeysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: enterpriseApRadioWEPKeysIndex.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioWEPKeysIndex.setDescription('WEP Key Index for the radio interface.')
enterpriseApRadioWEPKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hexadecimalKey", 1), ("alphanumericKey", 2), ("otherKey", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApRadioWEPKeyType.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioWEPKeyType.setDescription('status of the WEP Key type')
enterpriseApRadioWEPKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("keyLength64Bit", 1), ("keyLength128Bit", 2), ("keyLength152Bit", 3), ("keyLengthOther", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApRadioWEPKeyLength.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioWEPKeyLength.setDescription('status of the WEP Key Length.')
enterpriseApRadioAvAntennaListTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 7), )
if mibBuilder.loadTexts: enterpriseApRadioAvAntennaListTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioAvAntennaListTable.setDescription('Conceptual table for Available Antenna List used in the Radio.')
enterpriseApRadioAvAntennaListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 7, 1), ).setIndexNames((0, "CTRON-AP3000-MIB", "enterpriseApRadioIndex"), (0, "CTRON-AP3000-MIB", "enterpriseApRadioAvAntennaIndex"))
if mibBuilder.loadTexts: enterpriseApRadioAvAntennaListEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioAvAntennaListEntry.setDescription('An Entry (conceptual row) in the Antenna List Table.\n             A collection of objects containing information used to\n             show if an Antenna as been defined and if so, the\n             value of the antenna Id.')
enterpriseApRadioAvAntennaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: enterpriseApRadioAvAntennaIndex.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioAvAntennaIndex.setDescription('Available Antenna List Index for the radio interface.')
enterpriseApRadioAvAntennaId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApRadioAvAntennaId.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioAvAntennaId.setDescription('Available antenna Id in the entry.')
enterpriseApRadioAvAntennaDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApRadioAvAntennaDesc.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioAvAntennaDesc.setDescription('The description of the antenna ID.')
enterpriseApRadioAvChannelListTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 8), )
if mibBuilder.loadTexts: enterpriseApRadioAvChannelListTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioAvChannelListTable.setDescription('Conceptual table for Available Channel List used in the Radio.')
enterpriseApRadioAvChannelListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 8, 1), ).setIndexNames((0, "CTRON-AP3000-MIB", "enterpriseApRadioIndex"), (0, "CTRON-AP3000-MIB", "enterpriseApRadioAvChannelIndex"))
if mibBuilder.loadTexts: enterpriseApRadioAvChannelListEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioAvChannelListEntry.setDescription('An Entry (conceptual row) in the Channel List Table.\n             A collection of objects containing information used to\n             show if a Channel No. as been defined and if so, the\n             value of the Channel No.')
enterpriseApRadioAvChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: enterpriseApRadioAvChannelIndex.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioAvChannelIndex.setDescription('Channel List Index for the radio interface.')
enterpriseApRadioAvChannelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 8, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApRadioAvChannelNo.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioAvChannelNo.setDescription('Available channel number in the entry')
apEtherNetConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 9, 1))
netConfigIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 9, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigIPAddress.setStatus('current')
if mibBuilder.loadTexts: netConfigIPAddress.setDescription('The IP address of this Net interface.  The default value\n                        for this object is 0.0.0.0.  If either the netConfigIPAddress\n                        or netConfigSubnetMask are 0.0.0.0, then when the device\n                        boots, it may use DHCP to try to figure out what these\n                        values should be. If DHCP fails, before the device\n                        can talk on the network, this value must be configured\n                        (e.g., through a terminal attached to the device).')
netConfigSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 9, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigSubnetMask.setStatus('current')
if mibBuilder.loadTexts: netConfigSubnetMask.setDescription('The subnet mask of this Net interface.  The default value\n                        for this object is 0.0.0.0.  If either the netConfigIPAddress\n                        or netConfigSubnetMask are 0.0.0.0, then when the device\n                        boots, it may use DHCP to try to figure out what these\n                        values should be. If DHCP fails, before the device\n                        can talk on the network, this value must be configured\n                        (e.g., through a terminal attached to the device).')
netConfigDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 9, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: netConfigDefaultGateway.setDescription('The IP Address of the default gateway.  If this value is\n                        undefined or unknown, it shall have the value 0.0.0.0.')
netConfigHttpState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigHttpState.setStatus('current')
if mibBuilder.loadTexts: netConfigHttpState.setDescription('Whether HTTP is enabled.')
netConfigHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(514, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigHttpPort.setStatus('current')
if mibBuilder.loadTexts: netConfigHttpPort.setDescription('The port number for HTTP.')
netConfigHttpsState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigHttpsState.setStatus('current')
if mibBuilder.loadTexts: netConfigHttpsState.setDescription('Whether Secure HTTP is enabled.')
netConfigHttpsPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(514, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigHttpsPort.setStatus('current')
if mibBuilder.loadTexts: netConfigHttpsPort.setDescription('The port number for Secure HTTP.')
netConfigDHCPState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigDHCPState.setStatus('current')
if mibBuilder.loadTexts: netConfigDHCPState.setDescription('Whether DHCP is enabled.')
apVLANMgntNativeId = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apVLANMgntNativeId.setStatus('current')
if mibBuilder.loadTexts: apVLANMgntNativeId.setDescription('This value indicates the native VLAN Id.')
apVLANMgntState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apVLANMgntState.setStatus('current')
if mibBuilder.loadTexts: apVLANMgntState.setDescription('This value indicates whether VLANs are enabled or disabled.')
apVLANMgntStateNextBoot = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apVLANMgntStateNextBoot.setStatus('current')
if mibBuilder.loadTexts: apVLANMgntStateNextBoot.setDescription('This value indicates the VLANs state for the next reset.')
apVLANMgntEtherUntaggedVlanId = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 11, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apVLANMgntEtherUntaggedVlanId.setStatus('current')
if mibBuilder.loadTexts: apVLANMgntEtherUntaggedVlanId.setDescription('This value indicates the Untagged VlanID for Ether Interface.')
apNativeVlanTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 11, 6), )
if mibBuilder.loadTexts: apNativeVlanTable.setStatus('current')
if mibBuilder.loadTexts: apNativeVlanTable.setDescription('Table used to manage the Vlans for each\n                     wireless interface.')
apNativeVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 11, 6, 1), ).setIndexNames((0, "CTRON-AP3000-MIB", "apNativeVlanIfIndex"), (0, "CTRON-AP3000-MIB", "apNativeVlanSsidNumber"))
if mibBuilder.loadTexts: apNativeVlanEntry.setStatus('current')
if mibBuilder.loadTexts: apNativeVlanEntry.setDescription('An entry in the table, containing information\n                     about VLAN configuration of one wireless interface.')
apNativeVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 11, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apNativeVlanIfIndex.setStatus('current')
if mibBuilder.loadTexts: apNativeVlanIfIndex.setDescription('Interface Index of the wireless interface for which\n                             the VLAN is assigned to.')
apNativeVlanSsidNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 11, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apNativeVlanSsidNumber.setStatus('current')
if mibBuilder.loadTexts: apNativeVlanSsidNumber.setDescription('Associated Number for Service Set Id (SSID) of the\n                             wireless interface for which the VLAN is assigned to.\n                                         Note: This is for future support of multiple SSIDs\n                                         per radio interface.')
apNativeVlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 11, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apNativeVlanVlanId.setStatus('current')
if mibBuilder.loadTexts: apNativeVlanVlanId.setDescription('This value indicates the native VLAN Id of the wireless interface associated\n                          with the if index and the SSID number(if it is not 0).')
apNativeVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 11, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apNativeVlanState.setStatus('current')
if mibBuilder.loadTexts: apNativeVlanState.setDescription('This value indicates the Native VLANs state.')
apAuthenticationSetupEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 1))
ap8021xState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("supported", 1), ("required", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap8021xState.setStatus('current')
if mibBuilder.loadTexts: ap8021xState.setDescription('This attribute indicates that the Enterprise the state\n            of the 802.1X authentication algorithm.')
ap8021xBroadcastKeyRefreshRate = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap8021xBroadcastKeyRefreshRate.setStatus('current')
if mibBuilder.loadTexts: ap8021xBroadcastKeyRefreshRate.setDescription('The number (in minutes) between changing the broadcast key for\n                        802.1X and WPA clients')
ap8021xSessionKeyRefreshRate = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap8021xSessionKeyRefreshRate.setStatus('current')
if mibBuilder.loadTexts: ap8021xSessionKeyRefreshRate.setDescription('The number (in minutes) between changing session keys for\n                        802.1X and WPA clients')
ap8021xReauthenticationTimeout = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap8021xReauthenticationTimeout.setStatus('current')
if mibBuilder.loadTexts: ap8021xReauthenticationTimeout.setDescription('The number (in minutes) between forcing 802.1X clients to\n                        reauthenticate')
apAuthenticationMode = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("local", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAuthenticationMode.setStatus('current')
if mibBuilder.loadTexts: apAuthenticationMode.setDescription('This value indicates the type of MAC authentication or RADIUS authentication in use,\n             or not in use.')
apAuthenticationServerTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 2), )
if mibBuilder.loadTexts: apAuthenticationServerTable.setStatus('current')
if mibBuilder.loadTexts: apAuthenticationServerTable.setDescription('Table of descriptive and status information about\n                     configuration of each authentication server.')
apAuthenticationServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 2, 1), ).setIndexNames((0, "CTRON-AP3000-MIB", "apAuthenticationServerIndex"))
if mibBuilder.loadTexts: apAuthenticationServerEntry.setStatus('current')
if mibBuilder.loadTexts: apAuthenticationServerEntry.setDescription('An entry in the table, containing information\n                     about configuration of one authentication server of the AP.')
apAuthenticationServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apAuthenticationServerIndex.setStatus('current')
if mibBuilder.loadTexts: apAuthenticationServerIndex.setDescription('Index of the Authentication Server')
apAuthenticationServer = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAuthenticationServer.setStatus('current')
if mibBuilder.loadTexts: apAuthenticationServer.setDescription('This value indicates the IP address or host name of the authentication server.')
apAuthenticationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAuthenticationPort.setStatus('current')
if mibBuilder.loadTexts: apAuthenticationPort.setDescription('This value indicates the UDP Port used by the authentication server.')
apAuthenticationKey = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAuthenticationKey.setStatus('current')
if mibBuilder.loadTexts: apAuthenticationKey.setDescription('This value indicates the shared key used by the authentication server.')
apAuthenticationRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAuthenticationRetransmit.setStatus('current')
if mibBuilder.loadTexts: apAuthenticationRetransmit.setDescription('This value indicates the retransmit timer length used by the\n            authentication server.')
apAuthenticationTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAuthenticationTimeout.setStatus('current')
if mibBuilder.loadTexts: apAuthenticationTimeout.setDescription('This value indicates the Timeout value(sec) used by the\n                        authentication server.')
apAuthenticationAcctPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAuthenticationAcctPort.setStatus('current')
if mibBuilder.loadTexts: apAuthenticationAcctPort.setDescription('UDP Accounting Port.  The valid range is from\n                1024-65535. A value of 0 means accounting is disabled.')
apAuthenticationAcctInterimUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAuthenticationAcctInterimUpdate.setStatus('current')
if mibBuilder.loadTexts: apAuthenticationAcctInterimUpdate.setDescription('The interval between sending accounting\n                updates.')
apAuthenticationAcctState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAuthenticationAcctState.setStatus('current')
if mibBuilder.loadTexts: apAuthenticationAcctState.setDescription('This value indicates whether the Accounting Server is enabled.')
apAuthenticationSupplicantTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 3), )
if mibBuilder.loadTexts: apAuthenticationSupplicantTable.setStatus('current')
if mibBuilder.loadTexts: apAuthenticationSupplicantTable.setDescription('Table of descriptive and status information about\n                     configuration of supplicant')
apAuthenticationSupplicantEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 3, 1), ).setIndexNames((0, "CTRON-AP3000-MIB", "ap8021xSuppIndex"))
if mibBuilder.loadTexts: apAuthenticationSupplicantEntry.setStatus('current')
if mibBuilder.loadTexts: apAuthenticationSupplicantEntry.setDescription('An entry in the table, containing information\n                     about configuration of one supplicant.')
ap8021xSuppIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ap8021xSuppIndex.setStatus('current')
if mibBuilder.loadTexts: ap8021xSuppIndex.setDescription('Index of the interface for which this supplicant is\n                             running.  Currently only the ethernet interface.')
ap8021xSuppState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap8021xSuppState.setStatus('current')
if mibBuilder.loadTexts: ap8021xSuppState.setDescription('This object is used to enable or disable the 802.1X supplicant.')
ap8021xSuppUser = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap8021xSuppUser.setStatus('current')
if mibBuilder.loadTexts: ap8021xSuppUser.setDescription('This value indicates the username for supplicant. If value is\n                         configured, will display ****.  Else will display EMPTY.')
ap8021xSuppPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap8021xSuppPasswd.setStatus('current')
if mibBuilder.loadTexts: ap8021xSuppPasswd.setDescription('This value indicates the password for supplicant. If value is\n                         configured, will display ****.  Else will display EMPTY.')
apvAuthenticationSetupTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 4), )
if mibBuilder.loadTexts: apvAuthenticationSetupTable.setStatus('current')
if mibBuilder.loadTexts: apvAuthenticationSetupTable.setDescription('Table of descriptive and status information about\n                     configuration of 8021x for each Vap.')
apvAuthenticationSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 4, 1), ).setIndexNames((0, "CTRON-AP3000-MIB", "apv8021xIndex"))
if mibBuilder.loadTexts: apvAuthenticationSetupEntry.setStatus('current')
if mibBuilder.loadTexts: apvAuthenticationSetupEntry.setDescription('An entry in the table, containing information\n                     about configuration of 8021x for each Vap of the AP.')
apv8021xIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apv8021xIndex.setStatus('current')
if mibBuilder.loadTexts: apv8021xIndex.setDescription('Index for configuration.')
apv8021xState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("supported", 1), ("required", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apv8021xState.setStatus('current')
if mibBuilder.loadTexts: apv8021xState.setDescription('This attribute indicates that the Enterprise the state\n            of the 802.1X authentication algorithm.')
apv8021xBroadcastKeyRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apv8021xBroadcastKeyRefreshRate.setStatus('current')
if mibBuilder.loadTexts: apv8021xBroadcastKeyRefreshRate.setDescription('The number (in minutes) between changing the broadcast key for\n                        802.1X and WPA clients')
apv8021xSessionKeyRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apv8021xSessionKeyRefreshRate.setStatus('current')
if mibBuilder.loadTexts: apv8021xSessionKeyRefreshRate.setDescription('The number (in minutes) between changing history keys for\n                        802.1X and WPA clients')
apv8021xReauthenticationTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apv8021xReauthenticationTimeout.setStatus('current')
if mibBuilder.loadTexts: apv8021xReauthenticationTimeout.setDescription('The number (in minutes) between forcing 802.1X clients to\n                        reauthenticate')
apvMACAuthenticationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("local", 1), ("remote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apvMACAuthenticationMode.setStatus('current')
if mibBuilder.loadTexts: apvMACAuthenticationMode.setDescription('This value indicates the mode of MAC authentication in use.')
apvMACAuthenticationTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apvMACAuthenticationTimeout.setStatus('current')
if mibBuilder.loadTexts: apvMACAuthenticationTimeout.setDescription('The number (in minutes) between forcing RADIUS MAC to authenticate.')
apvMACAuthenticationPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 12, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apvMACAuthenticationPasswd.setStatus('current')
if mibBuilder.loadTexts: apvMACAuthenticationPasswd.setDescription('This value indicates the password for MAC RADIUS Authentication. If value is\n                         configured, will display ****.  Else will display EMPTY.')
apWStationSessionTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 13, 1), )
if mibBuilder.loadTexts: apWStationSessionTable.setStatus('current')
if mibBuilder.loadTexts: apWStationSessionTable.setDescription('This table list all sessions (wireless stations) status')
apWStationSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 13, 1, 1), ).setIndexNames((0, "CTRON-AP3000-MIB", "apWStationSessionIfIndex"), (0, "CTRON-AP3000-MIB", "apWStationSessionStationAddres"))
if mibBuilder.loadTexts: apWStationSessionEntry.setStatus('current')
if mibBuilder.loadTexts: apWStationSessionEntry.setDescription('An entry in the table, containing information\n                about status and statistics of the wireless station.')
apWStationSessionIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apWStationSessionIfIndex.setStatus('current')
if mibBuilder.loadTexts: apWStationSessionIfIndex.setDescription('Interface index for the radio this session is associated\n                 with.')
apWStationSessionStationAddres = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 13, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: apWStationSessionStationAddres.setStatus('current')
if mibBuilder.loadTexts: apWStationSessionStationAddres.setDescription('The unique MAC Address of the station for this session.')
apWStationSessionAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 13, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWStationSessionAuthenticated.setStatus('current')
if mibBuilder.loadTexts: apWStationSessionAuthenticated.setDescription('Whether the session is authenticated or not.')
apWStationSessionAssociated = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 13, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWStationSessionAssociated.setStatus('current')
if mibBuilder.loadTexts: apWStationSessionAssociated.setDescription('Whether the session is associated or not. It is rare case that\n                not associated stations show up in the table.')
apWStationSessionIsForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 13, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWStationSessionIsForwarding.setStatus('current')
if mibBuilder.loadTexts: apWStationSessionIsForwarding.setDescription('Whether the AP is forwarding the client station traffic (higher level authentication)')
apWStationSessionKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 13, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("staticWep", 2), ("dynamicWep", 3), ("wpaWep", 4), ("wpaTkip", 5), ("wpaAes", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWStationSessionKeyType.setStatus('current')
if mibBuilder.loadTexts: apWStationSessionKeyType.setDescription('The encryption key type used by the station. Note that wpa-wep is not supported')
apWStationSessionAssociationId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 13, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWStationSessionAssociationId.setStatus('current')
if mibBuilder.loadTexts: apWStationSessionAssociationId.setDescription('The internal association identify number')
apWStationSessionLastAuthenticatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 13, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWStationSessionLastAuthenticatedTime.setStatus('current')
if mibBuilder.loadTexts: apWStationSessionLastAuthenticatedTime.setDescription('This is the time in hundredths of a second last time the client\n                is authenticated. Note that a session may be authenticated multiple times.\n                The value is related to the system startup')
apWStationSessionAssociatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 13, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWStationSessionAssociatedTime.setStatus('current')
if mibBuilder.loadTexts: apWStationSessionAssociatedTime.setDescription('This is the time in hundredths of a second since the client\n                associated. The value is related to the system startup')
apWStationSessionLastAssociatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 13, 1, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWStationSessionLastAssociatedTime.setStatus('current')
if mibBuilder.loadTexts: apWStationSessionLastAssociatedTime.setDescription('This is the time in hundredths of a second when the client\n                associated in last session. The value is related to the system startup')
apWStationSessionLastDisassociatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 13, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWStationSessionLastDisassociatedTime.setStatus('current')
if mibBuilder.loadTexts: apWStationSessionLastDisassociatedTime.setDescription('This is the time in hundredths of a second when the client\n                disassociated in last session. The value is related to the system startup')
apWStationSessionTxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 13, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWStationSessionTxPacketCount.setStatus('current')
if mibBuilder.loadTexts: apWStationSessionTxPacketCount.setDescription('This is the number of packets transmitted from the client to the AP. It includes\n         data, control and management packets.')
apWStationSessionRxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 13, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWStationSessionRxPacketCount.setStatus('current')
if mibBuilder.loadTexts: apWStationSessionRxPacketCount.setDescription('This is the number of unicast packets transmitted from the AP to the client.\n         It includes data, control and management packets.')
apWStationSessionTxByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 13, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWStationSessionTxByteCount.setStatus('current')
if mibBuilder.loadTexts: apWStationSessionTxByteCount.setDescription('This is the number of bytes transmitted from the client to the AP. It\n         includes the bytes of data, control and management packets.')
apWStationSessionRxByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 13, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWStationSessionRxByteCount.setStatus('current')
if mibBuilder.loadTexts: apWStationSessionRxByteCount.setDescription('This is the number of unicast bytes transmitted from the AP to\n         the client. It includes the bytes of data, control and management\n         packets.')
apWStationSessionVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 13, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWStationSessionVlanID.setStatus('current')
if mibBuilder.loadTexts: apWStationSessionVlanID.setDescription('The current VLAN Id used by the station.')
rogueApDetectionTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 14, 1), )
if mibBuilder.loadTexts: rogueApDetectionTable.setStatus('current')
if mibBuilder.loadTexts: rogueApDetectionTable.setDescription('Table of each AP that has been detected.')
rogueApDetectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 14, 1, 1), ).setIndexNames((0, "CTRON-AP3000-MIB", "rogueApIndex"))
if mibBuilder.loadTexts: rogueApDetectionEntry.setStatus('current')
if mibBuilder.loadTexts: rogueApDetectionEntry.setDescription('An entry in the table, containing information\n                     about any AP detected.')
rogueApIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: rogueApIndex.setStatus('current')
if mibBuilder.loadTexts: rogueApIndex.setDescription('Monotonically increasing index.')
rogueApBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 14, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueApBssid.setStatus('current')
if mibBuilder.loadTexts: rogueApBssid.setDescription('The AP BSSID')
rogueApSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 14, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueApSsid.setStatus('current')
if mibBuilder.loadTexts: rogueApSsid.setDescription('The AP SSID')
rogueApPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 14, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueApPortNumber.setStatus('current')
if mibBuilder.loadTexts: rogueApPortNumber.setDescription('Interface index for the radio.')
rogueApChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 14, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueApChannelNumber.setStatus('current')
if mibBuilder.loadTexts: rogueApChannelNumber.setDescription('Channel where Ap detected.')
rogueApRSSIValue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 14, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueApRSSIValue.setStatus('current')
if mibBuilder.loadTexts: rogueApRSSIValue.setDescription('RSSI for AP detected.')
apRougeApControl = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 14, 2))
rogueApRADIUSAuthenticate = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 14, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rogueApRADIUSAuthenticate.setStatus('current')
if mibBuilder.loadTexts: rogueApRADIUSAuthenticate.setDescription('Value is used to enable/disable RADIUS Authentication. ')
rogueApClear = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 14, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rogueApClear.setStatus('current')
if mibBuilder.loadTexts: rogueApClear.setDescription('This object is set to clear(1) to clear the Rogue AP detection table.  When read, the value\n                         will have no meaning.')
apAdminUsername = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 15, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAdminUsername.setStatus('current')
if mibBuilder.loadTexts: apAdminUsername.setDescription('This value indicates the username for management login.')
appAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 15, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appAdminPassword.setStatus('current')
if mibBuilder.loadTexts: appAdminPassword.setDescription('This value indicates the password for management login.')
apRestartOpCodeFile = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 16, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRestartOpCodeFile.setStatus('current')
if mibBuilder.loadTexts: apRestartOpCodeFile.setDescription('Name of op-code file for start-up.')
apRestartControl = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("warmBoot", 2), ("coldBoot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRestartControl.setStatus('current')
if mibBuilder.loadTexts: apRestartControl.setDescription('Setting this object to warmBoot(2) causes the device to\n                                restart the application software with current configuration\n                                parameters saved in non-volatile memory.  Setting this\n                                object to coldBoot(3) causes the device to reinitialize\n                                configuration parameters in non-volatile memory to default\n                                values and restart the application software.  When the device\n                                is running normally, this variable has a value of running(1).')
apSNTPState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSNTPState.setStatus('current')
if mibBuilder.loadTexts: apSNTPState.setDescription('This value indicates whether SNTP is enabled or not. At least one of the\n                         SNTP servers must have a valid IP address before SNTP can be enabled.')
apSNTPPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 17, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSNTPPrimaryServer.setStatus('current')
if mibBuilder.loadTexts: apSNTPPrimaryServer.setDescription('This value indicates the IP address of the primary SNTP server.')
apSNTPSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 17, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSNTPSecondaryServer.setStatus('current')
if mibBuilder.loadTexts: apSNTPSecondaryServer.setDescription('This value indicates the IP address of the secondary SNTP server.')
apSNTPTimezone = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 17, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53))).clone(namedValues=NamedValues(("enewetakKwajalein", 0), ("midwayIsland", 1), ("hawaii", 2), ("alaska", 3), ("pacific", 4), ("arizona", 5), ("mountain", 6), ("central", 7), ("mexicoCity", 8), ("saskatchewan", 9), ("bogota", 10), ("eastern", 11), ("indiana", 12), ("atlantic", 13), ("caracas", 14), ("santiago", 15), ("newfoundland", 16), ("brasilia", 17), ("buenos", 18), ("midAtlantic", 19), ("azores", 20), ("casablanca", 21), ("greenwichMeanTimeDublin", 22), ("greenwichMeanTimeLisbon", 23), ("amsterdam", 24), ("stockholm", 25), ("bratislava", 26), ("prague", 27), ("paris", 28), ("sofija", 29), ("athens", 30), ("bucharest", 31), ("cairo", 32), ("harare", 33), ("helsinki", 34), ("israel", 35), ("baghdad", 36), ("moscow", 37), ("tehran", 38), ("abuDhabi", 39), ("vogograd", 40), ("islamabad", 41), ("almaty", 42), ("bangkok", 43), ("beijing", 44), ("taipei", 45), ("tokyo", 46), ("brisbane", 47), ("canberra", 48), ("guam", 49), ("hobart", 50), ("magadan", 51), ("fiji", 52), ("wellington", 53)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSNTPTimezone.setStatus('current')
if mibBuilder.loadTexts: apSNTPTimezone.setDescription('This value indicates which timezone to use.')
apSNTPDST = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 17, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSNTPDST.setStatus('current')
if mibBuilder.loadTexts: apSNTPDST.setDescription('This value indicates whether Daylight Savings Time is enabled or not.')
apSNTPDSTStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 17, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSNTPDSTStartMonth.setStatus('current')
if mibBuilder.loadTexts: apSNTPDSTStartMonth.setDescription('This value indicates the starting month for Daylight Savings Time.')
apSNTPDSTStartDay = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 17, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSNTPDSTStartDay.setStatus('current')
if mibBuilder.loadTexts: apSNTPDSTStartDay.setDescription('This value indicates the starting day for Daylight Savings Time.')
apSNTPDSTEndMonth = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 17, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSNTPDSTEndMonth.setStatus('current')
if mibBuilder.loadTexts: apSNTPDSTEndMonth.setDescription('This value indicates the ending month for Daylight Savings Time.')
apSNTPDSTEndDay = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 17, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSNTPDSTEndDay.setStatus('current')
if mibBuilder.loadTexts: apSNTPDSTEndDay.setDescription('This value indicates the ending day for Daylight Savings Time.')
apDNSPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 18, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDNSPrimaryServer.setStatus('current')
if mibBuilder.loadTexts: apDNSPrimaryServer.setDescription('This value indicates the IP address of the primary DNS server.')
apDNSSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 18, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDNSSecondaryServer.setStatus('current')
if mibBuilder.loadTexts: apDNSSecondaryServer.setDescription('This value indicates the IP address of the secondary DNS server.')
apIappEnabled = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIappEnabled.setStatus('current')
if mibBuilder.loadTexts: apIappEnabled.setDescription('Whether IAPP is enabled.')
apLogConfigState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLogConfigState.setStatus('current')
if mibBuilder.loadTexts: apLogConfigState.setDescription('This value indicates whether syslog is enabled.')
apSyslogConsoleState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSyslogConsoleState.setStatus('current')
if mibBuilder.loadTexts: apSyslogConsoleState.setDescription('This value indicates whether syslog console logging is enabled.')
apSyslogLevel = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 20, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSyslogLevel.setStatus('current')
if mibBuilder.loadTexts: apSyslogLevel.setDescription('This value indicates the syslog logging level.')
apSyslogServerTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 20, 4), )
if mibBuilder.loadTexts: apSyslogServerTable.setStatus('current')
if mibBuilder.loadTexts: apSyslogServerTable.setDescription('Table of descriptive and status information about\n                     configuration of each syslog server.')
apSyslogServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 20, 4, 1), ).setIndexNames((0, "CTRON-AP3000-MIB", "apSyslogServerIndex"))
if mibBuilder.loadTexts: apSyslogServerEntry.setStatus('current')
if mibBuilder.loadTexts: apSyslogServerEntry.setDescription('An entry in the table, containing information\n                     about configuration of one syslog server of the AP.')
apSyslogServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 20, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: apSyslogServerIndex.setStatus('current')
if mibBuilder.loadTexts: apSyslogServerIndex.setDescription('Index of the Syslog Server')
apSyslogServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 20, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSyslogServerState.setStatus('current')
if mibBuilder.loadTexts: apSyslogServerState.setDescription('This value indicates whether the syslog server is enabled.')
apSyslogServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 20, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSyslogServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: apSyslogServerIPAddress.setDescription('This value indicates the IP address of the syslog server.')
apSyslogServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 20, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSyslogServerPort.setStatus('current')
if mibBuilder.loadTexts: apSyslogServerPort.setDescription('This value indicates the UDP Port used by the syslog server.')
apEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 21, 1), )
if mibBuilder.loadTexts: apEventLogTable.setStatus('current')
if mibBuilder.loadTexts: apEventLogTable.setDescription('This table is a snapshot of the current event log.')
apEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 21, 1, 1), ).setIndexNames((0, "CTRON-AP3000-MIB", "apEventLogIndex"))
if mibBuilder.loadTexts: apEventLogEntry.setStatus('current')
if mibBuilder.loadTexts: apEventLogEntry.setDescription('An entry in the table, containing one message\n                 from the event log.')
apEventLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: apEventLogIndex.setStatus('current')
if mibBuilder.loadTexts: apEventLogIndex.setDescription('Index of the Event Log Message')
apEventLogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 21, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEventLogMessage.setStatus('current')
if mibBuilder.loadTexts: apEventLogMessage.setDescription('The Event Log Message')
apEventLogClear = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 21, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearLog", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apEventLogClear.setStatus('current')
if mibBuilder.loadTexts: apEventLogClear.setDescription('This object is set to 1 to clear the event log.  When read, the value\n             will have no meaning.')
apWSLSupportControl = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWSLSupportControl.setStatus('current')
if mibBuilder.loadTexts: apWSLSupportControl.setDescription('The administrative enable/disable state for\n        the control of the WSL function.')
apWSLSupportMasterAddress = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 22, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWSLSupportMasterAddress.setStatus('current')
if mibBuilder.loadTexts: apWSLSupportMasterAddress.setDescription('This value indicates IP address of the main WSL.')
apWSLSupportSecondaryAddress = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 22, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWSLSupportSecondaryAddress.setStatus('current')
if mibBuilder.loadTexts: apWSLSupportSecondaryAddress.setDescription('This value indicates IP address of the peer WSL.')
apWSLSupportPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 22, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWSLSupportPort.setStatus('current')
if mibBuilder.loadTexts: apWSLSupportPort.setDescription('This value indicates the TCP Port used by the WSL server.')
apWSLSupportHeartbeatInterval = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 22, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWSLSupportHeartbeatInterval.setStatus('current')
if mibBuilder.loadTexts: apWSLSupportHeartbeatInterval.setDescription('This value indicates the WSL Heartbeat Interval.')
apWSLSupportHeartbeatLastChange = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 22, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWSLSupportHeartbeatLastChange.setStatus('current')
if mibBuilder.loadTexts: apWSLSupportHeartbeatLastChange.setDescription('The sysUpTime at which the Heartbeat was last\n             modified. The format is defined as hh:mm:ss - dd:mm:yy ')
apWSLSupportOperationMode = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 22, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standalone", 0), ("associated", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWSLSupportOperationMode.setStatus('current')
if mibBuilder.loadTexts: apWSLSupportOperationMode.setDescription('This attribute indicates that the WSL Operation Mode in\n                0: AP in standalone mode, or\n                1: AP in ETS WSL managed mode (associated mode).')
apWSLSupportRxThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 22, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWSLSupportRxThreshold.setStatus('current')
if mibBuilder.loadTexts: apWSLSupportRxThreshold.setDescription('This value indicates the WSL CCA rejection threshold in dBm scale.')
apWSLSupportControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 22, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWSLSupportControlStatus.setStatus('current')
if mibBuilder.loadTexts: apWSLSupportControlStatus.setDescription('The operative enable/disable state for\n        the control of the WSL function.')
apWSLRFAreaPollControl = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 22, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWSLRFAreaPollControl.setStatus('current')
if mibBuilder.loadTexts: apWSLRFAreaPollControl.setDescription('The administrative enable/disable state for\n        the control of the WSL RF Area Poll function.')
apWSLRFAreaPollControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 22, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWSLRFAreaPollControlStatus.setStatus('current')
if mibBuilder.loadTexts: apWSLRFAreaPollControlStatus.setDescription('The operative enable/disable state for\n        the control of the WSL RF Area Poll function.')
apWMMControlTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 23, 1), )
if mibBuilder.loadTexts: apWMMControlTable.setStatus('current')
if mibBuilder.loadTexts: apWMMControlTable.setDescription('Table for WMM configuration per radio.')
apWMMControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 23, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: apWMMControlEntry.setStatus('current')
if mibBuilder.loadTexts: apWMMControlEntry.setDescription('An Entry in the apWMMControlTable.')
apWMMState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("required", 1), ("supported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWMMState.setStatus('current')
if mibBuilder.loadTexts: apWMMState.setDescription('This value indicates the WMM state.')
apWMMBssParamTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 23, 2), )
if mibBuilder.loadTexts: apWMMBssParamTable.setReference('IEEE 802.11e -2005')
if mibBuilder.loadTexts: apWMMBssParamTable.setStatus('current')
if mibBuilder.loadTexts: apWMMBssParamTable.setDescription('Conceptual table for EDCA default parameter values at a non-AP\n            QSTA. This table shall contain the four entries of the EDCA\n            parameters corresponding to four possible ACs (access category):\n                1) AC_BE (best effort, ACI=0)\n                2) AC_BK (background, ACI=1)\n                3) AC_VI (video, ACI=2)\n                4) AC_VO (voice, ACI=3)\n            ')
apWMMBssParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 23, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CTRON-AP3000-MIB", "apWMMBssParamIndex"))
if mibBuilder.loadTexts: apWMMBssParamEntry.setStatus('current')
if mibBuilder.loadTexts: apWMMBssParamEntry.setDescription('An Entry (conceptual row) in the apWMMBssParamTable.\n            ifIndex - Each IEEE 802.11 interface is represented by an ifEntry.\n            Interface tables in this MIB module are indexed by ifIndex.')
apWMMBssParamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 23, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: apWMMBssParamIndex.setStatus('current')
if mibBuilder.loadTexts: apWMMBssParamIndex.setDescription('The index used to identify instances of the columnar\n            objects in the apWMMBssParam Table. The value of this variable is\n                1) 1 AC_BE (best effort, ACI=0)\n                2) 2 AC_BK (background, ACI=1)\n                3) 3 AC_VI (video, ACI=2)\n                4) 4 AC_VO (voice, ACI=3)          \n            ')
apWMMBssParamCWmin = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 23, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWMMBssParamCWmin.setStatus('current')
if mibBuilder.loadTexts: apWMMBssParamCWmin.setDescription('This attribute shall specify the value of the minimum size of the\n            window in the exponent form that shall be used by a QSTA for a particular AC for\n            generating a random number for the backoff.')
apWMMBssParamCWmax = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 23, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWMMBssParamCWmax.setStatus('current')
if mibBuilder.loadTexts: apWMMBssParamCWmax.setDescription('This attribute shall specify the value of the maximum size of the\n            window in the exponent form that shall be used by a QSTA for a particular AC for\n            generating a random number for the backoff.')
apWMMBssParamAIFSN = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 23, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWMMBssParamAIFSN.setStatus('current')
if mibBuilder.loadTexts: apWMMBssParamAIFSN.setDescription('This attribute shall specify the number of slots, after a SIFS\n            duration, that the QSTA, for a particular AC, shall sense the\n            medium idle either before transmitting or executing a backoff.')
apWMMBssParamTXOPLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 23, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWMMBssParamTXOPLimit.setStatus('current')
if mibBuilder.loadTexts: apWMMBssParamTXOPLimit.setDescription('This attribute shall specify the maximum time of\n            an TXOP in units of 32 microseconds for a given AC at a non-AP QSTA.')
apWMMBssParamAdmissionControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 23, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWMMBssParamAdmissionControl.setStatus('current')
if mibBuilder.loadTexts: apWMMBssParamAdmissionControl.setDescription('This attribute, when TRUE, indicates that admission control is\n            mandatory for the given AC. When False, this attribute indicates\n            that the admission control is not mandatory for the given AC. The\n            default value for this parameter shall be FALSE.')
apWMMApParamTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 13, 23, 3), )
if mibBuilder.loadTexts: apWMMApParamTable.setReference('IEEE 802.11e -2005')
if mibBuilder.loadTexts: apWMMApParamTable.setStatus('current')
if mibBuilder.loadTexts: apWMMApParamTable.setDescription('Conceptual table for EDCA default parameter values at the QAP.\n            This table shall contain the four entries of the EDCA\n            parameters corresponding to four possible ACs (access category):\n                1) AC_BE (best effort, ACI=0)\n                2) AC_BK (background, ACI=1)\n                3) AC_VI (video, ACI=2)\n                4) AC_VO (voice, ACI=3)\n            ')
apWMMApParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 13, 23, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CTRON-AP3000-MIB", "apWMMApParamIndex"))
if mibBuilder.loadTexts: apWMMApParamEntry.setStatus('current')
if mibBuilder.loadTexts: apWMMApParamEntry.setDescription('An Entry (conceptual row) in the apWMMApParamTable.\n            ifIndex - Each IEEE 802.11 interface is represented by an ifEntry.\n            Interface tables in this MIB module are indexed by ifIndex.')
apWMMApParamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 23, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: apWMMApParamIndex.setStatus('current')
if mibBuilder.loadTexts: apWMMApParamIndex.setDescription('The index used to identify instances of the columnar\n            objects in the apWMMApParam Table. The value of this variable is\n                1) 1 AC_BE (best effort, ACI=0)\n                2) 2 AC_BK (background, ACI=1)\n                3) 3 AC_VI (video, ACI=2)\n                4) 4 AC_VO (voice, ACI=3)          \n            ')
apWMMApParamCWmin = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 23, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWMMApParamCWmin.setStatus('current')
if mibBuilder.loadTexts: apWMMApParamCWmin.setDescription('This attribute shall specify the value of the minimum size of the\n            window in the exponent form that shall be used by a QAP for a particular AC for\n            generating a random number for the backoff.')
apWMMApParamCWmax = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 23, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWMMApParamCWmax.setStatus('current')
if mibBuilder.loadTexts: apWMMApParamCWmax.setDescription('This attribute shall specify the value of the maximum size of the\n            window in the exponent form that shall be used by a QAP for a particular AC for\n            generating a random number for the backoff.')
apWMMApParamAIFSN = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 23, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWMMApParamAIFSN.setStatus('current')
if mibBuilder.loadTexts: apWMMApParamAIFSN.setDescription('This attribute shall specify the number of slots, after a SIFS\n            duration, that the QAP, for a particular AC, shall sense the\n            medium idle either before transmitting or executing a backoff.')
apWMMApParamTXOPLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 23, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWMMApParamTXOPLimit.setStatus('current')
if mibBuilder.loadTexts: apWMMApParamTXOPLimit.setDescription('This attribute shall specify the maximum time of\n            an TXOP in units of 32 microseconds for a given AC at a QAP.')
apWMMApParamAdmissionControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 13, 23, 3, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWMMApParamAdmissionControl.setStatus('current')
if mibBuilder.loadTexts: apWMMApParamAdmissionControl.setDescription('This attribute, when TRUE, indicates that admission control is\n            mandatory for the given AC. When False, this attribute indicates\n            that the admission control is not mandatory for the given AC. The\n            default value for this parameter shall be FALSE.')
apNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 1))
apNotificationDot11MacAddr = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNotificationDot11MacAddr.setStatus('current')
if mibBuilder.loadTexts: apNotificationDot11MacAddr.setDescription('Mac Address of the affected interface, returned with traps only.')
apNotificationDot11Station = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNotificationDot11Station.setStatus('current')
if mibBuilder.loadTexts: apNotificationDot11Station.setDescription('This attribute holds the MAC address of the wireless station')
apNotificationDot11RequestType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("association", 2), ("reAssociation", 3), ("authentication", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNotificationDot11RequestType.setStatus('current')
if mibBuilder.loadTexts: apNotificationDot11RequestType.setDescription('This attribute defines the request type sent by the station.\n                Value = 1: Unknown request type\n                Value = 2: Association Request\n                Value = 3: Re-association Request\n                Value = 4: Authentication')
apNotificationDot11ReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("invalidModeOrState", 1), ("unAuthenticatedStation", 2), ("internalError", 3), ("outOfSequenceFrame", 4), ("unsupportedAlgorithm", 5), ("invalidFrameLngth", 6), ("wepRequiredOnAP", 7), ("wepNotAllowed", 8), ("challengeTextMismatch", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNotificationDot11ReasonCode.setStatus('current')
if mibBuilder.loadTexts: apNotificationDot11ReasonCode.setDescription('This attribute defines the reason for the failure of an operation.\n                Value = 1: Invalid mode/state\n                Value = 2: Station not authenticated.\n                                Value = 3: Internal error\n                                Value = 4: Out of sequence frame\n                                Value = 5: Un-supported algorithm\n                                Value = 6: Invalid frame length\n                                Value = 7: WEP is required on the AP\n                                Value = 8: WEP not allowed\n                                Value = 9: Challenge text mismatch')
apNotificationDot11IpAddress = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNotificationDot11IpAddress.setStatus('current')
if mibBuilder.loadTexts: apNotificationDot11IpAddress.setDescription('This value indicates the IP address of the Access Point')
apNotificationDot11AuthenticatorMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNotificationDot11AuthenticatorMacAddr.setStatus('current')
if mibBuilder.loadTexts: apNotificationDot11AuthenticatorMacAddr.setDescription('This attribute holds the MAC address of the authenticator for the AP.')
apNotificationTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 2))
sysSystemUp = NotificationType((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 2, 1))
if mibBuilder.loadTexts: sysSystemUp.setStatus('current')
if mibBuilder.loadTexts: sysSystemUp.setDescription('The system up notification shall be sent when the AP\n                is fully up and running.')
sysSystemDown = NotificationType((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 2, 2))
if mibBuilder.loadTexts: sysSystemDown.setStatus('current')
if mibBuilder.loadTexts: sysSystemDown.setDescription('The system down notification shall be sent before the AP\n                is about to reboot.')
sysRadiusServerChanged = NotificationType((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 2, 3))
if mibBuilder.loadTexts: sysRadiusServerChanged.setStatus('current')
if mibBuilder.loadTexts: sysRadiusServerChanged.setDescription('The RADIUS server changed notification shall be sent when\n                 the RADIUS server has changed from Primary / Secondary to\n                 Secondary / Primary.')
dot11StationAssociation = NotificationType((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 2, 4)).setObjects(("CTRON-AP3000-MIB", "apNotificationDot11Station"))
if mibBuilder.loadTexts: dot11StationAssociation.setStatus('current')
if mibBuilder.loadTexts: dot11StationAssociation.setDescription('The associate notification shall be sent when a station successfully\n                associates with the Access Point. The value of the notification shall\n                include the MAC address of the station that has associated.')
dot11StationReAssociation = NotificationType((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 2, 5)).setObjects(("CTRON-AP3000-MIB", "apNotificationDot11Station"))
if mibBuilder.loadTexts: dot11StationReAssociation.setStatus('current')
if mibBuilder.loadTexts: dot11StationReAssociation.setDescription('The re-associate notification shall be sent when a station\n                successfully re-associates with the Access Point. The value of the\n                notification shall include the MAC address of the station\n                that has associated.')
dot11StationAuthentication = NotificationType((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 2, 6)).setObjects(("CTRON-AP3000-MIB", "apNotificationDot11Station"))
if mibBuilder.loadTexts: dot11StationAuthentication.setStatus('current')
if mibBuilder.loadTexts: dot11StationAuthentication.setDescription('The authentication notification shall be sent when a station\n                successfully authenticates with the Access Point. The value of the\n                notification shall include the MAC address of the station\n                that has authenticated.')
dot11StationRequestFail = NotificationType((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 2, 7)).setObjects(("CTRON-AP3000-MIB", "apNotificationDot11Station"), ("CTRON-AP3000-MIB", "apNotificationDot11RequestType"), ("CTRON-AP3000-MIB", "apNotificationDot11ReasonCode"))
if mibBuilder.loadTexts: dot11StationRequestFail.setStatus('current')
if mibBuilder.loadTexts: dot11StationRequestFail.setDescription('The station request fail shall be sent out when a station\n                fails to associate / re-associate / authenticate with the\n                Access Point. The notification shall include the MAC address\n                of the station and the reason code for the failure.')
dot1xMacAddrAuthSuccess = NotificationType((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 2, 9)).setObjects(("CTRON-AP3000-MIB", "apNotificationDot11Station"))
if mibBuilder.loadTexts: dot1xMacAddrAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: dot1xMacAddrAuthSuccess.setDescription('The 802.1X MAC address authentication success notification shall\n                be sent when a station successfully authenticates the MAC address\n                with the RADIUS server. The value of the notification shall\n                include the MAC address of the station that has authenticated.')
dot1xMacAddrAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 2, 10)).setObjects(("CTRON-AP3000-MIB", "apNotificationDot11Station"))
if mibBuilder.loadTexts: dot1xMacAddrAuthFail.setStatus('current')
if mibBuilder.loadTexts: dot1xMacAddrAuthFail.setDescription('The 802.1X MAC address authentication failure notification shall\n                be sent when a station fails to authenticate the MAC address\n                with the RADIUS server. The value of the notification shall\n                include the MAC address of the station that failed to authenticate.')
dot1xAuthNotInitiated = NotificationType((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 2, 11)).setObjects(("CTRON-AP3000-MIB", "apNotificationDot11Station"))
if mibBuilder.loadTexts: dot1xAuthNotInitiated.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthNotInitiated.setDescription('The 802.1X authentication not initiated notification shall\n                be sent when a station did not initiate 802.1X authentication\n                with the RADIUS server. The value of the notification shall\n                include the MAC address of the station that did not initiate\n                802.1X authentication.')
dot1xAuthSuccess = NotificationType((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 2, 12)).setObjects(("CTRON-AP3000-MIB", "apNotificationDot11Station"))
if mibBuilder.loadTexts: dot1xAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthSuccess.setDescription('The 802.1X authentication success notification shall\n                be sent when a station successfully authenticates with the\n                RADIUS server. The value of the notification shall include\n                the MAC address of the station that has authenticated.')
dot1xAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 2, 13)).setObjects(("CTRON-AP3000-MIB", "apNotificationDot11Station"))
if mibBuilder.loadTexts: dot1xAuthFail.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthFail.setDescription('The 802.1X authentication failure notification shall\n                be sent when a station fails to authenticate with the\n                RADIUS server. The value of the notification shall include\n                the MAC address of the station that failed to authenticate.')
localMacAddrAuthSuccess = NotificationType((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 2, 14)).setObjects(("CTRON-AP3000-MIB", "apNotificationDot11Station"))
if mibBuilder.loadTexts: localMacAddrAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: localMacAddrAuthSuccess.setDescription('The Local MAC address authentication success notification shall\n                be sent when a station successfully authenticates the MAC address\n                with the database stored locally within the AP. The value of the\n                notification shall include the MAC address of the station that\n                has authenticated.')
localMacAddrAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 2, 15)).setObjects(("CTRON-AP3000-MIB", "apNotificationDot11Station"))
if mibBuilder.loadTexts: localMacAddrAuthFail.setStatus('current')
if mibBuilder.loadTexts: localMacAddrAuthFail.setDescription('The Local MAC address authentication failure notification shall\n                be sent when a station fails to authenticate the MAC address\n                with the database stored locally within the AP. The value of the\n                notification shall include the MAC address of the station that\n                has authenticated.')
pppLogonFail = NotificationType((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 2, 16))
if mibBuilder.loadTexts: pppLogonFail.setStatus('current')
if mibBuilder.loadTexts: pppLogonFail.setDescription('The PPP Logon failure notification shall be sent out when\n                the AP fails to login successfully to the PPP peer using the\n                supplied username and password.')
iappStationRoamedFrom = NotificationType((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 2, 17)).setObjects(("CTRON-AP3000-MIB", "apNotificationDot11Station"), ("CTRON-AP3000-MIB", "apNotificationDot11IpAddress"))
if mibBuilder.loadTexts: iappStationRoamedFrom.setStatus('current')
if mibBuilder.loadTexts: iappStationRoamedFrom.setDescription('The IAPP Station Roamed-From Notification shall be sent out\n                 whenever a station roams from another Access Point (AP) to\n                 this AP. The notification shall include the MAC address of\n                 the station and the IP address of the old AP.')
iappStationRoamedTo = NotificationType((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 2, 18)).setObjects(("CTRON-AP3000-MIB", "apNotificationDot11Station"), ("CTRON-AP3000-MIB", "apNotificationDot11IpAddress"))
if mibBuilder.loadTexts: iappStationRoamedTo.setStatus('current')
if mibBuilder.loadTexts: iappStationRoamedTo.setDescription('The IAPP Station Roamed-To Notification shall be sent out\n                 whenever a station roams to another Access Point (AP) from\n                 this AP. The notification shall include the MAC address of\n                 the station and the IP address of the new AP.')
iappContextDataSent = NotificationType((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 2, 19)).setObjects(("CTRON-AP3000-MIB", "apNotificationDot11Station"), ("CTRON-AP3000-MIB", "apNotificationDot11IpAddress"))
if mibBuilder.loadTexts: iappContextDataSent.setStatus('current')
if mibBuilder.loadTexts: iappContextDataSent.setDescription('The IAPP Context Data Sent notification shall be sent out\n                 whenever the context data for a station has been sent to\n                 the new AP with which the station has associated. The\n                 notification shall include the MAC address of\n                 the station and the IP address of the new AP.')
sntpServerFail = NotificationType((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 2, 20))
if mibBuilder.loadTexts: sntpServerFail.setStatus('current')
if mibBuilder.loadTexts: sntpServerFail.setDescription('The sntpServerFail notification shall be sent when the AP\n                fails to get time from the configured SNTP server.')
dot11InterfaceAFail = NotificationType((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 2, 21))
if mibBuilder.loadTexts: dot11InterfaceAFail.setStatus('current')
if mibBuilder.loadTexts: dot11InterfaceAFail.setDescription('The InterfaceAFail notification shall be sent out when\n                802.11a wireless interface has failed.')
dot11InterfaceGFail = NotificationType((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 2, 22))
if mibBuilder.loadTexts: dot11InterfaceGFail.setStatus('current')
if mibBuilder.loadTexts: dot11InterfaceGFail.setDescription('The InterfaceGFail notification shall be sent out when\n                802.11g wireless interface has failed.')
dot11WirelessSTPDetection = NotificationType((1, 3, 6, 1, 4, 1, 52, 4, 13, 100, 2, 23))
if mibBuilder.loadTexts: dot11WirelessSTPDetection.setStatus('current')
if mibBuilder.loadTexts: dot11WirelessSTPDetection.setDescription('The WirelessSTPDetection notification shall be sent out when\n                 wireless STP packet has detected.')
mibBuilder.exportSymbols("CTRON-AP3000-MIB", enterpriseApRadioWEPKeyLength=enterpriseApRadioWEPKeyLength, enterpriseApVapRadioIndex=enterpriseApVapRadioIndex, qosMACTypeIndex=qosMACTypeIndex, apEtherInterfaceMgnt=apEtherInterfaceMgnt, swProductName=swProductName, apvMacFilterTable=apvMacFilterTable, ap8021xSessionKeyRefreshRate=ap8021xSessionKeyRefreshRate, apNotificationTrapTree=apNotificationTrapTree, trapSysSystemDown=trapSysSystemDown, dot1xMacAddrAuthSuccess=dot1xMacAddrAuthSuccess, enterpriseApRadioWdsEntry=enterpriseApRadioWdsEntry, apWMMApParamEntry=apWMMApParamEntry, apSyslogServerPort=apSyslogServerPort, apvAuthenticationSetupEntry=apvAuthenticationSetupEntry, apSecuritySshServerPort=apSecuritySshServerPort, trapDot11StationAssociation=trapDot11StationAssociation, apNotificationDot11IpAddress=apNotificationDot11IpAddress, apWMMBssParamAIFSN=apWMMBssParamAIFSN, apWSLSupportRxThreshold=apWSLSupportRxThreshold, comPortMgnt=comPortMgnt, linkQualityStaIndex=linkQualityStaIndex, apvIBSSFilterControl=apvIBSSFilterControl, apWStationSessionRxByteCount=apWStationSessionRxByteCount, macFilterAllowedToGo=macFilterAllowedToGo, cabletron=cabletron, apvAuthenticationSetupTable=apvAuthenticationSetupTable, apRadioSecurityWPACipher=apRadioSecurityWPACipher, apAuthenticationSupplicantTable=apAuthenticationSupplicantTable, apAuthenticationTimeout=apAuthenticationTimeout, apSNTPDSTEndDay=apSNTPDSTEndDay, macFilterEntry=macFilterEntry, enterpriseApRadioWEPKeysIndex=enterpriseApRadioWEPKeysIndex, rogueApBssid=rogueApBssid, apWSLSupportMgnt=apWSLSupportMgnt, apWSLSupportOperationMode=apWSLSupportOperationMode, enterpriseApRadioAutoChannel=enterpriseApRadioAutoChannel, enterpriseApFilterControlAPManage=enterpriseApFilterControlAPManage, apRadioSecurityWEPAuthType=apRadioSecurityWEPAuthType, enterpriseApRadioAvAntennaListEntry=enterpriseApRadioAvAntennaListEntry, apWMMApParamTable=apWMMApParamTable, enterpriseApRadioWEPKeysTable=enterpriseApRadioWEPKeysTable, apRestartOpCodeFile=apRestartOpCodeFile, apSyslogServerEntry=apSyslogServerEntry, apAuthenticationPort=apAuthenticationPort, trapDot11StationReAssociation=trapDot11StationReAssociation, enterpriseApRadioIndex=enterpriseApRadioIndex, apSNTPTimezone=apSNTPTimezone, enterpriseApFilterProtocolTable=enterpriseApFilterProtocolTable, enterpriseApVapRadioTable=enterpriseApVapRadioTable, trapDot11InterfaceAFail=trapDot11InterfaceAFail, qosEtherTypePriority=qosEtherTypePriority, apSnmpCommunityReadOnly=apSnmpCommunityReadOnly, apAuthenticationAcctState=apAuthenticationAcctState, apRadioSecurityWPAMode=apRadioSecurityWPAMode, trapIappStationRoamedFrom=trapIappStationRoamedFrom, enterpriseApRadioAvChannelIndex=enterpriseApRadioAvChannelIndex, wdsApAckTimeout=wdsApAckTimeout, ap8021xSuppPasswd=ap8021xSuppPasswd, apRadioApSecurityWPAPreAuthentication=apRadioApSecurityWPAPreAuthentication, dot11InterfaceAFail=dot11InterfaceAFail, apWMMApParamCWmax=apWMMApParamCWmax, apDNSMgnt=apDNSMgnt, enterpriseApVapRadioSecureAccess=enterpriseApVapRadioSecureAccess, apSecuritySsh=apSecuritySsh, apWSLSupportSecondaryAddress=apWSLSupportSecondaryAddress, qosMACTypePriority=qosMACTypePriority, apRadioInterfaceMgnt=apRadioInterfaceMgnt, enterpriseApRadioAutoDataRate=enterpriseApRadioAutoDataRate, pppLogonFail=pppLogonFail, apWStationSessionLastDisassociatedTime=apWStationSessionLastDisassociatedTime, trapDot11StationRequestFail=trapDot11StationRequestFail, apvGlobalIBSSRelayMode=apvGlobalIBSSRelayMode, linkQualityRadioIndex=linkQualityRadioIndex, apVLANMgnt=apVLANMgnt, qosMACTypeAddress=qosMACTypeAddress, swOpCodeVer=swOpCodeVer, trapIappContextDataSent=trapIappContextDataSent, linkQualityStaMacAddress=linkQualityStaMacAddress, apWStationSessionStationAddres=apWStationSessionStationAddres, wdsPeerRSSI=wdsPeerRSSI, apWMMState=apWMMState, sysSystemDown=sysSystemDown, apWStationSessionAssociated=apWStationSessionAssociated, apAuthenticationMode=apAuthenticationMode, trapDot11StationAuthentication=trapDot11StationAuthentication, ap8021xState=ap8021xState, apDNSSecondaryServer=apDNSSecondaryServer, trapLocalMacAddrAuthSuccess=trapLocalMacAddrAuthSuccess, apRadioSecurityWPACipherSuite=apRadioSecurityWPACipherSuite, apvFilterControlTable=apvFilterControlTable, apSnmpTrapDestinationIP=apSnmpTrapDestinationIP, apvMACAuthenticationMode=apvMACAuthenticationMode, trapDot1xMacAddrAuthSuccess=trapDot1xMacAddrAuthSuccess, rogueApRADIUSAuthenticate=rogueApRADIUSAuthenticate, macFilterMgnt=macFilterMgnt, ap8021xSuppIndex=ap8021xSuppIndex, macFilterTable=macFilterTable, apRadioSecurityWEPKeyType=apRadioSecurityWEPKeyType, enterpriseApRadioWEPKeyType=enterpriseApRadioWEPKeyType, ap8021xSuppUser=ap8021xSuppUser, apNativeVlanTable=apNativeVlanTable, enterpriseApFilterProtocolEntry=enterpriseApFilterProtocolEntry, apNotificationObjects=apNotificationObjects, apAuthenticationAcctPort=apAuthenticationAcctPort, apAuthenticationSupplicantEntry=apAuthenticationSupplicantEntry, macFilterIndex=macFilterIndex, enterpriseApFilterProtocolState=enterpriseApFilterProtocolState, apWMMControlEntry=apWMMControlEntry, ctronAP3000=ctronAP3000, qosEtherTypeEntry=qosEtherTypeEntry, apAdminMgnt=apAdminMgnt, apLogConfigState=apLogConfigState, apRestartControl=apRestartControl, apVLANMgntState=apVLANMgntState, enterpriseApRadioFixedAntennaType=enterpriseApRadioFixedAntennaType, apSnmpTrapDestinationEntry=apSnmpTrapDestinationEntry, iappStationRoamedFrom=iappStationRoamedFrom, qosMACTypeTable=qosMACTypeTable, iappContextDataSent=iappContextDataSent, apFilterControlBridge=apFilterControlBridge, apv8021xSessionKeyRefreshRate=apv8021xSessionKeyRefreshRate, ap8021xReauthenticationTimeout=ap8021xReauthenticationTimeout, apNotificationTrapObjects=apNotificationTrapObjects, apSNTPMgnt=apSNTPMgnt, dot11StationAssociation=dot11StationAssociation, apv8021xBroadcastKeyRefreshRate=apv8021xBroadcastKeyRefreshRate, apVLANMgntEtherUntaggedVlanId=apVLANMgntEtherUntaggedVlanId, enterpriseApVapRadioMaxAssoc=enterpriseApVapRadioMaxAssoc, dot11WirelessSTPDetection=dot11WirelessSTPDetection, apNotificationDot11ReasonCode=apNotificationDot11ReasonCode, enterpriseApRadioWdsPeerEntry=enterpriseApRadioWdsPeerEntry, apNativeVlanSsidNumber=apNativeVlanSsidNumber, apvMacFilterOperateTable=apvMacFilterOperateTable, apSNTPPrimaryServer=apSNTPPrimaryServer, enterpriseApRadioWdsPeerTable=enterpriseApRadioWdsPeerTable, apvMacFilterOperateEntry=apvMacFilterOperateEntry, enterpriseApVapRadioDescription=enterpriseApVapRadioDescription, apNotificationDot11MacAddr=apNotificationDot11MacAddr, trapPppLogonFail=trapPppLogonFail, apWMMBssParamCWmin=apWMMBssParamCWmin, apWSLSupportPort=apWSLSupportPort, apSecuritySshServerEnabled=apSecuritySshServerEnabled, apvMacFilterActivity=apvMacFilterActivity, apWMMApParamCWmin=apWMMApParamCWmin, sysEntity=sysEntity, enterpriseApFilterProtocolName=enterpriseApFilterProtocolName, qosMACTypeOpeStatus=qosMACTypeOpeStatus, apEtherNetConfig=apEtherNetConfig, trapSntpServerFail=trapSntpServerFail, trapSysRadiusServerChanged=trapSysRadiusServerChanged, netConfigSubnetMask=netConfigSubnetMask, qosEtherTypeIndex=qosEtherTypeIndex, netConfigHttpsPort=netConfigHttpsPort, apWSLSupportMasterAddress=apWSLSupportMasterAddress, apSnmpCommunityReadWrite=apSnmpCommunityReadWrite, trapIappStationRoamedTo=trapIappStationRoamedTo, enterpriseApRadioSWRetryMode=enterpriseApRadioSWRetryMode, apEventLogEntry=apEventLogEntry, apSNTPDSTStartDay=apSNTPDSTStartDay, enterpriseApRadioWEPKeysEntry=enterpriseApRadioWEPKeysEntry, enterpriseApRadioDataRate=enterpriseApRadioDataRate, apSNTPState=apSNTPState, enterpriseApRadioAvAntennaIndex=enterpriseApRadioAvAntennaIndex, apAuthenticationServerEntry=apAuthenticationServerEntry, dot1xAuthSuccess=dot1xAuthSuccess, apSNTPSecondaryServer=apSNTPSecondaryServer, enterpriseApRadioPreamble=enterpriseApRadioPreamble, apRadioSecurityWPAKeyType=apRadioSecurityWPAKeyType, apAuthenticationMgnt=apAuthenticationMgnt, apNativeVlanIfIndex=apNativeVlanIfIndex, apWStationSessionVlanID=apWStationSessionVlanID, apWSLSupportHeartbeatInterval=apWSLSupportHeartbeatInterval, apWStationSessionAssociatedTime=apWStationSessionAssociatedTime, apSnmpVersionFilter=apSnmpVersionFilter, dot11StationRequestFail=dot11StationRequestFail, apNativeVlanVlanId=apNativeVlanVlanId, apAuthenticationSetupEntry=apAuthenticationSetupEntry, apRadioSecuritySharedKeyLen=apRadioSecuritySharedKeyLen, enterpriseApVapRadioEntry=enterpriseApVapRadioEntry, apEventLogMessage=apEventLogMessage, apNotificationDot11AuthenticatorMacAddr=apNotificationDot11AuthenticatorMacAddr, enterpriseApFilterControlEthernet=enterpriseApFilterControlEthernet, apRadioSecurityEntry=apRadioSecurityEntry, netConfigHttpState=netConfigHttpState, linkQualityTable=linkQualityTable, ap8021xBroadcastKeyRefreshRate=ap8021xBroadcastKeyRefreshRate, swCountrySetting=swCountrySetting, apv8021xIndex=apv8021xIndex, apSyslogServerIPAddress=apSyslogServerIPAddress, apDNSPrimaryServer=apDNSPrimaryServer, apWStationSessionKeyType=apWStationSessionKeyType, apWStationSessionTxByteCount=apWStationSessionTxByteCount, apvMacFilterAddressToAdd=apvMacFilterAddressToAdd, apNotificationDot11RequestType=apNotificationDot11RequestType, enterpriseApRadioAvChannelListTable=enterpriseApRadioAvChannelListTable, apWSLSupportControlStatus=apWSLSupportControlStatus, apSecuritySshTelnetServerEnabled=apSecuritySshTelnetServerEnabled, apVLANMgntNativeId=apVLANMgntNativeId, apSnmpTrapDestinationIndex=apSnmpTrapDestinationIndex, apIappEnabled=apIappEnabled, apvMacFilterEntry=apvMacFilterEntry, apRadioSecurityWPAPSK=apRadioSecurityWPAPSK, apEventLogClear=apEventLogClear, apSyslogLevel=apSyslogLevel, apEventLogTable=apEventLogTable, apSyslogServerState=apSyslogServerState, enterpriseApRadioTurboMode=enterpriseApRadioTurboMode, sysRadiusServerChanged=sysRadiusServerChanged, apSNTPDSTEndMonth=apSNTPDSTEndMonth, apvMACAuthenticationTimeout=apvMACAuthenticationTimeout, apWMMApParamAIFSN=apWMMApParamAIFSN, dot1xAuthFail=dot1xAuthFail, apSnmpTrapDestinationTable=apSnmpTrapDestinationTable, apWStationSessionAuthenticated=apWStationSessionAuthenticated, enterpriseApVapRadioTransmitKey=enterpriseApVapRadioTransmitKey, apRadioSecurityWPAPSKType=apRadioSecurityWPAPSKType, apNativeVlanState=apNativeVlanState, apIappMgnt=apIappMgnt, dot1xMacAddrAuthFail=dot1xMacAddrAuthFail, apvFilterControlIndex=apvFilterControlIndex, netConfigDHCPState=netConfigDHCPState, qosEtherTypeTable=qosEtherTypeTable, linkQualityMgnt=linkQualityMgnt, rogueApIndex=rogueApIndex, qosModeControl=qosModeControl, apvMacFilterPermission=apvMacFilterPermission, apNativeVlanEntry=apNativeVlanEntry, apWStationSessionTxPacketCount=apWStationSessionTxPacketCount, apvMacFilterAddress=apvMacFilterAddress, apWMMControlTable=apWMMControlTable, apSNTPDST=apSNTPDST, apSnmpTrapDestinationState=apSnmpTrapDestinationState, apSyslogServerTable=apSyslogServerTable, enterpriseApRadioGMode=enterpriseApRadioGMode, trapSysSystemUp=trapSysSystemUp, rogueApPortNumber=rogueApPortNumber, rogueApScanNow=rogueApScanNow, apSnmpTrapDestinationCommunity=apSnmpTrapDestinationCommunity, apWStationSessionIfIndex=apWStationSessionIfIndex, enterpriseApRadioAntennaID=enterpriseApRadioAntennaID, apEventLogIndex=apEventLogIndex, apWMMBssParamCWmax=apWMMBssParamCWmax, comPortControl=comPortControl, apSNTPDSTStartMonth=apSNTPDSTStartMonth, swSerialNumber=swSerialNumber, wdsPeerIndex=wdsPeerIndex, enterpriseApRadioAntennaMode=enterpriseApRadioAntennaMode, rogueApClear=rogueApClear, rogueApState=rogueApState, wdsApRole=wdsApRole, sntpServerFail=sntpServerFail, rogueApDetectionTable=rogueApDetectionTable, enterpriseApRadioTable=enterpriseApRadioTable, netConfigHttpPort=netConfigHttpPort)
mibBuilder.exportSymbols("CTRON-AP3000-MIB", apWMMBssParamTXOPLimit=apWMMBssParamTXOPLimit, apAuthenticationRetransmit=apAuthenticationRetransmit, rogueApDetectionEntry=rogueApDetectionEntry, localMacAddrAuthSuccess=localMacAddrAuthSuccess, apRadioSecurityIndex=apRadioSecurityIndex, apAdminUsername=apAdminUsername, dot1xAuthNotInitiated=dot1xAuthNotInitiated, sysSystemUp=sysSystemUp, apWMMApParamAdmissionControl=apWMMApParamAdmissionControl, apAuthenticationKey=apAuthenticationKey, netConfigIPAddress=netConfigIPAddress, apWStationSessionEntry=apWStationSessionEntry, enterpriseApVapRadioDefefaultPriority=enterpriseApVapRadioDefefaultPriority, trapDot11InterfaceGFail=trapDot11InterfaceGFail, netConfigHttpsState=netConfigHttpsState, swHardwareVer=swHardwareVer, apvMACAuthenticationPasswd=apvMACAuthenticationPasswd, rogueApSsid=rogueApSsid, trapLocalMacAddrAuthFail=trapLocalMacAddrAuthFail, apRadioSecurityTable=apRadioSecurityTable, apAuthenticationServer=apAuthenticationServer, apAuthenticationServerIndex=apAuthenticationServerIndex, apWMMApParamIndex=apWMMApParamIndex, apWStationSessionLastAssociatedTime=apWStationSessionLastAssociatedTime, enterpriseApRadioMulticastDataRate=enterpriseApRadioMulticastDataRate, qosEtherTypeOpeStatus=qosEtherTypeOpeStatus, dot11StationAuthentication=dot11StationAuthentication, apFilterControlMgnt=apFilterControlMgnt, localMacAddrAuthFail=localMacAddrAuthFail, apWMMBssParamEntry=apWMMBssParamEntry, apSecurityMgnt=apSecurityMgnt, rogueApDuration=rogueApDuration, apWSLSupportControl=apWSLSupportControl, apvMacFilterIndex=apvMacFilterIndex, apWSLRFAreaPollControl=apWSLRFAreaPollControl, apWStationSessionIsForwarding=apWStationSessionIsForwarding, netConfigDefaultGateway=netConfigDefaultGateway, apSyslogConfigMgnt=apSyslogConfigMgnt, enterpriseApFilterProtocolISODesignator=enterpriseApFilterProtocolISODesignator, apSyslogServerIndex=apSyslogServerIndex, trapDot11WirelessSTPDetection=trapDot11WirelessSTPDetection, enterpriseApRadioAvChannelListEntry=enterpriseApRadioAvChannelListEntry, qosSVPStatus=qosSVPStatus, enterpriseApRadioAvAntennaId=enterpriseApRadioAvAntennaId, apWMMBssParamAdmissionControl=apWMMBssParamAdmissionControl, enterpriseApFilterProtocolIndex=enterpriseApFilterProtocolIndex, DisplayString=DisplayString, apRadioSecurityWEPEnabled=apRadioSecurityWEPEnabled, linkQualityEntry=linkQualityEntry, apWStationSessionMgnt=apWStationSessionMgnt, apv8021xReauthenticationTimeout=apv8021xReauthenticationTimeout, apAuthenticationServerTable=apAuthenticationServerTable, apAuthenticationAcctInterimUpdate=apAuthenticationAcctInterimUpdate, qosQueueingMode=qosQueueingMode, swBootRomVer=swBootRomVer, apWSLRFAreaPollControlStatus=apWSLRFAreaPollControlStatus, apRadioApSecurityWPAPmksaLifetime=apRadioApSecurityWPAPmksaLifetime, PYSNMP_MODULE_ID=ctronAP3000, apWStationSessionAssociationId=apWStationSessionAssociationId, linkQualityStaRssi=linkQualityStaRssi, dot11InterfaceGFail=dot11InterfaceGFail, enterpriseApRadioAntennaModeControl=enterpriseApRadioAntennaModeControl, trapConfiguration=trapConfiguration, apWMMApParamTXOPLimit=apWMMApParamTXOPLimit, apRogueApMgnt=apRogueApMgnt, enterpriseApRadioEntry=enterpriseApRadioEntry, apWStationSessionRxPacketCount=apWStationSessionRxPacketCount, rogueApChannelNumber=rogueApChannelNumber, apvAPManageFilterControl=apvAPManageFilterControl, apWStationSessionTable=apWStationSessionTable, MacAddress=MacAddress, macFilterOpeStatus=macFilterOpeStatus, qosEtherTypeHexValue=qosEtherTypeHexValue, enterpriseApRadioTransmitPower=enterpriseApRadioTransmitPower, apVLANMgntStateNextBoot=apVLANMgntStateNextBoot, qosMACTypeEntry=qosMACTypeEntry, wdsPeerBssid=wdsPeerBssid, iappStationRoamedTo=iappStationRoamedTo, trapControl=trapControl, apvFilterControlEntry=apvFilterControlEntry, enterpriseApVapRadioState=enterpriseApVapRadioState, trapDot1xMacAddrAuthFail=trapDot1xMacAddrAuthFail, apMacFilterControl=apMacFilterControl, apWStationSessionLastAuthenticatedTime=apWStationSessionLastAuthenticatedTime, apWMMBssParamIndex=apWMMBssParamIndex, rogueApInterval=rogueApInterval, qosMgnt=qosMgnt, enterpriseApRadioWdsTable=enterpriseApRadioWdsTable, trapDot1xAuthNotInitiated=trapDot1xAuthNotInitiated, apSyslogConsoleState=apSyslogConsoleState, apWSLSupportHeartbeatLastChange=apWSLSupportHeartbeatLastChange, ap8021xSuppState=ap8021xSuppState, enterpriseApRadioAvAntennaListTable=enterpriseApRadioAvAntennaListTable, trapDot1xAuthSuccess=trapDot1xAuthSuccess, apEventLogMgnt=apEventLogMgnt, macFilterAddress=macFilterAddress, apResetMgt=apResetMgt, appAdminPassword=appAdminPassword, enterpriseApRadioAvChannelNo=enterpriseApRadioAvChannelNo, TruthValue=TruthValue, enterpriseApRadioAvAntennaDesc=enterpriseApRadioAvAntennaDesc, apNotificationDot11Station=apNotificationDot11Station, apSnmpMgnt=apSnmpMgnt, mibs=mibs, apv8021xState=apv8021xState, trapDot1xAuthFail=trapDot1xAuthFail, rogueApRSSIValue=rogueApRSSIValue, apWMMMgnt=apWMMMgnt, apRougeApControl=apRougeApControl, dot11StationReAssociation=dot11StationReAssociation, apWMMBssParamTable=apWMMBssParamTable)
