#
# PySNMP MIB module WEBMON-EDGE-MATRIX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/dantel/WEBMON-EDGE-MATRIX-MIB
# Produced by pysmi-1.1.12 at Wed May 29 07:59:53 2024
# On host fv-az1024-251 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, TimeTicks, iso, enterprises, Integer32, Counter64, Unsigned32, ObjectIdentity, Gauge32, IpAddress, MibIdentifier, Counter32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "TimeTicks", "iso", "enterprises", "Integer32", "Counter64", "Unsigned32", "ObjectIdentity", "Gauge32", "IpAddress", "MibIdentifier", "Counter32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
moduleIdentity = ModuleIdentity((1, 3, 6, 1, 4, 1, 994, 3, 4, 3))
moduleIdentity.setRevisions(('2015-08-04 18:50',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: moduleIdentity.setRevisionsDescriptions(('MIB for WebMon Edge-Matrix version 1.19.0.',))
if mibBuilder.loadTexts: moduleIdentity.setLastUpdated('201508041850Z')
if mibBuilder.loadTexts: moduleIdentity.setOrganization('Dantel, Inc.')
if mibBuilder.loadTexts: moduleIdentity.setContactInfo('Dantel, Inc.\n\t\t\t\tP.O. Box 55013\n\t\t\t\tFresno, CA 93747-5013\n\t\t\t\t\n\t\t\t\tFor customer support, call:\n\t\t\t\t1-800-4-DANTEL')
if mibBuilder.loadTexts: moduleIdentity.setDescription('WebMon Edge-Matrix MIB.')
class DescriptionString(TextualConvention, OctetString):
    description = 'A character string used for descriptions.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 80)

class DigitalState(TextualConvention, Integer32):
    description = 'A type with only two states, used specifically to represent the \n\t\t\t\tstate of a digital reading.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("off", 0), ("on", 1))

class Boolean(TextualConvention, Integer32):
    description = 'A type with only two states.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("false", 0), ("true", 1))

class ConnectivityState(TextualConvention, Integer32):
    description = 'Used for the state of a connection.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("online", 0), ("offline", 1))

class AnalogState(TextualConvention, Integer32):
    description = 'Defines states for an analog input.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("highHigh", 0), ("high", 1), ("medium", 2), ("low", 3), ("lowLow", 4))

class Configured(TextualConvention, Integer32):
    description = 'In use'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("not-in-use", 0), ("always-in-use", 1), ("schedule-a", 2), ("schedule-b", 3), ("schedule-c", 4), ("schedule-d", 5))

class Level(TextualConvention, Integer32):
    description = 'Describes a priority or level.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("normal", 0), ("critical", 1), ("major", 2), ("minor", 3), ("status", 4))

class SnmpVersion(TextualConvention, Integer32):
    description = 'Defines which version of SNMP is used for traps.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("snmpv1", 0), ("snmpv2c", 1), ("snmpv3", 2), ("snmpv2c-inform", 3), ("snmpv3-inform", 4))

class CameraStyle(TextualConvention, Integer32):
    description = 'Defines the different types of IP cameras supported.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("d-link-dcs1000", 0), ("sony-snc-rz30n", 1), ("axis-2100", 2), ("d-link-dcs2000", 3), ("d-link-dcs5300", 4), ("axis-210", 5), ("axis-m1103", 6))

class ContactStyle(TextualConvention, Integer32):
    description = 'Defines the different types of discrete alarm contacts.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("dry-contact", 0), ("wet-contact", 1))

class MeasureStyle(TextualConvention, Integer32):
    description = 'Defines state of measurement style English or Metic.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("english", 0), ("metric", 1))

class OutputMode(TextualConvention, Integer32):
    description = 'Defines the different ways a control point can be activated.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("manual", 0), ("automatic", 1))

class OutputState(TextualConvention, Integer32):
    description = 'Defines states for an output.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("open", 0), ("closed", 1))

class BaudRate(TextualConvention, Integer32):
    description = 'Defines baud rates for serial communication.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(300, 600, 1200, 2400, 4800, 9600, 19200, 28800, 38400))
    namedValues = NamedValues(("baud-300", 300), ("baud-600", 600), ("baud-1200", 1200), ("baud-2400", 2400), ("baud-4800", 4800), ("baud-9600", 9600), ("baud-19200", 19200), ("baud-28800", 28800), ("baud-38400", 38400))

class DataBits(TextualConvention, Integer32):
    description = 'Defines the number of data bits in a byte for serial communication.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(7, 8))
    namedValues = NamedValues(("data-bits-7", 7), ("data-bits-8", 8))

class Parity(TextualConvention, Integer32):
    description = 'Defines the parity for serial communication.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("even-parity", 1), ("odd-parity", 2))

class StopBits(TextualConvention, Integer32):
    description = 'Defines the number of stop bits in a byte for serial communication.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("stop-bit-1", 1), ("stop-bits-2", 2))

class Protocol(TextualConvention, Integer32):
    description = 'Defines different protocols used for communication.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))
    namedValues = NamedValues(("none", 0), ("command-line", 1), ("modbus-interrogation", 2), ("configuration-transfer", 3), ("ip-switchboard", 4), ("terminal-server", 5), ("user-login", 6), ("modem-mode", 7), ("ppp-server", 8), ("dcm-responder", 9), ("ascii-log-single-line", 10), ("e2a-host", 11), ("gps-reader", 12), ("port-redirect", 13), ("sensor-reader", 14), ("tl1-responder", 15), ("dcpf-responder", 16), ("lcd-protocol", 17), ("tabs-responder", 18), ("configuration-menu", 19))

class SerialRTS(TextualConvention, Integer32):
    description = 'Defines the different RTS states for serial communication.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("rts-never-on", 0), ("rts-always-on", 1), ("rts-on-for-transmit", 2))

class SerialCTS(TextualConvention, Integer32):
    description = 'Defines the different CTS states for serial communication.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("cts-ignore", 0), ("cts-require", 1))

class SlotId(TextualConvention, Integer32):
    description = 'Defines the different types of slot types available.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("empty", 0), ("discrete-inputs", 1), ("discrete-outputs", 2), ("serial-ports", 3), ("onboard-sensors", 4), ("analog-inputs", 5), ("switch-ports", 6), ("sensor-inputs", 7))

class ProductType(TextualConvention, Integer32):
    description = 'Defines the type of device.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("webmon-edge", 0), ("webmon-matrix", 1))

class VoltageRange(TextualConvention, Integer32):
    description = 'Defines the valid voltage ranges.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(100, 5))
    namedValues = NamedValues(("plus-minus-100-volts", 100), ("sensor-port", 5))

class IOFormat(TextualConvention, Integer32):
    description = 'Defines the physical pin layout of slot cards.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("single-pin", 0), ("single-pin-with-ground", 1), ("two-pins", 2), ("two-pins-with-ground", 3), ("two-pins-right-to-left", 4), ("three-pins", 5), ("three-pins-right-to-left", 6), ("rj", 7), ("onboard-built-in", 8))

class PortType(TextualConvention, Integer32):
    description = 'Defines the type of serial port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("not-present", 0), ("rs-232", 1), ("rs-485", 2), ("dialup", 3), ("iden", 4), ("e2a", 5), ("cdma", 6), ("gps", 7), ("edge", 8), ("t202", 9))

class DiscreteFormula(TextualConvention, Integer32):
    description = 'Defines the type of formula used for derived discretes.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("a-and-b", 0), ("not-a-and-b", 1), ("a-and-not-b", 2), ("not-a-and-not-b", 3), ("a-or-b", 4), ("not-a-or-b", 5), ("a-or-not-b", 6), ("not-a-or-not-b", 7), ("a-xor-b", 8), ("not-a-xor-b", 9), ("a-xor-not-b", 10), ("not-a-xor-not-b", 11))

class DayOfWeek(TextualConvention, Integer32):
    description = 'Day of the week'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("sunday", 0), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6))

class ConfiguredState(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("disabled", 0), ("enabled", 1))

class TL1Srveff(TextualConvention, Integer32):
    description = 'Service Effecting'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("blank", 0), ("sa", 1), ("nsa", 2))

class TL1Locn(TextualConvention, Integer32):
    description = 'Location'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("blank", 0), ("nend", 1), ("fend", 2), ("line", 3))

class TL1Dirn(TextualConvention, Integer32):
    description = 'Direction'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("blank", 0), ("trmt", 1), ("rcv", 2), ("na", 3))

class TL1Issue(TextualConvention, Integer32):
    description = 'TL1 Issue'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 5))
    namedValues = NamedValues(("issue-3", 3), ("issue-5", 5))

class UseDialout(TextualConvention, Integer32):
    description = 'Use Dialout'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("never", 0), ("always", 1), ("as-backup", 2))

class SensorType(TextualConvention, Integer32):
    description = 'Sensor Type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("raw", 0), ("temperature", 1), ("humidity", 2))

class SNMPCommandType(TextualConvention, Integer32):
    description = 'Command type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(160, 163))
    namedValues = NamedValues(("get", 160), ("set", 163))

class SNMPVarbindType(TextualConvention, Integer32):
    description = 'Value type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 4))
    namedValues = NamedValues(("integer", 2), ("string", 4))

class SNMPAccess(TextualConvention, Integer32):
    description = 'Auth/Priv type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("noauthnopriv", 0), ("authnopriv-md5", 1), ("authpriv-md5", 2), ("authnopriv-sha", 3), ("authpriv-sha", 4))

class MODBUSCommand(TextualConvention, Integer32):
    description = 'Function code'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4))
    namedValues = NamedValues(("read-holding-register", 3), ("read-input-register", 4))

class EthernetType(TextualConvention, Integer32):
    description = 'Ethernet Type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("allow-full-duplex", 0), ("force-half-duplex", 1))

class EthernetRate(TextualConvention, Integer32):
    description = 'Ethernet Rate'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("allow-100-mbps", 0), ("force-10-mbps", 1))

dantel = MibIdentifier((1, 3, 6, 1, 4, 1, 994))
dantelProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 994, 3))
webMon = ObjectIdentity((1, 3, 6, 1, 4, 1, 994, 3, 4))
if mibBuilder.loadTexts: webMon.setStatus('current')
if mibBuilder.loadTexts: webMon.setDescription('The parent node representing the WebMon device.')
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 994, 3, 4, 7))
triggers = MibIdentifier((1, 3, 6, 1, 4, 1, 994, 3, 4, 8))
resetDevice = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 8, 1), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetDevice.setStatus('current')
if mibBuilder.loadTexts: resetDevice.setDescription('Setting this item to true will cause a reset of the device.  \n\t\t\t\t Setting this item to false will have no effect.')
commitAccountChanges = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 8, 2), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commitAccountChanges.setStatus('current')
if mibBuilder.loadTexts: commitAccountChanges.setDescription('Setting this item to true will cause any user account changes to go into effect immediatly.  \n\t\t\t\t Setting this item to false will have no effect.')
resendEvents = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 8, 3), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resendEvents.setStatus('current')
if mibBuilder.loadTexts: resendEvents.setDescription('Setting this item to true will cause the device to resend traps for any standing alarms.\n\t\t\t\t Setting this item to false will have no effect.')
systemGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 1))
systemGeneralLocation = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 1, 2), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemGeneralLocation.setStatus('current')
if mibBuilder.loadTexts: systemGeneralLocation.setDescription('Location on the device.')
systemGeneralDescription = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 1, 3), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemGeneralDescription.setStatus('current')
if mibBuilder.loadTexts: systemGeneralDescription.setDescription('Description of the device.')
systemGeneralIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemGeneralIpAddress.setStatus('current')
if mibBuilder.loadTexts: systemGeneralIpAddress.setDescription('IP Address of the device.  If changed, the new IP address \n\t\t\t\twill only take effect after a reset.')
systemGeneralSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemGeneralSubnetMask.setStatus('current')
if mibBuilder.loadTexts: systemGeneralSubnetMask.setDescription('Subnet Mask of the device.  If changed, the new IP address \n\t\t\t\twill only take effect after a reset.')
systemGeneralGatewayAddress = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemGeneralGatewayAddress.setStatus('current')
if mibBuilder.loadTexts: systemGeneralGatewayAddress.setDescription('Gateway Address of the device.  If changed, the new IP address \n\t\t\t\twill only take effect after a reset.')
systemGeneralReadPeriod = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemGeneralReadPeriod.setStatus('current')
if mibBuilder.loadTexts: systemGeneralReadPeriod.setDescription('The number of minutes until the WebMon resets itself.')
systemGeneralMeasureStyle = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 1, 45), MeasureStyle()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemGeneralMeasureStyle.setStatus('current')
if mibBuilder.loadTexts: systemGeneralMeasureStyle.setDescription('Determines if units are displayed in English or Metric.')
systemGeneralMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 1, 54), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemGeneralMacAddress.setStatus('current')
if mibBuilder.loadTexts: systemGeneralMacAddress.setDescription('The MAC address of the device.')
systemGeneralProductType = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 1, 70), ProductType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemGeneralProductType.setStatus('current')
if mibBuilder.loadTexts: systemGeneralProductType.setDescription('Describes the type of device.')
systemGeneralIPPortNum = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 1, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemGeneralIPPortNum.setStatus('current')
if mibBuilder.loadTexts: systemGeneralIPPortNum.setDescription('IP port number to use when connecting to the web page (HTTP).')
systemGeneralVersion = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 1, 82), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemGeneralVersion.setStatus('current')
if mibBuilder.loadTexts: systemGeneralVersion.setDescription('The version of the running software.')
systemGeneralUseResetTime = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 1, 98), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemGeneralUseResetTime.setStatus('current')
if mibBuilder.loadTexts: systemGeneralUseResetTime.setDescription('If enabled, the WebMon will reset periodically.')
systemGeneralEthernetType = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 1, 147), EthernetType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemGeneralEthernetType.setStatus('current')
if mibBuilder.loadTexts: systemGeneralEthernetType.setDescription('Ethernet duplex type of the device.  If changed, the new duplex type \n\t\t\t\twill only take effect after a reset.')
systemGeneralEthernetRate = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 1, 148), EthernetRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemGeneralEthernetRate.setStatus('current')
if mibBuilder.loadTexts: systemGeneralEthernetRate.setDescription('Ethernet rate of the device.  If changed, the new rate \n\t\t\t\twill only take effect after a reset.')
systemGeneralContact = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 1, 149), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemGeneralContact.setStatus('current')
if mibBuilder.loadTexts: systemGeneralContact.setDescription('SNMP contact information.')
pTrapTargetTable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 2), )
if mibBuilder.loadTexts: pTrapTargetTable.setStatus('current')
if mibBuilder.loadTexts: pTrapTargetTable.setDescription('Table for configuration of TrapTarget')
pTrapTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 2, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pTrapTargetIndex"))
if mibBuilder.loadTexts: pTrapTargetEntry.setStatus('current')
if mibBuilder.loadTexts: pTrapTargetEntry.setDescription('Entry for configuration table of TrapTarget')
pTrapTargetDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 2, 1, 3), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapTargetDescription.setStatus('current')
if mibBuilder.loadTexts: pTrapTargetDescription.setDescription('Description of the trap target.')
pTrapTargetConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 2, 1, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapTargetConfigured.setStatus('current')
if mibBuilder.loadTexts: pTrapTargetConfigured.setDescription('Determines if traps will be sent to trap target with given IP address.')
pTrapTargetIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 2, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapTargetIpAddress.setStatus('current')
if mibBuilder.loadTexts: pTrapTargetIpAddress.setDescription('SNMP traps are sent to this IP address.')
pTrapTargetSnmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 2, 1, 42), SnmpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapTargetSnmpVersion.setStatus('current')
if mibBuilder.loadTexts: pTrapTargetSnmpVersion.setDescription('Indicates the version of SNMP trap to use.')
pTrapTargetIPPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 2, 1, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapTargetIPPortNum.setStatus('current')
if mibBuilder.loadTexts: pTrapTargetIPPortNum.setDescription('SNMP traps are sent to this network port.')
pTrapTargetBackupIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 2, 1, 78), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapTargetBackupIPAddress.setStatus('current')
if mibBuilder.loadTexts: pTrapTargetBackupIPAddress.setDescription('Used only when dialing out as backup.')
pTrapTargetUseDialout = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 2, 1, 125), UseDialout()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapTargetUseDialout.setStatus('current')
if mibBuilder.loadTexts: pTrapTargetUseDialout.setDescription('Determines if traps will be sent only when dialed out.')
pTrapTargetDialoutTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 2, 1, 126), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapTargetDialoutTarget.setStatus('current')
if mibBuilder.loadTexts: pTrapTargetDialoutTarget.setDescription('Determines which target to dial out to when sending traps.')
pTrapTargetAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 2, 1, 140), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapTargetAuthKey.setStatus('current')
if mibBuilder.loadTexts: pTrapTargetAuthKey.setDescription('')
pTrapTargetPrivKey = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 2, 1, 141), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapTargetPrivKey.setStatus('current')
if mibBuilder.loadTexts: pTrapTargetPrivKey.setDescription('')
pTrapTargetSNMPAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 2, 1, 142), SNMPAccess()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapTargetSNMPAccess.setStatus('current')
if mibBuilder.loadTexts: pTrapTargetSNMPAccess.setDescription('')
pTrapTargetEngineID = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 2, 1, 143), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapTargetEngineID.setStatus('current')
if mibBuilder.loadTexts: pTrapTargetEngineID.setDescription('')
pTrapTargetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 2, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pTrapTargetIndex.setStatus('current')
if mibBuilder.loadTexts: pTrapTargetIndex.setDescription('Index.')
pEmailTable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 3), )
if mibBuilder.loadTexts: pEmailTable.setStatus('current')
if mibBuilder.loadTexts: pEmailTable.setDescription('Table for configuration of Email')
pEmailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 3, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pEmailIndex"))
if mibBuilder.loadTexts: pEmailEntry.setStatus('current')
if mibBuilder.loadTexts: pEmailEntry.setDescription('Entry for configuration table of Email')
pEmailAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 3, 1, 1), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pEmailAddress.setStatus('current')
if mibBuilder.loadTexts: pEmailAddress.setDescription('Email events will be sent to this address.')
pEmailDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 3, 1, 3), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pEmailDescription.setStatus('current')
if mibBuilder.loadTexts: pEmailDescription.setDescription('Description of the Email target.')
pEmailConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 3, 1, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pEmailConfigured.setStatus('current')
if mibBuilder.loadTexts: pEmailConfigured.setDescription('If set to true, email events will be sent to given address.\n\t\t\t\tIf set to false, email will not be sent.')
pEmailIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 3, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pEmailIndex.setStatus('current')
if mibBuilder.loadTexts: pEmailIndex.setDescription('Index.')
pRemoteSensorTable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5), )
if mibBuilder.loadTexts: pRemoteSensorTable.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorTable.setDescription('Table for configuration of RemoteSensor')
pRemoteSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorIndex"))
if mibBuilder.loadTexts: pRemoteSensorEntry.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorEntry.setDescription('Entry for configuration table of RemoteSensor')
pRemoteSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 3), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorDescription.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorDescription.setDescription('Description of the Analog device.')
pRemoteSensorDesc0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 4), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorDesc0.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorDesc0.setDescription('The description for values between threshold 0 and threshold 1.')
pRemoteSensorDesc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 5), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorDesc1.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorDesc1.setDescription('The description for values between threshold 1 and threshold 2.')
pRemoteSensorDesc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 6), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorDesc2.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorDesc2.setDescription('The description for values between threshold 2 and threshold 3.')
pRemoteSensorDesc3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 7), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorDesc3.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorDesc3.setDescription('The description for values between threshold 3 and threshold 4.')
pRemoteSensorDesc4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 8), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorDesc4.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorDesc4.setDescription('The description for values between threshold 4 and threshold 5.')
pRemoteSensorDesc5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 9), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorDesc5.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorDesc5.setDescription('Description for a communications failure to the remote analog device.')
pRemoteSensorConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorConfigured.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorConfigured.setDescription('If set to true analog values will be monitored. \n\t\t\t\tIf set to false no values will be monitored.')
pRemoteSensorSendEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 11), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorSendEmail.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorSendEmail.setDescription('If set to true an email event will be set when a threshold is crossed.\n\t\t\t\tIf set to false no email event will be sent.')
pRemoteSensorSendSNMPTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 12), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorSendSNMPTrap.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorSendSNMPTrap.setDescription('If set to true an SNMP trap will be set when a threshold is crossed.\n\t\t\t\tIf set to false no SNMP trap will be sent.')
pRemoteSensorLevel0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 17), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorLevel0.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorLevel0.setDescription('The level for values between threshold 0 and threshold 1.')
pRemoteSensorLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 18), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorLevel1.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorLevel1.setDescription('The level for values between threshold 1 and threshold 2.')
pRemoteSensorLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 19), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorLevel2.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorLevel2.setDescription('The level for values between threshold 2 and threshold 3.')
pRemoteSensorLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 20), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorLevel3.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorLevel3.setDescription('The level for values between threshold 3 and threshold 4.')
pRemoteSensorLevel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 21), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorLevel4.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorLevel4.setDescription('The level for values between threshold 4 and threshold 5.')
pRemoteSensorLevel5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 22), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorLevel5.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorLevel5.setDescription('Level of a communications failure to the remote analog device.')
pRemoteSensorThresh0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 28), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorThresh0.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorThresh0.setDescription('This is the maximum analog value.')
pRemoteSensorThresh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 29), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorThresh1.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorThresh1.setDescription('This is the first threshold value.')
pRemoteSensorThresh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 30), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorThresh2.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorThresh2.setDescription('This is the second threshold value.')
pRemoteSensorThresh3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 31), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorThresh3.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorThresh3.setDescription('This is the third threshold value.')
pRemoteSensorThresh4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 32), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorThresh4.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorThresh4.setDescription('This is the fourth threshold value.')
pRemoteSensorThresh5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 33), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorThresh5.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorThresh5.setDescription('This is the minimum threshold value.')
pRemoteSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 46), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorUnits.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorUnits.setDescription('Description of the units of measurement.')
pRemoteSensorPollAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorPollAddress.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorPollAddress.setDescription('The polling address of the analog device.')
pRemoteSensorLiveDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 64), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRemoteSensorLiveDescription.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorLiveDescription.setDescription('The description  of  the current state of the analog device')
pRemoteSensorLiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 65), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRemoteSensorLiveLevel.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorLiveLevel.setDescription('The level of the current state of the analog device.')
pRemoteSensorLiveRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 66), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRemoteSensorLiveRaw.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorLiveRaw.setDescription('The current reading from the analog device.  This value will always\n\t\t\t\tbe between the threshold 0 and threshold 5 values.')
pRemoteSensorLiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 67), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRemoteSensorLiveTime.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorLiveTime.setDescription('The time of the last event.')
pRemoteSensorTL1SID = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 116), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorTL1SID.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorTL1SID.setDescription('(TL1) System ID associated with this item.')
pRemoteSensorTL1COND = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 117), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorTL1COND.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorTL1COND.setDescription('(TL1) Condition text associated with this item.')
pRemoteSensorTL1Eqpt = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 118), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorTL1Eqpt.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorTL1Eqpt.setDescription('(TL1) EQPT field associated with this item.')
pRemoteSensorTL1Env = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 119), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorTL1Env.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorTL1Env.setDescription('(TL1) Environmental field associated with this item.')
pRemoteSensorTL1Srveff = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 120), TL1Srveff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorTL1Srveff.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorTL1Srveff.setDescription('(TL1) Service Effecting field associated with this item.')
pRemoteSensorTL1Locn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 121), TL1Locn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorTL1Locn.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorTL1Locn.setDescription('(TL1) Location field associated with this item.')
pRemoteSensorTL1Dirn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 122), TL1Dirn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorTL1Dirn.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorTL1Dirn.setDescription('(TL1) Direction field associated with this item.')
pRemoteSensorMODBUSCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 144), MODBUSCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorMODBUSCommand.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorMODBUSCommand.setDescription('The polling command for the analog device.')
pRemoteSensorStartRegister = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 145), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRemoteSensorStartRegister.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorStartRegister.setDescription('The MODBUS register for the analog device.')
pRemoteSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 5, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRemoteSensorIndex.setStatus('current')
if mibBuilder.loadTexts: pRemoteSensorIndex.setDescription('Index.')
pOnboardSensorTable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6), )
if mibBuilder.loadTexts: pOnboardSensorTable.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorTable.setDescription('Table for configuration of OnboardSensor')
pOnboardSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorIndex"))
if mibBuilder.loadTexts: pOnboardSensorEntry.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorEntry.setDescription('Entry for configuration table of OnboardSensor')
pOnboardSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 3), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pOnboardSensorDescription.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorDescription.setDescription('Description of the onboard sensor input.')
pOnboardSensorDesc0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 4), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorDesc0.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorDesc0.setDescription('The description for values between threshold 0 and threshold 1.')
pOnboardSensorDesc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 5), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorDesc1.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorDesc1.setDescription('The description for values between threshold 1 and threshold 2.')
pOnboardSensorDesc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 6), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorDesc2.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorDesc2.setDescription('The description for values between threshold 2 and threshold 3.')
pOnboardSensorDesc3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 7), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorDesc3.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorDesc3.setDescription('The description for values between threshold 3 and threshold 4.')
pOnboardSensorDesc4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 8), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorDesc4.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorDesc4.setDescription('The description for values between threshold 4 and threshold 5.')
pOnboardSensorDesc5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 9), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorDesc5.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorDesc5.setDescription('Description for a communications failure to the sensor.')
pOnboardSensorConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorConfigured.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorConfigured.setDescription('If set to true, the sensor input will be usable.\n\t\t\t\tIf set to false the sensor input will be ignored.')
pOnboardSensorSendEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 11), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorSendEmail.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorSendEmail.setDescription('If set to true an email event will be set when a threshold is crossed.\n\t\t\t\tIf set to false no email event will be sent.')
pOnboardSensorSendSNMPTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 12), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorSendSNMPTrap.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorSendSNMPTrap.setDescription('If set to true an SNMP trap will be set when a threshold is crossed.\n\t\t\t\tIf set to false no SNMP trap will be sent.')
pOnboardSensorLevel0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 17), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorLevel0.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorLevel0.setDescription('The level for values between threshold 0 and threshold 1.')
pOnboardSensorLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 18), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorLevel1.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorLevel1.setDescription('The level for values between threshold 1 and threshold 2.')
pOnboardSensorLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 19), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorLevel2.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorLevel2.setDescription('The level for values between threshold 2 and threshold 3.')
pOnboardSensorLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 20), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorLevel3.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorLevel3.setDescription('The level for values between threshold 3 and threshold 4.')
pOnboardSensorLevel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 21), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorLevel4.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorLevel4.setDescription('The level for values between threshold 4 and threshold 5.')
pOnboardSensorLevel5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 22), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorLevel5.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorLevel5.setDescription('Level of a communications failure to the sensor.')
pOnboardSensorThresh0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 28), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pOnboardSensorThresh0.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorThresh0.setDescription('This is the minimun analog value.')
pOnboardSensorThresh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 29), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorThresh1.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorThresh1.setDescription('This is the first threshold value.')
pOnboardSensorThresh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 30), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorThresh2.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorThresh2.setDescription('This is the second threshold value.')
pOnboardSensorThresh3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 31), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorThresh3.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorThresh3.setDescription('This is the third threshold value.')
pOnboardSensorThresh4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 32), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorThresh4.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorThresh4.setDescription('This is the fourth threshold value.')
pOnboardSensorThresh5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 33), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pOnboardSensorThresh5.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorThresh5.setDescription('This is the maximum threshold value.')
pOnboardSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 46), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pOnboardSensorUnits.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorUnits.setDescription('Description of the units of measurement.')
pOnboardSensorLiveDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 64), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pOnboardSensorLiveDescription.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorLiveDescription.setDescription('The description of  the current state of the onboard sensor')
pOnboardSensorLiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 65), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pOnboardSensorLiveLevel.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorLiveLevel.setDescription('The level of the current state of the onboard sensor.')
pOnboardSensorLiveRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 66), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pOnboardSensorLiveRaw.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorLiveRaw.setDescription('The current reading from the onboard sensor.  This value \n\t\t\t\twill always be between the threshold 0 and threshold 5 values.')
pOnboardSensorLiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 67), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pOnboardSensorLiveTime.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorLiveTime.setDescription('The time of the last event.')
pOnboardSensorTL1SID = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 116), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorTL1SID.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorTL1SID.setDescription('(TL1) System ID associated with this item.')
pOnboardSensorTL1COND = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 117), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorTL1COND.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorTL1COND.setDescription('(TL1) Condition text associated with this item.')
pOnboardSensorTL1Eqpt = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 118), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorTL1Eqpt.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorTL1Eqpt.setDescription('(TL1) EQPT field associated with this item.')
pOnboardSensorTL1Env = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 119), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorTL1Env.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorTL1Env.setDescription('(TL1) Environmental field associated with this item.')
pOnboardSensorTL1Srveff = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 120), TL1Srveff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorTL1Srveff.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorTL1Srveff.setDescription('(TL1) Service Effecting field associated with this item.')
pOnboardSensorTL1Locn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 121), TL1Locn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorTL1Locn.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorTL1Locn.setDescription('(TL1) Location field associated with this item.')
pOnboardSensorTL1Dirn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 122), TL1Dirn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnboardSensorTL1Dirn.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorTL1Dirn.setDescription('(TL1) Direction field associated with this item.')
pOnboardSensorSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 131), SensorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pOnboardSensorSensorType.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorSensorType.setDescription('The type of sensor.')
pOnboardSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 6, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pOnboardSensorIndex.setStatus('current')
if mibBuilder.loadTexts: pOnboardSensorIndex.setDescription('Index.')
pNetDevicesTable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 7), )
if mibBuilder.loadTexts: pNetDevicesTable.setStatus('current')
if mibBuilder.loadTexts: pNetDevicesTable.setDescription('Table for configuration of NetDevices')
pNetDevicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 7, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pNetDevicesIndex"))
if mibBuilder.loadTexts: pNetDevicesEntry.setStatus('current')
if mibBuilder.loadTexts: pNetDevicesEntry.setDescription('Entry for configuration table of NetDevices')
pNetDevicesDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 7, 1, 3), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNetDevicesDescription.setStatus('current')
if mibBuilder.loadTexts: pNetDevicesDescription.setDescription('Description of the network device.')
pNetDevicesDesc0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 7, 1, 4), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNetDevicesDesc0.setStatus('current')
if mibBuilder.loadTexts: pNetDevicesDesc0.setDescription('Text description of online state.')
pNetDevicesDesc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 7, 1, 5), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNetDevicesDesc1.setStatus('current')
if mibBuilder.loadTexts: pNetDevicesDesc1.setDescription('Text description of offline state.')
pNetDevicesConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 7, 1, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNetDevicesConfigured.setStatus('current')
if mibBuilder.loadTexts: pNetDevicesConfigured.setDescription('If set to true, net device will be pinged,\n\t\t\t\tIf set to false, no action will be taken.')
pNetDevicesSendEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 7, 1, 11), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNetDevicesSendEmail.setStatus('current')
if mibBuilder.loadTexts: pNetDevicesSendEmail.setDescription('If set to true, an email will be sent when a change of state is detected.\n\t\t\t\tIf set to false, no email will be sent.')
pNetDevicesSendSNMPTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 7, 1, 12), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNetDevicesSendSNMPTrap.setStatus('current')
if mibBuilder.loadTexts: pNetDevicesSendSNMPTrap.setDescription('If set to true, an SNMP trap will be sent when a change of state is detected.\n\t\t\t\tIf set to false, no SNMP trap will be sent.')
pNetDevicesIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 7, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNetDevicesIpAddress.setStatus('current')
if mibBuilder.loadTexts: pNetDevicesIpAddress.setDescription('The IP address of the net device to ping.')
pNetDevicesLevel0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 7, 1, 17), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNetDevicesLevel0.setStatus('current')
if mibBuilder.loadTexts: pNetDevicesLevel0.setDescription('Alarm level associated with the online state.')
pNetDevicesLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 7, 1, 18), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNetDevicesLevel1.setStatus('current')
if mibBuilder.loadTexts: pNetDevicesLevel1.setDescription('Alarm level associated with the offline state.')
pNetDevicesLiveDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 7, 1, 64), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pNetDevicesLiveDescription.setStatus('current')
if mibBuilder.loadTexts: pNetDevicesLiveDescription.setDescription('The description of the current state of the net device')
pNetDevicesLiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 7, 1, 65), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pNetDevicesLiveLevel.setStatus('current')
if mibBuilder.loadTexts: pNetDevicesLiveLevel.setDescription('The level of the current state of the net device.')
pNetDevicesLiveRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 7, 1, 66), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pNetDevicesLiveRaw.setStatus('current')
if mibBuilder.loadTexts: pNetDevicesLiveRaw.setDescription('The current reading from the net device.  This value will always\n\t\t\t\tbe between the threshold 0 and threshold 5 values.')
pNetDevicesLiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 7, 1, 67), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pNetDevicesLiveTime.setStatus('current')
if mibBuilder.loadTexts: pNetDevicesLiveTime.setDescription('The time of the last event.')
pNetDevicesTL1SID = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 7, 1, 116), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNetDevicesTL1SID.setStatus('current')
if mibBuilder.loadTexts: pNetDevicesTL1SID.setDescription('(TL1) System ID associated with this item.')
pNetDevicesTL1COND = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 7, 1, 117), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNetDevicesTL1COND.setStatus('current')
if mibBuilder.loadTexts: pNetDevicesTL1COND.setDescription('(TL1) Condition text associated with this item.')
pNetDevicesTL1Eqpt = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 7, 1, 118), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNetDevicesTL1Eqpt.setStatus('current')
if mibBuilder.loadTexts: pNetDevicesTL1Eqpt.setDescription('(TL1) EQPT field associated with this item.')
pNetDevicesTL1Env = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 7, 1, 119), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNetDevicesTL1Env.setStatus('current')
if mibBuilder.loadTexts: pNetDevicesTL1Env.setDescription('(TL1) Environmental field associated with this item.')
pNetDevicesTL1Srveff = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 7, 1, 120), TL1Srveff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNetDevicesTL1Srveff.setStatus('current')
if mibBuilder.loadTexts: pNetDevicesTL1Srveff.setDescription('(TL1) Service Effecting field associated with this item.')
pNetDevicesTL1Locn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 7, 1, 121), TL1Locn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNetDevicesTL1Locn.setStatus('current')
if mibBuilder.loadTexts: pNetDevicesTL1Locn.setDescription('(TL1) Location field associated with this item.')
pNetDevicesTL1Dirn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 7, 1, 122), TL1Dirn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNetDevicesTL1Dirn.setStatus('current')
if mibBuilder.loadTexts: pNetDevicesTL1Dirn.setDescription('(TL1) Direction field associated with this item.')
pNetDevicesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 7, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pNetDevicesIndex.setStatus('current')
if mibBuilder.loadTexts: pNetDevicesIndex.setDescription('Index.')
pAccountsTable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 9), )
if mibBuilder.loadTexts: pAccountsTable.setStatus('current')
if mibBuilder.loadTexts: pAccountsTable.setDescription('Table for configuration of Accounts')
pAccountsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 9, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pAccountsIndex"))
if mibBuilder.loadTexts: pAccountsEntry.setStatus('current')
if mibBuilder.loadTexts: pAccountsEntry.setDescription('Entry for configuration table of Accounts')
pAccountsConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 9, 1, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pAccountsConfigured.setStatus('current')
if mibBuilder.loadTexts: pAccountsConfigured.setDescription('If set to true, this account can be used to login.')
pAccountsName = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 9, 1, 25), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pAccountsName.setStatus('current')
if mibBuilder.loadTexts: pAccountsName.setDescription('Name associated with this account.')
pAccountsEncPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 9, 1, 27), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pAccountsEncPassword.setStatus('current')
if mibBuilder.loadTexts: pAccountsEncPassword.setDescription('Password for this account.  When reading, an encrypted version of password \n\t\t\t\twill be displayed.  When writing, use plain text.')
pAccountsUserLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 9, 1, 55), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pAccountsUserLevel.setStatus('current')
if mibBuilder.loadTexts: pAccountsUserLevel.setDescription('The user level for this account.\n\t\t\t\tOne of the following masks from each group are used:\n\t\t\t\t   No FTP access     0x0000   0\n\t\t\t\t   FTP read-only     0x0001   1\n\t\t\t\t   FTP Full access   0x0003   3\n\t\t\t\t\n\t\t\t\t   No Web access     0x0000   0\n\t\t\t\t   Monitor           0x0010  16\n\t\t\t\t   Config            0x0030  48\n\t\t\t\t   Config + Accounts 0x00B0 176\n\t\t\t\tThe masks are added together to create a permission value.')
pAccountsUnsecured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 9, 1, 77), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pAccountsUnsecured.setStatus('current')
if mibBuilder.loadTexts: pAccountsUnsecured.setDescription('Allow secured configuration for SNMP through this account.')
pAccountsAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 9, 1, 140), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pAccountsAuthKey.setStatus('current')
if mibBuilder.loadTexts: pAccountsAuthKey.setDescription('')
pAccountsPrivKey = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 9, 1, 141), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pAccountsPrivKey.setStatus('current')
if mibBuilder.loadTexts: pAccountsPrivKey.setDescription('')
pAccountsSNMPAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 9, 1, 142), SNMPAccess()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pAccountsSNMPAccess.setStatus('current')
if mibBuilder.loadTexts: pAccountsSNMPAccess.setDescription('')
pAccountsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 9, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAccountsIndex.setStatus('current')
if mibBuilder.loadTexts: pAccountsIndex.setDescription('Index.')
camera = MibIdentifier((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 10))
cameraConfigured = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 10, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cameraConfigured.setStatus('current')
if mibBuilder.loadTexts: cameraConfigured.setDescription('If set to true, camera view will be used in main webpage.\n\t\t\t\tIf set to false, camera view will not be used.')
cameraIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 10, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cameraIpAddress.setStatus('current')
if mibBuilder.loadTexts: cameraIpAddress.setDescription('IP address of the camera.')
cameraCameraStyle = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 10, 43), CameraStyle()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cameraCameraStyle.setStatus('current')
if mibBuilder.loadTexts: cameraCameraStyle.setDescription('Type of camera used.')
snmpGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 12))
snmpGeneralConfigured = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 12, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGeneralConfigured.setStatus('current')
if mibBuilder.loadTexts: snmpGeneralConfigured.setDescription('Resend standing alarms at a given interval')
snmpGeneralReadPeriod = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 12, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGeneralReadPeriod.setStatus('current')
if mibBuilder.loadTexts: snmpGeneralReadPeriod.setDescription('Period in minutes between resend of standing alarms')
snmpGeneralGet = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 12, 39), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGeneralGet.setStatus('current')
if mibBuilder.loadTexts: snmpGeneralGet.setDescription('Get community name for SNMP.')
snmpGeneralSet = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 12, 40), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGeneralSet.setStatus('current')
if mibBuilder.loadTexts: snmpGeneralSet.setDescription('Set community name for SNMP.')
snmpGeneralTrap = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 12, 41), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGeneralTrap.setStatus('current')
if mibBuilder.loadTexts: snmpGeneralTrap.setDescription('Trap community name for SNMP.')
snmpGeneralIPPortNum = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 12, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGeneralIPPortNum.setStatus('current')
if mibBuilder.loadTexts: snmpGeneralIPPortNum.setDescription('SNMP configuration is done on this network port.')
snmpGeneralEngineID = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 12, 143), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpGeneralEngineID.setStatus('current')
if mibBuilder.loadTexts: snmpGeneralEngineID.setDescription('SNMP v3 engine ID')
emailGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 13))
emailGeneralAddress = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 13, 1), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailGeneralAddress.setStatus('current')
if mibBuilder.loadTexts: emailGeneralAddress.setDescription('Login name to use if logging into email server is true.')
emailGeneralConfigured = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 13, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailGeneralConfigured.setStatus('current')
if mibBuilder.loadTexts: emailGeneralConfigured.setDescription('If set to true, the device will log onto the email server before sending \n\t\t\t\tand email event.  If set to false, the device will not log onto email server.')
emailGeneralIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 13, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailGeneralIpAddress.setStatus('current')
if mibBuilder.loadTexts: emailGeneralIpAddress.setDescription('IP address of email server.')
emailGeneralPassword = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 13, 26), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailGeneralPassword.setStatus('current')
if mibBuilder.loadTexts: emailGeneralPassword.setDescription('Password to use if logging into email server is true.')
emailGeneralIPPortNum = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 13, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailGeneralIPPortNum.setStatus('current')
if mibBuilder.loadTexts: emailGeneralIPPortNum.setDescription('Port number address of email server.')
pSerialTable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 14), )
if mibBuilder.loadTexts: pSerialTable.setStatus('current')
if mibBuilder.loadTexts: pSerialTable.setDescription('Table for configuration of Serial')
pSerialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 14, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pSerialIndex"))
if mibBuilder.loadTexts: pSerialEntry.setStatus('current')
if mibBuilder.loadTexts: pSerialEntry.setDescription('Entry for configuration table of Serial')
pSerialDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 14, 1, 3), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSerialDescription.setStatus('current')
if mibBuilder.loadTexts: pSerialDescription.setDescription('Description of the serial port.')
pSerialConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 14, 1, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSerialConfigured.setStatus('current')
if mibBuilder.loadTexts: pSerialConfigured.setDescription('If set to true, this serial port will be usable.\n\t\t\t\tIf set to false the port will not be usable.')
pSerialIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 14, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSerialIpAddress.setStatus('current')
if mibBuilder.loadTexts: pSerialIpAddress.setDescription('IP Address of the target device.')
pSerialReadPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 14, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSerialReadPeriod.setStatus('current')
if mibBuilder.loadTexts: pSerialReadPeriod.setDescription('Inactivity timeout (in minutes).')
pSerialBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 14, 1, 57), BaudRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSerialBaudRate.setStatus('current')
if mibBuilder.loadTexts: pSerialBaudRate.setDescription('Baud rate of the serial port.')
pSerialDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 14, 1, 58), DataBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSerialDataBits.setStatus('current')
if mibBuilder.loadTexts: pSerialDataBits.setDescription('Number of data bit for the serial port.')
pSerialParity = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 14, 1, 59), Parity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSerialParity.setStatus('current')
if mibBuilder.loadTexts: pSerialParity.setDescription('Parity of the serial port.')
pSerialStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 14, 1, 60), StopBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSerialStopBits.setStatus('current')
if mibBuilder.loadTexts: pSerialStopBits.setDescription('Number of stop bits for the serial port.')
pSerialProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 14, 1, 61), Protocol()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSerialProtocol.setStatus('current')
if mibBuilder.loadTexts: pSerialProtocol.setDescription('Protocol the serial port is speaking.')
pSerialSerialRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 14, 1, 62), SerialRTS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSerialSerialRTS.setStatus('current')
if mibBuilder.loadTexts: pSerialSerialRTS.setDescription('Request To Send (RTS) setting for the serial port.')
pSerialSerialCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 14, 1, 63), SerialCTS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSerialSerialCTS.setStatus('current')
if mibBuilder.loadTexts: pSerialSerialCTS.setDescription('Clear To Send (CTS) setting for the serial port.')
pSerialPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 14, 1, 68), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSerialPresent.setStatus('current')
if mibBuilder.loadTexts: pSerialPresent.setDescription('If set to true, the serial port exists.\n\t\t\t\tIf set to false the serial port does not exist.')
pSerialIPPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 14, 1, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSerialIPPortNum.setStatus('current')
if mibBuilder.loadTexts: pSerialIPPortNum.setDescription('IP port number of the target device.')
pSerialPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 14, 1, 76), PortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSerialPortType.setStatus('current')
if mibBuilder.loadTexts: pSerialPortType.setDescription('The type of serial port.')
pSerialIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 14, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSerialIndex.setStatus('current')
if mibBuilder.loadTexts: pSerialIndex.setDescription('Index.')
pSelfTestTable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 15), )
if mibBuilder.loadTexts: pSelfTestTable.setStatus('current')
if mibBuilder.loadTexts: pSelfTestTable.setDescription('Table for configuration of SelfTest')
pSelfTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 15, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pSelfTestIndex"))
if mibBuilder.loadTexts: pSelfTestEntry.setStatus('current')
if mibBuilder.loadTexts: pSelfTestEntry.setDescription('Entry for configuration table of SelfTest')
pSelfTestDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 15, 1, 3), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSelfTestDescription.setStatus('current')
if mibBuilder.loadTexts: pSelfTestDescription.setDescription('Description of the Power On Self Test (POST).')
pSelfTestConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 15, 1, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSelfTestConfigured.setStatus('current')
if mibBuilder.loadTexts: pSelfTestConfigured.setDescription('If set to true, this POST has passed.  If set to false, it has failed.')
pSelfTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 15, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSelfTestIndex.setStatus('current')
if mibBuilder.loadTexts: pSelfTestIndex.setDescription('Index.')
pInternalFaultsTable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 16), )
if mibBuilder.loadTexts: pInternalFaultsTable.setStatus('current')
if mibBuilder.loadTexts: pInternalFaultsTable.setDescription('Table for configuration of InternalFaults')
pInternalFaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 16, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pInternalFaultsIndex"))
if mibBuilder.loadTexts: pInternalFaultsEntry.setStatus('current')
if mibBuilder.loadTexts: pInternalFaultsEntry.setDescription('Entry for configuration table of InternalFaults')
pInternalFaultsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 16, 1, 3), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pInternalFaultsDescription.setStatus('current')
if mibBuilder.loadTexts: pInternalFaultsDescription.setDescription('Description of the internal fault.')
pInternalFaultsDesc0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 16, 1, 4), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pInternalFaultsDesc0.setStatus('current')
if mibBuilder.loadTexts: pInternalFaultsDesc0.setDescription('Text description of the healthy state.')
pInternalFaultsDesc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 16, 1, 5), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pInternalFaultsDesc1.setStatus('current')
if mibBuilder.loadTexts: pInternalFaultsDesc1.setDescription('Text description of a non-normal state.')
pInternalFaultsDesc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 16, 1, 6), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pInternalFaultsDesc2.setStatus('current')
if mibBuilder.loadTexts: pInternalFaultsDesc2.setDescription('Text description of a non-normal state.')
pInternalFaultsDesc3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 16, 1, 7), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pInternalFaultsDesc3.setStatus('current')
if mibBuilder.loadTexts: pInternalFaultsDesc3.setDescription('Text description of a non-normal state.')
pInternalFaultsSendEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 16, 1, 11), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pInternalFaultsSendEmail.setStatus('current')
if mibBuilder.loadTexts: pInternalFaultsSendEmail.setDescription('If set to true an email event will be set when a change occurs.\n\t\t\t\tIf set to false no email event will be sent.')
pInternalFaultsSendSNMPTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 16, 1, 12), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pInternalFaultsSendSNMPTrap.setStatus('current')
if mibBuilder.loadTexts: pInternalFaultsSendSNMPTrap.setDescription('If set to true an SNMP trap will be set when a change occurs.\n\t\t\t\tIf set to false no SNMP trap will be sent.')
pInternalFaultsLevel0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 16, 1, 17), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pInternalFaultsLevel0.setStatus('current')
if mibBuilder.loadTexts: pInternalFaultsLevel0.setDescription('Alarm level associated with the healthy state.')
pInternalFaultsLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 16, 1, 18), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pInternalFaultsLevel1.setStatus('current')
if mibBuilder.loadTexts: pInternalFaultsLevel1.setDescription('Alarm level associated with this non-normal state.')
pInternalFaultsLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 16, 1, 19), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pInternalFaultsLevel2.setStatus('current')
if mibBuilder.loadTexts: pInternalFaultsLevel2.setDescription('Alarm level associated with this non-normal state.')
pInternalFaultsLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 16, 1, 20), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pInternalFaultsLevel3.setStatus('current')
if mibBuilder.loadTexts: pInternalFaultsLevel3.setDescription('Alarm level associated with this non-normal state.')
pInternalFaultsReadPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 16, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pInternalFaultsReadPeriod.setStatus('current')
if mibBuilder.loadTexts: pInternalFaultsReadPeriod.setDescription('Dwell time required in milliseconds.')
pInternalFaultsIgnoreOff = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 16, 1, 50), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pInternalFaultsIgnoreOff.setStatus('current')
if mibBuilder.loadTexts: pInternalFaultsIgnoreOff.setDescription('If true, no event is generated for a change to the healty state.')
pInternalFaultsLiveDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 16, 1, 64), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pInternalFaultsLiveDescription.setStatus('current')
if mibBuilder.loadTexts: pInternalFaultsLiveDescription.setDescription('The current condition of the internal fault.')
pInternalFaultsLiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 16, 1, 65), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pInternalFaultsLiveLevel.setStatus('current')
if mibBuilder.loadTexts: pInternalFaultsLiveLevel.setDescription('The current level of the internal fault.')
pInternalFaultsLiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 16, 1, 67), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pInternalFaultsLiveTime.setStatus('current')
if mibBuilder.loadTexts: pInternalFaultsLiveTime.setDescription('The time of the fault event.')
pInternalFaultsUseResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 16, 1, 98), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pInternalFaultsUseResetTime.setStatus('current')
if mibBuilder.loadTexts: pInternalFaultsUseResetTime.setDescription('When true the configured dwell time is used internally.')
pInternalFaultsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 16, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pInternalFaultsIndex.setStatus('current')
if mibBuilder.loadTexts: pInternalFaultsIndex.setDescription('Index.')
pSlotInfoTable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 17), )
if mibBuilder.loadTexts: pSlotInfoTable.setStatus('current')
if mibBuilder.loadTexts: pSlotInfoTable.setDescription('Table for configuration of SlotInfo')
pSlotInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 17, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pSlotInfoIndex"))
if mibBuilder.loadTexts: pSlotInfoEntry.setStatus('current')
if mibBuilder.loadTexts: pSlotInfoEntry.setDescription('Entry for configuration table of SlotInfo')
pSlotInfoDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 17, 1, 3), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlotInfoDescription.setStatus('current')
if mibBuilder.loadTexts: pSlotInfoDescription.setDescription('Description of the slot contents.')
pSlotInfoRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 17, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlotInfoRecord.setStatus('current')
if mibBuilder.loadTexts: pSlotInfoRecord.setDescription('The number of records for this slot.')
pSlotInfoPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 17, 1, 68), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlotInfoPresent.setStatus('current')
if mibBuilder.loadTexts: pSlotInfoPresent.setDescription('If true indicates a card is in the slot.\n\t\t\t\tIf false indicates that no card is present in the slot.')
pSlotInfoSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 17, 1, 69), SlotId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlotInfoSlotId.setStatus('current')
if mibBuilder.loadTexts: pSlotInfoSlotId.setDescription('Identifies the type of card in slot.')
pSlotInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 17, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlotInfoIndex.setStatus('current')
if mibBuilder.loadTexts: pSlotInfoIndex.setDescription('Index.')
pNetPortsTable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 24), )
if mibBuilder.loadTexts: pNetPortsTable.setStatus('current')
if mibBuilder.loadTexts: pNetPortsTable.setDescription('Table for configuration of NetPorts')
pNetPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 24, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pNetPortsIndex"))
if mibBuilder.loadTexts: pNetPortsEntry.setStatus('current')
if mibBuilder.loadTexts: pNetPortsEntry.setDescription('Entry for configuration table of NetPorts')
pNetPortsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 24, 1, 3), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pNetPortsDescription.setStatus('current')
if mibBuilder.loadTexts: pNetPortsDescription.setDescription('Description of the static network ports.')
pNetPortsReadPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 24, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNetPortsReadPeriod.setStatus('current')
if mibBuilder.loadTexts: pNetPortsReadPeriod.setDescription('Inactivity timeout (in minutes).')
pNetPortsIPPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 24, 1, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pNetPortsIPPortNum.setStatus('current')
if mibBuilder.loadTexts: pNetPortsIPPortNum.setDescription('IP port number to use when connecting to this network port.')
pNetPortsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 24, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pNetPortsIndex.setStatus('current')
if mibBuilder.loadTexts: pNetPortsIndex.setDescription('Index.')
wirelessModem = MibIdentifier((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 25))
wirelessModemBackupIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 25, 78), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessModemBackupIPAddress.setStatus('current')
if mibBuilder.loadTexts: wirelessModemBackupIPAddress.setDescription('Wireless Modem IP Address.')
wirelessModemTime = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 25, 81), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessModemTime.setStatus('current')
if mibBuilder.loadTexts: wirelessModemTime.setDescription('Wireless modem 24 hour reset time (hh:mm:ss)')
wirelessModemTransmit = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 25, 96), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessModemTransmit.setStatus('current')
if mibBuilder.loadTexts: wirelessModemTransmit.setDescription('The string that will be sent to the modem.')
wirelessModemUseWirelessNetwork = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 25, 97), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessModemUseWirelessNetwork.setStatus('current')
if mibBuilder.loadTexts: wirelessModemUseWirelessNetwork.setDescription('Determines if modem tries to connect to wireless network.')
wirelessModemUseResetTime = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 25, 98), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessModemUseResetTime.setStatus('current')
if mibBuilder.loadTexts: wirelessModemUseResetTime.setDescription('Determines if the modem resets at reset time.')
wirelessModemResponseWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 25, 99), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessModemResponseWaitTime.setStatus('current')
if mibBuilder.loadTexts: wirelessModemResponseWaitTime.setDescription('Response Timeout (s)')
wirelessModemSecondary = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 25, 115), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessModemSecondary.setStatus('current')
if mibBuilder.loadTexts: wirelessModemSecondary.setDescription('Determines if the modem can use accept a dynamic (local) IP.')
webmonSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 26))
webmonSecurityUserLevel = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 26, 55), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webmonSecurityUserLevel.setStatus('current')
if mibBuilder.loadTexts: webmonSecurityUserLevel.setDescription('This is the default user level. Anyone who has access to this \n\t\t\t\tdevice will have these permissions without logging in. \n\t\t\t\tOne of the following masks from each group are used:\n\t\t\t\t   No FTP access     0x0000   0\n\t\t\t\t   FTP read-only     0x0001   1\n\t\t\t\t   FTP Full access   0x0003   3\n\t\t\t\t\n\t\t\t\t   No Web access     0x0000   0\n\t\t\t\t   Monitor           0x0010  16\n\t\t\t\t   Config            0x0030  48\n\t\t\t\t   Config + Accounts 0x00B0 176\n\t\t\t\tThe masks are added together to create a permission value.')
webmonSecurityUnsecured = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 26, 77), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webmonSecurityUnsecured.setStatus('current')
if mibBuilder.loadTexts: webmonSecurityUnsecured.setDescription('Allow unsecured configuration for SNMP.')
dateTime = MibIdentifier((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 27))
dateTimeConfigured = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 27, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dateTimeConfigured.setStatus('current')
if mibBuilder.loadTexts: dateTimeConfigured.setDescription('Determines whether or not NTP will be used to set system time.')
dateTimeIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 27, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dateTimeIpAddress.setStatus('current')
if mibBuilder.loadTexts: dateTimeIpAddress.setDescription('Time Server IP Address')
dateTimeDaylightSaving = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 27, 53), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dateTimeDaylightSaving.setStatus('current')
if mibBuilder.loadTexts: dateTimeDaylightSaving.setDescription('Determines if Daylight Savings is automatically adjusted.')
dateTimeDate = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 27, 80), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dateTimeDate.setStatus('current')
if mibBuilder.loadTexts: dateTimeDate.setDescription('This is the system date.')
dateTimeTime = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 27, 81), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dateTimeTime.setStatus('current')
if mibBuilder.loadTexts: dateTimeTime.setDescription('This is the system time.')
dateTimeNegOffset = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 27, 88), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dateTimeNegOffset.setStatus('current')
if mibBuilder.loadTexts: dateTimeNegOffset.setDescription('True if a negative offset from UTC is desired')
dateTimeUTCOffset = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 27, 89), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dateTimeUTCOffset.setStatus('current')
if mibBuilder.loadTexts: dateTimeUTCOffset.setDescription('Time offset of local time compared to UTC')
pDCMProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 28), )
if mibBuilder.loadTexts: pDCMProtocolTable.setStatus('current')
if mibBuilder.loadTexts: pDCMProtocolTable.setDescription('Table for configuration of DCMProtocol')
pDCMProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 28, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pDCMProtocolIndex"))
if mibBuilder.loadTexts: pDCMProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: pDCMProtocolEntry.setDescription('Entry for configuration table of DCMProtocol')
pDCMProtocolDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 28, 1, 3), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDCMProtocolDescription.setStatus('current')
if mibBuilder.loadTexts: pDCMProtocolDescription.setDescription('Description of the input device that DCM will poll.')
pDCMProtocolConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 28, 1, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pDCMProtocolConfigured.setStatus('current')
if mibBuilder.loadTexts: pDCMProtocolConfigured.setDescription('If set to true, this input will be polled in DCM.  If set to false, it will not be polled.')
pDCMProtocolBaseDCMAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 28, 1, 83), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pDCMProtocolBaseDCMAddress.setStatus('current')
if mibBuilder.loadTexts: pDCMProtocolBaseDCMAddress.setDescription('Base DCM address for this input device.')
pDCMProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 28, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDCMProtocolIndex.setStatus('current')
if mibBuilder.loadTexts: pDCMProtocolIndex.setDescription('Index.')
pdialOutTable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 29), )
if mibBuilder.loadTexts: pdialOutTable.setStatus('current')
if mibBuilder.loadTexts: pdialOutTable.setDescription('Table for configuration of dialOut')
pdialOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 29, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pdialOutIndex"))
if mibBuilder.loadTexts: pdialOutEntry.setStatus('current')
if mibBuilder.loadTexts: pdialOutEntry.setDescription('Entry for configuration table of dialOut')
pdialOutConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 29, 1, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdialOutConfigured.setStatus('current')
if mibBuilder.loadTexts: pdialOutConfigured.setDescription('Determines whether or not dial ou will be used to send SNMP traps.')
pdialOutName = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 29, 1, 25), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdialOutName.setStatus('current')
if mibBuilder.loadTexts: pdialOutName.setDescription('Dial out Username')
pdialOutPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 29, 1, 26), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdialOutPassword.setStatus('current')
if mibBuilder.loadTexts: pdialOutPassword.setDescription('Password to use when dialing out')
pdialOutDialOutNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 29, 1, 79), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdialOutDialOutNumber.setStatus('current')
if mibBuilder.loadTexts: pdialOutDialOutNumber.setDescription('Number to dial for dial out')
pdialOutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 29, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdialOutIndex.setStatus('current')
if mibBuilder.loadTexts: pdialOutIndex.setDescription('Index.')
pderivedDiscreteTable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30), )
if mibBuilder.loadTexts: pderivedDiscreteTable.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteTable.setDescription('Table for configuration of derivedDiscrete')
pderivedDiscreteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteIndex"))
if mibBuilder.loadTexts: pderivedDiscreteEntry.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteEntry.setDescription('Entry for configuration table of derivedDiscrete')
pderivedDiscreteDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1, 3), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedDiscreteDescription.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteDescription.setDescription('Description of the derived alarm point.')
pderivedDiscreteDesc0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1, 4), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedDiscreteDesc0.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteDesc0.setDescription('Description of the off state.')
pderivedDiscreteDesc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1, 5), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedDiscreteDesc1.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteDesc1.setDescription('Description of the on state.')
pderivedDiscreteConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedDiscreteConfigured.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteConfigured.setDescription('If set to true, changes of state will be reported.\n\t\t\t\tIf set to false, not change of states will be reported.')
pderivedDiscreteSendEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1, 11), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedDiscreteSendEmail.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteSendEmail.setDescription('If set to true, an email will be sent on a change of state.\n\t\t\t\tIf false, no email will be sent.')
pderivedDiscreteSendSNMPTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1, 12), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedDiscreteSendSNMPTrap.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteSendSNMPTrap.setDescription('If set to true, an SNMP trap will be sent on a change of state.\n\t\t\t\tIf false, no SNMP trap will be sent.')
pderivedDiscreteLevel0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1, 17), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedDiscreteLevel0.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteLevel0.setDescription('Level of the off state.')
pderivedDiscreteLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1, 18), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedDiscreteLevel1.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteLevel1.setDescription('Level of the on state.')
pderivedDiscreteLiveDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1, 64), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pderivedDiscreteLiveDescription.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteLiveDescription.setDescription('The current description of the alarm state.')
pderivedDiscreteLiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1, 65), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pderivedDiscreteLiveLevel.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteLiveLevel.setDescription('The current level of the alarm.')
pderivedDiscreteLiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1, 67), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pderivedDiscreteLiveTime.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteLiveTime.setDescription('The time of the last change of state.')
pderivedDiscreteElementAPkg = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1, 90), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedDiscreteElementAPkg.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteElementAPkg.setDescription('Package where the alarm point is located for element A.')
pderivedDiscreteElementAPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1, 91), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedDiscreteElementAPoint.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteElementAPoint.setDescription('Alarm point for element A.')
pderivedDiscreteElementBPkg = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1, 92), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedDiscreteElementBPkg.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteElementBPkg.setDescription('Package where the alarm point is located for element B.')
pderivedDiscreteElementBPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1, 93), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedDiscreteElementBPoint.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteElementBPoint.setDescription('Alarm point for element B.')
pderivedDiscreteDiscreteFormula = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1, 94), DiscreteFormula()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedDiscreteDiscreteFormula.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteDiscreteFormula.setDescription('The formula that will be used to compute the derived alarm.')
pderivedDiscreteTL1SID = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1, 116), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedDiscreteTL1SID.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteTL1SID.setDescription('(TL1) System ID associated with this item.')
pderivedDiscreteTL1COND = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1, 117), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedDiscreteTL1COND.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteTL1COND.setDescription('(TL1) Condition text associated with this item.')
pderivedDiscreteTL1Eqpt = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1, 118), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedDiscreteTL1Eqpt.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteTL1Eqpt.setDescription('(TL1) EQPT field associated with this item.')
pderivedDiscreteTL1Env = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1, 119), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedDiscreteTL1Env.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteTL1Env.setDescription('(TL1) Environmental field associated with this item.')
pderivedDiscreteTL1Srveff = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1, 120), TL1Srveff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedDiscreteTL1Srveff.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteTL1Srveff.setDescription('(TL1) Service Effecting field associated with this item.')
pderivedDiscreteTL1Locn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1, 121), TL1Locn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedDiscreteTL1Locn.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteTL1Locn.setDescription('(TL1) Location field associated with this item.')
pderivedDiscreteTL1Dirn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1, 122), TL1Dirn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedDiscreteTL1Dirn.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteTL1Dirn.setDescription('(TL1) Direction field associated with this item.')
pderivedDiscreteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 30, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pderivedDiscreteIndex.setStatus('current')
if mibBuilder.loadTexts: pderivedDiscreteIndex.setDescription('Index.')
license = MibIdentifier((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 31))
licenseDescription = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 31, 3), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseDescription.setStatus('current')
if mibBuilder.loadTexts: licenseDescription.setDescription('This describes the status of the license')
licenseLicenseKey = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 31, 84), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenseLicenseKey.setStatus('current')
if mibBuilder.loadTexts: licenseLicenseKey.setDescription('This is the License Key.')
licenseExpires = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 31, 85), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseExpires.setStatus('current')
if mibBuilder.loadTexts: licenseExpires.setDescription('This is the date the current License will expire.')
licenseAllowTL1 = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 31, 124), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseAllowTL1.setStatus('current')
if mibBuilder.loadTexts: licenseAllowTL1.setDescription('This describes the status of TL1 support in the license')
pe2aHostTable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 32), )
if mibBuilder.loadTexts: pe2aHostTable.setStatus('current')
if mibBuilder.loadTexts: pe2aHostTable.setDescription('Table for configuration of e2aHost')
pe2aHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 32, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pe2aHostIndex"))
if mibBuilder.loadTexts: pe2aHostEntry.setStatus('current')
if mibBuilder.loadTexts: pe2aHostEntry.setDescription('Entry for configuration table of e2aHost')
pe2aHostDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 32, 1, 3), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pe2aHostDescription.setStatus('current')
if mibBuilder.loadTexts: pe2aHostDescription.setDescription('Description of the connection.')
pe2aHostConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 32, 1, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pe2aHostConfigured.setStatus('current')
if mibBuilder.loadTexts: pe2aHostConfigured.setDescription('If set to true, this route will be used by E2A.')
pe2aHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 32, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pe2aHostIpAddress.setStatus('current')
if mibBuilder.loadTexts: pe2aHostIpAddress.setDescription('The IP address of the remote device.')
pe2aHostLevel0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 32, 1, 17), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pe2aHostLevel0.setStatus('current')
if mibBuilder.loadTexts: pe2aHostLevel0.setDescription('Alarm level associated with the online state.')
pe2aHostLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 32, 1, 18), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pe2aHostLevel1.setStatus('current')
if mibBuilder.loadTexts: pe2aHostLevel1.setDescription('Alarm level associated with the offline state.')
pe2aHostLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 32, 1, 19), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pe2aHostLevel2.setStatus('current')
if mibBuilder.loadTexts: pe2aHostLevel2.setDescription('Alarm level associated with the connecting state.')
pe2aHostRosterID = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 32, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pe2aHostRosterID.setStatus('current')
if mibBuilder.loadTexts: pe2aHostRosterID.setDescription('Serial port number to use when connecting to WebMon.')
pe2aHostPollAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 32, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pe2aHostPollAddress.setStatus('current')
if mibBuilder.loadTexts: pe2aHostPollAddress.setDescription('The E2A address of the remote device.')
pe2aHostIPPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 32, 1, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pe2aHostIPPortNum.setStatus('current')
if mibBuilder.loadTexts: pe2aHostIPPortNum.setDescription('IP port number to use when connecting to the remote device.')
pe2aHostTL1SID = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 32, 1, 116), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pe2aHostTL1SID.setStatus('current')
if mibBuilder.loadTexts: pe2aHostTL1SID.setDescription('(TL1) System ID associated with this item.')
pe2aHostTL1COND = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 32, 1, 117), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pe2aHostTL1COND.setStatus('current')
if mibBuilder.loadTexts: pe2aHostTL1COND.setDescription('(TL1) Condition text associated with this item.')
pe2aHostTL1Eqpt = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 32, 1, 118), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pe2aHostTL1Eqpt.setStatus('current')
if mibBuilder.loadTexts: pe2aHostTL1Eqpt.setDescription('(TL1) EQPT field associated with this item.')
pe2aHostTL1Env = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 32, 1, 119), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pe2aHostTL1Env.setStatus('current')
if mibBuilder.loadTexts: pe2aHostTL1Env.setDescription('(TL1) Environmental field associated with this item.')
pe2aHostTL1Srveff = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 32, 1, 120), TL1Srveff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pe2aHostTL1Srveff.setStatus('current')
if mibBuilder.loadTexts: pe2aHostTL1Srveff.setDescription('(TL1) Service Effecting field associated with this item.')
pe2aHostTL1Locn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 32, 1, 121), TL1Locn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pe2aHostTL1Locn.setStatus('current')
if mibBuilder.loadTexts: pe2aHostTL1Locn.setDescription('(TL1) Location field associated with this item.')
pe2aHostTL1Dirn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 32, 1, 122), TL1Dirn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pe2aHostTL1Dirn.setStatus('current')
if mibBuilder.loadTexts: pe2aHostTL1Dirn.setDescription('(TL1) Direction field associated with this item.')
pe2aHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 32, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pe2aHostIndex.setStatus('current')
if mibBuilder.loadTexts: pe2aHostIndex.setDescription('Index.')
pderivedAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33), )
if mibBuilder.loadTexts: pderivedAnalogTable.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogTable.setDescription('Table for configuration of derivedAnalog')
pderivedAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogIndex"))
if mibBuilder.loadTexts: pderivedAnalogEntry.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogEntry.setDescription('Entry for configuration table of derivedAnalog')
pderivedAnalogDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 3), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogDescription.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogDescription.setDescription('Description of the derived alarm point.')
pderivedAnalogDesc0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 4), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogDesc0.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogDesc0.setDescription('The description for derived values between threshold 0 and threshold 1.')
pderivedAnalogDesc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 5), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogDesc1.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogDesc1.setDescription('The description for derived values between threshold 1 and threshold 2.')
pderivedAnalogDesc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 6), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogDesc2.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogDesc2.setDescription('The description for derived values between threshold 2 and threshold 3.')
pderivedAnalogDesc3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 7), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogDesc3.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogDesc3.setDescription('The description for derived values between threshold 3 and threshold 4.')
pderivedAnalogDesc4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 8), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogDesc4.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogDesc4.setDescription('The description for derived values between threshold 4 and threshold 5.')
pderivedAnalogConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogConfigured.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogConfigured.setDescription('If set to true, changes of state will be reported.\n\t\t\t\tIf set to false, not change of states will be reported.')
pderivedAnalogSendEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 11), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogSendEmail.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogSendEmail.setDescription('If set to true, an email will be sent on a change of state.\n\t\t\t\tIf false, no email will be sent.')
pderivedAnalogSendSNMPTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 12), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogSendSNMPTrap.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogSendSNMPTrap.setDescription('If set to true, an SNMP trap will be sent on a change of state.\n\t\t\t\tIf false, no SNMP trap will be sent.')
pderivedAnalogLevel0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 17), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogLevel0.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogLevel0.setDescription('The level for derived values between threshold 0 and threshold 1.')
pderivedAnalogLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 18), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogLevel1.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogLevel1.setDescription('The level for derived values between threshold 1 and threshold 2.')
pderivedAnalogLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 19), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogLevel2.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogLevel2.setDescription('The level for derived values between threshold 2 and threshold 3.')
pderivedAnalogLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 20), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogLevel3.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogLevel3.setDescription('The level for derived values between threshold 3 and threshold 4.')
pderivedAnalogLevel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 21), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogLevel4.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogLevel4.setDescription('The level for derived values between threshold 4 and threshold 5.')
pderivedAnalogThresh0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 28), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogThresh0.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogThresh0.setDescription('This is the maximum analog derived value.')
pderivedAnalogThresh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 29), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogThresh1.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogThresh1.setDescription('This is the first threshold derived value.')
pderivedAnalogThresh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 30), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogThresh2.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogThresh2.setDescription('This is the second threshold derived value.')
pderivedAnalogThresh3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 31), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogThresh3.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogThresh3.setDescription('This is the third threshold derived value.')
pderivedAnalogThresh4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 32), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogThresh4.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogThresh4.setDescription('This is the fourth threshold derived value.')
pderivedAnalogThresh5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 33), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogThresh5.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogThresh5.setDescription('This is the minimum threshold derived value.')
pderivedAnalogUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 46), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogUnits.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogUnits.setDescription('Description of the units of measurement.')
pderivedAnalogLiveDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 64), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pderivedAnalogLiveDescription.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogLiveDescription.setDescription('The current description of the alarm state.')
pderivedAnalogLiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 65), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pderivedAnalogLiveLevel.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogLiveLevel.setDescription('The current level of the alarm.')
pderivedAnalogLiveRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 66), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pderivedAnalogLiveRaw.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogLiveRaw.setDescription('The current derived reading from the analog devices.  This value \n\t\t\t\twill alwaysbe between the threshold 0 and threshold 5 values.')
pderivedAnalogLiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 67), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pderivedAnalogLiveTime.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogLiveTime.setDescription('The time of the last change of state.')
pderivedAnalogElementAPkg = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 90), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogElementAPkg.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogElementAPkg.setDescription('Package where the alarm point is located for element A.')
pderivedAnalogElementAPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 91), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogElementAPoint.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogElementAPoint.setDescription('Alarm point for element A.')
pderivedAnalogElementBPkg = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 92), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogElementBPkg.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogElementBPkg.setDescription('Package where the alarm point is located for element B.')
pderivedAnalogElementBPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 93), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogElementBPoint.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogElementBPoint.setDescription('Alarm point for element B.')
pderivedAnalogFormula = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 95), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogFormula.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogFormula.setDescription('The formula that will be used to compute the derived alarm.')
pderivedAnalogTL1SID = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 116), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogTL1SID.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogTL1SID.setDescription('(TL1) System ID associated with this item.')
pderivedAnalogTL1COND = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 117), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogTL1COND.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogTL1COND.setDescription('(TL1) Condition text associated with this item.')
pderivedAnalogTL1Eqpt = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 118), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogTL1Eqpt.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogTL1Eqpt.setDescription('(TL1) EQPT field associated with this item.')
pderivedAnalogTL1Env = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 119), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogTL1Env.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogTL1Env.setDescription('(TL1) Environmental field associated with this item.')
pderivedAnalogTL1Srveff = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 120), TL1Srveff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogTL1Srveff.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogTL1Srveff.setDescription('(TL1) Service Effecting field associated with this item.')
pderivedAnalogTL1Locn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 121), TL1Locn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogTL1Locn.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogTL1Locn.setDescription('(TL1) Location field associated with this item.')
pderivedAnalogTL1Dirn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 122), TL1Dirn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pderivedAnalogTL1Dirn.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogTL1Dirn.setDescription('(TL1) Direction field associated with this item.')
pderivedAnalogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 33, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pderivedAnalogIndex.setStatus('current')
if mibBuilder.loadTexts: pderivedAnalogIndex.setDescription('Index.')
pgpsTable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34), )
if mibBuilder.loadTexts: pgpsTable.setStatus('current')
if mibBuilder.loadTexts: pgpsTable.setDescription('Table for configuration of gps')
pgpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pgpsIndex"))
if mibBuilder.loadTexts: pgpsEntry.setStatus('current')
if mibBuilder.loadTexts: pgpsEntry.setDescription('Entry for configuration table of gps')
pgpsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 3), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgpsDescription.setStatus('current')
if mibBuilder.loadTexts: pgpsDescription.setDescription('Description of the onboard device.')
pgpsDesc0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 4), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgpsDesc0.setStatus('current')
if mibBuilder.loadTexts: pgpsDesc0.setDescription('The description for values between threshold 0 and threshold 1.')
pgpsDesc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 5), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgpsDesc1.setStatus('current')
if mibBuilder.loadTexts: pgpsDesc1.setDescription('The description for values between threshold 1 and threshold 2.')
pgpsDesc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 6), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgpsDesc2.setStatus('current')
if mibBuilder.loadTexts: pgpsDesc2.setDescription('The description for values between threshold 2 and threshold 3.')
pgpsDesc3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 7), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgpsDesc3.setStatus('current')
if mibBuilder.loadTexts: pgpsDesc3.setDescription('The description for values between threshold 3 and threshold 4.')
pgpsDesc4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 8), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgpsDesc4.setStatus('current')
if mibBuilder.loadTexts: pgpsDesc4.setDescription('The description for values between threshold 4 and threshold 5.')
pgpsConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgpsConfigured.setStatus('current')
if mibBuilder.loadTexts: pgpsConfigured.setDescription('If set to true, the onboard sensors will be used.\n\t\t\t\tIf set to false the will be ignored.')
pgpsSendEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 11), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgpsSendEmail.setStatus('current')
if mibBuilder.loadTexts: pgpsSendEmail.setDescription('If set to true an email event will be set when a threshold is crossed.\n\t\t\t\tIf set to false no email event will be sent.')
pgpsSendSNMPTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 12), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgpsSendSNMPTrap.setStatus('current')
if mibBuilder.loadTexts: pgpsSendSNMPTrap.setDescription('If set to true an SNMP trap will be set when a threshold is crossed.\n\t\t\t\tIf set to false no SNMP trap will be sent.')
pgpsLevel0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 17), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgpsLevel0.setStatus('current')
if mibBuilder.loadTexts: pgpsLevel0.setDescription('The level for values between threshold 0 and threshold 1.')
pgpsLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 18), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgpsLevel1.setStatus('current')
if mibBuilder.loadTexts: pgpsLevel1.setDescription('The level for values between threshold 1 and threshold 2.')
pgpsLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 19), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgpsLevel2.setStatus('current')
if mibBuilder.loadTexts: pgpsLevel2.setDescription('The level for values between threshold 2 and threshold 3.')
pgpsLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 20), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgpsLevel3.setStatus('current')
if mibBuilder.loadTexts: pgpsLevel3.setDescription('The level for values between threshold 3 and threshold 4.')
pgpsLevel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 21), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgpsLevel4.setStatus('current')
if mibBuilder.loadTexts: pgpsLevel4.setDescription('The level for values between threshold 4 and threshold 5.')
pgpsThresh0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 28), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgpsThresh0.setStatus('current')
if mibBuilder.loadTexts: pgpsThresh0.setDescription('This is the minimun analog value.')
pgpsThresh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 29), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgpsThresh1.setStatus('current')
if mibBuilder.loadTexts: pgpsThresh1.setDescription('This is the first threshold value.')
pgpsThresh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 30), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgpsThresh2.setStatus('current')
if mibBuilder.loadTexts: pgpsThresh2.setDescription('This is the second threshold value.')
pgpsThresh3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 31), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgpsThresh3.setStatus('current')
if mibBuilder.loadTexts: pgpsThresh3.setDescription('This is the third threshold value.')
pgpsThresh4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 32), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgpsThresh4.setStatus('current')
if mibBuilder.loadTexts: pgpsThresh4.setDescription('This is the fourth threshold value.')
pgpsThresh5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 33), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgpsThresh5.setStatus('current')
if mibBuilder.loadTexts: pgpsThresh5.setDescription('This is the maximum threshold value.')
pgpsUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 46), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgpsUnits.setStatus('current')
if mibBuilder.loadTexts: pgpsUnits.setDescription('Description of the units of measurement.')
pgpsLiveDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 64), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgpsLiveDescription.setStatus('current')
if mibBuilder.loadTexts: pgpsLiveDescription.setDescription('The description of  the current state of the onboard sensor')
pgpsLiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 65), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgpsLiveLevel.setStatus('current')
if mibBuilder.loadTexts: pgpsLiveLevel.setDescription('The level of the current state of the onboard sensor.')
pgpsLiveRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 66), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgpsLiveRaw.setStatus('current')
if mibBuilder.loadTexts: pgpsLiveRaw.setDescription('The current reading from the onboard sensor.  This value \n\t\t\t\twill always be between the threshold 0 and threshold 5 values.')
pgpsLiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 67), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgpsLiveTime.setStatus('current')
if mibBuilder.loadTexts: pgpsLiveTime.setDescription('The time of the last event.')
pgpsTL1SID = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 116), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgpsTL1SID.setStatus('current')
if mibBuilder.loadTexts: pgpsTL1SID.setDescription('(TL1) System ID associated with this item.')
pgpsTL1COND = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 117), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgpsTL1COND.setStatus('current')
if mibBuilder.loadTexts: pgpsTL1COND.setDescription('(TL1) Condition text associated with this item.')
pgpsTL1Eqpt = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 118), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgpsTL1Eqpt.setStatus('current')
if mibBuilder.loadTexts: pgpsTL1Eqpt.setDescription('(TL1) EQPT field associated with this item.')
pgpsTL1Env = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 119), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgpsTL1Env.setStatus('current')
if mibBuilder.loadTexts: pgpsTL1Env.setDescription('(TL1) Environmental field associated with this item.')
pgpsTL1Srveff = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 120), TL1Srveff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgpsTL1Srveff.setStatus('current')
if mibBuilder.loadTexts: pgpsTL1Srveff.setDescription('(TL1) Service Effecting field associated with this item.')
pgpsTL1Locn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 121), TL1Locn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgpsTL1Locn.setStatus('current')
if mibBuilder.loadTexts: pgpsTL1Locn.setDescription('(TL1) Location field associated with this item.')
pgpsTL1Dirn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 122), TL1Dirn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgpsTL1Dirn.setStatus('current')
if mibBuilder.loadTexts: pgpsTL1Dirn.setDescription('(TL1) Direction field associated with this item.')
pgpsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 34, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgpsIndex.setStatus('current')
if mibBuilder.loadTexts: pgpsIndex.setDescription('Index.')
pportRedirectTable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 35), )
if mibBuilder.loadTexts: pportRedirectTable.setStatus('current')
if mibBuilder.loadTexts: pportRedirectTable.setDescription('Table for configuration of portRedirect')
pportRedirectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 35, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pportRedirectIndex"))
if mibBuilder.loadTexts: pportRedirectEntry.setStatus('current')
if mibBuilder.loadTexts: pportRedirectEntry.setDescription('Entry for configuration table of portRedirect')
pportRedirectDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 35, 1, 3), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportRedirectDescription.setStatus('current')
if mibBuilder.loadTexts: pportRedirectDescription.setDescription('Description of the connection.')
pportRedirectConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 35, 1, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportRedirectConfigured.setStatus('current')
if mibBuilder.loadTexts: pportRedirectConfigured.setDescription('If set to true, this route will be allowed.')
pportRedirectIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 35, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportRedirectIpAddress.setStatus('current')
if mibBuilder.loadTexts: pportRedirectIpAddress.setDescription('The IP address of the remote device.')
pportRedirectReadPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 35, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportRedirectReadPeriod.setStatus('current')
if mibBuilder.loadTexts: pportRedirectReadPeriod.setDescription('Inactivity timeout (in minutes).')
pportRedirectRosterID = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 35, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportRedirectRosterID.setStatus('current')
if mibBuilder.loadTexts: pportRedirectRosterID.setDescription('IP port number to use when connecting to the remote device.')
pportRedirectIPPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 35, 1, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportRedirectIPPortNum.setStatus('current')
if mibBuilder.loadTexts: pportRedirectIPPortNum.setDescription('IP port number to use when connecting to WebMon.')
pportRedirectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 35, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportRedirectIndex.setStatus('current')
if mibBuilder.loadTexts: pportRedirectIndex.setDescription('Index.')
pscheduleATable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 36), )
if mibBuilder.loadTexts: pscheduleATable.setStatus('current')
if mibBuilder.loadTexts: pscheduleATable.setDescription('Table for configuration of scheduleA')
pscheduleAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 36, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pscheduleAIndex"))
if mibBuilder.loadTexts: pscheduleAEntry.setStatus('current')
if mibBuilder.loadTexts: pscheduleAEntry.setDescription('Entry for configuration table of scheduleA')
pscheduleADayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 36, 1, 102), DayOfWeek()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscheduleADayOfWeek.setStatus('current')
if mibBuilder.loadTexts: pscheduleADayOfWeek.setDescription('The day of the week')
pscheduleAConfiguredState = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 36, 1, 103), ConfiguredState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleAConfiguredState.setStatus('current')
if mibBuilder.loadTexts: pscheduleAConfiguredState.setDescription('The state of the schedule at the beginning of the day.')
pscheduleAConfigured1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 36, 1, 104), ConfiguredState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleAConfigured1.setStatus('current')
if mibBuilder.loadTexts: pscheduleAConfigured1.setDescription('The state of the schedule between time markers 1 and 2.')
pscheduleAConfigured2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 36, 1, 105), ConfiguredState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleAConfigured2.setStatus('current')
if mibBuilder.loadTexts: pscheduleAConfigured2.setDescription('The state of the schedule between time markers 2 and 3.')
pscheduleAConfigured3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 36, 1, 106), ConfiguredState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleAConfigured3.setStatus('current')
if mibBuilder.loadTexts: pscheduleAConfigured3.setDescription('The state of the schedule between time markers 3 and 4.')
pscheduleAConfigured4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 36, 1, 107), ConfiguredState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleAConfigured4.setStatus('current')
if mibBuilder.loadTexts: pscheduleAConfigured4.setDescription('The state of the schedule at the end of the day.')
pscheduleATime0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 36, 1, 108), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscheduleATime0.setStatus('current')
if mibBuilder.loadTexts: pscheduleATime0.setDescription('Time marker 0, the beginning of the day.')
pscheduleATime1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 36, 1, 109), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleATime1.setStatus('current')
if mibBuilder.loadTexts: pscheduleATime1.setDescription('Time marker 1.')
pscheduleATime2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 36, 1, 110), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleATime2.setStatus('current')
if mibBuilder.loadTexts: pscheduleATime2.setDescription('Time marker 2.')
pscheduleATime3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 36, 1, 111), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleATime3.setStatus('current')
if mibBuilder.loadTexts: pscheduleATime3.setDescription('Time marker 3.')
pscheduleATime4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 36, 1, 112), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleATime4.setStatus('current')
if mibBuilder.loadTexts: pscheduleATime4.setDescription('Time marker 4.')
pscheduleATime5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 36, 1, 113), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscheduleATime5.setStatus('current')
if mibBuilder.loadTexts: pscheduleATime5.setDescription('Time marker 5, the end of the day.')
pscheduleAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 36, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscheduleAIndex.setStatus('current')
if mibBuilder.loadTexts: pscheduleAIndex.setDescription('Index.')
pscheduleBTable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 37), )
if mibBuilder.loadTexts: pscheduleBTable.setStatus('current')
if mibBuilder.loadTexts: pscheduleBTable.setDescription('Table for configuration of scheduleB')
pscheduleBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 37, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pscheduleBIndex"))
if mibBuilder.loadTexts: pscheduleBEntry.setStatus('current')
if mibBuilder.loadTexts: pscheduleBEntry.setDescription('Entry for configuration table of scheduleB')
pscheduleBDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 37, 1, 102), DayOfWeek()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscheduleBDayOfWeek.setStatus('current')
if mibBuilder.loadTexts: pscheduleBDayOfWeek.setDescription('The day of the week')
pscheduleBConfiguredState = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 37, 1, 103), ConfiguredState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleBConfiguredState.setStatus('current')
if mibBuilder.loadTexts: pscheduleBConfiguredState.setDescription('The state of the schedule at the beginning of the day.')
pscheduleBConfigured1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 37, 1, 104), ConfiguredState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleBConfigured1.setStatus('current')
if mibBuilder.loadTexts: pscheduleBConfigured1.setDescription('The state of the schedule between time markers 1 and 2.')
pscheduleBConfigured2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 37, 1, 105), ConfiguredState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleBConfigured2.setStatus('current')
if mibBuilder.loadTexts: pscheduleBConfigured2.setDescription('The state of the schedule between time markers 2 and 3.')
pscheduleBConfigured3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 37, 1, 106), ConfiguredState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleBConfigured3.setStatus('current')
if mibBuilder.loadTexts: pscheduleBConfigured3.setDescription('The state of the schedule between time markers 3 and 4.')
pscheduleBConfigured4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 37, 1, 107), ConfiguredState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleBConfigured4.setStatus('current')
if mibBuilder.loadTexts: pscheduleBConfigured4.setDescription('The state of the schedule at the end of the day.')
pscheduleBTime0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 37, 1, 108), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscheduleBTime0.setStatus('current')
if mibBuilder.loadTexts: pscheduleBTime0.setDescription('Time marker 0, the beginning of the day.')
pscheduleBTime1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 37, 1, 109), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleBTime1.setStatus('current')
if mibBuilder.loadTexts: pscheduleBTime1.setDescription('Time marker 1.')
pscheduleBTime2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 37, 1, 110), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleBTime2.setStatus('current')
if mibBuilder.loadTexts: pscheduleBTime2.setDescription('Time marker 2.')
pscheduleBTime3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 37, 1, 111), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleBTime3.setStatus('current')
if mibBuilder.loadTexts: pscheduleBTime3.setDescription('Time marker 3.')
pscheduleBTime4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 37, 1, 112), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleBTime4.setStatus('current')
if mibBuilder.loadTexts: pscheduleBTime4.setDescription('Time marker 4.')
pscheduleBTime5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 37, 1, 113), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscheduleBTime5.setStatus('current')
if mibBuilder.loadTexts: pscheduleBTime5.setDescription('Time marker 5, the end of the day.')
pscheduleBIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 37, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscheduleBIndex.setStatus('current')
if mibBuilder.loadTexts: pscheduleBIndex.setDescription('Index.')
pscheduleCTable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 38), )
if mibBuilder.loadTexts: pscheduleCTable.setStatus('current')
if mibBuilder.loadTexts: pscheduleCTable.setDescription('Table for configuration of scheduleC')
pscheduleCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 38, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pscheduleCIndex"))
if mibBuilder.loadTexts: pscheduleCEntry.setStatus('current')
if mibBuilder.loadTexts: pscheduleCEntry.setDescription('Entry for configuration table of scheduleC')
pscheduleCDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 38, 1, 102), DayOfWeek()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscheduleCDayOfWeek.setStatus('current')
if mibBuilder.loadTexts: pscheduleCDayOfWeek.setDescription('The day of the week')
pscheduleCConfiguredState = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 38, 1, 103), ConfiguredState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleCConfiguredState.setStatus('current')
if mibBuilder.loadTexts: pscheduleCConfiguredState.setDescription('The state of the schedule at the beginning of the day.')
pscheduleCConfigured1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 38, 1, 104), ConfiguredState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleCConfigured1.setStatus('current')
if mibBuilder.loadTexts: pscheduleCConfigured1.setDescription('The state of the schedule between time markers 1 and 2.')
pscheduleCConfigured2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 38, 1, 105), ConfiguredState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleCConfigured2.setStatus('current')
if mibBuilder.loadTexts: pscheduleCConfigured2.setDescription('The state of the schedule between time markers 2 and 3.')
pscheduleCConfigured3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 38, 1, 106), ConfiguredState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleCConfigured3.setStatus('current')
if mibBuilder.loadTexts: pscheduleCConfigured3.setDescription('The state of the schedule between time markers 3 and 4.')
pscheduleCConfigured4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 38, 1, 107), ConfiguredState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleCConfigured4.setStatus('current')
if mibBuilder.loadTexts: pscheduleCConfigured4.setDescription('The state of the schedule at the end of the day.')
pscheduleCTime0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 38, 1, 108), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscheduleCTime0.setStatus('current')
if mibBuilder.loadTexts: pscheduleCTime0.setDescription('Time marker 0, the beginning of the day.')
pscheduleCTime1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 38, 1, 109), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleCTime1.setStatus('current')
if mibBuilder.loadTexts: pscheduleCTime1.setDescription('Time marker 1.')
pscheduleCTime2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 38, 1, 110), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleCTime2.setStatus('current')
if mibBuilder.loadTexts: pscheduleCTime2.setDescription('Time marker 2.')
pscheduleCTime3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 38, 1, 111), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleCTime3.setStatus('current')
if mibBuilder.loadTexts: pscheduleCTime3.setDescription('Time marker 3.')
pscheduleCTime4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 38, 1, 112), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleCTime4.setStatus('current')
if mibBuilder.loadTexts: pscheduleCTime4.setDescription('Time marker 4.')
pscheduleCTime5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 38, 1, 113), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscheduleCTime5.setStatus('current')
if mibBuilder.loadTexts: pscheduleCTime5.setDescription('Time marker 5, the end of the day.')
pscheduleCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 38, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscheduleCIndex.setStatus('current')
if mibBuilder.loadTexts: pscheduleCIndex.setDescription('Index.')
pscheduleDTable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 39), )
if mibBuilder.loadTexts: pscheduleDTable.setStatus('current')
if mibBuilder.loadTexts: pscheduleDTable.setDescription('Table for configuration of scheduleD')
pscheduleDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 39, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pscheduleDIndex"))
if mibBuilder.loadTexts: pscheduleDEntry.setStatus('current')
if mibBuilder.loadTexts: pscheduleDEntry.setDescription('Entry for configuration table of scheduleD')
pscheduleDDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 39, 1, 102), DayOfWeek()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscheduleDDayOfWeek.setStatus('current')
if mibBuilder.loadTexts: pscheduleDDayOfWeek.setDescription('The day of the week')
pscheduleDConfiguredState = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 39, 1, 103), ConfiguredState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleDConfiguredState.setStatus('current')
if mibBuilder.loadTexts: pscheduleDConfiguredState.setDescription('The state of the schedule at the beginning of the day.')
pscheduleDConfigured1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 39, 1, 104), ConfiguredState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleDConfigured1.setStatus('current')
if mibBuilder.loadTexts: pscheduleDConfigured1.setDescription('The state of the schedule between time markers 1 and 2.')
pscheduleDConfigured2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 39, 1, 105), ConfiguredState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleDConfigured2.setStatus('current')
if mibBuilder.loadTexts: pscheduleDConfigured2.setDescription('The state of the schedule between time markers 2 and 3.')
pscheduleDConfigured3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 39, 1, 106), ConfiguredState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleDConfigured3.setStatus('current')
if mibBuilder.loadTexts: pscheduleDConfigured3.setDescription('The state of the schedule between time markers 3 and 4.')
pscheduleDConfigured4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 39, 1, 107), ConfiguredState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleDConfigured4.setStatus('current')
if mibBuilder.loadTexts: pscheduleDConfigured4.setDescription('The state of the schedule at the end of the day.')
pscheduleDTime0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 39, 1, 108), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscheduleDTime0.setStatus('current')
if mibBuilder.loadTexts: pscheduleDTime0.setDescription('Time marker 0, the beginning of the day.')
pscheduleDTime1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 39, 1, 109), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleDTime1.setStatus('current')
if mibBuilder.loadTexts: pscheduleDTime1.setDescription('Time marker 1.')
pscheduleDTime2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 39, 1, 110), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleDTime2.setStatus('current')
if mibBuilder.loadTexts: pscheduleDTime2.setDescription('Time marker 2.')
pscheduleDTime3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 39, 1, 111), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleDTime3.setStatus('current')
if mibBuilder.loadTexts: pscheduleDTime3.setDescription('Time marker 3.')
pscheduleDTime4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 39, 1, 112), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pscheduleDTime4.setStatus('current')
if mibBuilder.loadTexts: pscheduleDTime4.setDescription('Time marker 4.')
pscheduleDTime5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 39, 1, 113), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscheduleDTime5.setStatus('current')
if mibBuilder.loadTexts: pscheduleDTime5.setDescription('Time marker 5, the end of the day.')
pscheduleDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 39, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscheduleDIndex.setStatus('current')
if mibBuilder.loadTexts: pscheduleDIndex.setDescription('Index.')
tl1Settings = MibIdentifier((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 40))
tl1SettingsTL1Issue = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 40, 123), TL1Issue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1SettingsTL1Issue.setStatus('current')
if mibBuilder.loadTexts: tl1SettingsTL1Issue.setDescription('(TL1) TL1 issue associated with this device.')
pDCPFProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 41), )
if mibBuilder.loadTexts: pDCPFProtocolTable.setStatus('current')
if mibBuilder.loadTexts: pDCPFProtocolTable.setDescription('Table for configuration of DCPFProtocol')
pDCPFProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 41, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pDCPFProtocolIndex"))
if mibBuilder.loadTexts: pDCPFProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: pDCPFProtocolEntry.setDescription('Entry for configuration table of DCPFProtocol')
pDCPFProtocolDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 41, 1, 3), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDCPFProtocolDescription.setStatus('current')
if mibBuilder.loadTexts: pDCPFProtocolDescription.setDescription('Description of the input device that DCPF will poll.')
pDCPFProtocolConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 41, 1, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pDCPFProtocolConfigured.setStatus('current')
if mibBuilder.loadTexts: pDCPFProtocolConfigured.setDescription('If set to true, this input will be polled in DCPF.  If set to false, it will not be polled.')
pDCPFProtocolBaseDCPFDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 41, 1, 127), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pDCPFProtocolBaseDCPFDisplay.setStatus('current')
if mibBuilder.loadTexts: pDCPFProtocolBaseDCPFDisplay.setDescription('Base DCPF display for this input device.')
pDCPFProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 41, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDCPFProtocolIndex.setStatus('current')
if mibBuilder.loadTexts: pDCPFProtocolIndex.setDescription('Index.')
dcpfSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 42))
dcpfSettingsDCPFAddress = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 42, 128), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcpfSettingsDCPFAddress.setStatus('current')
if mibBuilder.loadTexts: dcpfSettingsDCPFAddress.setDescription('Base DCPF Address.')
pTABSProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 43), )
if mibBuilder.loadTexts: pTABSProtocolTable.setStatus('current')
if mibBuilder.loadTexts: pTABSProtocolTable.setDescription('Table for configuration of TABSProtocol')
pTABSProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 43, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pTABSProtocolIndex"))
if mibBuilder.loadTexts: pTABSProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: pTABSProtocolEntry.setDescription('Entry for configuration table of TABSProtocol')
pTABSProtocolDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 43, 1, 3), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pTABSProtocolDescription.setStatus('current')
if mibBuilder.loadTexts: pTABSProtocolDescription.setDescription('Description of the input device that TABS will poll.')
pTABSProtocolConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 43, 1, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTABSProtocolConfigured.setStatus('current')
if mibBuilder.loadTexts: pTABSProtocolConfigured.setDescription('If set to true, this input will be polled in TABS.  If set to false, it will not be polled.')
pTABSProtocolBaseTABSDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 43, 1, 129), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTABSProtocolBaseTABSDisplay.setStatus('current')
if mibBuilder.loadTexts: pTABSProtocolBaseTABSDisplay.setDescription('Base TABS display for this input device.')
pTABSProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 43, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pTABSProtocolIndex.setStatus('current')
if mibBuilder.loadTexts: pTABSProtocolIndex.setDescription('Index.')
tabsSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 44))
tabsSettingsTABSAddress = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 44, 130), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tabsSettingsTABSAddress.setStatus('current')
if mibBuilder.loadTexts: tabsSettingsTABSAddress.setDescription('Base TABS Address.')
psnmpCommandsTable = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 45), )
if mibBuilder.loadTexts: psnmpCommandsTable.setStatus('current')
if mibBuilder.loadTexts: psnmpCommandsTable.setDescription('Table for configuration of snmpCommands')
psnmpCommandsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 45, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "psnmpCommandsIndex"))
if mibBuilder.loadTexts: psnmpCommandsEntry.setStatus('current')
if mibBuilder.loadTexts: psnmpCommandsEntry.setDescription('Entry for configuration table of snmpCommands')
psnmpCommandsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 45, 1, 3), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psnmpCommandsDescription.setStatus('current')
if mibBuilder.loadTexts: psnmpCommandsDescription.setDescription('Name for this SNMP command.')
psnmpCommandsConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 45, 1, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psnmpCommandsConfigured.setStatus('current')
if mibBuilder.loadTexts: psnmpCommandsConfigured.setDescription('If set to true, this command will be sent for matching events.  If set to false, it will not be sent.')
psnmpCommandsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 45, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psnmpCommandsIpAddress.setStatus('current')
if mibBuilder.loadTexts: psnmpCommandsIpAddress.setDescription('Target (receiver) IP address of this SNMP command.')
psnmpCommandsGet = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 45, 1, 39), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psnmpCommandsGet.setStatus('current')
if mibBuilder.loadTexts: psnmpCommandsGet.setDescription('SNMP community used with this command.')
psnmpCommandsSnmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 45, 1, 42), SnmpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psnmpCommandsSnmpVersion.setStatus('current')
if mibBuilder.loadTexts: psnmpCommandsSnmpVersion.setDescription('SNMP version to be used with this command.')
psnmpCommandsOutputAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 45, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psnmpCommandsOutputAuto.setStatus('current')
if mibBuilder.loadTexts: psnmpCommandsOutputAuto.setDescription('Source alarm point for this SNMP command.')
psnmpCommandsOutputAutoPkg = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 45, 1, 71), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psnmpCommandsOutputAutoPkg.setStatus('current')
if mibBuilder.loadTexts: psnmpCommandsOutputAutoPkg.setDescription('Package where the source alarm point is located.')
psnmpCommandsIPPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 45, 1, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psnmpCommandsIPPortNum.setStatus('current')
if mibBuilder.loadTexts: psnmpCommandsIPPortNum.setDescription('Target (receiver) IP port of this SNMP command.')
psnmpCommandsOID = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 45, 1, 132), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psnmpCommandsOID.setStatus('current')
if mibBuilder.loadTexts: psnmpCommandsOID.setDescription('Target OID used with this command')
psnmpCommandsSNMPVarbindType = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 45, 1, 134), SNMPVarbindType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psnmpCommandsSNMPVarbindType.setStatus('current')
if mibBuilder.loadTexts: psnmpCommandsSNMPVarbindType.setDescription('Type of value sent to target, if this is a set command.')
psnmpCommandsTextNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 45, 1, 135), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psnmpCommandsTextNormal.setStatus('current')
if mibBuilder.loadTexts: psnmpCommandsTextNormal.setDescription('Value sent to target for normal condition for a set command.')
psnmpCommandsTextCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 45, 1, 136), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psnmpCommandsTextCritical.setStatus('current')
if mibBuilder.loadTexts: psnmpCommandsTextCritical.setDescription('Value sent to target for critical condition for a set command.')
psnmpCommandsTextMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 45, 1, 137), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psnmpCommandsTextMajor.setStatus('current')
if mibBuilder.loadTexts: psnmpCommandsTextMajor.setDescription('Value sent to target for major condition for a set command.')
psnmpCommandsTextMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 45, 1, 138), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psnmpCommandsTextMinor.setStatus('current')
if mibBuilder.loadTexts: psnmpCommandsTextMinor.setDescription('Value sent to target for minor condition for a set command.')
psnmpCommandsTextStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 45, 1, 139), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psnmpCommandsTextStatus.setStatus('current')
if mibBuilder.loadTexts: psnmpCommandsTextStatus.setDescription('Value sent to target for status condition for a set command.')
psnmpCommandsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 45, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psnmpCommandsIndex.setStatus('current')
if mibBuilder.loadTexts: psnmpCommandsIndex.setDescription('Index.')
battMon = MibIdentifier((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 46))
battMonConfigured = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 46, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battMonConfigured.setStatus('current')
if mibBuilder.loadTexts: battMonConfigured.setDescription('If set to true, this command will be sent for matching events.  If set to false, it will not be sent.')
battMonOutputAuto = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 46, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battMonOutputAuto.setStatus('current')
if mibBuilder.loadTexts: battMonOutputAuto.setDescription('Source alarm point for this SNMP command.')
battMonOutputAutoPkg = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 46, 71), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battMonOutputAutoPkg.setStatus('current')
if mibBuilder.loadTexts: battMonOutputAutoPkg.setDescription('Package where the source alarm point is located.')
pSlot1Table = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18), )
if mibBuilder.loadTexts: pSlot1Table.setStatus('current')
if mibBuilder.loadTexts: pSlot1Table.setDescription('Table for configuration of Slot1')
pSlot1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pSlot1Index"))
if mibBuilder.loadTexts: pSlot1Entry.setStatus('current')
if mibBuilder.loadTexts: pSlot1Entry.setDescription('Entry for configuration table of Slot1')
pSlot1Description = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 3), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1Description.setStatus('current')
if mibBuilder.loadTexts: pSlot1Description.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Description of the alarm point.\n\t\t\t\tdiscrete-outputs - Description of the control point.\n\t\t\t\tserial-ports - Description of the serial port.\n\t\t\t\tonboard-sensors - Description of the onboard device.\n\t\t\t\tanalog-Inputs - Description of the analog input device.\n\t\t\t\tanalog-Sensors - Description of the sensor input device.')
pSlot1Desc0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 4), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1Desc0.setStatus('current')
if mibBuilder.loadTexts: pSlot1Desc0.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Description of the off state.\n\t\t\t\tdiscrete-outputs - Description when the control point is open.\n\t\t\t\tonboard-sensors - The description for values between threshold 0 and threshold 1.\n\t\t\t\tanalog-Inputs - The description for values between threshold 0 and threshold 1.\n\t\t\t\tanalog-Sensors - The description for values between threshold 0 and threshold 1.')
pSlot1Desc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 5), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1Desc1.setStatus('current')
if mibBuilder.loadTexts: pSlot1Desc1.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Description of the on state.\n\t\t\t\tdiscrete-outputs - Description when the control point is closed.\n\t\t\t\tonboard-sensors - The description for values between threshold 1 and threshold 2.\n\t\t\t\tanalog-Inputs - The description for values between threshold 1 and threshold 2.\n\t\t\t\tanalog-Sensors - The description for values between threshold 1 and threshold 2.')
pSlot1Desc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 6), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1Desc2.setStatus('current')
if mibBuilder.loadTexts: pSlot1Desc2.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The description for values between threshold 2 and threshold 3.\n\t\t\t\tanalog-Inputs - The description for values between threshold 2 and threshold 3.\n\t\t\t\tanalog-Sensors - The description for values between threshold 2 and threshold 3.')
pSlot1Desc3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 7), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1Desc3.setStatus('current')
if mibBuilder.loadTexts: pSlot1Desc3.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The description for values between threshold 3 and threshold 4.\n\t\t\t\tanalog-Inputs - The description for values between threshold 3 and threshold 4.\n\t\t\t\tanalog-Sensors - The description for values between threshold 3 and threshold 4.')
pSlot1Desc4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 8), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1Desc4.setStatus('current')
if mibBuilder.loadTexts: pSlot1Desc4.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The description for values between threshold 4 and threshold 5.\n\t\t\t\tanalog-Inputs - The description for values between threshold 4 and threshold 5.\n\t\t\t\tanalog-Sensors - The description for values between threshold 4 and threshold 5.')
pSlot1Desc5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 9), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1Desc5.setStatus('current')
if mibBuilder.loadTexts: pSlot1Desc5.setDescription('This field is used in the following card types:\n\t\t\t\tanalog-Inputs - Description for a communications failure to the sensor.\n\t\t\t\tanalog-Sensors - Description for a communications failure to the sensor.')
pSlot1Configured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1Configured.setStatus('current')
if mibBuilder.loadTexts: pSlot1Configured.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - If set to true, changes of state will be reported.\n\t\t\t\tIf set to false, not change of states will be reported.\n\t\t\t\tdiscrete-outputs - If set to true, the control point will operate.\n\t\t\t\tIf false, it will not operate.\n\t\t\t\tserial-ports - If set to true, this serial port will be usable.\n\t\t\t\tIf set to false the port will not be usable.\n\t\t\t\tonboard-sensors - If set to true, the onboard sensors will be used.\n\t\t\t\tIf set to false the will be ignored.\n\t\t\t\tanalog-Inputs - If set to true, the analog inputs will be usable.\n\t\t\t\tIf set to false the analog inputs will be ignored.\n\t\t\t\tanalog-Sensors - If set to true, the sensor inputs will be usable.\n\t\t\t\tIf set to false the sensor inputs will be ignored.')
pSlot1SendEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 11), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1SendEmail.setStatus('current')
if mibBuilder.loadTexts: pSlot1SendEmail.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - If set to true, an email will be sent on a change of state.\n\t\t\t\tIf false, no email will be sent.\n\t\t\t\tonboard-sensors - If set to true an email event will be set when a threshold is crossed.\n\t\t\t\tIf set to false no email event will be sent.\n\t\t\t\tanalog-Inputs - If set to true an email event will be set when a threshold is crossed.\n\t\t\t\tIf set to false no email event will be sent.\n\t\t\t\tanalog-Sensors - If set to true an email event will be set when a threshold is crossed.\n\t\t\t\tIf set to false no email event will be sent.')
pSlot1SendSNMPTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 12), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1SendSNMPTrap.setStatus('current')
if mibBuilder.loadTexts: pSlot1SendSNMPTrap.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - If set to true, an SNMP trap will be sent on a change of state.\n\t\t\t\tIf false, no SNMP trap will be sent.\n\t\t\t\tonboard-sensors - If set to true an SNMP trap will be set when a threshold is crossed.\n\t\t\t\tIf set to false no SNMP trap will be sent.\n\t\t\t\tanalog-Inputs - If set to true an SNMP trap will be set when a threshold is crossed.\n\t\t\t\tIf set to false no SNMP trap will be sent.\n\t\t\t\tanalog-Sensors - If set to true an SNMP trap will be set when a threshold is crossed.\n\t\t\t\tIf set to false no SNMP trap will be sent.')
pSlot1IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1IpAddress.setStatus('current')
if mibBuilder.loadTexts: pSlot1IpAddress.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - IP Address of the target device.')
pSlot1Level0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 17), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1Level0.setStatus('current')
if mibBuilder.loadTexts: pSlot1Level0.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Level of the off state.\n\t\t\t\tdiscrete-outputs - Level of the control point when open.\n\t\t\t\tonboard-sensors - The level for values between threshold 0 and threshold 1.\n\t\t\t\tanalog-Inputs - The level for values between threshold 0 and threshold 1.\n\t\t\t\tanalog-Sensors - The level for values between threshold 0 and threshold 1.')
pSlot1Level1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 18), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1Level1.setStatus('current')
if mibBuilder.loadTexts: pSlot1Level1.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Level of the on state.\n\t\t\t\tdiscrete-outputs - Level of the control point when closed.\n\t\t\t\tonboard-sensors - The level for values between threshold 1 and threshold 2.\n\t\t\t\tanalog-Inputs - The level for values between threshold 1 and threshold 2.\n\t\t\t\tanalog-Sensors - The level for values between threshold 1 and threshold 2.')
pSlot1Level2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 19), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1Level2.setStatus('current')
if mibBuilder.loadTexts: pSlot1Level2.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The level for values between threshold 2 and threshold 3.\n\t\t\t\tanalog-Inputs - The level for values between threshold 2 and threshold 3.\n\t\t\t\tanalog-Sensors - The level for values between threshold 2 and threshold 3.')
pSlot1Level3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 20), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1Level3.setStatus('current')
if mibBuilder.loadTexts: pSlot1Level3.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The level for values between threshold 3 and threshold 4.\n\t\t\t\tanalog-Inputs - The level for values between threshold 3 and threshold 4.\n\t\t\t\tanalog-Sensors - The level for values between threshold 3 and threshold 4.')
pSlot1Level4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 21), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1Level4.setStatus('current')
if mibBuilder.loadTexts: pSlot1Level4.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The level for values between threshold 4 and threshold 5.\n\t\t\t\tanalog-Inputs - The level for values between threshold 4 and threshold 5.\n\t\t\t\tanalog-Sensors - The level for values between threshold 4 and threshold 5.')
pSlot1Level5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 22), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1Level5.setStatus('current')
if mibBuilder.loadTexts: pSlot1Level5.setDescription('This field is used in the following card types:\n\t\t\t\tanalog-Inputs - Level of a communications failure to the sensor.\n\t\t\t\tanalog-Sensors - Level of a communications failure to the sensor.')
pSlot1ReadPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1ReadPeriod.setStatus('current')
if mibBuilder.loadTexts: pSlot1ReadPeriod.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Inactivity timeout (in minutes).')
pSlot1Thresh0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 28), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot1Thresh0.setStatus('current')
if mibBuilder.loadTexts: pSlot1Thresh0.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the minimun analog value.\n\t\t\t\tanalog-Inputs - This is the maximum analog value.\n\t\t\t\tanalog-Sensors - This is the maximum analog value.')
pSlot1Thresh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 29), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1Thresh1.setStatus('current')
if mibBuilder.loadTexts: pSlot1Thresh1.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the first threshold value.\n\t\t\t\tanalog-Inputs - This is the first threshold value.\n\t\t\t\tanalog-Sensors - This is the first threshold value.')
pSlot1Thresh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 30), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1Thresh2.setStatus('current')
if mibBuilder.loadTexts: pSlot1Thresh2.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the second threshold value.\n\t\t\t\tanalog-Inputs - This is the second threshold value.\n\t\t\t\tanalog-Sensors - This is the second threshold value.')
pSlot1Thresh3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 31), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1Thresh3.setStatus('current')
if mibBuilder.loadTexts: pSlot1Thresh3.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the third threshold value.\n\t\t\t\tanalog-Inputs - This is the third threshold value.\n\t\t\t\tanalog-Sensors - This is the third threshold value.')
pSlot1Thresh4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 32), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1Thresh4.setStatus('current')
if mibBuilder.loadTexts: pSlot1Thresh4.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the fourth threshold value.\n\t\t\t\tanalog-Inputs - This is the fourth threshold value.\n\t\t\t\tanalog-Sensors - This is the fourth threshold value.')
pSlot1Thresh5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 33), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot1Thresh5.setStatus('current')
if mibBuilder.loadTexts: pSlot1Thresh5.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the maximum threshold value.\n\t\t\t\tanalog-Inputs - This is the minimum threshold value.\n\t\t\t\tanalog-Sensors - This is the minimum threshold value.')
pSlot1ContactStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 44), ContactStyle()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1ContactStyle.setStatus('current')
if mibBuilder.loadTexts: pSlot1ContactStyle.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Determines the type of contact.')
pSlot1Units = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 46), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot1Units.setStatus('current')
if mibBuilder.loadTexts: pSlot1Units.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - Description of the units of measurement.\n\t\t\t\tanalog-Inputs - Description of the units of measurement.\n\t\t\t\tanalog-Sensors - Description of the units of measurement.')
pSlot1OutputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 47), OutputMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1OutputMode.setStatus('current')
if mibBuilder.loadTexts: pSlot1OutputMode.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-outputs - Defines the different ways a control point can be activated.')
pSlot1OutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 48), OutputState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1OutputState.setStatus('current')
if mibBuilder.loadTexts: pSlot1OutputState.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-outputs - A value of 0 will open the control point.\n\t\t\t\tA value of 1 will close the control point.')
pSlot1OutputAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1OutputAuto.setStatus('current')
if mibBuilder.loadTexts: pSlot1OutputAuto.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-outputs - When this control point is opened, this alarm point will change state \n\t\t\t\tto the on state.')
pSlot1BaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 57), BaudRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1BaudRate.setStatus('current')
if mibBuilder.loadTexts: pSlot1BaudRate.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Baud rate of the serial port.')
pSlot1DataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 58), DataBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1DataBits.setStatus('current')
if mibBuilder.loadTexts: pSlot1DataBits.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Number of data bit for the serial port.')
pSlot1Parity = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 59), Parity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1Parity.setStatus('current')
if mibBuilder.loadTexts: pSlot1Parity.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Parity of the serial port.')
pSlot1StopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 60), StopBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1StopBits.setStatus('current')
if mibBuilder.loadTexts: pSlot1StopBits.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Number of stop bits for the serial port.')
pSlot1Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 61), Protocol()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1Protocol.setStatus('current')
if mibBuilder.loadTexts: pSlot1Protocol.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Protocol the serial port is speaking.')
pSlot1SerialRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 62), SerialRTS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1SerialRTS.setStatus('current')
if mibBuilder.loadTexts: pSlot1SerialRTS.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Request To Send (RTS) setting for the serial port.')
pSlot1SerialCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 63), SerialCTS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1SerialCTS.setStatus('current')
if mibBuilder.loadTexts: pSlot1SerialCTS.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Clear To Send (CTS) setting for the serial port.')
pSlot1LiveDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 64), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot1LiveDescription.setStatus('current')
if mibBuilder.loadTexts: pSlot1LiveDescription.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - The current description of the alarm state.\n\t\t\t\tonboard-sensors - The description of  the current state of the onboard sensor\n\t\t\t\tanalog-Inputs - The description of  the current state of the analog input.\n\t\t\t\tanalog-Sensors - The description of  the current state of the sensor input.')
pSlot1LiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 65), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot1LiveLevel.setStatus('current')
if mibBuilder.loadTexts: pSlot1LiveLevel.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - The current level of the alarm.\n\t\t\t\tonboard-sensors - The level of the current state of the onboard sensor.\n\t\t\t\tanalog-Inputs - The level of the current state of the analog input.\n\t\t\t\tanalog-Sensors - The level of the current state of the sensor input.')
pSlot1LiveRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 66), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot1LiveRaw.setStatus('current')
if mibBuilder.loadTexts: pSlot1LiveRaw.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The current reading from the onboard sensor.  This value \n\t\t\t\twill always be between the threshold 0 and threshold 5 values.\n\t\t\t\tanalog-Inputs - The current reading from the analog input.  This value \n\t\t\t\twill always be between the threshold 0 and threshold 5 values.\n\t\t\t\tanalog-Sensors - The current reading from the sensor input.  This value \n\t\t\t\twill always be between the threshold 0 and threshold 5 values.')
pSlot1LiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 67), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot1LiveTime.setStatus('current')
if mibBuilder.loadTexts: pSlot1LiveTime.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - The time of the last change of state.\n\t\t\t\tonboard-sensors - The time of the last event.\n\t\t\t\tanalog-Inputs - The time of the last event.\n\t\t\t\tanalog-Sensors - The time of the last event.')
pSlot1Present = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 68), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot1Present.setStatus('current')
if mibBuilder.loadTexts: pSlot1Present.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - If set to true, the serial port exists.\n\t\t\t\tIf set to false the serial port does not exist.')
pSlot1OutputAutoPkg = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 71), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1OutputAutoPkg.setStatus('current')
if mibBuilder.loadTexts: pSlot1OutputAutoPkg.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-outputs - When this control point is opened, this is the package that the alarm\n\t\t\t\tpoint is located.')
pSlot1VoltageRange = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 72), VoltageRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot1VoltageRange.setStatus('current')
if mibBuilder.loadTexts: pSlot1VoltageRange.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The voltage range.\n\t\t\t\tanalog-Inputs - The voltage range.\n\t\t\t\tanalog-Sensors - The voltage range.')
pSlot1IPPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1IPPortNum.setStatus('current')
if mibBuilder.loadTexts: pSlot1IPPortNum.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - IP port number of the target device.')
pSlot1IOFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 75), IOFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot1IOFormat.setStatus('current')
if mibBuilder.loadTexts: pSlot1IOFormat.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - The io format of discrete inputs.\n\t\t\t\tdiscrete-outputs - The io format of discrete outputs.\n\t\t\t\tserial-ports - The io format of serial ports.\n\t\t\t\tonboard-sensors - The io format of onboard sensors.\n\t\t\t\tanalog-Inputs - The io format of analog inputs.\n\t\t\t\tanalog-Sensors - The io format of analog sensors.')
pSlot1PortType = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 76), PortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot1PortType.setStatus('current')
if mibBuilder.loadTexts: pSlot1PortType.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - The type of serial port.')
pSlot1TL1SID = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 116), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1TL1SID.setStatus('current')
if mibBuilder.loadTexts: pSlot1TL1SID.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tdiscrete-outputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot1TL1COND = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 117), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1TL1COND.setStatus('current')
if mibBuilder.loadTexts: pSlot1TL1COND.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tdiscrete-outputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot1TL1Eqpt = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 118), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1TL1Eqpt.setStatus('current')
if mibBuilder.loadTexts: pSlot1TL1Eqpt.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot1TL1Env = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 119), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1TL1Env.setStatus('current')
if mibBuilder.loadTexts: pSlot1TL1Env.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot1TL1Srveff = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 120), TL1Srveff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1TL1Srveff.setStatus('current')
if mibBuilder.loadTexts: pSlot1TL1Srveff.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot1TL1Locn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 121), TL1Locn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1TL1Locn.setStatus('current')
if mibBuilder.loadTexts: pSlot1TL1Locn.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot1TL1Dirn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 122), TL1Dirn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot1TL1Dirn.setStatus('current')
if mibBuilder.loadTexts: pSlot1TL1Dirn.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot1SensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 131), SensorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot1SensorType.setStatus('current')
if mibBuilder.loadTexts: pSlot1SensorType.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The type of sensor.\n\t\t\t\tanalog-Inputs - The type of sensor.\n\t\t\t\tanalog-Sensors - The type of sensor.')
pSlot1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 18, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot1Index.setStatus('current')
if mibBuilder.loadTexts: pSlot1Index.setDescription('Index.')
pSlot2Table = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19), )
if mibBuilder.loadTexts: pSlot2Table.setStatus('current')
if mibBuilder.loadTexts: pSlot2Table.setDescription('Table for configuration of Slot2')
pSlot2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pSlot2Index"))
if mibBuilder.loadTexts: pSlot2Entry.setStatus('current')
if mibBuilder.loadTexts: pSlot2Entry.setDescription('Entry for configuration table of Slot2')
pSlot2Description = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 3), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2Description.setStatus('current')
if mibBuilder.loadTexts: pSlot2Description.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Description of the alarm point.\n\t\t\t\tdiscrete-outputs - Description of the control point.\n\t\t\t\tserial-ports - Description of the serial port.\n\t\t\t\tonboard-sensors - Description of the onboard device.\n\t\t\t\tanalog-Inputs - Description of the analog input device.\n\t\t\t\tanalog-Sensors - Description of the sensor input device.')
pSlot2Desc0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 4), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2Desc0.setStatus('current')
if mibBuilder.loadTexts: pSlot2Desc0.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Description of the off state.\n\t\t\t\tdiscrete-outputs - Description when the control point is open.\n\t\t\t\tonboard-sensors - The description for values between threshold 0 and threshold 1.\n\t\t\t\tanalog-Inputs - The description for values between threshold 0 and threshold 1.\n\t\t\t\tanalog-Sensors - The description for values between threshold 0 and threshold 1.')
pSlot2Desc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 5), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2Desc1.setStatus('current')
if mibBuilder.loadTexts: pSlot2Desc1.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Description of the on state.\n\t\t\t\tdiscrete-outputs - Description when the control point is closed.\n\t\t\t\tonboard-sensors - The description for values between threshold 1 and threshold 2.\n\t\t\t\tanalog-Inputs - The description for values between threshold 1 and threshold 2.\n\t\t\t\tanalog-Sensors - The description for values between threshold 1 and threshold 2.')
pSlot2Desc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 6), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2Desc2.setStatus('current')
if mibBuilder.loadTexts: pSlot2Desc2.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The description for values between threshold 2 and threshold 3.\n\t\t\t\tanalog-Inputs - The description for values between threshold 2 and threshold 3.\n\t\t\t\tanalog-Sensors - The description for values between threshold 2 and threshold 3.')
pSlot2Desc3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 7), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2Desc3.setStatus('current')
if mibBuilder.loadTexts: pSlot2Desc3.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The description for values between threshold 3 and threshold 4.\n\t\t\t\tanalog-Inputs - The description for values between threshold 3 and threshold 4.\n\t\t\t\tanalog-Sensors - The description for values between threshold 3 and threshold 4.')
pSlot2Desc4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 8), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2Desc4.setStatus('current')
if mibBuilder.loadTexts: pSlot2Desc4.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The description for values between threshold 4 and threshold 5.\n\t\t\t\tanalog-Inputs - The description for values between threshold 4 and threshold 5.\n\t\t\t\tanalog-Sensors - The description for values between threshold 4 and threshold 5.')
pSlot2Desc5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 9), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2Desc5.setStatus('current')
if mibBuilder.loadTexts: pSlot2Desc5.setDescription('This field is used in the following card types:\n\t\t\t\tanalog-Inputs - Description for a communications failure to the sensor.\n\t\t\t\tanalog-Sensors - Description for a communications failure to the sensor.')
pSlot2Configured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2Configured.setStatus('current')
if mibBuilder.loadTexts: pSlot2Configured.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - If set to true, changes of state will be reported.\n\t\t\t\tIf set to false, not change of states will be reported.\n\t\t\t\tdiscrete-outputs - If set to true, the control point will operate.\n\t\t\t\tIf false, it will not operate.\n\t\t\t\tserial-ports - If set to true, this serial port will be usable.\n\t\t\t\tIf set to false the port will not be usable.\n\t\t\t\tonboard-sensors - If set to true, the onboard sensors will be used.\n\t\t\t\tIf set to false the will be ignored.\n\t\t\t\tanalog-Inputs - If set to true, the analog inputs will be usable.\n\t\t\t\tIf set to false the analog inputs will be ignored.\n\t\t\t\tanalog-Sensors - If set to true, the sensor inputs will be usable.\n\t\t\t\tIf set to false the sensor inputs will be ignored.')
pSlot2SendEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 11), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2SendEmail.setStatus('current')
if mibBuilder.loadTexts: pSlot2SendEmail.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - If set to true, an email will be sent on a change of state.\n\t\t\t\tIf false, no email will be sent.\n\t\t\t\tonboard-sensors - If set to true an email event will be set when a threshold is crossed.\n\t\t\t\tIf set to false no email event will be sent.\n\t\t\t\tanalog-Inputs - If set to true an email event will be set when a threshold is crossed.\n\t\t\t\tIf set to false no email event will be sent.\n\t\t\t\tanalog-Sensors - If set to true an email event will be set when a threshold is crossed.\n\t\t\t\tIf set to false no email event will be sent.')
pSlot2SendSNMPTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 12), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2SendSNMPTrap.setStatus('current')
if mibBuilder.loadTexts: pSlot2SendSNMPTrap.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - If set to true, an SNMP trap will be sent on a change of state.\n\t\t\t\tIf false, no SNMP trap will be sent.\n\t\t\t\tonboard-sensors - If set to true an SNMP trap will be set when a threshold is crossed.\n\t\t\t\tIf set to false no SNMP trap will be sent.\n\t\t\t\tanalog-Inputs - If set to true an SNMP trap will be set when a threshold is crossed.\n\t\t\t\tIf set to false no SNMP trap will be sent.\n\t\t\t\tanalog-Sensors - If set to true an SNMP trap will be set when a threshold is crossed.\n\t\t\t\tIf set to false no SNMP trap will be sent.')
pSlot2IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2IpAddress.setStatus('current')
if mibBuilder.loadTexts: pSlot2IpAddress.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - IP Address of the target device.')
pSlot2Level0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 17), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2Level0.setStatus('current')
if mibBuilder.loadTexts: pSlot2Level0.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Level of the off state.\n\t\t\t\tdiscrete-outputs - Level of the control point when open.\n\t\t\t\tonboard-sensors - The level for values between threshold 0 and threshold 1.\n\t\t\t\tanalog-Inputs - The level for values between threshold 0 and threshold 1.\n\t\t\t\tanalog-Sensors - The level for values between threshold 0 and threshold 1.')
pSlot2Level1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 18), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2Level1.setStatus('current')
if mibBuilder.loadTexts: pSlot2Level1.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Level of the on state.\n\t\t\t\tdiscrete-outputs - Level of the control point when closed.\n\t\t\t\tonboard-sensors - The level for values between threshold 1 and threshold 2.\n\t\t\t\tanalog-Inputs - The level for values between threshold 1 and threshold 2.\n\t\t\t\tanalog-Sensors - The level for values between threshold 1 and threshold 2.')
pSlot2Level2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 19), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2Level2.setStatus('current')
if mibBuilder.loadTexts: pSlot2Level2.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The level for values between threshold 2 and threshold 3.\n\t\t\t\tanalog-Inputs - The level for values between threshold 2 and threshold 3.\n\t\t\t\tanalog-Sensors - The level for values between threshold 2 and threshold 3.')
pSlot2Level3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 20), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2Level3.setStatus('current')
if mibBuilder.loadTexts: pSlot2Level3.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The level for values between threshold 3 and threshold 4.\n\t\t\t\tanalog-Inputs - The level for values between threshold 3 and threshold 4.\n\t\t\t\tanalog-Sensors - The level for values between threshold 3 and threshold 4.')
pSlot2Level4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 21), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2Level4.setStatus('current')
if mibBuilder.loadTexts: pSlot2Level4.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The level for values between threshold 4 and threshold 5.\n\t\t\t\tanalog-Inputs - The level for values between threshold 4 and threshold 5.\n\t\t\t\tanalog-Sensors - The level for values between threshold 4 and threshold 5.')
pSlot2Level5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 22), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2Level5.setStatus('current')
if mibBuilder.loadTexts: pSlot2Level5.setDescription('This field is used in the following card types:\n\t\t\t\tanalog-Inputs - Level of a communications failure to the sensor.\n\t\t\t\tanalog-Sensors - Level of a communications failure to the sensor.')
pSlot2ReadPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2ReadPeriod.setStatus('current')
if mibBuilder.loadTexts: pSlot2ReadPeriod.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Inactivity timeout (in minutes).')
pSlot2Thresh0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 28), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot2Thresh0.setStatus('current')
if mibBuilder.loadTexts: pSlot2Thresh0.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the minimun analog value.\n\t\t\t\tanalog-Inputs - This is the maximum analog value.\n\t\t\t\tanalog-Sensors - This is the maximum analog value.')
pSlot2Thresh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 29), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2Thresh1.setStatus('current')
if mibBuilder.loadTexts: pSlot2Thresh1.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the first threshold value.\n\t\t\t\tanalog-Inputs - This is the first threshold value.\n\t\t\t\tanalog-Sensors - This is the first threshold value.')
pSlot2Thresh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 30), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2Thresh2.setStatus('current')
if mibBuilder.loadTexts: pSlot2Thresh2.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the second threshold value.\n\t\t\t\tanalog-Inputs - This is the second threshold value.\n\t\t\t\tanalog-Sensors - This is the second threshold value.')
pSlot2Thresh3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 31), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2Thresh3.setStatus('current')
if mibBuilder.loadTexts: pSlot2Thresh3.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the third threshold value.\n\t\t\t\tanalog-Inputs - This is the third threshold value.\n\t\t\t\tanalog-Sensors - This is the third threshold value.')
pSlot2Thresh4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 32), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2Thresh4.setStatus('current')
if mibBuilder.loadTexts: pSlot2Thresh4.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the fourth threshold value.\n\t\t\t\tanalog-Inputs - This is the fourth threshold value.\n\t\t\t\tanalog-Sensors - This is the fourth threshold value.')
pSlot2Thresh5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 33), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot2Thresh5.setStatus('current')
if mibBuilder.loadTexts: pSlot2Thresh5.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the maximum threshold value.\n\t\t\t\tanalog-Inputs - This is the minimum threshold value.\n\t\t\t\tanalog-Sensors - This is the minimum threshold value.')
pSlot2ContactStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 44), ContactStyle()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2ContactStyle.setStatus('current')
if mibBuilder.loadTexts: pSlot2ContactStyle.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Determines the type of contact.')
pSlot2Units = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 46), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot2Units.setStatus('current')
if mibBuilder.loadTexts: pSlot2Units.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - Description of the units of measurement.\n\t\t\t\tanalog-Inputs - Description of the units of measurement.\n\t\t\t\tanalog-Sensors - Description of the units of measurement.')
pSlot2OutputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 47), OutputMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2OutputMode.setStatus('current')
if mibBuilder.loadTexts: pSlot2OutputMode.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-outputs - Defines the different ways a control point can be activated.')
pSlot2OutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 48), OutputState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2OutputState.setStatus('current')
if mibBuilder.loadTexts: pSlot2OutputState.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-outputs - A value of 0 will open the control point.\n\t\t\t\tA value of 1 will close the control point.')
pSlot2OutputAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2OutputAuto.setStatus('current')
if mibBuilder.loadTexts: pSlot2OutputAuto.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-outputs - When this control point is opened, this alarm point will change state \n\t\t\t\tto the on state.')
pSlot2BaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 57), BaudRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2BaudRate.setStatus('current')
if mibBuilder.loadTexts: pSlot2BaudRate.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Baud rate of the serial port.')
pSlot2DataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 58), DataBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2DataBits.setStatus('current')
if mibBuilder.loadTexts: pSlot2DataBits.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Number of data bit for the serial port.')
pSlot2Parity = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 59), Parity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2Parity.setStatus('current')
if mibBuilder.loadTexts: pSlot2Parity.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Parity of the serial port.')
pSlot2StopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 60), StopBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2StopBits.setStatus('current')
if mibBuilder.loadTexts: pSlot2StopBits.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Number of stop bits for the serial port.')
pSlot2Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 61), Protocol()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2Protocol.setStatus('current')
if mibBuilder.loadTexts: pSlot2Protocol.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Protocol the serial port is speaking.')
pSlot2SerialRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 62), SerialRTS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2SerialRTS.setStatus('current')
if mibBuilder.loadTexts: pSlot2SerialRTS.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Request To Send (RTS) setting for the serial port.')
pSlot2SerialCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 63), SerialCTS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2SerialCTS.setStatus('current')
if mibBuilder.loadTexts: pSlot2SerialCTS.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Clear To Send (CTS) setting for the serial port.')
pSlot2LiveDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 64), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot2LiveDescription.setStatus('current')
if mibBuilder.loadTexts: pSlot2LiveDescription.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - The current description of the alarm state.\n\t\t\t\tonboard-sensors - The description of  the current state of the onboard sensor\n\t\t\t\tanalog-Inputs - The description of  the current state of the analog input.\n\t\t\t\tanalog-Sensors - The description of  the current state of the sensor input.')
pSlot2LiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 65), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot2LiveLevel.setStatus('current')
if mibBuilder.loadTexts: pSlot2LiveLevel.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - The current level of the alarm.\n\t\t\t\tonboard-sensors - The level of the current state of the onboard sensor.\n\t\t\t\tanalog-Inputs - The level of the current state of the analog input.\n\t\t\t\tanalog-Sensors - The level of the current state of the sensor input.')
pSlot2LiveRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 66), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot2LiveRaw.setStatus('current')
if mibBuilder.loadTexts: pSlot2LiveRaw.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The current reading from the onboard sensor.  This value \n\t\t\t\twill always be between the threshold 0 and threshold 5 values.\n\t\t\t\tanalog-Inputs - The current reading from the analog input.  This value \n\t\t\t\twill always be between the threshold 0 and threshold 5 values.\n\t\t\t\tanalog-Sensors - The current reading from the sensor input.  This value \n\t\t\t\twill always be between the threshold 0 and threshold 5 values.')
pSlot2LiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 67), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot2LiveTime.setStatus('current')
if mibBuilder.loadTexts: pSlot2LiveTime.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - The time of the last change of state.\n\t\t\t\tonboard-sensors - The time of the last event.\n\t\t\t\tanalog-Inputs - The time of the last event.\n\t\t\t\tanalog-Sensors - The time of the last event.')
pSlot2Present = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 68), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot2Present.setStatus('current')
if mibBuilder.loadTexts: pSlot2Present.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - If set to true, the serial port exists.\n\t\t\t\tIf set to false the serial port does not exist.')
pSlot2OutputAutoPkg = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 71), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2OutputAutoPkg.setStatus('current')
if mibBuilder.loadTexts: pSlot2OutputAutoPkg.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-outputs - When this control point is opened, this is the package that the alarm\n\t\t\t\tpoint is located.')
pSlot2VoltageRange = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 72), VoltageRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot2VoltageRange.setStatus('current')
if mibBuilder.loadTexts: pSlot2VoltageRange.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The voltage range.\n\t\t\t\tanalog-Inputs - The voltage range.\n\t\t\t\tanalog-Sensors - The voltage range.')
pSlot2IPPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2IPPortNum.setStatus('current')
if mibBuilder.loadTexts: pSlot2IPPortNum.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - IP port number of the target device.')
pSlot2IOFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 75), IOFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot2IOFormat.setStatus('current')
if mibBuilder.loadTexts: pSlot2IOFormat.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - The io format of discrete inputs.\n\t\t\t\tdiscrete-outputs - The io format of discrete outputs.\n\t\t\t\tserial-ports - The io format of serial ports.\n\t\t\t\tonboard-sensors - The io format of onboard sensors.\n\t\t\t\tanalog-Inputs - The io format of analog inputs.\n\t\t\t\tanalog-Sensors - The io format of analog sensors.')
pSlot2PortType = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 76), PortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot2PortType.setStatus('current')
if mibBuilder.loadTexts: pSlot2PortType.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - The type of serial port.')
pSlot2TL1SID = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 116), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2TL1SID.setStatus('current')
if mibBuilder.loadTexts: pSlot2TL1SID.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tdiscrete-outputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot2TL1COND = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 117), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2TL1COND.setStatus('current')
if mibBuilder.loadTexts: pSlot2TL1COND.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tdiscrete-outputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot2TL1Eqpt = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 118), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2TL1Eqpt.setStatus('current')
if mibBuilder.loadTexts: pSlot2TL1Eqpt.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot2TL1Env = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 119), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2TL1Env.setStatus('current')
if mibBuilder.loadTexts: pSlot2TL1Env.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot2TL1Srveff = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 120), TL1Srveff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2TL1Srveff.setStatus('current')
if mibBuilder.loadTexts: pSlot2TL1Srveff.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot2TL1Locn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 121), TL1Locn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2TL1Locn.setStatus('current')
if mibBuilder.loadTexts: pSlot2TL1Locn.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot2TL1Dirn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 122), TL1Dirn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot2TL1Dirn.setStatus('current')
if mibBuilder.loadTexts: pSlot2TL1Dirn.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot2SensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 131), SensorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot2SensorType.setStatus('current')
if mibBuilder.loadTexts: pSlot2SensorType.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The type of sensor.\n\t\t\t\tanalog-Inputs - The type of sensor.\n\t\t\t\tanalog-Sensors - The type of sensor.')
pSlot2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 19, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot2Index.setStatus('current')
if mibBuilder.loadTexts: pSlot2Index.setDescription('Index.')
pSlot3Table = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20), )
if mibBuilder.loadTexts: pSlot3Table.setStatus('current')
if mibBuilder.loadTexts: pSlot3Table.setDescription('Table for configuration of Slot3')
pSlot3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pSlot3Index"))
if mibBuilder.loadTexts: pSlot3Entry.setStatus('current')
if mibBuilder.loadTexts: pSlot3Entry.setDescription('Entry for configuration table of Slot3')
pSlot3Description = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 3), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3Description.setStatus('current')
if mibBuilder.loadTexts: pSlot3Description.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Description of the alarm point.\n\t\t\t\tdiscrete-outputs - Description of the control point.\n\t\t\t\tserial-ports - Description of the serial port.\n\t\t\t\tonboard-sensors - Description of the onboard device.\n\t\t\t\tanalog-Inputs - Description of the analog input device.\n\t\t\t\tanalog-Sensors - Description of the sensor input device.')
pSlot3Desc0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 4), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3Desc0.setStatus('current')
if mibBuilder.loadTexts: pSlot3Desc0.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Description of the off state.\n\t\t\t\tdiscrete-outputs - Description when the control point is open.\n\t\t\t\tonboard-sensors - The description for values between threshold 0 and threshold 1.\n\t\t\t\tanalog-Inputs - The description for values between threshold 0 and threshold 1.\n\t\t\t\tanalog-Sensors - The description for values between threshold 0 and threshold 1.')
pSlot3Desc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 5), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3Desc1.setStatus('current')
if mibBuilder.loadTexts: pSlot3Desc1.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Description of the on state.\n\t\t\t\tdiscrete-outputs - Description when the control point is closed.\n\t\t\t\tonboard-sensors - The description for values between threshold 1 and threshold 2.\n\t\t\t\tanalog-Inputs - The description for values between threshold 1 and threshold 2.\n\t\t\t\tanalog-Sensors - The description for values between threshold 1 and threshold 2.')
pSlot3Desc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 6), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3Desc2.setStatus('current')
if mibBuilder.loadTexts: pSlot3Desc2.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The description for values between threshold 2 and threshold 3.\n\t\t\t\tanalog-Inputs - The description for values between threshold 2 and threshold 3.\n\t\t\t\tanalog-Sensors - The description for values between threshold 2 and threshold 3.')
pSlot3Desc3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 7), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3Desc3.setStatus('current')
if mibBuilder.loadTexts: pSlot3Desc3.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The description for values between threshold 3 and threshold 4.\n\t\t\t\tanalog-Inputs - The description for values between threshold 3 and threshold 4.\n\t\t\t\tanalog-Sensors - The description for values between threshold 3 and threshold 4.')
pSlot3Desc4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 8), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3Desc4.setStatus('current')
if mibBuilder.loadTexts: pSlot3Desc4.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The description for values between threshold 4 and threshold 5.\n\t\t\t\tanalog-Inputs - The description for values between threshold 4 and threshold 5.\n\t\t\t\tanalog-Sensors - The description for values between threshold 4 and threshold 5.')
pSlot3Desc5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 9), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3Desc5.setStatus('current')
if mibBuilder.loadTexts: pSlot3Desc5.setDescription('This field is used in the following card types:\n\t\t\t\tanalog-Inputs - Description for a communications failure to the sensor.\n\t\t\t\tanalog-Sensors - Description for a communications failure to the sensor.')
pSlot3Configured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3Configured.setStatus('current')
if mibBuilder.loadTexts: pSlot3Configured.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - If set to true, changes of state will be reported.\n\t\t\t\tIf set to false, not change of states will be reported.\n\t\t\t\tdiscrete-outputs - If set to true, the control point will operate.\n\t\t\t\tIf false, it will not operate.\n\t\t\t\tserial-ports - If set to true, this serial port will be usable.\n\t\t\t\tIf set to false the port will not be usable.\n\t\t\t\tonboard-sensors - If set to true, the onboard sensors will be used.\n\t\t\t\tIf set to false the will be ignored.\n\t\t\t\tanalog-Inputs - If set to true, the analog inputs will be usable.\n\t\t\t\tIf set to false the analog inputs will be ignored.\n\t\t\t\tanalog-Sensors - If set to true, the sensor inputs will be usable.\n\t\t\t\tIf set to false the sensor inputs will be ignored.')
pSlot3SendEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 11), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3SendEmail.setStatus('current')
if mibBuilder.loadTexts: pSlot3SendEmail.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - If set to true, an email will be sent on a change of state.\n\t\t\t\tIf false, no email will be sent.\n\t\t\t\tonboard-sensors - If set to true an email event will be set when a threshold is crossed.\n\t\t\t\tIf set to false no email event will be sent.\n\t\t\t\tanalog-Inputs - If set to true an email event will be set when a threshold is crossed.\n\t\t\t\tIf set to false no email event will be sent.\n\t\t\t\tanalog-Sensors - If set to true an email event will be set when a threshold is crossed.\n\t\t\t\tIf set to false no email event will be sent.')
pSlot3SendSNMPTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 12), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3SendSNMPTrap.setStatus('current')
if mibBuilder.loadTexts: pSlot3SendSNMPTrap.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - If set to true, an SNMP trap will be sent on a change of state.\n\t\t\t\tIf false, no SNMP trap will be sent.\n\t\t\t\tonboard-sensors - If set to true an SNMP trap will be set when a threshold is crossed.\n\t\t\t\tIf set to false no SNMP trap will be sent.\n\t\t\t\tanalog-Inputs - If set to true an SNMP trap will be set when a threshold is crossed.\n\t\t\t\tIf set to false no SNMP trap will be sent.\n\t\t\t\tanalog-Sensors - If set to true an SNMP trap will be set when a threshold is crossed.\n\t\t\t\tIf set to false no SNMP trap will be sent.')
pSlot3IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3IpAddress.setStatus('current')
if mibBuilder.loadTexts: pSlot3IpAddress.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - IP Address of the target device.')
pSlot3Level0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 17), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3Level0.setStatus('current')
if mibBuilder.loadTexts: pSlot3Level0.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Level of the off state.\n\t\t\t\tdiscrete-outputs - Level of the control point when open.\n\t\t\t\tonboard-sensors - The level for values between threshold 0 and threshold 1.\n\t\t\t\tanalog-Inputs - The level for values between threshold 0 and threshold 1.\n\t\t\t\tanalog-Sensors - The level for values between threshold 0 and threshold 1.')
pSlot3Level1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 18), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3Level1.setStatus('current')
if mibBuilder.loadTexts: pSlot3Level1.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Level of the on state.\n\t\t\t\tdiscrete-outputs - Level of the control point when closed.\n\t\t\t\tonboard-sensors - The level for values between threshold 1 and threshold 2.\n\t\t\t\tanalog-Inputs - The level for values between threshold 1 and threshold 2.\n\t\t\t\tanalog-Sensors - The level for values between threshold 1 and threshold 2.')
pSlot3Level2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 19), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3Level2.setStatus('current')
if mibBuilder.loadTexts: pSlot3Level2.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The level for values between threshold 2 and threshold 3.\n\t\t\t\tanalog-Inputs - The level for values between threshold 2 and threshold 3.\n\t\t\t\tanalog-Sensors - The level for values between threshold 2 and threshold 3.')
pSlot3Level3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 20), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3Level3.setStatus('current')
if mibBuilder.loadTexts: pSlot3Level3.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The level for values between threshold 3 and threshold 4.\n\t\t\t\tanalog-Inputs - The level for values between threshold 3 and threshold 4.\n\t\t\t\tanalog-Sensors - The level for values between threshold 3 and threshold 4.')
pSlot3Level4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 21), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3Level4.setStatus('current')
if mibBuilder.loadTexts: pSlot3Level4.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The level for values between threshold 4 and threshold 5.\n\t\t\t\tanalog-Inputs - The level for values between threshold 4 and threshold 5.\n\t\t\t\tanalog-Sensors - The level for values between threshold 4 and threshold 5.')
pSlot3Level5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 22), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3Level5.setStatus('current')
if mibBuilder.loadTexts: pSlot3Level5.setDescription('This field is used in the following card types:\n\t\t\t\tanalog-Inputs - Level of a communications failure to the sensor.\n\t\t\t\tanalog-Sensors - Level of a communications failure to the sensor.')
pSlot3ReadPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3ReadPeriod.setStatus('current')
if mibBuilder.loadTexts: pSlot3ReadPeriod.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Inactivity timeout (in minutes).')
pSlot3Thresh0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 28), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot3Thresh0.setStatus('current')
if mibBuilder.loadTexts: pSlot3Thresh0.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the minimun analog value.\n\t\t\t\tanalog-Inputs - This is the maximum analog value.\n\t\t\t\tanalog-Sensors - This is the maximum analog value.')
pSlot3Thresh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 29), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3Thresh1.setStatus('current')
if mibBuilder.loadTexts: pSlot3Thresh1.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the first threshold value.\n\t\t\t\tanalog-Inputs - This is the first threshold value.\n\t\t\t\tanalog-Sensors - This is the first threshold value.')
pSlot3Thresh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 30), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3Thresh2.setStatus('current')
if mibBuilder.loadTexts: pSlot3Thresh2.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the second threshold value.\n\t\t\t\tanalog-Inputs - This is the second threshold value.\n\t\t\t\tanalog-Sensors - This is the second threshold value.')
pSlot3Thresh3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 31), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3Thresh3.setStatus('current')
if mibBuilder.loadTexts: pSlot3Thresh3.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the third threshold value.\n\t\t\t\tanalog-Inputs - This is the third threshold value.\n\t\t\t\tanalog-Sensors - This is the third threshold value.')
pSlot3Thresh4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 32), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3Thresh4.setStatus('current')
if mibBuilder.loadTexts: pSlot3Thresh4.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the fourth threshold value.\n\t\t\t\tanalog-Inputs - This is the fourth threshold value.\n\t\t\t\tanalog-Sensors - This is the fourth threshold value.')
pSlot3Thresh5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 33), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot3Thresh5.setStatus('current')
if mibBuilder.loadTexts: pSlot3Thresh5.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the maximum threshold value.\n\t\t\t\tanalog-Inputs - This is the minimum threshold value.\n\t\t\t\tanalog-Sensors - This is the minimum threshold value.')
pSlot3ContactStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 44), ContactStyle()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3ContactStyle.setStatus('current')
if mibBuilder.loadTexts: pSlot3ContactStyle.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Determines the type of contact.')
pSlot3Units = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 46), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot3Units.setStatus('current')
if mibBuilder.loadTexts: pSlot3Units.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - Description of the units of measurement.\n\t\t\t\tanalog-Inputs - Description of the units of measurement.\n\t\t\t\tanalog-Sensors - Description of the units of measurement.')
pSlot3OutputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 47), OutputMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3OutputMode.setStatus('current')
if mibBuilder.loadTexts: pSlot3OutputMode.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-outputs - Defines the different ways a control point can be activated.')
pSlot3OutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 48), OutputState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3OutputState.setStatus('current')
if mibBuilder.loadTexts: pSlot3OutputState.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-outputs - A value of 0 will open the control point.\n\t\t\t\tA value of 1 will close the control point.')
pSlot3OutputAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3OutputAuto.setStatus('current')
if mibBuilder.loadTexts: pSlot3OutputAuto.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-outputs - When this control point is opened, this alarm point will change state \n\t\t\t\tto the on state.')
pSlot3BaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 57), BaudRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3BaudRate.setStatus('current')
if mibBuilder.loadTexts: pSlot3BaudRate.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Baud rate of the serial port.')
pSlot3DataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 58), DataBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3DataBits.setStatus('current')
if mibBuilder.loadTexts: pSlot3DataBits.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Number of data bit for the serial port.')
pSlot3Parity = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 59), Parity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3Parity.setStatus('current')
if mibBuilder.loadTexts: pSlot3Parity.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Parity of the serial port.')
pSlot3StopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 60), StopBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3StopBits.setStatus('current')
if mibBuilder.loadTexts: pSlot3StopBits.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Number of stop bits for the serial port.')
pSlot3Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 61), Protocol()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3Protocol.setStatus('current')
if mibBuilder.loadTexts: pSlot3Protocol.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Protocol the serial port is speaking.')
pSlot3SerialRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 62), SerialRTS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3SerialRTS.setStatus('current')
if mibBuilder.loadTexts: pSlot3SerialRTS.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Request To Send (RTS) setting for the serial port.')
pSlot3SerialCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 63), SerialCTS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3SerialCTS.setStatus('current')
if mibBuilder.loadTexts: pSlot3SerialCTS.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Clear To Send (CTS) setting for the serial port.')
pSlot3LiveDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 64), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot3LiveDescription.setStatus('current')
if mibBuilder.loadTexts: pSlot3LiveDescription.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - The current description of the alarm state.\n\t\t\t\tonboard-sensors - The description of  the current state of the onboard sensor\n\t\t\t\tanalog-Inputs - The description of  the current state of the analog input.\n\t\t\t\tanalog-Sensors - The description of  the current state of the sensor input.')
pSlot3LiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 65), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot3LiveLevel.setStatus('current')
if mibBuilder.loadTexts: pSlot3LiveLevel.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - The current level of the alarm.\n\t\t\t\tonboard-sensors - The level of the current state of the onboard sensor.\n\t\t\t\tanalog-Inputs - The level of the current state of the analog input.\n\t\t\t\tanalog-Sensors - The level of the current state of the sensor input.')
pSlot3LiveRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 66), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot3LiveRaw.setStatus('current')
if mibBuilder.loadTexts: pSlot3LiveRaw.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The current reading from the onboard sensor.  This value \n\t\t\t\twill always be between the threshold 0 and threshold 5 values.\n\t\t\t\tanalog-Inputs - The current reading from the analog input.  This value \n\t\t\t\twill always be between the threshold 0 and threshold 5 values.\n\t\t\t\tanalog-Sensors - The current reading from the sensor input.  This value \n\t\t\t\twill always be between the threshold 0 and threshold 5 values.')
pSlot3LiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 67), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot3LiveTime.setStatus('current')
if mibBuilder.loadTexts: pSlot3LiveTime.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - The time of the last change of state.\n\t\t\t\tonboard-sensors - The time of the last event.\n\t\t\t\tanalog-Inputs - The time of the last event.\n\t\t\t\tanalog-Sensors - The time of the last event.')
pSlot3Present = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 68), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot3Present.setStatus('current')
if mibBuilder.loadTexts: pSlot3Present.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - If set to true, the serial port exists.\n\t\t\t\tIf set to false the serial port does not exist.')
pSlot3OutputAutoPkg = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 71), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3OutputAutoPkg.setStatus('current')
if mibBuilder.loadTexts: pSlot3OutputAutoPkg.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-outputs - When this control point is opened, this is the package that the alarm\n\t\t\t\tpoint is located.')
pSlot3VoltageRange = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 72), VoltageRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot3VoltageRange.setStatus('current')
if mibBuilder.loadTexts: pSlot3VoltageRange.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The voltage range.\n\t\t\t\tanalog-Inputs - The voltage range.\n\t\t\t\tanalog-Sensors - The voltage range.')
pSlot3IPPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3IPPortNum.setStatus('current')
if mibBuilder.loadTexts: pSlot3IPPortNum.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - IP port number of the target device.')
pSlot3IOFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 75), IOFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot3IOFormat.setStatus('current')
if mibBuilder.loadTexts: pSlot3IOFormat.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - The io format of discrete inputs.\n\t\t\t\tdiscrete-outputs - The io format of discrete outputs.\n\t\t\t\tserial-ports - The io format of serial ports.\n\t\t\t\tonboard-sensors - The io format of onboard sensors.\n\t\t\t\tanalog-Inputs - The io format of analog inputs.\n\t\t\t\tanalog-Sensors - The io format of analog sensors.')
pSlot3PortType = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 76), PortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot3PortType.setStatus('current')
if mibBuilder.loadTexts: pSlot3PortType.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - The type of serial port.')
pSlot3TL1SID = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 116), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3TL1SID.setStatus('current')
if mibBuilder.loadTexts: pSlot3TL1SID.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tdiscrete-outputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot3TL1COND = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 117), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3TL1COND.setStatus('current')
if mibBuilder.loadTexts: pSlot3TL1COND.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tdiscrete-outputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot3TL1Eqpt = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 118), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3TL1Eqpt.setStatus('current')
if mibBuilder.loadTexts: pSlot3TL1Eqpt.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot3TL1Env = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 119), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3TL1Env.setStatus('current')
if mibBuilder.loadTexts: pSlot3TL1Env.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot3TL1Srveff = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 120), TL1Srveff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3TL1Srveff.setStatus('current')
if mibBuilder.loadTexts: pSlot3TL1Srveff.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot3TL1Locn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 121), TL1Locn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3TL1Locn.setStatus('current')
if mibBuilder.loadTexts: pSlot3TL1Locn.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot3TL1Dirn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 122), TL1Dirn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot3TL1Dirn.setStatus('current')
if mibBuilder.loadTexts: pSlot3TL1Dirn.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot3SensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 131), SensorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot3SensorType.setStatus('current')
if mibBuilder.loadTexts: pSlot3SensorType.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The type of sensor.\n\t\t\t\tanalog-Inputs - The type of sensor.\n\t\t\t\tanalog-Sensors - The type of sensor.')
pSlot3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 20, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot3Index.setStatus('current')
if mibBuilder.loadTexts: pSlot3Index.setDescription('Index.')
pSlot4Table = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21), )
if mibBuilder.loadTexts: pSlot4Table.setStatus('current')
if mibBuilder.loadTexts: pSlot4Table.setDescription('Table for configuration of Slot4')
pSlot4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pSlot4Index"))
if mibBuilder.loadTexts: pSlot4Entry.setStatus('current')
if mibBuilder.loadTexts: pSlot4Entry.setDescription('Entry for configuration table of Slot4')
pSlot4Description = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 3), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4Description.setStatus('current')
if mibBuilder.loadTexts: pSlot4Description.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Description of the alarm point.\n\t\t\t\tdiscrete-outputs - Description of the control point.\n\t\t\t\tserial-ports - Description of the serial port.\n\t\t\t\tonboard-sensors - Description of the onboard device.\n\t\t\t\tanalog-Inputs - Description of the analog input device.\n\t\t\t\tanalog-Sensors - Description of the sensor input device.')
pSlot4Desc0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 4), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4Desc0.setStatus('current')
if mibBuilder.loadTexts: pSlot4Desc0.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Description of the off state.\n\t\t\t\tdiscrete-outputs - Description when the control point is open.\n\t\t\t\tonboard-sensors - The description for values between threshold 0 and threshold 1.\n\t\t\t\tanalog-Inputs - The description for values between threshold 0 and threshold 1.\n\t\t\t\tanalog-Sensors - The description for values between threshold 0 and threshold 1.')
pSlot4Desc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 5), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4Desc1.setStatus('current')
if mibBuilder.loadTexts: pSlot4Desc1.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Description of the on state.\n\t\t\t\tdiscrete-outputs - Description when the control point is closed.\n\t\t\t\tonboard-sensors - The description for values between threshold 1 and threshold 2.\n\t\t\t\tanalog-Inputs - The description for values between threshold 1 and threshold 2.\n\t\t\t\tanalog-Sensors - The description for values between threshold 1 and threshold 2.')
pSlot4Desc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 6), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4Desc2.setStatus('current')
if mibBuilder.loadTexts: pSlot4Desc2.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The description for values between threshold 2 and threshold 3.\n\t\t\t\tanalog-Inputs - The description for values between threshold 2 and threshold 3.\n\t\t\t\tanalog-Sensors - The description for values between threshold 2 and threshold 3.')
pSlot4Desc3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 7), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4Desc3.setStatus('current')
if mibBuilder.loadTexts: pSlot4Desc3.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The description for values between threshold 3 and threshold 4.\n\t\t\t\tanalog-Inputs - The description for values between threshold 3 and threshold 4.\n\t\t\t\tanalog-Sensors - The description for values between threshold 3 and threshold 4.')
pSlot4Desc4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 8), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4Desc4.setStatus('current')
if mibBuilder.loadTexts: pSlot4Desc4.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The description for values between threshold 4 and threshold 5.\n\t\t\t\tanalog-Inputs - The description for values between threshold 4 and threshold 5.\n\t\t\t\tanalog-Sensors - The description for values between threshold 4 and threshold 5.')
pSlot4Desc5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 9), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4Desc5.setStatus('current')
if mibBuilder.loadTexts: pSlot4Desc5.setDescription('This field is used in the following card types:\n\t\t\t\tanalog-Inputs - Description for a communications failure to the sensor.\n\t\t\t\tanalog-Sensors - Description for a communications failure to the sensor.')
pSlot4Configured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4Configured.setStatus('current')
if mibBuilder.loadTexts: pSlot4Configured.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - If set to true, changes of state will be reported.\n\t\t\t\tIf set to false, not change of states will be reported.\n\t\t\t\tdiscrete-outputs - If set to true, the control point will operate.\n\t\t\t\tIf false, it will not operate.\n\t\t\t\tserial-ports - If set to true, this serial port will be usable.\n\t\t\t\tIf set to false the port will not be usable.\n\t\t\t\tonboard-sensors - If set to true, the onboard sensors will be used.\n\t\t\t\tIf set to false the will be ignored.\n\t\t\t\tanalog-Inputs - If set to true, the analog inputs will be usable.\n\t\t\t\tIf set to false the analog inputs will be ignored.\n\t\t\t\tanalog-Sensors - If set to true, the sensor inputs will be usable.\n\t\t\t\tIf set to false the sensor inputs will be ignored.')
pSlot4SendEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 11), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4SendEmail.setStatus('current')
if mibBuilder.loadTexts: pSlot4SendEmail.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - If set to true, an email will be sent on a change of state.\n\t\t\t\tIf false, no email will be sent.\n\t\t\t\tonboard-sensors - If set to true an email event will be set when a threshold is crossed.\n\t\t\t\tIf set to false no email event will be sent.\n\t\t\t\tanalog-Inputs - If set to true an email event will be set when a threshold is crossed.\n\t\t\t\tIf set to false no email event will be sent.\n\t\t\t\tanalog-Sensors - If set to true an email event will be set when a threshold is crossed.\n\t\t\t\tIf set to false no email event will be sent.')
pSlot4SendSNMPTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 12), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4SendSNMPTrap.setStatus('current')
if mibBuilder.loadTexts: pSlot4SendSNMPTrap.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - If set to true, an SNMP trap will be sent on a change of state.\n\t\t\t\tIf false, no SNMP trap will be sent.\n\t\t\t\tonboard-sensors - If set to true an SNMP trap will be set when a threshold is crossed.\n\t\t\t\tIf set to false no SNMP trap will be sent.\n\t\t\t\tanalog-Inputs - If set to true an SNMP trap will be set when a threshold is crossed.\n\t\t\t\tIf set to false no SNMP trap will be sent.\n\t\t\t\tanalog-Sensors - If set to true an SNMP trap will be set when a threshold is crossed.\n\t\t\t\tIf set to false no SNMP trap will be sent.')
pSlot4IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4IpAddress.setStatus('current')
if mibBuilder.loadTexts: pSlot4IpAddress.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - IP Address of the target device.')
pSlot4Level0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 17), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4Level0.setStatus('current')
if mibBuilder.loadTexts: pSlot4Level0.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Level of the off state.\n\t\t\t\tdiscrete-outputs - Level of the control point when open.\n\t\t\t\tonboard-sensors - The level for values between threshold 0 and threshold 1.\n\t\t\t\tanalog-Inputs - The level for values between threshold 0 and threshold 1.\n\t\t\t\tanalog-Sensors - The level for values between threshold 0 and threshold 1.')
pSlot4Level1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 18), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4Level1.setStatus('current')
if mibBuilder.loadTexts: pSlot4Level1.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Level of the on state.\n\t\t\t\tdiscrete-outputs - Level of the control point when closed.\n\t\t\t\tonboard-sensors - The level for values between threshold 1 and threshold 2.\n\t\t\t\tanalog-Inputs - The level for values between threshold 1 and threshold 2.\n\t\t\t\tanalog-Sensors - The level for values between threshold 1 and threshold 2.')
pSlot4Level2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 19), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4Level2.setStatus('current')
if mibBuilder.loadTexts: pSlot4Level2.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The level for values between threshold 2 and threshold 3.\n\t\t\t\tanalog-Inputs - The level for values between threshold 2 and threshold 3.\n\t\t\t\tanalog-Sensors - The level for values between threshold 2 and threshold 3.')
pSlot4Level3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 20), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4Level3.setStatus('current')
if mibBuilder.loadTexts: pSlot4Level3.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The level for values between threshold 3 and threshold 4.\n\t\t\t\tanalog-Inputs - The level for values between threshold 3 and threshold 4.\n\t\t\t\tanalog-Sensors - The level for values between threshold 3 and threshold 4.')
pSlot4Level4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 21), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4Level4.setStatus('current')
if mibBuilder.loadTexts: pSlot4Level4.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The level for values between threshold 4 and threshold 5.\n\t\t\t\tanalog-Inputs - The level for values between threshold 4 and threshold 5.\n\t\t\t\tanalog-Sensors - The level for values between threshold 4 and threshold 5.')
pSlot4Level5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 22), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4Level5.setStatus('current')
if mibBuilder.loadTexts: pSlot4Level5.setDescription('This field is used in the following card types:\n\t\t\t\tanalog-Inputs - Level of a communications failure to the sensor.\n\t\t\t\tanalog-Sensors - Level of a communications failure to the sensor.')
pSlot4ReadPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4ReadPeriod.setStatus('current')
if mibBuilder.loadTexts: pSlot4ReadPeriod.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Inactivity timeout (in minutes).')
pSlot4Thresh0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 28), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot4Thresh0.setStatus('current')
if mibBuilder.loadTexts: pSlot4Thresh0.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the minimun analog value.\n\t\t\t\tanalog-Inputs - This is the maximum analog value.\n\t\t\t\tanalog-Sensors - This is the maximum analog value.')
pSlot4Thresh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 29), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4Thresh1.setStatus('current')
if mibBuilder.loadTexts: pSlot4Thresh1.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the first threshold value.\n\t\t\t\tanalog-Inputs - This is the first threshold value.\n\t\t\t\tanalog-Sensors - This is the first threshold value.')
pSlot4Thresh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 30), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4Thresh2.setStatus('current')
if mibBuilder.loadTexts: pSlot4Thresh2.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the second threshold value.\n\t\t\t\tanalog-Inputs - This is the second threshold value.\n\t\t\t\tanalog-Sensors - This is the second threshold value.')
pSlot4Thresh3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 31), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4Thresh3.setStatus('current')
if mibBuilder.loadTexts: pSlot4Thresh3.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the third threshold value.\n\t\t\t\tanalog-Inputs - This is the third threshold value.\n\t\t\t\tanalog-Sensors - This is the third threshold value.')
pSlot4Thresh4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 32), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4Thresh4.setStatus('current')
if mibBuilder.loadTexts: pSlot4Thresh4.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the fourth threshold value.\n\t\t\t\tanalog-Inputs - This is the fourth threshold value.\n\t\t\t\tanalog-Sensors - This is the fourth threshold value.')
pSlot4Thresh5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 33), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot4Thresh5.setStatus('current')
if mibBuilder.loadTexts: pSlot4Thresh5.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the maximum threshold value.\n\t\t\t\tanalog-Inputs - This is the minimum threshold value.\n\t\t\t\tanalog-Sensors - This is the minimum threshold value.')
pSlot4ContactStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 44), ContactStyle()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4ContactStyle.setStatus('current')
if mibBuilder.loadTexts: pSlot4ContactStyle.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Determines the type of contact.')
pSlot4Units = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 46), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot4Units.setStatus('current')
if mibBuilder.loadTexts: pSlot4Units.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - Description of the units of measurement.\n\t\t\t\tanalog-Inputs - Description of the units of measurement.\n\t\t\t\tanalog-Sensors - Description of the units of measurement.')
pSlot4OutputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 47), OutputMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4OutputMode.setStatus('current')
if mibBuilder.loadTexts: pSlot4OutputMode.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-outputs - Defines the different ways a control point can be activated.')
pSlot4OutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 48), OutputState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4OutputState.setStatus('current')
if mibBuilder.loadTexts: pSlot4OutputState.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-outputs - A value of 0 will open the control point.\n\t\t\t\tA value of 1 will close the control point.')
pSlot4OutputAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4OutputAuto.setStatus('current')
if mibBuilder.loadTexts: pSlot4OutputAuto.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-outputs - When this control point is opened, this alarm point will change state \n\t\t\t\tto the on state.')
pSlot4BaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 57), BaudRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4BaudRate.setStatus('current')
if mibBuilder.loadTexts: pSlot4BaudRate.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Baud rate of the serial port.')
pSlot4DataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 58), DataBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4DataBits.setStatus('current')
if mibBuilder.loadTexts: pSlot4DataBits.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Number of data bit for the serial port.')
pSlot4Parity = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 59), Parity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4Parity.setStatus('current')
if mibBuilder.loadTexts: pSlot4Parity.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Parity of the serial port.')
pSlot4StopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 60), StopBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4StopBits.setStatus('current')
if mibBuilder.loadTexts: pSlot4StopBits.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Number of stop bits for the serial port.')
pSlot4Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 61), Protocol()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4Protocol.setStatus('current')
if mibBuilder.loadTexts: pSlot4Protocol.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Protocol the serial port is speaking.')
pSlot4SerialRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 62), SerialRTS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4SerialRTS.setStatus('current')
if mibBuilder.loadTexts: pSlot4SerialRTS.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Request To Send (RTS) setting for the serial port.')
pSlot4SerialCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 63), SerialCTS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4SerialCTS.setStatus('current')
if mibBuilder.loadTexts: pSlot4SerialCTS.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Clear To Send (CTS) setting for the serial port.')
pSlot4LiveDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 64), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot4LiveDescription.setStatus('current')
if mibBuilder.loadTexts: pSlot4LiveDescription.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - The current description of the alarm state.\n\t\t\t\tonboard-sensors - The description of  the current state of the onboard sensor\n\t\t\t\tanalog-Inputs - The description of  the current state of the analog input.\n\t\t\t\tanalog-Sensors - The description of  the current state of the sensor input.')
pSlot4LiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 65), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot4LiveLevel.setStatus('current')
if mibBuilder.loadTexts: pSlot4LiveLevel.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - The current level of the alarm.\n\t\t\t\tonboard-sensors - The level of the current state of the onboard sensor.\n\t\t\t\tanalog-Inputs - The level of the current state of the analog input.\n\t\t\t\tanalog-Sensors - The level of the current state of the sensor input.')
pSlot4LiveRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 66), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot4LiveRaw.setStatus('current')
if mibBuilder.loadTexts: pSlot4LiveRaw.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The current reading from the onboard sensor.  This value \n\t\t\t\twill always be between the threshold 0 and threshold 5 values.\n\t\t\t\tanalog-Inputs - The current reading from the analog input.  This value \n\t\t\t\twill always be between the threshold 0 and threshold 5 values.\n\t\t\t\tanalog-Sensors - The current reading from the sensor input.  This value \n\t\t\t\twill always be between the threshold 0 and threshold 5 values.')
pSlot4LiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 67), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot4LiveTime.setStatus('current')
if mibBuilder.loadTexts: pSlot4LiveTime.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - The time of the last change of state.\n\t\t\t\tonboard-sensors - The time of the last event.\n\t\t\t\tanalog-Inputs - The time of the last event.\n\t\t\t\tanalog-Sensors - The time of the last event.')
pSlot4Present = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 68), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot4Present.setStatus('current')
if mibBuilder.loadTexts: pSlot4Present.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - If set to true, the serial port exists.\n\t\t\t\tIf set to false the serial port does not exist.')
pSlot4OutputAutoPkg = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 71), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4OutputAutoPkg.setStatus('current')
if mibBuilder.loadTexts: pSlot4OutputAutoPkg.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-outputs - When this control point is opened, this is the package that the alarm\n\t\t\t\tpoint is located.')
pSlot4VoltageRange = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 72), VoltageRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot4VoltageRange.setStatus('current')
if mibBuilder.loadTexts: pSlot4VoltageRange.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The voltage range.\n\t\t\t\tanalog-Inputs - The voltage range.\n\t\t\t\tanalog-Sensors - The voltage range.')
pSlot4IPPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4IPPortNum.setStatus('current')
if mibBuilder.loadTexts: pSlot4IPPortNum.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - IP port number of the target device.')
pSlot4IOFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 75), IOFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot4IOFormat.setStatus('current')
if mibBuilder.loadTexts: pSlot4IOFormat.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - The io format of discrete inputs.\n\t\t\t\tdiscrete-outputs - The io format of discrete outputs.\n\t\t\t\tserial-ports - The io format of serial ports.\n\t\t\t\tonboard-sensors - The io format of onboard sensors.\n\t\t\t\tanalog-Inputs - The io format of analog inputs.\n\t\t\t\tanalog-Sensors - The io format of analog sensors.')
pSlot4PortType = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 76), PortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot4PortType.setStatus('current')
if mibBuilder.loadTexts: pSlot4PortType.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - The type of serial port.')
pSlot4TL1SID = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 116), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4TL1SID.setStatus('current')
if mibBuilder.loadTexts: pSlot4TL1SID.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tdiscrete-outputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot4TL1COND = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 117), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4TL1COND.setStatus('current')
if mibBuilder.loadTexts: pSlot4TL1COND.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tdiscrete-outputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot4TL1Eqpt = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 118), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4TL1Eqpt.setStatus('current')
if mibBuilder.loadTexts: pSlot4TL1Eqpt.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot4TL1Env = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 119), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4TL1Env.setStatus('current')
if mibBuilder.loadTexts: pSlot4TL1Env.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot4TL1Srveff = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 120), TL1Srveff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4TL1Srveff.setStatus('current')
if mibBuilder.loadTexts: pSlot4TL1Srveff.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot4TL1Locn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 121), TL1Locn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4TL1Locn.setStatus('current')
if mibBuilder.loadTexts: pSlot4TL1Locn.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot4TL1Dirn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 122), TL1Dirn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot4TL1Dirn.setStatus('current')
if mibBuilder.loadTexts: pSlot4TL1Dirn.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot4SensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 131), SensorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot4SensorType.setStatus('current')
if mibBuilder.loadTexts: pSlot4SensorType.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The type of sensor.\n\t\t\t\tanalog-Inputs - The type of sensor.\n\t\t\t\tanalog-Sensors - The type of sensor.')
pSlot4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 21, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot4Index.setStatus('current')
if mibBuilder.loadTexts: pSlot4Index.setDescription('Index.')
pSlot5Table = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22), )
if mibBuilder.loadTexts: pSlot5Table.setStatus('current')
if mibBuilder.loadTexts: pSlot5Table.setDescription('Table for configuration of Slot5')
pSlot5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pSlot5Index"))
if mibBuilder.loadTexts: pSlot5Entry.setStatus('current')
if mibBuilder.loadTexts: pSlot5Entry.setDescription('Entry for configuration table of Slot5')
pSlot5Description = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 3), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5Description.setStatus('current')
if mibBuilder.loadTexts: pSlot5Description.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Description of the alarm point.\n\t\t\t\tdiscrete-outputs - Description of the control point.\n\t\t\t\tserial-ports - Description of the serial port.\n\t\t\t\tonboard-sensors - Description of the onboard device.\n\t\t\t\tanalog-Inputs - Description of the analog input device.\n\t\t\t\tanalog-Sensors - Description of the sensor input device.')
pSlot5Desc0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 4), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5Desc0.setStatus('current')
if mibBuilder.loadTexts: pSlot5Desc0.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Description of the off state.\n\t\t\t\tdiscrete-outputs - Description when the control point is open.\n\t\t\t\tonboard-sensors - The description for values between threshold 0 and threshold 1.\n\t\t\t\tanalog-Inputs - The description for values between threshold 0 and threshold 1.\n\t\t\t\tanalog-Sensors - The description for values between threshold 0 and threshold 1.')
pSlot5Desc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 5), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5Desc1.setStatus('current')
if mibBuilder.loadTexts: pSlot5Desc1.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Description of the on state.\n\t\t\t\tdiscrete-outputs - Description when the control point is closed.\n\t\t\t\tonboard-sensors - The description for values between threshold 1 and threshold 2.\n\t\t\t\tanalog-Inputs - The description for values between threshold 1 and threshold 2.\n\t\t\t\tanalog-Sensors - The description for values between threshold 1 and threshold 2.')
pSlot5Desc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 6), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5Desc2.setStatus('current')
if mibBuilder.loadTexts: pSlot5Desc2.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The description for values between threshold 2 and threshold 3.\n\t\t\t\tanalog-Inputs - The description for values between threshold 2 and threshold 3.\n\t\t\t\tanalog-Sensors - The description for values between threshold 2 and threshold 3.')
pSlot5Desc3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 7), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5Desc3.setStatus('current')
if mibBuilder.loadTexts: pSlot5Desc3.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The description for values between threshold 3 and threshold 4.\n\t\t\t\tanalog-Inputs - The description for values between threshold 3 and threshold 4.\n\t\t\t\tanalog-Sensors - The description for values between threshold 3 and threshold 4.')
pSlot5Desc4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 8), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5Desc4.setStatus('current')
if mibBuilder.loadTexts: pSlot5Desc4.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The description for values between threshold 4 and threshold 5.\n\t\t\t\tanalog-Inputs - The description for values between threshold 4 and threshold 5.\n\t\t\t\tanalog-Sensors - The description for values between threshold 4 and threshold 5.')
pSlot5Desc5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 9), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5Desc5.setStatus('current')
if mibBuilder.loadTexts: pSlot5Desc5.setDescription('This field is used in the following card types:\n\t\t\t\tanalog-Inputs - Description for a communications failure to the sensor.\n\t\t\t\tanalog-Sensors - Description for a communications failure to the sensor.')
pSlot5Configured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5Configured.setStatus('current')
if mibBuilder.loadTexts: pSlot5Configured.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - If set to true, changes of state will be reported.\n\t\t\t\tIf set to false, not change of states will be reported.\n\t\t\t\tdiscrete-outputs - If set to true, the control point will operate.\n\t\t\t\tIf false, it will not operate.\n\t\t\t\tserial-ports - If set to true, this serial port will be usable.\n\t\t\t\tIf set to false the port will not be usable.\n\t\t\t\tonboard-sensors - If set to true, the onboard sensors will be used.\n\t\t\t\tIf set to false the will be ignored.\n\t\t\t\tanalog-Inputs - If set to true, the analog inputs will be usable.\n\t\t\t\tIf set to false the analog inputs will be ignored.\n\t\t\t\tanalog-Sensors - If set to true, the sensor inputs will be usable.\n\t\t\t\tIf set to false the sensor inputs will be ignored.')
pSlot5SendEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 11), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5SendEmail.setStatus('current')
if mibBuilder.loadTexts: pSlot5SendEmail.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - If set to true, an email will be sent on a change of state.\n\t\t\t\tIf false, no email will be sent.\n\t\t\t\tonboard-sensors - If set to true an email event will be set when a threshold is crossed.\n\t\t\t\tIf set to false no email event will be sent.\n\t\t\t\tanalog-Inputs - If set to true an email event will be set when a threshold is crossed.\n\t\t\t\tIf set to false no email event will be sent.\n\t\t\t\tanalog-Sensors - If set to true an email event will be set when a threshold is crossed.\n\t\t\t\tIf set to false no email event will be sent.')
pSlot5SendSNMPTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 12), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5SendSNMPTrap.setStatus('current')
if mibBuilder.loadTexts: pSlot5SendSNMPTrap.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - If set to true, an SNMP trap will be sent on a change of state.\n\t\t\t\tIf false, no SNMP trap will be sent.\n\t\t\t\tonboard-sensors - If set to true an SNMP trap will be set when a threshold is crossed.\n\t\t\t\tIf set to false no SNMP trap will be sent.\n\t\t\t\tanalog-Inputs - If set to true an SNMP trap will be set when a threshold is crossed.\n\t\t\t\tIf set to false no SNMP trap will be sent.\n\t\t\t\tanalog-Sensors - If set to true an SNMP trap will be set when a threshold is crossed.\n\t\t\t\tIf set to false no SNMP trap will be sent.')
pSlot5IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5IpAddress.setStatus('current')
if mibBuilder.loadTexts: pSlot5IpAddress.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - IP Address of the target device.')
pSlot5Level0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 17), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5Level0.setStatus('current')
if mibBuilder.loadTexts: pSlot5Level0.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Level of the off state.\n\t\t\t\tdiscrete-outputs - Level of the control point when open.\n\t\t\t\tonboard-sensors - The level for values between threshold 0 and threshold 1.\n\t\t\t\tanalog-Inputs - The level for values between threshold 0 and threshold 1.\n\t\t\t\tanalog-Sensors - The level for values between threshold 0 and threshold 1.')
pSlot5Level1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 18), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5Level1.setStatus('current')
if mibBuilder.loadTexts: pSlot5Level1.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Level of the on state.\n\t\t\t\tdiscrete-outputs - Level of the control point when closed.\n\t\t\t\tonboard-sensors - The level for values between threshold 1 and threshold 2.\n\t\t\t\tanalog-Inputs - The level for values between threshold 1 and threshold 2.\n\t\t\t\tanalog-Sensors - The level for values between threshold 1 and threshold 2.')
pSlot5Level2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 19), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5Level2.setStatus('current')
if mibBuilder.loadTexts: pSlot5Level2.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The level for values between threshold 2 and threshold 3.\n\t\t\t\tanalog-Inputs - The level for values between threshold 2 and threshold 3.\n\t\t\t\tanalog-Sensors - The level for values between threshold 2 and threshold 3.')
pSlot5Level3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 20), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5Level3.setStatus('current')
if mibBuilder.loadTexts: pSlot5Level3.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The level for values between threshold 3 and threshold 4.\n\t\t\t\tanalog-Inputs - The level for values between threshold 3 and threshold 4.\n\t\t\t\tanalog-Sensors - The level for values between threshold 3 and threshold 4.')
pSlot5Level4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 21), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5Level4.setStatus('current')
if mibBuilder.loadTexts: pSlot5Level4.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The level for values between threshold 4 and threshold 5.\n\t\t\t\tanalog-Inputs - The level for values between threshold 4 and threshold 5.\n\t\t\t\tanalog-Sensors - The level for values between threshold 4 and threshold 5.')
pSlot5Level5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 22), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5Level5.setStatus('current')
if mibBuilder.loadTexts: pSlot5Level5.setDescription('This field is used in the following card types:\n\t\t\t\tanalog-Inputs - Level of a communications failure to the sensor.\n\t\t\t\tanalog-Sensors - Level of a communications failure to the sensor.')
pSlot5ReadPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5ReadPeriod.setStatus('current')
if mibBuilder.loadTexts: pSlot5ReadPeriod.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Inactivity timeout (in minutes).')
pSlot5Thresh0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 28), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot5Thresh0.setStatus('current')
if mibBuilder.loadTexts: pSlot5Thresh0.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the minimun analog value.\n\t\t\t\tanalog-Inputs - This is the maximum analog value.\n\t\t\t\tanalog-Sensors - This is the maximum analog value.')
pSlot5Thresh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 29), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5Thresh1.setStatus('current')
if mibBuilder.loadTexts: pSlot5Thresh1.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the first threshold value.\n\t\t\t\tanalog-Inputs - This is the first threshold value.\n\t\t\t\tanalog-Sensors - This is the first threshold value.')
pSlot5Thresh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 30), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5Thresh2.setStatus('current')
if mibBuilder.loadTexts: pSlot5Thresh2.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the second threshold value.\n\t\t\t\tanalog-Inputs - This is the second threshold value.\n\t\t\t\tanalog-Sensors - This is the second threshold value.')
pSlot5Thresh3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 31), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5Thresh3.setStatus('current')
if mibBuilder.loadTexts: pSlot5Thresh3.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the third threshold value.\n\t\t\t\tanalog-Inputs - This is the third threshold value.\n\t\t\t\tanalog-Sensors - This is the third threshold value.')
pSlot5Thresh4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 32), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5Thresh4.setStatus('current')
if mibBuilder.loadTexts: pSlot5Thresh4.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the fourth threshold value.\n\t\t\t\tanalog-Inputs - This is the fourth threshold value.\n\t\t\t\tanalog-Sensors - This is the fourth threshold value.')
pSlot5Thresh5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 33), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot5Thresh5.setStatus('current')
if mibBuilder.loadTexts: pSlot5Thresh5.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the maximum threshold value.\n\t\t\t\tanalog-Inputs - This is the minimum threshold value.\n\t\t\t\tanalog-Sensors - This is the minimum threshold value.')
pSlot5ContactStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 44), ContactStyle()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5ContactStyle.setStatus('current')
if mibBuilder.loadTexts: pSlot5ContactStyle.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Determines the type of contact.')
pSlot5Units = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 46), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot5Units.setStatus('current')
if mibBuilder.loadTexts: pSlot5Units.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - Description of the units of measurement.\n\t\t\t\tanalog-Inputs - Description of the units of measurement.\n\t\t\t\tanalog-Sensors - Description of the units of measurement.')
pSlot5OutputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 47), OutputMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5OutputMode.setStatus('current')
if mibBuilder.loadTexts: pSlot5OutputMode.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-outputs - Defines the different ways a control point can be activated.')
pSlot5OutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 48), OutputState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5OutputState.setStatus('current')
if mibBuilder.loadTexts: pSlot5OutputState.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-outputs - A value of 0 will open the control point.\n\t\t\t\tA value of 1 will close the control point.')
pSlot5OutputAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5OutputAuto.setStatus('current')
if mibBuilder.loadTexts: pSlot5OutputAuto.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-outputs - When this control point is opened, this alarm point will change state \n\t\t\t\tto the on state.')
pSlot5BaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 57), BaudRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5BaudRate.setStatus('current')
if mibBuilder.loadTexts: pSlot5BaudRate.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Baud rate of the serial port.')
pSlot5DataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 58), DataBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5DataBits.setStatus('current')
if mibBuilder.loadTexts: pSlot5DataBits.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Number of data bit for the serial port.')
pSlot5Parity = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 59), Parity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5Parity.setStatus('current')
if mibBuilder.loadTexts: pSlot5Parity.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Parity of the serial port.')
pSlot5StopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 60), StopBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5StopBits.setStatus('current')
if mibBuilder.loadTexts: pSlot5StopBits.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Number of stop bits for the serial port.')
pSlot5Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 61), Protocol()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5Protocol.setStatus('current')
if mibBuilder.loadTexts: pSlot5Protocol.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Protocol the serial port is speaking.')
pSlot5SerialRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 62), SerialRTS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5SerialRTS.setStatus('current')
if mibBuilder.loadTexts: pSlot5SerialRTS.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Request To Send (RTS) setting for the serial port.')
pSlot5SerialCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 63), SerialCTS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5SerialCTS.setStatus('current')
if mibBuilder.loadTexts: pSlot5SerialCTS.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Clear To Send (CTS) setting for the serial port.')
pSlot5LiveDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 64), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot5LiveDescription.setStatus('current')
if mibBuilder.loadTexts: pSlot5LiveDescription.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - The current description of the alarm state.\n\t\t\t\tonboard-sensors - The description of  the current state of the onboard sensor\n\t\t\t\tanalog-Inputs - The description of  the current state of the analog input.\n\t\t\t\tanalog-Sensors - The description of  the current state of the sensor input.')
pSlot5LiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 65), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot5LiveLevel.setStatus('current')
if mibBuilder.loadTexts: pSlot5LiveLevel.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - The current level of the alarm.\n\t\t\t\tonboard-sensors - The level of the current state of the onboard sensor.\n\t\t\t\tanalog-Inputs - The level of the current state of the analog input.\n\t\t\t\tanalog-Sensors - The level of the current state of the sensor input.')
pSlot5LiveRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 66), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot5LiveRaw.setStatus('current')
if mibBuilder.loadTexts: pSlot5LiveRaw.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The current reading from the onboard sensor.  This value \n\t\t\t\twill always be between the threshold 0 and threshold 5 values.\n\t\t\t\tanalog-Inputs - The current reading from the analog input.  This value \n\t\t\t\twill always be between the threshold 0 and threshold 5 values.\n\t\t\t\tanalog-Sensors - The current reading from the sensor input.  This value \n\t\t\t\twill always be between the threshold 0 and threshold 5 values.')
pSlot5LiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 67), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot5LiveTime.setStatus('current')
if mibBuilder.loadTexts: pSlot5LiveTime.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - The time of the last change of state.\n\t\t\t\tonboard-sensors - The time of the last event.\n\t\t\t\tanalog-Inputs - The time of the last event.\n\t\t\t\tanalog-Sensors - The time of the last event.')
pSlot5Present = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 68), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot5Present.setStatus('current')
if mibBuilder.loadTexts: pSlot5Present.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - If set to true, the serial port exists.\n\t\t\t\tIf set to false the serial port does not exist.')
pSlot5OutputAutoPkg = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 71), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5OutputAutoPkg.setStatus('current')
if mibBuilder.loadTexts: pSlot5OutputAutoPkg.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-outputs - When this control point is opened, this is the package that the alarm\n\t\t\t\tpoint is located.')
pSlot5VoltageRange = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 72), VoltageRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot5VoltageRange.setStatus('current')
if mibBuilder.loadTexts: pSlot5VoltageRange.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The voltage range.\n\t\t\t\tanalog-Inputs - The voltage range.\n\t\t\t\tanalog-Sensors - The voltage range.')
pSlot5IPPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5IPPortNum.setStatus('current')
if mibBuilder.loadTexts: pSlot5IPPortNum.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - IP port number of the target device.')
pSlot5IOFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 75), IOFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot5IOFormat.setStatus('current')
if mibBuilder.loadTexts: pSlot5IOFormat.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - The io format of discrete inputs.\n\t\t\t\tdiscrete-outputs - The io format of discrete outputs.\n\t\t\t\tserial-ports - The io format of serial ports.\n\t\t\t\tonboard-sensors - The io format of onboard sensors.\n\t\t\t\tanalog-Inputs - The io format of analog inputs.\n\t\t\t\tanalog-Sensors - The io format of analog sensors.')
pSlot5PortType = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 76), PortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot5PortType.setStatus('current')
if mibBuilder.loadTexts: pSlot5PortType.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - The type of serial port.')
pSlot5TL1SID = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 116), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5TL1SID.setStatus('current')
if mibBuilder.loadTexts: pSlot5TL1SID.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tdiscrete-outputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot5TL1COND = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 117), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5TL1COND.setStatus('current')
if mibBuilder.loadTexts: pSlot5TL1COND.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tdiscrete-outputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot5TL1Eqpt = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 118), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5TL1Eqpt.setStatus('current')
if mibBuilder.loadTexts: pSlot5TL1Eqpt.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot5TL1Env = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 119), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5TL1Env.setStatus('current')
if mibBuilder.loadTexts: pSlot5TL1Env.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot5TL1Srveff = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 120), TL1Srveff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5TL1Srveff.setStatus('current')
if mibBuilder.loadTexts: pSlot5TL1Srveff.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot5TL1Locn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 121), TL1Locn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5TL1Locn.setStatus('current')
if mibBuilder.loadTexts: pSlot5TL1Locn.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot5TL1Dirn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 122), TL1Dirn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot5TL1Dirn.setStatus('current')
if mibBuilder.loadTexts: pSlot5TL1Dirn.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot5SensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 131), SensorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot5SensorType.setStatus('current')
if mibBuilder.loadTexts: pSlot5SensorType.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The type of sensor.\n\t\t\t\tanalog-Inputs - The type of sensor.\n\t\t\t\tanalog-Sensors - The type of sensor.')
pSlot5Index = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 22, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot5Index.setStatus('current')
if mibBuilder.loadTexts: pSlot5Index.setDescription('Index.')
pSlot6Table = MibTable((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23), )
if mibBuilder.loadTexts: pSlot6Table.setStatus('current')
if mibBuilder.loadTexts: pSlot6Table.setDescription('Table for configuration of Slot6')
pSlot6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1), ).setIndexNames((0, "WEBMON-EDGE-MATRIX-MIB", "pSlot6Index"))
if mibBuilder.loadTexts: pSlot6Entry.setStatus('current')
if mibBuilder.loadTexts: pSlot6Entry.setDescription('Entry for configuration table of Slot6')
pSlot6Description = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 3), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6Description.setStatus('current')
if mibBuilder.loadTexts: pSlot6Description.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Description of the alarm point.\n\t\t\t\tdiscrete-outputs - Description of the control point.\n\t\t\t\tserial-ports - Description of the serial port.\n\t\t\t\tonboard-sensors - Description of the onboard device.\n\t\t\t\tanalog-Inputs - Description of the analog input device.\n\t\t\t\tanalog-Sensors - Description of the sensor input device.')
pSlot6Desc0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 4), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6Desc0.setStatus('current')
if mibBuilder.loadTexts: pSlot6Desc0.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Description of the off state.\n\t\t\t\tdiscrete-outputs - Description when the control point is open.\n\t\t\t\tonboard-sensors - The description for values between threshold 0 and threshold 1.\n\t\t\t\tanalog-Inputs - The description for values between threshold 0 and threshold 1.\n\t\t\t\tanalog-Sensors - The description for values between threshold 0 and threshold 1.')
pSlot6Desc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 5), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6Desc1.setStatus('current')
if mibBuilder.loadTexts: pSlot6Desc1.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Description of the on state.\n\t\t\t\tdiscrete-outputs - Description when the control point is closed.\n\t\t\t\tonboard-sensors - The description for values between threshold 1 and threshold 2.\n\t\t\t\tanalog-Inputs - The description for values between threshold 1 and threshold 2.\n\t\t\t\tanalog-Sensors - The description for values between threshold 1 and threshold 2.')
pSlot6Desc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 6), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6Desc2.setStatus('current')
if mibBuilder.loadTexts: pSlot6Desc2.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The description for values between threshold 2 and threshold 3.\n\t\t\t\tanalog-Inputs - The description for values between threshold 2 and threshold 3.\n\t\t\t\tanalog-Sensors - The description for values between threshold 2 and threshold 3.')
pSlot6Desc3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 7), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6Desc3.setStatus('current')
if mibBuilder.loadTexts: pSlot6Desc3.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The description for values between threshold 3 and threshold 4.\n\t\t\t\tanalog-Inputs - The description for values between threshold 3 and threshold 4.\n\t\t\t\tanalog-Sensors - The description for values between threshold 3 and threshold 4.')
pSlot6Desc4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 8), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6Desc4.setStatus('current')
if mibBuilder.loadTexts: pSlot6Desc4.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The description for values between threshold 4 and threshold 5.\n\t\t\t\tanalog-Inputs - The description for values between threshold 4 and threshold 5.\n\t\t\t\tanalog-Sensors - The description for values between threshold 4 and threshold 5.')
pSlot6Desc5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 9), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6Desc5.setStatus('current')
if mibBuilder.loadTexts: pSlot6Desc5.setDescription('This field is used in the following card types:\n\t\t\t\tanalog-Inputs - Description for a communications failure to the sensor.\n\t\t\t\tanalog-Sensors - Description for a communications failure to the sensor.')
pSlot6Configured = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 10), Configured()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6Configured.setStatus('current')
if mibBuilder.loadTexts: pSlot6Configured.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - If set to true, changes of state will be reported.\n\t\t\t\tIf set to false, not change of states will be reported.\n\t\t\t\tdiscrete-outputs - If set to true, the control point will operate.\n\t\t\t\tIf false, it will not operate.\n\t\t\t\tserial-ports - If set to true, this serial port will be usable.\n\t\t\t\tIf set to false the port will not be usable.\n\t\t\t\tonboard-sensors - If set to true, the onboard sensors will be used.\n\t\t\t\tIf set to false the will be ignored.\n\t\t\t\tanalog-Inputs - If set to true, the analog inputs will be usable.\n\t\t\t\tIf set to false the analog inputs will be ignored.\n\t\t\t\tanalog-Sensors - If set to true, the sensor inputs will be usable.\n\t\t\t\tIf set to false the sensor inputs will be ignored.')
pSlot6SendEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 11), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6SendEmail.setStatus('current')
if mibBuilder.loadTexts: pSlot6SendEmail.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - If set to true, an email will be sent on a change of state.\n\t\t\t\tIf false, no email will be sent.\n\t\t\t\tonboard-sensors - If set to true an email event will be set when a threshold is crossed.\n\t\t\t\tIf set to false no email event will be sent.\n\t\t\t\tanalog-Inputs - If set to true an email event will be set when a threshold is crossed.\n\t\t\t\tIf set to false no email event will be sent.\n\t\t\t\tanalog-Sensors - If set to true an email event will be set when a threshold is crossed.\n\t\t\t\tIf set to false no email event will be sent.')
pSlot6SendSNMPTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 12), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6SendSNMPTrap.setStatus('current')
if mibBuilder.loadTexts: pSlot6SendSNMPTrap.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - If set to true, an SNMP trap will be sent on a change of state.\n\t\t\t\tIf false, no SNMP trap will be sent.\n\t\t\t\tonboard-sensors - If set to true an SNMP trap will be set when a threshold is crossed.\n\t\t\t\tIf set to false no SNMP trap will be sent.\n\t\t\t\tanalog-Inputs - If set to true an SNMP trap will be set when a threshold is crossed.\n\t\t\t\tIf set to false no SNMP trap will be sent.\n\t\t\t\tanalog-Sensors - If set to true an SNMP trap will be set when a threshold is crossed.\n\t\t\t\tIf set to false no SNMP trap will be sent.')
pSlot6IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6IpAddress.setStatus('current')
if mibBuilder.loadTexts: pSlot6IpAddress.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - IP Address of the target device.')
pSlot6Level0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 17), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6Level0.setStatus('current')
if mibBuilder.loadTexts: pSlot6Level0.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Level of the off state.\n\t\t\t\tdiscrete-outputs - Level of the control point when open.\n\t\t\t\tonboard-sensors - The level for values between threshold 0 and threshold 1.\n\t\t\t\tanalog-Inputs - The level for values between threshold 0 and threshold 1.\n\t\t\t\tanalog-Sensors - The level for values between threshold 0 and threshold 1.')
pSlot6Level1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 18), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6Level1.setStatus('current')
if mibBuilder.loadTexts: pSlot6Level1.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Level of the on state.\n\t\t\t\tdiscrete-outputs - Level of the control point when closed.\n\t\t\t\tonboard-sensors - The level for values between threshold 1 and threshold 2.\n\t\t\t\tanalog-Inputs - The level for values between threshold 1 and threshold 2.\n\t\t\t\tanalog-Sensors - The level for values between threshold 1 and threshold 2.')
pSlot6Level2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 19), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6Level2.setStatus('current')
if mibBuilder.loadTexts: pSlot6Level2.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The level for values between threshold 2 and threshold 3.\n\t\t\t\tanalog-Inputs - The level for values between threshold 2 and threshold 3.\n\t\t\t\tanalog-Sensors - The level for values between threshold 2 and threshold 3.')
pSlot6Level3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 20), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6Level3.setStatus('current')
if mibBuilder.loadTexts: pSlot6Level3.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The level for values between threshold 3 and threshold 4.\n\t\t\t\tanalog-Inputs - The level for values between threshold 3 and threshold 4.\n\t\t\t\tanalog-Sensors - The level for values between threshold 3 and threshold 4.')
pSlot6Level4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 21), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6Level4.setStatus('current')
if mibBuilder.loadTexts: pSlot6Level4.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The level for values between threshold 4 and threshold 5.\n\t\t\t\tanalog-Inputs - The level for values between threshold 4 and threshold 5.\n\t\t\t\tanalog-Sensors - The level for values between threshold 4 and threshold 5.')
pSlot6Level5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 22), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6Level5.setStatus('current')
if mibBuilder.loadTexts: pSlot6Level5.setDescription('This field is used in the following card types:\n\t\t\t\tanalog-Inputs - Level of a communications failure to the sensor.\n\t\t\t\tanalog-Sensors - Level of a communications failure to the sensor.')
pSlot6ReadPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6ReadPeriod.setStatus('current')
if mibBuilder.loadTexts: pSlot6ReadPeriod.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Inactivity timeout (in minutes).')
pSlot6Thresh0 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 28), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot6Thresh0.setStatus('current')
if mibBuilder.loadTexts: pSlot6Thresh0.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the minimun analog value.\n\t\t\t\tanalog-Inputs - This is the maximum analog value.\n\t\t\t\tanalog-Sensors - This is the maximum analog value.')
pSlot6Thresh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 29), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6Thresh1.setStatus('current')
if mibBuilder.loadTexts: pSlot6Thresh1.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the first threshold value.\n\t\t\t\tanalog-Inputs - This is the first threshold value.\n\t\t\t\tanalog-Sensors - This is the first threshold value.')
pSlot6Thresh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 30), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6Thresh2.setStatus('current')
if mibBuilder.loadTexts: pSlot6Thresh2.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the second threshold value.\n\t\t\t\tanalog-Inputs - This is the second threshold value.\n\t\t\t\tanalog-Sensors - This is the second threshold value.')
pSlot6Thresh3 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 31), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6Thresh3.setStatus('current')
if mibBuilder.loadTexts: pSlot6Thresh3.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the third threshold value.\n\t\t\t\tanalog-Inputs - This is the third threshold value.\n\t\t\t\tanalog-Sensors - This is the third threshold value.')
pSlot6Thresh4 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 32), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6Thresh4.setStatus('current')
if mibBuilder.loadTexts: pSlot6Thresh4.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the fourth threshold value.\n\t\t\t\tanalog-Inputs - This is the fourth threshold value.\n\t\t\t\tanalog-Sensors - This is the fourth threshold value.')
pSlot6Thresh5 = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 33), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot6Thresh5.setStatus('current')
if mibBuilder.loadTexts: pSlot6Thresh5.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - This is the maximum threshold value.\n\t\t\t\tanalog-Inputs - This is the minimum threshold value.\n\t\t\t\tanalog-Sensors - This is the minimum threshold value.')
pSlot6ContactStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 44), ContactStyle()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6ContactStyle.setStatus('current')
if mibBuilder.loadTexts: pSlot6ContactStyle.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - Determines the type of contact.')
pSlot6Units = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 46), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot6Units.setStatus('current')
if mibBuilder.loadTexts: pSlot6Units.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - Description of the units of measurement.\n\t\t\t\tanalog-Inputs - Description of the units of measurement.\n\t\t\t\tanalog-Sensors - Description of the units of measurement.')
pSlot6OutputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 47), OutputMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6OutputMode.setStatus('current')
if mibBuilder.loadTexts: pSlot6OutputMode.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-outputs - Defines the different ways a control point can be activated.')
pSlot6OutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 48), OutputState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6OutputState.setStatus('current')
if mibBuilder.loadTexts: pSlot6OutputState.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-outputs - A value of 0 will open the control point.\n\t\t\t\tA value of 1 will close the control point.')
pSlot6OutputAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6OutputAuto.setStatus('current')
if mibBuilder.loadTexts: pSlot6OutputAuto.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-outputs - When this control point is opened, this alarm point will change state \n\t\t\t\tto the on state.')
pSlot6BaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 57), BaudRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6BaudRate.setStatus('current')
if mibBuilder.loadTexts: pSlot6BaudRate.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Baud rate of the serial port.')
pSlot6DataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 58), DataBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6DataBits.setStatus('current')
if mibBuilder.loadTexts: pSlot6DataBits.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Number of data bit for the serial port.')
pSlot6Parity = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 59), Parity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6Parity.setStatus('current')
if mibBuilder.loadTexts: pSlot6Parity.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Parity of the serial port.')
pSlot6StopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 60), StopBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6StopBits.setStatus('current')
if mibBuilder.loadTexts: pSlot6StopBits.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Number of stop bits for the serial port.')
pSlot6Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 61), Protocol()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6Protocol.setStatus('current')
if mibBuilder.loadTexts: pSlot6Protocol.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Protocol the serial port is speaking.')
pSlot6SerialRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 62), SerialRTS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6SerialRTS.setStatus('current')
if mibBuilder.loadTexts: pSlot6SerialRTS.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Request To Send (RTS) setting for the serial port.')
pSlot6SerialCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 63), SerialCTS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6SerialCTS.setStatus('current')
if mibBuilder.loadTexts: pSlot6SerialCTS.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - Clear To Send (CTS) setting for the serial port.')
pSlot6LiveDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 64), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot6LiveDescription.setStatus('current')
if mibBuilder.loadTexts: pSlot6LiveDescription.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - The current description of the alarm state.\n\t\t\t\tonboard-sensors - The description of  the current state of the onboard sensor\n\t\t\t\tanalog-Inputs - The description of  the current state of the analog input.\n\t\t\t\tanalog-Sensors - The description of  the current state of the sensor input.')
pSlot6LiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 65), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot6LiveLevel.setStatus('current')
if mibBuilder.loadTexts: pSlot6LiveLevel.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - The current level of the alarm.\n\t\t\t\tonboard-sensors - The level of the current state of the onboard sensor.\n\t\t\t\tanalog-Inputs - The level of the current state of the analog input.\n\t\t\t\tanalog-Sensors - The level of the current state of the sensor input.')
pSlot6LiveRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 66), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot6LiveRaw.setStatus('current')
if mibBuilder.loadTexts: pSlot6LiveRaw.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The current reading from the onboard sensor.  This value \n\t\t\t\twill always be between the threshold 0 and threshold 5 values.\n\t\t\t\tanalog-Inputs - The current reading from the analog input.  This value \n\t\t\t\twill always be between the threshold 0 and threshold 5 values.\n\t\t\t\tanalog-Sensors - The current reading from the sensor input.  This value \n\t\t\t\twill always be between the threshold 0 and threshold 5 values.')
pSlot6LiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 67), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot6LiveTime.setStatus('current')
if mibBuilder.loadTexts: pSlot6LiveTime.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - The time of the last change of state.\n\t\t\t\tonboard-sensors - The time of the last event.\n\t\t\t\tanalog-Inputs - The time of the last event.\n\t\t\t\tanalog-Sensors - The time of the last event.')
pSlot6Present = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 68), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot6Present.setStatus('current')
if mibBuilder.loadTexts: pSlot6Present.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - If set to true, the serial port exists.\n\t\t\t\tIf set to false the serial port does not exist.')
pSlot6OutputAutoPkg = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 71), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6OutputAutoPkg.setStatus('current')
if mibBuilder.loadTexts: pSlot6OutputAutoPkg.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-outputs - When this control point is opened, this is the package that the alarm\n\t\t\t\tpoint is located.')
pSlot6VoltageRange = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 72), VoltageRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot6VoltageRange.setStatus('current')
if mibBuilder.loadTexts: pSlot6VoltageRange.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The voltage range.\n\t\t\t\tanalog-Inputs - The voltage range.\n\t\t\t\tanalog-Sensors - The voltage range.')
pSlot6IPPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6IPPortNum.setStatus('current')
if mibBuilder.loadTexts: pSlot6IPPortNum.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - IP port number of the target device.')
pSlot6IOFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 75), IOFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot6IOFormat.setStatus('current')
if mibBuilder.loadTexts: pSlot6IOFormat.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - The io format of discrete inputs.\n\t\t\t\tdiscrete-outputs - The io format of discrete outputs.\n\t\t\t\tserial-ports - The io format of serial ports.\n\t\t\t\tonboard-sensors - The io format of onboard sensors.\n\t\t\t\tanalog-Inputs - The io format of analog inputs.\n\t\t\t\tanalog-Sensors - The io format of analog sensors.')
pSlot6PortType = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 76), PortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot6PortType.setStatus('current')
if mibBuilder.loadTexts: pSlot6PortType.setDescription('This field is used in the following card types:\n\t\t\t\tserial-ports - The type of serial port.')
pSlot6TL1SID = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 116), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6TL1SID.setStatus('current')
if mibBuilder.loadTexts: pSlot6TL1SID.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tdiscrete-outputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot6TL1COND = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 117), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6TL1COND.setStatus('current')
if mibBuilder.loadTexts: pSlot6TL1COND.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tdiscrete-outputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot6TL1Eqpt = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 118), DescriptionString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6TL1Eqpt.setStatus('current')
if mibBuilder.loadTexts: pSlot6TL1Eqpt.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot6TL1Env = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 119), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6TL1Env.setStatus('current')
if mibBuilder.loadTexts: pSlot6TL1Env.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot6TL1Srveff = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 120), TL1Srveff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6TL1Srveff.setStatus('current')
if mibBuilder.loadTexts: pSlot6TL1Srveff.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot6TL1Locn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 121), TL1Locn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6TL1Locn.setStatus('current')
if mibBuilder.loadTexts: pSlot6TL1Locn.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot6TL1Dirn = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 122), TL1Dirn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlot6TL1Dirn.setStatus('current')
if mibBuilder.loadTexts: pSlot6TL1Dirn.setDescription('This field is used in the following card types:\n\t\t\t\tdiscrete-inputs - \n\t\t\t\tonboard-sensors - \n\t\t\t\tanalog-Inputs - \n\t\t\t\tanalog-Sensors - ')
pSlot6SensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 131), SensorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot6SensorType.setStatus('current')
if mibBuilder.loadTexts: pSlot6SensorType.setDescription('This field is used in the following card types:\n\t\t\t\tonboard-sensors - The type of sensor.\n\t\t\t\tanalog-Inputs - The type of sensor.\n\t\t\t\tanalog-Sensors - The type of sensor.')
pSlot6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 23, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSlot6Index.setStatus('current')
if mibBuilder.loadTexts: pSlot6Index.setDescription('Index.')
configObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 994, 3, 4, 7, 999))
for _configObjectGroup_obj in [[("WEBMON-EDGE-MATRIX-MIB", "systemGeneralLocation"), ("WEBMON-EDGE-MATRIX-MIB", "systemGeneralDescription"), ("WEBMON-EDGE-MATRIX-MIB", "systemGeneralIpAddress"), ("WEBMON-EDGE-MATRIX-MIB", "systemGeneralSubnetMask"), ("WEBMON-EDGE-MATRIX-MIB", "systemGeneralGatewayAddress"), ("WEBMON-EDGE-MATRIX-MIB", "systemGeneralReadPeriod"), ("WEBMON-EDGE-MATRIX-MIB", "systemGeneralMeasureStyle"), ("WEBMON-EDGE-MATRIX-MIB", "systemGeneralMacAddress"), ("WEBMON-EDGE-MATRIX-MIB", "systemGeneralProductType"), ("WEBMON-EDGE-MATRIX-MIB", "systemGeneralIPPortNum"), ("WEBMON-EDGE-MATRIX-MIB", "systemGeneralVersion"), ("WEBMON-EDGE-MATRIX-MIB", "systemGeneralUseResetTime"), ("WEBMON-EDGE-MATRIX-MIB", "systemGeneralEthernetType"), ("WEBMON-EDGE-MATRIX-MIB", "systemGeneralEthernetRate"), ("WEBMON-EDGE-MATRIX-MIB", "systemGeneralContact"), ("WEBMON-EDGE-MATRIX-MIB", "pTrapTargetDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pTrapTargetConfigured"), ("WEBMON-EDGE-MATRIX-MIB", "pTrapTargetIpAddress"), ("WEBMON-EDGE-MATRIX-MIB", "pTrapTargetSnmpVersion"), ("WEBMON-EDGE-MATRIX-MIB", "pTrapTargetIPPortNum"), ("WEBMON-EDGE-MATRIX-MIB", "pTrapTargetBackupIPAddress"), ("WEBMON-EDGE-MATRIX-MIB", "pTrapTargetUseDialout"), ("WEBMON-EDGE-MATRIX-MIB", "pTrapTargetDialoutTarget"), ("WEBMON-EDGE-MATRIX-MIB", "pTrapTargetAuthKey"), ("WEBMON-EDGE-MATRIX-MIB", "pTrapTargetPrivKey"), ("WEBMON-EDGE-MATRIX-MIB", "pTrapTargetSNMPAccess"), ("WEBMON-EDGE-MATRIX-MIB", "pTrapTargetEngineID"), ("WEBMON-EDGE-MATRIX-MIB", "pTrapTargetIndex"), ("WEBMON-EDGE-MATRIX-MIB", "pEmailAddress"), ("WEBMON-EDGE-MATRIX-MIB", "pEmailDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pEmailConfigured"), ("WEBMON-EDGE-MATRIX-MIB", "pEmailIndex"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorDesc0"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorDesc1"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorDesc2"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorDesc3"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorDesc4"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorDesc5"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorConfigured"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorSendEmail"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorSendSNMPTrap"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorLevel0"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorLevel1"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorLevel2"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorLevel3"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorLevel4"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorLevel5"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorThresh0"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorThresh1"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorThresh2"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorThresh3"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorThresh4"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorThresh5"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorUnits"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorPollAddress"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorLiveDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorLiveLevel"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorLiveRaw"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorLiveTime"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorTL1SID"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorTL1COND"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorTL1Eqpt"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorTL1Env"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorTL1Srveff"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorTL1Locn"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorTL1Dirn"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorMODBUSCommand"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorStartRegister"), ("WEBMON-EDGE-MATRIX-MIB", "pRemoteSensorIndex"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorDesc0"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorDesc1"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorDesc2"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorDesc3"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorDesc4"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorDesc5"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorConfigured"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorSendEmail"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorSendSNMPTrap"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorLevel0"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorLevel1"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorLevel2"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorLevel3"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorLevel4"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorLevel5"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorThresh0"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorThresh1"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorThresh2"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorThresh3"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorThresh4"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorThresh5"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorUnits"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorLiveDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorLiveLevel"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorLiveRaw"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorLiveTime"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorTL1SID"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorTL1COND"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorTL1Eqpt"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorTL1Env"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorTL1Srveff"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorTL1Locn"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorTL1Dirn"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorSensorType"), ("WEBMON-EDGE-MATRIX-MIB", "pOnboardSensorIndex"), ("WEBMON-EDGE-MATRIX-MIB", "pNetDevicesDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pNetDevicesDesc0"), ("WEBMON-EDGE-MATRIX-MIB", "pNetDevicesDesc1"), ("WEBMON-EDGE-MATRIX-MIB", "pNetDevicesConfigured"), ("WEBMON-EDGE-MATRIX-MIB", "pNetDevicesSendEmail"), ("WEBMON-EDGE-MATRIX-MIB", "pNetDevicesSendSNMPTrap"), ("WEBMON-EDGE-MATRIX-MIB", "pNetDevicesIpAddress"), ("WEBMON-EDGE-MATRIX-MIB", "pNetDevicesLevel0"), ("WEBMON-EDGE-MATRIX-MIB", "pNetDevicesLevel1"), ("WEBMON-EDGE-MATRIX-MIB", "pNetDevicesLiveDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pNetDevicesLiveLevel"), ("WEBMON-EDGE-MATRIX-MIB", "pNetDevicesLiveRaw"), ("WEBMON-EDGE-MATRIX-MIB", "pNetDevicesLiveTime"), ("WEBMON-EDGE-MATRIX-MIB", "pNetDevicesTL1SID"), ("WEBMON-EDGE-MATRIX-MIB", "pNetDevicesTL1COND"), ("WEBMON-EDGE-MATRIX-MIB", "pNetDevicesTL1Eqpt"), ("WEBMON-EDGE-MATRIX-MIB", "pNetDevicesTL1Env"), ("WEBMON-EDGE-MATRIX-MIB", "pNetDevicesTL1Srveff"), ("WEBMON-EDGE-MATRIX-MIB", "pNetDevicesTL1Locn"), ("WEBMON-EDGE-MATRIX-MIB", "pNetDevicesTL1Dirn"), ("WEBMON-EDGE-MATRIX-MIB", "pNetDevicesIndex"), ("WEBMON-EDGE-MATRIX-MIB", "pAccountsConfigured"), ("WEBMON-EDGE-MATRIX-MIB", "pAccountsName"), ("WEBMON-EDGE-MATRIX-MIB", "pAccountsEncPassword"), ("WEBMON-EDGE-MATRIX-MIB", "pAccountsUserLevel"), ("WEBMON-EDGE-MATRIX-MIB", "pAccountsUnsecured"), ("WEBMON-EDGE-MATRIX-MIB", "pAccountsAuthKey"), ("WEBMON-EDGE-MATRIX-MIB", "pAccountsPrivKey"), ("WEBMON-EDGE-MATRIX-MIB", "pAccountsSNMPAccess"), ("WEBMON-EDGE-MATRIX-MIB", "pAccountsIndex"), ("WEBMON-EDGE-MATRIX-MIB", "cameraConfigured"), ("WEBMON-EDGE-MATRIX-MIB", "cameraIpAddress"), ("WEBMON-EDGE-MATRIX-MIB", "cameraCameraStyle"), ("WEBMON-EDGE-MATRIX-MIB", "snmpGeneralConfigured"), ("WEBMON-EDGE-MATRIX-MIB", "snmpGeneralReadPeriod"), ("WEBMON-EDGE-MATRIX-MIB", "snmpGeneralGet"), ("WEBMON-EDGE-MATRIX-MIB", "snmpGeneralSet"), ("WEBMON-EDGE-MATRIX-MIB", "snmpGeneralTrap"), ("WEBMON-EDGE-MATRIX-MIB", "snmpGeneralIPPortNum"), ("WEBMON-EDGE-MATRIX-MIB", "snmpGeneralEngineID"), ("WEBMON-EDGE-MATRIX-MIB", "emailGeneralAddress"), ("WEBMON-EDGE-MATRIX-MIB", "emailGeneralConfigured"), ("WEBMON-EDGE-MATRIX-MIB", "emailGeneralIpAddress"), ("WEBMON-EDGE-MATRIX-MIB", "emailGeneralPassword"), ("WEBMON-EDGE-MATRIX-MIB", "emailGeneralIPPortNum"), ("WEBMON-EDGE-MATRIX-MIB", "pSerialDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pSerialConfigured"), ("WEBMON-EDGE-MATRIX-MIB", "pSerialIpAddress"), ("WEBMON-EDGE-MATRIX-MIB", "pSerialReadPeriod"), ("WEBMON-EDGE-MATRIX-MIB", "pSerialBaudRate"), ("WEBMON-EDGE-MATRIX-MIB", "pSerialDataBits"), ("WEBMON-EDGE-MATRIX-MIB", "pSerialParity"), ("WEBMON-EDGE-MATRIX-MIB", "pSerialStopBits"), ("WEBMON-EDGE-MATRIX-MIB", "pSerialProtocol"), ("WEBMON-EDGE-MATRIX-MIB", "pSerialSerialRTS"), ("WEBMON-EDGE-MATRIX-MIB", "pSerialSerialCTS"), ("WEBMON-EDGE-MATRIX-MIB", "pSerialPresent"), ("WEBMON-EDGE-MATRIX-MIB", "pSerialIPPortNum"), ("WEBMON-EDGE-MATRIX-MIB", "pSerialPortType"), ("WEBMON-EDGE-MATRIX-MIB", "pSerialIndex"), ("WEBMON-EDGE-MATRIX-MIB", "pSelfTestDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pSelfTestConfigured"), ("WEBMON-EDGE-MATRIX-MIB", "pSelfTestIndex"), ("WEBMON-EDGE-MATRIX-MIB", "pInternalFaultsDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pInternalFaultsDesc0"), ("WEBMON-EDGE-MATRIX-MIB", "pInternalFaultsDesc1"), ("WEBMON-EDGE-MATRIX-MIB", "pInternalFaultsDesc2"), ("WEBMON-EDGE-MATRIX-MIB", "pInternalFaultsDesc3"), ("WEBMON-EDGE-MATRIX-MIB", "pInternalFaultsSendEmail"), ("WEBMON-EDGE-MATRIX-MIB", "pInternalFaultsSendSNMPTrap"), ("WEBMON-EDGE-MATRIX-MIB", "pInternalFaultsLevel0"), ("WEBMON-EDGE-MATRIX-MIB", "pInternalFaultsLevel1"), ("WEBMON-EDGE-MATRIX-MIB", "pInternalFaultsLevel2"), ("WEBMON-EDGE-MATRIX-MIB", "pInternalFaultsLevel3"), ("WEBMON-EDGE-MATRIX-MIB", "pInternalFaultsReadPeriod"), ("WEBMON-EDGE-MATRIX-MIB", "pInternalFaultsIgnoreOff"), ("WEBMON-EDGE-MATRIX-MIB", "pInternalFaultsLiveDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pInternalFaultsLiveLevel"), ("WEBMON-EDGE-MATRIX-MIB", "pInternalFaultsLiveTime"), ("WEBMON-EDGE-MATRIX-MIB", "pInternalFaultsUseResetTime"), ("WEBMON-EDGE-MATRIX-MIB", "pInternalFaultsIndex"), ("WEBMON-EDGE-MATRIX-MIB", "pSlotInfoDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pSlotInfoRecord"), ("WEBMON-EDGE-MATRIX-MIB", "pSlotInfoPresent"), ("WEBMON-EDGE-MATRIX-MIB", "pSlotInfoSlotId"), ("WEBMON-EDGE-MATRIX-MIB", "pSlotInfoIndex"), ("WEBMON-EDGE-MATRIX-MIB", "pNetPortsDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pNetPortsReadPeriod"), ("WEBMON-EDGE-MATRIX-MIB", "pNetPortsIPPortNum"), ("WEBMON-EDGE-MATRIX-MIB", "pNetPortsIndex"), ("WEBMON-EDGE-MATRIX-MIB", "wirelessModemBackupIPAddress"), ("WEBMON-EDGE-MATRIX-MIB", "wirelessModemTime"), ("WEBMON-EDGE-MATRIX-MIB", "wirelessModemTransmit"), ("WEBMON-EDGE-MATRIX-MIB", "wirelessModemUseWirelessNetwork"), ("WEBMON-EDGE-MATRIX-MIB", "wirelessModemUseResetTime"), ("WEBMON-EDGE-MATRIX-MIB", "wirelessModemResponseWaitTime"), ("WEBMON-EDGE-MATRIX-MIB", "wirelessModemSecondary"), ("WEBMON-EDGE-MATRIX-MIB", "webmonSecurityUserLevel"), ("WEBMON-EDGE-MATRIX-MIB", "webmonSecurityUnsecured"), ("WEBMON-EDGE-MATRIX-MIB", "dateTimeConfigured"), ("WEBMON-EDGE-MATRIX-MIB", "dateTimeIpAddress"), ("WEBMON-EDGE-MATRIX-MIB", "dateTimeDaylightSaving"), ("WEBMON-EDGE-MATRIX-MIB", "dateTimeDate"), ("WEBMON-EDGE-MATRIX-MIB", "dateTimeTime"), ("WEBMON-EDGE-MATRIX-MIB", "dateTimeNegOffset"), ("WEBMON-EDGE-MATRIX-MIB", "dateTimeUTCOffset"), ("WEBMON-EDGE-MATRIX-MIB", "pDCMProtocolDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pDCMProtocolConfigured"), ("WEBMON-EDGE-MATRIX-MIB", "pDCMProtocolBaseDCMAddress"), ("WEBMON-EDGE-MATRIX-MIB", "pDCMProtocolIndex"), ("WEBMON-EDGE-MATRIX-MIB", "pdialOutConfigured"), ("WEBMON-EDGE-MATRIX-MIB", "pdialOutName"), ("WEBMON-EDGE-MATRIX-MIB", "pdialOutPassword"), ("WEBMON-EDGE-MATRIX-MIB", "pdialOutDialOutNumber"), ("WEBMON-EDGE-MATRIX-MIB", "pdialOutIndex"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteDesc0"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteDesc1"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteConfigured"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteSendEmail"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteSendSNMPTrap"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteLevel0"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteLevel1"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteLiveDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteLiveLevel"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteLiveTime"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteElementAPkg"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteElementAPoint"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteElementBPkg"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteElementBPoint"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteDiscreteFormula"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteTL1SID"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteTL1COND"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteTL1Eqpt"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteTL1Env"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteTL1Srveff"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteTL1Locn"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteTL1Dirn"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedDiscreteIndex"), ("WEBMON-EDGE-MATRIX-MIB", "licenseDescription"), ("WEBMON-EDGE-MATRIX-MIB", "licenseLicenseKey"), ("WEBMON-EDGE-MATRIX-MIB", "licenseExpires"), ("WEBMON-EDGE-MATRIX-MIB", "licenseAllowTL1"), ("WEBMON-EDGE-MATRIX-MIB", "pe2aHostDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pe2aHostConfigured"), ("WEBMON-EDGE-MATRIX-MIB", "pe2aHostIpAddress"), ("WEBMON-EDGE-MATRIX-MIB", "pe2aHostLevel0"), ("WEBMON-EDGE-MATRIX-MIB", "pe2aHostLevel1"), ("WEBMON-EDGE-MATRIX-MIB", "pe2aHostLevel2")], [("WEBMON-EDGE-MATRIX-MIB", "pe2aHostRosterID"), ("WEBMON-EDGE-MATRIX-MIB", "pe2aHostPollAddress"), ("WEBMON-EDGE-MATRIX-MIB", "pe2aHostIPPortNum"), ("WEBMON-EDGE-MATRIX-MIB", "pe2aHostTL1SID"), ("WEBMON-EDGE-MATRIX-MIB", "pe2aHostTL1COND"), ("WEBMON-EDGE-MATRIX-MIB", "pe2aHostTL1Eqpt"), ("WEBMON-EDGE-MATRIX-MIB", "pe2aHostTL1Env"), ("WEBMON-EDGE-MATRIX-MIB", "pe2aHostTL1Srveff"), ("WEBMON-EDGE-MATRIX-MIB", "pe2aHostTL1Locn"), ("WEBMON-EDGE-MATRIX-MIB", "pe2aHostTL1Dirn"), ("WEBMON-EDGE-MATRIX-MIB", "pe2aHostIndex"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogDesc0"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogDesc1"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogDesc2"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogDesc3"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogDesc4"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogConfigured"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogSendEmail"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogSendSNMPTrap"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogLevel0"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogLevel1"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogLevel2"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogLevel3"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogLevel4"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogThresh0"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogThresh1"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogThresh2"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogThresh3"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogThresh4"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogThresh5"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogUnits"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogLiveDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogLiveLevel"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogLiveRaw"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogLiveTime"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogElementAPkg"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogElementAPoint"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogElementBPkg"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogElementBPoint"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogFormula"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogTL1SID"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogTL1COND"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogTL1Eqpt"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogTL1Env"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogTL1Srveff"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogTL1Locn"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogTL1Dirn"), ("WEBMON-EDGE-MATRIX-MIB", "pderivedAnalogIndex"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsDesc0"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsDesc1"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsDesc2"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsDesc3"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsDesc4"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsConfigured"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsSendEmail"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsSendSNMPTrap"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsLevel0"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsLevel1"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsLevel2"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsLevel3"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsLevel4"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsThresh0"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsThresh1"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsThresh2"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsThresh3"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsThresh4"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsThresh5"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsUnits"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsLiveDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsLiveLevel"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsLiveRaw"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsLiveTime"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsTL1SID"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsTL1COND"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsTL1Eqpt"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsTL1Env"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsTL1Srveff"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsTL1Locn"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsTL1Dirn"), ("WEBMON-EDGE-MATRIX-MIB", "pgpsIndex"), ("WEBMON-EDGE-MATRIX-MIB", "pportRedirectDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pportRedirectConfigured"), ("WEBMON-EDGE-MATRIX-MIB", "pportRedirectIpAddress"), ("WEBMON-EDGE-MATRIX-MIB", "pportRedirectReadPeriod"), ("WEBMON-EDGE-MATRIX-MIB", "pportRedirectRosterID"), ("WEBMON-EDGE-MATRIX-MIB", "pportRedirectIPPortNum"), ("WEBMON-EDGE-MATRIX-MIB", "pportRedirectIndex"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleADayOfWeek"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleAConfiguredState"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleAConfigured1"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleAConfigured2"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleAConfigured3"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleAConfigured4"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleATime0"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleATime1"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleATime2"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleATime3"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleATime4"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleATime5"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleAIndex"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleBDayOfWeek"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleBConfiguredState"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleBConfigured1"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleBConfigured2"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleBConfigured3"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleBConfigured4"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleBTime0"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleBTime1"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleBTime2"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleBTime3"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleBTime4"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleBTime5"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleBIndex"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleCDayOfWeek"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleCConfiguredState"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleCConfigured1"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleCConfigured2"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleCConfigured3"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleCConfigured4"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleCTime0"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleCTime1"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleCTime2"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleCTime3"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleCTime4"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleCTime5"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleCIndex"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleDDayOfWeek"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleDConfiguredState"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleDConfigured1"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleDConfigured2"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleDConfigured3"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleDConfigured4"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleDTime0"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleDTime1"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleDTime2"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleDTime3"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleDTime4"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleDTime5"), ("WEBMON-EDGE-MATRIX-MIB", "pscheduleDIndex"), ("WEBMON-EDGE-MATRIX-MIB", "tl1SettingsTL1Issue"), ("WEBMON-EDGE-MATRIX-MIB", "pDCPFProtocolDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pDCPFProtocolConfigured"), ("WEBMON-EDGE-MATRIX-MIB", "pDCPFProtocolBaseDCPFDisplay"), ("WEBMON-EDGE-MATRIX-MIB", "pDCPFProtocolIndex"), ("WEBMON-EDGE-MATRIX-MIB", "dcpfSettingsDCPFAddress"), ("WEBMON-EDGE-MATRIX-MIB", "pTABSProtocolDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pTABSProtocolConfigured"), ("WEBMON-EDGE-MATRIX-MIB", "pTABSProtocolBaseTABSDisplay"), ("WEBMON-EDGE-MATRIX-MIB", "pTABSProtocolIndex"), ("WEBMON-EDGE-MATRIX-MIB", "tabsSettingsTABSAddress"), ("WEBMON-EDGE-MATRIX-MIB", "psnmpCommandsDescription"), ("WEBMON-EDGE-MATRIX-MIB", "psnmpCommandsConfigured"), ("WEBMON-EDGE-MATRIX-MIB", "psnmpCommandsIpAddress"), ("WEBMON-EDGE-MATRIX-MIB", "psnmpCommandsGet"), ("WEBMON-EDGE-MATRIX-MIB", "psnmpCommandsSnmpVersion"), ("WEBMON-EDGE-MATRIX-MIB", "psnmpCommandsOutputAuto"), ("WEBMON-EDGE-MATRIX-MIB", "psnmpCommandsOutputAutoPkg"), ("WEBMON-EDGE-MATRIX-MIB", "psnmpCommandsIPPortNum"), ("WEBMON-EDGE-MATRIX-MIB", "psnmpCommandsOID"), ("WEBMON-EDGE-MATRIX-MIB", "psnmpCommandsSNMPVarbindType"), ("WEBMON-EDGE-MATRIX-MIB", "psnmpCommandsTextNormal"), ("WEBMON-EDGE-MATRIX-MIB", "psnmpCommandsTextCritical"), ("WEBMON-EDGE-MATRIX-MIB", "psnmpCommandsTextMajor"), ("WEBMON-EDGE-MATRIX-MIB", "psnmpCommandsTextMinor"), ("WEBMON-EDGE-MATRIX-MIB", "psnmpCommandsTextStatus"), ("WEBMON-EDGE-MATRIX-MIB", "psnmpCommandsIndex"), ("WEBMON-EDGE-MATRIX-MIB", "battMonConfigured"), ("WEBMON-EDGE-MATRIX-MIB", "battMonOutputAuto"), ("WEBMON-EDGE-MATRIX-MIB", "battMonOutputAutoPkg"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Description"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Desc0"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Desc1"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Desc2"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Desc3"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Desc4"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Desc5"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Configured"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1SendEmail"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1SendSNMPTrap"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1IpAddress"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Level0"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Level1"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Level2"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Level3"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Level4"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Level5"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1ReadPeriod"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Thresh0"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Thresh1"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Thresh2"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Thresh3"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Thresh4"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Thresh5"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1ContactStyle"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Units"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1OutputMode"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1OutputState"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1OutputAuto"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1BaudRate"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1DataBits"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Parity"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1StopBits"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Protocol"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1SerialRTS"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1SerialCTS"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1LiveDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1LiveLevel"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1LiveRaw"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1LiveTime"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Present"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1OutputAutoPkg"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1VoltageRange"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1IPPortNum"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1IOFormat"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1PortType"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1TL1SID"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1TL1COND"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1TL1Eqpt"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1TL1Env"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1TL1Srveff"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1TL1Locn"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1TL1Dirn"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1SensorType"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot1Index"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Description"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Desc0"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Desc1"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Desc2"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Desc3"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Desc4"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Desc5"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Configured"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2SendEmail"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2SendSNMPTrap"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2IpAddress"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Level0"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Level1"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Level2"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Level3"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Level4"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Level5"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2ReadPeriod"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Thresh0"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Thresh1"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Thresh2"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Thresh3"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Thresh4"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Thresh5"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2ContactStyle"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Units"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2OutputMode"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2OutputState"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2OutputAuto")], [("WEBMON-EDGE-MATRIX-MIB", "pSlot2BaudRate"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2DataBits"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Parity"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2StopBits"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Protocol"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2SerialRTS"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2SerialCTS"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2LiveDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2LiveLevel"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2LiveRaw"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2LiveTime"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Present"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2OutputAutoPkg"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2VoltageRange"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2IPPortNum"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2IOFormat"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2PortType"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2TL1SID"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2TL1COND"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2TL1Eqpt"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2TL1Env"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2TL1Srveff"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2TL1Locn"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2TL1Dirn"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2SensorType"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot2Index"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Description"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Desc0"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Desc1"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Desc2"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Desc3"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Desc4"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Desc5"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Configured"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3SendEmail"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3SendSNMPTrap"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3IpAddress"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Level0"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Level1"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Level2"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Level3"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Level4"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Level5"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3ReadPeriod"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Thresh0"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Thresh1"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Thresh2"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Thresh3"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Thresh4"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Thresh5"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3ContactStyle"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Units"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3OutputMode"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3OutputState"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3OutputAuto"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3BaudRate"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3DataBits"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Parity"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3StopBits"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Protocol"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3SerialRTS"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3SerialCTS"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3LiveDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3LiveLevel"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3LiveRaw"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3LiveTime"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Present"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3OutputAutoPkg"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3VoltageRange"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3IPPortNum"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3IOFormat"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3PortType"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3TL1SID"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3TL1COND"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3TL1Eqpt"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3TL1Env"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3TL1Srveff"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3TL1Locn"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3TL1Dirn"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3SensorType"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot3Index"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Description"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Desc0"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Desc1"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Desc2"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Desc3"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Desc4"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Desc5"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Configured"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4SendEmail"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4SendSNMPTrap"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4IpAddress"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Level0"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Level1"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Level2"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Level3"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Level4"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Level5"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4ReadPeriod"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Thresh0"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Thresh1"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Thresh2"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Thresh3"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Thresh4"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Thresh5"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4ContactStyle"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Units"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4OutputMode"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4OutputState"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4OutputAuto"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4BaudRate"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4DataBits"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Parity"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4StopBits"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Protocol"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4SerialRTS"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4SerialCTS"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4LiveDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4LiveLevel"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4LiveRaw"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4LiveTime"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Present"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4OutputAutoPkg"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4VoltageRange"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4IPPortNum"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4IOFormat"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4PortType"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4TL1SID"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4TL1COND"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4TL1Eqpt"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4TL1Env"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4TL1Srveff"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4TL1Locn"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4TL1Dirn"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4SensorType"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot4Index"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Description"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Desc0"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Desc1"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Desc2"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Desc3"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Desc4"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Desc5"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Configured"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5SendEmail"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5SendSNMPTrap"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5IpAddress"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Level0"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Level1"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Level2"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Level3"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Level4"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Level5"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5ReadPeriod"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Thresh0"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Thresh1"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Thresh2"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Thresh3"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Thresh4"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Thresh5"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5ContactStyle"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Units"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5OutputMode"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5OutputState"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5OutputAuto"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5BaudRate"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5DataBits"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Parity"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5StopBits"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Protocol"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5SerialRTS"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5SerialCTS"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5LiveDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5LiveLevel"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5LiveRaw"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5LiveTime"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Present"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5OutputAutoPkg"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5VoltageRange"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5IPPortNum"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5IOFormat"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5PortType"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5TL1SID"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5TL1COND"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5TL1Eqpt"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5TL1Env"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5TL1Srveff"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5TL1Locn"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5TL1Dirn"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5SensorType"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot5Index"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Description"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Desc0"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Desc1"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Desc2"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Desc3"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Desc4"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Desc5"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Configured"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6SendEmail"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6SendSNMPTrap"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6IpAddress"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Level0"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Level1"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Level2"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Level3"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Level4"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Level5"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6ReadPeriod"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Thresh0"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Thresh1"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Thresh2"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Thresh3"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Thresh4"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Thresh5"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6ContactStyle"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Units"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6OutputMode"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6OutputState"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6OutputAuto"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6BaudRate"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6DataBits"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Parity"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6StopBits"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Protocol"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6SerialRTS"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6SerialCTS"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6LiveDescription"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6LiveLevel"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6LiveRaw"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6LiveTime"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Present"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6OutputAutoPkg"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6VoltageRange"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6IPPortNum"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6IOFormat"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6PortType"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6TL1SID"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6TL1COND"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6TL1Eqpt"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6TL1Env"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6TL1Srveff"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6TL1Locn"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6TL1Dirn"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6SensorType"), ("WEBMON-EDGE-MATRIX-MIB", "pSlot6Index")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        configObjectGroup = configObjectGroup.setObjects(*_configObjectGroup_obj)
    else:
        configObjectGroup = configObjectGroup.setObjects(*_configObjectGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configObjectGroup = configObjectGroup.setStatus('current')
if mibBuilder.loadTexts: configObjectGroup.setDescription('Description.')
notificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 994, 3, 4, 4)).setObjects(("WEBMON-EDGE-MATRIX-MIB", "analogEventTrap"), ("WEBMON-EDGE-MATRIX-MIB", "remoteDeviceEventTrap"), ("WEBMON-EDGE-MATRIX-MIB", "faultTrap"), ("WEBMON-EDGE-MATRIX-MIB", "digitalEventTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    notificationGroup = notificationGroup.setStatus('current')
if mibBuilder.loadTexts: notificationGroup.setDescription('Group containing all the notification types.')
objectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 994, 3, 4, 5)).setObjects(("WEBMON-EDGE-MATRIX-MIB", "systemGeneralDescription"), ("WEBMON-EDGE-MATRIX-MIB", "systemGeneralLocation"), ("WEBMON-EDGE-MATRIX-MIB", "analogInputDescription"), ("WEBMON-EDGE-MATRIX-MIB", "analogLiveLevel"), ("WEBMON-EDGE-MATRIX-MIB", "analogLiveReading"), ("WEBMON-EDGE-MATRIX-MIB", "analogUnitsOfMeasurement"), ("WEBMON-EDGE-MATRIX-MIB", "analogLiveState"), ("WEBMON-EDGE-MATRIX-MIB", "analogLiveStateDescription"), ("WEBMON-EDGE-MATRIX-MIB", "analogAlarmState"), ("WEBMON-EDGE-MATRIX-MIB", "analogSourceDescription"), ("WEBMON-EDGE-MATRIX-MIB", "analogSourceIndex"), ("WEBMON-EDGE-MATRIX-MIB", "digitalInputDescription"), ("WEBMON-EDGE-MATRIX-MIB", "digitalAlarmState"), ("WEBMON-EDGE-MATRIX-MIB", "digitalLiveLevel"), ("WEBMON-EDGE-MATRIX-MIB", "digitalLiveState"), ("WEBMON-EDGE-MATRIX-MIB", "digitalLiveStateDescription"), ("WEBMON-EDGE-MATRIX-MIB", "digitalSourceDescription"), ("WEBMON-EDGE-MATRIX-MIB", "digitalSourceIndex"), ("WEBMON-EDGE-MATRIX-MIB", "remoteDeviceDescription"), ("WEBMON-EDGE-MATRIX-MIB", "remoteDeviceLiveLevel"), ("WEBMON-EDGE-MATRIX-MIB", "remoteDeviceLiveState"), ("WEBMON-EDGE-MATRIX-MIB", "remoteDeviceAlarmState"), ("WEBMON-EDGE-MATRIX-MIB", "remoteDeviceSourceDescription"), ("WEBMON-EDGE-MATRIX-MIB", "remoteDeviceSourceIndex"), ("WEBMON-EDGE-MATRIX-MIB", "faultDescription"), ("WEBMON-EDGE-MATRIX-MIB", "faultLiveLevel"), ("WEBMON-EDGE-MATRIX-MIB", "faultStateDescription"), ("WEBMON-EDGE-MATRIX-MIB", "faultAlarmState"), ("WEBMON-EDGE-MATRIX-MIB", "faultSourceDescription"), ("WEBMON-EDGE-MATRIX-MIB", "faultSourceIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    objectGroup = objectGroup.setStatus('current')
if mibBuilder.loadTexts: objectGroup.setDescription('Group containing all the objects.')
traps = ObjectIdentity((1, 3, 6, 1, 4, 1, 994, 3, 4, 6))
if mibBuilder.loadTexts: traps.setStatus('current')
if mibBuilder.loadTexts: traps.setDescription('Category containing all the traps.  Each trap has sibling data nodes \n\t\t\t\tthat contain the data associated with the most recently sent trap\n\t\t\t\tof that particular type.  A GET-REQUEST sent to the WebMon for those\n\t\t\t\tdata nodes will allow you to verify the data received in a recent\n\t\t\t\ttrap.')
analogInputs = ObjectIdentity((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 1))
if mibBuilder.loadTexts: analogInputs.setStatus('current')
if mibBuilder.loadTexts: analogInputs.setDescription('Subtree containing trap and associated data for analog inputs.\n\t\t\t\t\n\t\t\t\tAnalog inputs measure a value.  The input always has a live \n\t\t\t\treading, but traps are only sent on events, which are defined as \n\t\t\t\tthe live reading crossing (or passing) one of the user-defined \n\t\t\t\tthresholds.  \n\t\t\t\t')
analogEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 1, 1)).setObjects(("WEBMON-EDGE-MATRIX-MIB", "systemGeneralDescription"), ("WEBMON-EDGE-MATRIX-MIB", "systemGeneralLocation"), ("WEBMON-EDGE-MATRIX-MIB", "analogInputDescription"), ("WEBMON-EDGE-MATRIX-MIB", "analogLiveLevel"), ("WEBMON-EDGE-MATRIX-MIB", "analogLiveReading"), ("WEBMON-EDGE-MATRIX-MIB", "analogLiveState"), ("WEBMON-EDGE-MATRIX-MIB", "analogLiveStateDescription"), ("WEBMON-EDGE-MATRIX-MIB", "analogUnitsOfMeasurement"), ("WEBMON-EDGE-MATRIX-MIB", "analogAlarmState"), ("WEBMON-EDGE-MATRIX-MIB", "analogSourceDescription"), ("WEBMON-EDGE-MATRIX-MIB", "analogSourceIndex"))
if mibBuilder.loadTexts: analogEventTrap.setStatus('current')
if mibBuilder.loadTexts: analogEventTrap.setDescription('Notification sent upon an analog input reading crossing a \n\t\t\t\tthreshold.')
analogInputDescription = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 1, 2), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogInputDescription.setStatus('current')
if mibBuilder.loadTexts: analogInputDescription.setDescription('Description of the analog input.')
analogLiveLevel = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 1, 3), Level()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogLiveLevel.setStatus('current')
if mibBuilder.loadTexts: analogLiveLevel.setDescription('The level associated with the analogLiveReading for this input.')
analogLiveReading = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 1, 5), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogLiveReading.setStatus('current')
if mibBuilder.loadTexts: analogLiveReading.setDescription('The reading from the analog input described by \n\t\t\t\tanalogInputDescription at the time the trap was sent.  It is in the \n\t\t\t\tunits described in analogUnitsOfMeasurement.')
analogUnitsOfMeasurement = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 1, 6), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogUnitsOfMeasurement.setStatus('current')
if mibBuilder.loadTexts: analogUnitsOfMeasurement.setDescription('The units of measurement associated with the analogLiveReading.')
analogLiveState = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 1, 7), AnalogState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogLiveState.setStatus('current')
if mibBuilder.loadTexts: analogLiveState.setDescription('The state associated with analogLiveReading.')
analogLiveStateDescription = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 1, 8), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogLiveStateDescription.setStatus('current')
if mibBuilder.loadTexts: analogLiveStateDescription.setDescription('The description of the range in which the analogLiveReading is.')
analogAlarmState = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 1, 9), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogAlarmState.setStatus('current')
if mibBuilder.loadTexts: analogAlarmState.setDescription('If true this field indicates the alarmed state.  \n             If false this field indicates the not alarmed state.')
analogSourceDescription = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 1, 101), DescriptionString())
if mibBuilder.loadTexts: analogSourceDescription.setStatus('current')
if mibBuilder.loadTexts: analogSourceDescription.setDescription('Description of the event source.')
analogSourceIndex = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 1, 102), Integer32())
if mibBuilder.loadTexts: analogSourceIndex.setStatus('current')
if mibBuilder.loadTexts: analogSourceIndex.setDescription('Index of the event source.')
digitalInputs = ObjectIdentity((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 2))
if mibBuilder.loadTexts: digitalInputs.setStatus('current')
if mibBuilder.loadTexts: digitalInputs.setDescription('Subtree containing trap and associated data for digital inputs.\n\t\t\t\t\n\t\t\t\tDigital inputs monitor a binary state.  The input is always in one \n\t\t\t\tof two states.  Traps are sent on events, which are defined as a\n\t\t\t\tchange in the live state.')
digitalEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 2, 1)).setObjects(("WEBMON-EDGE-MATRIX-MIB", "systemGeneralDescription"), ("WEBMON-EDGE-MATRIX-MIB", "systemGeneralLocation"), ("WEBMON-EDGE-MATRIX-MIB", "digitalInputDescription"), ("WEBMON-EDGE-MATRIX-MIB", "digitalLiveLevel"), ("WEBMON-EDGE-MATRIX-MIB", "digitalLiveState"), ("WEBMON-EDGE-MATRIX-MIB", "digitalLiveStateDescription"), ("WEBMON-EDGE-MATRIX-MIB", "digitalAlarmState"), ("WEBMON-EDGE-MATRIX-MIB", "digitalSourceDescription"), ("WEBMON-EDGE-MATRIX-MIB", "digitalSourceIndex"))
if mibBuilder.loadTexts: digitalEventTrap.setStatus('current')
if mibBuilder.loadTexts: digitalEventTrap.setDescription('Notification sent upon change of state on a digital input.')
digitalInputDescription = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 2, 2), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInputDescription.setStatus('current')
if mibBuilder.loadTexts: digitalInputDescription.setDescription('Description of the digital input.')
digitalLiveLevel = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 2, 3), Level()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalLiveLevel.setStatus('current')
if mibBuilder.loadTexts: digitalLiveLevel.setDescription('The level associated with digitalLiveState for this input.')
digitalLiveState = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 2, 4), DigitalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalLiveState.setStatus('current')
if mibBuilder.loadTexts: digitalLiveState.setDescription('The state of the digital input described by digitalInputDescription \n\t\t\t\tat the time the trap was sent.')
digitalLiveStateDescription = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 2, 5), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalLiveStateDescription.setStatus('current')
if mibBuilder.loadTexts: digitalLiveStateDescription.setDescription('The description of the digitalLiveState.')
digitalAlarmState = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 2, 6), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalAlarmState.setStatus('current')
if mibBuilder.loadTexts: digitalAlarmState.setDescription('If true this field indicates the alarmed state.  \n             If false this field indicates the not alarmed state.')
digitalSourceDescription = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 2, 101), DescriptionString())
if mibBuilder.loadTexts: digitalSourceDescription.setStatus('current')
if mibBuilder.loadTexts: digitalSourceDescription.setDescription('Description of the event source.')
digitalSourceIndex = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 2, 102), Integer32())
if mibBuilder.loadTexts: digitalSourceIndex.setStatus('current')
if mibBuilder.loadTexts: digitalSourceIndex.setDescription('Index of the event source.')
remoteDevices = ObjectIdentity((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 3))
if mibBuilder.loadTexts: remoteDevices.setStatus('current')
if mibBuilder.loadTexts: remoteDevices.setDescription("Subtree containing trap and associated data for monitored remote \n\t\t\t\tdevices.\n\t\t\t\t\n\t\t\t\tRemote devices are monitored for network connectivity.  The device's\n\t\t\t\tlive state is always either online or offline.  Traps are sent on \n\t\t\t\tevents, which are defined as a change in the live state.")
remoteDeviceEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 3, 1)).setObjects(("WEBMON-EDGE-MATRIX-MIB", "systemGeneralDescription"), ("WEBMON-EDGE-MATRIX-MIB", "systemGeneralLocation"), ("WEBMON-EDGE-MATRIX-MIB", "remoteDeviceDescription"), ("WEBMON-EDGE-MATRIX-MIB", "remoteDeviceLiveState"), ("WEBMON-EDGE-MATRIX-MIB", "remoteDeviceLiveLevel"), ("WEBMON-EDGE-MATRIX-MIB", "remoteDeviceAlarmState"), ("WEBMON-EDGE-MATRIX-MIB", "remoteDeviceSourceDescription"), ("WEBMON-EDGE-MATRIX-MIB", "remoteDeviceSourceIndex"))
if mibBuilder.loadTexts: remoteDeviceEventTrap.setStatus('current')
if mibBuilder.loadTexts: remoteDeviceEventTrap.setDescription('Notification sent upon change of state of a remote device.')
remoteDeviceDescription = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 3, 2), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteDeviceDescription.setStatus('current')
if mibBuilder.loadTexts: remoteDeviceDescription.setDescription('Description of the remote device.')
remoteDeviceLiveLevel = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 3, 3), Level()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteDeviceLiveLevel.setStatus('current')
if mibBuilder.loadTexts: remoteDeviceLiveLevel.setDescription('The level associated with remoteDeviceLiveState.')
remoteDeviceLiveState = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 3, 4), ConnectivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteDeviceLiveState.setStatus('current')
if mibBuilder.loadTexts: remoteDeviceLiveState.setDescription('The state of the remote device described by remoteDeviceDescription \n\t\t\t\tat the time the trap was sent.  Online indicates connected, offline\n\t\t\t\tindicates not connected.')
remoteDeviceAlarmState = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 3, 5), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteDeviceAlarmState.setStatus('current')
if mibBuilder.loadTexts: remoteDeviceAlarmState.setDescription('If true this field indicates the alarmed state.  \n             If false this field indicates the not alarmed state.')
remoteDeviceSourceDescription = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 3, 101), DescriptionString())
if mibBuilder.loadTexts: remoteDeviceSourceDescription.setStatus('current')
if mibBuilder.loadTexts: remoteDeviceSourceDescription.setDescription('Description of the event source.')
remoteDeviceSourceIndex = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 3, 102), Integer32())
if mibBuilder.loadTexts: remoteDeviceSourceIndex.setStatus('current')
if mibBuilder.loadTexts: remoteDeviceSourceIndex.setDescription('Index of the event source.')
faults = ObjectIdentity((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 4))
if mibBuilder.loadTexts: faults.setStatus('current')
if mibBuilder.loadTexts: faults.setDescription('Subtree containing trap and associated data for faults.\n\t\t\t\t\n\t\t\t\tFaults are conditions internal to the WebMon.  The only data \n\t\t\t\tassociated with this trap is a string that describes the condition.')
faultTrap = NotificationType((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 4, 1)).setObjects(("WEBMON-EDGE-MATRIX-MIB", "systemGeneralDescription"), ("WEBMON-EDGE-MATRIX-MIB", "systemGeneralLocation"), ("WEBMON-EDGE-MATRIX-MIB", "faultDescription"), ("WEBMON-EDGE-MATRIX-MIB", "faultLiveLevel"), ("WEBMON-EDGE-MATRIX-MIB", "faultStateDescription"), ("WEBMON-EDGE-MATRIX-MIB", "faultAlarmState"), ("WEBMON-EDGE-MATRIX-MIB", "faultSourceDescription"), ("WEBMON-EDGE-MATRIX-MIB", "faultSourceIndex"))
if mibBuilder.loadTexts: faultTrap.setStatus('current')
if mibBuilder.loadTexts: faultTrap.setDescription('Notification sent when a fault is encountered.')
faultDescription = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 4, 2), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultDescription.setStatus('current')
if mibBuilder.loadTexts: faultDescription.setDescription('Description of the condition at the WebMon.')
faultLiveLevel = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 4, 3), Level()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultLiveLevel.setStatus('current')
if mibBuilder.loadTexts: faultLiveLevel.setDescription('The level associated with faultStateDescription.')
faultStateDescription = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 4, 4), DescriptionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultStateDescription.setStatus('current')
if mibBuilder.loadTexts: faultStateDescription.setDescription('The description of the state of this fault.')
faultAlarmState = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 4, 5), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultAlarmState.setStatus('current')
if mibBuilder.loadTexts: faultAlarmState.setDescription('If true this field indicates the alarmed state.  \n             If false this field indicates the not alarmed state.')
faultSourceDescription = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 4, 101), DescriptionString())
if mibBuilder.loadTexts: faultSourceDescription.setStatus('current')
if mibBuilder.loadTexts: faultSourceDescription.setDescription('Description of the event source.')
faultSourceIndex = MibScalar((1, 3, 6, 1, 4, 1, 994, 3, 4, 6, 4, 102), Integer32())
if mibBuilder.loadTexts: faultSourceIndex.setStatus('current')
if mibBuilder.loadTexts: faultSourceIndex.setDescription('Index of the event source.')
mibBuilder.exportSymbols("WEBMON-EDGE-MATRIX-MIB", pRemoteSensorThresh3=pRemoteSensorThresh3, configuration=configuration, pSlot2Thresh3=pSlot2Thresh3, pOnboardSensorEntry=pOnboardSensorEntry, pSlot2SendEmail=pSlot2SendEmail, pSlot2LiveLevel=pSlot2LiveLevel, pSlot1LiveTime=pSlot1LiveTime, UseDialout=UseDialout, pgpsTL1SID=pgpsTL1SID, pOnboardSensorSensorType=pOnboardSensorSensorType, pSlot2Level1=pSlot2Level1, pgpsLevel3=pgpsLevel3, pSlot2LiveTime=pSlot2LiveTime, TL1Srveff=TL1Srveff, pInternalFaultsLevel1=pInternalFaultsLevel1, pgpsTL1Srveff=pgpsTL1Srveff, pSlot5OutputMode=pSlot5OutputMode, pSlot2DataBits=pSlot2DataBits, pSlot3OutputAuto=pSlot3OutputAuto, pTABSProtocolConfigured=pTABSProtocolConfigured, pSlot1IOFormat=pSlot1IOFormat, pSlot1Parity=pSlot1Parity, pgpsTL1Dirn=pgpsTL1Dirn, snmpGeneralTrap=snmpGeneralTrap, pSlot5TL1COND=pSlot5TL1COND, pRemoteSensorDescription=pRemoteSensorDescription, pSlot3OutputAutoPkg=pSlot3OutputAutoPkg, pSlot2Table=pSlot2Table, pEmailIndex=pEmailIndex, pSlot4Desc0=pSlot4Desc0, pgpsLiveTime=pgpsLiveTime, pRemoteSensorLevel5=pRemoteSensorLevel5, remoteDeviceEventTrap=remoteDeviceEventTrap, pSlot1Thresh0=pSlot1Thresh0, dateTimeDaylightSaving=dateTimeDaylightSaving, pSlot1Level5=pSlot1Level5, pTrapTargetSNMPAccess=pTrapTargetSNMPAccess, pRemoteSensorLiveDescription=pRemoteSensorLiveDescription, systemGeneralGatewayAddress=systemGeneralGatewayAddress, pNetDevicesTL1Dirn=pNetDevicesTL1Dirn, pscheduleCIndex=pscheduleCIndex, pRemoteSensorTL1Env=pRemoteSensorTL1Env, pSlot4IpAddress=pSlot4IpAddress, pEmailTable=pEmailTable, pSlot6OutputMode=pSlot6OutputMode, pTrapTargetDialoutTarget=pTrapTargetDialoutTarget, pSlot6Thresh2=pSlot6Thresh2, pSlot6Entry=pSlot6Entry, pderivedAnalogSendEmail=pderivedAnalogSendEmail, OutputMode=OutputMode, pDCPFProtocolEntry=pDCPFProtocolEntry, pSlot2Level2=pSlot2Level2, snmpGeneral=snmpGeneral, webmonSecurityUserLevel=webmonSecurityUserLevel, pSlot4Thresh1=pSlot4Thresh1, pSlot5DataBits=pSlot5DataBits, TL1Issue=TL1Issue, pSlot3Configured=pSlot3Configured, pSlot6PortType=pSlot6PortType, DataBits=DataBits, pAccountsUnsecured=pAccountsUnsecured, pOnboardSensorLiveRaw=pOnboardSensorLiveRaw, pscheduleCConfigured4=pscheduleCConfigured4, pSlot4BaudRate=pSlot4BaudRate, pSlot1IpAddress=pSlot1IpAddress, pgpsConfigured=pgpsConfigured, pSlot6SendSNMPTrap=pSlot6SendSNMPTrap, pe2aHostTL1Locn=pe2aHostTL1Locn, Parity=Parity, resendEvents=resendEvents, pRemoteSensorTL1Srveff=pRemoteSensorTL1Srveff, pSerialTable=pSerialTable, pDCPFProtocolBaseDCPFDisplay=pDCPFProtocolBaseDCPFDisplay, battMon=battMon, pSlot5SerialRTS=pSlot5SerialRTS, pderivedAnalogLevel1=pderivedAnalogLevel1, pOnboardSensorLevel0=pOnboardSensorLevel0, pInternalFaultsLiveTime=pInternalFaultsLiveTime, pTrapTargetUseDialout=pTrapTargetUseDialout, pRemoteSensorLevel1=pRemoteSensorLevel1, pe2aHostRosterID=pe2aHostRosterID, DayOfWeek=DayOfWeek, pTrapTargetIPPortNum=pTrapTargetIPPortNum, pSlot5ReadPeriod=pSlot5ReadPeriod, pSlot5IPPortNum=pSlot5IPPortNum, pscheduleAConfigured4=pscheduleAConfigured4, pRemoteSensorDesc4=pRemoteSensorDesc4, pNetDevicesTL1COND=pNetDevicesTL1COND, pscheduleATime4=pscheduleATime4, pOnboardSensorDescription=pOnboardSensorDescription, pSlot2IpAddress=pSlot2IpAddress, pderivedAnalogLevel3=pderivedAnalogLevel3, pportRedirectIPPortNum=pportRedirectIPPortNum, pSlot6IpAddress=pSlot6IpAddress, pInternalFaultsIgnoreOff=pInternalFaultsIgnoreOff, pInternalFaultsDesc2=pInternalFaultsDesc2, pderivedDiscreteEntry=pderivedDiscreteEntry, pSerialProtocol=pSerialProtocol, pSlot6Desc2=pSlot6Desc2, pSlot6Thresh1=pSlot6Thresh1, pderivedAnalogDescription=pderivedAnalogDescription, pscheduleBIndex=pscheduleBIndex, pscheduleBTime1=pscheduleBTime1, pSerialIPPortNum=pSerialIPPortNum, pNetDevicesTL1Locn=pNetDevicesTL1Locn, emailGeneralPassword=emailGeneralPassword, pSlot3Table=pSlot3Table, pSlot2Thresh4=pSlot2Thresh4, pSlot4Level1=pSlot4Level1, pSlot5Protocol=pSlot5Protocol, pSlot6Units=pSlot6Units, pTrapTargetConfigured=pTrapTargetConfigured, pInternalFaultsLevel2=pInternalFaultsLevel2, SNMPAccess=SNMPAccess, pOnboardSensorSendSNMPTrap=pOnboardSensorSendSNMPTrap, wirelessModemTransmit=wirelessModemTransmit, pDCPFProtocolIndex=pDCPFProtocolIndex, psnmpCommandsIpAddress=psnmpCommandsIpAddress, pSlot3Description=pSlot3Description, pSlot4SerialCTS=pSlot4SerialCTS, pSlot6StopBits=pSlot6StopBits, pSlot5Entry=pSlot5Entry, pderivedDiscreteTL1Locn=pderivedDiscreteTL1Locn, analogAlarmState=analogAlarmState, pSlot3PortType=pSlot3PortType, CameraStyle=CameraStyle, pgpsLiveLevel=pgpsLiveLevel, pSlot1Level1=pSlot1Level1, pSlot3IPPortNum=pSlot3IPPortNum, pSlot1Thresh4=pSlot1Thresh4, pSlot2SensorType=pSlot2SensorType, pSlot5Description=pSlot5Description, pgpsDescription=pgpsDescription, pportRedirectIndex=pportRedirectIndex, notificationGroup=notificationGroup, pSlot5Units=pSlot5Units, pSlot2Thresh5=pSlot2Thresh5, pSlot2TL1Env=pSlot2TL1Env, pderivedDiscreteTL1Srveff=pderivedDiscreteTL1Srveff, pNetDevicesLiveDescription=pNetDevicesLiveDescription, digitalEventTrap=digitalEventTrap, pInternalFaultsLiveDescription=pInternalFaultsLiveDescription, pSlot3Thresh2=pSlot3Thresh2, pSlot1Thresh5=pSlot1Thresh5, pSlot1OutputAuto=pSlot1OutputAuto, SensorType=SensorType, pgpsLevel4=pgpsLevel4, pSlot3IOFormat=pSlot3IOFormat, pAccountsEncPassword=pAccountsEncPassword, pSlot3IpAddress=pSlot3IpAddress, pDCMProtocolConfigured=pDCMProtocolConfigured, pderivedAnalogUnits=pderivedAnalogUnits, pTABSProtocolEntry=pTABSProtocolEntry, pSlot3ReadPeriod=pSlot3ReadPeriod, pSlot5LiveDescription=pSlot5LiveDescription, digitalLiveState=digitalLiveState, MeasureStyle=MeasureStyle, pderivedDiscreteLiveDescription=pderivedDiscreteLiveDescription, psnmpCommandsIPPortNum=psnmpCommandsIPPortNum, pderivedAnalogLevel2=pderivedAnalogLevel2, pSlot1TL1Eqpt=pSlot1TL1Eqpt, pSlot1Level4=pSlot1Level4, pSlot2SerialRTS=pSlot2SerialRTS, pSlot3LiveDescription=pSlot3LiveDescription, pSlot2Desc5=pSlot2Desc5, pSlot6SendEmail=pSlot6SendEmail, dantel=dantel, pscheduleATime3=pscheduleATime3, pSlot5Level4=pSlot5Level4, systemGeneralDescription=systemGeneralDescription, pSlotInfoDescription=pSlotInfoDescription, pdialOutEntry=pdialOutEntry, pgpsThresh0=pgpsThresh0, pscheduleCTime0=pscheduleCTime0, pderivedAnalogElementAPoint=pderivedAnalogElementAPoint, pscheduleDConfiguredState=pscheduleDConfiguredState, IOFormat=IOFormat, pRemoteSensorLevel0=pRemoteSensorLevel0, pderivedAnalogElementAPkg=pderivedAnalogElementAPkg, pSlot2BaudRate=pSlot2BaudRate, battMonOutputAuto=battMonOutputAuto, pRemoteSensorLevel2=pRemoteSensorLevel2, pscheduleCTime4=pscheduleCTime4, pSlot2LiveDescription=pSlot2LiveDescription, pRemoteSensorDesc3=pRemoteSensorDesc3, pSerialSerialCTS=pSerialSerialCTS, pSlot6Level5=pSlot6Level5, analogSourceDescription=analogSourceDescription, pderivedDiscreteLevel0=pderivedDiscreteLevel0, pSlot1Desc1=pSlot1Desc1, pSlot2Thresh2=pSlot2Thresh2, pportRedirectRosterID=pportRedirectRosterID, battMonConfigured=battMonConfigured, pOnboardSensorLiveDescription=pOnboardSensorLiveDescription, pSlot1LiveDescription=pSlot1LiveDescription, pSlot4Present=pSlot4Present, pSlot6BaudRate=pSlot6BaudRate, SerialRTS=SerialRTS, SNMPCommandType=SNMPCommandType, pSerialEntry=pSerialEntry, tl1Settings=tl1Settings, pSlot6DataBits=pSlot6DataBits, pSlot2IOFormat=pSlot2IOFormat, pderivedDiscreteTL1Dirn=pderivedDiscreteTL1Dirn, pscheduleADayOfWeek=pscheduleADayOfWeek, pe2aHostIpAddress=pe2aHostIpAddress, pderivedAnalogElementBPkg=pderivedAnalogElementBPkg, pSlot4Parity=pSlot4Parity, pSlot2TL1SID=pSlot2TL1SID, pderivedDiscreteTL1Eqpt=pderivedDiscreteTL1Eqpt, pSlot4IOFormat=pSlot4IOFormat, wirelessModemTime=wirelessModemTime, pderivedDiscreteTable=pderivedDiscreteTable, pSlot2Level4=pSlot2Level4, pSlot5SerialCTS=pSlot5SerialCTS, pSlot6Thresh5=pSlot6Thresh5, pgpsTL1Env=pgpsTL1Env, pderivedDiscreteDesc0=pderivedDiscreteDesc0, Configured=Configured, snmpGeneralGet=snmpGeneralGet, dateTime=dateTime, pDCPFProtocolDescription=pDCPFProtocolDescription, pTABSProtocolBaseTABSDisplay=pTABSProtocolBaseTABSDisplay, pRemoteSensorTL1COND=pRemoteSensorTL1COND, pscheduleATime0=pscheduleATime0, pscheduleDTime0=pscheduleDTime0, pRemoteSensorDesc1=pRemoteSensorDesc1, pOnboardSensorLiveTime=pOnboardSensorLiveTime, pSlot5Table=pSlot5Table, pSlot5LiveTime=pSlot5LiveTime, pderivedAnalogEntry=pderivedAnalogEntry, pInternalFaultsSendSNMPTrap=pInternalFaultsSendSNMPTrap, pTrapTargetAuthKey=pTrapTargetAuthKey, pSlot3Desc3=pSlot3Desc3, pscheduleATime2=pscheduleATime2, pNetDevicesSendEmail=pNetDevicesSendEmail, systemGeneralUseResetTime=systemGeneralUseResetTime, tl1SettingsTL1Issue=tl1SettingsTL1Issue, pSlot5Desc0=pSlot5Desc0, pportRedirectConfigured=pportRedirectConfigured, pSlot5ContactStyle=pSlot5ContactStyle, pInternalFaultsDesc1=pInternalFaultsDesc1, pSelfTestEntry=pSelfTestEntry, pSlot4Desc3=pSlot4Desc3, pSlot6Table=pSlot6Table, analogLiveState=analogLiveState, pOnboardSensorTL1Locn=pOnboardSensorTL1Locn, pOnboardSensorLevel5=pOnboardSensorLevel5, pSlot2IPPortNum=pSlot2IPPortNum, pSlot6LiveDescription=pSlot6LiveDescription, configObjectGroup=configObjectGroup, pRemoteSensorThresh1=pRemoteSensorThresh1, pSlot3Level1=pSlot3Level1, pSlot3Thresh0=pSlot3Thresh0)
mibBuilder.exportSymbols("WEBMON-EDGE-MATRIX-MIB", analogLiveReading=analogLiveReading, pSerialIndex=pSerialIndex, dantelProducts=dantelProducts, pNetDevicesDesc1=pNetDevicesDesc1, pSlotInfoTable=pSlotInfoTable, pderivedDiscreteDesc1=pderivedDiscreteDesc1, pSlot1OutputState=pSlot1OutputState, pSlot3LiveRaw=pSlot3LiveRaw, pSlot4LiveRaw=pSlot4LiveRaw, pSlot4IPPortNum=pSlot4IPPortNum, dateTimeConfigured=dateTimeConfigured, pInternalFaultsIndex=pInternalFaultsIndex, DiscreteFormula=DiscreteFormula, pSlot6Desc0=pSlot6Desc0, pOnboardSensorTL1Env=pOnboardSensorTL1Env, pe2aHostTable=pe2aHostTable, pSlot2Desc4=pSlot2Desc4, pSlot5Level1=pSlot5Level1, PYSNMP_MODULE_ID=moduleIdentity, StopBits=StopBits, pNetDevicesEntry=pNetDevicesEntry, snmpGeneralSet=snmpGeneralSet, pInternalFaultsEntry=pInternalFaultsEntry, pSlot2TL1Srveff=pSlot2TL1Srveff, pOnboardSensorLevel3=pOnboardSensorLevel3, pSlot4Protocol=pSlot4Protocol, pe2aHostTL1SID=pe2aHostTL1SID, objectGroup=objectGroup, pOnboardSensorLevel4=pOnboardSensorLevel4, dateTimeDate=dateTimeDate, pOnboardSensorThresh5=pOnboardSensorThresh5, pSlot4OutputState=pSlot4OutputState, pRemoteSensorTable=pRemoteSensorTable, pSlot6Desc1=pSlot6Desc1, systemGeneralMeasureStyle=systemGeneralMeasureStyle, pscheduleAConfigured1=pscheduleAConfigured1, pSerialPresent=pSerialPresent, pSlot4Desc1=pSlot4Desc1, pOnboardSensorLiveLevel=pOnboardSensorLiveLevel, systemGeneralVersion=systemGeneralVersion, pInternalFaultsTable=pInternalFaultsTable, pgpsLevel1=pgpsLevel1, pscheduleCConfigured3=pscheduleCConfigured3, pscheduleBTime2=pscheduleBTime2, pRemoteSensorTL1Locn=pRemoteSensorTL1Locn, cameraCameraStyle=cameraCameraStyle, licenseLicenseKey=licenseLicenseKey, pgpsLevel0=pgpsLevel0, psnmpCommandsTextNormal=psnmpCommandsTextNormal, pSlot4OutputMode=pSlot4OutputMode, pNetDevicesConfigured=pNetDevicesConfigured, pderivedDiscreteTL1SID=pderivedDiscreteTL1SID, pSlot4Configured=pSlot4Configured, pNetDevicesLevel0=pNetDevicesLevel0, pOnboardSensorTL1SID=pOnboardSensorTL1SID, pderivedAnalogThresh3=pderivedAnalogThresh3, pderivedAnalogTL1COND=pderivedAnalogTL1COND, pSlot5SendSNMPTrap=pSlot5SendSNMPTrap, systemGeneralProductType=systemGeneralProductType, pderivedDiscreteTL1COND=pderivedDiscreteTL1COND, pSlot6TL1Locn=pSlot6TL1Locn, pSlot1OutputMode=pSlot1OutputMode, pSlot4Thresh2=pSlot4Thresh2, pSlot4Index=pSlot4Index, pSerialDataBits=pSerialDataBits, pgpsThresh5=pgpsThresh5, pSlot5BaudRate=pSlot5BaudRate, commitAccountChanges=commitAccountChanges, pSlot1Units=pSlot1Units, analogUnitsOfMeasurement=analogUnitsOfMeasurement, pscheduleAConfiguredState=pscheduleAConfiguredState, pderivedAnalogThresh1=pderivedAnalogThresh1, pRemoteSensorThresh5=pRemoteSensorThresh5, pscheduleBTable=pscheduleBTable, pSlotInfoEntry=pSlotInfoEntry, pSlot6Level0=pSlot6Level0, pSelfTestTable=pSelfTestTable, pSlot3TL1SID=pSlot3TL1SID, SlotId=SlotId, pderivedAnalogDesc1=pderivedAnalogDesc1, pSlot5Configured=pSlot5Configured, pSlot3SendEmail=pSlot3SendEmail, pSlot2OutputAutoPkg=pSlot2OutputAutoPkg, pgpsDesc3=pgpsDesc3, pscheduleCConfigured1=pscheduleCConfigured1, pSlot1Protocol=pSlot1Protocol, pe2aHostTL1COND=pe2aHostTL1COND, SerialCTS=SerialCTS, pSlot4Entry=pSlot4Entry, pSlot6TL1SID=pSlot6TL1SID, remoteDeviceDescription=remoteDeviceDescription, digitalInputDescription=digitalInputDescription, pgpsLiveDescription=pgpsLiveDescription, emailGeneral=emailGeneral, pSerialBaudRate=pSerialBaudRate, pSlot6Level2=pSlot6Level2, faultLiveLevel=faultLiveLevel, pgpsLevel2=pgpsLevel2, pInternalFaultsDesc3=pInternalFaultsDesc3, pTrapTargetDescription=pTrapTargetDescription, pSlot1TL1Env=pSlot1TL1Env, pOnboardSensorDesc0=pOnboardSensorDesc0, dateTimeUTCOffset=dateTimeUTCOffset, pOnboardSensorDesc5=pOnboardSensorDesc5, pSlot6Desc3=pSlot6Desc3, pSlot6LiveTime=pSlot6LiveTime, digitalSourceIndex=digitalSourceIndex, pderivedAnalogDesc2=pderivedAnalogDesc2, pderivedAnalogTL1Env=pderivedAnalogTL1Env, pSlot5Present=pSlot5Present, pNetDevicesIndex=pNetDevicesIndex, pAccountsSNMPAccess=pAccountsSNMPAccess, DigitalState=DigitalState, pSerialStopBits=pSerialStopBits, pgpsSendSNMPTrap=pgpsSendSNMPTrap, psnmpCommandsOutputAuto=psnmpCommandsOutputAuto, psnmpCommandsTextMinor=psnmpCommandsTextMinor, pAccountsConfigured=pAccountsConfigured, pderivedAnalogDesc3=pderivedAnalogDesc3, pEmailDescription=pEmailDescription, tabsSettings=tabsSettings, pInternalFaultsUseResetTime=pInternalFaultsUseResetTime, pgpsLiveRaw=pgpsLiveRaw, pscheduleDConfigured1=pscheduleDConfigured1, pSlot1Index=pSlot1Index, pSlot5IOFormat=pSlot5IOFormat, pEmailConfigured=pEmailConfigured, pNetDevicesLiveTime=pNetDevicesLiveTime, pderivedAnalogTL1SID=pderivedAnalogTL1SID, pNetDevicesDesc0=pNetDevicesDesc0, SnmpVersion=SnmpVersion, pEmailAddress=pEmailAddress, pNetDevicesTL1SID=pNetDevicesTL1SID, pSlot4Level0=pSlot4Level0, digitalInputs=digitalInputs, pSlot6TL1Eqpt=pSlot6TL1Eqpt, pSlot3Level0=pSlot3Level0, pSlot4OutputAuto=pSlot4OutputAuto, pSlot2Description=pSlot2Description, pRemoteSensorUnits=pRemoteSensorUnits, pSlot2Units=pSlot2Units, pSlot3Entry=pSlot3Entry, VoltageRange=VoltageRange, pgpsTL1Locn=pgpsTL1Locn, pSlot3TL1Srveff=pSlot3TL1Srveff, pSlot6SensorType=pSlot6SensorType, snmpGeneralReadPeriod=snmpGeneralReadPeriod, faultDescription=faultDescription, pSlot6Thresh4=pSlot6Thresh4, pSlot3StopBits=pSlot3StopBits, camera=camera, ConnectivityState=ConnectivityState, pDCPFProtocolConfigured=pDCPFProtocolConfigured, pscheduleDTime5=pscheduleDTime5, pSlot6Thresh3=pSlot6Thresh3, pgpsTable=pgpsTable, dcpfSettings=dcpfSettings, pRemoteSensorLiveTime=pRemoteSensorLiveTime, pSlot2Entry=pSlot2Entry, traps=traps, pInternalFaultsLiveLevel=pInternalFaultsLiveLevel, pSlot2Thresh0=pSlot2Thresh0, pSlot1OutputAutoPkg=pSlot1OutputAutoPkg, pOnboardSensorTL1Srveff=pOnboardSensorTL1Srveff, pSerialReadPeriod=pSerialReadPeriod, pSlot5TL1Locn=pSlot5TL1Locn, systemGeneral=systemGeneral, pSlot2Parity=pSlot2Parity, pgpsIndex=pgpsIndex, pInternalFaultsLevel3=pInternalFaultsLevel3, pdialOutTable=pdialOutTable, pe2aHostEntry=pe2aHostEntry, pscheduleCEntry=pscheduleCEntry, pSlot1SerialCTS=pSlot1SerialCTS, pderivedAnalogLiveLevel=pderivedAnalogLiveLevel, pAccountsName=pAccountsName, TL1Locn=TL1Locn, pSlot2Level5=pSlot2Level5, pdialOutIndex=pdialOutIndex, dateTimeIpAddress=dateTimeIpAddress, pderivedAnalogTL1Locn=pderivedAnalogTL1Locn, pOnboardSensorThresh4=pOnboardSensorThresh4, pSlot1Thresh1=pSlot1Thresh1, pscheduleCTable=pscheduleCTable, pSlot1LiveRaw=pSlot1LiveRaw, pSlot2TL1Locn=pSlot2TL1Locn, pSlot1Thresh3=pSlot1Thresh3, pe2aHostDescription=pe2aHostDescription, pscheduleATable=pscheduleATable, pSlotInfoSlotId=pSlotInfoSlotId, pNetDevicesIpAddress=pNetDevicesIpAddress, snmpGeneralEngineID=snmpGeneralEngineID, pSlot2Present=pSlot2Present, pSlot2TL1Eqpt=pSlot2TL1Eqpt, pSlot4Thresh3=pSlot4Thresh3, pscheduleBTime0=pscheduleBTime0, pOnboardSensorDesc2=pOnboardSensorDesc2, pe2aHostLevel1=pe2aHostLevel1, psnmpCommandsConfigured=psnmpCommandsConfigured, pSelfTestIndex=pSelfTestIndex, pNetDevicesLiveLevel=pNetDevicesLiveLevel, pSlot3SendSNMPTrap=pSlot3SendSNMPTrap, pRemoteSensorDesc5=pRemoteSensorDesc5, pSlot3BaudRate=pSlot3BaudRate, pderivedDiscreteLiveLevel=pderivedDiscreteLiveLevel, pTABSProtocolIndex=pTABSProtocolIndex, pOnboardSensorTL1Eqpt=pOnboardSensorTL1Eqpt, pderivedAnalogLevel4=pderivedAnalogLevel4, pSlot1TL1Srveff=pSlot1TL1Srveff, pSlot6Level3=pSlot6Level3, pSlot5Level0=pSlot5Level0, pSlot5OutputState=pSlot5OutputState, pSlot5SensorType=pSlot5SensorType, pSlot1TL1Locn=pSlot1TL1Locn, pderivedAnalogThresh0=pderivedAnalogThresh0, pSlot6OutputState=pSlot6OutputState, pSlot4Thresh4=pSlot4Thresh4, pSlot5OutputAuto=pSlot5OutputAuto, pSlot5TL1Eqpt=pSlot5TL1Eqpt, pportRedirectDescription=pportRedirectDescription, pderivedDiscreteTL1Env=pderivedDiscreteTL1Env, pNetDevicesSendSNMPTrap=pNetDevicesSendSNMPTrap, pSlot5Thresh0=pSlot5Thresh0, systemGeneralContact=systemGeneralContact, pSlot1Level2=pSlot1Level2, DescriptionString=DescriptionString, pTrapTargetBackupIPAddress=pTrapTargetBackupIPAddress, pderivedDiscreteLevel1=pderivedDiscreteLevel1, pTrapTargetIndex=pTrapTargetIndex, psnmpCommandsOutputAutoPkg=psnmpCommandsOutputAutoPkg, pe2aHostTL1Env=pe2aHostTL1Env, pSelfTestDescription=pSelfTestDescription, pderivedAnalogElementBPoint=pderivedAnalogElementBPoint, pscheduleATime1=pscheduleATime1, remoteDeviceAlarmState=remoteDeviceAlarmState, pSerialIpAddress=pSerialIpAddress, pDCMProtocolBaseDCMAddress=pDCMProtocolBaseDCMAddress, pSlot3LiveLevel=pSlot3LiveLevel, wirelessModemUseWirelessNetwork=wirelessModemUseWirelessNetwork, pderivedAnalogTL1Dirn=pderivedAnalogTL1Dirn, pe2aHostIPPortNum=pe2aHostIPPortNum, pSlot2Index=pSlot2Index, pSlot2TL1COND=pSlot2TL1COND, pSlot5TL1Dirn=pSlot5TL1Dirn, pOnboardSensorTable=pOnboardSensorTable, pSlot3Thresh5=pSlot3Thresh5, dateTimeNegOffset=dateTimeNegOffset, pSlot2Desc2=pSlot2Desc2, pTrapTargetEngineID=pTrapTargetEngineID, pgpsTL1COND=pgpsTL1COND, faultSourceDescription=faultSourceDescription, pSlot5Thresh1=pSlot5Thresh1, pSlot1BaudRate=pSlot1BaudRate, pe2aHostLevel0=pe2aHostLevel0)
mibBuilder.exportSymbols("WEBMON-EDGE-MATRIX-MIB", pOnboardSensorDesc3=pOnboardSensorDesc3, pderivedDiscreteLiveTime=pderivedDiscreteLiveTime, pSlot3Thresh4=pSlot3Thresh4, pSlot4Level5=pSlot4Level5, pSlot4TL1Eqpt=pSlot4TL1Eqpt, pscheduleBConfigured3=pscheduleBConfigured3, systemGeneralLocation=systemGeneralLocation, pSlot2SendSNMPTrap=pSlot2SendSNMPTrap, pSlot5Level5=pSlot5Level5, pSlot5Desc3=pSlot5Desc3, licenseExpires=licenseExpires, pNetDevicesTL1Eqpt=pNetDevicesTL1Eqpt, licenseAllowTL1=licenseAllowTL1, pgpsThresh3=pgpsThresh3, pSlot2Level3=pSlot2Level3, pSlot1Desc0=pSlot1Desc0, pSerialPortType=pSerialPortType, pSlot5Level2=pSlot5Level2, pRemoteSensorDesc0=pRemoteSensorDesc0, pscheduleAIndex=pscheduleAIndex, pderivedAnalogThresh2=pderivedAnalogThresh2, pgpsDesc2=pgpsDesc2, pDCPFProtocolTable=pDCPFProtocolTable, pSlot4ReadPeriod=pSlot4ReadPeriod, pOnboardSensorThresh1=pOnboardSensorThresh1, analogInputDescription=analogInputDescription, pportRedirectIpAddress=pportRedirectIpAddress, pSlot3SensorType=pSlot3SensorType, pSlot4Level4=pSlot4Level4, pSlot2VoltageRange=pSlot2VoltageRange, pSlot6Desc4=pSlot6Desc4, Boolean=Boolean, pNetPortsDescription=pNetPortsDescription, systemGeneralSubnetMask=systemGeneralSubnetMask, pdialOutConfigured=pdialOutConfigured, pNetPortsIPPortNum=pNetPortsIPPortNum, webmonSecurityUnsecured=webmonSecurityUnsecured, pSlot6Parity=pSlot6Parity, pDCMProtocolDescription=pDCMProtocolDescription, pderivedAnalogDesc4=pderivedAnalogDesc4, pAccountsPrivKey=pAccountsPrivKey, pSlot4TL1SID=pSlot4TL1SID, pSlot5Desc5=pSlot5Desc5, pSlot6Description=pSlot6Description, pOnboardSensorUnits=pOnboardSensorUnits, pDCMProtocolEntry=pDCMProtocolEntry, snmpGeneralIPPortNum=snmpGeneralIPPortNum, pgpsDesc4=pgpsDesc4, psnmpCommandsTextCritical=psnmpCommandsTextCritical, pNetDevicesTL1Srveff=pNetDevicesTL1Srveff, pSlot3SerialCTS=pSlot3SerialCTS, pSerialSerialRTS=pSerialSerialRTS, pgpsThresh1=pgpsThresh1, faultSourceIndex=faultSourceIndex, pSlot6LiveRaw=pSlot6LiveRaw, pRemoteSensorLevel3=pRemoteSensorLevel3, pNetPortsEntry=pNetPortsEntry, pscheduleDConfigured4=pscheduleDConfigured4, pe2aHostTL1Srveff=pe2aHostTL1Srveff, systemGeneralReadPeriod=systemGeneralReadPeriod, pSlot6TL1Srveff=pSlot6TL1Srveff, pRemoteSensorThresh2=pRemoteSensorThresh2, pSlot3OutputMode=pSlot3OutputMode, pscheduleDTime1=pscheduleDTime1, pSlot6Thresh0=pSlot6Thresh0, pe2aHostPollAddress=pe2aHostPollAddress, pSlot2Protocol=pSlot2Protocol, pSlot6VoltageRange=pSlot6VoltageRange, pscheduleCConfiguredState=pscheduleCConfiguredState, pRemoteSensorLevel4=pRemoteSensorLevel4, psnmpCommandsTextStatus=psnmpCommandsTextStatus, pSlot6Protocol=pSlot6Protocol, pOnboardSensorDesc4=pOnboardSensorDesc4, pSlot4Desc2=pSlot4Desc2, pSlot2Desc0=pSlot2Desc0, pscheduleCTime2=pscheduleCTime2, pSlot4SerialRTS=pSlot4SerialRTS, pOnboardSensorConfigured=pOnboardSensorConfigured, pTrapTargetIpAddress=pTrapTargetIpAddress, pSlot4SendSNMPTrap=pSlot4SendSNMPTrap, remoteDeviceLiveState=remoteDeviceLiveState, pSlot1Description=pSlot1Description, pSlot2Thresh1=pSlot2Thresh1, pscheduleCDayOfWeek=pscheduleCDayOfWeek, pSlot1ReadPeriod=pSlot1ReadPeriod, pSlot6Level1=pSlot6Level1, pSlot3Level4=pSlot3Level4, pSlot2TL1Dirn=pSlot2TL1Dirn, pSlot4DataBits=pSlot4DataBits, pscheduleCTime3=pscheduleCTime3, pSlot4LiveTime=pSlot4LiveTime, pSlot3Desc2=pSlot3Desc2, pSlot5Index=pSlot5Index, webmonSecurity=webmonSecurity, pe2aHostConfigured=pe2aHostConfigured, pSlot2Desc1=pSlot2Desc1, pscheduleBTime3=pscheduleBTime3, pscheduleDConfigured3=pscheduleDConfigured3, pNetDevicesLiveRaw=pNetDevicesLiveRaw, pInternalFaultsSendEmail=pInternalFaultsSendEmail, psnmpCommandsTextMajor=psnmpCommandsTextMajor, psnmpCommandsEntry=psnmpCommandsEntry, pscheduleBEntry=pscheduleBEntry, pOnboardSensorLevel1=pOnboardSensorLevel1, pSlot6Configured=pSlot6Configured, Protocol=Protocol, systemGeneralIPPortNum=systemGeneralIPPortNum, pTABSProtocolDescription=pTABSProtocolDescription, pRemoteSensorSendEmail=pRemoteSensorSendEmail, pderivedAnalogConfigured=pderivedAnalogConfigured, pSlot2ContactStyle=pSlot2ContactStyle, pderivedAnalogThresh5=pderivedAnalogThresh5, pportRedirectEntry=pportRedirectEntry, pSelfTestConfigured=pSelfTestConfigured, ContactStyle=ContactStyle, pscheduleBDayOfWeek=pscheduleBDayOfWeek, pscheduleAConfigured3=pscheduleAConfigured3, tabsSettingsTABSAddress=tabsSettingsTABSAddress, pSlot2ReadPeriod=pSlot2ReadPeriod, pSlot5Thresh5=pSlot5Thresh5, faultTrap=faultTrap, pDCMProtocolIndex=pDCMProtocolIndex, pSlot1DataBits=pSlot1DataBits, pSlot4VoltageRange=pSlot4VoltageRange, pSlot1Configured=pSlot1Configured, pTrapTargetPrivKey=pTrapTargetPrivKey, pInternalFaultsReadPeriod=pInternalFaultsReadPeriod, pNetPortsReadPeriod=pNetPortsReadPeriod, pRemoteSensorTL1Eqpt=pRemoteSensorTL1Eqpt, EthernetRate=EthernetRate, pderivedAnalogLiveTime=pderivedAnalogLiveTime, pderivedDiscreteElementBPoint=pderivedDiscreteElementBPoint, pgpsThresh2=pgpsThresh2, pSlot2Level0=pSlot2Level0, pderivedDiscreteConfigured=pderivedDiscreteConfigured, pSlot5Thresh4=pSlot5Thresh4, pSlot6SerialCTS=pSlot6SerialCTS, digitalLiveLevel=digitalLiveLevel, pSlot3TL1Env=pSlot3TL1Env, pgpsThresh4=pgpsThresh4, pSlot1Table=pSlot1Table, systemGeneralEthernetType=systemGeneralEthernetType, pSlot1Desc2=pSlot1Desc2, pSlot1Desc4=pSlot1Desc4, pscheduleDEntry=pscheduleDEntry, pSlot1SendEmail=pSlot1SendEmail, pOnboardSensorSendEmail=pOnboardSensorSendEmail, pscheduleCConfigured2=pscheduleCConfigured2, cameraConfigured=cameraConfigured, license=license, systemGeneralEthernetRate=systemGeneralEthernetRate, pSlot6TL1Env=pSlot6TL1Env, systemGeneralIpAddress=systemGeneralIpAddress, pscheduleDTime3=pscheduleDTime3, pSlot4PortType=pSlot4PortType, pderivedAnalogDesc0=pderivedAnalogDesc0, pderivedDiscreteElementAPoint=pderivedDiscreteElementAPoint, pscheduleAEntry=pscheduleAEntry, AnalogState=AnalogState, pSlot3Thresh1=pSlot3Thresh1, pRemoteSensorPollAddress=pRemoteSensorPollAddress, pe2aHostTL1Eqpt=pe2aHostTL1Eqpt, analogInputs=analogInputs, pscheduleDTime4=pscheduleDTime4, OutputState=OutputState, pscheduleAConfigured2=pscheduleAConfigured2, pSlot5Desc2=pSlot5Desc2, pAccountsEntry=pAccountsEntry, pNetDevicesDescription=pNetDevicesDescription, pRemoteSensorLiveRaw=pRemoteSensorLiveRaw, pSlot1SendSNMPTrap=pSlot1SendSNMPTrap, pscheduleDIndex=pscheduleDIndex, wirelessModem=wirelessModem, pSlot1Level0=pSlot1Level0, pSlot5IpAddress=pSlot5IpAddress, pSlot3VoltageRange=pSlot3VoltageRange, pSlot4Units=pSlot4Units, pdialOutDialOutNumber=pdialOutDialOutNumber, faults=faults, pderivedAnalogIndex=pderivedAnalogIndex, pSlotInfoIndex=pSlotInfoIndex, pDCMProtocolTable=pDCMProtocolTable, pSlot4TL1Srveff=pSlot4TL1Srveff, pscheduleDTime2=pscheduleDTime2, wirelessModemSecondary=wirelessModemSecondary, moduleIdentity=moduleIdentity, pAccountsTable=pAccountsTable, pscheduleCTime5=pscheduleCTime5, pSlot4SensorType=pSlot4SensorType, pSlot2OutputAuto=pSlot2OutputAuto, pSlot3ContactStyle=pSlot3ContactStyle, pSlot1Desc3=pSlot1Desc3, pderivedDiscreteIndex=pderivedDiscreteIndex, pSlot4ContactStyle=pSlot4ContactStyle, pSlot1SerialRTS=pSlot1SerialRTS, pSlot4TL1Env=pSlot4TL1Env, pderivedDiscreteElementAPkg=pderivedDiscreteElementAPkg, pSlot3Desc1=pSlot3Desc1, psnmpCommandsDescription=psnmpCommandsDescription, pOnboardSensorTL1COND=pOnboardSensorTL1COND, pTABSProtocolTable=pTABSProtocolTable, pSlot4Table=pSlot4Table, pNetPortsIndex=pNetPortsIndex, pderivedAnalogTable=pderivedAnalogTable, pSlot2OutputState=pSlot2OutputState, pSlot3Level2=pSlot3Level2, pRemoteSensorEntry=pRemoteSensorEntry, pSlot6LiveLevel=pSlot6LiveLevel, resetDevice=resetDevice, pRemoteSensorThresh4=pRemoteSensorThresh4, pSlot5Desc1=pSlot5Desc1, pSlot2LiveRaw=pSlot2LiveRaw, pSlot3OutputState=pSlot3OutputState, pSlot5Desc4=pSlot5Desc4, remoteDeviceSourceDescription=remoteDeviceSourceDescription, triggers=triggers, pRemoteSensorSendSNMPTrap=pRemoteSensorSendSNMPTrap, pSlot4Thresh0=pSlot4Thresh0, pscheduleDConfigured2=pscheduleDConfigured2, remoteDevices=remoteDevices, snmpGeneralConfigured=snmpGeneralConfigured, pRemoteSensorLiveLevel=pRemoteSensorLiveLevel, emailGeneralConfigured=emailGeneralConfigured, pSlot5TL1Env=pSlot5TL1Env, pSlot3TL1Locn=pSlot3TL1Locn, pAccountsAuthKey=pAccountsAuthKey, psnmpCommandsSnmpVersion=psnmpCommandsSnmpVersion, pNetDevicesLevel1=pNetDevicesLevel1, pSlot4Desc5=pSlot4Desc5, wirelessModemUseResetTime=wirelessModemUseResetTime, psnmpCommandsGet=psnmpCommandsGet, EthernetType=EthernetType, pSlot4OutputAutoPkg=pSlot4OutputAutoPkg, pSlot3SerialRTS=pSlot3SerialRTS, pscheduleBConfigured1=pscheduleBConfigured1, pRemoteSensorThresh0=pRemoteSensorThresh0, pscheduleBConfiguredState=pscheduleBConfiguredState, pSlot3LiveTime=pSlot3LiveTime, pRemoteSensorDesc2=pRemoteSensorDesc2, pSlot5Level3=pSlot5Level3, pportRedirectTable=pportRedirectTable, BaudRate=BaudRate, psnmpCommandsOID=psnmpCommandsOID, pderivedAnalogLiveRaw=pderivedAnalogLiveRaw, pSlot3TL1Dirn=pSlot3TL1Dirn, pgpsEntry=pgpsEntry, pSerialDescription=pSerialDescription, pderivedDiscreteSendEmail=pderivedDiscreteSendEmail, pgpsDesc1=pgpsDesc1, pSlot4LiveLevel=pSlot4LiveLevel, pSlot5LiveLevel=pSlot5LiveLevel, analogLiveLevel=analogLiveLevel, faultAlarmState=faultAlarmState, pderivedDiscreteDiscreteFormula=pderivedDiscreteDiscreteFormula)
mibBuilder.exportSymbols("WEBMON-EDGE-MATRIX-MIB", pSlot1Desc5=pSlot1Desc5, pSlot1StopBits=pSlot1StopBits, systemGeneralMacAddress=systemGeneralMacAddress, pSlot4Level2=pSlot4Level2, pSlot1LiveLevel=pSlot1LiveLevel, pSlot6ReadPeriod=pSlot6ReadPeriod, pSlot1VoltageRange=pSlot1VoltageRange, pSlot4SendEmail=pSlot4SendEmail, pSlot3TL1COND=pSlot3TL1COND, pdialOutPassword=pdialOutPassword, webMon=webMon, pderivedDiscreteElementBPkg=pderivedDiscreteElementBPkg, pRemoteSensorTL1SID=pRemoteSensorTL1SID, pSerialConfigured=pSerialConfigured, pSlot1Entry=pSlot1Entry, pSlot3Level3=pSlot3Level3, pSlotInfoRecord=pSlotInfoRecord, pRemoteSensorMODBUSCommand=pRemoteSensorMODBUSCommand, pdialOutName=pdialOutName, pSlot5TL1Srveff=pSlot5TL1Srveff, pRemoteSensorStartRegister=pRemoteSensorStartRegister, pSlot2StopBits=pSlot2StopBits, dateTimeTime=dateTimeTime, pderivedAnalogTL1Srveff=pderivedAnalogTL1Srveff, pSlot1ContactStyle=pSlot1ContactStyle, pderivedAnalogThresh4=pderivedAnalogThresh4, pInternalFaultsDescription=pInternalFaultsDescription, pRemoteSensorTL1Dirn=pRemoteSensorTL1Dirn, pSlotInfoPresent=pSlotInfoPresent, pportRedirectReadPeriod=pportRedirectReadPeriod, pAccountsUserLevel=pAccountsUserLevel, pNetDevicesTable=pNetDevicesTable, SNMPVarbindType=SNMPVarbindType, pOnboardSensorTL1Dirn=pOnboardSensorTL1Dirn, pSlot1TL1Dirn=pSlot1TL1Dirn, pSlot1TL1SID=pSlot1TL1SID, ConfiguredState=ConfiguredState, pSlot6IPPortNum=pSlot6IPPortNum, pe2aHostTL1Dirn=pe2aHostTL1Dirn, pSlot6SerialRTS=pSlot6SerialRTS, pderivedDiscreteSendSNMPTrap=pderivedDiscreteSendSNMPTrap, pNetDevicesTL1Env=pNetDevicesTL1Env, pRemoteSensorConfigured=pRemoteSensorConfigured, wirelessModemBackupIPAddress=wirelessModemBackupIPAddress, pderivedAnalogLiveDescription=pderivedAnalogLiveDescription, pscheduleDTable=pscheduleDTable, battMonOutputAutoPkg=battMonOutputAutoPkg, pSlot3Desc4=pSlot3Desc4, pSlot3Level5=pSlot3Level5, pderivedAnalogLevel0=pderivedAnalogLevel0, pgpsDesc0=pgpsDesc0, pSlot3Index=pSlot3Index, pSlot6Present=pSlot6Present, pSlot6OutputAutoPkg=pSlot6OutputAutoPkg, pSlot4TL1Dirn=pSlot4TL1Dirn, pscheduleCTime1=pscheduleCTime1, remoteDeviceLiveLevel=remoteDeviceLiveLevel, pSlot4TL1Locn=pSlot4TL1Locn, pSlot1Level3=pSlot1Level3, pSlot3TL1Eqpt=pSlot3TL1Eqpt, pSlot5Thresh3=pSlot5Thresh3, emailGeneralAddress=emailGeneralAddress, pSlot1Present=pSlot1Present, pSlot6Level4=pSlot6Level4, pSlot2Desc3=pSlot2Desc3, pSlot4TL1COND=pSlot4TL1COND, pSlot5PortType=pSlot5PortType, psnmpCommandsSNMPVarbindType=psnmpCommandsSNMPVarbindType, pAccountsIndex=pAccountsIndex, licenseDescription=licenseDescription, pSlot5VoltageRange=pSlot5VoltageRange, digitalAlarmState=digitalAlarmState, pSlot3DataBits=pSlot3DataBits, pOnboardSensorIndex=pOnboardSensorIndex, pSlot1PortType=pSlot1PortType, pSlot1Thresh2=pSlot1Thresh2, analogLiveStateDescription=analogLiveStateDescription, pgpsTL1Eqpt=pgpsTL1Eqpt, pderivedAnalogSendSNMPTrap=pderivedAnalogSendSNMPTrap, pSlot4Desc4=pSlot4Desc4, Level=Level, pgpsSendEmail=pgpsSendEmail, pNetPortsTable=pNetPortsTable, cameraIpAddress=cameraIpAddress, PortType=PortType, faultStateDescription=faultStateDescription, pSlot4Level3=pSlot4Level3, pSlot3Thresh3=pSlot3Thresh3, pInternalFaultsLevel0=pInternalFaultsLevel0, pscheduleATime5=pscheduleATime5, pSlot1IPPortNum=pSlot1IPPortNum, analogSourceIndex=analogSourceIndex, pTrapTargetSnmpVersion=pTrapTargetSnmpVersion, pe2aHostIndex=pe2aHostIndex, digitalSourceDescription=digitalSourceDescription, digitalLiveStateDescription=digitalLiveStateDescription, pOnboardSensorThresh2=pOnboardSensorThresh2, pSlot4LiveDescription=pSlot4LiveDescription, pSlot6Index=pSlot6Index, pSlot3Desc0=pSlot3Desc0, pderivedAnalogFormula=pderivedAnalogFormula, pSlot6ContactStyle=pSlot6ContactStyle, pderivedDiscreteDescription=pderivedDiscreteDescription, pSlot4StopBits=pSlot4StopBits, psnmpCommandsTable=psnmpCommandsTable, pSlot5TL1SID=pSlot5TL1SID, pSlot3Parity=pSlot3Parity, pSlot2PortType=pSlot2PortType, pSlot2SerialCTS=pSlot2SerialCTS, pe2aHostLevel2=pe2aHostLevel2, pscheduleBConfigured4=pscheduleBConfigured4, pSlot1SensorType=pSlot1SensorType, pSlot6TL1COND=pSlot6TL1COND, pSlot2Configured=pSlot2Configured, pSlot2OutputMode=pSlot2OutputMode, pOnboardSensorLevel2=pOnboardSensorLevel2, ProductType=ProductType, pSlot5Parity=pSlot5Parity, pOnboardSensorDesc1=pOnboardSensorDesc1, pTrapTargetEntry=pTrapTargetEntry, pscheduleDDayOfWeek=pscheduleDDayOfWeek, pSlot3Desc5=pSlot3Desc5, pInternalFaultsDesc0=pInternalFaultsDesc0, pSlot5LiveRaw=pSlot5LiveRaw, remoteDeviceSourceIndex=remoteDeviceSourceIndex, pSlot6TL1Dirn=pSlot6TL1Dirn, pRemoteSensorIndex=pRemoteSensorIndex, pSlot3Protocol=pSlot3Protocol, wirelessModemResponseWaitTime=wirelessModemResponseWaitTime, MODBUSCommand=MODBUSCommand, psnmpCommandsIndex=psnmpCommandsIndex, pderivedAnalogTL1Eqpt=pderivedAnalogTL1Eqpt, emailGeneralIpAddress=emailGeneralIpAddress, pscheduleBConfigured2=pscheduleBConfigured2, pOnboardSensorThresh0=pOnboardSensorThresh0, pscheduleBTime5=pscheduleBTime5, dcpfSettingsDCPFAddress=dcpfSettingsDCPFAddress, pSlot3Present=pSlot3Present, pSlot5SendEmail=pSlot5SendEmail, pSlot6OutputAuto=pSlot6OutputAuto, analogEventTrap=analogEventTrap, pSlot5OutputAutoPkg=pSlot5OutputAutoPkg, TL1Dirn=TL1Dirn, emailGeneralIPPortNum=emailGeneralIPPortNum, pTrapTargetTable=pTrapTargetTable, pSlot3Units=pSlot3Units, pSlot6Desc5=pSlot6Desc5, pOnboardSensorThresh3=pOnboardSensorThresh3, pgpsUnits=pgpsUnits, pSlot4Thresh5=pSlot4Thresh5, pSerialParity=pSerialParity, pSlot4Description=pSlot4Description, pSlot5Thresh2=pSlot5Thresh2, pEmailEntry=pEmailEntry, pSlot1TL1COND=pSlot1TL1COND, pSlot5StopBits=pSlot5StopBits, pSlot6IOFormat=pSlot6IOFormat, pscheduleBTime4=pscheduleBTime4)
