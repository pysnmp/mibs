#
# PySNMP MIB module UPS2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/UPS2-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 13:07:39 2024
# On host fv-az883-299 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ctUPS, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctUPS")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter32, Integer32, Counter64, IpAddress, ObjectIdentity, MibIdentifier, ModuleIdentity, TimeTicks, NotificationType, iso, Unsigned32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter32", "Integer32", "Counter64", "IpAddress", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "TimeTicks", "NotificationType", "iso", "Unsigned32", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
upsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 1))
upsId = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 2))
upsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 3))
upsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 4))
upsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 5))
upsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 6))
upsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 7))
upsExtMeas = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 8))
upsAddlFuncs = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 9))
upsNumUPSs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsNumUPSs.setStatus('mandatory')
if mibBuilder.loadTexts: upsNumUPSs.setDescription('The number of UPSs available.')
upsIdTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 2, 1), )
if mibBuilder.loadTexts: upsIdTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdTable.setDescription('A list of identification table entries.  The number of\n                 entries is given by the value of upsNumUPSs.')
upsIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 2, 1, 1), ).setIndexNames((0, "UPS2-MIB", "upsIndex"))
if mibBuilder.loadTexts: upsIdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdEntry.setDescription('An entry containing objects for a particular UPS.')
upsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: upsIndex.setDescription('A unique value which identifies a particular UPS.')
upsName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsName.setStatus('mandatory')
if mibBuilder.loadTexts: upsName.setDescription("The UPS's name.  A maximum of 8 characters may be specified.\n                 This object is initialized to the UPS's model name.")
upsModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("smartUps250", 1), ("smartUps400", 2), ("smartUps600", 3), ("smartUps900", 4), ("smartUps1250", 5), ("smartUps2000", 6), ("matrixUps3000", 7), ("matrixUps5000", 8), ("other", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsModelType.setStatus('mandatory')
if mibBuilder.loadTexts: upsModelType.setDescription("The UPS's base model type.")
upsFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsFwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: upsFwVersion.setDescription("The UPS's firmware version.")
upsSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: upsSerialNumber.setDescription("The UPS's serial number as set at the factory.")
upsManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsManufDate.setStatus('mandatory')
if mibBuilder.loadTexts: upsManufDate.setDescription("The UPS's date of manufacture in the format mm/dd/yy.")
upsBatteryTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 3, 1), )
if mibBuilder.loadTexts: upsBatteryTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryTable.setDescription('A list of battery table entries.  The number of\n                 entries is given by the value of upsNumUPSs.')
upsBatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 3, 1, 1), ).setIndexNames((0, "UPS2-MIB", "upsIndex"))
if mibBuilder.loadTexts: upsBatteryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryEntry.setDescription('An entry containing objects for a particular UPS.')
upsBatteryCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryCapacity.setDescription("The UPS's remaining battery capacity expressed as a percent\n                 of the fully charged condition.  The value of this object is\n                 the actual percentage * 10 (that is, to determine the actual\n                 percentage, divide the value of this object by 10).")
upsBatteryVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryVoltage.setDescription("The UPS's present battery voltage.  The value of this object\n                 is the actual voltage * 100 (that is, to determine the actual\n                 voltage, divide the value of this object by 100).")
upsBatteryTest = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("initiateTest", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryTest.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryTest.setDescription("This object may be written to initiate testing of the UPS's\n                 battery packs.  Reading this object will always return a 0.")
upsBatteryTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("batteryOK", 1), ("batteryBad", 2), ("noRecentTest", 3), ("invalidTestDueToOverload", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryTestResult.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryTestResult.setDescription('The result of the last battery test performed.')
upsRunTimeCalibration = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("performTest", 1), ("abortTest", 2), ("testInProgress", 3), ("testNotInProgress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsRunTimeCalibration.setStatus('mandatory')
if mibBuilder.loadTexts: upsRunTimeCalibration.setDescription('This object may be written to initiate or terminate the test\n                 used to calibrate the returned run time value.  This test\n                 will only run if battery capacity is 100%.  Results of this \n                 test can be retrieved by upsEstimatedRunTimeRemaining.  Valid\n                 values for writing are 1 (initiate test) and 2 (terminate test).\n                 In addition, this object may be read to determine whether\n                 the test is currently running.  Valid values for reading\n                 are 3 (test is in progress) and 4 (test is not in progress).')
upsEstimatedRunTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEstimatedRunTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: upsEstimatedRunTimeRemaining.setDescription("The UPS's estimated remaining run time in minutes.  The UPS\n                 may be queried when operating in the on-line, bypass, or\n                 on-battery modes of operation.  The run time estimate is\n                 based on available battery capacity and output load.")
upsTransferCause = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noTransfer", 1), ("selfTest", 2), ("inputLineSpike", 3), ("inputLowVoltage", 4), ("inputHighVoltage", 5), ("inputLineFrequencyBad", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsTransferCause.setStatus('mandatory')
if mibBuilder.loadTexts: upsTransferCause.setDescription('The reason for the most recent transfer to on-battery \n                 operation.')
upsBatteryTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("twoWeeks", 1), ("oneWeek", 2), ("startupOnly", 3), ("off", 4))).clone('twoWeeks')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryTestTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryTestTime.setDescription("The frequency of execution of the UPS's automatic battery\n                 test.  The test may be run immediately upon startup, upon\n                 startup and every 7 days thereafter, upon startup and every\n                 14 days thereafter, or never.")
upsLowBatteryWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("twoMinutes", 1), ("fiveMinutes", 2), ("sevenMinutes", 3), ("tenMinutes", 4))).clone('twoMinutes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsLowBatteryWarning.setStatus('mandatory')
if mibBuilder.loadTexts: upsLowBatteryWarning.setDescription("The interval between activation of the UPS's low battery\n                 alarm warnings and shutdown of the UPS.")
upsInputTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 4, 1), )
if mibBuilder.loadTexts: upsInputTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputTable.setDescription('A list of input table entries.  The number of\n                 entries is given by the value of upsNumUPSs.')
upsInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 4, 1, 1), ).setIndexNames((0, "UPS2-MIB", "upsIndex"))
if mibBuilder.loadTexts: upsInputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputEntry.setDescription('An entry containing objects for a particular UPS.')
upsInputUtilityVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vac100", 1), ("vac120", 2), ("vac208", 3), ("vac220", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputUtilityVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputUtilityVoltage.setDescription("The UPS's utility voltage version.")
upsInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputVoltage.setDescription("The UPS's measured utility input voltage.  The value\n                 of this object is the actual voltage * 10 (that is, to\n                 determine the actual voltage, divide the value of this\n                 object by 10).")
upsInputFailureSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("high", 1), ("medium", 2), ("low", 3), ("auto", 4))).clone('high')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsInputFailureSensitivity.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputFailureSensitivity.setDescription('The sensitivity of the UPS to rapid changes in utility\n                 voltage (e.g., blackouts, spikes, or notches) or\n                 abnormal changes in utility frequency.')
upsInputMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputMaxVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputMaxVoltage.setDescription("The UPS's maximum input voltage recorded since this object \n                 was last read.  The value of this object is the actual \n                 voltage * 10 (that is, to determine the actual voltage,\n                 divide the value of this object by 10).")
upsInputMinVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputMinVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputMinVoltage.setDescription("The UPS's minimum input voltage recorded since this object \n                 was last read.  The value of this object is the actual \n                 voltage * 10 (that is, to determine the actual voltage,\n                 divide the value of this object by 10).")
upsInputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputFrequency.setDescription("The UPS's present internal operating frequency in Hz.\n                 The value of this object is the actual frequency * 100\n                 (that is, to determine the actual frequency, divide\n                 the value of this object by 100).")
upsOutputTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 5, 1), )
if mibBuilder.loadTexts: upsOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputTable.setDescription('A list of output table entries.  The number of\n                 entries is given by the value of upsNumUPSs.')
upsOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 5, 1, 1), ).setIndexNames((0, "UPS2-MIB", "upsIndex"))
if mibBuilder.loadTexts: upsOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputEntry.setDescription('An entry containing objects for a particular UPS.')
upsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputVoltage.setDescription('The measured UPS output voltage.  The value of this\n                 object is the actual voltage * 10 (that is, to determine\n                 the actual voltage, divide the value of this object by\n                 10).')
upsOutputUtilityVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vac225", 1), ("vac230", 2), ("vac240", 3), ("vac220", 4))).clone('vac225')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutputUtilityVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputUtilityVoltage.setDescription("The UPS's current on-battery output voltage setting\n                 (valid for 220/230/240 Vac version UPSs only).  For other\n                 version UPSs, reading this object will always return a 0\n                 and writing this object will have no effect.")
upsOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputPower.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputPower.setDescription("The UPS's output load represented as a percentage of full \n                 rated load in Watts.  The value of this object is the actual \n                 percentage * 10 (that is, to determine the actual percentage,\n                 divide the value of this object by 10).")
upsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 6, 1), )
if mibBuilder.loadTexts: upsStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsStatusTable.setDescription('A list of status table entries.  The number of\n                 entries is given by the value of upsNumUPSs.')
upsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 6, 1, 1), ).setIndexNames((0, "UPS2-MIB", "upsIndex"))
if mibBuilder.loadTexts: upsStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsStatusEntry.setDescription('An entry containing objects for a particular UPS.')
upsStatusOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsStatusOperational.setStatus('mandatory')
if mibBuilder.loadTexts: upsStatusOperational.setDescription("This object contains 8 bits of information about the current\n                 operational status of the UPS.  The bits are encoded as\n                 follows:\n\n                 BIT 7:  1=replace battery condition\n                 BIT 6:  1=low battery condition\n                 BIT 5:  1=overloaded output condition\n                 BIT 4:  1=on-battery mode of operation\n                 BIT 3:  1=on-line mode of operation\n                 BIT 2:  1=Smart Boost mode of operation (where applicable)\n                 BIT 1:  1=UPS shut down due to low battery, overload,\n                           or `sleep' mode\n                 BIT 0:  1=run time calibration running\n\n                 Note that bit 0 is the low-order bit.")
upsStatusFault = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsStatusFault.setStatus('mandatory')
if mibBuilder.loadTexts: upsStatusFault.setDescription("This object contains 8 bits of information about the current\n                 fault conditions of the UPS.  The bits are encoded as\n                 follows:\n\n                 BIT 7:  1=UPS fault - internal temperature has exceeded\n                           nominal limits\n                 BIT 6:  1=UPS fault - bypass relay (where applicable) malfunction\n                 BIT 5:  1=UPS fault - battery charger failure\n                 BIT 4:  1=UPS in shut down mode via `S' command\n                 BIT 3:  1=UPS in `sleep' mode via `@ddd' command\n                 BIT 2:  1=UPS fault - main relay malfunction\n                 BIT 1:  1=UPS unable to transfer to on-battery operation\n                           due to overload\n                 BIT 0:  1=UPS's output unpowered due to low battery shut down\n\n                 Note that bit 0 is the low-order bit.")
upsStatusTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsStatusTemp.setStatus('mandatory')
if mibBuilder.loadTexts: upsStatusTemp.setDescription("The UPS's present internal operating temperature in degrees\n                 Fahrenheit.  The value of this object is the actual\n                 temperature * 10 (that is, to determine the actual\n                 temperature, divide the value of this object by 10).")
upsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 7, 1), )
if mibBuilder.loadTexts: upsConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigTable.setDescription('A list of configuration table entries.  The number of\n                 entries is given by the value of upsNumUPSs.')
upsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 7, 1, 1), ).setIndexNames((0, "UPS2-MIB", "upsIndex"))
if mibBuilder.loadTexts: upsConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigEntry.setDescription('An entry containing objects for a particular UPS.')
upsConfigAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uponUtilityFailure", 1), ("thirtySecondsAfterUtilityFailure", 2), ("lowBatteryOnly", 3), ("noAudibleAlarm", 4))).clone('uponUtilityFailure')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigAlarm.setDescription("The UPS's current audible alarm setting.  The alarm\n                 may be set to activate immediately upon utility failure\n                 and for low battery condition, to activate 30 seconds\n                 after utility failure and immediately upon low battery\n                 condition, to activate upon low battery condition only,\n                 or to not activate under any conditions.")
upsConfigRestoreDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("restoreDefaults", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigRestoreDefaults.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigRestoreDefaults.setDescription("This object may be written to force the UPS to restore\n                 the factory default settings for most of the UPS's\n                 customizable parameters.  Reading this object will always\n                 return a 0.")
upsExtMeasTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 8, 1), )
if mibBuilder.loadTexts: upsExtMeasTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsExtMeasTable.setDescription('A list of external measurement table entries.  The number of\n                 entries is the number of available UPSs to which External\n                 Measurement Units are attached.')
upsExtMeasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 8, 1, 1), ).setIndexNames((0, "UPS2-MIB", "upsIndex"))
if mibBuilder.loadTexts: upsExtMeasEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsExtMeasEntry.setDescription('An entry containing objects for a particular UPS.')
upsExtMeasFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 8, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsExtMeasFwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: upsExtMeasFwVersion.setDescription("The External Measurement Unit's firmware version letter.")
upsExtMeasTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsExtMeasTemp.setStatus('mandatory')
if mibBuilder.loadTexts: upsExtMeasTemp.setDescription('The local ambient temperature in degrees Fahrenheit as measured\n                 by the External Measurement Unit.  The value of this object\n                 is the actual temperature * 100 (that is, to determine the\n                 actual temperature, divide the value of this object by 100).')
upsExtMeasHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsExtMeasHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: upsExtMeasHumidity.setDescription('The local ambient relative humidity in percent as measured\n                 by the External Measurement Unit.  The value of this object\n                 is the actual humidity * 10 (that is, to determine the\n                 actual humidity, divide the value of this object by 10).')
upsExtMeasAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 8, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsExtMeasAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsExtMeasAlarmStatus.setDescription('This object contains 8 bits of information about the current\n                 alarm status of the External Measurement Unit.  The bits are\n                 encoded as follows:\n\n                 BIT 7:  1=Upper temperature limit exceeded\n                 BIT 6:  1=Lower temperature limit exceeded\n                 BIT 5:  1=Upper relative humidity limit exceeded\n                 BIT 4:  1=Lower relative humidity limit exceeded\n                 BIT 3:  1=Contact input channel #4 alarm state\n                 BIT 2:  1=Contact input channel #3 alarm state\n                 BIT 1:  1=Contact input channel #2 alarm state\n                 BIT 0:  1=Contact input channel #1 alarm state\n\n                 Note that bit 0 is the low-order bit.')
upsExtMeasMaxTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ninetyDegreesF", 1), ("oneHundredFifteenDegreesF", 2), ("oneHundredThirtyDegreesF", 3), ("oneHundredSeventyFiveDegreesF", 4))).clone('ninetyDegreesF')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsExtMeasMaxTemp.setStatus('mandatory')
if mibBuilder.loadTexts: upsExtMeasMaxTemp.setDescription('The upper temperature limit at which an alarm will be sent.')
upsExtMeasMinTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fortyDegreesF", 1), ("fiftyDegreesF", 2), ("fiftyEightDegreesF", 3), ("sixtyFiveDegreesF", 4))).clone('fortyDegreesF')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsExtMeasMinTemp.setStatus('mandatory')
if mibBuilder.loadTexts: upsExtMeasMinTemp.setDescription('The lower temperature limit at which an alarm will be sent.')
upsExtMeasMaxHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("seventyPercent", 1), ("eightyPercent", 2), ("eightyFivePercent", 3), ("ninetyPercent", 4))).clone('seventyPercent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsExtMeasMaxHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: upsExtMeasMaxHumidity.setDescription('The upper humidity limit at which an alarm will be sent.')
upsExtMeasMinHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tenPercent", 1), ("twentyPercent", 2), ("thirtyPercent", 3), ("fortyPercent", 4))).clone('tenPercent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsExtMeasMinHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: upsExtMeasMinHumidity.setDescription('The lower humidity limit at which an alarm will be sent.')
upsExtMeasContact1AlarmControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsExtMeasContact1AlarmControl.setStatus('mandatory')
if mibBuilder.loadTexts: upsExtMeasContact1AlarmControl.setDescription("The alarm enable state for the External Measurement Unit's\n                 contact input channel #1.  If enabled, an alarm will be\n                 sent when contact input channel #1 has changed to abnormal\n                 state.")
upsExtMeasContact2AlarmControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsExtMeasContact2AlarmControl.setStatus('mandatory')
if mibBuilder.loadTexts: upsExtMeasContact2AlarmControl.setDescription("The alarm enable state for the External Measurement Unit's\n                 contact input channel #2.  If enabled, an alarm will be\n                 sent when contact input channel #2 has changed to abnormal\n                 state.")
upsExtMeasContact3AlarmControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsExtMeasContact3AlarmControl.setStatus('mandatory')
if mibBuilder.loadTexts: upsExtMeasContact3AlarmControl.setDescription("The alarm enable state for the External Measurement Unit's\n                 contact input channel #3.  If enabled, an alarm will be\n                 sent when contact input channel #3 has changed to abnormal\n                 state.")
upsExtMeasContact4AlarmControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsExtMeasContact4AlarmControl.setStatus('mandatory')
if mibBuilder.loadTexts: upsExtMeasContact4AlarmControl.setDescription("The alarm enable state for the External Measurement Unit's\n                 contact input channel #4.  If enabled, an alarm will be\n                 sent when contact input channel #4 has changed to abnormal\n                 state.")
upsExtMeasMaxTempAlarmControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsExtMeasMaxTempAlarmControl.setStatus('mandatory')
if mibBuilder.loadTexts: upsExtMeasMaxTempAlarmControl.setDescription("The alarm enable state for the External Measurement Unit's\n                 upper temperature limit.  If enabled, an alarm will be\n                 sent when the ambient temperature rises above the upper\n                 temperature limit.")
upsExtMeasMinTempAlarmControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsExtMeasMinTempAlarmControl.setStatus('mandatory')
if mibBuilder.loadTexts: upsExtMeasMinTempAlarmControl.setDescription("The alarm enable state for the External Measurement Unit's\n                 lower temperature limit.  If enabled, an alarm will be\n                 sent when the ambient temperature falls below the lower\n                 temperature limit.")
upsExtMeasMaxHumidityAlarmControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 8, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsExtMeasMaxHumidityAlarmControl.setStatus('mandatory')
if mibBuilder.loadTexts: upsExtMeasMaxHumidityAlarmControl.setDescription("The alarm enable state for the External Measurement Unit's\n                 upper humidity limit.  If enabled, an alarm will be sent\n                 when the ambient relative humidity rises above the upper\n                 humidity limit.")
upsExtMeasMinHumidityAlarmControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 8, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsExtMeasMinHumidityAlarmControl.setStatus('mandatory')
if mibBuilder.loadTexts: upsExtMeasMinHumidityAlarmControl.setDescription("The alarm enable state for the External Measurement Unit's\n                 lower humidity limit.  If enabled, an alarm will be sent\n                 when the ambient relative humidity falls below the lower\n                 humidity limit.")
upsAddlFuncsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 9, 1), )
if mibBuilder.loadTexts: upsAddlFuncsTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsAddlFuncsTable.setDescription('A list of additional functions table entries.  The number of\n                 entries is the number of available UPSs which are capable of\n                 supporting these additional functions.')
upsAddlFuncsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 9, 1, 1), ).setIndexNames((0, "UPS2-MIB", "upsIndex"))
if mibBuilder.loadTexts: upsAddlFuncsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsAddlFuncsEntry.setDescription('An entry containing objects for a particular UPS.')
upsAddlFuncsNumBatteryPacks = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAddlFuncsNumBatteryPacks.setStatus('mandatory')
if mibBuilder.loadTexts: upsAddlFuncsNumBatteryPacks.setDescription('The number of battery pack units connected to the UPS.')
upsAddlFuncsNumBadBatteryPacks = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAddlFuncsNumBadBatteryPacks.setStatus('mandatory')
if mibBuilder.loadTexts: upsAddlFuncsNumBadBatteryPacks.setDescription('The number of bad (faulty) battery pack units connected \n                 to the UPS.')
upsAddlFuncsOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAddlFuncsOutputCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsAddlFuncsOutputCurrent.setDescription('The true rms load current drawn from the UPS.  The value\n                 of this object is the actual amperage * 100 (that is, to\n                 determine the actual amperage, divide the value of this\n                 object by 100).')
upsAddlFuncsOutputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAddlFuncsOutputApparentPower.setStatus('mandatory')
if mibBuilder.loadTexts: upsAddlFuncsOutputApparentPower.setDescription("The UPS's output load represented as a percentage of full rated \n                 load in Volt-Amps.  The value of this object is the actual \n                 percentage * 10 (that is, to determine the actual percentage,\n                 divide the value of this object by 10).")
upsAddlFuncsStatusOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAddlFuncsStatusOperational.setStatus('mandatory')
if mibBuilder.loadTexts: upsAddlFuncsStatusOperational.setDescription('This object contains 8 bits of information about the current\n                 operational status of the UPS.  The bits are encoded as\n                 follows:\n\n                 BIT 7:  1=UPS ready to power load upon return of normal line\n                           or upon user command\n                 BIT 6:  1=UPS ready to power load upon user command\n                 BIT 5:  1=UPS in bypass mode as a result of manual bypass\n                           control\n                 BIT 4:  1=UPS is returning from bypass mode\n                 BIT 3:  1=UPS in bypass mode as a result of UPS-Link or\n                           key command\n                 BIT 2:  1=UPS going to bypass mode as a result of UPS-Link\n                           or key command\n                 BIT 1:  1=not defined\n                 BIT 0:  1=wakeup mode - startup test lasting < 2 sec\n\n                 Note that bit 0 is the low-order bit.')
upsAddlFuncsStatusFault = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAddlFuncsStatusFault.setStatus('mandatory')
if mibBuilder.loadTexts: upsAddlFuncsStatusFault.setDescription('This object contains 8 bits of information about the current\n                 fault conditions of the UPS.  The bits are encoded as\n                 follows:\n\n                 BIT 7:  reserved for future use\n                 BIT 6:  reserved for future use\n                 BIT 5:  reserved for future use\n                 BIT 4:  1=UPS fault - DC imbalance, UPS in bypass\n                 BIT 3:  1=UPS fault - output voltage select failure, UPS\n                           in bypass\n                 BIT 2:  1=UPS fault - bypass supply failure\n                 BIT 1:  1=UPS fault - Isolation Unit fan failure\n                 BIT 0:  1=UPS fault - Electronics Unit fan failure, UPS\n                           in bypass\n\n                 Note that bit 0 is the low-order bit.')
upsAddlFuncsConfigPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 9, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAddlFuncsConfigPassword.setStatus('mandatory')
if mibBuilder.loadTexts: upsAddlFuncsConfigPassword.setDescription("The password that controls access to the UPS's LCD display.\n                 A maximum of 4 characters may be entered.")
upsAddlFuncsConfigDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("disableUps", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAddlFuncsConfigDisable.setStatus('mandatory')
if mibBuilder.loadTexts: upsAddlFuncsConfigDisable.setDescription('This object may be written to immediately shut down the\n                 UPS, requiring a manual reset.  Reading this object will\n                 always return a 0.')
upsAddlFuncsConfigBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 10, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bypassMode", 1), ("exitBypassMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAddlFuncsConfigBypass.setStatus('mandatory')
if mibBuilder.loadTexts: upsAddlFuncsConfigBypass.setDescription('This object may be written to cause the UPS to transfer\n                 to or from the bypass mode.  Reading this object will\n                 always return a 0.')
mibBuilder.exportSymbols("UPS2-MIB", upsInput=upsInput, upsStatus=upsStatus, upsName=upsName, upsExtMeasMaxHumidityAlarmControl=upsExtMeasMaxHumidityAlarmControl, upsConfigRestoreDefaults=upsConfigRestoreDefaults, upsExtMeasMinHumidity=upsExtMeasMinHumidity, upsInputUtilityVoltage=upsInputUtilityVoltage, upsExtMeasContact1AlarmControl=upsExtMeasContact1AlarmControl, upsId=upsId, upsExtMeasAlarmStatus=upsExtMeasAlarmStatus, upsExtMeasContact4AlarmControl=upsExtMeasContact4AlarmControl, upsBatteryEntry=upsBatteryEntry, upsAddlFuncsOutputApparentPower=upsAddlFuncsOutputApparentPower, upsConfig=upsConfig, upsOutputUtilityVoltage=upsOutputUtilityVoltage, upsModelType=upsModelType, upsAddlFuncsNumBadBatteryPacks=upsAddlFuncsNumBadBatteryPacks, upsExtMeasTable=upsExtMeasTable, upsExtMeasMinTempAlarmControl=upsExtMeasMinTempAlarmControl, upsBattery=upsBattery, upsExtMeasHumidity=upsExtMeasHumidity, upsInputMaxVoltage=upsInputMaxVoltage, upsNumUPSs=upsNumUPSs, upsStatusOperational=upsStatusOperational, upsBatteryTestResult=upsBatteryTestResult, upsRunTimeCalibration=upsRunTimeCalibration, upsExtMeasMinHumidityAlarmControl=upsExtMeasMinHumidityAlarmControl, upsExtMeasMaxTempAlarmControl=upsExtMeasMaxTempAlarmControl, upsStatusTable=upsStatusTable, upsAddlFuncs=upsAddlFuncs, upsOutputVoltage=upsOutputVoltage, upsOutputPower=upsOutputPower, upsBatteryTable=upsBatteryTable, upsManufDate=upsManufDate, upsInputVoltage=upsInputVoltage, upsOutputTable=upsOutputTable, upsTransferCause=upsTransferCause, upsAddlFuncsConfigPassword=upsAddlFuncsConfigPassword, upsSerialNumber=upsSerialNumber, upsBatteryTest=upsBatteryTest, upsBatteryTestTime=upsBatteryTestTime, upsStatusEntry=upsStatusEntry, upsSystem=upsSystem, upsConfigEntry=upsConfigEntry, upsIdEntry=upsIdEntry, upsAddlFuncsTable=upsAddlFuncsTable, upsInputTable=upsInputTable, upsExtMeasEntry=upsExtMeasEntry, upsInputFailureSensitivity=upsInputFailureSensitivity, upsExtMeasTemp=upsExtMeasTemp, upsIndex=upsIndex, upsConfigTable=upsConfigTable, upsAddlFuncsOutputCurrent=upsAddlFuncsOutputCurrent, upsInputEntry=upsInputEntry, upsStatusTemp=upsStatusTemp, upsFwVersion=upsFwVersion, upsAddlFuncsStatusFault=upsAddlFuncsStatusFault, upsExtMeasFwVersion=upsExtMeasFwVersion, upsExtMeasContact2AlarmControl=upsExtMeasContact2AlarmControl, upsExtMeasMinTemp=upsExtMeasMinTemp, upsInputMinVoltage=upsInputMinVoltage, upsExtMeasMaxHumidity=upsExtMeasMaxHumidity, upsAddlFuncsStatusOperational=upsAddlFuncsStatusOperational, upsStatusFault=upsStatusFault, upsAddlFuncsConfigBypass=upsAddlFuncsConfigBypass, upsAddlFuncsNumBatteryPacks=upsAddlFuncsNumBatteryPacks, upsExtMeas=upsExtMeas, upsOutput=upsOutput, upsConfigAlarm=upsConfigAlarm, upsBatteryVoltage=upsBatteryVoltage, upsAddlFuncsConfigDisable=upsAddlFuncsConfigDisable, upsExtMeasContact3AlarmControl=upsExtMeasContact3AlarmControl, upsOutputEntry=upsOutputEntry, upsAddlFuncsEntry=upsAddlFuncsEntry, upsExtMeasMaxTemp=upsExtMeasMaxTemp, upsBatteryCapacity=upsBatteryCapacity, upsEstimatedRunTimeRemaining=upsEstimatedRunTimeRemaining, upsInputFrequency=upsInputFrequency, upsIdTable=upsIdTable, upsLowBatteryWarning=upsLowBatteryWarning)
