#
# PySNMP MIB module IEEE8021-PBBTE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/iee/IEEE8021-PBBTE-MIB
# Produced by pysmi-1.1.12 at Wed Oct  9 02:26:08 2024
# On host fv-az1144-128 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ieee8021BridgeBaseComponentId, = mibBuilder.importSymbols("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseComponentId")
ieee8021QBridgeVlanCurrentComponentId, = mibBuilder.importSymbols("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanCurrentComponentId")
IEEE8021BridgePortNumber, IEEE8021PbbTeProtectionGroupId, IEEE8021PbbTeTSidId, ieee802dot1mibs, IEEE8021PbbTeProtectionGroupActiveRequests, IEEE8021VlanIndexOrWildcard, IEEE8021PbbTeProtectionGroupConfigAdmin, IEEE8021PbbTeEsp, IEEE8021PbbServiceIdentifier, IEEE8021PbbComponentIdentifier = mibBuilder.importSymbols("IEEE8021-TC-MIB", "IEEE8021BridgePortNumber", "IEEE8021PbbTeProtectionGroupId", "IEEE8021PbbTeTSidId", "ieee802dot1mibs", "IEEE8021PbbTeProtectionGroupActiveRequests", "IEEE8021VlanIndexOrWildcard", "IEEE8021PbbTeProtectionGroupConfigAdmin", "IEEE8021PbbTeEsp", "IEEE8021PbbServiceIdentifier", "IEEE8021PbbComponentIdentifier")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Unsigned32, MibIdentifier, Counter64, Bits, ModuleIdentity, IpAddress, TimeTicks, Gauge32, NotificationType, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Counter64", "Bits", "ModuleIdentity", "IpAddress", "TimeTicks", "Gauge32", "NotificationType", "Counter32", "iso")
TextualConvention, RowStatus, StorageType, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "StorageType", "TruthValue", "DisplayString")
ieee8021PbbTeMib = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 10))
ieee8021PbbTeMib.setRevisions(('2014-12-15 00:00', '2011-02-27 00:00', '2008-11-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ieee8021PbbTeMib.setRevisionsDescriptions(('Published as part of IEEE Std 802.1Q 2014 revision.\n            Cross references updated and corrected.', 'Minor edits to contact information etc. as part of \n          2011 revision of IEEE Std 802.1Q.', 'Initial version of the PBB-TE MIB module based upon draft 3.2\n         of the MIB modules defined in 802.1ap and 802.1Qay',))
if mibBuilder.loadTexts: ieee8021PbbTeMib.setLastUpdated('201412150000Z')
if mibBuilder.loadTexts: ieee8021PbbTeMib.setOrganization('IEEE 802.1 Working Group')
if mibBuilder.loadTexts: ieee8021PbbTeMib.setContactInfo('  WG-URL: http://grouper.ieee.org/groups/8021/1/index.html\n        WG-EMAIL: stds-802-1@ieee.org\n\n        Contact:   IEEE 802.1 Working Group Chair\n           Postal: C/O IEEE 802.1 Working Group\n                   IEEE Standards Association\n                   445 Hoes Lane\n                   P.O. Box 1331\n                   Piscataway\n                   NJ 08855-1331\n                   USA\n           E-mail: STDS-802-1-L@LISTSERV.IEEE.ORG')
if mibBuilder.loadTexts: ieee8021PbbTeMib.setDescription('Copyright (C) IEEE (2014).  All Rights Reserved\n        This version of this MIB module is part of IEEE 802.1Q;\n        See the standard itself for full legal notices.\n\n        Unless otherwise indicated, the references in this MIB    \n        module  are to IEEE Std 802.1Q-2014')
ieee8021PbbTeNotifications = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 10, 0))
ieee8021PbbTeObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 10, 1))
ieee8021PbbTeConformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 10, 2))
ieee8021PbbTeProtectionGroupListTable = MibTable((1, 3, 111, 2, 802, 1, 1, 10, 1, 1), )
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupListTable.setReference('12.18.1')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupListTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupListTable.setDescription('The PBB-TE Protection group list table.  Each entry in this table\n         corresponds to a configured PBB-TE Protection Group configured on\n         the B-Component of an IB-BEB.')
ieee8021PbbTeProtectionGroupListEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 10, 1, 1, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseComponentId"), (0, "IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupListGroupId"))
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupListEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupListEntry.setDescription('The PBB-TE protection group list table entry.\n        Note that the component ID must refer to an B component')
ieee8021PbbTeProtectionGroupListGroupId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 1, 1, 1), IEEE8021PbbTeProtectionGroupId())
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupListGroupId.setReference('12.18.2')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupListGroupId.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupListGroupId.setDescription('The unique identifier for the protection group.')
ieee8021PbbTeProtectionGroupListMD = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupListMD.setReference('12.18.1.1.3 b)')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupListMD.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupListMD.setDescription('This refers to the Maintenance Domain that qualifies the\n          WorkingMA and ProtectionMA columns of this table.  The MD\n      index in this column must hold a value that matches the\n      in the dot1agCfmStackMdIndex in the dot1agCfmStackTable\n      for the corresponding WorkingMA and ProtectionMA columns\n      of this table.  This correspondence must hold for the RowStatus\n      of this row to be set to Active.  Furthermore, this column may\n      not be modified while the RowStatus for this row is Active')
ieee8021PbbTeProtectionGroupListWorkingMA = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupListWorkingMA.setReference('12.18.1.1.3 b)')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupListWorkingMA.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupListWorkingMA.setDescription("This refers to the Maintenance Association that refers\n        to the PBB-TE MA that corresponds to the group's working\n        entity.  The MA index in this column must hold a value\n        that is the value of dot1agCfmStackMaIndex column for\n        some entry in the dot1agCfmStackTable before the RowStatus\n        for this row can be set to Active.  Furthermore, this column\n        may not be modified when the RowStatus for this row is Active.")
ieee8021PbbTeProtectionGroupListProtectionMA = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupListProtectionMA.setReference('12.18.1.1.3 c)')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupListProtectionMA.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupListProtectionMA.setDescription("This refers to the Maintenance Association that refers\n        to the PBB-TE MA that corresponds to the group's protection\n        entity.  The MA index in this column must hold a value\n        that is the value of dot1agCfmStackMaIndex column for\n        some entry in the dot1agCfmStackTable before the RowStatus\n        for this row can be set to Active.  Furthermore, this column\n        may not be modified when the RowStatus for this row is Active.")
ieee8021PbbTeProtectionGroupListStorageType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 1, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupListStorageType.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupListStorageType.setDescription('This object indicates the persistence of this entry. All read-create\n       columns must be writable if this column is set to permanent.')
ieee8021PbbTeProtectionGroupListRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupListRowStatus.setReference('12.18.1.2')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupListRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupListRowStatus.setDescription('The status of this row.\n\n        The writable columns in a row cannot be changed if the row is\n        active.  The  PbbTeProtectionGroupListWorkingMA, and\n        PbbTeProtectionGroupListProtectionMA columns must be specified\n        before the row can be activated.')
ieee8021PbbTeMASharedGroupTable = MibTable((1, 3, 111, 2, 802, 1, 1, 10, 1, 2), )
if mibBuilder.loadTexts: ieee8021PbbTeMASharedGroupTable.setReference('12.18.1.1.3 d)')
if mibBuilder.loadTexts: ieee8021PbbTeMASharedGroupTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeMASharedGroupTable.setDescription('This table contains references to all protection groups that\n         share a working or protection entity with a given protection\n         group.')
ieee8021PbbTeMASharedGroupEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 10, 1, 2, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseComponentId"), (0, "IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupListGroupId"), (0, "IEEE8021-PBBTE-MIB", "ieee8021PbbTeMASharedGroupSubIndex"))
if mibBuilder.loadTexts: ieee8021PbbTeMASharedGroupEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeMASharedGroupEntry.setDescription('The ieee801PbbTeMASharedGroupEntry table.  The table is\n        indexed by protection group and by a simple integer.  The\n        table lists all protection groups that load share with that\n        group.')
ieee8021PbbTeMASharedGroupSubIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: ieee8021PbbTeMASharedGroupSubIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeMASharedGroupSubIndex.setDescription('A simple integer to distinguish the members of the set\n        of MAs that comprise the set of load sharing MAs for the\n        specified protection group.')
ieee8021PbbTeMASharedGroupId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 2, 1, 2), IEEE8021PbbTeProtectionGroupId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PbbTeMASharedGroupId.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeMASharedGroupId.setDescription('This column holds the group id of a protection group that shares\n        a working or protection group with the group whose index is the\n        first index of this row.')
ieee8021PbbTeTesiTable = MibTable((1, 3, 111, 2, 802, 1, 1, 10, 1, 3), )
if mibBuilder.loadTexts: ieee8021PbbTeTesiTable.setReference('12.16.5.3.1')
if mibBuilder.loadTexts: ieee8021PbbTeTesiTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeTesiTable.setDescription('The PBB-TE TESI table contains information for each\n         TE Service Instance known to a system.')
ieee8021PbbTeTesiEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 10, 1, 3, 1), ).setIndexNames((0, "IEEE8021-PBBTE-MIB", "ieee8021PbbTeTesiId"))
if mibBuilder.loadTexts: ieee8021PbbTeTesiEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeTesiEntry.setDescription('The PBB-TE TESI entry.  Each entry maps a TESI to \n     a component and CBP.')
ieee8021PbbTeTesiId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 3, 1, 1), IEEE8021PbbTeTSidId())
if mibBuilder.loadTexts: ieee8021PbbTeTesiId.setReference('3.241')
if mibBuilder.loadTexts: ieee8021PbbTeTesiId.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeTesiId.setDescription('This is the unique identifier for a PBB-TE TE-SID.')
ieee8021PbbTeTesiComponent = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 3, 1, 2), IEEE8021PbbComponentIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeTesiComponent.setReference('12.16.5.3.2 a)')
if mibBuilder.loadTexts: ieee8021PbbTeTesiComponent.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeTesiComponent.setDescription('This is the component upon which the Bridge Port of the\n     TESI is located.')
ieee8021PbbTeTesiBridgePort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 3, 1, 3), IEEE8021BridgePortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeTesiBridgePort.setReference('12.16.5.3.2 b)')
if mibBuilder.loadTexts: ieee8021PbbTeTesiBridgePort.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeTesiBridgePort.setDescription('This is the Bridge Port of the TESI.')
ieee8021PbbTeTesiStorageType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 3, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeTesiStorageType.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeTesiStorageType.setDescription('This object indicates the persistence of this entry. All read-crate\n       columns must be writable for rows whose StorageType is permanaent.')
ieee8021PbbTeTesiRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeTesiRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeTesiRowStatus.setDescription('This column holds the status for this row.\n\n         When the status is active, no columns of this table may be\n         modified.  All columns must have a valid value before the row\n         can be activated.')
ieee8021PbbTeTeSiEspTable = MibTable((1, 3, 111, 2, 802, 1, 1, 10, 1, 4), )
if mibBuilder.loadTexts: ieee8021PbbTeTeSiEspTable.setReference('12.16.5.3.2 c)')
if mibBuilder.loadTexts: ieee8021PbbTeTeSiEspTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeTeSiEspTable.setDescription('The PBB-TE TE-SID table contains information for each TE\n         service instance known to a system.')
ieee8021PbbTeTeSiEspEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 10, 1, 4, 1), ).setIndexNames((0, "IEEE8021-PBBTE-MIB", "ieee8021PbbTeTesiId"), (0, "IEEE8021-PBBTE-MIB", "ieee8021PbbTeTeSiEspEspIndex"))
if mibBuilder.loadTexts: ieee8021PbbTeTeSiEspEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeTeSiEspEntry.setDescription('The PBB-TE TE-SID entry.  Each entry refers to a\n         TE Service Instance by identifier and contains information about\n         one of the ESPs that comprise this TE Service Instance.')
ieee8021PbbTeTeSiEspEspIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: ieee8021PbbTeTeSiEspEspIndex.setReference('12.16.5.3.2 c)')
if mibBuilder.loadTexts: ieee8021PbbTeTeSiEspEspIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeTeSiEspEspIndex.setDescription('This is an identifier, of local signifigance to a particular\n         PBB-TE TE-SID which is used to index all of the ESPs associated\n         with the TE-SID.')
ieee8021PbbTeTeSiEspEsp = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 4, 1, 2), IEEE8021PbbTeEsp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeTeSiEspEsp.setReference('12.16.5.3.2 c)')
if mibBuilder.loadTexts: ieee8021PbbTeTeSiEspEsp.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeTeSiEspEsp.setDescription('This column holds the ESP identifier for one of the Ethernet\n         Switched Paths that define the TE service instance.')
ieee8021PbbTeTeSiEspStorageType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 4, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeTeSiEspStorageType.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeTeSiEspStorageType.setDescription('This object indicates the persistence of this entry. All read-create\n        columns must be writable for permanent rows.')
ieee8021PbbTeTeSiEspRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeTeSiEspRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeTeSiEspRowStatus.setDescription('This column holds the status for this row.\n\n         When the status is active, no columns of this table may be\n         modified.  All columns must have a valid value before the row\n         can be activated.')
ieee8021PbbTeProtectionGroupConfigTable = MibTable((1, 3, 111, 2, 802, 1, 1, 10, 1, 5), )
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigTable.setReference('12.18.2')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigTable.setDescription('The PBB-TE Protection group config table contains\n         configuration and status information for each configuration\n         group configured in the system.  Entries in this table are\n         created implicitly by the creation of entries in the\n         ieee8021PbbTeProtectionGroupListTable table.')
ieee8021PbbTeProtectionGroupConfigEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 10, 1, 5, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseComponentId"), (0, "IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupListGroupId"))
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigEntry.setDescription('The protection group confguration table entry.  Rows are\n        created in this table implicitly when a row is added to the\n        ieee8021PbbTeProtectionGroupListTable.')
ieee8021PbbTeProtectionGroupConfigState = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("workingPath", 1), ("protectionPat", 2), ("waitToRestore", 3), ("protAdmin", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigState.setReference('26.10.3.5 12.18.2.1.3 c)')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigState.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigState.setDescription('This column indicates the current state of the protection\n     switching state machine for a protection group.')
ieee8021PbbTeProtectionGroupConfigCommandStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 5, 1, 2), IEEE8021PbbTeProtectionGroupConfigAdmin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigCommandStatus.setReference('12.18.2.1.3 d)')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigCommandStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigCommandStatus.setDescription('This column indicates the status of administrative commands\n        within the protection group.  It reflects the current\n        operational administrative command being acted upon by the\n        protection group.')
ieee8021PbbTeProtectionGroupConfigCommandLast = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 5, 1, 3), IEEE8021PbbTeProtectionGroupConfigAdmin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigCommandLast.setReference('12.18.2.1.3 d)')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigCommandLast.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigCommandLast.setDescription('This column indicates the last attempted administrative\n    command applied to the protection group.  It is changed\n    whenever a write is made to the CommandAdmin column of\n    this table and is a record of the last attempted\n        administrative operation.')
ieee8021PbbTeProtectionGroupConfigCommandAdmin = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 5, 1, 4), IEEE8021PbbTeProtectionGroupConfigAdmin().clone('clear')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigCommandAdmin.setReference('12.18.2.3.2')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigCommandAdmin.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigCommandAdmin.setDescription('This column is used by the operator to request that the\n       protection group state machine perform some administrative\n       operation.  The operator requests a command by writing the\n       command value to this column.  The state machine indicates the\n       command that it is performing by setting the value of the\n       CommandStatus column of this table.  This column always reads\n       back as clear(1).')
ieee8021PbbTeProtectionGroupConfigActiveRequests = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 5, 1, 5), IEEE8021PbbTeProtectionGroupActiveRequests()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigActiveRequests.setReference('12.18.2.1.3 d)')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigActiveRequests.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigActiveRequests.setDescription('This column shows the status of active requests within\n    the TE protection group.')
ieee8021PbbTeProtectionGroupConfigWTR = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 12), )).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigWTR.setReference('26.10.3.3.8 12.18.2.1.3 e)')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigWTR.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigWTR.setDescription('This column is used to configure the wait-to-restore timer\n        for the protection group operation.  The timer may be\n        configured in steps of 1 minute between 5 and 12 minutes, the\n        default being 5.  Additionally, the value 0 is used to\n        indicate that the protection group is to operate\n        non-revertively.')
ieee8021PbbTeProtectionGroupConfigHoldOff = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 5, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigHoldOff.setReference('12.18.2.1.3 f)')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigHoldOff.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigHoldOff.setDescription('This column is used to configure the hold off\n        timer.  The purpose is to allow a service layer protection\n        mechanism to have a chance to fix athe problem before\n        switching at the client layer, or to allow an upstream\n        protected domain to switch before a downsream domain.  The\n        hold off timer has a period of from 0 to 10 seconds, the\n        default being 0, with a 100ms granularity.')
ieee8021PbbTeProtectionGroupConfigNotifyEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 5, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigNotifyEnable.setDescription('This column is used to enable or disable transmission\n         of ieee8021PbbTeProtectionGroupAdminFailure\n         notifications. These notifications are generated\n         whenever an administrative command cannot be performed \n         by the protection group.')
ieee8021PbbTeProtectionGroupConfigStorageType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 5, 1, 9), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigStorageType.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupConfigStorageType.setDescription('This object indicates the persistence of this entry.  For\n       permanent objects the \n       ieee8021PbbTeProtectionGroupConfigCommandAdmin column\n       must be writable.')
ieee8021PbbTeProtectionGroupISidTable = MibTable((1, 3, 111, 2, 802, 1, 1, 10, 1, 6), )
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupISidTable.setReference('12.18.2.1.3 b)')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupISidTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupISidTable.setDescription('This table contains entries for each I-SID that is\n        transported over TE-SIDs that belong to protection groups.\n        Each I-SID maps to a single protection group.')
ieee8021PbbTeProtectionGroupISidEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 10, 1, 6, 1), ).setIndexNames((0, "IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupISidIndex"))
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupISidEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupISidEntry.setDescription('The ieee8021PbbTeProtectionGroupISidTable entry.')
ieee8021PbbTeProtectionGroupISidIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 6, 1, 1), IEEE8021PbbServiceIdentifier())
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupISidIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupISidIndex.setDescription('This is the I-Sid that is to be mapped to a protection\n          group.')
ieee8021PbbTeProtectionGroupISidComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 6, 1, 2), IEEE8021PbbComponentIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupISidComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupISidComponentId.setDescription('This column qualifies the GroupId column to a particular\n          component.')
ieee8021PbbTeProtectionGroupISidGroupId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 6, 1, 3), IEEE8021PbbTeProtectionGroupId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupISidGroupId.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupISidGroupId.setDescription('This column contains the Id of the protection group used\n          to transport the data belonging to the service identified\n          by the I-SID value specified in the ISidIndex column of this\n          table.')
ieee8021PbbTeProtectionGroupISidStorageType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 6, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupISidStorageType.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupISidStorageType.setDescription('This object indicates the persistence of this entry.')
ieee8021PbbTeProtectionGroupISidRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupISidRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupISidRowStatus.setDescription('This column contains the status for this row.  Once active\n         none of the columns in the row may be modified.  All columns\n         must be specified when creating the row.')
ieee8021PbbTeBridgeStaticForwardAnyUnicastTable = MibTable((1, 3, 111, 2, 802, 1, 1, 10, 1, 7), )
if mibBuilder.loadTexts: ieee8021PbbTeBridgeStaticForwardAnyUnicastTable.setReference('8.8.1')
if mibBuilder.loadTexts: ieee8021PbbTeBridgeStaticForwardAnyUnicastTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeBridgeStaticForwardAnyUnicastTable.setDescription('A table containing forwarding information for each vlan\n         specifying the set of ports to which forwarding of unicast\n         addressed frames for which no more specific forwarding information\n         applies.  This is configured statically by management.')
ieee8021PbbTeBridgeStaticForwardAnyUnicastEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 10, 1, 7, 1), ).setIndexNames((0, "IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeVlanCurrentComponentId"), (0, "IEEE8021-PBBTE-MIB", "ieee8021PbbTeBridgeStaticForwardAnyUnicastVlanIndex"))
if mibBuilder.loadTexts: ieee8021PbbTeBridgeStaticForwardAnyUnicastEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeBridgeStaticForwardAnyUnicastEntry.setDescription('Forwarding information for a VLAN, specifying the\n         set of ports to which forwarding of unicast addressed\n         frames for which no more specific forwarding information\n         applies.\n\n         The EgressPorts and ForbiddenPorts PortList objects, together,\n         implement the PortMap control element listed in 802.1Q 8.8.1.c.')
ieee8021PbbTeBridgeStaticForwardAnyUnicastVlanIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 7, 1, 1), IEEE8021VlanIndexOrWildcard())
if mibBuilder.loadTexts: ieee8021PbbTeBridgeStaticForwardAnyUnicastVlanIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeBridgeStaticForwardAnyUnicastVlanIndex.setDescription('The VLAN-ID or other identifier refering to the VLAN to\n       which this static filtering entry applies.')
ieee8021PbbTeBridgeStaticForwardAnyUnicastEgressPorts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 7, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeBridgeStaticForwardAnyUnicastEgressPorts.setReference('8.8.1 c)')
if mibBuilder.loadTexts: ieee8021PbbTeBridgeStaticForwardAnyUnicastEgressPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeBridgeStaticForwardAnyUnicastEgressPorts.setDescription('The complete set of ports to which a unicast addressed frame\n        is to be forwarded.  This value is persistent and will be restored\n        upon system reboot.  A port may not be added to this set if it\n        is already a member of\n        ieee8021PbbTeBridgeStaticForwardAnyUnicastForbiddenPorts.  The default\n        value is a string of zeros of appropriate length.\n\n        The value of this object MUST be retained across\n        reinitialization of the management system.')
ieee8021PbbTeBridgeStaticForwardAnyUnicastForbiddenPorts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 7, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeBridgeStaticForwardAnyUnicastForbiddenPorts.setReference('8.8.1 c)')
if mibBuilder.loadTexts: ieee8021PbbTeBridgeStaticForwardAnyUnicastForbiddenPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeBridgeStaticForwardAnyUnicastForbiddenPorts.setDescription('The complete set of ports to which a unicast addressed frame\n        is to be filtered.  This value is persistent and will be restored\n        upon system reboot.  A port may not be added to this set if it\n        is already a member of\n        ieee8021PbbTeBridgeStaticForwardAnyUnicastEgress.  The default\n        value is a string of zeros of appropriate length.\n\n        The value of this object MUST be retained across\n        reinitialization of the management system.')
ieee8021PbbTeBridgeStaticForwardAnyUnicastStorageType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 7, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeBridgeStaticForwardAnyUnicastStorageType.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeBridgeStaticForwardAnyUnicastStorageType.setDescription('The storage type for this row.  All read-create columns must be\n       writable for permanent entries.')
ieee8021PbbTeBridgeStaticForwardAnyUnicastRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 10, 1, 7, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbTeBridgeStaticForwardAnyUnicastRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeBridgeStaticForwardAnyUnicastRowStatus.setDescription('This column contains the status for this row.')
ieee8021PbbTeProtectionGroupAdminFailure = NotificationType((1, 3, 111, 2, 802, 1, 1, 10, 0, 1)).setObjects(("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupConfigState"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupConfigCommandStatus"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupConfigCommandLast"))
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupAdminFailure.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupAdminFailure.setDescription('A protection group generates this notification whenever\n         an adminisistrative command cannot be executed by the\n         protection state machine.  For example, a requested\n         manual switch cannot be performed because of a signal\n         failure condition.\n\n         The management entity receiving the notification can\n         identify the system from the network source address of\n         the notification and can identify the protection group\n         by the indices of the OID\n         of the ieee8021PbbTeProtectionGroupConfigState variable in the\n     notification:\n               \n                ieee8021BridgeBaseComponentId - Identifies the\n                  component on the Bridge where the protection group\n                  is configured.\n\n                ieee8021PbbTeProtectionGroupListGroupId - The id\n                  of the protection group.\n        ')
ieee8021PbbTeCompliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 10, 2, 1))
ieee8021PbbTeGroups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 10, 2, 2))
ieee8021PbbTeGroupListGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 10, 2, 2, 1)).setObjects(("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupListMD"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupListWorkingMA"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupListProtectionMA"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupListStorageType"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupListRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbbTeGroupListGroup = ieee8021PbbTeGroupListGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeGroupListGroup.setDescription('Objects for the GroupList group.')
ieee8021PbbTeMASharedGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 10, 2, 2, 2)).setObjects(("IEEE8021-PBBTE-MIB", "ieee8021PbbTeMASharedGroupId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbbTeMASharedGroup = ieee8021PbbTeMASharedGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeMASharedGroup.setDescription('Objects for the MA Load Sharing Table Group.')
ieee8021PbbTeTesiGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 10, 2, 2, 3)).setObjects(("IEEE8021-PBBTE-MIB", "ieee8021PbbTeTesiComponent"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeTesiBridgePort"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeTesiStorageType"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeTesiRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbbTeTesiGroup = ieee8021PbbTeTesiGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeTesiGroup.setDescription('Objects for the TE SI group ')
ieee8021PbbTeSiEspGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 10, 2, 2, 4)).setObjects(("IEEE8021-PBBTE-MIB", "ieee8021PbbTeTeSiEspEsp"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeTeSiEspStorageType"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeTeSiEspRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbbTeSiEspGroup = ieee8021PbbTeSiEspGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeSiEspGroup.setDescription('Objects for the TESI ESP group.')
ieee8021PbbTeProtectionConfigManGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 10, 2, 2, 5)).setObjects(("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupConfigState"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupConfigCommandStatus"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupConfigCommandLast"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupConfigCommandAdmin"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupConfigActiveRequests"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupConfigNotifyEnable"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupConfigStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbbTeProtectionConfigManGroup = ieee8021PbbTeProtectionConfigManGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionConfigManGroup.setDescription('Objects for the PbbTeConfiguration group.')
ieee8021PbbTeProtectionConfigOptGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 10, 2, 2, 6)).setObjects(("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupConfigWTR"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupConfigHoldOff"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbbTeProtectionConfigOptGroup = ieee8021PbbTeProtectionConfigOptGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionConfigOptGroup.setDescription('Objects for the PbbTeConfiguration group.')
ieee8021PbbTeProtectionGroupISidGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 10, 2, 2, 7)).setObjects(("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupISidComponentId"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupISidGroupId"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupISidStorageType"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupISidRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbbTeProtectionGroupISidGroup = ieee8021PbbTeProtectionGroupISidGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeProtectionGroupISidGroup.setDescription('Objects for the ieee8021PbbTeProtectionGroupISidGroup group.')
ieee8021PbbTeFdbGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 10, 2, 2, 8)).setObjects(("IEEE8021-PBBTE-MIB", "ieee8021PbbTeBridgeStaticForwardAnyUnicastEgressPorts"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeBridgeStaticForwardAnyUnicastForbiddenPorts"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeBridgeStaticForwardAnyUnicastStorageType"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeBridgeStaticForwardAnyUnicastRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbbTeFdbGroup = ieee8021PbbTeFdbGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeFdbGroup.setDescription('Fdb extension objects group')
ieee8021PbbTeNotificationsGroup = NotificationGroup((1, 3, 111, 2, 802, 1, 1, 10, 2, 2, 9)).setObjects(("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupAdminFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbbTeNotificationsGroup = ieee8021PbbTeNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeNotificationsGroup.setDescription('Objects for the notifications group.')
ieee8021PbbTeCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 10, 2, 1, 1)).setObjects(("IEEE8021-PBBTE-MIB", "ieee8021PbbTeGroupListGroup"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeMASharedGroup"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeTesiGroup"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeSiEspGroup"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionConfigManGroup"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionGroupISidGroup"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeFdbGroup"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeNotificationsGroup"), ("IEEE8021-PBBTE-MIB", "ieee8021PbbTeProtectionConfigOptGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbbTeCompliance = ieee8021PbbTeCompliance.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbTeCompliance.setDescription('The compliance statement for support of the PBB-TE MIB module.')
mibBuilder.exportSymbols("IEEE8021-PBBTE-MIB", ieee8021PbbTeFdbGroup=ieee8021PbbTeFdbGroup, ieee8021PbbTeSiEspGroup=ieee8021PbbTeSiEspGroup, ieee8021PbbTeProtectionGroupISidRowStatus=ieee8021PbbTeProtectionGroupISidRowStatus, ieee8021PbbTeBridgeStaticForwardAnyUnicastForbiddenPorts=ieee8021PbbTeBridgeStaticForwardAnyUnicastForbiddenPorts, ieee8021PbbTeBridgeStaticForwardAnyUnicastStorageType=ieee8021PbbTeBridgeStaticForwardAnyUnicastStorageType, ieee8021PbbTeNotifications=ieee8021PbbTeNotifications, ieee8021PbbTeTeSiEspStorageType=ieee8021PbbTeTeSiEspStorageType, ieee8021PbbTeObjects=ieee8021PbbTeObjects, ieee8021PbbTeTesiTable=ieee8021PbbTeTesiTable, ieee8021PbbTeTesiEntry=ieee8021PbbTeTesiEntry, ieee8021PbbTeTesiId=ieee8021PbbTeTesiId, ieee8021PbbTeProtectionGroupISidStorageType=ieee8021PbbTeProtectionGroupISidStorageType, ieee8021PbbTeTeSiEspEntry=ieee8021PbbTeTeSiEspEntry, ieee8021PbbTeTeSiEspRowStatus=ieee8021PbbTeTeSiEspRowStatus, ieee8021PbbTeTesiRowStatus=ieee8021PbbTeTesiRowStatus, ieee8021PbbTeMASharedGroup=ieee8021PbbTeMASharedGroup, PYSNMP_MODULE_ID=ieee8021PbbTeMib, ieee8021PbbTeMASharedGroupId=ieee8021PbbTeMASharedGroupId, ieee8021PbbTeProtectionGroupISidGroupId=ieee8021PbbTeProtectionGroupISidGroupId, ieee8021PbbTeTesiGroup=ieee8021PbbTeTesiGroup, ieee8021PbbTeProtectionGroupConfigCommandLast=ieee8021PbbTeProtectionGroupConfigCommandLast, ieee8021PbbTeTeSiEspTable=ieee8021PbbTeTeSiEspTable, ieee8021PbbTeProtectionGroupListRowStatus=ieee8021PbbTeProtectionGroupListRowStatus, ieee8021PbbTeMASharedGroupEntry=ieee8021PbbTeMASharedGroupEntry, ieee8021PbbTeProtectionGroupConfigActiveRequests=ieee8021PbbTeProtectionGroupConfigActiveRequests, ieee8021PbbTeProtectionGroupListMD=ieee8021PbbTeProtectionGroupListMD, ieee8021PbbTeProtectionGroupISidIndex=ieee8021PbbTeProtectionGroupISidIndex, ieee8021PbbTeTesiComponent=ieee8021PbbTeTesiComponent, ieee8021PbbTeProtectionGroupISidTable=ieee8021PbbTeProtectionGroupISidTable, ieee8021PbbTeCompliance=ieee8021PbbTeCompliance, ieee8021PbbTeBridgeStaticForwardAnyUnicastTable=ieee8021PbbTeBridgeStaticForwardAnyUnicastTable, ieee8021PbbTeNotificationsGroup=ieee8021PbbTeNotificationsGroup, ieee8021PbbTeProtectionGroupListProtectionMA=ieee8021PbbTeProtectionGroupListProtectionMA, ieee8021PbbTeProtectionGroupISidEntry=ieee8021PbbTeProtectionGroupISidEntry, ieee8021PbbTeBridgeStaticForwardAnyUnicastVlanIndex=ieee8021PbbTeBridgeStaticForwardAnyUnicastVlanIndex, ieee8021PbbTeProtectionGroupConfigState=ieee8021PbbTeProtectionGroupConfigState, ieee8021PbbTeMASharedGroupTable=ieee8021PbbTeMASharedGroupTable, ieee8021PbbTeGroupListGroup=ieee8021PbbTeGroupListGroup, ieee8021PbbTeBridgeStaticForwardAnyUnicastEgressPorts=ieee8021PbbTeBridgeStaticForwardAnyUnicastEgressPorts, ieee8021PbbTeProtectionGroupListGroupId=ieee8021PbbTeProtectionGroupListGroupId, ieee8021PbbTeMASharedGroupSubIndex=ieee8021PbbTeMASharedGroupSubIndex, ieee8021PbbTeProtectionGroupISidComponentId=ieee8021PbbTeProtectionGroupISidComponentId, ieee8021PbbTeBridgeStaticForwardAnyUnicastRowStatus=ieee8021PbbTeBridgeStaticForwardAnyUnicastRowStatus, ieee8021PbbTeProtectionGroupConfigCommandStatus=ieee8021PbbTeProtectionGroupConfigCommandStatus, ieee8021PbbTeTesiBridgePort=ieee8021PbbTeTesiBridgePort, ieee8021PbbTeMib=ieee8021PbbTeMib, ieee8021PbbTeProtectionGroupAdminFailure=ieee8021PbbTeProtectionGroupAdminFailure, ieee8021PbbTeProtectionGroupListTable=ieee8021PbbTeProtectionGroupListTable, ieee8021PbbTeTeSiEspEspIndex=ieee8021PbbTeTeSiEspEspIndex, ieee8021PbbTeGroups=ieee8021PbbTeGroups, ieee8021PbbTeProtectionConfigManGroup=ieee8021PbbTeProtectionConfigManGroup, ieee8021PbbTeProtectionGroupConfigNotifyEnable=ieee8021PbbTeProtectionGroupConfigNotifyEnable, ieee8021PbbTeCompliances=ieee8021PbbTeCompliances, ieee8021PbbTeConformance=ieee8021PbbTeConformance, ieee8021PbbTeProtectionGroupISidGroup=ieee8021PbbTeProtectionGroupISidGroup, ieee8021PbbTeProtectionGroupConfigHoldOff=ieee8021PbbTeProtectionGroupConfigHoldOff, ieee8021PbbTeTeSiEspEsp=ieee8021PbbTeTeSiEspEsp, ieee8021PbbTeProtectionGroupListStorageType=ieee8021PbbTeProtectionGroupListStorageType, ieee8021PbbTeProtectionGroupConfigTable=ieee8021PbbTeProtectionGroupConfigTable, ieee8021PbbTeTesiStorageType=ieee8021PbbTeTesiStorageType, ieee8021PbbTeProtectionGroupConfigWTR=ieee8021PbbTeProtectionGroupConfigWTR, ieee8021PbbTeProtectionGroupConfigStorageType=ieee8021PbbTeProtectionGroupConfigStorageType, ieee8021PbbTeBridgeStaticForwardAnyUnicastEntry=ieee8021PbbTeBridgeStaticForwardAnyUnicastEntry, ieee8021PbbTeProtectionConfigOptGroup=ieee8021PbbTeProtectionConfigOptGroup, ieee8021PbbTeProtectionGroupConfigEntry=ieee8021PbbTeProtectionGroupConfigEntry, ieee8021PbbTeProtectionGroupListEntry=ieee8021PbbTeProtectionGroupListEntry, ieee8021PbbTeProtectionGroupListWorkingMA=ieee8021PbbTeProtectionGroupListWorkingMA, ieee8021PbbTeProtectionGroupConfigCommandAdmin=ieee8021PbbTeProtectionGroupConfigCommandAdmin)
