#
# PySNMP MIB module DKSF-70-6-X-X-1 (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/netping/DKSF-70-6-X-X-1
# Produced by pysmi-1.1.12 at Mon Oct  7 02:30:09 2024
# On host fv-az1986-495 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
snmpTraps, = mibBuilder.importSymbols("SNMPv2-MIB", "snmpTraps")
NotificationType, Unsigned32, Integer32, MibIdentifier, IpAddress, Gauge32, enterprises, iso, Bits, ModuleIdentity, ObjectIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "Integer32", "MibIdentifier", "IpAddress", "Gauge32", "enterprises", "iso", "Bits", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32")
DisplayString, TruthValue, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TimeStamp", "TextualConvention")
uniPingServerSolutionV3 = ModuleIdentity((1, 3, 6, 1, 4, 1, 25728, 70))
uniPingServerSolutionV3.setRevisions(('2016-08-24 00:00', '2015-07-14 00:00', '2015-05-29 00:00', '2014-12-03 00:00', '2014-11-26 00:00', '2014-02-02 00:00', '2014-01-29 00:00', '2014-01-21 00:00', '2013-04-11 00:00', '2012-05-31 00:00', '2012-04-17 00:00', '2012-03-23 00:00', '2011-09-23 00:00', '2011-03-24 00:00', '2010-10-14 00:00', '2010-09-20 00:00', '2010-05-31 00:00', '2010-04-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: uniPingServerSolutionV3.setRevisionsDescriptions(('npThermoValuePrecise added\n                 npGsmSendSms renamed to npGsmSendSmsUtf8\n                 npGsmSendWin1251 added', 'npSmoke branch added, npRelHum branch extended', 'npIoTrapLevelLegend added, npIrStatus values redefined', 'npRelayMode, npIoLevelOut values changed', 'npRelayN, npRelayMode, npIoLineN, npRelHumSensorStatusH, npRelHumSensorStatus values changed', 'npRelayMode valid values changed, (3) excluded ', 'npCurLoop, npRelHumidity, npIr branches has added', 'partial rewrite for DKSF 70', 'partial rewrite for DKSF 48', 'npPwrRelayState branch was added', 'npReboot branch was added', 'Minor changes to IR module for IRC-TRv2', '4 IO lines,\n                 Identification is changed from DKSF 52.4 to DKSF 52.5', 'npIoPulseCounter, npIoSinglePulseDuration, npIoSinglePulseStart is added\n                 Identification is changed from DKSF 52.3 to DKSF 52.4', 'IR module support', 'dksf 52.3 subversion', 'dksf 51.3 subversion', 'SMIv2-style rewrite',))
if mibBuilder.loadTexts: uniPingServerSolutionV3.setLastUpdated('201608240000Z')
if mibBuilder.loadTexts: uniPingServerSolutionV3.setOrganization('Alentis Electronics')
if mibBuilder.loadTexts: uniPingServerSolutionV3.setContactInfo('developers@netping.ru')
if mibBuilder.loadTexts: uniPingServerSolutionV3.setDescription('Generic MIB for NetPing remote sensing and control')
lightcom = MibIdentifier((1, 3, 6, 1, 4, 1, 25728))
class FixedPoint1000(TextualConvention, Integer32):
    description = 'Fixed-point value as Integer, 3 decimal gigits after point (i.e. value*1000 rounded to Integer)'
    status = 'current'
    displayHint = 'd-3'

npTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 90))
npTrapEmailTo = MibScalar((1, 3, 6, 1, 4, 1, 25728, 90, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npTrapEmailTo.setStatus('current')
if mibBuilder.loadTexts: npTrapEmailTo.setDescription('user-specified e-mail for NetPing Trap Forwarding Service')
npRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 5500))
npRelayTable = MibTable((1, 3, 6, 1, 4, 1, 25728, 5500, 5), )
if mibBuilder.loadTexts: npRelayTable.setStatus('current')
if mibBuilder.loadTexts: npRelayTable.setDescription('Watchdog and outlet/relay control table')
npRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25728, 5500, 5, 1), ).setIndexNames((0, "DKSF-70-6-X-X-1", "npRelayN"))
if mibBuilder.loadTexts: npRelayEntry.setStatus('current')
if mibBuilder.loadTexts: npRelayEntry.setDescription('Relay/outlet table row')
npRelayN = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 5500, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelayN.setStatus('current')
if mibBuilder.loadTexts: npRelayN.setDescription('The N of output relay')
npRelayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 5500, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("flip", -1), ("off", 0), ("on", 1), ("watchdog", 2), ("schedule", 3), ("scheduleAndWatchdog", 4), ("logic", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npRelayMode.setStatus('current')
if mibBuilder.loadTexts: npRelayMode.setDescription('Control of relay:\n                     -1 - flip between on(1) and off(0)\n                      0 - manual off \n                      1 - manual on\n                      2 - watchdog\n                      3 - schedule\n                      4 - both schedule and watchdog (while switched on by schedule)\n                      5 - logic')
npRelayStartReset = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 5500, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npRelayStartReset.setStatus('current')
if mibBuilder.loadTexts: npRelayStartReset.setDescription('Write 1 to start reset (switch relay off for some time)')
npRelayMemo = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 5500, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelayMemo.setStatus('current')
if mibBuilder.loadTexts: npRelayMemo.setDescription('Relay memo')
npRelayState = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 5500, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelayState.setStatus('current')
if mibBuilder.loadTexts: npRelayState.setDescription('Actual relay state at the moment, \n                      regardless of source of control.\n                      0 - relay is off \n                      1 - relay is on')
npThermo = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8800))
npThermoTable = MibTable((1, 3, 6, 1, 4, 1, 25728, 8800, 1), )
if mibBuilder.loadTexts: npThermoTable.setStatus('current')
if mibBuilder.loadTexts: npThermoTable.setDescription('Thermo Sensors Table')
npThermoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1), ).setIndexNames((0, "DKSF-70-6-X-X-1", "npThermoSensorN"))
if mibBuilder.loadTexts: npThermoEntry.setStatus('current')
if mibBuilder.loadTexts: npThermoEntry.setDescription('Thermo Sensors Table Row')
npThermoSensorN = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoSensorN.setStatus('current')
if mibBuilder.loadTexts: npThermoSensorN.setDescription('The id of temperature sensor, 1 to 8')
npThermoValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 280))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoValue.setStatus('current')
if mibBuilder.loadTexts: npThermoValue.setDescription('Temperature, deg.C')
npThermoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("failed", 0), ("low", 1), ("norm", 2), ("high", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoStatus.setStatus('current')
if mibBuilder.loadTexts: npThermoStatus.setDescription('Temperature status (0=fault, 1=underheat, 2=normal, 3=overheat)')
npThermoLow = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 280))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoLow.setStatus('current')
if mibBuilder.loadTexts: npThermoLow.setDescription('Bottom margin of normal temperature range, deg.C')
npThermoHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 280))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoHigh.setStatus('current')
if mibBuilder.loadTexts: npThermoHigh.setDescription('Top margin of normal temperature range, deg.C')
npThermoMemo = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoMemo.setStatus('current')
if mibBuilder.loadTexts: npThermoMemo.setDescription('T channel memo')
npThermoValuePrecise = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 7), FixedPoint1000()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoValuePrecise.setStatus('current')
if mibBuilder.loadTexts: npThermoValuePrecise.setDescription('Temperature, deg.C, with fractional part 3 digits after point')
npThermoTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8800, 2))
npThermoTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8800, 2, 0))
npThermoTrapSensorN = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8800, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoTrapSensorN.setStatus('current')
if mibBuilder.loadTexts: npThermoTrapSensorN.setDescription('The id of temperature sensor, 1 to 8')
npThermoTrapValue = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8800, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 280))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoTrapValue.setStatus('current')
if mibBuilder.loadTexts: npThermoTrapValue.setDescription('Temperature, deg.C')
npThermoTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8800, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("failed", 0), ("low", 1), ("norm", 2), ("high", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoTrapStatus.setStatus('current')
if mibBuilder.loadTexts: npThermoTrapStatus.setDescription('Temperature status (0=fault, 1=underheat, 2=normal, 3=overheat)')
npThermoTrapLow = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8800, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 280))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoTrapLow.setStatus('current')
if mibBuilder.loadTexts: npThermoTrapLow.setDescription('Bottom margin of normal temperature range, deg.C')
npThermoTrapHigh = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8800, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 280))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoTrapHigh.setStatus('current')
if mibBuilder.loadTexts: npThermoTrapHigh.setDescription('Top margin of normal temperature range, deg.C')
npThermoTrapMemo = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8800, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoTrapMemo.setStatus('current')
if mibBuilder.loadTexts: npThermoTrapMemo.setDescription('T channel memo')
npThermoTrap = NotificationType((1, 3, 6, 1, 4, 1, 25728, 8800, 2, 0, 1)).setObjects(("DKSF-70-6-X-X-1", "npThermoTrapSensorN"), ("DKSF-70-6-X-X-1", "npThermoTrapValue"), ("DKSF-70-6-X-X-1", "npThermoTrapStatus"), ("DKSF-70-6-X-X-1", "npThermoTrapLow"), ("DKSF-70-6-X-X-1", "npThermoTrapHigh"), ("DKSF-70-6-X-X-1", "npThermoTrapMemo"))
if mibBuilder.loadTexts: npThermoTrap.setStatus('current')
if mibBuilder.loadTexts: npThermoTrap.setDescription('Status of Thermo sensor is changed (crossing of normal temp. range)')
npIo = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8900))
npIoTable = MibTable((1, 3, 6, 1, 4, 1, 25728, 8900, 1), )
if mibBuilder.loadTexts: npIoTable.setStatus('current')
if mibBuilder.loadTexts: npIoTable.setDescription('Digital Input/output Table')
npIoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1), ).setIndexNames((0, "DKSF-70-6-X-X-1", "npIoLineN"))
if mibBuilder.loadTexts: npIoEntry.setStatus('current')
if mibBuilder.loadTexts: npIoEntry.setDescription('Digital Input/output Table Row')
npIoLineN = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIoLineN.setStatus('current')
if mibBuilder.loadTexts: npIoLineN.setDescription('Number of IO line, from 1 to max supported')
npIoLevelIn = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIoLevelIn.setStatus('current')
if mibBuilder.loadTexts: npIoLevelIn.setDescription('Input level, 0 or 1')
npIoLevelOut = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("flip", -1), ("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npIoLevelOut.setStatus('current')
if mibBuilder.loadTexts: npIoLevelOut.setDescription('Output level, 0 or 1.\n                  Write -1 to flip output.')
npIoMemo = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIoMemo.setStatus('current')
if mibBuilder.loadTexts: npIoMemo.setDescription('IO line memo')
npIoPulseCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npIoPulseCounter.setStatus('current')
if mibBuilder.loadTexts: npIoPulseCounter.setDescription('Pulse Counter on IO input line (counts positive fronts)\n                  Write 0 to reset.')
npIoSinglePulseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 25500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npIoSinglePulseDuration.setStatus('current')
if mibBuilder.loadTexts: npIoSinglePulseDuration.setDescription('Set duration of single pulse on IO output line,\n                  100ms to 25500ms, min. step is 100ms')
npIoSinglePulseStart = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npIoSinglePulseStart.setStatus('current')
if mibBuilder.loadTexts: npIoSinglePulseStart.setDescription('Write 1 to start single pulse on IO output. \n                  Output will be inverted for time, specified by npIoSinglePulseDuration')
npIoTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8900, 2))
npIoTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8900, 2, 0))
npIoTrapLineN = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8900, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIoTrapLineN.setStatus('current')
if mibBuilder.loadTexts: npIoTrapLineN.setDescription('Trap data, Number of IO line')
npIoTrapLevelIn = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8900, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIoTrapLevelIn.setStatus('current')
if mibBuilder.loadTexts: npIoTrapLevelIn.setDescription('Trap data, new Input level, 0 or 1')
npIoTrapMemo = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8900, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIoTrapMemo.setStatus('current')
if mibBuilder.loadTexts: npIoTrapMemo.setDescription('Trap data, IO line memo')
npIoTrapLevelLegend = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8900, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIoTrapLevelLegend.setStatus('current')
if mibBuilder.loadTexts: npIoTrapLevelLegend.setDescription('Legend for current logic level on the IO line')
npIoTrap = NotificationType((1, 3, 6, 1, 4, 1, 25728, 8900, 2, 0, 1)).setObjects(("DKSF-70-6-X-X-1", "npIoTrapLineN"), ("DKSF-70-6-X-X-1", "npIoTrapLevelIn"), ("DKSF-70-6-X-X-1", "npIoTrapMemo"), ("DKSF-70-6-X-X-1", "npIoTrapLevelLegend"))
if mibBuilder.loadTexts: npIoTrap.setStatus('current')
if mibBuilder.loadTexts: npIoTrap.setDescription('Input state of IO line is changed')
npCurLoop = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8300))
npCurLoopTable = MibTable((1, 3, 6, 1, 4, 1, 25728, 8300, 1), )
if mibBuilder.loadTexts: npCurLoopTable.setStatus('current')
if mibBuilder.loadTexts: npCurLoopTable.setDescription('Current loop sensors Table')
npCurLoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25728, 8300, 1, 1), ).setIndexNames((0, "DKSF-70-6-X-X-1", "npCurLoopN"))
if mibBuilder.loadTexts: npCurLoopEntry.setStatus('current')
if mibBuilder.loadTexts: npCurLoopEntry.setDescription('Current loop sensors Table Row')
npCurLoopN = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8300, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npCurLoopN.setStatus('current')
if mibBuilder.loadTexts: npCurLoopN.setDescription('Index of current loop, 1 to max supported')
npCurLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8300, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 0), ("alert", 1), ("cut", 2), ("short", 3), ("notPowered", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npCurLoopStatus.setStatus('current')
if mibBuilder.loadTexts: npCurLoopStatus.setDescription('Status of the loop\n                  0=Normal, 1=Alert, 2=Cut, 3=Short, 4=Not Powered')
npCurLoopI = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8300, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npCurLoopI.setStatus('current')
if mibBuilder.loadTexts: npCurLoopI.setDescription('Loop current, mA')
npCurLoopV = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8300, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npCurLoopV.setStatus('current')
if mibBuilder.loadTexts: npCurLoopV.setDescription('Voltage drop on the loop, mV')
npCurLoopR = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8300, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npCurLoopR.setStatus('current')
if mibBuilder.loadTexts: npCurLoopR.setDescription('Resistance of the loop, Ohm')
npCurLoopPower = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8300, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("cyclePower", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npCurLoopPower.setStatus('current')
if mibBuilder.loadTexts: npCurLoopPower.setDescription('Control of loop power\n                  0=Off, 1=On, 2=reset by off/on power')
npCurLoopTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8300, 2))
npCurLoopTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8300, 2, 0))
npCurLoopTrapN = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8300, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npCurLoopTrapN.setStatus('current')
if mibBuilder.loadTexts: npCurLoopTrapN.setDescription('Index of current loop, which status has changed')
npCurLoopTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8300, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 0), ("alert", 1), ("cut", 2), ("short", 3), ("notPowered", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npCurLoopTrapStatus.setStatus('current')
if mibBuilder.loadTexts: npCurLoopTrapStatus.setDescription('Status of the loop\n                  0=Normal, 1=Alert, 2=Cut, 3=Short, 4=Not Powered')
npCurLoopTrapI = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8300, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npCurLoopTrapI.setStatus('current')
if mibBuilder.loadTexts: npCurLoopTrapI.setDescription('Loop current, mA')
npCurLoopTrapV = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8300, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npCurLoopTrapV.setStatus('current')
if mibBuilder.loadTexts: npCurLoopTrapV.setDescription('Voltage drop on the loop, mV')
npCurLoopTrapR = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8300, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npCurLoopTrapR.setStatus('current')
if mibBuilder.loadTexts: npCurLoopTrapR.setDescription('Resistance of the loop, Ohm')
npCurLoopTrapPower = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8300, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npCurLoopTrapPower.setStatus('current')
if mibBuilder.loadTexts: npCurLoopTrapPower.setDescription('Status of loop power\n                  0=Off, 1=On')
npCurLoopTrap = NotificationType((1, 3, 6, 1, 4, 1, 25728, 8300, 2, 0, 1)).setObjects(("DKSF-70-6-X-X-1", "npCurLoopTrapN"), ("DKSF-70-6-X-X-1", "npCurLoopTrapStatus"), ("DKSF-70-6-X-X-1", "npCurLoopTrapI"), ("DKSF-70-6-X-X-1", "npCurLoopTrapV"), ("DKSF-70-6-X-X-1", "npCurLoopTrapR"), ("DKSF-70-6-X-X-1", "npCurLoopTrapPower"), ("DKSF-70-6-X-X-1", "npTrapEmailTo"))
if mibBuilder.loadTexts: npCurLoopTrap.setStatus('current')
if mibBuilder.loadTexts: npCurLoopTrap.setDescription('Status of current loop N has changed!')
npSmoke = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8200))
npSmokeTable = MibTable((1, 3, 6, 1, 4, 1, 25728, 8200, 1), )
if mibBuilder.loadTexts: npSmokeTable.setStatus('current')
if mibBuilder.loadTexts: npSmokeTable.setDescription('Smoke Sensors Table')
npSmokeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1), ).setIndexNames((0, "DKSF-70-6-X-X-1", "npSmokeSensorN"))
if mibBuilder.loadTexts: npSmokeEntry.setStatus('current')
if mibBuilder.loadTexts: npSmokeEntry.setDescription('Smoke Sensors Table Row')
npSmokeSensorN = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npSmokeSensorN.setStatus('current')
if mibBuilder.loadTexts: npSmokeSensorN.setDescription('The id of 1Wire Smoke sensor, 1 to 4')
npSmokeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 5))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1), ("off", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npSmokeStatus.setStatus('current')
if mibBuilder.loadTexts: npSmokeStatus.setDescription('Status of Smoke sensor')
npSmokePower = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npSmokePower.setStatus('current')
if mibBuilder.loadTexts: npSmokePower.setDescription('Controls power on Smoke sensor current loop')
npSmokeReset = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npSmokeReset.setStatus('current')
if mibBuilder.loadTexts: npSmokeReset.setDescription('Write 1 to switch off for approx. 10s to reset sensor')
npSmokeMemo = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npSmokeMemo.setStatus('current')
if mibBuilder.loadTexts: npSmokeMemo.setDescription('Smoke sensor memo')
npSmokeTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8200, 2))
npSmokeTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8200, 2, 0))
npSmokeTrapSensorN = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8200, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npSmokeTrapSensorN.setStatus('current')
if mibBuilder.loadTexts: npSmokeTrapSensorN.setDescription('The id of 1Wire Smoke sensor, 1 to 4')
npSmokeTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8200, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 5))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1), ("off", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npSmokeTrapStatus.setStatus('current')
if mibBuilder.loadTexts: npSmokeTrapStatus.setDescription('New status of Smoke sensor')
npSmokeTrapMemo = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8200, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npSmokeTrapMemo.setStatus('current')
if mibBuilder.loadTexts: npSmokeTrapMemo.setDescription('Smoke sensor memo')
npSmokeTrap = NotificationType((1, 3, 6, 1, 4, 1, 25728, 8200, 2, 0, 1)).setObjects(("DKSF-70-6-X-X-1", "npSmokeTrapSensorN"), ("DKSF-70-6-X-X-1", "npSmokeTrapStatus"), ("DKSF-70-6-X-X-1", "npSmokeTrapMemo"))
if mibBuilder.loadTexts: npSmokeTrap.setStatus('current')
if mibBuilder.loadTexts: npSmokeTrap.setDescription('Status of 1W Smoke sensor has changed')
npRelHumidity = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8400))
npRelHumTable = MibTable((1, 3, 6, 1, 4, 1, 25728, 8400, 1), )
if mibBuilder.loadTexts: npRelHumTable.setStatus('current')
if mibBuilder.loadTexts: npRelHumTable.setDescription('Humidity+Temperature Sensors Table')
npRelHumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25728, 8400, 1, 1), ).setIndexNames((0, "DKSF-70-6-X-X-1", "npRelHumN"))
if mibBuilder.loadTexts: npRelHumEntry.setStatus('current')
if mibBuilder.loadTexts: npRelHumEntry.setDescription('Humidity+Temperature Sensors Table Row')
npRelHumN = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8400, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumN.setStatus('current')
if mibBuilder.loadTexts: npRelHumN.setDescription('Index of Humidity+Temperature sensor, 1 to max supported')
npRelHumValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8400, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumValue.setStatus('current')
if mibBuilder.loadTexts: npRelHumValue.setDescription('Relative humidity value, %')
npRelHumStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8400, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("sensorFailed", 0), ("belowSafeRange", 1), ("inSafeRange", 2), ("aboveSafeRange", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumStatus.setStatus('current')
if mibBuilder.loadTexts: npRelHumStatus.setDescription('Status of Relative Humiduty')
npRelHumTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8400, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumTempValue.setStatus('current')
if mibBuilder.loadTexts: npRelHumTempValue.setDescription('Sensor temperature, deg.C')
npRelHumTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8400, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("sensorFailed", 0), ("belowSafeRange", 1), ("inSafeRange", 2), ("aboveSafeRange", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumTempStatus.setStatus('current')
if mibBuilder.loadTexts: npRelHumTempStatus.setDescription('Status of Relative Humiduty')
npRelHumMemo = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8400, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumMemo.setStatus('current')
if mibBuilder.loadTexts: npRelHumMemo.setDescription('Sensor Memo/Location')
npRelHumSafeRangeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8400, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumSafeRangeHigh.setStatus('current')
if mibBuilder.loadTexts: npRelHumSafeRangeHigh.setDescription('Relative Humidity safe range, top margin, %RH')
npRelHumSafeRangeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8400, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumSafeRangeLow.setStatus('current')
if mibBuilder.loadTexts: npRelHumSafeRangeLow.setDescription('Relative Humidity safe range, bottom margin, %RH')
npRelHumTempSafeRangeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8400, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-55, 150))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumTempSafeRangeHigh.setStatus('current')
if mibBuilder.loadTexts: npRelHumTempSafeRangeHigh.setDescription('Temperature safe range, top margin, deg.C')
npRelHumTempSafeRangeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8400, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-55, 150))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumTempSafeRangeLow.setStatus('current')
if mibBuilder.loadTexts: npRelHumTempSafeRangeLow.setDescription('Temperature safe range, bottom margin, deg.C')
npRelHumTrapData = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8400, 3))
npRelHumTrapDataN = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8400, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumTrapDataN.setStatus('current')
if mibBuilder.loadTexts: npRelHumTrapDataN.setDescription('Index of Humidity+Temperature sensor, 1 to max supported')
npRelHumTrapDataValue = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8400, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumTrapDataValue.setStatus('current')
if mibBuilder.loadTexts: npRelHumTrapDataValue.setDescription('Sensor humidity, %RH, or temperature, deg.C')
npRelHumTrapDataStatus = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8400, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("sensorFailed", 0), ("belowSafeRange", 1), ("inSafeRange", 2), ("aboveSafeRange", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumTrapDataStatus.setStatus('current')
if mibBuilder.loadTexts: npRelHumTrapDataStatus.setDescription('Status of humidity or temperature')
npRelHumTrapDataMemo = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8400, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumTrapDataMemo.setStatus('current')
if mibBuilder.loadTexts: npRelHumTrapDataMemo.setDescription('Sensor Memo/Location')
npRelHumTrapDataSafeRangeHigh = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8400, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumTrapDataSafeRangeHigh.setStatus('current')
if mibBuilder.loadTexts: npRelHumTrapDataSafeRangeHigh.setDescription('Relative Humidity safe range, top margin, %RH or deg.C')
npRelHumTrapDataSafeRangeLow = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8400, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumTrapDataSafeRangeLow.setStatus('current')
if mibBuilder.loadTexts: npRelHumTrapDataSafeRangeLow.setDescription('Relative Humidity safe range, bottom margin, %RH or deg.C')
npRelHumTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8400, 6))
npRelHumTrapAllEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8400, 6, 127))
npRelHumTrapTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8400, 7))
npRelHumTrapTempAllEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8400, 7, 127))
npRelHumTrapAllChannels = NotificationType((1, 3, 6, 1, 4, 1, 25728, 8400, 6, 127, 99)).setObjects(("DKSF-70-6-X-X-1", "npRelHumTrapDataN"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataStatus"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataValue"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataMemo"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataSafeRangeHigh"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataSafeRangeLow"))
if mibBuilder.loadTexts: npRelHumTrapAllChannels.setStatus('current')
if mibBuilder.loadTexts: npRelHumTrapAllChannels.setDescription('Status of Humidity has changed!')
npRelHumTrapAboveSafe = NotificationType((1, 3, 6, 1, 4, 1, 25728, 8400, 6, 103)).setObjects(("DKSF-70-6-X-X-1", "npRelHumTrapDataN"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataStatus"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataValue"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataMemo"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataSafeRangeHigh"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataSafeRangeLow"))
if mibBuilder.loadTexts: npRelHumTrapAboveSafe.setStatus('current')
if mibBuilder.loadTexts: npRelHumTrapAboveSafe.setDescription('Humidity above the Safe range')
npRelHumTrapSafe = NotificationType((1, 3, 6, 1, 4, 1, 25728, 8400, 6, 102)).setObjects(("DKSF-70-6-X-X-1", "npRelHumTrapDataN"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataStatus"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataValue"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataMemo"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataSafeRangeHigh"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataSafeRangeLow"))
if mibBuilder.loadTexts: npRelHumTrapSafe.setStatus('current')
if mibBuilder.loadTexts: npRelHumTrapSafe.setDescription('Humidity in the Safe range')
npRelHumTrapBelowSafe = NotificationType((1, 3, 6, 1, 4, 1, 25728, 8400, 6, 101)).setObjects(("DKSF-70-6-X-X-1", "npRelHumTrapDataN"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataStatus"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataValue"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataMemo"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataSafeRangeHigh"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataSafeRangeLow"))
if mibBuilder.loadTexts: npRelHumTrapBelowSafe.setStatus('current')
if mibBuilder.loadTexts: npRelHumTrapBelowSafe.setDescription('Humidity below the Safe range')
npRelHumTrapFail = NotificationType((1, 3, 6, 1, 4, 1, 25728, 8400, 6, 100)).setObjects(("DKSF-70-6-X-X-1", "npRelHumTrapDataN"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataStatus"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataValue"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataMemo"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataSafeRangeHigh"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataSafeRangeLow"))
if mibBuilder.loadTexts: npRelHumTrapFail.setStatus('current')
if mibBuilder.loadTexts: npRelHumTrapFail.setDescription('Rel.Humidity sensor failed!')
npRelHumTrapTempAllChannels = NotificationType((1, 3, 6, 1, 4, 1, 25728, 8400, 7, 127, 99)).setObjects(("DKSF-70-6-X-X-1", "npRelHumTrapDataN"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataStatus"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataValue"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataMemo"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataSafeRangeHigh"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataSafeRangeLow"))
if mibBuilder.loadTexts: npRelHumTrapTempAllChannels.setStatus('current')
if mibBuilder.loadTexts: npRelHumTrapTempAllChannels.setDescription('Status of Temperature has changed!')
npRelHumTrapTempAboveSafe = NotificationType((1, 3, 6, 1, 4, 1, 25728, 8400, 7, 103)).setObjects(("DKSF-70-6-X-X-1", "npRelHumTrapDataN"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataStatus"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataValue"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataMemo"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataSafeRangeHigh"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataSafeRangeLow"))
if mibBuilder.loadTexts: npRelHumTrapTempAboveSafe.setStatus('current')
if mibBuilder.loadTexts: npRelHumTrapTempAboveSafe.setDescription('Temperature above the Safe range')
npRelHumTrapTempSafe = NotificationType((1, 3, 6, 1, 4, 1, 25728, 8400, 7, 102)).setObjects(("DKSF-70-6-X-X-1", "npRelHumTrapDataN"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataStatus"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataValue"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataMemo"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataSafeRangeHigh"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataSafeRangeLow"))
if mibBuilder.loadTexts: npRelHumTrapTempSafe.setStatus('current')
if mibBuilder.loadTexts: npRelHumTrapTempSafe.setDescription('Temperature in the Safe range')
npRelHumTrapTempBelowSafe = NotificationType((1, 3, 6, 1, 4, 1, 25728, 8400, 7, 101)).setObjects(("DKSF-70-6-X-X-1", "npRelHumTrapDataN"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataStatus"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataValue"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataMemo"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataSafeRangeHigh"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataSafeRangeLow"))
if mibBuilder.loadTexts: npRelHumTrapTempBelowSafe.setStatus('current')
if mibBuilder.loadTexts: npRelHumTrapTempBelowSafe.setDescription('Temperature below the Safe range')
npRelHumTrapTempFail = NotificationType((1, 3, 6, 1, 4, 1, 25728, 8400, 7, 100)).setObjects(("DKSF-70-6-X-X-1", "npRelHumTrapDataN"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataStatus"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataValue"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataMemo"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataSafeRangeHigh"), ("DKSF-70-6-X-X-1", "npRelHumTrapDataSafeRangeLow"))
if mibBuilder.loadTexts: npRelHumTrapTempFail.setStatus('current')
if mibBuilder.loadTexts: npRelHumTrapTempFail.setDescription('Sensor failed!')
npGsm = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 3800))
npGsmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 3800, 1))
npGsmFailed = MibScalar((1, 3, 6, 1, 4, 1, 25728, 3800, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("failed", 1), ("fatalError", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npGsmFailed.setStatus('current')
if mibBuilder.loadTexts: npGsmFailed.setDescription("Firmware's GSM module status")
npGsmRegistration = MibScalar((1, 3, 6, 1, 4, 1, 25728, 3800, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("impossible", 0), ("homeNetwork", 1), ("searching", 2), ("denied", 3), ("unknown", 4), ("roaming", 5), ("infoUpdate", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npGsmRegistration.setStatus('current')
if mibBuilder.loadTexts: npGsmRegistration.setDescription('Status of modem registration in GSM network (AT+CREG? result)')
npGsmStrength = MibScalar((1, 3, 6, 1, 4, 1, 25728, 3800, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npGsmStrength.setStatus('current')
if mibBuilder.loadTexts: npGsmStrength.setDescription('GSM signal strength.\n                  0..31 = 0..100%, \n                  99 = unknown or n/a, \n                  255 = updating info')
npGsmSendSmsUtf8 = MibScalar((1, 3, 6, 1, 4, 1, 25728, 3800, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npGsmSendSmsUtf8.setStatus('current')
if mibBuilder.loadTexts: npGsmSendSmsUtf8.setDescription('Send arbitrary SMS.\n                  Format: [phone_number,phone_number,...] Message\n                  One to four destination phone numbers\n                  If [] and numbers omitted, mesagge will be sent to preset numbers from SMS setup\n                  Cyrillic characters must be in UTF8 encoding.')
npGsmSendSmsWin1251 = MibScalar((1, 3, 6, 1, 4, 1, 25728, 3800, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npGsmSendSmsWin1251.setStatus('current')
if mibBuilder.loadTexts: npGsmSendSmsWin1251.setDescription('Send arbitrary SMS.\n                  Format: [phone_number,phone_number,...] Message\n                  One to four destination phone numbers\n                  If [] and numbers omitted, mesagge will be sent to preset numbers from SMS setup\n                  Cyrillic characters must be in Win1251 encoding.')
npGsmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 3800, 2))
npGsmTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 3800, 2, 0))
npGsmTrap = NotificationType((1, 3, 6, 1, 4, 1, 25728, 3800, 2, 0, 1)).setObjects(("DKSF-70-6-X-X-1", "npGsmFailed"), ("DKSF-70-6-X-X-1", "npGsmRegistration"), ("DKSF-70-6-X-X-1", "npGsmStrength"))
if mibBuilder.loadTexts: npGsmTrap.setStatus('current')
if mibBuilder.loadTexts: npGsmTrap.setDescription('GSM modem or SMS firmware problems')
npIr = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 7900))
npIrCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 7900, 1))
npIrPlayCmd = MibScalar((1, 3, 6, 1, 4, 1, 25728, 7900, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npIrPlayCmd.setStatus('current')
if mibBuilder.loadTexts: npIrPlayCmd.setDescription('Write IR command number to send IR command')
npIrReset = MibScalar((1, 3, 6, 1, 4, 1, 25728, 7900, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npIrReset.setStatus('current')
if mibBuilder.loadTexts: npIrReset.setDescription('Write 1 to reset IR transiever.\n                  After reset, send IR command and check npIrStatus.')
npIrStatus = MibScalar((1, 3, 6, 1, 4, 1, 25728, 7900, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("commandCompleted", 0), ("protocolError", 1), ("commandAccepted", 2), ("errorUnknown", 16), ("errorBadNumber", 17), ("errorEmptyRecord", 18), ("errorFlashChip", 19), ("errorTimeout", 20), ("errorExtBusBusy", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIrStatus.setStatus('current')
if mibBuilder.loadTexts: npIrStatus.setDescription('IR transiever status')
npReboot = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 911))
npSoftReboot = MibScalar((1, 3, 6, 1, 4, 1, 25728, 911, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npSoftReboot.setStatus('current')
if mibBuilder.loadTexts: npSoftReboot.setDescription('Write 1 to reboot device after \n                  current operations completition')
npResetStack = MibScalar((1, 3, 6, 1, 4, 1, 25728, 911, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npResetStack.setStatus('current')
if mibBuilder.loadTexts: npResetStack.setDescription('Write 1 to re-initialize network \n                  stack')
npForcedReboot = MibScalar((1, 3, 6, 1, 4, 1, 25728, 911, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npForcedReboot.setStatus('current')
if mibBuilder.loadTexts: npForcedReboot.setDescription('Write 1 to immediate forced reboot')
mibBuilder.exportSymbols("DKSF-70-6-X-X-1", npCurLoopTrapPower=npCurLoopTrapPower, npRelayStartReset=npRelayStartReset, npIoTrapLevelLegend=npIoTrapLevelLegend, npGsmRegistration=npGsmRegistration, npRelayMemo=npRelayMemo, npCurLoopStatus=npCurLoopStatus, npThermoTrapPrefix=npThermoTrapPrefix, npIoPulseCounter=npIoPulseCounter, npCurLoopTrapPrefix=npCurLoopTrapPrefix, npGsmStrength=npGsmStrength, npSmokeTrapSensorN=npSmokeTrapSensorN, npGsmSendSmsWin1251=npGsmSendSmsWin1251, npRelHumTrapDataStatus=npRelHumTrapDataStatus, npRelHumTrapTempSafe=npRelHumTrapTempSafe, npCurLoopEntry=npCurLoopEntry, npGsmTrap=npGsmTrap, npThermoTrapMemo=npThermoTrapMemo, npCurLoopPower=npCurLoopPower, npRelay=npRelay, npRelayMode=npRelayMode, npRelHumTrapAllEvents=npRelHumTrapAllEvents, npRelHumTrapDataN=npRelHumTrapDataN, npRelHumTrapFail=npRelHumTrapFail, npRelHumTable=npRelHumTable, npRelHumTempSafeRangeLow=npRelHumTempSafeRangeLow, npIoLevelOut=npIoLevelOut, npSmokeTraps=npSmokeTraps, npRelayN=npRelayN, npRelHumMemo=npRelHumMemo, npRelHumTrapDataSafeRangeHigh=npRelHumTrapDataSafeRangeHigh, npThermoStatus=npThermoStatus, npSmokePower=npSmokePower, npRelHumTrapData=npRelHumTrapData, npIoTrapPrefix=npIoTrapPrefix, npSmokeTrapStatus=npSmokeTrapStatus, npIoTrapMemo=npIoTrapMemo, npGsmSendSmsUtf8=npGsmSendSmsUtf8, npIoTable=npIoTable, npIoTrapLineN=npIoTrapLineN, npThermoValue=npThermoValue, npSmokeEntry=npSmokeEntry, npIoTraps=npIoTraps, npSoftReboot=npSoftReboot, npResetStack=npResetStack, npIoEntry=npIoEntry, npRelHumTrapTempAboveSafe=npRelHumTrapTempAboveSafe, npGsmTrapPrefix=npGsmTrapPrefix, npIoTrap=npIoTrap, npThermoEntry=npThermoEntry, npSmoke=npSmoke, npCurLoopI=npCurLoopI, npRelHumTrap=npRelHumTrap, npRelHumStatus=npRelHumStatus, npRelHumTrapDataSafeRangeLow=npRelHumTrapDataSafeRangeLow, npIrCtrl=npIrCtrl, npRelHumTempSafeRangeHigh=npRelHumTempSafeRangeHigh, npCurLoopTrapR=npCurLoopTrapR, npRelHumTrapDataMemo=npRelHumTrapDataMemo, npRelHumEntry=npRelHumEntry, npIoMemo=npIoMemo, npRelHumSafeRangeHigh=npRelHumSafeRangeHigh, npCurLoopN=npCurLoopN, npIr=npIr, npRelHumTrapBelowSafe=npRelHumTrapBelowSafe, npGsm=npGsm, npTrapEmailTo=npTrapEmailTo, lightcom=lightcom, npGsmFailed=npGsmFailed, npReboot=npReboot, npRelHumTrapTempAllEvents=npRelHumTrapTempAllEvents, npIrPlayCmd=npIrPlayCmd, npRelHumSafeRangeLow=npRelHumSafeRangeLow, npIrReset=npIrReset, npRelHumTrapTempFail=npRelHumTrapTempFail, npCurLoopTable=npCurLoopTable, npRelHumTempValue=npRelHumTempValue, npThermoTraps=npThermoTraps, npTrapInfo=npTrapInfo, npCurLoopR=npCurLoopR, npSmokeTrapMemo=npSmokeTrapMemo, npCurLoopV=npCurLoopV, npForcedReboot=npForcedReboot, npThermoTrapHigh=npThermoTrapHigh, npSmokeTable=npSmokeTable, npGsmTraps=npGsmTraps, npThermoTable=npThermoTable, npIoLineN=npIoLineN, npThermoValuePrecise=npThermoValuePrecise, npThermoSensorN=npThermoSensorN, PYSNMP_MODULE_ID=uniPingServerSolutionV3, FixedPoint1000=FixedPoint1000, npCurLoopTrapN=npCurLoopTrapN, npRelHumTrapDataValue=npRelHumTrapDataValue, npIoSinglePulseDuration=npIoSinglePulseDuration, npRelayTable=npRelayTable, npRelHumN=npRelHumN, npThermoTrapStatus=npThermoTrapStatus, npRelHumTrapTempAllChannels=npRelHumTrapTempAllChannels, npRelayState=npRelayState, npSmokeTrapPrefix=npSmokeTrapPrefix, npSmokeSensorN=npSmokeSensorN, npThermoLow=npThermoLow, npRelHumValue=npRelHumValue, npThermo=npThermo, npSmokeTrap=npSmokeTrap, npRelHumTrapAllChannels=npRelHumTrapAllChannels, npCurLoopTrapStatus=npCurLoopTrapStatus, npRelHumidity=npRelHumidity, npCurLoopTraps=npCurLoopTraps, npCurLoopTrap=npCurLoopTrap, npRelHumTrapTemp=npRelHumTrapTemp, npSmokeReset=npSmokeReset, uniPingServerSolutionV3=uniPingServerSolutionV3, npThermoTrapSensorN=npThermoTrapSensorN, npIo=npIo, npCurLoop=npCurLoop, npRelHumTempStatus=npRelHumTempStatus, npThermoMemo=npThermoMemo, npSmokeMemo=npSmokeMemo, npCurLoopTrapV=npCurLoopTrapV, npIoLevelIn=npIoLevelIn, npRelHumTrapAboveSafe=npRelHumTrapAboveSafe, npRelHumTrapTempBelowSafe=npRelHumTrapTempBelowSafe, npGsmInfo=npGsmInfo, npRelayEntry=npRelayEntry, npThermoHigh=npThermoHigh, npThermoTrap=npThermoTrap, npIoTrapLevelIn=npIoTrapLevelIn, npIrStatus=npIrStatus, npRelHumTrapSafe=npRelHumTrapSafe, npCurLoopTrapI=npCurLoopTrapI, npIoSinglePulseStart=npIoSinglePulseStart, npSmokeStatus=npSmokeStatus, npThermoTrapValue=npThermoTrapValue, npThermoTrapLow=npThermoTrapLow)
