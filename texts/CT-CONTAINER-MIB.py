#
# PySNMP MIB module CT-CONTAINER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CT-CONTAINER-MIB
# Produced by pysmi-1.1.12 at Wed May 29 10:05:21 2024
# On host fv-az775-27 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
ctChassis2, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctChassis2")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, iso, ObjectIdentity, Bits, TimeTicks, Integer32, ModuleIdentity, IpAddress, Counter64, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "ObjectIdentity", "Bits", "TimeTicks", "Integer32", "ModuleIdentity", "IpAddress", "Counter64", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
contType = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 1))
contLogical = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 2))
contPhysical = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 3))
contResource = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 4))
contCommStr = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 5))
contAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 6))
contTypeID = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 7))
contTypeDevice = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contTypeDevice.setStatus('mandatory')
if mibBuilder.loadTexts: contTypeDevice.setDescription("Identifies the type of device or container. This\n                 could be a chassis, module, a standalone box etc.\n                 A vendor's authoritative identification of this\n                 device or container.  By convention, this value is\n                 allocated within the SMI enterprises subtree(1.3.6.1.4.1),\n                 and provides an easy and unambiguous means for\n                 determining `what kind of box' is being managed.  If this\n                 information is not present or unknown, its value should\n                 be set to the contUnknownTypeID, which is defined below.")
contTypePhysicalEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contTypePhysicalEntries.setStatus('mandatory')
if mibBuilder.loadTexts: contTypePhysicalEntries.setDescription('Number of slots in the device.  For bounded, slot-less\n                 systems, the value of this object shall be zero(0).')
contTypePhysicalChanges = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contTypePhysicalChanges.setStatus('mandatory')
if mibBuilder.loadTexts: contTypePhysicalChanges.setDescription('Depicts the number of physical changes that have occured\n                 to this MIB.  This includes additions and\n                 removal of components in the component table.')
contTypeLogicalChanges = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contTypeLogicalChanges.setStatus('mandatory')
if mibBuilder.loadTexts: contTypeLogicalChanges.setDescription('Depicts the number of logical changes that have occured\n                 to this MIB.  This includes all sets to name strings etc.')
contTypeSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contTypeSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: contTypeSerialNumber.setDescription('Reflects the revision level of the device.  If no\n                serial number is available for the device then this\n                object will be the zero length string.')
contTypeContainingDevice = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contTypeContainingDevice.setStatus('mandatory')
if mibBuilder.loadTexts: contTypeContainingDevice.setDescription("Identifies the type of device or container that \n                 this device or containeris installed or contained.\n                 A vendor's authoritative identification of this\n                 container or device.  By convention, this value is\n                 allocated within the SMI enterprises subtree(1.3.6.1.4.1),\n                 and provides an easy and unambiguous means for\n                 determining `what kind of box' .  If this\n                 information is not present or unknown, its value should\n                 be set to the OBJECT IDENTIFIER { 0 0 }, which is a\n                 syntactically valid object identifier.")
contTypeContainingPhysicalEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contTypeContainingPhysicalEntries.setStatus('mandatory')
if mibBuilder.loadTexts: contTypeContainingPhysicalEntries.setDescription('Number of slots in the container in which the device is\n                 installed.  For bounded, slot-less\n                 systems, the value of this object shall be zero(0).')
contTypeContainingPhysicalEntryID = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contTypeContainingPhysicalEntryID.setStatus('mandatory')
if mibBuilder.loadTexts: contTypeContainingPhysicalEntryID.setDescription('The slot number in a container in which the device is\n                 installed. If the slot number is unknown then this value\n                 will be zero.')
contTypeContainingSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contTypeContainingSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: contTypeContainingSerialNumber.setDescription('Reflects the revision level of the device or container\n                 in which this device is installed.  If no\n                 serial number is available for the device or container\n                 then this object will be the zero length string.')
contLogicalEntryTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 2, 1), )
if mibBuilder.loadTexts: contLogicalEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: contLogicalEntryTable.setDescription('A list of components installed in this container.')
contLogicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 2, 1, 1), ).setIndexNames((0, "CT-CONTAINER-MIB", "contLogicalEntryID"))
if mibBuilder.loadTexts: contLogicalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: contLogicalEntry.setDescription('A component entry containing objects for a particular\n                 component.')
contLogicalEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contLogicalEntryID.setStatus('mandatory')
if mibBuilder.loadTexts: contLogicalEntryID.setDescription('An unique value identifying a component, which includes,\n                 but is not limited to, routers, bridges, and terminal\n                 servers.  Multiple instances of a functional device may\n                 exist within the same container.')
contLogicalEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contLogicalEntryType.setStatus('mandatory')
if mibBuilder.loadTexts: contLogicalEntryType.setDescription("Identifies a component within this container.  A vendor's\n                 authoritative identification of this component type.\n                 By convention, this value is allocated within the SMI\n                 enterprises subtree(1.3.6.1.4.1), and provides an easy\n                 and unambiguous means for determining the component\n                 type.  If this information is not present or unknown,\n                 its value should be set to the OBJECT IDENTIFIER { 0 0 },\n                 which is a syntactically valid object identifier.")
contLogicalEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: contLogicalEntryName.setStatus('mandatory')
if mibBuilder.loadTexts: contLogicalEntryName.setDescription('A textual description of the component.')
contLogicalEntryVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: contLogicalEntryVersion.setStatus('mandatory')
if mibBuilder.loadTexts: contLogicalEntryVersion.setDescription("A textual description of the version/revision level for\n                 this component's software.")
contLogicalEntryROCommStr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contLogicalEntryROCommStr.setStatus('mandatory')
if mibBuilder.loadTexts: contLogicalEntryROCommStr.setDescription('This is defined as the read only community string to\n                 access MIBs registered to this component.')
contLogicalEntryRWCommStr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contLogicalEntryRWCommStr.setStatus('mandatory')
if mibBuilder.loadTexts: contLogicalEntryRWCommStr.setDescription('This is defined as the read write community string to\n                 access MIBs registered to this component.')
contLogicalEntrySUCommStr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contLogicalEntrySUCommStr.setStatus('mandatory')
if mibBuilder.loadTexts: contLogicalEntrySUCommStr.setDescription('This is defined as the super user community string to\n                 access MIBs registered to this component.')
contLogicalEntryAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 7, 9))).clone(namedValues=NamedValues(("enable", 3), ("disable", 7), ("reset", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contLogicalEntryAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: contLogicalEntryAdminStatus.setDescription('')
contLogicalEntryOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("invalid", 2), ("enabled", 3), ("testing", 4), ("operational", 5), ("error", 6), ("disabled", 7), ("delete", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: contLogicalEntryOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: contLogicalEntryOperStatus.setDescription('')
contPhysicalEntryTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 3, 1), )
if mibBuilder.loadTexts: contPhysicalEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: contPhysicalEntryTable.setDescription('A list of modules installed in this container.  A component,\n                 such as a router, may be incorporated on one or more\n                 modules.  More than one component may be incorporated on\n                 each module.')
contPhysicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 3, 1, 1), ).setIndexNames((0, "CT-CONTAINER-MIB", "contPhysicalEntryID"))
if mibBuilder.loadTexts: contPhysicalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: contPhysicalEntry.setDescription('A slot entry containing objects for a particular\n                 module.')
contPhysicalEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contPhysicalEntryID.setStatus('mandatory')
if mibBuilder.loadTexts: contPhysicalEntryID.setDescription('The slot number containing this module.')
contPhysicalEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contPhysicalEntries.setStatus('mandatory')
if mibBuilder.loadTexts: contPhysicalEntries.setDescription('The number of slots that this module occupies.  Some\n                modules require more than one physical front panel slot\n                while only using a single backpanel slot.  In this case\n                this object will reflect the number of slots occupied\n                by the physical module.  This object will have a value\n                of 1 for all single slot modules.')
contPhysicalEntryClass = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 3, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contPhysicalEntryClass.setStatus('mandatory')
if mibBuilder.loadTexts: contPhysicalEntryClass.setDescription('The class (or type) of slot.  For example, in a chassis\n                slots that only allow for power supply modules fall into\n                a class that is different from slots that allow only \n                interface cards.')
contPhysicalEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 3, 1, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contPhysicalEntryType.setStatus('mandatory')
if mibBuilder.loadTexts: contPhysicalEntryType.setDescription("Uniquely defines the module type.  A vendor's\n                 authoritative identification for a module.  By\n                 convention, this value is allocated within the SMI\n                 enterprises subtree(1.3.6.1.4.1), and provides an easy\n                 and unambiguous means for determining the type of\n                 module.")
contPhysicalEntryTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 3, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contPhysicalEntryTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: contPhysicalEntryTimeStamp.setDescription('The value of sysUpTime for this management entity, when\n                 this module was last (re-)initialized.')
contPhysicalEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 11))).clone(namedValues=NamedValues(("reset", 1), ("powerOff", 2), ("busy", 3), ("crippled", 4), ("operational", 5), ("error", 6), ("testing", 7), ("booting", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: contPhysicalEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: contPhysicalEntryStatus.setDescription('The module status.')
contLogicalToPhysicalMapTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 3, 2), )
if mibBuilder.loadTexts: contLogicalToPhysicalMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: contLogicalToPhysicalMapTable.setDescription('A list of components that reside in a container slot.  More \n                 than one component may reside in a container slot.')
contLogicalToPhysicalMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 3, 2, 1), ).setIndexNames((0, "CT-CONTAINER-MIB", "contPhysicalEntryID"), (0, "CT-CONTAINER-MIB", "contLogicalEntryID"))
if mibBuilder.loadTexts: contLogicalToPhysicalMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: contLogicalToPhysicalMapEntry.setDescription('A slot entry containing the objects for a particular\n                 module.')
contPhysicalEntryMapID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contPhysicalEntryMapID.setStatus('mandatory')
if mibBuilder.loadTexts: contPhysicalEntryMapID.setDescription('The slot number of a container slot.  An unique\n                 value, in the range between 0 and and the value of\n                 containerNumSlots.  This object is similiar to \n                 contPhysicalEntryID.')
contLogicalEntryMapID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contLogicalEntryMapID.setStatus('mandatory')
if mibBuilder.loadTexts: contLogicalEntryMapID.setDescription('The ID value for the component incorporated within this\n                 module.  This object is similar to contLogicalEntryID.')
contResourceTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 4, 1), )
if mibBuilder.loadTexts: contResourceTable.setStatus('mandatory')
if mibBuilder.loadTexts: contResourceTable.setDescription('This table defines the potential physical resources that may be\n                 utilized by a given physical module within the container.')
contResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 4, 1, 1), ).setIndexNames((0, "CT-CONTAINER-MIB", "contResourceID"))
if mibBuilder.loadTexts: contResourceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: contResourceEntry.setDescription('Defines a specific physical resource entry')
contResourceID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contResourceID.setStatus('mandatory')
if mibBuilder.loadTexts: contResourceID.setDescription('A unique index that defines a specific physcial resource for\n                 which this relationship exists.')
contResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 4, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contResourceType.setStatus('mandatory')
if mibBuilder.loadTexts: contResourceType.setDescription('Defines the type of physical resource for which this\n                 relationship is defined.')
contResourceMibPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 4, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contResourceMibPointer.setStatus('mandatory')
if mibBuilder.loadTexts: contResourceMibPointer.setDescription('The value of this object defines the start of a MIB that can\n                 be used to determine more specific information about\n                 the given resource.  This may include information about\n                 what physcial modules the resource is connected.  It also\n                 may provide specific control information about the\n                 physcial resource.  For example for a backplane the MIB\n                 may refer contain information on insert/bypass status\n                 of any given physical module.')
contROCommStr = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 5, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contROCommStr.setStatus('mandatory')
if mibBuilder.loadTexts: contROCommStr.setDescription('This is defined as the base read only community string to\n                 access MIBs in this container or on this module. A write to\n                 this object will change all instances of\n                 contLogicalEntryROCommStr.')
contRWCommStr = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contRWCommStr.setStatus('mandatory')
if mibBuilder.loadTexts: contRWCommStr.setDescription('This is defined as the read write community string to\n                 access MIBs in this container or on this module.A write to\n                 this object will change all instances of\n                 contLogicalEntryRWCommStr.')
contSUCommStr = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 5, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contSUCommStr.setStatus('mandatory')
if mibBuilder.loadTexts: contSUCommStr.setDescription('This is defined as the super user community string to\n                 access MIBs in this container or on this module.A write to\n                 this object will change all instances of \n                 contLogicalEntrySUCommStr.')
contNetAddressTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 6, 1), )
if mibBuilder.loadTexts: contNetAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: contNetAddressTable.setDescription('A list of Global network addresses with which this device \n         can be managed.')
contNetAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 6, 1, 1), ).setIndexNames((0, "CT-CONTAINER-MIB", "contNetAddressIndex"))
if mibBuilder.loadTexts: contNetAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: contNetAddressEntry.setDescription('An entry containing objects for a particular\n                 network address.')
contNetAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contNetAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: contNetAddressIndex.setDescription('An unique value identifying a network address.')
contNetAddressNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 6, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contNetAddressNetworkType.setStatus('mandatory')
if mibBuilder.loadTexts: contNetAddressNetworkType.setDescription('Identifies the Network type e.g Inband, etc.')
contNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 6, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: contNetAddress.setDescription('Indicates the network address of the device for a \n                 particular network.')
contNetAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 6, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contNetAddressMask.setStatus('mandatory')
if mibBuilder.loadTexts: contNetAddressMask.setDescription('Indicates the subnet mask for the network address of the\n                 device for a particular network')
contUnknownTypeID = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 9, 7, 1))
mibBuilder.exportSymbols("CT-CONTAINER-MIB", contTypePhysicalEntries=contTypePhysicalEntries, contTypeContainingPhysicalEntries=contTypeContainingPhysicalEntries, contResource=contResource, contRWCommStr=contRWCommStr, contTypePhysicalChanges=contTypePhysicalChanges, contTypeContainingSerialNumber=contTypeContainingSerialNumber, contLogicalEntryAdminStatus=contLogicalEntryAdminStatus, contROCommStr=contROCommStr, contTypeContainingPhysicalEntryID=contTypeContainingPhysicalEntryID, contLogicalEntryVersion=contLogicalEntryVersion, contNetAddressNetworkType=contNetAddressNetworkType, contPhysical=contPhysical, contPhysicalEntries=contPhysicalEntries, contResourceTable=contResourceTable, contPhysicalEntryID=contPhysicalEntryID, contPhysicalEntryTimeStamp=contPhysicalEntryTimeStamp, contResourceType=contResourceType, contUnknownTypeID=contUnknownTypeID, contPhysicalEntry=contPhysicalEntry, contLogicalToPhysicalMapTable=contLogicalToPhysicalMapTable, contPhysicalEntryType=contPhysicalEntryType, contNetAddressTable=contNetAddressTable, contNetAddressIndex=contNetAddressIndex, contResourceMibPointer=contResourceMibPointer, contLogicalEntryROCommStr=contLogicalEntryROCommStr, contNetAddressMask=contNetAddressMask, contLogicalEntryID=contLogicalEntryID, contResourceID=contResourceID, contLogicalEntryType=contLogicalEntryType, contTypeContainingDevice=contTypeContainingDevice, contNetAddress=contNetAddress, contPhysicalEntryTable=contPhysicalEntryTable, contSUCommStr=contSUCommStr, contLogical=contLogical, contLogicalEntryOperStatus=contLogicalEntryOperStatus, contNetAddressEntry=contNetAddressEntry, contTypeID=contTypeID, contLogicalEntry=contLogicalEntry, contType=contType, contCommStr=contCommStr, contTypeSerialNumber=contTypeSerialNumber, contPhysicalEntryClass=contPhysicalEntryClass, contTypeDevice=contTypeDevice, contLogicalToPhysicalMapEntry=contLogicalToPhysicalMapEntry, contPhysicalEntryMapID=contPhysicalEntryMapID, contLogicalEntryTable=contLogicalEntryTable, contPhysicalEntryStatus=contPhysicalEntryStatus, contResourceEntry=contResourceEntry, contLogicalEntrySUCommStr=contLogicalEntrySUCommStr, contLogicalEntryMapID=contLogicalEntryMapID, contLogicalEntryRWCommStr=contLogicalEntryRWCommStr, contAddress=contAddress, contLogicalEntryName=contLogicalEntryName, contTypeLogicalChanges=contTypeLogicalChanges)
