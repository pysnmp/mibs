#
# PySNMP MIB module IRT-DAB-SINGLETRANSMITTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/irt/IRT-DAB-SINGLETRANSMITTER-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 10:08:41 2024
# On host fv-az575-513 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
eventPriority, mibRelease, eventCounter, eventTimeStamp = mibBuilder.importSymbols("IRT-COMMONVARBINDS-MIB", "eventPriority", "mibRelease", "eventCounter", "eventTimeStamp")
dab, MuteOk, Input1Input2, WarningOK, FaultOK, OkNotOk, PresentNotPresent, SelectOnOff, SFNMFN, SelectManualAuto, LocalRemote = mibBuilder.importSymbols("IRT-TRANSMITTER-SMI-MIB", "dab", "MuteOk", "Input1Input2", "WarningOK", "FaultOK", "OkNotOk", "PresentNotPresent", "SelectOnOff", "SFNMFN", "SelectManualAuto", "LocalRemote")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
sysDescr, sysLocation, sysName = mibBuilder.importSymbols("SNMPv2-MIB", "sysDescr", "sysLocation", "sysName")
NotificationType, IpAddress, Bits, Unsigned32, iso, MibIdentifier, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, ObjectIdentity, Integer32, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "Bits", "Unsigned32", "iso", "MibIdentifier", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "ObjectIdentity", "Integer32", "Counter64", "Counter32")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
dabSingleTransmitter = ModuleIdentity((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1))
dabSingleTransmitter.setRevisions(('2007-05-04 14:00', '2006-12-20 14:00', '2006-09-21 14:00', '2006-09-19 14:00', '2006-09-07 14:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: dabSingleTransmitter.setRevisionsDescriptions(('change SFNMode, LocalMode (description) and Module-COMPLIANCE\n\t\t\t\t', 'corrections', 'Adding Compliance Statement', 'Correcting Imports', 'Relocation of the TC-MIB from the standard OID area at IEC into the private OID area of the IRT',))
if mibBuilder.loadTexts: dabSingleTransmitter.setLastUpdated('200705041400Z')
if mibBuilder.loadTexts: dabSingleTransmitter.setOrganization('IRT for WORKING-GROUP-TC-MIB')
if mibBuilder.loadTexts: dabSingleTransmitter.setContactInfo('Andreas Metz\n\t\t\t\t\n\t\t\t\tInstitut fuer Rundfunktechnik GmbH\n\t\t\t\tBroadcast Networks and Servers (SN)\n\t\t\t\t\n\t\t\t\tFloriansmuehlstr.60\n\t\t\t\t80939 Munich\n\t\t\t\tGermany\n\t\t\t\t\n\t\t\t\tPhone: +49 89 32399 325\n\t\t\t\tFax: +49 89 32399 354\n\t\t\t\t')
if mibBuilder.loadTexts: dabSingleTransmitter.setDescription('DAB Single Transmitter\n\t\t\t\t\n\t\t\t\tbranch definition\n\t\t\t\t\n\t\t\t\t1st level\n\t\t\t\t\n\t\t\t\tevents               OBJECT IDENTIFIER ::= { dabSingleTransmitter 0 }\n\t\t\t\tdabSTGeneral         OBJECT IDENTIFIER ::= { dabSingleTransmitter 1 }\n\t\t\t\tdabSTEventEnable     OBJECT IDENTIFIER ::= { dabSingleTransmitter 2 }\n\t\t\t\tdabSTEventPriority   OBJECT IDENTIFIER ::= { dabSingleTransmitter 3 }\n\t\t\t\tgroups               OBJECT IDENTIFIER ::= { dabSingleTransmitter 4 }\n\t\t\t\t\n\t\t\t\t2nd level\n\t\t\t\t\n\t\t\t\tdabSTEventEnableGeneral     OBJECT IDENTIFIER ::= { dabSTEventEnable 1 }\n\t\t\t\tdabSTEventPriorityGeneral   OBJECT IDENTIFIER ::= { dabSTEventPriority 1 }\n\t\t\t\t\n\t\t\t\tend branch\n\t\t\t\t')
dabEventsST = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 0))
dabSTInputPreselectionEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 0, 1)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTInputPreselection"))
if mibBuilder.loadTexts: dabSTInputPreselectionEvent.setStatus('current')
if mibBuilder.loadTexts: dabSTInputPreselectionEvent.setDescription('Description.dabSTInputPreselection notification')
dabSTInputAutomaticEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 0, 2)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTInputAutomatic"))
if mibBuilder.loadTexts: dabSTInputAutomaticEvent.setStatus('current')
if mibBuilder.loadTexts: dabSTInputAutomaticEvent.setDescription('Description. dabSTInputAutomatic notification')
dabSTTransmitterOpModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 0, 3)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTTransmitterOpMode"))
if mibBuilder.loadTexts: dabSTTransmitterOpModeEvent.setStatus('current')
if mibBuilder.loadTexts: dabSTTransmitterOpModeEvent.setDescription('Description. dabSTTransmitterOpMode notification')
dabSTRFPresentEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 0, 4)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTRFPresent"))
if mibBuilder.loadTexts: dabSTRFPresentEvent.setStatus('current')
if mibBuilder.loadTexts: dabSTRFPresentEvent.setDescription('Description. dabSTRFPresent notification')
dabSTResetFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 0, 5)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTResetFault"))
if mibBuilder.loadTexts: dabSTResetFaultEvent.setStatus('obsolete')
if mibBuilder.loadTexts: dabSTResetFaultEvent.setDescription('Notification is inactive!\n\t\t\t\t\n\t\t\t\tDescription. dabSTResetFault notification')
dabSTFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 0, 6)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTFault"))
if mibBuilder.loadTexts: dabSTFaultEvent.setStatus('current')
if mibBuilder.loadTexts: dabSTFaultEvent.setDescription('Description. dabSTFault notification')
dabSTWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 0, 7)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTWarning"))
if mibBuilder.loadTexts: dabSTWarningEvent.setStatus('current')
if mibBuilder.loadTexts: dabSTWarningEvent.setDescription('Description. dabSTWarning notification')
dabSTInput1OKEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 0, 8)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTInput1OK"))
if mibBuilder.loadTexts: dabSTInput1OKEvent.setStatus('current')
if mibBuilder.loadTexts: dabSTInput1OKEvent.setDescription('Description.dabSTInput1OK notification')
dabSTInput2OKEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 0, 9)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTInput2OK"))
if mibBuilder.loadTexts: dabSTInput2OKEvent.setStatus('current')
if mibBuilder.loadTexts: dabSTInput2OKEvent.setDescription('Description.dabSTInput2OK notification')
dabSTLocalModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 0, 10)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTLocalMode"))
if mibBuilder.loadTexts: dabSTLocalModeEvent.setStatus('current')
if mibBuilder.loadTexts: dabSTLocalModeEvent.setDescription('Description. dabSTLocalMode notification')
dabSTActiveInputEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 0, 11)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTActiveInput"))
if mibBuilder.loadTexts: dabSTActiveInputEvent.setStatus('current')
if mibBuilder.loadTexts: dabSTActiveInputEvent.setDescription('Description. dabSTActiveInput notification')
dabSTSFNModeEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 0, 12)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTSFNMode"))
if mibBuilder.loadTexts: dabSTSFNModeEvent.setStatus('current')
if mibBuilder.loadTexts: dabSTSFNModeEvent.setDescription('Description. dabSTSFNMode notification')
dabSTRefFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 0, 13)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTRefFault"))
if mibBuilder.loadTexts: dabSTRefFaultEvent.setStatus('current')
if mibBuilder.loadTexts: dabSTRefFaultEvent.setDescription('Description. dabSTRefFault notification')
dabSTMuteEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 0, 14)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTMute"))
if mibBuilder.loadTexts: dabSTMuteEvent.setStatus('current')
if mibBuilder.loadTexts: dabSTMuteEvent.setDescription('Description. dabSTMute notification')
dabSTWarningTimeStampEvent = NotificationType((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 0, 15)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("IRT-COMMONVARBINDS-MIB", "eventTimeStamp"), ("IRT-COMMONVARBINDS-MIB", "eventPriority"), ("IRT-COMMONVARBINDS-MIB", "eventCounter"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTWarningTimeStamp"))
if mibBuilder.loadTexts: dabSTWarningTimeStampEvent.setStatus('current')
if mibBuilder.loadTexts: dabSTWarningTimeStampEvent.setDescription('Description. dabSTSStuffingMode notification')
dabSTGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 1))
dabSTInputPreselection = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 1, 1), Input1Input2()).setUnits(' ').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTInputPreselection.setStatus('current')
if mibBuilder.loadTexts: dabSTInputPreselection.setDescription('Single transmitter. Preselection input of single transmitter\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) Input 1\n\t\t\t\t(2) Input 2')
dabSTInputAutomatic = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 1, 2), SelectManualAuto()).setUnits(' ').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTInputAutomatic.setStatus('current')
if mibBuilder.loadTexts: dabSTInputAutomatic.setDescription('Single transmitter. Input selection mode of single  transmitter:  manual or automatic\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) manual \n\t\t\t\t(2) automatic')
dabSTTransmitterOpMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 1, 3), SelectOnOff()).setUnits(' ').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTTransmitterOpMode.setStatus('current')
if mibBuilder.loadTexts: dabSTTransmitterOpMode.setDescription('Single transmitter. Transmitter control of single  transmitter\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) ON\n\t\t\t\t(2) OFF')
dabSTRFPresent = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 1, 4), PresentNotPresent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabSTRFPresent.setStatus('current')
if mibBuilder.loadTexts: dabSTRFPresent.setDescription('Single  transmitter. Describes if  the output power is present\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) present\n\t\t\t\t(2) not present\n\t\t\t\t')
dabSTResetFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTResetFault.setStatus('obsolete')
if mibBuilder.loadTexts: dabSTResetFault.setDescription('Description. Massage is inactive!\n\t\t\t\t\n\t\t\t\tSingle  transmitter. Reset fault. Trigger for reset the sum fault\n\t\t\t\t\n\t\t\t\t<1>\n\t\t\t\t\n\t\t\t\t1: reset sum fault')
dabSTFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 1, 6), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabSTFault.setStatus('current')
if mibBuilder.loadTexts: dabSTFault.setDescription('Single transmitter. Fault state of transmitter\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) fault\n\t\t\t\t(2) ok')
dabSTWarning = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 1, 7), WarningOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabSTWarning.setStatus('current')
if mibBuilder.loadTexts: dabSTWarning.setDescription('Single transmitter. Warning state of single transmitter\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) warning\n\t\t\t\t(2) ok')
dabSTInput1OK = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 1, 8), OkNotOk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabSTInput1OK.setStatus('current')
if mibBuilder.loadTexts: dabSTInput1OK.setDescription('Single transmitter.Describes if the input signal at the input 1 of single transmitter  is ok\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) signal ok\n\t\t\t\t(2) signal is not ok')
dabSTInput2OK = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 1, 9), OkNotOk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabSTInput2OK.setStatus('current')
if mibBuilder.loadTexts: dabSTInput2OK.setDescription('Describes if the input signal at the input 2 of single transmitters  is ok\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) signal ok\n\t\t\t\t(2) signal is not ok ')
dabSTLocalMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 1, 10), LocalRemote()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabSTLocalMode.setStatus('current')
if mibBuilder.loadTexts: dabSTLocalMode.setDescription('Single transmitter. Local  mode\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) local\n\t\t\t\t(2) remote')
dabSTActiveInput = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("input1", 1), ("input2", 2), ("seamless", 3), ("hmHierarchicalModulation", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabSTActiveInput.setStatus('current')
if mibBuilder.loadTexts: dabSTActiveInput.setDescription('Single transmitter.Active input of the single transmitter \n\t\t\t\t\n\t\t\t\t\n\t\t\t\t')
dabSTSFNMode = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 1, 12), SFNMFN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabSTSFNMode.setStatus('current')
if mibBuilder.loadTexts: dabSTSFNMode.setDescription('Single transmitter. SFN mode of single transmitter \n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) SFN\n\t\t\t\t(2) MFN')
dabSTRefFault = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 1, 13), FaultOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabSTRefFault.setStatus('current')
if mibBuilder.loadTexts: dabSTRefFault.setDescription('Single transmitter.Fault state of the GPS input or the reference frequency of single transmitter \n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) fault\n\t\t\t\t(2) ok')
dabSTMute = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 1, 14), MuteOk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabSTMute.setStatus('current')
if mibBuilder.loadTexts: dabSTMute.setDescription('Single transmitter. Mute state of single transmitter\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) mute\n\t\t\t\t(2) ok')
dabSTWarningTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 1, 15), WarningOK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabSTWarningTimeStamp.setStatus('current')
if mibBuilder.loadTexts: dabSTWarningTimeStamp.setDescription('Time stamp warning state of single transmitter\n\t\t\t\t\n\t\t\t\t(0) undefined\n\t\t\t\t(1) warning\n\t\t\t\t(2) ok')
dabSTEventEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 2))
dabSTEventEnableGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 2, 1))
dabSTInputPreselectionEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTInputPreselectionEnable.setStatus('current')
if mibBuilder.loadTexts: dabSTInputPreselectionEnable.setDescription('Description.Enable/Disable switch for dabSTInputPreselection event')
dabSTInputAutomaticEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTInputAutomaticEnable.setStatus('current')
if mibBuilder.loadTexts: dabSTInputAutomaticEnable.setDescription('Description.Enable/Disable switch for dabSTInputAutomatic event')
dabSTTransmitterOpModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTTransmitterOpModeEnable.setStatus('current')
if mibBuilder.loadTexts: dabSTTransmitterOpModeEnable.setDescription('Description.Enable/Disable switch for dabSTTransmitterOpMode event')
dabSTRFPresentEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTRFPresentEnable.setStatus('current')
if mibBuilder.loadTexts: dabSTRFPresentEnable.setDescription('Description.Enable/Disable switch for dabSTRFPresent event')
dabSTResetFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTResetFaultEnable.setStatus('obsolete')
if mibBuilder.loadTexts: dabSTResetFaultEnable.setDescription('Massage is inactive!\n\t\t\t\t\n\t\t\t\tDescription. Enable/Disable switch for dabSTResetFault event')
dabSTFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTFaultEnable.setStatus('current')
if mibBuilder.loadTexts: dabSTFaultEnable.setDescription('Description.Enable/Disable switch for dabSTFault event')
dabSTWarningEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 2, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTWarningEnable.setStatus('current')
if mibBuilder.loadTexts: dabSTWarningEnable.setDescription('Description.Enable/Disable switch for dabSTWarning event')
dabSTInput1OKEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 2, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTInput1OKEnable.setStatus('current')
if mibBuilder.loadTexts: dabSTInput1OKEnable.setDescription('Description.Enable/Disable switch for dabSTInput1OK event')
dabSTInput2OKEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 2, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTInput2OKEnable.setStatus('current')
if mibBuilder.loadTexts: dabSTInput2OKEnable.setDescription('Description.Enable/Disable switch for dabSTInput2OK event')
dabSTLocalModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 2, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTLocalModeEnable.setStatus('current')
if mibBuilder.loadTexts: dabSTLocalModeEnable.setDescription('Description.Enable/Disable switch for dabSTLocalMode event')
dabSTActiveInputEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 2, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTActiveInputEnable.setStatus('current')
if mibBuilder.loadTexts: dabSTActiveInputEnable.setDescription('Description.Enable/Disable switch for dabSTActiveInput event')
dabSTSFNModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 2, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTSFNModeEnable.setStatus('current')
if mibBuilder.loadTexts: dabSTSFNModeEnable.setDescription('Description.Enable/Disable switch for dabSTSFNMode event')
dabSTRefFaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 2, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTRefFaultEnable.setStatus('current')
if mibBuilder.loadTexts: dabSTRefFaultEnable.setDescription('Description.Enable/Disable switch for dabSTRefFault event')
dabSTMuteEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 2, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTMuteEnable.setStatus('current')
if mibBuilder.loadTexts: dabSTMuteEnable.setDescription('Description.Enable/Disable switch for dabSTMute event')
dabSTWarningTimeStampEnable = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 2, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTWarningTimeStampEnable.setStatus('current')
if mibBuilder.loadTexts: dabSTWarningTimeStampEnable.setDescription('Description.Enable/Disable switch for dabSTWarningTimeStamp event')
dabSTEventPriority = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 3))
dabSTEventPriorityGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 3, 1))
dabSTInputPreselectionPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTInputPreselectionPriority.setStatus('current')
if mibBuilder.loadTexts: dabSTInputPreselectionPriority.setDescription('Description.Priority for dabSTInputPreselection event')
dabSTInputAutomaticPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTInputAutomaticPriority.setStatus('current')
if mibBuilder.loadTexts: dabSTInputAutomaticPriority.setDescription('Description.Priority for dabSTInputAutomatic event')
dabSTTransmitterOpModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTTransmitterOpModePriority.setStatus('current')
if mibBuilder.loadTexts: dabSTTransmitterOpModePriority.setDescription('Description.Priority for dabSTTransmitterOpMode event')
dabSTRFPresentPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTRFPresentPriority.setStatus('current')
if mibBuilder.loadTexts: dabSTRFPresentPriority.setDescription('Description.Priority for dabSTRFPresent event')
dabSTResetFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTResetFaultPriority.setStatus('obsolete')
if mibBuilder.loadTexts: dabSTResetFaultPriority.setDescription('Massage is inactive!\n\t\t\t\t\n\t\t\t\tDescription. Priority for dabSTResetFault event')
dabSTFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTFaultPriority.setStatus('current')
if mibBuilder.loadTexts: dabSTFaultPriority.setDescription('Description.Priority for dabSTFault event')
dabSTWarningPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTWarningPriority.setStatus('current')
if mibBuilder.loadTexts: dabSTWarningPriority.setDescription('Description.Priority for dabSTWarning event')
dabSTInput1OKPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTInput1OKPriority.setStatus('current')
if mibBuilder.loadTexts: dabSTInput1OKPriority.setDescription('Description.Priority for dabSTInput1OK event')
dabSTInput2OKPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTInput2OKPriority.setStatus('current')
if mibBuilder.loadTexts: dabSTInput2OKPriority.setDescription('Description.Priority for dabSTInput2OK event')
dabSTLocalModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTLocalModePriority.setStatus('current')
if mibBuilder.loadTexts: dabSTLocalModePriority.setDescription('Description.Priority for dabSTLocalMode event')
dabSTActiveInputPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTActiveInputPriority.setStatus('current')
if mibBuilder.loadTexts: dabSTActiveInputPriority.setDescription('Description.Priority for dabSTActiveInput event')
dabSTSFNModePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 3, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTSFNModePriority.setStatus('current')
if mibBuilder.loadTexts: dabSTSFNModePriority.setDescription('Description.Priority for dabSTSFNMode event')
dabSTRefFaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 3, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTRefFaultPriority.setStatus('current')
if mibBuilder.loadTexts: dabSTRefFaultPriority.setDescription('Description.Priority for dabSTRefFault event')
dabSTMutePriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 3, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTMutePriority.setStatus('current')
if mibBuilder.loadTexts: dabSTMutePriority.setDescription('Description.Priority for dabSTMute event')
dabSTWarningTimeStampPriority = MibScalar((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 3, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSTWarningTimeStampPriority.setStatus('current')
if mibBuilder.loadTexts: dabSTWarningTimeStampPriority.setDescription('Description.Priority for dabSTWarningTimeStamp event')
groupsST = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 4))
objectGroupST = ObjectGroup((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 4, 1)).setObjects(("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTInputPreselection"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTInputAutomatic"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTTransmitterOpMode"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTRFPresent"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTFault"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTWarning"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTInput1OK"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTInput2OK"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTLocalMode"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTActiveInput"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTSFNMode"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTRefFault"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTMute"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTWarningTimeStamp"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTInputPreselectionEnable"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTInputAutomaticEnable"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTTransmitterOpModeEnable"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTRFPresentEnable"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTFaultEnable"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTWarningEnable"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTInput1OKEnable"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTInput2OKEnable"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTLocalModeEnable"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTActiveInputEnable"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTSFNModeEnable"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTRefFaultEnable"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTMuteEnable"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTWarningTimeStampEnable"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTInputPreselectionPriority"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTInputAutomaticPriority"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTTransmitterOpModePriority"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTRFPresentPriority"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTFaultPriority"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTWarningPriority"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTInput1OKPriority"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTInput2OKPriority"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTLocalModePriority"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTActiveInputPriority"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTSFNModePriority"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTRefFaultPriority"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTMutePriority"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTWarningTimeStampPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    objectGroupST = objectGroupST.setStatus('current')
if mibBuilder.loadTexts: objectGroupST.setDescription('Description. dab single transmitter  objects')
eventGroupST = NotificationGroup((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 4, 2)).setObjects(("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTMuteEvent"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTRefFaultEvent"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTSFNModeEvent"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTActiveInputEvent"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTLocalModeEvent"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTInput2OKEvent"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTInput1OKEvent"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTWarningEvent"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTFaultEvent"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTRFPresentEvent"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTTransmitterOpModeEvent"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTInputAutomaticEvent"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTInputPreselectionEvent"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTWarningTimeStampEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eventGroupST = eventGroupST.setStatus('current')
if mibBuilder.loadTexts: eventGroupST.setDescription('Description. dab single transmitter  events')
objectGroupSTobsolete = ObjectGroup((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 4, 3)).setObjects(("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTResetFault"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTResetFaultEnable"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTResetFaultPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    objectGroupSTobsolete = objectGroupSTobsolete.setStatus('obsolete')
if mibBuilder.loadTexts: objectGroupSTobsolete.setDescription('Description.Inactive objects')
eventGroupSTobsolete = NotificationGroup((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 4, 4)).setObjects(("IRT-DAB-SINGLETRANSMITTER-MIB", "dabSTResetFaultEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eventGroupSTobsolete = eventGroupSTobsolete.setStatus('obsolete')
if mibBuilder.loadTexts: eventGroupSTobsolete.setDescription('Description.')
complianceST = MibIdentifier((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 5))
dabSingleTransmitterCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 19831, 1, 1, 2, 1, 5, 1)).setObjects(("IRT-DAB-SINGLETRANSMITTER-MIB", "objectGroupST"), ("IRT-DAB-SINGLETRANSMITTER-MIB", "eventGroupST"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dabSingleTransmitterCompliance = dabSingleTransmitterCompliance.setStatus('current')
if mibBuilder.loadTexts: dabSingleTransmitterCompliance.setDescription('Compliance Statement')
mibBuilder.exportSymbols("IRT-DAB-SINGLETRANSMITTER-MIB", dabSTWarning=dabSTWarning, dabSTInput2OK=dabSTInput2OK, dabSTActiveInputEnable=dabSTActiveInputEnable, dabSTEventPriority=dabSTEventPriority, dabSTTransmitterOpModeEvent=dabSTTransmitterOpModeEvent, dabSTSFNMode=dabSTSFNMode, dabSTFaultEnable=dabSTFaultEnable, dabSTWarningEnable=dabSTWarningEnable, dabSTInputPreselectionPriority=dabSTInputPreselectionPriority, dabSTSFNModeEvent=dabSTSFNModeEvent, dabSTActiveInputEvent=dabSTActiveInputEvent, dabSTResetFaultEnable=dabSTResetFaultEnable, dabSTInput2OKEnable=dabSTInput2OKEnable, dabSTRFPresentPriority=dabSTRFPresentPriority, dabSTEventEnable=dabSTEventEnable, dabSTInput1OKPriority=dabSTInput1OKPriority, complianceST=complianceST, dabSTInputAutomatic=dabSTInputAutomatic, dabSTInput1OKEnable=dabSTInput1OKEnable, dabEventsST=dabEventsST, dabSTInput1OK=dabSTInput1OK, dabSTMuteEnable=dabSTMuteEnable, dabSTFaultEvent=dabSTFaultEvent, dabSTInputPreselection=dabSTInputPreselection, dabSTWarningTimeStampEvent=dabSTWarningTimeStampEvent, dabSTActiveInput=dabSTActiveInput, groupsST=groupsST, dabSTActiveInputPriority=dabSTActiveInputPriority, dabSTResetFault=dabSTResetFault, dabSTRefFaultPriority=dabSTRefFaultPriority, objectGroupST=objectGroupST, eventGroupSTobsolete=eventGroupSTobsolete, objectGroupSTobsolete=objectGroupSTobsolete, dabSTMute=dabSTMute, dabSTRFPresentEnable=dabSTRFPresentEnable, dabSTLocalModeEvent=dabSTLocalModeEvent, dabSTLocalMode=dabSTLocalMode, dabSTTransmitterOpModeEnable=dabSTTransmitterOpModeEnable, dabSTEventEnableGeneral=dabSTEventEnableGeneral, dabSTResetFaultPriority=dabSTResetFaultPriority, dabSTInputAutomaticPriority=dabSTInputAutomaticPriority, dabSTWarningTimeStamp=dabSTWarningTimeStamp, dabSTSFNModeEnable=dabSTSFNModeEnable, dabSTFaultPriority=dabSTFaultPriority, dabSTRefFaultEvent=dabSTRefFaultEvent, dabSTWarningPriority=dabSTWarningPriority, dabSTInput2OKEvent=dabSTInput2OKEvent, dabSTTransmitterOpMode=dabSTTransmitterOpMode, dabSTWarningTimeStampEnable=dabSTWarningTimeStampEnable, dabSTRFPresentEvent=dabSTRFPresentEvent, dabSTInput2OKPriority=dabSTInput2OKPriority, dabSTFault=dabSTFault, dabSTSFNModePriority=dabSTSFNModePriority, dabSTMutePriority=dabSTMutePriority, dabSingleTransmitterCompliance=dabSingleTransmitterCompliance, dabSTInputPreselectionEvent=dabSTInputPreselectionEvent, dabSTLocalModeEnable=dabSTLocalModeEnable, dabSTGeneral=dabSTGeneral, dabSTMuteEvent=dabSTMuteEvent, dabSTLocalModePriority=dabSTLocalModePriority, dabSTTransmitterOpModePriority=dabSTTransmitterOpModePriority, dabSTWarningTimeStampPriority=dabSTWarningTimeStampPriority, dabSTWarningEvent=dabSTWarningEvent, PYSNMP_MODULE_ID=dabSingleTransmitter, dabSTRFPresent=dabSTRFPresent, eventGroupST=eventGroupST, dabSTEventPriorityGeneral=dabSTEventPriorityGeneral, dabSTInput1OKEvent=dabSTInput1OKEvent, dabSTRefFault=dabSTRefFault, dabSTInputAutomaticEnable=dabSTInputAutomaticEnable, dabSTRefFaultEnable=dabSTRefFaultEnable, dabSTInputAutomaticEvent=dabSTInputAutomaticEvent, dabSingleTransmitter=dabSingleTransmitter, dabSTInputPreselectionEnable=dabSTInputPreselectionEnable, dabSTResetFaultEvent=dabSTResetFaultEvent)
