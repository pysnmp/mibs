#
# PySNMP MIB module ACD-PAA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/accedian/ACD-PAA-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 14:02:24 2024
# On host fv-az1456-954 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
acdMibs, = mibBuilder.importSymbols("ACCEDIAN-SMI", "acdMibs")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, ModuleIdentity, Bits, NotificationType, Integer32, Counter64, Gauge32, Counter32, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "ModuleIdentity", "Bits", "NotificationType", "Integer32", "Counter64", "Gauge32", "Counter32", "ObjectIdentity", "iso")
DisplayString, TruthValue, MacAddress, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "MacAddress", "DateAndTime", "TextualConvention")
acdPaa = ModuleIdentity((1, 3, 6, 1, 4, 1, 22420, 2, 5))
acdPaa.setRevisions(('2010-11-10 01:00', '2009-02-23 01:00', '2008-02-06 01:00', '2007-10-12 01:00', '2006-12-18 01:00', '2006-11-11 01:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: acdPaa.setRevisionsDescriptions(('Add compliance section.', 'Add support for extended packet loss ratio.', 'Add support for history table.', 'Add support for one-way delay and L2 address discovery.', 'Change the loss ration to in hundredths of a percent.', 'Initial version of MIB module ACD-PAA-MIB.',))
if mibBuilder.loadTexts: acdPaa.setLastUpdated('201011100100Z')
if mibBuilder.loadTexts: acdPaa.setOrganization('Accedian Networks, Inc.')
if mibBuilder.loadTexts: acdPaa.setContactInfo('Accedian Technical Assistance Center\n             Accedian Networks, Inc.\n             4878 Levy, suite 202\n             Saint-Laurent, Quebec Canada H4R 2P1\n             E-mail: support@accedian.com')
if mibBuilder.loadTexts: acdPaa.setDescription('PAA database for this Accedian Networks device.')
acdPaaNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 5, 7))
acdPaaMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 5, 8))
acdPaaConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 5, 9))
acdPaaResultTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1), )
if mibBuilder.loadTexts: acdPaaResultTable.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTable.setDescription('Result table of all Paa entries')
acdPaaResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1), ).setIndexNames((0, "ACD-PAA-MIB", "acdPaaResultID"))
if mibBuilder.loadTexts: acdPaaResultEntry.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultEntry.setDescription('An entry consisting of results for a PAA instance.')
acdPaaResultID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdPaaResultID.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultID.setDescription('Unique value for each PAA instance. Its value ranges from 1 to\n        MAXINT (4 bytes). ')
acdPaaResultState = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 0), ("associating", 1), ("associated", 2), ("running", 3), ("idle", 4), ("lockedIS", 5), ("lockedOOS", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultState.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultState.setDescription('Indicates the state of the instance.')
acdPaaResultPktLossNeCurrValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossNeCurrValid.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossNeCurrValid.setDescription('Indicates the validity of the Near-end current packet loss results.')
acdPaaResultPktLossNeCurrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossNeCurrValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossNeCurrValue.setDescription('Indicates the Near-end current packet loss. The packet loss is the\n         percent of packets transmitted but not received of the Ethernet segment\n         in hundredths of a percent (100 is 1%).')
acdPaaResultPktLossNePrevValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossNePrevValid.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossNePrevValid.setDescription('Indicates the validity of the Near-end previous packet loss results.')
acdPaaResultPktLossNePrevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossNePrevValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossNePrevValue.setDescription('Indicates the Near-end previous packet loss. The packet loss is the\n         percent of packets transmitted but not received of the Ethernet segment\n         in hundredths of a percent (100 is 1%).')
acdPaaResultPktLossFeCurrValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossFeCurrValid.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossFeCurrValid.setDescription('Indicates the validity of the Far-end current packet loss results.')
acdPaaResultPktLossFeCurrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossFeCurrValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossFeCurrValue.setDescription('Indicates the Far-end current packet loss. The packet loss is the\n         percent of packets transmitted but not received of the Ethernet segment\n         in hundredths of a percent (100 is 1%).')
acdPaaResultPktLossFePrevValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossFePrevValid.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossFePrevValid.setDescription('Indicates the validity of the Far-end previous packet loss results.')
acdPaaResultPktLossFePrevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossFePrevValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossFePrevValue.setDescription('Indicates the Far-end previous packet loss. The packet loss is the\n         percent of packets transmitted but not received of the Ethernet segment\n         in hundredths of a percent (100 is 1%).')
acdPaaResultOneWayDvInstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvInstValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDvInstValue.setDescription('Indicates the One-way delay variation instantaneous value. The value\n         is expressed in micro-seconds.')
acdPaaResultOneWayDvCurrValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvCurrValid.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDvCurrValid.setDescription('Indicates the validity of the current One-way delay variation results.')
acdPaaResultOneWayDvCurrMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvCurrMinValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDvCurrMinValue.setDescription('Indicates the current One-way delay variation minimum value. The value\n         is expressed in micro-seconds.')
acdPaaResultOneWayDvCurrMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvCurrMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDvCurrMaxValue.setDescription('Indicates the current One-way delay variation maximum value. The value\n         is expressed in micro-seconds.')
acdPaaResultOneWayDvCurrAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvCurrAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDvCurrAvgValue.setDescription('Indicates the current One-way delay variation average value. The value\n         is expressed in micro-seconds.')
acdPaaResultOneWayDvCurrThreshExc = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvCurrThreshExc.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDvCurrThreshExc.setDescription('Indicates the current number of samples exceeding the limit.')
acdPaaResultOneWayDvPrevValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvPrevValid.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDvPrevValid.setDescription('Indicates the validity of the previous One-way delay variation results.')
acdPaaResultOneWayDvPrevMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvPrevMinValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDvPrevMinValue.setDescription('Indicates the previous One-way delay variation minimum value. The value\n         is expressed in micro-seconds.')
acdPaaResultOneWayDvPrevMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvPrevMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDvPrevMaxValue.setDescription('Indicates the previous One-way delay variation maximum value. The value\n         is expressed in micro-seconds.')
acdPaaResultOneWayDvPrevAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvPrevAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDvPrevAvgValue.setDescription('Indicates the previous One-way delay variation average value. The value\n         is expressed in micro-seconds.')
acdPaaResultOneWayDvPrevThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvPrevThreshEx.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDvPrevThreshEx.setDescription('Indicates the previous number of samples exceeding the limit.')
acdPaaResultTwoWayDelayInstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayInstValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayInstValue.setDescription('Indicates the Two-way delay instantaneous value. The value\n         is expressed in micro-seconds.')
acdPaaResultTwoWayDelayCurrValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayCurrValid.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayCurrValid.setDescription('Indicates the validity of the current Two-way delay results.')
acdPaaResultTwoWayDelayCurrMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayCurrMinValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayCurrMinValue.setDescription('Indicates the current Two-way delay minimum value. The value\n         is expressed in micro-seconds.')
acdPaaResultTwoWayDelayCurrMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayCurrMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayCurrMaxValue.setDescription('Indicates the current Two-way delay maximum value. The value\n         is expressed in micro-seconds.')
acdPaaResultTwoWayDelayCurrAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayCurrAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayCurrAvgValue.setDescription('Indicates the current Two-way delay average value. The value\n         is expressed in micro-seconds.')
acdPaaResultTwoWayDelayCurrThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayCurrThreshEx.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayCurrThreshEx.setDescription('Indicates the current number of samples exceeding the limit.')
acdPaaResultTwoWayDelayPrevValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayPrevValid.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayPrevValid.setDescription('Indicates the validity of the previous Two-way delay results.')
acdPaaResultTwoWayDelayPrevMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayPrevMinValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayPrevMinValue.setDescription('Indicates the previous Two-way delay minimum value. The value\n         is expressed in micro-seconds.')
acdPaaResultTwoWayDelayPrevMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayPrevMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayPrevMaxValue.setDescription('Indicates the previous Two-way delay maximum value. The value\n         is expressed in micro-seconds.')
acdPaaResultTwoWayDelayPrevAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayPrevAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayPrevAvgValue.setDescription('Indicates the previous Two-way delay average value. The value\n         is expressed in micro-seconds.')
acdPaaResultTwoWayDelayPrevThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayPrevThreshEx.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayPrevThreshEx.setDescription('Indicates the previous number of samples exceeding the limit.')
acdPaaResultTwoWayDvInstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvInstValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDvInstValue.setDescription('Indicates the Two-way delay variation instantaneous value. The value\n         is expressed in micro-seconds.')
acdPaaResultTwoWayDvCurrValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvCurrValid.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDvCurrValid.setDescription('Indicates the validity of the current Two-way delay variation results.')
acdPaaResultTwoWayDvCurrMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvCurrMinValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDvCurrMinValue.setDescription('Indicates the current Two-way delay variation minimum value. The value\n         is expressed in micro-seconds.')
acdPaaResultTwoWayDvCurrMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvCurrMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDvCurrMaxValue.setDescription('Indicates the current Two-way delay variation maximum value. The value\n         is expressed in micro-seconds.')
acdPaaResultTwoWayDvCurrAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvCurrAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDvCurrAvgValue.setDescription('Indicates the current Two-way delay variation average value. The value\n         is expressed in micro-seconds.')
acdPaaResultTwoWayDvCurrThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvCurrThreshEx.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDvCurrThreshEx.setDescription('Indicates the current number of samples exceeding the limit.')
acdPaaResultTwoWayDvPrevValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 39), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvPrevValid.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDvPrevValid.setDescription('Indicates the validity of the previous Two-way delay variation results.')
acdPaaResultTwoWayDvPrevMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvPrevMinValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDvPrevMinValue.setDescription('Indicates the previous Two-way delay variation minimum value. The value\n         is expressed in micro-seconds.')
acdPaaResultTwoWayDvPrevMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvPrevMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDvPrevMaxValue.setDescription('Indicates the previous Two-way delay variation maximum value. The value\n         is expressed in micro-seconds.')
acdPaaResultTwoWayDvPrevAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvPrevAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDvPrevAvgValue.setDescription('Indicates the previous Two-way delay variation average value. The value\n         is expressed in micro-seconds.')
acdPaaResultTwoWayDvPrevThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvPrevThreshEx.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDvPrevThreshEx.setDescription('Indicates the previous number of samples exceeding the limit.')
acdPaaResultOneWayDelayInstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayInstValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDelayInstValue.setDescription('Indicate the One-way delay instantaneous value. The value\n         is express in micro-seconds.')
acdPaaResultOneWayDelayCurrValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 45), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayCurrValid.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDelayCurrValid.setDescription('Indicate the validity of the current One-way delay results.')
acdPaaResultOneWayDelayCurrMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayCurrMinValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDelayCurrMinValue.setDescription('Indicate the current One-way delay minimum value. The value\n         is express in micro-seconds.')
acdPaaResultOneWayDelayCurrMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayCurrMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDelayCurrMaxValue.setDescription('Indicate the current One-way delay maximum value. The value\n         is express in micro-seconds.')
acdPaaResultOneWayDelayCurrAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayCurrAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDelayCurrAvgValue.setDescription('Indicate the current One-way delay average value. The value\n         is express in micro-seconds.')
acdPaaResultOneWayDelayCurrThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayCurrThreshEx.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDelayCurrThreshEx.setDescription('Indicate the current number of sample exceeding the limit.')
acdPaaResultOneWayDelayPrevValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 50), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayPrevValid.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDelayPrevValid.setDescription('Indicate the validity of the previous One-way delay results.')
acdPaaResultOneWayDelayPrevMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayPrevMinValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDelayPrevMinValue.setDescription('Indicate the previous One-way delay minimum value. The value\n         is express in micro-seconds.')
acdPaaResultOneWayDelayPrevMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayPrevMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDelayPrevMaxValue.setDescription('Indicate the previous One-way delay maximum value. The value\n         is express in micro-seconds.')
acdPaaResultOneWayDelayPrevAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayPrevAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDelayPrevAvgValue.setDescription('Indicate the previous One-way delay average value. The value\n         is express in micro-seconds.')
acdPaaResultOneWayDelayPrevThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 54), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayPrevThreshEx.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDelayPrevThreshEx.setDescription('Indicate the previous number of sample exceeding the limit.')
acdPaaResultPktLossTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 55), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossTime.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossTime.setDescription('Indicates the time when the current packet loss results\n         were moved to the previous packet loss results.')
acdPaaResultOneWayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 56), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayTime.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayTime.setDescription('Indicates the time when the current one-way results\n         were moved to the previous one-way results.')
acdPaaResultTwoWayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 57), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayTime.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayTime.setDescription('Indicates the time when the current two-way results\n         were moved to the previous two-way results.')
acdPaaResultPktLossNeCurrSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 58), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossNeCurrSamples.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossNeCurrSamples.setDescription('Indicates the number of samples gathered to calculate\n         the current period near-end packet loss results.')
acdPaaResultPktLossNePrevSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 59), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossNePrevSamples.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossNePrevSamples.setDescription('Indicates the number of samples gathered to calculate\n         the previous period near-end packet loss results.')
acdPaaResultPktLossFeCurrSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 60), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossFeCurrSamples.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossFeCurrSamples.setDescription('Indicates the number of samples gathered to calculate\n         the current period far-end packet loss results.')
acdPaaResultPktLossFePrevSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 61), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossFePrevSamples.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossFePrevSamples.setDescription('Indicates the number of samples gathered to calculate\n         the previous period far-end packet loss results.')
acdPaaResultOneWayDelayCurrSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 62), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayCurrSamples.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDelayCurrSamples.setDescription('Indicates the number of samples gathered to calculate\n         the current period one-way delay results.')
acdPaaResultOneWayDelayPrevSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 63), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayPrevSamples.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDelayPrevSamples.setDescription('Indicates the number of samples gathered to calculate\n         the previous period one-way delay results.')
acdPaaResultOneWayDvCurrSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 64), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvCurrSamples.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDvCurrSamples.setDescription('Indicates the number of samples gathered to calculate\n         the current period one-way delay variation results.')
acdPaaResultOneWayDvPrevSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 65), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvPrevSamples.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultOneWayDvPrevSamples.setDescription('Indicates the number of samples gathered to calculate\n         the previous period one-way delay variation results.')
acdPaaResultTwoWayDelayCurrSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 66), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayCurrSamples.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayCurrSamples.setDescription('Indicates the number of samples gathered to calculate\n         the current period two-way delay results.')
acdPaaResultTwoWayDelayPrevSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 67), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayPrevSamples.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayPrevSamples.setDescription('Indicates the number of samples gathered to calculate\n         the previous period two-way delay results.')
acdPaaResultTwoWayDvCurrSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 68), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvCurrSamples.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDvCurrSamples.setDescription('Indicates the number of samples gathered to calculate\n         the current period two-way delay variation results.')
acdPaaResultTwoWayDvPrevSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 69), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvPrevSamples.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultTwoWayDvPrevSamples.setDescription('Indicates the number of samples gathered to calculate\n         the previous period two-way delay variation results.')
acdPaaResultIgmpJoinDelayInstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayInstValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayInstValue.setDescription('Indicates the IGMP Join delay instantaneous value. The value\n         is expressed in micro-seconds.')
acdPaaResultIgmpJoinDelayCurrValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 71), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayCurrValid.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayCurrValid.setDescription('Indicates the validity of the current IGMP Join delay results.')
acdPaaResultIgmpJoinDelayCurrMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayCurrMinValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayCurrMinValue.setDescription('Indicates the current IGMP Join delay minimum value. The value\n         is expressed in micro-seconds.')
acdPaaResultIgmpJoinDelayCurrMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayCurrMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayCurrMaxValue.setDescription('Indicates the current IGMP Join delay maximum value. The value\n         is expressed in micro-seconds.')
acdPaaResultIgmpJoinDelayCurrAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayCurrAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayCurrAvgValue.setDescription('Indicates the current IGMP Join delay average value. The value\n         is expressed in micro-seconds.')
acdPaaResultIgmpJoinDelayCurrThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 75), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayCurrThreshEx.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayCurrThreshEx.setDescription('Indicates the current number of IGMP Join samples exceeding the limit.')
acdPaaResultIgmpJoinDelayPrevValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 76), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayPrevValid.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayPrevValid.setDescription('Indicates the validity of the previous IGMP Join delay results.')
acdPaaResultIgmpJoinDelayPrevMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayPrevMinValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayPrevMinValue.setDescription('Indicates the previous IGMP Join delay minimum value. The value\n         is expressed in micro-seconds.')
acdPaaResultIgmpJoinDelayPrevMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayPrevMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayPrevMaxValue.setDescription('Indicates the previous IGMP Join delay maximum value. The value\n         is expressed in micro-seconds.')
acdPaaResultIgmpJoinDelayPrevAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayPrevAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayPrevAvgValue.setDescription('Indicates the previous IGMP Join delay average value. The value\n         is expressed in micro-seconds.')
acdPaaResultIgmpJoinDelayPrevThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 80), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayPrevThreshEx.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayPrevThreshEx.setDescription('Indicates the previous number of IGMP Join samples exceeding the limit.')
acdPaaResultIgmpLeaveDelayInstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayInstValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayInstValue.setDescription('Indicates the IGMP Leave delay instantaneous value. The value\n         is expressed in micro-seconds.')
acdPaaResultIgmpLeaveDelayCurrValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 82), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayCurrValid.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayCurrValid.setDescription('Indicates the validity of the current IGMP Leave delay results.')
acdPaaResultIgmpLeaveDelayCurrMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayCurrMinValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayCurrMinValue.setDescription('Indicates the current IGMP Leave delay minimum value. The value\n         is expressed in micro-seconds.')
acdPaaResultIgmpLeaveDelayCurrMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayCurrMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayCurrMaxValue.setDescription('Indicates the current IGMP Leave delay maximum value. The value\n         is expressed in micro-seconds.')
acdPaaResultIgmpLeaveDelayCurrAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayCurrAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayCurrAvgValue.setDescription('Indicates the current IGMP Leave delay average value. The value\n         is expressed in micro-seconds.')
acdPaaResultIgmpLeaveDelayCurrThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 86), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayCurrThreshEx.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayCurrThreshEx.setDescription('Indicates the current number of IGMP Leave samples exceeding the limit.')
acdPaaResultIgmpLeaveDelayPrevValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 87), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayPrevValid.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayPrevValid.setDescription('Indicates the validity of the previous IGMP Leave delay results.')
acdPaaResultIgmpLeaveDelayPrevMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayPrevMinValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayPrevMinValue.setDescription('Indicates the previous IGMP Leave delay minimum value. The value\n         is expressed in micro-seconds.')
acdPaaResultIgmpLeaveDelayPrevMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayPrevMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayPrevMaxValue.setDescription('Indicates the previous IGMP Leave delay maximum value. The value\n         is expressed in micro-seconds.')
acdPaaResultIgmpLeaveDelayPrevAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayPrevAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayPrevAvgValue.setDescription('Indicates the previous IGMP Leave delay average value. The value\n         is expressed in micro-seconds.')
acdPaaResultIgmpLeaveDelayPrevThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 91), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayPrevThreshEx.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayPrevThreshEx.setDescription('Indicates the previous number of IGMP Leave samples exceeding the limit.')
acdPaaResultIgmpJoinDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 92), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayTime.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayTime.setDescription('Indicates the time when the current IGMP Join delay results\n         were moved to the previous IGMP join delay results.')
acdPaaResultIgmpLeaveDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 93), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayTime.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayTime.setDescription('Indicates the time when the current IGMP Leave results\n         were moved to the previous IGMP Leave results.')
acdPaaResultIgmpJoinDelayCurrSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 94), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayCurrSamples.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayCurrSamples.setDescription('Indicates the number of IGMP Join samples gathered to calculate\n         the current period IGMP Join delay results.')
acdPaaResultIgmpJoinDelayPrevSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 95), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayPrevSamples.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayPrevSamples.setDescription('Indicates the number of IGMP Join samples gathered to calculate\n         the previous period IGMP Join delay results.')
acdPaaResultIgmpLeaveDelayCurrSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 96), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayCurrSamples.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayCurrSamples.setDescription('Indicates the number of IGMP Leave samples gathered to calculate\n         the current period IGMP Leave delay results.')
acdPaaResultIgmpLeaveDelayPrevSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 97), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayPrevSamples.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayPrevSamples.setDescription('Indicates the number of IGMP Leave samples gathered to calculate\n         the previous period IGMP Leave delay results.')
acdPaaResultPktLossCurrGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 98), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossCurrGaps.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossCurrGaps.setDescription('Indicates the number of gaps that occured in\n         the current period.')
acdPaaResultPktLossPrevGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 99), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossPrevGaps.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossPrevGaps.setDescription('Indicates the number of gaps that occured in\n         the previous period.')
acdPaaResultPktLossCurrLargestGap = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 100), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossCurrLargestGap.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossCurrLargestGap.setDescription('Indicates the size of the largest gap that occured in\n         the current period.')
acdPaaResultPktLossPrevLargestGap = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 101), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossPrevLargestGap.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossPrevLargestGap.setDescription('Indicates the size of the largest gap that occured in\n         the previous period.')
acdPaaResultPktLossNeCurrValueExt = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 102), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossNeCurrValueExt.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossNeCurrValueExt.setDescription('Extended near-end current packet loss. The packet loss is\n         the percent of packets transmitted but not received in\n         millionth of a percent (1,000,000 is 1%).')
acdPaaResultPktLossNePrevValueExt = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 103), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossNePrevValueExt.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossNePrevValueExt.setDescription('Extended near-end previous packet loss. The packet loss is\n         the percent of packets transmitted but not received in\n         millionth of a percent (1,000,000 is 1%).')
acdPaaResultPktLossFeCurrValueExt = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 104), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossFeCurrValueExt.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossFeCurrValueExt.setDescription('Extended far-end current packet loss. The packet loss is\n         the percent of packets transmitted but not received in\n         millionth of a percent (1,000,000 is 1%).')
acdPaaResultPktLossFePrevValueExt = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 105), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossFePrevValueExt.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossFePrevValueExt.setDescription('Extended far-end previous packet loss. The packet loss is\n         the percent of packets transmitted but not received in\n         millionth of a percent (1,000,000 is 1%).')
acdPaaResultPktLossNeCurrNbrLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 106), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossNeCurrNbrLoss.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossNeCurrNbrLoss.setDescription('Indicates the current period number of near-end packet lost.\n         This should be less or equal to acdPaaResultPktLossNeCurrSamples. ')
acdPaaResultPktLossNePrevNbrLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 107), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossNePrevNbrLoss.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossNePrevNbrLoss.setDescription('Indicates the previous period number of near-end packet lost.\n         This should be less or equal to acdPaaResultPktLossNePrevSamples.')
acdPaaResultPktLossFeCurrNbrLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 108), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossFeCurrNbrLoss.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossFeCurrNbrLoss.setDescription('Indicates the current period number of far-end packet lost.\n         This should be less or equal to acdPaaResultPktLossFeCurrSamples. ')
acdPaaResultPktLossFePrevNbrLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 109), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossFePrevNbrLoss.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultPktLossFePrevNbrLoss.setDescription('Indicates the previous period number of far-end packet lost.\n         This should be less or equal to acdPaaResultPktLossFePrevSamples.')
acdPaaStatusTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2), )
if mibBuilder.loadTexts: acdPaaStatusTable.setStatus('current')
if mibBuilder.loadTexts: acdPaaStatusTable.setDescription('Status table of all Paa entries')
acdPaaStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1), ).setIndexNames((0, "ACD-PAA-MIB", "acdPaaStatusID"))
if mibBuilder.loadTexts: acdPaaStatusEntry.setStatus('current')
if mibBuilder.loadTexts: acdPaaStatusEntry.setDescription('An entry consisting of the status for a PAA instance.')
acdPaaStatusID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdPaaStatusID.setStatus('current')
if mibBuilder.loadTexts: acdPaaStatusID.setDescription('Unique value for each PAA instance. Its value ranges from 1 to\n        MAXINT (4 bytes). ')
acdPaaStatusCcAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusCcAlert.setStatus('current')
if mibBuilder.loadTexts: acdPaaStatusCcAlert.setDescription('Indicates the presence of the Connectivity Check alert.')
acdPaaStatusPktLossAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusPktLossAlert.setStatus('current')
if mibBuilder.loadTexts: acdPaaStatusPktLossAlert.setDescription('Indicates the presence of the Packet Loss alert.')
acdPaaStatusOneWayDvAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusOneWayDvAlert.setStatus('current')
if mibBuilder.loadTexts: acdPaaStatusOneWayDvAlert.setDescription('Indicates the presence of the One-way Delay Variation alert.')
acdPaaStatusOneWayAvgDvAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusOneWayAvgDvAlert.setStatus('current')
if mibBuilder.loadTexts: acdPaaStatusOneWayAvgDvAlert.setDescription('Indicates the presence of the One-way Average Delay Variation alert.')
acdPaaStatusTwoWayDelayAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusTwoWayDelayAlert.setStatus('current')
if mibBuilder.loadTexts: acdPaaStatusTwoWayDelayAlert.setDescription('Indicates the presence of the Two-way Delay alert.')
acdPaaStatusTwoWayAvgDelayAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusTwoWayAvgDelayAlert.setStatus('current')
if mibBuilder.loadTexts: acdPaaStatusTwoWayAvgDelayAlert.setDescription('Indicates the presence of the Two-way Average Delay alert.')
acdPaaStatusTwoWayDvAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusTwoWayDvAlert.setStatus('current')
if mibBuilder.loadTexts: acdPaaStatusTwoWayDvAlert.setDescription('Indicates the presence of the Two-way Delay Variation alert.')
acdPaaStatusTwoWayAvgDvAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusTwoWayAvgDvAlert.setStatus('current')
if mibBuilder.loadTexts: acdPaaStatusTwoWayAvgDvAlert.setDescription('Indicates the presence of the Two-way Average Delay Variation alert.')
acdPaaStatusOneWayDelayAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusOneWayDelayAlert.setStatus('current')
if mibBuilder.loadTexts: acdPaaStatusOneWayDelayAlert.setDescription('Indicate the presence of the One Way Delay alert.')
acdPaaStatusOneWayAvgDelayAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusOneWayAvgDelayAlert.setStatus('current')
if mibBuilder.loadTexts: acdPaaStatusOneWayAvgDelayAlert.setDescription('Indicate the presence of the One Way Average Delay alert.')
acdPaaStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 0), ("associating", 1), ("associated", 2), ("running", 3), ("idle", 4), ("lockedIS", 5), ("lockedOOS", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusState.setStatus('current')
if mibBuilder.loadTexts: acdPaaStatusState.setDescription('Paa instance state.')
acdPaaStatusPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusPeerAddress.setStatus('current')
if mibBuilder.loadTexts: acdPaaStatusPeerAddress.setDescription('The peer address. Dynamically resolved or statically configured.')
acdPaaUdpCfgTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3), )
if mibBuilder.loadTexts: acdPaaUdpCfgTable.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgTable.setDescription('Configuration table of all UDP PAA entries.')
acdPaaUdpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1), ).setIndexNames((0, "ACD-PAA-MIB", "acdPaaUdpCfgID"))
if mibBuilder.loadTexts: acdPaaUdpCfgEntry.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgEntry.setDescription('An entry consisting of all settings to manage a PAA instance.')
acdPaaUdpCfgID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdPaaUdpCfgID.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgID.setDescription('Unique value for each PAA instance. This value follows the ordering\n         of the status and the results table. Its value ranges from 1 to\n         MAXINT (4 bytes).')
acdPaaUdpCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgName.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgName.setDescription('This is a string to identify this PAA instance.')
acdPaaUdpCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgState.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgState.setDescription('Configuration state of this PAA entry.')
acdPaaUdpCfgPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgPktSize.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgPktSize.setDescription('Transmit packet size.')
acdPaaUdpCfgSamplingPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgSamplingPeriod.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgSamplingPeriod.setDescription('Interval in milliseconds at which PAA issues PAA measurement packets.')
acdPaaUdpCfgCcLossThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgCcLossThresh.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgCcLossThresh.setDescription('Maximum number of lost CCM (Connectivity Check Messages) for declaring a connectvity loss.')
acdPaaUdpCfgPktLossRefPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgPktLossRefPeriod.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgPktLossRefPeriod.setDescription('Reference period in milliseconds for packet loss measurement.')
acdPaaUdpCfgPktLossThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgPktLossThresh.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgPktLossThresh.setDescription('Allowed packet loss, in pecentage (%).')
acdPaaUdpCfgOneWayRefPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgOneWayRefPeriod.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgOneWayRefPeriod.setDescription('Reference period in milliseconds for one-way measurement.')
acdPaaUdpCfgOneWayDvMax = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgOneWayDvMax.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgOneWayDvMax.setDescription('Maximum allowed instantaneous delay variation.')
acdPaaUdpCfgOneWayDvThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgOneWayDvThresh.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgOneWayDvThresh.setDescription('Number of consecutive delay variations greater than the threshold.')
acdPaaUdpCfgOneWayAvgDvThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgOneWayAvgDvThresh.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgOneWayAvgDvThresh.setDescription('One-way average delay variation threshold.')
acdPaaUdpCfgTwoWayRefPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgTwoWayRefPeriod.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgTwoWayRefPeriod.setDescription('Reference period in milliseconds for two-way measurement.')
acdPaaUdpCfgTwoWayDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgTwoWayDelayMax.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgTwoWayDelayMax.setDescription('Maximum allowed instantaneous delay.')
acdPaaUdpCfgTwoWayDelayThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgTwoWayDelayThresh.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgTwoWayDelayThresh.setDescription('Number of consecutive delays greater than the threshold.')
acdPaaUdpCfgTwoWayAvgDelayThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgTwoWayAvgDelayThresh.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgTwoWayAvgDelayThresh.setDescription('Two-way average delay threshold.')
acdPaaUdpCfgTwoWayDvMax = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgTwoWayDvMax.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgTwoWayDvMax.setDescription('Maximum allowed instantaneous delay variation.')
acdPaaUdpCfgTwoWayDvThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgTwoWayDvThresh.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgTwoWayDvThresh.setDescription('Number of consecutive delay variations greater than the threshold.')
acdPaaUdpCfgTwoWayAvgDvThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgTwoWayAvgDvThresh.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgTwoWayAvgDvThresh.setDescription('Two-way average delay variation threshold.')
acdPaaUdpCfgIPv4DstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgIPv4DstAddr.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgIPv4DstAddr.setDescription('The destination IP address used to reach the peer PAA instance.')
acdPaaUdpCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgPortNumber.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgPortNumber.setDescription('The source UDP port number on which to listen for peer PAA samples.')
acdPaaUdpCfgDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgDscpValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgDscpValue.setDescription('The DSCP value used to reach the peer PAA instance. Its value ranges\n            from 0 to 64.')
acdPaaUdpCfgVlan1PbitsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgVlan1PbitsValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgVlan1PbitsValue.setDescription('The first VLAN priority used to tag the outgoing traffic.\n             Its value ranges from 0 to 7.')
acdPaaUdpCfgVlan2PbitsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgVlan2PbitsValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgVlan2PbitsValue.setDescription('The second VLAN priority used to tag the outgoing traffic.\n             Its value ranges from 0 to 7.')
acdPaaUdpCfgOneWayDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgOneWayDelayMax.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgOneWayDelayMax.setDescription('Maximum allowed instantaneous delay.')
acdPaaUdpCfgOneWayDelayThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgOneWayDelayThresh.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgOneWayDelayThresh.setDescription('Nbr consecutive delay > max before alert.')
acdPaaUdpCfgOneWayAvgDelayThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgOneWayAvgDelayThresh.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgOneWayAvgDelayThresh.setDescription('Two-way average delay threshold.')
acdPaaUdpCfgDestinationPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgDestinationPortNumber.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgDestinationPortNumber.setDescription('The destination UDP port number used to reach the peer PAA instance.')
acdPaaUdpCfgPeerID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgPeerID.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgPeerID.setDescription('Unique value for the peer PAA instance. This value follows the ordering\n         of the status and the results table. Its value ranges from 1 to\n         MAXINT (4 bytes).')
acdPaaUdpCfgOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgOperationMode.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgOperationMode.setDescription('PAA Operation Mode. Its values are: 1 = Bi-Dir, 2 = Source, 3 = Sink')
acdPaaUdpCfgIgmpOneWayJoinPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgIgmpOneWayJoinPeriod.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgIgmpOneWayJoinPeriod.setDescription('The IGMP One-way join period is the amount of time to wait from the\n         beginning of the period before an IGMP join request is sent out.')
acdPaaUdpCfgIgmpRefPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgIgmpRefPeriod.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgIgmpRefPeriod.setDescription('The IGMP reference period is the total amount of time in which we\n         sample IGMP join and leave requests. It must be a minimum of (10 * One-way ref. period).')
acdPaaUdpCfgIgmpMaxJoinDly = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgIgmpMaxJoinDly.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgIgmpMaxJoinDly.setDescription('The maximum join delay objective.')
acdPaaUdpCfgIgmpJoinDlyThres = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgIgmpJoinDlyThres.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgIgmpJoinDlyThres.setDescription('The maximum consecutive join delay samples allowed greater than the maximum join delay.')
acdPaaUdpCfgIgmpJoinAvgDlyThres = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 35), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgIgmpJoinAvgDlyThres.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgIgmpJoinAvgDlyThres.setDescription('The maximum join average delay.')
acdPaaUdpCfgIgmpMaxLvDly = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgIgmpMaxLvDly.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgIgmpMaxLvDly.setDescription('The maximum join delay objective.')
acdPaaUdpCfgIgmpLvDlyThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgIgmpLvDlyThresh.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgIgmpLvDlyThresh.setDescription('The maximum consecutive leave delay samples allowed greater than the maximum leave delay.')
acdPaaUdpCfgIgmpLvAvgDlyThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgIgmpLvAvgDlyThresh.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgIgmpLvAvgDlyThresh.setDescription('The maximum leave delay average.')
acdPaaUdpCfgPktLossThreshExt = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgPktLossThreshExt.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgPktLossThreshExt.setDescription('Extended packet loss ratio threshold allowed without issuing an alarm\n         expressed in millionth of percent (1,000,000 is 1%).')
acdPaaL2CfgTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4), )
if mibBuilder.loadTexts: acdPaaL2CfgTable.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgTable.setDescription('Configuration table of all L2 PAA entries')
acdPaaL2CfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1), ).setIndexNames((0, "ACD-PAA-MIB", "acdPaaL2CfgID"))
if mibBuilder.loadTexts: acdPaaL2CfgEntry.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgEntry.setDescription('An entry consisting of all settings to manage a PAA instance.')
acdPaaL2CfgID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdPaaL2CfgID.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgID.setDescription('Unique value for each PAA instance. This value follows the ordering\n         of the status and the results table. Its value ranges from 1 to\n         MAXINT (4 bytes).')
acdPaaL2CfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgName.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgName.setDescription('This is a string to identify this PAA instance.')
acdPaaL2CfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgState.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgState.setDescription('Configuration state of this PAA entry.')
acdPaaL2CfgPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgPktSize.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgPktSize.setDescription('Transmit packet size.')
acdPaaL2CfgSamplingPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgSamplingPeriod.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgSamplingPeriod.setDescription('Interval in milliseconds at which PAA issues PAA measurement packets.')
acdPaaL2CfgCcLossThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgCcLossThresh.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgCcLossThresh.setDescription('Maximum number of lost CCM (Connectivity Check Messages) for declaring a connectvity loss.')
acdPaaL2CfgPktLossRefPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgPktLossRefPeriod.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgPktLossRefPeriod.setDescription('Reference period in milliseconds for packet loss measurement.')
acdPaaL2CfgPktLossThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgPktLossThresh.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgPktLossThresh.setDescription('Allowed packet loss, in percentage (%).')
acdPaaL2CfgOneWayRefPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgOneWayRefPeriod.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgOneWayRefPeriod.setDescription('Reference period in milliseconds for one-way measurement.')
acdPaaL2CfgOneWayDvMax = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgOneWayDvMax.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgOneWayDvMax.setDescription('Maximum allowed instantaneous delay variation.')
acdPaaL2CfgOneWayDvThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgOneWayDvThresh.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgOneWayDvThresh.setDescription('Number of consecutive delay variations greater than the threshold.')
acdPaaL2CfgOneWayAvgDvThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgOneWayAvgDvThresh.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgOneWayAvgDvThresh.setDescription('One-way average delay variation threshold.')
acdPaaL2CfgTwoWayRefPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgTwoWayRefPeriod.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgTwoWayRefPeriod.setDescription('Reference period in milliseconds for two-way measurement.')
acdPaaL2CfgTwoWayDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgTwoWayDelayMax.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgTwoWayDelayMax.setDescription('Maximum allowed instantaneous delay.')
acdPaaL2CfgTwoWayDelayThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgTwoWayDelayThresh.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgTwoWayDelayThresh.setDescription('Number of consecutive delays greater than the threshold.')
acdPaaL2CfgTwoWayAvgDelayThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgTwoWayAvgDelayThresh.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgTwoWayAvgDelayThresh.setDescription('Two-way average delay threshold.')
acdPaaL2CfgTwoWayDvMax = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgTwoWayDvMax.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgTwoWayDvMax.setDescription('Maximum allowed instantaneous delay variation.')
acdPaaL2CfgTwoWayDvThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgTwoWayDvThresh.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgTwoWayDvThresh.setDescription('Number of consecutive delay variations greater than the threshold.')
acdPaaL2CfgTwoWayAvgDvThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgTwoWayAvgDvThresh.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgTwoWayAvgDvThresh.setDescription('Two-way average delay variation threshold.')
acdPaaL2CfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgPortName.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgPortName.setDescription('The Port Name used to reach the peer PAA instance.')
acdPaaL2CfgMacDst = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 21), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgMacDst.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgMacDst.setDescription('The MAC address used to reach the peer PAA instance.')
acdPaaL2CfgEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgEtype.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgEtype.setDescription('The Ethernet type used for this PAA instance.')
acdPaaL2CfgVlan1IdEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgVlan1IdEn.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgVlan1IdEn.setDescription('Enable or disable the first VLAN ID check')
acdPaaL2CfgVlan1Id = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgVlan1Id.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgVlan1Id.setDescription('The first VLAN ID used to compare the incoming PAA traffic.\n             Its value ranges from 0 to 4095.')
acdPaaL2CfgVlan2IdEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgVlan2IdEn.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgVlan2IdEn.setDescription('Enable or disable the second VLAN ID check')
acdPaaL2CfgVlan2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgVlan2Id.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgVlan2Id.setDescription('The second VLAN ID used to compare the incoming PAA traffic.\n             Its value ranges from 0 to 4095.')
acdPaaL2CfgVlan1PbitsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgVlan1PbitsValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgVlan1PbitsValue.setDescription('The first VLAN priority used to tag the outgoing traffic.\n             Its value ranges from 0 to 7.')
acdPaaL2CfgVlan2PbitsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgVlan2PbitsValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgVlan2PbitsValue.setDescription('The second VLAN priority used to tag the outgoing traffic.\n             Its value ranges from 0 to 7.')
acdPaaL2CfgOneWayDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgOneWayDelayMax.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgOneWayDelayMax.setDescription('Maximum allowed instantaneous delay.')
acdPaaL2CfgOneWayDelayThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgOneWayDelayThresh.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgOneWayDelayThresh.setDescription('Nbr consecutive delay > max before alert.')
acdPaaL2CfgOneWayAvgDelayThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgOneWayAvgDelayThresh.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgOneWayAvgDelayThresh.setDescription('One-way average delay threshold.')
acdPaaL2CfgPeerID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgPeerID.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgPeerID.setDescription('Unique value for the peer PAA instance. This value follows the ordering\n         of the status and the results table. Its value ranges from 1 to\n         MAXINT (4 bytes).')
acdPaaL2CfgOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgOperationMode.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgOperationMode.setDescription('PAA Operation Mode. Its values are: 1 = Bi-Dir, 2 = Source, 3 = Sink')
acdPaaL2CfgPktLossThreshExt = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgPktLossThreshExt.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgPktLossThreshExt.setDescription('Extended packet loss ratio threshold allowed without issuing an alarm\n         expressed in millionth of percent (1,000,000 is 1%).')
acdPaaHistResultTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5), )
if mibBuilder.loadTexts: acdPaaHistResultTable.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultTable.setDescription('Result table of all Paa entries')
acdPaaHistResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1), ).setIndexNames((0, "ACD-PAA-MIB", "acdPaaHistResultID"), (0, "ACD-PAA-MIB", "acdPaaHistResultSampleIndex"))
if mibBuilder.loadTexts: acdPaaHistResultEntry.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultEntry.setDescription('An entry consisting of results for a PAA instance for a specific\n         periodin time.')
acdPaaHistResultID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdPaaHistResultID.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultID.setDescription('Unique value for each PAA instance. Its value ranges from 1 to\n        MAXINT (4 bytes). ')
acdPaaHistResultSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 2), Unsigned32())
if mibBuilder.loadTexts: acdPaaHistResultSampleIndex.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultSampleIndex.setDescription('An index that uniquely identifies the particular sample this entry\n         represents among all samples associated with the same PAA instance.\n         This index starts at 1 and increases by one as each new sample.')
acdPaaHistResultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultStatus.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultStatus.setDescription('The status of this acdPaaHistResult entry.')
acdPaaHistResultDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultDuration.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultDuration.setDescription('The interval in seconds over which the data is sampled for this entry.')
acdPaaHistResultIntervalEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIntervalEnd.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultIntervalEnd.setDescription('This is the time of the end of this entry.')
acdPaaHistResultPktLossNeValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultPktLossNeValid.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultPktLossNeValid.setDescription('Indicates the validity of the Near-end packet loss results during\n         this sampling interval.')
acdPaaHistResultPktLossNeSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultPktLossNeSamples.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultPktLossNeSamples.setDescription('Indicates the number of samples gathered during the sampling\n         interval to calculate the Near-end packet loss.')
acdPaaHistResultPktLossNeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultPktLossNeValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultPktLossNeValue.setDescription('Indicates the Near-end packet loss during this sampling interval.\n         The packet loss is the percent of packets transmitted but not\n         received of the Ethernet segment in hundredths of a percent.')
acdPaaHistResultPktLossFeValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultPktLossFeValid.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultPktLossFeValid.setDescription('Indicates the validity of the Far-end packet loss results during\n         this sampling interval.')
acdPaaHistResultPktLossFeSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultPktLossFeSamples.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultPktLossFeSamples.setDescription('Indicates the number of samples gathered during the sampling\n         interval to calculate the Far-end packet loss.')
acdPaaHistResultPktLossFeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultPktLossFeValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultPktLossFeValue.setDescription('Indicates the Far-end packet loss during this sampling interval.\n         The packet loss is the percent of packets transmitted but not\n         received of the Ethernet segment in hundredths of a percent.')
acdPaaHistResultOneWayDelayValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultOneWayDelayValid.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultOneWayDelayValid.setDescription('Indicate the validity of the One-way delay results during this\n         sampling interval.')
acdPaaHistResultOneWayDelaySamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultOneWayDelaySamples.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultOneWayDelaySamples.setDescription('Indicates the number of samples gathered during the sampling\n         interval to calculate One-way delay results.')
acdPaaHistResultOneWayDelayMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultOneWayDelayMinValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultOneWayDelayMinValue.setDescription('Indicate the One-way delay minimum value during this sampling\n         interval. The value is expressed in micro-seconds.')
acdPaaHistResultOneWayDelayMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultOneWayDelayMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultOneWayDelayMaxValue.setDescription('Indicate the One-way delay maximum value during this sampling\n         interval. The value is expressed in micro-seconds.')
acdPaaHistResultOneWayDelayAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultOneWayDelayAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultOneWayDelayAvgValue.setDescription('Indicate the One-way delay average value during this sampling\n         interval. The value is expressed in micro-seconds.')
acdPaaHistResultOneWayDelayThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultOneWayDelayThreshEx.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultOneWayDelayThreshEx.setDescription('Indicate the number of sample exceeding the limit during this\n         sampling interval.')
acdPaaHistResultOneWayDvValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultOneWayDvValid.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultOneWayDvValid.setDescription('Indicates the validity of the One-way delay variation results\n         during this sampling interval.')
acdPaaHistResultOneWayDvSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultOneWayDvSamples.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultOneWayDvSamples.setDescription('Indicates the number of samples gathered during the sampling\n         interval to calculate One-way delay variation results.')
acdPaaHistResultOneWayDvMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultOneWayDvMinValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultOneWayDvMinValue.setDescription('Indicates the One-way delay variation minimum value during this\n         sampling interval. The value is expressed in micro-seconds.')
acdPaaHistResultOneWayDvMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultOneWayDvMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultOneWayDvMaxValue.setDescription('Indicates the One-way delay variation maximum value during this\n         sampling interval. The value is expressed in micro-seconds.')
acdPaaHistResultOneWayDvAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultOneWayDvAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultOneWayDvAvgValue.setDescription('Indicates the One-way delay variation average value during this\n         sampling interval. The value is expressed in micro-seconds.')
acdPaaHistResultOneWayDvThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultOneWayDvThreshEx.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultOneWayDvThreshEx.setDescription('Indicates the number of samples exceeding the limit during this\n         sampling interval.')
acdPaaHistResultTwoWayDelayValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDelayValid.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDelayValid.setDescription('Indicates the validity of the Two-way delay results during this\n         sampling interval.')
acdPaaHistResultTwoWayDelaySamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDelaySamples.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDelaySamples.setDescription('Indicates the number of samples gathered during the sampling\n         interval to calculate Two-way delay results.')
acdPaaHistResultTwoWayDelayMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDelayMinValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDelayMinValue.setDescription('Indicates the Two-way delay minimum value during this sampling\n         interval. The value is expressed in micro-seconds.')
acdPaaHistResultTwoWayDelayMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDelayMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDelayMaxValue.setDescription('Indicates the Two-way delay maximum value during this sampling\n         interval. The value is expressed in micro-seconds.')
acdPaaHistResultTwoWayDelayAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDelayAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDelayAvgValue.setDescription('Indicates the Two-way delay average value during this sampling\n         interval. The value is expressed in micro-seconds.')
acdPaaHistResultTwoWayDelayThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDelayThreshEx.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDelayThreshEx.setDescription('Indicates the number of samples exceeding the limit during this\n         sampling interval.')
acdPaaHistResultTwoWayDvValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDvValid.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDvValid.setDescription('Indicates the validity of the Two-way delay variation results during\n         this sampling interval.')
acdPaaHistResultTwoWayDvSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDvSamples.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDvSamples.setDescription('Indicates the number of samples gathered during the sampling\n         interval to calculate Two-way delay variation results.')
acdPaaHistResultTwoWayDvMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDvMinValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDvMinValue.setDescription('Indicates the Two-way delay variation minimum value during this\n         sampling interval. The value is expressed in micro-seconds.')
acdPaaHistResultTwoWayDvMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDvMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDvMaxValue.setDescription('Indicates the Two-way delay variation maximum value during this\n         sampling interval. The value is expressed in micro-seconds.')
acdPaaHistResultTwoWayDvAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDvAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDvAvgValue.setDescription('Indicates the Two-way delay variation average value during this\n         sampling interval. The value is expressed in micro-seconds.')
acdPaaHistResultTwoWayDvThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDvThreshEx.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDvThreshEx.setDescription('Indicates the number of samples exceeding the limit during this\n         sampling interval.')
acdPaaHistResultIgmpJoinDelayValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIgmpJoinDelayValid.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultIgmpJoinDelayValid.setDescription('Indicates the validity of the IGMP Join delay results during this\n         sampling interval.')
acdPaaHistResultIgmpJoinDelaySamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIgmpJoinDelaySamples.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultIgmpJoinDelaySamples.setDescription('Indicates the number of samples gathered during the sampling\n         interval to calculate IGMP Join delay results.')
acdPaaHistResultIgmpJoinDelayMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIgmpJoinDelayMinValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultIgmpJoinDelayMinValue.setDescription('Indicates the IGMP Join delay minimum value during this sampling\n         interval. The value is expressed in micro-seconds.')
acdPaaHistResultIgmpJoinDelayMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIgmpJoinDelayMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultIgmpJoinDelayMaxValue.setDescription('Indicates the IGMP Join delay maximum value during this sampling\n         interval. The value is expressed in micro-seconds.')
acdPaaHistResultIgmpJoinDelayAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIgmpJoinDelayAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultIgmpJoinDelayAvgValue.setDescription('Indicates the IGMP Join delay average value during this sampling\n         interval. The value is expressed in micro-seconds.')
acdPaaHistResultIgmpJoinDelayThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIgmpJoinDelayThreshEx.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultIgmpJoinDelayThreshEx.setDescription('Indicates the number of IGMP Join samples exceeding the limit during this\n         sampling interval.')
acdPaaHistResultIgmpLeaveDelayValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 42), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIgmpLeaveDelayValid.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultIgmpLeaveDelayValid.setDescription('Indicates the validity of the IGMP Leave delay results during this\n         sampling interval.')
acdPaaHistResultIgmpLeaveDelaySamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIgmpLeaveDelaySamples.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultIgmpLeaveDelaySamples.setDescription('Indicates the number of samples gathered during the sampling\n         interval to calculate IGMP Leave delay results.')
acdPaaHistResultIgmpLeaveDelayMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIgmpLeaveDelayMinValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultIgmpLeaveDelayMinValue.setDescription('Indicates the IGMP Leave delay minimum value during this sampling\n         interval. The value is expressed in micro-seconds.')
acdPaaHistResultIgmpLeaveDelayMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIgmpLeaveDelayMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultIgmpLeaveDelayMaxValue.setDescription('Indicates the IGMP Leave delay maximum value during this sampling\n         interval. The value is expressed in micro-seconds.')
acdPaaHistResultIgmpLeaveDelayAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIgmpLeaveDelayAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultIgmpLeaveDelayAvgValue.setDescription('Indicates the IGMP Leave delay average value during this sampling\n         interval. The value is expressed in micro-seconds.')
acdPaaHistResultIgmpLeaveDelayThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 47), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIgmpLeaveDelayThreshEx.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultIgmpLeaveDelayThreshEx.setDescription('Indicates the number of IGMP Leave samples exceeding the limit during this\n         sampling interval.')
acdPaaHistResultPktLossNeValueExt = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultPktLossNeValueExt.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultPktLossNeValueExt.setDescription('Extended near-end packet loss ratio. The packet loss is the percent\n         of packets transmitted but not received in millionth of a percent\n         (1,000,000 is 1%).')
acdPaaHistResultPktLossFeValueExt = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 49), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultPktLossFeValueExt.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultPktLossFeValueExt.setDescription('Extended far-end packet loss ratio. The packet loss is the percent\n         of packets transmitted but not received in millionth of a percent\n         (1,000,000 is 1%).')
acdPaaHistResultPktLossNeNbrLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultPktLossNeNbrLoss.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultPktLossNeNbrLoss.setDescription('Indicates the number of near-end packet lost for the period.\n         This should be less or equal to acdPaaHistResultPktLossNeSamples.')
acdPaaHistResultPktLossFeNbrLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 51), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultPktLossFeNbrLoss.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultPktLossFeNbrLoss.setDescription('Indicates the number of far-end packet lost for the period.\n         This should be less or equal to acdPaaHistResultPktLossNeSamples.')
acdPaaCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 5, 9, 1))
acdPaaGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 5, 9, 2))
acdPaaResultGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 5, 9, 2, 1)).setObjects(("ACD-PAA-MIB", "acdPaaResultState"), ("ACD-PAA-MIB", "acdPaaResultPktLossNeCurrValid"), ("ACD-PAA-MIB", "acdPaaResultPktLossNeCurrValue"), ("ACD-PAA-MIB", "acdPaaResultPktLossNePrevValid"), ("ACD-PAA-MIB", "acdPaaResultPktLossNePrevValue"), ("ACD-PAA-MIB", "acdPaaResultPktLossFeCurrValid"), ("ACD-PAA-MIB", "acdPaaResultPktLossFeCurrValue"), ("ACD-PAA-MIB", "acdPaaResultPktLossFePrevValid"), ("ACD-PAA-MIB", "acdPaaResultPktLossFePrevValue"), ("ACD-PAA-MIB", "acdPaaResultOneWayDvInstValue"), ("ACD-PAA-MIB", "acdPaaResultOneWayDvCurrValid"), ("ACD-PAA-MIB", "acdPaaResultOneWayDvCurrMinValue"), ("ACD-PAA-MIB", "acdPaaResultOneWayDvCurrMaxValue"), ("ACD-PAA-MIB", "acdPaaResultOneWayDvCurrAvgValue"), ("ACD-PAA-MIB", "acdPaaResultOneWayDvCurrThreshExc"), ("ACD-PAA-MIB", "acdPaaResultOneWayDvPrevValid"), ("ACD-PAA-MIB", "acdPaaResultOneWayDvPrevMinValue"), ("ACD-PAA-MIB", "acdPaaResultOneWayDvPrevMaxValue"), ("ACD-PAA-MIB", "acdPaaResultOneWayDvPrevAvgValue"), ("ACD-PAA-MIB", "acdPaaResultOneWayDvPrevThreshEx"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDelayInstValue"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDelayCurrValid"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDelayCurrMinValue"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDelayCurrMaxValue"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDelayCurrAvgValue"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDelayCurrThreshEx"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDelayPrevValid"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDelayPrevMinValue"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDelayPrevMaxValue"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDelayPrevAvgValue"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDelayPrevThreshEx"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDvInstValue"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDvCurrValid"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDvCurrMinValue"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDvCurrMaxValue"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDvCurrAvgValue"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDvCurrThreshEx"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDvPrevValid"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDvPrevMinValue"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDvPrevMaxValue"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDvPrevAvgValue"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDvPrevThreshEx"), ("ACD-PAA-MIB", "acdPaaResultOneWayDelayInstValue"), ("ACD-PAA-MIB", "acdPaaResultOneWayDelayCurrValid"), ("ACD-PAA-MIB", "acdPaaResultOneWayDelayCurrMinValue"), ("ACD-PAA-MIB", "acdPaaResultOneWayDelayCurrMaxValue"), ("ACD-PAA-MIB", "acdPaaResultOneWayDelayCurrAvgValue"), ("ACD-PAA-MIB", "acdPaaResultOneWayDelayCurrThreshEx"), ("ACD-PAA-MIB", "acdPaaResultOneWayDelayPrevValid"), ("ACD-PAA-MIB", "acdPaaResultOneWayDelayPrevMinValue"), ("ACD-PAA-MIB", "acdPaaResultOneWayDelayPrevMaxValue"), ("ACD-PAA-MIB", "acdPaaResultOneWayDelayPrevAvgValue"), ("ACD-PAA-MIB", "acdPaaResultOneWayDelayPrevThreshEx"), ("ACD-PAA-MIB", "acdPaaResultPktLossTime"), ("ACD-PAA-MIB", "acdPaaResultOneWayTime"), ("ACD-PAA-MIB", "acdPaaResultTwoWayTime"), ("ACD-PAA-MIB", "acdPaaResultPktLossNeCurrSamples"), ("ACD-PAA-MIB", "acdPaaResultPktLossNePrevSamples"), ("ACD-PAA-MIB", "acdPaaResultPktLossFeCurrSamples"), ("ACD-PAA-MIB", "acdPaaResultPktLossFePrevSamples"), ("ACD-PAA-MIB", "acdPaaResultOneWayDelayCurrSamples"), ("ACD-PAA-MIB", "acdPaaResultOneWayDelayPrevSamples"), ("ACD-PAA-MIB", "acdPaaResultOneWayDvCurrSamples"), ("ACD-PAA-MIB", "acdPaaResultOneWayDvPrevSamples"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDelayCurrSamples"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDelayPrevSamples"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDvCurrSamples"), ("ACD-PAA-MIB", "acdPaaResultTwoWayDvPrevSamples"), ("ACD-PAA-MIB", "acdPaaResultIgmpJoinDelayInstValue"), ("ACD-PAA-MIB", "acdPaaResultIgmpJoinDelayCurrValid"), ("ACD-PAA-MIB", "acdPaaResultIgmpJoinDelayCurrMinValue"), ("ACD-PAA-MIB", "acdPaaResultIgmpJoinDelayCurrMaxValue"), ("ACD-PAA-MIB", "acdPaaResultIgmpJoinDelayCurrAvgValue"), ("ACD-PAA-MIB", "acdPaaResultIgmpJoinDelayCurrThreshEx"), ("ACD-PAA-MIB", "acdPaaResultIgmpJoinDelayPrevValid"), ("ACD-PAA-MIB", "acdPaaResultIgmpJoinDelayPrevMinValue"), ("ACD-PAA-MIB", "acdPaaResultIgmpJoinDelayPrevMaxValue"), ("ACD-PAA-MIB", "acdPaaResultIgmpJoinDelayPrevAvgValue"), ("ACD-PAA-MIB", "acdPaaResultIgmpJoinDelayPrevThreshEx"), ("ACD-PAA-MIB", "acdPaaResultIgmpLeaveDelayInstValue"), ("ACD-PAA-MIB", "acdPaaResultIgmpLeaveDelayCurrValid"), ("ACD-PAA-MIB", "acdPaaResultIgmpLeaveDelayCurrMinValue"), ("ACD-PAA-MIB", "acdPaaResultIgmpLeaveDelayCurrMaxValue"), ("ACD-PAA-MIB", "acdPaaResultIgmpLeaveDelayCurrAvgValue"), ("ACD-PAA-MIB", "acdPaaResultIgmpLeaveDelayCurrThreshEx"), ("ACD-PAA-MIB", "acdPaaResultIgmpLeaveDelayPrevValid"), ("ACD-PAA-MIB", "acdPaaResultIgmpLeaveDelayPrevMinValue"), ("ACD-PAA-MIB", "acdPaaResultIgmpLeaveDelayPrevMaxValue"), ("ACD-PAA-MIB", "acdPaaResultIgmpLeaveDelayPrevAvgValue"), ("ACD-PAA-MIB", "acdPaaResultIgmpLeaveDelayPrevThreshEx"), ("ACD-PAA-MIB", "acdPaaResultIgmpJoinDelayTime"), ("ACD-PAA-MIB", "acdPaaResultIgmpLeaveDelayTime"), ("ACD-PAA-MIB", "acdPaaResultIgmpJoinDelayCurrSamples"), ("ACD-PAA-MIB", "acdPaaResultIgmpJoinDelayPrevSamples"), ("ACD-PAA-MIB", "acdPaaResultIgmpLeaveDelayCurrSamples"), ("ACD-PAA-MIB", "acdPaaResultIgmpLeaveDelayPrevSamples"), ("ACD-PAA-MIB", "acdPaaResultPktLossCurrGaps"), ("ACD-PAA-MIB", "acdPaaResultPktLossPrevGaps"), ("ACD-PAA-MIB", "acdPaaResultPktLossCurrLargestGap"), ("ACD-PAA-MIB", "acdPaaResultPktLossPrevLargestGap"), ("ACD-PAA-MIB", "acdPaaResultPktLossNeCurrValueExt"), ("ACD-PAA-MIB", "acdPaaResultPktLossNePrevValueExt"), ("ACD-PAA-MIB", "acdPaaResultPktLossFeCurrValueExt"), ("ACD-PAA-MIB", "acdPaaResultPktLossFePrevValueExt"), ("ACD-PAA-MIB", "acdPaaResultPktLossNeCurrNbrLoss"), ("ACD-PAA-MIB", "acdPaaResultPktLossNePrevNbrLoss"), ("ACD-PAA-MIB", "acdPaaResultPktLossFeCurrNbrLoss"), ("ACD-PAA-MIB", "acdPaaResultPktLossFePrevNbrLoss"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPaaResultGroup = acdPaaResultGroup.setStatus('current')
if mibBuilder.loadTexts: acdPaaResultGroup.setDescription('Objects for the PAA result Group.')
acdPaaStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 5, 9, 2, 2)).setObjects(("ACD-PAA-MIB", "acdPaaStatusCcAlert"), ("ACD-PAA-MIB", "acdPaaStatusPktLossAlert"), ("ACD-PAA-MIB", "acdPaaStatusOneWayDelayAlert"), ("ACD-PAA-MIB", "acdPaaStatusOneWayAvgDelayAlert"), ("ACD-PAA-MIB", "acdPaaStatusOneWayDvAlert"), ("ACD-PAA-MIB", "acdPaaStatusOneWayAvgDvAlert"), ("ACD-PAA-MIB", "acdPaaStatusTwoWayDelayAlert"), ("ACD-PAA-MIB", "acdPaaStatusTwoWayAvgDelayAlert"), ("ACD-PAA-MIB", "acdPaaStatusTwoWayDvAlert"), ("ACD-PAA-MIB", "acdPaaStatusTwoWayAvgDvAlert"), ("ACD-PAA-MIB", "acdPaaStatusState"), ("ACD-PAA-MIB", "acdPaaStatusPeerAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPaaStatusGroup = acdPaaStatusGroup.setStatus('current')
if mibBuilder.loadTexts: acdPaaStatusGroup.setDescription('Objects for the PAA status Group.')
acdPaaUdpCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 5, 9, 2, 3)).setObjects(("ACD-PAA-MIB", "acdPaaUdpCfgName"), ("ACD-PAA-MIB", "acdPaaUdpCfgState"), ("ACD-PAA-MIB", "acdPaaUdpCfgPktSize"), ("ACD-PAA-MIB", "acdPaaUdpCfgSamplingPeriod"), ("ACD-PAA-MIB", "acdPaaUdpCfgCcLossThresh"), ("ACD-PAA-MIB", "acdPaaUdpCfgPktLossRefPeriod"), ("ACD-PAA-MIB", "acdPaaUdpCfgPktLossThresh"), ("ACD-PAA-MIB", "acdPaaUdpCfgOneWayRefPeriod"), ("ACD-PAA-MIB", "acdPaaUdpCfgOneWayDvMax"), ("ACD-PAA-MIB", "acdPaaUdpCfgOneWayDvThresh"), ("ACD-PAA-MIB", "acdPaaUdpCfgOneWayAvgDvThresh"), ("ACD-PAA-MIB", "acdPaaUdpCfgTwoWayRefPeriod"), ("ACD-PAA-MIB", "acdPaaUdpCfgTwoWayDelayMax"), ("ACD-PAA-MIB", "acdPaaUdpCfgTwoWayDelayThresh"), ("ACD-PAA-MIB", "acdPaaUdpCfgTwoWayAvgDelayThresh"), ("ACD-PAA-MIB", "acdPaaUdpCfgTwoWayDvMax"), ("ACD-PAA-MIB", "acdPaaUdpCfgTwoWayDvThresh"), ("ACD-PAA-MIB", "acdPaaUdpCfgTwoWayAvgDvThresh"), ("ACD-PAA-MIB", "acdPaaUdpCfgIPv4DstAddr"), ("ACD-PAA-MIB", "acdPaaUdpCfgPortNumber"), ("ACD-PAA-MIB", "acdPaaUdpCfgDscpValue"), ("ACD-PAA-MIB", "acdPaaUdpCfgVlan1PbitsValue"), ("ACD-PAA-MIB", "acdPaaUdpCfgVlan2PbitsValue"), ("ACD-PAA-MIB", "acdPaaUdpCfgOneWayDelayMax"), ("ACD-PAA-MIB", "acdPaaUdpCfgOneWayDelayThresh"), ("ACD-PAA-MIB", "acdPaaUdpCfgOneWayAvgDelayThresh"), ("ACD-PAA-MIB", "acdPaaUdpCfgDestinationPortNumber"), ("ACD-PAA-MIB", "acdPaaUdpCfgPeerID"), ("ACD-PAA-MIB", "acdPaaUdpCfgOperationMode"), ("ACD-PAA-MIB", "acdPaaUdpCfgIgmpOneWayJoinPeriod"), ("ACD-PAA-MIB", "acdPaaUdpCfgIgmpRefPeriod"), ("ACD-PAA-MIB", "acdPaaUdpCfgIgmpMaxJoinDly"), ("ACD-PAA-MIB", "acdPaaUdpCfgIgmpJoinDlyThres"), ("ACD-PAA-MIB", "acdPaaUdpCfgIgmpJoinAvgDlyThres"), ("ACD-PAA-MIB", "acdPaaUdpCfgIgmpMaxLvDly"), ("ACD-PAA-MIB", "acdPaaUdpCfgIgmpLvDlyThresh"), ("ACD-PAA-MIB", "acdPaaUdpCfgIgmpLvAvgDlyThresh"), ("ACD-PAA-MIB", "acdPaaUdpCfgPktLossThreshExt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPaaUdpCfgGroup = acdPaaUdpCfgGroup.setStatus('current')
if mibBuilder.loadTexts: acdPaaUdpCfgGroup.setDescription('Objects for the PAA UDP configuration Group.')
acdPaaL2CfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 5, 9, 2, 4)).setObjects(("ACD-PAA-MIB", "acdPaaL2CfgName"), ("ACD-PAA-MIB", "acdPaaL2CfgState"), ("ACD-PAA-MIB", "acdPaaL2CfgPktSize"), ("ACD-PAA-MIB", "acdPaaL2CfgSamplingPeriod"), ("ACD-PAA-MIB", "acdPaaL2CfgCcLossThresh"), ("ACD-PAA-MIB", "acdPaaL2CfgPktLossRefPeriod"), ("ACD-PAA-MIB", "acdPaaL2CfgPktLossThresh"), ("ACD-PAA-MIB", "acdPaaL2CfgOneWayRefPeriod"), ("ACD-PAA-MIB", "acdPaaL2CfgOneWayDvMax"), ("ACD-PAA-MIB", "acdPaaL2CfgOneWayDvThresh"), ("ACD-PAA-MIB", "acdPaaL2CfgOneWayAvgDvThresh"), ("ACD-PAA-MIB", "acdPaaL2CfgTwoWayRefPeriod"), ("ACD-PAA-MIB", "acdPaaL2CfgTwoWayDelayMax"), ("ACD-PAA-MIB", "acdPaaL2CfgTwoWayDelayThresh"), ("ACD-PAA-MIB", "acdPaaL2CfgTwoWayAvgDelayThresh"), ("ACD-PAA-MIB", "acdPaaL2CfgTwoWayDvMax"), ("ACD-PAA-MIB", "acdPaaL2CfgTwoWayDvThresh"), ("ACD-PAA-MIB", "acdPaaL2CfgTwoWayAvgDvThresh"), ("ACD-PAA-MIB", "acdPaaL2CfgPortName"), ("ACD-PAA-MIB", "acdPaaL2CfgMacDst"), ("ACD-PAA-MIB", "acdPaaL2CfgEtype"), ("ACD-PAA-MIB", "acdPaaL2CfgVlan1IdEn"), ("ACD-PAA-MIB", "acdPaaL2CfgVlan1Id"), ("ACD-PAA-MIB", "acdPaaL2CfgVlan2IdEn"), ("ACD-PAA-MIB", "acdPaaL2CfgVlan2Id"), ("ACD-PAA-MIB", "acdPaaL2CfgVlan1PbitsValue"), ("ACD-PAA-MIB", "acdPaaL2CfgVlan2PbitsValue"), ("ACD-PAA-MIB", "acdPaaL2CfgOneWayDelayMax"), ("ACD-PAA-MIB", "acdPaaL2CfgOneWayDelayThresh"), ("ACD-PAA-MIB", "acdPaaL2CfgOneWayAvgDelayThresh"), ("ACD-PAA-MIB", "acdPaaL2CfgPeerID"), ("ACD-PAA-MIB", "acdPaaL2CfgOperationMode"), ("ACD-PAA-MIB", "acdPaaL2CfgPktLossThreshExt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPaaL2CfgGroup = acdPaaL2CfgGroup.setStatus('current')
if mibBuilder.loadTexts: acdPaaL2CfgGroup.setDescription('Objects for the PAA L2 configuration Group.')
acdPaaHistResultGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 5, 9, 2, 5)).setObjects(("ACD-PAA-MIB", "acdPaaHistResultStatus"), ("ACD-PAA-MIB", "acdPaaHistResultDuration"), ("ACD-PAA-MIB", "acdPaaHistResultIntervalEnd"), ("ACD-PAA-MIB", "acdPaaHistResultPktLossNeValid"), ("ACD-PAA-MIB", "acdPaaHistResultPktLossNeSamples"), ("ACD-PAA-MIB", "acdPaaHistResultPktLossNeValue"), ("ACD-PAA-MIB", "acdPaaHistResultPktLossFeValid"), ("ACD-PAA-MIB", "acdPaaHistResultPktLossFeSamples"), ("ACD-PAA-MIB", "acdPaaHistResultPktLossFeValue"), ("ACD-PAA-MIB", "acdPaaHistResultOneWayDelayValid"), ("ACD-PAA-MIB", "acdPaaHistResultOneWayDelaySamples"), ("ACD-PAA-MIB", "acdPaaHistResultOneWayDelayMinValue"), ("ACD-PAA-MIB", "acdPaaHistResultOneWayDelayMaxValue"), ("ACD-PAA-MIB", "acdPaaHistResultOneWayDelayAvgValue"), ("ACD-PAA-MIB", "acdPaaHistResultOneWayDelayThreshEx"), ("ACD-PAA-MIB", "acdPaaHistResultOneWayDvValid"), ("ACD-PAA-MIB", "acdPaaHistResultOneWayDvSamples"), ("ACD-PAA-MIB", "acdPaaHistResultOneWayDvMinValue"), ("ACD-PAA-MIB", "acdPaaHistResultOneWayDvMaxValue"), ("ACD-PAA-MIB", "acdPaaHistResultOneWayDvAvgValue"), ("ACD-PAA-MIB", "acdPaaHistResultOneWayDvThreshEx"), ("ACD-PAA-MIB", "acdPaaHistResultTwoWayDelayValid"), ("ACD-PAA-MIB", "acdPaaHistResultTwoWayDelaySamples"), ("ACD-PAA-MIB", "acdPaaHistResultTwoWayDelayMinValue"), ("ACD-PAA-MIB", "acdPaaHistResultTwoWayDelayMaxValue"), ("ACD-PAA-MIB", "acdPaaHistResultTwoWayDelayAvgValue"), ("ACD-PAA-MIB", "acdPaaHistResultTwoWayDelayThreshEx"), ("ACD-PAA-MIB", "acdPaaHistResultTwoWayDvValid"), ("ACD-PAA-MIB", "acdPaaHistResultTwoWayDvSamples"), ("ACD-PAA-MIB", "acdPaaHistResultTwoWayDvMinValue"), ("ACD-PAA-MIB", "acdPaaHistResultTwoWayDvMaxValue"), ("ACD-PAA-MIB", "acdPaaHistResultTwoWayDvAvgValue"), ("ACD-PAA-MIB", "acdPaaHistResultTwoWayDvThreshEx"), ("ACD-PAA-MIB", "acdPaaHistResultIgmpJoinDelayValid"), ("ACD-PAA-MIB", "acdPaaHistResultIgmpJoinDelaySamples"), ("ACD-PAA-MIB", "acdPaaHistResultIgmpJoinDelayMinValue"), ("ACD-PAA-MIB", "acdPaaHistResultIgmpJoinDelayMaxValue"), ("ACD-PAA-MIB", "acdPaaHistResultIgmpJoinDelayAvgValue"), ("ACD-PAA-MIB", "acdPaaHistResultIgmpJoinDelayThreshEx"), ("ACD-PAA-MIB", "acdPaaHistResultIgmpLeaveDelayValid"), ("ACD-PAA-MIB", "acdPaaHistResultIgmpLeaveDelaySamples"), ("ACD-PAA-MIB", "acdPaaHistResultIgmpLeaveDelayMinValue"), ("ACD-PAA-MIB", "acdPaaHistResultIgmpLeaveDelayMaxValue"), ("ACD-PAA-MIB", "acdPaaHistResultIgmpLeaveDelayAvgValue"), ("ACD-PAA-MIB", "acdPaaHistResultIgmpLeaveDelayThreshEx"), ("ACD-PAA-MIB", "acdPaaHistResultPktLossNeValueExt"), ("ACD-PAA-MIB", "acdPaaHistResultPktLossFeValueExt"), ("ACD-PAA-MIB", "acdPaaHistResultPktLossNeNbrLoss"), ("ACD-PAA-MIB", "acdPaaHistResultPktLossFeNbrLoss"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPaaHistResultGroup = acdPaaHistResultGroup.setStatus('current')
if mibBuilder.loadTexts: acdPaaHistResultGroup.setDescription('Objects for the PAA history result Group.')
acdPaaCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 22420, 2, 5, 9, 1, 1)).setObjects(("ACD-PAA-MIB", "acdPaaResultGroup"), ("ACD-PAA-MIB", "acdPaaStatusGroup"), ("ACD-PAA-MIB", "acdPaaUdpCfgGroup"), ("ACD-PAA-MIB", "acdPaaL2CfgGroup"), ("ACD-PAA-MIB", "acdPaaHistResultGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPaaCompliance = acdPaaCompliance.setStatus('current')
if mibBuilder.loadTexts: acdPaaCompliance.setDescription('The compliance statement for support of the ACD-PAA-MIB module.')
mibBuilder.exportSymbols("ACD-PAA-MIB", acdPaaResultTwoWayDelayCurrSamples=acdPaaResultTwoWayDelayCurrSamples, acdPaaResultTwoWayDelayCurrMaxValue=acdPaaResultTwoWayDelayCurrMaxValue, acdPaaResultPktLossFePrevValueExt=acdPaaResultPktLossFePrevValueExt, acdPaaHistResultPktLossNeSamples=acdPaaHistResultPktLossNeSamples, acdPaaResultIgmpLeaveDelayCurrMaxValue=acdPaaResultIgmpLeaveDelayCurrMaxValue, acdPaaResultTwoWayDvCurrSamples=acdPaaResultTwoWayDvCurrSamples, acdPaaL2CfgCcLossThresh=acdPaaL2CfgCcLossThresh, acdPaaHistResultPktLossFeValid=acdPaaHistResultPktLossFeValid, acdPaaResultEntry=acdPaaResultEntry, acdPaaHistResultOneWayDvValid=acdPaaHistResultOneWayDvValid, acdPaaHistResultTwoWayDelayValid=acdPaaHistResultTwoWayDelayValid, acdPaaHistResultIgmpJoinDelayAvgValue=acdPaaHistResultIgmpJoinDelayAvgValue, acdPaaResultOneWayDelayPrevValid=acdPaaResultOneWayDelayPrevValid, acdPaaResultIgmpLeaveDelayPrevValid=acdPaaResultIgmpLeaveDelayPrevValid, acdPaaStatusTable=acdPaaStatusTable, acdPaaUdpCfgOneWayDvMax=acdPaaUdpCfgOneWayDvMax, acdPaaL2CfgState=acdPaaL2CfgState, acdPaaNotifications=acdPaaNotifications, acdPaaResultPktLossFePrevSamples=acdPaaResultPktLossFePrevSamples, acdPaaUdpCfgPeerID=acdPaaUdpCfgPeerID, acdPaaHistResultStatus=acdPaaHistResultStatus, acdPaaHistResultIgmpLeaveDelayThreshEx=acdPaaHistResultIgmpLeaveDelayThreshEx, acdPaaUdpCfgOneWayDelayThresh=acdPaaUdpCfgOneWayDelayThresh, acdPaaUdpCfgIgmpLvDlyThresh=acdPaaUdpCfgIgmpLvDlyThresh, acdPaaUdpCfgTwoWayAvgDvThresh=acdPaaUdpCfgTwoWayAvgDvThresh, acdPaaL2CfgVlan2IdEn=acdPaaL2CfgVlan2IdEn, acdPaaResultOneWayDvCurrMaxValue=acdPaaResultOneWayDvCurrMaxValue, acdPaaL2CfgVlan1PbitsValue=acdPaaL2CfgVlan1PbitsValue, acdPaaResultIgmpLeaveDelayPrevAvgValue=acdPaaResultIgmpLeaveDelayPrevAvgValue, acdPaaStatusTwoWayDelayAlert=acdPaaStatusTwoWayDelayAlert, acdPaaHistResultOneWayDelayValid=acdPaaHistResultOneWayDelayValid, acdPaaUdpCfgName=acdPaaUdpCfgName, acdPaaHistResultIgmpLeaveDelayMaxValue=acdPaaHistResultIgmpLeaveDelayMaxValue, acdPaaHistResultGroup=acdPaaHistResultGroup, acdPaaResultTwoWayDvPrevMaxValue=acdPaaResultTwoWayDvPrevMaxValue, acdPaaHistResultPktLossFeSamples=acdPaaHistResultPktLossFeSamples, acdPaaResultPktLossPrevGaps=acdPaaResultPktLossPrevGaps, acdPaaUdpCfgOneWayDelayMax=acdPaaUdpCfgOneWayDelayMax, acdPaaResultOneWayDelayCurrAvgValue=acdPaaResultOneWayDelayCurrAvgValue, acdPaaUdpCfgTwoWayDelayThresh=acdPaaUdpCfgTwoWayDelayThresh, acdPaaResultPktLossFePrevValue=acdPaaResultPktLossFePrevValue, acdPaaResultIgmpJoinDelayCurrThreshEx=acdPaaResultIgmpJoinDelayCurrThreshEx, acdPaaCompliance=acdPaaCompliance, acdPaaHistResultOneWayDelayMinValue=acdPaaHistResultOneWayDelayMinValue, acdPaaStatusOneWayAvgDvAlert=acdPaaStatusOneWayAvgDvAlert, acdPaaUdpCfgPktLossRefPeriod=acdPaaUdpCfgPktLossRefPeriod, acdPaaHistResultIgmpLeaveDelayAvgValue=acdPaaHistResultIgmpLeaveDelayAvgValue, acdPaaResultPktLossNePrevValid=acdPaaResultPktLossNePrevValid, acdPaaUdpCfgPktLossThreshExt=acdPaaUdpCfgPktLossThreshExt, acdPaaResultIgmpLeaveDelayPrevSamples=acdPaaResultIgmpLeaveDelayPrevSamples, acdPaaUdpCfgTwoWayDvThresh=acdPaaUdpCfgTwoWayDvThresh, acdPaaResultIgmpJoinDelayCurrValid=acdPaaResultIgmpJoinDelayCurrValid, acdPaaHistResultIgmpJoinDelaySamples=acdPaaHistResultIgmpJoinDelaySamples, acdPaaResultPktLossNePrevNbrLoss=acdPaaResultPktLossNePrevNbrLoss, acdPaaResultPktLossNePrevValue=acdPaaResultPktLossNePrevValue, acdPaaL2CfgPktLossRefPeriod=acdPaaL2CfgPktLossRefPeriod, acdPaaUdpCfgOneWayRefPeriod=acdPaaUdpCfgOneWayRefPeriod, acdPaaL2CfgTwoWayRefPeriod=acdPaaL2CfgTwoWayRefPeriod, acdPaaHistResultOneWayDvAvgValue=acdPaaHistResultOneWayDvAvgValue, acdPaaResultOneWayDvPrevSamples=acdPaaResultOneWayDvPrevSamples, acdPaaConformance=acdPaaConformance, acdPaaResultPktLossTime=acdPaaResultPktLossTime, acdPaaHistResultIgmpJoinDelayMinValue=acdPaaHistResultIgmpJoinDelayMinValue, acdPaaStatusGroup=acdPaaStatusGroup, acdPaaGroups=acdPaaGroups, acdPaaResultIgmpJoinDelayTime=acdPaaResultIgmpJoinDelayTime, acdPaaL2CfgOneWayRefPeriod=acdPaaL2CfgOneWayRefPeriod, acdPaaUdpCfgPortNumber=acdPaaUdpCfgPortNumber, acdPaaResultOneWayDelayPrevMinValue=acdPaaResultOneWayDelayPrevMinValue, acdPaaResultIgmpLeaveDelayTime=acdPaaResultIgmpLeaveDelayTime, acdPaaL2CfgGroup=acdPaaL2CfgGroup, acdPaaUdpCfgOperationMode=acdPaaUdpCfgOperationMode, acdPaaL2CfgOperationMode=acdPaaL2CfgOperationMode, acdPaaResultOneWayDvPrevThreshEx=acdPaaResultOneWayDvPrevThreshEx, acdPaaResultOneWayDvPrevValid=acdPaaResultOneWayDvPrevValid, acdPaaUdpCfgGroup=acdPaaUdpCfgGroup, acdPaaL2CfgMacDst=acdPaaL2CfgMacDst, acdPaaUdpCfgCcLossThresh=acdPaaUdpCfgCcLossThresh, acdPaaL2CfgOneWayAvgDelayThresh=acdPaaL2CfgOneWayAvgDelayThresh, acdPaaResultOneWayTime=acdPaaResultOneWayTime, acdPaaResultIgmpLeaveDelayPrevThreshEx=acdPaaResultIgmpLeaveDelayPrevThreshEx, acdPaaUdpCfgTwoWayAvgDelayThresh=acdPaaUdpCfgTwoWayAvgDelayThresh, acdPaaResultPktLossNeCurrValid=acdPaaResultPktLossNeCurrValid, acdPaaResultTwoWayDvCurrThreshEx=acdPaaResultTwoWayDvCurrThreshEx, acdPaaResultIgmpLeaveDelayPrevMaxValue=acdPaaResultIgmpLeaveDelayPrevMaxValue, acdPaaUdpCfgIgmpMaxLvDly=acdPaaUdpCfgIgmpMaxLvDly, acdPaaResultPktLossFeCurrSamples=acdPaaResultPktLossFeCurrSamples, acdPaaUdpCfgID=acdPaaUdpCfgID, acdPaaResultState=acdPaaResultState, acdPaaResultIgmpLeaveDelayPrevMinValue=acdPaaResultIgmpLeaveDelayPrevMinValue, acdPaaResultID=acdPaaResultID, acdPaaResultTwoWayDvPrevSamples=acdPaaResultTwoWayDvPrevSamples, acdPaaResultIgmpLeaveDelayCurrMinValue=acdPaaResultIgmpLeaveDelayCurrMinValue, acdPaaUdpCfgPktLossThresh=acdPaaUdpCfgPktLossThresh, acdPaaResultGroup=acdPaaResultGroup, acdPaaL2CfgOneWayDelayMax=acdPaaL2CfgOneWayDelayMax, acdPaaResultOneWayDelayCurrMaxValue=acdPaaResultOneWayDelayCurrMaxValue, acdPaaMIBObjects=acdPaaMIBObjects, acdPaaL2CfgVlan2Id=acdPaaL2CfgVlan2Id, acdPaaL2CfgTwoWayAvgDvThresh=acdPaaL2CfgTwoWayAvgDvThresh, acdPaaL2CfgTwoWayAvgDelayThresh=acdPaaL2CfgTwoWayAvgDelayThresh, acdPaaHistResultOneWayDelayMaxValue=acdPaaHistResultOneWayDelayMaxValue, acdPaaResultTwoWayTime=acdPaaResultTwoWayTime, acdPaaResultIgmpJoinDelayPrevMaxValue=acdPaaResultIgmpJoinDelayPrevMaxValue, acdPaaResultIgmpJoinDelayCurrAvgValue=acdPaaResultIgmpJoinDelayCurrAvgValue, acdPaaResultOneWayDvPrevMaxValue=acdPaaResultOneWayDvPrevMaxValue, acdPaaHistResultTwoWayDvMinValue=acdPaaHistResultTwoWayDvMinValue, acdPaaResultPktLossNeCurrSamples=acdPaaResultPktLossNeCurrSamples, acdPaaL2CfgSamplingPeriod=acdPaaL2CfgSamplingPeriod, acdPaaResultOneWayDvInstValue=acdPaaResultOneWayDvInstValue, acdPaaResultIgmpLeaveDelayCurrSamples=acdPaaResultIgmpLeaveDelayCurrSamples, acdPaaUdpCfgTwoWayRefPeriod=acdPaaUdpCfgTwoWayRefPeriod, PYSNMP_MODULE_ID=acdPaa, acdPaaHistResultOneWayDvMinValue=acdPaaHistResultOneWayDvMinValue, acdPaaHistResultSampleIndex=acdPaaHistResultSampleIndex, acdPaaHistResultPktLossNeValue=acdPaaHistResultPktLossNeValue, acdPaaResultTwoWayDvPrevMinValue=acdPaaResultTwoWayDvPrevMinValue, acdPaaHistResultTwoWayDelayMaxValue=acdPaaHistResultTwoWayDelayMaxValue, acdPaaResultTwoWayDelayCurrMinValue=acdPaaResultTwoWayDelayCurrMinValue, acdPaaResultTwoWayDvPrevValid=acdPaaResultTwoWayDvPrevValid, acdPaaHistResultTwoWayDelayThreshEx=acdPaaHistResultTwoWayDelayThreshEx, acdPaaResultTwoWayDelayCurrValid=acdPaaResultTwoWayDelayCurrValid, acdPaaResultIgmpJoinDelayCurrMinValue=acdPaaResultIgmpJoinDelayCurrMinValue, acdPaaStatusTwoWayDvAlert=acdPaaStatusTwoWayDvAlert, acdPaaResultIgmpJoinDelayPrevAvgValue=acdPaaResultIgmpJoinDelayPrevAvgValue, acdPaaResultPktLossNePrevSamples=acdPaaResultPktLossNePrevSamples, acdPaaUdpCfgDestinationPortNumber=acdPaaUdpCfgDestinationPortNumber, acdPaaResultIgmpLeaveDelayInstValue=acdPaaResultIgmpLeaveDelayInstValue, acdPaaUdpCfgIgmpOneWayJoinPeriod=acdPaaUdpCfgIgmpOneWayJoinPeriod, acdPaaResultOneWayDelayCurrSamples=acdPaaResultOneWayDelayCurrSamples, acdPaaUdpCfgDscpValue=acdPaaUdpCfgDscpValue, acdPaaUdpCfgOneWayAvgDvThresh=acdPaaUdpCfgOneWayAvgDvThresh, acdPaaHistResultOneWayDvMaxValue=acdPaaHistResultOneWayDvMaxValue, acdPaaResultIgmpLeaveDelayCurrThreshEx=acdPaaResultIgmpLeaveDelayCurrThreshEx, acdPaaResultPktLossNePrevValueExt=acdPaaResultPktLossNePrevValueExt, acdPaaResultTwoWayDvCurrMinValue=acdPaaResultTwoWayDvCurrMinValue, acdPaaUdpCfgIgmpMaxJoinDly=acdPaaUdpCfgIgmpMaxJoinDly, acdPaaResultOneWayDvCurrSamples=acdPaaResultOneWayDvCurrSamples, acdPaaHistResultPktLossNeValueExt=acdPaaHistResultPktLossNeValueExt, acdPaaResultIgmpJoinDelayPrevSamples=acdPaaResultIgmpJoinDelayPrevSamples, acdPaaResultIgmpJoinDelayPrevValid=acdPaaResultIgmpJoinDelayPrevValid, acdPaaHistResultTwoWayDvAvgValue=acdPaaHistResultTwoWayDvAvgValue, acdPaaResultPktLossNeCurrValueExt=acdPaaResultPktLossNeCurrValueExt, acdPaaStatusState=acdPaaStatusState, acdPaaL2CfgVlan1IdEn=acdPaaL2CfgVlan1IdEn, acdPaaResultTwoWayDelayCurrAvgValue=acdPaaResultTwoWayDelayCurrAvgValue, acdPaaL2CfgVlan2PbitsValue=acdPaaL2CfgVlan2PbitsValue, acdPaaHistResultPktLossFeNbrLoss=acdPaaHistResultPktLossFeNbrLoss, acdPaaResultTwoWayDelayCurrThreshEx=acdPaaResultTwoWayDelayCurrThreshEx, acdPaa=acdPaa, acdPaaResultPktLossNeCurrNbrLoss=acdPaaResultPktLossNeCurrNbrLoss, acdPaaResultTwoWayDelayPrevThreshEx=acdPaaResultTwoWayDelayPrevThreshEx, acdPaaResultTwoWayDelayPrevAvgValue=acdPaaResultTwoWayDelayPrevAvgValue, acdPaaResultIgmpJoinDelayInstValue=acdPaaResultIgmpJoinDelayInstValue, acdPaaResultPktLossNeCurrValue=acdPaaResultPktLossNeCurrValue, acdPaaHistResultIgmpJoinDelayMaxValue=acdPaaHistResultIgmpJoinDelayMaxValue, acdPaaStatusPktLossAlert=acdPaaStatusPktLossAlert, acdPaaUdpCfgPktSize=acdPaaUdpCfgPktSize, acdPaaResultPktLossFeCurrValueExt=acdPaaResultPktLossFeCurrValueExt, acdPaaStatusID=acdPaaStatusID, acdPaaResultOneWayDvCurrValid=acdPaaResultOneWayDvCurrValid, acdPaaStatusOneWayDvAlert=acdPaaStatusOneWayDvAlert, acdPaaStatusCcAlert=acdPaaStatusCcAlert, acdPaaHistResultTwoWayDvMaxValue=acdPaaHistResultTwoWayDvMaxValue, acdPaaStatusPeerAddress=acdPaaStatusPeerAddress, acdPaaResultOneWayDvPrevAvgValue=acdPaaResultOneWayDvPrevAvgValue, acdPaaResultOneWayDelayPrevMaxValue=acdPaaResultOneWayDelayPrevMaxValue, acdPaaL2CfgName=acdPaaL2CfgName, acdPaaResultTwoWayDelayPrevMaxValue=acdPaaResultTwoWayDelayPrevMaxValue, acdPaaUdpCfgTwoWayDelayMax=acdPaaUdpCfgTwoWayDelayMax, acdPaaResultPktLossFePrevNbrLoss=acdPaaResultPktLossFePrevNbrLoss, acdPaaUdpCfgSamplingPeriod=acdPaaUdpCfgSamplingPeriod, acdPaaHistResultID=acdPaaHistResultID, acdPaaL2CfgEntry=acdPaaL2CfgEntry, acdPaaUdpCfgIgmpLvAvgDlyThresh=acdPaaUdpCfgIgmpLvAvgDlyThresh, acdPaaHistResultPktLossNeNbrLoss=acdPaaHistResultPktLossNeNbrLoss, acdPaaHistResultPktLossFeValue=acdPaaHistResultPktLossFeValue, acdPaaResultTwoWayDelayPrevValid=acdPaaResultTwoWayDelayPrevValid, acdPaaUdpCfgEntry=acdPaaUdpCfgEntry, acdPaaHistResultOneWayDelayThreshEx=acdPaaHistResultOneWayDelayThreshEx, acdPaaUdpCfgIPv4DstAddr=acdPaaUdpCfgIPv4DstAddr, acdPaaResultOneWayDvCurrMinValue=acdPaaResultOneWayDvCurrMinValue, acdPaaStatusTwoWayAvgDvAlert=acdPaaStatusTwoWayAvgDvAlert, acdPaaL2CfgTwoWayDelayMax=acdPaaL2CfgTwoWayDelayMax, acdPaaHistResultTable=acdPaaHistResultTable, acdPaaStatusOneWayDelayAlert=acdPaaStatusOneWayDelayAlert, acdPaaL2CfgOneWayAvgDvThresh=acdPaaL2CfgOneWayAvgDvThresh, acdPaaL2CfgTwoWayDvMax=acdPaaL2CfgTwoWayDvMax, acdPaaResultOneWayDelayCurrValid=acdPaaResultOneWayDelayCurrValid, acdPaaResultPktLossFePrevValid=acdPaaResultPktLossFePrevValid, acdPaaResultOneWayDvCurrThreshExc=acdPaaResultOneWayDvCurrThreshExc, acdPaaUdpCfgIgmpJoinAvgDlyThres=acdPaaUdpCfgIgmpJoinAvgDlyThres, acdPaaHistResultOneWayDelaySamples=acdPaaHistResultOneWayDelaySamples, acdPaaHistResultIgmpJoinDelayThreshEx=acdPaaHistResultIgmpJoinDelayThreshEx, acdPaaResultTwoWayDvPrevAvgValue=acdPaaResultTwoWayDvPrevAvgValue, acdPaaHistResultIgmpLeaveDelayValid=acdPaaHistResultIgmpLeaveDelayValid, acdPaaResultTwoWayDelayPrevSamples=acdPaaResultTwoWayDelayPrevSamples, acdPaaHistResultIntervalEnd=acdPaaHistResultIntervalEnd, acdPaaL2CfgOneWayDelayThresh=acdPaaL2CfgOneWayDelayThresh, acdPaaResultOneWayDelayCurrThreshEx=acdPaaResultOneWayDelayCurrThreshEx, acdPaaL2CfgPktSize=acdPaaL2CfgPktSize, acdPaaHistResultIgmpLeaveDelaySamples=acdPaaHistResultIgmpLeaveDelaySamples, acdPaaUdpCfgIgmpRefPeriod=acdPaaUdpCfgIgmpRefPeriod, acdPaaResultPktLossCurrGaps=acdPaaResultPktLossCurrGaps, acdPaaResultPktLossFeCurrValue=acdPaaResultPktLossFeCurrValue, acdPaaResultPktLossPrevLargestGap=acdPaaResultPktLossPrevLargestGap, acdPaaHistResultOneWayDvSamples=acdPaaHistResultOneWayDvSamples, acdPaaUdpCfgIgmpJoinDlyThres=acdPaaUdpCfgIgmpJoinDlyThres, acdPaaResultTwoWayDvCurrAvgValue=acdPaaResultTwoWayDvCurrAvgValue, acdPaaResultTwoWayDvPrevThreshEx=acdPaaResultTwoWayDvPrevThreshEx, acdPaaUdpCfgOneWayDvThresh=acdPaaUdpCfgOneWayDvThresh, acdPaaResultPktLossFeCurrValid=acdPaaResultPktLossFeCurrValid, acdPaaL2CfgTwoWayDvThresh=acdPaaL2CfgTwoWayDvThresh, acdPaaHistResultOneWayDelayAvgValue=acdPaaHistResultOneWayDelayAvgValue, acdPaaUdpCfgState=acdPaaUdpCfgState, acdPaaResultIgmpLeaveDelayCurrValid=acdPaaResultIgmpLeaveDelayCurrValid, acdPaaHistResultOneWayDvThreshEx=acdPaaHistResultOneWayDvThreshEx, acdPaaHistResultPktLossFeValueExt=acdPaaHistResultPktLossFeValueExt, acdPaaUdpCfgTwoWayDvMax=acdPaaUdpCfgTwoWayDvMax, acdPaaResultIgmpJoinDelayPrevMinValue=acdPaaResultIgmpJoinDelayPrevMinValue, acdPaaResultPktLossCurrLargestGap=acdPaaResultPktLossCurrLargestGap, acdPaaResultTwoWayDelayPrevMinValue=acdPaaResultTwoWayDelayPrevMinValue, acdPaaHistResultTwoWayDelayAvgValue=acdPaaHistResultTwoWayDelayAvgValue, acdPaaUdpCfgTable=acdPaaUdpCfgTable, acdPaaResultTable=acdPaaResultTable, acdPaaResultIgmpLeaveDelayCurrAvgValue=acdPaaResultIgmpLeaveDelayCurrAvgValue, acdPaaL2CfgPeerID=acdPaaL2CfgPeerID, acdPaaHistResultTwoWayDelayMinValue=acdPaaHistResultTwoWayDelayMinValue, acdPaaL2CfgPktLossThresh=acdPaaL2CfgPktLossThresh, acdPaaResultOneWayDelayPrevSamples=acdPaaResultOneWayDelayPrevSamples, acdPaaResultIgmpJoinDelayCurrMaxValue=acdPaaResultIgmpJoinDelayCurrMaxValue, acdPaaL2CfgTable=acdPaaL2CfgTable, acdPaaResultTwoWayDvInstValue=acdPaaResultTwoWayDvInstValue, acdPaaStatusOneWayAvgDelayAlert=acdPaaStatusOneWayAvgDelayAlert, acdPaaUdpCfgOneWayAvgDelayThresh=acdPaaUdpCfgOneWayAvgDelayThresh, acdPaaL2CfgOneWayDvMax=acdPaaL2CfgOneWayDvMax, acdPaaL2CfgOneWayDvThresh=acdPaaL2CfgOneWayDvThresh, acdPaaL2CfgID=acdPaaL2CfgID, acdPaaResultTwoWayDelayInstValue=acdPaaResultTwoWayDelayInstValue, acdPaaHistResultTwoWayDelaySamples=acdPaaHistResultTwoWayDelaySamples, acdPaaL2CfgEtype=acdPaaL2CfgEtype, acdPaaHistResultTwoWayDvValid=acdPaaHistResultTwoWayDvValid, acdPaaL2CfgTwoWayDelayThresh=acdPaaL2CfgTwoWayDelayThresh, acdPaaResultOneWayDvCurrAvgValue=acdPaaResultOneWayDvCurrAvgValue, acdPaaHistResultEntry=acdPaaHistResultEntry, acdPaaResultOneWayDvPrevMinValue=acdPaaResultOneWayDvPrevMinValue, acdPaaL2CfgPktLossThreshExt=acdPaaL2CfgPktLossThreshExt, acdPaaResultOneWayDelayInstValue=acdPaaResultOneWayDelayInstValue, acdPaaResultOneWayDelayPrevAvgValue=acdPaaResultOneWayDelayPrevAvgValue, acdPaaHistResultDuration=acdPaaHistResultDuration, acdPaaResultIgmpJoinDelayCurrSamples=acdPaaResultIgmpJoinDelayCurrSamples, acdPaaResultTwoWayDvCurrValid=acdPaaResultTwoWayDvCurrValid, acdPaaResultTwoWayDvCurrMaxValue=acdPaaResultTwoWayDvCurrMaxValue, acdPaaStatusEntry=acdPaaStatusEntry)
mibBuilder.exportSymbols("ACD-PAA-MIB", acdPaaUdpCfgVlan1PbitsValue=acdPaaUdpCfgVlan1PbitsValue, acdPaaUdpCfgVlan2PbitsValue=acdPaaUdpCfgVlan2PbitsValue, acdPaaHistResultPktLossNeValid=acdPaaHistResultPktLossNeValid, acdPaaL2CfgPortName=acdPaaL2CfgPortName, acdPaaResultIgmpJoinDelayPrevThreshEx=acdPaaResultIgmpJoinDelayPrevThreshEx, acdPaaHistResultTwoWayDvSamples=acdPaaHistResultTwoWayDvSamples, acdPaaL2CfgVlan1Id=acdPaaL2CfgVlan1Id, acdPaaHistResultTwoWayDvThreshEx=acdPaaHistResultTwoWayDvThreshEx, acdPaaHistResultIgmpJoinDelayValid=acdPaaHistResultIgmpJoinDelayValid, acdPaaCompliances=acdPaaCompliances, acdPaaResultPktLossFeCurrNbrLoss=acdPaaResultPktLossFeCurrNbrLoss, acdPaaHistResultIgmpLeaveDelayMinValue=acdPaaHistResultIgmpLeaveDelayMinValue, acdPaaStatusTwoWayAvgDelayAlert=acdPaaStatusTwoWayAvgDelayAlert, acdPaaResultOneWayDelayCurrMinValue=acdPaaResultOneWayDelayCurrMinValue, acdPaaResultOneWayDelayPrevThreshEx=acdPaaResultOneWayDelayPrevThreshEx)
