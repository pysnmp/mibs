#
# PySNMP MIB module RS-XX9-DAB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/rs/RS-XX9-DAB-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 16:05:23 2024
# On host fv-az1245-338 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
commonNotificationAlarmClass, = mibBuilder.importSymbols("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass")
rsXx9Dab, rsXx9MibModule = mibBuilder.importSymbols("RS-XX9-SMI-MIB", "rsXx9Dab", "rsXx9MibModule")
IndexAB, NotificationMask, NotificationState, NotificationPriority, IndexTransmitter = mibBuilder.importSymbols("RS-XX9-TC-MIB", "IndexAB", "NotificationMask", "NotificationState", "NotificationPriority", "IndexTransmitter")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Unsigned32, NotificationType, MibIdentifier, iso, ObjectIdentity, Integer32, IpAddress, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, Counter64, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "MibIdentifier", "iso", "ObjectIdentity", "Integer32", "IpAddress", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "Counter64", "TimeTicks", "Gauge32")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
rsXx9DabMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 1, 216, 1))
rsXx9DabMibModule.setRevisions(('2016-03-23 09:00', '2015-11-30 15:00', '2015-02-27 15:00', '2015-02-02 18:00', '2014-12-22 16:00', '2014-09-30 13:00', '2014-06-03 12:00', '2014-05-16 15:00', '2014-03-06 16:00', '2013-12-20 10:00', '2013-10-10 14:00', '2013-10-01 10:00', '2013-03-13 10:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsXx9DabMibModule.setRevisionsDescriptions(('rename dabInputEdiSyncState enum: from etiLi(9) to etiNi(9)', 'add dabInputEdiTable, dabInputCmnEdiDejitterBuffer, dabInputCmnEdiMaxReplacement, dabInpIfEdiState\n                \n                ', 'updated description texts', 'added dabTestRsEnsembleDataChannel, dabTestRsEnsemblePrbs', 'updated description texts\n                ', 'added dabStSfnNetworkCompensationDelayState\n                added dabStSfnMfnOverallSignalDelay\n                extend range of dabStSfnTistState\n                ', "removed off from dabSetupSfnTistSource's value range\n                added dabInpIfEtiState\n                added dabInputNotificationTable", 'added dabTest and dabEncoderSummary notifications\n                added dabSetupSfnTxOffsetDelaySource', 'added dabTiiCarrierPhase', 'third revision with following changes:\n                - change range of dabTiiSubId to 1..23', 'third revision with following changes:\n                - added dabInputEtiErrorLevelState', 'second revision with following changes:\n                - updated value and description of dabInputEtiSyncState (is named na5376 instead of na5372)\n                - added dabStatusSfnInputTable with Tist state', 'Preliminary version.',))
if mibBuilder.loadTexts: rsXx9DabMibModule.setLastUpdated('201603230900Z')
if mibBuilder.loadTexts: rsXx9DabMibModule.setOrganization('Rohde&Schwarz GmbH & Co. KG')
if mibBuilder.loadTexts: rsXx9DabMibModule.setContactInfo('Rohde & Schwarz GmbH & Co. KG\n                Broadcasting Division\n                \n                Muehldorfstrasse 15\n                81671 Munich\n                Germany\n                \n                customersupport@rohde-schwarz.com')
if mibBuilder.loadTexts: rsXx9DabMibModule.setDescription('This MIB defines DAB specific objects\n                of XX9000 transmitting systems from Rohde & Schwarz.\n                \n                The following MIBs are related to this:\n                - RS-COMMON-MIB         - mandatory for this MIB\n                - RS-XX9-SMI-MIB        - mandatory for this MIB\n                - RS-XX9-TC-MIB         - mandatory for this MIB\n                - RS-XX9-COMMON-MIB     - mandatory for this MIB')
class DabTiiSource(TextualConvention, Integer32):
    description = 'Behaviour of TII (transmitter identification information).\n                off(1)     - not signalled - main ID out of range\n                manual(2)  - signalled from manual input\n                etiMNSC(3) - signalled from ASS type 0 message'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("off", 1), ("manual", 2), ("etiMNSC", 3))

class DabMode(TextualConvention, Integer32):
    description = 'DAB mode'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("modeI", 1), ("modeII", 2), ("modeIII", 3), ("modeIV", 4))

class DabModeSource(TextualConvention, Integer32):
    description = 'Source for DAB mode:\n                manual(1) - from dabModulationMode\n                etiMID(2) - signalled by ETI(LI)-MID'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("manual", 1), ("etiMID", 2))

class NetworkCompensationDelay(TextualConvention, Unsigned32):
    description = 'Description.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 1000000)

class ErrorLevelState(TextualConvention, Integer32):
    description = 'Description.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 1), ("off", 2), ("noSignal", 3), ("tooHigh", 4), ("ok", 5))

class DatarateState(TextualConvention, Integer32):
    description = 'Description.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 1), ("off", 2), ("bufferUnderrun", 3), ("bufferOverflow", 4), ("ok", 5))

rsXx9DabNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 0))
dabTiiMainIdOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 0, 1)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DAB-MIB", "dabStatusNotificationPriority"), ("RS-XX9-DAB-MIB", "dabStatusNotificationState"))
if mibBuilder.loadTexts: dabTiiMainIdOutOfRange.setStatus('current')
if mibBuilder.loadTexts: dabTiiMainIdOutOfRange.setDescription('Indicates that the set TII Main Id is not allowed to use. \n                This warning might occur when the DAB-mode is \n                switched to Mode3. Please check the setting for DAB \n                main-ID.\n                \n                Possible values:\n                off(2)\n                warning(4) - Active main ID not admissible in active DAB mode.\n                \n                Notification class: warning')
dabEncoderSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 0, 2)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DAB-MIB", "dabStatusNotificationPriority"), ("RS-XX9-DAB-MIB", "dabStatusNotificationState"))
if mibBuilder.loadTexts: dabEncoderSummary.setStatus('current')
if mibBuilder.loadTexts: dabEncoderSummary.setDescription('Encoder summary state.\n                \n                Possible values:\n                off(2)\n                fault(3)\n                warning(4)\n                ok(5)\n                \n                Notification class: fault')
dabTest = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 0, 3)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DAB-MIB", "dabStatusNotificationPriority"), ("RS-XX9-DAB-MIB", "dabStatusNotificationState"))
if mibBuilder.loadTexts: dabTest.setStatus('current')
if mibBuilder.loadTexts: dabTest.setDescription('One of the test signals is activated. \n                If a test signal is activated, decoding \n                of the transmitted signal by the \n                transmitter will not be possible.\n                \n                Possible values:\n                off(2)     - no test signal generation\n                warning(4) - test signal generation is activated\n                \n                Notification class: warning\n                ')
dabInpIfEtiState = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 0, 4)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DAB-MIB", "dabInputNotificationPriority"), ("RS-XX9-DAB-MIB", "dabInputNotificationState"))
if mibBuilder.loadTexts: dabInpIfEtiState.setStatus('current')
if mibBuilder.loadTexts: dabInpIfEtiState.setDescription('Description.')
dabInpIfEdiState = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 0, 5)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DAB-MIB", "dabInputNotificationPriority"), ("RS-XX9-DAB-MIB", "dabInputNotificationState"))
if mibBuilder.loadTexts: dabInpIfEdiState.setStatus('current')
if mibBuilder.loadTexts: dabInpIfEdiState.setDescription('Description.')
rsXx9DabObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1))
dabInput = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1))
dabInputCommonTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 1), )
if mibBuilder.loadTexts: dabInputCommonTable.setStatus('current')
if mibBuilder.loadTexts: dabInputCommonTable.setDescription('Common parameters for all inputs.')
dabInputCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 1, 1), ).setIndexNames((0, "RS-XX9-DAB-MIB", "dabInputCmnTxIdx"), (0, "RS-XX9-DAB-MIB", "dabInputCmnExcIdx"))
if mibBuilder.loadTexts: dabInputCommonEntry.setStatus('current')
if mibBuilder.loadTexts: dabInputCommonEntry.setDescription('An entry in the dabInputCommonTable.')
dabInputCmnTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: dabInputCmnTxIdx.setStatus('current')
if mibBuilder.loadTexts: dabInputCmnTxIdx.setDescription('The transmitter index.')
dabInputCmnExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: dabInputCmnExcIdx.setStatus('current')
if mibBuilder.loadTexts: dabInputCmnExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
dabInputCmnImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("ohm75", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabInputCmnImpedance.setStatus('current')
if mibBuilder.loadTexts: dabInputCmnImpedance.setDescription('Description.')
dabInputCmnEdiDejitterBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 100))).setUnits('frames').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabInputCmnEdiDejitterBuffer.setStatus('current')
if mibBuilder.loadTexts: dabInputCmnEdiDejitterBuffer.setDescription('Determines the buffer time at start, before the input data is forwarded to EDI handling. \n                This value should be greater than the expected jitter of the input network. \n                ')
dabInputCmnEdiMaxReplacements = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('frames').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabInputCmnEdiMaxReplacements.setStatus('current')
if mibBuilder.loadTexts: dabInputCmnEdiMaxReplacements.setDescription('Determines the number of ETI frames, which can be created because of replacement. \n                If this number is exceeded, the input is switched off. \n                ')
dabInputEtiTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 2), )
if mibBuilder.loadTexts: dabInputEtiTable.setStatus('current')
if mibBuilder.loadTexts: dabInputEtiTable.setDescription('ETI input parameters.')
dabInputEtiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 2, 1), ).setIndexNames((0, "RS-XX9-DAB-MIB", "dabInputCmnTxIdx"), (0, "RS-XX9-DAB-MIB", "dabInputCmnExcIdx"), (0, "RS-XX9-DAB-MIB", "dabInputEtiInputIdx"))
if mibBuilder.loadTexts: dabInputEtiEntry.setStatus('current')
if mibBuilder.loadTexts: dabInputEtiEntry.setDescription('An entry in the dabInputEtiTable.')
dabInputEtiInputIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input1", 1), ("input2", 2))))
if mibBuilder.loadTexts: dabInputEtiInputIdx.setStatus('current')
if mibBuilder.loadTexts: dabInputEtiInputIdx.setDescription('Input index.')
dabInputEtiSyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("undefined", 1), ("noSignal", 2), ("ais", 3), ("g703", 4), ("g704", 5), ("niG703", 6), ("na5592", 7), ("na5376", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabInputEtiSyncState.setStatus('current')
if mibBuilder.loadTexts: dabInputEtiSyncState.setDescription('Indicates whether the synchronisation could occur on the data stream and which \n                kind of feeding the data stream is used.\n                \n                niG703(6) - ETI(NI, G.703)\n                na5592(7) - ETI(NA, G.704)5592\n                na5376(8) - ETI(NA, G.704)5376')
dabInputEtiDatarate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 2, 1, 3), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: dabInputEtiDatarate.setStatus('current')
if mibBuilder.loadTexts: dabInputEtiDatarate.setDescription('The total data rate inclusive stuffing bytes at ETI feed.')
dabInputEtiDatarateState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 2, 1, 4), DatarateState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabInputEtiDatarateState.setStatus('current')
if mibBuilder.loadTexts: dabInputEtiDatarateState.setDescription('Description.')
dabInputEtiErrorLevelState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 2, 1, 5), ErrorLevelState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabInputEtiErrorLevelState.setStatus('current')
if mibBuilder.loadTexts: dabInputEtiErrorLevelState.setDescription('Indicates the status of error level included in the ETI. The status \n                is set from a multiplexer individually for each ETI Frame. \n                \n                Off: The monitoring is deactivated. \n                No Signal: No signal is being applied. \n                Too High: The error level is  2. This input is used no longer. \n                Ok: The error level is 2.\n                ')
dabInputNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 3), )
if mibBuilder.loadTexts: dabInputNotificationTable.setStatus('current')
if mibBuilder.loadTexts: dabInputNotificationTable.setDescription('The context information/configuration for the\n                DAB input notifications.')
dabInputNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 3, 1), ).setIndexNames((0, "RS-XX9-DAB-MIB", "dabInputNotificationTxIdx"), (0, "RS-XX9-DAB-MIB", "dabInputNotificationExcIdx"), (0, "RS-XX9-DAB-MIB", "dabInputNotificationInputIdx"), (0, "RS-XX9-DAB-MIB", "dabInputNotificationIdx"))
if mibBuilder.loadTexts: dabInputNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: dabInputNotificationEntry.setDescription('Description.')
dabInputNotificationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 3, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: dabInputNotificationTxIdx.setStatus('current')
if mibBuilder.loadTexts: dabInputNotificationTxIdx.setDescription('The transmitter index.')
dabInputNotificationExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 3, 1, 2), IndexAB())
if mibBuilder.loadTexts: dabInputNotificationExcIdx.setStatus('current')
if mibBuilder.loadTexts: dabInputNotificationExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
dabInputNotificationInputIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input1", 1), ("input2", 2))))
if mibBuilder.loadTexts: dabInputNotificationInputIdx.setStatus('current')
if mibBuilder.loadTexts: dabInputNotificationInputIdx.setDescription('Input index.')
dabInputNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 5)))
if mibBuilder.loadTexts: dabInputNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: dabInputNotificationIdx.setDescription('The notification number as below rsXx9DabNotifications.\n                This is a helper column and therefore not-accessible.')
dabInputNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5))).clone(namedValues=NamedValues(("dabInpIfEtiState", 4), ("dabInpIfEdiState", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabInputNotificationName.setStatus('current')
if mibBuilder.loadTexts: dabInputNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications below rsXx9DabNotifications.')
dabInputNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 3, 1, 6), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabInputNotificationMask.setStatus('current')
if mibBuilder.loadTexts: dabInputNotificationMask.setDescription('See textual convention for details.')
dabInputNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 3, 1, 7), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabInputNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: dabInputNotificationPriority.setDescription('See textual convention for details.')
dabInputNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 3, 1, 8), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabInputNotificationState.setStatus('current')
if mibBuilder.loadTexts: dabInputNotificationState.setDescription('See textual convention for details.')
dabInputEdiTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4), )
if mibBuilder.loadTexts: dabInputEdiTable.setStatus('current')
if mibBuilder.loadTexts: dabInputEdiTable.setDescription('EDI input parameters.')
dabInputEdiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4, 1), ).setIndexNames((0, "RS-XX9-DAB-MIB", "dabInputCmnTxIdx"), (0, "RS-XX9-DAB-MIB", "dabInputCmnExcIdx"), (0, "RS-XX9-DAB-MIB", "dabInputNotificationInputIdx"))
if mibBuilder.loadTexts: dabInputEdiEntry.setStatus('current')
if mibBuilder.loadTexts: dabInputEdiEntry.setDescription('An entry in the dabInputEdiTable.')
dabInputEdiSyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 8, 9))).clone(namedValues=NamedValues(("undefined", 0), ("noSignal", 1), ("stiDLi", 8), ("etiNi", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabInputEdiSyncState.setStatus('current')
if mibBuilder.loadTexts: dabInputEdiSyncState.setDescription('Indicates whether the datastream could be synchronized \n                and which type of the datastream is fed.\n                ')
dabInputEdiDatarate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4, 1, 2), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: dabInputEdiDatarate.setStatus('current')
if mibBuilder.loadTexts: dabInputEdiDatarate.setDescription('Indicates the total data rate (gross data rate) on the EDI feed.\n                ')
dabInputEdiDatarateState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4, 1, 3), DatarateState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabInputEdiDatarateState.setStatus('current')
if mibBuilder.loadTexts: dabInputEdiDatarateState.setDescription('Description.')
dabInputEdiConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tsLan1", 1), ("tsLan2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabInputEdiConnector.setStatus('current')
if mibBuilder.loadTexts: dabInputEdiConnector.setDescription('Used to define the physical network interface to which the logical EDI stream \n                 is bound. Normally, the TS LAN 1 socket (X30) is coupled to EDI stream 1 and \n                 the TS LAN 2 socket (X31) to EDI stream 2. This allows you to use multiple \n                 redundant servers that can be selected automatically using the automatic \n                 input signal switchover. However, it is also possible to feed several \n                 multicast streams via the same physical Ethernet socket. In this case, too, \n                 the automatic input signal switchover function can toggle automatically \n                 between two data streams.')
dabInputEdiStreamingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uniCast", 1), ("multiCast", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabInputEdiStreamingMode.setStatus('current')
if mibBuilder.loadTexts: dabInputEdiStreamingMode.setDescription('Determines the streaming mode. ')
dabInputEdiStreamAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabInputEdiStreamAddressType.setStatus('current')
if mibBuilder.loadTexts: dabInputEdiStreamAddressType.setDescription('Description.')
dabInputEdiStreamAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4, 1, 7), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabInputEdiStreamAddress.setStatus('current')
if mibBuilder.loadTexts: dabInputEdiStreamAddress.setDescription('If dabInputEdiStreamingMode is unicast(1) this object is read-only and shows the IP address\n                 on the physical connector.\n                 If dabInputEdiStreamingMode is multicast(2) this object is read-write for configuration\n                 of the multicast source the IP address.\n                ')
dabInputEdiStreamPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabInputEdiStreamPort.setStatus('current')
if mibBuilder.loadTexts: dabInputEdiStreamPort.setDescription('The port of the logical input stream. ')
dabInputEdiErrorLevelState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4, 1, 9), ErrorLevelState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabInputEdiErrorLevelState.setStatus('current')
if mibBuilder.loadTexts: dabInputEdiErrorLevelState.setDescription('Indicates the status of error level included in the EDI. The status \n                is set from a multiplexer individually for each EDI Frame. \n                \n                Off: The monitoring is deactivated. \n                No Signal: No signal is being applied. \n                Too High: The error level is  2. This input is used no longer. \n                Ok: The error level is 2.\n                ')
dabInputEdiReplacementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("noInput", 2), ("unused", 3), ("replacedFrames", 4), ("ok", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabInputEdiReplacementStatus.setStatus('current')
if mibBuilder.loadTexts: dabInputEdiReplacementStatus.setDescription('Description.')
dabInputEdiFecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("undefined", 1), ("off", 2), ("mode1", 3), ("mode2", 4), ("mode3", 5), ("mode4", 6), ("mode5", 7), ("mode6OrHigher", 8), ("unknown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabInputEdiFecMode.setStatus('current')
if mibBuilder.loadTexts: dabInputEdiFecMode.setDescription('Shows the fed FEC.')
dabStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2))
dabStatusNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 1), )
if mibBuilder.loadTexts: dabStatusNotificationTable.setStatus('current')
if mibBuilder.loadTexts: dabStatusNotificationTable.setDescription('The context information/configuration for the\n                DAB status notifications.')
dabStatusNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 1, 1), ).setIndexNames((0, "RS-XX9-DAB-MIB", "dabStatusNotificationTxIdx"), (0, "RS-XX9-DAB-MIB", "dabStatusNotificationExcIdx"), (0, "RS-XX9-DAB-MIB", "dabStatusNotificationIdx"))
if mibBuilder.loadTexts: dabStatusNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: dabStatusNotificationEntry.setDescription('An entry in the dabStatusNotificationTable.')
dabStatusNotificationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: dabStatusNotificationTxIdx.setStatus('current')
if mibBuilder.loadTexts: dabStatusNotificationTxIdx.setDescription('The transmitter index.')
dabStatusNotificationExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: dabStatusNotificationExcIdx.setStatus('current')
if mibBuilder.loadTexts: dabStatusNotificationExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
dabStatusNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: dabStatusNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: dabStatusNotificationIdx.setDescription('The notification number as below rsXx9DabNotifications.\n                This is a helper column and therefore not-accessible.')
dabStatusNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dabTiiMainIdOutOfRange", 1), ("dabEncoderSummary", 2), ("dabTest", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabStatusNotificationName.setStatus('current')
if mibBuilder.loadTexts: dabStatusNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications below rsXx9DabNotifications.')
dabStatusNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 1, 1, 5), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabStatusNotificationMask.setStatus('current')
if mibBuilder.loadTexts: dabStatusNotificationMask.setDescription('See textual convention for details.')
dabStatusNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 1, 1, 6), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabStatusNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: dabStatusNotificationPriority.setDescription('See textual convention for details.')
dabStatusNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 1, 1, 7), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabStatusNotificationState.setStatus('current')
if mibBuilder.loadTexts: dabStatusNotificationState.setDescription('See textual convention for details.')
dabActiveConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 2), )
if mibBuilder.loadTexts: dabActiveConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: dabActiveConfigurationTable.setDescription('Current general DAB configuration.')
dabActiveConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 2, 1), ).setIndexNames((0, "RS-XX9-DAB-MIB", "dabStatusNotificationTxIdx"), (0, "RS-XX9-DAB-MIB", "dabStatusNotificationExcIdx"))
if mibBuilder.loadTexts: dabActiveConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: dabActiveConfigurationEntry.setDescription('An entry in the dabActiveConfigurationTable.')
dabActCfgModeSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 2, 1, 1), DabModeSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabActCfgModeSource.setStatus('current')
if mibBuilder.loadTexts: dabActCfgModeSource.setDescription('Indicates the source from which the DAB mode setting is retrieved. \n                \n                Manual: DAB mode is set manually at the transmitter. \n                ETI (LI)-MID: DAB mode is read out from the ETI header.\n                ')
dabActiveLocalizationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 3), )
if mibBuilder.loadTexts: dabActiveLocalizationTable.setStatus('current')
if mibBuilder.loadTexts: dabActiveLocalizationTable.setDescription('Current DAB localization parameters.')
dabActiveLocalizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 3, 1), ).setIndexNames((0, "RS-XX9-DAB-MIB", "dabStatusNotificationTxIdx"), (0, "RS-XX9-DAB-MIB", "dabStatusNotificationExcIdx"))
if mibBuilder.loadTexts: dabActiveLocalizationEntry.setStatus('current')
if mibBuilder.loadTexts: dabActiveLocalizationEntry.setDescription('An entry in the dabActiveLocalizationTable.')
dabActLclTxAddressPresentPlain = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 3, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabActLclTxAddressPresentPlain.setStatus('current')
if mibBuilder.loadTexts: dabActLclTxAddressPresentPlain.setDescription('Indicates whether transmitter identification information (TII) \n                for the set transmitter address is contained in the transport \n                stream.\n                ')
dabActLclTxAddressRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabActLclTxAddressRequired.setStatus('current')
if mibBuilder.loadTexts: dabActLclTxAddressRequired.setDescription('Depending on the setting for TII Source, indicates whether the Tx address is evaluated.')
dabActLclTxAddressState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("neverSeen", 2), ("holdover", 3), ("ok", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabActLclTxAddressState.setStatus('current')
if mibBuilder.loadTexts: dabActLclTxAddressState.setDescription('Indicates whether the Tx address is present. \n                \n                Never Seen: No Tx address has been found in the data stream. \n                The main ID is set to 0 and the sub-ID is set to 1 and no additional \n                Tx time offset is set. \n                \n                Holdover: The data stream does not currently contain a Tx address. \n                The TII last found is sent. \n                \n                Ok: TII for the set Tx address is present in the data stream.')
dabActLclTiiSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 3, 1, 4), DabTiiSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabActLclTiiSource.setStatus('current')
if mibBuilder.loadTexts: dabActLclTiiSource.setDescription('Indicates which source has been selected for the identifiers \n                of the TII (transmission identification information) settings.\n                ')
dabActiveModulationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 4), )
if mibBuilder.loadTexts: dabActiveModulationTable.setStatus('current')
if mibBuilder.loadTexts: dabActiveModulationTable.setDescription('Current DAB modulation parameters.')
dabActiveModulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 4, 1), ).setIndexNames((0, "RS-XX9-DAB-MIB", "dabStatusNotificationTxIdx"), (0, "RS-XX9-DAB-MIB", "dabStatusNotificationExcIdx"))
if mibBuilder.loadTexts: dabActiveModulationEntry.setStatus('current')
if mibBuilder.loadTexts: dabActiveModulationEntry.setDescription('An entry in the dabActiveModulationTable.')
dabActMdlModeEti = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 4, 1, 1), DabMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabActMdlModeEti.setStatus('current')
if mibBuilder.loadTexts: dabActMdlModeEti.setDescription('Indicates which DAB mode is signaled via the ETI header in the data stream.')
dabActMdlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 4, 1, 2), DabMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabActMdlMode.setStatus('current')
if mibBuilder.loadTexts: dabActMdlMode.setDescription('Indicates the currently active DAB mode.')
dabActiveTiiTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 5), )
if mibBuilder.loadTexts: dabActiveTiiTable.setStatus('current')
if mibBuilder.loadTexts: dabActiveTiiTable.setDescription('Current DAB TII (transmitter identification information) parameters.')
dabActiveTiiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 5, 1), ).setIndexNames((0, "RS-XX9-DAB-MIB", "dabStatusNotificationTxIdx"), (0, "RS-XX9-DAB-MIB", "dabStatusNotificationExcIdx"))
if mibBuilder.loadTexts: dabActiveTiiEntry.setStatus('current')
if mibBuilder.loadTexts: dabActiveTiiEntry.setDescription('An entry in the dabActiveTiiTable.')
dabActTiiMainIdMnsc = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabActTiiMainIdMnsc.setStatus('current')
if mibBuilder.loadTexts: dabActTiiMainIdMnsc.setDescription('Indicates the main ID signaled via MNSC (multiplex network service channel).')
dabActTiiSubIdMnsc = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabActTiiSubIdMnsc.setStatus('current')
if mibBuilder.loadTexts: dabActTiiSubIdMnsc.setDescription('Indicates the sub-ID signaled via MNSC (multiplex network service channel).')
dabActTiiMainId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabActTiiMainId.setStatus('current')
if mibBuilder.loadTexts: dabActTiiMainId.setDescription('Indicates the main ID effective in the exciter.')
dabActTiiSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabActTiiSubId.setStatus('current')
if mibBuilder.loadTexts: dabActTiiSubId.setDescription('Indicates the sub-ID effective in the exciter.')
dabStatusSfnTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 6), )
if mibBuilder.loadTexts: dabStatusSfnTable.setStatus('current')
if mibBuilder.loadTexts: dabStatusSfnTable.setDescription('Description.')
dabStatusSfnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 6, 1), ).setIndexNames((0, "RS-XX9-DAB-MIB", "dabStatusNotificationTxIdx"), (0, "RS-XX9-DAB-MIB", "dabStatusNotificationExcIdx"))
if mibBuilder.loadTexts: dabStatusSfnEntry.setStatus('current')
if mibBuilder.loadTexts: dabStatusSfnEntry.setDescription('Description.')
dabStSfnTxOffsetDelaySource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("mnsc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabStSfnTxOffsetDelaySource.setStatus('current')
if mibBuilder.loadTexts: dabStSfnTxOffsetDelaySource.setDescription('Description.')
dabStSfnTxOffsetDelayMnsc = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 6, 1, 2), Unsigned32()).setUnits('micro second').setMaxAccess("readonly")
if mibBuilder.loadTexts: dabStSfnTxOffsetDelayMnsc.setStatus('current')
if mibBuilder.loadTexts: dabStSfnTxOffsetDelayMnsc.setDescription('Description.')
dabStSfnNetworkCompensationDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 6, 1, 3), NetworkCompensationDelay()).setUnits('micro second').setMaxAccess("readonly")
if mibBuilder.loadTexts: dabStSfnNetworkCompensationDelay.setStatus('current')
if mibBuilder.loadTexts: dabStSfnNetworkCompensationDelay.setDescription('Indicates the network compensation delay for the opereation in static \n                single frequency networks. If dabSetupSfnSync has been set to static(4), \n                the different feeding time of several transmitters in a SFN can be \n                compensated by the setting of a static transit time correction. The value \n                for the two logical inputs can be set separately.\n                \n                ')
dabStSfnTxCompensationDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 6, 1, 4), Unsigned32()).setUnits('micro second').setMaxAccess("readonly")
if mibBuilder.loadTexts: dabStSfnTxCompensationDelay.setStatus('current')
if mibBuilder.loadTexts: dabStSfnTxCompensationDelay.setDescription('Indicates the time span by which the signal processing \n                is delayed artificially to get a constant Tx Delay.')
dabStSfnTxOffsetDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 6, 1, 5), Unsigned32()).setUnits('micro second').setMaxAccess("readonly")
if mibBuilder.loadTexts: dabStSfnTxOffsetDelay.setStatus('current')
if mibBuilder.loadTexts: dabStSfnTxOffsetDelay.setDescription('Indicates the TX Offset Delay. The TX Offset Delay is transmitted via the \n                ETI signalling Channel MNSC (Multiplex Network Service Channel) and \n                is used to set off the time of transmission in comparison with the regular \n                time of transmission pre-determined by the Tx Delay.\n                ')
dabStSfnMfnOverallSignalDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 6, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setUnits('micro second').setMaxAccess("readonly")
if mibBuilder.loadTexts: dabStSfnMfnOverallSignalDelay.setStatus('current')
if mibBuilder.loadTexts: dabStSfnMfnOverallSignalDelay.setDescription('Indicates the processing delay of the signal through the transmitter.')
dabStatusSfnInputTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 7), )
if mibBuilder.loadTexts: dabStatusSfnInputTable.setStatus('current')
if mibBuilder.loadTexts: dabStatusSfnInputTable.setDescription('current DAB SFN state (by input).')
dabStatusSfnInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 7, 1), ).setIndexNames((0, "RS-XX9-DAB-MIB", "dabStatusNotificationTxIdx"), (0, "RS-XX9-DAB-MIB", "dabStatusNotificationExcIdx"), (0, "RS-XX9-DAB-MIB", "dabStSfnInputIdx"))
if mibBuilder.loadTexts: dabStatusSfnInputEntry.setStatus('current')
if mibBuilder.loadTexts: dabStatusSfnInputEntry.setDescription('An entry in the dabStatusSfnInputTable')
dabStSfnInputIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input1", 1), ("input2", 2))))
if mibBuilder.loadTexts: dabStSfnInputIdx.setStatus('current')
if mibBuilder.loadTexts: dabStSfnInputIdx.setDescription('Input index.')
dabStSfnTistState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 1), ("off", 2), ("missingNi", 3), ("missingNa", 4), ("null", 5), ("ok", 6), ("flywheelActive", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dabStSfnTistState.setStatus('current')
if mibBuilder.loadTexts: dabStSfnTistState.setDescription('shows, if the input fulfills the requirements of the TIST. ')
dabStSfnNetworkCompensationDelayState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 2, 7, 1, 3), NetworkCompensationDelay()).setUnits('micro second').setMaxAccess("readonly")
if mibBuilder.loadTexts: dabStSfnNetworkCompensationDelayState.setStatus('current')
if mibBuilder.loadTexts: dabStSfnNetworkCompensationDelayState.setDescription('Description.\n                \n                valid, if dabSetupSfnSync is dynamic(3)\n                \n                ')
dabSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3))
dabConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 1), )
if mibBuilder.loadTexts: dabConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: dabConfigurationTable.setDescription('General DAB configuration.')
dabConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 1, 1), ).setIndexNames((0, "RS-XX9-DAB-MIB", "dabConfigurationTxIdx"), (0, "RS-XX9-DAB-MIB", "dabConfigurationExcIdx"))
if mibBuilder.loadTexts: dabConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: dabConfigurationEntry.setDescription('An entry in the dabConfigurationTable.')
dabConfigurationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: dabConfigurationTxIdx.setStatus('current')
if mibBuilder.loadTexts: dabConfigurationTxIdx.setDescription('The transmitter index.')
dabConfigurationExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: dabConfigurationExcIdx.setStatus('current')
if mibBuilder.loadTexts: dabConfigurationExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
dabConfigurationModeSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 1, 1, 3), DabModeSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabConfigurationModeSource.setStatus('current')
if mibBuilder.loadTexts: dabConfigurationModeSource.setDescription('Indicates the DAB mode source. The setting can be changed here. \n                \n                Manual: DAB mode is set manually at the transmitter. \n                \n                ETI (LI)-MID: DAB mode is read out from the ETI header.\n                ')
dabLocalizationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 2), )
if mibBuilder.loadTexts: dabLocalizationTable.setStatus('current')
if mibBuilder.loadTexts: dabLocalizationTable.setDescription('DAB localization parameters.')
dabLocalizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 2, 1), )
dabConfigurationEntry.registerAugmentions(("RS-XX9-DAB-MIB", "dabLocalizationEntry"))
dabLocalizationEntry.setIndexNames(*dabConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dabLocalizationEntry.setStatus('current')
if mibBuilder.loadTexts: dabLocalizationEntry.setDescription('An entry in the dabLocalizationTable.')
dabLocalizationTxAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabLocalizationTxAddress.setStatus('current')
if mibBuilder.loadTexts: dabLocalizationTxAddress.setDescription('TX address of transmitter.')
dabLocalizationTiiSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 2, 1, 2), DabTiiSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabLocalizationTiiSource.setStatus('current')
if mibBuilder.loadTexts: dabLocalizationTiiSource.setDescription('see textual convention.')
dabModulationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 3), )
if mibBuilder.loadTexts: dabModulationTable.setStatus('current')
if mibBuilder.loadTexts: dabModulationTable.setDescription('DAB modulation parameters.')
dabModulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 3, 1), )
dabConfigurationEntry.registerAugmentions(("RS-XX9-DAB-MIB", "dabModulationEntry"))
dabModulationEntry.setIndexNames(*dabConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dabModulationEntry.setStatus('current')
if mibBuilder.loadTexts: dabModulationEntry.setDescription('An entry in the dabModulationTable.')
dabModulationChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("mhz1p5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabModulationChannelBandwidth.setStatus('current')
if mibBuilder.loadTexts: dabModulationChannelBandwidth.setDescription('Channel bandwidth of DAB signal.\n                mhz1p5(2) - 1.5 MHz\n                ')
dabModulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 3, 1, 2), DabMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabModulationMode.setStatus('current')
if mibBuilder.loadTexts: dabModulationMode.setDescription('Indicates which DAB mode has been manually preselected \n                if dabConfigurationModeSource is manual(2).\n                ')
dabTiiTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 4), )
if mibBuilder.loadTexts: dabTiiTable.setStatus('current')
if mibBuilder.loadTexts: dabTiiTable.setDescription('DAB TII (transmitter identification information) parameters.')
dabTiiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 4, 1), )
dabConfigurationEntry.registerAugmentions(("RS-XX9-DAB-MIB", "dabTiiEntry"))
dabTiiEntry.setIndexNames(*dabConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dabTiiEntry.setStatus('current')
if mibBuilder.loadTexts: dabTiiEntry.setDescription('An entry in the dabTiiTable.')
dabTiiMainId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 69))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabTiiMainId.setStatus('current')
if mibBuilder.loadTexts: dabTiiMainId.setDescription('Defines main ID if dabLocalizationTiiSource is manual(2).')
dabTiiSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabTiiSubId.setStatus('current')
if mibBuilder.loadTexts: dabTiiSubId.setDescription('Indicates the set sub-ID. The sub-ID can be used to distinguish \n                between the transmitters within a DAB cell. The setting can be \n                changed here if dabLocalizationTiiSource has been set to manual(2).\n                ')
dabTiiCarrierPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("etsi", 1), ("prSymbol", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabTiiCarrierPhase.setStatus('current')
if mibBuilder.loadTexts: dabTiiCarrierPhase.setDescription('Determines the TII Carrier Phase (CP). \n                \n                ETSI EN 300 401: The phase of TII carrier pairs are identical \n                according to ETSI EN 300 401. \n                \n                PR-Symbol: The phase of TII carrier pairs are not identical \n                according to ETSI EN 300 401.\n                ')
dabSetupSfnTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 5), )
if mibBuilder.loadTexts: dabSetupSfnTable.setStatus('current')
if mibBuilder.loadTexts: dabSetupSfnTable.setDescription('Description.')
dabSetupSfnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 5, 1), )
dabConfigurationEntry.registerAugmentions(("RS-XX9-DAB-MIB", "dabSetupSfnEntry"))
dabSetupSfnEntry.setIndexNames(*dabConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dabSetupSfnEntry.setStatus('current')
if mibBuilder.loadTexts: dabSetupSfnEntry.setDescription('Description.')
dabSetupSfnSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("off", 2), ("dynamic", 3), ("static", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSetupSfnSync.setStatus('current')
if mibBuilder.loadTexts: dabSetupSfnSync.setDescription('Indicates whether the network mode MFN or SFN (dynymic or static) \n                is selected. The setting can be changed here. \n                \n                Off (MFN): The time of transmission is not controlled. \n                \n                Dynamic (SFN): The time of transmission of a symbol is the same \n                for all the transmitters of a single-frequency network (SFN). The \n                calculation of the  network compensation delays occurs \n                automatically. A GPS receiver is required for synchronization. \n                \n                Static (SFN): The time of transmission of a symbol is the same for \n                all the transmitters of a single-frequency network (SFN). The \n                network compensation delay must be determined manually and \n                permanently set.  A constant transit time must be ensured for a \n                accurate function.\n                ')
dabSetupSfnTistSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("etiLi", 3), ("etiNa", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSetupSfnTistSource.setStatus('current')
if mibBuilder.loadTexts: dabSetupSfnTistSource.setDescription('Indicates which source is selected for the TIST (timestamp). \n                The setting can be changed here, if dabSetupSfnSync has \n                been set to dynamic(3). It can be used the TIST either from \n                the ETI (LI) frame or the ETI (NA) frame.\n                ')
dabSetupSfnMaxTistLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 2), ("level1", 3), ("level2", 4), ("level3", 5), ("level4", 6), ("level5", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSetupSfnMaxTistLevel.setStatus('current')
if mibBuilder.loadTexts: dabSetupSfnMaxTistLevel.setDescription('Indicates the accuracy of the analysis of the timestamp. \n                On principle the highest possible level must be used \n                which is supported by the ensemble multiplexer and all \n                other transmiiters in the network. Level 4 correponds to \n                488 ns. The setting of the level can be changed here, if \n                dabSetupSfnSync has been set to dynamic(3).\n                ')
dabSetupSfnNetworkCompensationDelay1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 5, 1, 4), NetworkCompensationDelay()).setUnits('micro second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSetupSfnNetworkCompensationDelay1.setStatus('current')
if mibBuilder.loadTexts: dabSetupSfnNetworkCompensationDelay1.setDescription('Network compensation delay for logical input 1.\n                \n                Indicates the network compensation delay for the opereation in static \n                single frequency networks. If dabSetupSfnSync has been set to static(4), \n                the different feeding time of several transmitters in a SFN can be \n                compensated by the setting of a static  transit time correction. The value \n                for the two logical inputs can be set separately.\n                ')
dabSetupSfnNetworkCompensationDelay2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 5, 1, 5), NetworkCompensationDelay()).setUnits('micro second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSetupSfnNetworkCompensationDelay2.setStatus('current')
if mibBuilder.loadTexts: dabSetupSfnNetworkCompensationDelay2.setDescription('Network compensation delay for logical input 2.\n                \n                Indicates the network compensation delay for the opereation in static \n                single frequency networks. If dabSetupSfnSync has been set to static(4), \n                the different feeding time of several transmitters in a SFN can be \n                compensated by the setting of a static  transit time correction. The value \n                for the two logical inputs can be set separately.\n                ')
dabSetupSfnTxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('micro second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSetupSfnTxDelay.setStatus('current')
if mibBuilder.loadTexts: dabSetupSfnTxDelay.setDescription('Indicates the transit time of the signal through the \n                transmitter. The transit time is the sum of Tx \n                Compensation Delay and Tx Processing Delay.')
dabSetupSfnTxOffsetDelaySource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("mnsc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabSetupSfnTxOffsetDelaySource.setStatus('current')
if mibBuilder.loadTexts: dabSetupSfnTxOffsetDelaySource.setDescription('Choose whether a transmitter specific offset delay is \n                taken from the Multiplex Network Service Channel.\n                ')
dabTestTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 6), )
if mibBuilder.loadTexts: dabTestTable.setStatus('current')
if mibBuilder.loadTexts: dabTestTable.setDescription('Configures the test mode of the exciter.')
dabTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 6, 1), )
dabConfigurationEntry.registerAugmentions(("RS-XX9-DAB-MIB", "dabTestEntry"))
dabTestEntry.setIndexNames(*dabConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dabTestEntry.setStatus('current')
if mibBuilder.loadTexts: dabTestEntry.setDescription('An entry in the dabTestTable.')
dabTestSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("rohdeSchwarzEnsemble", 2), ("singleCarrier", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabTestSignal.setStatus('current')
if mibBuilder.loadTexts: dabTestSignal.setDescription('Indicates which test signal is to be generated.\n                \n                off(1):         - switches off test signal generation.\n                rohdeSchwarzEnsemble(2):  - Generates an ETI(LI) signal insted of the \n                                  payload.\n                singleCarrier(3): - Generates an unmodulated single carrier. \n                \n                This test signal can be used to measure the phase noise of the \n                synthesizer. The phase noise must be measured via the RF Monitor Out \n                connector (X61). The cable connected to RF Out (X60) must be removed. \n                In order to protect the amplifiers, this test signal is only generated if the \n                output of the exciter is open.\n                ')
dabTestRsEnsembleDataChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("prbs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabTestRsEnsembleDataChannel.setStatus('current')
if mibBuilder.loadTexts: dabTestRsEnsembleDataChannel.setDescription('Indicates which PRBS Sequence shall be inserted to the data channel:\n                To activate PRBS insertion the parameter dabTestSignal has to \n                be set to rohdeSchwarzEnsemble(2). \n                off(1): A PRBS sequence is inserted to the audio channel only. \n                prbs(2): A PRBS sequence is inserted to the audio and data channel. \n                The setting can be changed here.\n                ')
dabTestRsEnsemblePrbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 1, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("poly1", 1), ("poly2", 2), ("poly3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dabTestRsEnsemblePrbs.setStatus('current')
if mibBuilder.loadTexts: dabTestRsEnsemblePrbs.setDescription('Indicates which pseudo random binary sequence shall be inserted to \n                the audio and/or data channels. To activate PRBS insertion the \n                parameter dabTestSignal has to be set to rohdeSchwarzEnsemble(2). \n                The setting can be changed here.\n                \n                poly1(1) - x^20+x^17+1\n                poly2(2) - x^23+x^18+1\n                poly3(3) - x^15+x^14+1\n                ')
rsXx9DabConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 2))
rsXx9DabCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 2, 1))
dabBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 2, 1, 1)).setObjects(("RS-XX9-DAB-MIB", "dabObjBasic"), ("RS-XX9-DAB-MIB", "dabNotifyBasic"), ("RS-XX9-DAB-MIB", "dabObjInput"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dabBasicCompliance = dabBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: dabBasicCompliance.setDescription('The compliance statement for XX9000 DAB encoding.')
rsXx9DabGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 2, 2))
dabObjBasic = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 2, 2, 1)).setObjects(("RS-XX9-DAB-MIB", "dabConfigurationModeSource"), ("RS-XX9-DAB-MIB", "dabLocalizationTxAddress"), ("RS-XX9-DAB-MIB", "dabLocalizationTiiSource"), ("RS-XX9-DAB-MIB", "dabTestSignal"), ("RS-XX9-DAB-MIB", "dabTiiSubId"), ("RS-XX9-DAB-MIB", "dabTiiMainId"), ("RS-XX9-DAB-MIB", "dabModulationChannelBandwidth"), ("RS-XX9-DAB-MIB", "dabActCfgModeSource"), ("RS-XX9-DAB-MIB", "dabActLclTxAddressPresentPlain"), ("RS-XX9-DAB-MIB", "dabActLclTxAddressRequired"), ("RS-XX9-DAB-MIB", "dabActLclTiiSource"), ("RS-XX9-DAB-MIB", "dabActMdlMode"), ("RS-XX9-DAB-MIB", "dabActTiiMainIdMnsc"), ("RS-XX9-DAB-MIB", "dabActTiiSubIdMnsc"), ("RS-XX9-DAB-MIB", "dabActTiiMainId"), ("RS-XX9-DAB-MIB", "dabActTiiSubId"), ("RS-XX9-DAB-MIB", "dabActMdlModeEti"), ("RS-XX9-DAB-MIB", "dabActLclTxAddressState"), ("RS-XX9-DAB-MIB", "dabSetupSfnSync"), ("RS-XX9-DAB-MIB", "dabSetupSfnTistSource"), ("RS-XX9-DAB-MIB", "dabSetupSfnMaxTistLevel"), ("RS-XX9-DAB-MIB", "dabSetupSfnNetworkCompensationDelay1"), ("RS-XX9-DAB-MIB", "dabSetupSfnNetworkCompensationDelay2"), ("RS-XX9-DAB-MIB", "dabSetupSfnTxDelay"), ("RS-XX9-DAB-MIB", "dabStSfnTxOffsetDelaySource"), ("RS-XX9-DAB-MIB", "dabStSfnTxOffsetDelayMnsc"), ("RS-XX9-DAB-MIB", "dabStSfnNetworkCompensationDelay"), ("RS-XX9-DAB-MIB", "dabStSfnTxCompensationDelay"), ("RS-XX9-DAB-MIB", "dabStSfnTxOffsetDelay"), ("RS-XX9-DAB-MIB", "dabStSfnTistState"), ("RS-XX9-DAB-MIB", "dabTiiCarrierPhase"), ("RS-XX9-DAB-MIB", "dabSetupSfnTxOffsetDelaySource"), ("RS-XX9-DAB-MIB", "dabStSfnNetworkCompensationDelayState"), ("RS-XX9-DAB-MIB", "dabStSfnMfnOverallSignalDelay"), ("RS-XX9-DAB-MIB", "dabTestRsEnsemblePrbs"), ("RS-XX9-DAB-MIB", "dabTestRsEnsembleDataChannel"), ("RS-XX9-DAB-MIB", "dabModulationMode"), ("RS-XX9-DAB-MIB", "dabStatusNotificationName"), ("RS-XX9-DAB-MIB", "dabStatusNotificationMask"), ("RS-XX9-DAB-MIB", "dabStatusNotificationPriority"), ("RS-XX9-DAB-MIB", "dabStatusNotificationState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dabObjBasic = dabObjBasic.setStatus('current')
if mibBuilder.loadTexts: dabObjBasic.setDescription('General DAB objects.')
dabObjInput = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 2, 2, 2)).setObjects(("RS-XX9-DAB-MIB", "dabInputEtiDatarateState"), ("RS-XX9-DAB-MIB", "dabInputEtiDatarate"), ("RS-XX9-DAB-MIB", "dabInputEtiErrorLevelState"), ("RS-XX9-DAB-MIB", "dabInputNotificationState"), ("RS-XX9-DAB-MIB", "dabInputNotificationPriority"), ("RS-XX9-DAB-MIB", "dabInputNotificationMask"), ("RS-XX9-DAB-MIB", "dabInputNotificationName"), ("RS-XX9-DAB-MIB", "dabInputEdiFecMode"), ("RS-XX9-DAB-MIB", "dabInputEdiReplacementStatus"), ("RS-XX9-DAB-MIB", "dabInputEdiErrorLevelState"), ("RS-XX9-DAB-MIB", "dabInputEdiDatarateState"), ("RS-XX9-DAB-MIB", "dabInputEdiStreamPort"), ("RS-XX9-DAB-MIB", "dabInputEdiStreamAddress"), ("RS-XX9-DAB-MIB", "dabInputEdiStreamAddressType"), ("RS-XX9-DAB-MIB", "dabInputEdiStreamingMode"), ("RS-XX9-DAB-MIB", "dabInputEdiConnector"), ("RS-XX9-DAB-MIB", "dabInputEdiDatarate"), ("RS-XX9-DAB-MIB", "dabInputCmnEdiMaxReplacements"), ("RS-XX9-DAB-MIB", "dabInputCmnEdiDejitterBuffer"), ("RS-XX9-DAB-MIB", "dabInputEtiSyncState"), ("RS-XX9-DAB-MIB", "dabInputCmnImpedance"), ("RS-XX9-DAB-MIB", "dabInputEdiSyncState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dabObjInput = dabObjInput.setStatus('current')
if mibBuilder.loadTexts: dabObjInput.setDescription('DAB input objects.')
dabNotifyBasic = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 10, 2, 2, 3)).setObjects(("RS-XX9-DAB-MIB", "dabTiiMainIdOutOfRange"), ("RS-XX9-DAB-MIB", "dabEncoderSummary"), ("RS-XX9-DAB-MIB", "dabTest"), ("RS-XX9-DAB-MIB", "dabInpIfEtiState"), ("RS-XX9-DAB-MIB", "dabInpIfEdiState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dabNotifyBasic = dabNotifyBasic.setStatus('current')
if mibBuilder.loadTexts: dabNotifyBasic.setDescription('General DAB notifications.')
mibBuilder.exportSymbols("RS-XX9-DAB-MIB", dabInputEdiStreamPort=dabInputEdiStreamPort, dabStSfnTxCompensationDelay=dabStSfnTxCompensationDelay, dabTestEntry=dabTestEntry, rsXx9DabConformance=rsXx9DabConformance, DabMode=DabMode, dabSetupSfnTxDelay=dabSetupSfnTxDelay, dabActiveLocalizationEntry=dabActiveLocalizationEntry, dabLocalizationEntry=dabLocalizationEntry, dabInputNotificationTxIdx=dabInputNotificationTxIdx, dabTiiMainId=dabTiiMainId, dabStatusNotificationName=dabStatusNotificationName, dabStatusNotificationTable=dabStatusNotificationTable, dabTest=dabTest, dabInputNotificationExcIdx=dabInputNotificationExcIdx, dabInputNotificationName=dabInputNotificationName, dabModulationEntry=dabModulationEntry, dabSetup=dabSetup, dabConfigurationTxIdx=dabConfigurationTxIdx, dabStSfnTistState=dabStSfnTistState, dabActLclTxAddressPresentPlain=dabActLclTxAddressPresentPlain, dabInputNotificationState=dabInputNotificationState, dabInputEtiDatarate=dabInputEtiDatarate, dabInputEtiSyncState=dabInputEtiSyncState, dabActiveTiiTable=dabActiveTiiTable, dabInputEdiConnector=dabInputEdiConnector, dabActiveLocalizationTable=dabActiveLocalizationTable, dabActMdlMode=dabActMdlMode, dabStSfnInputIdx=dabStSfnInputIdx, DabTiiSource=DabTiiSource, dabInputCmnExcIdx=dabInputCmnExcIdx, dabInputEdiFecMode=dabInputEdiFecMode, dabSetupSfnTable=dabSetupSfnTable, dabActLclTxAddressState=dabActLclTxAddressState, dabSetupSfnEntry=dabSetupSfnEntry, dabStatusNotificationIdx=dabStatusNotificationIdx, dabActTiiMainId=dabActTiiMainId, dabTestRsEnsembleDataChannel=dabTestRsEnsembleDataChannel, dabInputNotificationTable=dabInputNotificationTable, dabModulationTable=dabModulationTable, dabInputEdiTable=dabInputEdiTable, rsXx9DabGroups=rsXx9DabGroups, dabConfigurationModeSource=dabConfigurationModeSource, dabInpIfEdiState=dabInpIfEdiState, dabActCfgModeSource=dabActCfgModeSource, dabSetupSfnNetworkCompensationDelay2=dabSetupSfnNetworkCompensationDelay2, dabTiiEntry=dabTiiEntry, dabObjBasic=dabObjBasic, dabInputEdiEntry=dabInputEdiEntry, dabConfigurationTable=dabConfigurationTable, dabInputEdiReplacementStatus=dabInputEdiReplacementStatus, dabConfigurationEntry=dabConfigurationEntry, dabSetupSfnTistSource=dabSetupSfnTistSource, dabNotifyBasic=dabNotifyBasic, dabStatusNotificationPriority=dabStatusNotificationPriority, dabInputEtiDatarateState=dabInputEtiDatarateState, dabStatusNotificationEntry=dabStatusNotificationEntry, dabActiveConfigurationTable=dabActiveConfigurationTable, dabStatusSfnTable=dabStatusSfnTable, dabActLclTiiSource=dabActLclTiiSource, dabStSfnNetworkCompensationDelay=dabStSfnNetworkCompensationDelay, dabLocalizationTiiSource=dabLocalizationTiiSource, dabSetupSfnSync=dabSetupSfnSync, dabInputCommonEntry=dabInputCommonEntry, DabModeSource=DabModeSource, dabInputCommonTable=dabInputCommonTable, dabStatus=dabStatus, dabActMdlModeEti=dabActMdlModeEti, dabTiiTable=dabTiiTable, dabActiveModulationTable=dabActiveModulationTable, dabInputEtiErrorLevelState=dabInputEtiErrorLevelState, dabInputNotificationEntry=dabInputNotificationEntry, dabModulationChannelBandwidth=dabModulationChannelBandwidth, dabStSfnMfnOverallSignalDelay=dabStSfnMfnOverallSignalDelay, dabActLclTxAddressRequired=dabActLclTxAddressRequired, dabTestSignal=dabTestSignal, dabTiiMainIdOutOfRange=dabTiiMainIdOutOfRange, dabObjInput=dabObjInput, dabInputEtiEntry=dabInputEtiEntry, dabTiiCarrierPhase=dabTiiCarrierPhase, DatarateState=DatarateState, dabInputEdiDatarateState=dabInputEdiDatarateState, dabStatusSfnInputEntry=dabStatusSfnInputEntry, dabInputEdiSyncState=dabInputEdiSyncState, dabStatusNotificationState=dabStatusNotificationState, dabInputCmnTxIdx=dabInputCmnTxIdx, PYSNMP_MODULE_ID=rsXx9DabMibModule, dabStSfnTxOffsetDelaySource=dabStSfnTxOffsetDelaySource, dabStSfnNetworkCompensationDelayState=dabStSfnNetworkCompensationDelayState, dabInputEdiStreamAddressType=dabInputEdiStreamAddressType, dabStatusSfnInputTable=dabStatusSfnInputTable, dabInputEtiInputIdx=dabInputEtiInputIdx, dabModulationMode=dabModulationMode, dabSetupSfnNetworkCompensationDelay1=dabSetupSfnNetworkCompensationDelay1, dabStatusNotificationMask=dabStatusNotificationMask, dabActTiiSubId=dabActTiiSubId, dabEncoderSummary=dabEncoderSummary, dabInput=dabInput, dabActiveConfigurationEntry=dabActiveConfigurationEntry, dabActiveModulationEntry=dabActiveModulationEntry, dabSetupSfnTxOffsetDelaySource=dabSetupSfnTxOffsetDelaySource, dabInputCmnEdiDejitterBuffer=dabInputCmnEdiDejitterBuffer, ErrorLevelState=ErrorLevelState, dabInputCmnEdiMaxReplacements=dabInputCmnEdiMaxReplacements, rsXx9DabNotifications=rsXx9DabNotifications, rsXx9DabMibModule=rsXx9DabMibModule, dabActTiiSubIdMnsc=dabActTiiSubIdMnsc, dabSetupSfnMaxTistLevel=dabSetupSfnMaxTistLevel, dabStSfnTxOffsetDelay=dabStSfnTxOffsetDelay, rsXx9DabObjects=rsXx9DabObjects, dabInputNotificationInputIdx=dabInputNotificationInputIdx, dabInpIfEtiState=dabInpIfEtiState, dabInputCmnImpedance=dabInputCmnImpedance, dabInputEtiTable=dabInputEtiTable, dabStatusSfnEntry=dabStatusSfnEntry, dabInputNotificationPriority=dabInputNotificationPriority, dabBasicCompliance=dabBasicCompliance, dabLocalizationTable=dabLocalizationTable, dabInputEdiDatarate=dabInputEdiDatarate, dabLocalizationTxAddress=dabLocalizationTxAddress, dabStatusNotificationTxIdx=dabStatusNotificationTxIdx, dabConfigurationExcIdx=dabConfigurationExcIdx, dabTestRsEnsemblePrbs=dabTestRsEnsemblePrbs, NetworkCompensationDelay=NetworkCompensationDelay, dabStSfnTxOffsetDelayMnsc=dabStSfnTxOffsetDelayMnsc, dabInputEdiErrorLevelState=dabInputEdiErrorLevelState, rsXx9DabCompliances=rsXx9DabCompliances, dabInputNotificationIdx=dabInputNotificationIdx, dabActTiiMainIdMnsc=dabActTiiMainIdMnsc, dabInputEdiStreamAddress=dabInputEdiStreamAddress, dabInputNotificationMask=dabInputNotificationMask, dabTiiSubId=dabTiiSubId, dabTestTable=dabTestTable, dabInputEdiStreamingMode=dabInputEdiStreamingMode, dabActiveTiiEntry=dabActiveTiiEntry, dabStatusNotificationExcIdx=dabStatusNotificationExcIdx)
