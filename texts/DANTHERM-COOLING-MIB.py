#
# PySNMP MIB module DANTHERM-COOLING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/dantherm/DANTHERM-COOLING-MIB
# Produced by pysmi-1.1.12 at Mon Jul  1 09:17:54 2024
# On host fv-az735-465 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, IpAddress, Counter32, ObjectIdentity, ModuleIdentity, NotificationType, Gauge32, Bits, Unsigned32, TimeTicks, Integer32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "IpAddress", "Counter32", "ObjectIdentity", "ModuleIdentity", "NotificationType", "Gauge32", "Bits", "Unsigned32", "TimeTicks", "Integer32", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
danthermCooling = MibIdentifier((1, 3, 6, 1, 4, 1, 46651))
controllerCC3000 = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1))
systemStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 1))
highlevelControl = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 2))
fan1Config = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 3))
fan2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 4))
damper1Config = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 5))
damper2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 6))
aircon1Config = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 7))
aircon2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 8))
heaterConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 9))
humidityConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 10))
systemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 11))
alarmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 12))
nightModeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 13))
networkConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 14))
trapError = MibIdentifier((1, 3, 6, 1, 4, 1, 46651, 1, 15))
onBoardTempr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: onBoardTempr.setStatus('mandatory')
if mibBuilder.loadTexts: onBoardTempr.setDescription('Controller On-Board temperature in Degree Celcius ')
roomTempr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: roomTempr.setStatus('mandatory')
if mibBuilder.loadTexts: roomTempr.setDescription('Room Sensor or Zone 1 Sensor temperature in Degree Celcius')
hotSpotTempr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotSpotTempr.setStatus('mandatory')
if mibBuilder.loadTexts: hotSpotTempr.setDescription('Hot Spot Sensor or Zone 2 Sensor temperature in Degree Celcius')
outdoor1Tempr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outdoor1Tempr.setStatus('mandatory')
if mibBuilder.loadTexts: outdoor1Tempr.setDescription('Ambient Sensor 1 or Zone 1 Ambient Sensor. temperature in Degree Celcius')
outdoor2Tempr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outdoor2Tempr.setStatus('mandatory')
if mibBuilder.loadTexts: outdoor2Tempr.setDescription('Ambient Sensor 2 or Zone 2 Ambient Sensor. temperature in Degree Celcius')
shelterTempr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelterTempr.setStatus('mandatory')
if mibBuilder.loadTexts: shelterTempr.setDescription('Shelter Temperature. Valid for Single-Zone solution')
outdoorCombinedTempr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outdoorCombinedTempr.setStatus('mandatory')
if mibBuilder.loadTexts: outdoorCombinedTempr.setDescription('Cobined minimum Outdoor Temeperature. Valid for Single-Zone solution')
fan1RPM = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fan1RPM.setStatus('mandatory')
if mibBuilder.loadTexts: fan1RPM.setDescription('Fan 1 Rotation Per Minute')
fan2RPM = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fan2RPM.setStatus('mandatory')
if mibBuilder.loadTexts: fan2RPM.setDescription('Fan 2 Rotation Per Minute')
fan1SpeedPercentage = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fan1SpeedPercentage.setStatus('mandatory')
if mibBuilder.loadTexts: fan1SpeedPercentage.setDescription('Fan 1 Speed in Percentage of Maximum Speed. Also represents Duty-Cycle of FAn Signal ')
fan2SpeedPercentage = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fan2SpeedPercentage.setStatus('mandatory')
if mibBuilder.loadTexts: fan2SpeedPercentage.setDescription('Fan 2 Speed in Percentage of Maximum Speed. Also represents Duty-Cycle of FAn Signal ')
damper1Position = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: damper1Position.setStatus('mandatory')
if mibBuilder.loadTexts: damper1Position.setDescription('Damper 1 Shutter Open Percentage. 0% - Damper Closed. 100% - Damper completely open')
damper2Position = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: damper2Position.setStatus('mandatory')
if mibBuilder.loadTexts: damper2Position.setDescription('Damper 2 Shutter Open Percentage. 0% - Damper Closed. 100% - Damper completely open')
humidity = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidity.setStatus('mandatory')
if mibBuilder.loadTexts: humidity.setDescription('Internal or external humidity in Rh%')
dewpoint = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dewpoint.setStatus('mandatory')
if mibBuilder.loadTexts: dewpoint.setDescription('Internal or external DewPoint based on Humidity; in Degree Celcius')
atmosphericPressure = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmosphericPressure.setStatus('mandatory')
if mibBuilder.loadTexts: atmosphericPressure.setDescription('Atmospheric pressure or Pressure of installed enclosure in KiloPascal')
flowPressure = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowPressure.setStatus('mandatory')
if mibBuilder.loadTexts: flowPressure.setDescription('Filter flow Pressure in Pascal')
fan1Status = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fan1Status.setStatus('mandatory')
if mibBuilder.loadTexts: fan1Status.setDescription('Fan 1 operation status. 0 - Off; 1 - On -; 2 - Emergency/Boost  ')
fan2Status = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fan2Status.setStatus('mandatory')
if mibBuilder.loadTexts: fan2Status.setDescription('Fan 2 operation status. 0 - Off; 1 - On -; 2 - Emergency/Boost  ')
damper1Status = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: damper1Status.setStatus('mandatory')
if mibBuilder.loadTexts: damper1Status.setDescription('Damper 1 operation status. 0 - Closed; 1 - Open;  2 - Dynamic or Temperature Compensation; 2 - Emergency/Boost  ')
damper2Status = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: damper2Status.setStatus('mandatory')
if mibBuilder.loadTexts: damper2Status.setDescription('Damper 2 Shutter Open Percentage. 0 - Closed; 1 - Open;  2 - Dynamic or Temperature Compensation; 2 - Emergency/Boost  ')
aircond1Status = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aircond1Status.setStatus('mandatory')
if mibBuilder.loadTexts: aircond1Status.setDescription('Airconditioner 1 operation status. 0 - Off; 1 - Restart timeout;  2 - On ')
aircond2Status = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aircond2Status.setStatus('mandatory')
if mibBuilder.loadTexts: aircond2Status.setDescription('Airconditioner 2 operation status. 0 - Off; 1 - Restart timeout;  2 - On ')
heaterStatus = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: heaterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: heaterStatus.setDescription('heater operation status. 0 - Off; 1 - On ')
shelter1Status = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelter1Status.setStatus('mandatory')
if mibBuilder.loadTexts: shelter1Status.setDescription('Shelter Status in Single-Zone mode or Zone 1 Status in Dual-Zone mode respectively.\n\t\t\t\t0 - Inactive or None State\n\t\t\t\t1 - Heating State\n\t\t\t\t2 - Re-Cycling State\n\t\t\t\t3 - Free Cooling State\n\t\t\t\t4 - Active or Aircon Coolign State\n\t\t\t\t5 - Emergency State\n\t\t\t\t6 - Intermediate state( strategy transistion) ')
shelter2Status = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelter2Status.setStatus('mandatory')
if mibBuilder.loadTexts: shelter2Status.setDescription('Shelter Status in Dual-Zone mode or Zone 2 Status. \n\t\t\t\t0 - Inactive or None State\n\t\t\t\t1 - Heating State\n\t\t\t\t2 - Re-Cycling State\n\t\t\t\t3 - Free Cooling State\n\t\t\t\t4 - Active or Aircon Coolign State\n\t\t\t\t5 - Emergency State\n\t\t\t\t6 - Intermediate state( strategy transistion) ')
shelter1Mode = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelter1Mode.setStatus('mandatory')
if mibBuilder.loadTexts: shelter1Mode.setDescription('Shelter Run time mode in Single-Zone mode or Zone 1 Status in Dual-Zone mode respectively.\n\t\t\t\t0 - Free Cooling Mode\n\t\t\t\t1 - Standard Mode\n\t\t\t\t2 - Power Save Mode\n\t\t\t\t3 - Air conditioner Mode ')
shelter2Mode = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelter2Mode.setStatus('mandatory')
if mibBuilder.loadTexts: shelter2Mode.setDescription('Shelter Run time mode in Dual-Zone mode or Zone 2 Status. \n\t\t\t\t0 - Free Cooling Mode\n\t\t\t\t1 - Standard Mode\n\t\t\t\t2 - Power Save Mode\n\t\t\t\t3 - Air conditioner Mode ')
shelter1Setpoint = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelter1Setpoint.setStatus('mandatory')
if mibBuilder.loadTexts: shelter1Setpoint.setDescription('Shelter run time Cooling Set point in Single-Zone mode or Zone 1 Status in Dual-Zone mode respectively.\n\t\t\t\tCooling setpoint can be offset by following functions\n\t\t\t\tRH function \n\t\t\t\tNight mode\n\t\t\t\tDigital inputs ')
shelter2Setpoint = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelter2Setpoint.setStatus('mandatory')
if mibBuilder.loadTexts: shelter2Setpoint.setDescription('Shelter run time Cooling Set point in Dual-Zone mode or Zone 2 Status.\n\t\t\t\tCooling setpoint can be offset by following functions\n\t\t\t\tRH function \n\t\t\t\tNight mode\n\t\t\t\tDigital inputs ')
errorStatus = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 33554432))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: errorStatus.setDescription(' controller internal error status. Binary\n                             bit position - alarm drive state: 0 - inactive , 1 - active\n                             0 - voltage low\n                             1 - voltage high\n                             2 - tempr low     \n                             3 - tempr limit 1\n                             4 - tempr limit 2   \n                             5 - tempr limit 3   \n                             6 - humid. low\n                             7 - humid. high\n                             8 - fltr pressure 1\n                             9 - fltr pressure 2\n                             10 - fan 1\n                             11 - fan 2\n                             12 - onboard sens\n                             13 - room sens\n                             14 - hotspot sens\n                             15 - ambient 1 sens\n                             16 - ambient 2 sens\n                             17 - dig 1 i/p\n                             18 - dig 2 i/p\n                             19 - dig 3 i/p\n                             20 - filter i/p 1\n                             21 - filter i/p 2\n                             22 - network\n                             23 - int storage\n                             24 - sd card ')
maskedErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 33554432))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maskedErrorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: maskedErrorStatus.setDescription(' Controller Output Error status. Binary\n                             Bit Position - Alarm Drive State: 0 - Inactive , 1 - Active\n                             0 - Voltage Low\n                             1 - Voltage High\n                             2 - Tempr Low     \n                             3 - Tempr Limit 1\n                             4 - Tempr Limit 2   \n                             5 - Tempr Limit 3   \n                             6 - Humid. Low\n                             7 - Humid. High\n                             8 - Fltr Pressure 1\n                             9 - Fltr Pressure 2\n                             10 - Fan 1\n                             11 - Fan 2\n                             12 - Onboard Sens\n                             13 - Room Sens\n                             14 - Hotspot Sens\n                             15 - Ambient 1 Sens\n                             16 - Ambient 2 Sens\n                             17 - Dig 1 I/P\n                             18 - Dig 2 I/P\n                             19 - Dig 3 I/P\n                             20 - Filter I/P 1\n                             21 - Filter I/P 2\n                             22 - Network\n                             23 - Int storage\n                             24 - SD Card ')
voltage = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltage.setStatus('mandatory')
if mibBuilder.loadTexts: voltage.setDescription('System Voltage in DC. ')
digitalInputStatus = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInputStatus.setStatus('mandatory')
if mibBuilder.loadTexts: digitalInputStatus.setDescription(' Controller Alarm Drive Status. Binary \n                              Bit Position - Digital Input State: 0 - Inactive , 1 - Active\n                              0 - DIG 1 I/P\n                              1 - DIG 2 I/P\n                              2 - DIG 3 I/P \n                              3 - FILTER GUARD DIGI 1 I/P \n                              4 - FILTER GUARD DIGI 2 I/P  ')
alarmDriveStatus = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDriveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: alarmDriveStatus.setDescription(' Controller Alarm Drive Status. Binary\n                             Bit Position - Alarm Drive State: 0 - Inactive , 1 - Active\n                             0 - ALARM 1\n                             1 - ALARM 2\n                             2 - ALARM 3\n                             3 - ALARM 4\n                             4 - ALARM 5\n                             5 - ALARM 6\n                             6 - ALARM 7\n                             7 - ALARM 8\n                             8 - ALARM 9\n                             9 - ALARM 10')
fan1OpertdurHour = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fan1OpertdurHour.setStatus('mandatory')
if mibBuilder.loadTexts: fan1OpertdurHour.setDescription('Fan 1 operation duration - Hour ')
fan1OpertdurMin = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fan1OpertdurMin.setStatus('mandatory')
if mibBuilder.loadTexts: fan1OpertdurMin.setDescription('Fan 1 operation duration - Minute ')
fan2OpertdurHour = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fan2OpertdurHour.setStatus('mandatory')
if mibBuilder.loadTexts: fan2OpertdurHour.setDescription('Fan 2 operation duration - Hour ')
fan2OpertdurMin = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fan2OpertdurMin.setStatus('mandatory')
if mibBuilder.loadTexts: fan2OpertdurMin.setDescription('Fan 2 operation duration - Minute ')
aircon1OpertdurHour = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aircon1OpertdurHour.setStatus('mandatory')
if mibBuilder.loadTexts: aircon1OpertdurHour.setDescription('Airconditioner 1 operation duration - Hour ')
aircon1OpertdurMin = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aircon1OpertdurMin.setStatus('mandatory')
if mibBuilder.loadTexts: aircon1OpertdurMin.setDescription('Airconditioner 1 operation duration - Minute ')
aircon2OpertdurHour = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aircon2OpertdurHour.setStatus('mandatory')
if mibBuilder.loadTexts: aircon2OpertdurHour.setDescription('Airconditioner 2 operation duration - Hour ')
aircon2OpertdurMin = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aircon2OpertdurMin.setStatus('mandatory')
if mibBuilder.loadTexts: aircon2OpertdurMin.setDescription('Airconditioner 2 operation duration - Minute ')
heaterOpertdurHour = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: heaterOpertdurHour.setStatus('mandatory')
if mibBuilder.loadTexts: heaterOpertdurHour.setDescription('Heater operation duration - Hour ')
heaterOpertdurMin = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: heaterOpertdurMin.setStatus('mandatory')
if mibBuilder.loadTexts: heaterOpertdurMin.setDescription('Heater operation duration - Minute ')
ccSN = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 46), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSN.setStatus('mandatory')
if mibBuilder.loadTexts: ccSN.setDescription('CC3000 Controller serial number ')
fanbox1SN = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 47), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanbox1SN.setStatus('mandatory')
if mibBuilder.loadTexts: fanbox1SN.setDescription('Free cooling FanBox unit 1 serial number ')
fanbox2SN = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 48), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanbox2SN.setStatus('mandatory')
if mibBuilder.loadTexts: fanbox2SN.setDescription('Free cooling FanBox unit 2 serial number ')
aircond1SN = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 49), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aircond1SN.setStatus('mandatory')
if mibBuilder.loadTexts: aircond1SN.setDescription('Aicodnitioner unit 1 serial number ')
aircond2SN = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 50), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aircond2SN.setStatus('mandatory')
if mibBuilder.loadTexts: aircond2SN.setDescription('Aicodnitioner unit 2 serial number ')
fwVersion = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 1, 51), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: fwVersion.setDescription('CC3000 Firmware version ')
coolSetpointZone1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolSetpointZone1.setStatus('mandatory')
if mibBuilder.loadTexts: coolSetpointZone1.setDescription('Cooling Setpoint Zone/Shelter 1 ')
coolSetpointZone2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolSetpointZone2.setStatus('mandatory')
if mibBuilder.loadTexts: coolSetpointZone2.setDescription('Cooling Setpoint Zone/Shelter 2 ')
heaterSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: heaterSetpoint.setStatus('mandatory')
if mibBuilder.loadTexts: heaterSetpoint.setDescription('Heater Setpoint ')
backupConfig = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupConfig.setStatus('mandatory')
if mibBuilder.loadTexts: backupConfig.setDescription('Configuration Backup to Internal memory and SD card. 0 - No change, 1 - Backup ')
restoreConfig = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restoreConfig.setStatus('mandatory')
if mibBuilder.loadTexts: restoreConfig.setDescription('Configuration restore from Internal memory. 0 - No change, 1 - Restore ')
systemReset = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemReset.setStatus('mandatory')
if mibBuilder.loadTexts: systemReset.setDescription('Colling System reset or restart. 0 - No change, 1 - Restart ')
year = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2015, 2099))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: year.setStatus('mandatory')
if mibBuilder.loadTexts: year.setDescription('Calender - Year ')
month = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: month.setStatus('mandatory')
if mibBuilder.loadTexts: month.setDescription('Calender - Month ')
date = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: date.setStatus('mandatory')
if mibBuilder.loadTexts: date.setDescription('Calender - Date ')
hour = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hour.setStatus('mandatory')
if mibBuilder.loadTexts: hour.setDescription('Clock - Hour ')
minute = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minute.setStatus('mandatory')
if mibBuilder.loadTexts: minute.setDescription('Clock - Minute ')
saveReloadConff1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveReloadConff1.setStatus('mandatory')
if mibBuilder.loadTexts: saveReloadConff1.setDescription('0 - Discard modifications, 1 - Save Modifications. Configuration reloaded  ')
offTemprf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: offTemprf1.setStatus('mandatory')
if mibBuilder.loadTexts: offTemprf1.setDescription('Fan OFF temperature  ')
idleOnTemprf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleOnTemprf1.setStatus('mandatory')
if mibBuilder.loadTexts: idleOnTemprf1.setDescription('Fan Idle Speed On temperature  ')
idleEntryTemprf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleEntryTemprf1.setStatus('mandatory')
if mibBuilder.loadTexts: idleEntryTemprf1.setDescription('Idle entry temperature  ')
midPoint1Temprf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: midPoint1Temprf1.setStatus('mandatory')
if mibBuilder.loadTexts: midPoint1Temprf1.setDescription('Mid point 1 entry temperature  ')
setPointTemprf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPointTemprf1.setStatus('mandatory')
if mibBuilder.loadTexts: setPointTemprf1.setDescription('Set Point temperature  ')
midPoint2Temprf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: midPoint2Temprf1.setStatus('mandatory')
if mibBuilder.loadTexts: midPoint2Temprf1.setDescription('Mid point 2 entry temperature  ')
highSpeedTemprf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: highSpeedTemprf1.setStatus('mandatory')
if mibBuilder.loadTexts: highSpeedTemprf1.setDescription('high Speed  entry temperature  ')
extendHighSpeedEntryTemprf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendHighSpeedEntryTemprf1.setStatus('mandatory')
if mibBuilder.loadTexts: extendHighSpeedEntryTemprf1.setDescription('Extended high Speed entry temperature  ')
extendHighSpeedExitTemprf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendHighSpeedExitTemprf1.setStatus('mandatory')
if mibBuilder.loadTexts: extendHighSpeedExitTemprf1.setDescription('Extended high Speed exit temperature  ')
boostEntryTemprf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boostEntryTemprf1.setStatus('mandatory')
if mibBuilder.loadTexts: boostEntryTemprf1.setDescription('Boost Speed  entry temperature  ')
boostExitTemprf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boostExitTemprf1.setStatus('mandatory')
if mibBuilder.loadTexts: boostExitTemprf1.setDescription('Boost Speed  entry temperature  ')
idleRPMf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleRPMf1.setStatus('mandatory')
if mibBuilder.loadTexts: idleRPMf1.setDescription('Idle speed RPM  ')
midPointRPMf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: midPointRPMf1.setStatus('mandatory')
if mibBuilder.loadTexts: midPointRPMf1.setDescription('Midpoint Speed RPM  ')
highSpeedRPMf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: highSpeedRPMf1.setStatus('mandatory')
if mibBuilder.loadTexts: highSpeedRPMf1.setDescription('high Speed RPM  ')
extendHighSpeedRPMf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendHighSpeedRPMf1.setStatus('mandatory')
if mibBuilder.loadTexts: extendHighSpeedRPMf1.setDescription('Extended high Speed RPM ')
idleDutyCyclef1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleDutyCyclef1.setStatus('mandatory')
if mibBuilder.loadTexts: idleDutyCyclef1.setDescription('Idle Speed Duty Cycle  ')
midDutyCyclef1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: midDutyCyclef1.setStatus('mandatory')
if mibBuilder.loadTexts: midDutyCyclef1.setDescription('Midpoint speed Duty Cycle  ')
highSpeedDutyCyclef1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: highSpeedDutyCyclef1.setStatus('mandatory')
if mibBuilder.loadTexts: highSpeedDutyCyclef1.setDescription('high speed Duty Cycle  ')
extendHighSpeedDutyCyclef1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendHighSpeedDutyCyclef1.setStatus('mandatory')
if mibBuilder.loadTexts: extendHighSpeedDutyCyclef1.setDescription('Extended high speed Duty Cycle  ')
boostDutyCyclef1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boostDutyCyclef1.setStatus('mandatory')
if mibBuilder.loadTexts: boostDutyCyclef1.setDescription('Boost speed Duty Cycle  ')
deadBandRPMf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deadBandRPMf1.setStatus('mandatory')
if mibBuilder.loadTexts: deadBandRPMf1.setDescription('Dead band RPM  ')
overrideDigi1f1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi1f1.setStatus('mandatory')
if mibBuilder.loadTexts: overrideDigi1f1.setDescription('0-100 - Fan Speed in Duty cycle. 120 - No action on Over ride.  ')
overrideDigi2f1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi2f1.setStatus('mandatory')
if mibBuilder.loadTexts: overrideDigi2f1.setDescription('0-100 - Fan Speed in Duty cycle. 120 - No action on Over ride.  ')
overrideDigi3f1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi3f1.setStatus('mandatory')
if mibBuilder.loadTexts: overrideDigi3f1.setDescription('0-100 - Fan Speed in Duty cycle. 120 - No action on Over ride.  ')
overrideSensorfailf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideSensorfailf1.setStatus('mandatory')
if mibBuilder.loadTexts: overrideSensorfailf1.setDescription('0-100 - Fan Speed in Duty cycle. 120 - No action on Over ride.  ')
sensorSelectf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSelectf1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSelectf1.setDescription('0 - Onboard sensor. 1 - Room Sensor. 2 - Hotspot sensor. 3 - Ambient 2 sensor. 4 - Ambient 1 sensor. 5 - Shelter temperature ')
tachoPulseperrotationf1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tachoPulseperrotationf1.setStatus('mandatory')
if mibBuilder.loadTexts: tachoPulseperrotationf1.setDescription('Number of Tacho pulses per cycle rotation for given fan ')
closedLoopenablef1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: closedLoopenablef1.setStatus('mandatory')
if mibBuilder.loadTexts: closedLoopenablef1.setDescription('Closed Loop control enable or disable for given Fan. 0 - Enable. 1 - Disable  ')
controlTypef1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlTypef1.setStatus('mandatory')
if mibBuilder.loadTexts: controlTypef1.setDescription('0 - 0-10V DC control.  1 - PWM control ')
enablef1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 3, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablef1.setStatus('mandatory')
if mibBuilder.loadTexts: enablef1.setDescription(' 0 - Disable Fan control. 1 - Enabel fan control  ')
saveReloadConff2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveReloadConff2.setStatus('mandatory')
if mibBuilder.loadTexts: saveReloadConff2.setDescription('0 - Discard modifications, 1 - Save Modifications. Configuration reloaded  ')
offTemprf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: offTemprf2.setStatus('mandatory')
if mibBuilder.loadTexts: offTemprf2.setDescription('Fan OFF temperature  ')
idleOnTemprf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleOnTemprf2.setStatus('mandatory')
if mibBuilder.loadTexts: idleOnTemprf2.setDescription('Fan Idle Speed On temperature  ')
idleEntryTemprf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleEntryTemprf2.setStatus('mandatory')
if mibBuilder.loadTexts: idleEntryTemprf2.setDescription('Idle entry temperature  ')
midPoint1Temprf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: midPoint1Temprf2.setStatus('mandatory')
if mibBuilder.loadTexts: midPoint1Temprf2.setDescription('Mid point 1 entry temperature  ')
setPointTemprf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPointTemprf2.setStatus('mandatory')
if mibBuilder.loadTexts: setPointTemprf2.setDescription('Set Point temperature  ')
midPoint2Temprf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: midPoint2Temprf2.setStatus('mandatory')
if mibBuilder.loadTexts: midPoint2Temprf2.setDescription('Mid point 2 entry temperature  ')
highSpeedTemprf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: highSpeedTemprf2.setStatus('mandatory')
if mibBuilder.loadTexts: highSpeedTemprf2.setDescription('high Speed  entry temperature  ')
extendHighSpeedEntryTemprf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendHighSpeedEntryTemprf2.setStatus('mandatory')
if mibBuilder.loadTexts: extendHighSpeedEntryTemprf2.setDescription('Extended high Speed entry temperature  ')
extendHighSpeedExitTemprf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendHighSpeedExitTemprf2.setStatus('mandatory')
if mibBuilder.loadTexts: extendHighSpeedExitTemprf2.setDescription('Extended high Speed exit temperature  ')
boostEntryTemprf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boostEntryTemprf2.setStatus('mandatory')
if mibBuilder.loadTexts: boostEntryTemprf2.setDescription('Boost Speed  entry temperature  ')
boostExitTemprf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boostExitTemprf2.setStatus('mandatory')
if mibBuilder.loadTexts: boostExitTemprf2.setDescription('Boost Speed  entry temperature  ')
idleRPMf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleRPMf2.setStatus('mandatory')
if mibBuilder.loadTexts: idleRPMf2.setDescription('Idle speed RPM  ')
midPointRPMf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: midPointRPMf2.setStatus('mandatory')
if mibBuilder.loadTexts: midPointRPMf2.setDescription('Midpoint Speed RPM  ')
highSpeedRPMf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: highSpeedRPMf2.setStatus('mandatory')
if mibBuilder.loadTexts: highSpeedRPMf2.setDescription('high Speed RPM  ')
extendHighSpeedRPMf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendHighSpeedRPMf2.setStatus('mandatory')
if mibBuilder.loadTexts: extendHighSpeedRPMf2.setDescription('Extended high Speed RPM ')
idleDutyCyclef2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleDutyCyclef2.setStatus('mandatory')
if mibBuilder.loadTexts: idleDutyCyclef2.setDescription('Idle Speed Duty Cycle  ')
midDutyCyclef2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: midDutyCyclef2.setStatus('mandatory')
if mibBuilder.loadTexts: midDutyCyclef2.setDescription('Midpoint speed Duty Cycle  ')
highSpeedDutyCyclef2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: highSpeedDutyCyclef2.setStatus('mandatory')
if mibBuilder.loadTexts: highSpeedDutyCyclef2.setDescription('high speed Duty Cycle  ')
extendHighSpeedDutyCyclef2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendHighSpeedDutyCyclef2.setStatus('mandatory')
if mibBuilder.loadTexts: extendHighSpeedDutyCyclef2.setDescription('Extended high speed Duty Cycle  ')
boostDutyCyclef2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boostDutyCyclef2.setStatus('mandatory')
if mibBuilder.loadTexts: boostDutyCyclef2.setDescription('Boost speed Duty Cycle  ')
deadBandRPMf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deadBandRPMf2.setStatus('mandatory')
if mibBuilder.loadTexts: deadBandRPMf2.setDescription('Dead band RPM  ')
overrideDigi1f2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi1f2.setStatus('mandatory')
if mibBuilder.loadTexts: overrideDigi1f2.setDescription('0-100 - Fan Speed in Duty cycle. 120 - No action on Over ride.  ')
overrideDigi2f2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi2f2.setStatus('mandatory')
if mibBuilder.loadTexts: overrideDigi2f2.setDescription('0-100 - Fan Speed in Duty cycle. 120 - No action on Over ride.  ')
overrideDigi3f2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi3f2.setStatus('mandatory')
if mibBuilder.loadTexts: overrideDigi3f2.setDescription('0-100 - Fan Speed in Duty cycle. 120 - No action on Over ride.  ')
overrideSensorfailf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideSensorfailf2.setStatus('mandatory')
if mibBuilder.loadTexts: overrideSensorfailf2.setDescription('0-100 - Fan Speed in Duty cycle. 120 - No action on Over ride.  ')
sensorSelectf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSelectf2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSelectf2.setDescription('0 - Onboard sensor. 1 - Room Sensor. 2 - Hotspot sensor. 3 - Ambient 2 sensor. 4 - Ambient 1 sensor. 5 - Shelter temperature ')
tachoPulseperrotationf2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tachoPulseperrotationf2.setStatus('mandatory')
if mibBuilder.loadTexts: tachoPulseperrotationf2.setDescription('Number of Tacho pulses per cycle rotation for given fan ')
closedLoopenablef2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: closedLoopenablef2.setStatus('mandatory')
if mibBuilder.loadTexts: closedLoopenablef2.setDescription('Closed Loop control enable or disable for given Fan. 0 - Enable. 1 - Disable ')
controlTypef2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlTypef2.setStatus('mandatory')
if mibBuilder.loadTexts: controlTypef2.setDescription(' 0 - 0-10V DC control.  1 - PWM control')
enablef2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 4, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablef2.setStatus('mandatory')
if mibBuilder.loadTexts: enablef2.setDescription(' 0 - Disable Fan control. 1 - Enabel fan control  ')
saveReloadConfd1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveReloadConfd1.setStatus('mandatory')
if mibBuilder.loadTexts: saveReloadConfd1.setDescription('0 - Discard modifications, 1 - Save Modifications. Configuration reloaded  ')
lowercloseTemprd1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowercloseTemprd1.setStatus('mandatory')
if mibBuilder.loadTexts: lowercloseTemprd1.setDescription(' Damper lower closing temperature  ')
setPointd1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPointd1.setStatus('mandatory')
if mibBuilder.loadTexts: setPointd1.setDescription(' Damper opening temperature  ')
upperOpentempd1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upperOpentempd1.setStatus('mandatory')
if mibBuilder.loadTexts: upperOpentempd1.setDescription(' Damper upper opening temperature  ')
upperClosetempd1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upperClosetempd1.setStatus('mandatory')
if mibBuilder.loadTexts: upperClosetempd1.setDescription(' Damper upper closing temperature  ')
emgncyClosetempd1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emgncyClosetempd1.setStatus('mandatory')
if mibBuilder.loadTexts: emgncyClosetempd1.setDescription(' Damper emergency closing temperature  ')
emgncyopentempd1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emgncyopentempd1.setStatus('mandatory')
if mibBuilder.loadTexts: emgncyopentempd1.setDescription(' Damper emergency open temperature  ')
overrideDigi1d1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi1d1.setStatus('mandatory')
if mibBuilder.loadTexts: overrideDigi1d1.setDescription('0 - Damper close. 1 - Damper open. 120 - No action on Over ride.  ')
overrideDigi2d1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi2d1.setStatus('mandatory')
if mibBuilder.loadTexts: overrideDigi2d1.setDescription('0 - Damper close. 1 - Damper open. 120 - No action on Over ride.  ')
overrideDigi3d1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi3d1.setStatus('mandatory')
if mibBuilder.loadTexts: overrideDigi3d1.setDescription('0 - Damper close. 1 - Damper open. 120 - No action on Over ride.  ')
overrideSensorFaild1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideSensorFaild1.setStatus('mandatory')
if mibBuilder.loadTexts: overrideSensorFaild1.setDescription('0 - Damper close. 1 - Damper open. 120 - No action on Over ride.  ')
sensSelectd1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensSelectd1.setStatus('mandatory')
if mibBuilder.loadTexts: sensSelectd1.setDescription('0 - Onboard sensor. 1 - Room Sensor. 2 - Hotspot sensor. 3 - Ambient 2 sensor. 4 - Ambient 1 sensor. 5 - Shelter temperature ')
runDurationd1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: runDurationd1.setStatus('mandatory')
if mibBuilder.loadTexts: runDurationd1.setDescription('Damper Run time in minutes ')
enabled1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 5, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enabled1.setStatus('mandatory')
if mibBuilder.loadTexts: enabled1.setDescription('0 - Disable. 1 - ONOFF. 2 - Dynamic ')
saveReloadConfd2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveReloadConfd2.setStatus('mandatory')
if mibBuilder.loadTexts: saveReloadConfd2.setDescription('0 - Discard modifications, 1 - Save Modifications. Configuration reloaded  ')
lowercloseTemprd2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowercloseTemprd2.setStatus('mandatory')
if mibBuilder.loadTexts: lowercloseTemprd2.setDescription(' Damper lower closing temperature  ')
setPointd2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPointd2.setStatus('mandatory')
if mibBuilder.loadTexts: setPointd2.setDescription(' Damper opening temperature  ')
upperOpentempd2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upperOpentempd2.setStatus('mandatory')
if mibBuilder.loadTexts: upperOpentempd2.setDescription(' Damper upper opening temperature  ')
upperClosetempd2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upperClosetempd2.setStatus('mandatory')
if mibBuilder.loadTexts: upperClosetempd2.setDescription(' Damper upper closing temperature  ')
emgncyClosetempd2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emgncyClosetempd2.setStatus('mandatory')
if mibBuilder.loadTexts: emgncyClosetempd2.setDescription(' Damper emergency closing temperature  ')
emgncyopentempd2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emgncyopentempd2.setStatus('mandatory')
if mibBuilder.loadTexts: emgncyopentempd2.setDescription(' Damper emergency open temperature  ')
overrideDigi1d2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi1d2.setStatus('mandatory')
if mibBuilder.loadTexts: overrideDigi1d2.setDescription('0 - Damper close. 1 - Damper open. 120 - No action on Over ride.  ')
overrideDigi2d2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi2d2.setStatus('mandatory')
if mibBuilder.loadTexts: overrideDigi2d2.setDescription('0 - Damper close. 1 - Damper open. 120 - No action on Over ride.  ')
overrideDigi3d2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi3d2.setStatus('mandatory')
if mibBuilder.loadTexts: overrideDigi3d2.setDescription('0 - Damper close. 1 - Damper open. 120 - No action on Over ride.  ')
overrideSensorFaild2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideSensorFaild2.setStatus('mandatory')
if mibBuilder.loadTexts: overrideSensorFaild2.setDescription('0 - Damper close. 1 - Damper open. 120 - No action on Over ride.  ')
sensSelectd2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensSelectd2.setStatus('mandatory')
if mibBuilder.loadTexts: sensSelectd2.setDescription('0 - Onboard sensor. 1 - Room Sensor. 2 - Hotspot sensor. 3 - Ambient 2 sensor. 4 - Ambient 1 sensor. 5 - Shelter temperature  ')
runDurationd2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: runDurationd2.setStatus('mandatory')
if mibBuilder.loadTexts: runDurationd2.setDescription('Damper Run time in minutes ')
enabled2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 6, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enabled2.setStatus('mandatory')
if mibBuilder.loadTexts: enabled2.setDescription('0 - Disable. 1 - ONOFF. 2 - Dynamic ')
saveReloadConfac1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveReloadConfac1.setStatus('mandatory')
if mibBuilder.loadTexts: saveReloadConfac1.setDescription('0 - Discard modifications, 1 - Save Modifications. Configuration reloaded  ')
oNTemprac1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oNTemprac1.setStatus('mandatory')
if mibBuilder.loadTexts: oNTemprac1.setDescription(' Air Conditioner ON temperature  ')
oFFTemprac1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oFFTemprac1.setStatus('mandatory')
if mibBuilder.loadTexts: oFFTemprac1.setDescription(' Air Conditioner OFF temperature  ')
overrideDigi1ac1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi1ac1.setStatus('mandatory')
if mibBuilder.loadTexts: overrideDigi1ac1.setDescription('0 - AC OFF. 1 - AC ON. 120 - No action on Over ride.  ')
overrideDigi2ac1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi2ac1.setStatus('mandatory')
if mibBuilder.loadTexts: overrideDigi2ac1.setDescription('0 - AC OFF. 1 - AC ON. 120 - No action on Over ride.  ')
overrideDigi3ac1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi3ac1.setStatus('mandatory')
if mibBuilder.loadTexts: overrideDigi3ac1.setDescription('0 - AC OFF. 1 - AC ON. 120 - No action on Over ride  ')
overrideSensorFailac1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideSensorFailac1.setStatus('mandatory')
if mibBuilder.loadTexts: overrideSensorFailac1.setDescription('0 - AC OFF. 1 - AC ON. 120 - No action on Over ride  ')
sensSelectac1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 7, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensSelectac1.setStatus('mandatory')
if mibBuilder.loadTexts: sensSelectac1.setDescription('0 - Onboard sensor. 1 - Room Sensor. 2 - Hotspot sensor. 3 - Ambient 2 sensor. 4 - Ambient 1 sensor. 5 - Shelter temperature ')
minimumRunDurationac1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 7, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minimumRunDurationac1.setStatus('mandatory')
if mibBuilder.loadTexts: minimumRunDurationac1.setDescription('Minimum AC Run time in seconds ')
restartTimeoutac1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 7, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartTimeoutac1.setStatus('mandatory')
if mibBuilder.loadTexts: restartTimeoutac1.setDescription('Restart timer in seconds ')
enableac1 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 7, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableac1.setStatus('mandatory')
if mibBuilder.loadTexts: enableac1.setDescription('0 - Disable. 1 - Enable. ')
saveReloadConfac2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveReloadConfac2.setStatus('mandatory')
if mibBuilder.loadTexts: saveReloadConfac2.setDescription('0 - Discard modifications, 1 - Save Modifications. Configuration reloaded  ')
onTemprac2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onTemprac2.setStatus('mandatory')
if mibBuilder.loadTexts: onTemprac2.setDescription(' Air Conditioner ON temperature  ')
offTemprac2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: offTemprac2.setStatus('mandatory')
if mibBuilder.loadTexts: offTemprac2.setDescription(' Air Conditioner OFF temperature  ')
overrideDigi1ac2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi1ac2.setStatus('mandatory')
if mibBuilder.loadTexts: overrideDigi1ac2.setDescription('0 - AC OFF. 1 - AC ON. 120 - No action on Over ride.  ')
overrideDigi2ac2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi2ac2.setStatus('mandatory')
if mibBuilder.loadTexts: overrideDigi2ac2.setDescription('0 - AC OFF. 1 - AC ON. 120 - No action on Over ride.  ')
overrideDigi3ac2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 8, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi3ac2.setStatus('mandatory')
if mibBuilder.loadTexts: overrideDigi3ac2.setDescription('0 - AC OFF. 1 - AC ON. 120 - No action on Over ride  ')
overrideSensorFailac2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 8, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideSensorFailac2.setStatus('mandatory')
if mibBuilder.loadTexts: overrideSensorFailac2.setDescription('0 - AC OFF. 1 - AC ON. 120 - No action on Over ride  ')
sensSelectac2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 8, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensSelectac2.setStatus('mandatory')
if mibBuilder.loadTexts: sensSelectac2.setDescription('0 - Onboard sensor. 1 - Room Sensor. 2 - Hotspot sensor. 3 - Ambient 2 sensor. 4 - Ambient 1 sensor. 5 - Shelter temperature ')
minimumRunDurationac2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 8, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minimumRunDurationac2.setStatus('mandatory')
if mibBuilder.loadTexts: minimumRunDurationac2.setDescription('Minimum AC Run time in seconds ')
restartTimeoutac2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 8, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartTimeoutac2.setStatus('mandatory')
if mibBuilder.loadTexts: restartTimeoutac2.setDescription('Restart timer in seconds ')
enableac2 = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 8, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableac2.setStatus('mandatory')
if mibBuilder.loadTexts: enableac2.setDescription('0 - Disable. 1 - Enable. ')
saveReloadConfhtr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveReloadConfhtr.setStatus('mandatory')
if mibBuilder.loadTexts: saveReloadConfhtr.setDescription('0 - Discard modifications, 1 - Save Modifications. Configuration reloaded  ')
onTemprhtr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onTemprhtr.setStatus('mandatory')
if mibBuilder.loadTexts: onTemprhtr.setDescription(' Heater ON temperature  ')
offTemprhtr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-41, 101))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: offTemprhtr.setStatus('mandatory')
if mibBuilder.loadTexts: offTemprhtr.setDescription(' Heater OFF temperature  ')
overrideDigi1htr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi1htr.setStatus('mandatory')
if mibBuilder.loadTexts: overrideDigi1htr.setDescription('0 - Heat OFF. 1 - Heat ON. 120 - No action on Over ride.  ')
overrideDigi2htr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi2htr.setStatus('mandatory')
if mibBuilder.loadTexts: overrideDigi2htr.setDescription('0 - Heat OFF. 1 - Heat ON. 120 - No action on Over ride.  ')
overrideDigi3htr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideDigi3htr.setStatus('mandatory')
if mibBuilder.loadTexts: overrideDigi3htr.setDescription('0 - Heat OFF. 1 - Heat ON. 120 - No action on Over ride  ')
overrideSensorFailhtr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideSensorFailhtr.setStatus('mandatory')
if mibBuilder.loadTexts: overrideSensorFailhtr.setDescription('0 - Heat OFF. 1 - Heat ON. 120 - No action on Over ride  ')
sensSelecthtr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 9, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensSelecthtr.setStatus('mandatory')
if mibBuilder.loadTexts: sensSelecthtr.setDescription('0 - Onboard sensor. 1 - Room Sensor. 2 - Hotspot sensor. 3 - Ambient 2 sensor. 4 - Ambient 1 sensor. 5 - Shelter temperature  ')
enablehtr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 9, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablehtr.setStatus('mandatory')
if mibBuilder.loadTexts: enablehtr.setDescription('0 - Disable. 1 - Enable. ')
saveReloadConfhum = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveReloadConfhum.setStatus('mandatory')
if mibBuilder.loadTexts: saveReloadConfhum.setDescription('0 - Discard modifications, 1 - Save Modifications. Configuration reloaded  ')
rhEntryhum = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rhEntryhum.setStatus('mandatory')
if mibBuilder.loadTexts: rhEntryhum.setDescription(' Humidity function entry value  ')
rhExithum = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rhExithum.setStatus('mandatory')
if mibBuilder.loadTexts: rhExithum.setDescription(' Humidity function exit value  ')
coolingmodehum = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingmodehum.setStatus('mandatory')
if mibBuilder.loadTexts: coolingmodehum.setDescription('0 - Freecooling. 1 - Standard. 2 - Power save. 3 - Aircon.  ')
temprsetpoffsethum = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 10, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temprsetpoffsethum.setStatus('mandatory')
if mibBuilder.loadTexts: temprsetpoffsethum.setDescription(' Cooling setpoint offset  ')
rhSensPositionhum = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 10, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rhSensPositionhum.setStatus('mandatory')
if mibBuilder.loadTexts: rhSensPositionhum.setDescription('0 - Indoor. 1 - Outdoor  ')
enablehum = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablehum.setStatus('mandatory')
if mibBuilder.loadTexts: enablehum.setDescription('0 - Disable. 1 - Enable. ')
saveReloadConfsysc = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveReloadConfsysc.setStatus('mandatory')
if mibBuilder.loadTexts: saveReloadConfsysc.setDescription('0 - Discard modifications, 1 - Save Modifications. Configuration reloaded  ')
vdcLowEntrysys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(18, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vdcLowEntrysys.setStatus('mandatory')
if mibBuilder.loadTexts: vdcLowEntrysys.setDescription(' Low voltage shut down entry  ')
vdcLowExitsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(18, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vdcLowExitsys.setStatus('mandatory')
if mibBuilder.loadTexts: vdcLowExitsys.setDescription(' Low voltage shut down exit  ')
vdcHighEntrysys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(18, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vdcHighEntrysys.setStatus('mandatory')
if mibBuilder.loadTexts: vdcHighEntrysys.setDescription(' High voltage shut down entry  ')
vdcHighExitsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(18, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vdcHighExitsys.setStatus('mandatory')
if mibBuilder.loadTexts: vdcHighExitsys.setDescription(' High voltage shut down exit  ')
temprLowlimitsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temprLowlimitsys.setStatus('mandatory')
if mibBuilder.loadTexts: temprLowlimitsys.setDescription(' Low temperature alarm limit  ')
temprHighlimit1sys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temprHighlimit1sys.setStatus('mandatory')
if mibBuilder.loadTexts: temprHighlimit1sys.setDescription(' High temperature alarm limit 1  ')
temprHighlimit2sys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temprHighlimit2sys.setStatus('mandatory')
if mibBuilder.loadTexts: temprHighlimit2sys.setDescription(' High temperature alarm limit 2  ')
temprHighlimit3sys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temprHighlimit3sys.setStatus('mandatory')
if mibBuilder.loadTexts: temprHighlimit3sys.setDescription(' High temperature alarm limit 3  ')
temprlimithyssys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temprlimithyssys.setStatus('mandatory')
if mibBuilder.loadTexts: temprlimithyssys.setDescription(' Temperature alarm limit hysteresis   ')
rhLowlimitsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rhLowlimitsys.setStatus('mandatory')
if mibBuilder.loadTexts: rhLowlimitsys.setDescription(' Humidity alarm low limit %RH  ')
rhHighlimitsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rhHighlimitsys.setStatus('mandatory')
if mibBuilder.loadTexts: rhHighlimitsys.setDescription(' Humidity alarm High limit %RH  ')
flowpresslimit1sys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowpresslimit1sys.setStatus('mandatory')
if mibBuilder.loadTexts: flowpresslimit1sys.setDescription(' Flow pressure limit 1 Pa  ')
flowpresslimit2sys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowpresslimit2sys.setStatus('mandatory')
if mibBuilder.loadTexts: flowpresslimit2sys.setDescription(' Flow pressure limit 2 Pa ')
flowpresshyssys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowpresshyssys.setStatus('mandatory')
if mibBuilder.loadTexts: flowpresshyssys.setDescription(' Flow pressure limit hysteresis Pa ')
coolingzonessys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingzonessys.setStatus('mandatory')
if mibBuilder.loadTexts: coolingzonessys.setDescription(' 1 - One cooling zone, 2 - Two cooling zones  ')
coolingModesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingModesys.setStatus('mandatory')
if mibBuilder.loadTexts: coolingModesys.setDescription(' 0 - FC, 1 - Std, 2 - Ps, 3 - Acon  ')
negCoolingDeltaOverridesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: negCoolingDeltaOverridesys.setStatus('mandatory')
if mibBuilder.loadTexts: negCoolingDeltaOverridesys.setDescription(' 0 - Disable, 1 - Enable  ')
negCoolingDeltaHyssys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: negCoolingDeltaHyssys.setStatus('mandatory')
if mibBuilder.loadTexts: negCoolingDeltaHyssys.setDescription(' Negative cooling delta hysteresis  ')
coolingDeltatempsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingDeltatempsys.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeltatempsys.setDescription(' Cooling delta temperature  ')
shelterTemprsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shelterTemprsys.setStatus('mandatory')
if mibBuilder.loadTexts: shelterTemprsys.setDescription(' 0 - RA, 1 - HS, 2 - Both  ')
acleadlagsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acleadlagsys.setStatus('mandatory')
if mibBuilder.loadTexts: acleadlagsys.setDescription(' 0 - Disable, 1 - Enable ')
coolingModeXzonesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingModeXzonesys.setStatus('mandatory')
if mibBuilder.loadTexts: coolingModeXzonesys.setDescription(' 0 - FC, 1 - Std, 2 - Ps, 3 - Acon  ')
negCoolingDeltaOverrideXzonesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: negCoolingDeltaOverrideXzonesys.setStatus('mandatory')
if mibBuilder.loadTexts: negCoolingDeltaOverrideXzonesys.setDescription(' 0 - Disable, 1 - Enable  ')
negCoolingDeltaHysXzonesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: negCoolingDeltaHysXzonesys.setStatus('mandatory')
if mibBuilder.loadTexts: negCoolingDeltaHysXzonesys.setDescription(' Negative cooling delta hysteresis  ')
coolingDeltatempXzonesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingDeltatempXzonesys.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeltatempXzonesys.setDescription(' Cooling delta temperature  ')
fan1Zonesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fan1Zonesys.setStatus('mandatory')
if mibBuilder.loadTexts: fan1Zonesys.setDescription(' 1 - Fan 1 for Zone 1, 2 - Fan 1 for zone 2  ')
fan2Zonesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fan2Zonesys.setStatus('mandatory')
if mibBuilder.loadTexts: fan2Zonesys.setDescription(' 1 - Fan 2 for Zone 1, 2 - Fan 2 for zone 2  ')
ac1Zonesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ac1Zonesys.setStatus('mandatory')
if mibBuilder.loadTexts: ac1Zonesys.setDescription(' 1 - AC 1 for Zone 1, 2 - AC 1 for zone 2  ')
ac2Zonesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ac2Zonesys.setStatus('mandatory')
if mibBuilder.loadTexts: ac2Zonesys.setDescription(' 1 - AC 2 for Zone 1, 2 - AC 2 for zone 2  ')
damper1Zonesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: damper1Zonesys.setStatus('mandatory')
if mibBuilder.loadTexts: damper1Zonesys.setDescription(' 1 - Damper 1 for Zone 1, 2 - Damper 1 for zone 2  ')
damper2Zonesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: damper2Zonesys.setStatus('mandatory')
if mibBuilder.loadTexts: damper2Zonesys.setDescription(' 1 - Damper 2 for Zone 1, 2 - Damper 2 for zone 2  ')
heaterZonesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: heaterZonesys.setStatus('mandatory')
if mibBuilder.loadTexts: heaterZonesys.setDescription(' 1 - Heater for Zone 1, 2 - Heater for zone 2  ')
statusLogsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statusLogsys.setStatus('mandatory')
if mibBuilder.loadTexts: statusLogsys.setDescription(' 0 - Disable, 1 - Enable  ')
logintervalsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logintervalsys.setStatus('mandatory')
if mibBuilder.loadTexts: logintervalsys.setDescription(' Log interval in minutes  ')
alarm1NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm1NONCsys.setStatus('mandatory')
if mibBuilder.loadTexts: alarm1NONCsys.setDescription(' 0 - NO, 1 - NC  ')
alarm2NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm2NONCsys.setStatus('mandatory')
if mibBuilder.loadTexts: alarm2NONCsys.setDescription(' 0 - NO, 1 - NC  ')
alarm3NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm3NONCsys.setStatus('mandatory')
if mibBuilder.loadTexts: alarm3NONCsys.setDescription(' 0 - NO, 1 - NC  ')
alarm4NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm4NONCsys.setStatus('mandatory')
if mibBuilder.loadTexts: alarm4NONCsys.setDescription(' 0 - NO, 1 - NC  ')
alarm5NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm5NONCsys.setStatus('mandatory')
if mibBuilder.loadTexts: alarm5NONCsys.setDescription(' 0 - NO, 1 - NC  ')
alarm6NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm6NONCsys.setStatus('mandatory')
if mibBuilder.loadTexts: alarm6NONCsys.setDescription(' 0 - NO, 1 - NC  ')
alarm7NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm7NONCsys.setStatus('mandatory')
if mibBuilder.loadTexts: alarm7NONCsys.setDescription(' 0 - NO, 1 - NC  ')
alarm8NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm8NONCsys.setStatus('mandatory')
if mibBuilder.loadTexts: alarm8NONCsys.setDescription(' 0 - NO, 1 - NC  ')
alarm9NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm9NONCsys.setStatus('mandatory')
if mibBuilder.loadTexts: alarm9NONCsys.setDescription(' 0 - NO, 1 - NC  ')
alarm10NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm10NONCsys.setStatus('mandatory')
if mibBuilder.loadTexts: alarm10NONCsys.setDescription(' 0 - NO, 1 - NC  ')
alarm1Delaysys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm1Delaysys.setStatus('mandatory')
if mibBuilder.loadTexts: alarm1Delaysys.setDescription(' Alarm output delay in seconds  ')
alarm2Delaysys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm2Delaysys.setStatus('mandatory')
if mibBuilder.loadTexts: alarm2Delaysys.setDescription(' Alarm output delay in seconds  ')
alarm3Delaysys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm3Delaysys.setStatus('mandatory')
if mibBuilder.loadTexts: alarm3Delaysys.setDescription(' Alarm output delay in seconds  ')
alarm4Delaysys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm4Delaysys.setStatus('mandatory')
if mibBuilder.loadTexts: alarm4Delaysys.setDescription(' Alarm output delay in seconds  ')
alarm5Delaysys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm5Delaysys.setStatus('mandatory')
if mibBuilder.loadTexts: alarm5Delaysys.setDescription(' Alarm output delay in seconds  ')
alarm6Delaysys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm6Delaysys.setStatus('mandatory')
if mibBuilder.loadTexts: alarm6Delaysys.setDescription(' Alarm output delay in seconds  ')
alarm7Delaysys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm7Delaysys.setStatus('mandatory')
if mibBuilder.loadTexts: alarm7Delaysys.setDescription(' Alarm output delay in seconds  ')
alarm8Delaysys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm8Delaysys.setStatus('mandatory')
if mibBuilder.loadTexts: alarm8Delaysys.setDescription(' Alarm output delay in seconds  ')
alarm9Delaysys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm9Delaysys.setStatus('mandatory')
if mibBuilder.loadTexts: alarm9Delaysys.setDescription(' Alarm output delay in seconds  ')
alarm10Delaysys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm10Delaysys.setStatus('mandatory')
if mibBuilder.loadTexts: alarm10Delaysys.setDescription(' Alarm output delay in seconds  ')
ac1NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ac1NONCsys.setStatus('mandatory')
if mibBuilder.loadTexts: ac1NONCsys.setDescription(' 0 - NO, 1 - NC  ')
ac2NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ac2NONCsys.setStatus('mandatory')
if mibBuilder.loadTexts: ac2NONCsys.setDescription(' 0 - NO, 1 - NC  ')
dig1NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dig1NONCsys.setStatus('mandatory')
if mibBuilder.loadTexts: dig1NONCsys.setDescription(' 0 - NO, 1 - NC  ')
dig2NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dig2NONCsys.setStatus('mandatory')
if mibBuilder.loadTexts: dig2NONCsys.setDescription(' 0 - NO, 1 - NC  ')
dig3NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dig3NONCsys.setStatus('mandatory')
if mibBuilder.loadTexts: dig3NONCsys.setDescription(' 0 - NO, 1 - NC  ')
dig2funcoverridesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dig2funcoverridesys.setStatus('mandatory')
if mibBuilder.loadTexts: dig2funcoverridesys.setDescription(' 0 - Override, 1 - setpoint offset, 2 - mode X  ')
dig3funcoverridesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dig3funcoverridesys.setStatus('mandatory')
if mibBuilder.loadTexts: dig3funcoverridesys.setDescription(' 0 - Override, 1 - setpoint offset, 2 - mode X  ')
dig2offsetsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dig2offsetsys.setStatus('mandatory')
if mibBuilder.loadTexts: dig2offsetsys.setDescription(' Cooling setpoint offset ')
dig3offsetsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dig3offsetsys.setStatus('mandatory')
if mibBuilder.loadTexts: dig3offsetsys.setDescription(' Cooling setpoint offset ')
dig2trigModesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dig2trigModesys.setStatus('mandatory')
if mibBuilder.loadTexts: dig2trigModesys.setDescription(' 0 - FC, 1 - Std, 2 - Ps, 3 - Acon ')
dig3TrigModesys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dig3TrigModesys.setStatus('mandatory')
if mibBuilder.loadTexts: dig3TrigModesys.setDescription(' 0 - FC, 1 - Std, 2 - Ps, 3 - Acon')
filterGuard1NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterGuard1NONCsys.setStatus('mandatory')
if mibBuilder.loadTexts: filterGuard1NONCsys.setDescription(' 0 - NO, 1 - NC  ')
filterGuard2NONCsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterGuard2NONCsys.setStatus('mandatory')
if mibBuilder.loadTexts: filterGuard2NONCsys.setDescription(' 0 - NO, 1 - NC  ')
temprUnitsCFsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temprUnitsCFsys.setStatus('mandatory')
if mibBuilder.loadTexts: temprUnitsCFsys.setDescription(' 0 - Celcius, 1 - Fahrenheit  ')
languageEnglishsys = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 11, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: languageEnglishsys.setStatus('mandatory')
if mibBuilder.loadTexts: languageEnglishsys.setDescription(' 0 - Disable, 1 - Enable  ')
saveReloadConfAlm = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveReloadConfAlm.setStatus('mandatory')
if mibBuilder.loadTexts: saveReloadConfAlm.setDescription('0 - Discard modifications, 1 - Save Modifications. Alarm Mapping reloaded ')
alarm1mask = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 12, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 33554432))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm1mask.setStatus('mandatory')
if mibBuilder.loadTexts: alarm1mask.setDescription(' Alarm drive 1 Mask [Can have multiple Alarm Errors].\n                              Bit Position - Value - Alarm Drive State: 0 - Unselect, 1 - Select\n                             1 - 1 - Voltage Low\n                             2 - 2 - Voltage High\n                             3 - 4 - Tempr Low     \n                             4 - 8 - Tempr Limit 1\n                             5 - 16 - Tempr Limit 2   \n                             6 - 32 - Tempr Limit 3   \n                             7 - 64 - Humid. Low\n                             8 - 128 - Humid. High\n                             9 - 256 - Fltr Pressure 1\n                             10 - 512 - Fltr Pressure 2\n                             11 - 1024 - Fan 1\n                             12 - 2048 - Fan 2\n                             13 - 4096 - Onboard Sens\n                             14 - 8192 - Room Sens\n                             15 - 16384 - Hotspot Sens\n                             16 - 32768 - Ambient 1 Sens\n                             17 - 65536 - Ambient 2 Sens\n                             18 - 131072 - Dig 1 I/P\n                             19 - 262144 - Dig 2 I/P\n                             20 - 524288 - Dig 3 I/P\n                             21 - 1048576 - Filter I/P 1\n                             22 - 2097152 - Filter I/P 2\n                             23 - 4194304 - Network\n                             24 - 8388608 - Int storage\n                             25 - 16777216 - SD Card ')
alarm2mask = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 12, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 33554432))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm2mask.setStatus('mandatory')
if mibBuilder.loadTexts: alarm2mask.setDescription(' Alarm drive 2 Mask [Can have multiple Alarm Errors].\n                             Bit Position - Value - Alarm Drive State: 0 - Unselect, 1 - Select\n                             1 - 1 - Voltage Low\n                             2 - 2 - Voltage High\n                             3 - 4 - Tempr Low     \n                             4 - 8 - Tempr Limit 1\n                             5 - 16 - Tempr Limit 2   \n                             6 - 32 - Tempr Limit 3   \n                             7 - 64 - Humid. Low\n                             8 - 128 - Humid. High\n                             9 - 256 - Fltr Pressure 1\n                             10 - 512 - Fltr Pressure 2\n                             11 - 1024 - Fan 1\n                             12 - 2048 - Fan 2\n                             13 - 4096 - Onboard Sens\n                             14 - 8192 - Room Sens\n                             15 - 16384 - Hotspot Sens\n                             16 - 32768 - Ambient 1 Sens\n                             17 - 65536 - Ambient 2 Sens\n                             18 - 131072 - Dig 1 I/P\n                             19 - 262144 - Dig 2 I/P\n                             20 - 524288 - Dig 3 I/P\n                             21 - 1048576 - Filter I/P 1\n                             22 - 2097152 - Filter I/P 2\n                             23 - 4194304 - Network\n                             24 - 8388608 - Int storage\n                             25 - 16777216 - SD Card ')
alarm3mask = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 12, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm3mask.setStatus('mandatory')
if mibBuilder.loadTexts: alarm3mask.setDescription(' Alarm drive 3 Select [Single Alarm Error].\n                             Bit Position - Alarm Drive State: 0 - Unselect, 1-25 - Select\n                             1 - Voltage Low\n                             2 - Voltage High\n                             3 - Tempr Low     \n                             4 - Tempr Limit 1\n                             5 - Tempr Limit 2   \n                             6 - Tempr Limit 3   \n                             7 - Humid. Low\n                             8 - Humid. High\n                             9 - Fltr Pressure 1\n                             10 - Fltr Pressure 2\n                             11 - Fan 1\n                             12 - Fan 2\n                             13 - Onboard Sens\n                             14 - Room Sens\n                             15 - Hotspot Sens\n                             16 - Ambient 1 Sens\n                             17 - Ambient 2 Sens\n                             18 - Dig 1 I/P\n                             19 - Dig 2 I/P\n                             20 - Dig 3 I/P\n                             21 - Filter I/P 1\n                             22 - Filter I/P 2\n                             23 - Network\n                             24 - Int storage\n                             25 - SD Card ')
alarm4mask = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 12, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm4mask.setStatus('mandatory')
if mibBuilder.loadTexts: alarm4mask.setDescription(' Alarm drive 4 Select [Single Alarm Error].\n                            Bit Position - Alarm Drive State: 0 - Unselect, 1-25 - Select\n                             1 - Voltage Low\n                             2 - Voltage High\n                             3 - Tempr Low     \n                             4 - Tempr Limit 1\n                             5 - Tempr Limit 2   \n                             6 - Tempr Limit 3   \n                             7 - Humid. Low\n                             8 - Humid. High\n                             9 - Fltr Pressure 1\n                             10 - Fltr Pressure 2\n                             11 - Fan 1\n                             12 - Fan 2\n                             13 - Onboard Sens\n                             14 - Room Sens\n                             15 - Hotspot Sens\n                             16 - Ambient 1 Sens\n                             17 - Ambient 2 Sens\n                             18 - Dig 1 I/P\n                             19 - Dig 2 I/P\n                             20 - Dig 3 I/P\n                             21 - Filter I/P 1\n                             22 - Filter I/P 2\n                             23 - Network\n                             24 - Int storage\n                             25 - SD Card ')
alarm5mask = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 12, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm5mask.setStatus('mandatory')
if mibBuilder.loadTexts: alarm5mask.setDescription(' Alarm drive 5 Select [Single Alarm Error].\n                             Bit Position - Alarm Drive State: 0 - Unselect, 1-25 - Select\n                             1 - Voltage Low\n                             2 - Voltage High\n                             3 - Tempr Low     \n                             4 - Tempr Limit 1\n                             5 - Tempr Limit 2   \n                             6 - Tempr Limit 3   \n                             7 - Humid. Low\n                             8 - Humid. High\n                             9 - Fltr Pressure 1\n                             10 - Fltr Pressure 2\n                             11 - Fan 1\n                             12 - Fan 2\n                             13 - Onboard Sens\n                             14 - Room Sens\n                             15 - Hotspot Sens\n                             16 - Ambient 1 Sens\n                             17 - Ambient 2 Sens\n                             18 - Dig 1 I/P\n                             19 - Dig 2 I/P\n                             20 - Dig 3 I/P\n                             21 - Filter I/P 1\n                             22 - Filter I/P 2\n                             23 - Network\n                             24 - Int storage\n                             25 - SD Card ')
alarm6mask = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 12, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm6mask.setStatus('mandatory')
if mibBuilder.loadTexts: alarm6mask.setDescription(' Alarm drive 6 Select [Single Alarm Error].\n                            Bit Position - Alarm Drive State: 0 - Unselect, 1-25 - Select\n                             1 - Voltage Low\n                             2 - Voltage High\n                             3 - Tempr Low     \n                             4 - Tempr Limit 1\n                             5 - Tempr Limit 2   \n                             6 - Tempr Limit 3   \n                             7 - Humid. Low\n                             8 - Humid. High\n                             9 - Fltr Pressure 1\n                             10 - Fltr Pressure 2\n                             11 - Fan 1\n                             12 - Fan 2\n                             13 - Onboard Sens\n                             14 - Room Sens\n                             15 - Hotspot Sens\n                             16 - Ambient 1 Sens\n                             17 - Ambient 2 Sens\n                             18 - Dig 1 I/P\n                             19 - Dig 2 I/P\n                             20 - Dig 3 I/P\n                             21 - Filter I/P 1\n                             22 - Filter I/P 2\n                             23 - Network\n                             24 - Int storage\n                             25 - SD Card ')
alarm7mask = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 12, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm7mask.setStatus('mandatory')
if mibBuilder.loadTexts: alarm7mask.setDescription(' Alarm drive 7 Select [Single Alarm Error].\n                             Bit Position - Alarm Drive State: 0 - Unselect, 1-25 - Select\n                             1 - Voltage Low\n                             2 - Voltage High\n                             3 - Tempr Low     \n                             4 - Tempr Limit 1\n                             5 - Tempr Limit 2   \n                             6 - Tempr Limit 3   \n                             7 - Humid. Low\n                             8 - Humid. High\n                             9 - Fltr Pressure 1\n                             10 - Fltr Pressure 2\n                             11 - Fan 1\n                             12 - Fan 2\n                             13 - Onboard Sens\n                             14 - Room Sens\n                             15 - Hotspot Sens\n                             16 - Ambient 1 Sens\n                             17 - Ambient 2 Sens\n                             18 - Dig 1 I/P\n                             19 - Dig 2 I/P\n                             20 - Dig 3 I/P\n                             21 - Filter I/P 1\n                             22 - Filter I/P 2\n                             23 - Network\n                             24 - Int storage\n                             25 - SD Card ')
alarm8mask = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 12, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm8mask.setStatus('mandatory')
if mibBuilder.loadTexts: alarm8mask.setDescription(' Alarm drive 8 Select [Single Alarm Error].\n                             Bit Position - Alarm Drive State: 0 - Unselect, 1-25 - Select\n                             1 - Voltage Low\n                             2 - Voltage High\n                             3 - Tempr Low     \n                             4 - Tempr Limit 1\n                             5 - Tempr Limit 2   \n                             6 - Tempr Limit 3   \n                             7 - Humid. Low\n                             8 - Humid. High\n                             9 - Fltr Pressure 1\n                             10 - Fltr Pressure 2\n                             11 - Fan 1\n                             12 - Fan 2\n                             13 - Onboard Sens\n                             14 - Room Sens\n                             15 - Hotspot Sens\n                             16 - Ambient 1 Sens\n                             17 - Ambient 2 Sens\n                             18 - Dig 1 I/P\n                             19 - Dig 2 I/P\n                             20 - Dig 3 I/P\n                             21 - Filter I/P 1\n                             22 - Filter I/P 2\n                             23 - Network\n                             24 - Int storage\n                             25 - SD Card ')
alarm9mask = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 12, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm9mask.setStatus('mandatory')
if mibBuilder.loadTexts: alarm9mask.setDescription(' Alarm drive 9 Select [Single Alarm Error].\n                             Bit Position - Alarm Drive State: 0 - Unselect, 1-25 - Select\n                             1 - Voltage Low\n                             2 - Voltage High\n                             3 - Tempr Low     \n                             4 - Tempr Limit 1\n                             5 - Tempr Limit 2   \n                             6 - Tempr Limit 3   \n                             7 - Humid. Low\n                             8 - Humid. High\n                             9 - Fltr Pressure 1\n                             10 - Fltr Pressure 2\n                             11 - Fan 1\n                             12 - Fan 2\n                             13 - Onboard Sens\n                             14 - Room Sens\n                             15 - Hotspot Sens\n                             16 - Ambient 1 Sens\n                             17 - Ambient 2 Sens\n                             18 - Dig 1 I/P\n                             19 - Dig 2 I/P\n                             20 - Dig 3 I/P\n                             21 - Filter I/P 1\n                             22 - Filter I/P 2\n                             23 - Network\n                             24 - Int storage\n                             25 - SD Card ')
alarm10mask = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 12, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm10mask.setStatus('mandatory')
if mibBuilder.loadTexts: alarm10mask.setDescription(' Alarm drive 10 Select [Single Alarm Error].\n                              Bit Position - Alarm Drive State: 0 - Unselect, 1-25 - Select\n                             1 - Voltage Low\n                             2 - Voltage High\n                             3 - Tempr Low     \n                             4 - Tempr Limit 1\n                             5 - Tempr Limit 2   \n                             6 - Tempr Limit 3   \n                             7 - Humid. Low\n                             8 - Humid. High\n                             9 - Fltr Pressure 1\n                             10 - Fltr Pressure 2\n                             11 - Fan 1\n                             12 - Fan 2\n                             13 - Onboard Sens\n                             14 - Room Sens\n                             15 - Hotspot Sens\n                             16 - Ambient 1 Sens\n                             17 - Ambient 2 Sens\n                             18 - Dig 1 I/P\n                             19 - Dig 2 I/P\n                             20 - Dig 3 I/P\n                             21 - Filter I/P 1\n                             22 - Filter I/P 2\n                             23 - Network\n                             24 - Int storage\n                             25 - SD Card ')
saveReloadConfNm = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 13, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveReloadConfNm.setStatus('mandatory')
if mibBuilder.loadTexts: saveReloadConfNm.setDescription('0 - Discard modifications, 1 - Save Modifications. Configuration reloaded  ')
starttimeHournm = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starttimeHournm.setStatus('mandatory')
if mibBuilder.loadTexts: starttimeHournm.setDescription(' Night Mode Start time hour  ')
startTimeMinutesnm = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startTimeMinutesnm.setStatus('mandatory')
if mibBuilder.loadTexts: startTimeMinutesnm.setDescription(' Night Mode Start time minutes  ')
endTimeHournm = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 13, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endTimeHournm.setStatus('mandatory')
if mibBuilder.loadTexts: endTimeHournm.setDescription(' Night Mode End time hour  ')
endTimeMinutesnm = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 13, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endTimeMinutesnm.setStatus('mandatory')
if mibBuilder.loadTexts: endTimeMinutesnm.setDescription(' Night Mode End time minutes  ')
fanMaxRPMnm = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 13, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanMaxRPMnm.setStatus('mandatory')
if mibBuilder.loadTexts: fanMaxRPMnm.setDescription(' % of max fan speed ')
setPointOffsetnm = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 13, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPointOffsetnm.setStatus('mandatory')
if mibBuilder.loadTexts: setPointOffsetnm.setDescription('Cooling setpoint offset ')
coolingModenm = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 13, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingModenm.setStatus('mandatory')
if mibBuilder.loadTexts: coolingModenm.setDescription('0 - Freecooling. 1 - Standard. 2 - Power save. 3 - Aircon.  ')
enablenm = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 13, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablenm.setStatus('mandatory')
if mibBuilder.loadTexts: enablenm.setDescription('0 - Disable. 1 - Enable. ')
saveReloadConfNW = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveReloadConfNW.setStatus('mandatory')
if mibBuilder.loadTexts: saveReloadConfNW.setDescription('0 - Discard modifications, 1 - Save Modifications. Configuration reloaded  ')
dhcpenable = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpenable.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpenable.setDescription('0 - Static IP, 1 - Dynamic IP ')
ipaddr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipaddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddr.setDescription('System IP Address')
subnetmask = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetmask.setStatus('mandatory')
if mibBuilder.loadTexts: subnetmask.setDescription('Sub-net Mask  ')
gatewayIPaddr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayIPaddr.setStatus('mandatory')
if mibBuilder.loadTexts: gatewayIPaddr.setDescription('Default Gateway IP Address')
ntpIPaddr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpIPaddr.setStatus('mandatory')
if mibBuilder.loadTexts: ntpIPaddr.setDescription('DNS IP Address')
snmpPort = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPort.setStatus('mandatory')
if mibBuilder.loadTexts: snmpPort.setDescription('SNMP Agent Port')
trapServer1IPaddr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServer1IPaddr.setStatus('mandatory')
if mibBuilder.loadTexts: trapServer1IPaddr.setDescription('SNMP TRAP manager 1 IP address')
trapServer1port = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServer1port.setStatus('mandatory')
if mibBuilder.loadTexts: trapServer1port.setDescription('SNMP TRAP manager 1 Port Number')
trapServer2IPaddr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServer2IPaddr.setStatus('mandatory')
if mibBuilder.loadTexts: trapServer2IPaddr.setDescription('SNMP TRAP manager 2 IP address')
trapServer2port = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServer2port.setStatus('mandatory')
if mibBuilder.loadTexts: trapServer2port.setDescription('SNMP TRAP manager 2 Port Number')
trapServer3IPaddr = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServer3IPaddr.setStatus('mandatory')
if mibBuilder.loadTexts: trapServer3IPaddr.setDescription('SNMP TRAP manager 3 IP address')
trapServer3port = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServer3port.setStatus('mandatory')
if mibBuilder.loadTexts: trapServer3port.setDescription('SNMP TRAP manager 3 Port Number')
snmpCommunity = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: snmpCommunity.setDescription('SNMP Read/write Community string')
hostName = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 14, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostName.setStatus('mandatory')
if mibBuilder.loadTexts: hostName.setDescription('System Netwrok Host name')
errorNumber = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("VoltageLow", 1), ("VoltageHigh", 2), ("TemprLow", 3), ("TemprLimit1", 4), ("TemprLimit2", 5), ("TemprLimit3", 6), ("HumidLow", 7), ("HumidHigh", 8), ("FltrPressure1", 9), ("FltPressure2", 10), ("Fan1", 11), ("Fan2", 12), ("OnboardSens", 13), ("RoomSens", 14), ("HotspotSens", 15), ("Ambient1Sens", 16), ("Ambient2Sens", 17), ("Dig1IP", 18), ("Dig2IP", 19), ("Dig3IP", 20), ("FilterIP1", 21), ("FilterIP2", 22), ("Network", 23), ("Intstorage", 24), ("SDCard", 25))))
if mibBuilder.loadTexts: errorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: errorNumber.setDescription(' Error Number corresponding to CC3000 controller Error.')
status = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("ALARMset", 1), ("ALARMclear", 0))))
if mibBuilder.loadTexts: status.setStatus('mandatory')
if mibBuilder.loadTexts: status.setDescription(' Error Status Active/SET or Inactive/CLEAR.')
value = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 15, 3), OctetString())
if mibBuilder.loadTexts: value.setStatus('mandatory')
if mibBuilder.loadTexts: value.setDescription(' Value Corresponding to Error Occurance Instance.')
info = MibScalar((1, 3, 6, 1, 4, 1, 46651, 1, 15, 4), OctetString())
if mibBuilder.loadTexts: info.setStatus('mandatory')
if mibBuilder.loadTexts: info.setDescription(' Description of Current Error.')
cc3000Trap = NotificationType((1, 3, 6, 1, 4, 1, 46651) + (0,1)).setObjects(("DANTHERM-COOLING-MIB", "hostName"), ("DANTHERM-COOLING-MIB", "errorNumber"), ("DANTHERM-COOLING-MIB", "status"), ("DANTHERM-COOLING-MIB", "value"), ("DANTHERM-COOLING-MIB", "info"))
if mibBuilder.loadTexts: cc3000Trap.setDescription('Trap From CC300 Controller. Contains TRAP information ')
if mibBuilder.loadTexts: cc3000Trap.setReference('None')
mibBuilder.exportSymbols("DANTHERM-COOLING-MIB", saveReloadConff2=saveReloadConff2, heaterZonesys=heaterZonesys, trapError=trapError, alarm3Delaysys=alarm3Delaysys, highSpeedDutyCyclef1=highSpeedDutyCyclef1, alarm8mask=alarm8mask, dig2trigModesys=dig2trigModesys, coolSetpointZone2=coolSetpointZone2, flowPressure=flowPressure, upperClosetempd2=upperClosetempd2, backupConfig=backupConfig, overrideDigi3f2=overrideDigi3f2, temprUnitsCFsys=temprUnitsCFsys, boostExitTemprf1=boostExitTemprf1, alarm6NONCsys=alarm6NONCsys, overrideDigi2f2=overrideDigi2f2, closedLoopenablef2=closedLoopenablef2, minimumRunDurationac1=minimumRunDurationac1, damper2Zonesys=damper2Zonesys, extendHighSpeedRPMf2=extendHighSpeedRPMf2, overrideDigi2ac2=overrideDigi2ac2, endTimeMinutesnm=endTimeMinutesnm, alarm8NONCsys=alarm8NONCsys, overrideDigi1d2=overrideDigi1d2, sensSelectd1=sensSelectd1, tachoPulseperrotationf2=tachoPulseperrotationf2, enablef2=enablef2, coolSetpointZone1=coolSetpointZone1, extendHighSpeedDutyCyclef1=extendHighSpeedDutyCyclef1, vdcLowExitsys=vdcLowExitsys, overrideDigi1htr=overrideDigi1htr, errorNumber=errorNumber, maskedErrorStatus=maskedErrorStatus, overrideSensorFailac2=overrideSensorFailac2, enableac2=enableac2, temprHighlimit2sys=temprHighlimit2sys, sensSelecthtr=sensSelecthtr, starttimeHournm=starttimeHournm, errorStatus=errorStatus, onBoardTempr=onBoardTempr, fan1Status=fan1Status, flowpresslimit1sys=flowpresslimit1sys, midPoint2Temprf1=midPoint2Temprf1, alarm10Delaysys=alarm10Delaysys, boostEntryTemprf1=boostEntryTemprf1, extendHighSpeedDutyCyclef2=extendHighSpeedDutyCyclef2, temprLowlimitsys=temprLowlimitsys, humidity=humidity, saveReloadConfAlm=saveReloadConfAlm, highSpeedTemprf2=highSpeedTemprf2, sensorSelectf1=sensorSelectf1, vdcLowEntrysys=vdcLowEntrysys, fwVersion=fwVersion, fan1SpeedPercentage=fan1SpeedPercentage, hostName=hostName, fan2Status=fan2Status, coolingModeXzonesys=coolingModeXzonesys, setPointOffsetnm=setPointOffsetnm, coolingmodehum=coolingmodehum, lowercloseTemprd2=lowercloseTemprd2, offTemprhtr=offTemprhtr, highSpeedTemprf1=highSpeedTemprf1, alarm7NONCsys=alarm7NONCsys, coolingModesys=coolingModesys, alarm4mask=alarm4mask, setPointTemprf2=setPointTemprf2, overrideSensorFailhtr=overrideSensorFailhtr, extendHighSpeedEntryTemprf2=extendHighSpeedEntryTemprf2, trapServer1IPaddr=trapServer1IPaddr, fan1OpertdurMin=fan1OpertdurMin, damper2Status=damper2Status, voltage=voltage, overrideDigi1ac1=overrideDigi1ac1, damper1Zonesys=damper1Zonesys, snmpPort=snmpPort, rhEntryhum=rhEntryhum, ac1Zonesys=ac1Zonesys, overrideDigi1d1=overrideDigi1d1, overrideDigi2ac1=overrideDigi2ac1, negCoolingDeltaOverridesys=negCoolingDeltaOverridesys, ac2Zonesys=ac2Zonesys, alarm5Delaysys=alarm5Delaysys, enabled1=enabled1, overrideDigi2htr=overrideDigi2htr, alarm8Delaysys=alarm8Delaysys, humidityConfig=humidityConfig, overrideDigi3d1=overrideDigi3d1, snmpCommunity=snmpCommunity, enablehum=enablehum, saveReloadConfd1=saveReloadConfd1, emgncyopentempd1=emgncyopentempd1, idleRPMf1=idleRPMf1, overrideSensorfailf1=overrideSensorfailf1, restartTimeoutac2=restartTimeoutac2, trapServer3port=trapServer3port, extendHighSpeedExitTemprf1=extendHighSpeedExitTemprf1, alarm1Delaysys=alarm1Delaysys, deadBandRPMf2=deadBandRPMf2, aircond2Status=aircond2Status, offTemprac2=offTemprac2, damper1Position=damper1Position, temprsetpoffsethum=temprsetpoffsethum, rhLowlimitsys=rhLowlimitsys, systemStatus=systemStatus, saveReloadConfd2=saveReloadConfd2, info=info, saveReloadConfNm=saveReloadConfNm, alarm9NONCsys=alarm9NONCsys, enablef1=enablef1, boostDutyCyclef2=boostDutyCyclef2, negCoolingDeltaHyssys=negCoolingDeltaHyssys, languageEnglishsys=languageEnglishsys, trapServer2IPaddr=trapServer2IPaddr, emgncyopentempd2=emgncyopentempd2, outdoor1Tempr=outdoor1Tempr, aircon2OpertdurHour=aircon2OpertdurHour, sensSelectd2=sensSelectd2, saveReloadConfac1=saveReloadConfac1, shelter2Status=shelter2Status, alarm5mask=alarm5mask, hotSpotTempr=hotSpotTempr, deadBandRPMf1=deadBandRPMf1, dewpoint=dewpoint, rhSensPositionhum=rhSensPositionhum, fan2SpeedPercentage=fan2SpeedPercentage, shelter2Setpoint=shelter2Setpoint, onTemprhtr=onTemprhtr, controlTypef2=controlTypef2, onTemprac2=onTemprac2, trapServer2port=trapServer2port, ipaddr=ipaddr, vdcHighExitsys=vdcHighExitsys, flowpresshyssys=flowpresshyssys, saveReloadConff1=saveReloadConff1, overrideDigi2f1=overrideDigi2f1, subnetmask=subnetmask, shelterTemprsys=shelterTemprsys, dig3offsetsys=dig3offsetsys, shelter1Mode=shelter1Mode, alarmConfig=alarmConfig, endTimeHournm=endTimeHournm, runDurationd2=runDurationd2, networkConfig=networkConfig, aircon1Config=aircon1Config, alarm10NONCsys=alarm10NONCsys, midPoint2Temprf2=midPoint2Temprf2, damper1Config=damper1Config, closedLoopenablef1=closedLoopenablef1, dig3TrigModesys=dig3TrigModesys, setPointd1=setPointd1, status=status, oNTemprac1=oNTemprac1, tachoPulseperrotationf1=tachoPulseperrotationf1, aircon2Config=aircon2Config, lowercloseTemprd1=lowercloseTemprd1, acleadlagsys=acleadlagsys, dig3funcoverridesys=dig3funcoverridesys, upperOpentempd1=upperOpentempd1, idleDutyCyclef2=idleDutyCyclef2, overrideDigi2d1=overrideDigi2d1, alarm7mask=alarm7mask, shelter1Status=shelter1Status, trapServer3IPaddr=trapServer3IPaddr, hour=hour, systemReset=systemReset, dhcpenable=dhcpenable, vdcHighEntrysys=vdcHighEntrysys, nightModeConfig=nightModeConfig, boostEntryTemprf2=boostEntryTemprf2, fanbox1SN=fanbox1SN, fan2RPM=fan2RPM, alarm4NONCsys=alarm4NONCsys, rhHighlimitsys=rhHighlimitsys, sensSelectac1=sensSelectac1, offTemprf1=offTemprf1, alarm1NONCsys=alarm1NONCsys, midPoint1Temprf2=midPoint1Temprf2, highlevelControl=highlevelControl, idleRPMf2=idleRPMf2, outdoorCombinedTempr=outdoorCombinedTempr, year=year, boostExitTemprf2=boostExitTemprf2, dig2NONCsys=dig2NONCsys, statusLogsys=statusLogsys, overrideDigi3ac2=overrideDigi3ac2, roomTempr=roomTempr, aircond1Status=aircond1Status, idleDutyCyclef1=idleDutyCyclef1, overrideDigi3htr=overrideDigi3htr, sensSelectac2=sensSelectac2, coolingzonessys=coolingzonessys, shelter2Mode=shelter2Mode, overrideDigi3f1=overrideDigi3f1, alarm7Delaysys=alarm7Delaysys, enablehtr=enablehtr, restartTimeoutac1=restartTimeoutac1, alarm5NONCsys=alarm5NONCsys, restoreConfig=restoreConfig, overrideDigi1f1=overrideDigi1f1, idleEntryTemprf1=idleEntryTemprf1, minute=minute, overrideDigi3d2=overrideDigi3d2, fanMaxRPMnm=fanMaxRPMnm, overrideDigi1f2=overrideDigi1f2, damper1Status=damper1Status, overrideDigi1ac2=overrideDigi1ac2, midPointRPMf1=midPointRPMf1, negCoolingDeltaHysXzonesys=negCoolingDeltaHysXzonesys, ntpIPaddr=ntpIPaddr, enablenm=enablenm, overrideSensorfailf2=overrideSensorfailf2, damper2Config=damper2Config, month=month, dig2funcoverridesys=dig2funcoverridesys, highSpeedDutyCyclef2=highSpeedDutyCyclef2, fan2OpertdurMin=fan2OpertdurMin, midPoint1Temprf1=midPoint1Temprf1, alarm2mask=alarm2mask, heaterConfig=heaterConfig, ac1NONCsys=ac1NONCsys, overrideSensorFaild1=overrideSensorFaild1, offTemprf2=offTemprf2, midDutyCyclef2=midDutyCyclef2, ac2NONCsys=ac2NONCsys, heaterSetpoint=heaterSetpoint, enabled2=enabled2, gatewayIPaddr=gatewayIPaddr, midDutyCyclef1=midDutyCyclef1, oFFTemprac1=oFFTemprac1, setPointd2=setPointd2, upperOpentempd2=upperOpentempd2, alarm9Delaysys=alarm9Delaysys, extendHighSpeedEntryTemprf1=extendHighSpeedEntryTemprf1, idleOnTemprf2=idleOnTemprf2, filterGuard2NONCsys=filterGuard2NONCsys, coolingModenm=coolingModenm, saveReloadConfsysc=saveReloadConfsysc, controlTypef1=controlTypef1, alarm9mask=alarm9mask, shelter1Setpoint=shelter1Setpoint, rhExithum=rhExithum, idleEntryTemprf2=idleEntryTemprf2, enableac1=enableac1, alarm3mask=alarm3mask, ccSN=ccSN, flowpresslimit2sys=flowpresslimit2sys, logintervalsys=logintervalsys, midPointRPMf2=midPointRPMf2, alarm4Delaysys=alarm4Delaysys, aircond2SN=aircond2SN, filterGuard1NONCsys=filterGuard1NONCsys, saveReloadConfNW=saveReloadConfNW, overrideSensorFailac1=overrideSensorFailac1, minimumRunDurationac2=minimumRunDurationac2)
mibBuilder.exportSymbols("DANTHERM-COOLING-MIB", fan1RPM=fan1RPM, aircon1OpertdurMin=aircon1OpertdurMin, aircon1OpertdurHour=aircon1OpertdurHour, aircon2OpertdurMin=aircon2OpertdurMin, saveReloadConfhum=saveReloadConfhum, runDurationd1=runDurationd1, atmosphericPressure=atmosphericPressure, value=value, idleOnTemprf1=idleOnTemprf1, alarm1mask=alarm1mask, alarm10mask=alarm10mask, fan2Config=fan2Config, fan1Config=fan1Config, alarm2NONCsys=alarm2NONCsys, saveReloadConfac2=saveReloadConfac2, overrideDigi2d2=overrideDigi2d2, extendHighSpeedRPMf1=extendHighSpeedRPMf1, startTimeMinutesnm=startTimeMinutesnm, alarm6Delaysys=alarm6Delaysys, highSpeedRPMf1=highSpeedRPMf1, saveReloadConfhtr=saveReloadConfhtr, alarm2Delaysys=alarm2Delaysys, setPointTemprf1=setPointTemprf1, coolingDeltatempsys=coolingDeltatempsys, coolingDeltatempXzonesys=coolingDeltatempXzonesys, fan1OpertdurHour=fan1OpertdurHour, damper2Position=damper2Position, highSpeedRPMf2=highSpeedRPMf2, negCoolingDeltaOverrideXzonesys=negCoolingDeltaOverrideXzonesys, alarm3NONCsys=alarm3NONCsys, digitalInputStatus=digitalInputStatus, temprlimithyssys=temprlimithyssys, heaterStatus=heaterStatus, emgncyClosetempd1=emgncyClosetempd1, systemConfig=systemConfig, dig2offsetsys=dig2offsetsys, upperClosetempd1=upperClosetempd1, extendHighSpeedExitTemprf2=extendHighSpeedExitTemprf2, heaterOpertdurHour=heaterOpertdurHour, fan2OpertdurHour=fan2OpertdurHour, date=date, sensorSelectf2=sensorSelectf2, shelterTempr=shelterTempr, controllerCC3000=controllerCC3000, heaterOpertdurMin=heaterOpertdurMin, dig1NONCsys=dig1NONCsys, alarm6mask=alarm6mask, overrideDigi3ac1=overrideDigi3ac1, fan1Zonesys=fan1Zonesys, fan2Zonesys=fan2Zonesys, temprHighlimit1sys=temprHighlimit1sys, emgncyClosetempd2=emgncyClosetempd2, aircond1SN=aircond1SN, overrideSensorFaild2=overrideSensorFaild2, danthermCooling=danthermCooling, outdoor2Tempr=outdoor2Tempr, alarmDriveStatus=alarmDriveStatus, dig3NONCsys=dig3NONCsys, cc3000Trap=cc3000Trap, boostDutyCyclef1=boostDutyCyclef1, fanbox2SN=fanbox2SN, temprHighlimit3sys=temprHighlimit3sys, trapServer1port=trapServer1port)
