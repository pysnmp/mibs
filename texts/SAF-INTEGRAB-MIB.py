#
# PySNMP MIB module SAF-INTEGRAB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/saf/SAF-INTEGRAB-MIB
# Produced by pysmi-1.1.12 at Wed Oct  9 02:24:39 2024
# On host fv-az1144-128 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
pointToPoint, = mibBuilder.importSymbols("SAF-ENTERPRISE", "pointToPoint")
safIntegra, = mibBuilder.importSymbols("SAF-INTEGRA-MIB", "safIntegra")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
IpAddress, Unsigned32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter32, NotificationType, Integer32, ModuleIdentity, Bits, Counter64, Gauge32, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter32", "NotificationType", "Integer32", "ModuleIdentity", "Bits", "Counter64", "Gauge32", "TimeTicks", "MibIdentifier")
TextualConvention, DisplayString, DateAndTime, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime", "PhysAddress")
integraB = ModuleIdentity((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1))
integraB.setRevisions(('2015-09-17 00:00', '2015-09-15 00:00', '2015-08-12 00:00', '2015-07-20 00:00', '2015-05-20 00:00', '2015-04-14 00:00', '2015-03-24 00:00', '2015-02-10 00:00', '2015-02-04 00:00', '2015-01-12 00:00', '2015-01-08 00:00', '2015-01-06 00:00', '2014-12-18 00:00', '2014-12-12 00:00', '2014-12-10 00:00', '2014-12-09 00:00', '2014-11-22 00:00', '2014-10-29 00:00', '2014-09-04 00:00', '2014-08-01 00:00', '2014-06-11 00:00', '2014-04-16 00:00', '2014-02-12 00:00', '2014-02-11 00:00', '2014-01-30 00:00', '2014-01-29 00:00', '2013-12-18 00:00', '2013-12-09 00:00', '2013-12-05 00:00', '2013-09-27 00:00', '2013-09-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: integraB.setRevisionsDescriptions(('Conformance updated', 'Local/remote IP address, mask, gateway OIDs added', 'Syntax error fixes', 'Public Release 1.22.\n                integraBifIngressBPS, integraBifIngressPPS,\n                integraBifEgressBPS, integraBifEgressPPS value types changed', 'Public Release 1.21.\n                Radio PLL status, free physical memory, CPU idle objects added', 'Descriptions updated', 'Public Release 1.20.\n                Removed integraBifLinkUpDownTrapEnable OID', 'Public Release 1.19.\n                Ethernet QoS statistics table reworked', 'Public Release 1.18.\n                Modem RMSE value type changed', 'Small syntax fix', 'Syntax fix', 'Public Release 1.17.\n                Module name change (Integra->IntegraB)', 'Public Release 1.16.\n                Ethernet port flow control OID added', 'Public Release 1.15.\n                Ethernet statistics table updated', 'Public Release 1.14.\n                System configuration executing & storing OIDs added', 'Public Release 1.13.\n                Duplex shift and Tx mute OIDs are read-only.\n                Read-write Tx mute duration OID added.\n                Radio ranges table created', 'Public Release 1.12.\n                Radio side OID is read-only. Grammar typos fixed', 'Licence expiration OID fix', 'Public Release 1.11. Modem carrier offset OID added', 'Public Release 1.10 module name changed', 'Public Release 1.09. ifPortType syntax \n        declared by IANAifType', 'Public Release 1.08', 'Public Release 1.07 - small fixes', 'Public Release 1.07', 'Public Release 1.06\n                temperature units *10 only in description', 'Public Release 1.05', 'Public Release 1.04', 'Public Release 1.03', 'Public Release 1.02', 'Public Release 1.01', 'Public Release 1.0',))
if mibBuilder.loadTexts: integraB.setLastUpdated('201509170000Z')
if mibBuilder.loadTexts: integraB.setOrganization('SAF Tehnika')
if mibBuilder.loadTexts: integraB.setContactInfo('SAF Tehnika technical support\n                <techsupport>')
if mibBuilder.loadTexts: integraB.setDescription('SAF Integra-B device management base')
integraBtimestamp = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBtimestamp.setStatus('current')
if mibBuilder.loadTexts: integraBtimestamp.setDescription('Last data update time')
integraBradio = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 2))
integraBradioTxPower = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 2, 1), Integer32()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraBradioTxPower.setStatus('current')
if mibBuilder.loadTexts: integraBradioTxPower.setDescription('Output power of radio transmitter')
integraBradioTxFrequency = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 2, 2), Integer32()).setUnits('kHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraBradioTxFrequency.setStatus('current')
if mibBuilder.loadTexts: integraBradioTxFrequency.setDescription('Frequency of radio transmitter')
integraBradioRxLevel = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 2, 3), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBradioRxLevel.setStatus('current')
if mibBuilder.loadTexts: integraBradioRxLevel.setDescription('Level of the received signal')
integraBradioSide = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("high", 1), ("low", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBradioSide.setStatus('current')
if mibBuilder.loadTexts: integraBradioSide.setDescription('Radio side: Low/High')
integraBradioTxMute = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBradioTxMute.setStatus('current')
if mibBuilder.loadTexts: integraBradioTxMute.setDescription("Status of 'Tx mute'\n       1 - Tx is muted,\n       2 - Tx is not muted.\n                      3 - Status information unavailable")
integraBradioDuplexShift = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 2, 6), Integer32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBradioDuplexShift.setStatus('current')
if mibBuilder.loadTexts: integraBradioDuplexShift.setDescription('Utilized duplex shift in kHz')
integraBradioRxFrequency = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 2, 7), Integer32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBradioRxFrequency.setStatus('current')
if mibBuilder.loadTexts: integraBradioRxFrequency.setDescription('Frequency of radio receiver')
integraBradioTemperature = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 2, 8), Integer32()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBradioTemperature.setStatus('current')
if mibBuilder.loadTexts: integraBradioTemperature.setDescription('Radio module temperature *10 Celsius')
integraBradioTxMuteDuration = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 214748364))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraBradioTxMuteDuration.setStatus('current')
if mibBuilder.loadTexts: integraBradioTxMuteDuration.setDescription('Time remaning for Tx to be muted in seconds.\n                    To turn mute on send number of seconds between 10 and MAX.\n                    To turn mute off send 0.\n                    GET will retrieve remaining duration for mute or \n                    0 if Tx mute is turned off.')
integraBradioRangesTable = MibTable((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 2, 10), )
if mibBuilder.loadTexts: integraBradioRangesTable.setStatus('current')
if mibBuilder.loadTexts: integraBradioRangesTable.setDescription('Network interface port status data.')
integraBradioRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 2, 10, 1), ).setIndexNames((0, "SAF-INTEGRAB-MIB", "integraBradioRangeEntryIndex"))
if mibBuilder.loadTexts: integraBradioRangeEntry.setStatus('current')
if mibBuilder.loadTexts: integraBradioRangeEntry.setDescription('An entry containing network physical port status info.')
integraBradioRangeEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBradioRangeEntryIndex.setStatus('current')
if mibBuilder.loadTexts: integraBradioRangeEntryIndex.setDescription('A unique value, greater than zero, for each range \n                      entry. Starts with 1 and is equal to a number of all range \n                      parameters.')
integraBradioRangeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 2, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBradioRangeDescr.setStatus('current')
if mibBuilder.loadTexts: integraBradioRangeDescr.setDescription("'Minimal' and 'maximal' labels")
integraBradioRangeTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 2, 10, 1, 3), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBradioRangeTxPower.setStatus('current')
if mibBuilder.loadTexts: integraBradioRangeTxPower.setDescription('Output power ranges for radio transmitter')
integraBradioRangeTxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 2, 10, 1, 4), Integer32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBradioRangeTxFrequency.setStatus('current')
if mibBuilder.loadTexts: integraBradioRangeTxFrequency.setDescription('Frequency ranges for radio transmitter')
integraBradioPLL = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBradioPLL.setStatus('current')
if mibBuilder.loadTexts: integraBradioPLL.setDescription('PLL state of local-oscillator generator')
integraBmodem = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 3))
integraBmodemAcquireStatus = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("acquireInProgress", 1), ("acquireLocked", 2), ("acquireFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBmodemAcquireStatus.setStatus('current')
if mibBuilder.loadTexts: integraBmodemAcquireStatus.setDescription('This is the current status of modem data acquire\n                           when queried modem status.\n                           For detailed info use modemAcquireLastStatusDetails.')
integraBmodemRadialMse = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 3, 2), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBmodemRadialMse.setStatus('current')
if mibBuilder.loadTexts: integraBmodemRadialMse.setDescription('Current radial MSE value (floating point value multiplied by 10)')
integraBmodemFECload = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBmodemFECload.setStatus('current')
if mibBuilder.loadTexts: integraBmodemFECload.setDescription('Decoder stress or FEC load value (floating point in textual representation)')
integraBmodemAcquireLastStatusDetails = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 12, 13))).clone(namedValues=NamedValues(("acquireLocked", 1), ("acquireSweep", 4), ("acquireMSEerror", 5), ("acquireBITerror", 6), ("acquireStopped", 12), ("acquireSMerror", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBmodemAcquireLastStatusDetails.setStatus('current')
if mibBuilder.loadTexts: integraBmodemAcquireLastStatusDetails.setDescription('This is the last status of successfull or unsuccessful modem data acquire')
integraBmodemTemperature = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 3, 5), Integer32()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBmodemTemperature.setStatus('current')
if mibBuilder.loadTexts: integraBmodemTemperature.setDescription('Modem DSP temperature *10 Celsius')
integraBmodemBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 3, 6), Integer32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBmodemBandwidth.setStatus('current')
if mibBuilder.loadTexts: integraBmodemBandwidth.setDescription('Signal bandwidth')
integraBmodemModulation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBmodemModulation.setStatus('current')
if mibBuilder.loadTexts: integraBmodemModulation.setDescription('Modulation (preferred)')
integraBmodemRxModulation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 3, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBmodemRxModulation.setStatus('current')
if mibBuilder.loadTexts: integraBmodemRxModulation.setDescription('Current (actual) Rx Modulation')
integraBmodemTxModulation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 3, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBmodemTxModulation.setStatus('current')
if mibBuilder.loadTexts: integraBmodemTxModulation.setDescription('Current (actual) Tx Modulation')
integraBmodemRxCapacity = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 3, 10), Integer32()).setUnits('kb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBmodemRxCapacity.setStatus('current')
if mibBuilder.loadTexts: integraBmodemRxCapacity.setDescription('Rx ethernet capacity in kilobits per second')
integraBmodemTxCapacity = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 3, 11), Integer32()).setUnits('kb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBmodemTxCapacity.setStatus('current')
if mibBuilder.loadTexts: integraBmodemTxCapacity.setDescription('Tx ethernet capacity in kilobits per second')
integraBmodemACMengine = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBmodemACMengine.setStatus('current')
if mibBuilder.loadTexts: integraBmodemACMengine.setDescription('ACM engine status')
integraBmodemCarrierOffset = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 3, 13), Integer32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBmodemCarrierOffset.setStatus('current')
if mibBuilder.loadTexts: integraBmodemCarrierOffset.setDescription('Modem carrier offset')
integraBsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 4))
integraBsysCPUtemperature = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 4, 2), Integer32()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBsysCPUtemperature.setStatus('current')
if mibBuilder.loadTexts: integraBsysCPUtemperature.setDescription('System CPU temperature *10 Celsius')
integraBsysLicenseExpire = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 4, 3), Gauge32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBsysLicenseExpire.setStatus('current')
if mibBuilder.loadTexts: integraBsysLicenseExpire.setDescription('License expires after number of seconds. \n                           In the case of -1, check licenseGenStatus status')
integraBsysLicenseGenStatus = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("expired", 2), ("unknown", 3), ("unlimitedTime", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBsysLicenseGenStatus.setStatus('current')
if mibBuilder.loadTexts: integraBsysLicenseGenStatus.setDescription('License General status.')
integraBsysPSUvoltage = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 4, 5), Integer32()).setUnits('mV').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBsysPSUvoltage.setStatus('current')
if mibBuilder.loadTexts: integraBsysPSUvoltage.setDescription('Power voltage in mV')
integraBsysPSUcurrent = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 4, 6), Integer32()).setUnits('mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBsysPSUcurrent.setStatus('current')
if mibBuilder.loadTexts: integraBsysPSUcurrent.setDescription('Power current in mA')
integraBsysPSUpower = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 4, 7), Integer32()).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBsysPSUpower.setStatus('current')
if mibBuilder.loadTexts: integraBsysPSUpower.setDescription('Power consumption in mW')
integraBsysBoardTemperature = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 4, 8), Integer32()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBsysBoardTemperature.setStatus('current')
if mibBuilder.loadTexts: integraBsysBoardTemperature.setDescription('System temperature *10 Celsius')
integraBsysFreeMemory = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 4, 9), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBsysFreeMemory.setStatus('current')
if mibBuilder.loadTexts: integraBsysFreeMemory.setDescription('System free memory *10 %')
integraBsysCPUidle = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 4, 10), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBsysCPUidle.setStatus('current')
if mibBuilder.loadTexts: integraBsysCPUidle.setDescription('System CPU idle *10 %')
integraBethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5))
integraBifStatusTable = MibTable((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 1), )
if mibBuilder.loadTexts: integraBifStatusTable.setStatus('current')
if mibBuilder.loadTexts: integraBifStatusTable.setDescription('Network interface port status data.')
integraBifPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 1, 1), ).setIndexNames((0, "SAF-INTEGRAB-MIB", "integraBifPortStatIndex"))
if mibBuilder.loadTexts: integraBifPortEntry.setStatus('current')
if mibBuilder.loadTexts: integraBifPortEntry.setDescription('An entry containing network physical port status info.')
integraBifPortStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifPortStatIndex.setStatus('current')
if mibBuilder.loadTexts: integraBifPortStatIndex.setDescription('A unique value, greater than zero, for each physical\n                      network interface. It is recommended that\n                      values are assigned contiguously starting from 1.')
integraBifPortStatDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifPortStatDescr.setStatus('current')
if mibBuilder.loadTexts: integraBifPortStatDescr.setDescription('Physical network interface description.\n                      LAN1 is electrical, LAN2 and LAN3 are SFP\n                      and WAN is radio port.')
integraBifPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 1, 1, 3), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifPortType.setStatus('current')
if mibBuilder.loadTexts: integraBifPortType.setDescription("The type of interface, distinguished according to\n                      the physical/link protocol(s) immediately `below'\n                      the network layer in the protocol stack.")
integraBifPortMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 1, 1, 4), Integer32()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifPortMtu.setStatus('current')
if mibBuilder.loadTexts: integraBifPortMtu.setDescription('Maximum transmission unit value in bytes.')
integraBifPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 1, 1, 5), Gauge32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifPortSpeed.setStatus('current')
if mibBuilder.loadTexts: integraBifPortSpeed.setDescription('Link speed in bits per second.')
integraBifPortPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 1, 1, 6), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifPortPhysAddress.setStatus('current')
if mibBuilder.loadTexts: integraBifPortPhysAddress.setDescription("The interface's address at the protocol layer\n                      immediately `below' the network layer in the\n                      protocol stack.  For interfaces which do not have\n                      such an address (e.g., a serial line), this object\n                      should contain an octet string of zero length.")
integraBifPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: integraBifPortAdminStatus.setDescription('Desired state of network interfaces. Interfaces\n                      can be enabled(1), disabled(2), unknown(3) (no info received).')
integraBifPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: integraBifPortOperStatus.setDescription('Actual state of interfaces. Link can be up(1),\n                      down(2) or in unknown(3) state.')
integraBifPortLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifPortLastChange.setStatus('current')
if mibBuilder.loadTexts: integraBifPortLastChange.setDescription('This parameter value is always 0 at the moment.')
integraBifPortAutoneg = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifPortAutoneg.setStatus('current')
if mibBuilder.loadTexts: integraBifPortAutoneg.setDescription('Auto-negotiation status. Unknown means no info was received.')
integraBifPortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifPortDuplex.setStatus('current')
if mibBuilder.loadTexts: integraBifPortDuplex.setDescription('Duplex status for the interface.')
integraBifPortSyncEthActive = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifPortSyncEthActive.setStatus('current')
if mibBuilder.loadTexts: integraBifPortSyncEthActive.setDescription('Synchronous Ethernet status.\n                      Can be active(1) or inactive(0).')
integraBifPortSyncEthPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifPortSyncEthPrio.setStatus('current')
if mibBuilder.loadTexts: integraBifPortSyncEthPrio.setDescription('Synchronous Ethernet priority.')
integraBifPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifPortFlowControl.setStatus('current')
if mibBuilder.loadTexts: integraBifPortFlowControl.setDescription('Flow control status.')
integraBifStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2), )
if mibBuilder.loadTexts: integraBifStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: integraBifStatisticsTable.setDescription('Network interface port statistics data.')
integraBifPortStcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1), ).setIndexNames((0, "SAF-INTEGRAB-MIB", "integraBifPortStcIndex"))
if mibBuilder.loadTexts: integraBifPortStcEntry.setStatus('current')
if mibBuilder.loadTexts: integraBifPortStcEntry.setDescription('An entry containing network physical port statistics counter data.')
integraBifPortStcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifPortStcIndex.setStatus('current')
if mibBuilder.loadTexts: integraBifPortStcIndex.setDescription('A unique value, greater than zero, for each physical\n                      network interface. It is recommended that\n                      values are assigned contiguously starting from 1.')
integraBifPortStcDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifPortStcDescr.setStatus('current')
if mibBuilder.loadTexts: integraBifPortStcDescr.setDescription('Physical network interface description.\n                      LAN1 is electrical, LAN2 and LAN3 are SFP,\n                      WAN is radio port and MNG is internal management interface.')
integraBifTimePassed = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 3), TimeTicks()).setUnits('s/100').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifTimePassed.setStatus('current')
if mibBuilder.loadTexts: integraBifTimePassed.setDescription('Statistics collection time.')
integraBifIngressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 4), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifIngressPackets.setStatus('current')
if mibBuilder.loadTexts: integraBifIngressPackets.setDescription('Packets that ingress on the port.')
integraBifIngressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 5), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifIngressBytes.setStatus('current')
if mibBuilder.loadTexts: integraBifIngressBytes.setDescription('Bytes that ingress on the port.')
integraBifEgressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 6), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEgressPackets.setStatus('current')
if mibBuilder.loadTexts: integraBifEgressPackets.setDescription('Packets that egress on the port.')
integraBifEgressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 7), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEgressBytes.setStatus('current')
if mibBuilder.loadTexts: integraBifEgressBytes.setDescription('Bytes that egress on the port.')
integraBifEtherStatsMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 8), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEtherStatsMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: integraBifEtherStatsMulticastPkts.setDescription('The total number of good packets (both received and \n                     transmitted) that were directed to a multicast address.  \n                     Note that this number does not include packets directed \n                     to the broadcast address.')
integraBifEtherStatsBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 9), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEtherStatsBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: integraBifEtherStatsBroadcastPkts.setDescription('The total number of good packets (both received and \n                     transmitted) that were directed to the broadcast address.\n                     Note that this does not include multicast packets.')
integraBifEtherStatsPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 10), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEtherStatsPkts64Octets.setStatus('current')
if mibBuilder.loadTexts: integraBifEtherStatsPkts64Octets.setDescription('The total number of packets (including bad\n                     packets) (both received and transmitted)\n                     that were 64 octets in length\n                     (excluding framing bits but including FCS octets).')
integraBifEtherStatsPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 11), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEtherStatsPkts65to127Octets.setStatus('current')
if mibBuilder.loadTexts: integraBifEtherStatsPkts65to127Octets.setDescription('The total number of packets (including bad\n                     packets) (both received and transmitted)\n                     that were between 65 and 127 octets in length inclusive\n                     (excluding framing bits but including FCS octets).')
integraBifEtherStatsPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 12), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEtherStatsPkts128to255Octets.setStatus('current')
if mibBuilder.loadTexts: integraBifEtherStatsPkts128to255Octets.setDescription('The total number of packets (including bad\n                     packets) (both received and transmitted) that were\n                     between 128 and 255 octets in length inclusive\n                     (excluding framing bits but including FCS octets).')
integraBifEtherStatsPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 13), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEtherStatsPkts256to511Octets.setStatus('current')
if mibBuilder.loadTexts: integraBifEtherStatsPkts256to511Octets.setDescription('The total number of packets (including bad\n                    packets) (both received and transmitted) that were\n                    between 256 and 511 octets in length inclusive\n                    (excluding framing bits but including FCS octets).')
integraBifEtherStatsPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 14), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEtherStatsPkts512to1023Octets.setStatus('current')
if mibBuilder.loadTexts: integraBifEtherStatsPkts512to1023Octets.setDescription('The total number of packets (including bad\n                    packets) (both received and transmitted) that were\n                    between 512 and 1023 octets in length inclusive\n                    (excluding framing bits but including FCS octets).')
integraBifEtherStatsPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 15), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEtherStatsPkts1024to1518Octets.setStatus('current')
if mibBuilder.loadTexts: integraBifEtherStatsPkts1024to1518Octets.setDescription('The total number of packets (including bad\n                    packets) (both received and transmitted) that were\n                    between 1024 and 1518 octets in length inclusive\n                    (excluding framing bits but including FCS octets).')
integraBifEtherStatsOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 16), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEtherStatsOversizePkts.setStatus('current')
if mibBuilder.loadTexts: integraBifEtherStatsOversizePkts.setDescription('The number of packets (both received and \n                    transmitted) that were longer than 1518\n                    octets (excluding framing bits but including\n                    FCS octets) but were otherwise well formed.')
integraBifEtherRxOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 17), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEtherRxOversizePkts.setStatus('current')
if mibBuilder.loadTexts: integraBifEtherRxOversizePkts.setDescription('The number of packets received\n                    that were longer than 1518 octets\n                    (excluding framing bits but including\n                    FCS octets) but were otherwise well formed.')
integraBifEtherTxOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 18), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEtherTxOversizePkts.setStatus('current')
if mibBuilder.loadTexts: integraBifEtherTxOversizePkts.setDescription('The number of packets transmitted\n                    that were longer than 1518 octets\n                    (excluding framing bits but including\n                    FCS octets) but were otherwise well formed.')
integraBifEtherStatsOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 19), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEtherStatsOctets.setStatus('current')
if mibBuilder.loadTexts: integraBifEtherStatsOctets.setDescription('Total number of octets of data (including\n                    those in bad packets) both received and \n                    transmitted.')
integraBifEtherStatsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 20), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEtherStatsPkts.setStatus('current')
if mibBuilder.loadTexts: integraBifEtherStatsPkts.setDescription('Total number of packets (including bad packets)\n                    both received and transmitted.')
integraBifEtherStatsTXNoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 21), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEtherStatsTXNoErrors.setStatus('current')
if mibBuilder.loadTexts: integraBifEtherStatsTXNoErrors.setDescription('Number of packets that were transmitted\n                    without errors.')
integraBifEtherStatsRXNoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 22), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEtherStatsRXNoErrors.setStatus('current')
if mibBuilder.loadTexts: integraBifEtherStatsRXNoErrors.setDescription('Number of packets that were received\n                    without errors.')
integraBifEtherStatsPkts1519to1522Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 23), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEtherStatsPkts1519to1522Octets.setStatus('current')
if mibBuilder.loadTexts: integraBifEtherStatsPkts1519to1522Octets.setDescription('The total number of packets (including bad\n                    packets) (both received and transmitted) that were\n                    between 1519 and 1522 octets in length inclusive\n                    (excluding framing bits but including FCS octets).')
integraBifIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 24), Counter64()).setUnits('octet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifIfInOctets.setStatus('current')
if mibBuilder.loadTexts: integraBifIfInOctets.setDescription('Total number of octets of data (including\n                    those in bad packets) that were received.')
integraBifIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 25), Counter64()).setUnits('octet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifIfOutOctets.setStatus('current')
if mibBuilder.loadTexts: integraBifIfOutOctets.setDescription('Total number of octets of data (including\n                    those in bad packets) that were transmitted.')
integraBifDot1dTpPortInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 26), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifDot1dTpPortInFrames.setStatus('current')
if mibBuilder.loadTexts: integraBifDot1dTpPortInFrames.setDescription('The number of frames that have been received by\n                     this port from its segment.')
integraBifDot1dTpPortOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 27), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifDot1dTpPortOutFrames.setStatus('current')
if mibBuilder.loadTexts: integraBifDot1dTpPortOutFrames.setDescription('The number of frames that have been transmitted by\n                     this port to its segment.')
integraBifReceivedPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 28), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifReceivedPkts64Octets.setStatus('current')
if mibBuilder.loadTexts: integraBifReceivedPkts64Octets.setDescription('Total number of received packets that were\n                     64 octets in length (excluding framing bits\n                     but including FCS octets).')
integraBifTransmittedPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 29), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifTransmittedPkts64Octets.setStatus('current')
if mibBuilder.loadTexts: integraBifTransmittedPkts64Octets.setDescription('Total number of transmitted packets that were\n                     64 octets in length (excluding framing bits\n                     but including FCS octets).')
integraBifReceivedPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 30), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifReceivedPkts65to127Octets.setStatus('current')
if mibBuilder.loadTexts: integraBifReceivedPkts65to127Octets.setDescription('Total number of received packets that were\n                     between 65 and 127 octets in length inclusive\n                     (excluding framing bits but including FCS octets).')
integraBifTransmittedPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 31), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifTransmittedPkts65to127Octets.setStatus('current')
if mibBuilder.loadTexts: integraBifTransmittedPkts65to127Octets.setDescription('Total number of transmitted packets that were\n                     between 65 and 127 octets in length inclusive\n                     (excluding framing bits but including FCS octets).')
integraBifReceivedPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 32), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifReceivedPkts128to255Octets.setStatus('current')
if mibBuilder.loadTexts: integraBifReceivedPkts128to255Octets.setDescription('Total number of received packets that were\n                     between 128 and 255 octets in length inclusive\n                     (excluding framing bits but including FCS octets).')
integraBifTransmittedPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 33), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifTransmittedPkts128to255Octets.setStatus('current')
if mibBuilder.loadTexts: integraBifTransmittedPkts128to255Octets.setDescription('Total number of transmitted packets that were\n                     between 128 and 255 octets in length inclusive\n                     (excluding framing bits but including FCS octets).')
integraBifReceivedPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 34), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifReceivedPkts256to511Octets.setStatus('current')
if mibBuilder.loadTexts: integraBifReceivedPkts256to511Octets.setDescription('Total number of received packets that were\n                     between 256 and 511 octets in length inclusive\n                     (excluding framing bits but including FCS octets).')
integraBifTransmittedPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 35), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifTransmittedPkts256to511Octets.setStatus('current')
if mibBuilder.loadTexts: integraBifTransmittedPkts256to511Octets.setDescription('Total number of transmitted packets that were\n                     between 256 and 511 octets in length inclusive\n                     (excluding framing bits but including FCS octets).')
integraBifReceivedPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 36), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifReceivedPkts512to1023Octets.setStatus('current')
if mibBuilder.loadTexts: integraBifReceivedPkts512to1023Octets.setDescription('Total number of received packets that were\n                     between 512 and 1023 octets in length inclusive\n                     (excluding framing bits but including FCS octets).')
integraBifTransmittedPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 37), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifTransmittedPkts512to1023Octets.setStatus('current')
if mibBuilder.loadTexts: integraBifTransmittedPkts512to1023Octets.setDescription('Total number of transmitted packets that were\n                     between 512 and 1023 octets in length inclusive\n                     (excluding framing bits but including FCS octets).')
integraBifReceivedPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 38), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifReceivedPkts1024to1518Octets.setStatus('current')
if mibBuilder.loadTexts: integraBifReceivedPkts1024to1518Octets.setDescription('Total number of received packets that were\n                     between 1024 and 1518 octets in length inclusive\n                     (excluding framing bits but including FCS octets).')
integraBifTransmittedPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 39), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifTransmittedPkts1024to1518Octets.setStatus('current')
if mibBuilder.loadTexts: integraBifTransmittedPkts1024to1518Octets.setDescription('Total number of transmitted packets that were\n                     between 1024 and 1518 octets in length inclusive\n                     (excluding framing bits but including FCS octets).')
integraBifIfInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 40), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifIfInBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: integraBifIfInBroadcastPkts.setDescription('The total number of received good packets\n                     that were directed to the broadcast address.\n                     Note that this does not include multicast packets.')
integraBifIfOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 41), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifIfOutBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: integraBifIfOutBroadcastPkts.setDescription('The total number of transmitted good packets\n                     that were directed to the broadcast address.\n                     Note that this does not include multicast packets.')
integraBifIfInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 42), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifIfInMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: integraBifIfInMulticastPkts.setDescription('The total number of received good packets\n                     that were directed to a multicast address.  \n                     Note that this number does not include broadcast packets.')
integraBifIfOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 43), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifIfOutMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: integraBifIfOutMulticastPkts.setDescription('The total number of transmitted good packets\n                     that were directed to a multicast address.  \n                     Note that this number does not include broadcast packets.')
integraBifDot3InPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 44), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifDot3InPauseFrames.setStatus('current')
if mibBuilder.loadTexts: integraBifDot3InPauseFrames.setDescription('A count of MAC Control frames received on this\n                      interface with an opcode indicating the PAUSE\n                      operation.\n                      This counter does not increment when the\n                      interface is operating in half-duplex mode.')
integraBifDot3OutPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 45), Counter64()).setUnits('frame').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifDot3OutPauseFrames.setStatus('current')
if mibBuilder.loadTexts: integraBifDot3OutPauseFrames.setDescription('A count of MAC Control frames transmitted on\n                      this interface with an opcode indicating the\n                      PAUSE operation.\n                      This counter does not increment when the\n                      interface is operating in half-duplex mode.')
integraBifEtherStatsUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 46), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEtherStatsUndersizePkts.setStatus('current')
if mibBuilder.loadTexts: integraBifEtherStatsUndersizePkts.setDescription('The total number of packets received that were\n                      less than 64 octets long (excluding framing bits,\n                      but including FCS octets) and were otherwise well\n                      formed.')
integraBifEtherStatsFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 47), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEtherStatsFragments.setStatus('current')
if mibBuilder.loadTexts: integraBifEtherStatsFragments.setDescription('The total number of packets received that were less than\n                      64 octets in length (excluding framing bits but including\n                      FCS octets) and had either a bad Frame Check Sequence\n                      (FCS) with an integral number of octets (FCS Error) or a\n                      bad FCS with a non-integral number of octets (Alignment\n                      Error).\n                      Note that it is entirely normal for etherStatsFragments to\n                      increment.  This is because it counts both runts (which are\n                      normal occurrences due to collisions) and noise hits.')
integraBifEtherStatsCRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 48), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEtherStatsCRCAlignErrors.setStatus('current')
if mibBuilder.loadTexts: integraBifEtherStatsCRCAlignErrors.setDescription('The total number of packets received that\n                      had a length (excluding framing bits, but\n                      including FCS octets) of between 64 and 1518\n                      octets, inclusive, but had either a bad\n                      Frame Check Sequence (FCS) with an integral\n                      number of octets (FCS Error) or a bad FCS with\n                      a non-integral number of octets (Alignment Error).')
integraBifEtherStatsJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 49), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEtherStatsJabbers.setStatus('current')
if mibBuilder.loadTexts: integraBifEtherStatsJabbers.setDescription('The total number of packets received that were\n                      longer than 1518 octets (excluding framing bits,\n                      but including FCS octets), and had either a bad\n                      Frame Check Sequence (FCS) with an integral number\n                      of octets (FCS Error) or a bad FCS with a non-integral\n                      number of octets (Alignment Error).\n                      Note that this definition of jabber is different\n                      than the definition in IEEE-802.3 section 8.2.1.5\n                      (10BASE5) and section 10.3.1.4 (10BASE2).  These\n                      documents define jabber as the condition where any\n                      packet exceeds 20 ms.  The allowed range to detect\n                      jabber is between 20 ms and 150 ms.')
integraBifIngressBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 50), Integer32()).setUnits('Bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifIngressBPS.setStatus('current')
if mibBuilder.loadTexts: integraBifIngressBPS.setDescription('Ingoing data transfer rate in bytes per second.')
integraBifIngressPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 51), Integer32()).setUnits('pps').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifIngressPPS.setStatus('current')
if mibBuilder.loadTexts: integraBifIngressPPS.setDescription('Ingoing data transfer rate in packets per second.')
integraBifEgressBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 52), Integer32()).setUnits('Bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEgressBPS.setStatus('current')
if mibBuilder.loadTexts: integraBifEgressBPS.setDescription('Outgoing data transfer rate in bytes per second.')
integraBifEgressPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 53), Integer32()).setUnits('pps').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEgressPPS.setStatus('current')
if mibBuilder.loadTexts: integraBifEgressPPS.setDescription('Outgoing data transfer rate in packets per second.')
integraBifMAClearnLimitDropIngressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 54), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifMAClearnLimitDropIngressPackets.setStatus('current')
if mibBuilder.loadTexts: integraBifMAClearnLimitDropIngressPackets.setDescription('MAC learn limit drop (IngressPackets).')
integraBifL2cacheDropIngressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 55), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifL2cacheDropIngressPackets.setStatus('current')
if mibBuilder.loadTexts: integraBifL2cacheDropIngressPackets.setDescription('L2 cache drop (IngressPackets).')
integraBifEFMdropIngressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 56), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEFMdropIngressPackets.setStatus('current')
if mibBuilder.loadTexts: integraBifEFMdropIngressPackets.setDescription('EFM drop (IngressPackets).')
integraBifEFMdropEgressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 57), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifEFMdropEgressPackets.setStatus('current')
if mibBuilder.loadTexts: integraBifEFMdropEgressPackets.setDescription('EFM drop (EgressPackets).')
integraBifSTPdropIngressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 58), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifSTPdropIngressPackets.setStatus('current')
if mibBuilder.loadTexts: integraBifSTPdropIngressPackets.setDescription('STP drop (IngressPackets).')
integraBifSTPdropEgressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 59), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifSTPdropEgressPackets.setStatus('current')
if mibBuilder.loadTexts: integraBifSTPdropEgressPackets.setDescription('STP drop (EgressPackets).')
integraBifMRUdropIngressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 60), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifMRUdropIngressPackets.setStatus('current')
if mibBuilder.loadTexts: integraBifMRUdropIngressPackets.setDescription('MRU drop (IngressPackets).')
integraBifMRUdropEgressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 61), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifMRUdropEgressPackets.setStatus('current')
if mibBuilder.loadTexts: integraBifMRUdropEgressPackets.setDescription('MRU drop (EgressPackets).')
integraBifFilterDropIngressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 62), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifFilterDropIngressPackets.setStatus('current')
if mibBuilder.loadTexts: integraBifFilterDropIngressPackets.setDescription('Filter drop (IngressPackets).')
integraBifFlowClassifierDropIngressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 63), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifFlowClassifierDropIngressPackets.setStatus('current')
if mibBuilder.loadTexts: integraBifFlowClassifierDropIngressPackets.setDescription('Flow classifier drop (IngressPackets).')
integraBifFlowClassifierDropEgressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 64), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifFlowClassifierDropEgressPackets.setStatus('current')
if mibBuilder.loadTexts: integraBifFlowClassifierDropEgressPackets.setDescription('Flow classifier drop (EgressPackets).')
integraBifIllegalSAdropIngressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 65), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifIllegalSAdropIngressPackets.setStatus('current')
if mibBuilder.loadTexts: integraBifIllegalSAdropIngressPackets.setDescription('Illegal SA drop (IngressPackets).')
integraBifPortRateLimitDropIngressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 66), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifPortRateLimitDropIngressPackets.setStatus('current')
if mibBuilder.loadTexts: integraBifPortRateLimitDropIngressPackets.setDescription('Port rate limit drop (IngressPackets).')
integraBifPortRateLimitDropIngressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 67), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifPortRateLimitDropIngressBytes.setStatus('current')
if mibBuilder.loadTexts: integraBifPortRateLimitDropIngressBytes.setDescription('Port rate limit drop (IngressBytes).')
integraBifPausePFCframesGeneratedIngressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 68), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifPausePFCframesGeneratedIngressPackets.setStatus('current')
if mibBuilder.loadTexts: integraBifPausePFCframesGeneratedIngressPackets.setDescription('PAUSE/PFC frames generated (IngressPackets).')
integraBifPausePFCframesGeneratedEgressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 69), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifPausePFCframesGeneratedEgressPackets.setStatus('current')
if mibBuilder.loadTexts: integraBifPausePFCframesGeneratedEgressPackets.setDescription('PAUSE/PFC frames generated (EgressPackets).')
integraBifRateLimitDropForUnknownUnicastIngressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 70), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifRateLimitDropForUnknownUnicastIngressPackets.setStatus('current')
if mibBuilder.loadTexts: integraBifRateLimitDropForUnknownUnicastIngressPackets.setDescription('Rate limit drop for unknown unicast (IngressPackets).')
integraBifRateLimitDropForUnknownUnicastIngressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 71), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifRateLimitDropForUnknownUnicastIngressBytes.setStatus('current')
if mibBuilder.loadTexts: integraBifRateLimitDropForUnknownUnicastIngressBytes.setDescription('Rate limit drop for unknown unicast (IngressBytes).')
integraBifRateLimitDropForBroadcastIngressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 72), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifRateLimitDropForBroadcastIngressPackets.setStatus('current')
if mibBuilder.loadTexts: integraBifRateLimitDropForBroadcastIngressPackets.setDescription('Rate limit drop for broadcast (IngressPackets).')
integraBifRateLimitDropForBroadcastIngressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 73), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifRateLimitDropForBroadcastIngressBytes.setStatus('current')
if mibBuilder.loadTexts: integraBifRateLimitDropForBroadcastIngressBytes.setDescription('Rate limit drop for broadcast (IngressBytes).')
integraBifRateLimitDropForKnownMulticastIngressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 74), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifRateLimitDropForKnownMulticastIngressPackets.setStatus('current')
if mibBuilder.loadTexts: integraBifRateLimitDropForKnownMulticastIngressPackets.setDescription('Rate limit drop for known multicast (IngressPackets).')
integraBifRateLimitDropForKnownMulticastIngressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 75), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifRateLimitDropForKnownMulticastIngressBytes.setStatus('current')
if mibBuilder.loadTexts: integraBifRateLimitDropForKnownMulticastIngressBytes.setDescription('Rate limit drop for known multicast (IngressBytes).')
integraBifRateLimitDropForUnknownMulticastIngressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 76), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifRateLimitDropForUnknownMulticastIngressPackets.setStatus('current')
if mibBuilder.loadTexts: integraBifRateLimitDropForUnknownMulticastIngressPackets.setDescription('Rate limit drop for unknown multicast (IngressPackets).')
integraBifRateLimitDropForUnknownMulticastIngressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 77), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifRateLimitDropForUnknownMulticastIngressBytes.setStatus('current')
if mibBuilder.loadTexts: integraBifRateLimitDropForUnknownMulticastIngressBytes.setDescription('Rate limit drop for unknown multicast (IngressBytes).')
integraBifAllCoSQoutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 78), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifAllCoSQoutPackets.setStatus('current')
if mibBuilder.loadTexts: integraBifAllCoSQoutPackets.setDescription('All CoSQ outgoing packets.')
integraBifAllCoSQoutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 79), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifAllCoSQoutBytes.setStatus('current')
if mibBuilder.loadTexts: integraBifAllCoSQoutBytes.setDescription('All CoSQ outgoing bytes.')
integraBifAllCoSQdroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 80), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifAllCoSQdroppedPackets.setStatus('current')
if mibBuilder.loadTexts: integraBifAllCoSQdroppedPackets.setDescription('All CoSQ dropped packets.')
integraBifAllCoSQdroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 81), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifAllCoSQdroppedBytes.setStatus('current')
if mibBuilder.loadTexts: integraBifAllCoSQdroppedBytes.setDescription('All CoSQ dropped bytes.')
integraBifProcessedRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 82), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifProcessedRxPackets.setStatus('current')
if mibBuilder.loadTexts: integraBifProcessedRxPackets.setDescription('Processed received packets.')
integraBifProcessedRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 2, 1, 83), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifProcessedRxBytes.setStatus('current')
if mibBuilder.loadTexts: integraBifProcessedRxBytes.setDescription('Processed received bytes.')
integraBifQosStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3), )
if mibBuilder.loadTexts: integraBifQosStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: integraBifQosStatisticsTable.setDescription('Network interface QoS statistics counters.')
integraBifCosqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1), ).setIndexNames((0, "SAF-INTEGRAB-MIB", "integraBifCosqIfaceIndex"))
if mibBuilder.loadTexts: integraBifCosqEntry.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqEntry.setDescription('An entry containing network physical port status info.')
integraBifCosqIfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqIfaceIndex.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqIfaceIndex.setDescription('A unique value, greater than zero, for each physical\n                      network interface. It is recommended that\n                      values are assigned contiguously starting from 1.')
integraBifCosqIfaceDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqIfaceDescr.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqIfaceDescr.setDescription('Physical network interface description.\n                      LAN1 is electrical, LAN2 and LAN3 are SFP,\n                      WAN is radio port and MNG is internal management interface.')
integraBifCosqStatDroppedPacketsCoSQ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 3), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatDroppedPacketsCoSQ0.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatDroppedPacketsCoSQ0.setDescription('Dropped packets (bcmCosqStatDroppedPackets) counter\n                for CoSQ 0 for current interface.')
integraBifCosqStatDroppedBytesCoSQ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 4), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatDroppedBytesCoSQ0.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatDroppedBytesCoSQ0.setDescription('Dropped packets (bcmCosqStatDroppedPackets) counter\n                for CoSQ 0 for current interface.')
integraBifCosqStatGreenDiscardDroppedPacketsCoSQ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 5), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatGreenDiscardDroppedPacketsCoSQ0.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatGreenDiscardDroppedPacketsCoSQ0.setDescription('Discarded green packets\n                (bcmCosqStatGreenDiscardDroppedPackets)\n                counter for CoSQ 0 for current interface.')
integraBifCosqStatYellowDiscardDroppedPacketsCoSQ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 6), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatYellowDiscardDroppedPacketsCoSQ0.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatYellowDiscardDroppedPacketsCoSQ0.setDescription('Discarded yellow packets\n                (bcmCosqStatYellowDiscardDroppedPackets)\n                counter for CoSQ 0 for current interface.')
integraBifCosqStatOutPacketsCoSQ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 7), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatOutPacketsCoSQ0.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatOutPacketsCoSQ0.setDescription('Egress packets (bcmCosqStatOutPackets) counter\n              for CoSQ 0 for current interface.')
integraBifCosqStatOutBytesCoSQ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 8), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatOutBytesCoSQ0.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatOutBytesCoSQ0.setDescription('Egress bytes (bcmCosqStatOutBytes) counter\n                 for CoSQ 0 for current interface.')
integraBifCosqStatDroppedPacketsCoSQ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 9), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatDroppedPacketsCoSQ1.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatDroppedPacketsCoSQ1.setDescription('Dropped packets (bcmCosqStatDroppedPackets) counter\n                for CoSQ 1 for current interface.')
integraBifCosqStatDroppedBytesCoSQ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 10), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatDroppedBytesCoSQ1.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatDroppedBytesCoSQ1.setDescription('Dropped packets (bcmCosqStatDroppedPackets) counter\n                for CoSQ 1 for current interface.')
integraBifCosqStatGreenDiscardDroppedPacketsCoSQ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 11), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatGreenDiscardDroppedPacketsCoSQ1.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatGreenDiscardDroppedPacketsCoSQ1.setDescription('Discarded green packets\n                (bcmCosqStatGreenDiscardDroppedPackets)\n                counter for CoSQ 1 for current interface.')
integraBifCosqStatYellowDiscardDroppedPacketsCoSQ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 12), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatYellowDiscardDroppedPacketsCoSQ1.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatYellowDiscardDroppedPacketsCoSQ1.setDescription('Discarded yellow packets\n                (bcmCosqStatYellowDiscardDroppedPackets)\n                counter for CoSQ 1 for current interface.')
integraBifCosqStatOutPacketsCoSQ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 13), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatOutPacketsCoSQ1.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatOutPacketsCoSQ1.setDescription('Egress packets (bcmCosqStatOutPackets) counter\n              for CoSQ 1 for current interface.')
integraBifCosqStatOutBytesCoSQ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 14), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatOutBytesCoSQ1.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatOutBytesCoSQ1.setDescription('Egress bytes (bcmCosqStatOutBytes) counter\n                 for CoSQ 1 for current interface.')
integraBifCosqStatDroppedPacketsCoSQ2 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 15), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatDroppedPacketsCoSQ2.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatDroppedPacketsCoSQ2.setDescription('Dropped packets (bcmCosqStatDroppedPackets) counter\n                for CoSQ 2 for current interface.')
integraBifCosqStatDroppedBytesCoSQ2 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 16), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatDroppedBytesCoSQ2.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatDroppedBytesCoSQ2.setDescription('Dropped packets (bcmCosqStatDroppedPackets) counter\n                for CoSQ 2 for current interface.')
integraBifCosqStatGreenDiscardDroppedPacketsCoSQ2 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 17), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatGreenDiscardDroppedPacketsCoSQ2.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatGreenDiscardDroppedPacketsCoSQ2.setDescription('Discarded green packets\n                (bcmCosqStatGreenDiscardDroppedPackets)\n                counter for CoSQ 2 for current interface.')
integraBifCosqStatYellowDiscardDroppedPacketsCoSQ2 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 18), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatYellowDiscardDroppedPacketsCoSQ2.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatYellowDiscardDroppedPacketsCoSQ2.setDescription('Discarded yellow packets\n                (bcmCosqStatYellowDiscardDroppedPackets)\n                counter for CoSQ 2 for current interface.')
integraBifCosqStatOutPacketsCoSQ2 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 19), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatOutPacketsCoSQ2.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatOutPacketsCoSQ2.setDescription('Egress packets (bcmCosqStatOutPackets) counter\n              for CoSQ 2 for current interface.')
integraBifCosqStatOutBytesCoSQ2 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 20), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatOutBytesCoSQ2.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatOutBytesCoSQ2.setDescription('Egress bytes (bcmCosqStatOutBytes) counter\n                 for CoSQ 2 for current interface.')
integraBifCosqStatDroppedPacketsCoSQ3 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 21), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatDroppedPacketsCoSQ3.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatDroppedPacketsCoSQ3.setDescription('Dropped packets (bcmCosqStatDroppedPackets) counter\n                for CoSQ 3 for current interface.')
integraBifCosqStatDroppedBytesCoSQ3 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 22), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatDroppedBytesCoSQ3.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatDroppedBytesCoSQ3.setDescription('Dropped packets (bcmCosqStatDroppedPackets) counter\n                for CoSQ 3 for current interface.')
integraBifCosqStatGreenDiscardDroppedPacketsCoSQ3 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 23), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatGreenDiscardDroppedPacketsCoSQ3.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatGreenDiscardDroppedPacketsCoSQ3.setDescription('Discarded green packets\n                (bcmCosqStatGreenDiscardDroppedPackets)\n                counter for CoSQ 3 for current interface.')
integraBifCosqStatYellowDiscardDroppedPacketsCoSQ3 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 24), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatYellowDiscardDroppedPacketsCoSQ3.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatYellowDiscardDroppedPacketsCoSQ3.setDescription('Discarded yellow packets\n                (bcmCosqStatYellowDiscardDroppedPackets)\n                counter for CoSQ 3 for current interface.')
integraBifCosqStatOutPacketsCoSQ3 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 25), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatOutPacketsCoSQ3.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatOutPacketsCoSQ3.setDescription('Egress packets (bcmCosqStatOutPackets) counter\n              for CoSQ 3 for current interface.')
integraBifCosqStatOutBytesCoSQ3 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 26), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatOutBytesCoSQ3.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatOutBytesCoSQ3.setDescription('Egress bytes (bcmCosqStatOutBytes) counter\n                 for CoSQ 3 for current interface.')
integraBifCosqStatDroppedPacketsCoSQ4 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 27), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatDroppedPacketsCoSQ4.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatDroppedPacketsCoSQ4.setDescription('Dropped packets (bcmCosqStatDroppedPackets) counter\n                for CoSQ 4 for current interface.')
integraBifCosqStatDroppedBytesCoSQ4 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 28), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatDroppedBytesCoSQ4.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatDroppedBytesCoSQ4.setDescription('Dropped packets (bcmCosqStatDroppedPackets) counter\n                for CoSQ 4 for current interface.')
integraBifCosqStatGreenDiscardDroppedPacketsCoSQ4 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 29), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatGreenDiscardDroppedPacketsCoSQ4.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatGreenDiscardDroppedPacketsCoSQ4.setDescription('Discarded green packets\n                (bcmCosqStatGreenDiscardDroppedPackets)\n                counter for CoSQ 4 for current interface.')
integraBifCosqStatYellowDiscardDroppedPacketsCoSQ4 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 30), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatYellowDiscardDroppedPacketsCoSQ4.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatYellowDiscardDroppedPacketsCoSQ4.setDescription('Discarded yellow packets\n                (bcmCosqStatYellowDiscardDroppedPackets)\n                counter for CoSQ 4 for current interface.')
integraBifCosqStatOutPacketsCoSQ4 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 31), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatOutPacketsCoSQ4.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatOutPacketsCoSQ4.setDescription('Egress packets (bcmCosqStatOutPackets) counter\n              for CoSQ 4 for current interface.')
integraBifCosqStatOutBytesCoSQ4 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 32), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatOutBytesCoSQ4.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatOutBytesCoSQ4.setDescription('Egress bytes (bcmCosqStatOutBytes) counter\n                 for CoSQ 4 for current interface.')
integraBifCosqStatDroppedPacketsCoSQ5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 33), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatDroppedPacketsCoSQ5.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatDroppedPacketsCoSQ5.setDescription('Dropped packets (bcmCosqStatDroppedPackets) counter\n                for CoSQ 5 for current interface.')
integraBifCosqStatDroppedBytesCoSQ5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 34), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatDroppedBytesCoSQ5.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatDroppedBytesCoSQ5.setDescription('Dropped packets (bcmCosqStatDroppedPackets) counter\n                for CoSQ 5 for current interface.')
integraBifCosqStatGreenDiscardDroppedPacketsCoSQ5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 35), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatGreenDiscardDroppedPacketsCoSQ5.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatGreenDiscardDroppedPacketsCoSQ5.setDescription('Discarded green packets\n                (bcmCosqStatGreenDiscardDroppedPackets)\n                counter for CoSQ 5 for current interface.')
integraBifCosqStatYellowDiscardDroppedPacketsCoSQ5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 36), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatYellowDiscardDroppedPacketsCoSQ5.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatYellowDiscardDroppedPacketsCoSQ5.setDescription('Discarded yellow packets\n                (bcmCosqStatYellowDiscardDroppedPackets)\n                counter for CoSQ 5 for current interface.')
integraBifCosqStatOutPacketsCoSQ5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 37), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatOutPacketsCoSQ5.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatOutPacketsCoSQ5.setDescription('Egress packets (bcmCosqStatOutPackets) counter\n              for CoSQ 5 for current interface.')
integraBifCosqStatOutBytesCoSQ5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 38), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatOutBytesCoSQ5.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatOutBytesCoSQ5.setDescription('Egress bytes (bcmCosqStatOutBytes) counter\n                 for CoSQ 5 for current interface.')
integraBifCosqStatDroppedPacketsCoSQ6 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 39), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatDroppedPacketsCoSQ6.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatDroppedPacketsCoSQ6.setDescription('Dropped packets (bcmCosqStatDroppedPackets) counter\n                for CoSQ 6 for current interface.')
integraBifCosqStatDroppedBytesCoSQ6 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 40), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatDroppedBytesCoSQ6.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatDroppedBytesCoSQ6.setDescription('Dropped packets (bcmCosqStatDroppedPackets) counter\n                for CoSQ 6 for current interface.')
integraBifCosqStatGreenDiscardDroppedPacketsCoSQ6 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 41), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatGreenDiscardDroppedPacketsCoSQ6.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatGreenDiscardDroppedPacketsCoSQ6.setDescription('Discarded green packets\n                (bcmCosqStatGreenDiscardDroppedPackets)\n                counter for CoSQ 6 for current interface.')
integraBifCosqStatYellowDiscardDroppedPacketsCoSQ6 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 42), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatYellowDiscardDroppedPacketsCoSQ6.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatYellowDiscardDroppedPacketsCoSQ6.setDescription('Discarded yellow packets\n                (bcmCosqStatYellowDiscardDroppedPackets)\n                counter for CoSQ 6 for current interface.')
integraBifCosqStatOutPacketsCoSQ6 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 43), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatOutPacketsCoSQ6.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatOutPacketsCoSQ6.setDescription('Egress packets (bcmCosqStatOutPackets) counter\n              for CoSQ 6 for current interface.')
integraBifCosqStatOutBytesCoSQ6 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 44), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatOutBytesCoSQ6.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatOutBytesCoSQ6.setDescription('Egress bytes (bcmCosqStatOutBytes) counter\n                 for CoSQ 6 for current interface.')
integraBifCosqStatDroppedPacketsCoSQ7 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 45), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatDroppedPacketsCoSQ7.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatDroppedPacketsCoSQ7.setDescription('Dropped packets (bcmCosqStatDroppedPackets) counter\n                for CoSQ 7 for current interface.')
integraBifCosqStatDroppedBytesCoSQ7 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 46), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatDroppedBytesCoSQ7.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatDroppedBytesCoSQ7.setDescription('Dropped packets (bcmCosqStatDroppedPackets) counter\n                for CoSQ 7 for current interface.')
integraBifCosqStatGreenDiscardDroppedPacketsCoSQ7 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 47), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatGreenDiscardDroppedPacketsCoSQ7.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatGreenDiscardDroppedPacketsCoSQ7.setDescription('Discarded green packets\n                (bcmCosqStatGreenDiscardDroppedPackets)\n                counter for CoSQ 7 for current interface.')
integraBifCosqStatYellowDiscardDroppedPacketsCoSQ7 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 48), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatYellowDiscardDroppedPacketsCoSQ7.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatYellowDiscardDroppedPacketsCoSQ7.setDescription('Discarded yellow packets\n                (bcmCosqStatYellowDiscardDroppedPackets)\n                counter for CoSQ 7 for current interface.')
integraBifCosqStatOutPacketsCoSQ7 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 49), Counter64()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatOutPacketsCoSQ7.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatOutPacketsCoSQ7.setDescription('Egress packets (bcmCosqStatOutPackets) counter\n              for CoSQ 7 for current interface.')
integraBifCosqStatOutBytesCoSQ7 = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 5, 3, 1, 50), Counter64()).setUnits('B').setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBifCosqStatOutBytesCoSQ7.setStatus('current')
if mibBuilder.loadTexts: integraBifCosqStatOutBytesCoSQ7.setDescription('Egress bytes (bcmCosqStatOutBytes) counter\n                 for CoSQ 7 for current interface.')
integraBexecuteConfig = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraBexecuteConfig.setStatus('current')
if mibBuilder.loadTexts: integraBexecuteConfig.setDescription('This object can only be set to 1.\n                           It initiates new running configuration \n                           applying using values, that have been set before.\n                           Setting it when no new changes are available\n                           will do nothing and return an error.\n                           GET will return 0 if there were no errors,\n                           while executing configuration or will return\n                           a bitmask, that shows which SET requests have failed.\n                           Those failed requests will be shown bit wise\n                           from LSB as follows:\n                           BIT0 radioTxMuteDuration\n                           BIT1 radioTxFrequency\n                           BIT2 radioTxPower')
integraBneedStore = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBneedStore.setStatus('current')
if mibBuilder.loadTexts: integraBneedStore.setDescription('This object shows if there is unsaved,\n                           but executed (running) configuration.\n                           Unsaved changes will be lost after\n                           device reboot. Unsaved entities are shown\n                           bit wise, starting from LSB as follows:\n                           BIT0 Aggregation\n                           BIT1 Event log\n                           BIT2 Modem\n                           BIT3 Network\n                           BIT4 Performance\n                           BIT5 Radio\n                           BIT6 SNMP\n                           BIT7 Synchronous Ethernet\n                           BIT8 System')
integraBstoreConfig = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("store", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraBstoreConfig.setStatus('current')
if mibBuilder.loadTexts: integraBstoreConfig.setDescription('This object can only be set to 1.\n                           It initiates saving of running configuration.\n                           It will only work if there are unsaved,\n                           but executed (running) changes (configuration).\n                           Setting it when no new running configuration\n                           is available will do nothing and return an error.')
integraBnetCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 9))
integraBnetCfgIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 9, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraBnetCfgIPaddress.setStatus('current')
if mibBuilder.loadTexts: integraBnetCfgIPaddress.setDescription('Local IP address')
integraBnetCfgIPmask = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 9, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraBnetCfgIPmask.setStatus('current')
if mibBuilder.loadTexts: integraBnetCfgIPmask.setDescription('Local IP mask')
integraBnetCfgIPgateway = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 9, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: integraBnetCfgIPgateway.setStatus('current')
if mibBuilder.loadTexts: integraBnetCfgIPgateway.setDescription("IP gateway\n                          Send '0' or '255.255.255.255' to clear.")
integraBnetCfgRemoteIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 9, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: integraBnetCfgRemoteIPaddress.setStatus('current')
if mibBuilder.loadTexts: integraBnetCfgRemoteIPaddress.setDescription('Remote IP address')
integraBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 10))
integraBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 10, 1))
integraBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 10, 1, 1)).setObjects(("SAF-INTEGRAB-MIB", "integraBMiscGroup"), ("SAF-INTEGRAB-MIB", "integraBRadioGroup"), ("SAF-INTEGRAB-MIB", "integraBModemGroup"), ("SAF-INTEGRAB-MIB", "integraBSystemGroup"), ("SAF-INTEGRAB-MIB", "integraBEthernetGeneralGroup"), ("SAF-INTEGRAB-MIB", "integraBEthernetMiiPortGroup"), ("SAF-INTEGRAB-MIB", "integraBEthernetQosQueueGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraBCompliance = integraBCompliance.setStatus('current')
if mibBuilder.loadTexts: integraBCompliance.setDescription('The compliance statement for SNMP engine which\n                 implements the SAF Tehnika Integra-B device.')
integraBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 10, 2))
integraBMiscGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 10, 2, 1)).setObjects(("SAF-INTEGRAB-MIB", "integraBtimestamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraBMiscGroup = integraBMiscGroup.setStatus('current')
if mibBuilder.loadTexts: integraBMiscGroup.setDescription('misc data')
integraBRadioGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 10, 2, 2)).setObjects(("SAF-INTEGRAB-MIB", "integraBradioTxPower"), ("SAF-INTEGRAB-MIB", "integraBradioTxFrequency"), ("SAF-INTEGRAB-MIB", "integraBradioRxLevel"), ("SAF-INTEGRAB-MIB", "integraBradioSide"), ("SAF-INTEGRAB-MIB", "integraBradioTxMute"), ("SAF-INTEGRAB-MIB", "integraBradioDuplexShift"), ("SAF-INTEGRAB-MIB", "integraBradioRxFrequency"), ("SAF-INTEGRAB-MIB", "integraBradioTemperature"), ("SAF-INTEGRAB-MIB", "integraBradioTxMuteDuration"), ("SAF-INTEGRAB-MIB", "integraBradioRangeEntryIndex"), ("SAF-INTEGRAB-MIB", "integraBradioRangeDescr"), ("SAF-INTEGRAB-MIB", "integraBradioRangeTxPower"), ("SAF-INTEGRAB-MIB", "integraBradioRangeTxFrequency"), ("SAF-INTEGRAB-MIB", "integraBradioPLL"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraBRadioGroup = integraBRadioGroup.setStatus('current')
if mibBuilder.loadTexts: integraBRadioGroup.setDescription('Radio group.')
integraBModemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 10, 2, 3)).setObjects(("SAF-INTEGRAB-MIB", "integraBmodemAcquireStatus"), ("SAF-INTEGRAB-MIB", "integraBmodemRadialMse"), ("SAF-INTEGRAB-MIB", "integraBmodemFECload"), ("SAF-INTEGRAB-MIB", "integraBmodemAcquireLastStatusDetails"), ("SAF-INTEGRAB-MIB", "integraBmodemTemperature"), ("SAF-INTEGRAB-MIB", "integraBmodemBandwidth"), ("SAF-INTEGRAB-MIB", "integraBmodemModulation"), ("SAF-INTEGRAB-MIB", "integraBmodemRxModulation"), ("SAF-INTEGRAB-MIB", "integraBmodemTxModulation"), ("SAF-INTEGRAB-MIB", "integraBmodemRxCapacity"), ("SAF-INTEGRAB-MIB", "integraBmodemTxCapacity"), ("SAF-INTEGRAB-MIB", "integraBmodemACMengine"), ("SAF-INTEGRAB-MIB", "integraBmodemCarrierOffset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraBModemGroup = integraBModemGroup.setStatus('current')
if mibBuilder.loadTexts: integraBModemGroup.setDescription('Modem group.')
integraBSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 10, 2, 4)).setObjects(("SAF-INTEGRAB-MIB", "integraBsysCPUtemperature"), ("SAF-INTEGRAB-MIB", "integraBsysLicenseExpire"), ("SAF-INTEGRAB-MIB", "integraBsysLicenseGenStatus"), ("SAF-INTEGRAB-MIB", "integraBsysPSUvoltage"), ("SAF-INTEGRAB-MIB", "integraBsysPSUcurrent"), ("SAF-INTEGRAB-MIB", "integraBsysPSUpower"), ("SAF-INTEGRAB-MIB", "integraBsysBoardTemperature"), ("SAF-INTEGRAB-MIB", "integraBsysFreeMemory"), ("SAF-INTEGRAB-MIB", "integraBsysCPUidle"), ("SAF-INTEGRAB-MIB", "integraBexecuteConfig"), ("SAF-INTEGRAB-MIB", "integraBneedStore"), ("SAF-INTEGRAB-MIB", "integraBstoreConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraBSystemGroup = integraBSystemGroup.setStatus('current')
if mibBuilder.loadTexts: integraBSystemGroup.setDescription('System group.')
integraBEthernetGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 10, 2, 5)).setObjects(("SAF-INTEGRAB-MIB", "integraBifPortStatIndex"), ("SAF-INTEGRAB-MIB", "integraBifPortStatDescr"), ("SAF-INTEGRAB-MIB", "integraBifPortType"), ("SAF-INTEGRAB-MIB", "integraBifPortMtu"), ("SAF-INTEGRAB-MIB", "integraBifPortSpeed"), ("SAF-INTEGRAB-MIB", "integraBifPortPhysAddress"), ("SAF-INTEGRAB-MIB", "integraBifPortAdminStatus"), ("SAF-INTEGRAB-MIB", "integraBifPortOperStatus"), ("SAF-INTEGRAB-MIB", "integraBifPortLastChange"), ("SAF-INTEGRAB-MIB", "integraBifPortAutoneg"), ("SAF-INTEGRAB-MIB", "integraBifPortDuplex"), ("SAF-INTEGRAB-MIB", "integraBifPortSyncEthActive"), ("SAF-INTEGRAB-MIB", "integraBifPortSyncEthPrio"), ("SAF-INTEGRAB-MIB", "integraBifPortFlowControl"), ("SAF-INTEGRAB-MIB", "integraBifPortStcIndex"), ("SAF-INTEGRAB-MIB", "integraBifPortStcDescr"), ("SAF-INTEGRAB-MIB", "integraBifTimePassed"), ("SAF-INTEGRAB-MIB", "integraBifIngressPackets"), ("SAF-INTEGRAB-MIB", "integraBifIngressBytes"), ("SAF-INTEGRAB-MIB", "integraBifEgressPackets"), ("SAF-INTEGRAB-MIB", "integraBifEgressBytes"), ("SAF-INTEGRAB-MIB", "integraBifEtherRxOversizePkts"), ("SAF-INTEGRAB-MIB", "integraBifEtherTxOversizePkts"), ("SAF-INTEGRAB-MIB", "integraBifReceivedPkts64Octets"), ("SAF-INTEGRAB-MIB", "integraBifTransmittedPkts64Octets"), ("SAF-INTEGRAB-MIB", "integraBifReceivedPkts65to127Octets"), ("SAF-INTEGRAB-MIB", "integraBifTransmittedPkts65to127Octets"), ("SAF-INTEGRAB-MIB", "integraBifReceivedPkts128to255Octets"), ("SAF-INTEGRAB-MIB", "integraBifTransmittedPkts128to255Octets"), ("SAF-INTEGRAB-MIB", "integraBifReceivedPkts256to511Octets"), ("SAF-INTEGRAB-MIB", "integraBifTransmittedPkts256to511Octets"), ("SAF-INTEGRAB-MIB", "integraBifReceivedPkts512to1023Octets"), ("SAF-INTEGRAB-MIB", "integraBifTransmittedPkts512to1023Octets"), ("SAF-INTEGRAB-MIB", "integraBifReceivedPkts1024to1518Octets"), ("SAF-INTEGRAB-MIB", "integraBifTransmittedPkts1024to1518Octets"), ("SAF-INTEGRAB-MIB", "integraBifIfInBroadcastPkts"), ("SAF-INTEGRAB-MIB", "integraBifIfOutBroadcastPkts"), ("SAF-INTEGRAB-MIB", "integraBifIfInMulticastPkts"), ("SAF-INTEGRAB-MIB", "integraBifIfOutMulticastPkts"), ("SAF-INTEGRAB-MIB", "integraBifIngressBPS"), ("SAF-INTEGRAB-MIB", "integraBifIngressPPS"), ("SAF-INTEGRAB-MIB", "integraBifEgressBPS"), ("SAF-INTEGRAB-MIB", "integraBifEgressPPS"), ("SAF-INTEGRAB-MIB", "integraBifMAClearnLimitDropIngressPackets"), ("SAF-INTEGRAB-MIB", "integraBifL2cacheDropIngressPackets"), ("SAF-INTEGRAB-MIB", "integraBifEFMdropIngressPackets"), ("SAF-INTEGRAB-MIB", "integraBifEFMdropEgressPackets"), ("SAF-INTEGRAB-MIB", "integraBifSTPdropIngressPackets"), ("SAF-INTEGRAB-MIB", "integraBifSTPdropEgressPackets"), ("SAF-INTEGRAB-MIB", "integraBifMRUdropIngressPackets"), ("SAF-INTEGRAB-MIB", "integraBifMRUdropEgressPackets"), ("SAF-INTEGRAB-MIB", "integraBifFilterDropIngressPackets"), ("SAF-INTEGRAB-MIB", "integraBifFlowClassifierDropIngressPackets"), ("SAF-INTEGRAB-MIB", "integraBifFlowClassifierDropEgressPackets"), ("SAF-INTEGRAB-MIB", "integraBifIllegalSAdropIngressPackets"), ("SAF-INTEGRAB-MIB", "integraBifPortRateLimitDropIngressPackets"), ("SAF-INTEGRAB-MIB", "integraBifPortRateLimitDropIngressBytes"), ("SAF-INTEGRAB-MIB", "integraBifPausePFCframesGeneratedIngressPackets"), ("SAF-INTEGRAB-MIB", "integraBifPausePFCframesGeneratedEgressPackets"), ("SAF-INTEGRAB-MIB", "integraBifRateLimitDropForUnknownUnicastIngressPackets"), ("SAF-INTEGRAB-MIB", "integraBifRateLimitDropForUnknownUnicastIngressBytes"), ("SAF-INTEGRAB-MIB", "integraBifRateLimitDropForBroadcastIngressPackets"), ("SAF-INTEGRAB-MIB", "integraBifRateLimitDropForBroadcastIngressBytes"), ("SAF-INTEGRAB-MIB", "integraBifRateLimitDropForKnownMulticastIngressPackets"), ("SAF-INTEGRAB-MIB", "integraBifRateLimitDropForKnownMulticastIngressBytes"), ("SAF-INTEGRAB-MIB", "integraBifRateLimitDropForUnknownMulticastIngressPackets"), ("SAF-INTEGRAB-MIB", "integraBifRateLimitDropForUnknownMulticastIngressBytes"), ("SAF-INTEGRAB-MIB", "integraBifAllCoSQoutPackets"), ("SAF-INTEGRAB-MIB", "integraBifAllCoSQoutBytes"), ("SAF-INTEGRAB-MIB", "integraBifAllCoSQdroppedPackets"), ("SAF-INTEGRAB-MIB", "integraBifAllCoSQdroppedBytes"), ("SAF-INTEGRAB-MIB", "integraBifProcessedRxPackets"), ("SAF-INTEGRAB-MIB", "integraBifProcessedRxBytes"), ("SAF-INTEGRAB-MIB", "integraBnetCfgIPaddress"), ("SAF-INTEGRAB-MIB", "integraBnetCfgIPmask"), ("SAF-INTEGRAB-MIB", "integraBnetCfgIPgateway"), ("SAF-INTEGRAB-MIB", "integraBnetCfgRemoteIPaddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraBEthernetGeneralGroup = integraBEthernetGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: integraBEthernetGeneralGroup.setDescription('A collection to objects, providing info applicable to\n               all network interfaces.')
integraBEthernetMiiPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 10, 2, 6)).setObjects(("SAF-INTEGRAB-MIB", "integraBifEtherStatsMulticastPkts"), ("SAF-INTEGRAB-MIB", "integraBifEtherStatsBroadcastPkts"), ("SAF-INTEGRAB-MIB", "integraBifEtherStatsPkts64Octets"), ("SAF-INTEGRAB-MIB", "integraBifEtherStatsPkts65to127Octets"), ("SAF-INTEGRAB-MIB", "integraBifEtherStatsPkts128to255Octets"), ("SAF-INTEGRAB-MIB", "integraBifEtherStatsPkts256to511Octets"), ("SAF-INTEGRAB-MIB", "integraBifEtherStatsPkts512to1023Octets"), ("SAF-INTEGRAB-MIB", "integraBifEtherStatsPkts1024to1518Octets"), ("SAF-INTEGRAB-MIB", "integraBifEtherStatsOversizePkts"), ("SAF-INTEGRAB-MIB", "integraBifEtherStatsOctets"), ("SAF-INTEGRAB-MIB", "integraBifEtherStatsPkts"), ("SAF-INTEGRAB-MIB", "integraBifEtherStatsTXNoErrors"), ("SAF-INTEGRAB-MIB", "integraBifEtherStatsRXNoErrors"), ("SAF-INTEGRAB-MIB", "integraBifEtherStatsPkts1519to1522Octets"), ("SAF-INTEGRAB-MIB", "integraBifIfInOctets"), ("SAF-INTEGRAB-MIB", "integraBifIfOutOctets"), ("SAF-INTEGRAB-MIB", "integraBifDot1dTpPortInFrames"), ("SAF-INTEGRAB-MIB", "integraBifDot1dTpPortOutFrames"), ("SAF-INTEGRAB-MIB", "integraBifDot3InPauseFrames"), ("SAF-INTEGRAB-MIB", "integraBifDot3OutPauseFrames"), ("SAF-INTEGRAB-MIB", "integraBifEtherStatsUndersizePkts"), ("SAF-INTEGRAB-MIB", "integraBifEtherStatsFragments"), ("SAF-INTEGRAB-MIB", "integraBifEtherStatsCRCAlignErrors"), ("SAF-INTEGRAB-MIB", "integraBifEtherStatsJabbers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraBEthernetMiiPortGroup = integraBEthernetMiiPortGroup.setStatus('current')
if mibBuilder.loadTexts: integraBEthernetMiiPortGroup.setDescription('A collection of objects, providing info applicable \n               only to MII group interfaces.')
integraBEthernetQosQueueGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 7, 1, 10, 2, 7)).setObjects(("SAF-INTEGRAB-MIB", "integraBifCosqIfaceIndex"), ("SAF-INTEGRAB-MIB", "integraBifCosqIfaceDescr"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatDroppedPacketsCoSQ0"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatDroppedBytesCoSQ0"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatGreenDiscardDroppedPacketsCoSQ0"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatYellowDiscardDroppedPacketsCoSQ0"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatOutPacketsCoSQ0"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatOutBytesCoSQ0"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatDroppedPacketsCoSQ1"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatDroppedBytesCoSQ1"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatGreenDiscardDroppedPacketsCoSQ1"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatYellowDiscardDroppedPacketsCoSQ1"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatOutPacketsCoSQ1"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatOutBytesCoSQ1"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatDroppedPacketsCoSQ2"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatDroppedBytesCoSQ2"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatGreenDiscardDroppedPacketsCoSQ2"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatYellowDiscardDroppedPacketsCoSQ2"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatOutPacketsCoSQ2"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatOutBytesCoSQ2"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatDroppedPacketsCoSQ3"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatDroppedBytesCoSQ3"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatGreenDiscardDroppedPacketsCoSQ3"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatYellowDiscardDroppedPacketsCoSQ3"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatOutPacketsCoSQ3"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatOutBytesCoSQ3"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatDroppedPacketsCoSQ4"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatDroppedBytesCoSQ4"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatGreenDiscardDroppedPacketsCoSQ4"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatYellowDiscardDroppedPacketsCoSQ4"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatOutPacketsCoSQ4"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatOutBytesCoSQ4"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatDroppedPacketsCoSQ5"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatDroppedBytesCoSQ5"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatGreenDiscardDroppedPacketsCoSQ5"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatYellowDiscardDroppedPacketsCoSQ5"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatOutPacketsCoSQ5"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatOutBytesCoSQ5"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatDroppedPacketsCoSQ6"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatDroppedBytesCoSQ6"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatGreenDiscardDroppedPacketsCoSQ6"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatYellowDiscardDroppedPacketsCoSQ6"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatOutPacketsCoSQ6"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatOutBytesCoSQ6"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatDroppedPacketsCoSQ7"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatDroppedBytesCoSQ7"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatGreenDiscardDroppedPacketsCoSQ7"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatYellowDiscardDroppedPacketsCoSQ7"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatOutPacketsCoSQ7"), ("SAF-INTEGRAB-MIB", "integraBifCosqStatOutBytesCoSQ7"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    integraBEthernetQosQueueGroup = integraBEthernetQosQueueGroup.setStatus('current')
if mibBuilder.loadTexts: integraBEthernetQosQueueGroup.setDescription('A collection of objects, providing info applicable to\n               all network interface Quality of Service (QoS) queues.')
mibBuilder.exportSymbols("SAF-INTEGRAB-MIB", integraBRadioGroup=integraBRadioGroup, integraBifCosqStatOutBytesCoSQ4=integraBifCosqStatOutBytesCoSQ4, integraBifEtherStatsOctets=integraBifEtherStatsOctets, integraBifPausePFCframesGeneratedEgressPackets=integraBifPausePFCframesGeneratedEgressPackets, integraBifCosqStatDroppedBytesCoSQ5=integraBifCosqStatDroppedBytesCoSQ5, integraBifRateLimitDropForKnownMulticastIngressPackets=integraBifRateLimitDropForKnownMulticastIngressPackets, integraBEthernetGeneralGroup=integraBEthernetGeneralGroup, integraBsysLicenseGenStatus=integraBsysLicenseGenStatus, integraBifStatusTable=integraBifStatusTable, integraBifMAClearnLimitDropIngressPackets=integraBifMAClearnLimitDropIngressPackets, integraBifIfInMulticastPkts=integraBifIfInMulticastPkts, integraBifIfOutMulticastPkts=integraBifIfOutMulticastPkts, integraBsysCPUtemperature=integraBsysCPUtemperature, integraBifEtherStatsUndersizePkts=integraBifEtherStatsUndersizePkts, integraBsysCPUidle=integraBsysCPUidle, integraBifRateLimitDropForUnknownMulticastIngressPackets=integraBifRateLimitDropForUnknownMulticastIngressPackets, integraBifCosqStatGreenDiscardDroppedPacketsCoSQ7=integraBifCosqStatGreenDiscardDroppedPacketsCoSQ7, integraBradioTemperature=integraBradioTemperature, integraBifEtherTxOversizePkts=integraBifEtherTxOversizePkts, integraBifCosqStatOutPacketsCoSQ4=integraBifCosqStatOutPacketsCoSQ4, integraBifMRUdropIngressPackets=integraBifMRUdropIngressPackets, integraBifTransmittedPkts256to511Octets=integraBifTransmittedPkts256to511Octets, integraBifCosqStatDroppedBytesCoSQ0=integraBifCosqStatDroppedBytesCoSQ0, integraBifDot3OutPauseFrames=integraBifDot3OutPauseFrames, integraBifRateLimitDropForBroadcastIngressPackets=integraBifRateLimitDropForBroadcastIngressPackets, integraBifRateLimitDropForUnknownUnicastIngressPackets=integraBifRateLimitDropForUnknownUnicastIngressPackets, integraBifPortStcDescr=integraBifPortStcDescr, integraBifReceivedPkts128to255Octets=integraBifReceivedPkts128to255Octets, integraBifIngressBytes=integraBifIngressBytes, integraBmodemTemperature=integraBmodemTemperature, integraBsysLicenseExpire=integraBsysLicenseExpire, integraBEthernetQosQueueGroup=integraBEthernetQosQueueGroup, integraBifEgressBytes=integraBifEgressBytes, integraBsysBoardTemperature=integraBsysBoardTemperature, integraBsysPSUpower=integraBsysPSUpower, integraBifPortSyncEthActive=integraBifPortSyncEthActive, integraBifPortStatDescr=integraBifPortStatDescr, integraBradioTxMute=integraBradioTxMute, integraBmodemRxModulation=integraBmodemRxModulation, integraBifPortAutoneg=integraBifPortAutoneg, integraBifEtherStatsPkts128to255Octets=integraBifEtherStatsPkts128to255Octets, integraBifMRUdropEgressPackets=integraBifMRUdropEgressPackets, integraBtimestamp=integraBtimestamp, integraBifCosqStatOutBytesCoSQ7=integraBifCosqStatOutBytesCoSQ7, integraBifL2cacheDropIngressPackets=integraBifL2cacheDropIngressPackets, integraBifRateLimitDropForBroadcastIngressBytes=integraBifRateLimitDropForBroadcastIngressBytes, integraBifEtherStatsBroadcastPkts=integraBifEtherStatsBroadcastPkts, integraBnetCfgIPmask=integraBnetCfgIPmask, PYSNMP_MODULE_ID=integraB, integraBifCosqStatOutBytesCoSQ0=integraBifCosqStatOutBytesCoSQ0, integraBifCosqStatDroppedPacketsCoSQ2=integraBifCosqStatDroppedPacketsCoSQ2, integraBifRateLimitDropForUnknownMulticastIngressBytes=integraBifRateLimitDropForUnknownMulticastIngressBytes, integraBifEtherRxOversizePkts=integraBifEtherRxOversizePkts, integraBifCosqIfaceIndex=integraBifCosqIfaceIndex, integraBmodemCarrierOffset=integraBmodemCarrierOffset, integraBGroups=integraBGroups, integraBifCosqStatGreenDiscardDroppedPacketsCoSQ5=integraBifCosqStatGreenDiscardDroppedPacketsCoSQ5, integraB=integraB, integraBifIngressBPS=integraBifIngressBPS, integraBifProcessedRxPackets=integraBifProcessedRxPackets, integraBifDot3InPauseFrames=integraBifDot3InPauseFrames, integraBifCosqStatOutPacketsCoSQ7=integraBifCosqStatOutPacketsCoSQ7, integraBConformance=integraBConformance, integraBifFilterDropIngressPackets=integraBifFilterDropIngressPackets, integraBifTransmittedPkts64Octets=integraBifTransmittedPkts64Octets, integraBifCosqStatOutPacketsCoSQ2=integraBifCosqStatOutPacketsCoSQ2, integraBnetCfgIPgateway=integraBnetCfgIPgateway, integraBifPortFlowControl=integraBifPortFlowControl, integraBifIfInBroadcastPkts=integraBifIfInBroadcastPkts, integraBradioRxLevel=integraBradioRxLevel, integraBradioTxFrequency=integraBradioTxFrequency, integraBradioRangeTxFrequency=integraBradioRangeTxFrequency, integraBifEtherStatsRXNoErrors=integraBifEtherStatsRXNoErrors, integraBifReceivedPkts65to127Octets=integraBifReceivedPkts65to127Octets, integraBradioSide=integraBradioSide, integraBmodemModulation=integraBmodemModulation, integraBifPortOperStatus=integraBifPortOperStatus, integraBifRateLimitDropForKnownMulticastIngressBytes=integraBifRateLimitDropForKnownMulticastIngressBytes, integraBifCosqStatDroppedPacketsCoSQ6=integraBifCosqStatDroppedPacketsCoSQ6, integraBsysFreeMemory=integraBsysFreeMemory, integraBifCosqStatOutBytesCoSQ1=integraBifCosqStatOutBytesCoSQ1, integraBifCosqEntry=integraBifCosqEntry, integraBifCosqStatGreenDiscardDroppedPacketsCoSQ4=integraBifCosqStatGreenDiscardDroppedPacketsCoSQ4, integraBifTransmittedPkts65to127Octets=integraBifTransmittedPkts65to127Octets, integraBifIfOutOctets=integraBifIfOutOctets, integraBifPortStcIndex=integraBifPortStcIndex, integraBifCosqStatDroppedPacketsCoSQ7=integraBifCosqStatDroppedPacketsCoSQ7, integraBradioRxFrequency=integraBradioRxFrequency, integraBifCosqStatDroppedPacketsCoSQ3=integraBifCosqStatDroppedPacketsCoSQ3, integraBsystem=integraBsystem, integraBradioTxMuteDuration=integraBradioTxMuteDuration, integraBradioRangeEntry=integraBradioRangeEntry, integraBradio=integraBradio, integraBmodemBandwidth=integraBmodemBandwidth, integraBifEtherStatsPkts65to127Octets=integraBifEtherStatsPkts65to127Octets, integraBifPausePFCframesGeneratedIngressPackets=integraBifPausePFCframesGeneratedIngressPackets, integraBradioRangeTxPower=integraBradioRangeTxPower, integraBifRateLimitDropForUnknownUnicastIngressBytes=integraBifRateLimitDropForUnknownUnicastIngressBytes, integraBradioRangeEntryIndex=integraBradioRangeEntryIndex, integraBnetCfgIPaddress=integraBnetCfgIPaddress, integraBethernet=integraBethernet, integraBifCosqStatDroppedBytesCoSQ7=integraBifCosqStatDroppedBytesCoSQ7, integraBMiscGroup=integraBMiscGroup, integraBifReceivedPkts512to1023Octets=integraBifReceivedPkts512to1023Octets, integraBifEgressPPS=integraBifEgressPPS, integraBifCosqStatYellowDiscardDroppedPacketsCoSQ6=integraBifCosqStatYellowDiscardDroppedPacketsCoSQ6, integraBifAllCoSQoutPackets=integraBifAllCoSQoutPackets, integraBifPortStatIndex=integraBifPortStatIndex, integraBifReceivedPkts1024to1518Octets=integraBifReceivedPkts1024to1518Octets, integraBifCosqStatYellowDiscardDroppedPacketsCoSQ2=integraBifCosqStatYellowDiscardDroppedPacketsCoSQ2, integraBifEtherStatsMulticastPkts=integraBifEtherStatsMulticastPkts, integraBifProcessedRxBytes=integraBifProcessedRxBytes, integraBifCosqStatOutBytesCoSQ3=integraBifCosqStatOutBytesCoSQ3, integraBmodem=integraBmodem, integraBifCosqStatOutBytesCoSQ6=integraBifCosqStatOutBytesCoSQ6, integraBsysPSUcurrent=integraBsysPSUcurrent, integraBradioDuplexShift=integraBradioDuplexShift, integraBifPortPhysAddress=integraBifPortPhysAddress, integraBifPortLastChange=integraBifPortLastChange, integraBmodemFECload=integraBmodemFECload, integraBifCosqIfaceDescr=integraBifCosqIfaceDescr, integraBCompliances=integraBCompliances, integraBifPortAdminStatus=integraBifPortAdminStatus, integraBifPortSyncEthPrio=integraBifPortSyncEthPrio, integraBifEtherStatsOversizePkts=integraBifEtherStatsOversizePkts, integraBifCosqStatDroppedBytesCoSQ2=integraBifCosqStatDroppedBytesCoSQ2, integraBifCosqStatDroppedPacketsCoSQ4=integraBifCosqStatDroppedPacketsCoSQ4, integraBifCosqStatDroppedPacketsCoSQ0=integraBifCosqStatDroppedPacketsCoSQ0, integraBifCosqStatGreenDiscardDroppedPacketsCoSQ1=integraBifCosqStatGreenDiscardDroppedPacketsCoSQ1, integraBifCosqStatDroppedPacketsCoSQ5=integraBifCosqStatDroppedPacketsCoSQ5, integraBifEtherStatsTXNoErrors=integraBifEtherStatsTXNoErrors, integraBifCosqStatOutPacketsCoSQ1=integraBifCosqStatOutPacketsCoSQ1, integraBmodemTxModulation=integraBmodemTxModulation, integraBifPortEntry=integraBifPortEntry, integraBifTransmittedPkts1024to1518Octets=integraBifTransmittedPkts1024to1518Octets, integraBnetCfg=integraBnetCfg, integraBifIfInOctets=integraBifIfInOctets, integraBCompliance=integraBCompliance, integraBifReceivedPkts256to511Octets=integraBifReceivedPkts256to511Octets, integraBexecuteConfig=integraBexecuteConfig, integraBModemGroup=integraBModemGroup, integraBifCosqStatDroppedBytesCoSQ3=integraBifCosqStatDroppedBytesCoSQ3, integraBifCosqStatDroppedBytesCoSQ6=integraBifCosqStatDroppedBytesCoSQ6, integraBifPortStcEntry=integraBifPortStcEntry, integraBneedStore=integraBneedStore, integraBifCosqStatGreenDiscardDroppedPacketsCoSQ0=integraBifCosqStatGreenDiscardDroppedPacketsCoSQ0, integraBifIngressPackets=integraBifIngressPackets, integraBifCosqStatYellowDiscardDroppedPacketsCoSQ0=integraBifCosqStatYellowDiscardDroppedPacketsCoSQ0, integraBifTransmittedPkts512to1023Octets=integraBifTransmittedPkts512to1023Octets, integraBifPortDuplex=integraBifPortDuplex, integraBifQosStatisticsTable=integraBifQosStatisticsTable, integraBifSTPdropIngressPackets=integraBifSTPdropIngressPackets, integraBifEtherStatsPkts256to511Octets=integraBifEtherStatsPkts256to511Octets, integraBifEtherStatsPkts1024to1518Octets=integraBifEtherStatsPkts1024to1518Octets, integraBifCosqStatDroppedBytesCoSQ4=integraBifCosqStatDroppedBytesCoSQ4, integraBnetCfgRemoteIPaddress=integraBnetCfgRemoteIPaddress, integraBifCosqStatOutPacketsCoSQ6=integraBifCosqStatOutPacketsCoSQ6, integraBstoreConfig=integraBstoreConfig, integraBmodemTxCapacity=integraBmodemTxCapacity, integraBifEtherStatsPkts512to1023Octets=integraBifEtherStatsPkts512to1023Octets, integraBifEFMdropIngressPackets=integraBifEFMdropIngressPackets, integraBifCosqStatGreenDiscardDroppedPacketsCoSQ3=integraBifCosqStatGreenDiscardDroppedPacketsCoSQ3, integraBifCosqStatYellowDiscardDroppedPacketsCoSQ5=integraBifCosqStatYellowDiscardDroppedPacketsCoSQ5, integraBmodemAcquireLastStatusDetails=integraBmodemAcquireLastStatusDetails, integraBifReceivedPkts64Octets=integraBifReceivedPkts64Octets, integraBifCosqStatYellowDiscardDroppedPacketsCoSQ4=integraBifCosqStatYellowDiscardDroppedPacketsCoSQ4, integraBmodemAcquireStatus=integraBmodemAcquireStatus, integraBifDot1dTpPortOutFrames=integraBifDot1dTpPortOutFrames, integraBifStatisticsTable=integraBifStatisticsTable, integraBifFlowClassifierDropEgressPackets=integraBifFlowClassifierDropEgressPackets, integraBifEtherStatsPkts64Octets=integraBifEtherStatsPkts64Octets, integraBifCosqStatDroppedBytesCoSQ1=integraBifCosqStatDroppedBytesCoSQ1, integraBifCosqStatOutBytesCoSQ2=integraBifCosqStatOutBytesCoSQ2, integraBradioPLL=integraBradioPLL, integraBifPortRateLimitDropIngressBytes=integraBifPortRateLimitDropIngressBytes, integraBradioRangeDescr=integraBradioRangeDescr, integraBifEtherStatsJabbers=integraBifEtherStatsJabbers, integraBifEtherStatsPkts1519to1522Octets=integraBifEtherStatsPkts1519to1522Octets, integraBsysPSUvoltage=integraBsysPSUvoltage, integraBifCosqStatOutPacketsCoSQ0=integraBifCosqStatOutPacketsCoSQ0, integraBifEFMdropEgressPackets=integraBifEFMdropEgressPackets, integraBmodemRadialMse=integraBmodemRadialMse, integraBifDot1dTpPortInFrames=integraBifDot1dTpPortInFrames, integraBmodemACMengine=integraBmodemACMengine, integraBifPortMtu=integraBifPortMtu, integraBifCosqStatYellowDiscardDroppedPacketsCoSQ1=integraBifCosqStatYellowDiscardDroppedPacketsCoSQ1, integraBifIngressPPS=integraBifIngressPPS, integraBifCosqStatYellowDiscardDroppedPacketsCoSQ7=integraBifCosqStatYellowDiscardDroppedPacketsCoSQ7, integraBifPortRateLimitDropIngressPackets=integraBifPortRateLimitDropIngressPackets, integraBradioRangesTable=integraBradioRangesTable, integraBifIllegalSAdropIngressPackets=integraBifIllegalSAdropIngressPackets, integraBifAllCoSQdroppedPackets=integraBifAllCoSQdroppedPackets, integraBifCosqStatOutPacketsCoSQ3=integraBifCosqStatOutPacketsCoSQ3, integraBifCosqStatOutPacketsCoSQ5=integraBifCosqStatOutPacketsCoSQ5, integraBifCosqStatOutBytesCoSQ5=integraBifCosqStatOutBytesCoSQ5, integraBifPortSpeed=integraBifPortSpeed, integraBifEtherStatsCRCAlignErrors=integraBifEtherStatsCRCAlignErrors, integraBifCosqStatGreenDiscardDroppedPacketsCoSQ6=integraBifCosqStatGreenDiscardDroppedPacketsCoSQ6, integraBifIfOutBroadcastPkts=integraBifIfOutBroadcastPkts, integraBifFlowClassifierDropIngressPackets=integraBifFlowClassifierDropIngressPackets, integraBradioTxPower=integraBradioTxPower, integraBifPortType=integraBifPortType, integraBifAllCoSQdroppedBytes=integraBifAllCoSQdroppedBytes, integraBSystemGroup=integraBSystemGroup, integraBifAllCoSQoutBytes=integraBifAllCoSQoutBytes, integraBifTransmittedPkts128to255Octets=integraBifTransmittedPkts128to255Octets, integraBifEgressBPS=integraBifEgressBPS, integraBifSTPdropEgressPackets=integraBifSTPdropEgressPackets, integraBEthernetMiiPortGroup=integraBEthernetMiiPortGroup, integraBifCosqStatDroppedPacketsCoSQ1=integraBifCosqStatDroppedPacketsCoSQ1, integraBifCosqStatGreenDiscardDroppedPacketsCoSQ2=integraBifCosqStatGreenDiscardDroppedPacketsCoSQ2, integraBifCosqStatYellowDiscardDroppedPacketsCoSQ3=integraBifCosqStatYellowDiscardDroppedPacketsCoSQ3, integraBifEgressPackets=integraBifEgressPackets, integraBmodemRxCapacity=integraBmodemRxCapacity, integraBifTimePassed=integraBifTimePassed, integraBifEtherStatsFragments=integraBifEtherStatsFragments, integraBifEtherStatsPkts=integraBifEtherStatsPkts)
