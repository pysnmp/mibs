#
# PySNMP MIB module EQLMEMBER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/equallogic/EQLMEMBER-MIB
# Produced by pysmi-1.1.12 at Fri Jul 19 09:35:35 2024
# On host fv-az1110-714 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
UTFString, eqlGroupId, eqlStorageGroupAdminAccountIndex = mibBuilder.importSymbols("EQLGROUP-MIB", "UTFString", "eqlGroupId", "eqlStorageGroupAdminAccountIndex")
equalLogic, = mibBuilder.importSymbols("EQUALLOGIC-SMI", "equalLogic")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, IpAddress, Counter32, iso, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, Unsigned32, ModuleIdentity, Gauge32, Integer32, enterprises, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "Counter32", "iso", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "Unsigned32", "ModuleIdentity", "Gauge32", "Integer32", "enterprises", "TimeTicks")
RowStatus, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "TextualConvention")
eqlmemberModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 12740, 2))
eqlmemberModule.setRevisions(('2012-09-22 00:00', '2012-08-15 00:00', '2011-08-09 00:00', '2002-09-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: eqlmemberModule.setRevisionsDescriptions(('Add eqlTaggedHeatProfileInfoTable, eqlTaggedHeatProfileBinTable.', 'Add eqlDriveGroupHeatProfileInfoTable, eqlDriveGroupHeatProfileBinTable.', 'Add eqlDriveGroupStatisticsTable.', 'Initial revision',))
if mibBuilder.loadTexts: eqlmemberModule.setLastUpdated('201503171528Z')
if mibBuilder.loadTexts: eqlmemberModule.setOrganization('EqualLogic Inc.')
if mibBuilder.loadTexts: eqlmemberModule.setContactInfo('Contact: Customer Support\n         Postal:  Dell Inc\n                  300 Innovative Way, Suite 301, Nashua, NH 03062\n         Tel:     +1 603-579-9762\n         E-mail:  US-NH-CS-TechnicalSupport@dell.com\n         WEB:     www.equallogic.com')
if mibBuilder.loadTexts: eqlmemberModule.setDescription('Dell Inc. Storage Array member information \n\n         Copyright (c) 2002-2012 by Dell Inc.\n\n         All rights reserved.  This software may not be copied, disclosed,\n         transferred, or used except in accordance with a license granted\n         by Dell Inc.  This software embodies proprietary information\n         and trade secrets of Dell Inc.\n        ')
eqlmemberObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 2, 1))
eqlmemberNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 2, 2))
eqlmemberConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 2, 3))
class EqlMemberSEDShareType(TextualConvention, OctetString):
    description = 'A share of an SED encryption key.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 163)

eqlMemberTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1), )
if mibBuilder.loadTexts: eqlMemberTable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberTable.setDescription('EqualLogic-Persistent Storage Group Member Table')
eqlMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"))
if mibBuilder.loadTexts: eqlMemberEntry.setStatus('current')
if mibBuilder.loadTexts: eqlMemberEntry.setDescription('An entry (row) containing member info')
eqlMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlMemberIndex.setStatus('current')
if mibBuilder.loadTexts: eqlMemberIndex.setDescription('This field unique identifies an array within a group.')
eqlMemberDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1, 2), Counter32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMemberDateAndTime.setStatus('current')
if mibBuilder.loadTexts: eqlMemberDateAndTime.setDescription('This field is dynamic, it contains the date and time for the array.\n                     There is no default value.')
eqlMemberTimeZone = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))).clone(namedValues=NamedValues(("hst", 1), ("ast", 2), ("pst", 3), ("pnt", 4), ("mst", 5), ("cst", 6), ("est", 7), ("iet", 8), ("prt", 9), ("gmt", 10), ("ect", 11), ("eet", 12), ("eat", 13), ("met", 14), ("net", 15), ("plt", 16), ("ist", 17), ("bst", 18), ("vst", 19), ("ctt", 20), ("jst", 21), ("act", 22), ("aet", 23), ("sst", 24), ("nst", 25), ("mit", 26), ("cnt", 27), ("agt", 28), ("bet", 29), ("cat", 30))).clone('est')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMemberTimeZone.setStatus('current')
if mibBuilder.loadTexts: eqlMemberTimeZone.setDescription('The field specifies the default timezone for the group.\n                     This can be overwritten on a per Array basis. The default is EST.\n                     We need to file in all the supported TZ. For now we punt and do GMT as the catch all.')
eqlMemberAdjustDaylightSavTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMemberAdjustDaylightSavTime.setStatus('current')
if mibBuilder.loadTexts: eqlMemberAdjustDaylightSavTime.setDescription('This field specifies whether or not dayLight savings time should be applied to the time. \n                     The default value is enabled.')
eqlMemberDefaultRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMemberDefaultRoute.setStatus('current')
if mibBuilder.loadTexts: eqlMemberDefaultRoute.setDescription('This field is deprecated and will be unsupported in the next release.')
eqlMemberSite = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMemberSite.setStatus('current')
if mibBuilder.loadTexts: eqlMemberSite.setDescription('This field specifies the site where the volume res ides.\n                     Sites are defined on a per array basis.\n                     Sites are used to define where primary and secondary copies of volume mirror reside.\n                     The default is the default site.')
eqlMemberDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1, 7), UTFString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMemberDescription.setStatus('current')
if mibBuilder.loadTexts: eqlMemberDescription.setDescription('This field contains a description of the array.\n                     For example the location of the array. There is no default.')
eqlMemberUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberUUID.setStatus('current')
if mibBuilder.loadTexts: eqlMemberUUID.setDescription('EQL-SECONDARY-KEY\n                                        This field is for internal use only.')
eqlMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMemberName.setStatus('current')
if mibBuilder.loadTexts: eqlMemberName.setDescription('This field specifies the name of the array.\n                     This name must be unique within the group.\n                     It can be a DNS name, though it is not required to be one. There is no default.')
eqlMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlMemberRowStatus.setDescription('This RowStatus is used only to delete a member.\n                     The row in this table could be created only by the subsystem.')
eqlMemberState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on-line", 1), ("off-line", 2), ("vacate", 3), ("vacated", 4))).clone('on-line')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlMemberState.setStatus('current')
if mibBuilder.loadTexts: eqlMemberState.setDescription('The field specifies the desired state of the array.\n      Currently setting this value to vacate is the only operation that is\n      supported.')
eqlMemberPolicySingleControllerSafe = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("safe-enabled", 1), ("safe-disabled", 2))).clone('safe-enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlMemberPolicySingleControllerSafe.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPolicySingleControllerSafe.setDescription('This field specifies the cache policy if we boot with only one CM.')
eqlMemberPolicyLowBatterySafe = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("safe-enabled", 1), ("safe-disabled", 2))).clone('safe-enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlMemberPolicyLowBatterySafe.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPolicyLowBatterySafe.setDescription('This field specifies the cache policy if the battery charge is below tolerance.')
eqlMemberVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlMemberVersion.setStatus('current')
if mibBuilder.loadTexts: eqlMemberVersion.setDescription('This field specifies the compatibility level of a member.')
eqlMemberDelayDataMove = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unconfigured", 0), ("wait", 1), ("use-member-space", 2))).clone('unconfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlMemberDelayDataMove.setStatus('current')
if mibBuilder.loadTexts: eqlMemberDelayDataMove.setDescription('When a new member is added to the group the value of this column will be zero(unconfigured).\n                     Before configuring raid-policy , this value must be set to wait(1) or use-member-space(2).\n                     The value can be changed from wait(1) to use-member-space(2) \n                     But once set to use-member-space, it cannot be changed back. \n                     ')
eqlMemberDefaultInetRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1, 16), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlMemberDefaultInetRouteType.setStatus('current')
if mibBuilder.loadTexts: eqlMemberDefaultInetRouteType.setDescription('This field is used to indicate the default gateway for the group.\n                     This value can be overriden on a per array basis.\n                     This field contains the address of the local router used to forward network traffic\n                     beyond the local subnet. Gateways are used to connect multiple subnets.\n                     There is no default value for this entry.')
eqlMemberDefaultInetRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1, 17), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlMemberDefaultInetRoute.setStatus('current')
if mibBuilder.loadTexts: eqlMemberDefaultInetRoute.setDescription('This field is used to indicate the default gateway for the group.\n                     This value can be overriden on a per array basis.\n                     This field contains the address of the local router used to forward network traffic\n                     beyond the local subnet. Gateways are used to connect multiple subnets.\n                     There is no default value for this entry.')
eqlMemberDriveMirroring = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlMemberDriveMirroring.setStatus('current')
if mibBuilder.loadTexts: eqlMemberDriveMirroring.setDescription('On disk drive failures, this value is checked for mirroring the data onto the spare drive.\n                     The value can be changed from enabled(0) to disabled(1) and vice-versa\n                     ')
eqlMemberProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberProfileIndex.setStatus('current')
if mibBuilder.loadTexts: eqlMemberProfileIndex.setDescription('This field represents the profile identifier supported by this member.')
eqlMemberControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberControllerType.setStatus('current')
if mibBuilder.loadTexts: eqlMemberControllerType.setDescription('This variable specifies the type of the active controller module on this member. Ex: Type II')
eqlMemberControllerMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1, 21), Unsigned32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberControllerMajorVersion.setStatus('current')
if mibBuilder.loadTexts: eqlMemberControllerMajorVersion.setDescription('This variable specifies the major version number of the\n                     software present on the active controller module.')
eqlMemberControllerMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1, 22), Unsigned32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberControllerMinorVersion.setStatus('current')
if mibBuilder.loadTexts: eqlMemberControllerMinorVersion.setDescription('This variable specifies the minor version number of the\n                     software present on the active controller module.')
eqlMemberControllerMaintenanceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberControllerMaintenanceVersion.setStatus('current')
if mibBuilder.loadTexts: eqlMemberControllerMaintenanceVersion.setDescription('This variable specifies the maintenance version number of the\n                     software present on the active controller module.')
eqlMemberCompressionCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 1, 1, 24), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberCompressionCapable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberCompressionCapable.setDescription('This variable specifies if the member is capable of supporting compression.')
eqlMemberStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3), )
if mibBuilder.loadTexts: eqlMemberStatusTable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusTable.setDescription('EqualLogic-Dynamic Member Status Table')
eqlMemberStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"))
if mibBuilder.loadTexts: eqlMemberStatusEntry.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusEntry.setDescription('An entry (row) containing member status info')
eqlMemberStatusTotalSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusTotalSpace.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusTotalSpace.setDescription('This field specifies the total disk space in MBs on the this array.')
eqlMemberStatusTotalSpaceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusTotalSpaceUsed.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusTotalSpaceUsed.setDescription('This field specifies the total disk space in MBs allocated to volume data \n                     for this array.')
eqlMemberStatusModel = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusModel.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusModel.setDescription('This field specifies the model number for the array.')
eqlMemberStatusSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusSerialNumber.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusSerialNumber.setDescription('This field specifies the serial number for the array.')
eqlMemberStatusNumberOfControllers = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("single", 1), ("dual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusNumberOfControllers.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusNumberOfControllers.setDescription('This field specifies the number of Controller modules in the array.')
eqlMemberStatusNumberOfDisks = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusNumberOfDisks.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusNumberOfDisks.setDescription('This field specifies the number of disks installed in the array.')
eqlMemberStatusNumberOfSpares = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusNumberOfSpares.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusNumberOfSpares.setDescription('This field specifies the number disks allocated as spares in an array.')
eqlMemberStatusCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusCacheSize.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusCacheSize.setDescription('The field specifies the size in MB of the read/write cache within the array.')
eqlMemberStatusCacheMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("write-thru", 1), ("write-back", 2))).clone('write-back')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusCacheMode.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusCacheMode.setDescription('This field specifies the mode the cache is in within the array.\n                     The default is write-back. The array will be set to write-thru on battery failure.')
eqlMemberStatusNumberOfConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusNumberOfConnections.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusNumberOfConnections.setDescription('This field specifies the number of iSCSI initiators which are connected to this array.')
eqlMemberStatusAverageTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusAverageTemp.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusAverageTemp.setDescription('This field specifies the average tempature of the array in degrees C.')
eqlMemberStatusTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("good", 1), ("bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusTempStatus.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusTempStatus.setDescription('This field specifies whether the tempatures for the array\n                     are within acceptable tolerances.\n                     ** What are acceptable tolerances?')
eqlMemberStatusBackplaneTempSensor1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusBackplaneTempSensor1.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusBackplaneTempSensor1.setDescription('This field specifies the tempature of backplane sensor 1 in degrees C.')
eqlMemberStatusBackplaneTempSensor2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusBackplaneTempSensor2.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusBackplaneTempSensor2.setDescription('This field specifies the tempature of backplane sensor 2 in degrees C.')
eqlMemberStatusPowerSupply1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("on", 1), ("no-power", 2), ("failed", 3), ("fan-failed", 4), ("not-present", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusPowerSupply1Status.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusPowerSupply1Status.setDescription('This field specifies the state of the first power supply.')
eqlMemberStatusPowerSupply2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("on", 1), ("no-power", 2), ("failed", 3), ("fan-failed", 4), ("not-present", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusPowerSupply2Status.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusPowerSupply2Status.setDescription('This field specifies the state of the second power supply.')
eqlMemberStatusTrayOneFanOneSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusTrayOneFanOneSpeed.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusTrayOneFanOneSpeed.setDescription('The field specifies the rpm fan speed for fan tray 1, fan 1.')
eqlMemberStatusTrayOneFanTwoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusTrayOneFanTwoSpeed.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusTrayOneFanTwoSpeed.setDescription('The field specifies the rpm fan speed for fan tray 1, fan 2.')
eqlMemberStatusTrayTwoFanOneSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusTrayTwoFanOneSpeed.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusTrayTwoFanOneSpeed.setDescription('The field specifies the rpm fan speed for fan tray 2, fan 1.')
eqlMemberStatusTrayTwoFanTwoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusTrayTwoFanTwoSpeed.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusTrayTwoFanTwoSpeed.setDescription('The field specifies the rpm fan speed for fan tray 2, fan 2.')
eqlMemberStatusPowerSupplyOneFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on-line", 1), ("off-line", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusPowerSupplyOneFanStatus.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusPowerSupplyOneFanStatus.setDescription('This field specifies whether the fan in power supply one is on-line or not.')
eqlMemberStatusPowerSupplyTwoFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on-line", 1), ("off-line", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusPowerSupplyTwoFanStatus.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusPowerSupplyTwoFanStatus.setDescription('This field specifies whether the fan in power supply two is on-line or not.')
eqlMemberStatusRaidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ok", 1), ("degraded", 2), ("verifying", 3), ("reconstructing", 4), ("failed", 5), ("catastrophicLoss", 6), ("expanding", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusRaidStatus.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusRaidStatus.setDescription('This field specifies the status of the raid subsystem. \n                     This is a composite of the view of the underlying subsystems.\n                     Status ok means things are ok.\n                     Status degraded means we are in a degraded state, possible because no spare is available.\n                     Status verifying means a verify pass is run, and a percent complete is available.\n                     Status reconstructing means we are reconstructing a drive and a percent complete is available.\n                     Status failed means we had a failure while we were up, possibly a drive failed and we have\n                        no spare.\n                     Status catastrophicLoss may not be visible to the user since the member may not be able to \n                        bootup. It means we need administrator intervention to correct the problem.\n                     ')
eqlMemberStatusRaidPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusRaidPercentage.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusRaidPercentage.setDescription('This field specifies the percentage complete when the eqlMemberStatusRaidStatus is verifying\n                        or reconstructing.')
eqlMemberStatusLostRaidBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberStatusLostRaidBlocks.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusLostRaidBlocks.setDescription('This field specifies whether we have lost blocks in the raid array which\n                        the user may want to clear.')
eqlMemberStatusHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlMemberStatusHealth.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusHealth.setDescription('This field specifies what the overall health of the member\n                        is on a scale of 0(dead) to 100(healthy)\n                        -- deprecated  by new health tables in v1.1')
eqlMemberStatusShortId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 3, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlMemberStatusShortId.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStatusShortId.setDescription('This field specifies short member address')
eqlMemberInfoTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 4), )
if mibBuilder.loadTexts: eqlMemberInfoTable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberInfoTable.setDescription('EqualLogic-Dynamic Member Info Table')
eqlMemberInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 4, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlTargetMemberIndex"))
if mibBuilder.loadTexts: eqlMemberInfoEntry.setStatus('current')
if mibBuilder.loadTexts: eqlMemberInfoEntry.setDescription('An entry (row) containing member info')
eqlTargetMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: eqlTargetMemberIndex.setStatus('current')
if mibBuilder.loadTexts: eqlTargetMemberIndex.setDescription(' This is a duplication of eqlMemberIndex just to make our code generation happy.')
eqlMemberInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on-line", 1), ("off-line", 2), ("vacating-in-progress", 3), ("vacated", 4))).clone('on-line')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberInfoStatus.setStatus('current')
if mibBuilder.loadTexts: eqlMemberInfoStatus.setDescription(' The current state of the member.')
eqlMemberHealthTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 5), )
if mibBuilder.loadTexts: eqlMemberHealthTable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthTable.setDescription('EqualLogic-Dynamic Member Health Table')
eqlMemberHealthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 5, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"))
if mibBuilder.loadTexts: eqlMemberHealthEntry.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthEntry.setDescription('An entry (row) containing overall member health info')
eqlMemberHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("normal", 1), ("warning", 2), ("critical", 3))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlMemberHealthStatus.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthStatus.setDescription('The value of this object is determinted by the severity of the\n                        health condition state variables. The most severe state will\n                        be reflected.')
eqlMemberHealthWarningConditions = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 5, 1, 2), Bits().clone(namedValues=NamedValues(("hwComponentFailedWarn", 0), ("powerSupplyRemoved", 1), ("controlModuleRemoved", 2), ("psfanOffline", 3), ("fanSpeed", 4), ("cacheSyncing", 5), ("raidSetFaulted", 6), ("highTemp", 7), ("raidSetLostblkEntry", 8), ("secondaryEjectSWOpen", 9), ("b2bFailure", 10), ("replicationNoProg", 11), ("raidSpareTooSmall", 12), ("lowTemp", 13), ("powerSupplyFailed", 14), ("timeOfDayClkBatteryLow", 15), ("incorrectPhysRamSize", 16), ("mixedMedia", 17), ("sumoChannelCardMissing", 18), ("sumoChannelCardFailed", 19), ("batteryLessthan72hours", 20), ("cpuFanNotSpinning", 21), ("raidMoreSparesExpected", 22), ("raidSpareWrongType", 23), ("raidSsdRaidsetHasHdd", 24), ("driveNotApproved", 25), ("noEthernetFlowControl", 26), ("fanRemovedCondition", 27), ("smartBatteryLowCharge", 28), ("nandHighBadBlockCount", 29), ("networkStorm", 30), ("batteryEndOfLifeWarning", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHealthWarningConditions.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthWarningConditions.setDescription('This field defines possible warning health conditions and which\n                        ones are present.')
eqlMemberHealthCriticalConditions = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 5, 1, 3), Bits().clone(namedValues=NamedValues(("raidSetDoubleFaulted", 0), ("bothFanTraysRemoved", 1), ("highAmbientTemp", 2), ("raidLostCache", 3), ("moreThanOneFanSpeedCondition", 4), ("fanTrayRemoved", 5), ("raidSetLostblkTableFull", 6), ("raidDeviceIncompatible", 7), ("raidOrphanCache", 8), ("raidMultipleRaidSets", 9), ("nVRAMBatteryFailed", 10), ("hwComponentFailedCrit", 11), ("incompatControlModule", 12), ("lowAmbientTemp", 13), ("opsPanelFailure", 14), ("emmLinkFailure", 15), ("highBatteryTemperature", 16), ("enclosureOpenPerm", 17), ("sumoChannelBothMissing", 18), ("sumoEIPFailureCOndition", 19), ("sumoChannelBothFailed", 20), ("staleMirrorDiskFailure", 21), ("c2fPowerModuleFailureCondition", 22), ("raidsedUnresolved", 23), ("colossusDeniedFullPower", 24), ("cemiUpdateInProgress", 25), ("colossusCannotStart", 26), ("multipleFansRemoved", 27), ("smartBatteryFailure", 28), ("critbit29", 29), ("nandFailure", 30), ("batteryEndOfLife", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHealthCriticalConditions.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthCriticalConditions.setDescription('This field defines possible critical health conditions and which\n                        ones are present.')
eqlMemberHealthDetailsTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 6), )
if mibBuilder.loadTexts: eqlMemberHealthDetailsTemperatureTable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsTemperatureTable.setDescription('EqualLogic-Dynamic Member Health Details Temperature Table.\n                    ')
eqlMemberHealthDetailsTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 6, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "EQLMEMBER-MIB", "eqlMemberHealthDetailsTempSensorIndex"))
if mibBuilder.loadTexts: eqlMemberHealthDetailsTemperatureEntry.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsTemperatureEntry.setDescription('An entry (row) containing member health detailed temperature info')
eqlMemberHealthDetailsTempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40))).clone(namedValues=NamedValues(("integratedSystemTemperature", 1), ("backplaneSensor0", 2), ("backplaneSensor1", 3), ("controlModule0processor", 4), ("controlModule0chipset", 5), ("controlModule1processor", 6), ("controlModule1chipset", 7), ("controlModule0sasController", 8), ("controlModule0sasExpander", 9), ("controlModule0sesEnclosure", 10), ("controlModule1sasController", 11), ("controlModule1sasExpander", 12), ("controlModule1sesEnclosure", 13), ("sesOpsPanel", 14), ("cemi0", 15), ("cemi1", 16), ("controlModule0batteryThermistor", 17), ("controlModule1batteryThermistor", 18), ("subExpanderModule0", 19), ("subExpanderModule1", 20), ("subExpanderModule2", 21), ("subExpanderModule3", 22), ("bottomplane0d0", 23), ("bottomplane0d1", 24), ("bottomplane0d2", 25), ("bottomplane0d3", 26), ("bottomplane0d4", 27), ("bottomplane1d0", 28), ("bottomplane1d1", 29), ("bottomplane1d2", 30), ("bottomplane1d3", 31), ("bottomplane1d4", 32), ("subExpanderModule0expander0", 33), ("subExpanderModule0expander1", 34), ("subExpanderModule1expander0", 35), ("subExpanderModule1expander1", 36), ("subExpanderModule2expander0", 37), ("subExpanderModule2expander1", 38), ("subExpanderModule3expander0", 39), ("subExpanderModule3expander1", 40))))
if mibBuilder.loadTexts: eqlMemberHealthDetailsTempSensorIndex.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsTempSensorIndex.setDescription('A unique integer that denotes which temperature sensor\n                    this entry refers to')
eqlMemberHealthDetailsTemperatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHealthDetailsTemperatureName.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsTemperatureName.setDescription('This field specifies the name of the sensor that we display to the user.')
eqlMemberHealthDetailsTemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHealthDetailsTemperatureValue.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsTemperatureValue.setDescription('The value of this object is temperature in degrees C')
eqlMemberHealthDetailsTemperatureCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("normal", 1), ("warning", 2), ("critical", 3))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHealthDetailsTemperatureCurrentState.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsTemperatureCurrentState.setDescription('This field tells us the state of the temperature sensor.\n                        Either normal, warning or critical.')
eqlMemberHealthDetailsTemperatureHighCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHealthDetailsTemperatureHighCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsTemperatureHighCriticalThreshold.setDescription("when the TemperatureValue is greater than or equal to this \n                        variable's value the current state is set to critical.")
eqlMemberHealthDetailsTemperatureHighWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHealthDetailsTemperatureHighWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsTemperatureHighWarningThreshold.setDescription("when the TemperatureValue is greater than or equal to this \n                        variable's value and not greater than or equal to the \n                        HighCriticalThreshold, the current state is set to warning.")
eqlMemberHealthDetailsTemperatureLowCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHealthDetailsTemperatureLowCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsTemperatureLowCriticalThreshold.setDescription("when the TemperatureValue is less than or equal to this \n                        variable's value the current state is set to critical.")
eqlMemberHealthDetailsTemperatureLowWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHealthDetailsTemperatureLowWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsTemperatureLowWarningThreshold.setDescription("when the TemperatureValue is less than or equal to this \n                        variable's value and not less than or equal to the \n                        LowCriticalThreshold, the current state is set to warning.")
eqlMemberHealthDetailsTemperatureNameID = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHealthDetailsTemperatureNameID.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsTemperatureNameID.setDescription('This field specifies the XML based name ID of the sensor that we display to the user.')
eqlMemberHealthDetailsFanTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 7), )
if mibBuilder.loadTexts: eqlMemberHealthDetailsFanTable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsFanTable.setDescription('EqualLogic-Dynamic Member Health Details Fan Table.')
eqlMemberHealthDetailsFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 7, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "EQLMEMBER-MIB", "eqlMemberHealthDetailsFanIndex"))
if mibBuilder.loadTexts: eqlMemberHealthDetailsFanEntry.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsFanEntry.setDescription('An entry (row) containing member health detailed fan info')
eqlMemberHealthDetailsFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emm0fan0", 1), ("emm0fan1", 2), ("emm1fan0", 3), ("emm1fan1", 4), ("emm2fan0", 5), ("emm2fan1", 6), ("emm3fan0", 7), ("emm3fan1", 8))))
if mibBuilder.loadTexts: eqlMemberHealthDetailsFanIndex.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsFanIndex.setDescription('A unique integer that identifies the fan that the\n                     corresponding entry refers to\n                     ')
eqlMemberHealthDetailsFanName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHealthDetailsFanName.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsFanName.setDescription('This field specifies the name of the fan that we display to the user.')
eqlMemberHealthDetailsFanValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHealthDetailsFanValue.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsFanValue.setDescription('The value of this object is fan speed in rpm.')
eqlMemberHealthDetailsFanCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("normal", 1), ("warning", 2), ("critical", 3))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHealthDetailsFanCurrentState.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsFanCurrentState.setDescription('This field tells us the state of the fan.\n                        Either normal, warning or critical.')
eqlMemberHealthDetailsFanHighCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHealthDetailsFanHighCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsFanHighCriticalThreshold.setDescription("when the FanValue is greater than or equal to this \n                        variable's value the current state is set to critical.")
eqlMemberHealthDetailsFanHighWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHealthDetailsFanHighWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsFanHighWarningThreshold.setDescription("when the FanValue is greater than or equal to this \n                        variable's value and not greater than or equal to the \n                        HighCriticalThreshold, the current state is set to warning.")
eqlMemberHealthDetailsFanLowCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 7, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHealthDetailsFanLowCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsFanLowCriticalThreshold.setDescription("when the FanValue is less than or equal to this \n                        variable's value the current state is set to critical.")
eqlMemberHealthDetailsFanLowWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 7, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHealthDetailsFanLowWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsFanLowWarningThreshold.setDescription("when the FanValue is less than or equal to this \n                        variable's value and not less than or equal to the \n                        LowCriticalThreshold, the current state is set to warning.")
eqlMemberHealthDetailsFanNameID = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 7, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHealthDetailsFanNameID.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsFanNameID.setDescription('This field specifies the XML based name ID of the fan that we display to the user.')
eqlMemberHealthDetailsPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 8), )
if mibBuilder.loadTexts: eqlMemberHealthDetailsPowerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsPowerSupplyTable.setDescription('EqualLogic-Dynamic Member Health Details Power Supply Table.\n                        The mappng of index to power supply:\n                        .1 = power supply 0\n                        .2 = power supply 1\n                        .3 = power supply 2\n                    ')
eqlMemberHealthDetailsPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 8, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "EQLMEMBER-MIB", "eqlMemberHealthDetailsPowerSupplyIndex"))
if mibBuilder.loadTexts: eqlMemberHealthDetailsPowerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsPowerSupplyEntry.setDescription('An entry (row) containing power supply status information.')
eqlMemberHealthDetailsPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("powerSupply0", 1), ("powerSupply1", 2), ("powerSupply2", 3))))
if mibBuilder.loadTexts: eqlMemberHealthDetailsPowerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsPowerSupplyIndex.setDescription('Iff the power supply current state is on-and-operating,\n                      then this field tells if the fan is operational.')
eqlMemberHealthDetailsPowerSupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHealthDetailsPowerSupplyName.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsPowerSupplyName.setDescription('This field specifies the name of the power supply that we display to the user.')
eqlMemberHealthDetailsPowerSupplyCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on-and-operating", 1), ("no-ac-power", 2), ("failed-or-no-data", 3))).clone('failed-or-no-data')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHealthDetailsPowerSupplyCurrentState.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsPowerSupplyCurrentState.setDescription('This field tells us the state of the power supply.')
eqlMemberHealthDetailsPowerSupplyFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-applicable", 0), ("fan-is-operational", 1), ("fan-not-operational", 2))).clone('fan-not-operational')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHealthDetailsPowerSupplyFanStatus.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsPowerSupplyFanStatus.setDescription('Iff the power supply current state is on-and-operating,\n                      then this field tells if the fan is operational.')
eqlMemberHealthDetailsPowerSupplyFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 8, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHealthDetailsPowerSupplyFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsPowerSupplyFirmwareVersion.setDescription('This field specifies power supply firmware version.\n                    Only available starting from Porfidio Platforms.')
eqlMemberHealthDetailsPowerSupplyNameID = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHealthDetailsPowerSupplyNameID.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthDetailsPowerSupplyNameID.setDescription('This field specifies the XML based nameID of the power supply that we display to the user.')
eqlMemberIdentificationTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 9), )
if mibBuilder.loadTexts: eqlMemberIdentificationTable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberIdentificationTable.setDescription(' EqualLogic-Dynamic Member Identification Table.')
eqlMemberIdentificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 9, 1), )
eqlMemberStatusEntry.registerAugmentions(("EQLMEMBER-MIB", "eqlMemberIdentificationEntry"))
eqlMemberIdentificationEntry.setIndexNames(*eqlMemberStatusEntry.getIndexNames())
if mibBuilder.loadTexts: eqlMemberIdentificationEntry.setStatus('current')
if mibBuilder.loadTexts: eqlMemberIdentificationEntry.setDescription('List of attributes of the array used to identity the location of that array.\n                    ')
eqlMemberIdentificationLEDsBlinking = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 9, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlMemberIdentificationLEDsBlinking.setStatus('current')
if mibBuilder.loadTexts: eqlMemberIdentificationLEDsBlinking.setDescription('\n                      Setting this variable to true enables blinking of the ALRM and WARN \n                      LEDs on the front panel and the ERR LED on the CM, as seen \n                      from the back. \n                      The blinking stops after 2 hours or when the variable is \n                      set to false. \n                    ')
eqlMemberStorageTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 10), )
if mibBuilder.loadTexts: eqlMemberStorageTable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStorageTable.setDescription(' EqualLogic-Dynamic Member Storage Information Table.')
eqlMemberStorageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 10, 1), )
eqlMemberIdentificationEntry.registerAugmentions(("EQLMEMBER-MIB", "eqlMemberStorageEntry"))
eqlMemberStorageEntry.setIndexNames(*eqlMemberIdentificationEntry.getIndexNames())
if mibBuilder.loadTexts: eqlMemberStorageEntry.setStatus('current')
if mibBuilder.loadTexts: eqlMemberStorageEntry.setDescription('List of attributes used to convey the details of storage space utilization on the array.\n                    ')
eqlMemberTotalStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberTotalStorage.setStatus('current')
if mibBuilder.loadTexts: eqlMemberTotalStorage.setDescription('This field specifies the total disk storage in MBs on the array.')
eqlMemberUsedStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberUsedStorage.setStatus('current')
if mibBuilder.loadTexts: eqlMemberUsedStorage.setDescription('This field specifies sum of reserved delegated space, reserved volume space, used snapshot space, used replication space.')
eqlMemberSnapStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberSnapStorage.setStatus('current')
if mibBuilder.loadTexts: eqlMemberSnapStorage.setDescription('This field specifies used snapshot space.  Space on this array used by snapshots.  Note that this value is not the same as space reserved for snapshots.')
eqlMemberReplStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberReplStorage.setStatus('current')
if mibBuilder.loadTexts: eqlMemberReplStorage.setDescription('This field specifies used replication space.  Space on this array used by in progress replicas or failback replicas.  Note that this value is not the same as space reserved for replication.')
eqlMemberVirtualStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 10, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberVirtualStorage.setStatus('current')
if mibBuilder.loadTexts: eqlMemberVirtualStorage.setDescription('This field specifies the amount of space (MB) used by compressed pages if all pages were not compressed on the member.')
eqlMemberCompressionStackStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 10, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberCompressionStackStorage.setStatus('current')
if mibBuilder.loadTexts: eqlMemberCompressionStackStorage.setDescription('The amount of space (MB) used to store compressed data on this member.')
eqlMemberChassisTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 11), )
if mibBuilder.loadTexts: eqlMemberChassisTable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberChassisTable.setDescription(' EqualLogic-Dynamic Member Chassis Information Table.')
eqlMemberChassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 11, 1), )
eqlMemberIdentificationEntry.registerAugmentions(("EQLMEMBER-MIB", "eqlMemberChassisEntry"))
eqlMemberChassisEntry.setIndexNames(*eqlMemberIdentificationEntry.getIndexNames())
if mibBuilder.loadTexts: eqlMemberChassisEntry.setStatus('current')
if mibBuilder.loadTexts: eqlMemberChassisEntry.setDescription('List of attributes used to convey the details and type of Chassis present on the array.\n                    ')
eqlMemberModel = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 11, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberModel.setStatus('current')
if mibBuilder.loadTexts: eqlMemberModel.setDescription('This field specifies the model number for the array.')
eqlMemberSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberSerialNumber.setStatus('current')
if mibBuilder.loadTexts: eqlMemberSerialNumber.setDescription('This field specifies the serial number for the array.')
eqlMemberNumberOfControllers = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("single", 1), ("dual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberNumberOfControllers.setStatus('current')
if mibBuilder.loadTexts: eqlMemberNumberOfControllers.setDescription('This field specifies the number of Controller modules in the array.')
eqlMemberNumberOfDisks = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberNumberOfDisks.setStatus('current')
if mibBuilder.loadTexts: eqlMemberNumberOfDisks.setDescription('This field specifies the number of disk installed in the array.')
eqlMemberCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberCacheSize.setStatus('current')
if mibBuilder.loadTexts: eqlMemberCacheSize.setDescription('The field specifies the size in MB of the read/write cache within the array.')
eqlMemberCacheMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("write-thru", 1), ("write-back", 2))).clone('write-back')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberCacheMode.setStatus('current')
if mibBuilder.loadTexts: eqlMemberCacheMode.setDescription('This field specifies the mode the cache is in within the array.\n                     The default is write-back. The array will be set to write-thru on battery failure.')
eqlMemberChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 0), ("t1403", 1), ("t1603", 2), ("t4835", 3), ("tDELLSBB2u1235", 4), ("tDELLSBB2u2425", 5), ("tDELLSBB4u2435", 6), ("tDELL2WB1425V1", 7), ("tDELLSBB5u6035", 8))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberChassisType.setStatus('current')
if mibBuilder.loadTexts: eqlMemberChassisType.setDescription('This field specifies the chassis type of the array.  The default is unknown.')
eqlMemberServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 11, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberServiceTag.setStatus('current')
if mibBuilder.loadTexts: eqlMemberServiceTag.setDescription('This field specifies the service tag number for the array.')
eqlMemberProductFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 11, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberProductFamily.setStatus('current')
if mibBuilder.loadTexts: eqlMemberProductFamily.setDescription('This field specifies the product family of the peer storage array. Ex: PS5000 E Series.')
eqlMemberChassisFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 11, 1, 10), Bits().clone(namedValues=NamedValues(("isAccelerated", 0), ("isAllSedDisks", 1), ("flag2", 2), ("flag3", 3), ("flag4", 4), ("flag5", 5), ("flag6", 6), ("flag7", 7), ("flag8", 8), ("flag9", 9), ("flag10", 10), ("flag11", 11), ("flag12", 12), ("flag13", 13), ("flag14", 14), ("flag15", 15), ("flag16", 16), ("flag17", 17), ("flag18", 18), ("flag19", 19), ("flag20", 20), ("flag21", 21), ("flag22", 22), ("flag23", 23), ("flag24", 24), ("flag25", 25), ("flag26", 26), ("flag27", 27), ("flag28", 28), ("flag29", 29), ("flag30", 30), ("flag31", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberChassisFlags.setStatus('current')
if mibBuilder.loadTexts: eqlMemberChassisFlags.setDescription('This field defines the common place holder for Chassis operational flags.  The flags must be of type\n                    enable(1) or disable(0), and the default will always be disable(0).')
eqlMemberChassisDiskSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("sector-size-512-bytes", 0), ("sector-size-4096-bytes", 1), ("sector-size-unknown", 2), ("sector-size-mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberChassisDiskSectorSize.setStatus('current')
if mibBuilder.loadTexts: eqlMemberChassisDiskSectorSize.setDescription('This field specifies the disk sector size of disks in this array.')
eqlMemberConnTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 12), )
if mibBuilder.loadTexts: eqlMemberConnTable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberConnTable.setDescription(' EqualLogic-Dynamic Member Conn Information Table.')
eqlMemberConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 12, 1), )
eqlMemberIdentificationEntry.registerAugmentions(("EQLMEMBER-MIB", "eqlMemberConnEntry"))
eqlMemberConnEntry.setIndexNames(*eqlMemberIdentificationEntry.getIndexNames())
if mibBuilder.loadTexts: eqlMemberConnEntry.setStatus('current')
if mibBuilder.loadTexts: eqlMemberConnEntry.setDescription('List of attributes used to convey the connections information on the array.\n                    ')
eqlMemberNumberOfConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberNumberOfConnections.setStatus('current')
if mibBuilder.loadTexts: eqlMemberNumberOfConnections.setDescription('This field specifies the number of iSCSI connections made from initiators to this array.')
eqlMemberReadLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 12, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberReadLatency.setStatus('current')
if mibBuilder.loadTexts: eqlMemberReadLatency.setDescription('The accumulative latency in milli seconds for read operations on this member. The value will be zero until all members are atleast 3.0. The value is reset to zero upon reboot.')
eqlMemberWriteLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 12, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberWriteLatency.setStatus('current')
if mibBuilder.loadTexts: eqlMemberWriteLatency.setDescription('The accumulative latency in milli seconds for write operations on this member. The value will be zero until all members are atleast 3.0. The value is reset to zero upon reboot.')
eqlMemberReadAvgLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 12, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberReadAvgLatency.setStatus('current')
if mibBuilder.loadTexts: eqlMemberReadAvgLatency.setDescription('The average latency for read operations on this member in milli seconds. The value is reset to zero upon reboot.')
eqlMemberWriteAvgLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 12, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberWriteAvgLatency.setStatus('current')
if mibBuilder.loadTexts: eqlMemberWriteAvgLatency.setDescription('The average latency for write operations on this member in milli seconds. The value is reset to zero upon reboot.')
eqlMemberReadOpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 12, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberReadOpCount.setStatus('current')
if mibBuilder.loadTexts: eqlMemberReadOpCount.setDescription('The number of read operations on this member. The value is reset to zero upon reboot.')
eqlMemberWriteOpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 12, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberWriteOpCount.setStatus('current')
if mibBuilder.loadTexts: eqlMemberWriteOpCount.setDescription('The number of write operations on this member. The value is reset to zero upon reboot.')
eqlMemberTxData = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 12, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberTxData.setStatus('current')
if mibBuilder.loadTexts: eqlMemberTxData.setDescription('The count of data octets trasmitted by this member.The value is reset to zero upon reboot.')
eqlMemberRxData = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 12, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberRxData.setStatus('current')
if mibBuilder.loadTexts: eqlMemberRxData.setDescription('The count of data octets received by this member.The value is reset to zero upon reboot.')
eqlMemberNumberOfExtConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberNumberOfExtConnections.setStatus('current')
if mibBuilder.loadTexts: eqlMemberNumberOfExtConnections.setDescription('This field specifies the number of iSCSI connections made from external initiators to this array.')
eqlMemberRAIDTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 13), )
if mibBuilder.loadTexts: eqlMemberRAIDTable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberRAIDTable.setDescription(' EqualLogic-Dynamic Member RAID Information Table.')
eqlMemberRAIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 13, 1), )
eqlMemberIdentificationEntry.registerAugmentions(("EQLMEMBER-MIB", "eqlMemberRAIDEntry"))
eqlMemberRAIDEntry.setIndexNames(*eqlMemberIdentificationEntry.getIndexNames())
if mibBuilder.loadTexts: eqlMemberRAIDEntry.setStatus('current')
if mibBuilder.loadTexts: eqlMemberRAIDEntry.setDescription('List of attributes used to convey the RAID status information on the array.\n                    ')
eqlMemberRaidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("degraded", 2), ("verifying", 3), ("reconstructing", 4), ("failed", 5), ("catastrophicLoss", 6), ("expanding", 7), ("mirroring", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberRaidStatus.setStatus('current')
if mibBuilder.loadTexts: eqlMemberRaidStatus.setDescription('This field specifies the status of the raid subsystem. \n                     This is a composite of the view of the underlying subsystems.\n                     Status ok means things are ok.\n                     Status degraded means we are in a degraded state, possible because no spare is available.\n                     Status verifying means a verify pass is run, and a percent complete is available.\n                     Status reconstructing means we are reconstructing a drive and a percent complete is available.\n                     Status failed means we had a failure while we were up, possibly a drive failed and we have\n                        no spare.\n                     Status catastrophicLoss may not be visible to the user since the member may not be able to \n                        bootup. It means we need administrator intervention to correct the problem.\n                     Status mirroring means we are mirroring a bad drive onto a spare drive.\n                     ')
eqlMemberRaidPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberRaidPercentage.setStatus('current')
if mibBuilder.loadTexts: eqlMemberRaidPercentage.setDescription('This field specifies the percentage complete when the eqlMemberStatusRaidStatus is verifying\n                        or reconstructing.')
eqlMemberLostRaidBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberLostRaidBlocks.setStatus('current')
if mibBuilder.loadTexts: eqlMemberLostRaidBlocks.setDescription('This field specifies whether we have lost blocks in the raid array which\n                        the user may want to clear.')
eqlMemberNumberOfSpares = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberNumberOfSpares.setStatus('current')
if mibBuilder.loadTexts: eqlMemberNumberOfSpares.setDescription('This field specifies the number disks allocated as spares in an array.')
eqlMemberRaidProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberRaidProgress.setStatus('current')
if mibBuilder.loadTexts: eqlMemberRaidProgress.setDescription('This field specifies 1000 times the percentage complete when the eqlMemberStatusRaidStatus is verifying\n                        or reconstructing.')
eqlMemberPSGMapTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 14), )
if mibBuilder.loadTexts: eqlMemberPSGMapTable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPSGMapTable.setDescription(' EqualLogic-Dynamic Member PSG Map Table.')
eqlMemberPSGMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 14, 1), )
eqlMemberIdentificationEntry.registerAugmentions(("EQLMEMBER-MIB", "eqlMemberPSGMapEntry"))
eqlMemberPSGMapEntry.setIndexNames(*eqlMemberIdentificationEntry.getIndexNames())
if mibBuilder.loadTexts: eqlMemberPSGMapEntry.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPSGMapEntry.setDescription('List of attributes used to convey the PSS ID information of this array in the group map.\n                    ')
eqlMemberShortId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 14, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlMemberShortId.setStatus('current')
if mibBuilder.loadTexts: eqlMemberShortId.setDescription('This field specifies PSS ID of the member in the context of the leader of the PSG.')
eqlMemberEnclosureMgmtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1))
eqlMemberHealthTempSensorHighThreshold = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 1)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthDetailsTemperatureName"), ("EQLMEMBER-MIB", "eqlMemberHealthDetailsTemperatureValue"), ("EQLMEMBER-MIB", "eqlMemberHealthDetailsTemperatureCurrentState"), ("EQLMEMBER-MIB", "eqlMemberHealthDetailsTemperatureHighCriticalThreshold"), ("EQLMEMBER-MIB", "eqlMemberHealthDetailsTemperatureHighWarningThreshold"), ("EQLMEMBER-MIB", "eqlMemberHealthDetailsTemperatureNameID"))
if mibBuilder.loadTexts: eqlMemberHealthTempSensorHighThreshold.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthTempSensorHighThreshold.setDescription('Sent when a high threshold has been exceeded for any of the \n      enclosure temp sensors. The implementation of this trap should \n      not send more than one notification of this type for a sensor \n      in any 10 minute time span')
eqlMemberHealthTempSensorLowThreshold = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 2)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthDetailsTemperatureName"), ("EQLMEMBER-MIB", "eqlMemberHealthDetailsTemperatureValue"), ("EQLMEMBER-MIB", "eqlMemberHealthDetailsTemperatureCurrentState"), ("EQLMEMBER-MIB", "eqlMemberHealthDetailsTemperatureLowCriticalThreshold"), ("EQLMEMBER-MIB", "eqlMemberHealthDetailsTemperatureLowWarningThreshold"), ("EQLMEMBER-MIB", "eqlMemberHealthDetailsTemperatureNameID"))
if mibBuilder.loadTexts: eqlMemberHealthTempSensorLowThreshold.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthTempSensorLowThreshold.setDescription('Sent when a low threshold has been exceeded for any of the \n      enclosure temp sensors. The implementation of this trap should \n      not send more than one notification of this type for a sensor \n      in any 10 minute time span')
eqlMemberHealthFanSpeedHighThreshold = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 3)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthDetailsFanName"), ("EQLMEMBER-MIB", "eqlMemberHealthDetailsFanValue"), ("EQLMEMBER-MIB", "eqlMemberHealthDetailsFanCurrentState"), ("EQLMEMBER-MIB", "eqlMemberHealthDetailsFanHighCriticalThreshold"), ("EQLMEMBER-MIB", "eqlMemberHealthDetailsFanHighWarningThreshold"), ("EQLMEMBER-MIB", "eqlMemberHealthDetailsFanNameID"))
if mibBuilder.loadTexts: eqlMemberHealthFanSpeedHighThreshold.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthFanSpeedHighThreshold.setDescription('Sent when a high threshold has been exceeded for any of the \n      enclosure fan speed sensors. The implementation of this trap should \n      not send more than one notification of this type for a sensor \n      in any 10 minute time span')
eqlMemberHealthFanSpeedLowThreshold = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 4)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthDetailsFanName"), ("EQLMEMBER-MIB", "eqlMemberHealthDetailsFanValue"), ("EQLMEMBER-MIB", "eqlMemberHealthDetailsFanCurrentState"), ("EQLMEMBER-MIB", "eqlMemberHealthDetailsFanLowCriticalThreshold"), ("EQLMEMBER-MIB", "eqlMemberHealthDetailsFanLowWarningThreshold"), ("EQLMEMBER-MIB", "eqlMemberHealthDetailsFanNameID"))
if mibBuilder.loadTexts: eqlMemberHealthFanSpeedLowThreshold.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthFanSpeedLowThreshold.setDescription('Sent when a low threshold has been exceeded for any of the \n      enclosure fan speed sensors. The implementation of this trap should \n      not send more than one notification of this type for a sensor \n      in any 10 minute time span')
eqlMemberHealthPowerSupplyFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 5)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthDetailsPowerSupplyName"), ("EQLMEMBER-MIB", "eqlMemberHealthDetailsPowerSupplyFanStatus"), ("EQLMEMBER-MIB", "eqlMemberHealthDetailsPowerSupplyNameID"))
if mibBuilder.loadTexts: eqlMemberHealthPowerSupplyFanFailure.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthPowerSupplyFanFailure.setDescription('Sent when a failure has been detected on any of the power   \n      supply fan speed sensors. The implementation of this trap should \n      not send more than one notification of this type for a sensor \n      in any 10 minute time span')
eqlMemberHealthPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 6)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthDetailsPowerSupplyName"), ("EQLMEMBER-MIB", "eqlMemberHealthDetailsPowerSupplyCurrentState"), ("EQLMEMBER-MIB", "eqlMemberHealthDetailsPowerSupplyNameID"))
if mibBuilder.loadTexts: eqlMemberHealthPowerSupplyFailure.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthPowerSupplyFailure.setDescription('Sent when a failure has been detected on any of the power   \n      supplys in the PSA. The implementation of this trap should \n      not send more than one notification of this type for a sensor \n      in any 10 minute time span')
eqlMemberHealthRAIDSetDoubleFaulted = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 7)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthStatus"))
if mibBuilder.loadTexts: eqlMemberHealthRAIDSetDoubleFaulted.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthRAIDSetDoubleFaulted.setDescription('Sent when the raid set has been detected to have double faulted. When\n       this occurs, the array will not come up. \n       User intervention is required to correct the issue')
eqlMemberHealthBothFanTraysRemoved = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 8)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthStatus"))
if mibBuilder.loadTexts: eqlMemberHealthBothFanTraysRemoved.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthBothFanTraysRemoved.setDescription('Sent when both of the fan trays have been removed from the \n      chassis. This results in overheating')
eqlMemberHealthRAIDlostCache = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 9)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthStatus"))
if mibBuilder.loadTexts: eqlMemberHealthRAIDlostCache.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthRAIDlostCache.setDescription('Sent because the RAID driver is unable to recover the \n       battery-backed cache.  The disk array will not initialize \n      without user intervention.  See the Handling Lost Data section \n      in the Group Administration manual for more information.')
eqlMemberHealthFanTrayRemoved = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 10)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthStatus"))
if mibBuilder.loadTexts: eqlMemberHealthFanTrayRemoved.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthFanTrayRemoved.setDescription('Sent when one of the fan trays have been removed from the \n      chassis. This results in overheating')
eqlMemberHealthRAIDSetLostBlkTableFull = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 11)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthStatus"))
if mibBuilder.loadTexts: eqlMemberHealthRAIDSetLostBlkTableFull.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthRAIDSetLostBlkTableFull.setDescription('Sent when the RAID lost block table is full. \n       This usually is an indication of lost data.')
eqlMemberHealthBatteryLessThan72Hours = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 12)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthStatus"))
if mibBuilder.loadTexts: eqlMemberHealthBatteryLessThan72Hours.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthBatteryLessThan72Hours.setDescription('Sent when the battery has insufficient charge to survive\n       a 72 hour power outage.')
eqlMemberHealthRaidOrphanCache = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 13)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthStatus"))
if mibBuilder.loadTexts: eqlMemberHealthRaidOrphanCache.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthRaidOrphanCache.setDescription('Sent when the RAID driver finds data in the battery-backed cache with no matching disk array.  Initialization will not proceed without user intervention. Call EqualLogic Support for assistance.')
eqlMemberHealthRaidMultipleRaidSets = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 14)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthStatus"))
if mibBuilder.loadTexts: eqlMemberHealthRaidMultipleRaidSets.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthRaidMultipleRaidSets.setDescription('Sent when multiple valid RAIDsets were found.  The array cannot choose which one to initialize.  Remove all but one valid RAIDset and power-cycle the array.')
eqlMemberHealthNVRAMBatteryFailed = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 15)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthStatus"))
if mibBuilder.loadTexts: eqlMemberHealthNVRAMBatteryFailed.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthNVRAMBatteryFailed.setDescription('Sent when the NVRAM battery fails . The NVRAM can no longer be used.')
eqlMemberHealthhwComponentFailedCrit = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 16)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthStatus"))
if mibBuilder.loadTexts: eqlMemberHealthhwComponentFailedCrit.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthhwComponentFailedCrit.setDescription('Sent when a critical hardware component has failed.')
eqlMemberHealthincompatControlModule = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 17)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthStatus"))
if mibBuilder.loadTexts: eqlMemberHealthincompatControlModule.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthincompatControlModule.setDescription('Sent when An incorrect control module has been inserted into the chassis.')
eqlMemberHealthlowAmbientTemp = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 18)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthStatus"))
if mibBuilder.loadTexts: eqlMemberHealthlowAmbientTemp.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthlowAmbientTemp.setDescription('Sent when one or more sensors is below its critical temperature range.')
eqlMemberHealthopsPanelFailure = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 19)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthStatus"))
if mibBuilder.loadTexts: eqlMemberHealthopsPanelFailure.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthopsPanelFailure.setDescription('Sent when Ops Panel is missing or broken.')
eqlMemberHealthemmLinkFailure = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 20)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthStatus"))
if mibBuilder.loadTexts: eqlMemberHealthemmLinkFailure.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthemmLinkFailure.setDescription('Sent when enclosure management services are unavailable.')
eqlMemberHealthhighBatteryTemperature = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 21)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthStatus"))
if mibBuilder.loadTexts: eqlMemberHealthhighBatteryTemperature.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthhighBatteryTemperature.setDescription('Sent when the cache battery temperature exceeds upper limit; battery charger is disabled.')
eqlMemberHealthenclosureOpenPerm = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 22)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthStatus"))
if mibBuilder.loadTexts: eqlMemberHealthenclosureOpenPerm.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthenclosureOpenPerm.setDescription('Sent when the enclosure is open for a long time.')
eqlMemberHealthsumoChannelBothMissing = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 23)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthStatus"))
if mibBuilder.loadTexts: eqlMemberHealthsumoChannelBothMissing.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthsumoChannelBothMissing.setDescription('Sent when both the Sumo Channel cards go missing.')
eqlMemberHealthsumoEIPFailureCOndition = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 24)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthStatus"))
if mibBuilder.loadTexts: eqlMemberHealthsumoEIPFailureCOndition.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthsumoEIPFailureCOndition.setDescription('Sent when EIP failed in Sumo.')
eqlMemberHealthsumoChannelBothFailed = NotificationType((1, 3, 6, 1, 4, 1, 12740, 2, 2, 1, 25)).setObjects(("EQLMEMBER-MIB", "eqlMemberHealthStatus"))
if mibBuilder.loadTexts: eqlMemberHealthsumoChannelBothFailed.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHealthsumoChannelBothFailed.setDescription('Sent when both the Sumo Channel cards go into failed state.')
eqlDriveGroupTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 15), )
if mibBuilder.loadTexts: eqlDriveGroupTable.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupTable.setDescription('EqualLogic-Persistent Storage Drive Group Table.')
eqlDriveGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 15, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "EQLMEMBER-MIB", "eqlDriveGroupIndex"))
if mibBuilder.loadTexts: eqlDriveGroupEntry.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupEntry.setDescription('An entry (row) containing drive group configuration')
eqlDriveGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 15, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlDriveGroupIndex.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupIndex.setDescription('This field uniquely identifies a RAID Group within a member.')
eqlDriveGroupStoragePoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 15, 1, 2), Unsigned32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDriveGroupStoragePoolIndex.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupStoragePoolIndex.setDescription('This field uniquely identifies a Storage Pool.')
eqlDriveGroupRAIDPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unconfigured", 0), ("raid50", 1), ("raid10", 2), ("raid5", 3), ("raid50-nospares", 4), ("raid10-nospares", 5), ("raid5-nospares", 6), ("raid6", 7), ("raid6-nospares", 8), ("raid6-accelerated", 9), ("hvs-storage", 10))).clone('unconfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDriveGroupRAIDPolicy.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupRAIDPolicy.setDescription('The RAID policy of this drive group:\n                        0 - unconfigured\n                        1 - raid50\n                        2 - raid10\n                        3 - raid5\n                        4 - raid50 with minimal spares\n                        5 - raid10 with minimal spares\n                        6 - raid5 with minimal spares\n                        7 - raid6\n                        8 - raid6 with minimal spares\n                        9 - raid6 with ssd acceleration\n                        10 - hvs storage')
eqlDriveGroupOpsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 16), )
if mibBuilder.loadTexts: eqlDriveGroupOpsTable.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupOpsTable.setDescription('EqualLogic-Persistent Storage Drive Group Operations Table.')
eqlDriveGroupOpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 16, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "EQLMEMBER-MIB", "eqlDriveGroupIndex"), (0, "EQLMEMBER-MIB", "eqlDriveGroupOpsIndex"))
if mibBuilder.loadTexts: eqlDriveGroupOpsEntry.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupOpsEntry.setDescription('An entry (row) containing drive group configuration')
eqlDriveGroupOpsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlDriveGroupOpsIndex.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupOpsIndex.setDescription('This field unique identifies an operation withing a Drive Group.')
eqlDriveGroupOpsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 16, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlDriveGroupOpsRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupOpsRowStatus.setDescription('This field is used indicate the status of this entry.')
eqlDriveGroupOpsOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("movePool", 1), ("vacate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDriveGroupOpsOperation.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupOpsOperation.setDescription('The current operation for this drive group\n                        0 - no operation\n                        1 - move Pool\n                        2 - vacate')
eqlDriveGroupOpsExec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("cancel", 1), ("failed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDriveGroupOpsExec.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupOpsExec.setDescription('The action to perform on this operation\n                        0 - no operation\n                        1 - cancel\n                        2 - the operation failed')
eqlDriveGroupOpsStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 16, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDriveGroupOpsStartTime.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupOpsStartTime.setDescription('This field contains the time of the start of the operation.')
eqlDriveGroupOpsStoragePoolSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 16, 1, 6), Unsigned32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDriveGroupOpsStoragePoolSourceIndex.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupOpsStoragePoolSourceIndex.setDescription('This field unique identifies the source Storage Pool.')
eqlDriveGroupOpsStoragePoolDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 16, 1, 7), Unsigned32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDriveGroupOpsStoragePoolDestinationIndex.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupOpsStoragePoolDestinationIndex.setDescription('This field unique identifies the destination Storage Pool.')
eqlDriveGroupOpsVolBalCommandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 16, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlDriveGroupOpsVolBalCommandIndex.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupOpsVolBalCommandIndex.setDescription('2nd Part of Index for row in eqliscsiVolBalCommandTable')
eqlDriveGroupOpsVolBalCommandiscsiLocalMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 16, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlDriveGroupOpsVolBalCommandiscsiLocalMemberId.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupOpsVolBalCommandiscsiLocalMemberId.setDescription('3rd Part of Index for row in eqliscsiVolBalCommandTable')
eqlAdminAccountMemberTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 17), )
if mibBuilder.loadTexts: eqlAdminAccountMemberTable.setStatus('current')
if mibBuilder.loadTexts: eqlAdminAccountMemberTable.setDescription('EqualLogic-Dynamic table indicating the access an administrator\n                     has to a member.')
eqlAdminAccountMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 17, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLGROUP-MIB", "eqlStorageGroupAdminAccountIndex"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"))
if mibBuilder.loadTexts: eqlAdminAccountMemberEntry.setStatus('current')
if mibBuilder.loadTexts: eqlAdminAccountMemberEntry.setDescription('An entry (row) containing the access privilege.')
eqlAdminAccountMemberAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read-only", 1), ("read-write", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlAdminAccountMemberAccess.setStatus('current')
if mibBuilder.loadTexts: eqlAdminAccountMemberAccess.setDescription('The administrative permission to a member.')
eqlDriveGroupOpsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 18), )
if mibBuilder.loadTexts: eqlDriveGroupOpsStatusTable.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupOpsStatusTable.setDescription('EqualLogic-Dynamic Storage Volume Operations Status Table.')
eqlDriveGroupOpsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 18, 1), )
eqlDriveGroupOpsEntry.registerAugmentions(("EQLMEMBER-MIB", "eqlDriveGroupOpsStatusEntry"))
eqlDriveGroupOpsStatusEntry.setIndexNames(*eqlDriveGroupOpsEntry.getIndexNames())
if mibBuilder.loadTexts: eqlDriveGroupOpsStatusEntry.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupOpsStatusEntry.setDescription('An entry (row) containing status for volume operations.')
eqlDriveGroupOpsStatusCompletePct = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 18, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDriveGroupOpsStatusCompletePct.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupOpsStatusCompletePct.setDescription('The percentage complete an ongoing move or bind operation is')
eqlMemberOpsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 19), )
if mibBuilder.loadTexts: eqlMemberOpsTable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberOpsTable.setDescription('EqualLogic-Persistent Member Operations Table.')
eqlMemberOpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 19, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "EQLMEMBER-MIB", "eqlMemberOpsIndex"))
if mibBuilder.loadTexts: eqlMemberOpsEntry.setStatus('current')
if mibBuilder.loadTexts: eqlMemberOpsEntry.setDescription('An entry (row) containing Member operations configuration.')
eqlMemberOpsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 19, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlMemberOpsIndex.setStatus('current')
if mibBuilder.loadTexts: eqlMemberOpsIndex.setDescription('The field uniquely identifies an operation within a Member.')
eqlMemberOpsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 19, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMemberOpsRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlMemberOpsRowStatus.setDescription('This field is used indicate the status of this entry.')
eqlMemberOpsOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 0), ("diagnose", 3), ("update", 4), ("restart", 5), ("shutdown", 6), ("delete-pending", 7), ("install-software-component", 8), ("cli-update", 9))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMemberOpsOperation.setStatus('current')
if mibBuilder.loadTexts: eqlMemberOpsOperation.setDescription('The current operation for this Member\n                        0 - no operation\n                        3 - get diagnostics\n                        4 - firmware update\n                        5 - restart array\n                        6 - shutdown array\n                        7 - delete old update kit (deprecated, use eqlMemberDynamicOps instead)\n                        8 - install software component\n                        9 - update from the cli\n                        ')
eqlMemberOpsExec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("cancel", 1), ("failed", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMemberOpsExec.setStatus('current')
if mibBuilder.loadTexts: eqlMemberOpsExec.setDescription('The action to perform on this operation\n                        0 - no operation\n                        1 - cancel')
eqlMemberOpsCompletePct = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 19, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMemberOpsCompletePct.setStatus('current')
if mibBuilder.loadTexts: eqlMemberOpsCompletePct.setDescription('The percentage complete an ongoing diag operation is')
eqlMemberOpsOperationArg = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 19, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMemberOpsOperationArg.setStatus('current')
if mibBuilder.loadTexts: eqlMemberOpsOperationArg.setDescription('This field specifies the argument for the operation.\n                                         There is no default.')
eqlMemberOpsOperationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("success", 0), ("failure", 1))).clone('success')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMemberOpsOperationStatus.setStatus('current')
if mibBuilder.loadTexts: eqlMemberOpsOperationStatus.setDescription(' The status of the operation.')
eqlMemberOpsStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 19, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlMemberOpsStartTime.setStatus('current')
if mibBuilder.loadTexts: eqlMemberOpsStartTime.setDescription('This field contains the time of the start of the operation.')
eqlMemberOpsOperationArg1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 19, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMemberOpsOperationArg1.setStatus('current')
if mibBuilder.loadTexts: eqlMemberOpsOperationArg1.setDescription('This field specifies the additional argument(s) for the operation.\n                                         There is no default.')
eqlMemberHWComponentTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 20), )
if mibBuilder.loadTexts: eqlMemberHWComponentTable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHWComponentTable.setDescription('EqualLogic-Dynamic Member Hardware component table. This is the general place holder for all single hardware components on the member. If there is more than one such hardware component(controllers, channel cards), they go into their own table. Otherwise they end up in this table.')
eqlMemberHWComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 20, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "EQLMEMBER-MIB", "eqlMemberHWComponentIndex"))
if mibBuilder.loadTexts: eqlMemberHWComponentEntry.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHWComponentEntry.setDescription('An entry (row) containing member health detailed fan info')
eqlMemberHWComponentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("eip", 1))))
if mibBuilder.loadTexts: eqlMemberHWComponentIndex.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHWComponentIndex.setDescription('A unique integer that identifies the fan that the\n                     corresponding entry refers to\n                     ')
eqlMemberHWComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 20, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHWComponentName.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHWComponentName.setDescription('This field specifies the name of the component.')
eqlMemberHWComponentSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 20, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHWComponentSerialNumber.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHWComponentSerialNumber.setDescription('This field specifies the serial number of the component.')
eqlMemberHWComponentFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 20, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHWComponentFirmwareRev.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHWComponentFirmwareRev.setDescription('This field specifies the firmware revision of the component.')
eqlMemberHWComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("not-present", 1), ("failed", 2), ("good", 3))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHWComponentStatus.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHWComponentStatus.setDescription('This field specifies the status of the component.')
eqlMemberDynamicInfoTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 21), )
if mibBuilder.loadTexts: eqlMemberDynamicInfoTable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberDynamicInfoTable.setDescription('EqualLogic-Dynamic Member Info Table')
eqlMemberDynamicInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 21, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"))
if mibBuilder.loadTexts: eqlMemberDynamicInfoEntry.setStatus('current')
if mibBuilder.loadTexts: eqlMemberDynamicInfoEntry.setDescription('An entry (row) containing dynamic member info ')
eqlMemberDynamicInfoPendingUpdateVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 21, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberDynamicInfoPendingUpdateVersion.setStatus('current')
if mibBuilder.loadTexts: eqlMemberDynamicInfoPendingUpdateVersion.setDescription("This field specifies the string to be read.\n                                     To be used to send the member's pending update version.\n                                         ")
eqlMemberDynamicInfoIsRestartRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-running", 0), ("running", 1))).clone('not-running')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberDynamicInfoIsRestartRunning.setStatus('current')
if mibBuilder.loadTexts: eqlMemberDynamicInfoIsRestartRunning.setDescription('This field specifies the status of the reboot shell script.')
eqlMemberDynamicInfoIsUpdateRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-running", 0), ("running", 1))).clone('not-running')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberDynamicInfoIsUpdateRunning.setStatus('current')
if mibBuilder.loadTexts: eqlMemberDynamicInfoIsUpdateRunning.setDescription('This field specifies the status of the update shell script.')
eqlMemberCacheStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 22), )
if mibBuilder.loadTexts: eqlMemberCacheStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberCacheStatisticsTable.setDescription('EqualLogic-Dynamic member cache statistics table')
eqlMemberCacheStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 22, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"))
if mibBuilder.loadTexts: eqlMemberCacheStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: eqlMemberCacheStatisticsEntry.setDescription('An entry (row) containing member cache statistics info ')
eqlMemberTotalPageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 22, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberTotalPageCount.setStatus('current')
if mibBuilder.loadTexts: eqlMemberTotalPageCount.setDescription('This field specifies the total count of pages on the storage array')
eqlMemberHotPageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 22, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberHotPageCount.setStatus('current')
if mibBuilder.loadTexts: eqlMemberHotPageCount.setDescription('This field specifies count of most frequently accessed pages on the storage array')
eqlMemberWarmPageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 22, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberWarmPageCount.setStatus('current')
if mibBuilder.loadTexts: eqlMemberWarmPageCount.setDescription('This field specifies count of moderately accessed pages on the storage array')
eqlMemberColdPageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 22, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberColdPageCount.setStatus('current')
if mibBuilder.loadTexts: eqlMemberColdPageCount.setDescription('This field specifies count of pages not currently being accessed on the storage array')
eqlMemberPageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 22, 1, 5), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberPageSize.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPageSize.setDescription('This field specifies size of an IOM page')
eqlMemberSSDAcceleratorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 22, 1, 6), Unsigned32()).setUnits('GB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberSSDAcceleratorSize.setStatus('current')
if mibBuilder.loadTexts: eqlMemberSSDAcceleratorSize.setDescription('This field specifies amount of space reserved for mapping writes to SSD')
eqlMemberSSDCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 22, 1, 7), Unsigned32()).setUnits('GB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberSSDCacheSize.setStatus('current')
if mibBuilder.loadTexts: eqlMemberSSDCacheSize.setDescription('This field specifies SSD RAID LUN')
eqlMemberSSDAcceleratorEntriesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 22, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberSSDAcceleratorEntriesTotal.setStatus('current')
if mibBuilder.loadTexts: eqlMemberSSDAcceleratorEntriesTotal.setDescription("This field specifies the total number of i/o's that can be mapped to SSD space")
eqlMemberSSDAcceleratorEntriesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 22, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberSSDAcceleratorEntriesUsed.setStatus('current')
if mibBuilder.loadTexts: eqlMemberSSDAcceleratorEntriesUsed.setDescription("This field specifies number of i/o's that are currently mapped to SSD space")
eqlMemberSEDEncryptionTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 23), )
if mibBuilder.loadTexts: eqlMemberSEDEncryptionTable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberSEDEncryptionTable.setDescription('EqualLogic-Dynamic member encryption shares for SED disks')
eqlMemberSEDEncryptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 23, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"))
if mibBuilder.loadTexts: eqlMemberSEDEncryptionEntry.setStatus('current')
if mibBuilder.loadTexts: eqlMemberSEDEncryptionEntry.setDescription('An entry (row) containing SED Encryption Key info ')
eqlMemberSEDEncryptionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 23, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMemberSEDEncryptionRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlMemberSEDEncryptionRowStatus.setDescription('This field is used indicate the status of this entry.')
eqlMemberSEDEncryptionShare1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 23, 1, 2), EqlMemberSEDShareType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMemberSEDEncryptionShare1.setStatus('current')
if mibBuilder.loadTexts: eqlMemberSEDEncryptionShare1.setDescription('This field is for the first retrieved SED backup key.')
eqlMemberSEDEncryptionShare2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 23, 1, 3), EqlMemberSEDShareType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMemberSEDEncryptionShare2.setStatus('current')
if mibBuilder.loadTexts: eqlMemberSEDEncryptionShare2.setDescription('This field is for the second retrieved SED backup key.')
eqlMemberSEDEncryptionShare3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 23, 1, 4), EqlMemberSEDShareType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMemberSEDEncryptionShare3.setStatus('current')
if mibBuilder.loadTexts: eqlMemberSEDEncryptionShare3.setDescription('This field is for the third retrieved SED backup key.')
eqlMemberDynamicOpsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 24), )
if mibBuilder.loadTexts: eqlMemberDynamicOpsTable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberDynamicOpsTable.setDescription('EqualLogic-Dynamic Member Operations Table.\n                   This table is for member operations that do not require persistent storage.\n                   Rows in this table should be used instead of eqlMemberOps.')
eqlMemberDynamicOpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 24, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "EQLMEMBER-MIB", "eqlMemberDynamicOpsOperation"))
if mibBuilder.loadTexts: eqlMemberDynamicOpsEntry.setStatus('current')
if mibBuilder.loadTexts: eqlMemberDynamicOpsEntry.setDescription('An entry (row) containing Member operations configuration.')
eqlMemberDynamicOpsOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 7))).clone(namedValues=NamedValues(("none", 0), ("delete-pending", 7))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMemberDynamicOpsOperation.setStatus('current')
if mibBuilder.loadTexts: eqlMemberDynamicOpsOperation.setDescription('The current operation for this Member\n                        0 - no operation\n                        1 - delete old update kit\n                        ')
eqlMemberDynamicOpsOperationArg = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 24, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlMemberDynamicOpsOperationArg.setStatus('current')
if mibBuilder.loadTexts: eqlMemberDynamicOpsOperationArg.setDescription('This field specifies the argument for the operation.\n                                         There is no default.')
eqlMemberGroupInfoAtMemberTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 25), )
if mibBuilder.loadTexts: eqlMemberGroupInfoAtMemberTable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberGroupInfoAtMemberTable.setDescription('EqualLogic-Persistent Member Group Info Known At Member Table')
eqlMemberGroupInfoAtMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 25, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"))
if mibBuilder.loadTexts: eqlMemberGroupInfoAtMemberEntry.setStatus('current')
if mibBuilder.loadTexts: eqlMemberGroupInfoAtMemberEntry.setDescription('An entry (row) containing Group info that in-use at this Member.')
eqlMemberGroupInfoAtMemberPasswd1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 25, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberGroupInfoAtMemberPasswd1.setStatus('current')
if mibBuilder.loadTexts: eqlMemberGroupInfoAtMemberPasswd1.setDescription('The eqlGroupPasswd1 value that is currently in-use at this Member.\n        Used by PSGD to insure that all Members are using the same eqlGroupPasswd1 value\n        before deleting the backup password.  Not null-terminated.  Not printable characters.')
eqlMemberGroupInfoAtMemberPasswd1Len = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 25, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberGroupInfoAtMemberPasswd1Len.setStatus('current')
if mibBuilder.loadTexts: eqlMemberGroupInfoAtMemberPasswd1Len.setDescription('The number of octets in eqlMemberGroupInfoAtMemberPasswd1.')
eqlDriveGroupStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 26), )
if mibBuilder.loadTexts: eqlDriveGroupStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupStatisticsTable.setDescription('EqualLogic-Dynamic Storage Drive Group Statistics Table.')
eqlDriveGroupStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 26, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "EQLMEMBER-MIB", "eqlDriveGroupStatisticsIndex"))
if mibBuilder.loadTexts: eqlDriveGroupStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupStatisticsEntry.setDescription('An entry (row) containing drive group statistics.')
eqlDriveGroupStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 26, 1, 1), Integer32())
if mibBuilder.loadTexts: eqlDriveGroupStatisticsIndex.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupStatisticsIndex.setDescription('This field uniquely identifies a RAID Group within a member.')
eqlDriveGroupStatisticsHeadroom = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 26, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDriveGroupStatisticsHeadroom.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupStatisticsHeadroom.setDescription('This field is the recent, estimated, and smoothed percentage by which the RAID Group is not utilized.')
eqlMemberFirmwareInfoTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 27), )
if mibBuilder.loadTexts: eqlMemberFirmwareInfoTable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberFirmwareInfoTable.setDescription('EqualLogic-Dynamic Member Info Table ')
eqlMemberFirmwareInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 27, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"))
if mibBuilder.loadTexts: eqlMemberFirmwareInfoEntry.setStatus('current')
if mibBuilder.loadTexts: eqlMemberFirmwareInfoEntry.setDescription('An entry (row) containing member info')
eqlMemberLanguageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 27, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberLanguageVersion.setStatus('current')
if mibBuilder.loadTexts: eqlMemberLanguageVersion.setDescription('This field specifies the installed language kit version')
eqlMemberFirmwareInfoDataReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("disabled", 1), ("no-capable-hardware", 2), ("no-capable-raid", 3), ("compression-running", 4), ("compression-paused", 5))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlMemberFirmwareInfoDataReduction.setStatus('current')
if mibBuilder.loadTexts: eqlMemberFirmwareInfoDataReduction.setDescription('Current form of data reduction to be used on the member.  \n                       The member must support the requested value in order for it to be set.')
eqlDriveGroupHeatProfileInfoTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 28), )
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileInfoTable.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileInfoTable.setDescription('EqualLogic-Dynamic Storage Drive Group Heat-Profile Information Table.')
eqlDriveGroupHeatProfileInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 28, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "EQLMEMBER-MIB", "eqlDriveGroupStatisticsIndex"), (0, "EQLMEMBER-MIB", "eqlDriveGroupHeatProfilePart"))
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileInfoEntry.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileInfoEntry.setDescription('An entry (row) identifying a per-drive-group heat profile.')
eqlDriveGroupHeatProfilePart = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 28, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlDriveGroupHeatProfilePart.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupHeatProfilePart.setDescription('If 1, the entire drive group, otherwise a part (possibly the only part).')
eqlDriveGroupHeatProfileColdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 28, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileColdCount.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileColdCount.setDescription('The number of cold pages.')
eqlDriveGroupHeatProfileMinMagnitude = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 28, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileMinMagnitude.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileMinMagnitude.setDescription('The minimum access-rate magnitude.  An access-rate magnitude is the rounded-down-to-integer logarithm base 2 of the access rate in accesses per second.')
eqlDriveGroupHeatProfileMinMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 28, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileMinMultiplier.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileMinMultiplier.setDescription('The minimum access-rate multiplier for the minimum access-rate magnitude.  An access-rate multiplier is the fractional 32 bits added to 1.0 to constitute a multiplier, which when multiplied by 2 to the access-rate magnitude yields the access-rate floor of a bin of the histogram that is the heat profile.')
eqlDriveGroupHeatProfileMaxMagnitude = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 28, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileMaxMagnitude.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileMaxMagnitude.setDescription('The maximum access-rate magnitude.')
eqlDriveGroupHeatProfileMaxMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 28, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileMaxMultiplier.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileMaxMultiplier.setDescription('The maximum access-rate multiplier for the maximum access-rate magnitude.')
eqlDriveGroupHeatProfileBinTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 29), )
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileBinTable.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileBinTable.setDescription('EqualLogic-Dynamic Storage Drive Group Heat-Profile-Histogram Bins Table.')
eqlDriveGroupHeatProfileBinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 29, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "EQLMEMBER-MIB", "eqlDriveGroupStatisticsIndex"), (0, "EQLMEMBER-MIB", "eqlDriveGroupHeatProfilePart"), (0, "EQLMEMBER-MIB", "eqlDriveGroupHeatProfileBinId"))
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileBinEntry.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileBinEntry.setDescription('An entry (row) representing one bin in the heat-profile histogram, telling how many pages covered by the heat profile have at least a certain access rate.')
eqlDriveGroupHeatProfileBinId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 29, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileBinId.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileBinId.setDescription('The identifier of the bin.')
eqlDriveGroupHeatProfileAccessRateMagnitude = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 29, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileAccessRateMagnitude.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileAccessRateMagnitude.setDescription('The access-rate magnitude (cf. eqlDriveGroupHeatProfileMinMagnitude) for the bin.')
eqlDriveGroupHeatProfileAccessRateMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 29, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileAccessRateMultiplier.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileAccessRateMultiplier.setDescription('The access-rate multiplier (cf. eqlDriveGroupHeatProfileMinMultiplier) for the bin.')
eqlDriveGroupHeatProfileCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 29, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileCount.setStatus('current')
if mibBuilder.loadTexts: eqlDriveGroupHeatProfileCount.setDescription('The number of pages having the access-rate floor of the bin.')
eqlTaggedHeatProfileInfoTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 30), )
if mibBuilder.loadTexts: eqlTaggedHeatProfileInfoTable.setStatus('current')
if mibBuilder.loadTexts: eqlTaggedHeatProfileInfoTable.setDescription('EqualLogic-Dynamic Storage Tagged Heat-Profile Information Table.')
eqlTaggedHeatProfileInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 30, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "EQLMEMBER-MIB", "eqlTaggedHeatTag"))
if mibBuilder.loadTexts: eqlTaggedHeatProfileInfoEntry.setStatus('current')
if mibBuilder.loadTexts: eqlTaggedHeatProfileInfoEntry.setDescription('An entry (row) identifying a quasi-per-volume heat profile.')
eqlTaggedHeatTag = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 30, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlTaggedHeatTag.setStatus('current')
if mibBuilder.loadTexts: eqlTaggedHeatTag.setDescription('A tag identifying a heat profile that could apply to internal non-volume page usage, internal-volume usage, or external-volume usage.  User volumes have tags of 128 or higher.')
eqlTaggedHeatProfileColdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 30, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlTaggedHeatProfileColdCount.setStatus('current')
if mibBuilder.loadTexts: eqlTaggedHeatProfileColdCount.setDescription('The number of cold pages.')
eqlTaggedHeatProfileMinMagnitude = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 30, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlTaggedHeatProfileMinMagnitude.setStatus('current')
if mibBuilder.loadTexts: eqlTaggedHeatProfileMinMagnitude.setDescription('The minimum access-rate magnitude.  An access-rate magnitude is the rounded-down-to-integer logarithm base 2 of the access rate in accesses per second.')
eqlTaggedHeatProfileMinMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 30, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlTaggedHeatProfileMinMultiplier.setStatus('current')
if mibBuilder.loadTexts: eqlTaggedHeatProfileMinMultiplier.setDescription('The minimum access-rate multiplier for the minimum access-rate magnitude.  An access-rate multiplier is the fractional 32 bits added to 1.0 to constitute a multiplier, which when multiplied by 2 to the access-rate magnitude yields the access-rate floor of a bin of the histogram that is the heat profile.')
eqlTaggedHeatProfileMaxMagnitude = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 30, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlTaggedHeatProfileMaxMagnitude.setStatus('current')
if mibBuilder.loadTexts: eqlTaggedHeatProfileMaxMagnitude.setDescription('The maximum access-rate magnitude.')
eqlTaggedHeatProfileMaxMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 30, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlTaggedHeatProfileMaxMultiplier.setStatus('current')
if mibBuilder.loadTexts: eqlTaggedHeatProfileMaxMultiplier.setDescription('The maximum access-rate multiplier for the maximum access-rate magnitude.')
eqlTaggedHeatProfileBinTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 31), )
if mibBuilder.loadTexts: eqlTaggedHeatProfileBinTable.setStatus('current')
if mibBuilder.loadTexts: eqlTaggedHeatProfileBinTable.setDescription('EqualLogic-Dynamic Storage Tagged Heat-Profile-Histogram Bins Table.')
eqlTaggedHeatProfileBinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 31, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "EQLMEMBER-MIB", "eqlTaggedHeatTag"), (0, "EQLMEMBER-MIB", "eqlTaggedHeatProfileBinId"))
if mibBuilder.loadTexts: eqlTaggedHeatProfileBinEntry.setStatus('current')
if mibBuilder.loadTexts: eqlTaggedHeatProfileBinEntry.setDescription('An entry (row) representing one bin in the quasi-per-volume heat-profile histogram, telling how many pages covered by the heat profile have at least a certain access rate.')
eqlTaggedHeatProfileBinId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 31, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlTaggedHeatProfileBinId.setStatus('current')
if mibBuilder.loadTexts: eqlTaggedHeatProfileBinId.setDescription('The identifier of the bin.')
eqlTaggedHeatProfileAccessRateMagnitude = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 31, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlTaggedHeatProfileAccessRateMagnitude.setStatus('current')
if mibBuilder.loadTexts: eqlTaggedHeatProfileAccessRateMagnitude.setDescription('The access-rate magnitude (cf. eqlTaggedHeatProfileMinMagnitude) for the bin.')
eqlTaggedHeatProfileAccessRateMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 31, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlTaggedHeatProfileAccessRateMultiplier.setStatus('current')
if mibBuilder.loadTexts: eqlTaggedHeatProfileAccessRateMultiplier.setDescription('The access-rate multiplier (cf. eqlTaggedHeatProfileMinMultiplier) for the bin.')
eqlTaggedHeatProfileCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 31, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlTaggedHeatProfileCount.setStatus('current')
if mibBuilder.loadTexts: eqlTaggedHeatProfileCount.setDescription('The number of pages having the access-rate floor of the bin.')
eqlMemberRaidPoliciesTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 32), )
if mibBuilder.loadTexts: eqlMemberRaidPoliciesTable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberRaidPoliciesTable.setDescription('EqualLogic-Dynamic Member Raid Policies Table.')
eqlMemberRaidPoliciesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 32, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "EQLMEMBER-MIB", "eqlDriveGroupRAIDPolicy"))
if mibBuilder.loadTexts: eqlMemberRaidPoliciesEntry.setStatus('current')
if mibBuilder.loadTexts: eqlMemberRaidPoliciesEntry.setDescription('An entry (row) represents a RAID policy.')
eqlMemberRaidPoliciesBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 32, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("always", 1), ("never", 2), ("cli", 3), ("cliSanHQ", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberRaidPoliciesBehavior.setStatus('current')
if mibBuilder.loadTexts: eqlMemberRaidPoliciesBehavior.setDescription('The behavior to be followed for this RAID policy based on the current\n\t\t     RAID policy, the effective drive capacity and the platform.\n\t\t     Behavior always means the RAID policy is always configurable.\n\t\t     Behavior never means the RAID policy is never configurable.\n\t\t     Behavior cli means the RAID policy is configurable via CLI only.\n\t\t     Behavior cliSanHQ means the RAID policy is configurable via CLI only and\n\t\t          SanHQ will monitor and report on its usage.')
eqlMemberRaidPoliciesRAIDCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 32, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberRaidPoliciesRAIDCapacity.setStatus('current')
if mibBuilder.loadTexts: eqlMemberRaidPoliciesRAIDCapacity.setDescription('The estimated RAID capacity in mega-bytes of the RAID set if using this RAID policy.')
eqlMemberPerTCPConnectionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 2, 1, 33), )
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsTable.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsTable.setDescription('EqualLogic-Dynamic Storage Member Per TCP Connection Statistics Table.')
eqlMemberPerTCPConnectionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 2, 1, 33, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "EQLMEMBER-MIB", "eqlMemberPerTCPConnectionStatsIndex"))
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsEntry.setDescription("An entry (row) of a member's per TCP connection statistics.")
eqlMemberPerTCPConnectionStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 33, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsIndex.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsIndex.setDescription('An arbitrary integer used to uniquely identify a\n     particular connection. The index may change between requests.')
eqlMemberPerTCPConnectionStatsLocalAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 33, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsLocalAddrType.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsLocalAddrType.setDescription('The local IP address type (ipv4 or ipv6) of the connection.')
eqlMemberPerTCPConnectionStatsLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 33, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsLocalAddr.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsLocalAddr.setDescription('The local IP address of the connection.')
eqlMemberPerTCPConnectionStatsLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 33, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsLocalPort.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsLocalPort.setDescription('The local port of the connection.')
eqlMemberPerTCPConnectionStatsForeignAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 33, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsForeignAddrType.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsForeignAddrType.setDescription('The foreign IP address type(ipv4 or ipv6) of the connection.')
eqlMemberPerTCPConnectionStatsForeignAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 33, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsForeignAddr.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsForeignAddr.setDescription('The foreign IP address of the connection.')
eqlMemberPerTCPConnectionStatsForeignPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 33, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsForeignPort.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsForeignPort.setDescription('The foreign port of the connection.')
eqlMemberPerTCPConnectionStatsMss = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 33, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsMss.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsMss.setDescription('The TCP maximum segment size.')
eqlMemberPerTCPConnectionStatsState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 33, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("tcps-closed", 0), ("tcps-listen", 1), ("tcps-syn-sent", 2), ("tcps-syn-received", 3), ("tcps-established", 4), ("tcps-close-wait", 5), ("tcps-fin-wait1", 6), ("tcps-closing", 7), ("tcps-last-ack", 8), ("tcps-fin-wait2", 9), ("tcps-time-wait", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsState.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsState.setDescription('The TCP state of the connection.')
eqlMemberPerTCPConnectionStatsSndpack = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 33, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsSndpack.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsSndpack.setDescription('The number of data packets sent.')
eqlMemberPerTCPConnectionStatsSndbyte = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 33, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsSndbyte.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsSndbyte.setDescription('The number of data bytes sent.')
eqlMemberPerTCPConnectionStatsSndrexmitpack = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 33, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsSndrexmitpack.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsSndrexmitpack.setDescription('The number of data packets retransmitted.')
eqlMemberPerTCPConnectionStatsSndrexmitbyte = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 33, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsSndrexmitbyte.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsSndrexmitbyte.setDescription('The number of data bytes retransmitted.')
eqlMemberPerTCPConnectionStatsRexmttimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 33, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsRexmttimeout.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsRexmttimeout.setDescription('The number of retransmit timeouts(slow start counter).')
eqlMemberPerTCPConnectionStatsFastrexmt = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 33, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsFastrexmt.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsFastrexmt.setDescription('The number of fast retransmits.')
eqlMemberPerTCPConnectionStatsSndprobe = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 33, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsSndprobe.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsSndprobe.setDescription('The number of window probes sent.')
eqlMemberPerTCPConnectionStatsRcvpack = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 33, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsRcvpack.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsRcvpack.setDescription('The number of packets received in sequence.')
eqlMemberPerTCPConnectionStatsRcvbyte = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 33, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsRcvbyte.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsRcvbyte.setDescription('The number of bytes received in sequence.')
eqlMemberPerTCPConnectionStatsRcvwinprobe = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 33, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsRcvwinprobe.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsRcvwinprobe.setDescription('The number of received window probe packets.')
eqlMemberPerTCPConnectionStatsRcvbadsum = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 2, 1, 33, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsRcvbadsum.setStatus('current')
if mibBuilder.loadTexts: eqlMemberPerTCPConnectionStatsRcvbadsum.setDescription('The number of packets received with checksum errors.')
mibBuilder.exportSymbols("EQLMEMBER-MIB", eqlMemberHealthFanTrayRemoved=eqlMemberHealthFanTrayRemoved, eqlMemberDynamicInfoPendingUpdateVersion=eqlMemberDynamicInfoPendingUpdateVersion, eqlTaggedHeatProfileAccessRateMagnitude=eqlTaggedHeatProfileAccessRateMagnitude, eqlMemberRaidProgress=eqlMemberRaidProgress, eqlMemberHealthDetailsTemperatureHighWarningThreshold=eqlMemberHealthDetailsTemperatureHighWarningThreshold, eqlMemberDefaultInetRouteType=eqlMemberDefaultInetRouteType, eqlMemberIdentificationTable=eqlMemberIdentificationTable, eqlDriveGroupOpsStoragePoolSourceIndex=eqlDriveGroupOpsStoragePoolSourceIndex, eqlDriveGroupHeatProfileColdCount=eqlDriveGroupHeatProfileColdCount, eqlMemberHealthTempSensorLowThreshold=eqlMemberHealthTempSensorLowThreshold, eqlMemberHealthDetailsTemperatureNameID=eqlMemberHealthDetailsTemperatureNameID, eqlTaggedHeatProfileMinMagnitude=eqlTaggedHeatProfileMinMagnitude, eqlMemberHealthTable=eqlMemberHealthTable, eqlMemberRaidPoliciesEntry=eqlMemberRaidPoliciesEntry, eqlMemberControllerType=eqlMemberControllerType, eqlMemberNumberOfExtConnections=eqlMemberNumberOfExtConnections, eqlDriveGroupOpsRowStatus=eqlDriveGroupOpsRowStatus, eqlMemberTotalStorage=eqlMemberTotalStorage, eqlMemberLanguageVersion=eqlMemberLanguageVersion, eqlMemberIdentificationEntry=eqlMemberIdentificationEntry, eqlMemberStatusTrayOneFanTwoSpeed=eqlMemberStatusTrayOneFanTwoSpeed, eqlTargetMemberIndex=eqlTargetMemberIndex, eqlMemberOpsIndex=eqlMemberOpsIndex, eqlMemberHealthDetailsPowerSupplyNameID=eqlMemberHealthDetailsPowerSupplyNameID, eqlDriveGroupHeatProfileMinMultiplier=eqlDriveGroupHeatProfileMinMultiplier, eqlMemberNumberOfConnections=eqlMemberNumberOfConnections, EqlMemberSEDShareType=EqlMemberSEDShareType, eqlMemberDynamicInfoTable=eqlMemberDynamicInfoTable, eqlMemberPageSize=eqlMemberPageSize, eqlMemberRowStatus=eqlMemberRowStatus, eqlMemberHealthDetailsPowerSupplyEntry=eqlMemberHealthDetailsPowerSupplyEntry, eqlMemberHealthBothFanTraysRemoved=eqlMemberHealthBothFanTraysRemoved, eqlMemberHealthDetailsFanHighCriticalThreshold=eqlMemberHealthDetailsFanHighCriticalThreshold, eqlMemberHealthDetailsPowerSupplyFirmwareVersion=eqlMemberHealthDetailsPowerSupplyFirmwareVersion, eqlMemberControllerMaintenanceVersion=eqlMemberControllerMaintenanceVersion, eqlMemberInfoTable=eqlMemberInfoTable, eqlMemberChassisDiskSectorSize=eqlMemberChassisDiskSectorSize, eqlmemberConformance=eqlmemberConformance, eqlMemberName=eqlMemberName, eqlMemberInfoEntry=eqlMemberInfoEntry, eqlMemberHealthDetailsPowerSupplyTable=eqlMemberHealthDetailsPowerSupplyTable, eqlMemberDynamicOpsOperationArg=eqlMemberDynamicOpsOperationArg, eqlDriveGroupHeatProfileBinEntry=eqlDriveGroupHeatProfileBinEntry, eqlMemberColdPageCount=eqlMemberColdPageCount, eqlMemberHealthDetailsFanLowCriticalThreshold=eqlMemberHealthDetailsFanLowCriticalThreshold, eqlMemberStatusTempStatus=eqlMemberStatusTempStatus, eqlMemberReadAvgLatency=eqlMemberReadAvgLatency, eqlMemberHWComponentName=eqlMemberHWComponentName, eqlMemberCacheStatisticsTable=eqlMemberCacheStatisticsTable, eqlMemberHealthDetailsTemperatureEntry=eqlMemberHealthDetailsTemperatureEntry, eqlMemberStorageTable=eqlMemberStorageTable, eqlMemberServiceTag=eqlMemberServiceTag, eqlMemberDescription=eqlMemberDescription, eqlMemberStatusShortId=eqlMemberStatusShortId, eqlDriveGroupTable=eqlDriveGroupTable, eqlMemberPerTCPConnectionStatsSndrexmitpack=eqlMemberPerTCPConnectionStatsSndrexmitpack, eqlMemberPerTCPConnectionStatsTable=eqlMemberPerTCPConnectionStatsTable, eqlMemberPolicySingleControllerSafe=eqlMemberPolicySingleControllerSafe, eqlDriveGroupHeatProfileBinTable=eqlDriveGroupHeatProfileBinTable, eqlMemberHealthDetailsPowerSupplyIndex=eqlMemberHealthDetailsPowerSupplyIndex, eqlMemberHealthFanSpeedHighThreshold=eqlMemberHealthFanSpeedHighThreshold, eqlMemberDynamicInfoIsUpdateRunning=eqlMemberDynamicInfoIsUpdateRunning, eqlMemberOpsTable=eqlMemberOpsTable, eqlmemberModule=eqlmemberModule, eqlMemberGroupInfoAtMemberEntry=eqlMemberGroupInfoAtMemberEntry, eqlMemberHealthDetailsFanHighWarningThreshold=eqlMemberHealthDetailsFanHighWarningThreshold, eqlMemberIdentificationLEDsBlinking=eqlMemberIdentificationLEDsBlinking, eqlMemberNumberOfControllers=eqlMemberNumberOfControllers, eqlMemberPerTCPConnectionStatsSndpack=eqlMemberPerTCPConnectionStatsSndpack, eqlMemberPerTCPConnectionStatsSndprobe=eqlMemberPerTCPConnectionStatsSndprobe, eqlMemberPolicyLowBatterySafe=eqlMemberPolicyLowBatterySafe, eqlMemberDynamicInfoIsRestartRunning=eqlMemberDynamicInfoIsRestartRunning, eqlMemberControllerMajorVersion=eqlMemberControllerMajorVersion, eqlMemberPerTCPConnectionStatsLocalAddrType=eqlMemberPerTCPConnectionStatsLocalAddrType, eqlMemberPerTCPConnectionStatsState=eqlMemberPerTCPConnectionStatsState, eqlDriveGroupStoragePoolIndex=eqlDriveGroupStoragePoolIndex, eqlMemberPerTCPConnectionStatsForeignAddr=eqlMemberPerTCPConnectionStatsForeignAddr, eqlMemberStatusBackplaneTempSensor2=eqlMemberStatusBackplaneTempSensor2, eqlMemberHealthopsPanelFailure=eqlMemberHealthopsPanelFailure, eqlMemberStatusRaidStatus=eqlMemberStatusRaidStatus, eqlDriveGroupHeatProfileAccessRateMultiplier=eqlDriveGroupHeatProfileAccessRateMultiplier, eqlMemberHealthlowAmbientTemp=eqlMemberHealthlowAmbientTemp, eqlMemberHWComponentEntry=eqlMemberHWComponentEntry, eqlMemberStatusNumberOfConnections=eqlMemberStatusNumberOfConnections, eqlMemberTxData=eqlMemberTxData, eqlMemberProductFamily=eqlMemberProductFamily, eqlMemberStatusTrayTwoFanOneSpeed=eqlMemberStatusTrayTwoFanOneSpeed, eqlMemberConnTable=eqlMemberConnTable, eqlDriveGroupStatisticsEntry=eqlDriveGroupStatisticsEntry, eqlMemberRaidPercentage=eqlMemberRaidPercentage, eqlMemberOpsOperationArg=eqlMemberOpsOperationArg, eqlMemberHealthDetailsFanValue=eqlMemberHealthDetailsFanValue, eqlMemberSEDEncryptionRowStatus=eqlMemberSEDEncryptionRowStatus, eqlMemberPerTCPConnectionStatsForeignAddrType=eqlMemberPerTCPConnectionStatsForeignAddrType, eqlMemberStatusModel=eqlMemberStatusModel, eqlMemberOpsStartTime=eqlMemberOpsStartTime, eqlMemberHealthemmLinkFailure=eqlMemberHealthemmLinkFailure, eqlMemberGroupInfoAtMemberPasswd1=eqlMemberGroupInfoAtMemberPasswd1, eqlMemberHealthRaidMultipleRaidSets=eqlMemberHealthRaidMultipleRaidSets, eqlMemberHealthNVRAMBatteryFailed=eqlMemberHealthNVRAMBatteryFailed, eqlMemberHealthenclosureOpenPerm=eqlMemberHealthenclosureOpenPerm, eqlDriveGroupHeatProfileInfoEntry=eqlDriveGroupHeatProfileInfoEntry, eqlMemberRaidPoliciesRAIDCapacity=eqlMemberRaidPoliciesRAIDCapacity, eqlMemberStatusPowerSupplyTwoFanStatus=eqlMemberStatusPowerSupplyTwoFanStatus, eqlMemberHealthEntry=eqlMemberHealthEntry, eqlMemberRaidPoliciesBehavior=eqlMemberRaidPoliciesBehavior, eqlMemberWriteOpCount=eqlMemberWriteOpCount, eqlMemberSSDCacheSize=eqlMemberSSDCacheSize, eqlMemberPerTCPConnectionStatsRcvbyte=eqlMemberPerTCPConnectionStatsRcvbyte, eqlMemberHealthDetailsFanCurrentState=eqlMemberHealthDetailsFanCurrentState, eqlMemberStatusPowerSupply1Status=eqlMemberStatusPowerSupply1Status, eqlMemberHealthsumoChannelBothMissing=eqlMemberHealthsumoChannelBothMissing, eqlTaggedHeatProfileMinMultiplier=eqlTaggedHeatProfileMinMultiplier, eqlMemberSEDEncryptionShare1=eqlMemberSEDEncryptionShare1, eqlMemberPerTCPConnectionStatsRcvbadsum=eqlMemberPerTCPConnectionStatsRcvbadsum, eqlMemberSSDAcceleratorSize=eqlMemberSSDAcceleratorSize, eqlMemberPerTCPConnectionStatsLocalAddr=eqlMemberPerTCPConnectionStatsLocalAddr, eqlMemberNumberOfDisks=eqlMemberNumberOfDisks, eqlMemberTimeZone=eqlMemberTimeZone, eqlMemberHealthBatteryLessThan72Hours=eqlMemberHealthBatteryLessThan72Hours, eqlMemberOpsCompletePct=eqlMemberOpsCompletePct, eqlMemberPerTCPConnectionStatsSndrexmitbyte=eqlMemberPerTCPConnectionStatsSndrexmitbyte, eqlMemberHWComponentStatus=eqlMemberHWComponentStatus, eqlMemberEntry=eqlMemberEntry, eqlDriveGroupStatisticsIndex=eqlDriveGroupStatisticsIndex, eqlMemberHealthStatus=eqlMemberHealthStatus, eqlDriveGroupOpsStatusCompletePct=eqlDriveGroupOpsStatusCompletePct, eqlMemberPerTCPConnectionStatsIndex=eqlMemberPerTCPConnectionStatsIndex, eqlMemberHealthRAIDSetLostBlkTableFull=eqlMemberHealthRAIDSetLostBlkTableFull, eqlMemberPerTCPConnectionStatsRexmttimeout=eqlMemberPerTCPConnectionStatsRexmttimeout, eqlMemberStatusTrayTwoFanTwoSpeed=eqlMemberStatusTrayTwoFanTwoSpeed, eqlMemberFirmwareInfoDataReduction=eqlMemberFirmwareInfoDataReduction, eqlMemberStatusCacheSize=eqlMemberStatusCacheSize, eqlMemberStatusNumberOfControllers=eqlMemberStatusNumberOfControllers, eqlMemberHealthhighBatteryTemperature=eqlMemberHealthhighBatteryTemperature, eqlMemberVersion=eqlMemberVersion, eqlDriveGroupOpsIndex=eqlDriveGroupOpsIndex, eqlDriveGroupHeatProfileMaxMagnitude=eqlDriveGroupHeatProfileMaxMagnitude, eqlMemberHWComponentFirmwareRev=eqlMemberHWComponentFirmwareRev, eqlMemberOpsExec=eqlMemberOpsExec, eqlMemberHotPageCount=eqlMemberHotPageCount, eqlMemberSite=eqlMemberSite, eqlMemberCompressionCapable=eqlMemberCompressionCapable, eqlDriveGroupEntry=eqlDriveGroupEntry, eqlMemberHealthsumoEIPFailureCOndition=eqlMemberHealthsumoEIPFailureCOndition, eqlMemberOpsEntry=eqlMemberOpsEntry, PYSNMP_MODULE_ID=eqlmemberModule, eqlMemberChassisType=eqlMemberChassisType, eqlTaggedHeatProfileInfoTable=eqlTaggedHeatProfileInfoTable, eqlMemberOpsOperationStatus=eqlMemberOpsOperationStatus, eqlDriveGroupOpsOperation=eqlDriveGroupOpsOperation, eqlMemberWriteAvgLatency=eqlMemberWriteAvgLatency, eqlMemberFirmwareInfoEntry=eqlMemberFirmwareInfoEntry, eqlMemberHealthPowerSupplyFailure=eqlMemberHealthPowerSupplyFailure, eqlMemberRaidPoliciesTable=eqlMemberRaidPoliciesTable, eqlMemberUsedStorage=eqlMemberUsedStorage, eqlMemberOpsRowStatus=eqlMemberOpsRowStatus, eqlMemberPerTCPConnectionStatsFastrexmt=eqlMemberPerTCPConnectionStatsFastrexmt, eqlMemberDynamicOpsOperation=eqlMemberDynamicOpsOperation, eqlDriveGroupStatisticsHeadroom=eqlDriveGroupStatisticsHeadroom, eqlMemberStatusSerialNumber=eqlMemberStatusSerialNumber, eqlMemberIndex=eqlMemberIndex, eqlTaggedHeatProfileCount=eqlTaggedHeatProfileCount, eqlMemberSEDEncryptionShare2=eqlMemberSEDEncryptionShare2, eqlMemberHealthDetailsTempSensorIndex=eqlMemberHealthDetailsTempSensorIndex, eqlDriveGroupOpsStoragePoolDestinationIndex=eqlDriveGroupOpsStoragePoolDestinationIndex, eqlMemberConnEntry=eqlMemberConnEntry, eqlMemberProfileIndex=eqlMemberProfileIndex, eqlMemberReadOpCount=eqlMemberReadOpCount, eqlDriveGroupHeatProfileCount=eqlDriveGroupHeatProfileCount, eqlDriveGroupHeatProfileMaxMultiplier=eqlDriveGroupHeatProfileMaxMultiplier, eqlMemberHealthDetailsTemperatureName=eqlMemberHealthDetailsTemperatureName, eqlMemberHealthDetailsTemperatureLowWarningThreshold=eqlMemberHealthDetailsTemperatureLowWarningThreshold, eqlDriveGroupHeatProfilePart=eqlDriveGroupHeatProfilePart, eqlDriveGroupOpsStartTime=eqlDriveGroupOpsStartTime, eqlMemberChassisFlags=eqlMemberChassisFlags, eqlMemberNumberOfSpares=eqlMemberNumberOfSpares, eqlTaggedHeatProfileMaxMagnitude=eqlTaggedHeatProfileMaxMagnitude, eqlMemberCacheStatisticsEntry=eqlMemberCacheStatisticsEntry, eqlMemberStatusNumberOfSpares=eqlMemberStatusNumberOfSpares, eqlMemberStatusTotalSpaceUsed=eqlMemberStatusTotalSpaceUsed, eqlMemberStatusTotalSpace=eqlMemberStatusTotalSpace, eqlMemberLostRaidBlocks=eqlMemberLostRaidBlocks, eqlMemberDynamicOpsEntry=eqlMemberDynamicOpsEntry, eqlMemberStatusAverageTemp=eqlMemberStatusAverageTemp, eqlMemberRAIDEntry=eqlMemberRAIDEntry, eqlMemberPSGMapEntry=eqlMemberPSGMapEntry, eqlDriveGroupOpsVolBalCommandIndex=eqlDriveGroupOpsVolBalCommandIndex, eqlMemberDefaultRoute=eqlMemberDefaultRoute, eqlMemberHealthDetailsPowerSupplyFanStatus=eqlMemberHealthDetailsPowerSupplyFanStatus, eqlDriveGroupOpsStatusTable=eqlDriveGroupOpsStatusTable, eqlMemberHealthincompatControlModule=eqlMemberHealthincompatControlModule, eqlMemberHWComponentIndex=eqlMemberHWComponentIndex, eqlMemberDynamicInfoEntry=eqlMemberDynamicInfoEntry, eqlMemberDateAndTime=eqlMemberDateAndTime, eqlMemberReadLatency=eqlMemberReadLatency, eqlAdminAccountMemberTable=eqlAdminAccountMemberTable, eqlMemberStatusLostRaidBlocks=eqlMemberStatusLostRaidBlocks, eqlMemberHealthDetailsPowerSupplyName=eqlMemberHealthDetailsPowerSupplyName, eqlDriveGroupOpsExec=eqlDriveGroupOpsExec, eqlMemberStatusPowerSupplyOneFanStatus=eqlMemberStatusPowerSupplyOneFanStatus, eqlMemberChassisTable=eqlMemberChassisTable, eqlMemberHealthTempSensorHighThreshold=eqlMemberHealthTempSensorHighThreshold, eqlMemberPerTCPConnectionStatsEntry=eqlMemberPerTCPConnectionStatsEntry, eqlTaggedHeatProfileBinId=eqlTaggedHeatProfileBinId, eqlMemberPerTCPConnectionStatsRcvwinprobe=eqlMemberPerTCPConnectionStatsRcvwinprobe, eqlMemberModel=eqlMemberModel, eqlTaggedHeatTag=eqlTaggedHeatTag, eqlDriveGroupHeatProfileMinMagnitude=eqlDriveGroupHeatProfileMinMagnitude, eqlMemberDriveMirroring=eqlMemberDriveMirroring, eqlMemberStatusTrayOneFanOneSpeed=eqlMemberStatusTrayOneFanOneSpeed, eqlMemberHealthDetailsPowerSupplyCurrentState=eqlMemberHealthDetailsPowerSupplyCurrentState, eqlMemberHealthDetailsTemperatureLowCriticalThreshold=eqlMemberHealthDetailsTemperatureLowCriticalThreshold, eqlMemberGroupInfoAtMemberPasswd1Len=eqlMemberGroupInfoAtMemberPasswd1Len, eqlDriveGroupHeatProfileInfoTable=eqlDriveGroupHeatProfileInfoTable, eqlTaggedHeatProfileColdCount=eqlTaggedHeatProfileColdCount, eqlMemberHealthDetailsFanNameID=eqlMemberHealthDetailsFanNameID, eqlMemberDelayDataMove=eqlMemberDelayDataMove, eqlMemberInfoStatus=eqlMemberInfoStatus, eqlMemberHealthRAIDlostCache=eqlMemberHealthRAIDlostCache, eqlMemberRAIDTable=eqlMemberRAIDTable, eqlMemberHealthDetailsFanTable=eqlMemberHealthDetailsFanTable, eqlmemberNotifications=eqlmemberNotifications, eqlMemberHealthWarningConditions=eqlMemberHealthWarningConditions, eqlMemberOpsOperation=eqlMemberOpsOperation, eqlMemberHWComponentTable=eqlMemberHWComponentTable, eqlTaggedHeatProfileMaxMultiplier=eqlTaggedHeatProfileMaxMultiplier, eqlDriveGroupOpsStatusEntry=eqlDriveGroupOpsStatusEntry, eqlMemberStatusPowerSupply2Status=eqlMemberStatusPowerSupply2Status, eqlMemberSnapStorage=eqlMemberSnapStorage, eqlMemberCacheSize=eqlMemberCacheSize, eqlMemberHealthDetailsFanLowWarningThreshold=eqlMemberHealthDetailsFanLowWarningThreshold, eqlMemberCacheMode=eqlMemberCacheMode, eqlMemberStatusHealth=eqlMemberStatusHealth, eqlMemberHealthRaidOrphanCache=eqlMemberHealthRaidOrphanCache, eqlMemberHealthhwComponentFailedCrit=eqlMemberHealthhwComponentFailedCrit, eqlDriveGroupRAIDPolicy=eqlDriveGroupRAIDPolicy, eqlMemberStatusEntry=eqlMemberStatusEntry, eqlMemberStatusNumberOfDisks=eqlMemberStatusNumberOfDisks, eqlMemberStorageEntry=eqlMemberStorageEntry, eqlMemberCompressionStackStorage=eqlMemberCompressionStackStorage, eqlDriveGroupOpsVolBalCommandiscsiLocalMemberId=eqlDriveGroupOpsVolBalCommandiscsiLocalMemberId, eqlMemberSEDEncryptionTable=eqlMemberSEDEncryptionTable, eqlTaggedHeatProfileBinTable=eqlTaggedHeatProfileBinTable, eqlAdminAccountMemberEntry=eqlAdminAccountMemberEntry, eqlMemberHealthDetailsFanName=eqlMemberHealthDetailsFanName, eqlMemberReplStorage=eqlMemberReplStorage, eqlMemberRaidStatus=eqlMemberRaidStatus, eqlMemberTotalPageCount=eqlMemberTotalPageCount, eqlMemberDynamicOpsTable=eqlMemberDynamicOpsTable, eqlMemberHealthDetailsTemperatureValue=eqlMemberHealthDetailsTemperatureValue, eqlDriveGroupIndex=eqlDriveGroupIndex, eqlMemberSEDEncryptionShare3=eqlMemberSEDEncryptionShare3, eqlAdminAccountMemberAccess=eqlAdminAccountMemberAccess)
mibBuilder.exportSymbols("EQLMEMBER-MIB", eqlMemberPerTCPConnectionStatsMss=eqlMemberPerTCPConnectionStatsMss, eqlMemberStatusCacheMode=eqlMemberStatusCacheMode, eqlMemberShortId=eqlMemberShortId, eqlMemberPerTCPConnectionStatsForeignPort=eqlMemberPerTCPConnectionStatsForeignPort, eqlMemberHealthsumoChannelBothFailed=eqlMemberHealthsumoChannelBothFailed, eqlTaggedHeatProfileInfoEntry=eqlTaggedHeatProfileInfoEntry, eqlMemberWarmPageCount=eqlMemberWarmPageCount, eqlMemberDefaultInetRoute=eqlMemberDefaultInetRoute, eqlMemberHealthDetailsTemperatureCurrentState=eqlMemberHealthDetailsTemperatureCurrentState, eqlMemberHealthFanSpeedLowThreshold=eqlMemberHealthFanSpeedLowThreshold, eqlMemberOpsOperationArg1=eqlMemberOpsOperationArg1, eqlMemberSSDAcceleratorEntriesTotal=eqlMemberSSDAcceleratorEntriesTotal, eqlTaggedHeatProfileBinEntry=eqlTaggedHeatProfileBinEntry, eqlMemberSerialNumber=eqlMemberSerialNumber, eqlMemberRxData=eqlMemberRxData, eqlDriveGroupStatisticsTable=eqlDriveGroupStatisticsTable, eqlMemberHealthCriticalConditions=eqlMemberHealthCriticalConditions, eqlMemberChassisEntry=eqlMemberChassisEntry, eqlTaggedHeatProfileAccessRateMultiplier=eqlTaggedHeatProfileAccessRateMultiplier, eqlMemberState=eqlMemberState, eqlMemberStatusBackplaneTempSensor1=eqlMemberStatusBackplaneTempSensor1, eqlMemberEnclosureMgmtNotifications=eqlMemberEnclosureMgmtNotifications, eqlMemberHWComponentSerialNumber=eqlMemberHWComponentSerialNumber, eqlDriveGroupHeatProfileBinId=eqlDriveGroupHeatProfileBinId, eqlmemberObjects=eqlmemberObjects, eqlMemberStatusTable=eqlMemberStatusTable, eqlMemberHealthDetailsFanEntry=eqlMemberHealthDetailsFanEntry, eqlMemberHealthDetailsTemperatureHighCriticalThreshold=eqlMemberHealthDetailsTemperatureHighCriticalThreshold, eqlMemberPerTCPConnectionStatsRcvpack=eqlMemberPerTCPConnectionStatsRcvpack, eqlMemberTable=eqlMemberTable, eqlMemberHealthPowerSupplyFanFailure=eqlMemberHealthPowerSupplyFanFailure, eqlDriveGroupHeatProfileAccessRateMagnitude=eqlDriveGroupHeatProfileAccessRateMagnitude, eqlMemberVirtualStorage=eqlMemberVirtualStorage, eqlMemberControllerMinorVersion=eqlMemberControllerMinorVersion, eqlMemberSSDAcceleratorEntriesUsed=eqlMemberSSDAcceleratorEntriesUsed, eqlMemberGroupInfoAtMemberTable=eqlMemberGroupInfoAtMemberTable, eqlDriveGroupOpsTable=eqlDriveGroupOpsTable, eqlMemberStatusRaidPercentage=eqlMemberStatusRaidPercentage, eqlMemberSEDEncryptionEntry=eqlMemberSEDEncryptionEntry, eqlMemberFirmwareInfoTable=eqlMemberFirmwareInfoTable, eqlMemberPerTCPConnectionStatsSndbyte=eqlMemberPerTCPConnectionStatsSndbyte, eqlMemberPerTCPConnectionStatsLocalPort=eqlMemberPerTCPConnectionStatsLocalPort, eqlMemberHealthDetailsTemperatureTable=eqlMemberHealthDetailsTemperatureTable, eqlMemberUUID=eqlMemberUUID, eqlMemberPSGMapTable=eqlMemberPSGMapTable, eqlMemberHealthRAIDSetDoubleFaulted=eqlMemberHealthRAIDSetDoubleFaulted, eqlDriveGroupOpsEntry=eqlDriveGroupOpsEntry, eqlMemberHealthDetailsFanIndex=eqlMemberHealthDetailsFanIndex, eqlMemberAdjustDaylightSavTime=eqlMemberAdjustDaylightSavTime, eqlMemberWriteLatency=eqlMemberWriteLatency)
