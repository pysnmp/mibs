#
# PySNMP MIB module FspR7-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/FspR7-MIB
# Produced by pysmi-1.1.12 at Fri Jul 19 08:51:37 2024
# On host fv-az1149-759 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
vtpEntityIndex, TimMode, SonetVcBundleAllocation, LogicalIfTransportCaps, neEventLogIdentityTranslation, entityContainedIn, controlPlaneEthEntityIndex, EnableStateCaps, LoopConfig, OtnTcmLevelCaps, ProtectionMech, SonetTimingSourceCaps, ptpEntityIndex, entityIndex, ApsHoldoffTimeCaps, controlPlaneWdmEntityIndex, snmpProxyServerSynchroStage, OnOff, EthDuplexMode, EnableState, VirtualContainerTypeCaps, snmpProxyEntrySingleTargetOutNodeAgentStatus, EthDuplexModeCaps, ProtectionMechCaps, ptpEntityClass, Counter64String, OhTerminationLevelCaps, OtnTcmLevel, TrapAlarmSeverity, ptpEntityContainedIn, ApsHoldoffTime, LoopConfigCaps, VirtualContainerType, SonetVcBundleAllocationCaps, Grade, neEventLogTimeStamp, neTrapsinkAddress, SonetTraceForm, config, OtnPayloadTypeCaps, EntityIndex, TimModeCaps, fspR7, SonetTraceFormCaps, controlPlaneOtnEntityIndex, OhTerminationLevel, ServiceImpairment, OtnPayloadType, SonetTimingSource, entityClass = mibBuilder.importSymbols("ADVA-MIB", "vtpEntityIndex", "TimMode", "SonetVcBundleAllocation", "LogicalIfTransportCaps", "neEventLogIdentityTranslation", "entityContainedIn", "controlPlaneEthEntityIndex", "EnableStateCaps", "LoopConfig", "OtnTcmLevelCaps", "ProtectionMech", "SonetTimingSourceCaps", "ptpEntityIndex", "entityIndex", "ApsHoldoffTimeCaps", "controlPlaneWdmEntityIndex", "snmpProxyServerSynchroStage", "OnOff", "EthDuplexMode", "EnableState", "VirtualContainerTypeCaps", "snmpProxyEntrySingleTargetOutNodeAgentStatus", "EthDuplexModeCaps", "ProtectionMechCaps", "ptpEntityClass", "Counter64String", "OhTerminationLevelCaps", "OtnTcmLevel", "TrapAlarmSeverity", "ptpEntityContainedIn", "ApsHoldoffTime", "LoopConfigCaps", "VirtualContainerType", "SonetVcBundleAllocationCaps", "Grade", "neEventLogTimeStamp", "neTrapsinkAddress", "SonetTraceForm", "config", "OtnPayloadTypeCaps", "EntityIndex", "TimModeCaps", "fspR7", "SonetTraceFormCaps", "controlPlaneOtnEntityIndex", "OhTerminationLevel", "ServiceImpairment", "OtnPayloadType", "SonetTimingSource", "entityClass")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ObjectIdentity, enterprises, Counter32, ModuleIdentity, TimeTicks, snmpModules, IpAddress, Bits, Gauge32, MibIdentifier, mib_2, Unsigned32, Counter64, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ObjectIdentity", "enterprises", "Counter32", "ModuleIdentity", "TimeTicks", "snmpModules", "IpAddress", "Bits", "Gauge32", "MibIdentifier", "mib-2", "Unsigned32", "Counter64", "iso")
TestAndIncr, TruthValue, MacAddress, RowStatus, DateAndTime, DisplayString, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TestAndIncr", "TruthValue", "MacAddress", "RowStatus", "DateAndTime", "DisplayString", "TextualConvention", "TimeStamp")
fspR7MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2))
fspR7MIB.setRevisions(('2010-10-29 00:00', '2010-10-22 00:00', '2010-08-31 00:00', '2010-06-14 00:00', '2010-03-24 00:00', '2009-11-20 00:00', '2009-06-05 00:00', '2009-01-31 00:00', '2008-08-28 00:00', '2007-10-04 00:00', '2007-09-24 00:00', '2007-05-07 00:00', '2007-01-03 00:00', '2006-11-28 00:00', '2006-09-05 00:00', '2006-06-14 00:00', '2006-05-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fspR7MIB.setRevisionsDescriptions(('FSP3000 F7 Release 10.2.1 MIB.', 'FSP3000 F7 Release 10.2.0 MIB.', 'FSP3000 F7 Release 10.1.1 MIB.', 'FSP3000 F7 Release 9.4.1 MIB.', 'FSP3000 F7 Release 9.3.1 MIB.', 'FSP3000 F7 Release 9.2.1 MIB.', 'FSP3000 F7 Release 9.1.1 MIB.', 'FSP3000 F7 Release 8.3.0 MIB.', 'FSP3000 F7 Release 8.2.0 MIB.', 'FSP3000 F7 Release 8.1.1 MIB.', 'FSP3000 F7 Release 8.1 MIB.', 'FSP3000 F7 Release 7.1.5 MIB.', 'FSP3000 F7 Release 7.1.0 MIB.', 'FSP3000 F7 Release 7.0.6H MIB', 'FSP3000 F7 Release 7.0.6D MIB.', 'FSP3000 F7 Release 7.0.6 MIB.', 'FSP3000 F7 Release 7.0.2 MIB.',))
if mibBuilder.loadTexts: fspR7MIB.setLastUpdated('200906050000Z')
if mibBuilder.loadTexts: fspR7MIB.setOrganization('ADVA AG Optical Networking')
if mibBuilder.loadTexts: fspR7MIB.setContactInfo('\n              ADVA AG Optical Networking\n              Justus-von-Liebig-Str. 7\n              12489 Berlin, Germany\n\n              Support Europe:\n              Phone:  +49 89 89 0665 848\n              Fax:    +49 89 89 0665 22848\n              e-mail: support@advaoptical.com\n\n              Support USA:\n              Phone:  +1 201 995 0080\n              Fax:    +1 201 995 0081\n              e-mail: support-usa@advaoptical.com\n\n              Support Asia:\n              Phone:  +81 3 5408 5891\n              Fax:    +81 3 5408 5899\n              e-mail: support-asia@advaoptical.com\n            ')
if mibBuilder.loadTexts: fspR7MIB.setDescription('The FSP3000R7 MIB..')
adminMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2))
neAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1))
neTimeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30))
routingMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2))
fspUser = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3))
srvSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4))
channelTrace = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 5))
dcnOspf = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6))
conditionMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1))
conditionFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1))
currentConditions = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2))
alarmProfileConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 3))
trapMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3))
trapMibPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0))
trapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 1))
configAndStatusMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4))
commonConfigAndStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1))
equipmentConfigAndStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2))
interfaceConfigAndStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3))
serviceConfigAndStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4))
gfpServiceConfigAndStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1))
connectionConfigAndStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5))
systemConfigAndStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 6))
controlPlaneConfigAndStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7))
deploymentProvisioningMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5))
shelfDeployProv = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1))
moduleDeployProv = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2))
plugDeployProv = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3))
facilityDeployProv = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4))
connectionDeployProv = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5))
crossConnectionDeployProv = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6))
cloningEntitiesDeployProv = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7))
controlPlaneDeployProv = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8))
parameterCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9))
performanceMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6))
performanceAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1))
performanceMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2))
fspR7Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 7))
fspR7VendorTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8))
fspR7Products = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 1))
fspR7V1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 11, 1, 1))
if mibBuilder.loadTexts: fspR7V1.setStatus('current')
if mibBuilder.loadTexts: fspR7V1.setDescription('This object uniquely identifies a Network Element using the current FspR7MIB release. V1 will be used\n         for all releases until major changes require a new sysObjectID to assure backward compatibility.')
class ApsDirection(TextualConvention, Integer32):
    description = 'Bi-Directional | Unidirectional setup used in protection setup: Not to be used by others'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("bidirectional", 1), ("unidirectional", 2))

class ApsDirectionCaps(TextualConvention, Bits):
    description = 'Bi-Directional | Unidirectional setup used in protection setup: Not to be used by others'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capBidirectional", 1), ("capUnidirectional", 2))

class ApsRevertMode(TextualConvention, Integer32):
    description = 'Revertive Protection Switching'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("nonrevertive", 1), ("revertive", 2))

class ApsRevertModeCaps(TextualConvention, Bits):
    description = 'Revertive Protection Switching'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNonrevertive", 1), ("capRevertive", 2))

class ApsType(TextualConvention, Integer32):
    description = 'Type of Automatic Protection Switching; triggered by standing conditions'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("undefined", 0), ("line", 2), ("sncN", 3), ("sncI", 4), ("sncS", 5), ("eth", 6), ("phys", 7), ("sncNPM", 8), ("sncNTCM", 9), ("sncISM", 10), ("mux", 11), ("pcs", 12), ("ethSncI", 13), ("ethSncN", 14), ("ethSncS", 15), ("ethSncT", 16))

class ApsTypeCaps(TextualConvention, Bits):
    description = 'Type of Automatic Protection Switching; triggered by standing conditions'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capLine", 2), ("capSncN", 3), ("capSncI", 4), ("capSncS", 5), ("capEth", 6), ("capPhys", 7), ("capSncNPM", 8), ("capSncNTCM", 9), ("capSncISM", 10), ("capMux", 11), ("capPcs", 12), ("capEthSncI", 13), ("capEthSncN", 14), ("capEthSncS", 15), ("capEthSncT", 16))

class Counter64StringCaps(TextualConvention, OctetString):
    description = ''
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class FspR7AccessProtocol(TextualConvention, Integer32):
    description = 'Protocol type used in NE access.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("serial", 2), ("telnet", 3), ("ssh", 4), ("ftp", 5), ("snmp", 6), ("http", 7), ("https", 8), ("tl1", 9))

class FspR7AccessStatus(TextualConvention, Integer32):
    description = 'Indication whether authentication was succesful/unsuccessful.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("success", 2), ("authenticationError", 3), ("sessionError", 4))

class FspR7AccountFlag(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("authForced", 2))

class FspR7Action(TextualConvention, Integer32):
    description = 'The action to take when a filtering rule applies'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("accept", 1), ("drop", 2), ("jump", 3))

class FspR7ActionCaps(TextualConvention, Bits):
    description = 'The action to take when a filtering rule applies'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capAccept", 1), ("capDrop", 2), ("capJump", 3))

class FspR7AdminState(TextualConvention, Integer32):
    description = 'The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("undefined", 0), ("uas", 1), ("is", 2), ("ains", 3), ("mgt", 4), ("mt", 5), ("dsbld", 6), ("pps", 7))

class FspR7AdminStateCaps(TextualConvention, Bits):
    description = 'The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capUas", 1), ("capIs", 2), ("capAins", 3), ("capMgt", 4), ("capMt", 5), ("capDsbld", 6), ("capPps", 7))

class FspR7AidType(TextualConvention, Integer32):
    description = 'Type of Access Identifier'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("sys", 2), ("eqpt", 3), ("ch", 4), ("dcn", 5), ("ol", 6), ("om", 7), ("sts1", 8), ("sts3c", 9), ("sts24c", 10), ("sts48c", 11), ("vc3", 12), ("vc4", 13), ("vs1", 14), ("vs4c", 15), ("sh", 16), ("lif", 17), ("lifCp", 18), ("tnlWdm", 19), ("vc4c8", 20), ("vc4c16", 21), ("otl", 22))

class FspR7AlsHoldoff(TextualConvention, Integer32):
    description = 'Hold-Off Period for ALS Consequent Action'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("del0ms", 1), ("del250ms", 2), ("del550ms", 3))

class FspR7AlsHoldoffCaps(TextualConvention, Bits):
    description = 'Hold-Off Period for ALS Consequent Action'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capDel0ms", 1), ("capDel250ms", 2), ("capDel550ms", 3))

class FspR7AlsMode(TextualConvention, Integer32):
    description = 'Determines the reaction in backward direction in response to a LOS\n         on the same Interface: on a Network Interface connected to the DWDM\n         this is a matter of laser safety'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("advaALS", 1), ("sonetALS", 2), ("noALS", 3))

class FspR7AlsModeCaps(TextualConvention, Bits):
    description = 'Determines the reaction in backward direction in response to a LOS\n         on the same Interface: on a Network Interface connected to the DWDM\n         this is a matter of laser safety'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capAdvaALS", 1), ("capSonetALS", 2), ("capNoALS", 3))

class FspR7ApplyAlarmProfile(TextualConvention, Integer32):
    description = 'Apply Alarm Profile to all existing entities'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("apply", 2))

class FspR7ApplyAlarmProfileCaps(TextualConvention, Bits):
    description = 'Apply Alarm Profile to all existing entities'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capApply", 2))

class FspR7APSCommand(TextualConvention, Integer32):
    description = "Protection Switch commands: Manual or Release.\n         The 'Manual Switch' switches manually from addressed facility to\n         the partner but does not force the traffic onto a broken fiber and\n         it does not block the subsequent automatic functioning of the switch.\n         The 'Release Switch' releases the current switch command.\n         For 'Manual Switch' relevant only if revertivity is supported."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("release", 1), ("manualSwitch", 2))

class FspR7APSCommandCaps(TextualConvention, Bits):
    description = "Protection Switch commands: Manual or Release.\n         The 'Manual Switch' switches manually from addressed facility to\n         the partner but does not force the traffic onto a broken fiber and\n         it does not block the subsequent automatic functioning of the switch.\n         The 'Release Switch' releases the current switch command.\n         For 'Manual Switch' relevant only if revertivity is supported."
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRelease", 1), ("capManualSwitch", 2))

class FspR7AseTabOpr(TextualConvention, Integer32):
    description = 'ASE Table creation in process'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("build", 2))

class FspR7AseTabOprCaps(TextualConvention, Bits):
    description = 'ASE Table creation in process'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capBuild", 2))

class FspR7AutopLif(TextualConvention, Integer32):
    description = 'Automatic Provisioning of LIF-CP'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("yes", 1), ("no", 2))

class FspR7AutopLifCaps(TextualConvention, Bits):
    description = 'Automatic Provisioning of LIF-CP'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capYes", 1), ("capNo", 2))

class FspR7AutoThresReset(TextualConvention, Integer32):
    description = 'Adaptive Threshold Control reset'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("rtf", 2))

class FspR7AutoThresResetCaps(TextualConvention, Bits):
    description = 'Adaptive Threshold Control reset'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capRtf", 2))

class FspR7Baund(TextualConvention, Integer32):
    description = 'Baud rate of the serial interface'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("undefined", 0), ("baud2400", 1), ("baud4800", 2), ("baud9600", 3), ("baud19200", 4), ("baud38400", 5), ("baud57600", 6), ("baud115200", 7))

class FspR7BaundCaps(TextualConvention, Bits):
    description = 'Baud rate of the serial interface'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capBaud2400", 1), ("capBaud4800", 2), ("capBaud9600", 3), ("capBaud19200", 4), ("capBaud38400", 5), ("capBaud57600", 6), ("capBaud115200", 7))

class FspR7BERThreshold(TextualConvention, Integer32):
    description = 'Bit-Error-Based Degradation Definition for SONET (standard integration period)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 0), ("exp5", 1), ("exp6", 2), ("exp7", 3), ("exp8", 4), ("exp9", 5))

class FspR7BERThresholdCaps(TextualConvention, Bits):
    description = 'Bit-Error-Based Degradation Definition for SONET (standard integration period)'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capExp5", 1), ("capExp6", 2), ("capExp7", 3), ("capExp8", 4), ("capExp9", 5))

class FspR7BERThresholdSection(TextualConvention, Integer32):
    description = 'Bit-Error-Based Degradation Definition for SONET (standard integration period)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5))
    namedValues = NamedValues(("undefined", 0), ("exp7", 3), ("exp8", 4), ("exp9", 5))

class FspR7BERThresholdSectionCaps(TextualConvention, Bits):
    description = 'Bit-Error-Based Degradation Definition for SONET (standard integration period)'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capExp7", 3), ("capExp8", 4), ("capExp9", 5))

class FspR7Bip(TextualConvention, Integer32):
    description = 'Bit Interleaved Parity'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("transparent", 1), ("terminate", 2))

class FspR7BipCaps(TextualConvention, Bits):
    description = 'Bit Interleaved Parity'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capTransparent", 1), ("capTerminate", 2))

class FspR7Bitrate(TextualConvention, Integer32):
    description = 'Provisioned data rate'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("bitrate10", 1), ("bitrate100", 2), ("bitrate1000", 3), ("bitrate10000", 4))

class FspR7BitrateCaps(TextualConvention, Bits):
    description = 'Provisioned data rate'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capBitrate10", 1), ("capBitrate100", 2), ("capBitrate1000", 3), ("capBitrate10000", 4))

class FspR7CapInventory(TextualConvention, Integer32):
    description = 'Capability level reported by HW'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 50))
    namedValues = NamedValues(("undefined", 0), ("level0", 1), ("level1", 2), ("level2", 3), ("level3", 4), ("level4", 5), ("level5", 6), ("unknown", 50))

class FspR7CapInventoryCaps(TextualConvention, Bits):
    description = 'Capability level reported by HW'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capLevel0", 1), ("capLevel1", 2), ("capLevel2", 3), ("capLevel3", 4), ("capLevel4", 5), ("capLevel5", 6), ("capUnknown", 50))

class FspR7Category(TextualConvention, Integer32):
    description = 'Used For Internal Purposes (and possibly for pre-selection in GUI)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))
    namedValues = NamedValues(("undefined", 0), ("shelf", 1), ("channelMod", 2), ("plug", 3), ("filter", 4), ("amplifier", 5), ("dcm", 6), ("switch", 7), ("oscm", 8), ("dummy", 9), ("common", 10), ("att", 11), ("jumper", 12), ("accessory", 13), ("fiber", 14), ("protectionMod", 15), ("any", 16), ("roadm", 17), ("ethernetMod", 18), ("powerSplitter", 19))

class FspR7ChannelBandwidth(TextualConvention, Integer32):
    description = 'Channel Bandwidth'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("undefined", 0), ("band50G", 1), ("band75G", 2), ("band100G", 3), ("band125G", 4), ("band150G", 5), ("band175G", 6), ("band200G", 7), ("band225G", 8), ("band250G", 9), ("band275G", 10), ("band300G", 11))

class FspR7ChannelBandwidthCaps(TextualConvention, Bits):
    description = 'Channel Bandwidth'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capBand50G", 1), ("capBand75G", 2), ("capBand100G", 3), ("capBand125G", 4), ("capBand150G", 5), ("capBand175G", 6), ("capBand200G", 7), ("capBand225G", 8), ("capBand250G", 9), ("capBand275G", 10), ("capBand300G", 11))

class FspR7ChannelIdentifier(TextualConvention, Integer32):
    description = 'Channel'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 443, 447, 451, 455, 459, 463, 467, 471, 475, 479, 483, 487, 491, 495, 499, 500))
    namedValues = NamedValues(("undefined", 0), ("d01", 1), ("d02", 2), ("d03", 3), ("d04", 4), ("d05", 5), ("d06", 6), ("d07", 7), ("d08", 8), ("d09", 9), ("d10", 10), ("d11", 11), ("d12", 12), ("d13", 13), ("d14", 14), ("d15", 15), ("d16", 16), ("d17", 17), ("d18", 18), ("d19", 19), ("d20", 20), ("d21", 21), ("d22", 22), ("d23", 23), ("d24", 24), ("d25", 25), ("d26", 26), ("d27", 27), ("d28", 28), ("d29", 29), ("d30", 30), ("d31", 31), ("d32", 32), ("d33", 33), ("d34", 34), ("d35", 35), ("d36", 36), ("d37", 37), ("d38", 38), ("d39", 39), ("d40", 40), ("d41", 41), ("d42", 42), ("d43", 43), ("d44", 44), ("d45", 45), ("d46", 46), ("d47", 47), ("d48", 48), ("d49", 49), ("d50", 50), ("d51", 51), ("d52", 52), ("d53", 53), ("d54", 54), ("d55", 55), ("d56", 56), ("d57", 57), ("d58", 58), ("d59", 59), ("d60", 60), ("d61", 61), ("d62", 62), ("d63", 63), ("d64", 64), ("dc1", 65), ("dc2", 66), ("dc3", 67), ("dc4", 68), ("dc5", 69), ("dc6", 70), ("dc7", 71), ("dc8", 72), ("dl1", 73), ("dl2", 74), ("dl3", 75), ("dl4", 76), ("dl5", 77), ("dl6", 78), ("dl7", 79), ("dl8", 80), ("dc9", 81), ("dl9", 82), ("c1470", 91), ("c1490", 92), ("c1510", 93), ("c1530", 94), ("c1550", 95), ("c1570", 96), ("c1590", 97), ("c1610", 98), ("s1310", 99), ("s1630", 100), ("g850", 101), ("g1310", 102), ("g1550", 103), ("notInGrid", 105), ("s1510", 106), ("f19610", 107), ("f19595", 108), ("f19585", 109), ("f19575", 110), ("f19565", 111), ("f19555", 112), ("f19545", 113), ("f19535", 114), ("f19525", 115), ("f19515", 116), ("f19505", 117), ("f19495", 118), ("f19485", 119), ("f19475", 120), ("f19465", 121), ("f19455", 122), ("f19445", 123), ("f19435", 124), ("f19425", 125), ("f19415", 126), ("f19405", 127), ("f19395", 128), ("f19385", 129), ("f19375", 130), ("f19365", 131), ("f19355", 132), ("f19345", 133), ("f19335", 134), ("f19325", 135), ("f19315", 136), ("f19305", 137), ("f19295", 138), ("f19285", 139), ("f19275", 140), ("f19265", 141), ("f19255", 142), ("f19245", 143), ("f19235", 144), ("f19225", 145), ("f19215", 146), ("f19205", 147), ("f19600", 148), ("f19590", 149), ("f19580", 150), ("f19570", 151), ("f19560", 152), ("f19550", 153), ("f19540", 154), ("f19530", 155), ("f19520", 156), ("f19510", 157), ("f19500", 158), ("f19490", 159), ("f19480", 160), ("f19470", 161), ("f19460", 162), ("f19450", 163), ("f19440", 164), ("f19430", 165), ("f19420", 166), ("f19410", 167), ("f19400", 168), ("f19390", 169), ("f19380", 170), ("f19370", 171), ("f19360", 172), ("f19350", 173), ("f19340", 174), ("f19330", 175), ("f19320", 176), ("f19310", 177), ("f19300", 178), ("f19290", 179), ("f19280", 180), ("f19270", 181), ("f19260", 182), ("f19250", 183), ("f19240", 184), ("f19230", 185), ("f19220", 186), ("f19210", 187), ("f19200", 188), ("c1270", 189), ("c1290", 190), ("c1310", 191), ("c1330", 192), ("c1350", 193), ("c1370", 194), ("c1430", 195), ("c1450", 196), ("s1610", 197), ("t1650", 198), ("s1490", 199), ("f19195", 443), ("f19190", 447), ("f19185", 451), ("f19180", 455), ("f19175", 459), ("f19170", 463), ("f19165", 467), ("f19160", 471), ("f19155", 475), ("f19150", 479), ("f19145", 483), ("f19140", 487), ("f19135", 491), ("f19130", 495), ("f19125", 499), ("notDefined", 500))

class FspR7ChannelIdentifierCaps(TextualConvention, Bits):
    description = 'Channel'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capD01", 1), ("capD02", 2), ("capD03", 3), ("capD04", 4), ("capD05", 5), ("capD06", 6), ("capD07", 7), ("capD08", 8), ("capD09", 9), ("capD10", 10), ("capD11", 11), ("capD12", 12), ("capD13", 13), ("capD14", 14), ("capD15", 15), ("capD16", 16), ("capD17", 17), ("capD18", 18), ("capD19", 19), ("capD20", 20), ("capD21", 21), ("capD22", 22), ("capD23", 23), ("capD24", 24), ("capD25", 25), ("capD26", 26), ("capD27", 27), ("capD28", 28), ("capD29", 29), ("capD30", 30), ("capD31", 31), ("capD32", 32), ("capD33", 33), ("capD34", 34), ("capD35", 35), ("capD36", 36), ("capD37", 37), ("capD38", 38), ("capD39", 39), ("capD40", 40), ("capD41", 41), ("capD42", 42), ("capD43", 43), ("capD44", 44), ("capD45", 45), ("capD46", 46), ("capD47", 47), ("capD48", 48), ("capD49", 49), ("capD50", 50), ("capD51", 51), ("capD52", 52), ("capD53", 53), ("capD54", 54), ("capD55", 55), ("capD56", 56), ("capD57", 57), ("capD58", 58), ("capD59", 59), ("capD60", 60), ("capD61", 61), ("capD62", 62), ("capD63", 63), ("capD64", 64), ("capDc1", 65), ("capDc2", 66), ("capDc3", 67), ("capDc4", 68), ("capDc5", 69), ("capDc6", 70), ("capDc7", 71), ("capDc8", 72), ("capDl1", 73), ("capDl2", 74), ("capDl3", 75), ("capDl4", 76), ("capDl5", 77), ("capDl6", 78), ("capDl7", 79), ("capDl8", 80), ("capDc9", 81), ("capDl9", 82), ("capC1470", 91), ("capC1490", 92), ("capC1510", 93), ("capC1530", 94), ("capC1550", 95), ("capC1570", 96), ("capC1590", 97), ("capC1610", 98), ("capS1310", 99), ("capS1630", 100), ("capG850", 101), ("capG1310", 102), ("capG1550", 103), ("capNotInGrid", 105), ("capS1510", 106), ("capF19610", 107), ("capF19595", 108), ("capF19585", 109), ("capF19575", 110), ("capF19565", 111), ("capF19555", 112), ("capF19545", 113), ("capF19535", 114), ("capF19525", 115), ("capF19515", 116), ("capF19505", 117), ("capF19495", 118), ("capF19485", 119), ("capF19475", 120), ("capF19465", 121), ("capF19455", 122), ("capF19445", 123), ("capF19435", 124), ("capF19425", 125), ("capF19415", 126), ("capF19405", 127), ("capF19395", 128), ("capF19385", 129), ("capF19375", 130), ("capF19365", 131), ("capF19355", 132), ("capF19345", 133), ("capF19335", 134), ("capF19325", 135), ("capF19315", 136), ("capF19305", 137), ("capF19295", 138), ("capF19285", 139), ("capF19275", 140), ("capF19265", 141), ("capF19255", 142), ("capF19245", 143), ("capF19235", 144), ("capF19225", 145), ("capF19215", 146), ("capF19205", 147), ("capF19600", 148), ("capF19590", 149), ("capF19580", 150), ("capF19570", 151), ("capF19560", 152), ("capF19550", 153), ("capF19540", 154), ("capF19530", 155), ("capF19520", 156), ("capF19510", 157), ("capF19500", 158), ("capF19490", 159), ("capF19480", 160), ("capF19470", 161), ("capF19460", 162), ("capF19450", 163), ("capF19440", 164), ("capF19430", 165), ("capF19420", 166), ("capF19410", 167), ("capF19400", 168), ("capF19390", 169), ("capF19380", 170), ("capF19370", 171), ("capF19360", 172), ("capF19350", 173), ("capF19340", 174), ("capF19330", 175), ("capF19320", 176), ("capF19310", 177), ("capF19300", 178), ("capF19290", 179), ("capF19280", 180), ("capF19270", 181), ("capF19260", 182), ("capF19250", 183), ("capF19240", 184), ("capF19230", 185), ("capF19220", 186), ("capF19210", 187), ("capF19200", 188), ("capC1270", 189), ("capC1290", 190), ("capC1310", 191), ("capC1330", 192), ("capC1350", 193), ("capC1370", 194), ("capC1430", 195), ("capC1450", 196), ("capS1610", 197), ("capT1650", 198), ("capS1490", 199), ("capF19195", 443), ("capF19190", 447), ("capF19185", 451), ("capF19180", 455), ("capF19175", 459), ("capF19170", 463), ("capF19165", 467), ("capF19160", 471), ("capF19155", 475), ("capF19150", 479), ("capF19145", 483), ("capF19140", 487), ("capF19135", 491), ("capF19130", 495), ("capF19125", 499), ("capNotDefined", 500))

class FspR7ChannelNumber(TextualConvention, Integer32):
    description = 'CWDM channels; DWDM frequencies (50 GHz grid according ITU-T'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215))
    namedValues = NamedValues(("undefined", 0), ("f19600", 1), ("f19590", 2), ("f19580", 3), ("f19570", 4), ("f19550", 5), ("f19540", 6), ("f19530", 7), ("f19520", 8), ("f19500", 9), ("f19490", 10), ("f19480", 11), ("f19470", 12), ("f19450", 13), ("f19440", 14), ("f19430", 15), ("f19420", 16), ("f19380", 17), ("f19370", 18), ("f19360", 19), ("f19350", 20), ("f19330", 21), ("f19320", 22), ("f19310", 23), ("f19300", 24), ("f19280", 25), ("f19270", 26), ("f19260", 27), ("f19250", 28), ("f19230", 29), ("f19220", 30), ("f19210", 31), ("f19200", 32), ("f19100", 33), ("f19090", 34), ("f19080", 35), ("f19070", 36), ("f19050", 37), ("f19040", 38), ("f19030", 39), ("f19020", 40), ("f19000", 41), ("f18990", 42), ("f18980", 43), ("f18970", 44), ("f18950", 45), ("f18940", 46), ("f18930", 47), ("f18920", 48), ("f18880", 49), ("f18870", 50), ("f18860", 51), ("f18850", 52), ("f18830", 53), ("f18820", 54), ("f18810", 55), ("f18800", 56), ("f18780", 57), ("f18770", 58), ("f18760", 59), ("f18750", 60), ("f18730", 61), ("f18720", 62), ("f18710", 63), ("f18700", 64), ("f19560", 65), ("f19510", 66), ("f19460", 67), ("f19410", 68), ("f19390", 69), ("f19340", 70), ("f19290", 71), ("f19240", 72), ("f19060", 73), ("f19010", 74), ("f18960", 75), ("f18910", 76), ("f18890", 77), ("f18840", 78), ("f18790", 79), ("f18740", 80), ("f19400", 81), ("f18900", 82), ("f19640", 83), ("f19635", 84), ("f19630", 85), ("f19625", 86), ("f19620", 87), ("f19615", 88), ("f19605", 89), ("c1470", 90), ("c1490", 91), ("c1510", 92), ("c1530", 93), ("c1550", 94), ("c1570", 95), ("c1590", 96), ("c1610", 97), ("s1310", 98), ("s1630", 99), ("g850", 100), ("g1310", 101), ("g1550", 102), ("null", 103), ("nig", 104), ("s1510", 105), ("f19610", 106), ("f19595", 107), ("f19585", 108), ("f19575", 109), ("f19565", 110), ("f19555", 111), ("f19545", 112), ("f19535", 113), ("f19525", 114), ("f19515", 115), ("f19505", 116), ("f19495", 117), ("f19485", 118), ("f19475", 119), ("f19465", 120), ("f19455", 121), ("f19445", 122), ("f19435", 123), ("f19425", 124), ("f19415", 125), ("f19405", 126), ("f19395", 127), ("f19385", 128), ("f19375", 129), ("f19365", 130), ("f19355", 131), ("f19345", 132), ("f19335", 133), ("f19325", 134), ("f19315", 135), ("f19305", 136), ("f19295", 137), ("f19285", 138), ("f19275", 139), ("f19265", 140), ("f19255", 141), ("f19245", 142), ("f19235", 143), ("f19225", 144), ("f19215", 145), ("f19205", 146), ("f19195", 147), ("f19190", 148), ("f19185", 149), ("f19180", 150), ("f19175", 151), ("f19170", 152), ("f19165", 153), ("f19160", 154), ("f19155", 155), ("f19150", 156), ("f19145", 157), ("f19140", 158), ("f19135", 159), ("f19130", 160), ("f19125", 161), ("f19120", 162), ("f19115", 163), ("f19110", 164), ("f19105", 165), ("f19095", 166), ("f19085", 167), ("f19075", 168), ("f19065", 169), ("f19055", 170), ("f19045", 171), ("f19035", 172), ("f19025", 173), ("f19015", 174), ("f19005", 175), ("f18995", 176), ("f18985", 177), ("f18975", 178), ("f18965", 179), ("f18955", 180), ("f18945", 181), ("f18935", 182), ("f18925", 183), ("f18915", 184), ("f18905", 185), ("f18895", 186), ("f18885", 187), ("f18875", 188), ("f18865", 189), ("f18855", 190), ("f18845", 191), ("f18835", 192), ("f18825", 193), ("f18815", 194), ("f18805", 195), ("f18795", 196), ("f18785", 197), ("f18775", 198), ("f18765", 199), ("f18755", 200), ("f18745", 201), ("f18735", 202), ("f18725", 203), ("f18715", 204), ("f18705", 205), ("c1270", 206), ("c1290", 207), ("c1310", 208), ("c1330", 209), ("c1350", 210), ("c1370", 211), ("c1430", 212), ("c1450", 213), ("t1650", 214), ("s1490", 215))

class FspR7ChannelNumberCaps(TextualConvention, Bits):
    description = 'CWDM channels; DWDM frequencies (50 GHz grid according ITU-T'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capF19600", 1), ("capF19590", 2), ("capF19580", 3), ("capF19570", 4), ("capF19550", 5), ("capF19540", 6), ("capF19530", 7), ("capF19520", 8), ("capF19500", 9), ("capF19490", 10), ("capF19480", 11), ("capF19470", 12), ("capF19450", 13), ("capF19440", 14), ("capF19430", 15), ("capF19420", 16), ("capF19380", 17), ("capF19370", 18), ("capF19360", 19), ("capF19350", 20), ("capF19330", 21), ("capF19320", 22), ("capF19310", 23), ("capF19300", 24), ("capF19280", 25), ("capF19270", 26), ("capF19260", 27), ("capF19250", 28), ("capF19230", 29), ("capF19220", 30), ("capF19210", 31), ("capF19200", 32), ("capF19100", 33), ("capF19090", 34), ("capF19080", 35), ("capF19070", 36), ("capF19050", 37), ("capF19040", 38), ("capF19030", 39), ("capF19020", 40), ("capF19000", 41), ("capF18990", 42), ("capF18980", 43), ("capF18970", 44), ("capF18950", 45), ("capF18940", 46), ("capF18930", 47), ("capF18920", 48), ("capF18880", 49), ("capF18870", 50), ("capF18860", 51), ("capF18850", 52), ("capF18830", 53), ("capF18820", 54), ("capF18810", 55), ("capF18800", 56), ("capF18780", 57), ("capF18770", 58), ("capF18760", 59), ("capF18750", 60), ("capF18730", 61), ("capF18720", 62), ("capF18710", 63), ("capF18700", 64), ("capF19560", 65), ("capF19510", 66), ("capF19460", 67), ("capF19410", 68), ("capF19390", 69), ("capF19340", 70), ("capF19290", 71), ("capF19240", 72), ("capF19060", 73), ("capF19010", 74), ("capF18960", 75), ("capF18910", 76), ("capF18890", 77), ("capF18840", 78), ("capF18790", 79), ("capF18740", 80), ("capF19400", 81), ("capF18900", 82), ("capF19640", 83), ("capF19635", 84), ("capF19630", 85), ("capF19625", 86), ("capF19620", 87), ("capF19615", 88), ("capF19605", 89), ("capC1470", 90), ("capC1490", 91), ("capC1510", 92), ("capC1530", 93), ("capC1550", 94), ("capC1570", 95), ("capC1590", 96), ("capC1610", 97), ("capS1310", 98), ("capS1630", 99), ("capG850", 100), ("capG1310", 101), ("capG1550", 102), ("capNull", 103), ("capNig", 104), ("capS1510", 105), ("capF19610", 106), ("capF19595", 107), ("capF19585", 108), ("capF19575", 109), ("capF19565", 110), ("capF19555", 111), ("capF19545", 112), ("capF19535", 113), ("capF19525", 114), ("capF19515", 115), ("capF19505", 116), ("capF19495", 117), ("capF19485", 118), ("capF19475", 119), ("capF19465", 120), ("capF19455", 121), ("capF19445", 122), ("capF19435", 123), ("capF19425", 124), ("capF19415", 125), ("capF19405", 126), ("capF19395", 127), ("capF19385", 128), ("capF19375", 129), ("capF19365", 130), ("capF19355", 131), ("capF19345", 132), ("capF19335", 133), ("capF19325", 134), ("capF19315", 135), ("capF19305", 136), ("capF19295", 137), ("capF19285", 138), ("capF19275", 139), ("capF19265", 140), ("capF19255", 141), ("capF19245", 142), ("capF19235", 143), ("capF19225", 144), ("capF19215", 145), ("capF19205", 146), ("capF19195", 147), ("capF19190", 148), ("capF19185", 149), ("capF19180", 150), ("capF19175", 151), ("capF19170", 152), ("capF19165", 153), ("capF19160", 154), ("capF19155", 155), ("capF19150", 156), ("capF19145", 157), ("capF19140", 158), ("capF19135", 159), ("capF19130", 160), ("capF19125", 161), ("capF19120", 162), ("capF19115", 163), ("capF19110", 164), ("capF19105", 165), ("capF19095", 166), ("capF19085", 167), ("capF19075", 168), ("capF19065", 169), ("capF19055", 170), ("capF19045", 171), ("capF19035", 172), ("capF19025", 173), ("capF19015", 174), ("capF19005", 175), ("capF18995", 176), ("capF18985", 177), ("capF18975", 178), ("capF18965", 179), ("capF18955", 180), ("capF18945", 181), ("capF18935", 182), ("capF18925", 183), ("capF18915", 184), ("capF18905", 185), ("capF18895", 186), ("capF18885", 187), ("capF18875", 188), ("capF18865", 189), ("capF18855", 190), ("capF18845", 191), ("capF18835", 192), ("capF18825", 193), ("capF18815", 194), ("capF18805", 195), ("capF18795", 196), ("capF18785", 197), ("capF18775", 198), ("capF18765", 199), ("capF18755", 200), ("capF18745", 201), ("capF18735", 202), ("capF18725", 203), ("capF18715", 204), ("capF18705", 205), ("capC1270", 206), ("capC1290", 207), ("capC1310", 208), ("capC1330", 209), ("capC1350", 210), ("capC1370", 211), ("capC1430", 212), ("capC1450", 213), ("capT1650", 214), ("capS1490", 215))

class FspR7ChannelSpacing(TextualConvention, Integer32):
    description = 'ITU Grid channel spacing'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("spacing50Ghz", 1), ("spacing100Ghz", 2), ("spacing200Ghz", 3), ("spacing25GHz", 4))

class FspR7ChannelSpacingCaps(TextualConvention, Bits):
    description = 'ITU Grid channel spacing'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capSpacing50Ghz", 1), ("capSpacing100Ghz", 2), ("capSpacing200Ghz", 3), ("capSpacing25GHz", 4))

class FspR7CommandModifier(TextualConvention, Integer32):
    description = 'Command Execution'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("generic", 1), ("adopt", 2), ("release", 3))

class FspR7CommandModifierCaps(TextualConvention, Bits):
    description = 'Command Execution'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capGeneric", 1), ("capAdopt", 2), ("capRelease", 3))

class FspR7Conn(TextualConvention, Integer32):
    description = 'Bidirectional | Unidirectional'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("bi", 1), ("uni", 2))

class FspR7ConnCaps(TextualConvention, Bits):
    description = 'Bidirectional | Unidirectional'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capBi", 1), ("capUni", 2))

class FspR7ConnCommand(TextualConvention, Integer32):
    description = 'Connection command'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("create", 2), ("destroy", 3), ("forceCreate", 4), ("forceDestroy", 5))

class FspR7ConnectorType(TextualConvention, Integer32):
    description = 'Connector Type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("undefined", 0), ("lc", 1), ("rj45", 2), ("mupc", 3), ("dsub8", 4), ("usbS", 5), ("dsub44hd", 6), ("fcApc", 7), ("mpo", 8))

class FspR7ConnectorTypeCaps(TextualConvention, Bits):
    description = 'Connector Type'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capLc", 1), ("capRj45", 2), ("capMupc", 3), ("capDsub8", 4), ("capUsbS", 5), ("capDsub44hd", 6), ("capFcApc", 7), ("capMpo", 8))

class FspR7ConnectState(TextualConvention, Integer32):
    description = 'Connection State'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("idle", 1), ("idleReceive", 2), ("idleTransmit", 3), ("busy", 4))

class FspR7CpAbortProcess(TextualConvention, Integer32):
    description = 'Abort process'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("undefined", 0), ("abt", 1))

class FspR7CpAbortProcessCaps(TextualConvention, Bits):
    description = 'Abort process'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capAbt", 1))

class FspR7CpActivState(TextualConvention, Integer32):
    description = 'Activation Enumeration State'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("undefined", 0), ("inactive", 1), ("activating", 2), ("active", 3), ("deactivating", 4), ("modifying", 5), ("restoring", 6), ("reverting", 7))

class FspR7CpActivStateCaps(TextualConvention, Bits):
    description = 'Activation Enumeration State'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capInactive", 1), ("capActivating", 2), ("capActive", 3), ("capDeactivating", 4), ("capModifying", 5), ("capRestoring", 6), ("capReverting", 7))

class FspR7CpAffinityInclusion(TextualConvention, Integer32):
    description = 'Affinity Inclusion'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("any", 2), ("all", 3))

class FspR7CpAffinityInclusionCaps(TextualConvention, Bits):
    description = 'Affinity Inclusion'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capAny", 2), ("capAll", 3))

class FspR7CpAuthType(TextualConvention, Integer32):
    description = 'Authentication Type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("simple", 2), ("md5", 3))

class FspR7CpAuthTypeCaps(TextualConvention, Bits):
    description = 'Authentication Type'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capSimple", 2), ("capMd5", 3))

class FspR7CpCancConnection(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("opr", 2))

class FspR7CpCancConnectionCaps(TextualConvention, Bits):
    description = ''
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capOpr", 2))

class FspR7CpCommand(TextualConvention, Integer32):
    description = 'Controls Tunnel Behavior'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("compute", 2), ("abort", 3))

class FspR7CpCommandCaps(TextualConvention, Bits):
    description = 'Controls Tunnel Behavior'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capCompute", 2), ("capAbort", 3))

class FspR7CpCompState(TextualConvention, Integer32):
    description = 'Pre-Computation Enumeration State'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 0), ("idle", 1), ("fail", 2), ("inprogs", 3), ("abt", 4), ("compl", 5))

class FspR7CpCompStateCaps(TextualConvention, Bits):
    description = 'Pre-Computation Enumeration State'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capIdle", 1), ("capFail", 2), ("capInprogs", 3), ("capAbt", 4), ("capCompl", 5))

class FspR7CpEncapsulation(TextualConvention, Integer32):
    description = 'Encapsulation'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("ipip", 2), ("greip", 3))

class FspR7CpEncapsulationCaps(TextualConvention, Bits):
    description = 'Encapsulation'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capIpip", 2), ("capGreip", 3))

class FspR7CpEncode(TextualConvention, Integer32):
    description = 'Encoding'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("undefined", 0), ("otn", 1), ("sonet", 2), ("sdh", 3), ("eth", 4), ("fc", 5), ("trans", 6), ("cl", 7), ("ib", 8), ("otnp", 9), ("unspecified", 10))

class FspR7CpEncodeCaps(TextualConvention, Bits):
    description = 'Encoding'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capOtn", 1), ("capSonet", 2), ("capSdh", 3), ("capEth", 4), ("capFc", 5), ("capTrans", 6), ("capCl", 7), ("capIb", 8), ("capOtnp", 9), ("capUnspecified", 10))

class FspR7CpErrorCategory(TextualConvention, Integer32):
    description = 'CP Provisioning Failure Category'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("undefined", 0), ("success", 1), ("nonOptimal", 2), ("provision", 3), ("pathComputation", 4), ("communicationConnection", 5), ("networkCommunication", 6), ("resourceUnavailable", 7), ("progress", 8), ("noPath", 9))

class FspR7CpNePosition(TextualConvention, Integer32):
    description = 'Position of the NE'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("local", 1), ("ingress", 2), ("egress", 3), ("transit", 4))

class FspR7CpNodeId(TextualConvention, Integer32):
    description = 'Node Name Syntax'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("tid", 1), ("ip", 2))

class FspR7CpOperateReversion(TextualConvention, Integer32):
    description = 'Triggers the manual reversion to the nominal connection'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("release", 1), ("manual", 2))

class FspR7CpOspfTeRouting(TextualConvention, Integer32):
    description = 'OSPF-TE Routing (Dynamic)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("enable", 1), ("disable", 2))

class FspR7CpOspfTeRoutingCaps(TextualConvention, Bits):
    description = 'OSPF-TE Routing (Dynamic)'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capEnable", 1), ("capDisable", 2))

class FspR7CpPathType(TextualConvention, Integer32):
    description = 'Path Type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("prov", 1), ("sig", 2), ("comp", 3))

class FspR7CpPinning(TextualConvention, Integer32):
    description = 'Pinning'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("yes", 1), ("no", 2))

class FspR7CpPinningCaps(TextualConvention, Bits):
    description = 'Pinning'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capYes", 1), ("capNo", 2))

class FspR7CpPreprovUeqState(TextualConvention, Integer32):
    description = 'Preprovisioned and Unequipped'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("yes", 1), ("no", 2))

class FspR7CpPreprovUeqStateCaps(TextualConvention, Bits):
    description = 'Preprovisioned and Unequipped'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capYes", 1), ("capNo", 2))

class FspR7CpProtectionType(TextualConvention, Integer32):
    description = 'Protection Type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("desired", 2), ("required", 3))

class FspR7CpProtectionTypeCaps(TextualConvention, Bits):
    description = 'Protection Type'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capDesired", 2), ("capRequired", 3))

class FspR7CpProtType(TextualConvention, Integer32):
    description = 'Protection Type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("onePlusOne", 1), ("oneToOne", 2))

class FspR7CpRecoveryType(TextualConvention, Integer32):
    description = 'Recovery Type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("desired", 2), ("required", 3), ("restoration", 4))

class FspR7CpRecoveryTypeCaps(TextualConvention, Bits):
    description = 'Recovery Type'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capDesired", 2), ("capRequired", 3), ("capRestoration", 4))

class FspR7CpRestorationState(TextualConvention, Integer32):
    description = 'Restoration Enumeration State'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("undefined", 0), ("idle", 1), ("fail", 2), ("inProgress", 3), ("abort", 4), ("completed", 5), ("completedNotReverted", 6))

class FspR7CpRestorationType(TextualConvention, Integer32):
    description = 'Restoration Type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("primary", 2), ("secondary", 3), ("all", 4))

class FspR7CpRestorationTypeCaps(TextualConvention, Bits):
    description = 'Restoration Type'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capPrimary", 2), ("capSecondary", 3), ("capAll", 4))

class FspR7CpRestorationMode(TextualConvention, Integer32):
    description = 'Restoration Mode (replaces pinning)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("dynamic", 2), ("guaranteed", 3))

class FspR7CpRestorationModeCaps(TextualConvention, Bits):
    description = 'Restoration Mode (replaces pinning)'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capDynamic", 2), ("capGuaranteed", 3))

class FspR7CpReversionState(TextualConvention, Integer32):
    description = 'Enumeration for Reversion States'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("idle", 1), ("waitToRevert", 2), ("inProgress", 3), ("failed", 4))

class FspR7CpReversionType(TextualConvention, Integer32):
    description = 'Manual Reversion, Automatic Reversion, or no reversion at all for tunnels supporting restoration'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("manual", 2), ("auto", 3))

class FspR7CpReversionTypeCaps(TextualConvention, Bits):
    description = 'Manual Reversion, Automatic Reversion, or no reversion at all for tunnels supporting restoration'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capManual", 2), ("capAuto", 3))

class FspR7CpRole(TextualConvention, Integer32):
    description = 'Role'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("undefined", 0), ("working", 1), ("protection", 2), ("na", 3), ("workingNominal", 4), ("workingRestored", 5), ("protectionNominal", 6), ("protectionRestored", 7), ("nominal", 8), ("restored", 9))

class FspR7CpRsvpSignalling(TextualConvention, Integer32):
    description = 'RSVP Signalling'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("enable", 1), ("disable", 2))

class FspR7CpRsvpSignallingCaps(TextualConvention, Bits):
    description = 'RSVP Signalling'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capEnable", 1), ("capDisable", 2))

class FspR7CpTEType(TextualConvention, Integer32):
    description = 'Traffic Engineering Entity Type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("node", 1), ("linkun", 2), ("linknr", 3))

class FspR7CpTETypeCaps(TextualConvention, Bits):
    description = 'Traffic Engineering Entity Type'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNode", 1), ("capLinkun", 2), ("capLinknr", 3))

class FspR7CpTie(TextualConvention, Integer32):
    description = 'Follow On'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("strict", 1), ("loose", 2))

class FspR7CpTieCaps(TextualConvention, Bits):
    description = 'Follow On'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capStrict", 1), ("capLoose", 2))

class FspR7CpTunnelType(TextualConvention, Integer32):
    description = 'Tunnel Type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("undefined", 0), ("p2p", 1))

class FspR7CpTunnelTypeCaps(TextualConvention, Bits):
    description = 'Tunnel Type'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capP2p", 1))

class FspR7CpTunnelScope(TextualConvention, Integer32):
    description = 'Service Scope extending over either Client or Network Ports of Modules'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("clientPort", 1), ("networkPort", 2))

class FspR7CpTunnelScopeCaps(TextualConvention, Bits):
    description = 'Service Scope extending over either Client or Network Ports of Modules'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capClientPort", 1), ("capNetworkPort", 2))

class FspR7CpType(TextualConvention, Integer32):
    description = 'Control Plane Type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("undefined", 0), ("intern", 1), ("gmpls", 2), ("none", 3), ("passive", 4), ("uni", 5), ("oifUni", 6), ("oifNni", 7))

class FspR7CpTypeCaps(TextualConvention, Bits):
    description = 'Control Plane Type'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capIntern", 1), ("capGmpls", 2), ("capNone", 3), ("capPassive", 4), ("capUni", 5), ("capOifUni", 6), ("capOifNni", 7))

class FspR7CpVTeType(TextualConvention, Integer32):
    description = 'Type of Virtual TE configuration'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("vTeLink", 1), ("vTeNode", 2), ("vTeNodeRlink", 3), ("vTeNodeVlink", 4))

class FspR7CpVTeTypeCaps(TextualConvention, Bits):
    description = 'Type of Virtual TE configuration'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capVTeLink", 1), ("capVTeNode", 2), ("capVTeNodeRlink", 3), ("capVTeNodeVlink", 4))

class FspR7DatabaseType(TextualConvention, Integer32):
    description = 'This shows whether the system is running on a temporary auxiliary DBor on the DB in ACT, which is the normal situation'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("auxiliary", 1), ("normal", 2))

class FspR7Date(TextualConvention, OctetString):
    description = 'A date specification.\n         field octets contents range\n         ----- ------ -------- -----\n         1 1-2 year* 0..65536\n         2 3 month 1..12\n         3 4 day 1..31\n         * Notes: - the value of year is in network-byte order\n         For example, Tuesday May 26, 1992 would be\n         displayed as:\n         1992-5-26'
    status = 'current'
    displayHint = '2d-1d-1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class FspR7DCFiberType(TextualConvention, Integer32):
    description = 'Dispersion Compensation Fibertype'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("singleMode", 1), ("trueWaveRs", 2))

class FspR7DCFiberTypeCaps(TextualConvention, Bits):
    description = 'Dispersion Compensation Fibertype'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capSingleMode", 1), ("capTrueWaveRs", 2))

class FspR7DeploymentScenario(TextualConvention, Integer32):
    description = 'Describes how the card is applied related to a network scenario'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("generic", 1), ("backToBack", 2), ("clientProt", 3), ("passThrough", 4))

class FspR7DeploymentScenarioCaps(TextualConvention, Bits):
    description = 'Describes how the card is applied related to a network scenario'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capGeneric", 1), ("capBackToBack", 2), ("capClientProt", 3), ("capPassThrough", 4))

class FspR7DispersionCompensation(TextualConvention, Integer32):
    description = 'Dispersion Compensation Value in km of SSMF fiber'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("undefined", 0), ("dispertion10", 1), ("dispertion20", 2), ("dispertion40", 3), ("dispertion60", 4), ("dispertion80", 5), ("dispertion100", 6), ("dispertion30", 7), ("dispertion50", 8), ("dispertion70", 9), ("dispertion90", 10), ("dispertion160", 11), ("dispertion240", 12), ("dispertion320", 13))

class FspR7DispersionCompensationCaps(TextualConvention, Bits):
    description = 'Dispersion Compensation Value in km of SSMF fiber'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capDispertion10", 1), ("capDispertion20", 2), ("capDispertion40", 3), ("capDispertion60", 4), ("capDispertion80", 5), ("capDispertion100", 6), ("capDispertion30", 7), ("capDispertion50", 8), ("capDispertion70", 9), ("capDispertion90", 10), ("capDispertion160", 11), ("capDispertion240", 12), ("capDispertion320", 13))

class FspR7DispersionConfig(TextualConvention, Integer32):
    description = 'Chromatic Dispersion Compensation'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("oprCdc", 2))

class FspR7DispersionConfigCaps(TextualConvention, Bits):
    description = 'Chromatic Dispersion Compensation'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capOprCdc", 2))

class FspR7DispersionModes(TextualConvention, Integer32):
    description = 'Dispersion Compensation Mode'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("auto", 1), ("man", 2))

class FspR7DispersionModesCaps(TextualConvention, Bits):
    description = 'Dispersion Compensation Mode'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capAuto", 1), ("capMan", 2))

class FspR7DispersionOperation(TextualConvention, Integer32):
    description = 'Chromatic Dispersion Compensation Operation'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("man", 2), ("auto", 3))

class FspR7DispersionOperationCaps(TextualConvention, Bits):
    description = 'Chromatic Dispersion Compensation Operation'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capMan", 2), ("capAuto", 3))

class FspR7EdfaOutputPowerRating(TextualConvention, Integer32):
    description = 'Optical Output Power Rating - Inventory'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("undefined", 0), ("pwrOut10", 1), ("pwrOut17", 2), ("pwrOut18", 3), ("pwrOut20", 4), ("pwrOut15", 5), ("pwrOut27", 6), ("pwrOut26", 7))

class FspR7EdfaOutputPowerRatingCaps(TextualConvention, Bits):
    description = 'Optical Output Power Rating - Inventory'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capPwrOut10", 1), ("capPwrOut17", 2), ("capPwrOut18", 3), ("capPwrOut20", 4), ("capPwrOut15", 5), ("capPwrOut27", 6), ("capPwrOut26", 7))

class FspR7EnableDisable(TextualConvention, Integer32):
    description = 'Enable/Disable variable.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("enable", 1), ("disable", 2))

class FspR7EnableDisableCaps(TextualConvention, Bits):
    description = 'Enable/Disable variable.'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capEnable", 1), ("capDisable", 2))

class FspR7EntitySecondaryStates(TextualConvention, Bits):
    description = 'Variable for representing the secondary states of an entity.'
    status = 'current'
    namedValues = NamedValues(("ueq", 0), ("meaState", 1), ("sgeo", 2), ("lpbkState", 3), ("lkdo", 4), ("frcdState", 5), ("faf", 6), ("flt", 7), ("act", 8), ("stbyh", 9), ("psi", 10), ("pri", 11), ("dgn", 12), ("busy", 13), ("idleState", 14), ("receiveIdleState", 15), ("transmitIdleState", 16), ("sgeoSrv", 17), ("farEndPlugOutage", 18), ("aseTableBuildState", 19), ("testState", 20), ("testFailed", 21))

class FspR7EntityType(TextualConvention, Integer32):
    description = 'Parameter which consists of following parts:'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 137, 138, 140, 141, 142, 143, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 185, 186, 187, 192, 193, 194, 203, 204, 205, 213, 214, 218, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593), SingleValueConstraint(594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 660, 662, 663, 665, 667, 673, 674, 1000, 1001, 1002, 1003, 1004, 1005, 1101, 1102, 1103))
    namedValues = NamedValues(("undefined", 0), ("eqpSh1hu", 1), ("eqpSh1huDc", 2), ("eqpSh3hu", 3), ("eqpSh7hu", 4), ("eqpF2kSh5hu", 5), ("eqpF2kSh6hu", 6), ("eqpDcm", 7), ("eqpSh9hu", 8), ("eqpUnknown", 19), ("eqpNcu", 20), ("eqpNcutif", 21), ("eqpScu", 22), ("eqpScue", 23), ("eqpR6cu", 24), ("eqpPsu1huac", 25), ("eqpPsu7huac", 26), ("eqpPsu7hudc", 27), ("eqpFcu7hu", 28), ("eqp2clsmd", 29), ("eqp2absmc", 30), ("eqp2bsmd", 31), ("eqp1Gsmud", 32), ("eqp4gsmd", 33), ("eqp8gsmd", 34), ("eqp1csmuc", 35), ("eqp1csmuewc", 36), ("eqp4csmd", 37), ("eqp4csmud", 38), ("eqp4csmc", 39), ("eqpOsfm", 40), ("eqp1pm", 41), ("eqp2pm", 42), ("eqp40csmd", 43), ("eqpDcf", 44), ("eqpEdfas", 45), ("eqpEdfasgc", 46), ("eqpEdfadgc", 47), ("eqpRaman", 48), ("eqp4tcc2g5", 49), ("eqp4tcc2g5d", 50), ("eqp4tcc10gd", 51), ("eqp4tcc10gc", 52), ("eqpWcc10gd", 53), ("eqpWcc10gc", 54), ("eqpWcc2g71N", 55), ("eqpWcc2g7d", 56), ("eqp2tcm2g5", 57), ("eqp2tca2g5", 58), ("eqp8tca10gd", 59), ("eqp8tca10gc", 60), ("eqpWca10gd", 61), ("eqpWca10gc", 62), ("eqp4tca4gd", 63), ("eqp4tca4gc", 64), ("eqpwca2g5", 65), ("eqp4tca1g3d", 66), ("eqp4tca1g3c", 67), ("eqp8tce2g5d", 68), ("eqp8tce2g5c", 69), ("eqpWcelsd", 70), ("eqpWcelsc", 71), ("eqpVsm", 72), ("eqpRsmolm", 73), ("eqpRsmsf", 74), ("eqpOscm", 75), ("eqp2oscm", 76), ("eqpDrm", 77), ("eqpXfpG", 78), ("eqpsfpd", 79), ("eqpSfpc", 80), ("eqpSfpg", 81), ("eqpSfpe", 82), ("eqpSh1hudcm", 83), ("eqpCustomc", 84), ("eqpCustomd", 85), ("eqpPsu1hudc", 86), ("eqpWcc2g7c", 87), ("eqp1csmuEwD", 88), ("eqp1csmuG", 89), ("eqp3BsmC", 90), ("eqp2Tca2g5s", 91), ("eqp8Csmuc", 92), ("eqpEdfaDgcb", 93), ("eqpOscmPn", 94), ("eqp4Tcc10gtd", 95), ("eqp4Tca4g", 96), ("eqpDcg", 97), ("eqp2Tcm2g5d", 98), ("eqp2Tcm2g5c", 99), ("eqpWcm2g5d", 100), ("eqpWcm2g5c", 101), ("eqpEdfmSgc", 102), ("eqpF2kDemiV2", 103), ("eqpPsm", 104), ("eqpNcu2e", 105), ("eqp8TceGl2g5d", 106), ("eqp8TceGl2g5c", 107), ("eqpDcf1hu", 108), ("eqp10tcc10gtd", 109), ("eqp10tcc10gd", 110), ("eqp10tcc10gc", 111), ("eqp16csmSfd", 112), ("eqpOsfmSf", 113), ("eqp2clsmSfd", 114), ("eqp3bsmEwc", 115), ("eqpEdfaSgcb", 116), ("eqpEdfaDgcv", 117), ("eqpWcc10gtd", 118), ("eqp2csmuEwc", 119), ("eqpEroadmDc", 120), ("eqpScuS", 122), ("eqp4opcm", 123), ("eqpUtm", 124), ("eqpPscu", 125), ("eqp40Csm2hu", 126), ("eqp2Twcc2g7", 127), ("eqp2Wca10g", 130), ("eqpNcuHp", 131), ("eqpNcu20085hu", 132), ("eqpXfpC", 137), ("eqpXfpD", 138), ("eqpWcc40gtd", 140), ("eqpIlm", 141), ("eqpNcuII", 142), ("eqpCem9hu", 143), ("eqp8roadmC40", 148), ("eqp4Tcc40gtd", 149), ("eqp2pca10g", 150), ("eqp10pca10g", 151), ("eqp1csmuD", 152), ("eqpSfpOsC", 153), ("eqpSfpOdC", 154), ("eqpSfpOsG", 155), ("eqpSfpOdG", 156), ("eqpRoadmC80", 157), ("eqpccm8", 158), ("eqpPsu9hudc", 159), ("eqp4tca4gus", 160), ("eqp40Csm3huD", 161), ("eqp5psm", 162), ("eqpFan9hu", 163), ("eqp5tce10gtd", 164), ("eqp10tccs10gtd", 165), ("eqp40Csm3hudcD", 166), ("eqp40Csm3hudcDi", 167), ("eqp5gsmD", 169), ("eqp8csmD", 170), ("eqp2otfm", 171), ("eqp8otdr3hu", 172), ("eqpXfptD", 173), ("eqp40Csm3huDi", 174), ("eqp8CcmC80", 175), ("eqpEdfaD27", 176), ("eqp2Wcc10g", 177), ("eqp8RoadmC80", 178), ("eqp2Wcc10gAes", 180), ("eqp5tce10gtaesd", 182), ("eqpSh1hupf", 183), ("eqpFan1hu", 185), ("eqp10tcc10g", 186), ("eqpXfpOtnD", 187), ("eqp2Raman", 192), ("eqpEdfaS26", 193), ("eqp5tces10gtd", 194), ("eqpWcc100gtD", 203), ("eqpCfp4g", 204), ("eqpCfp10g", 205), ("eqpXfpTlnD", 213), ("eqp5tces10gtaesd", 214), ("eqp2psm", 218), ("ifTypeOtu1", 501), ("ifTypeOtu2", 502), ("ifType10GbE", 503), ("ifTypeOc192", 504), ("ifTypeOc48", 505), ("ifTypeStm16", 506), ("ifTypeStm64", 507), ("ifType10GFC", 508), ("ifTypeF1062", 510), ("ifTypeF1250", 511), ("ifTypeFC", 512), ("ifTypeF125", 513), ("ifTypeF200", 514), ("ifTypeF9953", 515), ("ifTypeF10312", 516), ("ifTypeF10518", 517), ("ifTypeF2488", 518), ("ifTypeGfpF", 519), ("ifTypeGfpT", 520), ("ifTypeDccL", 521), ("ifTypeDccS", 522), ("ifTypeDccP", 523), ("ifTypeOdu1", 524), ("ifTypeGcc0", 525), ("ifTypeGcc1", 526), ("ifTypeGcc2", 527), ("ifTypeoch", 528), ("ifTypeOm", 529), ("ifTypeOt", 534), ("ifTypeE10or100bt", 536), ("ifTypeE100fx", 537), ("ifTypeCl", 538), ("ifType2GFC", 539), ("ifType2GCL", 540), ("ifType1GbE", 541), ("ifTypeEoc", 542), ("ifTypeSwitch", 543), ("ifTypePassive", 544), ("ifTypeF2500", 545), ("ifTypeSc", 546), ("ifTypeUch", 547), ("ifTypeF155", 548), ("ifTypeF622", 549), ("ifTypeF2125", 550), ("ifTypeF2666", 551), ("ifTypeF4250", 552), ("ifTypeF10709", 554), ("ifTypeF11095", 555), ("ifTypeF11318", 556), ("ifTypeLs", 557), ("ifType4Gfc", 558), ("ifTypeGcc0S", 559), ("ifType2R", 560), ("ifTypePppIp", 561), ("ifTypeLanIp", 562), ("ifTypeSerial", 564), ("ifTypeModem", 565), ("ifTypeAdapt", 566), ("ifTypeAdaptd", 567), ("ifTypeGBEFR", 569), ("ifTypeVc4", 570), ("ifTypeVc3", 571), ("ifTypeSts1", 572), ("ifTypeEdfa", 573), ("ifTypeEdfaMid", 574), ("ifType10Gdw", 575), ("ifTypeOtu2Lan", 576), ("ifTypeOtu1Lan", 577), ("ifTypeOtu1Fc", 578), ("ifTypeOtu1Fc2G", 579), ("ifTypeF197", 580), ("ifTypeTif", 581), ("ifTypeSts3c", 582), ("ifTypeVs1", 583), ("ifType1GbETH", 584), ("ifTypeStm1", 585), ("ifTypeStm4", 586), ("ifTypeOc3", 587), ("ifTypeOc12", 588), ("ifTypeOtu1Stm1", 589), ("ifTypeOtu1Stm4", 590), ("ifTypeF166", 591), ("ifTypeF666", 592), ("ifTypeI2C", 593)) + NamedValues(("ifTypeLifIP", 594), ("ifTypeSts24c", 595), ("ifTypeSts48c", 596), ("ifTypeLifte", 597), ("ifTypeRaman", 598), ("ifTypeIpWhiteList", 599), ("ifTypeOspfIp", 600), ("ifTypeEncapIp", 601), ("ifTypeOtu3", 602), ("ifTypeStm256", 603), ("ifTypeOc768", 604), ("ifTypeF10664", 605), ("ifTypeOdu2", 606), ("ifTypeF39813", 607), ("ifTypeVc4c8", 608), ("ifTypeVc4c16", 609), ("ifTypeF8500", 610), ("ifTypePb", 611), ("ifTypePolicer", 612), ("ifTypeQueue", 613), ("ifTypeFlowPoint", 614), ("ifTypeLag", 615), ("ifTypeElinePPP", 616), ("ifTypeEtree", 617), ("ifTypeEline", 618), ("ifTypeElan", 619), ("ifTypeCtrans", 620), ("ifTypeVs0", 621), ("ifTypeTug", 622), ("ifTypeMd", 623), ("ifTypeMa", 624), ("ifTypeDownMep", 625), ("ifTypeFMep", 626), ("ifType8Gfc", 627), ("ifType10Gib", 628), ("ifTypeF10000", 629), ("ifTypeOtu2pFC8", 630), ("ifTypeOtu2pIB", 631), ("ifTypeOtu2pFC", 632), ("ifTypeOtu2pLAN", 633), ("ifTypeOtu2p", 634), ("ifTypeUpMep", 635), ("ifTypeOtdrCh", 636), ("ifTypeMaNet", 637), ("ifTypeMaComp", 638), ("ifTypeBridge", 639), ("ifType1000BaseT", 640), ("ifTypeOtu2E", 641), ("ifTypeOtu1E", 642), ("ifTypeOtu2F", 643), ("ifTypeF11049", 644), ("ifTypeLifteNum", 645), ("ifTypeLifteUnn", 646), ("ifTypeLifPbNum", 647), ("ifTypeLifSubUnn", 648), ("ifType5Gib", 649), ("ifTypeF5000", 650), ("ifTypeOtu2eEth", 651), ("ifTypeOdu0", 652), ("ifTypeFcu", 653), ("ifTypeOtu4", 654), ("ifType100GbE", 660), ("ifType10GbEWan", 662), ("ifType10GbELan", 663), ("ifTypeOtlc", 665), ("ifTypeOtu2ps", 667), ("ifTypeLifVTeNum", 673), ("ifTypeLifVTeUnn", 674), ("grpffpCh", 1000), ("grpffpOm", 1001), ("grpCrsDcn", 1002), ("grpLanDcn", 1003), ("grpConn", 1004), ("grpffpVchN", 1005), ("conFanContainer", 1101), ("conModContainer", 1102), ("conPlugContainer", 1103))

class FspR7EocProtAvailability(TextualConvention, Integer32):
    description = 'ECC Protection Availability'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("no", 1), ("yes", 2))

class FspR7EqlzAdminState(TextualConvention, Integer32):
    description = 'Scheduled Equalization Administration'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("enabled", 1), ("disabled", 2))

class FspR7EqlzAdminStateCaps(TextualConvention, Bits):
    description = 'Scheduled Equalization Administration'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capEnabled", 1), ("capDisabled", 2))

class FspR7EqlzInterval(TextualConvention, Integer32):
    description = 'Scheduled Equalization Interval'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("undefined", 0), ("interval-2-hr", 1), ("interval-4-hr", 2), ("interval-12-hr", 3), ("interval-1-day", 4), ("interval-7-day", 5), ("interval-5-min", 6))

class FspR7EqlzIntervalCaps(TextualConvention, Bits):
    description = 'Scheduled Equalization Interval'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capInterval-2-hr", 1), ("capInterval-4-hr", 2), ("capInterval-12-hr", 3), ("capInterval-1-day", 4), ("capInterval-7-day", 5), ("capInterval-5-min", 6))

class FspR7EquipmentType(TextualConvention, Integer32):
    description = "The TYPE of Equipment and the MODE setting determine uniquely\n         the number and allowed TYPE's of the provisionable dependent\n         entities (plugs, interfaces, modules)"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 137, 138, 140, 141, 142, 143, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 185, 186, 187, 192, 193, 194, 203, 204, 205, 213, 214, 218))
    namedValues = NamedValues(("undefined", 0), ("eqpSh1hu", 1), ("eqpSh1huDc", 2), ("eqpSh3hu", 3), ("eqpSh7hu", 4), ("eqpF2kSh5hu", 5), ("eqpF2kSh6hu", 6), ("eqpDcm", 7), ("eqpSh9hu", 8), ("eqpUnknown", 19), ("eqpNcu", 20), ("eqpNcutif", 21), ("eqpScu", 22), ("eqpScue", 23), ("eqpR6cu", 24), ("eqpPsu1huac", 25), ("eqpPsu7huac", 26), ("eqpPsu7hudc", 27), ("eqpFcu7hu", 28), ("eqp2clsmd", 29), ("eqp2absmc", 30), ("eqp2bsmd", 31), ("eqp1Gsmud", 32), ("eqp4gsmd", 33), ("eqp8gsmd", 34), ("eqp1csmuc", 35), ("eqp1csmuewc", 36), ("eqp4csmd", 37), ("eqp4csmud", 38), ("eqp4csmc", 39), ("eqpOsfm", 40), ("eqp1pm", 41), ("eqp2pm", 42), ("eqp40csmd", 43), ("eqpDcf", 44), ("eqpEdfas", 45), ("eqpEdfasgc", 46), ("eqpEdfadgc", 47), ("eqpRaman", 48), ("eqp4tcc2g5", 49), ("eqp4tcc2g5d", 50), ("eqp4tcc10gd", 51), ("eqp4tcc10gc", 52), ("eqpWcc10gd", 53), ("eqpWcc10gc", 54), ("eqpWcc2g71N", 55), ("eqpWcc2g7d", 56), ("eqp2tcm2g5", 57), ("eqp2tca2g5", 58), ("eqp8tca10gd", 59), ("eqp8tca10gc", 60), ("eqpWca10gd", 61), ("eqpWca10gc", 62), ("eqp4tca4gd", 63), ("eqp4tca4gc", 64), ("eqpwca2g5", 65), ("eqp4tca1g3d", 66), ("eqp4tca1g3c", 67), ("eqp8tce2g5d", 68), ("eqp8tce2g5c", 69), ("eqpWcelsd", 70), ("eqpWcelsc", 71), ("eqpVsm", 72), ("eqpRsmolm", 73), ("eqpRsmsf", 74), ("eqpOscm", 75), ("eqp2oscm", 76), ("eqpDrm", 77), ("eqpXfpG", 78), ("eqpsfpd", 79), ("eqpSfpc", 80), ("eqpSfpg", 81), ("eqpSfpe", 82), ("eqpSh1hudcm", 83), ("eqpCustomc", 84), ("eqpCustomd", 85), ("eqpPsu1hudc", 86), ("eqpWcc2g7c", 87), ("eqp1csmuEwD", 88), ("eqp1csmuG", 89), ("eqp3BsmC", 90), ("eqp2Tca2g5s", 91), ("eqp8Csmuc", 92), ("eqpEdfaDgcb", 93), ("eqpOscmPn", 94), ("eqp4Tcc10gtd", 95), ("eqp4Tca4g", 96), ("eqpDcg", 97), ("eqp2Tcm2g5d", 98), ("eqp2Tcm2g5c", 99), ("eqpWcm2g5d", 100), ("eqpWcm2g5c", 101), ("eqpEdfmSgc", 102), ("eqpF2kDemiV2", 103), ("eqpPsm", 104), ("eqpNcu2e", 105), ("eqp8TceGl2g5d", 106), ("eqp8TceGl2g5c", 107), ("eqpDcf1hu", 108), ("eqp10tcc10gtd", 109), ("eqp10tcc10gd", 110), ("eqp10tcc10gc", 111), ("eqp16csmSfd", 112), ("eqpOsfmSf", 113), ("eqp2clsmSfd", 114), ("eqp3bsmEwc", 115), ("eqpEdfaSgcb", 116), ("eqpEdfaDgcv", 117), ("eqpWcc10gtd", 118), ("eqp2csmuEwc", 119), ("eqpEroadmDc", 120), ("eqpScuS", 122), ("eqp4opcm", 123), ("eqpUtm", 124), ("eqpPscu", 125), ("eqp40Csm2hu", 126), ("eqp2Twcc2g7", 127), ("eqp2Wca10g", 130), ("eqpNcuHp", 131), ("eqpNcu20085hu", 132), ("eqpXfpC", 137), ("eqpXfpD", 138), ("eqpWcc40gtd", 140), ("eqpIlm", 141), ("eqpNcuII", 142), ("eqpCem9hu", 143), ("eqp8roadmC40", 148), ("eqp4Tcc40gtd", 149), ("eqp2pca10g", 150), ("eqp10pca10g", 151), ("eqp1csmuD", 152), ("eqpSfpOsC", 153), ("eqpSfpOdC", 154), ("eqpSfpOsG", 155), ("eqpSfpOdG", 156), ("eqpRoadmC80", 157), ("eqpccm8", 158), ("eqpPsu9hudc", 159), ("eqp4tca4gus", 160), ("eqp40Csm3huD", 161), ("eqp5psm", 162), ("eqpFan9hu", 163), ("eqp5tce10gtd", 164), ("eqp10tccs10gtd", 165), ("eqp40Csm3hudcD", 166), ("eqp40Csm3hudcDi", 167), ("eqp5gsmD", 169), ("eqp8csmD", 170), ("eqp2otfm", 171), ("eqp8otdr3hu", 172), ("eqpXfptD", 173), ("eqp40Csm3huDi", 174), ("eqp8CcmC80", 175), ("eqpEdfaD27", 176), ("eqp2Wcc10g", 177), ("eqp8RoadmC80", 178), ("eqp2Wcc10gAes", 180), ("eqp5tce10gtaesd", 182), ("eqpSh1hupf", 183), ("eqpFan1hu", 185), ("eqp10tcc10g", 186), ("eqpXfpOtnD", 187), ("eqp2Raman", 192), ("eqpEdfaS26", 193), ("eqp5tces10gtd", 194), ("eqpWcc100gtD", 203), ("eqpCfp4g", 204), ("eqpCfp10g", 205), ("eqpXfpTlnD", 213), ("eqp5tces10gtaesd", 214), ("eqp2psm", 218))

class FspR7EquipmentTypeCaps(TextualConvention, Bits):
    description = "The TYPE of Equipment and the MODE setting determine uniquely\n         the number and allowed TYPE's of the provisionable dependent\n         entities (plugs, interfaces, modules)"
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capEqpSh1hu", 1), ("capEqpSh1huDc", 2), ("capEqpSh3hu", 3), ("capEqpSh7hu", 4), ("capEqpF2kSh5hu", 5), ("capEqpF2kSh6hu", 6), ("capEqpDcm", 7), ("capEqpSh9hu", 8), ("capEqpUnknown", 19), ("capEqpNcu", 20), ("capEqpNcutif", 21), ("capEqpScu", 22), ("capEqpScue", 23), ("capEqpR6cu", 24), ("capEqpPsu1huac", 25), ("capEqpPsu7huac", 26), ("capEqpPsu7hudc", 27), ("capEqpFcu7hu", 28), ("capEqp2clsmd", 29), ("capEqp2absmc", 30), ("capEqp2bsmd", 31), ("capEqp1Gsmud", 32), ("capEqp4gsmd", 33), ("capEqp8gsmd", 34), ("capEqp1csmuc", 35), ("capEqp1csmuewc", 36), ("capEqp4csmd", 37), ("capEqp4csmud", 38), ("capEqp4csmc", 39), ("capEqpOsfm", 40), ("capEqp1pm", 41), ("capEqp2pm", 42), ("capEqp40csmd", 43), ("capEqpDcf", 44), ("capEqpEdfas", 45), ("capEqpEdfasgc", 46), ("capEqpEdfadgc", 47), ("capEqpRaman", 48), ("capEqp4tcc2g5", 49), ("capEqp4tcc2g5d", 50), ("capEqp4tcc10gd", 51), ("capEqp4tcc10gc", 52), ("capEqpWcc10gd", 53), ("capEqpWcc10gc", 54), ("capEqpWcc2g71N", 55), ("capEqpWcc2g7d", 56), ("capEqp2tcm2g5", 57), ("capEqp2tca2g5", 58), ("capEqp8tca10gd", 59), ("capEqp8tca10gc", 60), ("capEqpWca10gd", 61), ("capEqpWca10gc", 62), ("capEqp4tca4gd", 63), ("capEqp4tca4gc", 64), ("capEqpwca2g5", 65), ("capEqp4tca1g3d", 66), ("capEqp4tca1g3c", 67), ("capEqp8tce2g5d", 68), ("capEqp8tce2g5c", 69), ("capEqpWcelsd", 70), ("capEqpWcelsc", 71), ("capEqpVsm", 72), ("capEqpRsmolm", 73), ("capEqpRsmsf", 74), ("capEqpOscm", 75), ("capEqp2oscm", 76), ("capEqpDrm", 77), ("capEqpXfpG", 78), ("capEqpsfpd", 79), ("capEqpSfpc", 80), ("capEqpSfpg", 81), ("capEqpSfpe", 82), ("capEqpSh1hudcm", 83), ("capEqpCustomc", 84), ("capEqpCustomd", 85), ("capEqpPsu1hudc", 86), ("capEqpWcc2g7c", 87), ("capEqp1csmuEwD", 88), ("capEqp1csmuG", 89), ("capEqp3BsmC", 90), ("capEqp2Tca2g5s", 91), ("capEqp8Csmuc", 92), ("capEqpEdfaDgcb", 93), ("capEqpOscmPn", 94), ("capEqp4Tcc10gtd", 95), ("capEqp4Tca4g", 96), ("capEqpDcg", 97), ("capEqp2Tcm2g5d", 98), ("capEqp2Tcm2g5c", 99), ("capEqpWcm2g5d", 100), ("capEqpWcm2g5c", 101), ("capEqpEdfmSgc", 102), ("capEqpF2kDemiV2", 103), ("capEqpPsm", 104), ("capEqpNcu2e", 105), ("capEqp8TceGl2g5d", 106), ("capEqp8TceGl2g5c", 107), ("capEqpDcf1hu", 108), ("capEqp10tcc10gtd", 109), ("capEqp10tcc10gd", 110), ("capEqp10tcc10gc", 111), ("capEqp16csmSfd", 112), ("capEqpOsfmSf", 113), ("capEqp2clsmSfd", 114), ("capEqp3bsmEwc", 115), ("capEqpEdfaSgcb", 116), ("capEqpEdfaDgcv", 117), ("capEqpWcc10gtd", 118), ("capEqp2csmuEwc", 119), ("capEqpEroadmDc", 120), ("capEqpScuS", 122), ("capEqp4opcm", 123), ("capEqpUtm", 124), ("capEqpPscu", 125), ("capEqp40Csm2hu", 126), ("capEqp2Twcc2g7", 127), ("capEqp2Wca10g", 130), ("capEqpNcuHp", 131), ("capEqpNcu20085hu", 132), ("capEqpXfpC", 137), ("capEqpXfpD", 138), ("capEqpWcc40gtd", 140), ("capEqpIlm", 141), ("capEqpNcuII", 142), ("capEqpCem9hu", 143), ("capEqp8roadmC40", 148), ("capEqp4Tcc40gtd", 149), ("capEqp2pca10g", 150), ("capEqp10pca10g", 151), ("capEqp1csmuD", 152), ("capEqpSfpOsC", 153), ("capEqpSfpOdC", 154), ("capEqpSfpOsG", 155), ("capEqpSfpOdG", 156), ("capEqpRoadmC80", 157), ("capEqpccm8", 158), ("capEqpPsu9hudc", 159), ("capEqp4tca4gus", 160), ("capEqp40Csm3huD", 161), ("capEqp5psm", 162), ("capEqpFan9hu", 163), ("capEqp5tce10gtd", 164), ("capEqp10tccs10gtd", 165), ("capEqp40Csm3hudcD", 166), ("capEqp40Csm3hudcDi", 167), ("capEqp5gsmD", 169), ("capEqp8csmD", 170), ("capEqp2otfm", 171), ("capEqp8otdr3hu", 172), ("capEqpXfptD", 173), ("capEqp40Csm3huDi", 174), ("capEqp8CcmC80", 175), ("capEqpEdfaD27", 176), ("capEqp2Wcc10g", 177), ("capEqp8RoadmC80", 178), ("capEqp2Wcc10gAes", 180), ("capEqp5tce10gtaesd", 182), ("capEqpSh1hupf", 183), ("capEqpFan1hu", 185), ("capEqp10tcc10g", 186), ("capEqpXfpOtnD", 187), ("capEqp2Raman", 192), ("capEqpEdfaS26", 193), ("capEqp5tces10gtd", 194), ("capEqpWcc100gtD", 203), ("capEqpCfp4g", 204), ("capEqpCfp10g", 205), ("capEqpXfpTlnD", 213), ("capEqp5tces10gtaesd", 214), ("capEqp2psm", 218))

class FspR7ErrorFwdMode(TextualConvention, Integer32):
    description = 'Determines the reaction in forward direction in response to a LOS on\n         the interface on the opposite side of the module: may override\n         this behaviour in the interests of laser safety.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("undefined", 0), ("ais", 1), ("epc", 2), ("idle", 3), ("lsrOff", 4), ("lsrBrk", 5), ("txOff", 6))

class FspR7ErrorFwdModeCaps(TextualConvention, Bits):
    description = 'Determines the reaction in forward direction in response to a LOS on\n         the interface on the opposite side of the module: may override\n         this behaviour in the interests of laser safety.'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capAis", 1), ("capEpc", 2), ("capIdle", 3), ("capLsrOff", 4), ("capLsrBrk", 5), ("capTxOff", 6))

class FspR7FalseTrue(TextualConvention, Integer32):
    description = 'False True variable.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("false", 1), ("true", 2))

class FspR7FalseTrueCaps(TextualConvention, Bits):
    description = 'False True variable.'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capFalse", 1), ("capTrue", 2))

class FspR7FecType(TextualConvention, Integer32):
    description = 'Forward Error Correction (Only relevant where TYPE = OTU#)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("undefined", 0), ("gFec", 1), ("eFec", 2), ("noFec", 3), ("eFec1", 4), ("eFec2", 5), ("eFec3", 6), ("eFec4", 7))

class FspR7FecTypeCaps(TextualConvention, Bits):
    description = 'Forward Error Correction (Only relevant where TYPE = OTU#)'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capGFec", 1), ("capEFec", 2), ("capNoFec", 3), ("capEFec1", 4), ("capEFec2", 5), ("capEFec3", 6), ("capEFec4", 7))

class FspR7FiberBrand(TextualConvention, Integer32):
    description = 'Brand of fiber present in the fiber plant'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("undefined", 0), ("g652", 1), ("g653", 2), ("g655", 3), ("smf28e", 4), ("allWave", 5), ("leaf", 6), ("twRs", 7), ("twPl", 8), ("twCl", 9), ("teraLight", 10), ("smfLs", 11), ("metrocor", 12))

class FspR7FiberBrandCaps(TextualConvention, Bits):
    description = 'Brand of fiber present in the fiber plant'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capG652", 1), ("capG653", 2), ("capG655", 3), ("capSmf28e", 4), ("capAllWave", 5), ("capLeaf", 6), ("capTwRs", 7), ("capTwPl", 8), ("capTwCl", 9), ("capTeraLight", 10), ("capSmfLs", 11), ("capMetrocor", 12))

class FspR7FlowControlMode(TextualConvention, Integer32):
    description = 'Flow Control mechanism'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("hwControl", 2), ("pause", 3))

class FspR7FlowControlModeCaps(TextualConvention, Bits):
    description = 'Flow Control mechanism'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capHwControl", 2), ("capPause", 3))

class FspR7ForcedStatus(TextualConvention, Integer32):
    description = 'Forced Destroy'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("active", 1), ("forcedDestroy", 2))

class FspR7ForcedStatusCaps(TextualConvention, Bits):
    description = 'Forced Destroy'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capActive", 1), ("capForcedDestroy", 2))

class FspR7FrameFormat(TextualConvention, Integer32):
    description = 'Frame Format'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 99))
    namedValues = NamedValues(("undefined", 0), ("otn", 1), ("sdh", 2), ("sonet", 3), ("ethernet", 4), ("fiberchannel", 5), ("infiniband", 6), ("couplinglink", 7), ("transparent", 8), ("notDefined", 99))

class FspR7FrameFormatCaps(TextualConvention, Bits):
    description = 'Frame Format'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capOtn", 1), ("capSdh", 2), ("capSonet", 3), ("capEthernet", 4), ("capFiberchannel", 5), ("capInfiniband", 6), ("capCouplinglink", 7), ("capTransparent", 8), ("capNotDefined", 99))

class FspR7FtpServer(TextualConvention, Integer32):
    description = 'FTP server enable/disable configuration'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("enable", 1), ("disable", 2))

class FspR7FtpServerCaps(TextualConvention, Bits):
    description = 'FTP server enable/disable configuration'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capEnable", 1), ("capDisable", 2))

class FspR7FtpClient(TextualConvention, Integer32):
    description = 'FTP client enable/disable configuration'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("enable", 1), ("disable", 2))

class FspR7FunctionCrs(TextualConvention, Integer32):
    description = 'Describes the Cross Connect Functionality'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("add", 1), ("drop", 2), ("pass", 3), ("hairpin", 4))

class FspR7Gain(TextualConvention, Integer32):
    description = 'Gain.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("gain24", 1), ("gain25", 2))

class FspR7GainCaps(TextualConvention, Bits):
    description = 'Gain.'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capGain24", 1), ("capGain25", 2))

class FspR7GainRange(TextualConvention, Integer32):
    description = 'EDFA gain range to provision'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("high", 1), ("low", 2))

class FspR7GainRangeCaps(TextualConvention, Bits):
    description = 'EDFA gain range to provision'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capHigh", 1), ("capLow", 2))

class FspR7InitEqualization(TextualConvention, Integer32):
    description = 'Initiate Equalization'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("opr", 2))

class FspR7InitEqualizationCaps(TextualConvention, Bits):
    description = 'Initiate Equalization'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capOpr", 2))

class FspR7InterfaceFunction(TextualConvention, Integer32):
    description = 'Interface Function'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("undefined", 0), ("transport", 1), ("switch", 2), ("edfa", 3), ("super", 4), ("passive", 5), ("active", 6), ("raman", 7))

class FspR7InterfaceFunctionCaps(TextualConvention, Bits):
    description = 'Interface Function'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capTransport", 1), ("capSwitch", 2), ("capEdfa", 3), ("capSuper", 4), ("capPassive", 5), ("capActive", 6), ("capRaman", 7))

class FspR7InterfaceType(TextualConvention, Integer32):
    description = 'The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 160, 162, 163, 165, 167, 173, 174))
    namedValues = NamedValues(("undefined", 0), ("ifTypeOtu1", 1), ("ifTypeOtu2", 2), ("ifType10GbE", 3), ("ifTypeOc192", 4), ("ifTypeOc48", 5), ("ifTypeStm16", 6), ("ifTypeStm64", 7), ("ifType10GFC", 8), ("ifTypeF1062", 10), ("ifTypeF1250", 11), ("ifTypeFC", 12), ("ifTypeF125", 13), ("ifTypeF200", 14), ("ifTypeF9953", 15), ("ifTypeF10312", 16), ("ifTypeF10518", 17), ("ifTypeF2488", 18), ("ifTypeGfpF", 19), ("ifTypeGfpT", 20), ("ifTypeDccL", 21), ("ifTypeDccS", 22), ("ifTypeDccP", 23), ("ifTypeOdu1", 24), ("ifTypeGcc0", 25), ("ifTypeGcc1", 26), ("ifTypeGcc2", 27), ("ifTypeoch", 28), ("ifTypeOm", 29), ("ifTypeOt", 34), ("ifTypeE10or100bt", 36), ("ifTypeE100fx", 37), ("ifTypeCl", 38), ("ifType2GFC", 39), ("ifType2GCL", 40), ("ifType1GbE", 41), ("ifTypeEoc", 42), ("ifTypeSwitch", 43), ("ifTypePassive", 44), ("ifTypeF2500", 45), ("ifTypeSc", 46), ("ifTypeUch", 47), ("ifTypeF155", 48), ("ifTypeF622", 49), ("ifTypeF2125", 50), ("ifTypeF2666", 51), ("ifTypeF4250", 52), ("ifTypeF10709", 54), ("ifTypeF11095", 55), ("ifTypeF11318", 56), ("ifTypeLs", 57), ("ifType4Gfc", 58), ("ifTypeGcc0S", 59), ("ifType2R", 60), ("ifTypePppIp", 61), ("ifTypeLanIp", 62), ("ifTypeSerial", 64), ("ifTypeModem", 65), ("ifTypeAdapt", 66), ("ifTypeAdaptd", 67), ("ifTypeGBEFR", 69), ("ifTypeVc4", 70), ("ifTypeVc3", 71), ("ifTypeSts1", 72), ("ifTypeEdfa", 73), ("ifTypeEdfaMid", 74), ("ifType10Gdw", 75), ("ifTypeOtu2Lan", 76), ("ifTypeOtu1Lan", 77), ("ifTypeOtu1Fc", 78), ("ifTypeOtu1Fc2G", 79), ("ifTypeF197", 80), ("ifTypeTif", 81), ("ifTypeSts3c", 82), ("ifTypeVs1", 83), ("ifType1GbETH", 84), ("ifTypeStm1", 85), ("ifTypeStm4", 86), ("ifTypeOc3", 87), ("ifTypeOc12", 88), ("ifTypeOtu1Stm1", 89), ("ifTypeOtu1Stm4", 90), ("ifTypeF166", 91), ("ifTypeF666", 92), ("ifTypeI2C", 93), ("ifTypeLifIP", 94), ("ifTypeSts24c", 95), ("ifTypeSts48c", 96), ("ifTypeLifte", 97), ("ifTypeRaman", 98), ("ifTypeIpWhiteList", 99), ("ifTypeOspfIp", 100), ("ifTypeEncapIp", 101), ("ifTypeOtu3", 102), ("ifTypeStm256", 103), ("ifTypeOc768", 104), ("ifTypeF10664", 105), ("ifTypeOdu2", 106), ("ifTypeF39813", 107), ("ifTypeVc4c8", 108), ("ifTypeVc4c16", 109), ("ifTypeF8500", 110), ("ifTypePb", 111), ("ifTypePolicer", 112), ("ifTypeQueue", 113), ("ifTypeFlowPoint", 114), ("ifTypeLag", 115), ("ifTypeElinePPP", 116), ("ifTypeEtree", 117), ("ifTypeEline", 118), ("ifTypeElan", 119), ("ifTypeCtrans", 120), ("ifTypeVs0", 121), ("ifTypeTug", 122), ("ifTypeMd", 123), ("ifTypeMa", 124), ("ifTypeDownMep", 125), ("ifTypeFMep", 126), ("ifType8Gfc", 127), ("ifType10Gib", 128), ("ifTypeF10000", 129), ("ifTypeOtu2pFC8", 130), ("ifTypeOtu2pIB", 131), ("ifTypeOtu2pFC", 132), ("ifTypeOtu2pLAN", 133), ("ifTypeOtu2p", 134), ("ifTypeUpMep", 135), ("ifTypeOtdrCh", 136), ("ifTypeMaNet", 137), ("ifTypeMaComp", 138), ("ifTypeBridge", 139), ("ifType1000BaseT", 140), ("ifTypeOtu2E", 141), ("ifTypeOtu1E", 142), ("ifTypeOtu2F", 143), ("ifTypeF11049", 144), ("ifTypeLifteNum", 145), ("ifTypeLifteUnn", 146), ("ifTypeLifPbNum", 147), ("ifTypeLifSubUnn", 148), ("ifType5Gib", 149), ("ifTypeF5000", 150), ("ifTypeOtu2eEth", 151), ("ifTypeOdu0", 152), ("ifTypeFcu", 153), ("ifTypeOtu4", 154), ("ifType100GbE", 160), ("ifType10GbEWan", 162), ("ifType10GbELan", 163), ("ifTypeOtlc", 165), ("ifTypeOtu2ps", 167), ("ifTypeLifVTeNum", 173), ("ifTypeLifVTeUnn", 174))

class FspR7InterfaceTypeCaps(TextualConvention, Bits):
    description = 'The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capIfTypeOtu1", 1), ("capIfTypeOtu2", 2), ("capIfType10GbE", 3), ("capIfTypeOc192", 4), ("capIfTypeOc48", 5), ("capIfTypeStm16", 6), ("capIfTypeStm64", 7), ("capIfType10GFC", 8), ("capIfTypeF1062", 10), ("capIfTypeF1250", 11), ("capIfTypeFC", 12), ("capIfTypeF125", 13), ("capIfTypeF200", 14), ("capIfTypeF9953", 15), ("capIfTypeF10312", 16), ("capIfTypeF10518", 17), ("capIfTypeF2488", 18), ("capIfTypeGfpF", 19), ("capIfTypeGfpT", 20), ("capIfTypeDccL", 21), ("capIfTypeDccS", 22), ("capIfTypeDccP", 23), ("capIfTypeOdu1", 24), ("capIfTypeGcc0", 25), ("capIfTypeGcc1", 26), ("capIfTypeGcc2", 27), ("capIfTypeoch", 28), ("capIfTypeOm", 29), ("capIfTypeOt", 34), ("capIfTypeE10or100bt", 36), ("capIfTypeE100fx", 37), ("capIfTypeCl", 38), ("capIfType2GFC", 39), ("capIfType2GCL", 40), ("capIfType1GbE", 41), ("capIfTypeEoc", 42), ("capIfTypeSwitch", 43), ("capIfTypePassive", 44), ("capIfTypeF2500", 45), ("capIfTypeSc", 46), ("capIfTypeUch", 47), ("capIfTypeF155", 48), ("capIfTypeF622", 49), ("capIfTypeF2125", 50), ("capIfTypeF2666", 51), ("capIfTypeF4250", 52), ("capIfTypeF10709", 54), ("capIfTypeF11095", 55), ("capIfTypeF11318", 56), ("capIfTypeLs", 57), ("capIfType4Gfc", 58), ("capIfTypeGcc0S", 59), ("capIfType2R", 60), ("capIfTypePppIp", 61), ("capIfTypeLanIp", 62), ("capIfTypeSerial", 64), ("capIfTypeModem", 65), ("capIfTypeAdapt", 66), ("capIfTypeAdaptd", 67), ("capIfTypeGBEFR", 69), ("capIfTypeVc4", 70), ("capIfTypeVc3", 71), ("capIfTypeSts1", 72), ("capIfTypeEdfa", 73), ("capIfTypeEdfaMid", 74), ("capIfType10Gdw", 75), ("capIfTypeOtu2Lan", 76), ("capIfTypeOtu1Lan", 77), ("capIfTypeOtu1Fc", 78), ("capIfTypeOtu1Fc2G", 79), ("capIfTypeF197", 80), ("capIfTypeTif", 81), ("capIfTypeSts3c", 82), ("capIfTypeVs1", 83), ("capIfType1GbETH", 84), ("capIfTypeStm1", 85), ("capIfTypeStm4", 86), ("capIfTypeOc3", 87), ("capIfTypeOc12", 88), ("capIfTypeOtu1Stm1", 89), ("capIfTypeOtu1Stm4", 90), ("capIfTypeF166", 91), ("capIfTypeF666", 92), ("capIfTypeI2C", 93), ("capIfTypeLifIP", 94), ("capIfTypeSts24c", 95), ("capIfTypeSts48c", 96), ("capIfTypeLifte", 97), ("capIfTypeRaman", 98), ("capIfTypeIpWhiteList", 99), ("capIfTypeOspfIp", 100), ("capIfTypeEncapIp", 101), ("capIfTypeOtu3", 102), ("capIfTypeStm256", 103), ("capIfTypeOc768", 104), ("capIfTypeF10664", 105), ("capIfTypeOdu2", 106), ("capIfTypeF39813", 107), ("capIfTypeVc4c8", 108), ("capIfTypeVc4c16", 109), ("capIfTypeF8500", 110), ("capIfTypePb", 111), ("capIfTypePolicer", 112), ("capIfTypeQueue", 113), ("capIfTypeFlowPoint", 114), ("capIfTypeLag", 115), ("capIfTypeElinePPP", 116), ("capIfTypeEtree", 117), ("capIfTypeEline", 118), ("capIfTypeElan", 119), ("capIfTypeCtrans", 120), ("capIfTypeVs0", 121), ("capIfTypeTug", 122), ("capIfTypeMd", 123), ("capIfTypeMa", 124), ("capIfTypeDownMep", 125), ("capIfTypeFMep", 126), ("capIfType8Gfc", 127), ("capIfType10Gib", 128), ("capIfTypeF10000", 129), ("capIfTypeOtu2pFC8", 130), ("capIfTypeOtu2pIB", 131), ("capIfTypeOtu2pFC", 132), ("capIfTypeOtu2pLAN", 133), ("capIfTypeOtu2p", 134), ("capIfTypeUpMep", 135), ("capIfTypeOtdrCh", 136), ("capIfTypeMaNet", 137), ("capIfTypeMaComp", 138), ("capIfTypeBridge", 139), ("capIfType1000BaseT", 140), ("capIfTypeOtu2E", 141), ("capIfTypeOtu1E", 142), ("capIfTypeOtu2F", 143), ("capIfTypeF11049", 144), ("capIfTypeLifteNum", 145), ("capIfTypeLifteUnn", 146), ("capIfTypeLifPbNum", 147), ("capIfTypeLifSubUnn", 148), ("capIfType5Gib", 149), ("capIfTypeF5000", 150), ("capIfTypeOtu2eEth", 151), ("capIfTypeOdu0", 152), ("capIfTypeFcu", 153), ("capIfTypeOtu4", 154), ("capIfType100GbE", 160), ("capIfType10GbEWan", 162), ("capIfType10GbELan", 163), ("capIfTypeOtlc", 165), ("capIfTypeOtu2ps", 167), ("capIfTypeLifVTeNum", 173), ("capIfTypeLifVTeUnn", 174))

class FspR7Integer32Caps(TextualConvention, OctetString):
    description = 'A FspR7Integer32Caps specification.\n         1..4 bytes - minValue(Integer32),\n         5..8 bytes - maxValue(Integer32).'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 8)

class FspR7InvertTelemetryInputLogic(TextualConvention, Integer32):
    description = 'Invert telemetry interface input logic'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("almClosed", 1), ("almOpen", 2))

class FspR7InvertTelemetryInputLogicCaps(TextualConvention, Bits):
    description = 'Invert telemetry interface input logic'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capAlmClosed", 1), ("capAlmOpen", 2))

class FspR7IpType(TextualConvention, Integer32):
    description = 'Type of IP configuration'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("unnumbered", 1), ("numbered", 2))

class FspR7IpTypeCaps(TextualConvention, Bits):
    description = 'Type of IP configuration'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capUnnumbered", 1), ("capNumbered", 2))

class FspR7L2CacEnable(TextualConvention, Integer32):
    description = 'Enable of CAC'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("enable", 1), ("disable", 2))

class FspR7L2CacEnableCaps(TextualConvention, Bits):
    description = 'Enable of CAC'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capEnable", 1), ("capDisable", 2))

class FspR7LacpMode(TextualConvention, Integer32):
    description = 'Enable of LACP state machine'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("active", 1), ("passive", 2), ("disable", 3))

class FspR7LacpModeCaps(TextualConvention, Bits):
    description = 'Enable of LACP state machine'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capActive", 1), ("capPassive", 2), ("capDisable", 3))

class FspR7LacpTimeout(TextualConvention, Integer32):
    description = 'Timeout of the LACP'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("advaExtraShort", 1), ("short", 2), ("long", 3))

class FspR7LacpTimeoutCaps(TextualConvention, Bits):
    description = 'Timeout of the LACP'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capAdvaExtraShort", 1), ("capShort", 2), ("capLong", 3))

class FspR7LagFendState(TextualConvention, OctetString):
    description = "The Partner's state variables for the port, encoded as individual bits,\n         as follows:\n         Bits ordering:\n         - LACP_Activity(0),\n         - LACP_Timeout(1),\n         - Aggregation(2),\n         - Synchronization(3),\n         - Collecting(4),\n         - Distributing(5),\n         - Defaulted(6),\n         - Expired(7)"
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 2)

class FspR7LagIdFend(TextualConvention, OctetString):
    description = "LAG ID of the Partner LAG PORT parameters. Concatination of\n         Operational Key, Priority and port number. Uses 4+2+4 bytes. Each byte is represented\n         with 2 octets string.\n         \n         Port LAG ID Parameters\n         field octets contents\n         ----- ------ --------\n         1_______1-4_____Key___________(ASCII e.g. '0x00AA')\n         2_______5-6_____Port Priority_(ASCII e.g. '0x80')\n         3_______7-10____Port Number___(ASCII e.g. '0x0002')\n         \n         Parameters of the LAG ID are separated by commas, e.g. '00AA,80,0002'"
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 10)

class FspR7LagLoadBallanceSource(TextualConvention, Integer32):
    description = 'What source is used in the load balance calculation'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("undefined", 0), ("srcMac", 1), ("destMac", 2), ("srcDestMac", 3), ("srcIp", 4), ("destIp", 5), ("srcDestIp", 6), ("vlanId", 7))

class FspR7LagLoadBallanceSourceCaps(TextualConvention, Bits):
    description = 'What source is used in the load balance calculation'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capSrcMac", 1), ("capDestMac", 2), ("capSrcDestMac", 3), ("capSrcIp", 4), ("capDestIp", 5), ("capSrcDestIp", 6), ("capVlanId", 7))

class FspR7LagPorts(TextualConvention, OctetString):
    description = 'Eeach 4 bytes contain the information about the ETH Client or Network entity.\n         Bytes ordering:\n         - AidName(0)\n         - ShelfNumber(1)\n         - SlotNumber(2)\n         - PortNumber(3)'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 200)

class FspR7LagPortType(TextualConvention, Integer32):
    description = 'Type/Speed of connected ports in the LAG'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("type1gb", 1), ("type10gb", 2))

class FspR7LagPortTypeCaps(TextualConvention, Bits):
    description = 'Type/Speed of connected ports in the LAG'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capType1gb", 1), ("capType10gb", 2))

class FspR7LagStandby(TextualConvention, OctetString):
    description = 'Eeach 4 bytes contain the information about the ETH Client or Network entity.\n         Bytes ordering:\n         - AidName(0)\n         - ShelfNumber(1)\n         - SlotNumber(2)\n         - PortNumber(3)'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 200)

class FspR7LagState(TextualConvention, OctetString):
    description = 'The Actors state variables for the port, encoded as individual bits,\n         as follows:\n         Bits ordering:\n         - LACP_Activity(0),\n         - LACP_Timeout(1),\n         - Aggregation(2),\n         - Synchronization(3),\n         - Collecting(4),\n         - Distributing(5),\n         - Defaulted(6),\n         - Expired(7)'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 2)

class FspR7LagSysIdFend(TextualConvention, OctetString):
    description = "Partner system part of LAG ID. Concatinated from priority and MAC.\n         \n         System LAG ID Parameters\n         field octets contents\n         ----- ------ --------\n         1_______1-4_____System Priority__(ASCII e.g. '0x8000')\n         2_______5-16____MAC Address______(ASCII e.g. 'AC-DE-48-03-67-80')\n         \n         Parameters of the LAG ID are separated by commas, e.g. '8000,AC-DE-48-03-67-80'"
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class FspR7LaserForcedOperation(TextualConvention, Integer32):
    description = 'FspR7LaserForcedOperation variable.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("opr", 2))

class FspR7LaserForcedOperationCaps(TextualConvention, Bits):
    description = 'FspR7LaserForcedOperation variable.'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capOpr", 2))

class FspR7LaserOffDelayTime(TextualConvention, Integer32):
    description = 'Hold-Off Period for Error Forwarding LKDO-OFF Consequent Action.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("del0ms", 1), ("del10ms", 2), ("del250ms", 3))

class FspR7LaserOffDelayTimeCaps(TextualConvention, Bits):
    description = 'Hold-Off Period for Error Forwarding LKDO-OFF Consequent Action.'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capDel0ms", 1), ("capDel10ms", 2), ("capDel250ms", 3))

class FspR7LineCoding(TextualConvention, Integer32):
    description = 'Line Coding'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 99))
    namedValues = NamedValues(("undefined", 0), ("ookNrz", 1), ("dpsk", 2), ("qpsk", 3), ("dpQpsk", 4), ("odbPsbt", 5), ("mQam", 6), ("ofdm", 7), ("notDefined", 99))

class FspR7LineCodingCaps(TextualConvention, Bits):
    description = 'Line Coding'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capOokNrz", 1), ("capDpsk", 2), ("capQpsk", 3), ("capDpQpsk", 4), ("capOdbPsbt", 5), ("capMQam", 6), ("capOfdm", 7), ("capNotDefined", 99))

class FspR7LossAttenuation(TextualConvention, Integer32):
    description = 'LOS Attenuation Finding in progress'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("opr", 2))

class FspR7LossAttenuationCaps(TextualConvention, Bits):
    description = 'LOS Attenuation Finding in progress'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capOpr", 2))

class FspR7ManualAuto(TextualConvention, Integer32):
    description = 'Manual/Automatic variable.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("manual", 1), ("automatic", 2))

class FspR7ManualAutoCaps(TextualConvention, Bits):
    description = 'Manual/Automatic variable.'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capManual", 1), ("capAutomatic", 2))

class FspR7Mapping(TextualConvention, Integer32):
    description = 'Type of mapping; transparent or framing'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("frame", 1), ("trans", 2))

class FspR7MappingCaps(TextualConvention, Bits):
    description = 'Type of mapping; transparent or framing'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capFrame", 1), ("capTrans", 2))

class FspR7MaxBitErrorRate(TextualConvention, Integer32):
    description = 'Maximum Bit Error Rate'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("undefined", 0), ("ber1e2", 1), ("ber1e3", 2), ("ber1e4", 3), ("ber1e5", 4), ("ber1e6", 5), ("ber1e7", 6), ("ber1e8", 7), ("ber1e9", 8), ("ber1e10", 9), ("ber1e11", 10), ("ber1e12", 11), ("ber1e13", 12), ("ber1e14", 13), ("ber1e15", 14))

class FspR7MaxBitErrorRateCaps(TextualConvention, Bits):
    description = 'Maximum Bit Error Rate'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capBer1e2", 1), ("capBer1e3", 2), ("capBer1e4", 3), ("capBer1e5", 4), ("capBer1e6", 5), ("capBer1e7", 6), ("capBer1e8", 7), ("capBer1e9", 8), ("capBer1e10", 9), ("capBer1e11", 10), ("capBer1e12", 11), ("capBer1e13", 12), ("capBer1e14", 13), ("capBer1e15", 14))

class FspR7ModeDbInit(TextualConvention, Integer32):
    description = 'Mode of Database Initialisation at Time of Last Start / Restart'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("restore", 2), ("startUpDefault", 3), ("startUpEqpt", 4))

class FspR7Model(TextualConvention, Integer32):
    description = 'Marketing model name of System'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("fsp3000R7", 1), ("flashwave74200", 2))

class FspR7ModusLastRestart(TextualConvention, Integer32):
    description = 'Information over the modus of the last restart'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("reload", 1), ("cold", 2), ("warm", 3))

class FspR7NCTraceId(TextualConvention, Integer32):
    description = 'Node Channel Trace ID - It associates each direction of a channel trace through a node.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("undefined", 0), ("id1", 1), ("id2", 2), ("id3", 3), ("id4", 4), ("id5", 5), ("id6", 6), ("id7", 7), ("id8", 8))

class FspR7NCTRouteType(TextualConvention, Integer32):
    description = 'ROUTE-TYPE = NONE | FIBER | CABLE | BKPLANE | EQPT | PROVND. ROUTE-TYPE \n          parameter indicates the connection type between two ports. If a connection \n          between the two ports is within a module (i.e. Client to Network port), \n          the Route-Type is either provisioned (PROVND) of fixed (EQPT). If the \n          connection is between two ports, then the Route-Type is FIBER, or CABLE,\n          or BKPLANE.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("fiber", 2), ("cable", 3), ("backPlane", 4), ("equipment", 5), ("provisioned", 6))

class FspR7NeType(TextualConvention, Integer32):
    description = 'Type of Network Element'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("undefined", 0), ("wdm", 1))

class FspR7NodeId(TextualConvention, Integer32):
    description = 'Node Name Syntax'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("tid", 1), ("ip", 2))

class FspR7NodeIdCaps(TextualConvention, Bits):
    description = 'Node Name Syntax'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capTid", 1), ("capIp", 2))

class FspR7NoYes(TextualConvention, Integer32):
    description = 'NoYes variable.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("no", 1), ("yes", 2))

class FspR7NoYesCaps(TextualConvention, Bits):
    description = 'NoYes variable.'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNo", 1), ("capYes", 2))

class FspR7NtpAdminState(TextualConvention, Integer32):
    description = 'The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 2, 6))
    namedValues = NamedValues(("undefined", 0), ("is", 2), ("dsbld", 6))

class FspR7NtpMode(TextualConvention, Integer32):
    description = 'NTP Service Mode'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("ntpOff", 1), ("ntpClientOnly", 2), ("ntpServerOnly", 3), ("ntpRelay", 4))

class FspR7NtpServerStatus(TextualConvention, Integer32):
    description = 'NTP server status'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("unreachable", 1), ("reachable", 2))

class FspR7NtpSyncStatus(TextualConvention, Integer32):
    description = 'NTP Synchronization Status'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("undefined", 0), ("noData", 1), ("systemPeer", 2), ("falseTicker", 3), ("candidate", 4), ("discarded", 5), ("inProgress", 6))

class FspR7NtpTest(TextualConvention, Integer32):
    description = 'Check NTP; e.g. listen on NTP Port'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("ntpTest", 2))

class FspR7NtpTestStatus(TextualConvention, Integer32):
    description = 'NTP Server Test Status'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("success", 1), ("fail", 2), ("idle", 3), ("inProgress", 4))

class FspR7NumberOfChannels(TextualConvention, Integer32):
    description = 'Number of channels supported by an entity'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("channels20", 1), ("channels40", 2), ("channels80", 3))

class FspR7NumberOfChannelsCaps(TextualConvention, Bits):
    description = 'Number of channels supported by an entity'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capChannels20", 1), ("capChannels40", 2), ("capChannels80", 3))

class FspR7OdtuType(TextualConvention, Integer32):
    description = 'ODTU Transport Unit'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("undefined", 0), ("odtu01", 1), ("odtu12", 2), ("odtu2dsh1", 3), ("odtu2dshTS", 4), ("odtu13", 5), ("odtu23", 6), ("odtu3dsh1", 7), ("odtu3dsh9", 8), ("odtu3dshTS", 9), ("odtu4dsh1", 10), ("odtu4dsh2", 11), ("odtu4dsh8", 12), ("odtu4dsh31", 13), ("odtu4dshTS", 14))

class FspR7OdtuTypeCaps(TextualConvention, Bits):
    description = 'ODTU Transport Unit'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capOdtu01", 1), ("capOdtu12", 2), ("capOdtu2dsh1", 3), ("capOdtu2dshTS", 4), ("capOdtu13", 5), ("capOdtu23", 6), ("capOdtu3dsh1", 7), ("capOdtu3dsh9", 8), ("capOdtu3dshTS", 9), ("capOdtu4dsh1", 10), ("capOdtu4dsh2", 11), ("capOdtu4dsh8", 12), ("capOdtu4dsh31", 13), ("capOdtu4dshTS", 14))

class FspR7OperState(TextualConvention, Integer32):
    description = 'The Operational State will be displayed on the\n         GUI with full name values; it will be differently\n         displayed in TL1 syntax according to TL1 display rules.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("nr", 1), ("anr", 2), ("out", 3), ("un", 4))

class FspR7OpticalBand(TextualConvention, Integer32):
    description = 'OM Band - Inventory. BAND__PROVISION references to this.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("undefined", 0), ("bandC", 1), ("bandL", 2), ("bandA", 3), ("bandB", 4), ("bandCi", 5), ("bandCandCi", 6))

class FspR7OpticalBandCaps(TextualConvention, Bits):
    description = 'OM Band - Inventory. BAND__PROVISION references to this.'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capBandC", 1), ("capBandL", 2), ("capBandA", 3), ("capBandB", 4), ("capBandCi", 5), ("capBandCandCi", 6))

class FspR7OpticalFiberType(TextualConvention, Integer32):
    description = 'Fiber of Optical Interface - Inventory. FIBER references to this.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("singleMode", 1), ("multiMode", 2), ("any", 3))

class FspR7OpticalFiberTypeCaps(TextualConvention, Bits):
    description = 'Fiber of Optical Interface - Inventory. FIBER references to this.'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capSingleMode", 1), ("capMultiMode", 2), ("capAny", 3))

class FspR7OpticalGroup(TextualConvention, Integer32):
    description = 'Channel Group read from the hardware'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))
    namedValues = NamedValues(("undefined", 0), ("d01d04", 1), ("d05d08", 2), ("d09d12", 3), ("d13d16", 4), ("d17d20", 5), ("d21d24", 6), ("d25d28", 7), ("d29d32", 8), ("d33d36", 9), ("d37d40", 10), ("d41d44", 11), ("d45d48", 12), ("d49d52", 13), ("d53d56", 14), ("d57d60", 15), ("d61d64", 16), ("f19590f19560", 17), ("f19550f19520", 18), ("f19510f19480", 19), ("f19470f19440", 20), ("f19430f19400", 21), ("f19390f19360", 22), ("f19350f19320", 23), ("f19310f19280", 24), ("f19270f19240", 25), ("f19230f19200", 26), ("f19590f19520", 27), ("f19510f19440", 28), ("f19430f19360", 29), ("f19350f19280", 30), ("f19270f19200", 31))

class FspR7OpticalGroupCaps(TextualConvention, Bits):
    description = 'Channel Group read from the hardware'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capD01d04", 1), ("capD05d08", 2), ("capD09d12", 3), ("capD13d16", 4), ("capD17d20", 5), ("capD21d24", 6), ("capD25d28", 7), ("capD29d32", 8), ("capD33d36", 9), ("capD37d40", 10), ("capD41d44", 11), ("capD45d48", 12), ("capD49d52", 13), ("capD53d56", 14), ("capD57d60", 15), ("capD61d64", 16), ("capF19590f19560", 17), ("capF19550f19520", 18), ("capF19510f19480", 19), ("capF19470f19440", 20), ("capF19430f19400", 21), ("capF19390f19360", 22), ("capF19350f19320", 23), ("capF19310f19280", 24), ("capF19270f19240", 25), ("capF19230f19200", 26), ("capF19590f19520", 27), ("capF19510f19440", 28), ("capF19430f19360", 29), ("capF19350f19280", 30), ("capF19270f19200", 31))

class FspR7OpticalInterfaceReach(TextualConvention, Integer32):
    description = 'Reach'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("undefined", 0), ("intra", 1), ("short", 2), ("long", 4), ("vlong", 5), ("ulong", 6), ("reg", 7), ("xlong", 8), ("longn", 10), ("extended", 11), ("hyperlong", 12), ("longNR", 13), ("ulongHaul", 14))

class FspR7OpticalInterfaceReachCaps(TextualConvention, Bits):
    description = 'Reach'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capIntra", 1), ("capShort", 2), ("capLong", 4), ("capVlong", 5), ("capUlong", 6), ("capReg", 7), ("capXlong", 8), ("capLongn", 10), ("capExtended", 11), ("capHyperlong", 12), ("capLongNR", 13), ("capUlongHaul", 14))

class FspR7OpticalMultiplexLevel(TextualConvention, Integer32):
    description = 'Optical Multiplex Level'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("undefined", 0), ("levelOm1D", 1), ("levelOm1C", 2), ("levelOm4D", 3), ("levelOm4C", 4), ("levelOm16D", 5), ("levelOm32D", 6), ("levelOm40D", 7), ("levelOmC", 9), ("levelOmD", 10), ("levelOtD", 11), ("levelOtC", 12), ("levelOt", 13))

class FspR7OpticalSubBand(TextualConvention, Integer32):
    description = 'Subband - Inventory'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("d01d16", 1), ("d17d32", 2), ("d33d48", 3), ("d49d64", 4))

class FspR7OpticalSubBandCaps(TextualConvention, Bits):
    description = 'Subband - Inventory'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capD01d16", 1), ("capD17d32", 2), ("capD33d48", 3), ("capD49d64", 4))

class FspR7OpuPayloadType(TextualConvention, Integer32):
    description = 'OPU Payload Type Indicator'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37))
    namedValues = NamedValues(("undefined", 0), ("pt01", 1), ("pt02", 2), ("pt03", 3), ("pt04", 4), ("pt05", 5), ("pt06", 6), ("pt07", 7), ("pt08", 8), ("pt09", 9), ("pt0A", 10), ("pt0B", 11), ("pt0C", 12), ("pt0D", 13), ("pt0E", 14), ("pt0F", 15), ("pt10", 16), ("pt11", 17), ("pt20", 18), ("pt21", 19), ("pt80", 20), ("pt81", 21), ("pt82", 22), ("pt83", 23), ("pt84", 24), ("pt85", 25), ("pt86", 26), ("pt87", 27), ("pt88", 28), ("pt89", 29), ("pt8A", 30), ("pt8B", 31), ("pt8C", 32), ("pt8D", 33), ("pt8E", 34), ("pt8F", 35), ("ptFD", 36), ("ptFE", 37))

class FspR7OpuPayloadTypeCaps(TextualConvention, Bits):
    description = 'OPU Payload Type Indicator'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capPt01", 1), ("capPt02", 2), ("capPt03", 3), ("capPt04", 4), ("capPt05", 5), ("capPt06", 6), ("capPt07", 7), ("capPt08", 8), ("capPt09", 9), ("capPt0A", 10), ("capPt0B", 11), ("capPt0C", 12), ("capPt0D", 13), ("capPt0E", 14), ("capPt0F", 15), ("capPt10", 16), ("capPt11", 17), ("capPt20", 18), ("capPt21", 19), ("capPt80", 20), ("capPt81", 21), ("capPt82", 22), ("capPt83", 23), ("capPt84", 24), ("capPt85", 25), ("capPt86", 26), ("capPt87", 27), ("capPt88", 28), ("capPt89", 29), ("capPt8A", 30), ("capPt8B", 31), ("capPt8C", 32), ("capPt8D", 33), ("capPt8E", 34), ("capPt8F", 35), ("capPtFD", 36), ("capPtFE", 37))

class FspR7OspfAreaType(TextualConvention, Integer32):
    description = 'Area Type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("stub", 1), ("normal", 2))

class FspR7OspfAreaTypeCaps(TextualConvention, Bits):
    description = 'Area Type'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capStub", 1), ("capNormal", 2))

class FspR7OspfMode(TextualConvention, Integer32):
    description = 'OSPF Routing (Dynamic)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("enable", 1), ("disable", 2), ("passive", 3))

class FspR7OspfModeCaps(TextualConvention, Bits):
    description = 'OSPF Routing (Dynamic)'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capEnable", 1), ("capDisable", 2), ("capPassive", 3))

class FspR7OscChannel(TextualConvention, Integer32):
    description = 'OSC Channel'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 99, 100, 106, 197))
    namedValues = NamedValues(("undefined", 0), ("s1310", 99), ("s1630", 100), ("s1510", 106), ("s1610", 197))

class FspR7OscChannelCaps(TextualConvention, Bits):
    description = 'OSC Channel'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capS1310", 99), ("capS1630", 100), ("capS1510", 106), ("capS1610", 197))

class FspR7OtdrPeriod(TextualConvention, Integer32):
    description = 'NONE - OTDR measurement disabled otherwise the OTDR duration in minutes.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 0), ("periodNone", 1), ("period5ms", 2), ("period20ms", 3), ("period40ms", 4), ("period60ms", 5))

class FspR7PacketsLayer(TextualConvention, Integer32):
    description = 'Notional Layer of Advertisement on Packets on the LIF'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("undefined", 0), ("lambda", 1), ("fiber", 2), ("tdm", 3), ("psc1", 4), ("psc2", 5), ("psc3", 6), ("psc4", 7), ("l2sc", 8), ("ethSvlan", 9), ("unspecified", 10), ("subLsc", 11), ("dcsc", 12), ("otn", 13))

class FspR7PacketsLayerCaps(TextualConvention, Bits):
    description = 'Notional Layer of Advertisement on Packets on the LIF'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capLambda", 1), ("capFiber", 2), ("capTdm", 3), ("capPsc1", 4), ("capPsc2", 5), ("capPsc3", 6), ("capPsc4", 7), ("capL2sc", 8), ("capEthSvlan", 9), ("capUnspecified", 10), ("capSubLsc", 11), ("capDcsc", 12), ("capOtn", 13))

class FspR7ParityBit(TextualConvention, Integer32):
    description = 'Parity Bit Settings'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("undefined", 0), ("no", 1))

class FspR7PathNode(TextualConvention, Integer32):
    description = 'Node count along a signal path on a unidirectional basis from the client signal ingress to egress'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40))
    namedValues = NamedValues(("undefined", 0), ("node1", 1), ("node2", 2), ("node3", 3), ("node4", 4), ("node5", 5), ("node6", 6), ("node7", 7), ("node8", 8), ("node9", 9), ("node10", 10), ("node11", 11), ("node12", 12), ("node13", 13), ("node14", 14), ("node15", 15), ("node16", 16), ("node17", 17), ("node18", 18), ("node19", 19), ("node20", 20), ("node21", 21), ("node22", 22), ("node23", 23), ("node24", 24), ("node25", 25), ("node26", 26), ("node27", 27), ("node28", 28), ("node29", 29), ("node30", 30), ("node31", 31), ("node32", 32), ("node33", 33), ("node34", 34), ("node35", 35), ("node36", 36), ("node37", 37), ("node38", 38), ("node39", 39), ("node40", 40))

class FspR7PathNodeCaps(TextualConvention, Bits):
    description = 'Node count along a signal path on a unidirectional basis from the client signal ingress to egress'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNode1", 1), ("capNode2", 2), ("capNode3", 3), ("capNode4", 4), ("capNode5", 5), ("capNode6", 6), ("capNode7", 7), ("capNode8", 8), ("capNode9", 9), ("capNode10", 10), ("capNode11", 11), ("capNode12", 12), ("capNode13", 13), ("capNode14", 14), ("capNode15", 15), ("capNode16", 16), ("capNode17", 17), ("capNode18", 18), ("capNode19", 19), ("capNode20", 20), ("capNode21", 21), ("capNode22", 22), ("capNode23", 23), ("capNode24", 24), ("capNode25", 25), ("capNode26", 26), ("capNode27", 27), ("capNode28", 28), ("capNode29", 29), ("capNode30", 30), ("capNode31", 31), ("capNode32", 32), ("capNode33", 33), ("capNode34", 34), ("capNode35", 35), ("capNode36", 36), ("capNode37", 37), ("capNode38", 38), ("capNode39", 39), ("capNode40", 40))

class FspR7PceMode(TextualConvention, Integer32):
    description = 'Path Computation Policy to be followed when computing paths for a given Tunnel'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("optimalTe", 1), ("osnrConstr", 2), ("optimalOsnr", 3))

class FspR7PceModeCaps(TextualConvention, Bits):
    description = 'Path Computation Policy to be followed when computing paths for a given Tunnel'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capOptimalTe", 1), ("capOsnrConstr", 2), ("capOptimalOsnr", 3))

class FspR7PlugDataRate(TextualConvention, Integer32):
    description = 'Rate'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("undefined", 0), ("rateCouplingLink", 1), ("rateHighSpeed", 2), ("rateGBe", 3), ("rate2G1", 4), ("rate2G5", 5), ("rate4G", 6), ("rate10G", 7), ("any", 8), ("rate11G", 9), ("rateFE", 10), ("rate10G2R", 11), ("rate8G", 12), ("rate103G", 13), ("rate112G", 14))

class FspR7PlugDataRateCaps(TextualConvention, Bits):
    description = 'Rate'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRateCouplingLink", 1), ("capRateHighSpeed", 2), ("capRateGBe", 3), ("capRate2G1", 4), ("capRate2G5", 5), ("capRate4G", 6), ("capRate10G", 7), ("capAny", 8), ("capRate11G", 9), ("capRateFE", 10), ("capRate10G2R", 11), ("capRate8G", 12), ("capRate103G", 13), ("capRate112G", 14))

class FspR7PmSnapshotParameterTypes(TextualConvention, Integer32):
    description = 'List of PM Snapshot parameters'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("undefined", 0), ("outputPower", 1), ("inputPower", 2), ("attenuation", 3), ("attenuationOfVoa", 4), ("oscGain", 5), ("backreflectionPowerReceived", 6), ("ramanPumpPower", 7), ("oscPowerReceived", 8), ("variableGain", 9), ("txLineAttenuation", 10), ("rxLineAttenuation", 11))

class FspR7PmReset(TextualConvention, Integer32):
    description = 'Reset data-layer Performance registers'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("all", 2), ("curr", 3))

class FspR7PmResetCaps(TextualConvention, Bits):
    description = 'Reset data-layer Performance registers'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capAll", 2), ("capCurr", 3))

class FspR7PmSnapshotStatus(TextualConvention, Integer32):
    description = 'Reference value Status'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("inProgress", 2), ("success", 3), ("error", 4))

class FspR7PortBehaviour(TextualConvention, Integer32):
    description = 'Interface Behaviour'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("client", 1), ("network", 2))

class FspR7PortBehaviourCaps(TextualConvention, Bits):
    description = 'Interface Behaviour'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capClient", 1), ("capNetwork", 2))

class FspR7PortMode(TextualConvention, Integer32):
    description = 'Port Mode'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("port", 1), ("cTag", 2), ("sTag", 3))

class FspR7PortModeCaps(TextualConvention, Bits):
    description = 'Port Mode'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capPort", 1), ("capCTag", 2), ("capSTag", 3))

class FspR7PortRole(TextualConvention, Integer32):
    description = 'ADVA cloud Port Roles'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("uni", 1), ("i-nni", 2), ("nni", 3))

class FspR7PortRoleCaps(TextualConvention, Bits):
    description = 'ADVA cloud Port Roles'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capUni", 1), ("capI-nni", 2), ("capNni", 3))

class FspR7PrbsPmReset(TextualConvention, Integer32):
    description = 'Reset PRBS PM counters'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("all", 2))

class FspR7PrbsPmResetCaps(TextualConvention, Bits):
    description = 'Reset PRBS PM counters'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNone", 1), ("capAll", 2))

class FspR7PreferredFacilityType(TextualConvention, Integer32):
    description = 'Default type of facility model to use for automatically created\n         facilities. SDH will cause STM64, STM16, VC4, VC3 type\n         facilities to be auto-created. SONET will cause OC192,\n         OC48, STS1 and STS3c type facilities to be auto-created.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("sdh", 1), ("sonet", 2))

class FspR7PreferredFacilityTypeCaps(TextualConvention, Bits):
    description = 'Default type of facility model to use for automatically created\n         facilities. SDH will cause STM64, STM16, VC4, VC3 type\n         facilities to be auto-created. SONET will cause OC192,\n         OC48, STS1 and STS3c type facilities to be auto-created.'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capSdh", 1), ("capSonet", 2))

class FspR7ProtectionRole(TextualConvention, Integer32):
    description = 'The Path is Labelled Working or Protection'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("wkg", 1), ("protn", 2), ("na", 3))

class FspR7ProtectionType(TextualConvention, Integer32):
    description = 'This describes the topology and level of the protection (OCH or\n         OM -Level on a ring; Line in PT-PT and Line or Dualhomed on a Feeder).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("dpring", 1), ("line", 2))

class FspR7ProtectionTypeCaps(TextualConvention, Bits):
    description = 'This describes the topology and level of the protection (OCH or\n         OM -Level on a ring; Line in PT-PT and Line or Dualhomed on a Feeder).'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capDpring", 1), ("capLine", 2))

class FspR7Protocol(TextualConvention, Integer32):
    description = 'The Type of the IP Route.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("local", 1), ("static", 2), ("ospf", 3))

class FspR7PsuOutputPower(TextualConvention, Integer32):
    description = 'Maximum PSU Output Power'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("undefined", 0), ("pwrOut120w", 1), ("pwrOut130w", 2), ("pwrOut400w", 3), ("pwrOut600w", 4), ("pwrOut170w", 5), ("pwrOut200w", 6), ("pwrOut1000w", 7), ("pwrOut0w", 8), ("pwrOut800w", 9), ("pwrOut150w", 10))

class FspR7PsuOutputPowerCaps(TextualConvention, Bits):
    description = 'Maximum PSU Output Power'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capPwrOut120w", 1), ("capPwrOut130w", 2), ("capPwrOut400w", 3), ("capPwrOut600w", 4), ("capPwrOut170w", 5), ("capPwrOut200w", 6), ("capPwrOut1000w", 7), ("capPwrOut0w", 8), ("capPwrOut800w", 9), ("capPwrOut150w", 10))

class FspR7RedLinedState(TextualConvention, Integer32):
    description = 'will be set by higher level software to act as a barrier to deletion'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("yes", 1), ("no", 2))

class FspR7RedLinedStateCaps(TextualConvention, Bits):
    description = 'will be set by higher level software to act as a barrier to deletion'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capYes", 1), ("capNo", 2))

class FspR7RemoteAlarmPath(TextualConvention, Integer32):
    description = 'Remote Alarm Path Type (current or non-current)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("curr", 1), ("nonCurr", 2))

class FspR7RemoteAlarmType(TextualConvention, Integer32):
    description = 'Remote Alarm Type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("out", 1), ("outAndOscDown", 2))

class FspR7ResetRfi(TextualConvention, Integer32):
    description = 'Resets Retained Failure Indications for restored Tunnels'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("resetRfi", 2))

class FspR7ResetRfiCaps(TextualConvention, Bits):
    description = 'Resets Retained Failure Indications for restored Tunnels'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capResetRfi", 2))

class FspR7RoadmNumber(TextualConvention, Integer32):
    description = 'Number for ROADM module typically associated with a Network Fiber or Degree'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("undefined", 0), ("rNo1", 1), ("rNo2", 2), ("rNo3", 3), ("rNo4", 4), ("rNo5", 5), ("rNo6", 6), ("rNo7", 7), ("rNo8", 8))

class FspR7RoadmNumberCaps(TextualConvention, Bits):
    description = 'Number for ROADM module typically associated with a Network Fiber or Degree'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRNo1", 1), ("capRNo2", 2), ("capRNo3", 3), ("capRNo4", 4), ("capRNo5", 5), ("capRNo6", 6), ("capRNo7", 7), ("capRNo8", 8))

class FspR7RouteRedist(TextualConvention, Integer32):
    description = 'Redistribution of routes in OSPF'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("static", 2))

class FspR7RowStatusCaps(TextualConvention, Bits):
    description = 'RowStatus'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capActive", 1), ("capNotInService", 2), ("capNotReady", 3), ("capCreateAndGo", 4), ("capCreateAndWait", 5), ("capDestroy", 6))

class FspR7Scrambling(TextualConvention, Integer32):
    description = 'Configuration of scrambling functionality for Virtual Facilities'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("enable", 1), ("disable", 2))

class FspR7ScramblingCaps(TextualConvention, Bits):
    description = 'Configuration of scrambling functionality for Virtual Facilities'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capEnable", 1), ("capDisable", 2))

class FspR7ScuDbBackup(TextualConvention, Integer32):
    description = 'DB Backup on SCU available'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("yes", 1), ("no", 2))

class FspR7ScuRing(TextualConvention, Integer32):
    description = 'SCU ring interconnect'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("enable", 1), ("disable", 2))

class FspR7ScuRingCaps(TextualConvention, Bits):
    description = 'SCU ring interconnect'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capEnable", 1), ("capDisable", 2))

class FspR7SecurityMode(TextualConvention, Integer32):
    description = 'Security Mode'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("basic", 1), ("enhanced", 2))

class FspR7SecurityModeCaps(TextualConvention, Bits):
    description = 'Security Mode'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capBasic", 1), ("capEnhanced", 2))

class FspR7SessionStatus(TextualConvention, Integer32):
    description = 'Disable/Enable variable.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("active", 1), ("inactive", 2))

class FspR7SessionStatusCaps(TextualConvention, Bits):
    description = 'Disable/Enable variable.'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capActive", 1), ("capInactive", 2))

class FspR7SignalMapping(TextualConvention, Integer32):
    description = 'Mapping of Client Signal into some other format'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("gfp", 1), ("proprietary", 2))

class FspR7SignalMappingCaps(TextualConvention, Bits):
    description = 'Mapping of Client Signal into some other format'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capGfp", 1), ("capProprietary", 2))

class FspR7SingleFiberLocation(TextualConvention, Integer32):
    description = 'determines the location (A or B) for Single Fiber applications'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("locationA", 1), ("locationB", 2))

class FspR7SingleFiberLocationCaps(TextualConvention, Bits):
    description = 'determines the location (A or B) for Single Fiber applications'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capLocationA", 1), ("capLocationB", 2))

class FspR7SnmpHexString(TextualConvention, OctetString):
    description = 'An octet string containing Hex values and presenting them in Hex format.\n         This textual convention should be used when SnmpAdminString or DisplayString cannot be used,\n         because of DISPLAY-HINT limitations.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class FspR7SnmpLongString(TextualConvention, OctetString):
    description = 'This textual convention should be used when SnmpAdminString or DisplayString \n         cannot be used because of the length limitations.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 65535)

class FspR7SnmpPrivLevel(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 0), ("admin", 1), ("provision", 2), ("operator", 3), ("monitor", 4), ("crypto", 5))

class FspR7SnmpPrivLevelCaps(TextualConvention, Bits):
    description = ''
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capAdmin", 1), ("capProvision", 2), ("capOperator", 3), ("capMonitor", 4), ("capCrypto", 5))

class FspR7SnmpSecuLevel(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("noAuthNoPriv", 1), ("authNoPriv", 2), ("authPriv", 3))

class FspR7SnmpSecuLevelCaps(TextualConvention, Bits):
    description = ''
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNoAuthNoPriv", 1), ("capAuthNoPriv", 2), ("capAuthPriv", 3))

class FspR7SshDeamon(TextualConvention, Integer32):
    description = 'Secure Shell Server enable/disable configuration'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("enable", 1), ("disable", 2))

class FspR7SshHostKeyEncryptAlgorithm(TextualConvention, Integer32):
    description = 'ssh host key encryption alogrithm'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("rsa", 1), ("dsa", 2), ("rsa1", 3))

class FspR7SshHostKeyEncryptAlgorithmCaps(TextualConvention, Bits):
    description = 'ssh host key encryption alogrithm'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRsa", 1), ("capDsa", 2), ("capRsa1", 3))

class FspR7Stages(TextualConvention, Integer32):
    description = 'Number Of Stages'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("st1", 1), ("st2", 2))

class FspR7StandingConditionTypes(TextualConvention, Integer32):
    description = 'List of all alarms'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1026, 1030, 1031, 1034, 1037, 1040, 1041, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1142, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285), SingleValueConstraint(1286, 1287, 1288, 1289, 1301, 1302, 1303, 1304, 1305, 1306, 1308, 1309, 1310, 1311, 1312, 1313, 1315, 1316, 1317, 1320, 1321, 1322, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1380, 1381, 1386, 1385, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1450, 1451))
    namedValues = NamedValues(("undefined", 0), ("thirdPartyPlug", 1001), ("facilityLoopback", 1002), ("terminalLoopback", 1003), ("facilityForcedOn", 1004), ("oosDisabled", 1005), ("receiverDisabled", 1006), ("transmitterDisabledOff", 1007), ("transmittedDisabledIdle", 1008), ("transmitterDisabledAis", 1009), ("transmitterDisabledEpc", 1010), ("oosManagement", 1011), ("oosMaintenance", 1012), ("oosAins", 1013), ("dcnCommunicationFail", 1014), ("removed", 1015), ("mismatch", 1016), ("equipmentNotAccepted", 1017), ("facilityDataRateNotSupported", 1018), ("equipmentNotSupportedByPhysicalLayer", 1019), ("equipmentNotApproved", 1020), ("equipmentMismatch", 1021), ("powerMissing", 1026), ("temperatureTooLow", 1030), ("temperatureTooHigh", 1031), ("lossOfSignal", 1034), ("lossOfReceiverClockRecovery", 1037), ("laserFailure", 1040), ("switchFailed", 1041), ("autoShutdownLaserOffDueToErrFwd", 1043), ("autoShutdownAls", 1045), ("thermoElectricCoolerEndOfLife", 1047), ("opticalInputPwrReceivedTooLow", 1048), ("opticalInputPwrReceivedTooHigh", 1049), ("laserTemperatureTooHigh", 1050), ("laserTemperatureTooLow", 1051), ("opticalOutputPowerTransmittedTooLow", 1052), ("opticalOutputPowerTransmittedTooHigh", 1053), ("laserBiasCurrentNormalizedtooHigh", 1054), ("lossOfSignalTransmitter", 1055), ("attOnReceiverFiberLowerThanMonitor", 1056), ("attOnReceiverFiberHigherThanMonitor", 1057), ("attOnTransmitterFiberLowerThanMonitor", 1058), ("attOnTransmitterFiberHigherThanMonitor", 1059), ("autoShutdownSendingAisOtu", 1060), ("lossOfFrameOtu", 1061), ("lossOfMultiFrameOtu", 1062), ("alarmIndicationSignalOtu", 1063), ("signalDegradeOtu", 1064), ("backwardDefectIndicationOtu", 1065), ("autoShutdownSendingAisOdu", 1066), ("lossOfFrameLossOfMultiFrameOdu", 1067), ("alarmIndicationSignalOdu", 1068), ("openConnectionIndicationOdu", 1069), ("lockedDefectOdu", 1070), ("signalDegradeOdu", 1071), ("backwardDefectIndicationOdu", 1072), ("alarmIndicationSignalOduTcmA", 1073), ("openConnectionIndicationOduTcmA", 1074), ("lockedDefectOduTcmA", 1075), ("lossofTandemConnectionOduTcmA", 1076), ("signalDegradeOduTcmA", 1077), ("backwardDefectIndicationOduTcmA", 1078), ("payloadMismatchOPU", 1079), ("multiplexStructureIdentifierMismatchOPU", 1080), ("lossOfFrame", 1081), ("autoShutdownSendingAisLine", 1083), ("alarmIndicationSignalLine", 1084), ("remoteDefectIndicationLine", 1085), ("signalDegradeLine", 1086), ("alarmIndicationSignalHigherOrderPath", 1087), ("lossOfPointerHigherOrderPath", 1088), ("lossofMultiframeHigherOrderPath", 1089), ("lossofSequenceHigherOrderPath", 1090), ("unequippedHigherOrderPath", 1091), ("payloadMismatchHigherOrderPath", 1092), ("remoteDefectIndicationHigherOrderPath", 1093), ("alarmIndicationSignalLowerOrderPath", 1095), ("lossOfPointerLowerOrderPath", 1096), ("lossofMultiframeLowerOrderPath", 1097), ("lossofSequenceLowerOrderPath", 1098), ("unequippedLowerOrderPath", 1099), ("payloadMismatchLowerOrderPath", 1100), ("remoteDefectIndicationLowerOrderPath", 1101), ("autoShutdownSendingEPC", 1105), ("thres15MinExceededPhysConvES", 1106), ("thres15MinExceededPhysConvCV", 1107), ("thres15MinExceededPhysConvDE", 1108), ("thres15MinExceededPhysConvCVDE", 1109), ("lossOfGfpFrame", 1110), ("payloadMismatchGfp", 1111), ("gfpLossOfClientSig", 1112), ("lossOfCharSyncFromFarEnd", 1113), ("switchtoProtectionInhibited", 1114), ("switchtoWorkingInhibited", 1115), ("oTDRMeasuringinProgress", 1116), ("protectionNotAvailable", 1117), ("apsConfigMismatch", 1118), ("embeddedOperationsChannelFailure", 1119), ("signalDegradationonLinkVector", 1121), ("signalFailureonLinkVector", 1122), ("inputVoltageFailure", 1123), ("powerSupplyUnitFailure", 1124), ("currentTooLow", 1125), ("currentTooHigh", 1126), ("multipleFanFailure", 1127), ("singleFanFailure", 1128), ("linkDown", 1129), ("voltageOutOfRange", 1130), ("peerLink", 1131), ("hwFailure", 1132), ("alarmIndicationSignalOduTcmB", 1133), ("openConnectionIndicationOduTcmB", 1134), ("lockedDefectOduTcmB", 1135), ("lossofTandemConnectionOduTcmB", 1136), ("signalDegradeOduTcmB", 1137), ("backwardDefectIndicationOduTcmB", 1138), ("apsProtocolFailure", 1139), ("linkControlProtocolFailure", 1142), ("subModuleTempTooHigh", 1147), ("signalDegradeOlm", 1148), ("receiverOverloadProtection", 1149), ("lossOfFrameMux", 1150), ("lossOfFrameMuxFarEnd", 1151), ("lossOfCharSync", 1152), ("thres15MinExceededFecCE", 1153), ("thres15MinExceededFecUBE", 1154), ("thres15MinExceededFecES", 1155), ("thres15MinExceededFecSES", 1156), ("thres15MinExceededMuxES", 1157), ("thres15MinExceededMuxSES", 1158), ("thres15MinExceededGfpCHEC", 1159), ("thres15MinExceededGfpTHEC", 1160), ("thres15MinExceededGfpTHecDisc", 1161), ("thres15MinExceededGfpTsuperblockDisc", 1162), ("autoShutdownLaserOffDueToHighTemp", 1165), ("autoShutdownLaserOffDueToHighTxPwr", 1166), ("laserEndOfLife", 1167), ("laserBiasCurrAbnormal", 1168), ("opticalPowerTxLOS", 1169), ("midstageFault", 1170), ("farEndIpAddressUnknown", 1171), ("topologyDataCalculationInProgress", 1172), ("ntpServer1Unreachable", 1173), ("ntpServer2Unreachable", 1174), ("ntpServer3Unreachable", 1175), ("autoShutdownSendingAisOpu", 1176), ("alarmIndicationSignalOpu", 1177), ("alarmIndicationSignalOduTcmC", 1178), ("backwardDefectIndicationOduTcmC", 1179), ("lockedDefectOduTcmC", 1180), ("lossofTandemConnectionOduTcmC", 1181), ("openConnectionIndicationOduTcmC", 1182), ("signalDegradeOduTcmC", 1183), ("loopbackError", 1184), ("sectionTraceMismatch", 1185), ("traceIdentifierMismatchOtu", 1186), ("traceIdentifierMismatchOdu", 1187), ("traceIdentifierMismatchOduTcmA", 1188), ("traceIdentifierMismatchOduTcmC", 1189), ("traceIdentifierMismatchOduTcmB", 1190), ("databaseMismatch", 1191), ("databaseNcuMismatch", 1192), ("serverSignalFailureSectionRS", 1193), ("fwpMismatchDownloadServiceAffecting", 1194), ("fwpMismatchDownloadNotServiceAffecting", 1195), ("databaseVersionMismatch", 1196), ("clientFailForwarding", 1197), ("virtualChannelAis", 1198), ("serverSignalFailureVf", 1199), ("signalFailureOnLink", 1200), ("serverSignalFailureGfp", 1201), ("serverSignalFailurePath", 1202), ("gainTiltNotSettable", 1203), ("txPowerLimited", 1204), ("equalizationProgress", 1205), ("uPortFailure", 1206), ("autoShutdownBlock", 1207), ("serverSignalFailTx", 1208), ("payloadMismatch", 1209), ("voaControlFail", 1210), ("provisioningLocked", 1211), ("mansw", 1212), ("wtrTimerRunning", 1213), ("pcsSignalDegrade", 1214), ("alarmInputTIF", 1215), ("thres15MinExceededSonetSectES", 1216), ("thres15MinExceededSonetSectSES", 1217), ("thres15MinExceededSonetSectSEFS", 1218), ("thres15MinExceededSonetSectCV", 1219), ("thres15MinExceededSonetLineES", 1220), ("thres15MinExceededSonetLineSES", 1221), ("thres15MinExceededSonetLineCV", 1222), ("thres15MinExceededSonetLineUAS", 1223), ("thres15MinExceededOduTcmAES", 1224), ("thres15MinExceededOduTcmASES", 1225), ("thres15MinExceededOduTcmAUAS", 1226), ("thres15MinExceededOduTcmABbe", 1227), ("thres15MinExceededOduTcmBES", 1228), ("thres15MinExceededOduTcmBSES", 1229), ("thres15MinExceededOduTcmBUAS", 1230), ("thres15MinExceededOduTcmBBbe", 1231), ("thres15MinExceededOduTcmCES", 1232), ("thres15MinExceededOduTcmCSES", 1233), ("thres15MinExceededOduTcmCUAS", 1234), ("thres15MinExceededOduTcmCBbe", 1235), ("thres15MinExceededOtuES", 1236), ("thres15MinExceededOtuSES", 1237), ("thres15MinExceededOtuUAS", 1238), ("thres15MinExceededOtuBbe", 1239), ("thres15MinExceededOduES", 1240), ("thres15MinExceededOduSES", 1241), ("thres15MinExceededOduUAS", 1242), ("thres15MinExceededOduBbe", 1243), ("thresOptPowerCtrlFailureLow", 1244), ("thresOptPowerCtrlFailureHigh", 1245), ("dcnServerSignalFailure", 1246), ("maxPowerConsEquipModulesToHigh", 1247), ("maxPowerConsProvModulesToHigh", 1248), ("equipmentMismatchAllow", 1249), ("oosPrePostSig", 1250), ("oosPrePostSigInSetUpProcess", 1251), ("oosPrePostSigInTearDownProcess", 1252), ("cpTunnelModificationInProgess", 1253), ("capabilityLevelMismatch", 1254), ("oosPrePostSigEstablishFailed", 1255), ("oosPrePostSigAfterPrecompFailed", 1256), ("cpTunnelEstablishFailed", 1257), ("cpTunnelPrecompFailed", 1258), ("localFault", 1259), ("oscPwrTooHigh", 1260), ("oscPwrTooLow", 1261), ("aseTableBuild", 1262), ("aseTableNotAvailable", 1263), ("automaticPowerReduction", 1264), ("highBer", 1266), ("pumpLaser1TempTooHigh", 1267), ("pumpLaser1TempTooLow", 1268), ("pumpLaser2TempTooHigh", 1269), ("pumpLaser2TempTooLow", 1270), ("ospfIpServerNotAvailable", 1271), ("lossOsc", 1272), ("brPwrRxTooHigh", 1273), ("aseTableGenFailSignalinput", 1274), ("aseTableGenFailOscMissing", 1275), ("aseTableGenFailHighBackreflection", 1276), ("ramanPumpPwrTooHigh", 1277), ("ramanPumpPwrTooLow", 1278), ("autoPowerShutdown", 1279), ("aseTableGenFailLow", 1280), ("aseLow", 1281), ("configurableOpticalOutputPowerTransmittedTooHigh", 1282), ("configurableOpticalOutputPowerTransmittedTooLow", 1283), ("losAttProgress", 1284), ("aseTableGenProgress", 1285)) + NamedValues(("signalDegradeScn", 1286), ("dispertionTunningCondition", 1287), ("turnupCondition", 1288), ("turnupFailed", 1289), ("faultOnOpm", 1301), ("optSignalFailure", 1302), ("opmAbnormalCondition", 1303), ("hwOprReachedHT", 1304), ("disabledChannelPowerTooHigh", 1305), ("lossOfSignalCPort", 1306), ("serverSignalFailureODU", 1308), ("signalFailureOPU", 1309), ("serverSignalFail", 1310), ("serverSignalReduced", 1311), ("dispersionCompensationTooLow", 1312), ("dispersionCompensationTooHigh", 1313), ("farEndCommFailure", 1315), ("linkAttenuationTooLow", 1316), ("linkAttenuationTooHigh", 1317), ("entityOutageIndication", 1320), ("fiberConnectionMissing", 1321), ("farEndInformationMismatch", 1322), ("automaticPowerReductionForEyeSafety", 1325), ("lossOfPilotSignal", 1326), ("pumpLaser3TempTooHigh", 1327), ("pumpLaser3TempTooLow", 1328), ("pilotReceiveLevelHigh", 1329), ("autoShutdownStbyProtection", 1330), ("databaseFailure", 1331), ("latencyTooHigh", 1335), ("latencyTooLow", 1336), ("thres15MinExceededFecBERCE", 1337), ("autoShutdownSendingLckOdu", 1338), ("ntpNotInSync", 1339), ("encryptionModuleTamperDetected", 1340), ("encryptionModuleCryPasswdMissing", 1341), ("encryptionModuleCryPasswdError", 1342), ("encryptionModuleFwpUpdateEnabled", 1343), ("encryptionModuleSelfTestStarted", 1344), ("encryptionModuleSelfTestFail", 1345), ("encryptionModuleSelfTestFailCritical", 1346), ("encryptionPortAuthPasswdMissing", 1350), ("encryptionPortMaxKeyExchgFailuresReachedIs", 1351), ("encryptionPortMaxKeyExchgFailuresReachedOos", 1352), ("encryptionPortEncryptionSwitchedOff", 1353), ("encryptionPortKeyExchangedForced", 1354), ("encryptionPortEncryptionSwitchOffEnabled", 1355), ("encryptionPortKeyInitExchgMissed", 1356), ("roundTripDelayTooHigh", 1380), ("roundTripDelayTooLow", 1381), ("ntpForSchedEqlzRequired", 1386), ("airDustFilterClogged", 1385), ("oscOpticalPowerControlFailHigh", 1387), ("oscOpticalPowerControlFailLow", 1388), ("amplifierAbnormal", 1389), ("aseTableGenFailPilot", 1390), ("pumpLaser4TempTooHigh", 1391), ("pumpLaser4TempTooLow", 1392), ("fwdAseTableFailPilot", 1393), ("fwdAseTableOnPilot", 1394), ("inputVoltageFailurePort1", 1395), ("inputVoltageFailurePort2", 1396), ("xfpDecisionThresSetFailed", 1397), ("thres15MinExceededPhysConvSE", 1399), ("thres15MinExceededPhysConvESTX", 1400), ("thres15MinExceededPhysConvCVTX", 1401), ("thres15MinExceededPhysConvSETX", 1402), ("prbsRcvActivated", 1403), ("prbsTrmtActivated", 1404), ("prbsLossOfSeqSynch", 1405), ("opuClientSignalFail", 1406), ("lossOfTestSeqSynchOpu", 1407), ("autoShutdownOpuClientSignalFail", 1408), ("localOscTemperatureTooLow", 1409), ("localOscTemperatureTooHigh", 1410), ("differentialGroupDelayTooHigh", 1412), ("chromaticDispersionTooLow", 1413), ("chromaticDispersionTooHigh", 1414), ("signalToNoiseRatioTooLow", 1415), ("localOscLevelAbnormal", 1416), ("carrierFreqOffsetTooLow", 1417), ("carrierFreqOffsetTooHigh", 1418), ("lossOfLane", 1419), ("serverSignalFailureODUcrs", 1420), ("autoShutdownSendingOciOdu", 1421), ("oduTribMsiMismatch", 1422), ("channelMismatch", 1423), ("laserOnDelay", 1450), ("autoShutdownTxRxLasersDueToHighTemp", 1451))

class FspR7StartPmSnapshot(TextualConvention, Integer32):
    description = 'Apply reference values'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("apply", 2))

class FspR7StateConnection(TextualConvention, Integer32):
    description = 'State of the Physical Connection'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("undefined", 0), ("standard", 1), ("mismatchEquipment", 2), ("mismatchConnection", 3), ("mismatchChannel", 4), ("mismatchPhysical", 5), ("invalidConfig", 6), ("nonStandard", 7), ("standardSpeq", 8))

class FspR7Stuff(TextualConvention, Integer32):
    description = 'Indicates if bit/byte stuffing is used in the transport signal.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("yes", 1), ("no", 2))

class FspR7StuffCaps(TextualConvention, Bits):
    description = 'Indicates if bit/byte stuffing is used in the transport signal.'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capYes", 1), ("capNo", 2))

class FspR7SubLayer(TextualConvention, Integer32):
    description = 'Layer of Traffic Engineering Links attached to the tunnel created in the supporting layer'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("undefined", 0), ("lambda", 1), ("fiber", 2), ("tdm", 3), ("psc1", 4), ("psc2", 5), ("psc3", 6), ("psc4", 7), ("l2sc", 8), ("ethSvlan", 9), ("none", 10), ("subLsc", 11), ("dcsc", 12), ("otn", 13))

class FspR7SubLayerCaps(TextualConvention, Bits):
    description = 'Layer of Traffic Engineering Links attached to the tunnel created in the supporting layer'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capLambda", 1), ("capFiber", 2), ("capTdm", 3), ("capPsc1", 4), ("capPsc2", 5), ("capPsc3", 6), ("capPsc4", 7), ("capL2sc", 8), ("capEthSvlan", 9), ("capNone", 10), ("capSubLsc", 11), ("capDcsc", 12), ("capOtn", 13))

class FspR7SubLayerEncoding(TextualConvention, Integer32):
    description = 'Sub-Layer Encoding'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("undefined", 0), ("otn", 1), ("sonet", 2), ("sdh", 3), ("eth", 4), ("fc", 5), ("trans", 6), ("cl", 7), ("ib", 8), ("otnp", 9), ("unspecified", 10))

class FspR7SubLayerEncodingCaps(TextualConvention, Bits):
    description = 'Sub-Layer Encoding'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capOtn", 1), ("capSonet", 2), ("capSdh", 3), ("capEth", 4), ("capFc", 5), ("capTrans", 6), ("capCl", 7), ("capIb", 8), ("capOtnp", 9), ("capUnspecified", 10))

class FspR7SupplyType(TextualConvention, Integer32):
    description = 'The kind of power supply - provisioned value'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("front", 1), ("rear", 2))

class FspR7SupplyTypeCaps(TextualConvention, Bits):
    description = 'The kind of power supply - provisioned value'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capFront", 1), ("capRear", 2))

class FspR7SystemBusy(TextualConvention, Integer32):
    description = 'System Busy state.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("idle", 1), ("busyFileTransfer", 2), ("busySystemUpdate", 3), ("busyEqptUpdate", 4))

class FspR7SysType(TextualConvention, Integer32):
    description = 'Type of Network Element'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 0), ("otm", 1), ("oadm", 2), ("converter", 3), ("ila", 4), ("hub", 5))

class FspR7TelemetryOutput(TextualConvention, Integer32):
    description = 'Telemetry interface output provision'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("undefined", 0), ("neAlmCr", 1), ("neAlmMj", 2), ("neAlmMn", 3), ("neAlmMjGe", 4), ("neAlmMnGe", 5), ("fcuAlmCr", 6), ("fcuAlmMj", 7), ("fcuAlmMn", 8), ("fcuAlmMjGe", 9), ("fcuAlmMnGe", 10), ("psuAlmCr", 11), ("psuAlmMj", 12), ("psuAlmMn", 13), ("psuAlmMjGe", 14), ("psuAlmMnGe", 15), ("none", 16))

class FspR7TelemetryOutputCaps(TextualConvention, Bits):
    description = 'Telemetry interface output provision'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNeAlmCr", 1), ("capNeAlmMj", 2), ("capNeAlmMn", 3), ("capNeAlmMjGe", 4), ("capNeAlmMnGe", 5), ("capFcuAlmCr", 6), ("capFcuAlmMj", 7), ("capFcuAlmMn", 8), ("capFcuAlmMjGe", 9), ("capFcuAlmMnGe", 10), ("capPsuAlmCr", 11), ("capPsuAlmMj", 12), ("capPsuAlmMn", 13), ("capPsuAlmMjGe", 14), ("capPsuAlmMnGe", 15), ("capNone", 16))

class FspR7TestMode(TextualConvention, Integer32):
    description = 'Sets the operation mode for reveiver PRBS testing'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 0), ("testModeRls", 1), ("testModePRBS23", 2), ("testModePRBS23Inv", 3), ("testModePRBS31", 4), ("testModePRBS31Inv", 5), ("testModeRls", 1), ("testModePRBS23", 2), ("testModePRBS23Inv", 3), ("testModePRBS31", 4), ("testModePRBS31Inv", 5))

class FspR7TestModeCaps(TextualConvention, Bits):
    description = 'Sets the operation mode for reveiver PRBS testing'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capTestModeRls", 1), ("capTestModePRBS23", 2), ("capTestModePRBS23Inv", 3), ("capTestModePRBS31", 4), ("capTestModePRBS31Inv", 5), ("capTestModeRls", 1), ("capTestModePRBS23", 2), ("capTestModePRBS23Inv", 3), ("capTestModePRBS31", 4), ("capTestModePRBS31Inv", 5))

class FspR7TifOutputReset(TextualConvention, Integer32):
    description = 'Has the same function as the HW switch at the UTM board'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("opr", 2))

class FspR7TifOutputResetCaps(TextualConvention, Bits):
    description = 'Has the same function as the HW switch at the UTM board'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capOpr", 2))

class FspR7Time(TextualConvention, OctetString):
    description = 'A time specification.\n         field octets contents range\n         ----- ------ -------- -----\n         1 1 hour 0..23\n         2 2 minutes 0..59\n         3 3 seconds 0..60\n         (use 60 for leap-second)\n         For example: 13-10-26'
    status = 'current'
    displayHint = '1d-1d-1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

class FspR7TimeChangeReason(TextualConvention, Integer32):
    description = 'Time Change Reason'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("manual", 2), ("correction", 3), ("dst", 4))

class FspR7TiltSet(TextualConvention, Integer32):
    description = 'Tilt setting as discrete values versus a range'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("minus1dB0", 1), ("minus1dB5", 2), ("minus2dB0", 3))

class FspR7TiltSetCaps(TextualConvention, Bits):
    description = 'Tilt setting as discrete values versus a range'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capMinus1dB0", 1), ("capMinus1dB5", 2), ("capMinus2dB0", 3))

class FspR7TL1InternalState(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("alw", 1), ("inh", 2))

class FspR7TL1InternalStateCaps(TextualConvention, Bits):
    description = ''
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capAlw", 1), ("capInh", 2))

class FspR7TL1TimoutAvailable(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("yes", 1), ("no", 2))

class FspR7TL1TimoutAvailableCaps(TextualConvention, Bits):
    description = ''
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capYes", 1), ("capNo", 2))

class FspR7TopologyType(TextualConvention, Integer32):
    description = 'Monitored Topology Type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("lad", 1), ("ring", 2), ("p2p", 3), ("unknown", 4))

class FspR7TopologyTypeCaps(TextualConvention, Bits):
    description = 'Monitored Topology Type'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capLad", 1), ("capRing", 2), ("capP2p", 3), ("capUnknown", 4))

class FspR7TransmissionMode(TextualConvention, Integer32):
    description = 'The transmission mode of the module.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
    namedValues = NamedValues(("undefined", 0), ("trans", 1), ("transE", 2), ("transW", 3), ("transHst", 4), ("mux", 5), ("muxE", 6), ("muxW", 7), ("muxHst", 8), ("regen1Way", 9), ("regen2Way", 10), ("obsolete", 11), ("adm", 12), ("transDual", 13), ("muxDual", 14), ("nFixed", 15), ("cSelect", 16), ("dualClient", 17))

class FspR7TransmissionModeCaps(TextualConvention, Bits):
    description = 'The transmission mode of the module.'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capTrans", 1), ("capTransE", 2), ("capTransW", 3), ("capTransHst", 4), ("capMux", 5), ("capMuxE", 6), ("capMuxW", 7), ("capMuxHst", 8), ("capRegen1Way", 9), ("capRegen2Way", 10), ("capObsolete", 11), ("capAdm", 12), ("capTransDual", 13), ("capMuxDual", 14), ("capNFixed", 15), ("capCSelect", 16), ("capDualClient", 17))

class FspR7TurnupConfig(TextualConvention, Integer32):
    description = 'Turnup Operation'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("oprTurnup", 2))

class FspR7TurnupConfigCaps(TextualConvention, Bits):
    description = 'Turnup Operation'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capOprTurnup", 2))

class FspR7TypeConnection(TextualConvention, Integer32):
    description = 'Type of equipment connection'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("connection1Way", 1), ("connection2Way", 2))

class FspR7TypeConnectionCaps(TextualConvention, Bits):
    description = 'Type of equipment connection'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capConnection1Way", 1), ("capConnection2Way", 2))

class FspR7TypeCrs(TextualConvention, Integer32):
    description = 'Type of Cross-Connect'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("connection1Way", 1), ("connection2Way", 2))

class FspR7TypeCrsCaps(TextualConvention, Bits):
    description = 'Type of Cross-Connect'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capConnection1Way", 1), ("capConnection2Way", 2))

class FspR7Unsigned32Caps(TextualConvention, OctetString):
    description = 'A FspR7Unsigned32Caps specification.\n         1..4 bytes - minValue(Unsigned32),\n         5..8 bytes - maxValue(Unsigned32).'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 8)

class FspR7UntaggedFrames(TextualConvention, Integer32):
    description = 'If untagged frames shall be enabled on this port or not.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("accept", 1), ("reject", 2))

class FspR7UntaggedFramesCaps(TextualConvention, Bits):
    description = 'If untagged frames shall be enabled on this port or not.'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capAccept", 1), ("capReject", 2))

class FspR7VoaMode(TextualConvention, Integer32):
    description = 'VOA operating mode'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("power", 1), ("att", 2))

class FspR7VoaModeCaps(TextualConvention, Bits):
    description = 'VOA operating mode'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capPower", 1), ("capAtt", 2))

class FspR7XfpDecisionThres(TextualConvention, Integer32):
    description = 'XFP Decision threshold setting'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("standard", 1), ("forwardRaman", 2))

class FspR7XfpDecisionThresCaps(TextualConvention, Bits):
    description = 'XFP Decision threshold setting'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capStandard", 1), ("capForwardRaman", 2))

class FspR7YesNo(TextualConvention, Integer32):
    description = 'YesNo variable.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("yes", 1), ("no", 2))

class FspR7YesNoCaps(TextualConvention, Bits):
    description = 'YesNo variable.'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capYes", 1), ("capNo", 2))

class SourceIpAddress(TextualConvention, Integer32):
    description = 'IP address which will be used as source address by client applications (i.e. FTP) to facilitate proper backward routing (i.e. server to client direction) in the DCN'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("sysIp", 1), ("defaultIp", 2))

class SourceIpAddressCaps(TextualConvention, Bits):
    description = 'IP address which will be used as source address by client applications (i.e. FTP) to facilitate proper backward routing (i.e. server to client direction) in the DCN'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capSysIp", 1), ("capDefaultIp", 2))

neSystemId = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neSystemId.setStatus('current')
if mibBuilder.loadTexts: neSystemId.setDescription('System Identifier')
neSysType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 2), FspR7SysType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neSysType.setStatus('current')
if mibBuilder.loadTexts: neSysType.setDescription('Type of Network Element')
neAutoProvisioning = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 3), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAutoProvisioning.setStatus('current')
if mibBuilder.loadTexts: neAutoProvisioning.setDescription('Global system variable. Enables or disables athe auto-provisioning functionality.')
neType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 4), FspR7NeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neType.setStatus('current')
if mibBuilder.loadTexts: neType.setDescription('Type of Network Element')
neSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neSwVersion.setStatus('current')
if mibBuilder.loadTexts: neSwVersion.setDescription('Software Version of the NCU software. <x>.<y>[.<z>]')
neGradeInventory = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 6), Grade()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neGradeInventory.setStatus('current')
if mibBuilder.loadTexts: neGradeInventory.setDescription('Used to distinguish between NCU capabilities (range of supported services or applications)')
neModel = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 7), FspR7Model()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neModel.setStatus('current')
if mibBuilder.loadTexts: neModel.setDescription('Marketing model name of System')
neVendorId = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neVendorId.setStatus('current')
if mibBuilder.loadTexts: neVendorId.setDescription('The name of the manufacturer')
neAINSProvEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 9), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAINSProvEnabled.setStatus('current')
if mibBuilder.loadTexts: neAINSProvEnabled.setDescription('Global system variable. Automatic IN-Service Provisioning ENAbled flag.\n         This value is controlled by settings in the system configuration file.\n         If Y, entities which are autoprovisioned will be created with an initial\n         state of OOS-AU,AINS. If N, autoprovisioned entities will be created in\n         an ISNR state. Entities in an OOS-AU,AINS state will automatically\n         transition to an in-service state after a continuous interval\n         without any active service affecting conditions. The duration of this\n         interval is equal to that given by the AISPDEFTM attribute at the start\n         of the continuous interval.')
neAINSDefaultTimer = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 5760), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('Min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAINSDefaultTimer.setStatus('current')
if mibBuilder.loadTexts: neAINSDefaultTimer.setDescription('AINS Default Signal Timer. The length of time in minutes for which an\n         entity must be free of service affecting conditions in order to automatically\n         transition from an OOS-AU,AINS state to an inservice state. The value is set via\n         the system configuration file. If the value is set to 0, an entity in the OOS-AU, AINS\n         state will immediately transition to an in-service state.')
nePreferredFacilityType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 11), FspR7PreferredFacilityType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nePreferredFacilityType.setStatus('current')
if mibBuilder.loadTexts: nePreferredFacilityType.setDescription('Default type of facility model to use for automatically created\n         facilities. SDH will cause STM64, STM16, VC4, VC3 type\n         facilities to be auto-created. SONET will cause OC192,\n         OC48, STS1 and STS3c type facilities to be auto-created.')
neForceDelete = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 12), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neForceDelete.setStatus('current')
if mibBuilder.loadTexts: neForceDelete.setDescription('Force Delete')
neSdhSesThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: neSdhSesThreshold.setStatus('current')
if mibBuilder.loadTexts: neSdhSesThreshold.setDescription('Severely Errorred Seconds percentage for SDH facilities. Sets the default\n         relative percentage of Errorred Seconds within a PM interval at which Severely Errorred\n         Seconds will be declared.')
neOtnSesThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: neOtnSesThreshold.setStatus('current')
if mibBuilder.loadTexts: neOtnSesThreshold.setDescription('Severely Errorred Seconds percentage for OTN facilities. Sets the default\n         relative percentage of Errorred Seconds within a PM interval at which Severely Errorred\n         Seconds will be declared.')
neTopologyType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 16), FspR7TopologyType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neTopologyType.setStatus('deprecated')
if mibBuilder.loadTexts: neTopologyType.setDescription('Monitored Topology Type')
neDatabaseSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neDatabaseSerialNumber.setStatus('current')
if mibBuilder.loadTexts: neDatabaseSerialNumber.setDescription("read from Master Shelf and stored in the DB 'once'; only changed when a command which implies a change is given (INIT__SYS with DBSRST = ACCEPT)")
neDatabaseType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 18), FspR7DatabaseType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neDatabaseType.setStatus('current')
if mibBuilder.loadTexts: neDatabaseType.setDescription('this shows whether the system is running on a temporary auxiliary DB or on the DB in ACT, which is the normal situation')
neRackSize = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 45), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neRackSize.setStatus('current')
if mibBuilder.loadTexts: neRackSize.setDescription('Size of the Rack in HU')
neDatabaseNcuType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 20), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neDatabaseNcuType.setStatus('current')
if mibBuilder.loadTexts: neDatabaseNcuType.setDescription('DB Type of NCU')
neDatabaseNcuAid = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 21), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neDatabaseNcuAid.setStatus('current')
if mibBuilder.loadTexts: neDatabaseNcuAid.setDescription('Aid of NCU in database')
neModusLastRestart = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 22), FspR7ModusLastRestart()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neModusLastRestart.setStatus('current')
if mibBuilder.loadTexts: neModusLastRestart.setDescription('Information over the modus of the last restart')
neSystemIp = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neSystemIp.setStatus('current')
if mibBuilder.loadTexts: neSystemIp.setDescription('System IP')
neSystemIpMask = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neSystemIpMask.setStatus('current')
if mibBuilder.loadTexts: neSystemIpMask.setDescription('System IP Mask')
neAreaId = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAreaId.setStatus('current')
if mibBuilder.loadTexts: neAreaId.setDescription('OSPF Area ID for IP Interface')
neBackupScuAvailable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 26), FspR7ScuDbBackup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neBackupScuAvailable.setStatus('current')
if mibBuilder.loadTexts: neBackupScuAvailable.setDescription('DB Backup on SCU available')
neRouteRedistribution = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 27), FspR7RouteRedist()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neRouteRedistribution.setStatus('current')
if mibBuilder.loadTexts: neRouteRedistribution.setDescription('Redistribution of routes in OSPF')
neAlarmActivationTime = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 28), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: neAlarmActivationTime.setDescription('Alarm activation time. The hold-off period during which a defect must persist in order to be raised as an alarmed event (in seconds).')
neAlarmDeactivationTime = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 29), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAlarmDeactivationTime.setStatus('current')
if mibBuilder.loadTexts: neAlarmDeactivationTime.setDescription('Alarm deactivation time. The hold-on period during\n         which a defect must remain absent in order for the corresponding\n         previously raised alarm reporting the condition will be cleared (in seconds).')
neDate = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 1), FspR7Date()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neDate.setStatus('current')
if mibBuilder.loadTexts: neDate.setDescription('Date')
neTime = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 2), FspR7Time()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neTime.setStatus('current')
if mibBuilder.loadTexts: neTime.setDescription('Time, display rule: HH-MM-SS')
neTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neTimeZone.setStatus('current')
if mibBuilder.loadTexts: neTimeZone.setDescription('Time Zone')
neNetworkTimeProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 4), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neNetworkTimeProtocol.setStatus('deprecated')
if mibBuilder.loadTexts: neNetworkTimeProtocol.setDescription('Network Time Protocol Provisioned State.')
neNtpServer1 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neNtpServer1.setStatus('deprecated')
if mibBuilder.loadTexts: neNtpServer1.setDescription('IP address of NTP Server 1')
neNtpServer2 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neNtpServer2.setStatus('deprecated')
if mibBuilder.loadTexts: neNtpServer2.setDescription('IP address of NTP Server 2')
neNtpServer3 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neNtpServer3.setStatus('deprecated')
if mibBuilder.loadTexts: neNtpServer3.setDescription('IP address of NTP Server 3')
neNtpStatusServer1 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 8), FspR7NtpServerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neNtpStatusServer1.setStatus('deprecated')
if mibBuilder.loadTexts: neNtpStatusServer1.setDescription('NTP server is reachabled or unreachabled. Get is blocking for 4 second.')
neNtpStatusServer2 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 9), FspR7NtpServerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neNtpStatusServer2.setStatus('deprecated')
if mibBuilder.loadTexts: neNtpStatusServer2.setDescription('NTP server is reachabled or unreachabled. Get is blocking for 4 second.')
neNtpStatusServer3 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 10), FspR7NtpServerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neNtpStatusServer3.setStatus('deprecated')
if mibBuilder.loadTexts: neNtpStatusServer3.setDescription('NTP server is reachabled or unreachabled. Get is blocking for 4 second.')
neNtpSourceIp = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 11), SourceIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neNtpSourceIp.setStatus('deprecated')
if mibBuilder.loadTexts: neNtpSourceIp.setDescription('IP address which will be used as source address by client applications (i.e. FTP) to facilitate proper backward routing (i.e. server to client direction) in the DCN')
neTimeZoneOffset = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neTimeZoneOffset.setStatus('current')
if mibBuilder.loadTexts: neTimeZoneOffset.setDescription('Time Zone Offset')
neDaylightSavingsTimeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 13), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neDaylightSavingsTimeEnabled.setStatus('current')
if mibBuilder.loadTexts: neDaylightSavingsTimeEnabled.setDescription('Boolean value indicating if Daylight Saving Time is enabled.')
neNtpMode = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 14), FspR7NtpMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neNtpMode.setStatus('current')
if mibBuilder.loadTexts: neNtpMode.setDescription('NTP Service Mode')
neTimeChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 15), FspR7TimeChangeReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neTimeChangeReason.setStatus('current')
if mibBuilder.loadTexts: neTimeChangeReason.setDescription('Time Change Reason')
ntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 20), )
if mibBuilder.loadTexts: ntpServerTable.setStatus('current')
if mibBuilder.loadTexts: ntpServerTable.setDescription('The NTP Server configuration table.')
ntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 20, 1), ).setIndexNames((0, "FspR7-MIB", "ntpServerIp"))
if mibBuilder.loadTexts: ntpServerEntry.setStatus('current')
if mibBuilder.loadTexts: ntpServerEntry.setDescription('The NTP Server entity.')
ntpServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 20, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntpServerIp.setStatus('current')
if mibBuilder.loadTexts: ntpServerIp.setDescription('The IP address of the remote NTP server.')
ntpServerSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 20, 1, 2), SourceIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServerSourceIp.setStatus('current')
if mibBuilder.loadTexts: ntpServerSourceIp.setDescription('Network interface type used for NTP connection. Two interface types are defined:\n         sysIp(1) and defaultIp(2).\n        ')
ntpServerTest = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 20, 1, 3), FspR7NtpTest()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServerTest.setStatus('current')
if mibBuilder.loadTexts: ntpServerTest.setDescription('Operational parameter for invoking a connection test procedure. If set\n         to ntpTest(2) then a connection with remote NTP server is being checked.\n         Result of this operation is saved under ntpServerTestStatus column. When\n         operation finish then value is automaticaly set to rls(1). It cannot\n         be set to rls(1) by hand.\n        ')
ntpServerTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 20, 1, 4), FspR7NtpTestStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerTestStatus.setStatus('current')
if mibBuilder.loadTexts: ntpServerTestStatus.setDescription('Result of NTP availability check command invoked by setting ntpServerTest to ntpTest(2).')
ntpServerSyncStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 20, 1, 5), FspR7NtpSyncStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerSyncStatus.setStatus('current')
if mibBuilder.loadTexts: ntpServerSyncStatus.setDescription('The NTP Synchronization status.')
ntpServerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 20, 1, 6), FspR7NtpAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServerAdminState.setStatus('current')
if mibBuilder.loadTexts: ntpServerAdminState.setDescription('Administrative state of remote NTP server. It can be set to is(2) or to dsbld(6).')
ntpServerOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 20, 1, 7), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerOperState.setStatus('current')
if mibBuilder.loadTexts: ntpServerOperState.setDescription('Operative state of remote NTP server.')
ntpServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 20, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: ntpServerRowStatus.setDescription('Row status used for managing a NTP server entity. All values defined for\n         RowStatus TC can be used.\n        ')
ntpTimeZoneCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 21), )
if mibBuilder.loadTexts: ntpTimeZoneCapsTable.setStatus('current')
if mibBuilder.loadTexts: ntpTimeZoneCapsTable.setDescription('Table with available time zones.')
ntpTimeZoneCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 21, 1), ).setIndexNames((0, "FspR7-MIB", "ntpTimeZoneCapsIndex"))
if mibBuilder.loadTexts: ntpTimeZoneCapsEntry.setStatus('current')
if mibBuilder.loadTexts: ntpTimeZoneCapsEntry.setDescription('Every entry corresponds to time zone name.')
ntpTimeZoneCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 101)))
if mibBuilder.loadTexts: ntpTimeZoneCapsIndex.setStatus('current')
if mibBuilder.loadTexts: ntpTimeZoneCapsIndex.setDescription('Row number of ntpTimeZoneCapsTable.')
ntpTimeZoneCapsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 30, 21, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpTimeZoneCapsValue.setStatus('current')
if mibBuilder.loadTexts: ntpTimeZoneCapsValue.setDescription('Name of the time-zone possible to be used as neTimeZone.')
neTimerForceOprToRls = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 31), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1440), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: neTimerForceOprToRls.setStatus('current')
if mibBuilder.loadTexts: neTimerForceOprToRls.setDescription('The length of time in minutes for which\n         a FRCD__OPERATION OPR state will automatically changed to RLS state.\n         The value is set via the system configuration file.')
neScuRing = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 32), FspR7ScuRing()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neScuRing.setStatus('current')
if mibBuilder.loadTexts: neScuRing.setDescription('SCU ring interconnect')
neScuRingCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 33), FspR7ScuRingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neScuRingCap.setStatus('current')
if mibBuilder.loadTexts: neScuRingCap.setDescription('SCU ring interconnect')
neAlarmProfileApply = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 34), FspR7ApplyAlarmProfile()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAlarmProfileApply.setStatus('current')
if mibBuilder.loadTexts: neAlarmProfileApply.setDescription('Apply Alarm Profile to all existing entities')
neAlarmProfileApplyCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 35), FspR7ApplyAlarmProfileCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neAlarmProfileApplyCap.setStatus('current')
if mibBuilder.loadTexts: neAlarmProfileApplyCap.setDescription('Apply Alarm Profile to all existing entities')
neFtpServer = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 36), FspR7FtpServer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neFtpServer.setStatus('current')
if mibBuilder.loadTexts: neFtpServer.setDescription('FTP server enable/disable configuration')
neFtpServerCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 37), FspR7FtpServerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neFtpServerCap.setStatus('current')
if mibBuilder.loadTexts: neFtpServerCap.setDescription('FTP server enable/disable configuration')
neFtpClient = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 38), FspR7FtpClient()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neFtpClient.setStatus('current')
if mibBuilder.loadTexts: neFtpClient.setDescription('FTP client enable/disable configuration')
neSshDeamon = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 39), FspR7SshDeamon()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neSshDeamon.setStatus('current')
if mibBuilder.loadTexts: neSshDeamon.setDescription('Secure Shell Server enable/disable configuration')
neEqlzAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 40), FspR7EqlzAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: neEqlzAdmin.setDescription('Scheduled Equalization Administration')
neEqlzAdminCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 41), FspR7EqlzAdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neEqlzAdminCap.setStatus('current')
if mibBuilder.loadTexts: neEqlzAdminCap.setDescription('Scheduled Equalization Administration')
neEqlzInterval = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 42), FspR7EqlzInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neEqlzInterval.setStatus('current')
if mibBuilder.loadTexts: neEqlzInterval.setDescription('Scheduled Equalization Interval')
neEqlzIntervalCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 43), FspR7EqlzIntervalCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neEqlzIntervalCap.setStatus('current')
if mibBuilder.loadTexts: neEqlzIntervalCap.setDescription('Scheduled Equalization Interval')
neEqlzStartDate = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 44), FspR7Date()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neEqlzStartDate.setStatus('current')
if mibBuilder.loadTexts: neEqlzStartDate.setDescription('Scheduled Equalization Start Date')
neEqlzStartTime = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 45), FspR7Time()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neEqlzStartTime.setStatus('current')
if mibBuilder.loadTexts: neEqlzStartTime.setDescription('Scheduled Equalization Start Time')
neDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 46), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: neDefaultGateway.setDescription('Default gateway for IP routing')
neSwType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 47), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neSwType.setStatus('current')
if mibBuilder.loadTexts: neSwType.setDescription('Network Elemtent SW Type')
neCpPcsPriority = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 48), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 127), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neCpPcsPriority.setStatus('current')
if mibBuilder.loadTexts: neCpPcsPriority.setDescription('Path Computation Server Priority')
neScuAutoRestoreEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 49), FspR7ScuDbBackup()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neScuAutoRestoreEnabled.setStatus('current')
if mibBuilder.loadTexts: neScuAutoRestoreEnabled.setDescription('Enable/Disable Automatic Data Base Restore from SCU.')
neNodeNameSyntax = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 50), FspR7NodeId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neNodeNameSyntax.setStatus('current')
if mibBuilder.loadTexts: neNodeNameSyntax.setDescription('Node Name Syntax')
neAutoProvLifCp = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 51), FspR7AutopLif()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAutoProvLifCp.setStatus('current')
if mibBuilder.loadTexts: neAutoProvLifCp.setDescription('Automatic Provisioning of LIF-CP')
authTrapSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 60), IpAddress())
if mibBuilder.loadTexts: authTrapSrcIp.setStatus('current')
if mibBuilder.loadTexts: authTrapSrcIp.setDescription('Source IP address of sending NE.')
authTrapLctIp = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 61), IpAddress())
if mibBuilder.loadTexts: authTrapLctIp.setStatus('current')
if mibBuilder.loadTexts: authTrapLctIp.setDescription('IP address of LCT used in NE access.')
authTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 62), FspR7AccessStatus())
if mibBuilder.loadTexts: authTrapStatus.setStatus('current')
if mibBuilder.loadTexts: authTrapStatus.setDescription('Indication whether authentication was succesful/unsuccessful.')
authTrapSessionId = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 63), SnmpAdminString())
if mibBuilder.loadTexts: authTrapSessionId.setStatus('current')
if mibBuilder.loadTexts: authTrapSessionId.setDescription('Session name used in NE access.')
authTrapProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 64), FspR7AccessProtocol())
if mibBuilder.loadTexts: authTrapProtocol.setStatus('current')
if mibBuilder.loadTexts: authTrapProtocol.setDescription('Protocol type used in NE access.')
authTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 65), Unsigned32())
if mibBuilder.loadTexts: authTrapPort.setStatus('current')
if mibBuilder.loadTexts: authTrapPort.setDescription('Port number used in NE access.')
authTrapUserName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 66), SnmpAdminString())
if mibBuilder.loadTexts: authTrapUserName.setStatus('current')
if mibBuilder.loadTexts: authTrapUserName.setDescription('The name string for user authentication purposes')
authTrapRadUserName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 67), SnmpAdminString())
if mibBuilder.loadTexts: authTrapRadUserName.setStatus('current')
if mibBuilder.loadTexts: authTrapRadUserName.setDescription('The name string for radius authentication purposes')
authTrapSuccessfulAuthCount = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 68), Unsigned32())
if mibBuilder.loadTexts: authTrapSuccessfulAuthCount.setStatus('current')
if mibBuilder.loadTexts: authTrapSuccessfulAuthCount.setDescription('Number of successful authentications.')
authTrapUnsuccessfulAuthCount = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 69), Unsigned32())
if mibBuilder.loadTexts: authTrapUnsuccessfulAuthCount.setStatus('current')
if mibBuilder.loadTexts: authTrapUnsuccessfulAuthCount.setDescription('Number of unsuccessful authentications.')
systemBusy = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 70), FspR7SystemBusy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBusy.setStatus('current')
if mibBuilder.loadTexts: systemBusy.setDescription('System Busy state.')
snmpAgentStartupDate = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 71), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentStartupDate.setStatus('current')
if mibBuilder.loadTexts: snmpAgentStartupDate.setDescription('Date')
lastErrorStatusCounter = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 72), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastErrorStatusCounter.setStatus('current')
if mibBuilder.loadTexts: lastErrorStatusCounter.setDescription('')
lastErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 73), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastErrorStatus.setStatus('current')
if mibBuilder.loadTexts: lastErrorStatus.setDescription('')
startPmSnapshot = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 74), FspR7StartPmSnapshot()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startPmSnapshot.setStatus('current')
if mibBuilder.loadTexts: startPmSnapshot.setDescription('Apply reference values')
pmSnapshotStatus = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 75), FspR7PmSnapshotStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotStatus.setStatus('current')
if mibBuilder.loadTexts: pmSnapshotStatus.setDescription('Reference value Status')
maxBackplaneBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 76), Unsigned32()).setUnits('kbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: maxBackplaneBandwidth.setStatus('current')
if mibBuilder.loadTexts: maxBackplaneBandwidth.setDescription('Parameter stores information about maximum backplane bandwidth that can be used.')
usedBackplaneBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 77), Unsigned32()).setUnits('kbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: usedBackplaneBandwidth.setStatus('current')
if mibBuilder.loadTexts: usedBackplaneBandwidth.setDescription('Parameter stores information about currenty used backplane bandwidth. Its value is limited by Maximum Backplane Bandwidth (BCKPLBW-MAX).')
neSecurityMode = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 78), FspR7SecurityMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neSecurityMode.setStatus('current')
if mibBuilder.loadTexts: neSecurityMode.setDescription('The switch for handling Security Mode of a Network Element. It supports basic(1) and enhanced(2) security mode.\n         After switch is performed, a user is forced to change the password using fspUserManagementAuthPrivKey and\n         fspUserManagementAuthPrivKeyOld objects in single set-request, otherwise SNMPv3 access to any MIB object will\n         be denied due to authorization error.\n         \n         Switch from basic(1) to enhanced(2) security mode is allowed always. Switch in opposite direction is allowed\n         only after manual user account removal - only one user account with admin(1) privilege level defined by\n         FspR7SnmpPrivLevel TEXTUAL-CONVENTION must remain.\n         \n         In the basic(1) mode:\n         * minimum password length is 8 characters,\n         * maximum password length is 31 characters,\n         * password cannot contain user name,\n         * user name and password upper-case only,\n         * password contains at least\n         - one alphabetic character (a..z; A..Z);\n         - one numeric character (0..9);\n         - one special character ( ! , @ , # , $ , % , ^ , ( , ) , _ , + , | , ~ , { , } , [ , ] , - , . )\n         \n         In the enhanced(2) mode:\n         * minimum password lenght is 15 characters,\n         * maximum password lenght is 31 characters,\n         * password cannot contain user name,\n         * user name and password mixed-case supported,\n         * password contains at least\n         - two lowercase alphabetic character (a..z);\n         - two uppercase alphabetic character(A..Z);\n         - two numeric character (0..9);\n         - two special character ( ! , @ , # , $ , % , ^ , ( , ) , _ , + , | , ~ , { , } , [ , ] , - , . )')
neSecurityModeCapability = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 79), FspR7SecurityModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neSecurityModeCapability.setStatus('current')
if mibBuilder.loadTexts: neSecurityModeCapability.setDescription('Security Mode')
neMinPasswordLength = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 1, 80), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(8, 31), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neMinPasswordLength.setStatus('current')
if mibBuilder.loadTexts: neMinPasswordLength.setDescription('Minimum password length settable in range 8..31 characters. It is \n         accessible only using SNMPv3 protocol version with authentication \n         and privacy')
routingIpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 1), )
if mibBuilder.loadTexts: routingIpTable.setStatus('current')
if mibBuilder.loadTexts: routingIpTable.setDescription('Static active routing table')
routingIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 1, 1), ).setIndexNames((0, "FspR7-MIB", "routingIpDestination"), (0, "FspR7-MIB", "routingIpMask"), (0, "FspR7-MIB", "routingIpGateway"), (0, "FspR7-MIB", "routingIpDevice"))
if mibBuilder.loadTexts: routingIpEntry.setStatus('current')
if mibBuilder.loadTexts: routingIpEntry.setDescription('')
routingIpDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: routingIpDestination.setStatus('current')
if mibBuilder.loadTexts: routingIpDestination.setDescription('Destination IP Address')
routingIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: routingIpMask.setStatus('current')
if mibBuilder.loadTexts: routingIpMask.setDescription('Destination IP Mask.')
routingIpGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: routingIpGateway.setStatus('current')
if mibBuilder.loadTexts: routingIpGateway.setDescription('Gateway IP Address')
routingIpDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 1, 1, 4), EntityIndex())
if mibBuilder.loadTexts: routingIpDevice.setStatus('current')
if mibBuilder.loadTexts: routingIpDevice.setDescription('Address Identifier of IP Entity. E.g SC-1-A-C or LINK-1-A-1.')
routingIpRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 1, 1, 5), FspR7Protocol()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingIpRouteType.setStatus('current')
if mibBuilder.loadTexts: routingIpRouteType.setDescription('The Type of the IP Route.')
routingIpRoutingMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingIpRoutingMetric.setStatus('current')
if mibBuilder.loadTexts: routingIpRoutingMetric.setDescription('Routing Metric')
routingIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingIpRowStatus.setStatus('current')
if mibBuilder.loadTexts: routingIpRowStatus.setDescription('This object is used to create, or delete a row in this table.')
inactiveRoutingIpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 2), )
if mibBuilder.loadTexts: inactiveRoutingIpTable.setStatus('current')
if mibBuilder.loadTexts: inactiveRoutingIpTable.setDescription('Static inactive routing table')
inactiveRoutingIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 2, 1), ).setIndexNames((0, "FspR7-MIB", "routingIpDestination"), (0, "FspR7-MIB", "routingIpMask"), (0, "FspR7-MIB", "routingIpGateway"), (0, "FspR7-MIB", "routingIpDevice"))
if mibBuilder.loadTexts: inactiveRoutingIpEntry.setStatus('current')
if mibBuilder.loadTexts: inactiveRoutingIpEntry.setDescription('')
inactiveRoutingIpDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: inactiveRoutingIpDestination.setStatus('current')
if mibBuilder.loadTexts: inactiveRoutingIpDestination.setDescription('Destination IP Address')
inactiveRoutingIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: inactiveRoutingIpMask.setStatus('current')
if mibBuilder.loadTexts: inactiveRoutingIpMask.setDescription('Destination IP Mask.')
inactiveRoutingIpGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 2, 1, 3), IpAddress())
if mibBuilder.loadTexts: inactiveRoutingIpGateway.setStatus('current')
if mibBuilder.loadTexts: inactiveRoutingIpGateway.setDescription('Gateway IP Address')
inactiveRoutingIpDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 2, 1, 4), EntityIndex())
if mibBuilder.loadTexts: inactiveRoutingIpDevice.setStatus('current')
if mibBuilder.loadTexts: inactiveRoutingIpDevice.setDescription('Address Identifier of IP Entity. E.g SC-1-A-C or LINK-1-A-1.')
inactiveRoutingIpRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 2, 1, 5), FspR7Protocol()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inactiveRoutingIpRouteType.setStatus('current')
if mibBuilder.loadTexts: inactiveRoutingIpRouteType.setDescription('The Type of the IP Route.')
inactiveRoutingIpRoutingMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inactiveRoutingIpRoutingMetric.setStatus('current')
if mibBuilder.loadTexts: inactiveRoutingIpRoutingMetric.setDescription('Routing Metric')
inactiveRoutingIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 2, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inactiveRoutingIpRowStatus.setStatus('current')
if mibBuilder.loadTexts: inactiveRoutingIpRowStatus.setDescription('This object is used to create, or delete a row in this table.')
knownHostTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 3), )
if mibBuilder.loadTexts: knownHostTable.setStatus('current')
if mibBuilder.loadTexts: knownHostTable.setDescription('Known host table')
knownHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 3, 1), ).setIndexNames((0, "FspR7-MIB", "knownHostIP"), (0, "FspR7-MIB", "knownHostKeyEncryptAlgorithm"))
if mibBuilder.loadTexts: knownHostEntry.setStatus('current')
if mibBuilder.loadTexts: knownHostEntry.setDescription('')
knownHostIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 3, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: knownHostIP.setStatus('current')
if mibBuilder.loadTexts: knownHostIP.setDescription('IP Address of known host')
knownHostKeyEncryptAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 3, 1, 2), FspR7SshHostKeyEncryptAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownHostKeyEncryptAlgorithm.setStatus('current')
if mibBuilder.loadTexts: knownHostKeyEncryptAlgorithm.setDescription('ssh host key encryption alogrithm')
knownHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: knownHostRowStatus.setStatus('current')
if mibBuilder.loadTexts: knownHostRowStatus.setDescription('This object is used to create, or delete a row in this table.')
knownHostFingerprint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 2, 3, 1, 4), FspR7SnmpHexString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: knownHostFingerprint.setStatus('current')
if mibBuilder.loadTexts: knownHostFingerprint.setDescription('Fingerprint of ssh host key')
fspUserSpinLock = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspUserSpinLock.setStatus('current')
if mibBuilder.loadTexts: fspUserSpinLock.setDescription('')
fspUserManagementTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10), )
if mibBuilder.loadTexts: fspUserManagementTable.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementTable.setDescription('')
fspUserManagementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1), ).setIndexNames((0, "FspR7-MIB", "fspUserManagementEngineID"), (0, "FspR7-MIB", "fspUserManagementName"))
if mibBuilder.loadTexts: fspUserManagementEntry.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementEntry.setDescription('')
fspUserManagementEngineID = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: fspUserManagementEngineID.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementEngineID.setDescription('')
fspUserManagementName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 2), SnmpAdminString())
if mibBuilder.loadTexts: fspUserManagementName.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementName.setDescription('The name string for user authentication purposes')
fspUserManagementRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspUserManagementRowStatus.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementRowStatus.setDescription('RowStatus')
fspUserManagementSecurityName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspUserManagementSecurityName.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementSecurityName.setDescription('The name string for user authentication purposes')
fspUserManagementPrivilegeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 5), FspR7SnmpPrivLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspUserManagementPrivilegeLevel.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementPrivilegeLevel.setDescription('')
fspUserManagementSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 6), FspR7SnmpSecuLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspUserManagementSecurityLevel.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementSecurityLevel.setDescription('')
fspUserManagementAuthPrivKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 7), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspUserManagementAuthPrivKey.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementAuthPrivKey.setDescription('A human readable string representing the current or new password for user\n         account.\n        ')
fspUserManagementInternalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 8), FspR7TL1InternalState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspUserManagementInternalState.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementInternalState.setDescription('')
fspUserManagementTl1TimeoutAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 9), FspR7TL1TimoutAvailable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspUserManagementTl1TimeoutAvailable.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementTl1TimeoutAvailable.setDescription('')
fspUserManagementTl1TimeoutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 60), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspUserManagementTl1TimeoutValue.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementTl1TimeoutValue.setDescription('')
fspUserManagementSnmpTimeoutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 3600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspUserManagementSnmpTimeoutValue.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementSnmpTimeoutValue.setDescription('SNMP User Session Timeout Value')
fspUserManagementUdpSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 12), FspR7SessionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementUdpSessionStatus.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementUdpSessionStatus.setDescription('UDP-based User Session Status')
fspUserManagementTcpSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 13), FspR7SessionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementTcpSessionStatus.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementTcpSessionStatus.setDescription('TCP-based User Session Status')
fspUserManagementAuthPrivKeyOld = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 14), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspUserManagementAuthPrivKeyOld.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementAuthPrivKeyOld.setDescription('A human readable string representing the old password for user\n         account. This object should be used only for password change\n         procedure.\n        ')
fspUserManagementAccountFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 10, 1, 15), FspR7AccountFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspUserManagementAccountFlag.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementAccountFlag.setDescription('User account flag used currently to set the forced authentication\n         change request. See the FspR7AccountFlag Textual-Convention.')
fspUserManagementCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 11), )
if mibBuilder.loadTexts: fspUserManagementCapTable.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementCapTable.setDescription('')
fspUserManagementCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 11, 1), ).setIndexNames((0, "FspR7-MIB", "fspUserManagementEngineID"), (0, "FspR7-MIB", "fspUserManagementName"))
if mibBuilder.loadTexts: fspUserManagementCapEntry.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementCapEntry.setDescription('')
fspUserManagementCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 11, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementCapRowStatus.setDescription('RowStatus')
fspUserManagementCapPrivilegeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 11, 1, 2), FspR7SnmpPrivLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementCapPrivilegeLevel.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementCapPrivilegeLevel.setDescription('')
fspUserManagementCapSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 11, 1, 3), FspR7SnmpSecuLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementCapSecurityLevel.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementCapSecurityLevel.setDescription('')
fspUserManagementCapInternalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 11, 1, 4), FspR7TL1InternalStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementCapInternalState.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementCapInternalState.setDescription('')
fspUserManagementCapTimeoutAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 11, 1, 5), FspR7TL1TimoutAvailableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementCapTimeoutAvailable.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementCapTimeoutAvailable.setDescription('')
fspUserManagementDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 12), )
if mibBuilder.loadTexts: fspUserManagementDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementDefaultsTable.setDescription('')
fspUserManagementDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 12, 1), ).setIndexNames((0, "FspR7-MIB", "fspUserManagementEngineID"), (0, "FspR7-MIB", "fspUserManagementName"))
if mibBuilder.loadTexts: fspUserManagementDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementDefaultsEntry.setDescription('')
fspUserManagementDefaultsPrivilegeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 12, 1, 1), FspR7SnmpPrivLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementDefaultsPrivilegeLevel.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementDefaultsPrivilegeLevel.setDescription('')
fspUserManagementDefaultsSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 12, 1, 2), FspR7SnmpSecuLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementDefaultsSecurityLevel.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementDefaultsSecurityLevel.setDescription('')
fspUserManagementDefaultsInternalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 12, 1, 3), FspR7TL1InternalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementDefaultsInternalState.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementDefaultsInternalState.setDescription('')
fspUserManagementDefaultsTimeoutAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 12, 1, 4), FspR7TL1TimoutAvailable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementDefaultsTimeoutAvailable.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementDefaultsTimeoutAvailable.setDescription('')
fspUserManagementDefaultsTimeoutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 60), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementDefaultsTimeoutValue.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementDefaultsTimeoutValue.setDescription('')
fspUserManagementDefaultsSnmpTimeoutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 3, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 3600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: fspUserManagementDefaultsSnmpTimeoutValue.setStatus('current')
if mibBuilder.loadTexts: fspUserManagementDefaultsSnmpTimeoutValue.setDescription('SNMP User Session Timeout Value')
deployProvSyslogTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 1), )
if mibBuilder.loadTexts: deployProvSyslogTable.setStatus('current')
if mibBuilder.loadTexts: deployProvSyslogTable.setDescription('')
deployProvSyslogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 1, 1), ).setIndexNames((0, "FspR7-MIB", "syslogDataIp"))
if mibBuilder.loadTexts: deployProvSyslogEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvSyslogEntry.setDescription('')
deployProvSyslogRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvSyslogRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvSyslogRowStatus.setDescription('RowStatus')
deployProvSyslogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 1, 1, 2), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvSyslogStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvSyslogStatus.setDescription('Syslog')
deployProvSyslogReportsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 1, 1, 3), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvSyslogReportsStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvSyslogReportsStatus.setDescription('Enable or disable sending DB change events')
deployProvSyslogSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 1, 1, 4), SourceIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvSyslogSourceIp.setStatus('deprecated')
if mibBuilder.loadTexts: deployProvSyslogSourceIp.setDescription('IP address which will be used as source address by client applications (i.e. FTP) to facilitate proper backward routing (i.e. server to client direction) in the DCN')
syslogConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 4), )
if mibBuilder.loadTexts: syslogConfigTable.setStatus('current')
if mibBuilder.loadTexts: syslogConfigTable.setDescription('')
syslogConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 4, 1), ).setIndexNames((0, "FspR7-MIB", "syslogDataIp"))
if mibBuilder.loadTexts: syslogConfigEntry.setStatus('current')
if mibBuilder.loadTexts: syslogConfigEntry.setDescription('')
syslogConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 4, 1, 1), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogConfigStatus.setStatus('current')
if mibBuilder.loadTexts: syslogConfigStatus.setDescription('Syslog')
syslogConfigReportsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 4, 1, 2), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogConfigReportsStatus.setStatus('current')
if mibBuilder.loadTexts: syslogConfigReportsStatus.setDescription('Enable or disable sending DB change events')
syslogConfigSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 4, 1, 3), SourceIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogConfigSourceIp.setStatus('deprecated')
if mibBuilder.loadTexts: syslogConfigSourceIp.setDescription('IP address which will be used as source address by client applications (i.e. FTP) to facilitate proper backward routing (i.e. server to client direction) in the DCN')
syslogDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 6), )
if mibBuilder.loadTexts: syslogDataTable.setStatus('current')
if mibBuilder.loadTexts: syslogDataTable.setDescription('')
syslogDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 6, 1), ).setIndexNames((0, "FspR7-MIB", "syslogDataIp"))
if mibBuilder.loadTexts: syslogDataEntry.setStatus('current')
if mibBuilder.loadTexts: syslogDataEntry.setDescription('')
syslogDataIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 6, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: syslogDataIp.setStatus('current')
if mibBuilder.loadTexts: syslogDataIp.setDescription('IP index')
syslogDataIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 4, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogDataIpAddr.setStatus('current')
if mibBuilder.loadTexts: syslogDataIpAddr.setDescription('The IP address of the IP host where Syslog notifications should be sent. Derived from AID.')
nodeChannelTraceTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 5, 2), )
if mibBuilder.loadTexts: nodeChannelTraceTable.setStatus('current')
if mibBuilder.loadTexts: nodeChannelTraceTable.setDescription("The nodeChannelTrace table describes particular connection type between\n         two ports. Connection may be done within a module or between two modules'\n         ports.\n        ")
nodeChannelTraceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 5, 2, 1), ).setIndexNames((0, "FspR7-MIB", "nodeChannelTraceStartAid"), (0, "FspR7-MIB", "nodeChannelTraceChannelNumber"), (0, "FspR7-MIB", "nodeChannelTraceRouteId"), (0, "FspR7-MIB", "nodeChannelTraceRouteElementId"))
if mibBuilder.loadTexts: nodeChannelTraceEntry.setStatus('current')
if mibBuilder.loadTexts: nodeChannelTraceEntry.setDescription('')
nodeChannelTraceStartAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 5, 2, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nodeChannelTraceStartAid.setStatus('current')
if mibBuilder.loadTexts: nodeChannelTraceStartAid.setDescription('Aid')
nodeChannelTraceChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 5, 2, 1, 2), FspR7ChannelNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nodeChannelTraceChannelNumber.setStatus('current')
if mibBuilder.loadTexts: nodeChannelTraceChannelNumber.setDescription('CWDM channels; DWDM frequencies (50 GHz grid according ITU-T')
nodeChannelTraceRouteId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 5, 2, 1, 3), FspR7NCTraceId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nodeChannelTraceRouteId.setStatus('current')
if mibBuilder.loadTexts: nodeChannelTraceRouteId.setDescription('Node Channel Trace ID - It associates each direction of a channel trace through a node.')
nodeChannelTraceRouteElementId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 5, 2, 1, 4), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nodeChannelTraceRouteElementId.setStatus('current')
if mibBuilder.loadTexts: nodeChannelTraceRouteElementId.setDescription('')
nodeChannelTraceFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 5, 2, 1, 5), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeChannelTraceFromAid.setStatus('current')
if mibBuilder.loadTexts: nodeChannelTraceFromAid.setDescription('FROM-end of equipment connection (jumper). FROM direction is significant only for 1WAY connections.')
nodeChannelTraceToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 5, 2, 1, 6), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeChannelTraceToAid.setStatus('current')
if mibBuilder.loadTexts: nodeChannelTraceToAid.setDescription('TO-end of equipment connection (jumper). TO direction is signaificant only for 1WAY')
nodeChannelTraceRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 5, 2, 1, 7), FspR7NCTRouteType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeChannelTraceRouteType.setStatus('current')
if mibBuilder.loadTexts: nodeChannelTraceRouteType.setDescription('FspR7NCTRouteType Textual-Convention indicates the connection type between two ports.\n         If a connection between the two ports is within a module (i.e. Client to Network port),\n         the Route-Type is either provisioned(6) of fixed ( equipment(5) ). If the connection\n         is between two modules ports, then the Route-Type is fiber(2), cable(3) or backPlane(4).\n        ')
nodeChannelTraceChannelRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 5, 2, 1, 8), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeChannelTraceChannelRx.setStatus('current')
if mibBuilder.loadTexts: nodeChannelTraceChannelRx.setDescription('Channel Number for the Receive Interface')
nodeChannelTraceChannelTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 5, 2, 1, 9), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeChannelTraceChannelTx.setStatus('current')
if mibBuilder.loadTexts: nodeChannelTraceChannelTx.setDescription('Channel Number for the Transmit Interface')
dcnOspfAreaTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 1), )
if mibBuilder.loadTexts: dcnOspfAreaTable.setStatus('current')
if mibBuilder.loadTexts: dcnOspfAreaTable.setDescription('This table relates to DCN functionality of defining OSPF Area entities\n         which may be marked as Stub or Non-Stub.')
dcnOspfAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 1, 1), ).setIndexNames((0, "FspR7-MIB", "dcnOspfAreaId"), (0, "FspR7-MIB", "dcnOspfAreaType"))
if mibBuilder.loadTexts: dcnOspfAreaEntry.setStatus('current')
if mibBuilder.loadTexts: dcnOspfAreaEntry.setDescription('Table row represents an OSPF Area entity.')
dcnOspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 1, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dcnOspfAreaId.setStatus('current')
if mibBuilder.loadTexts: dcnOspfAreaId.setDescription('OSPF Area ID for IP Interface')
dcnOspfAreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 1, 1, 2), FspR7OspfAreaType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dcnOspfAreaType.setStatus('current')
if mibBuilder.loadTexts: dcnOspfAreaType.setDescription('Area Type')
dcnOspfAreaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcnOspfAreaRowStatus.setStatus('current')
if mibBuilder.loadTexts: dcnOspfAreaRowStatus.setDescription('RowStatus')
dcnOspfAreaIfListSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnOspfAreaIfListSize.setStatus('current')
if mibBuilder.loadTexts: dcnOspfAreaIfListSize.setDescription('A number of attached interfaces.')
dcnOspfAreaStubDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcnOspfAreaStubDefaultMetric.setStatus('current')
if mibBuilder.loadTexts: dcnOspfAreaStubDefaultMetric.setDescription('Stub Default Route Cost')
dcnOspfAreaCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 2), )
if mibBuilder.loadTexts: dcnOspfAreaCapTable.setStatus('current')
if mibBuilder.loadTexts: dcnOspfAreaCapTable.setDescription('This table contains OSPF Area Entity creation/modification capabilities.')
dcnOspfAreaCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 2, 1), ).setIndexNames((0, "FspR7-MIB", "dcnOspfAreaId"), (0, "FspR7-MIB", "dcnOspfAreaType"))
if mibBuilder.loadTexts: dcnOspfAreaCapEntry.setStatus('current')
if mibBuilder.loadTexts: dcnOspfAreaCapEntry.setDescription('Table row represents creation/modification capabilities for particular\n         OSPF Area entity.')
dcnOspfAreaCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 2, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnOspfAreaCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: dcnOspfAreaCapRowStatus.setDescription('RowStatus')
dcnOspfAreaCapStubDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 2, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnOspfAreaCapStubDefaultMetric.setStatus('current')
if mibBuilder.loadTexts: dcnOspfAreaCapStubDefaultMetric.setDescription('Stub Default Route Cost')
dcnOspfAreaInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 3), )
if mibBuilder.loadTexts: dcnOspfAreaInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: dcnOspfAreaInterfaceTable.setDescription('This table contains OSPF Area Entity creation/modification capabilities.')
dcnOspfAreaInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 3, 1), ).setIndexNames((0, "FspR7-MIB", "dcnOspfAreaId"), (0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: dcnOspfAreaInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: dcnOspfAreaInterfaceEntry.setDescription('Table row represents creation/modification capabilities for particular\n         OSPF Area entity.')
dcnOspfAreaInterfaceIndexAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 2, 6, 3, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnOspfAreaInterfaceIndexAid.setStatus('current')
if mibBuilder.loadTexts: dcnOspfAreaInterfaceIndexAid.setDescription('Name')
conditionSeverityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1, 1), )
if mibBuilder.loadTexts: conditionSeverityTable.setStatus('current')
if mibBuilder.loadTexts: conditionSeverityTable.setDescription('This table contains a severity value for each defined standing condition reported by an entity in the NE.')
conditionSeverityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "conditionSeverityType"))
if mibBuilder.loadTexts: conditionSeverityEntry.setStatus('current')
if mibBuilder.loadTexts: conditionSeverityEntry.setDescription('Each entry in the table represents the severity assigned to a condition.')
conditionSeverityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1, 1, 1, 1), FspR7StandingConditionTypes())
if mibBuilder.loadTexts: conditionSeverityType.setStatus('current')
if mibBuilder.loadTexts: conditionSeverityType.setDescription('This object identifies the type of alarm.')
conditionSeverityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1, 1, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: conditionSeverityValue.setStatus('current')
if mibBuilder.loadTexts: conditionSeverityValue.setDescription('This object identifies the severity assigned to this alarm.')
ntpSysConditionSeverityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1, 2), )
if mibBuilder.loadTexts: ntpSysConditionSeverityTable.setStatus('current')
if mibBuilder.loadTexts: ntpSysConditionSeverityTable.setDescription('This table contains a severity value for each defined alarm (standing condition) present on NTP System Entity.')
ntpSysConditionSeverityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1, 2, 1), ).setIndexNames((0, "FspR7-MIB", "ntpSysConditionSeverityType"))
if mibBuilder.loadTexts: ntpSysConditionSeverityEntry.setStatus('current')
if mibBuilder.loadTexts: ntpSysConditionSeverityEntry.setDescription('Each entry in the table represents the severity assigned to a condition.')
ntpSysConditionSeverityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1, 2, 1, 1), FspR7StandingConditionTypes())
if mibBuilder.loadTexts: ntpSysConditionSeverityType.setStatus('current')
if mibBuilder.loadTexts: ntpSysConditionSeverityType.setDescription('This object identifies the type of alarm.')
ntpSysConditionSeverityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1, 2, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpSysConditionSeverityValue.setStatus('current')
if mibBuilder.loadTexts: ntpSysConditionSeverityValue.setDescription('This object identifies the severity assigned to this alarm.')
ntpSrvConditionSeverityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1, 3), )
if mibBuilder.loadTexts: ntpSrvConditionSeverityTable.setStatus('current')
if mibBuilder.loadTexts: ntpSrvConditionSeverityTable.setDescription('This table contains a severity value for each defined alarm (standing condition) present on NTP Server Entity.')
ntpSrvConditionSeverityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1, 3, 1), ).setIndexNames((0, "FspR7-MIB", "ntpServerIp"), (0, "FspR7-MIB", "ntpSysConditionSeverityType"))
if mibBuilder.loadTexts: ntpSrvConditionSeverityEntry.setStatus('current')
if mibBuilder.loadTexts: ntpSrvConditionSeverityEntry.setDescription('Each entry in the table represents the severity assigned to a condition.')
ntpSrvConditionSeverityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1, 3, 1, 1), FspR7StandingConditionTypes())
if mibBuilder.loadTexts: ntpSrvConditionSeverityType.setStatus('current')
if mibBuilder.loadTexts: ntpSrvConditionSeverityType.setDescription('This object identifies the type of alarm.')
ntpSrvConditionSeverityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 1, 3, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpSrvConditionSeverityValue.setStatus('current')
if mibBuilder.loadTexts: ntpSrvConditionSeverityValue.setDescription('This object identifies the severity assigned to this alarm.')
currentConditionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 1), )
if mibBuilder.loadTexts: currentConditionTable.setStatus('current')
if mibBuilder.loadTexts: currentConditionTable.setDescription('')
currentConditionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "currentConditionType"))
if mibBuilder.loadTexts: currentConditionEntry.setStatus('current')
if mibBuilder.loadTexts: currentConditionEntry.setDescription('')
currentConditionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 1, 1, 1), FspR7StandingConditionTypes())
if mibBuilder.loadTexts: currentConditionType.setStatus('current')
if mibBuilder.loadTexts: currentConditionType.setDescription('List of all alarms.')
currentConditionSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 1, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentConditionSeverity.setStatus('current')
if mibBuilder.loadTexts: currentConditionSeverity.setDescription('Current alarm severity.')
currentConditionAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 1, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentConditionAffect.setStatus('current')
if mibBuilder.loadTexts: currentConditionAffect.setDescription('This object indicates the service impairment affect of the alarm.')
currentConditionTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentConditionTimeStamp.setStatus('current')
if mibBuilder.loadTexts: currentConditionTimeStamp.setDescription('Timestamp.')
ntpSysCurrentConditionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 2), )
if mibBuilder.loadTexts: ntpSysCurrentConditionTable.setStatus('current')
if mibBuilder.loadTexts: ntpSysCurrentConditionTable.setDescription('')
ntpSysCurrentConditionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 2, 1), ).setIndexNames((0, "FspR7-MIB", "ntpSysConditionSeverityType"))
if mibBuilder.loadTexts: ntpSysCurrentConditionEntry.setStatus('current')
if mibBuilder.loadTexts: ntpSysCurrentConditionEntry.setDescription('')
ntpSysCurrentConditionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 2, 1, 1), FspR7StandingConditionTypes())
if mibBuilder.loadTexts: ntpSysCurrentConditionType.setStatus('current')
if mibBuilder.loadTexts: ntpSysCurrentConditionType.setDescription('List of all alarms.')
ntpSysCurrentConditionSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 2, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSysCurrentConditionSeverity.setStatus('current')
if mibBuilder.loadTexts: ntpSysCurrentConditionSeverity.setDescription('Current alarm severity.')
ntpSysCurrentConditionAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 2, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSysCurrentConditionAffect.setStatus('current')
if mibBuilder.loadTexts: ntpSysCurrentConditionAffect.setDescription('This object indicates the service impairment affect of the alarm.')
ntpSysCurrentConditionTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSysCurrentConditionTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ntpSysCurrentConditionTimeStamp.setDescription('Timestamp.')
ntpSrvCurrentConditionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 3), )
if mibBuilder.loadTexts: ntpSrvCurrentConditionTable.setStatus('current')
if mibBuilder.loadTexts: ntpSrvCurrentConditionTable.setDescription('')
ntpSrvCurrentConditionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 3, 1), ).setIndexNames((0, "FspR7-MIB", "ntpServerIp"), (0, "FspR7-MIB", "ntpSrvConditionSeverityType"))
if mibBuilder.loadTexts: ntpSrvCurrentConditionEntry.setStatus('current')
if mibBuilder.loadTexts: ntpSrvCurrentConditionEntry.setDescription('')
ntpSrvCurrentConditionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 3, 1, 1), FspR7StandingConditionTypes())
if mibBuilder.loadTexts: ntpSrvCurrentConditionType.setStatus('current')
if mibBuilder.loadTexts: ntpSrvCurrentConditionType.setDescription('List of all alarms.')
ntpSrvCurrentConditionSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 3, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSrvCurrentConditionSeverity.setStatus('current')
if mibBuilder.loadTexts: ntpSrvCurrentConditionSeverity.setDescription('Current alarm severity.')
ntpSrvCurrentConditionAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 3, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSrvCurrentConditionAffect.setStatus('current')
if mibBuilder.loadTexts: ntpSrvCurrentConditionAffect.setDescription('This object indicates the service impairment affect of the alarm.')
ntpSrvCurrentConditionTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 2, 3, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSrvCurrentConditionTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ntpSrvCurrentConditionTimeStamp.setDescription('Timestamp.')
alarmProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 3, 1), )
if mibBuilder.loadTexts: alarmProfileTable.setStatus('current')
if mibBuilder.loadTexts: alarmProfileTable.setDescription('')
alarmProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 3, 1, 1), ).setIndexNames((0, "FspR7-MIB", "alarmProfileAidType"), (0, "FspR7-MIB", "conditionSeverityType"))
if mibBuilder.loadTexts: alarmProfileEntry.setStatus('current')
if mibBuilder.loadTexts: alarmProfileEntry.setDescription('')
alarmProfileAidType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 3, 1, 1, 1), FspR7AidType())
if mibBuilder.loadTexts: alarmProfileAidType.setStatus('current')
if mibBuilder.loadTexts: alarmProfileAidType.setDescription('')
alarmProfileValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 3, 1, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmProfileValue.setStatus('current')
if mibBuilder.loadTexts: alarmProfileValue.setDescription('This object identifies the severity assigned to this alarm.')
alarmProfileDefaultValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 1, 3, 1, 1, 3), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmProfileDefaultValue.setStatus('current')
if mibBuilder.loadTexts: alarmProfileDefaultValue.setDescription('This object identifies the default severity of this alarm.')
chassisCreation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 2)).setObjects(("ADVA-MIB", "entityClass"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: chassisCreation.setStatus('current')
if mibBuilder.loadTexts: chassisCreation.setDescription('This trap is sent every time a chassis is created. N containers\n         or other sub-entities in the chassis are reported created by this trap,\n         the NMS must read these data. The trap is sent when all the sub-entities\n         are present in the entity just created.\n         Note: not sent for insertion of NCU chassis, but this is instead\n         represented by a coldStart trap.')
chassisDeletion = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3)).setObjects(("ADVA-MIB", "entityClass"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: chassisDeletion.setStatus('current')
if mibBuilder.loadTexts: chassisDeletion.setDescription('This trap is sent every time a chassis is deleted. The\n         sub-entities (containers, modules, etc.) are not reported deleted.\n         Note: cannot be reported when the NCU chassis is removed or fails.\n        ')
entityCreation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 4)).setObjects(("ADVA-MIB", "entityContainedIn"), ("ADVA-MIB", "entityClass"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: entityCreation.setStatus('current')
if mibBuilder.loadTexts: entityCreation.setDescription('This trap is sent every time an entity is created. No containers\n         or other sub-entities in the chassis are reported created by this trap,\n         the NMS must read these data.')
entityDeletion = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 5)).setObjects(("ADVA-MIB", "entityClass"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: entityDeletion.setStatus('current')
if mibBuilder.loadTexts: entityDeletion.setDescription('This trap is sent every time an entity is deleted. The\n         sub-entities (containers, modules, etc.) are not reported deleted.\n        ')
neTrapsinkObjectCreation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 6)).setObjects(("ADVA-MIB", "neTrapsinkAddress"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: neTrapsinkObjectCreation.setStatus('current')
if mibBuilder.loadTexts: neTrapsinkObjectCreation.setDescription('This trap is sent every time a trapsink is created.')
neTrapsinkObjectDeletion = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 7)).setObjects(("ADVA-MIB", "neTrapsinkAddress"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: neTrapsinkObjectDeletion.setStatus('current')
if mibBuilder.loadTexts: neTrapsinkObjectDeletion.setDescription('This trap is sent every time a trapsink is deleted..')
equipmentInserted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 8)).setObjects(("ADVA-MIB", "entityClass"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: equipmentInserted.setStatus('current')
if mibBuilder.loadTexts: equipmentInserted.setDescription('This trap is sent every time an equipment is inserted.')
equipmentRemoved = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 9)).setObjects(("ADVA-MIB", "entityClass"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: equipmentRemoved.setStatus('current')
if mibBuilder.loadTexts: equipmentRemoved.setDescription('This trap is sent every time an equipment is removed.')
crossConnectionCreation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 10)).setObjects(("FspR7-MIB", "crsConnDeployProvConn"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: crossConnectionCreation.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCreation.setDescription('This trap is sent every time an cross connection is created.')
crossConnectionDeletion = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 11)).setObjects(("FspR7-MIB", "crsConnDeployProvFrom"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: crossConnectionDeletion.setStatus('current')
if mibBuilder.loadTexts: crossConnectionDeletion.setDescription('This trap is sent every time an cross connection is deleted.')
neStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 20)).setObjects(("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: neStateChange.setStatus('current')
if mibBuilder.loadTexts: neStateChange.setDescription('This trap is sent when an network element state is changed.\n         Only one state is present in each trap. The first varbind\n         will contain one of the following scalar entries:\n         neSwUpgradeState (ADVA Common MIB).')
entityStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 21)).setObjects(("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: entityStateChange.setStatus('current')
if mibBuilder.loadTexts: entityStateChange.setDescription('This trap is sent when an entity state is changed.\n         Only one state is present in each trap. The first varbind\n         will contain one of the following table entries:\n         entityStateAdmin,\n         entityStateOper,\n         entitySecondaryStates.')
neSysTypeChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 22)).setObjects(("FspR7-MIB", "neSysType"), ("ADVA-MIB", "neEventLogTimeStamp"))
if mibBuilder.loadTexts: neSysTypeChanged.setStatus('current')
if mibBuilder.loadTexts: neSysTypeChanged.setDescription('This trap is sent when changes are detected in the nodeTrafficConfig..')
neAttributeValueChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 30)).setObjects(("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: neAttributeValueChange.setStatus('current')
if mibBuilder.loadTexts: neAttributeValueChange.setDescription('This trap is sent when an attribute related to the\n         Network Element is changed.\n         One attribute is present in each trap. The first varbind\n         contains one of the following scalar or table entries:\n         sysLocation (RFC 1213)\n         sysContact (RFC 1213)\n         \n         neTrapsinkTable (ADVAMIB):\n         neTrapsinkCommunity\n         neSwUpgradeRequest (ADVAMIB)\n         neSwUpgradeServerAddress (ADVAMIB)\n         neSwUpgradeServerLogin (ADVAMIB)\n         neSwUpgradeServerPasswd (ADVAMIB)\n         neSwUpgradeServerDirectory (ADVAMIB)\n         neSwUpgradeFileName (ADVAMIB).')
facilityAttributeValueChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 31)).setObjects(("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: facilityAttributeValueChange.setStatus('current')
if mibBuilder.loadTexts: facilityAttributeValueChange.setDescription('This trap is sent when an attribute related to a facility is changed.\n         One attribute is present in each trap. The first varbind\n         contains one of the following table entries:\n         gfpVchConfigTable,\n         gfpVchConfigCir,')
loopbackChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 32)).setObjects(("ADVA-MIB", "entityIndex"), ("FspR7-MIB", "interfaceConfigLoopConfig"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: loopbackChange.setStatus('current')
if mibBuilder.loadTexts: loopbackChange.setDescription('This trap is sent when loopback is changed.')
snmpAgentStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 33)).setObjects(("ADVA-MIB", "snmpProxyEntrySingleTargetOutNodeAgentStatus"), ("ADVA-MIB", "neEventLogTimeStamp"))
if mibBuilder.loadTexts: snmpAgentStateChanged.setStatus('current')
if mibBuilder.loadTexts: snmpAgentStateChanged.setDescription('This trap is send when remote agent is unavailable.')
snmpAgentSynchronizationStageChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 34)).setObjects(("ADVA-MIB", "snmpProxyServerSynchroStage"), ("ADVA-MIB", "neEventLogTimeStamp"))
if mibBuilder.loadTexts: snmpAgentSynchronizationStageChanged.setStatus('current')
if mibBuilder.loadTexts: snmpAgentSynchronizationStageChanged.setDescription('This trap is send when remote agent is unavailable.')
coldStartAgentReconfigured = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 35)).setObjects(("ADVA-MIB", "neEventLogTimeStamp"))
if mibBuilder.loadTexts: coldStartAgentReconfigured.setStatus('current')
if mibBuilder.loadTexts: coldStartAgentReconfigured.setDescription('This trap is send after a cold start to inditcate that reconfiguration\n         required SNMP agent to be restart. Pair of traps coldStart and\n         coldStartAgentReconfigured indicates that a reconfiguration occured.\n        ')
dcnOspfAreaCreation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 36)).setObjects(("FspR7-MIB", "dcnOspfAreaId"), ("FspR7-MIB", "dcnOspfAreaType"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: dcnOspfAreaCreation.setStatus('current')
if mibBuilder.loadTexts: dcnOspfAreaCreation.setDescription('This trap indicates creation of an OSPF Area entity.')
dcnOspfAreaDeletion = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 37)).setObjects(("FspR7-MIB", "dcnOspfAreaId"), ("FspR7-MIB", "dcnOspfAreaType"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: dcnOspfAreaDeletion.setStatus('current')
if mibBuilder.loadTexts: dcnOspfAreaDeletion.setDescription('This trap indicates deletion of an OSPF Area entity.')
dcnOspfAreaPropertiesChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 38)).setObjects(("FspR7-MIB", "dcnOspfAreaId"), ("FspR7-MIB", "dcnOspfAreaType"), ("FspR7-MIB", "dcnOspfAreaStubDefaultMetric"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: dcnOspfAreaPropertiesChange.setStatus('current')
if mibBuilder.loadTexts: dcnOspfAreaPropertiesChange.setDescription('This trap indicates modification of some OSPF Area entity properties.')
timeNtpAttributeValueChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 39))
if mibBuilder.loadTexts: timeNtpAttributeValueChange.setStatus('current')
if mibBuilder.loadTexts: timeNtpAttributeValueChange.setDescription('Some attributes of TIME entity changed. Modified attributes are attached as varbinds.')
ntpSrvAttributeValueChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 40))
if mibBuilder.loadTexts: ntpSrvAttributeValueChange.setStatus('current')
if mibBuilder.loadTexts: ntpSrvAttributeValueChange.setDescription('Some attributes of NTP Server entity changed. Modified attributes are attached as varbinds.')
ntpSrvObjectChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 41))
if mibBuilder.loadTexts: ntpSrvObjectChange.setStatus('current')
if mibBuilder.loadTexts: ntpSrvObjectChange.setDescription('NTP server state has been changed.')
ntpSrvCreation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 42))
if mibBuilder.loadTexts: ntpSrvCreation.setStatus('current')
if mibBuilder.loadTexts: ntpSrvCreation.setDescription('NTP server has been created.')
ntpSrvDeletion = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 43))
if mibBuilder.loadTexts: ntpSrvDeletion.setStatus('current')
if mibBuilder.loadTexts: ntpSrvDeletion.setDescription('NTP server has been removed.')
knownHostCreation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 44)).setObjects(("FspR7-MIB", "knownHostIP"), ("FspR7-MIB", "knownHostKeyEncryptAlgorithm"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: knownHostCreation.setStatus('current')
if mibBuilder.loadTexts: knownHostCreation.setDescription('This trap indicates creation of an entry in knownHostTable.')
knownHostDeletion = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 45)).setObjects(("FspR7-MIB", "knownHostIP"), ("FspR7-MIB", "knownHostKeyEncryptAlgorithm"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: knownHostDeletion.setStatus('current')
if mibBuilder.loadTexts: knownHostDeletion.setDescription('This trap indicates deletion of an entry in knownHostTable.')
entityObjectChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 100)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: entityObjectChange.setStatus('current')
if mibBuilder.loadTexts: entityObjectChange.setDescription('This trap is sent some object is changed.')
crsConnObjectChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 101)).setObjects(("FspR7-MIB", "crsConnDeployProvFrom"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: crsConnObjectChange.setStatus('current')
if mibBuilder.loadTexts: crsConnObjectChange.setDescription('This trap is sent some cross connect object is changed.')
authenticationNotification = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 102)).setObjects(("FspR7-MIB", "authTrapSrcIp"), ("FspR7-MIB", "authTrapLctIp"), ("FspR7-MIB", "authTrapStatus"), ("FspR7-MIB", "authTrapSessionId"), ("FspR7-MIB", "authTrapProtocol"), ("FspR7-MIB", "authTrapPort"), ("FspR7-MIB", "authTrapUserName"), ("FspR7-MIB", "authTrapRadUserName"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: authenticationNotification.setStatus('current')
if mibBuilder.loadTexts: authenticationNotification.setDescription('This trap is sent when authentication attempt happens.')
authenticationNotificationSummary = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 103)).setObjects(("ADVA-MIB", "neEventLogTimeStamp"), ("FspR7-MIB", "authTrapSuccessfulAuthCount"), ("FspR7-MIB", "authTrapUnsuccessfulAuthCount"))
if mibBuilder.loadTexts: authenticationNotificationSummary.setStatus('current')
if mibBuilder.loadTexts: authenticationNotificationSummary.setDescription('This trap is sent when authentication attempt happens more often\n         than 5 times within 10 seconds.\n        ')
wdmTunnelResultNotification = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 110)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"), ("FspR7-MIB", "tunnelWdmDataErrorCodeMajor"), ("FspR7-MIB", "tunnelWdmDataErrorCodeMinor"), ("FspR7-MIB", "tunnelWdmDataErrorCategory"), ("FspR7-MIB", "tunnelWdmDataErrorIp"), ("FspR7-MIB", "tunnelWdmDataErrorTid"), ("FspR7-MIB", "tunnelWdmDataSpecificErrorMessage"))
if mibBuilder.loadTexts: wdmTunnelResultNotification.setStatus('current')
if mibBuilder.loadTexts: wdmTunnelResultNotification.setDescription('Trap for the result for WDM Tunnel creation or modification.')
ethTunnelResultNotification = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 111)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"), ("FspR7-MIB", "tunnelEthDataErrorCodeMajor"), ("FspR7-MIB", "tunnelEthDataErrorCodeMinor"), ("FspR7-MIB", "tunnelEthDataErrorCategory"), ("FspR7-MIB", "tunnelEthDataErrorIp"), ("FspR7-MIB", "tunnelEthDataErrorTid"), ("FspR7-MIB", "tunnelEthDataSpecificErrorMessage"))
if mibBuilder.loadTexts: ethTunnelResultNotification.setStatus('current')
if mibBuilder.loadTexts: ethTunnelResultNotification.setDescription('Trap for the result for ETH Tunnel creation or modification.')
alarmInputTIF = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1215)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("FspR7-MIB", "tifiConfigTifAlarmType"), ("FspR7-MIB", "tifiConfigTifAlarmMessage"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmInputTIF.setStatus('current')
if mibBuilder.loadTexts: alarmInputTIF.setDescription('Telemetry interface alarm.')
alarmThirdPartyPlug = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1001)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThirdPartyPlug.setStatus('current')
if mibBuilder.loadTexts: alarmThirdPartyPlug.setDescription('Equipment Accepted by Customer with Voided Warranty')
alarmFacilityLoopback = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1002)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFacilityLoopback.setStatus('current')
if mibBuilder.loadTexts: alarmFacilityLoopback.setDescription('External(Line) Loopback on Interface')
alarmTerminalLoopback = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1003)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTerminalLoopback.setStatus('current')
if mibBuilder.loadTexts: alarmTerminalLoopback.setDescription('Inward Loopback on Interface')
alarmFacilityForcedOn = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1004)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFacilityForcedOn.setStatus('current')
if mibBuilder.loadTexts: alarmFacilityForcedOn.setDescription('Laser or Switch forced ON')
alarmOosDisabled = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1005)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOosDisabled.setStatus('current')
if mibBuilder.loadTexts: alarmOosDisabled.setDescription('Non-Specific Disablement of Management Access')
alarmReceiverDisabled = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1006)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmReceiverDisabled.setStatus('current')
if mibBuilder.loadTexts: alarmReceiverDisabled.setDescription('Disablement of Management Access with Receiver OFF')
alarmTransmitterDisabledOff = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1007)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTransmitterDisabledOff.setStatus('current')
if mibBuilder.loadTexts: alarmTransmitterDisabledOff.setDescription('Disablement of Management Access with Transmitter OFF')
alarmTransmittedDisabledIdle = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1008)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTransmittedDisabledIdle.setStatus('current')
if mibBuilder.loadTexts: alarmTransmittedDisabledIdle.setDescription('Disablement of Management Access with Transmitter IDLE')
alarmTransmitterDisabledAis = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1009)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTransmitterDisabledAis.setStatus('current')
if mibBuilder.loadTexts: alarmTransmitterDisabledAis.setDescription('Disablement of Management Access with Transmitter Sending Maintenance Signal AIS')
alarmTransmitterDisabledEpc = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1010)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTransmitterDisabledEpc.setStatus('current')
if mibBuilder.loadTexts: alarmTransmitterDisabledEpc.setDescription('Disablement of Management Access with Transmitter Sending Maintenance Signal EPC')
alarmOosManagement = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1011)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOosManagement.setStatus('current')
if mibBuilder.loadTexts: alarmOosManagement.setDescription('Alarms are logged but not notified, service affecting changes are permitted')
alarmOosMaintenance = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1012)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOosMaintenance.setStatus('current')
if mibBuilder.loadTexts: alarmOosMaintenance.setDescription('Alarms are logged but not notified, service affecting changes and operations are permitted')
alarmOosAins = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1013)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOosAins.setStatus('current')
if mibBuilder.loadTexts: alarmOosAins.setDescription('Automatic In Service')
alarmDcnCommunicationFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1014)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmDcnCommunicationFail.setStatus('current')
if mibBuilder.loadTexts: alarmDcnCommunicationFail.setDescription('The connection to the shelf is dysfunctional or the connection to the module within the shelf is dysfunctional')
alarmRemoved = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1015)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmRemoved.setStatus('current')
if mibBuilder.loadTexts: alarmRemoved.setDescription('The equipment has been removed / unplugged / disconnected.\n         This condition has been determined to be more probable than that below,\n         which is also supersedes.')
alarmMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1016)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmMismatch.setDescription('Non-Specific Mismatch. Equipment Not Match Provisioned Hardware')
alarmEquipmentNotAccepted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1017)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEquipmentNotAccepted.setStatus('current')
if mibBuilder.loadTexts: alarmEquipmentNotAccepted.setDescription('The Plug cannot support any of the services provisionable on this card OR the Plug is unrecognizable')
alarmFacilityDataRateNotSupported = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1018)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFacilityDataRateNotSupported.setStatus('current')
if mibBuilder.loadTexts: alarmFacilityDataRateNotSupported.setDescription('The Plug inserted cannot support the actual service provisioned on this card: this is superseded by the above')
alarmEquipmentNotSupportedByPhysicalLayer = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1019)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEquipmentNotSupportedByPhysicalLayer.setStatus('current')
if mibBuilder.loadTexts: alarmEquipmentNotSupportedByPhysicalLayer.setDescription('Equipment not Support Configured Physical Layer')
alarmEquipmentNotApproved = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1020)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEquipmentNotApproved.setStatus('current')
if mibBuilder.loadTexts: alarmEquipmentNotApproved.setDescription('The Plug is recognizable to the extent that service support can\n         be determined, but is not approved: this is susperseded by SGEO-RATE')
alarmEquipmentMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1021)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEquipmentMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmEquipmentMismatch.setDescription('The Plug is approved but does not match the specific Plug provisioned: this is superseded by MEA-APPROVE')
alarmFuseAlarm1 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1022)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFuseAlarm1.setStatus('deprecated')
if mibBuilder.loadTexts: alarmFuseAlarm1.setDescription('')
alarmFuseAlarm2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1023)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFuseAlarm2.setStatus('deprecated')
if mibBuilder.loadTexts: alarmFuseAlarm2.setDescription('')
alarmFanAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1024)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFanAlarm.setStatus('deprecated')
if mibBuilder.loadTexts: alarmFanAlarm.setDescription('A FAN has failed')
alarmFanUnitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1025)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFanUnitAlarm.setStatus('deprecated')
if mibBuilder.loadTexts: alarmFanUnitAlarm.setDescription('More than one FAN has failed within the FANUNIT')
alarmPowerMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1026)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPowerMissing.setStatus('current')
if mibBuilder.loadTexts: alarmPowerMissing.setDescription('Power Unit Missing')
alarmPowerFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1027)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPowerFailure.setStatus('deprecated')
if mibBuilder.loadTexts: alarmPowerFailure.setDescription('Power Unit Failure')
alarmVoltageTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1028)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmVoltageTooLow.setStatus('deprecated')
if mibBuilder.loadTexts: alarmVoltageTooLow.setDescription('Voltage Too Low')
alarmVoltageTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1029)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmVoltageTooHigh.setStatus('deprecated')
if mibBuilder.loadTexts: alarmVoltageTooHigh.setDescription('Voltage Too High')
alarmTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1030)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTemperatureTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmTemperatureTooLow.setDescription('Temperature Too Low')
alarmTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1031)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTemperatureTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmTemperatureTooHigh.setDescription('Temperature Too High')
alarmReceiverFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1032)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmReceiverFailure.setStatus('deprecated')
if mibBuilder.loadTexts: alarmReceiverFailure.setDescription('Rx Failure')
alarmOpticalInputPowerReceiverFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1033)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOpticalInputPowerReceiverFailure.setStatus('deprecated')
if mibBuilder.loadTexts: alarmOpticalInputPowerReceiverFailure.setDescription('???')
alarmLossOfSignal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1034)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfSignal.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfSignal.setDescription('Loss Of Signal')
alarmIdleSignalReceived = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1035)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmIdleSignalReceived.setStatus('deprecated')
if mibBuilder.loadTexts: alarmIdleSignalReceived.setDescription('')
alarmLossOfLinkPulse = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1036)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfLinkPulse.setStatus('deprecated')
if mibBuilder.loadTexts: alarmLossOfLinkPulse.setDescription('Loss Of Link Pulse')
alarmLossOfReceiverClockRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1037)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfReceiverClockRecovery.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfReceiverClockRecovery.setDescription('Rx Clock Sync Failure')
alarmElasticStoreOverflowReceiver = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1038)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmElasticStoreOverflowReceiver.setStatus('deprecated')
if mibBuilder.loadTexts: alarmElasticStoreOverflowReceiver.setDescription('Rx Elast. Store Overflow')
alarmLossOfTransmitterClockRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1039)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfTransmitterClockRecovery.setStatus('deprecated')
if mibBuilder.loadTexts: alarmLossOfTransmitterClockRecovery.setDescription('Tx Clock Sync Failure')
alarmLaserFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1040)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLaserFailure.setStatus('current')
if mibBuilder.loadTexts: alarmLaserFailure.setDescription('Optical Power Transmitted Failure: Laser Failure')
alarmSwitchFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1041)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSwitchFailed.setStatus('current')
if mibBuilder.loadTexts: alarmSwitchFailed.setDescription('Failure to Respond to Switch/Bridge Request within 50 ms')
alarmElasticStoreOverflowTransmitter = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1042)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmElasticStoreOverflowTransmitter.setStatus('deprecated')
if mibBuilder.loadTexts: alarmElasticStoreOverflowTransmitter.setDescription('Tx Elast. Store Overflow')
alarmAutoShutdownLaserOffDueToErrFwd = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1043)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownLaserOffDueToErrFwd.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownLaserOffDueToErrFwd.setDescription('Forward ALS')
alarmAutoShutdown = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1044)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdown.setStatus('deprecated')
if mibBuilder.loadTexts: alarmAutoShutdown.setDescription('Automatic Shutdown with Transmitter sending Connection Detection Pulses')
alarmAutoShutdownAls = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1045)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownAls.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownAls.setDescription('Auto Shutdown (ALS)')
alarmAutoShutdownSendingIdle = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1046)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownSendingIdle.setStatus('deprecated')
if mibBuilder.loadTexts: alarmAutoShutdownSendingIdle.setDescription('Auto Shutdown (IDLE)')
alarmThermoElectricCoolerEndOfLife = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1047)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThermoElectricCoolerEndOfLife.setStatus('current')
if mibBuilder.loadTexts: alarmThermoElectricCoolerEndOfLife.setDescription('TEC End of Life')
alarmOpticalInputPwrReceivedTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1048)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOpticalInputPwrReceivedTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmOpticalInputPwrReceivedTooLow.setDescription('Optical Power Rx too Low')
alarmOpticalInputPwrReceivedTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1049)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOpticalInputPwrReceivedTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmOpticalInputPwrReceivedTooHigh.setDescription('Optical Power Rx too High')
alarmLaserTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1050)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLaserTemperatureTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmLaserTemperatureTooHigh.setDescription('TCA - Fixed high threshold of Laser Temperature has been crossed.')
alarmLaserTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1051)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLaserTemperatureTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmLaserTemperatureTooLow.setDescription('TCA - Fixed low threshold of Laser Temperature has been crossed.')
alarmOpticalOutputPowerTransmittedTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1052)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOpticalOutputPowerTransmittedTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmOpticalOutputPowerTransmittedTooLow.setDescription('TCA - Optical Power Transmitted (output) too low')
alarmOpticalOutputPowerTransmittedTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1053)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOpticalOutputPowerTransmittedTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmOpticalOutputPowerTransmittedTooHigh.setDescription('TCA - Optical Power Transmitted (output) too high')
alarmLaserBiasCurrentNormalizedtooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1054)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLaserBiasCurrentNormalizedtooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmLaserBiasCurrentNormalizedtooHigh.setDescription('TCA - Laser Bias Current Level too High. Fixed threshold has been crossed.')
alarmLossOfSignalTransmitter = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1055)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfSignalTransmitter.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfSignalTransmitter.setDescription('A Loss of signal has been detected on the FAR-END facility.')
alarmAttOnReceiverFiberLowerThanMonitor = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1056)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAttOnReceiverFiberLowerThanMonitor.setStatus('current')
if mibBuilder.loadTexts: alarmAttOnReceiverFiberLowerThanMonitor.setDescription('Attenuation Rx Too Low')
alarmAttOnReceiverFiberHigherThanMonitor = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1057)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAttOnReceiverFiberHigherThanMonitor.setStatus('current')
if mibBuilder.loadTexts: alarmAttOnReceiverFiberHigherThanMonitor.setDescription('Attenuation Rx Too High')
alarmAttOnTransmitterFiberLowerThanMonitor = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1058)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAttOnTransmitterFiberLowerThanMonitor.setStatus('current')
if mibBuilder.loadTexts: alarmAttOnTransmitterFiberLowerThanMonitor.setDescription('Attenuation Tx Too Low')
alarmAttOnTransmitterFiberHigherThanMonitor = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1059)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAttOnTransmitterFiberHigherThanMonitor.setStatus('current')
if mibBuilder.loadTexts: alarmAttOnTransmitterFiberHigherThanMonitor.setDescription('Attenuation Tx Too High')
alarmAutoShutdownSendingAisOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1060)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownSendingAisOtu.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownSendingAisOtu.setDescription('Auto Shutdown (OTU-AIS)')
alarmLossOfFrameOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1061)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfFrameOtu.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfFrameOtu.setDescription('OTU LOF')
alarmLossOfMultiFrameOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1062)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfMultiFrameOtu.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfMultiFrameOtu.setDescription('OTU LOM')
alarmAlarmIndicationSignalOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1063)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOtu.setStatus('current')
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOtu.setDescription('Alarm Indication Signal OTU Section Monitoring')
alarmSignalDegradeOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1064)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalDegradeOtu.setStatus('current')
if mibBuilder.loadTexts: alarmSignalDegradeOtu.setDescription('OTU Signal Degrade alarm; related to a configurable threshold')
alarmBackwardDefectIndicationOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1065)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOtu.setStatus('current')
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOtu.setDescription('OTU Backward Defect Indication')
alarmAutoShutdownSendingAisOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1066)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownSendingAisOdu.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownSendingAisOdu.setDescription('Auto Shutdown (ODU-AIS)')
alarmLossOfFrameLossOfMultiFrameOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1067)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfFrameLossOfMultiFrameOdu.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfFrameLossOfMultiFrameOdu.setDescription('ODU LOF/LOM')
alarmAlarmIndicationSignalOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1068)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOdu.setStatus('current')
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOdu.setDescription('Alarm Indication Signal ODU Path Monitoring')
alarmOpenConnectionIndicationOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1069)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOdu.setStatus('current')
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOdu.setDescription('Open Connection Indication ODU')
alarmLockedDefectOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1070)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLockedDefectOdu.setStatus('current')
if mibBuilder.loadTexts: alarmLockedDefectOdu.setDescription('ODU Locked')
alarmSignalDegradeOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1071)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalDegradeOdu.setStatus('current')
if mibBuilder.loadTexts: alarmSignalDegradeOdu.setDescription('ODU Signal Degrade alarm; Related to a configurable threshold')
alarmBackwardDefectIndicationOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1072)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOdu.setStatus('current')
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOdu.setDescription('ODU Backward Defect Indication')
alarmAlarmIndicationSignalOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1073)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOduTcmA.setStatus('current')
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOduTcmA.setDescription('Alarm Indication Signal ODU Tandem Connection Monitoring Instance A')
alarmOpenConnectionIndicationOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1074)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOduTcmA.setStatus('current')
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOduTcmA.setDescription('Open Connection Indication ODU Tandem Connection Monitoring A')
alarmLockedDefectOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1075)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLockedDefectOduTcmA.setStatus('current')
if mibBuilder.loadTexts: alarmLockedDefectOduTcmA.setDescription('Locked Defect ODU TCM Instance A')
alarmLossofTandemConnectionOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1076)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossofTandemConnectionOduTcmA.setStatus('current')
if mibBuilder.loadTexts: alarmLossofTandemConnectionOduTcmA.setDescription('Loss of Tandem Connection ODU Tandem Connection Monitoring Instane A')
alarmSignalDegradeOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1077)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalDegradeOduTcmA.setStatus('current')
if mibBuilder.loadTexts: alarmSignalDegradeOduTcmA.setDescription('Signal Degrade ODU Tandem Connection Monitoring Instance A. Related to a configurable threshold')
alarmBackwardDefectIndicationOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1078)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOduTcmA.setStatus('current')
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOduTcmA.setDescription('Backward Defect Indication ODU Tandem Connection Monitoring Instance A.')
alarmPayloadMismatchOPU = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1079)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPayloadMismatchOPU.setStatus('current')
if mibBuilder.loadTexts: alarmPayloadMismatchOPU.setDescription('OPU Payload Mismatch')
alarmMultiplexStructureIdentifierMismatchOPU = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1080)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmMultiplexStructureIdentifierMismatchOPU.setStatus('current')
if mibBuilder.loadTexts: alarmMultiplexStructureIdentifierMismatchOPU.setDescription('Multiplex Structure Identifier Mismatch OPU')
alarmLossOfFrame = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1081)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfFrame.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfFrame.setDescription('Section (SONET) / Regeneration Section (SDH) - Loss Of Frame')
alarmSectionSignalFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1082)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSectionSignalFailure.setStatus('deprecated')
if mibBuilder.loadTexts: alarmSectionSignalFailure.setDescription('This is a very severe degradation BER >= 10**-3')
alarmAutoShutdownSendingAisLine = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1083)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownSendingAisLine.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownSendingAisLine.setDescription('Auto Shutdown (L-AIS)')
alarmAlarmIndicationSignalLine = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1084)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalLine.setStatus('current')
if mibBuilder.loadTexts: alarmAlarmIndicationSignalLine.setDescription('Alarm Indication Signal Line / Multiplex Section')
alarmRemoteDefectIndicationLine = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1085)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmRemoteDefectIndicationLine.setStatus('current')
if mibBuilder.loadTexts: alarmRemoteDefectIndicationLine.setDescription('Line / Multiplex Section RDI')
alarmSignalDegradeLine = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1086)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalDegradeLine.setStatus('current')
if mibBuilder.loadTexts: alarmSignalDegradeLine.setDescription('Line/Mux Section SD alarm; related to a configurable threshold')
alarmAlarmIndicationSignalHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1087)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalHigherOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmAlarmIndicationSignalHigherOrderPath.setDescription('Alarm Indication Signal Path')
alarmLossOfPointerHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1088)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfPointerHigherOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfPointerHigherOrderPath.setDescription('Path LOP')
alarmLossofMultiframeHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1089)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossofMultiframeHigherOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmLossofMultiframeHigherOrderPath.setDescription('Path LOM')
alarmLossofSequenceHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1090)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossofSequenceHigherOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmLossofSequenceHigherOrderPath.setDescription('Path Loss Of Sequence')
alarmUnequippedHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1091)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmUnequippedHigherOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmUnequippedHigherOrderPath.setDescription('Path UNEQ')
alarmPayloadMismatchHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1092)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPayloadMismatchHigherOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmPayloadMismatchHigherOrderPath.setDescription('SONET/SDH Path Payload Mismatch')
alarmRemoteDefectIndicationHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1093)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmRemoteDefectIndicationHigherOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmRemoteDefectIndicationHigherOrderPath.setDescription('Path RDI')
alarmSignalDegradeHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1094)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalDegradeHigherOrderPath.setStatus('deprecated')
if mibBuilder.loadTexts: alarmSignalDegradeHigherOrderPath.setDescription('Path Signal Degrade alarm; related to a configurable threshold')
alarmAlarmIndicationSignalLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1095)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalLowerOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmAlarmIndicationSignalLowerOrderPath.setDescription('Alarm Indication Signal Lower Order Path')
alarmLossOfPointerLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1096)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfPointerLowerOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfPointerLowerOrderPath.setDescription('Is this the same as LOF-LP')
alarmLossofMultiframeLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1097)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossofMultiframeLowerOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmLossofMultiframeLowerOrderPath.setDescription('LO-Path Loss Of Multiframe Condition')
alarmLossofSequenceLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1098)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossofSequenceLowerOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmLossofSequenceLowerOrderPath.setDescription('LO-Path Loss Of Sequence')
alarmUnequippedLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1099)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmUnequippedLowerOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmUnequippedLowerOrderPath.setDescription('LO-Path Unequipped')
alarmPayloadMismatchLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1100)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPayloadMismatchLowerOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmPayloadMismatchLowerOrderPath.setDescription('LO-Path Payload Mismatch')
alarmRemoteDefectIndicationLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1101)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmRemoteDefectIndicationLowerOrderPath.setStatus('current')
if mibBuilder.loadTexts: alarmRemoteDefectIndicationLowerOrderPath.setDescription('LO-Path Remote Defect Indication')
alarmLossOfMultiframeVCG = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1102)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfMultiframeVCG.setStatus('deprecated')
if mibBuilder.loadTexts: alarmLossOfMultiframeVCG.setDescription('Until the VCG is cross-connected the alarm should not be sent')
alarmLossOfSequenceVCG = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1103)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfSequenceVCG.setStatus('deprecated')
if mibBuilder.loadTexts: alarmLossOfSequenceVCG.setDescription('Until the VCG is cross-connected the alarm should not be sent')
alarmLossofAlignmentVCG = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1104)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossofAlignmentVCG.setStatus('deprecated')
if mibBuilder.loadTexts: alarmLossofAlignmentVCG.setDescription('Until the VCG is cross-connected the alarm should not be sent')
alarmAutoShutdownSendingEPC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1105)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownSendingEPC.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownSendingEPC.setDescription('Auto Shutdown (EPC)')
alarmThres15MinExceededPhysConvES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1106)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvES.setDescription('Errored Seconds Physical Coding Layer')
alarmThres15MinExceededPhysConvCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1107)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvCV.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvCV.setDescription('Coding Violations Physical Coding Layer')
alarmThres15MinExceededPhysConvDE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1108)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvDE.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvDE.setDescription('Disparity Errors Physical Coding Layer')
alarmThres15MinExceededPhysConvCVDE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1109)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvCVDE.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvCVDE.setDescription('Coding Violations And Disparity Errors Physical Coding Layer')
alarmLossOfGfpFrame = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1110)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfGfpFrame.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfGfpFrame.setDescription('GFP LOF')
alarmPayloadMismatchGfp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1111)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPayloadMismatchGfp.setStatus('current')
if mibBuilder.loadTexts: alarmPayloadMismatchGfp.setDescription('GFP Payload Mismatch')
alarmGfpLossOfClientSig = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1112)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmGfpLossOfClientSig.setStatus('current')
if mibBuilder.loadTexts: alarmGfpLossOfClientSig.setDescription('GFP Loss Of Client Signal')
alarmLossOfCharSyncFromFarEnd = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1113)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfCharSyncFromFarEnd.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfCharSyncFromFarEnd.setDescription('Loss of Character Synchronization from FEND')
alarmSwitchtoProtectionInhibited = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1114)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSwitchtoProtectionInhibited.setStatus('current')
if mibBuilder.loadTexts: alarmSwitchtoProtectionInhibited.setDescription('Protection Switch Inhibited. Switch to PROTN facility Locked Out. Reported by WKG facility. Leads to PSI state.')
alarmSwitchtoWorkingInhibited = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1115)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSwitchtoWorkingInhibited.setStatus('current')
if mibBuilder.loadTexts: alarmSwitchtoWorkingInhibited.setDescription('Protection Release Inhibited. Switch back to WKG facility Locked Out. Reported by PROTN facility. Leads to PRI state.')
alarmOTDRMeasuringinProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1116)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOTDRMeasuringinProgress.setStatus('current')
if mibBuilder.loadTexts: alarmOTDRMeasuringinProgress.setDescription('On an OLM, the pilot laser has been switched off for a defined\n         period to allow an Optical Time Domain Reflectometer to be deployed')
alarmProtectionNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1117)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmProtectionNotAvailable.setStatus('current')
if mibBuilder.loadTexts: alarmProtectionNotAvailable.setDescription('In the case of Channel Card Protection: due to unequipped or\n         mismatched partner equipment - sent by active facility.\n         In the case of HST Channel Protection: due to unequipped or\n         mismatched partner plug - sent by active facility.\n         In the case of Duplex Controller Protection: due to partner\n         OOS-AU or OOS-MA, DSBLD')
alarmApsConfigMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1118)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmApsConfigMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmApsConfigMismatch.setDescription('Configuration Mismatch between NEND and FEND. Reported by working facility (PATHID==WKG) or protection facility (PATHID==PROTN)')
alarmEmbeddedOperationsChannelFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1119)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEmbeddedOperationsChannelFailure.setStatus('current')
if mibBuilder.loadTexts: alarmEmbeddedOperationsChannelFailure.setDescription('Embedded Management Communication Channel Failure')
alarmSignalDegradeSection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1120)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalDegradeSection.setStatus('deprecated')
if mibBuilder.loadTexts: alarmSignalDegradeSection.setDescription('Section / Regeneration Section SD')
alarmSignalDegradationonLinkVector = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1121)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalDegradationonLinkVector.setStatus('current')
if mibBuilder.loadTexts: alarmSignalDegradationonLinkVector.setDescription('Signal Degradation on Link Vector. Superseeded by SF-LINK.')
alarmSignalFailureonLinkVector = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1122)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalFailureonLinkVector.setStatus('current')
if mibBuilder.loadTexts: alarmSignalFailureonLinkVector.setDescription('Signal Fail Link Vector')
alarmInputVoltageFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1123)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmInputVoltageFailure.setStatus('current')
if mibBuilder.loadTexts: alarmInputVoltageFailure.setDescription('Failure of Input Voltage')
alarmPowerSupplyUnitFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1124)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPowerSupplyUnitFailure.setStatus('current')
if mibBuilder.loadTexts: alarmPowerSupplyUnitFailure.setDescription('Severe Fault in Power Supply Unit')
alarmCurrentTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1125)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmCurrentTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmCurrentTooLow.setDescription('Current Too Low')
alarmCurrentTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1126)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmCurrentTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmCurrentTooHigh.setDescription('Current Too High')
alarmMultipleFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1127)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmMultipleFanFailure.setStatus('current')
if mibBuilder.loadTexts: alarmMultipleFanFailure.setDescription('Fault in Fan Control Unit (more than one FAN is faulty)')
alarmSingleFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1128)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSingleFanFailure.setStatus('current')
if mibBuilder.loadTexts: alarmSingleFanFailure.setDescription('Abnormality in Fan Control Unit (one FAN is faulty)')
alarmLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1129)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLinkDown.setStatus('current')
if mibBuilder.loadTexts: alarmLinkDown.setDescription('Failure of External Linkage')
alarmVoltageOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1130)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmVoltageOutOfRange.setStatus('current')
if mibBuilder.loadTexts: alarmVoltageOutOfRange.setDescription('Voltage out of Range')
alarmPeerLink = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1131)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPeerLink.setStatus('current')
if mibBuilder.loadTexts: alarmPeerLink.setDescription('Failure of Internal Link or Link Protocol (could be protocol incompatibility) between Cards in Protection or Regeneration Pair')
alarmHwFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1132)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmHwFailure.setStatus('current')
if mibBuilder.loadTexts: alarmHwFailure.setDescription('General Hardware Failure')
alarmAlarmIndicationSignalOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1133)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOduTcmB.setStatus('current')
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOduTcmB.setDescription('Alarm Indication Signal ODU Tandem Connection Monitoring Instance B')
alarmOpenConnectionIndicationOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1134)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOduTcmB.setStatus('current')
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOduTcmB.setDescription('Open Connection Indication ODU Tandem Connection Monitoring B')
alarmLockedDefectOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1135)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLockedDefectOduTcmB.setStatus('current')
if mibBuilder.loadTexts: alarmLockedDefectOduTcmB.setDescription('Locked Defect ODU TCM Instance B')
alarmLossofTandemConnectionOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1136)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossofTandemConnectionOduTcmB.setStatus('current')
if mibBuilder.loadTexts: alarmLossofTandemConnectionOduTcmB.setDescription('Loss of Tandem Connection ODU Tandem Connection Monitoring Instane B')
alarmSignalDegradeOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1137)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalDegradeOduTcmB.setStatus('current')
if mibBuilder.loadTexts: alarmSignalDegradeOduTcmB.setDescription('Signal Degrade ODU Tandem Connection Monitoring Instance B. Related to a configurable threshold')
alarmBackwardDefectIndicationOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1138)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOduTcmB.setStatus('current')
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOduTcmB.setDescription('Backward Defect Indication ODU Tandem Connection Monitoring Instance B.')
alarmApsProtocolFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1139)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmApsProtocolFailure.setStatus('current')
if mibBuilder.loadTexts: alarmApsProtocolFailure.setDescription('Protocol Failure between NEND and FEND. Reported by protecting facility (PATHID==PROTN).')
alarmApdLowVoltage = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1140)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmApdLowVoltage.setStatus('deprecated')
if mibBuilder.loadTexts: alarmApdLowVoltage.setDescription('Instantaneous Amplifying Photo Diode Low Voltage')
alarmApdHighVoltage = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1141)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmApdHighVoltage.setStatus('deprecated')
if mibBuilder.loadTexts: alarmApdHighVoltage.setDescription('Instantaneous Amplifying Photo Diode High Voltage')
alarmLinkControlProtocolFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1142)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLinkControlProtocolFailure.setStatus('current')
if mibBuilder.loadTexts: alarmLinkControlProtocolFailure.setDescription('Link Control Protocol setup error or timeout')
alarmReceiverLowTemp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1143)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmReceiverLowTemp.setStatus('deprecated')
if mibBuilder.loadTexts: alarmReceiverLowTemp.setDescription('Instantaneous Receiver Temperature')
alarmReceiverHighTemp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1144)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmReceiverHighTemp.setStatus('deprecated')
if mibBuilder.loadTexts: alarmReceiverHighTemp.setDescription('Instantaneous Receiver Temperature')
alarmThermoElectricCoolerCurrentTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1145)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThermoElectricCoolerCurrentTooLow.setStatus('deprecated')
if mibBuilder.loadTexts: alarmThermoElectricCoolerCurrentTooLow.setDescription('Thermo Elecetric Cooler Low Current Level')
alarmThermoElectricCoolerCurrentTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1146)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThermoElectricCoolerCurrentTooHigh.setStatus('deprecated')
if mibBuilder.loadTexts: alarmThermoElectricCoolerCurrentTooHigh.setDescription('Thermo Elecetric Cooler High Current Level')
alarmSubModuleTempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1147)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSubModuleTempTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmSubModuleTempTooHigh.setDescription('Submodule Temperature too High')
alarmSignalDegradeOlm = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1148)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalDegradeOlm.setStatus('current')
if mibBuilder.loadTexts: alarmSignalDegradeOlm.setDescription('Signal Degrade')
alarmReceiverOverloadProtection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1149)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmReceiverOverloadProtection.setStatus('current')
if mibBuilder.loadTexts: alarmReceiverOverloadProtection.setDescription('Safety condition, protecting the system against too high receive power.')
alarmLossOfFrameMux = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1150)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfFrameMux.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfFrameMux.setDescription('Multiplexer Loss Of Frame')
alarmLossOfFrameMuxFarEnd = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1151)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfFrameMuxFarEnd.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfFrameMuxFarEnd.setDescription('Multiplexer Loss of Frame on Far End')
alarmLossOfCharSync = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1152)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfCharSync.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfCharSync.setDescription('Unable to syncronise on the characters in the incoming datastream')
alarmThres15MinExceededFecCE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1153)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededFecCE.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededFecCE.setDescription('Corr. FEC 15Min Exceeded')
alarmThres15MinExceededFecUBE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1154)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededFecUBE.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededFecUBE.setDescription('Uncorr. FEC 15Min Exceeded')
alarmThres15MinExceededFecES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1155)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededFecES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededFecES.setDescription('Errored Seconds FEC OTU Monitoring')
alarmThres15MinExceededFecSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1156)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededFecSES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededFecSES.setDescription('FEC-SES 15Min Exceeded')
alarmThres15MinExceededMuxES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1157)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededMuxES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededMuxES.setDescription('Multiplex Error Second High Threshold 15 min crossed')
alarmThres15MinExceededMuxSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1158)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededMuxSES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededMuxSES.setDescription('Mux-SES 15Min Exceeded')
alarmThres15MinExceededGfpCHEC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1159)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededGfpCHEC.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededGfpCHEC.setDescription('C-HEC 15Min Exceeded')
alarmThres15MinExceededGfpTHEC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1160)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededGfpTHEC.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededGfpTHEC.setDescription('tHEC-cor. 15Min Exceeded')
alarmThres15MinExceededGfpTHecDisc = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1161)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededGfpTHecDisc.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededGfpTHecDisc.setDescription('tHECdisc. 15Min Exceeded')
alarmThres15MinExceededGfpTsuperblockDisc = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1162)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededGfpTsuperblockDisc.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededGfpTsuperblockDisc.setDescription('Discard SBlocks 15M Crossed')
alarmIntrusionRx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1163)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmIntrusionRx.setStatus('deprecated')
if mibBuilder.loadTexts: alarmIntrusionRx.setDescription('Intrusion on the Receiver Fiber based on GRADHT-AT keyword.')
alarmIntrusionTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1164)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmIntrusionTx.setStatus('deprecated')
if mibBuilder.loadTexts: alarmIntrusionTx.setDescription('Intrusion on the Receiver Fiber based on GRADHT-AT keyword.')
alarmAutoShutdownLaserOffDueToHighTemp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1165)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownLaserOffDueToHighTemp.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownLaserOffDueToHighTemp.setDescription('Facility Autonomously Shut Down with Transmitter OFF due to Temperature.')
alarmAutoShutdownLaserOffDueToHighTxPwr = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1166)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownLaserOffDueToHighTxPwr.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownLaserOffDueToHighTxPwr.setDescription('Facility Autonomously Shut Down with Transmitter OFF because of excessiv optical Power Transmitted.')
alarmLaserEndOfLife = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1167)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLaserEndOfLife.setStatus('current')
if mibBuilder.loadTexts: alarmLaserEndOfLife.setDescription('End Of Life [laser degrade].')
alarmLaserBiasCurrAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1168)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLaserBiasCurrAbnormal.setStatus('current')
if mibBuilder.loadTexts: alarmLaserBiasCurrAbnormal.setDescription('Abnormally High Laser Bias Current Level under the current operating conditions.')
alarmOpticalPowerTxLOS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1169)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOpticalPowerTxLOS.setStatus('current')
if mibBuilder.loadTexts: alarmOpticalPowerTxLOS.setDescription('Optical Power Transmission Fault (Tx LOS).')
alarmMidstageFault = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1170)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmMidstageFault.setStatus('current')
if mibBuilder.loadTexts: alarmMidstageFault.setDescription('Out of Service due to Midstage Fault.')
alarmFarEndIpAddressUnknown = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1171)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFarEndIpAddressUnknown.setStatus('current')
if mibBuilder.loadTexts: alarmFarEndIpAddressUnknown.setDescription('Send by active facility. If an FEND IP Address is changed the corresponding NODE-IP cannot be determined by the OSCM')
alarmTopologyDataCalculationInProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1172)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTopologyDataCalculationInProgress.setStatus('current')
if mibBuilder.loadTexts: alarmTopologyDataCalculationInProgress.setDescription('Calculation of topology in progress')
alarmNtpServer1Unreachable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1173)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmNtpServer1Unreachable.setStatus('current')
if mibBuilder.loadTexts: alarmNtpServer1Unreachable.setDescription('alarm will be raised if the configured NTP server is not reachable')
alarmNtpServer2Unreachable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1174)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmNtpServer2Unreachable.setStatus('current')
if mibBuilder.loadTexts: alarmNtpServer2Unreachable.setDescription('alarm will be raised if the configured NTP server is not reachable')
alarmNtpServer3Unreachable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1175)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmNtpServer3Unreachable.setStatus('current')
if mibBuilder.loadTexts: alarmNtpServer3Unreachable.setDescription('alarm will be raised if the configured NTP server is not reachable')
alarmAutoShutdownSendingAisOpu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1176)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownSendingAisOpu.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownSendingAisOpu.setDescription('Auto Shutdown (OPU-AIS)')
alarmAlarmIndicationSignalOpu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1177)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOpu.setStatus('current')
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOpu.setDescription('Alarm Indication Signal OPU Path Monitoring')
alarmAlarmIndicationSignalOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1178)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOduTcmC.setStatus('current')
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOduTcmC.setDescription('Alarm Indication Signal ODU Tandem Connection Monitoring Instance C')
alarmBackwardDefectIndicationOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1179)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOduTcmC.setStatus('current')
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOduTcmC.setDescription('Backward Defect Indication ODU Tandem Connection Monitoring Instance C.')
alarmLockedDefectOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1180)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLockedDefectOduTcmC.setStatus('current')
if mibBuilder.loadTexts: alarmLockedDefectOduTcmC.setDescription('Locked Defect ODU TCM Instance C')
alarmLossofTandemConnectionOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1181)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossofTandemConnectionOduTcmC.setStatus('current')
if mibBuilder.loadTexts: alarmLossofTandemConnectionOduTcmC.setDescription('Loss of Tandem Connection ODU Tandem Connection Monitoring Instane C')
alarmOpenConnectionIndicationOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1182)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOduTcmC.setStatus('current')
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOduTcmC.setDescription('Open Connection Indication ODU Tandem Connection Monitoring C')
alarmSignalDegradeOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1183)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalDegradeOduTcmC.setStatus('current')
if mibBuilder.loadTexts: alarmSignalDegradeOduTcmC.setDescription('Signal Degrade ODU Tandem Connection Monitoring Instance C. Related to a configurable threshold')
alarmLoopbackError = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1184)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLoopbackError.setStatus('current')
if mibBuilder.loadTexts: alarmLoopbackError.setDescription('A loop in the PPP-IP path is detected')
alarmSectionTraceMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1185)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSectionTraceMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmSectionTraceMismatch.setDescription('Section (SONET) / Regeneration Section (SDH) - Trace Identifier Mismatch')
alarmTraceIdentifierMismatchOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1186)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOtu.setStatus('current')
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOtu.setDescription('OTU-TIM')
alarmTraceIdentifierMismatchOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1187)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOdu.setStatus('current')
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOdu.setDescription('ODU-TIM')
alarmTraceIdentifierMismatchOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1188)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOduTcmA.setStatus('current')
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOduTcmA.setDescription('Trace Identifier Mismatch of ODU Tandem Connection Monitoring Instance A')
alarmTraceIdentifierMismatchOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1189)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOduTcmC.setStatus('current')
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOduTcmC.setDescription('Trace Identifier Mismatch of ODU Tandem Connection Monitoring Instance C')
alarmTraceIdentifierMismatchOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1190)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOduTcmB.setStatus('current')
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOduTcmB.setDescription('Trace Identifier Mismatch of ODU Tandem Connection Monitoring Instance B')
alarmDatabaseMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1191)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmDatabaseMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmDatabaseMismatch.setDescription('compare DBACT__FAIL x.y.z in UBR note DBTYPE is retrievable immediately with RTRV-SYS, we do not currently supported a RTRV-COND-SYS')
alarmDatabaseNcuMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1192)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmDatabaseNcuMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmDatabaseNcuMismatch.setDescription('This parameter indicates a change of NCU Type (NCU<->NCU2E)')
alarmServerSignalFailureSectionRS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1193)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmServerSignalFailureSectionRS.setStatus('current')
if mibBuilder.loadTexts: alarmServerSignalFailureSectionRS.setDescription('Section (SONET) / Regeneration Section (SDH) - Server Signal Failure')
alarmFwpMismatchDownloadServiceAffecting = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1194)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFwpMismatchDownloadServiceAffecting.setStatus('current')
if mibBuilder.loadTexts: alarmFwpMismatchDownloadServiceAffecting.setDescription('Firmware Package Mismatch; download will be Service Affecting')
alarmFwpMismatchDownloadNotServiceAffecting = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1195)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFwpMismatchDownloadNotServiceAffecting.setStatus('current')
if mibBuilder.loadTexts: alarmFwpMismatchDownloadNotServiceAffecting.setDescription('Firmware Package Mismatch; download will be NOT Service Affecting')
alarmDatabaseVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1196)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmDatabaseVersionMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmDatabaseVersionMismatch.setDescription('The current DB is newer than required, or not updateable')
alarmClientFailForwarding = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1197)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmClientFailForwarding.setStatus('current')
if mibBuilder.loadTexts: alarmClientFailForwarding.setDescription('Forwarding of Client Failure')
alarmVirtualChannelAis = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1198)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmVirtualChannelAis.setStatus('current')
if mibBuilder.loadTexts: alarmVirtualChannelAis.setDescription('Client Failure Far-end')
alarmServerSignalFailureVf = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1199)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmServerSignalFailureVf.setStatus('current')
if mibBuilder.loadTexts: alarmServerSignalFailureVf.setDescription('Aggregate level failure')
alarmSignalFailureOnLink = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1200)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalFailureOnLink.setStatus('current')
if mibBuilder.loadTexts: alarmSignalFailureOnLink.setDescription('Signal Failure on Link')
alarmServerSignalFailureGfp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1201)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmServerSignalFailureGfp.setStatus('current')
if mibBuilder.loadTexts: alarmServerSignalFailureGfp.setDescription('GFP Server Signal Failure')
alarmServerSignalFailurePath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1202)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmServerSignalFailurePath.setStatus('current')
if mibBuilder.loadTexts: alarmServerSignalFailurePath.setDescription('SONET/SDH Path Server Signal Failure')
alarmGainTiltNotSettable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1203)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmGainTiltNotSettable.setStatus('current')
if mibBuilder.loadTexts: alarmGainTiltNotSettable.setDescription('The nominal tilt and gain values are not settable')
alarmTxPowerLimited = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1204)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTxPowerLimited.setStatus('current')
if mibBuilder.loadTexts: alarmTxPowerLimited.setDescription('The optical output power reached limit')
alarmEqualizationProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1205)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEqualizationProgress.setStatus('current')
if mibBuilder.loadTexts: alarmEqualizationProgress.setDescription('Equalization and countdown in progress')
alarmUPortFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1206)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmUPortFailure.setStatus('current')
if mibBuilder.loadTexts: alarmUPortFailure.setDescription('Internal U Port Failure')
alarmAutoShutdownBlock = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1207)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownBlock.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownBlock.setDescription('Auto Shutdown Block')
alarmServerSignalFailTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1208)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmServerSignalFailTx.setStatus('current')
if mibBuilder.loadTexts: alarmServerSignalFailTx.setDescription('Aggregate level failure')
alarmPayloadMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1209)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPayloadMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmPayloadMismatch.setDescription('Payload Mismatch on Virtual Facility')
alarmVoaControlFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1210)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmVoaControlFail.setStatus('current')
if mibBuilder.loadTexts: alarmVoaControlFail.setDescription('The power or attenuation control of OPCM failed')
alarmProvisioningLocked = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1211)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmProvisioningLocked.setStatus('current')
if mibBuilder.loadTexts: alarmProvisioningLocked.setDescription('Provisioning locked')
alarmMansw = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1212)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmMansw.setStatus('current')
if mibBuilder.loadTexts: alarmMansw.setDescription('This condition will only be shown on the working entity, meaning the MANSW has switched traffic from the working entity to the protection entity.')
alarmWtrTimerRunning = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1213)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmWtrTimerRunning.setStatus('current')
if mibBuilder.loadTexts: alarmWtrTimerRunning.setDescription('WTR timer is running')
alarmPcsSignalDegrade = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1214)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPcsSignalDegrade.setStatus('current')
if mibBuilder.loadTexts: alarmPcsSignalDegrade.setDescription('Pysical Coding Sublayer Signal Degrade alarm; related to a configurable threshold')
alarmThres15MinExceededSonetSectES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1216)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectES.setDescription('Errored Seconds Section')
alarmThres15MinExceededSonetSectSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1217)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectSES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectSES.setDescription('Severely Errored Seconds Section')
alarmThres15MinExceededSonetSectSEFS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1218)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectSEFS.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectSEFS.setDescription('Severely Errored Framing Seconds Section')
alarmThres15MinExceededSonetSectCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1219)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectCV.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectCV.setDescription('Coding Violations Section')
alarmThres15MinExceededSonetLineES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1220)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineES.setDescription('Errored Seconds Line')
alarmThres15MinExceededSonetLineSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1221)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineSES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineSES.setDescription('Severely Errored Seconds Line')
alarmThres15MinExceededSonetLineCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1222)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineCV.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineCV.setDescription('Coding Violations Line')
alarmThres15MinExceededSonetLineUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1223)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineUAS.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineUAS.setDescription('Unavailable Seconds Line')
alarmThres15MinExceededOduTcmAES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1224)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmAES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmAES.setDescription('Errored Seconds ODU Tandem Connection Monitoring')
alarmThres15MinExceededOduTcmASES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1225)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmASES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmASES.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring')
alarmThres15MinExceededOduTcmAUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1226)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmAUAS.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmAUAS.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring')
alarmThres15MinExceededOduTcmABbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1227)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmABbe.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmABbe.setDescription('Background Block Errors ODU Tandem Connection Monitoring')
alarmThres15MinExceededOduTcmBES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1228)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBES.setDescription('Errored Seconds ODU Tandem Connection Monitoring')
alarmThres15MinExceededOduTcmBSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1229)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBSES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBSES.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring')
alarmThres15MinExceededOduTcmBUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1230)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBUAS.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBUAS.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring')
alarmThres15MinExceededOduTcmBBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1231)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBBbe.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBBbe.setDescription('Background Block Errors ODU Tandem Connection Monitoring')
alarmThres15MinExceededOduTcmCES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1232)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCES.setDescription('Errored Seconds ODU Tandem Connection Monitoring')
alarmThres15MinExceededOduTcmCSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1233)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCSES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCSES.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring')
alarmThres15MinExceededOduTcmCUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1234)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCUAS.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCUAS.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring')
alarmThres15MinExceededOduTcmCBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1235)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCBbe.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCBbe.setDescription('Background Block Errors ODU Tandem Connection Monitoring')
alarmThres15MinExceededOtuES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1236)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOtuES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOtuES.setDescription('Errored Seconds OTU Section Monitoring')
alarmThres15MinExceededOtuSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1237)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOtuSES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOtuSES.setDescription('Severely Errored Seconds OTU Section Monitoring')
alarmThres15MinExceededOtuUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1238)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOtuUAS.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOtuUAS.setDescription('Unavailable Seconds OTU Section Monitoring')
alarmThres15MinExceededOtuBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1239)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOtuBbe.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOtuBbe.setDescription('Background Block Errors OTU Section Monitoring')
alarmThres15MinExceededOduES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1240)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduES.setDescription('Errored Seconds ODU Path Monitoring')
alarmThres15MinExceededOduSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1241)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduSES.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduSES.setDescription('Severely Errored Seconds ODU Path Monitoring')
alarmThres15MinExceededOduUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1242)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduUAS.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduUAS.setDescription('Unavailable Seconds ODU Path Monitoring')
alarmThres15MinExceededOduBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1243)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededOduBbe.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededOduBbe.setDescription('Background Block Errors ODU Section Monitoring')
alarmThresOptPowerCtrlFailureLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1244)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThresOptPowerCtrlFailureLow.setStatus('current')
if mibBuilder.loadTexts: alarmThresOptPowerCtrlFailureLow.setDescription('Optical Power Control Failure Low Threshold')
alarmThresOptPowerCtrlFailureHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1245)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThresOptPowerCtrlFailureHigh.setStatus('current')
if mibBuilder.loadTexts: alarmThresOptPowerCtrlFailureHigh.setDescription('Optical Power Control Failure High Threshold')
alarmDcnServerSignalFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1246)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmDcnServerSignalFailure.setStatus('current')
if mibBuilder.loadTexts: alarmDcnServerSignalFailure.setDescription('DCN Server Signal Failure')
alarmMaxPowerConsEquipModulesToHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1247)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmMaxPowerConsEquipModulesToHigh.setStatus('current')
if mibBuilder.loadTexts: alarmMaxPowerConsEquipModulesToHigh.setDescription('The maximum power consumption of all equipped modules is too high')
alarmMaxPowerConsProvModulesToHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1248)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmMaxPowerConsProvModulesToHigh.setStatus('current')
if mibBuilder.loadTexts: alarmMaxPowerConsProvModulesToHigh.setDescription('The maximal power consumption of all provisioned modules in the NE is too high')
alarmEquipmentMismatchAllow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1249)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEquipmentMismatchAllow.setStatus('current')
if mibBuilder.loadTexts: alarmEquipmentMismatchAllow.setDescription('Equipment Mismatch Allow')
alarmOosPrePostSig = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1250)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOosPrePostSig.setStatus('current')
if mibBuilder.loadTexts: alarmOosPrePostSig.setDescription('Out of Service Pre/Post Signalling')
alarmOosPrePostSigInSetUpProcess = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1251)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOosPrePostSigInSetUpProcess.setStatus('current')
if mibBuilder.loadTexts: alarmOosPrePostSigInSetUpProcess.setDescription('While PPS in Set-Up Process; supersede OOSPPS')
alarmOosPrePostSigInTearDownProcess = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1252)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOosPrePostSigInTearDownProcess.setStatus('current')
if mibBuilder.loadTexts: alarmOosPrePostSigInTearDownProcess.setDescription('While PPS is in Tear-Down Process')
alarmCpTunnelModificationInProgess = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1253)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmCpTunnelModificationInProgess.setStatus('current')
if mibBuilder.loadTexts: alarmCpTunnelModificationInProgess.setDescription('Modification in Progess')
alarmCapabilityLevelMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1254)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmCapabilityLevelMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmCapabilityLevelMismatch.setDescription('Capability level mismatch')
alarmOosPrePostSigEstablishFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1255)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOosPrePostSigEstablishFailed.setStatus('current')
if mibBuilder.loadTexts: alarmOosPrePostSigEstablishFailed.setDescription('PPS after establishment fail')
alarmOosPrePostSigAfterPrecompFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1256)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOosPrePostSigAfterPrecompFailed.setStatus('current')
if mibBuilder.loadTexts: alarmOosPrePostSigAfterPrecompFailed.setDescription('PPS after precomputed fail')
alarmCpTunnelEstablishFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1257)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmCpTunnelEstablishFailed.setStatus('current')
if mibBuilder.loadTexts: alarmCpTunnelEstablishFailed.setDescription('The Tunnel has Failed to Establish')
alarmCpTunnelPrecompFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1258)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmCpTunnelPrecompFailed.setStatus('current')
if mibBuilder.loadTexts: alarmCpTunnelPrecompFailed.setDescription('The Tunnel precomputing failed')
alarmLocalFault = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1259)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLocalFault.setStatus('current')
if mibBuilder.loadTexts: alarmLocalFault.setDescription('Local Fault Sequence ordered_set received by the local PHY')
alarmOscPwrTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1260)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOscPwrTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmOscPwrTooHigh.setDescription('Optical Supervisory Channel Input Power current high threshold crossed')
alarmOscPwrTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1261)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOscPwrTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmOscPwrTooLow.setDescription('Optical Supervisory Channel Input Power current low threshold crossed')
alarmAseTableBuild = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1262)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAseTableBuild.setStatus('current')
if mibBuilder.loadTexts: alarmAseTableBuild.setDescription('Auto shutdown due to missing ASE table')
alarmAseTableNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1263)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAseTableNotAvailable.setStatus('current')
if mibBuilder.loadTexts: alarmAseTableNotAvailable.setDescription('ASE table not available or invalid')
alarmAutomaticPowerReduction = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1264)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutomaticPowerReduction.setStatus('current')
if mibBuilder.loadTexts: alarmAutomaticPowerReduction.setDescription('The signal power exceeds the limit')
alarmHighBer = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1266)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmHighBer.setStatus('current')
if mibBuilder.loadTexts: alarmHighBer.setDescription('More than 16 invalid 64B/66B sync headers within the current 125us period')
alarmPumpLaser1TempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1267)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPumpLaser1TempTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmPumpLaser1TempTooHigh.setDescription('TCA - Fixed high threshold of Laser 1 Temperature has been crossed.')
alarmPumpLaser1TempTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1268)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPumpLaser1TempTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmPumpLaser1TempTooLow.setDescription('TCA - Fixed low threshold of Laser 1 Temperature has been crossed.')
alarmPumpLaser2TempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1269)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPumpLaser2TempTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmPumpLaser2TempTooHigh.setDescription('TCA - Fixed high threshold of Laser 2 Temperature has been crossed.')
alarmPumpLaser2TempTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1270)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPumpLaser2TempTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmPumpLaser2TempTooLow.setDescription('TCA - Fixed low threshold of Laser 2 Temperature has been crossed.')
alarmOspfIpServerNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1271)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOspfIpServerNotAvailable.setStatus('current')
if mibBuilder.loadTexts: alarmOspfIpServerNotAvailable.setDescription('Failure of Entity on OSPFIP Server')
alarmLossOsc = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1272)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOsc.setStatus('current')
if mibBuilder.loadTexts: alarmLossOsc.setDescription('Loss Of OSC')
alarmBrPwrRxTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1273)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmBrPwrRxTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmBrPwrRxTooHigh.setDescription('Backreflection Rx too High')
alarmAseTableGenFailSignalinput = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1274)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAseTableGenFailSignalinput.setStatus('current')
if mibBuilder.loadTexts: alarmAseTableGenFailSignalinput.setDescription('ASE table generation failed because of detected input signal')
alarmAseTableGenFailOscMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1275)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAseTableGenFailOscMissing.setStatus('current')
if mibBuilder.loadTexts: alarmAseTableGenFailOscMissing.setDescription('ASE table generation failed because OSC is missing')
alarmAseTableGenFailHighBackreflection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1276)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAseTableGenFailHighBackreflection.setStatus('current')
if mibBuilder.loadTexts: alarmAseTableGenFailHighBackreflection.setDescription('ASE table generation failed because of too high backreflection')
alarmRamanPumpPwrTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1277)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmRamanPumpPwrTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmRamanPumpPwrTooHigh.setDescription('TCA - Fixed high threshold of Pump Laser has been crossed.')
alarmRamanPumpPwrTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1278)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmRamanPumpPwrTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmRamanPumpPwrTooLow.setDescription('TCA - Fixed low threshold of Pump Power has been crossed.')
alarmAutoPowerShutdown = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1279)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoPowerShutdown.setStatus('current')
if mibBuilder.loadTexts: alarmAutoPowerShutdown.setDescription('Automatic Power Shutdown')
alarmAseTableGenFailLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1280)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAseTableGenFailLow.setStatus('current')
if mibBuilder.loadTexts: alarmAseTableGenFailLow.setDescription('ASE table generation failed because of too low ASE level')
alarmAseLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1281)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAseLow.setStatus('current')
if mibBuilder.loadTexts: alarmAseLow.setDescription('Pump laser is not switched on because of too low ASE power')
alarmConfigurableOpticalOutputPowerTransmittedTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1282)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmConfigurableOpticalOutputPowerTransmittedTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmConfigurableOpticalOutputPowerTransmittedTooHigh.setDescription('TCA - Optical Power Transmitted (output) too high')
alarmConfigurableOpticalOutputPowerTransmittedTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1283)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmConfigurableOpticalOutputPowerTransmittedTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmConfigurableOpticalOutputPowerTransmittedTooLow.setDescription('TCA - Optical Power Transmitted (output) too low')
alarmLosAttProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1284)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLosAttProgress.setStatus('current')
if mibBuilder.loadTexts: alarmLosAttProgress.setDescription('Loss of Signal Attenuation finding in process')
alarmAseTableGenProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1285)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAseTableGenProgress.setStatus('current')
if mibBuilder.loadTexts: alarmAseTableGenProgress.setDescription('ASE table is in the build process')
alarmSignalDegradeScn = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1286)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalDegradeScn.setStatus('current')
if mibBuilder.loadTexts: alarmSignalDegradeScn.setDescription('Sec/RS signal degrade alarm; related to a configurable threshold')
alarmDispertionTunningCondition = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1287)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmDispertionTunningCondition.setStatus('current')
if mibBuilder.loadTexts: alarmDispertionTunningCondition.setDescription('Chromatic Dispersion Compensation in progress')
alarmTurnupCondition = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1288)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTurnupCondition.setStatus('current')
if mibBuilder.loadTexts: alarmTurnupCondition.setDescription('Turnup Operation in progress')
alarmTurnupFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1289)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmTurnupFailed.setStatus('current')
if mibBuilder.loadTexts: alarmTurnupFailed.setDescription('Turnup Operation failed')
alarmFaultOnOpm = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1301)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFaultOnOpm.setStatus('current')
if mibBuilder.loadTexts: alarmFaultOnOpm.setDescription('Fault detected on OPM')
alarmOptSignalFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1302)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOptSignalFailure.setStatus('current')
if mibBuilder.loadTexts: alarmOptSignalFailure.setDescription('Optical Power Transmit Signal Failure')
alarmOpmAbnormalCondition = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1303)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOpmAbnormalCondition.setStatus('current')
if mibBuilder.loadTexts: alarmOpmAbnormalCondition.setDescription('OPM condition is abnormal (degraded)')
alarmHwOprReachedHT = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1304)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmHwOprReachedHT.setStatus('current')
if mibBuilder.loadTexts: alarmHwOprReachedHT.setDescription('HW OPR has reached a high thershold and could be damaged')
alarmDisabledChannelPowerTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1305)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmDisabledChannelPowerTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmDisabledChannelPowerTooHigh.setDescription('Optical power is not blocked when service is disabled (OPT > -25 dBm).')
alarmLossOfSignalCPort = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1306)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfSignalCPort.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfSignalCPort.setDescription('Loss of signal on C Port that corresponds to the network VCH via CRS')
alarmServerSignalFailureODU = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1308)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmServerSignalFailureODU.setStatus('current')
if mibBuilder.loadTexts: alarmServerSignalFailureODU.setDescription('ODU Server Signal Failure')
alarmSignalFailureOPU = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1309)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalFailureOPU.setStatus('current')
if mibBuilder.loadTexts: alarmSignalFailureOPU.setDescription('This is a very severe signal degradation or loss')
alarmServerSignalFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1310)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmServerSignalFail.setStatus('current')
if mibBuilder.loadTexts: alarmServerSignalFail.setDescription('All member ports signals have failed')
alarmServerSignalReduced = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1311)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmServerSignalReduced.setStatus('current')
if mibBuilder.loadTexts: alarmServerSignalReduced.setDescription('One of the member ports signals has failed')
alarmDispersionCompensationTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1312)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmDispersionCompensationTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmDispersionCompensationTooLow.setDescription('Chromatic Dispersion Compensation too Low')
alarmDispersionCompensationTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1313)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmDispersionCompensationTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmDispersionCompensationTooHigh.setDescription('Chromatic Dispersion Compensation too High')
alarmFarEndCommFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1315)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFarEndCommFailure.setStatus('current')
if mibBuilder.loadTexts: alarmFarEndCommFailure.setDescription('The connection to the Far End Optojack plug is dysfunctional')
alarmLinkAttenuationTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1316)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLinkAttenuationTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmLinkAttenuationTooLow.setDescription('TCA - Link attenuation too low')
alarmLinkAttenuationTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1317)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLinkAttenuationTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmLinkAttenuationTooHigh.setDescription('TCA - Link attenuation too high')
alarmEntityOutageIndication = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1320)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEntityOutageIndication.setStatus('current')
if mibBuilder.loadTexts: alarmEntityOutageIndication.setDescription('Entity Outage along CNX (remote as well as local)')
alarmFiberConnectionMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1321)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFiberConnectionMissing.setStatus('current')
if mibBuilder.loadTexts: alarmFiberConnectionMissing.setDescription('Fiber Connection Missing')
alarmFarEndInformationMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1322)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFarEndInformationMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmFarEndInformationMismatch.setDescription('Far End Information Mismatch')
alarmAutomaticPowerReductionForEyeSafety = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1325)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutomaticPowerReductionForEyeSafety.setStatus('current')
if mibBuilder.loadTexts: alarmAutomaticPowerReductionForEyeSafety.setDescription('Output power is automatically reduced to eye safety limit')
alarmLossOfPilotSignal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1326)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfPilotSignal.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfPilotSignal.setDescription('Loss of Pilot Signal')
alarmPumpLaser3TempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1327)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPumpLaser3TempTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmPumpLaser3TempTooHigh.setDescription('TCA - Fixed high threshold of Laser 3 Temperature has been crossed.')
alarmPumpLaser3TempTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1328)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPumpLaser3TempTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmPumpLaser3TempTooLow.setDescription('TCA - Fixed low threshold of Laser 3 Temperature has been crossed.')
alarmPilotReceiveLevelHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1329)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPilotReceiveLevelHigh.setStatus('current')
if mibBuilder.loadTexts: alarmPilotReceiveLevelHigh.setDescription('Pilot receive level is high')
alarmAutoShutdownStbyProtection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1330)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownStbyProtection.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownStbyProtection.setDescription('Shut down of STBYH client LASER in protection configuration')
alarmDatabaseFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1331)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmDatabaseFailure.setStatus('current')
if mibBuilder.loadTexts: alarmDatabaseFailure.setDescription('Database Failure detect by Database Check Routine')
alarmLatencyTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1335)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLatencyTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmLatencyTooHigh.setDescription('TCA -Round trip dela Too High')
alarmLatencyTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1336)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLatencyTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmLatencyTooLow.setDescription('TCA -Round trip delay Too Low')
alarmThres15MinExceededFecBERCE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1337)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededFecBERCE.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededFecBERCE.setDescription('Bit error rate before FEC 15 minutes high threshold crossed')
alarmAutoShutdownSendingLckOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1338)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownSendingLckOdu.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownSendingLckOdu.setDescription('Auto Shutdown (ODU-LCK)')
alarmNtpNotInSync = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1339)).setObjects(("FspR7-MIB", "ntpSrvCurrentConditionSeverity"), ("FspR7-MIB", "ntpSrvCurrentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmNtpNotInSync.setStatus('current')
if mibBuilder.loadTexts: alarmNtpNotInSync.setDescription('The NTP server is not synchronized.')
alarmEncryptionModuleTamperDetected = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1340)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionModuleTamperDetected.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionModuleTamperDetected.setDescription('Tamper event on Encryption module')
alarmEncryptionModuleCryPasswdMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1341)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionModuleCryPasswdMissing.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionModuleCryPasswdMissing.setDescription('Crypto Officer password missing')
alarmEncryptionModuleCryPasswdError = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1342)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionModuleCryPasswdError.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionModuleCryPasswdError.setDescription('3 invalid CRYPW entered; The Module refuses input of CRYPW for xxx sec.')
alarmEncryptionModuleFwpUpdateEnabled = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1343)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionModuleFwpUpdateEnabled.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionModuleFwpUpdateEnabled.setDescription('FWP upgrade is allowed')
alarmEncryptionModuleSelfTestStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1344)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionModuleSelfTestStarted.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionModuleSelfTestStarted.setDescription('Encryption selftest running')
alarmEncryptionModuleSelfTestFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1345)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionModuleSelfTestFail.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionModuleSelfTestFail.setDescription('Noncritical selftest failed')
alarmEncryptionModuleSelfTestFailCritical = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1346)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionModuleSelfTestFailCritical.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionModuleSelfTestFailCritical.setDescription('Critical selftest failed')
alarmEncryptionPortAuthPasswdMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1350)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionPortAuthPasswdMissing.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionPortAuthPasswdMissing.setDescription('Authentification password missing')
alarmEncryptionPortMaxKeyExchgFailuresReachedIs = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1351)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionPortMaxKeyExchgFailuresReachedIs.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionPortMaxKeyExchgFailuresReachedIs.setDescription('Maximum Key exchange failure count reached')
alarmEncryptionPortMaxKeyExchgFailuresReachedOos = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1352)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionPortMaxKeyExchgFailuresReachedOos.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionPortMaxKeyExchgFailuresReachedOos.setDescription('Session Key missing')
alarmEncryptionPortEncryptionSwitchedOff = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1353)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionPortEncryptionSwitchedOff.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionPortEncryptionSwitchedOff.setDescription('Encryption switched off')
alarmEncryptionPortKeyExchangedForced = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1354)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionPortKeyExchangedForced.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionPortKeyExchangedForced.setDescription('Encryption Key exchanged forced')
alarmEncryptionPortEncryptionSwitchOffEnabled = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1355)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionPortEncryptionSwitchOffEnabled.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionPortEncryptionSwitchOffEnabled.setDescription('User enabled switching encryption off')
alarmEncryptionPortKeyInitExchgMissed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1356)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmEncryptionPortKeyInitExchgMissed.setStatus('current')
if mibBuilder.loadTexts: alarmEncryptionPortKeyInitExchgMissed.setDescription('The initial successful key exchange is missing')
alarmRoundTripDelayTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1380)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmRoundTripDelayTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmRoundTripDelayTooHigh.setDescription('TCA - Round trip delay too high')
alarmRoundTripDelayTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1381)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmRoundTripDelayTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmRoundTripDelayTooLow.setDescription('TCA -Round trip delay Too Low')
alarmNtpForSchedEqlzRequired = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1386)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmNtpForSchedEqlzRequired.setStatus('current')
if mibBuilder.loadTexts: alarmNtpForSchedEqlzRequired.setDescription('Scheduled Equalization requires NTP to be enabled')
alarmAirDustFilterClogged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1385)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAirDustFilterClogged.setStatus('current')
if mibBuilder.loadTexts: alarmAirDustFilterClogged.setDescription('Air dust filter clogged')
alarmOscOpticalPowerControlFailHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1387)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOscOpticalPowerControlFailHigh.setStatus('current')
if mibBuilder.loadTexts: alarmOscOpticalPowerControlFailHigh.setDescription('OSC Optical Power Control Failure High Threshold')
alarmOscOpticalPowerControlFailLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1388)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOscOpticalPowerControlFailLow.setStatus('current')
if mibBuilder.loadTexts: alarmOscOpticalPowerControlFailLow.setDescription('OSC Optical Power Control Failure Low Threshold')
alarmAmplifierAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1389)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAmplifierAbnormal.setStatus('current')
if mibBuilder.loadTexts: alarmAmplifierAbnormal.setDescription('Output of amplifier is abnormal')
alarmAseTableGenFailPilot = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1390)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAseTableGenFailPilot.setStatus('current')
if mibBuilder.loadTexts: alarmAseTableGenFailPilot.setDescription('ASE table generation failed because PILOT is missing')
alarmPumpLaser4TempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1391)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPumpLaser4TempTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmPumpLaser4TempTooHigh.setDescription('TCA - Fixed high threshold of Laser 4 Temperature has been crossed.')
alarmPumpLaser4TempTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1392)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPumpLaser4TempTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmPumpLaser4TempTooLow.setDescription('TCA - Fixed low threshold of Laser 4 Temperature has been crossed.')
alarmFwdAseTableFailPilot = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1393)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFwdAseTableFailPilot.setStatus('current')
if mibBuilder.loadTexts: alarmFwdAseTableFailPilot.setDescription('Force of BWD Raman pilot for FWD ASE Table Build Failed')
alarmFwdAseTableOnPilot = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1394)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmFwdAseTableOnPilot.setStatus('current')
if mibBuilder.loadTexts: alarmFwdAseTableOnPilot.setDescription('Force the BWD Raman Pilot on to allow building of FWD Raman ASE Table')
alarmInputVoltageFailurePort1 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1395)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmInputVoltageFailurePort1.setStatus('current')
if mibBuilder.loadTexts: alarmInputVoltageFailurePort1.setDescription('Failure of Input Voltage port 1')
alarmInputVoltageFailurePort2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1396)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmInputVoltageFailurePort2.setStatus('current')
if mibBuilder.loadTexts: alarmInputVoltageFailurePort2.setDescription('Failure of Input Voltage port 2')
alarmXfpDecisionThresSetFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1397)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmXfpDecisionThresSetFailed.setStatus('current')
if mibBuilder.loadTexts: alarmXfpDecisionThresSetFailed.setDescription('Decision threshold setting failed')
alarmNtpSrvOosDsbld = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1398)).setObjects(("FspR7-MIB", "ntpSrvCurrentConditionSeverity"), ("FspR7-MIB", "ntpSrvCurrentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmNtpSrvOosDsbld.setStatus('current')
if mibBuilder.loadTexts: alarmNtpSrvOosDsbld.setDescription('The NTP server is in Out Of Service - Disabled state.')
alarmThres15MinExceededPhysConvSE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1399)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvSE.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvSE.setDescription('Sync Header Errors Physical Coding Layer')
alarmThres15MinExceededPhysConvESTX = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1400)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvESTX.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvESTX.setDescription('Tx Errored Seconds Physical Coding Layer')
alarmThres15MinExceededPhysConvCVTX = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1401)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvCVTX.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvCVTX.setDescription('Tx Coding Violations Physical Coding Layer')
alarmThres15MinExceededPhysConvSETX = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1402)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvSETX.setStatus('current')
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvSETX.setDescription('Tx Sync Header Errors Physical Coding Layer')
alarmPrbsRcvActivated = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1403)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPrbsRcvActivated.setStatus('current')
if mibBuilder.loadTexts: alarmPrbsRcvActivated.setDescription('PRBS Receive Activated')
alarmPrbsTrmtActivated = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1404)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPrbsTrmtActivated.setStatus('current')
if mibBuilder.loadTexts: alarmPrbsTrmtActivated.setDescription('PRBS Transmit Activated')
alarmPrbsLossOfSeqSynch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1405)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPrbsLossOfSeqSynch.setStatus('current')
if mibBuilder.loadTexts: alarmPrbsLossOfSeqSynch.setDescription('PRBS Loss of Sequence Synchronization')
alarmOpuClientSignalFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1406)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOpuClientSignalFail.setStatus('current')
if mibBuilder.loadTexts: alarmOpuClientSignalFail.setDescription('OPU Client Signal Fail')
alarmLossOfTestSeqSynchOpu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1407)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfTestSeqSynchOpu.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfTestSeqSynchOpu.setDescription('Loss of test Sequence Synchronization at OPU layer')
alarmAutoShutdownOpuClientSignalFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1408)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownOpuClientSignalFail.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownOpuClientSignalFail.setDescription('Automatic Shutdown - Client Signal Fail transmit (LKDO-CSF)')
alarmLocalOscTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1409)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLocalOscTemperatureTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmLocalOscTemperatureTooLow.setDescription('Local Oscillator (Rx) Laser temperature too Low')
alarmLocalOscTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1410)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLocalOscTemperatureTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmLocalOscTemperatureTooHigh.setDescription('Local Oscillator (Rx) Laser temperature too High')
alarmDifferentialGroupDelayTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1412)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmDifferentialGroupDelayTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmDifferentialGroupDelayTooHigh.setDescription('Differential Group Delay too High')
alarmChromaticDispersionTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1413)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmChromaticDispersionTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmChromaticDispersionTooLow.setDescription('Chromatic Dispersion too Low')
alarmChromaticDispersionTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1414)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmChromaticDispersionTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmChromaticDispersionTooHigh.setDescription('Chromatic Dispersion too High')
alarmSignalToNoiseRatioTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1415)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSignalToNoiseRatioTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmSignalToNoiseRatioTooLow.setDescription('Signal-to-Noise Ratio too Low')
alarmLocalOscLevelAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1416)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLocalOscLevelAbnormal.setStatus('current')
if mibBuilder.loadTexts: alarmLocalOscLevelAbnormal.setDescription('Local Oscillator Current Level Abnormal')
alarmCarrierFreqOffsetTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1417)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmCarrierFreqOffsetTooLow.setStatus('current')
if mibBuilder.loadTexts: alarmCarrierFreqOffsetTooLow.setDescription('Carrier Frequency Offset too Low')
alarmCarrierFreqOffsetTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1418)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmCarrierFreqOffsetTooHigh.setStatus('current')
if mibBuilder.loadTexts: alarmCarrierFreqOffsetTooHigh.setDescription('Carrier Frequency Offset too High')
alarmLossOfLane = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1419)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLossOfLane.setStatus('current')
if mibBuilder.loadTexts: alarmLossOfLane.setDescription('Loss of Lane Alignment')
alarmServerSignalFailureODUcrs = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1420)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmServerSignalFailureODUcrs.setStatus('current')
if mibBuilder.loadTexts: alarmServerSignalFailureODUcrs.setDescription('SSF between entities across the ODU cross connect')
alarmAutoShutdownSendingOciOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1421)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownSendingOciOdu.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownSendingOciOdu.setDescription('Auto Shutdown (ODU-OCI)')
alarmOduTribMsiMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1422)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOduTribMsiMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmOduTribMsiMismatch.setDescription('Tributary Port no and ODTU type do not match in provisioned time slots')
alarmChannelMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1423)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmChannelMismatch.setStatus('current')
if mibBuilder.loadTexts: alarmChannelMismatch.setDescription('Channel provisioning incompatible with associated port configuration')
alarmLaserOnDelay = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1450)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmLaserOnDelay.setStatus('current')
if mibBuilder.loadTexts: alarmLaserOnDelay.setDescription('Laser in process of turning on')
alarmAutoShutdownTxRxLasersDueToHighTemp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 1451)).setObjects(("FspR7-MIB", "currentConditionSeverity"), ("FspR7-MIB", "currentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmAutoShutdownTxRxLasersDueToHighTemp.setStatus('current')
if mibBuilder.loadTexts: alarmAutoShutdownTxRxLasersDueToHighTemp.setDescription('Both TRMT and RCV Facilities sutonomously Shut Down due to Temperature.')
transientThres1DayExceededPhysConvES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3001)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvES.setDescription('Errored Seconds Physical Coding Layer')
transientThres1DayExceededPhysConvCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3002)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvCV.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvCV.setDescription('Coding Violations Physical Coding Layer')
transientThres1DayExceededPhysConvDE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3003)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvDE.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvDE.setDescription('Disparity Errors Physical Coding Layer')
transientThres1DayExceededPhysConvCVDE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3004)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvCVDE.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvCVDE.setDescription('Coding Violations And Disparity Errors Physical Coding Layer')
transientMin15RecordsAvailable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3005)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientMin15RecordsAvailable.setStatus('current')
if mibBuilder.loadTexts: transientMin15RecordsAvailable.setDescription('Performance Monitoring Server has collected all 15-MIN records.')
transientDay1RecordsAvailable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3006)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientDay1RecordsAvailable.setStatus('current')
if mibBuilder.loadTexts: transientDay1RecordsAvailable.setDescription('Performance Monitoring Server has collected all 1-DAY records.')
transientWeek1RecordsAvailable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3007)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientWeek1RecordsAvailable.setStatus('current')
if mibBuilder.loadTexts: transientWeek1RecordsAvailable.setDescription('Performance Monitoring Server has collected all 1-WEEK records.')
transientNeColdStart = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3008)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientNeColdStart.setStatus('current')
if mibBuilder.loadTexts: transientNeColdStart.setDescription('Cold start.')
transientWorkingSwitchedtoProtection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3009)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientWorkingSwitchedtoProtection.setStatus('current')
if mibBuilder.loadTexts: transientWorkingSwitchedtoProtection.setDescription('Working Traffic (ACT) switched from WKG facility to PROTN facility automatically, sent by WKG.')
transientWorkingSwitchedBacktoWorking = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3010)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientWorkingSwitchedBacktoWorking.setStatus('current')
if mibBuilder.loadTexts: transientWorkingSwitchedBacktoWorking.setDescription('Working Traffic (ACT) switched back to WKG facilty from PROTN facility automatically: sent by PROTN.')
transientManualWorkingSwitchedtoProtection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3011)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientManualWorkingSwitchedtoProtection.setStatus('current')
if mibBuilder.loadTexts: transientManualWorkingSwitchedtoProtection.setDescription('Working Traffic (ACT) switched from WKG facility to PROTN facility manually: sent by WKG.')
transientManualWorkingSwitchedBacktoWorking = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3012)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientManualWorkingSwitchedBacktoWorking.setStatus('current')
if mibBuilder.loadTexts: transientManualWorkingSwitchedBacktoWorking.setDescription('Working Traffic (ACT) switched back to WKG facility from PROTN facility manually: sent by PROTN.')
transientForcedWorkingSwitchedBacktoWorking = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3013)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientForcedWorkingSwitchedBacktoWorking.setStatus('current')
if mibBuilder.loadTexts: transientForcedWorkingSwitchedBacktoWorking.setDescription('Forced Working Switched Back to Working')
transientForcedWorkingSwitchedBacktoProtection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3014)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientForcedWorkingSwitchedBacktoProtection.setStatus('current')
if mibBuilder.loadTexts: transientForcedWorkingSwitchedBacktoProtection.setDescription('Forced Working Switched Back to Protection')
transientThres1DayExceededBytesTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3015)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededBytesTx.setStatus('deprecated')
if mibBuilder.loadTexts: transientThres1DayExceededBytesTx.setDescription('')
transientThres1DayExceededFecCE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3016)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededFecCE.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededFecCE.setDescription('Corr. FEC 1Day Exceeded')
transientThres1DayExceededFecUBE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3017)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededFecUBE.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededFecUBE.setDescription('Uncorr. FEC 1Day Exceeded')
transientThres1DayExceededFecES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3018)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededFecES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededFecES.setDescription('Errored Seconds FEC OTU Monitoring')
transientThres1DayExceededFecSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3019)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededFecSES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededFecSES.setDescription('FEC-SES 1Day Exceeded')
transientThres1DayExceededMuxES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3020)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededMuxES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededMuxES.setDescription('Multiplex Error Second High Threshold 1 Day crossed')
transientThres1DayExceededMuxSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3021)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededMuxSES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededMuxSES.setDescription('Mux-SES 1Day Exceeded')
transientTopologyDataInvalid = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3022)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientTopologyDataInvalid.setStatus('current')
if mibBuilder.loadTexts: transientTopologyDataInvalid.setDescription('Topology Detection Data invalid')
transientCopyFileFailNotExist = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3023)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileFailNotExist.setStatus('current')
if mibBuilder.loadTexts: transientCopyFileFailNotExist.setDescription('Copy File: File Does Not Exist')
transientCopyFileConnectionFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3024)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileConnectionFail.setStatus('current')
if mibBuilder.loadTexts: transientCopyFileConnectionFail.setDescription('Copy File: File Transfer Connect Fail, Server not reachable.')
transientCopyFileLoginFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3025)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileLoginFail.setStatus('current')
if mibBuilder.loadTexts: transientCopyFileLoginFail.setDescription('Copy File: Server Login Fail')
transientCopyFileSpaceFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3026)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileSpaceFail.setStatus('current')
if mibBuilder.loadTexts: transientCopyFileSpaceFail.setDescription('Copy File: Insufficient File Space')
transientCopyFileProtocolFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3027)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileProtocolFail.setStatus('current')
if mibBuilder.loadTexts: transientCopyFileProtocolFail.setDescription('Copy File: File Transfer Protocol Fail')
transientCopyFileAccessDenied = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3028)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileAccessDenied.setStatus('current')
if mibBuilder.loadTexts: transientCopyFileAccessDenied.setDescription('Copy File: File Access Denied')
transientCopyFileChecksumFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3029)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileChecksumFail.setStatus('current')
if mibBuilder.loadTexts: transientCopyFileChecksumFail.setDescription('Copy File: File Checksum Fail')
transientCopyFileTransferStart = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3030)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileTransferStart.setStatus('current')
if mibBuilder.loadTexts: transientCopyFileTransferStart.setDescription('Copy File: 00.0% Complete')
transientCopyFileTransferInProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3031)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileTransferInProgress.setStatus('current')
if mibBuilder.loadTexts: transientCopyFileTransferInProgress.setDescription('Copy File Partial')
transientCopyFileTransferComplete = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3032)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileTransferComplete.setStatus('current')
if mibBuilder.loadTexts: transientCopyFileTransferComplete.setDescription('Copy File: 100 % Complete')
transientLocalCopyMemFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3033)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientLocalCopyMemFail.setStatus('current')
if mibBuilder.loadTexts: transientLocalCopyMemFail.setDescription('Local copy file fail')
transientLocalCopyFileStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3034)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientLocalCopyFileStarted.setStatus('current')
if mibBuilder.loadTexts: transientLocalCopyFileStarted.setDescription('Local copy file started.')
transientLocalCopyMemComplted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3035)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientLocalCopyMemComplted.setStatus('current')
if mibBuilder.loadTexts: transientLocalCopyMemComplted.setDescription('Local copy file completed')
transientSoftwareActivation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3036)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientSoftwareActivation.setStatus('current')
if mibBuilder.loadTexts: transientSoftwareActivation.setDescription('Reboot starts immediately.')
transientSoftwareActivationFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3037)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientSoftwareActivationFail.setStatus('current')
if mibBuilder.loadTexts: transientSoftwareActivationFail.setDescription('Software Activation /Reversion Failed.')
transientDatabaseActivationFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3038)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientDatabaseActivationFail.setStatus('current')
if mibBuilder.loadTexts: transientDatabaseActivationFail.setDescription('DBS Activation / Restoration Failed.')
transientDatabaseActivation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3039)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientDatabaseActivation.setStatus('current')
if mibBuilder.loadTexts: transientDatabaseActivation.setDescription('DBS Activation /Restoration starts immediately.')
transientBootUpFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3040)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientBootUpFailed.setStatus('current')
if mibBuilder.loadTexts: transientBootUpFailed.setDescription('Boot up failed')
transientBootUpCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3041)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientBootUpCompleted.setStatus('current')
if mibBuilder.loadTexts: transientBootUpCompleted.setDescription('Boot up completed')
transientBootUpStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3042)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientBootUpStarted.setStatus('current')
if mibBuilder.loadTexts: transientBootUpStarted.setDescription('Boot up started')
transientIntrusionRx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3043)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientIntrusionRx.setStatus('current')
if mibBuilder.loadTexts: transientIntrusionRx.setDescription('Intrusion on the Receiver Fiber based on GRADHT-AT keyword.')
transientIntrusionTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3044)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientIntrusionTx.setStatus('current')
if mibBuilder.loadTexts: transientIntrusionTx.setDescription('Intrusion on the Receiver Fiber based on GRADHT-AT keyword.')
transientDatabaseMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3045)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientDatabaseMismatch.setStatus('deprecated')
if mibBuilder.loadTexts: transientDatabaseMismatch.setDescription('compare DBACT__FAIL x.y.z in UBR note DBTYPE is retrievable\n         immediately with RTRV-SYS, we do not currently supported a RTRV-COND-SYS')
transientSwResetReload = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3046)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientSwResetReload.setStatus('current')
if mibBuilder.loadTexts: transientSwResetReload.setDescription('System Restart-RELOAD')
transientInstallFwpCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3047)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientInstallFwpCompleted.setStatus('current')
if mibBuilder.loadTexts: transientInstallFwpCompleted.setDescription('Installation of FWP completed')
transientCopyFileSshHostKeyFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3048)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileSshHostKeyFail.setStatus('current')
if mibBuilder.loadTexts: transientCopyFileSshHostKeyFail.setDescription('Copy File: Invalid ssh host key')
transientCopyFileNoHostKeyFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3049)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileNoHostKeyFail.setStatus('current')
if mibBuilder.loadTexts: transientCopyFileNoHostKeyFail.setDescription('Copy File: The authentifity of the remote host cannot be established')
transientHardwareResetInputTIF = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3050)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientHardwareResetInputTIF.setStatus('current')
if mibBuilder.loadTexts: transientHardwareResetInputTIF.setDescription('Telemetry interface alarm reset by hardware switch')
transientThres1DayExceededSonetSectES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3051)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectES.setDescription('Errored Seconds Section')
transientThres1DayExceededSonetSectSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3052)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectSES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectSES.setDescription('Severely Errored Seconds Section')
transientThres1DayExceededSonetSectSEFS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3053)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectSEFS.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectSEFS.setDescription('Severely Errored Framing Seconds Section')
transientThres1DayExceededSonetSectCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3054)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectCV.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectCV.setDescription('Coding Violations Section')
transientThres1DayExceededSonetLineES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3055)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineES.setDescription('Errored Seconds Line')
transientThres1DayExceededSonetLineSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3056)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineSES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineSES.setDescription('Severely Errored Seconds Line')
transientThres1DayExceededSonetLineCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3057)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineCV.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineCV.setDescription('Coding Violations Line')
transientThres1DayExceededSonetLineUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3058)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineUAS.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineUAS.setDescription('Unavailable Seconds Line')
transientThres1DayExceededOduTcmAES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3059)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmAES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmAES.setDescription('Errored Seconds ODU Tandem Connection Monitoring')
transientThres1DayExceededOduTcmASES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3060)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmASES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmASES.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring')
transientThres1DayExceededOduTcmAUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3061)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmAUAS.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmAUAS.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring')
transientThres1DayExceededOduTcmABbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3062)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmABbe.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmABbe.setDescription('Background Block Errors ODU Tandem Connection Monitoring')
transientThres1DayExceededOduTcmBES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3063)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBES.setDescription('Errored Seconds ODU Tandem Connection Monitoring')
transientThres1DayExceededOduTcmBSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3064)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBSES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBSES.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring')
transientThres1DayExceededOduTcmBUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3065)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBUAS.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBUAS.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring')
transientThres1DayExceededOduTcmBBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3066)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBBbe.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBBbe.setDescription('Background Block Errors ODU Tandem Connection Monitoring')
transientThres1DayExceededOduTcmCES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3067)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCES.setDescription('Errored Seconds ODU Tandem Connection Monitoring')
transientThres1DayExceededOduTcmCSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3068)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCSES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCSES.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring')
transientThres1DayExceededOduTcmCUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3069)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCUAS.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCUAS.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring')
transientThres1DayExceededOduTcmCBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3070)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCBbe.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCBbe.setDescription('Background Block Errors ODU Tandem Connection Monitoring')
transientThres1DayExceededOtuES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3071)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOtuES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOtuES.setDescription('Errored Seconds OTU Section Monitoring')
transientThres1DayExceededOtuSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3072)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOtuSES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOtuSES.setDescription('Severely Errored Seconds OTU Section Monitoring')
transientThres1DayExceededOtuUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3073)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOtuUAS.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOtuUAS.setDescription('Unavailable Seconds OTU Section Monitoring')
transientThres1DayExceededOtuBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3074)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOtuBbe.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOtuBbe.setDescription('Background Block Errors OTU Section Monitoring')
transientThres1DayExceededOduES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3075)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduES.setDescription('Errored Seconds ODU Path Monitoring')
transientThres1DayExceededOduSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3076)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduSES.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduSES.setDescription('Severely Errored Seconds ODU Path Monitoring')
transientThres1DayExceededOduUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3077)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduUAS.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduUAS.setDescription('Unavailable Seconds ODU Path Monitoring')
transientThres1DayExceededOduBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3078)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededOduBbe.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededOduBbe.setDescription('Background Block Errors ODU Section Monitoring')
transientCpConnectionEstablishmentStart = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3080)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCpConnectionEstablishmentStart.setStatus('current')
if mibBuilder.loadTexts: transientCpConnectionEstablishmentStart.setDescription('Start of Connection Establisment')
transientCpConnectionEstablishmentFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3081)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCpConnectionEstablishmentFail.setStatus('current')
if mibBuilder.loadTexts: transientCpConnectionEstablishmentFail.setDescription('Failure of Connection Establisment')
transientCpConnectionEstablishmentCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3082)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCpConnectionEstablishmentCompleted.setStatus('current')
if mibBuilder.loadTexts: transientCpConnectionEstablishmentCompleted.setDescription('Completion of Connection Establisment')
transientCpConnectionModificationStart = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3083)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCpConnectionModificationStart.setStatus('current')
if mibBuilder.loadTexts: transientCpConnectionModificationStart.setDescription('Start of Connection Modification')
transientCpConnectionModificationFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3084)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCpConnectionModificationFail.setStatus('current')
if mibBuilder.loadTexts: transientCpConnectionModificationFail.setDescription('Failure of Connection Modification')
transientCpConnectionModificationCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3085)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCpConnectionModificationCompleted.setStatus('current')
if mibBuilder.loadTexts: transientCpConnectionModificationCompleted.setDescription('Completion of Connection Modification')
transientAlarmProfileActivation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3086)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientAlarmProfileActivation.setStatus('current')
if mibBuilder.loadTexts: transientAlarmProfileActivation.setDescription('Alarm Profile Activation.')
transientAlarmProfileActivationFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3087)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientAlarmProfileActivationFail.setStatus('current')
if mibBuilder.loadTexts: transientAlarmProfileActivationFail.setDescription('Alarm Profile Activation Failed.')
transientCpConnectionEstablishmentAborted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3088)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCpConnectionEstablishmentAborted.setStatus('current')
if mibBuilder.loadTexts: transientCpConnectionEstablishmentAborted.setDescription('Connection Establisment Aborted')
transientEqlzStart = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3089)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientEqlzStart.setStatus('current')
if mibBuilder.loadTexts: transientEqlzStart.setDescription('Start of Connection Equalization')
transientEqlzFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3090)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientEqlzFailed.setStatus('current')
if mibBuilder.loadTexts: transientEqlzFailed.setDescription('Failure of Connection Equalization')
transientEqlzCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3091)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientEqlzCompleted.setStatus('current')
if mibBuilder.loadTexts: transientEqlzCompleted.setDescription('Completion of Connection Equalization')
transientEqlzRequestDenied = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3100)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientEqlzRequestDenied.setStatus('current')
if mibBuilder.loadTexts: transientEqlzRequestDenied.setDescription('Equalization request denied (could not be performed) by enity')
transientEqlzNotRequired = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3101)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientEqlzNotRequired.setStatus('current')
if mibBuilder.loadTexts: transientEqlzNotRequired.setDescription('Equalization Null - Not Required - channel(s) are currently equalized')
transientEqlzProcessPassed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3102)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientEqlzProcessPassed.setStatus('current')
if mibBuilder.loadTexts: transientEqlzProcessPassed.setDescription('Equalization Operation completed sucessfully')
transientEqlzProcessWait = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3103)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientEqlzProcessWait.setStatus('current')
if mibBuilder.loadTexts: transientEqlzProcessWait.setDescription('Eqalization is in progress, User must wait then request equalization')
transientDispersionCompFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3110)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientDispersionCompFailed.setStatus('current')
if mibBuilder.loadTexts: transientDispersionCompFailed.setDescription('Dispersion Compensation Optimization failed')
transientAlpSettingStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3111)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientAlpSettingStarted.setStatus('current')
if mibBuilder.loadTexts: transientAlpSettingStarted.setDescription('Setting of alarm severities to Alarm Profile values started')
transientAlpSettingFinished = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3112)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientAlpSettingFinished.setStatus('current')
if mibBuilder.loadTexts: transientAlpSettingFinished.setDescription('Setting of alarm severities to Alarm Profile values completed')
transientFarEndDyingGasp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3113)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientFarEndDyingGasp.setStatus('current')
if mibBuilder.loadTexts: transientFarEndDyingGasp.setDescription('signal received from far end upon far end power loss')
transientLocalCopyMemFailDenied = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3114)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientLocalCopyMemFailDenied.setStatus('current')
if mibBuilder.loadTexts: transientLocalCopyMemFailDenied.setDescription('Local copy file fail - denied')
transientLocalCopyMemFailCrcErr = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3115)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientLocalCopyMemFailCrcErr.setStatus('current')
if mibBuilder.loadTexts: transientLocalCopyMemFailCrcErr.setDescription('Local copy file fail - CRC error')
transientAlarmProfileFactoryDefaultActivation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3116)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientAlarmProfileFactoryDefaultActivation.setStatus('current')
if mibBuilder.loadTexts: transientAlarmProfileFactoryDefaultActivation.setDescription('Alarm Profile Factory Default Activation.')
transientLocalCopyMemFailVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3120)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientLocalCopyMemFailVersionMismatch.setStatus('current')
if mibBuilder.loadTexts: transientLocalCopyMemFailVersionMismatch.setDescription('Copy MEM Fail Mismatch')
transientLocalCopyMemFailWrongState = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3121)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientLocalCopyMemFailWrongState.setStatus('current')
if mibBuilder.loadTexts: transientLocalCopyMemFailWrongState.setDescription('Incorrect Standby State')
transientLocalCopyMemFailDamagedConfFile = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3122)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientLocalCopyMemFailDamagedConfFile.setStatus('current')
if mibBuilder.loadTexts: transientLocalCopyMemFailDamagedConfFile.setDescription('Invalid Config File')
transientLocalCopyMemFailFsckFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3123)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientLocalCopyMemFailFsckFailed.setStatus('current')
if mibBuilder.loadTexts: transientLocalCopyMemFailFsckFailed.setDescription('File system check fail')
transientLocalCopyMemFailNotExist = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3124)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientLocalCopyMemFailNotExist.setStatus('current')
if mibBuilder.loadTexts: transientLocalCopyMemFailNotExist.setDescription('Loca File not exist')
transientLocalCopyMemFailGeneration = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3140)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientLocalCopyMemFailGeneration.setStatus('current')
if mibBuilder.loadTexts: transientLocalCopyMemFailGeneration.setDescription('Consistent backup generation fail')
transientCopyFileFailDisabledProtocol = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3141)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCopyFileFailDisabledProtocol.setStatus('current')
if mibBuilder.loadTexts: transientCopyFileFailDisabledProtocol.setDescription('Selected file transfer protocol disabled.')
transientAutomaticBackupReport = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3142)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientAutomaticBackupReport.setStatus('current')
if mibBuilder.loadTexts: transientAutomaticBackupReport.setDescription('Automatic Data Base Backup Report')
transientRestorationStart = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3160)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientRestorationStart.setStatus('current')
if mibBuilder.loadTexts: transientRestorationStart.setDescription('Start of Connection Restoration')
transientRestorationFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3161)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientRestorationFailed.setStatus('current')
if mibBuilder.loadTexts: transientRestorationFailed.setDescription('Failure of Connection Restoration')
transientRestorationCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3162)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientRestorationCompleted.setStatus('current')
if mibBuilder.loadTexts: transientRestorationCompleted.setDescription('Completion of Connection Restoration')
transientFarEndChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3163)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientFarEndChanged.setStatus('current')
if mibBuilder.loadTexts: transientFarEndChanged.setDescription('Neighbor Discovery Dectected a Far End Change')
transientBootUpRejected = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3170)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientBootUpRejected.setStatus('current')
if mibBuilder.loadTexts: transientBootUpRejected.setDescription('Boot up rejected')
transientThres1DayExceededFecBERCE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3175)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededFecBERCE.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededFecBERCE.setDescription('Bit error rate before FEC 1day high threshold crossed')
transientPreComputationReady = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3180)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientPreComputationReady.setStatus('current')
if mibBuilder.loadTexts: transientPreComputationReady.setDescription('Pre-Computation finished. Result either successful or failed.')
transientNeTimeChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3181))
if mibBuilder.loadTexts: transientNeTimeChanged.setStatus('current')
if mibBuilder.loadTexts: transientNeTimeChanged.setDescription('Time Change')
transientNtpSrvTestSuccessed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3182)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientNtpSrvTestSuccessed.setStatus('current')
if mibBuilder.loadTexts: transientNtpSrvTestSuccessed.setDescription('NTPTEST-SUCCESS')
transientNtpSrvTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3183)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientNtpSrvTestFailed.setStatus('current')
if mibBuilder.loadTexts: transientNtpSrvTestFailed.setDescription('NTPTEST-FAIL')
transientNtpSrvSyncStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3184)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientNtpSrvSyncStarted.setStatus('current')
if mibBuilder.loadTexts: transientNtpSrvSyncStarted.setDescription('NTP-START')
transientNtpSrvSyncFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3185)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientNtpSrvSyncFailed.setStatus('current')
if mibBuilder.loadTexts: transientNtpSrvSyncFailed.setDescription('NTP-FAIL')
transientNtpSrvSyncEnded = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3186)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientNtpSrvSyncEnded.setStatus('current')
if mibBuilder.loadTexts: transientNtpSrvSyncEnded.setDescription('NTP-END')
transientPmSnapshotStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3187)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientPmSnapshotStarted.setStatus('current')
if mibBuilder.loadTexts: transientPmSnapshotStarted.setDescription('Reference value save start')
transientPmSnapshotEnded = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3188)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientPmSnapshotEnded.setStatus('current')
if mibBuilder.loadTexts: transientPmSnapshotEnded.setDescription('Reference value save end')
transientNtpSrvSyncChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3189)).setObjects(("FspR7-MIB", "ntpServerSyncStatus"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientNtpSrvSyncChanged.setStatus('current')
if mibBuilder.loadTexts: transientNtpSrvSyncChanged.setDescription('The NTP server synchronization status changed.')
transientThres1DayExceededPhysConvSE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3190)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvSE.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvSE.setDescription('Sync Header Errors Physical Coding Layer')
transientThres1DayExceededPhysConvESTX = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3191)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvESTX.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvESTX.setDescription('Tx Errored Seconds Physical Coding Layer')
transientThres1DayExceededPhysConvCVTX = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3192)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvCVTX.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvCVTX.setDescription('Tx Coding Violations Physical Coding Layer')
transientThres1DayExceededPhysConvSETX = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3193)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvSETX.setStatus('current')
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvSETX.setDescription('Tx Sync Header Errors Physical Coding Layer')
transientCryptoRtf = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3194)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCryptoRtf.setStatus('current')
if mibBuilder.loadTexts: transientCryptoRtf.setDescription('Encryption settings reset to factory defaults')
transientCryptoFwpRevChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3195)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCryptoFwpRevChanged.setStatus('current')
if mibBuilder.loadTexts: transientCryptoFwpRevChanged.setDescription('FWP upgrade revision number is changed')
transientCryptoPasswdChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3196)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCryptoPasswdChanged.setStatus('current')
if mibBuilder.loadTexts: transientCryptoPasswdChanged.setDescription('Change of CryptoOffi Password')
transientCryptoFwpUpdate = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3197)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCryptoFwpUpdate.setStatus('current')
if mibBuilder.loadTexts: transientCryptoFwpUpdate.setDescription('A new FWP is installed')
transientCryptoKeyExchgFailCondClr = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3198)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCryptoKeyExchgFailCondClr.setStatus('current')
if mibBuilder.loadTexts: transientCryptoKeyExchgFailCondClr.setDescription('Key exchange fail counter reset')
transientCryptoAuthPasswdChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3199)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCryptoAuthPasswdChanged.setStatus('current')
if mibBuilder.loadTexts: transientCryptoAuthPasswdChanged.setDescription('Change of Authentification Password')
transientCryptoSessKeyLifetimeChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3200)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCryptoSessKeyLifetimeChanged.setStatus('current')
if mibBuilder.loadTexts: transientCryptoSessKeyLifetimeChanged.setDescription('Change of session key lifetime')
transientCryptoAuthPasswdInvalid = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3201)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientCryptoAuthPasswdInvalid.setStatus('current')
if mibBuilder.loadTexts: transientCryptoAuthPasswdInvalid.setDescription('A wrong Authentication password was sent with the command')
transientEncryptionPortSingleKeyExchgFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3202)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientEncryptionPortSingleKeyExchgFailed.setStatus('current')
if mibBuilder.loadTexts: transientEncryptionPortSingleKeyExchgFailed.setDescription('At least one Key exchange failed')
transientWaitToRevert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3203)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientWaitToRevert.setStatus('current')
if mibBuilder.loadTexts: transientWaitToRevert.setDescription('Wait to revert time started for an auto-revertive tunnel')
transientReversionStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3204)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientReversionStarted.setStatus('current')
if mibBuilder.loadTexts: transientReversionStarted.setDescription('Start of Reversion back to the nomial connection')
transientReversionFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3205)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientReversionFailed.setStatus('current')
if mibBuilder.loadTexts: transientReversionFailed.setDescription('Reversion back to the nominal connection failed')
transientReversionCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 3, 0, 3206)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientReversionCompleted.setStatus('current')
if mibBuilder.loadTexts: transientReversionCompleted.setDescription('Reversion to the nominal connection completed')
entityStateTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 1), )
if mibBuilder.loadTexts: entityStateTable.setStatus('current')
if mibBuilder.loadTexts: entityStateTable.setDescription('')
entityStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: entityStateEntry.setStatus('current')
if mibBuilder.loadTexts: entityStateEntry.setDescription('')
entityStateAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 1, 1, 1), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entityStateAdmin.setStatus('current')
if mibBuilder.loadTexts: entityStateAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full name values;\n         it will be differently displayed in TL1 SYNTAX according to TL1 display rules.\n         The transaction into the UAS state requires a special destroy/delete function.')
entityStateOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 1, 1, 2), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityStateOper.setStatus('current')
if mibBuilder.loadTexts: entityStateOper.setDescription('The Operational State will be displayed on the GUI with full name values;\n         it will be differently displayed in TL1 SYNTAX according to TL1 display rules')
entityStateSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 1, 1, 3), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityStateSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: entityStateSecondaryStates.setDescription('Secondary states of an entity.')
entityStateCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 2), )
if mibBuilder.loadTexts: entityStateCapTable.setStatus('current')
if mibBuilder.loadTexts: entityStateCapTable.setDescription('')
entityStateCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 2, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: entityStateCapEntry.setStatus('current')
if mibBuilder.loadTexts: entityStateCapEntry.setDescription('')
entityStateCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 2, 1, 1), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityStateCapAdmin.setStatus('current')
if mibBuilder.loadTexts: entityStateCapAdmin.setDescription('This object contains capabilities for entityStateAdmin object.')
controlPlaneWdmEntityStateTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 3), )
if mibBuilder.loadTexts: controlPlaneWdmEntityStateTable.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmEntityStateTable.setDescription('')
controlPlaneWdmEntityStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 3, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: controlPlaneWdmEntityStateEntry.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmEntityStateEntry.setDescription('')
controlPlaneWdmEntityStateAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 3, 1, 1), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmEntityStateAdmin.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmEntityStateAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full name values;\n         it will be differently displayed in TL1 SYNTAX according to TL1 display rules.\n         The transaction into the UAS state requires a special destroy/delete function.')
controlPlaneWdmEntityStateOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 3, 1, 2), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmEntityStateOper.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmEntityStateOper.setDescription('The Operational State will be displayed on the GUI with full name values;\n         it will be differently displayed in TL1 SYNTAX according to TL1 display rules')
controlPlaneWdmEntityStateSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 3, 1, 3), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmEntityStateSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmEntityStateSecondaryStates.setDescription('Secondary states of an entity.')
controlPlaneEntityStateCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 4), )
if mibBuilder.loadTexts: controlPlaneEntityStateCapTable.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEntityStateCapTable.setDescription('')
controlPlaneEntityStateCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 4, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: controlPlaneEntityStateCapEntry.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEntityStateCapEntry.setDescription('')
controlPlaneEntityStateCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 4, 1, 1), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEntityStateCapAdmin.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEntityStateCapAdmin.setDescription('This object contains capabilities for entityStateAdmin object.')
dependenciesTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 5), )
if mibBuilder.loadTexts: dependenciesTable.setStatus('current')
if mibBuilder.loadTexts: dependenciesTable.setDescription('')
dependenciesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 5, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "dependenciesIndex"))
if mibBuilder.loadTexts: dependenciesEntry.setStatus('current')
if mibBuilder.loadTexts: dependenciesEntry.setDescription('')
dependenciesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dependenciesIndex.setStatus('current')
if mibBuilder.loadTexts: dependenciesIndex.setDescription('Number of sequence')
dependenciesAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 5, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dependenciesAid.setStatus('current')
if mibBuilder.loadTexts: dependenciesAid.setDescription('Name')
controlPlaneEthEntityStateTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 6), )
if mibBuilder.loadTexts: controlPlaneEthEntityStateTable.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthEntityStateTable.setDescription('')
controlPlaneEthEntityStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 6, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: controlPlaneEthEntityStateEntry.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthEntityStateEntry.setDescription('')
controlPlaneEthEntityStateAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 6, 1, 1), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthEntityStateAdmin.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthEntityStateAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full name values;\n         it will be differently displayed in TL1 SYNTAX according to TL1 display rules.\n         The transaction into the UAS state requires a special destroy/delete function.')
controlPlaneEthEntityStateOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 6, 1, 2), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthEntityStateOper.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthEntityStateOper.setDescription('The Operational State will be displayed on the GUI with full name values;\n         it will be differently displayed in TL1 SYNTAX according to TL1 display rules')
controlPlaneEthEntityStateSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 6, 1, 3), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthEntityStateSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthEntityStateSecondaryStates.setDescription('Secondary states of an entity.')
controlPlaneEthEntityStateCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 7), )
if mibBuilder.loadTexts: controlPlaneEthEntityStateCapTable.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthEntityStateCapTable.setDescription('')
controlPlaneEthEntityStateCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 7, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: controlPlaneEthEntityStateCapEntry.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthEntityStateCapEntry.setDescription('')
controlPlaneEthEntityStateCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 7, 1, 1), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthEntityStateCapAdmin.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthEntityStateCapAdmin.setDescription('This object contains capabilities for entityStateAdmin object.')
controlPlaneOtnEntityStateTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 8), )
if mibBuilder.loadTexts: controlPlaneOtnEntityStateTable.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnEntityStateTable.setDescription('')
controlPlaneOtnEntityStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 8, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: controlPlaneOtnEntityStateEntry.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnEntityStateEntry.setDescription('')
controlPlaneOtnEntityStateAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 8, 1, 1), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnEntityStateAdmin.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnEntityStateAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full name values;\n         it will be differently displayed in TL1 SYNTAX according to TL1 display rules.\n         The transaction into the UAS state requires a special destroy/delete function.')
controlPlaneOtnEntityStateOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 8, 1, 2), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnEntityStateOper.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnEntityStateOper.setDescription('The Operational State will be displayed on the GUI with full name values;\n         it will be differently displayed in TL1 SYNTAX according to TL1 display rules')
controlPlaneOtnEntityStateSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 8, 1, 3), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnEntityStateSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnEntityStateSecondaryStates.setDescription('Secondary states of an entity.')
controlPlaneOtnEntityStateCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 9), )
if mibBuilder.loadTexts: controlPlaneOtnEntityStateCapTable.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnEntityStateCapTable.setDescription('')
controlPlaneOtnEntityStateCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 9, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: controlPlaneOtnEntityStateCapEntry.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnEntityStateCapEntry.setDescription('')
controlPlaneOtnEntityStateCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 1, 9, 1, 1), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnEntityStateCapAdmin.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnEntityStateCapAdmin.setDescription('This object contains capabilities for entityStateAdmin object.')
moduleDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 1), )
if mibBuilder.loadTexts: moduleDiagnosticsTable.setStatus('current')
if mibBuilder.loadTexts: moduleDiagnosticsTable.setDescription('The ModuleDiagnostics table. This table extends the entries\n         in the inventoryTable for the FspR7 modules.')
moduleDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: moduleDiagnosticsEntry.setStatus('current')
if mibBuilder.loadTexts: moduleDiagnosticsEntry.setDescription('An entry in the ModuleDiagnostics table. Each entry in this table represents\n         a field replacable module in a shelf, which is inserted into or removed from a container (slot).')
moduleDiagnosticsTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 1, 1, 1), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDiagnosticsTemp.setStatus('current')
if mibBuilder.loadTexts: moduleDiagnosticsTemp.setDescription('Actual temperature on the module.')
moduleDiagnosticsUpperTempThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 1, 1, 2), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDiagnosticsUpperTempThres.setStatus('current')
if mibBuilder.loadTexts: moduleDiagnosticsUpperTempThres.setDescription('Upper temperature threshold for threshold crossing alarm.\n         Temperatures above this value will cause a Notification.')
moduleDiagnosticsLowerTempThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 1, 1, 3), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDiagnosticsLowerTempThres.setStatus('current')
if mibBuilder.loadTexts: moduleDiagnosticsLowerTempThres.setDescription('Lower temperature threshold for threshold crossing alarm.\n         Temperatures below this value will cause a Notification.')
moduleDiagnosticsCapabilityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 1, 1, 4), FspR7CapInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDiagnosticsCapabilityLevel.setStatus('current')
if mibBuilder.loadTexts: moduleDiagnosticsCapabilityLevel.setDescription('Capability level reported by HW')
moduleDiagnosticsCurrentLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 1, 1, 5), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDiagnosticsCurrentLowThres.setStatus('current')
if mibBuilder.loadTexts: moduleDiagnosticsCurrentLowThres.setDescription('Lower current threshold for threshold crossing alarm.\n         Current below this value will cause a Notification.')
moduleDiagnosticsCurrentHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 1, 1, 6), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDiagnosticsCurrentHighThres.setStatus('current')
if mibBuilder.loadTexts: moduleDiagnosticsCurrentHighThres.setDescription('Higher current threshold for threshold crossing alarm.\n         Current below this value will cause a Notification.')
moduleDiagnosticsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDiagnosticsDescription.setStatus('current')
if mibBuilder.loadTexts: moduleDiagnosticsDescription.setDescription('')
moduleDiagnosticsInventoryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDiagnosticsInventoryDescription.setStatus('current')
if mibBuilder.loadTexts: moduleDiagnosticsInventoryDescription.setDescription('')
currentDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 2), )
if mibBuilder.loadTexts: currentDiagnosticsTable.setStatus('current')
if mibBuilder.loadTexts: currentDiagnosticsTable.setDescription('The currentDiagnostics table. This table extends the entries\n         in the inventoryTable for the FspR7 modules.')
currentDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 2, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentDiagnosticsEntry.setStatus('current')
if mibBuilder.loadTexts: currentDiagnosticsEntry.setDescription('An entry in the currentDiagnostics table.')
currentDiagnosticsAmpere = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 2, 1, 1), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDiagnosticsAmpere.setStatus('current')
if mibBuilder.loadTexts: currentDiagnosticsAmpere.setDescription('Instantaneous current measured.')
currentDiagnosticsUpperThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 2, 1, 2), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDiagnosticsUpperThres.setStatus('current')
if mibBuilder.loadTexts: currentDiagnosticsUpperThres.setDescription('Upper current threshold for threshold crossing condition.\n         Currents above this value will cause a Notification')
currentDiagnosticsPsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 2, 1, 3), FspR7PsuOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDiagnosticsPsuOutputPower.setStatus('current')
if mibBuilder.loadTexts: currentDiagnosticsPsuOutputPower.setDescription('Maximum PSU Output Power')
moduleConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 3), )
if mibBuilder.loadTexts: moduleConfigTable.setStatus('current')
if mibBuilder.loadTexts: moduleConfigTable.setDescription('The ModuleConfig table. This table extends the entries in the\n         inventoryTable for the FspR7 modules.')
moduleConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 3, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: moduleConfigEntry.setStatus('current')
if mibBuilder.loadTexts: moduleConfigEntry.setDescription('An entry in the ModuleConfig table. Each entry in this table represents a\n         field replacable module in a shelf, which is inserted into or removed from a container (slot).')
moduleConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 3, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleConfigAlias.setStatus('current')
if mibBuilder.loadTexts: moduleConfigAlias.setDescription('A string, configurable by the operator, containing\n         a symbolic name for the module.')
moduleConfigCapabilityLevelProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 3, 1, 2), FspR7CapInventory()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleConfigCapabilityLevelProvision.setStatus('current')
if mibBuilder.loadTexts: moduleConfigCapabilityLevelProvision.setDescription('Capability level provisioned')
moduleConfigOutputReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 3, 1, 3), FspR7TifOutputReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleConfigOutputReset.setStatus('current')
if mibBuilder.loadTexts: moduleConfigOutputReset.setDescription('Has the same function as the HW switch at the UTM board')
moduleConfigScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 3, 1, 4), FspR7Scrambling()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleConfigScrambling.setStatus('current')
if mibBuilder.loadTexts: moduleConfigScrambling.setDescription('Virtual Fac. Scrambling')
moduleConfigLagSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleConfigLagSysPrio.setStatus('current')
if mibBuilder.loadTexts: moduleConfigLagSysPrio.setDescription('LAG Actor Sys Pri. Part of LAG ID')
moduleConfigEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 3, 1, 6), FspR7EqlzAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleConfigEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: moduleConfigEqlzAdmin.setDescription('Scheduled Equalization Administration')
moduleConfigInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 3, 1, 7), FspR7InitEqualization()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleConfigInitiateEqualization.setStatus('current')
if mibBuilder.loadTexts: moduleConfigInitiateEqualization.setDescription('Initiate Equalization')
moduleConfigCac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 3, 1, 8), FspR7L2CacEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleConfigCac.setStatus('current')
if mibBuilder.loadTexts: moduleConfigCac.setDescription('Enable of CAC')
moduleDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4), )
if mibBuilder.loadTexts: moduleDataTable.setStatus('current')
if mibBuilder.loadTexts: moduleDataTable.setDescription('')
moduleDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: moduleDataEntry.setStatus('current')
if mibBuilder.loadTexts: moduleDataEntry.setDescription('')
moduleDataDeploymentScenario = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 1), FspR7DeploymentScenario()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataDeploymentScenario.setStatus('current')
if mibBuilder.loadTexts: moduleDataDeploymentScenario.setDescription('Describes how the card is applied related to a network scenario')
moduleDataHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 2), Unsigned32()).setUnits('0.1 HU').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataHeight.setStatus('current')
if mibBuilder.loadTexts: moduleDataHeight.setDescription('Module Height')
moduleDataWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 3), Unsigned32()).setUnits('0.1 HP').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataWidth.setStatus('current')
if mibBuilder.loadTexts: moduleDataWidth.setDescription('Module Width')
moduleDataNetworkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataNetworkPorts.setStatus('current')
if mibBuilder.loadTexts: moduleDataNetworkPorts.setDescription('Number of Network Ports')
moduleDataClientPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 96), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataClientPorts.setStatus('current')
if mibBuilder.loadTexts: moduleDataClientPorts.setDescription('Number of Client Ports')
moduleDataStages = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 6), FspR7Stages()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataStages.setStatus('current')
if mibBuilder.loadTexts: moduleDataStages.setDescription('Number Of Stages')
moduleDataConnectionLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataConnectionLocation.setStatus('current')
if mibBuilder.loadTexts: moduleDataConnectionLocation.setDescription('Defines the Location of the connector of a module in numbers from left to ricght (view is from the front)')
moduleDataInternalPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataInternalPorts.setStatus('current')
if mibBuilder.loadTexts: moduleDataInternalPorts.setDescription('Number of Internal Ports')
moduleDataInternalPlugs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 9), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataInternalPlugs.setStatus('current')
if mibBuilder.loadTexts: moduleDataInternalPlugs.setDescription('Internal Plugs Required')
moduleDataInternalPlugRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 10), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataInternalPlugRates.setStatus('current')
if mibBuilder.loadTexts: moduleDataInternalPlugRates.setDescription('List of Provisionable Internal Plug Rates Supported')
moduleDataChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 11), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataChannel.setStatus('current')
if mibBuilder.loadTexts: moduleDataChannel.setDescription('Possible internal channel')
moduleDataUpgradePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataUpgradePorts.setStatus('current')
if mibBuilder.loadTexts: moduleDataUpgradePorts.setDescription('Number of Upgrade Ports')
moduleDataSerialPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 2), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataSerialPorts.setStatus('current')
if mibBuilder.loadTexts: moduleDataSerialPorts.setDescription('Number of Serial Ports')
moduleDataEccPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 20), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataEccPorts.setStatus('current')
if mibBuilder.loadTexts: moduleDataEccPorts.setDescription('Number of PPP over ECC Ports')
moduleDataMaxPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 15), Unsigned32()).setUnits('0.1 W').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataMaxPowerConsumption.setStatus('current')
if mibBuilder.loadTexts: moduleDataMaxPowerConsumption.setDescription('Max Device Power Consumption')
moduleDataScuRing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 16), FspR7ScuRing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataScuRing.setStatus('current')
if mibBuilder.loadTexts: moduleDataScuRing.setDescription('SCU ring interconnect')
moduleDataNetworkPlugs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 17), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataNetworkPlugs.setStatus('current')
if mibBuilder.loadTexts: moduleDataNetworkPlugs.setDescription('Network Plugs Required')
moduleDataMidstagePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataMidstagePorts.setStatus('current')
if mibBuilder.loadTexts: moduleDataMidstagePorts.setDescription('Number of Midstage Ports')
moduleDataMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 19), FspR7TransmissionMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataMode.setStatus('current')
if mibBuilder.loadTexts: moduleDataMode.setDescription('The transmission mode of the module.')
moduleDataRoadmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 20), FspR7RoadmNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataRoadmNumber.setStatus('current')
if mibBuilder.loadTexts: moduleDataRoadmNumber.setDescription('Number for ROADM module typically associated with a Network Fiber or Degree')
moduleDataChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 21), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataChannelsNumber.setStatus('current')
if mibBuilder.loadTexts: moduleDataChannelsNumber.setDescription('Number of channels supported by an entity')
moduleDataChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 22), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: moduleDataChannelSpacing.setDescription('ITU Grid channel spacing')
moduleDataTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 23), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: moduleDataTransmitChannel.setDescription('Channel')
moduleDataCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 24), FspR7Category()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataCategory.setStatus('current')
if mibBuilder.loadTexts: moduleDataCategory.setDescription('Used For Internal Purposes (and possibly for pre-selection in GUI)')
moduleDataFanPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 25), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataFanPorts.setStatus('current')
if mibBuilder.loadTexts: moduleDataFanPorts.setDescription('Number of Fan Plug ins')
moduleDataLanPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 26), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 20), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataLanPorts.setStatus('current')
if mibBuilder.loadTexts: moduleDataLanPorts.setDescription('Number of LAN Ports')
moduleDataMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 27), FspR7Mapping()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataMapping.setStatus('current')
if mibBuilder.loadTexts: moduleDataMapping.setDescription('Type of mapping; transparent or framing')
moduleDataBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 28), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataBand.setStatus('current')
if mibBuilder.loadTexts: moduleDataBand.setDescription('Band Provision. Reference to BAND__INVENTORY.')
moduleDataChannelsProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 29), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataChannelsProvision.setStatus('current')
if mibBuilder.loadTexts: moduleDataChannelsProvision.setDescription('Number of channels supported by an entity')
moduleDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 30), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataType.setStatus('current')
if mibBuilder.loadTexts: moduleDataType.setDescription('The TYPE of Module.')
moduleDataInternalPlugsReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 4, 1, 33), FspR7OpticalInterfaceReachCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataInternalPlugsReach.setStatus('current')
if mibBuilder.loadTexts: moduleDataInternalPlugsReach.setDescription('Reach of Internal Plugs')
wdmChannelModuleInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 5), )
if mibBuilder.loadTexts: wdmChannelModuleInventoryTable.setStatus('current')
if mibBuilder.loadTexts: wdmChannelModuleInventoryTable.setDescription('The WdmChannelModuleInventory table. This table extends the entries in\n         the inventoryTable for the FspR7 wdmChannelModules.')
wdmChannelModuleInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 5, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: wdmChannelModuleInventoryEntry.setStatus('current')
if mibBuilder.loadTexts: wdmChannelModuleInventoryEntry.setDescription('An entry in the WdmChannelModuleInventory table. Each entry in this\n         table represents a field replacable wdmChannelModule in a shelf,\n         which is inserted into or removed from a container (slot).')
wdmChannelModuleInventoryChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 5, 1, 1), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmChannelModuleInventoryChannelId.setStatus('current')
if mibBuilder.loadTexts: wdmChannelModuleInventoryChannelId.setDescription('The WDM channel identifier of the wdmChannelModule.')
wdmChannelModuleInventoryReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 5, 1, 2), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmChannelModuleInventoryReach.setStatus('current')
if mibBuilder.loadTexts: wdmChannelModuleInventoryReach.setDescription('The optical reach of the wdmChannelModule.')
wdmChannelModuleDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 6), )
if mibBuilder.loadTexts: wdmChannelModuleDataTable.setStatus('current')
if mibBuilder.loadTexts: wdmChannelModuleDataTable.setDescription('The WdmChannelModuleData table. This table extends the entries\n         in the inventoryTable for the FspR7 wdmChannelModules.')
wdmChannelModuleDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 6, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: wdmChannelModuleDataEntry.setStatus('current')
if mibBuilder.loadTexts: wdmChannelModuleDataEntry.setDescription('An entry in the WdmChannelModuleData table. Each entry in this table\n         represents a field replacable wdmChannelModule in a shelf, which is\n         inserted into or removed from a container (slot).')
wdmChannelModuleDataSuppClientPlugRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 6, 1, 1), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmChannelModuleDataSuppClientPlugRates.setStatus('current')
if mibBuilder.loadTexts: wdmChannelModuleDataSuppClientPlugRates.setDescription('The supported client plug rates of the wdmChannelModule.')
wdmChannelModuleDataSuppNetworkPlugRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 6, 1, 2), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmChannelModuleDataSuppNetworkPlugRates.setStatus('current')
if mibBuilder.loadTexts: wdmChannelModuleDataSuppNetworkPlugRates.setDescription('The supported network plug rates of the wdmChannelModule.')
wdmChannelModuleDataSuppClientPlugTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 6, 1, 3), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmChannelModuleDataSuppClientPlugTypes.setStatus('current')
if mibBuilder.loadTexts: wdmChannelModuleDataSuppClientPlugTypes.setDescription('The supported client plug types of the wdmChannelModule.')
wdmChannelModuleDataSuppNetworkPlugTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 6, 1, 4), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmChannelModuleDataSuppNetworkPlugTypes.setStatus('current')
if mibBuilder.loadTexts: wdmChannelModuleDataSuppNetworkPlugTypes.setDescription('The supported network plug types of the wdmChannelModule.')
plugInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 7), )
if mibBuilder.loadTexts: plugInventoryTable.setStatus('current')
if mibBuilder.loadTexts: plugInventoryTable.setDescription('The PlugInventory table. This table extends the entries\n         in the inventoryTable for the FspR7 plugs (SFP/XFP). The data in this table\n         only applies to equipped plugs.')
plugInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 7, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: plugInventoryEntry.setStatus('current')
if mibBuilder.loadTexts: plugInventoryEntry.setDescription('An entry in the PlugInventory table. Each entry in this table represents\n         a field replacable plug in a card, which is inserted into or removed from\n         a container (slot).')
plugInventoryMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 7, 1, 1), FspR7PlugDataRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugInventoryMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: plugInventoryMaxDataRate.setDescription('The maximal supported data rate of the plug.')
plugInventoryChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 7, 1, 2), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugInventoryChannelId.setStatus('current')
if mibBuilder.loadTexts: plugInventoryChannelId.setDescription('The supported optical channel of the plug.')
plugInventoryReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 7, 1, 3), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugInventoryReach.setStatus('current')
if mibBuilder.loadTexts: plugInventoryReach.setDescription('The supported optical reach of the plug.')
plugDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 8), )
if mibBuilder.loadTexts: plugDataTable.setStatus('current')
if mibBuilder.loadTexts: plugDataTable.setDescription('The plugData table. This table extends the entries\n         in the entityTable for the FspR7 plugs (SFP/XFP).')
plugDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 8, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: plugDataEntry.setStatus('current')
if mibBuilder.loadTexts: plugDataEntry.setDescription('An entry in the plugData table. Each entry in this table represents\n         a field replacable plug in a card, which may be inserted into or\n         removed from a container (slot).')
plugDataConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 8, 1, 1), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDataConnectorType.setStatus('current')
if mibBuilder.loadTexts: plugDataConnectorType.setDescription('The type of external connector on a plug (eg. SC, LC, RJ45, etc).')
plugDataFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 8, 1, 2), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDataFiberType.setStatus('current')
if mibBuilder.loadTexts: plugDataFiberType.setDescription('The fiber type of this plug.')
plugDataLoopbackAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 8, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 300), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDataLoopbackAttenuation.setStatus('current')
if mibBuilder.loadTexts: plugDataLoopbackAttenuation.setDescription('Loop back attenuation of the plug')
plugDataMaxPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 8, 1, 4), Unsigned32()).setUnits('0.1 W').setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDataMaxPowerConsumption.setStatus('current')
if mibBuilder.loadTexts: plugDataMaxPowerConsumption.setDescription('Max Device Power Consumption')
apsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 9), )
if mibBuilder.loadTexts: apsConfigTable.setStatus('current')
if mibBuilder.loadTexts: apsConfigTable.setDescription('This table contains attributes related to the automatic protection\n         switching (APS) functionality.')
apsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 9, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: apsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: apsConfigEntry.setDescription('An entry in the APS configuration table. There is one entry in this\n         table for each protection group.')
apsConfigSDswitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 9, 1, 1), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsConfigSDswitching.setStatus('current')
if mibBuilder.loadTexts: apsConfigSDswitching.setDescription('This state controls whether the switch criteria for the\n         APS group will include the SignalDegrade alarm.')
apsConfigHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 9, 1, 2), ApsHoldoffTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsConfigHoldOffTime.setStatus('current')
if mibBuilder.loadTexts: apsConfigHoldOffTime.setDescription('This value controls the switch delay (0 to 90 seconds in\n         100ms steps) for the protection group. Changing the hold-off\n         time when the timer is active will not affect the active\n         timer. The change will take effect the next time the timer\n         is active.')
apsConfigWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 9, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 12), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsConfigWaitToRestore.setStatus('current')
if mibBuilder.loadTexts: apsConfigWaitToRestore.setDescription('Wait to Restore')
apsProtGroupStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 10), )
if mibBuilder.loadTexts: apsProtGroupStatusTable.setStatus('current')
if mibBuilder.loadTexts: apsProtGroupStatusTable.setDescription('This table contains status information related to the automatic protection\n         switching (APS) functionality.')
apsProtGroupStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 10, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: apsProtGroupStatusEntry.setStatus('current')
if mibBuilder.loadTexts: apsProtGroupStatusEntry.setDescription('An entry in the APS status table. There is one entry in this table\n         for each protection group.')
apsProtGroupStatusApsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 10, 1, 1), ApsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsProtGroupStatusApsType.setStatus('current')
if mibBuilder.loadTexts: apsProtGroupStatusApsType.setDescription('The type of APS implemented in this protection group.')
apsProtGroupStatusDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 10, 1, 2), ApsDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsProtGroupStatusDirection.setStatus('current')
if mibBuilder.loadTexts: apsProtGroupStatusDirection.setDescription("Indicates whether the APS function is 'unidirectional' (single-ended)\n         or 'bidirectional' (dual-ended).")
apsProtGroupStatusRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 10, 1, 3), ApsRevertMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsProtGroupStatusRevertiveMode.setStatus('current')
if mibBuilder.loadTexts: apsProtGroupStatusRevertiveMode.setDescription('Indicates if revertive switching is enable dor disabled.')
apsProtGroupStatusProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 10, 1, 4), ProtectionMech()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsProtGroupStatusProtectionMech.setStatus('current')
if mibBuilder.loadTexts: apsProtGroupStatusProtectionMech.setDescription('The protection type of this protection group.')
apsProtGroupStatusWorkingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 10, 1, 5), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsProtGroupStatusWorkingIndex.setStatus('current')
if mibBuilder.loadTexts: apsProtGroupStatusWorkingIndex.setDescription('The entityIndex of the working section in the APS group.')
apsProtGroupStatusProtectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 10, 1, 6), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsProtGroupStatusProtectionIndex.setStatus('current')
if mibBuilder.loadTexts: apsProtGroupStatusProtectionIndex.setDescription('The entityIndex of the protection section. The protection section will\n         become the active section when an APS switch occurs (ie, as a result of a failure on\n         the working section).')
apsProtGroupStatusProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 10, 1, 7), FspR7ProtectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsProtGroupStatusProtectionType.setStatus('current')
if mibBuilder.loadTexts: apsProtGroupStatusProtectionType.setDescription('This describes the topology and level of the protection (OCH or\n         OM -Level on a ring; Line in PT-PT and Line or Dualhomed on a Feeder).')
apsProtFacilityConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 11), )
if mibBuilder.loadTexts: apsProtFacilityConfigTable.setStatus('current')
if mibBuilder.loadTexts: apsProtFacilityConfigTable.setDescription('This table contains attributes related to the automatic protection\n         switching (APS) functionality on a facility involved in a protection group.')
apsProtFacilityConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 11, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: apsProtFacilityConfigEntry.setStatus('current')
if mibBuilder.loadTexts: apsProtFacilityConfigEntry.setDescription('An entry in the APS configuration table. There is one entry in this table\n         for each facility involved in a protection group')
apsProtFacilityConfigSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 11, 1, 1), FspR7APSCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsProtFacilityConfigSwitchCommand.setStatus('current')
if mibBuilder.loadTexts: apsProtFacilityConfigSwitchCommand.setDescription('The switch command action for this facility. A command resulting\n         in a switch event will also cause a change of the facility secondary state\n         and a corresponding condition. Addressed by this command is the active port,\n         the port to switch away from. Since this is a manual switch command, it will\n         not switch if other port suffers from a signalfailure or a signal degrade.')
apsProtFacilityConfigInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 11, 1, 2), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsProtFacilityConfigInhibitSwitchToProt.setStatus('current')
if mibBuilder.loadTexts: apsProtFacilityConfigInhibitSwitchToProt.setDescription('Inhibit Switch to protection facility. Inhibition blocks an automatic switch\n         to the protection facility. Valid only for the working facility.')
apsProtFacilityConfigInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 11, 1, 3), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsProtFacilityConfigInhibitSwitchToWork.setStatus('current')
if mibBuilder.loadTexts: apsProtFacilityConfigInhibitSwitchToWork.setDescription('Inhibit Switch to working facility. Inhibition blocks an automatic switch to the\n         working facility. Valid only for the protection facility.')
shelfDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 12), )
if mibBuilder.loadTexts: shelfDiagnosticsTable.setStatus('current')
if mibBuilder.loadTexts: shelfDiagnosticsTable.setDescription('The ShelfDiagnostics table. This table extends the entries\n         in the inventoryTable for the FspR7 shelves.')
shelfDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 12, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: shelfDiagnosticsEntry.setStatus('current')
if mibBuilder.loadTexts: shelfDiagnosticsEntry.setDescription('An entry in the ShelfDiagnostics table. Each entry in this table\n         represents a shelf.')
shelfDiagnosticsPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 12, 1, 1), Unsigned32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDiagnosticsPowerConsumption.setStatus('current')
if mibBuilder.loadTexts: shelfDiagnosticsPowerConsumption.setDescription('Actual power consumption of the shelf.')
shelfDiagnosticsPowerOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 12, 1, 2), Unsigned32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDiagnosticsPowerOutput.setStatus('current')
if mibBuilder.loadTexts: shelfDiagnosticsPowerOutput.setDescription('Actual power output of the shelf.')
shelfDiagnosticsMaxPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 12, 1, 3), Unsigned32()).setUnits('0.1 W').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDiagnosticsMaxPowerConsumption.setStatus('current')
if mibBuilder.loadTexts: shelfDiagnosticsMaxPowerConsumption.setDescription('Max Device Power Consumption')
dcnTopologyDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 13), )
if mibBuilder.loadTexts: dcnTopologyDataTable.setStatus('current')
if mibBuilder.loadTexts: dcnTopologyDataTable.setDescription('')
dcnTopologyDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 13, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "dcnTopologyDataIndex"))
if mibBuilder.loadTexts: dcnTopologyDataEntry.setStatus('current')
if mibBuilder.loadTexts: dcnTopologyDataEntry.setDescription('List of detected nodes in the DCN topology.')
dcnTopologyDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 13, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dcnTopologyDataIndex.setStatus('current')
if mibBuilder.loadTexts: dcnTopologyDataIndex.setDescription('')
dcnTopologyDataNodeIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 13, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnTopologyDataNodeIpAddress.setStatus('current')
if mibBuilder.loadTexts: dcnTopologyDataNodeIpAddress.setDescription('List of IP Addresses, Position of list is the internal NODE-ID in the ring')
dcnTopologyConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 14), )
if mibBuilder.loadTexts: dcnTopologyConfigTable.setStatus('current')
if mibBuilder.loadTexts: dcnTopologyConfigTable.setDescription('')
dcnTopologyConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 14, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: dcnTopologyConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dcnTopologyConfigEntry.setDescription('')
dcnTopologyConfigActivateDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 14, 1, 1), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcnTopologyConfigActivateDetect.setStatus('current')
if mibBuilder.loadTexts: dcnTopologyConfigActivateDetect.setDescription('Initialize Topology Detection')
dcnTopologyStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 15), )
if mibBuilder.loadTexts: dcnTopologyStatusTable.setStatus('current')
if mibBuilder.loadTexts: dcnTopologyStatusTable.setDescription('')
dcnTopologyStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 15, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: dcnTopologyStatusEntry.setStatus('current')
if mibBuilder.loadTexts: dcnTopologyStatusEntry.setDescription('')
dcnTopologyStatusTopologyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 15, 1, 1), FspR7TopologyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnTopologyStatusTopologyType.setStatus('current')
if mibBuilder.loadTexts: dcnTopologyStatusTopologyType.setDescription('Monitored Topology Type')
otdrConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 16), )
if mibBuilder.loadTexts: otdrConfigTable.setStatus('current')
if mibBuilder.loadTexts: otdrConfigTable.setDescription('')
otdrConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 16, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: otdrConfigEntry.setStatus('current')
if mibBuilder.loadTexts: otdrConfigEntry.setDescription('Configuration of OTDR analysis.')
otdrConfigTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 16, 1, 1), FspR7OtdrPeriod()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: otdrConfigTimePeriod.setStatus('current')
if mibBuilder.loadTexts: otdrConfigTimePeriod.setDescription('NONE - OTDR measurement disabled otherwise the OTDR duration in minutes.')
otdrDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 17), )
if mibBuilder.loadTexts: otdrDataTable.setStatus('current')
if mibBuilder.loadTexts: otdrDataTable.setDescription('')
otdrDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 17, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: otdrDataEntry.setStatus('current')
if mibBuilder.loadTexts: otdrDataEntry.setDescription('')
otdrDataRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 17, 1, 1), Unsigned32()).setUnits('Min').setMaxAccess("readonly")
if mibBuilder.loadTexts: otdrDataRemainingTime.setStatus('current')
if mibBuilder.loadTexts: otdrDataRemainingTime.setDescription("Time Remaining for Completion of OTDR Measurement. The timer is set by an Operation with parameter 'MEASURE'")
edfaConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 18), )
if mibBuilder.loadTexts: edfaConfigTable.setStatus('current')
if mibBuilder.loadTexts: edfaConfigTable.setDescription('')
edfaConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 18, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: edfaConfigEntry.setStatus('current')
if mibBuilder.loadTexts: edfaConfigEntry.setDescription('')
edfaConfigTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50, 0), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfaConfigTilt.setStatus('current')
if mibBuilder.loadTexts: edfaConfigTilt.setDescription('Change of optical channel power in dB over the complete transmission band')
edfaConfigGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 18, 1, 2), FspR7Gain()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfaConfigGain.setStatus('current')
if mibBuilder.loadTexts: edfaConfigGain.setDescription('Gain.')
edfaConfigVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 18, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(50, 350), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfaConfigVariableGain.setStatus('current')
if mibBuilder.loadTexts: edfaConfigVariableGain.setDescription('Variable Gain of EDFA')
opticalAmplifierEquipmentDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 19), )
if mibBuilder.loadTexts: opticalAmplifierEquipmentDiagnosticsTable.setStatus('current')
if mibBuilder.loadTexts: opticalAmplifierEquipmentDiagnosticsTable.setDescription('')
opticalAmplifierEquipmentDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 19, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: opticalAmplifierEquipmentDiagnosticsEntry.setStatus('current')
if mibBuilder.loadTexts: opticalAmplifierEquipmentDiagnosticsEntry.setDescription('')
opticalAmplifierEquipmentDiagnosticsSubTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 19, 1, 1), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalAmplifierEquipmentDiagnosticsSubTemp.setStatus('current')
if mibBuilder.loadTexts: opticalAmplifierEquipmentDiagnosticsSubTemp.setDescription('Submodule Temperature')
opticalAmplifierEquipmentDiagnosticsUpperSubTempThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 19, 1, 2), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalAmplifierEquipmentDiagnosticsUpperSubTempThres.setStatus('current')
if mibBuilder.loadTexts: opticalAmplifierEquipmentDiagnosticsUpperSubTempThres.setDescription('Submodule High Temperature Threshold')
shelfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 20), )
if mibBuilder.loadTexts: shelfConfigTable.setStatus('current')
if mibBuilder.loadTexts: shelfConfigTable.setDescription('')
shelfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 20, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: shelfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: shelfConfigEntry.setDescription('')
shelfConfigRack = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 20, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shelfConfigRack.setStatus('current')
if mibBuilder.loadTexts: shelfConfigRack.setDescription('Rack Containing Shelf')
shelfConfigRackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 20, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shelfConfigRackNumber.setStatus('current')
if mibBuilder.loadTexts: shelfConfigRackNumber.setDescription('Number of the Rack')
shelfConfigRackOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 20, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 45), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shelfConfigRackOrder.setStatus('current')
if mibBuilder.loadTexts: shelfConfigRackOrder.setDescription('Number place where the Shelf is placed in the rack (buttom up counting)')
dcnTopologyConfigCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 21), )
if mibBuilder.loadTexts: dcnTopologyConfigCapTable.setStatus('current')
if mibBuilder.loadTexts: dcnTopologyConfigCapTable.setDescription('')
dcnTopologyConfigCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 21, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: dcnTopologyConfigCapEntry.setStatus('current')
if mibBuilder.loadTexts: dcnTopologyConfigCapEntry.setDescription('')
dcnTopologyConfigCapActivateDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 21, 1, 1), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnTopologyConfigCapActivateDetect.setStatus('current')
if mibBuilder.loadTexts: dcnTopologyConfigCapActivateDetect.setDescription('This object contains capabilities for dcnTopologyConfigActivateDetect object.')
lanIpDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 22), )
if mibBuilder.loadTexts: lanIpDataTable.setStatus('current')
if mibBuilder.loadTexts: lanIpDataTable.setDescription("List of Entitiey AID's of OSC's belonging to this LAN")
lanIpDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 22, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: lanIpDataEntry.setStatus('current')
if mibBuilder.loadTexts: lanIpDataEntry.setDescription('')
lanIpDataOscmMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 22, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanIpDataOscmMembers.setStatus('current')
if mibBuilder.loadTexts: lanIpDataOscmMembers.setDescription("List of Entity AID's (modules, ports) belonging to this LAN")
eRoadmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 23), )
if mibBuilder.loadTexts: eRoadmConfigTable.setStatus('current')
if mibBuilder.loadTexts: eRoadmConfigTable.setDescription('')
eRoadmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 23, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: eRoadmConfigEntry.setStatus('current')
if mibBuilder.loadTexts: eRoadmConfigEntry.setDescription('')
eRoadmConfigOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-250, 50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eRoadmConfigOpticalSetPoint.setStatus('current')
if mibBuilder.loadTexts: eRoadmConfigOpticalSetPoint.setDescription('Sets the optical power for power equalization in ROADM or for channel power control in OPCM')
eRoadmConfigOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 30), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eRoadmConfigOffset.setStatus('current')
if mibBuilder.loadTexts: eRoadmConfigOffset.setDescription('Sets the offset for the mean optical power for power equalization in ROADM')
eRoadmConfigTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50, 0), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eRoadmConfigTilt.setStatus('current')
if mibBuilder.loadTexts: eRoadmConfigTilt.setDescription('Change of optical channel power in dB over the complete transmission band')
eRoadmConfigInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 23, 1, 4), FspR7InitEqualization()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eRoadmConfigInitiateEqualization.setStatus('current')
if mibBuilder.loadTexts: eRoadmConfigInitiateEqualization.setDescription('Initiate Equalization')
eRoadmDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 24), )
if mibBuilder.loadTexts: eRoadmDataTable.setStatus('current')
if mibBuilder.loadTexts: eRoadmDataTable.setDescription('')
eRoadmDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 24, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: eRoadmDataEntry.setStatus('current')
if mibBuilder.loadTexts: eRoadmDataEntry.setDescription('')
eRoadmDataSumTransmited = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 24, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 80), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmDataSumTransmited.setStatus('current')
if mibBuilder.loadTexts: eRoadmDataSumTransmited.setDescription('Sum of Transmitted Optical Channels')
eRoadmDataSumReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 24, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 80), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmDataSumReceived.setStatus('current')
if mibBuilder.loadTexts: eRoadmDataSumReceived.setDescription('Sum of Received Optical Channels')
eRoadmDataConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 24, 1, 3), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmDataConnectionState.setStatus('current')
if mibBuilder.loadTexts: eRoadmDataConnectionState.setDescription('Connection State')
eRoadmInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25), )
if mibBuilder.loadTexts: eRoadmInfoTable.setStatus('current')
if mibBuilder.loadTexts: eRoadmInfoTable.setDescription('This table contains information for EROADM')
eRoadmInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: eRoadmInfoEntry.setStatus('current')
if mibBuilder.loadTexts: eRoadmInfoEntry.setDescription('')
eRoadmInfoNetworkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmInfoNetworkPorts.setStatus('current')
if mibBuilder.loadTexts: eRoadmInfoNetworkPorts.setDescription('Number of Network Ports')
eRoadmInfoClientPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 96), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmInfoClientPorts.setStatus('current')
if mibBuilder.loadTexts: eRoadmInfoClientPorts.setDescription('Number of Client Ports')
eRoadmInfoInternalPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmInfoInternalPorts.setStatus('current')
if mibBuilder.loadTexts: eRoadmInfoInternalPorts.setDescription('Number of Internal Ports')
eRoadmInfoInternalPlugs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25, 1, 4), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmInfoInternalPlugs.setStatus('current')
if mibBuilder.loadTexts: eRoadmInfoInternalPlugs.setDescription('Internal Plugs Required')
eRoadmInfoInternalPlugRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25, 1, 5), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmInfoInternalPlugRates.setStatus('current')
if mibBuilder.loadTexts: eRoadmInfoInternalPlugRates.setDescription('List of Provisionable Internal Plug Rates Supported')
eRoadmInfoChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25, 1, 6), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmInfoChannel.setStatus('current')
if mibBuilder.loadTexts: eRoadmInfoChannel.setDescription('Possible internal channel')
eRoadmInfoShelfHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25, 1, 7), Unsigned32()).setUnits('HU').setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmInfoShelfHeight.setStatus('current')
if mibBuilder.loadTexts: eRoadmInfoShelfHeight.setDescription('Height of Shelf in HU')
eRoadmInfoUpgradePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmInfoUpgradePorts.setStatus('current')
if mibBuilder.loadTexts: eRoadmInfoUpgradePorts.setDescription('Number of Upgrade Ports')
eRoadmInfoMaxPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25, 1, 9), Unsigned32()).setUnits('0.1 W').setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmInfoMaxPowerConsumption.setStatus('current')
if mibBuilder.loadTexts: eRoadmInfoMaxPowerConsumption.setDescription('Max Device Power Consumption')
eRoadmInfoScuRing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25, 1, 10), FspR7ScuRing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmInfoScuRing.setStatus('current')
if mibBuilder.loadTexts: eRoadmInfoScuRing.setDescription('SCU ring interconnect')
eRoadmInfoChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 25, 1, 11), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmInfoChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: eRoadmInfoChannelSpacing.setDescription('ITU Grid channel spacing')
shelfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26), )
if mibBuilder.loadTexts: shelfInfoTable.setStatus('current')
if mibBuilder.loadTexts: shelfInfoTable.setDescription('This table contains information for SHELF')
shelfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: shelfInfoEntry.setStatus('current')
if mibBuilder.loadTexts: shelfInfoEntry.setDescription('')
shelfInfoStandardSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 20), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInfoStandardSlots.setStatus('current')
if mibBuilder.loadTexts: shelfInfoStandardSlots.setDescription('Number of Provisionable Standard Slots')
shelfInfoShelfHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26, 1, 2), Unsigned32()).setUnits('HU').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInfoShelfHeight.setStatus('current')
if mibBuilder.loadTexts: shelfInfoShelfHeight.setDescription('Height of Shelf in HU')
shelfInfoStandardSlotHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26, 1, 3), Unsigned32()).setUnits('HU').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInfoStandardSlotHeight.setStatus('current')
if mibBuilder.loadTexts: shelfInfoStandardSlotHeight.setDescription('Height of Standard Slots in Shelf in HU')
shelfInfoNetworkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInfoNetworkPorts.setStatus('current')
if mibBuilder.loadTexts: shelfInfoNetworkPorts.setDescription('Number of Network Ports')
shelfInfoClientPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 96), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInfoClientPorts.setStatus('current')
if mibBuilder.loadTexts: shelfInfoClientPorts.setDescription('Number of Client Ports')
shelfInfoInternalPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInfoInternalPorts.setStatus('current')
if mibBuilder.loadTexts: shelfInfoInternalPorts.setDescription('Number of Internal Ports')
shelfInfoUpgradePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInfoUpgradePorts.setStatus('current')
if mibBuilder.loadTexts: shelfInfoUpgradePorts.setDescription('Number of Upgrade Ports')
shelfInfoOscPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInfoOscPorts.setStatus('current')
if mibBuilder.loadTexts: shelfInfoOscPorts.setDescription('Number of OSC Ports')
shelfInfoOscChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26, 1, 9), FspR7OscChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInfoOscChannel.setStatus('current')
if mibBuilder.loadTexts: shelfInfoOscChannel.setDescription('OSC Channel')
shelfInfoOmBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26, 1, 10), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInfoOmBand.setStatus('current')
if mibBuilder.loadTexts: shelfInfoOmBand.setDescription('Band Provision. Reference to BAND__INVENTORY.')
shelfInfoShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 26, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInfoShelfId.setStatus('current')
if mibBuilder.loadTexts: shelfInfoShelfId.setDescription('Shelf ID')
eRoadmConfigCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 27), )
if mibBuilder.loadTexts: eRoadmConfigCapTable.setStatus('current')
if mibBuilder.loadTexts: eRoadmConfigCapTable.setDescription('')
eRoadmConfigCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 27, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: eRoadmConfigCapEntry.setStatus('current')
if mibBuilder.loadTexts: eRoadmConfigCapEntry.setDescription('')
eRoadmConfigCapOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 27, 1, 1), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmConfigCapOpticalSetPoint.setStatus('current')
if mibBuilder.loadTexts: eRoadmConfigCapOpticalSetPoint.setDescription('Sets the optical power for power equalization in ROADM or for channel power control in OPCM')
eRoadmConfigCapOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 27, 1, 2), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmConfigCapOffset.setStatus('current')
if mibBuilder.loadTexts: eRoadmConfigCapOffset.setDescription('Sets the offset for the mean optical power for power equalization in ROADM')
eRoadmConfigCapTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 27, 1, 3), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmConfigCapTilt.setStatus('current')
if mibBuilder.loadTexts: eRoadmConfigCapTilt.setDescription('Change of optical channel power in dB over the complete transmission band')
eRoadmConfigCapInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 27, 1, 4), FspR7InitEqualizationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRoadmConfigCapInitiateEqualization.setStatus('current')
if mibBuilder.loadTexts: eRoadmConfigCapInitiateEqualization.setDescription('Initiate Equalization')
capabilityDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 28), )
if mibBuilder.loadTexts: capabilityDataTable.setStatus('current')
if mibBuilder.loadTexts: capabilityDataTable.setDescription('')
capabilityDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 28, 1), ).setIndexNames((0, "FspR7-MIB", "capabilityDataType"), (0, "FspR7-MIB", "capabilityDataCapabilityLevel"))
if mibBuilder.loadTexts: capabilityDataEntry.setStatus('current')
if mibBuilder.loadTexts: capabilityDataEntry.setDescription('Each entry in this table represents a description for type equipment and capability level.')
capabilityDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 28, 1, 1), FspR7EquipmentType())
if mibBuilder.loadTexts: capabilityDataType.setStatus('current')
if mibBuilder.loadTexts: capabilityDataType.setDescription("The TYPE of Equipment and the MODE setting determine uniquely the number and allowed TYPE's of the provisionable dependent entities (plugs, interfaces, modules)")
capabilityDataCapabilityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 28, 1, 2), FspR7CapInventory())
if mibBuilder.loadTexts: capabilityDataCapabilityLevel.setStatus('current')
if mibBuilder.loadTexts: capabilityDataCapabilityLevel.setDescription('')
capabilityDataDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 28, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capabilityDataDescription.setStatus('current')
if mibBuilder.loadTexts: capabilityDataDescription.setDescription('')
farEndPlugDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 29), )
if mibBuilder.loadTexts: farEndPlugDiagnosticsTable.setStatus('current')
if mibBuilder.loadTexts: farEndPlugDiagnosticsTable.setDescription('')
farEndPlugDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 29, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: farEndPlugDiagnosticsEntry.setStatus('current')
if mibBuilder.loadTexts: farEndPlugDiagnosticsEntry.setDescription('')
farEndPlugDiagnosticsTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 29, 1, 1), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndPlugDiagnosticsTemp.setStatus('current')
if mibBuilder.loadTexts: farEndPlugDiagnosticsTemp.setDescription('Actual temperature on the far end plug.')
farEndPlugDiagnosticsUpperTempThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 29, 1, 2), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndPlugDiagnosticsUpperTempThres.setStatus('current')
if mibBuilder.loadTexts: farEndPlugDiagnosticsUpperTempThres.setDescription('Upper temperature threshold for threshold crossing alarm.\n         Temperatures above this value will cause a Notification.')
farEndPlugDiagnosticsLowerTempThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 29, 1, 3), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndPlugDiagnosticsLowerTempThres.setStatus('current')
if mibBuilder.loadTexts: farEndPlugDiagnosticsLowerTempThres.setDescription('Lower temperature threshold for threshold crossing alarm.\n         Temperatures below this value will cause a Notification.')
farEndPlugConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 30), )
if mibBuilder.loadTexts: farEndPlugConfigTable.setStatus('current')
if mibBuilder.loadTexts: farEndPlugConfigTable.setDescription('')
farEndPlugConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 30, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: farEndPlugConfigEntry.setStatus('current')
if mibBuilder.loadTexts: farEndPlugConfigEntry.setDescription('')
farEndPlugConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 30, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: farEndPlugConfigAlias.setStatus('current')
if mibBuilder.loadTexts: farEndPlugConfigAlias.setDescription('A string, configurable by the operator, containing a\n         symbolic name for the trail which is terminated at this interface.')
farEndPlugConfigMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 30, 1, 2), FspR7PlugDataRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: farEndPlugConfigMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: farEndPlugConfigMaxDataRate.setDescription('Rate')
farEndPlugConfigCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 31), )
if mibBuilder.loadTexts: farEndPlugConfigCapTable.setStatus('current')
if mibBuilder.loadTexts: farEndPlugConfigCapTable.setDescription('')
farEndPlugConfigCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 31, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: farEndPlugConfigCapEntry.setStatus('current')
if mibBuilder.loadTexts: farEndPlugConfigCapEntry.setDescription('')
farEndPlugConfigCapMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 31, 1, 1), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndPlugConfigCapMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: farEndPlugConfigCapMaxDataRate.setDescription('Rate')
farEndPlugDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 32), )
if mibBuilder.loadTexts: farEndPlugDataTable.setStatus('current')
if mibBuilder.loadTexts: farEndPlugDataTable.setDescription('')
farEndPlugDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 32, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: farEndPlugDataEntry.setStatus('current')
if mibBuilder.loadTexts: farEndPlugDataEntry.setDescription('')
farEndPlugDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 32, 1, 1), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndPlugDataType.setStatus('current')
if mibBuilder.loadTexts: farEndPlugDataType.setDescription("The TYPE of Equipment and the MODE setting determine uniquely the number and allowed TYPE's of the provisionable dependent entities (plugs, interfaces, modules)")
farEndPlugDataMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 32, 1, 2), FspR7PlugDataRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndPlugDataMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: farEndPlugDataMaxDataRate.setDescription('Rate')
farEndPlugDataTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 32, 1, 3), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndPlugDataTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: farEndPlugDataTransmitChannel.setDescription('Channel')
farEndPlugDataReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 32, 1, 4), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndPlugDataReach.setStatus('current')
if mibBuilder.loadTexts: farEndPlugDataReach.setDescription('Reach')
farEndPlugDataFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 32, 1, 5), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndPlugDataFiberType.setStatus('current')
if mibBuilder.loadTexts: farEndPlugDataFiberType.setDescription('Fiber of Optical Interface - Provision, Reference to FIBER__INVENTORY')
farEndPlugDataConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 32, 1, 6), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndPlugDataConnectorType.setStatus('current')
if mibBuilder.loadTexts: farEndPlugDataConnectorType.setDescription('Connector Type')
farEndPlugDataAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 32, 1, 7), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndPlugDataAdmin.setStatus('current')
if mibBuilder.loadTexts: farEndPlugDataAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
moduleConfigCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 35), )
if mibBuilder.loadTexts: moduleConfigCapTable.setStatus('current')
if mibBuilder.loadTexts: moduleConfigCapTable.setDescription('The ModuleConfigCap table. This table shows the capabilities for parameters from moduleConfigTable.')
moduleConfigCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 35, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: moduleConfigCapEntry.setStatus('current')
if mibBuilder.loadTexts: moduleConfigCapEntry.setDescription('')
moduleConfigCapEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 35, 1, 1), FspR7EqlzAdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleConfigCapEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: moduleConfigCapEqlzAdmin.setDescription('Scheduled Equalization Administration')
moduleConfigCapInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 35, 1, 2), FspR7InitEqualizationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleConfigCapInitiateEqualization.setStatus('current')
if mibBuilder.loadTexts: moduleConfigCapInitiateEqualization.setDescription('Initiate Equalization')
moduleConfigCapCac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 2, 35, 1, 3), FspR7L2CacEnableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleConfigCapCac.setStatus('current')
if mibBuilder.loadTexts: moduleConfigCapCac.setDescription('Enable of CAC')
interfaceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1), )
if mibBuilder.loadTexts: interfaceConfigTable.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigTable.setDescription('Contains entries for the configuration of interfaces.\n         This table extends the entries in the ifTable (RFC 2863).')
interfaceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: interfaceConfigEntry.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigEntry.setDescription('The gpiTTP and ocTTP interfaces will have an entry in this\n         table.')
interfaceConfigIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceConfigIdentifier.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigIdentifier.setDescription('A string, configurable by the operator, containing a\n         symbolic name for the trail which is terminated at this interface.')
interfaceConfigLoopConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1, 1, 2), LoopConfig()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceConfigLoopConfig.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigLoopConfig.setDescription('The configuration of the loopback function.\n         - noLoop: no loop configuration on the interface.\n         - lineLoop: the incoming signal is looped to the outgoing\n         line on the interface. The incoming signal is sent in the\n         downstream direction and processed as normal.\n         - inwardLoop: the output signal is looped to the incoming line\n         on the interface. The looped signal is transmitted unchanged on\n         the optical output.')
interfaceConfigDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1, 1, 3), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceConfigDataLayerPmReset.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigDataLayerPmReset.setDescription('Reset data-layer Performance registers')
interfaceConfigEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1, 1, 4), FspR7EqlzAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceConfigEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigEqlzAdmin.setDescription('Scheduled Equalization Administration')
interfaceConfigDispertionConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1, 1, 5), FspR7DispersionConfig()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceConfigDispertionConfig.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigDispertionConfig.setDescription('Facility Operation Tunable Dispersion Config.')
interfaceConfigTurnupConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1, 1, 6), FspR7TurnupConfig()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceConfigTurnupConfig.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigTurnupConfig.setDescription('Facility Operation Turnup Config.')
interfaceConfigInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1, 1, 7), FspR7InitEqualization()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceConfigInitiateEqualization.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigInitiateEqualization.setDescription('')
interfaceConfigExternalVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceConfigExternalVid.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigExternalVid.setDescription('External VID')
interfaceConfigLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1, 1, 9), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceConfigLanAid.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigLanAid.setDescription('AID of LAN')
interfaceConfigBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1, 1, 10), FspR7PortBehaviour()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceConfigBehaviour.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigBehaviour.setDescription('Interface Behaviour')
interfaceConfigDispersionOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 1, 1, 12), FspR7DispersionOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceConfigDispersionOperation.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigDispersionOperation.setDescription('Chromatic Dispersion Compensation Operation')
interfaceDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2), )
if mibBuilder.loadTexts: interfaceDataTable.setStatus('current')
if mibBuilder.loadTexts: interfaceDataTable.setDescription('Contains entries for the configuration of interfaces.\n         This table extends the entries in the ifTable (RFC 2863).')
interfaceDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: interfaceDataEntry.setStatus('current')
if mibBuilder.loadTexts: interfaceDataEntry.setDescription('The gpiTTP and ocTTP interfaces will have an entry in this table.')
interfaceDataConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 1), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataConnector.setStatus('current')
if mibBuilder.loadTexts: interfaceDataConnector.setDescription('The textual description of the external connector type\n         provided for an interface (eg. SC, LC, RJ45, etc).')
interfaceDataSignalMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 2), FspR7SignalMapping()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataSignalMapping.setStatus('deprecated')
if mibBuilder.loadTexts: interfaceDataSignalMapping.setDescription('The signal mapping of the interface.')
interfaceDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 3), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataRate.setStatus('current')
if mibBuilder.loadTexts: interfaceDataRate.setDescription('The data rate configured for this interface.')
interfaceDataBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 4), FspR7PortBehaviour()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataBehaviour.setStatus('current')
if mibBuilder.loadTexts: interfaceDataBehaviour.setDescription('The configured behaviour of the interface. If configured\n         as a network interface, the interface will use a WDM laser, and\n         configuration restrictions may apply.')
interfaceDataTermLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 5), OhTerminationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataTermLevel.setStatus('current')
if mibBuilder.loadTexts: interfaceDataTermLevel.setDescription('Configures the signal overhead termination level of the interface.')
interfaceDataConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 6), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataConnectionType.setStatus('current')
if mibBuilder.loadTexts: interfaceDataConnectionType.setDescription('Connectivity Parameters for Facilities')
interfaceDataMonLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 7), OhTerminationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataMonLevel.setStatus('current')
if mibBuilder.loadTexts: interfaceDataMonLevel.setDescription('Indicates the highest level of intrusive/non-intrusive performance monitoring performed.')
interfaceDataValidSignalTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 5760), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataValidSignalTimer.setStatus('current')
if mibBuilder.loadTexts: interfaceDataValidSignalTimer.setDescription('AINS state signal quality soak time remaining until transition to IS.')
interfaceDataPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 9), OtnPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataPayload.setStatus('current')
if mibBuilder.loadTexts: interfaceDataPayload.setDescription('The PAYLOAD defines the transport service type of the payload,\n         which may be transparent at this layer or with protocol-dependent\n         behaviour. (Only relevant where TYPE = OTU#).')
interfaceDataParity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 10), FspR7ParityBit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataParity.setStatus('current')
if mibBuilder.loadTexts: interfaceDataParity.setDescription('Parity Bit Settings')
interfaceDataPhysIfBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 11), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataPhysIfBaseType.setStatus('current')
if mibBuilder.loadTexts: interfaceDataPhysIfBaseType.setDescription('The type of the physical interface. Will be nedded for LANIP\n         interfaces to deliver information about the BASE facility type.')
interfaceDataLaserReleaseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1440), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataLaserReleaseTimer.setStatus('current')
if mibBuilder.loadTexts: interfaceDataLaserReleaseTimer.setDescription('Fall-back timer for forced laser operation.')
interfaceDataCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 13), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataCir.setStatus('current')
if mibBuilder.loadTexts: interfaceDataCir.setDescription('Comitted Information Rate of the virtual channel.')
interfaceDataTransmitWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 14), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataTransmitWavelength.setStatus('current')
if mibBuilder.loadTexts: interfaceDataTransmitWavelength.setDescription('Wavelength of Optical Interface (unit: nm)')
interfaceDataTransmitFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 15), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataTransmitFrequency.setStatus('current')
if mibBuilder.loadTexts: interfaceDataTransmitFrequency.setDescription('Frequency of Optical Interface (unit: nm)')
interfaceDataTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 16), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: interfaceDataTransmitChannel.setDescription('Channel')
interfaceDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 17), FspR7EquipmentType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceDataType.setStatus('current')
if mibBuilder.loadTexts: interfaceDataType.setDescription('The TYPE of Module.')
interfaceDataConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 18), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataConnectionState.setStatus('current')
if mibBuilder.loadTexts: interfaceDataConnectionState.setDescription('Connection State')
interfaceDataFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 19), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataFacilityType.setStatus('current')
if mibBuilder.loadTexts: interfaceDataFacilityType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
interfaceDataProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 20), FspR7ProtectionRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataProtectionRole.setStatus('current')
if mibBuilder.loadTexts: interfaceDataProtectionRole.setDescription('The Path is Labelled Working or Protection')
interfaceDataReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 21), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataReach.setStatus('current')
if mibBuilder.loadTexts: interfaceDataReach.setDescription('Reach')
interfaceDataFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 22), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataFiberType.setStatus('current')
if mibBuilder.loadTexts: interfaceDataFiberType.setDescription('Fiber of Optical Interface - Provision, Reference to FIBER__INVENTORY')
interfaceDataOdtuType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 23), FspR7OdtuType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataOdtuType.setStatus('current')
if mibBuilder.loadTexts: interfaceDataOdtuType.setDescription('ODTU Transport Unit')
interfaceDataOduTribPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 24), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataOduTribPortNo.setStatus('current')
if mibBuilder.loadTexts: interfaceDataOduTribPortNo.setDescription('ODU Tributary Port Number')
interfaceDataOduTribTimeSlottNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 25), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataOduTribTimeSlottNo.setStatus('current')
if mibBuilder.loadTexts: interfaceDataOduTribTimeSlottNo.setDescription('ODU Tributary slot number')
interfaceDataRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 2, 1, 26), ApsRevertMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceDataRevertiveMode.setStatus('current')
if mibBuilder.loadTexts: interfaceDataRevertiveMode.setDescription('Revertive Protection Switching')
opticalIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3), )
if mibBuilder.loadTexts: opticalIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigTable.setDescription('Contains entries for the configuration of optical interfaces.\n         This table extends the entries in the ifTable (RFC 2863).')
opticalIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: opticalIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigEntry.setDescription('Only the gpiTTP and ocTTP optical interfaces will have an entry in this table.')
opticalIfConfigAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 1), FspR7AlsMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigAlsMode.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigAlsMode.setDescription('A configuration request for the Automatic Laser Shutdown\n         (ALS) function. Refer to FspR7AlsMode Textual Convention for details.')
opticalIfConfigErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 2), FspR7ErrorFwdMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigErrorForwarding.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigErrorForwarding.setDescription('A configuration request for the error forwarding function. Refer to\n         FspR7ErrorFwdMode Textual Convention for details.')
opticalIfConfigFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 3), FspR7FecType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigFecType.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigFecType.setDescription('Configuration of FEC type.')
opticalIfConfigLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 4), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigLaserOffDelayFunction.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigLaserOffDelayFunction.setDescription('A configuration request for the Laser Off Delay function.\n         This function delays turning off the laser as a consequent action to\n         a defect.')
opticalIfConfigForceLaserOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 5), FspR7LaserForcedOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigForceLaserOn.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigForceLaserOn.setDescription('Laser Forced On')
opticalIfConfigLossAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 6), FspR7LossAttenuation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigLossAttenuation.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigLossAttenuation.setDescription('LOS Attenuation Finding in progress')
opticalIfConfigAprHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 7), Unsigned32()).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigAprHighThreshold.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigAprHighThreshold.setDescription('Automatic Power Reduction High Threshold')
opticalIfConfigAseTabCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 8), FspR7AseTabOpr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigAseTabCreation.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigAseTabCreation.setDescription('ASE Table creation in process')
opticalIfConfigWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 9), FspR7ChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigWdmRxChannel.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigWdmRxChannel.setDescription('Configuration of Rx optical channel')
opticalIfConfigSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigSigDegThresOtu.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigSigDegThresOtu.setDescription('Background-Block-Error-Based Signal Degradation Definition for OTU')
opticalIfConfigSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigSigDegPeriodOtu.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigSigDegPeriodOtu.setDescription('Integration Period for Signal degrade')
opticalIfConfigSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigSigDegThresOdu.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigSigDegThresOdu.setDescription('Background-Block-Error-Based Signal Degradation Definition for ODU')
opticalIfConfigSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigSigDegPeriodOdu.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigSigDegPeriodOdu.setDescription('Integration Period for Signal degrade')
opticalIfConfigSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 14), FspR7BERThresholdSection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigSigDegThresSonetSection.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigSigDegThresSonetSection.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
opticalIfConfigSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigSigDegThresSdhSection.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigSigDegThresSdhSection.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period).\n         Defined as percentage Background Block Errors (30% default) evaluated\n         over a defined period (SDPER-RS).')
opticalIfConfigSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigSigDegPeriodSdhSection.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigSigDegPeriodSdhSection.setDescription('Provisionable Signal Degrade Integration Period for SDH')
opticalIfConfigDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 17), FspR7DispersionModes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigDispersionMode.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigDispersionMode.setDescription('Dispersion Compensation Mode')
opticalIfConfigDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50000, 50000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigDispersionSetting.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigDispersionSetting.setDescription('Dispersion setting of dispersion comensating module')
opticalIfConfigOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-250, 50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigOpticalSetPoint.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigOpticalSetPoint.setDescription('Sets the optical power for power equalization in ROADM or for channel power\n         control in OPCM')
opticalIfConfigOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 30), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigOffset.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigOffset.setDescription('Sets the offset for the mean optical power for power equalization in ROADM')
opticalIfConfigTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50, 0), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigTilt.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigTilt.setDescription('Change of optical channel power in dB over the complete transmission band')
opticalIfConfigAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigAreaId.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigAreaId.setDescription('OSPF Area ID for IP Interface')
opticalIfConfigAutoThresReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 23), FspR7AutoThresReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigAutoThresReset.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigAutoThresReset.setDescription('This object is used for reseting the\n         Adaptive Threshold value to the factory default.\n        ')
opticalIfConfigUtag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 24), FspR7UntaggedFrames()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigUtag.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigUtag.setDescription('If untagged frames shall be enabled on this port or not.')
opticalIfConfigPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 25), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigPvid.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigPvid.setDescription('Default VLAN ID (both STAG/CTAG mode) in case UTAG is enabled')
opticalIfConfigPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 26), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigPriority.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigPriority.setDescription('Default PCP in case UTAG is Enabled. The Prio may be remapped in the EVC.')
opticalIfConfigStagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 27), FspR7SnmpHexString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigStagType.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigStagType.setDescription('TAG type field')
opticalIfConfigCac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 28), FspR7L2CacEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigCac.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCac.setDescription('Enable of CAC')
opticalIfConfigMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 29), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1518, 9600), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigMaxFrameSize.setDescription('Max Frame Size')
opticalIfConfigLagActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 30), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 12), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigLagActivePorts.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigLagActivePorts.setDescription('The amount of active ports in the LAG.')
opticalIfConfigLagPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 31), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigLagPrio.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigLagPrio.setDescription('Part of ID. Port pri that defines standby.')
opticalIfConfigLagLoadBallanceSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 32), FspR7LagLoadBallanceSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigLagLoadBallanceSource.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigLagLoadBallanceSource.setDescription('What source is used in the load balance calculation')
opticalIfConfigLacpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 33), FspR7LacpTimeout()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigLacpTimeout.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigLacpTimeout.setDescription('Timeout of the LACP')
opticalIfConfigTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 34), FspR7ChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigTransmitChannel.setDescription('Channel')
opticalIfConfigFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 35), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigFarEndCommunication.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigFarEndCommunication.setDescription('Used for Optojack plugs; Communication to Far End Plug is observed')
opticalIfConfigLacpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 36), FspR7LacpMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigLacpMode.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigLacpMode.setDescription('Enable of LACP state machine')
opticalIfConfigTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 37), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigTxOffDelay.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigTxOffDelay.setDescription('Enable or disable TXOFFHOLD Period for Error Forwarding and LKDO-OFF Consequent Action.')
opticalIfConfigOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 38), FspR7OpuPayloadType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigOpuPayloadType.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigOpuPayloadType.setDescription('OPU Payload Type Indicator')
opticalIfConfigOscOpticalSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-250, 50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigOscOpticalSetpoint.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigOscOpticalSetpoint.setDescription('Sets the OSC optical power')
opticalIfConfigFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 40), FspR7FiberBrand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigFiberBrand.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigFiberBrand.setDescription('Brand of fiber present in the fiber plant')
opticalIfConfigTiltSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 41), FspR7TiltSet()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigTiltSet.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigTiltSet.setDescription('Tilt setting as discrete values versus a range')
opticalIfConfigForceFwdAsePilotOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 42), FspR7LaserForcedOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigForceFwdAsePilotOn.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigForceFwdAsePilotOn.setDescription('Force the BWD Raman pilot on to allow building of FWD Raman ASE Table')
opticalIfConfigXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 43), FspR7XfpDecisionThres()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigXfpDecisionThres.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigXfpDecisionThres.setDescription('XFP Decision threshold setting')
opticalIfConfigDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 44), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigDisparityCorrection.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigDisparityCorrection.setDescription('Disparity correction')
opticalIfConfigPrbsPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 45), FspR7PrbsPmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigPrbsPmReset.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigPrbsPmReset.setDescription('Reset PRBS PM counters')
opticalIfConfigTestPrbsRcvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 46), FspR7TestMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigTestPrbsRcvMode.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigTestPrbsRcvMode.setDescription('PRBS test pattern received')
opticalIfConfigTestPrbsTrmtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 47), FspR7TestMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigTestPrbsTrmtMode.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigTestPrbsTrmtMode.setDescription('PRBS test pattern transmitted')
opticalIfConfigTributarySlotMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 48), FspR7ManualAuto()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigTributarySlotMethod.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigTributarySlotMethod.setDescription('Tributary Slot assignment method')
opticalIfConfigBip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 3, 1, 53), FspR7Bip()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalIfConfigBip.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigBip.setDescription('Bit Interleaved Parity')
opticalIfDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4), )
if mibBuilder.loadTexts: opticalIfDataTable.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataTable.setDescription('Contains diagnostic entries for optical interfaces.\n         This table extends the entries in the ifTable (RFC 2863).')
opticalIfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: opticalIfDataEntry.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataEntry.setDescription('')
opticalIfDataWdmChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 1), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataWdmChannel.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataWdmChannel.setDescription('The WDM channel, as per ADVA grid, of this interface.')
opticalIfDataWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataWavelength.setStatus('deprecated')
if mibBuilder.loadTexts: opticalIfDataWavelength.setDescription('Parameter deprecated. Look at TransmitWavelength parameter.')
opticalIfDataFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 3), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataFiberType.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataFiberType.setDescription("The fiber type of this interface. For interface modules not\n         supporting Fibre Channel Transmission, the value will be 'unspecified'.")
opticalIfDataLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 4), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLinkLength.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataLinkLength.setDescription('Reach')
opticalIfDataAlsHoldoff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 5), FspR7AlsHoldoff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataAlsHoldoff.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataAlsHoldoff.setDescription('Refer to FspR7AlsHoldoff Textual Convention for details.')
opticalIfDataLaserOffDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 6), FspR7LaserOffDelayTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLaserOffDelayTime.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataLaserOffDelayTime.setDescription('Laser Off Delay function. This function delays turning off the laser\n         as a consequent action to a defect.')
opticalIfDataProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 7), FspR7ProtectionRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataProtectionRole.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataProtectionRole.setDescription('The Path is Labelled Working or Protection')
opticalIfDataChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 8), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataChannelSpacing.setDescription('ITU Grid channel spacing')
opticalIfDataTunableLowestChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 9), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataTunableLowestChannel.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataTunableLowestChannel.setDescription('The lowest channel for tunable Laser Module')
opticalIfDataTunableHighestChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 10), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataTunableHighestChannel.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataTunableHighestChannel.setDescription('The highest channel for tunable Laser Module')
opticalIfDataTransmitWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 11), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataTransmitWavelength.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataTransmitWavelength.setDescription('The transmit wavelength of this interface.')
opticalIfDataFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 12), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataFrequency.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataFrequency.setDescription('Frequency of Optical Interface (unit: nm)')
opticalIfDataChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 13), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataChannelsNumber.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataChannelsNumber.setDescription('Number of channels supported by an entity')
opticalIfDataFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 14), FspR7InterfaceFunction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataFunction.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataFunction.setDescription('Interface Function')
opticalIfDataPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 15), FspR7PortMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataPortMode.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataPortMode.setDescription('Port Mode')
opticalIfDataPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 16), FspR7PortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataPortRole.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataPortRole.setDescription('ADVA cloud Port Roles')
opticalIfDataCirRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 17), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataCirRcv.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataCirRcv.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
opticalIfDataCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 26214400), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataCbsRcv.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataCbsRcv.setDescription('Committed Burst Size')
opticalIfDataCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 19), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataCirTrmt.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataCirTrmt.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
opticalIfDataCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 20), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 25600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataCbsTrmt.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataCbsTrmt.setDescription('Committed Burst Size')
opticalIfDataVethAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 21), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataVethAid.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataVethAid.setDescription('Shows if PORT is a member in the LAG with the VETH AID')
opticalIfDataLagPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 22), FspR7LagPorts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLagPorts.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataLagPorts.setDescription('A list of ports(AIDs) in the LAG.')
opticalIfDataLagPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 23), FspR7LagPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLagPortType.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataLagPortType.setDescription('Type/Speed of connected ports in the LAG')
opticalIfDataLagStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 24), FspR7LagStandby()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLagStandby.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataLagStandby.setDescription('Shows if port is in standby in the LAG')
opticalIfDataLacpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 25), FspR7LacpMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLacpMode.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataLacpMode.setDescription('Enable of LACP state machine')
opticalIfDataLagKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLagKey.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataLagKey.setDescription('Part of ID. Operational KEY')
opticalIfDataLagPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLagPortNo.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataLagPortNo.setDescription('Part of ID. Hardcoded to physical port no.')
opticalIfDataLagState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 28), FspR7LagState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLagState.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataLagState.setDescription('State of the LACP on this port')
opticalIfDataLagIdFend = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 29), FspR7LagIdFend()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLagIdFend.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataLagIdFend.setDescription('Part of Partner PORT ID. Operational Key, Pri and No. uses 4+2+4 HEX values. Coded as 10 HEXV2 in DD.')
opticalIfDataLagFendState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 30), FspR7LagFendState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLagFendState.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataLagFendState.setDescription('State of the LACP on partner port')
opticalIfDataLagSysMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 31), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLagSysMac.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataLagSysMac.setDescription('System MAC Set to first member port.')
opticalIfDataLagSysIdFend = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 32), FspR7LagSysIdFend()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLagSysIdFend.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataLagSysIdFend.setDescription('System ID (Pri&MAC) received from the Partner of the LAG group.')
opticalIfDataLagSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 33), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataLagSysPrio.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataLagSysPrio.setDescription('LAG Actor Sys Pri. Part of LAG ID')
opticalIfDataBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 34), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataBand.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataBand.setDescription('Band Provision. Reference to BAND__INVENTORY.')
opticalIfDataStuff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 35), FspR7Stuff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataStuff.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataStuff.setDescription('Indicates if bit/byte stuffing is used in the transport signal.')
opticalIfDataChannelsProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 36), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataChannelsProvision.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataChannelsProvision.setDescription('Number of channels supported by an entity')
opticalIfDataAutoPTassignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 37), FspR7ManualAuto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataAutoPTassignment.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataAutoPTassignment.setDescription('Auto assignment of ODU PT')
opticalIfDataTributaryFreeSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 38), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 512), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataTributaryFreeSlotNo.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataTributaryFreeSlotNo.setDescription('Number of Tributary Slots which are available for assignment.')
opticalIfDataTributaryAssignedSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 39), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 512), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataTributaryAssignedSlotNo.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataTributaryAssignedSlotNo.setDescription('Number of Tributary Slots which have been assigned.')
opticalIfDataOdtuType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 40), FspR7OdtuType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataOdtuType.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataOdtuType.setDescription('ODTU Transport Unit')
opticalIfDataOduTribPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 41), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataOduTribPortNo.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataOduTribPortNo.setDescription('ODU Tributary Port Number')
opticalIfDataOduTribTimeSlottNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 4, 1, 42), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDataOduTribTimeSlottNo.setStatus('current')
if mibBuilder.loadTexts: opticalIfDataOduTribTimeSlottNo.setDescription('ODU Tributary slot number')
opticalIfDiagTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5), )
if mibBuilder.loadTexts: opticalIfDiagTable.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagTable.setDescription('Contains diagnostic entries for optical interfaces. This\n         table extends the entries in the ifTable (RFC 2863).')
opticalIfDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: opticalIfDiagEntry.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagEntry.setDescription('')
opticalIfDiagLaserBiasCurrentNormalized = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 1), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagLaserBiasCurrentNormalized.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagLaserBiasCurrentNormalized.setDescription('Instantaneous Laser Bias Current Normalized')
opticalIfDiagLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 2), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagLaserTemp.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagLaserTemp.setDescription('The laser temperature, measured with\n         a granularity of 0.1 degree Celsius')
opticalIfDiagInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagInputPower.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagInputPower.setDescription('The optical input power of a transmitter in dBm,\n         measured in the range of -x to +y dBm (TBD).\n         It is only valid when there is no loss of signal at the input,\n         in which case a value of -65535 is returned.\n         A value of -65535 also indicates that OIP is not available.\n         When out of range, -65534 indicates that the OIP is outside\n         the maximum value and -65533 for outside the minimum value.')
opticalIfDiagOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagOutputPower.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagOutputPower.setDescription("The optical output power of a transmitter in dBm,\n         measured in the range of -x to +y dBm.(TBD)\n         It is only valid when there the laserState is 'On'.\n         If not, a value of -65535 is returned.\n         A value of -65535 also indicates that OOP is not available.\n         When out of range, -65534 indicates that the OOP is outside\n         the maximum value and -65533 for outside the minimum value.")
opticalIfDiagLaserBiasCurrentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 5), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagLaserBiasCurrentLevel.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagLaserBiasCurrentLevel.setDescription('The actual current of the transmitter in mA.\n         If the value is -65535, the current is not available.')
opticalIfDiagPumpLaser1Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 6), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagPumpLaser1Temp.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagPumpLaser1Temp.setDescription('Instantaneous Laser 1 Temperature.')
opticalIfDiagPumpLaser2Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 7), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagPumpLaser2Temp.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagPumpLaser2Temp.setDescription('Instantaneous Laser 2 Temperature.')
opticalIfDiagPumpLaserBiasCurrent1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 8), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagPumpLaserBiasCurrent1.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagPumpLaserBiasCurrent1.setDescription('Instantaneous Laser Bias Current 1 Level')
opticalIfDiagPumpLaserBiasCurrent2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 9), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagPumpLaserBiasCurrent2.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagPumpLaserBiasCurrent2.setDescription('Instantaneous Laser Bias Current 2 Level')
opticalIfDiagAttenuationOfVoa = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 10), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagAttenuationOfVoa.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagAttenuationOfVoa.setDescription('The attenuation of VOA in dB')
opticalIfDiagBackreflectionPowerReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 11), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagBackreflectionPowerReceived.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagBackreflectionPowerReceived.setDescription('Backreflection Received Current')
opticalIfDiagOscGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 12), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagOscGain.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagOscGain.setDescription('Current Raman OSC gain')
opticalIfDiagOscPowerReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 13), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagOscPowerReceived.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagOscPowerReceived.setDescription('Optical Supervisory Channel Input Power Received Current')
opticalIfDiagRamanPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 14), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagRamanPumpPower.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagRamanPumpPower.setDescription('Total raman pump power')
opticalIfDiagRamanEstSignalGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 15), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagRamanEstSignalGain.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagRamanEstSignalGain.setDescription('Current Estimated signal gain')
opticalIfDiagChromaticDispersionCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 16), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagChromaticDispersionCompensation.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagChromaticDispersionCompensation.setDescription('Chromatic Dispersion Compensation')
opticalIfDiagLinkAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 17), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagLinkAttenuation.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagLinkAttenuation.setDescription('Instantainious link attenuation')
opticalIfDiagPumpLaserBiasCurrent3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 18), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagPumpLaserBiasCurrent3.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagPumpLaserBiasCurrent3.setDescription('Instantaneous Laser Bias Current 3 Level')
opticalIfDiagPumpLaser3Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 19), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagPumpLaser3Temp.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagPumpLaser3Temp.setDescription('Instantaneous Laser 3 Temperature')
opticalIfDiagLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 20), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 300000), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagLatency.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagLatency.setDescription('Measured round trip delay')
opticalIfDiagRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 21), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 30000000), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagRoundTripDelay.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagRoundTripDelay.setDescription('Measured round trip delay')
opticalIfDiagOscOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 22), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagOscOutputPower.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagOscOutputPower.setDescription('Instantaneous OSC Optical Power Transmitted (Output)')
opticalIfDiagPumpLaser4Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 23), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagPumpLaser4Temp.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagPumpLaser4Temp.setDescription('Instantaneous Laser 4 Temperature')
opticalIfDiagPumpLaserBiasCurrent4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 24), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagPumpLaserBiasCurrent4.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagPumpLaserBiasCurrent4.setDescription('Instantaneous Laser Bias Current 4 Level')
opticalIfDiagLocalOscTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 26), Integer32()).setUnits('0.1 oC').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagLocalOscTemp.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagLocalOscTemp.setDescription('Instantaneous Local Oscillator Temperature')
opticalIfDiagDifferentialGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 27), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagDifferentialGroupDelay.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagDifferentialGroupDelay.setDescription('Differential Group Delay measured and compensated by the module')
opticalIfDiagChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 28), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagChromaticDispersion.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagChromaticDispersion.setDescription('Chromatic Dispersion measured and compensated by the module')
opticalIfDiagSignalToNoiseRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 29), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagSignalToNoiseRatio.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagSignalToNoiseRatio.setDescription('Signal-to-Noise Ratio measured by the module')
opticalIfDiagCarrierFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 30), Integer32()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagCarrierFreqOffset.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagCarrierFreqOffset.setDescription('Carrier Frequency Offset')
opticalIfDiagLocalOscBiasLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 31), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagLocalOscBiasLevel.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagLocalOscBiasLevel.setDescription('Instantaneous Local Oscillator Bias Current Level')
opticalIfDiagPrbsElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 32), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagPrbsElapsedTime.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagPrbsElapsedTime.setDescription('Time elapsed since PRBS test monitoring started - reset')
opticalIfDiagPrbsErrorFreeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 33), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagPrbsErrorFreeTime.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagPrbsErrorFreeTime.setDescription('Time elapsed since last PRBS detected bit error')
opticalIfDiagPrbsAvgBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 34), Counter64String()).setUnits('1.0E-14').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagPrbsAvgBER.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagPrbsAvgBER.setDescription('Average BER for the PRBS test signal during the monitored time')
opticalIfDiagPrbsMaxBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 5, 1, 35), Counter64String()).setUnits('1.0E-14').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfDiagPrbsMaxBER.setStatus('current')
if mibBuilder.loadTexts: opticalIfDiagPrbsMaxBER.setDescription('Maximum measured BER for the PRBS Test signal during monitored time')
ethernetConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 6), )
if mibBuilder.loadTexts: ethernetConfigTable.setStatus('current')
if mibBuilder.loadTexts: ethernetConfigTable.setDescription('Contains entries for the Status information for Ethernet\n         interfaces equipped on a Unit. This table extends the entries in the\n         ifTable (RFC 2863).\n        ')
ethernetConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 6, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: ethernetConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetConfigEntry.setDescription('The objects in this table are used for configuration\n         of the ethernet interface.\n        ')
ethernetConfigAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 6, 1, 1), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetConfigAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: ethernetConfigAutoNegotiation.setDescription('The autoneg status of the ethernet layer.\n         read-write if FspR7InterfaceType = ifTypeE10or100bt\n         read-only if FspR7InterfaceType = ifTypeE100fx\n        ')
ethernetConfigDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 6, 1, 2), EthDuplexMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetConfigDuplexMode.setStatus('current')
if mibBuilder.loadTexts: ethernetConfigDuplexMode.setDescription('The duplex configuration of the ethernet layer.\n         read-write if FspR7InterfaceType = ifTypeE10or100bt\n         read-only if FspR7InterfaceType = ifTypeE100fx\n        ')
ethernetConfigBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 6, 1, 3), FspR7Bitrate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetConfigBitrate.setStatus('current')
if mibBuilder.loadTexts: ethernetConfigBitrate.setDescription('The bite rate configuration of the ethernet layer.\n         read-write if FspR7InterfaceType = ifTypeE10or100bt\n         read-only if FspR7InterfaceType = ifTypeE100fx\n        ')
ethernetConfigFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 6, 1, 4), FspR7FlowControlMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetConfigFlowControl.setStatus('current')
if mibBuilder.loadTexts: ethernetConfigFlowControl.setDescription('Flow Control mechanism')
ethernetConfigIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 6, 1, 5), FspR7IpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetConfigIpType.setStatus('current')
if mibBuilder.loadTexts: ethernetConfigIpType.setDescription('Type of IP configuration')
ethernetConfigIpAddrMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 6, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetConfigIpAddrMonitor.setStatus('current')
if mibBuilder.loadTexts: ethernetConfigIpAddrMonitor.setDescription('IP address assigned to LAN IP Interface')
ethernetConfigIpMaskMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 6, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetConfigIpMaskMonitor.setStatus('current')
if mibBuilder.loadTexts: ethernetConfigIpMaskMonitor.setDescription('IP mask assigned to LAN IP Interface')
ethernetConfigAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 6, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetConfigAreaId.setStatus('current')
if mibBuilder.loadTexts: ethernetConfigAreaId.setDescription('OSPF Area ID for IP Interface')
lanIpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 8), )
if mibBuilder.loadTexts: lanIpConfigTable.setStatus('current')
if mibBuilder.loadTexts: lanIpConfigTable.setDescription('')
lanIpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 8, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: lanIpConfigEntry.setStatus('current')
if mibBuilder.loadTexts: lanIpConfigEntry.setDescription('')
lanIpConfigIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 8, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanIpConfigIpAddr.setStatus('current')
if mibBuilder.loadTexts: lanIpConfigIpAddr.setDescription('IP Address assigned to LAN IP Interface')
lanIpConfigIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanIpConfigIpAddrMask.setStatus('current')
if mibBuilder.loadTexts: lanIpConfigIpAddrMask.setDescription('IP MASK assigned to LAN IP Interface')
ospfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 9), )
if mibBuilder.loadTexts: ospfConfigTable.setStatus('current')
if mibBuilder.loadTexts: ospfConfigTable.setDescription('')
ospfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 9, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: ospfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ospfConfigEntry.setDescription('')
ospfConfigOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 9, 1, 1), FspR7OspfMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfConfigOspf.setStatus('current')
if mibBuilder.loadTexts: ospfConfigOspf.setDescription('OSPF Routing (Dynamic)')
ospfConfigMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 9, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfConfigMetric.setStatus('current')
if mibBuilder.loadTexts: ospfConfigMetric.setDescription('Routing Metric')
ospfDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 10), )
if mibBuilder.loadTexts: ospfDataTable.setStatus('current')
if mibBuilder.loadTexts: ospfDataTable.setDescription('')
ospfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 10, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: ospfDataEntry.setStatus('current')
if mibBuilder.loadTexts: ospfDataEntry.setDescription('')
ospfDataDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfDataDesignatedRouter.setStatus('current')
if mibBuilder.loadTexts: ospfDataDesignatedRouter.setDescription('IP Address of Designated Router')
ospfDataBkupDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfDataBkupDesignatedRouter.setStatus('current')
if mibBuilder.loadTexts: ospfDataBkupDesignatedRouter.setDescription('IP Address of BackUp Designated Router')
pppfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 11), )
if mibBuilder.loadTexts: pppfConfigTable.setStatus('current')
if mibBuilder.loadTexts: pppfConfigTable.setDescription('')
pppfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 11, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: pppfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: pppfConfigEntry.setDescription('')
pppfConfigBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1312), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('kbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppfConfigBitrate.setStatus('current')
if mibBuilder.loadTexts: pppfConfigBitrate.setDescription('Provisioned max. bitrate of transmitter in PPP Link established over ECC')
pppfConfigIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 11, 1, 2), FspR7IpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppfConfigIpType.setStatus('current')
if mibBuilder.loadTexts: pppfConfigIpType.setDescription('Type of IP configuration')
pppfConfigDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 11, 1, 3), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppfConfigDataLayerPmReset.setStatus('current')
if mibBuilder.loadTexts: pppfConfigDataLayerPmReset.setDescription('Reset data-layer Performance registers')
pppfConfigAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 11, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppfConfigAreaId.setStatus('current')
if mibBuilder.loadTexts: pppfConfigAreaId.setDescription('OSPF Area ID for IP Interface')
pppfConfigBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 11, 1, 5), FspR7Baund()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppfConfigBaud.setStatus('current')
if mibBuilder.loadTexts: pppfConfigBaud.setDescription('Baud rate of the serial interface')
pppfConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 11, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppfConfigAlias.setStatus('current')
if mibBuilder.loadTexts: pppfConfigAlias.setDescription('User Applied Descriptor')
pppDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 12), )
if mibBuilder.loadTexts: pppDataTable.setStatus('current')
if mibBuilder.loadTexts: pppDataTable.setDescription('')
pppDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 12, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: pppDataEntry.setStatus('current')
if mibBuilder.loadTexts: pppDataEntry.setDescription('')
pppDataNearEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 12, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDataNearEndIp.setStatus('current')
if mibBuilder.loadTexts: pppDataNearEndIp.setDescription('IP Address assigned to PPP Termination Point on Near-End NE. Defaults to System IP address')
pppDataFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDataFarEndIp.setStatus('current')
if mibBuilder.loadTexts: pppDataFarEndIp.setDescription('IP Address assigned to PPP Termination Point on Far-End NE. Default is set by NE System on LINK establishment if FENDIPACPT = Y')
pppDataEccInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 12, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDataEccInstance.setStatus('current')
if mibBuilder.loadTexts: pppDataEccInstance.setDescription('Address Identifier of ECC Entity.')
pppDataNearEndIpMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 12, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDataNearEndIpMonitor.setStatus('current')
if mibBuilder.loadTexts: pppDataNearEndIpMonitor.setDescription('IP address assigned to Near-End NE')
pppDataProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 12, 1, 5), FspR7NoYes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDataProxyArp.setStatus('current')
if mibBuilder.loadTexts: pppDataProxyArp.setDescription('If enabled then ARP requests for FENDIP (coming in on another\n         interface in the same subnet as FENDIP) will be replied too.')
crsDcnDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 13), )
if mibBuilder.loadTexts: crsDcnDataTable.setStatus('current')
if mibBuilder.loadTexts: crsDcnDataTable.setDescription('')
crsDcnDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 13, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: crsDcnDataEntry.setStatus('current')
if mibBuilder.loadTexts: crsDcnDataEntry.setDescription('')
crsDcnDataPppInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 13, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsDcnDataPppInstance.setStatus('current')
if mibBuilder.loadTexts: crsDcnDataPppInstance.setDescription('Address Identifier of PPPIP LINK Entity.')
crsDcnDataEccInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 13, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsDcnDataEccInstance.setStatus('current')
if mibBuilder.loadTexts: crsDcnDataEccInstance.setDescription('Address Identifier of ECC Entity.')
eocDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 14), )
if mibBuilder.loadTexts: eocDataTable.setStatus('current')
if mibBuilder.loadTexts: eocDataTable.setDescription('')
eocDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 14, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: eocDataEntry.setStatus('current')
if mibBuilder.loadTexts: eocDataEntry.setDescription('')
eocDataProtAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 14, 1, 1), FspR7EocProtAvailability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eocDataProtAvailability.setStatus('current')
if mibBuilder.loadTexts: eocDataProtAvailability.setDescription('The availability of protection switching functionality on the EOC.')
eocDataIpEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 14, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eocDataIpEntity.setStatus('current')
if mibBuilder.loadTexts: eocDataIpEntity.setDescription('Address of IP Entity on Module with Router Capability to which the\n         EOC is connected.')
eocDataMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 14, 1, 3), Unsigned32()).setUnits('kbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: eocDataMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: eocDataMaxDataRate.setDescription('Max data rate of the EOC')
eocDataConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 14, 1, 4), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eocDataConnectionType.setStatus('current')
if mibBuilder.loadTexts: eocDataConnectionType.setDescription('Uni- or bidirectional traffic.')
eocDataProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 14, 1, 5), FspR7ProtectionRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eocDataProtectionRole.setStatus('current')
if mibBuilder.loadTexts: eocDataProtectionRole.setDescription('The Path is Labelled Working or Protection')
opticalIfOlmTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 15), )
if mibBuilder.loadTexts: opticalIfOlmTable.setStatus('current')
if mibBuilder.loadTexts: opticalIfOlmTable.setDescription('Contains optical line monitoring entries for optical interfaces.\n         This table extends the entries in the\n         ifTable (RFC 2863).')
opticalIfOlmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 15, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: opticalIfOlmEntry.setStatus('current')
if mibBuilder.loadTexts: opticalIfOlmEntry.setDescription('')
opticalIfOlmRxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 15, 1, 1), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfOlmRxLineAttenuation.setStatus('current')
if mibBuilder.loadTexts: opticalIfOlmRxLineAttenuation.setDescription("The Attenuation (in 0.1 dB) on line connected to receiver\n         of this interface. If there is loss of signal then ine\n         attenuation is -65535. The value -255 will be returned if\n         the value isn't available.")
opticalIfOlmTxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 15, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfOlmTxLineAttenuation.setStatus('current')
if mibBuilder.loadTexts: opticalIfOlmTxLineAttenuation.setDescription("The Attenuation (in 0.1 dB) on line connected to\n         transmitter of this interface. If there is loss of signal\n         then line attenuation is -65535. The value -255 will be\n         returned if the value isn't available.")
opticalIfOlmFarEndSigDegThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 15, 1, 3), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfOlmFarEndSigDegThres.setStatus('current')
if mibBuilder.loadTexts: opticalIfOlmFarEndSigDegThres.setDescription('Far End Signal Degrade Threshold. Read only. Deliverd by a special ADVA propriatery OSC maintanance signaling.')
opticalAmplifierInterfaceDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 16), )
if mibBuilder.loadTexts: opticalAmplifierInterfaceDiagnosticsTable.setStatus('current')
if mibBuilder.loadTexts: opticalAmplifierInterfaceDiagnosticsTable.setDescription('')
opticalAmplifierInterfaceDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 16, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: opticalAmplifierInterfaceDiagnosticsEntry.setStatus('current')
if mibBuilder.loadTexts: opticalAmplifierInterfaceDiagnosticsEntry.setDescription('')
opticalAmplifierInterfaceDiagnosticsOperatingHours = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 16, 1, 1), Unsigned32()).setUnits('0.1 H').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalAmplifierInterfaceDiagnosticsOperatingHours.setStatus('current')
if mibBuilder.loadTexts: opticalAmplifierInterfaceDiagnosticsOperatingHours.setDescription('Accumulated total of Operating Hours')
opticalAmplifierInterfaceDiagnosticsLaserBiasCurrentLevelAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 16, 1, 2), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalAmplifierInterfaceDiagnosticsLaserBiasCurrentLevelAverage.setStatus('current')
if mibBuilder.loadTexts: opticalAmplifierInterfaceDiagnosticsLaserBiasCurrentLevelAverage.setDescription('10s accumulated Averaged Laser Bias Current Level')
opticalAmplifierInterfaceDiagnosticsAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 16, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalAmplifierInterfaceDiagnosticsAttenuation.setStatus('current')
if mibBuilder.loadTexts: opticalAmplifierInterfaceDiagnosticsAttenuation.setDescription('The attenuation in dB from the TRMT of the 1st stage to the RCV of the 2nd stage.')
opticalAmplifierInterfaceDiagnosticsAttenuationVoa = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 16, 1, 4), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalAmplifierInterfaceDiagnosticsAttenuationVoa.setStatus('current')
if mibBuilder.loadTexts: opticalAmplifierInterfaceDiagnosticsAttenuationVoa.setDescription('The attenuation of VOA in dB')
ethernetDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 17), )
if mibBuilder.loadTexts: ethernetDataTable.setStatus('current')
if mibBuilder.loadTexts: ethernetDataTable.setDescription('')
ethernetDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 17, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: ethernetDataEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetDataEntry.setDescription('')
ethernetDataMonitoredDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 17, 1, 1), EthDuplexMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetDataMonitoredDuplexMode.setStatus('current')
if mibBuilder.loadTexts: ethernetDataMonitoredDuplexMode.setDescription('Monitored Duplex Mode. Available if AUTONEG=ENABLE')
ethernetDataMonitoredBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 17, 1, 2), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetDataMonitoredBitrate.setStatus('current')
if mibBuilder.loadTexts: ethernetDataMonitoredBitrate.setDescription('Read from card, - relevant to-auto clock')
ethernetDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 17, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetDataType.setStatus('current')
if mibBuilder.loadTexts: ethernetDataType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
ethernetDataValidSignalTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 17, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 5760), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetDataValidSignalTimer.setStatus('current')
if mibBuilder.loadTexts: ethernetDataValidSignalTimer.setDescription('AINS state signal quality soak time remaining until transition to IS.')
opticalFilterIfDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 19), )
if mibBuilder.loadTexts: opticalFilterIfDataTable.setStatus('current')
if mibBuilder.loadTexts: opticalFilterIfDataTable.setDescription('')
opticalFilterIfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 19, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: opticalFilterIfDataEntry.setStatus('current')
if mibBuilder.loadTexts: opticalFilterIfDataEntry.setDescription('')
opticalFilterIfDataMultiplexLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 19, 1, 1), FspR7OpticalMultiplexLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalFilterIfDataMultiplexLevel.setStatus('current')
if mibBuilder.loadTexts: opticalFilterIfDataMultiplexLevel.setDescription('Optical Multiplex Level')
apsProtFacilityConfigCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 20), )
if mibBuilder.loadTexts: apsProtFacilityConfigCapTable.setStatus('current')
if mibBuilder.loadTexts: apsProtFacilityConfigCapTable.setDescription('')
apsProtFacilityConfigCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 20, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: apsProtFacilityConfigCapEntry.setStatus('current')
if mibBuilder.loadTexts: apsProtFacilityConfigCapEntry.setDescription('')
apsProtFacilityConfigCapSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 20, 1, 1), FspR7APSCommandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsProtFacilityConfigCapSwitchCommand.setStatus('current')
if mibBuilder.loadTexts: apsProtFacilityConfigCapSwitchCommand.setDescription('This object contains capabilities for\n         apsProtFacilityConfigSwitchCommand object.')
apsProtFacilityConfigCapInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 20, 1, 2), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsProtFacilityConfigCapInhibitSwitchToProt.setStatus('current')
if mibBuilder.loadTexts: apsProtFacilityConfigCapInhibitSwitchToProt.setDescription('This object contains capabilities for\n         apsProtFacilityConfigInhibitSwitchToProt object.')
apsProtFacilityConfigCapInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 20, 1, 3), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsProtFacilityConfigCapInhibitSwitchToWork.setStatus('current')
if mibBuilder.loadTexts: apsProtFacilityConfigCapInhibitSwitchToWork.setDescription('This object contains capabilities for\n         apsProtFacilityConfigInhibitSwitchToWork object.')
interfaceConfigCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 21), )
if mibBuilder.loadTexts: interfaceConfigCapTable.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigCapTable.setDescription('')
interfaceConfigCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 21, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: interfaceConfigCapEntry.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigCapEntry.setDescription('')
interfaceConfigCapLoopConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 21, 1, 1), LoopConfigCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceConfigCapLoopConfig.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigCapLoopConfig.setDescription('This object contains capabilities for\n         interfaceConfigLoopConfig object.')
interfaceConfigCapDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 21, 1, 2), FspR7PmResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceConfigCapDataLayerPmReset.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigCapDataLayerPmReset.setDescription('This object contains capabilities for\n         interfaceConfigDataLayerPmReset object.')
interfaceConfigCapEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 21, 1, 3), FspR7EqlzAdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceConfigCapEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigCapEqlzAdmin.setDescription('Scheduled Equalization Administration')
interfaceConfigCapDispertionConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 21, 1, 4), FspR7DispersionConfigCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceConfigCapDispertionConfig.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigCapDispertionConfig.setDescription('Facility Operation Tunable Dispersion Config.')
interfaceConfigCapTurnupConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 21, 1, 5), FspR7TurnupConfigCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceConfigCapTurnupConfig.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigCapTurnupConfig.setDescription('Facility Operation Turnup Configuration.')
interfaceConfigCapInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 21, 1, 6), FspR7InitEqualizationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceConfigCapInitiateEqualization.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigCapInitiateEqualization.setDescription('Initiate Equalization')
interfaceConfigCapBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 21, 1, 7), FspR7PortBehaviourCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceConfigCapBehaviour.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigCapBehaviour.setDescription('Interface Behaviour')
interfaceConfigCapDispersionOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 21, 1, 9), FspR7DispersionOperationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceConfigCapDispersionOperation.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigCapDispersionOperation.setDescription('Chromatic Dispersion Compensation Operation')
opticalIfConfigCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22), )
if mibBuilder.loadTexts: opticalIfConfigCapTable.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapTable.setDescription('')
opticalIfConfigCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: opticalIfConfigCapEntry.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapEntry.setDescription('')
opticalIfConfigCapForceLaserOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 1), FspR7LaserForcedOperationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapForceLaserOn.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapForceLaserOn.setDescription('This object contains capabilities for\n         opticalIfConfigForceLaserOn object.')
opticalIfConfigCapLossAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 2), FspR7LossAttenuationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapLossAttenuation.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapLossAttenuation.setDescription('This object contains capabilities for\n         opticalIfConfigLossAttenuation object.')
opticalIfConfigCapWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 3), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapWdmRxChannel.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapWdmRxChannel.setDescription('Configuration of Rx optical channel')
opticalIfConfigCapSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 4), FspR7BERThresholdSectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapSigDegThresSonetSection.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapSigDegThresSonetSection.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
opticalIfConfigCapDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 5), FspR7DispersionModesCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapDispersionMode.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapDispersionMode.setDescription('Dispersion Compensation Mode')
opticalIfConfigCapAutoThresReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 6), FspR7AutoThresResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapAutoThresReset.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapAutoThresReset.setDescription('This object is used for displaing\n         the capabilities for Adaptive Threshold Control\n         manipulation.s\n        ')
opticalIfConfigCapAseTabCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 7), FspR7AseTabOprCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapAseTabCreation.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapAseTabCreation.setDescription('ASE Table creation in process')
opticalIfConfigCapUtag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 8), FspR7UntaggedFramesCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapUtag.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapUtag.setDescription('If untagged frames shall be enabled on this port or not.')
opticalIfConfigCapCac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 9), FspR7L2CacEnableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapCac.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapCac.setDescription('Enable of CAC')
opticalIfConfigCapLagLoadBallanceSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 10), FspR7LagLoadBallanceSourceCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapLagLoadBallanceSource.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapLagLoadBallanceSource.setDescription('What source is used in the load balance calculation')
opticalIfConfigCapLacpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 11), FspR7LacpTimeoutCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapLacpTimeout.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapLacpTimeout.setDescription('Timeout of the LACP')
opticalIfConfigCapFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 12), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapFarEndCommunication.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapFarEndCommunication.setDescription('Used for Optojack plugs; Communication to Far End Plug is observed')
opticalIfConfigCapLacpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 13), FspR7LacpModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapLacpMode.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapLacpMode.setDescription('Enable of LACP state machine')
opticalIfConfigCapTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 14), FspR7EnableDisableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapTxOffDelay.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapTxOffDelay.setDescription('Enable or disable TXOFFHOLD Period for Error Forwarding and LKDO-OFF Consequent Action.')
opticalIfConfigCapOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 15), FspR7OpuPayloadTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapOpuPayloadType.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapOpuPayloadType.setDescription('OPU Payload Type Indicator')
opticalIfConfigCapOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 16), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapOpticalSetPoint.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapOpticalSetPoint.setDescription('')
opticalIfConfigCapTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 17), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapTransmitChannel.setDescription('Channel')
opticalIfConfigCapFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 18), FspR7FiberBrandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapFiberBrand.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapFiberBrand.setDescription('Brand of fiber present in the fiber plant')
opticalIfConfigCapTiltSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 19), FspR7TiltSetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapTiltSet.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapTiltSet.setDescription('Tilt setting as discrete values versus a range')
opticalIfConfigCapForceFwdAsePilotOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 20), FspR7LaserForcedOperationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapForceFwdAsePilotOn.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapForceFwdAsePilotOn.setDescription('Force the BWD Raman pilot on to allow building of FWD Raman ASE Table')
opticalIfConfigCapXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 21), FspR7XfpDecisionThresCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapXfpDecisionThres.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapXfpDecisionThres.setDescription('XFP Decision threshold setting')
opticalIfConfigCapPrbsPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 22), FspR7PrbsPmResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapPrbsPmReset.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapPrbsPmReset.setDescription('Reset PRBS PM counters')
opticalIfConfigCapTestPrbsRcvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 23), FspR7TestModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapTestPrbsRcvMode.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapTestPrbsRcvMode.setDescription('PRBS test pattern received')
opticalIfConfigCapTestPrbsTrmtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 24), FspR7TestModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapTestPrbsTrmtMode.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapTestPrbsTrmtMode.setDescription('PRBS test pattern transmitted')
opticalIfConfigCapTributarySlotMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 25), FspR7ManualAutoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapTributarySlotMethod.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapTributarySlotMethod.setDescription('Tributary Slot assignment method')
opticalIfConfigCapBip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 22, 1, 32), FspR7BipCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalIfConfigCapBip.setStatus('current')
if mibBuilder.loadTexts: opticalIfConfigCapBip.setDescription('Bit Interleaved Parity')
eroadmIfDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 23), )
if mibBuilder.loadTexts: eroadmIfDiagnosticsTable.setStatus('current')
if mibBuilder.loadTexts: eroadmIfDiagnosticsTable.setDescription('')
eroadmIfDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 23, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: eroadmIfDiagnosticsEntry.setStatus('current')
if mibBuilder.loadTexts: eroadmIfDiagnosticsEntry.setDescription('')
eroadmIfDiagnosticsAttenuationVoa = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 23, 1, 1), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eroadmIfDiagnosticsAttenuationVoa.setStatus('current')
if mibBuilder.loadTexts: eroadmIfDiagnosticsAttenuationVoa.setDescription('The attenuation of VOA in dB')
eroadmIfDiagnosticsOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 23, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: eroadmIfDiagnosticsOutputPower.setStatus('current')
if mibBuilder.loadTexts: eroadmIfDiagnosticsOutputPower.setDescription("The optical output power of a transmitter in dBm,\n         measured in the range of -x to +y dBm.(TBD)\n         It is only valid when there the laserState is 'On'.\n         If not, a value of -65535 is returned.\n         A value of -65535 also indicates that OOP is not available.\n         When out of range, -65534 indicates that the OOP is outside\n         the maximum value and -65533 for outside the minimum value.")
tifiConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 24), )
if mibBuilder.loadTexts: tifiConfigTable.setStatus('current')
if mibBuilder.loadTexts: tifiConfigTable.setDescription('')
tifiConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 24, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: tifiConfigEntry.setStatus('current')
if mibBuilder.loadTexts: tifiConfigEntry.setDescription('')
tifiConfigInvertTifInputLogic = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 24, 1, 1), FspR7InvertTelemetryInputLogic()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tifiConfigInvertTifInputLogic.setStatus('current')
if mibBuilder.loadTexts: tifiConfigInvertTifInputLogic.setDescription('Invert telemetry interface input logic')
tifiConfigTifAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 24, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tifiConfigTifAlarmType.setStatus('current')
if mibBuilder.loadTexts: tifiConfigTifAlarmType.setDescription('Telemetry interface alarm type')
tifiConfigTifAlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 24, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tifiConfigTifAlarmMessage.setStatus('current')
if mibBuilder.loadTexts: tifiConfigTifAlarmMessage.setDescription('Telemetry interface alarm message')
tifiDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 25), )
if mibBuilder.loadTexts: tifiDataTable.setStatus('current')
if mibBuilder.loadTexts: tifiDataTable.setDescription('')
tifiDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 25, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: tifiDataEntry.setStatus('current')
if mibBuilder.loadTexts: tifiDataEntry.setDescription('')
tifiDataTifAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 25, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tifiDataTifAlarmType.setStatus('current')
if mibBuilder.loadTexts: tifiDataTifAlarmType.setDescription('Telemetry interface alarm type')
tifiDataTifAlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 25, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tifiDataTifAlarmMessage.setStatus('current')
if mibBuilder.loadTexts: tifiDataTifAlarmMessage.setDescription('Telemetry interface alarm message')
tifoDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 26), )
if mibBuilder.loadTexts: tifoDataTable.setStatus('current')
if mibBuilder.loadTexts: tifoDataTable.setDescription('')
tifoDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 26, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: tifoDataEntry.setStatus('current')
if mibBuilder.loadTexts: tifoDataEntry.setDescription('')
tifoDataTelemetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 26, 1, 1), FspR7TelemetryOutput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tifoDataTelemetry.setStatus('current')
if mibBuilder.loadTexts: tifoDataTelemetry.setDescription('Telemetry interface output provision')
tifoConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 27), )
if mibBuilder.loadTexts: tifoConfigTable.setStatus('current')
if mibBuilder.loadTexts: tifoConfigTable.setDescription('')
tifoConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 27, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: tifoConfigEntry.setStatus('current')
if mibBuilder.loadTexts: tifoConfigEntry.setDescription('')
tifoConfigTelemetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 27, 1, 1), FspR7TelemetryOutput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tifoConfigTelemetry.setStatus('current')
if mibBuilder.loadTexts: tifoConfigTelemetry.setDescription('Telemetry interface output provision')
opticalLinkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 28), )
if mibBuilder.loadTexts: opticalLinkConfigTable.setStatus('current')
if mibBuilder.loadTexts: opticalLinkConfigTable.setDescription('')
opticalLinkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 28, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: opticalLinkConfigEntry.setStatus('current')
if mibBuilder.loadTexts: opticalLinkConfigEntry.setDescription('')
opticalLinkConfigTxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 28, 1, 1), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalLinkConfigTxLineAttenuation.setStatus('current')
if mibBuilder.loadTexts: opticalLinkConfigTxLineAttenuation.setDescription("The Attenuation (in 0.1 dB) on line connected to\n         transmitter of this interface. If there is loss of signal\n         then line attenuation is -65535. The value -255 will be\n         returned if the value isn't available.")
opticalLinkConfigRxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 28, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalLinkConfigRxLineAttenuation.setStatus('current')
if mibBuilder.loadTexts: opticalLinkConfigRxLineAttenuation.setDescription("The Attenuation (in 0.1 dB) on line connected to receiver\n         of this interface. If there is loss of signal then ine\n         attenuation is -65535. The value -255 will be returned if\n         the value isn't available.")
opticalLinkConfigFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 28, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalLinkConfigFarEndLocation.setStatus('current')
if mibBuilder.loadTexts: opticalLinkConfigFarEndLocation.setDescription('')
opticalLinkDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 29), )
if mibBuilder.loadTexts: opticalLinkDataTable.setStatus('current')
if mibBuilder.loadTexts: opticalLinkDataTable.setDescription('')
opticalLinkDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 29, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: opticalLinkDataEntry.setStatus('current')
if mibBuilder.loadTexts: opticalLinkDataEntry.setDescription('')
opticalLinkDataLogicalInterfaceAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 29, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLinkDataLogicalInterfaceAid.setStatus('current')
if mibBuilder.loadTexts: opticalLinkDataLogicalInterfaceAid.setDescription('Logical Interface AID')
virtualOpticalChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 30), )
if mibBuilder.loadTexts: virtualOpticalChannelConfigTable.setStatus('current')
if mibBuilder.loadTexts: virtualOpticalChannelConfigTable.setDescription('')
virtualOpticalChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 30, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: virtualOpticalChannelConfigEntry.setStatus('current')
if mibBuilder.loadTexts: virtualOpticalChannelConfigEntry.setDescription('')
virtualOpticalChannelConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 30, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualOpticalChannelConfigAlias.setStatus('current')
if mibBuilder.loadTexts: virtualOpticalChannelConfigAlias.setDescription('User Applied Descriptor')
virtualOpticalChannelDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 31), )
if mibBuilder.loadTexts: virtualOpticalChannelDataTable.setStatus('current')
if mibBuilder.loadTexts: virtualOpticalChannelDataTable.setDescription('')
virtualOpticalChannelDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 31, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: virtualOpticalChannelDataEntry.setStatus('current')
if mibBuilder.loadTexts: virtualOpticalChannelDataEntry.setDescription('')
virtualOpticalChannelDataTransmitWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 31, 1, 1), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualOpticalChannelDataTransmitWavelength.setStatus('current')
if mibBuilder.loadTexts: virtualOpticalChannelDataTransmitWavelength.setDescription('Wavelength of Optical Interface (unit: nm)')
virtualOpticalChannelDataTransmitFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 31, 1, 2), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualOpticalChannelDataTransmitFrequency.setStatus('current')
if mibBuilder.loadTexts: virtualOpticalChannelDataTransmitFrequency.setDescription('Frequency of Optical Interface (unit: nm)')
virtualOpticalChannelDataTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 31, 1, 3), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualOpticalChannelDataTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: virtualOpticalChannelDataTransmitChannel.setDescription('Channel')
virtualOpticalChannelDataConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 31, 1, 4), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualOpticalChannelDataConnectState.setStatus('current')
if mibBuilder.loadTexts: virtualOpticalChannelDataConnectState.setDescription('Connection State')
logicalIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32), )
if mibBuilder.loadTexts: logicalIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: logicalIfConfigTable.setDescription('')
logicalIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: logicalIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: logicalIfConfigEntry.setDescription('')
logicalIfConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigAlias.setStatus('current')
if mibBuilder.loadTexts: logicalIfConfigAlias.setDescription('Alias.')
logicalIfConfigAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigAreaId.setStatus('current')
if mibBuilder.loadTexts: logicalIfConfigAreaId.setDescription('OSPF Area ID for IP Interface')
logicalIfConfigMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigMetric.setStatus('current')
if mibBuilder.loadTexts: logicalIfConfigMetric.setDescription('Routing Metric')
logicalIfConfigHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigHelloInterval.setStatus('current')
if mibBuilder.loadTexts: logicalIfConfigHelloInterval.setDescription('Hello Interval')
logicalIfConfigDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigDeadInterval.setStatus('current')
if mibBuilder.loadTexts: logicalIfConfigDeadInterval.setDescription('Dead Interval')
logicalIfConfigPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigPrio.setStatus('current')
if mibBuilder.loadTexts: logicalIfConfigPrio.setDescription('Priority')
logicalIfConfigRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigRetransmitInterval.setStatus('current')
if mibBuilder.loadTexts: logicalIfConfigRetransmitInterval.setDescription('Retransmit Interval')
logicalIfConfigAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 8), FspR7CpAuthType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigAuthType.setStatus('current')
if mibBuilder.loadTexts: logicalIfConfigAuthType.setDescription('Authentication Type')
logicalIfConfigAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 9), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigAuthString.setStatus('current')
if mibBuilder.loadTexts: logicalIfConfigAuthString.setDescription('Authentication String')
logicalIfConfigOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 10), FspR7OspfMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigOspf.setStatus('current')
if mibBuilder.loadTexts: logicalIfConfigOspf.setDescription('OSPF Routing (Dynamic)')
logicalIfConfigPushedNearEndIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigPushedNearEndIpHeader.setStatus('current')
if mibBuilder.loadTexts: logicalIfConfigPushedNearEndIpHeader.setDescription('Pushed Near End IP address in encapsulating header')
logicalIfConfigPushedFarEndIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigPushedFarEndIpHeader.setStatus('current')
if mibBuilder.loadTexts: logicalIfConfigPushedFarEndIpHeader.setDescription('Pushed Far End IP address in encapsulating header')
logicalIfConfigTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 32, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 255), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalIfConfigTimeToLive.setStatus('current')
if mibBuilder.loadTexts: logicalIfConfigTimeToLive.setDescription('Time to Live')
logicalIfDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33), )
if mibBuilder.loadTexts: logicalIfDataTable.setStatus('current')
if mibBuilder.loadTexts: logicalIfDataTable.setDescription('')
logicalIfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: logicalIfDataEntry.setStatus('current')
if mibBuilder.loadTexts: logicalIfDataEntry.setDescription('')
logicalIfDataFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1, 1), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalIfDataFacilityType.setStatus('current')
if mibBuilder.loadTexts: logicalIfDataFacilityType.setDescription('Facility Type.')
logicalIfDataLanLinkAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalIfDataLanLinkAid.setStatus('current')
if mibBuilder.loadTexts: logicalIfDataLanLinkAid.setDescription('Sup. DCN Facility AID.')
logicalIfDataLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalIfDataLogicalInterfaceId.setStatus('current')
if mibBuilder.loadTexts: logicalIfDataLogicalInterfaceId.setDescription('Logical InterfaceId.')
logicalIfDataOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1, 4), FspR7OspfMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalIfDataOspf.setStatus('current')
if mibBuilder.loadTexts: logicalIfDataOspf.setDescription('OSPF Routing (Dynamic)')
logicalIfDataDcnAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1, 5), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalIfDataDcnAid.setStatus('current')
if mibBuilder.loadTexts: logicalIfDataDcnAid.setDescription('Sup. DCN Facility AID.')
logicalIfDataLanLinkAidDerived = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1, 6), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalIfDataLanLinkAidDerived.setStatus('current')
if mibBuilder.loadTexts: logicalIfDataLanLinkAidDerived.setDescription('Sup. DCN Facility AID.')
logicalIfDataIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1, 7), FspR7IpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalIfDataIpType.setStatus('current')
if mibBuilder.loadTexts: logicalIfDataIpType.setDescription('Type of IP configuration')
logicalIfDataIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalIfDataIpAddr.setStatus('current')
if mibBuilder.loadTexts: logicalIfDataIpAddr.setDescription('IP Address assigned to LAN IP Interface')
logicalIfDataIpAddrMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalIfDataIpAddrMonitor.setStatus('current')
if mibBuilder.loadTexts: logicalIfDataIpAddrMonitor.setDescription('IP address assigned to LAN IP Interface')
logicalIfDataIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalIfDataIpMask.setStatus('current')
if mibBuilder.loadTexts: logicalIfDataIpMask.setDescription('IP MASK assigned to LAN IP Interface')
logicalIfDataIpMaskMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalIfDataIpMaskMonitor.setStatus('current')
if mibBuilder.loadTexts: logicalIfDataIpMaskMonitor.setDescription('IP mask assigned to LAN IP Interface')
logicalIfDataEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 33, 1, 12), FspR7CpEncapsulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalIfDataEncapsulation.setStatus('current')
if mibBuilder.loadTexts: logicalIfDataEncapsulation.setDescription('Encapsulation')
ptpEntityDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34), )
if mibBuilder.loadTexts: ptpEntityDataTable.setStatus('current')
if mibBuilder.loadTexts: ptpEntityDataTable.setDescription('')
ptpEntityDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1), ).setIndexNames((0, "ADVA-MIB", "ptpEntityIndex"))
if mibBuilder.loadTexts: ptpEntityDataEntry.setStatus('current')
if mibBuilder.loadTexts: ptpEntityDataEntry.setDescription('')
ptpEntityDataConnEqptState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 1), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataConnEqptState.setStatus('current')
if mibBuilder.loadTexts: ptpEntityDataConnEqptState.setDescription('')
ptpEntityDataChannelProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 2), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataChannelProvision.setStatus('current')
if mibBuilder.loadTexts: ptpEntityDataChannelProvision.setDescription('')
ptpEntityDataLambda = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 3), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataLambda.setStatus('current')
if mibBuilder.loadTexts: ptpEntityDataLambda.setDescription('')
ptpEntityDataFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 4), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataFrequency.setStatus('current')
if mibBuilder.loadTexts: ptpEntityDataFrequency.setDescription('')
ptpEntityDataReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 5), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataReach.setStatus('current')
if mibBuilder.loadTexts: ptpEntityDataReach.setDescription('')
ptpEntityDataBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 6), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataBandProvision.setStatus('current')
if mibBuilder.loadTexts: ptpEntityDataBandProvision.setDescription('')
ptpEntityDataSubBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 7), FspR7OpticalSubBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataSubBandProvision.setStatus('current')
if mibBuilder.loadTexts: ptpEntityDataSubBandProvision.setDescription('')
ptpEntityDataGroupProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 8), FspR7OpticalGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataGroupProvision.setStatus('current')
if mibBuilder.loadTexts: ptpEntityDataGroupProvision.setDescription('')
ptpEntityDataSfProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 9), FspR7SingleFiberLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataSfProvision.setStatus('current')
if mibBuilder.loadTexts: ptpEntityDataSfProvision.setDescription('')
ptpEntityDataConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 10), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataConnector.setStatus('current')
if mibBuilder.loadTexts: ptpEntityDataConnector.setDescription('')
ptpEntityDataFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 11), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataFiber.setStatus('current')
if mibBuilder.loadTexts: ptpEntityDataFiber.setDescription('')
ptpEntityDataDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 12), ApsDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataDirection.setStatus('current')
if mibBuilder.loadTexts: ptpEntityDataDirection.setDescription('')
ptpEntityDataLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 13), FspR7OpticalMultiplexLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataLevel.setStatus('current')
if mibBuilder.loadTexts: ptpEntityDataLevel.setDescription('')
ptpEntityDataFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 34, 1, 14), FspR7InterfaceFunction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpEntityDataFunction.setStatus('current')
if mibBuilder.loadTexts: ptpEntityDataFunction.setDescription('')
farEndIfDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 35), )
if mibBuilder.loadTexts: farEndIfDiagnosticsTable.setStatus('current')
if mibBuilder.loadTexts: farEndIfDiagnosticsTable.setDescription('Contains diagnostic entries for optical interfaces. This\n         table extends the entries in the ifTable (RFC 2863).')
farEndIfDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 35, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: farEndIfDiagnosticsEntry.setStatus('current')
if mibBuilder.loadTexts: farEndIfDiagnosticsEntry.setDescription('')
farEndIfDiagnosticsLaserBiasCurrentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 35, 1, 1), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfDiagnosticsLaserBiasCurrentLevel.setStatus('current')
if mibBuilder.loadTexts: farEndIfDiagnosticsLaserBiasCurrentLevel.setDescription('Instantaneous Laser Bias Current Level')
farEndIfDiagnosticsInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 35, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfDiagnosticsInputPower.setStatus('current')
if mibBuilder.loadTexts: farEndIfDiagnosticsInputPower.setDescription('The optical input power of a transmitter in dBm,\n         measured in the range of -x to +y dBm (TBD).\n         It is only valid when there is no loss of signal at the input,\n         in which case a value of -65535 is returned.\n         A value of -65535 also indicates that OIP is not available.\n         When out of range, -65534 indicates that the OIP is outside\n         the maximum value and -65533 for outside the minimum value.')
farEndIfDiagnosticsOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 35, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfDiagnosticsOutputPower.setStatus('current')
if mibBuilder.loadTexts: farEndIfDiagnosticsOutputPower.setDescription("The optical output power of a transmitter in dBm,\n         measured in the range of -x to +y dBm.(TBD)\n         It is only valid when there the laserState is 'On'.\n         If not, a value of -65535 is returned.\n         A value of -65535 also indicates that OOP is not available.\n         When out of range, -65534 indicates that the OOP is outside\n         the maximum value and -65533 for outside the minimum value.")
farEndIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 36), )
if mibBuilder.loadTexts: farEndIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: farEndIfConfigTable.setDescription('')
farEndIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 36, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: farEndIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: farEndIfConfigEntry.setDescription('')
farEndIfConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 36, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: farEndIfConfigAlias.setStatus('current')
if mibBuilder.loadTexts: farEndIfConfigAlias.setDescription('A string, configurable by the operator, containing a\n         symbolic name for the trail which is terminated at this interface.')
farEndIfConfigLoopConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 36, 1, 2), LoopConfig()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: farEndIfConfigLoopConfig.setStatus('current')
if mibBuilder.loadTexts: farEndIfConfigLoopConfig.setDescription('The configuration of the loopback function.\n         - noLoop: no loop configuration on the interface.\n         - lineLoop: the incoming signal is looped to the outgoing\n         line on the interface. The incoming signal is sent in the\n         downstream direction and processed as normal.\n         - inwardLoop: the output signal is looped to the incoming line\n         on the interface. The looped signal is transmitted unchanged on\n         the optical output.')
farEndIfConfigCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 37), )
if mibBuilder.loadTexts: farEndIfConfigCapTable.setStatus('current')
if mibBuilder.loadTexts: farEndIfConfigCapTable.setDescription('')
farEndIfConfigCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 37, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: farEndIfConfigCapEntry.setStatus('current')
if mibBuilder.loadTexts: farEndIfConfigCapEntry.setDescription('')
farEndIfConfigCapLoopConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 37, 1, 1), LoopConfigCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfConfigCapLoopConfig.setStatus('current')
if mibBuilder.loadTexts: farEndIfConfigCapLoopConfig.setDescription('External or Facility Loopback')
farEndIfDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 38), )
if mibBuilder.loadTexts: farEndIfDataTable.setStatus('current')
if mibBuilder.loadTexts: farEndIfDataTable.setDescription('')
farEndIfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 38, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: farEndIfDataEntry.setStatus('current')
if mibBuilder.loadTexts: farEndIfDataEntry.setDescription('')
farEndIfDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 38, 1, 1), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfDataType.setStatus('current')
if mibBuilder.loadTexts: farEndIfDataType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
farEndIfDataTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 38, 1, 2), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfDataTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: farEndIfDataTransmitChannel.setDescription('Channel')
farEndIfDataTransmitWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 38, 1, 3), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfDataTransmitWavelength.setStatus('current')
if mibBuilder.loadTexts: farEndIfDataTransmitWavelength.setDescription('Wavelength of Optical Interface (unit: nm)')
farEndIfDataTransmitFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 38, 1, 4), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfDataTransmitFrequency.setStatus('current')
if mibBuilder.loadTexts: farEndIfDataTransmitFrequency.setDescription('Frequency of Optical Interface (unit: nm)')
farEndIfDataReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 38, 1, 5), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfDataReach.setStatus('current')
if mibBuilder.loadTexts: farEndIfDataReach.setDescription('Reach')
farEndIfDataConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 38, 1, 6), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfDataConnector.setStatus('current')
if mibBuilder.loadTexts: farEndIfDataConnector.setDescription('The textual description of the external connector type\n         provided for an interface (eg. SC, LC, RJ45, etc).')
farEndIfDataFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 38, 1, 7), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfDataFiberType.setStatus('current')
if mibBuilder.loadTexts: farEndIfDataFiberType.setDescription("The fiber type of this interface. For interface modules not\n         supporting Fibre Channel Transmission, the value will be 'unspecified'.")
farEndIfDataConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 38, 1, 8), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfDataConnectionType.setStatus('current')
if mibBuilder.loadTexts: farEndIfDataConnectionType.setDescription('Connectivity Parameters for Facilities')
farEndIfDataAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 38, 1, 9), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: farEndIfDataAdmin.setStatus('current')
if mibBuilder.loadTexts: farEndIfDataAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
interfaceConfigExternalVidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 39), )
if mibBuilder.loadTexts: interfaceConfigExternalVidCapsTable.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigExternalVidCapsTable.setDescription("This table is used to get capabilities for EXTVID parameter. Regular\n         cap tables including EXTVID show the length of output string.\n         Value 0 in regular cap tables means 'no capabilities'.\n         The second index (n) is used to devide the output string to n string blocks.\n         Each block has a maximum of 512 bytes. n = output string / 512.")
interfaceConfigExternalVidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 39, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvDcnExternalVidCapsIndexCap"))
if mibBuilder.loadTexts: interfaceConfigExternalVidCapsEntry.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigExternalVidCapsEntry.setDescription('')
interfaceConfigExternalVidCapsStringCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 39, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceConfigExternalVidCapsStringCap.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigExternalVidCapsStringCap.setDescription('')
interfaceConfigLanAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 40), )
if mibBuilder.loadTexts: interfaceConfigLanAidCapsTable.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigLanAidCapsTable.setDescription('')
interfaceConfigLanAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 40, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "interfaceConfigLanAidCapsIndex"))
if mibBuilder.loadTexts: interfaceConfigLanAidCapsEntry.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigLanAidCapsEntry.setDescription('')
interfaceConfigLanAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 40, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceConfigLanAidCapsIndex.setStatus('current')
if mibBuilder.loadTexts: interfaceConfigLanAidCapsIndex.setDescription('AID of LAN')
neighborDiscoveryDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 41), )
if mibBuilder.loadTexts: neighborDiscoveryDataTable.setStatus('current')
if mibBuilder.loadTexts: neighborDiscoveryDataTable.setDescription('')
neighborDiscoveryDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 41, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: neighborDiscoveryDataEntry.setStatus('current')
if mibBuilder.loadTexts: neighborDiscoveryDataEntry.setDescription('')
neighborDiscoveryDataFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 41, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborDiscoveryDataFarEndIp.setStatus('current')
if mibBuilder.loadTexts: neighborDiscoveryDataFarEndIp.setDescription('')
neighborDiscoveryDataFarEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 41, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborDiscoveryDataFarEndPort.setStatus('current')
if mibBuilder.loadTexts: neighborDiscoveryDataFarEndPort.setDescription('Far End Port Aid - index of AID')
neighborDiscoveryDataFarEndTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 41, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborDiscoveryDataFarEndTid.setStatus('current')
if mibBuilder.loadTexts: neighborDiscoveryDataFarEndTid.setDescription('')
neighborDiscoveryDataFarEndTranLayerTermPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 41, 1, 4), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborDiscoveryDataFarEndTranLayerTermPoint.setStatus('current')
if mibBuilder.loadTexts: neighborDiscoveryDataFarEndTranLayerTermPoint.setDescription('Far End Transport Layer Termination Point - index of AID')
neighborDiscoveryDataFarEndPortAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 41, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborDiscoveryDataFarEndPortAid.setStatus('current')
if mibBuilder.loadTexts: neighborDiscoveryDataFarEndPortAid.setDescription('Far End Port Aid - string of AID')
neighborDiscoveryDataFarEndTranLayerTermPointAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 41, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborDiscoveryDataFarEndTranLayerTermPointAid.setStatus('current')
if mibBuilder.loadTexts: neighborDiscoveryDataFarEndTranLayerTermPointAid.setDescription('Far End Transport Layer Termination Point - string of AID')
exChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42), )
if mibBuilder.loadTexts: exChannelConfigTable.setStatus('current')
if mibBuilder.loadTexts: exChannelConfigTable.setDescription('Contains entries for the external channels.\n        ')
exChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: exChannelConfigEntry.setStatus('current')
if mibBuilder.loadTexts: exChannelConfigEntry.setDescription('Only external channels will have an entry in this table.')
exChannelConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigAlias.setStatus('current')
if mibBuilder.loadTexts: exChannelConfigAlias.setDescription('User Applied Descriptor')
exChannelConfigFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigFarEndLocation.setStatus('current')
if mibBuilder.loadTexts: exChannelConfigFarEndLocation.setDescription('')
exChannelConfigBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 3), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: exChannelConfigBitrate.setStatus('current')
if mibBuilder.loadTexts: exChannelConfigBitrate.setDescription('')
exChannelConfigFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 4), FspR7FecType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigFecType.setStatus('current')
if mibBuilder.loadTexts: exChannelConfigFecType.setDescription('')
exChannelConfigLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 5), FspR7LineCoding()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigLineCoding.setStatus('current')
if mibBuilder.loadTexts: exChannelConfigLineCoding.setDescription('')
exChannelConfigFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 6), FspR7FrameFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigFrameFormat.setStatus('current')
if mibBuilder.loadTexts: exChannelConfigFrameFormat.setDescription('')
exChannelConfigOpticalPowerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-9900, 600), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigOpticalPowerTx.setStatus('current')
if mibBuilder.loadTexts: exChannelConfigOpticalPowerTx.setDescription('Optical Power Transmit')
exChannelConfigOSNRTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 58), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigOSNRTransmit.setStatus('current')
if mibBuilder.loadTexts: exChannelConfigOSNRTransmit.setDescription('Optical Signal to Noise Ratio Transmit')
exChannelConfigPMDTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 30), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('ps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigPMDTransmit.setStatus('current')
if mibBuilder.loadTexts: exChannelConfigPMDTransmit.setDescription('Polarization Mode Dispersion Transmit')
exChannelConfigChromaticDispersionTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-60000, 60000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigChromaticDispersionTx.setStatus('current')
if mibBuilder.loadTexts: exChannelConfigChromaticDispersionTx.setDescription('Chromatic Dispersion Transmit')
exChannelConfigMinimumOSNRRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 58), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigMinimumOSNRRcv.setStatus('current')
if mibBuilder.loadTexts: exChannelConfigMinimumOSNRRcv.setDescription('Minimum Optical Signal to Noise Ratio, Rcv')
exChannelConfigMinimumOpticalPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2500, 0), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigMinimumOpticalPowerRcv.setStatus('current')
if mibBuilder.loadTexts: exChannelConfigMinimumOpticalPowerRcv.setDescription('Minimum Optical Pwr Rcv')
exChannelConfigMaximumOpticalPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigMaximumOpticalPowerRcv.setStatus('current')
if mibBuilder.loadTexts: exChannelConfigMaximumOpticalPowerRcv.setDescription('Maximum Optical Pwr Rcv')
exChannelConfigMaximumPMDRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 30), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('ps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigMaximumPMDRcv.setStatus('current')
if mibBuilder.loadTexts: exChannelConfigMaximumPMDRcv.setDescription('Maximum Polarization Mode Dispersion Rcv')
exChannelConfigChromaticDispersionRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-60000, 60000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigChromaticDispersionRcv.setStatus('current')
if mibBuilder.loadTexts: exChannelConfigChromaticDispersionRcv.setDescription('Maximum Chromatic Dispersion Rcv')
exChannelConfigMaxBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 42, 1, 16), FspR7MaxBitErrorRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelConfigMaxBitErrorRate.setStatus('current')
if mibBuilder.loadTexts: exChannelConfigMaxBitErrorRate.setDescription('Maximum Bit Error Rate')
exChannelDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 43), )
if mibBuilder.loadTexts: exChannelDataTable.setStatus('current')
if mibBuilder.loadTexts: exChannelDataTable.setDescription('Contains diagnostic entries for external interfaces.\n        ')
exChannelDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 43, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: exChannelDataEntry.setStatus('current')
if mibBuilder.loadTexts: exChannelDataEntry.setDescription('')
exChannelDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 43, 1, 1), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exChannelDataType.setStatus('current')
if mibBuilder.loadTexts: exChannelDataType.setDescription('')
exChannelDataTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 43, 1, 2), FspR7ChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelDataTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: exChannelDataTransmitChannel.setDescription('Channel')
exChannelDataChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 43, 1, 3), FspR7ChannelBandwidth()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exChannelDataChannelBandwidth.setStatus('current')
if mibBuilder.loadTexts: exChannelDataChannelBandwidth.setDescription('Channel Bandwidth')
exChannelDataConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 43, 1, 4), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exChannelDataConnectionState.setStatus('current')
if mibBuilder.loadTexts: exChannelDataConnectionState.setDescription('Connection State')
vtpEntityDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44), )
if mibBuilder.loadTexts: vtpEntityDataTable.setStatus('current')
if mibBuilder.loadTexts: vtpEntityDataTable.setDescription('')
vtpEntityDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1), ).setIndexNames((0, "ADVA-MIB", "vtpEntityIndex"))
if mibBuilder.loadTexts: vtpEntityDataEntry.setStatus('current')
if mibBuilder.loadTexts: vtpEntityDataEntry.setDescription('')
vtpEntityDataConnEqptState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 1), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataConnEqptState.setStatus('current')
if mibBuilder.loadTexts: vtpEntityDataConnEqptState.setDescription('')
vtpEntityDataChannelProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 2), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataChannelProvision.setStatus('current')
if mibBuilder.loadTexts: vtpEntityDataChannelProvision.setDescription('')
vtpEntityDataLambda = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 3), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataLambda.setStatus('current')
if mibBuilder.loadTexts: vtpEntityDataLambda.setDescription('')
vtpEntityDataFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 4), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataFrequency.setStatus('current')
if mibBuilder.loadTexts: vtpEntityDataFrequency.setDescription('')
vtpEntityDataReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 5), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataReach.setStatus('current')
if mibBuilder.loadTexts: vtpEntityDataReach.setDescription('')
vtpEntityDataBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 6), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataBandProvision.setStatus('current')
if mibBuilder.loadTexts: vtpEntityDataBandProvision.setDescription('')
vtpEntityDataSubBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 7), FspR7OpticalSubBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataSubBandProvision.setStatus('current')
if mibBuilder.loadTexts: vtpEntityDataSubBandProvision.setDescription('')
vtpEntityDataGroupProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 8), FspR7OpticalGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataGroupProvision.setStatus('current')
if mibBuilder.loadTexts: vtpEntityDataGroupProvision.setDescription('')
vtpEntityDataSfProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 9), FspR7SingleFiberLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataSfProvision.setStatus('current')
if mibBuilder.loadTexts: vtpEntityDataSfProvision.setDescription('')
vtpEntityDataConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 10), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataConnector.setStatus('current')
if mibBuilder.loadTexts: vtpEntityDataConnector.setDescription('')
vtpEntityDataFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 11), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataFiber.setStatus('current')
if mibBuilder.loadTexts: vtpEntityDataFiber.setDescription('')
vtpEntityDataDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 12), ApsDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataDirection.setStatus('current')
if mibBuilder.loadTexts: vtpEntityDataDirection.setDescription('')
vtpEntityDataLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 13), FspR7OpticalMultiplexLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataLevel.setStatus('current')
if mibBuilder.loadTexts: vtpEntityDataLevel.setDescription('')
vtpEntityDataFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 3, 44, 1, 14), FspR7InterfaceFunction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpEntityDataFunction.setStatus('current')
if mibBuilder.loadTexts: vtpEntityDataFunction.setDescription('')
vc4allocatedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 1), )
if mibBuilder.loadTexts: vc4allocatedTable.setStatus('current')
if mibBuilder.loadTexts: vc4allocatedTable.setDescription('The higher order VC table for the configuration of an SDH/SONET Port.\n         Only VC-4s allocated to a service are present in this table.')
vc4allocatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: vc4allocatedEntry.setStatus('current')
if mibBuilder.loadTexts: vc4allocatedEntry.setDescription('An entry in the higher order VC (HO-VC) table. Each entry in\n         this table represents a higher order AU (VC).')
vc4allocatedContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 1, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4allocatedContainer.setStatus('current')
if mibBuilder.loadTexts: vc4allocatedContainer.setDescription('The entityIndex of the VC-4 container.')
vc4allocatedClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4allocatedClassInstanceNumber.setStatus('current')
if mibBuilder.loadTexts: vc4allocatedClassInstanceNumber.setDescription('The class instance number of this entity within the module(card)')
vc4allocatedSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4allocatedSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: vc4allocatedSequenceNumber.setDescription('Sequence number of an individual container within a Virtual Concatenated Group')
vc3allocatedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 2), )
if mibBuilder.loadTexts: vc3allocatedTable.setStatus('current')
if mibBuilder.loadTexts: vc3allocatedTable.setDescription('The lower order VC table for the configuration of an SDH/SONET\n         Port. Only VC-3s allocated to a service are present in this table.')
vc3allocatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 2, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: vc3allocatedEntry.setStatus('current')
if mibBuilder.loadTexts: vc3allocatedEntry.setDescription('An entry in the lower order VC (LO-VC) table. Each entry in\n         this table represents a lower order path.')
vc3allocatedContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 2, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc3allocatedContainer.setStatus('current')
if mibBuilder.loadTexts: vc3allocatedContainer.setDescription('The entityIndex of the VC-3 container.')
vc3allocatedClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc3allocatedClassInstanceNumber.setStatus('current')
if mibBuilder.loadTexts: vc3allocatedClassInstanceNumber.setDescription('The class instance number of this entity within the module(card)')
vc3allocatedSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc3allocatedSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: vc3allocatedSequenceNumber.setDescription('Sequence number of an individual container within a Virtual Concatenated Group')
sts1allocatedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 3), )
if mibBuilder.loadTexts: sts1allocatedTable.setStatus('current')
if mibBuilder.loadTexts: sts1allocatedTable.setDescription('')
sts1allocatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 3, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: sts1allocatedEntry.setStatus('current')
if mibBuilder.loadTexts: sts1allocatedEntry.setDescription('')
sts1allocatedContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 3, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts1allocatedContainer.setStatus('current')
if mibBuilder.loadTexts: sts1allocatedContainer.setDescription('The entityIndex of the STS-1 container.')
sts1allocatedClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts1allocatedClassInstanceNumber.setStatus('current')
if mibBuilder.loadTexts: sts1allocatedClassInstanceNumber.setDescription('The class instance number of this entity within the module(card)')
sts1allocatedSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts1allocatedSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: sts1allocatedSequenceNumber.setDescription('Sequence number of an individual container within a Virtual Concatenated Group')
vchConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 4), )
if mibBuilder.loadTexts: vchConfigTable.setStatus('current')
if mibBuilder.loadTexts: vchConfigTable.setDescription('Contains entries for the configuration of VCH interfaces.\n         This table extends the entries in the opticalIfTable.')
vchConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 4, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: vchConfigEntry.setStatus('current')
if mibBuilder.loadTexts: vchConfigEntry.setDescription('')
vchConfigBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 4, 1, 1), SonetVcBundleAllocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vchConfigBundle.setStatus('current')
if mibBuilder.loadTexts: vchConfigBundle.setDescription('List of VC4/VC3/STS1/STS3c/STS24c/STS48c containers used in the BUNDLE')
vchConfigCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 4, 1, 2), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vchConfigCir.setStatus('current')
if mibBuilder.loadTexts: vchConfigCir.setDescription('Comitted Information Rate of the virtual channel.')
vchDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 5), )
if mibBuilder.loadTexts: vchDataTable.setStatus('current')
if mibBuilder.loadTexts: vchDataTable.setDescription('Contains diagnostic entries for optical VCH interfaces.\n         This table extends the entries in the opticalIfDataTable.')
vchDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 5, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: vchDataEntry.setStatus('current')
if mibBuilder.loadTexts: vchDataEntry.setDescription('')
vchDataVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 5, 1, 1), VirtualContainerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vchDataVcType.setStatus('current')
if mibBuilder.loadTexts: vchDataVcType.setDescription('Virtual Container Group Type')
vchDataOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 5, 1, 2), FspR7OpuPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vchDataOpuPayloadType.setStatus('current')
if mibBuilder.loadTexts: vchDataOpuPayloadType.setDescription('OPU Payload Type Indicator')
gfpServiceDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 6), )
if mibBuilder.loadTexts: gfpServiceDefTable.setStatus('current')
if mibBuilder.loadTexts: gfpServiceDefTable.setDescription('The GFP Service Default table provides default values for the\n         configuration of GFP services.')
gfpServiceDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 6, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: gfpServiceDefEntry.setStatus('current')
if mibBuilder.loadTexts: gfpServiceDefEntry.setDescription('An entry in the GFP Service Default table. Each entry in\n         this table represents a default service configuration for a\n         data rate and protocol. These values may be used as suggested\n         values by the management system when defining a new GFP Service.\n         There is one entry in this table for each valid data rate\n         and service mapping (refer also to Appendix 1).')
gfpServiceDefBundleAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 6, 1, 1), SonetVcBundleAllocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpServiceDefBundleAllocation.setStatus('current')
if mibBuilder.loadTexts: gfpServiceDefBundleAllocation.setDescription('The default allocation of VCs for the specified datarate and mapping.')
gfpServiceDefBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1000), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpServiceDefBandwidth.setStatus('current')
if mibBuilder.loadTexts: gfpServiceDefBandwidth.setDescription("The default bandwidth rate throttling of the specified service,\n         valid only for mapping: 'gfpframed' and DataRate mb1250 (GbE).\n         When not applicable, the value 0 is returned.")
gfpServiceDefVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 6, 1, 3), VirtualContainerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpServiceDefVcType.setStatus('current')
if mibBuilder.loadTexts: gfpServiceDefVcType.setDescription('The type of VC allocation for the specified DataRate and Mapping\n         and used together with BundleSize and Bandwidth:\n         -- vc4Type(1): bundle of HO-VCs (VC4)\n         -- vc3Au4Type(2): bundle of LO-VCs (VC4 + TUG3)\n         The default is vc4Type(1).')
sts3callocatedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 7), )
if mibBuilder.loadTexts: sts3callocatedTable.setStatus('current')
if mibBuilder.loadTexts: sts3callocatedTable.setDescription('')
sts3callocatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 7, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: sts3callocatedEntry.setStatus('current')
if mibBuilder.loadTexts: sts3callocatedEntry.setDescription('')
sts3callocatedContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 7, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts3callocatedContainer.setStatus('current')
if mibBuilder.loadTexts: sts3callocatedContainer.setDescription('The entityIndex of the STS-3c container.')
sts3callocatedClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts3callocatedClassInstanceNumber.setStatus('current')
if mibBuilder.loadTexts: sts3callocatedClassInstanceNumber.setDescription('The class instance number of this entity within the module(card)')
sts3callocatedSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts3callocatedSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: sts3callocatedSequenceNumber.setDescription('Sequence number of an individual container within a Virtual Concatenated Group')
vs1allocatedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 8), )
if mibBuilder.loadTexts: vs1allocatedTable.setStatus('current')
if mibBuilder.loadTexts: vs1allocatedTable.setDescription('')
vs1allocatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 8, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: vs1allocatedEntry.setStatus('current')
if mibBuilder.loadTexts: vs1allocatedEntry.setDescription('')
vs1allocatedContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 8, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vs1allocatedContainer.setStatus('current')
if mibBuilder.loadTexts: vs1allocatedContainer.setDescription('The entityIndex of the VS-1 container.')
vs1allocatedClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vs1allocatedClassInstanceNumber.setStatus('current')
if mibBuilder.loadTexts: vs1allocatedClassInstanceNumber.setDescription('The class instance number of this entity within the module(card)')
vs1allocatedSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vs1allocatedSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: vs1allocatedSequenceNumber.setDescription('Sequence number of an individual container within a Virtual Concatenated Group')
vs1allocatedFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 8, 1, 4), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vs1allocatedFacilityType.setStatus('current')
if mibBuilder.loadTexts: vs1allocatedFacilityType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
sts24callocatedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 9), )
if mibBuilder.loadTexts: sts24callocatedTable.setStatus('current')
if mibBuilder.loadTexts: sts24callocatedTable.setDescription('')
sts24callocatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 9, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: sts24callocatedEntry.setStatus('current')
if mibBuilder.loadTexts: sts24callocatedEntry.setDescription('')
sts24callocatedContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 9, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts24callocatedContainer.setStatus('current')
if mibBuilder.loadTexts: sts24callocatedContainer.setDescription('The entityIndex of the STS24C container.')
sts24callocatedClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts24callocatedClassInstanceNumber.setStatus('current')
if mibBuilder.loadTexts: sts24callocatedClassInstanceNumber.setDescription('The class instance number of this entity within the module(card)')
sts24callocatedSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 9, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts24callocatedSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: sts24callocatedSequenceNumber.setDescription('Sequence number of an individual container within a Virtual Concatenated Group')
sts24callocatedFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 9, 1, 4), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts24callocatedFacilityType.setStatus('current')
if mibBuilder.loadTexts: sts24callocatedFacilityType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
sts48callocatedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 10), )
if mibBuilder.loadTexts: sts48callocatedTable.setStatus('current')
if mibBuilder.loadTexts: sts48callocatedTable.setDescription('')
sts48callocatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 10, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: sts48callocatedEntry.setStatus('current')
if mibBuilder.loadTexts: sts48callocatedEntry.setDescription('')
sts48callocatedContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 10, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts48callocatedContainer.setStatus('current')
if mibBuilder.loadTexts: sts48callocatedContainer.setDescription('The entityIndex of the STS48C container.')
sts48callocatedClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts48callocatedClassInstanceNumber.setStatus('current')
if mibBuilder.loadTexts: sts48callocatedClassInstanceNumber.setDescription('The class instance number of this entity within the module(card)')
sts48callocatedSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 10, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts48callocatedSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: sts48callocatedSequenceNumber.setDescription('Sequence number of an individual container within a Virtual Concatenated Group')
sts48callocatedFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 10, 1, 4), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts48callocatedFacilityType.setStatus('current')
if mibBuilder.loadTexts: sts48callocatedFacilityType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
vc4c8allocatedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 12), )
if mibBuilder.loadTexts: vc4c8allocatedTable.setStatus('current')
if mibBuilder.loadTexts: vc4c8allocatedTable.setDescription('')
vc4c8allocatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 12, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: vc4c8allocatedEntry.setStatus('current')
if mibBuilder.loadTexts: vc4c8allocatedEntry.setDescription('')
vc4c8allocatedContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 12, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4c8allocatedContainer.setStatus('current')
if mibBuilder.loadTexts: vc4c8allocatedContainer.setDescription('The entityIndex of the VC4-8c container.')
vc4c8allocatedClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4c8allocatedClassInstanceNumber.setStatus('current')
if mibBuilder.loadTexts: vc4c8allocatedClassInstanceNumber.setDescription('The class instance number of this entity within the module(card)')
vc4c8allocatedSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 12, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4c8allocatedSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: vc4c8allocatedSequenceNumber.setDescription('Sequence number of an individual container within a Virtual Concatenated Group')
vc4c8allocatedFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 12, 1, 4), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4c8allocatedFacilityType.setStatus('current')
if mibBuilder.loadTexts: vc4c8allocatedFacilityType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
vs0allocatedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 13), )
if mibBuilder.loadTexts: vs0allocatedTable.setStatus('current')
if mibBuilder.loadTexts: vs0allocatedTable.setDescription('')
vs0allocatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 13, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: vs0allocatedEntry.setStatus('current')
if mibBuilder.loadTexts: vs0allocatedEntry.setDescription('')
vs0allocatedContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 13, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vs0allocatedContainer.setStatus('current')
if mibBuilder.loadTexts: vs0allocatedContainer.setDescription('The entityIndex of the VS-1 container.')
vs0allocatedClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vs0allocatedClassInstanceNumber.setStatus('current')
if mibBuilder.loadTexts: vs0allocatedClassInstanceNumber.setDescription('The class instance number of this entity within the module(card)')
vs0allocatedFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 13, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vs0allocatedFacilityType.setStatus('current')
if mibBuilder.loadTexts: vs0allocatedFacilityType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
vc4c16allocatedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 14), )
if mibBuilder.loadTexts: vc4c16allocatedTable.setStatus('current')
if mibBuilder.loadTexts: vc4c16allocatedTable.setDescription('')
vc4c16allocatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 14, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: vc4c16allocatedEntry.setStatus('current')
if mibBuilder.loadTexts: vc4c16allocatedEntry.setDescription('')
vc4c16allocatedContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 14, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4c16allocatedContainer.setStatus('current')
if mibBuilder.loadTexts: vc4c16allocatedContainer.setDescription('The entityIndex of the VC4-8c container.')
vc4c16allocatedClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4c16allocatedClassInstanceNumber.setStatus('current')
if mibBuilder.loadTexts: vc4c16allocatedClassInstanceNumber.setDescription('The class instance number of this entity within the module(card)')
vc4c16allocatedFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 4, 1, 14, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4c16allocatedFacilityType.setStatus('current')
if mibBuilder.loadTexts: vc4c16allocatedFacilityType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
intraNeConnectionsLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("undefined", 0), ("notYetDefined", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: intraNeConnectionsLastChanged.setStatus('deprecated')
if mibBuilder.loadTexts: intraNeConnectionsLastChanged.setDescription('NOT YET DEFINED')
intraNeConnectionsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 3), )
if mibBuilder.loadTexts: intraNeConnectionsTable.setStatus('current')
if mibBuilder.loadTexts: intraNeConnectionsTable.setDescription('Table containing the physical internal NE Connectivity, i.e. optical fiber connections\n         between modules in the same NE.')
intraNeConnectionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 3, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: intraNeConnectionsEntry.setStatus('current')
if mibBuilder.loadTexts: intraNeConnectionsEntry.setDescription('Entries in the physical internal Connectivity table.')
intraNeConnectionsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 3, 1, 1), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intraNeConnectionsType.setStatus('current')
if mibBuilder.loadTexts: intraNeConnectionsType.setDescription('Ports can transport uni- or bidirectional traffic.')
intraNeConnectionsEndpointA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 3, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intraNeConnectionsEndpointA.setStatus('current')
if mibBuilder.loadTexts: intraNeConnectionsEndpointA.setDescription('FROM-end of equipment connection (jumper). FROM direction is significant only for 1WAY connections.')
intraNeConnectionsEndpointB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 3, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intraNeConnectionsEndpointB.setStatus('current')
if mibBuilder.loadTexts: intraNeConnectionsEndpointB.setDescription('TO-end of equipment connection (jumper). TO direction is signaificant only for 1WAY')
intraNeConnectionsState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 3, 1, 4), FspR7StateConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intraNeConnectionsState.setStatus('current')
if mibBuilder.loadTexts: intraNeConnectionsState.setDescription('State of the physical connection.')
crsConnConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 4), )
if mibBuilder.loadTexts: crsConnConfigTable.setStatus('current')
if mibBuilder.loadTexts: crsConnConfigTable.setDescription('Table cross-connections config.')
crsConnConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 4, 1), ).setIndexNames((0, "FspR7-MIB", "crsConnDeployProvFrom"), (0, "FspR7-MIB", "crsConnDeployProvTo"))
if mibBuilder.loadTexts: crsConnConfigEntry.setStatus('current')
if mibBuilder.loadTexts: crsConnConfigEntry.setDescription('')
crsConnConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 4, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnConfigAlias.setStatus('current')
if mibBuilder.loadTexts: crsConnConfigAlias.setDescription('')
crsConnConfigRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 4, 1, 2), FspR7RedLinedState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnConfigRedLineState.setStatus('current')
if mibBuilder.loadTexts: crsConnConfigRedLineState.setDescription('')
crsConnConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 4, 1, 3), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnConfigType.setStatus('deprecated')
if mibBuilder.loadTexts: crsConnConfigType.setDescription('')
crsConnConfigPathNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 4, 1, 4), FspR7PathNode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnConfigPathNode.setStatus('current')
if mibBuilder.loadTexts: crsConnConfigPathNode.setDescription('Node count along a signal path on a unidirectional basis from the client signal\n         ingress to egress')
crsConnConfigTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 4, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnConfigTunnelAid.setStatus('deprecated')
if mibBuilder.loadTexts: crsConnConfigTunnelAid.setDescription('')
crsConnDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5), )
if mibBuilder.loadTexts: crsConnDataTable.setStatus('current')
if mibBuilder.loadTexts: crsConnDataTable.setDescription('Table cross-connections data.')
crsConnDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5, 1), ).setIndexNames((0, "FspR7-MIB", "crsConnDeployProvFrom"), (0, "FspR7-MIB", "crsConnDeployProvTo"))
if mibBuilder.loadTexts: crsConnDataEntry.setStatus('current')
if mibBuilder.loadTexts: crsConnDataEntry.setDescription('')
crsConnDataCrsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5, 1, 1), FspR7TypeCrs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDataCrsType.setStatus('current')
if mibBuilder.loadTexts: crsConnDataCrsType.setDescription('')
crsConnDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDataType.setStatus('current')
if mibBuilder.loadTexts: crsConnDataType.setDescription('')
crsConnDataConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5, 1, 3), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDataConn.setStatus('current')
if mibBuilder.loadTexts: crsConnDataConn.setDescription('Connection Direction')
crsConnDataCrsFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5, 1, 4), FspR7FunctionCrs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDataCrsFunction.setStatus('current')
if mibBuilder.loadTexts: crsConnDataCrsFunction.setDescription('')
crsConnDataOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5, 1, 5), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDataOper.setStatus('current')
if mibBuilder.loadTexts: crsConnDataOper.setDescription('')
crsConnDataEntityOutage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5, 1, 6), FspR7NoYes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDataEntityOutage.setStatus('current')
if mibBuilder.loadTexts: crsConnDataEntityOutage.setDescription('')
crsConnDataTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDataTunnelId.setStatus('current')
if mibBuilder.loadTexts: crsConnDataTunnelId.setDescription('')
crsConnDataTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDataTunnelAid.setStatus('current')
if mibBuilder.loadTexts: crsConnDataTunnelAid.setDescription('')
crsConnDataIngressTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDataIngressTid.setStatus('current')
if mibBuilder.loadTexts: crsConnDataIngressTid.setDescription('')
crsConnDataIngressNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDataIngressNodeIp.setStatus('current')
if mibBuilder.loadTexts: crsConnDataIngressNodeIp.setDescription('')
crsConnDataChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 5, 1, 11), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDataChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: crsConnDataChannelSpacing.setDescription('ITU Grid channel spacing')
crsConnWdmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 6), )
if mibBuilder.loadTexts: crsConnWdmConfigTable.setStatus('current')
if mibBuilder.loadTexts: crsConnWdmConfigTable.setDescription('Table cross-connections config.')
crsConnWdmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 6, 1), ).setIndexNames((0, "FspR7-MIB", "crsConnDeployProvFrom"), (0, "FspR7-MIB", "crsConnDeployProvTo"))
if mibBuilder.loadTexts: crsConnWdmConfigEntry.setStatus('current')
if mibBuilder.loadTexts: crsConnWdmConfigEntry.setDescription('')
crsConnWdmConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 6, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnWdmConfigAlias.setStatus('current')
if mibBuilder.loadTexts: crsConnWdmConfigAlias.setDescription('')
crsConnWdmConfigRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 6, 1, 2), FspR7RedLinedState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnWdmConfigRedLineState.setStatus('current')
if mibBuilder.loadTexts: crsConnWdmConfigRedLineState.setDescription('')
crsConnWdmConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 6, 1, 3), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnWdmConfigType.setStatus('current')
if mibBuilder.loadTexts: crsConnWdmConfigType.setDescription('')
crsConnWdmConfigTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 6, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnWdmConfigTunnelAid.setStatus('deprecated')
if mibBuilder.loadTexts: crsConnWdmConfigTunnelAid.setDescription('')
crsConnWdmConfigPathNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 6, 1, 5), FspR7PathNode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnWdmConfigPathNode.setStatus('current')
if mibBuilder.loadTexts: crsConnWdmConfigPathNode.setDescription('Node count along a signal path on a unidirectional basis from the client signal\n         ingress to egress')
crsConnWdmDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 7), )
if mibBuilder.loadTexts: crsConnWdmDataTable.setStatus('current')
if mibBuilder.loadTexts: crsConnWdmDataTable.setDescription('Table cross-connections data.')
crsConnWdmDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 7, 1), ).setIndexNames((0, "FspR7-MIB", "crsConnDeployProvFrom"), (0, "FspR7-MIB", "crsConnDeployProvTo"))
if mibBuilder.loadTexts: crsConnWdmDataEntry.setStatus('current')
if mibBuilder.loadTexts: crsConnWdmDataEntry.setDescription('')
crsConnWdmDataCrsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 7, 1, 1), FspR7TypeCrs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnWdmDataCrsType.setStatus('current')
if mibBuilder.loadTexts: crsConnWdmDataCrsType.setDescription('')
crsConnWdmDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 7, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnWdmDataType.setStatus('current')
if mibBuilder.loadTexts: crsConnWdmDataType.setDescription('')
crsConnWdmDataConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 7, 1, 3), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnWdmDataConn.setStatus('current')
if mibBuilder.loadTexts: crsConnWdmDataConn.setDescription('Connection Direction')
crsConnWdmDataCrsFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 7, 1, 4), FspR7FunctionCrs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnWdmDataCrsFunction.setStatus('current')
if mibBuilder.loadTexts: crsConnWdmDataCrsFunction.setDescription('')
crsConnWdmDataOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 7, 1, 5), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnWdmDataOper.setStatus('current')
if mibBuilder.loadTexts: crsConnWdmDataOper.setDescription('')
crsConnWdmDataEntityOutage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 7, 1, 6), FspR7NoYes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnWdmDataEntityOutage.setStatus('current')
if mibBuilder.loadTexts: crsConnWdmDataEntityOutage.setDescription('')
crsConnWdmDataTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 7, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnWdmDataTunnelAid.setStatus('current')
if mibBuilder.loadTexts: crsConnWdmDataTunnelAid.setDescription('')
crsConnWdmDataIngressTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 7, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnWdmDataIngressTid.setStatus('current')
if mibBuilder.loadTexts: crsConnWdmDataIngressTid.setDescription('')
crsConnWdmDataIngressNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 7, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnWdmDataIngressNodeIp.setStatus('current')
if mibBuilder.loadTexts: crsConnWdmDataIngressNodeIp.setDescription('')
crsConnWdmDataChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 7, 1, 10), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnWdmDataChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: crsConnWdmDataChannelSpacing.setDescription('ITU Grid channel spacing')
physicalTerminationPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 8), )
if mibBuilder.loadTexts: physicalTerminationPointTable.setStatus('current')
if mibBuilder.loadTexts: physicalTerminationPointTable.setDescription('')
physicalTerminationPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 8, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: physicalTerminationPointEntry.setStatus('current')
if mibBuilder.loadTexts: physicalTerminationPointEntry.setDescription('')
physicalTerminationPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 5, 8, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalTerminationPointIndex.setStatus('current')
if mibBuilder.loadTexts: physicalTerminationPointIndex.setDescription('')
controlPlaneWdmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1), )
if mibBuilder.loadTexts: controlPlaneWdmConfigTable.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigTable.setDescription('')
controlPlaneWdmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: controlPlaneWdmConfigEntry.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigEntry.setDescription('')
controlPlaneWdmConfigCtmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCtmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigCtmConfigFlag.setDescription("Label Switched Path Edge Component' Configuration Bitfield")
controlPlaneWdmConfigCtmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCtmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigCtmTraceDetail.setDescription("Label Switched Path Edge Component' Trace Detail")
controlPlaneWdmConfigCtmSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 3), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCtmSetupTimeout.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigCtmSetupTimeout.setDescription("Label Switched Path Edge Component' Set-Up Timeout")
controlPlaneWdmConfigCtmShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 4), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCtmShutdownTimeout.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigCtmShutdownTimeout.setDescription("Label Switched Path Edge Component' Shut-Down Timeout")
controlPlaneWdmConfigCtmRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 5), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCtmRetryWait.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigCtmRetryWait.setDescription("Label Switched Path Edge Component' Initialization Retry Wait")
controlPlaneWdmConfigCtmRetryWaitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCtmRetryWaitMultiplier.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigCtmRetryWaitMultiplier.setDescription("Label Switched Path Edge Component' Initialization Retry Wait Multiplier")
controlPlaneWdmConfigCtmMaximumRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 7), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCtmMaximumRetryWait.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigCtmMaximumRetryWait.setDescription("Label Switched Path Edge Component' Initialization Maximum Retry Wait")
controlPlaneWdmConfigCtmMaximumRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCtmMaximumRetryNumber.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigCtmMaximumRetryNumber.setDescription("Label Switched Path Edge Component' Initialization Maximum Retry Number")
controlPlaneWdmConfigRaConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigRaConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigRaConfigFlag.setDescription('Resource Allocator Configuration Bitfield')
controlPlaneWdmConfigRaTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigRaTraceDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigRaTraceDetail.setDescription('Resource Allocator Trace Detail')
controlPlaneWdmConfigRaAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 11), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigRaAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigRaAlarmActivationTime.setDescription('Resource Allocator Alarm Activation Time')
controlPlaneWdmConfigCmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigCmConfigFlag.setDescription("GMPLS Tunnel Manager Component' Configuration Bitfield")
controlPlaneWdmConfigCmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigCmTraceDetail.setDescription("GMPLS Tunnel Manager Component' Trace Detail")
controlPlaneWdmConfigCmAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 14), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCmAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigCmAlarmActivationTime.setDescription("GMPLS Tunnel Manager Component' Alarm Activation Time")
controlPlaneWdmConfigCmFisFrsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 15), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCmFisFrsTimeout.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigCmFisFrsTimeout.setDescription("GMPLS Tunnel Manager Component' FIS-FRS Timeout")
controlPlaneWdmConfigCmCrankBackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 16), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCmCrankBackTimeout.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigCmCrankBackTimeout.setDescription("GMPLS Tunnel Manager Component' Crank-Back Timeout")
controlPlaneWdmConfigCdbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCdbConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigCdbConfigFlag.setDescription("Label Swithed Path Database Component' Configuration Bitfield")
controlPlaneWdmConfigCdbDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCdbDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigCdbDetail.setDescription("Label Swithed Path Database Component' Trace Detail")
controlPlaneWdmConfigCdbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCdbMaxSize.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigCdbMaxSize.setDescription("Label Swithed Path Database Component' Maximum Size; 0 impiles no limit")
controlPlaneWdmConfigRsvpConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigRsvpConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigRsvpConfigFlag.setDescription("Resource Reservation Protocol Component' Configuration Bitfield")
controlPlaneWdmConfigRsvpMaxExpRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 21), Counter64String()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigRsvpMaxExpRestartTime.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigRsvpMaxExpRestartTime.setDescription("Maximum Expected Resource Reservation Protocol Component' Restart Time")
controlPlaneWdmConfigRsvpMaxExpRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 22), Unsigned32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigRsvpMaxExpRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigRsvpMaxExpRecoveryTime.setDescription("Maximum Expected Resource Reservation Protocol Component' Recovery Time")
controlPlaneWdmConfigTedbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigTedbConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigTedbConfigFlag.setDescription("Traffic Engineering Component' Database Configuration Bitfield")
controlPlaneWdmConfigTedbTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigTedbTraceDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigTedbTraceDetail.setDescription("Traffic Engineering Component' Database Trace Detail")
controlPlaneWdmConfigTedbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigTedbMaxSize.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigTedbMaxSize.setDescription("Traffic Engineering Component' Database Maximum Size")
controlPlaneWdmConfigTedbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigTedbRouterId.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigTedbRouterId.setDescription("Traffic Engineering Component' Router ID")
controlPlaneWdmConfigTedbMinAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 27), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigTedbMinAdvertWait.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigTedbMinAdvertWait.setDescription("Traffic Engineering Component' Minimum Advertisement Wait")
controlPlaneWdmConfigNaasConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigNaasConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigNaasConfigFlag.setDescription('Node Attribute Advertising Service Database Configuration Bitfield')
controlPlaneWdmConfigNaasTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigNaasTraceDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigNaasTraceDetail.setDescription('Node Attribute Advertising Service Database Trace Detail')
controlPlaneWdmConfigNaasMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigNaasMaxSize.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigNaasMaxSize.setDescription('Node Attribute Advertising Service Database Maximum Size')
controlPlaneWdmConfigNaasAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 31), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigNaasAdvertWait.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigNaasAdvertWait.setDescription('Node Attribute Advertising Service Database Advertisement Wait')
controlPlaneWdmConfigPcConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigPcConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigPcConfigFlag.setDescription("Path Computation Component' Configuration Bitfield")
controlPlaneWdmConfigPcTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigPcTraceDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigPcTraceDetail.setDescription("Path Computation Component' Trace Detail.")
controlPlaneWdmConfigCdConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCdConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigCdConfigFlag.setDescription("Configuration Data Component' Configuration Bitfield")
controlPlaneWdmConfigCdTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 35), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCdTraceDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigCdTraceDetail.setDescription("Configuration Data Component' Trace Detail")
controlPlaneWdmConfigCdResyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigCdResyncTimeout.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigCdResyncTimeout.setDescription("Configuration Data Component' Resync Timeout")
controlPlaneWdmConfigRmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigRmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigRmConfigFlag.setDescription("Resource Management Component' Configuration Bitfield")
controlPlaneWdmConfigRmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigRmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigRmTraceDetail.setDescription("Resource Management Component' Trace Detail")
controlPlaneWdmConfigRmTraceTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 39), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigRmTraceTarget.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigRmTraceTarget.setDescription("Resource Management Component' Trace Target")
controlPlaneWdmConfigWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 1, 1, 40), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 12), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneWdmConfigWaitToRestore.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmConfigWaitToRestore.setDescription('Wait to Restore')
controlPlaneWdmDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2), )
if mibBuilder.loadTexts: controlPlaneWdmDataTable.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmDataTable.setDescription('')
controlPlaneWdmDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: controlPlaneWdmDataEntry.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmDataEntry.setDescription('')
controlPlaneWdmDataCtmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmDataCtmAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmDataCtmAlias.setDescription("Label Switched Path Edge Component Component' Base Name")
controlPlaneWdmDataRaAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmDataRaAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmDataRaAlias.setDescription("Resource Allocator Component' Base Name")
controlPlaneWdmDataCmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmDataCmAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmDataCmAlias.setDescription("GMPLS Tunnel Manager Component' Base Name")
controlPlaneWdmDataCdbAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmDataCdbAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmDataCdbAlias.setDescription("Label Swithed Path Database Component' Base Name")
controlPlaneWdmDataTedbAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmDataTedbAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmDataTedbAlias.setDescription("Traffic Engineering Component' Database Name")
controlPlaneWdmDataNaasAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmDataNaasAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmDataNaasAlias.setDescription("Node Attribute Advertising Service Database Component' Base Name")
controlPlaneWdmDataPcAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmDataPcAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmDataPcAlias.setDescription("Path Computation Engine Component' Base Name")
controlPlaneWdmDataRsvpAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmDataRsvpAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmDataRsvpAlias.setDescription("Resource Reservation Protocol Component' Base Name")
controlPlaneWdmDataCdAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmDataCdAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmDataCdAlias.setDescription("Configuration Data Component' Base Name")
controlPlaneWdmDataRmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmDataRmAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneWdmDataRmAlias.setDescription("Resource Management Component' Base Name")
controlPlaneWdmDataNodeNameSyntax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 2, 1, 11), FspR7NodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneWdmDataNodeNameSyntax.setStatus('deprecated')
if mibBuilder.loadTexts: controlPlaneWdmDataNodeNameSyntax.setDescription('Node Name Syntax')
tunnelWdmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3), )
if mibBuilder.loadTexts: tunnelWdmConfigTable.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigTable.setDescription('')
tunnelWdmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: tunnelWdmConfigEntry.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigEntry.setDescription('')
tunnelWdmConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigAlias.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigAlias.setDescription('Alias.')
tunnelWdmConfigFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 2), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigFacilityType.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigFacilityType.setDescription('')
tunnelWdmConfigTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 3), OhTerminationLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigTerminationLevel.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigTerminationLevel.setDescription('')
tunnelWdmConfigFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 4), FspR7FecType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigFecType.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigFecType.setDescription('')
tunnelWdmConfigStuff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 5), FspR7Stuff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigStuff.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigStuff.setDescription('')
tunnelWdmConfigProvisionedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigProvisionedPaths.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigProvisionedPaths.setDescription('')
tunnelWdmConfigRecoveryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 7), FspR7CpRecoveryType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigRecoveryType.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigRecoveryType.setDescription('')
tunnelWdmConfigPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 8), FspR7CpPinning()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigPin.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigPin.setDescription('')
tunnelWdmConfigInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 9), FspR7InitEqualization()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigInitiateEqualization.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigInitiateEqualization.setDescription('')
tunnelWdmConfigAbortProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 10), FspR7CpAbortProcess()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigAbortProcess.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigAbortProcess.setDescription('')
tunnelWdmConfigAdminModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 11), FspR7CommandModifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigAdminModifier.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigAdminModifier.setDescription('')
tunnelWdmConfigCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 12), FspR7CpCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigCommand.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigCommand.setDescription('')
tunnelWdmConfigRestorationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 13), FspR7CpRestorationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigRestorationType.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigRestorationType.setDescription('')
tunnelWdmConfigSubLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 14), FspR7SubLayer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigSubLayer.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigSubLayer.setDescription('')
tunnelWdmConfigMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 15), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigMonitorEntities.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigMonitorEntities.setDescription('')
tunnelWdmConfigSubLayerEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 16), FspR7SubLayerEncoding()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigSubLayerEncoding.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigSubLayerEncoding.setDescription('')
tunnelWdmConfigPceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 17), FspR7PceMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigPceMode.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigPceMode.setDescription('')
tunnelWdmConfigOperateReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 18), FspR7CpOperateReversion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigOperateReversion.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigOperateReversion.setDescription('Triggers the manual reversion to the nominal connection')
tunnelWdmConfigReversionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 19), FspR7CpReversionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigReversionType.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigReversionType.setDescription('Manual Reversion, Automatic Reversion, or no reversion at all for tunnels supporting restoration')
tunnelWdmConfigRestorationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 20), FspR7CpRestorationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigRestorationMode.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigRestorationMode.setDescription('Restoration Mode (replaces pinning)')
tunnelWdmConfigRestPathsNoProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigRestPathsNoProv.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigRestPathsNoProv.setDescription('Number of provisioned Guaranteed Restoration Paths')
tunnelWdmConfigRestorationPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 22), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigRestorationPaths.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigRestorationPaths.setDescription('')
tunnelWdmConfigRestorationPathsComputed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 23), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigRestorationPathsComputed.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigRestorationPathsComputed.setDescription('')
tunnelWdmConfigResetRetainedFailureIndications = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 3, 1, 24), FspR7ResetRfi()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelWdmConfigResetRetainedFailureIndications.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmConfigResetRetainedFailureIndications.setDescription('Resets Retained Failure Indications for restored Tunnels')
tunnelWdmDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4), )
if mibBuilder.loadTexts: tunnelWdmDataTable.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataTable.setDescription('')
tunnelWdmDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: tunnelWdmDataEntry.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataEntry.setDescription('')
tunnelWdmDataTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataTunnelId.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataTunnelId.setDescription('')
tunnelWdmDataTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataTunnelNo.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataTunnelNo.setDescription('')
tunnelWdmDataTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 3), FspR7CpTunnelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataTunnelType.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataTunnelType.setDescription('')
tunnelWdmDataFromTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataFromTid.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataFromTid.setDescription('')
tunnelWdmDataFromNodeIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataFromNodeIP.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataFromNodeIP.setDescription('')
tunnelWdmDataToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataToTid.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataToTid.setDescription('')
tunnelWdmDataToTidMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataToTidMonitor.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataToTidMonitor.setDescription('')
tunnelWdmDataToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataToNodeIp.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataToNodeIp.setDescription('')
tunnelWdmDataToNodeIpMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataToNodeIpMonitor.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataToNodeIpMonitor.setDescription('')
tunnelWdmDataFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 10), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataFromAid.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataFromAid.setDescription('')
tunnelWdmDataToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 11), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataToAid.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataToAid.setDescription('')
tunnelWdmDataConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 12), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataConnectionDirection.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataConnectionDirection.setDescription('')
tunnelWdmDataBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 13), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataBitrate.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataBitrate.setDescription('')
tunnelWdmDataEncode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 14), FspR7CpEncode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataEncode.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataEncode.setDescription('')
tunnelWdmDataComputedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataComputedPaths.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataComputedPaths.setDescription('')
tunnelWdmDataComputationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 16), FspR7CpCompState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataComputationState.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataComputationState.setDescription('')
tunnelWdmDataErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataErrorMessage.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataErrorMessage.setDescription('')
tunnelWdmDataErrorCodeMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataErrorCodeMajor.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataErrorCodeMajor.setDescription('Errorcode Major')
tunnelWdmDataErrorCodeMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataErrorCodeMinor.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataErrorCodeMinor.setDescription('Errorcode Minor')
tunnelWdmDataErrorIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataErrorIp.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataErrorIp.setDescription('Error IP')
tunnelWdmDataErrorTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 21), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataErrorTid.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataErrorTid.setDescription('Error TID')
tunnelWdmDataErrorCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 22), FspR7CpErrorCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataErrorCategory.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataErrorCategory.setDescription('CP Provisioning Failure Category')
tunnelWdmDataSpecificErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 23), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataSpecificErrorMessage.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataSpecificErrorMessage.setDescription('Specific Error Message')
tunnelWdmDataTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 24), FspR7CpTunnelScope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataTunnelScope.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataTunnelScope.setDescription('Service Scope extending over either Client or Network Ports of Modules')
tunnelWdmDataLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 25), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataLayer.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataLayer.setDescription('Notional Layer of Advertisement on Packets on the LIF')
tunnelWdmDataLogicalIfAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 26), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataLogicalIfAid.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataLogicalIfAid.setDescription('Logical Interface AID')
tunnelWdmDataOifUni = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 27), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataOifUni.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataOifUni.setDescription('OIF UNI Tunnel')
tunnelWdmDataTunnelNumberExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataTunnelNumberExtension.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataTunnelNumberExtension.setDescription('Tunnel Number Extension. (internal: serviceID.extTunnelID)')
tunnelWdmDataRestorationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 29), FspR7CpRestorationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataRestorationState.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataRestorationState.setDescription('Restoration Enumeration State')
tunnelWdmDataTunnelTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 30), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataTunnelTemplate.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataTunnelTemplate.setDescription("Tunnel Template, can't be brought into service")
tunnelWdmDataRestPathsNoAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataRestPathsNoAvail.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataRestPathsNoAvail.setDescription('Number of current available Guaranteed Shared Restoration Paths')
tunnelWdmDataReversionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 32), FspR7CpReversionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataReversionState.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataReversionState.setDescription('Enumeration for Reversion States')
tunnelWdmDataMonitorEntitiesDerive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 33), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataMonitorEntitiesDerive.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataMonitorEntitiesDerive.setDescription('')
tunnelWdmDataRfiList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 4, 1, 34), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelWdmDataRfiList.setStatus('current')
if mibBuilder.loadTexts: tunnelWdmDataRfiList.setDescription('')
pathWdmDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 6), )
if mibBuilder.loadTexts: pathWdmDataTable.setStatus('current')
if mibBuilder.loadTexts: pathWdmDataTable.setDescription('')
pathWdmDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 6, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: pathWdmDataEntry.setStatus('current')
if mibBuilder.loadTexts: pathWdmDataEntry.setDescription('')
pathWdmDataPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 6, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathWdmDataPathId.setStatus('current')
if mibBuilder.loadTexts: pathWdmDataPathId.setDescription('')
pathWdmDataPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 6, 1, 2), FspR7CpPathType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathWdmDataPathType.setStatus('current')
if mibBuilder.loadTexts: pathWdmDataPathType.setDescription('')
pathWdmDataConnectionTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 6, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathWdmDataConnectionTunnelAid.setStatus('current')
if mibBuilder.loadTexts: pathWdmDataConnectionTunnelAid.setDescription('')
pathWdmDataRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 6, 1, 4), FspR7CpRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathWdmDataRole.setStatus('current')
if mibBuilder.loadTexts: pathWdmDataRole.setDescription('')
pathElementWdmDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8), )
if mibBuilder.loadTexts: pathElementWdmDataTable.setStatus('current')
if mibBuilder.loadTexts: pathElementWdmDataTable.setDescription('')
pathElementWdmDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: pathElementWdmDataEntry.setStatus('current')
if mibBuilder.loadTexts: pathElementWdmDataEntry.setDescription('')
pathElementWdmDataPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataPathId.setStatus('current')
if mibBuilder.loadTexts: pathElementWdmDataPathId.setDescription('')
pathElementWdmDataSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: pathElementWdmDataSequenceNumber.setDescription('')
pathElementWdmDataPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 3), FspR7CpPathType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataPathType.setStatus('current')
if mibBuilder.loadTexts: pathElementWdmDataPathType.setDescription('')
pathElementWdmDataTrafficEngineeringType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 4), FspR7CpTEType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataTrafficEngineeringType.setStatus('current')
if mibBuilder.loadTexts: pathElementWdmDataTrafficEngineeringType.setDescription('')
pathElementWdmDataLifIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataLifIp.setStatus('current')
if mibBuilder.loadTexts: pathElementWdmDataLifIp.setDescription('')
pathElementWdmDataNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataNodeIp.setStatus('current')
if mibBuilder.loadTexts: pathElementWdmDataNodeIp.setDescription('')
pathElementWdmDataNodeIpMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataNodeIpMonitor.setStatus('current')
if mibBuilder.loadTexts: pathElementWdmDataNodeIpMonitor.setDescription('')
pathElementWdmDataTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataTid.setStatus('current')
if mibBuilder.loadTexts: pathElementWdmDataTid.setDescription('')
pathElementWdmDataTidMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataTidMonitor.setStatus('current')
if mibBuilder.loadTexts: pathElementWdmDataTidMonitor.setDescription('')
pathElementWdmDataLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataLogicalInterfaceId.setStatus('current')
if mibBuilder.loadTexts: pathElementWdmDataLogicalInterfaceId.setDescription('')
pathElementWdmDataTie = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 11), FspR7CpTie()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataTie.setStatus('current')
if mibBuilder.loadTexts: pathElementWdmDataTie.setDescription('')
pathElementWdmDataChannelUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 12), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataChannelUp.setStatus('current')
if mibBuilder.loadTexts: pathElementWdmDataChannelUp.setDescription('')
pathElementWdmDataChannelDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 13), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataChannelDown.setStatus('current')
if mibBuilder.loadTexts: pathElementWdmDataChannelDown.setDescription('')
pathElementWdmDataLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 14), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataLine.setStatus('current')
if mibBuilder.loadTexts: pathElementWdmDataLine.setDescription('')
pathElementWdmDataUpstreamModuleAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 15), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataUpstreamModuleAid.setStatus('current')
if mibBuilder.loadTexts: pathElementWdmDataUpstreamModuleAid.setDescription('')
pathElementWdmDataDownstreamModuleAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 16), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataDownstreamModuleAid.setStatus('current')
if mibBuilder.loadTexts: pathElementWdmDataDownstreamModuleAid.setDescription('')
pathElementWdmDataComputedOnsrForward = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 17), Integer32()).setUnits('0.01 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataComputedOnsrForward.setStatus('current')
if mibBuilder.loadTexts: pathElementWdmDataComputedOnsrForward.setDescription('')
pathElementWdmDataComputedOnsrReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 18), Integer32()).setUnits('0.01 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataComputedOnsrReverse.setStatus('current')
if mibBuilder.loadTexts: pathElementWdmDataComputedOnsrReverse.setDescription('')
pathElementWdmDataComputedOptPowerForward = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 19), Integer32()).setUnits('0.01 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataComputedOptPowerForward.setStatus('current')
if mibBuilder.loadTexts: pathElementWdmDataComputedOptPowerForward.setDescription('')
pathElementWdmDataComputedOptPowerReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 8, 1, 20), Integer32()).setUnits('0.01 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementWdmDataComputedOptPowerReverse.setStatus('current')
if mibBuilder.loadTexts: pathElementWdmDataComputedOptPowerReverse.setDescription('')
connectionWdmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 9), )
if mibBuilder.loadTexts: connectionWdmConfigTable.setStatus('current')
if mibBuilder.loadTexts: connectionWdmConfigTable.setDescription('')
connectionWdmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 9, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: connectionWdmConfigEntry.setStatus('current')
if mibBuilder.loadTexts: connectionWdmConfigEntry.setDescription('')
connectionWdmConfigCancelConnEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 9, 1, 1), FspR7CpCancConnection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionWdmConfigCancelConnEntities.setStatus('current')
if mibBuilder.loadTexts: connectionWdmConfigCancelConnEntities.setDescription('')
connectionWdmConfigCancelModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 9, 1, 2), FspR7CommandModifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionWdmConfigCancelModifier.setStatus('current')
if mibBuilder.loadTexts: connectionWdmConfigCancelModifier.setDescription('')
connectionWdmDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10), )
if mibBuilder.loadTexts: connectionWdmDataTable.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataTable.setDescription('')
connectionWdmDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: connectionWdmDataEntry.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataEntry.setDescription('')
connectionWdmDataTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataTunnelId.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataTunnelId.setDescription('')
connectionWdmDataTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataTunnelNo.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataTunnelNo.setDescription('')
connectionWdmDataTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 3), FspR7CpTunnelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataTunnelType.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataTunnelType.setDescription('')
connectionWdmDataFromTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataFromTid.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataFromTid.setDescription('')
connectionWdmDataFromNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataFromNodeIp.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataFromNodeIp.setDescription('')
connectionWdmDataToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataToTid.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataToTid.setDescription('')
connectionWdmDataToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataToNodeIp.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataToNodeIp.setDescription('')
connectionWdmDataFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 8), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataFromAid.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataFromAid.setDescription('')
connectionWdmDataToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 9), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataToAid.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataToAid.setDescription('')
connectionWdmDataConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 10), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataConnectionDirection.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataConnectionDirection.setDescription('')
connectionWdmDataNetworkElementPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 11), FspR7CpNePosition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataNetworkElementPosition.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataNetworkElementPosition.setDescription('')
connectionWdmDataFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 12), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataFacilityType.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataFacilityType.setDescription('')
connectionWdmDataBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 13), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataBitrate.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataBitrate.setDescription('')
connectionWdmDataEncode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 14), FspR7CpEncode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataEncode.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataEncode.setDescription('')
connectionWdmDataTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 15), OhTerminationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataTerminationLevel.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataTerminationLevel.setDescription('')
connectionWdmDataFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 16), FspR7FecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataFecType.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataFecType.setDescription('')
connectionWdmDataStuff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 17), FspR7Stuff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataStuff.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataStuff.setDescription('')
connectionWdmDataSignalledPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 18), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataSignalledPaths.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataSignalledPaths.setDescription('')
connectionWdmDataComputedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 19), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataComputedPaths.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataComputedPaths.setDescription('')
connectionWdmDataRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 20), FspR7CpRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataRole.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataRole.setDescription('')
connectionWdmDataErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 21), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataErrorMessage.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataErrorMessage.setDescription('')
connectionWdmDataActivationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 22), FspR7CpActivState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataActivationState.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataActivationState.setDescription('')
connectionWdmDataRestorable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 23), FspR7FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataRestorable.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataRestorable.setDescription('')
connectionWdmDataRestorationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 24), FspR7CpRestorationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataRestorationState.setStatus('deprecated')
if mibBuilder.loadTexts: connectionWdmDataRestorationState.setDescription('')
connectionWdmDataEqualizationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 25), FspR7CpCompState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataEqualizationState.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataEqualizationState.setDescription('')
connectionWdmDataModificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 26), FspR7CpCompState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataModificationState.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataModificationState.setDescription('Modification Enumeration State')
connectionWdmDataMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 27), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataMonitorEntities.setStatus('deprecated')
if mibBuilder.loadTexts: connectionWdmDataMonitorEntities.setDescription('')
connectionWdmDataTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 28), FspR7CpTunnelScope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataTunnelScope.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataTunnelScope.setDescription('Service Scope extending over either Client or Network Ports of Modules')
connectionWdmDataLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 29), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataLayer.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataLayer.setDescription('Notional Layer of Advertisement on Packets on the LIF')
connectionWdmDataSourceTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 30), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataSourceTna.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataSourceTna.setDescription('Source Transport Network Assigned Name')
connectionWdmDataDestinationTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 31), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataDestinationTna.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataDestinationTna.setDescription('Destination Transport Network Assigned Name')
connectionWdmDataTunnelNumberExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataTunnelNumberExtension.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataTunnelNumberExtension.setDescription('Tunnel Number Extension. (internal: serviceID.extTunnelID)')
connectionWdmDataTunnelInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataTunnelInstance.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataTunnelInstance.setDescription('Tunnel Instance also called Service Instance ID. This changes every time there is Make-Before-Break operation. (internal: serviceInstID.octpID)')
connectionWdmDataConnectionNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 10, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionWdmDataConnectionNo.setStatus('current')
if mibBuilder.loadTexts: connectionWdmDataConnectionNo.setDescription('Connection Number also called Connection ID. This changes every time there is Make-Before-Break operation. Working and protection connection numbers are different. (internal: lsptID.octpID)')
logicalCpIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11), )
if mibBuilder.loadTexts: logicalCpIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfConfigTable.setDescription('')
logicalCpIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: logicalCpIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfConfigEntry.setDescription('')
logicalCpIfConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigAlias.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfConfigAlias.setDescription('Alias.')
logicalCpIfConfigOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 2), FspR7OspfMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigOspf.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfConfigOspf.setDescription('OSPF Routing (Dynamic)')
logicalCpIfConfigLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 3), FspR7PacketsLayer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigLayer.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfConfigLayer.setDescription('Layer of Packets on LIF.')
logicalCpIfConfigAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigAreaId.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfConfigAreaId.setDescription('OSPF Area ID for IP Interface')
logicalCpIfConfigMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigMetric.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfConfigMetric.setDescription('Routing Metric')
logicalCpIfConfigHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigHelloInterval.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfConfigHelloInterval.setDescription('Hello Interval')
logicalCpIfConfigDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigDeadInterval.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfConfigDeadInterval.setDescription('Dead Interval')
logicalCpIfConfigPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigPrio.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfConfigPrio.setDescription('Priority')
logicalCpIfConfigRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigRetransmitInterval.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfConfigRetransmitInterval.setDescription('Retransmit Interval')
logicalCpIfConfigAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 10), FspR7CpAuthType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigAuthType.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfConfigAuthType.setDescription('Authentication Type')
logicalCpIfConfigAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 11), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigAuthString.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfConfigAuthString.setDescription('Authentication String')
logicalCpIfConfigCpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 12), FspR7CpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigCpType.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfConfigCpType.setDescription('Control Plane Type')
logicalCpIfConfigRefreshTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigRefreshTimeout.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfConfigRefreshTimeout.setDescription('Refresh Timeout')
logicalCpIfConfigRefreshMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 20), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigRefreshMultiplier.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfConfigRefreshMultiplier.setDescription('Refresh Multiplier')
logicalCpIfConfigTeMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigTeMetric.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfConfigTeMetric.setDescription('Traffic Engineering Metric')
logicalCpIfConfigTeAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigTeAreaId.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfConfigTeAreaId.setDescription('OSPF Area ID for Traffic Engineering')
logicalCpIfConfigLinkColor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigLinkColor.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfConfigLinkColor.setDescription('Link Colouring')
logicalCpIfConfigPushedNearEndIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigPushedNearEndIpHeader.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfConfigPushedNearEndIpHeader.setDescription('Pushed Near End IP address in encapsulating header')
logicalCpIfConfigPushedFarEndIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigPushedFarEndIpHeader.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfConfigPushedFarEndIpHeader.setDescription('Pushed Far End IP address in encapsulating header')
logicalCpIfConfigTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 11, 1, 20), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 255), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalCpIfConfigTimeToLive.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfConfigTimeToLive.setDescription('Time to Live')
logicalCpIfDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12), )
if mibBuilder.loadTexts: logicalCpIfDataTable.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataTable.setDescription('')
logicalCpIfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: logicalCpIfDataEntry.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataEntry.setDescription('')
logicalCpIfDataFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 1), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataFacilityType.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataFacilityType.setDescription('Facility Type.')
logicalCpIfDataDcnAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataDcnAid.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataDcnAid.setDescription('Sup. DCN Facility AID.')
logicalCpIfDataLanLinkAidDerived = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataLanLinkAidDerived.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataLanLinkAidDerived.setDescription('Sup. DCN Facility AID.')
logicalCpIfDataLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataLogicalInterfaceId.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataLogicalInterfaceId.setDescription('Logical InterfaceId.')
logicalCpIfDataTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataTransport.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataTransport.setDescription('')
logicalCpIfDataFarEndLifId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 6), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataFarEndLifId.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataFarEndLifId.setDescription('Far End Transport Layer Termination Point - index of AID')
logicalCpIfDataFarEndNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataFarEndNodeIp.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataFarEndNodeIp.setDescription('')
logicalCpIfDataFarEndNodeIpMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataFarEndNodeIpMonitor.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataFarEndNodeIpMonitor.setDescription('')
logicalCpIfDataFarEndTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataFarEndTid.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataFarEndTid.setDescription('Far End Tid.')
logicalCpIfDataFarEndTidMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataFarEndTidMonitor.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataFarEndTidMonitor.setDescription('Far End Tid.')
logicalCpIfDataIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 11), FspR7IpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataIpType.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataIpType.setDescription('Type of IP configuration')
logicalCpIfDataIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataIpAddr.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataIpAddr.setDescription('IP Address assigned to LAN IP Interface')
logicalCpIfDataIpAddrMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataIpAddrMonitor.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataIpAddrMonitor.setDescription('IP address assigned to LAN IP Interface')
logicalCpIfDataIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataIpMask.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataIpMask.setDescription('IP MASK assigned to LAN IP Interface')
logicalCpIfDataIpMaskMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataIpMaskMonitor.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataIpMaskMonitor.setDescription('IP mask assigned to LAN IP Interface')
logicalCpIfDataOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 16), FspR7OspfMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataOspf.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataOspf.setDescription('OSPF Routing (Dynamic)')
logicalCpIfDataEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 17), FspR7CpEncapsulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataEncapsulation.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataEncapsulation.setDescription('Encapsulation')
logicalCpIfDataNendTeLinkIdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataNendTeLinkIdNum.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataNendTeLinkIdNum.setDescription('Local Traffic Engineering Link Identifier for Numbered Link')
logicalCpIfDataFendTeLinkIdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataFendTeLinkIdNum.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataFendTeLinkIdNum.setDescription('Remote Traffic Engineering Link Identifier for Numbered Link')
logicalCpIfDataFendDataLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataFendDataLinkId.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataFendDataLinkId.setDescription('Remote physical link identifier')
logicalCpIfDataNendTeLinkIdUnn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataNendTeLinkIdUnn.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataNendTeLinkIdUnn.setDescription('Local Traffic Engineering Link Identifier for Unnumbered Link')
logicalCpIfDataFendTeLinkIdUnn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataFendTeLinkIdUnn.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataFendTeLinkIdUnn.setDescription('Remote Traffic Engineering Link Identifier for Unnumbered Link')
logicalCpIfDataPushedNearEndIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataPushedNearEndIpHeader.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataPushedNearEndIpHeader.setDescription('Pushed Near End IP address in encapsulating header')
logicalCpIfDataPushedFarEndIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 24), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataPushedFarEndIpHeader.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataPushedFarEndIpHeader.setDescription('Pushed Far End IP address in encapsulating header')
logicalCpIfDataEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 25), FspR7CpEncode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataEncoding.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataEncoding.setDescription('Encoding')
logicalCpIfDataLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 26), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataLayer.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataLayer.setDescription('Layer of Packets on LIF.')
logicalCpIfDataNendTeLinkAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 27), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataNendTeLinkAid.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataNendTeLinkAid.setDescription('Local Traffic Engineering Link Access Identifier')
logicalCpIfDataFendTeLinkAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 28), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataFendTeLinkAid.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataFendTeLinkAid.setDescription('Remote Traffic Engineering Link Access Identifier')
logicalCpIfDataTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 29), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataTunnelAid.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataTunnelAid.setDescription('Supporting Tunnel')
logicalCpIfDataActivationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 30), FspR7CpActivState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataActivationState.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataActivationState.setDescription('Activation Enumeration State')
logicalCpIfDataExtAdvertised = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 31), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataExtAdvertised.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataExtAdvertised.setDescription('Externally Advertised TE Link')
logicalCpIfDataVTeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 32), FspR7CpVTeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataVTeType.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataVTeType.setDescription('Type of Virtual TE configuration')
logicalCpIfDataVNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 33), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataVNodeIp.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataVNodeIp.setDescription('Virtual Node IP')
logicalCpIfDataVNodeTltp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 12, 1, 34), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalCpIfDataVNodeTltp.setStatus('current')
if mibBuilder.loadTexts: logicalCpIfDataVNodeTltp.setDescription('Virtual Node Transport Layer Termination Point')
inventoryCpWdmDownDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 13), )
if mibBuilder.loadTexts: inventoryCpWdmDownDataTable.setStatus('current')
if mibBuilder.loadTexts: inventoryCpWdmDownDataTable.setDescription('')
inventoryCpWdmDownDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 13, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"), (0, "FspR7-MIB", "inventoryCpWdmDownDataNumber"))
if mibBuilder.loadTexts: inventoryCpWdmDownDataEntry.setStatus('current')
if mibBuilder.loadTexts: inventoryCpWdmDownDataEntry.setDescription('')
inventoryCpWdmDownDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 13, 1, 1), EntityIndex())
if mibBuilder.loadTexts: inventoryCpWdmDownDataNumber.setStatus('current')
if mibBuilder.loadTexts: inventoryCpWdmDownDataNumber.setDescription('')
inventoryCpWdmDownDataResources = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 13, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpWdmDownDataResources.setStatus('current')
if mibBuilder.loadTexts: inventoryCpWdmDownDataResources.setDescription('')
inventoryCpWdmDownDataFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 13, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpWdmDownDataFacilities.setStatus('current')
if mibBuilder.loadTexts: inventoryCpWdmDownDataFacilities.setDescription('')
inventoryCpWdmDownDataPhysicalTermPoints = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 13, 1, 4), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpWdmDownDataPhysicalTermPoints.setStatus('current')
if mibBuilder.loadTexts: inventoryCpWdmDownDataPhysicalTermPoints.setDescription('')
inventoryCpWdmUpDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 14), )
if mibBuilder.loadTexts: inventoryCpWdmUpDataTable.setStatus('current')
if mibBuilder.loadTexts: inventoryCpWdmUpDataTable.setDescription('')
inventoryCpWdmUpDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 14, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"), (0, "FspR7-MIB", "inventoryCpWdmUpDataNumber"))
if mibBuilder.loadTexts: inventoryCpWdmUpDataEntry.setStatus('current')
if mibBuilder.loadTexts: inventoryCpWdmUpDataEntry.setDescription('')
inventoryCpWdmUpDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 14, 1, 1), EntityIndex())
if mibBuilder.loadTexts: inventoryCpWdmUpDataNumber.setStatus('current')
if mibBuilder.loadTexts: inventoryCpWdmUpDataNumber.setDescription('')
inventoryCpWdmUpDataResources = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 14, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpWdmUpDataResources.setStatus('current')
if mibBuilder.loadTexts: inventoryCpWdmUpDataResources.setDescription('')
inventoryCpWdmUpDataFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 14, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpWdmUpDataFacilities.setStatus('current')
if mibBuilder.loadTexts: inventoryCpWdmUpDataFacilities.setDescription('')
inventoryCpWdmUpDataPhysicalTermPoints = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 14, 1, 4), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpWdmUpDataPhysicalTermPoints.setStatus('current')
if mibBuilder.loadTexts: inventoryCpWdmUpDataPhysicalTermPoints.setDescription('')
inventoryCpWdmCrsDownDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 15), )
if mibBuilder.loadTexts: inventoryCpWdmCrsDownDataTable.setStatus('current')
if mibBuilder.loadTexts: inventoryCpWdmCrsDownDataTable.setDescription('')
inventoryCpWdmCrsDownDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 15, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"), (0, "FspR7-MIB", "inventoryCpWdmCrsDownDataNumber"), (0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: inventoryCpWdmCrsDownDataEntry.setStatus('current')
if mibBuilder.loadTexts: inventoryCpWdmCrsDownDataEntry.setDescription('')
inventoryCpWdmCrsDownDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 15, 1, 1), EntityIndex())
if mibBuilder.loadTexts: inventoryCpWdmCrsDownDataNumber.setStatus('current')
if mibBuilder.loadTexts: inventoryCpWdmCrsDownDataNumber.setDescription('')
inventoryCpWdmCrsDownDataAids = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 15, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpWdmCrsDownDataAids.setStatus('current')
if mibBuilder.loadTexts: inventoryCpWdmCrsDownDataAids.setDescription('')
inventoryCpWdmCrsUpDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 16), )
if mibBuilder.loadTexts: inventoryCpWdmCrsUpDataTable.setStatus('current')
if mibBuilder.loadTexts: inventoryCpWdmCrsUpDataTable.setDescription('')
inventoryCpWdmCrsUpDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 16, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"), (0, "FspR7-MIB", "inventoryCpWdmCrsUpDataNumber"), (0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: inventoryCpWdmCrsUpDataEntry.setStatus('current')
if mibBuilder.loadTexts: inventoryCpWdmCrsUpDataEntry.setDescription('')
inventoryCpWdmCrsUpDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 16, 1, 1), EntityIndex())
if mibBuilder.loadTexts: inventoryCpWdmCrsUpDataNumber.setStatus('current')
if mibBuilder.loadTexts: inventoryCpWdmCrsUpDataNumber.setDescription('')
inventoryCpWdmCrsUpDataAids = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 16, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpWdmCrsUpDataAids.setStatus('current')
if mibBuilder.loadTexts: inventoryCpWdmCrsUpDataAids.setDescription('')
teRouterDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 17), )
if mibBuilder.loadTexts: teRouterDataTable.setStatus('current')
if mibBuilder.loadTexts: teRouterDataTable.setDescription('')
teRouterDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 17, 1), ).setIndexNames((0, "FspR7-MIB", "teRouterDataIp"))
if mibBuilder.loadTexts: teRouterDataEntry.setStatus('current')
if mibBuilder.loadTexts: teRouterDataEntry.setDescription('')
teRouterDataIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 17, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: teRouterDataIp.setStatus('current')
if mibBuilder.loadTexts: teRouterDataIp.setDescription('IP index')
teRouterDataNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 17, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teRouterDataNodeIp.setStatus('current')
if mibBuilder.loadTexts: teRouterDataNodeIp.setDescription('')
teRouterDataNodeTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 17, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teRouterDataNodeTid.setStatus('current')
if mibBuilder.loadTexts: teRouterDataNodeTid.setDescription('')
teRouterDataInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 17, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teRouterDataInfo.setStatus('current')
if mibBuilder.loadTexts: teRouterDataInfo.setDescription('')
teUnnumLinkWdmDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 18), )
if mibBuilder.loadTexts: teUnnumLinkWdmDataTable.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkWdmDataTable.setDescription('')
teUnnumLinkWdmDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 18, 1), ).setIndexNames((0, "FspR7-MIB", "teRouterDataIp"), (0, "FspR7-MIB", "teUnnumLinkWdmDataNumber"))
if mibBuilder.loadTexts: teUnnumLinkWdmDataEntry.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkWdmDataEntry.setDescription('')
teUnnumLinkWdmDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 18, 1, 1), Unsigned32())
if mibBuilder.loadTexts: teUnnumLinkWdmDataNumber.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkWdmDataNumber.setDescription('')
teUnnumLinkWdmDataNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 18, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkWdmDataNodeIp.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkWdmDataNodeIp.setDescription('')
teUnnumLinkWdmDataNodeTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 18, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkWdmDataNodeTid.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkWdmDataNodeTid.setDescription('')
teUnnumLinkWdmDataTeLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 18, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkWdmDataTeLinkId.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkWdmDataTeLinkId.setDescription('')
teUnnumLinkWdmDataPhysicalLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 18, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkWdmDataPhysicalLink.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkWdmDataPhysicalLink.setDescription('')
teUnnumLinkWdmDataSynchronization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 18, 1, 6), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkWdmDataSynchronization.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkWdmDataSynchronization.setDescription('')
teUnnumLinkWdmDataDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 18, 1, 7), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkWdmDataDiscarded.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkWdmDataDiscarded.setDescription('')
teUnnumLinkWdmDataFendNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 18, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkWdmDataFendNodeIp.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkWdmDataFendNodeIp.setDescription('')
teUnnumLinkWdmDataFendTeLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 18, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkWdmDataFendTeLinkId.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkWdmDataFendTeLinkId.setDescription('')
teUnnumLinkWdmDataInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 18, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkWdmDataInfo.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkWdmDataInfo.setDescription('')
teNumLinkWdmDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 19), )
if mibBuilder.loadTexts: teNumLinkWdmDataTable.setStatus('current')
if mibBuilder.loadTexts: teNumLinkWdmDataTable.setDescription('')
teNumLinkWdmDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 19, 1), ).setIndexNames((0, "FspR7-MIB", "teRouterDataIp"))
if mibBuilder.loadTexts: teNumLinkWdmDataEntry.setStatus('current')
if mibBuilder.loadTexts: teNumLinkWdmDataEntry.setDescription('')
teNumLinkWdmDataNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 19, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkWdmDataNodeIp.setStatus('current')
if mibBuilder.loadTexts: teNumLinkWdmDataNodeIp.setDescription('')
teNumLinkWdmDataNodeTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 19, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkWdmDataNodeTid.setStatus('current')
if mibBuilder.loadTexts: teNumLinkWdmDataNodeTid.setDescription('')
teNumLinkWdmDataTeLinkIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 19, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkWdmDataTeLinkIp.setStatus('current')
if mibBuilder.loadTexts: teNumLinkWdmDataTeLinkIp.setDescription('')
teNumLinkWdmDataPhysicalLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 19, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkWdmDataPhysicalLink.setStatus('current')
if mibBuilder.loadTexts: teNumLinkWdmDataPhysicalLink.setDescription('')
teNumLinkWdmDataSynchronization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 19, 1, 5), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkWdmDataSynchronization.setStatus('current')
if mibBuilder.loadTexts: teNumLinkWdmDataSynchronization.setDescription('')
teNumLinkWdmDataDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 19, 1, 6), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkWdmDataDiscarded.setStatus('current')
if mibBuilder.loadTexts: teNumLinkWdmDataDiscarded.setDescription('')
teNumLinkWdmDataFendNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 19, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkWdmDataFendNodeIp.setStatus('current')
if mibBuilder.loadTexts: teNumLinkWdmDataFendNodeIp.setDescription('')
teNumLinkWdmDataFendTeLinkIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 19, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkWdmDataFendTeLinkIp.setStatus('current')
if mibBuilder.loadTexts: teNumLinkWdmDataFendTeLinkIp.setDescription('')
teNumLinkWdmDataInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 19, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkWdmDataInfo.setStatus('current')
if mibBuilder.loadTexts: teNumLinkWdmDataInfo.setDescription('')
tnaMapDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 20), )
if mibBuilder.loadTexts: tnaMapDataTable.setStatus('current')
if mibBuilder.loadTexts: tnaMapDataTable.setDescription('')
tnaMapDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 20, 1), ).setIndexNames((0, "FspR7-MIB", "tnaMapDataNodeIp"), (0, "FspR7-MIB", "tnaMapDataRemoteTna"))
if mibBuilder.loadTexts: tnaMapDataEntry.setStatus('current')
if mibBuilder.loadTexts: tnaMapDataEntry.setDescription('')
tnaMapDataNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 20, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnaMapDataNodeIp.setStatus('current')
if mibBuilder.loadTexts: tnaMapDataNodeIp.setDescription('Node IP')
tnaMapDataRemoteTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 20, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnaMapDataRemoteTna.setStatus('current')
if mibBuilder.loadTexts: tnaMapDataRemoteTna.setDescription('Port Binding Remote Transport Network Assigned Name (OIF Signaling Interface)')
tnaMapDataRemoteTnaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 20, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnaMapDataRemoteTnaMask.setStatus('current')
if mibBuilder.loadTexts: tnaMapDataRemoteTnaMask.setDescription('Port Binding Remote Transport Network Assigned Name Mask (OIF Signaling Interface)')
tnaMapDataLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 20, 1, 4), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnaMapDataLocalPort.setStatus('current')
if mibBuilder.loadTexts: tnaMapDataLocalPort.setDescription('Port Binding Local Port AID (OIF Signaling Interface)')
controlPlaneEthConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32), )
if mibBuilder.loadTexts: controlPlaneEthConfigTable.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigTable.setDescription('')
controlPlaneEthConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: controlPlaneEthConfigEntry.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigEntry.setDescription('')
controlPlaneEthConfigCtmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCtmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigCtmConfigFlag.setDescription("Label Switched Path Edge Component' Configuration Bitfield")
controlPlaneEthConfigCtmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCtmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigCtmTraceDetail.setDescription("Label Switched Path Edge Component' Trace Detail")
controlPlaneEthConfigCtmSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 3), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCtmSetupTimeout.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigCtmSetupTimeout.setDescription("Label Switched Path Edge Component' Set-Up Timeout")
controlPlaneEthConfigCtmShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 4), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCtmShutdownTimeout.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigCtmShutdownTimeout.setDescription("Label Switched Path Edge Component' Shut-Down Timeout")
controlPlaneEthConfigCtmRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 5), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCtmRetryWait.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigCtmRetryWait.setDescription("Label Switched Path Edge Component' Initialization Retry Wait")
controlPlaneEthConfigCtmRetryWaitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCtmRetryWaitMultiplier.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigCtmRetryWaitMultiplier.setDescription("Label Switched Path Edge Component' Initialization Retry Wait Multiplier")
controlPlaneEthConfigCtmMaximumRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 7), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCtmMaximumRetryWait.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigCtmMaximumRetryWait.setDescription("Label Switched Path Edge Component' Initialization Maximum Retry Wait")
controlPlaneEthConfigCtmMaximumRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCtmMaximumRetryNumber.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigCtmMaximumRetryNumber.setDescription("Label Switched Path Edge Component' Initialization Maximum Retry Number")
controlPlaneEthConfigRaConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigRaConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigRaConfigFlag.setDescription('Resource Allocator Configuration Bitfield')
controlPlaneEthConfigRaTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigRaTraceDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigRaTraceDetail.setDescription('Resource Allocator Trace Detail')
controlPlaneEthConfigRaAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 11), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigRaAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigRaAlarmActivationTime.setDescription('Resource Allocator Alarm Activation Time')
controlPlaneEthConfigCmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigCmConfigFlag.setDescription("GMPLS Tunnel Manager Component' Configuration Bitfield")
controlPlaneEthConfigCmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigCmTraceDetail.setDescription("GMPLS Tunnel Manager Component' Trace Detail")
controlPlaneEthConfigCmAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 14), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCmAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigCmAlarmActivationTime.setDescription("GMPLS Tunnel Manager Component' Alarm Activation Time")
controlPlaneEthConfigCmFisFrsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 15), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCmFisFrsTimeout.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigCmFisFrsTimeout.setDescription("GMPLS Tunnel Manager Component' FIS-FRS Timeout")
controlPlaneEthConfigCmCrankBackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 16), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCmCrankBackTimeout.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigCmCrankBackTimeout.setDescription("GMPLS Tunnel Manager Component' Crank-Back Timeout")
controlPlaneEthConfigCdbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCdbConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigCdbConfigFlag.setDescription("Label Swithed Path Database Component' Configuration Bitfield")
controlPlaneEthConfigCdbDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCdbDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigCdbDetail.setDescription("Label Swithed Path Database Component' Trace Detail")
controlPlaneEthConfigCdbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCdbMaxSize.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigCdbMaxSize.setDescription("Label Swithed Path Database Component' Maximum Size; 0 impiles no limit")
controlPlaneEthConfigRsvpConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigRsvpConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigRsvpConfigFlag.setDescription("Resource Reservation Protocol Component' Configuration Bitfield")
controlPlaneEthConfigRsvpMaxExpRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 21), Counter64String()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigRsvpMaxExpRestartTime.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigRsvpMaxExpRestartTime.setDescription("Maximum Expected Resource Reservation Protocol Component' Restart Time")
controlPlaneEthConfigRsvpMaxExpRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 22), Unsigned32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigRsvpMaxExpRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigRsvpMaxExpRecoveryTime.setDescription("Maximum Expected Resource Reservation Protocol Component' Recovery Time")
controlPlaneEthConfigTedbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigTedbConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigTedbConfigFlag.setDescription("Traffic Engineering Component' Database Configuration Bitfield")
controlPlaneEthConfigTedbTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigTedbTraceDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigTedbTraceDetail.setDescription("Traffic Engineering Component' Database Trace Detail")
controlPlaneEthConfigTedbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigTedbMaxSize.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigTedbMaxSize.setDescription("Traffic Engineering Component' Database Maximum Size")
controlPlaneEthConfigTedbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigTedbRouterId.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigTedbRouterId.setDescription("Traffic Engineering Component' Router ID")
controlPlaneEthConfigTedbMinAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 27), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigTedbMinAdvertWait.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigTedbMinAdvertWait.setDescription("Traffic Engineering Component' Minimum Advertisement Wait")
controlPlaneEthConfigNaasConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigNaasConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigNaasConfigFlag.setDescription('Node Attribute Advertising Service Database Configuration Bitfield')
controlPlaneEthConfigNaasTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigNaasTraceDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigNaasTraceDetail.setDescription('Node Attribute Advertising Service Database Trace Detail')
controlPlaneEthConfigNaasMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigNaasMaxSize.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigNaasMaxSize.setDescription('Node Attribute Advertising Service Database Maximum Size')
controlPlaneEthConfigNaasAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 31), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigNaasAdvertWait.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigNaasAdvertWait.setDescription('Node Attribute Advertising Service Database Advertisement Wait')
controlPlaneEthConfigPcConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigPcConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigPcConfigFlag.setDescription("Path Computation Component' Configuration Bitfield")
controlPlaneEthConfigPcTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigPcTraceDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigPcTraceDetail.setDescription("Path Computation Component' Trace Detail.")
controlPlaneEthConfigCdConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCdConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigCdConfigFlag.setDescription("Configuration Data Component' Configuration Bitfield")
controlPlaneEthConfigCdTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 35), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCdTraceDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigCdTraceDetail.setDescription("Configuration Data Component' Trace Detail")
controlPlaneEthConfigCdResyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigCdResyncTimeout.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigCdResyncTimeout.setDescription("Configuration Data Component' Resync Timeout")
controlPlaneEthConfigRmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigRmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigRmConfigFlag.setDescription("Resource Management Component' Configuration Bitfield")
controlPlaneEthConfigRmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigRmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigRmTraceDetail.setDescription("Resource Management Component' Trace Detail")
controlPlaneEthConfigRmTraceTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 32, 1, 39), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneEthConfigRmTraceTarget.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthConfigRmTraceTarget.setDescription("Resource Management Component' Trace Target")
controlPlaneEthDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 33), )
if mibBuilder.loadTexts: controlPlaneEthDataTable.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthDataTable.setDescription('')
controlPlaneEthDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 33, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: controlPlaneEthDataEntry.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthDataEntry.setDescription('')
controlPlaneEthDataCtmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 33, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthDataCtmAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthDataCtmAlias.setDescription("Label Switched Path Edge Component Component' Base Name")
controlPlaneEthDataRaAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 33, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthDataRaAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthDataRaAlias.setDescription("Resource Allocator Component' Base Name")
controlPlaneEthDataCmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 33, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthDataCmAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthDataCmAlias.setDescription("GMPLS Tunnel Manager Component' Base Name")
controlPlaneEthDataCdbAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 33, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthDataCdbAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthDataCdbAlias.setDescription("Label Swithed Path Database Component' Base Name")
controlPlaneEthDataTedbAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 33, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthDataTedbAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthDataTedbAlias.setDescription("Traffic Engineering Component' Database Name")
controlPlaneEthDataNaasAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 33, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthDataNaasAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthDataNaasAlias.setDescription("Node Attribute Advertising Service Database Component' Base Name")
controlPlaneEthDataPcAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 33, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthDataPcAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthDataPcAlias.setDescription("Path Computation Engine Component' Base Name")
controlPlaneEthDataRsvpAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 33, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthDataRsvpAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthDataRsvpAlias.setDescription("Resource Reservation Protocol Component' Base Name")
controlPlaneEthDataCdAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 33, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthDataCdAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthDataCdAlias.setDescription("Configuration Data Component' Base Name")
controlPlaneEthDataRmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 33, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneEthDataRmAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneEthDataRmAlias.setDescription("Resource Management Component' Base Name")
tunnelEthConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34), )
if mibBuilder.loadTexts: tunnelEthConfigTable.setStatus('current')
if mibBuilder.loadTexts: tunnelEthConfigTable.setDescription('')
tunnelEthConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: tunnelEthConfigEntry.setStatus('current')
if mibBuilder.loadTexts: tunnelEthConfigEntry.setDescription('')
tunnelEthConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelEthConfigAlias.setStatus('current')
if mibBuilder.loadTexts: tunnelEthConfigAlias.setDescription('Alias.')
tunnelEthConfigProvisionedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelEthConfigProvisionedPaths.setStatus('current')
if mibBuilder.loadTexts: tunnelEthConfigProvisionedPaths.setDescription('')
tunnelEthConfigPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34, 1, 3), FspR7CpPinning()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelEthConfigPin.setStatus('current')
if mibBuilder.loadTexts: tunnelEthConfigPin.setDescription('')
tunnelEthConfigAbortProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34, 1, 4), FspR7CpAbortProcess()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelEthConfigAbortProcess.setStatus('current')
if mibBuilder.loadTexts: tunnelEthConfigAbortProcess.setDescription('')
tunnelEthConfigCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34, 1, 5), FspR7CpCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelEthConfigCommand.setStatus('current')
if mibBuilder.loadTexts: tunnelEthConfigCommand.setDescription('')
tunnelEthConfigCirRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34, 1, 6), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelEthConfigCirRcv.setStatus('current')
if mibBuilder.loadTexts: tunnelEthConfigCirRcv.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
tunnelEthConfigCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 26214400), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelEthConfigCbsRcv.setStatus('current')
if mibBuilder.loadTexts: tunnelEthConfigCbsRcv.setDescription('Committed Burst Size')
tunnelEthConfigProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34, 1, 8), FspR7CpProtectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelEthConfigProtectionType.setStatus('current')
if mibBuilder.loadTexts: tunnelEthConfigProtectionType.setDescription('')
tunnelEthConfigRestorationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34, 1, 9), FspR7CpRestorationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelEthConfigRestorationType.setStatus('current')
if mibBuilder.loadTexts: tunnelEthConfigRestorationType.setDescription('')
tunnelEthConfigMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34, 1, 10), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelEthConfigMonitorEntities.setStatus('current')
if mibBuilder.loadTexts: tunnelEthConfigMonitorEntities.setDescription('')
tunnelEthConfigAdminModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 34, 1, 11), FspR7CommandModifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelEthConfigAdminModifier.setStatus('current')
if mibBuilder.loadTexts: tunnelEthConfigAdminModifier.setDescription('')
tunnelEthDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35), )
if mibBuilder.loadTexts: tunnelEthDataTable.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataTable.setDescription('')
tunnelEthDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: tunnelEthDataEntry.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataEntry.setDescription('')
tunnelEthDataTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataTunnelId.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataTunnelId.setDescription('')
tunnelEthDataTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataTunnelNo.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataTunnelNo.setDescription('')
tunnelEthDataTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 3), FspR7CpTunnelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataTunnelType.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataTunnelType.setDescription('')
tunnelEthDataFromTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataFromTid.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataFromTid.setDescription('')
tunnelEthDataFromNodeIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataFromNodeIP.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataFromNodeIP.setDescription('')
tunnelEthDataToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataToTid.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataToTid.setDescription('')
tunnelEthDataToTidMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataToTidMonitor.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataToTidMonitor.setDescription('')
tunnelEthDataToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataToNodeIp.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataToNodeIp.setDescription('')
tunnelEthDataToNodeIpMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataToNodeIpMonitor.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataToNodeIpMonitor.setDescription('')
tunnelEthDataFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 10), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataFromAid.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataFromAid.setDescription('')
tunnelEthDataToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 11), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataToAid.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataToAid.setDescription('')
tunnelEthDataConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 12), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataConnectionDirection.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataConnectionDirection.setDescription('')
tunnelEthDataFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 13), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataFacilityType.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataFacilityType.setDescription('')
tunnelEthDataComputedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataComputedPaths.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataComputedPaths.setDescription('')
tunnelEthDataComputationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 15), FspR7CpCompState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataComputationState.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataComputationState.setDescription('')
tunnelEthDataErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 16), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataErrorMessage.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataErrorMessage.setDescription('')
tunnelEthDataCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 17), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataCirTrmt.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataCirTrmt.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
tunnelEthDataCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 25600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataCbsTrmt.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataCbsTrmt.setDescription('Committed Burst Size')
tunnelEthDataErrorCodeMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataErrorCodeMajor.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataErrorCodeMajor.setDescription('Errorcode Major')
tunnelEthDataErrorCodeMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataErrorCodeMinor.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataErrorCodeMinor.setDescription('Errorcode Minor')
tunnelEthDataErrorIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataErrorIp.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataErrorIp.setDescription('Error IP')
tunnelEthDataErrorTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 22), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataErrorTid.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataErrorTid.setDescription('Error TID')
tunnelEthDataErrorCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 23), FspR7CpErrorCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataErrorCategory.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataErrorCategory.setDescription('CP Provisioning Failure Category')
tunnelEthDataSpecificErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 24), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataSpecificErrorMessage.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataSpecificErrorMessage.setDescription('Specific Error Message')
tunnelEthDataTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 25), FspR7CpTunnelScope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataTunnelScope.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataTunnelScope.setDescription('Service Scope extending over either Client or Network Ports of Modules')
tunnelEthDataLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 26), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataLayer.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataLayer.setDescription('Notional Layer of Advertisement on Packets on the LIF')
tunnelEthDataOifUni = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 27), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataOifUni.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataOifUni.setDescription('OIF UNI Tunnel')
tunnelEthDataTunnelNumberExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 35, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelEthDataTunnelNumberExtension.setStatus('current')
if mibBuilder.loadTexts: tunnelEthDataTunnelNumberExtension.setDescription('Tunnel Number Extension. (internal: serviceID.extTunnelID)')
connectionEthConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 36), )
if mibBuilder.loadTexts: connectionEthConfigTable.setStatus('current')
if mibBuilder.loadTexts: connectionEthConfigTable.setDescription('')
connectionEthConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 36, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: connectionEthConfigEntry.setStatus('current')
if mibBuilder.loadTexts: connectionEthConfigEntry.setDescription('')
connectionEthConfigCancelConnEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 36, 1, 1), FspR7CpCancConnection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionEthConfigCancelConnEntities.setStatus('current')
if mibBuilder.loadTexts: connectionEthConfigCancelConnEntities.setDescription('')
connectionEthDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37), )
if mibBuilder.loadTexts: connectionEthDataTable.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataTable.setDescription('')
connectionEthDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: connectionEthDataEntry.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataEntry.setDescription('')
connectionEthDataTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataTunnelId.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataTunnelId.setDescription('')
connectionEthDataTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataTunnelNo.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataTunnelNo.setDescription('')
connectionEthDataTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 3), FspR7CpTunnelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataTunnelType.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataTunnelType.setDescription('')
connectionEthDataFromTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataFromTid.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataFromTid.setDescription('')
connectionEthDataFromNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataFromNodeIp.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataFromNodeIp.setDescription('')
connectionEthDataToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataToTid.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataToTid.setDescription('')
connectionEthDataToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataToNodeIp.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataToNodeIp.setDescription('')
connectionEthDataFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 8), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataFromAid.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataFromAid.setDescription('')
connectionEthDataToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 9), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataToAid.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataToAid.setDescription('')
connectionEthDataConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 10), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataConnectionDirection.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataConnectionDirection.setDescription('')
connectionEthDataNetworkElementPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 11), FspR7CpNePosition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataNetworkElementPosition.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataNetworkElementPosition.setDescription('')
connectionEthDataSignalledPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataSignalledPaths.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataSignalledPaths.setDescription('')
connectionEthDataComputedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataComputedPaths.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataComputedPaths.setDescription('')
connectionEthDataRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 14), FspR7CpRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataRole.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataRole.setDescription('')
connectionEthDataErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataErrorMessage.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataErrorMessage.setDescription('')
connectionEthDataCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 16), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataCirTrmt.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataCirTrmt.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
connectionEthDataCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 25600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataCbsTrmt.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataCbsTrmt.setDescription('Committed Burst Size')
connectionEthDataCirRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 18), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataCirRcv.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataCirRcv.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
connectionEthDataCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 26214400), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataCbsRcv.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataCbsRcv.setDescription('Committed Burst Size')
connectionEthDataActivationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 20), FspR7CpActivState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataActivationState.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataActivationState.setDescription('')
connectionEthDataRestorable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 21), FspR7FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataRestorable.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataRestorable.setDescription('')
connectionEthDataModificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 22), FspR7CpCompState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataModificationState.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataModificationState.setDescription('Modification Enumeration State')
connectionEthDataRestorationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 23), FspR7CpRestorationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataRestorationState.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataRestorationState.setDescription('')
connectionEthDataMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 24), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataMonitorEntities.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataMonitorEntities.setDescription('')
connectionEthDataTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 25), FspR7CpTunnelScope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataTunnelScope.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataTunnelScope.setDescription('Service Scope extending over either Client or Network Ports of Modules')
connectionEthDataLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 26), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataLayer.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataLayer.setDescription('Notional Layer of Advertisement on Packets on the LIF')
connectionEthDataSourceTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataSourceTna.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataSourceTna.setDescription('Source Transport Network Assigned Name')
connectionEthDataDestinationTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 28), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataDestinationTna.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataDestinationTna.setDescription('Destination Transport Network Assigned Name')
connectionEthDataTunnelNumberExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataTunnelNumberExtension.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataTunnelNumberExtension.setDescription('Tunnel Number Extension. (internal: serviceID.extTunnelID)')
connectionEthDataTunnelInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataTunnelInstance.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataTunnelInstance.setDescription('Tunnel Instance also called Service Instance ID. This changes every time there is Make-Before-Break operation. (internal: serviceInstID.octpID)')
connectionEthDataConnectionNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 37, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEthDataConnectionNo.setStatus('current')
if mibBuilder.loadTexts: connectionEthDataConnectionNo.setDescription('Connection Number also called Connection ID. This changes every time there is Make-Before-Break operation. Working and protection connection numbers are different. (internal: lsptID.octpID)')
pathEthDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 38), )
if mibBuilder.loadTexts: pathEthDataTable.setStatus('current')
if mibBuilder.loadTexts: pathEthDataTable.setDescription('')
pathEthDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 38, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: pathEthDataEntry.setStatus('current')
if mibBuilder.loadTexts: pathEthDataEntry.setDescription('')
pathEthDataPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 38, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathEthDataPathId.setStatus('current')
if mibBuilder.loadTexts: pathEthDataPathId.setDescription('')
pathEthDataPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 38, 1, 2), FspR7CpPathType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathEthDataPathType.setStatus('current')
if mibBuilder.loadTexts: pathEthDataPathType.setDescription('')
pathEthDataConnectionTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 38, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathEthDataConnectionTunnelAid.setStatus('current')
if mibBuilder.loadTexts: pathEthDataConnectionTunnelAid.setDescription('')
pathEthDataRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 38, 1, 4), FspR7CpRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathEthDataRole.setStatus('current')
if mibBuilder.loadTexts: pathEthDataRole.setDescription('')
pathElementEthDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39), )
if mibBuilder.loadTexts: pathElementEthDataTable.setStatus('current')
if mibBuilder.loadTexts: pathElementEthDataTable.setDescription('')
pathElementEthDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: pathElementEthDataEntry.setStatus('current')
if mibBuilder.loadTexts: pathElementEthDataEntry.setDescription('')
pathElementEthDataPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataPathId.setStatus('current')
if mibBuilder.loadTexts: pathElementEthDataPathId.setDescription('')
pathElementEthDataSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: pathElementEthDataSequenceNumber.setDescription('')
pathElementEthDataPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 3), FspR7CpPathType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataPathType.setStatus('current')
if mibBuilder.loadTexts: pathElementEthDataPathType.setDescription('')
pathElementEthDataTrafficEngineeringType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 4), FspR7CpTEType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataTrafficEngineeringType.setStatus('current')
if mibBuilder.loadTexts: pathElementEthDataTrafficEngineeringType.setDescription('')
pathElementEthDataLifIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataLifIp.setStatus('current')
if mibBuilder.loadTexts: pathElementEthDataLifIp.setDescription('')
pathElementEthDataNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataNodeIp.setStatus('current')
if mibBuilder.loadTexts: pathElementEthDataNodeIp.setDescription('')
pathElementEthDataNodeIpMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataNodeIpMonitor.setStatus('current')
if mibBuilder.loadTexts: pathElementEthDataNodeIpMonitor.setDescription('')
pathElementEthDataTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataTid.setStatus('current')
if mibBuilder.loadTexts: pathElementEthDataTid.setDescription('')
pathElementEthDataTidMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataTidMonitor.setStatus('current')
if mibBuilder.loadTexts: pathElementEthDataTidMonitor.setDescription('')
pathElementEthDataLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataLogicalInterfaceId.setStatus('current')
if mibBuilder.loadTexts: pathElementEthDataLogicalInterfaceId.setDescription('')
pathElementEthDataTie = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 11), FspR7CpTie()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataTie.setStatus('current')
if mibBuilder.loadTexts: pathElementEthDataTie.setDescription('')
pathElementEthDataUpstreamSvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataUpstreamSvid.setStatus('current')
if mibBuilder.loadTexts: pathElementEthDataUpstreamSvid.setDescription('')
pathElementEthDataDownstreamSvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 39, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementEthDataDownstreamSvid.setStatus('current')
if mibBuilder.loadTexts: pathElementEthDataDownstreamSvid.setDescription('')
inventoryCpEthDownDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 40), )
if mibBuilder.loadTexts: inventoryCpEthDownDataTable.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthDownDataTable.setDescription('Does not show flow entities as facilities on connection.\n         inventoryCpEthDownFlowDataTable is a extension of the table. It contains only\n         flow entities as a facility on connectioncon')
inventoryCpEthDownDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 40, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"), (0, "FspR7-MIB", "inventoryCpEthDownDataNumber"))
if mibBuilder.loadTexts: inventoryCpEthDownDataEntry.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthDownDataEntry.setDescription('')
inventoryCpEthDownDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 40, 1, 1), EntityIndex())
if mibBuilder.loadTexts: inventoryCpEthDownDataNumber.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthDownDataNumber.setDescription('')
inventoryCpEthDownDataResources = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 40, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpEthDownDataResources.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthDownDataResources.setDescription('')
inventoryCpEthDownDataFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 40, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpEthDownDataFacilities.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthDownDataFacilities.setDescription('')
inventoryCpEthUpDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 41), )
if mibBuilder.loadTexts: inventoryCpEthUpDataTable.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthUpDataTable.setDescription('Does not show flow entities as facilities on connection.\n         inventoryCpEthDownFlowUpTable is a extension of the table. It contains only\n         flow entities as a facility on connectioncon')
inventoryCpEthUpDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 41, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"), (0, "FspR7-MIB", "inventoryCpEthUpDataNumber"))
if mibBuilder.loadTexts: inventoryCpEthUpDataEntry.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthUpDataEntry.setDescription('')
inventoryCpEthUpDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 41, 1, 1), EntityIndex())
if mibBuilder.loadTexts: inventoryCpEthUpDataNumber.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthUpDataNumber.setDescription('')
inventoryCpEthUpDataResources = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 41, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpEthUpDataResources.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthUpDataResources.setDescription('')
inventoryCpEthUpDataFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 41, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpEthUpDataFacilities.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthUpDataFacilities.setDescription('')
inventoryCpEthCrsDownDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 42), )
if mibBuilder.loadTexts: inventoryCpEthCrsDownDataTable.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthCrsDownDataTable.setDescription('Contains cross entries for connection eth.')
inventoryCpEthCrsDownDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 42, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"), (0, "FspR7-MIB", "inventoryCpEthCrsDownDataNumber"), (0, "FspR7-MIB", "inventoryCpEthCrsDownDataIndexEthFrom"), (0, "FspR7-MIB", "inventoryCpEthCrsDownDataIndexFlowFrom"), (0, "FspR7-MIB", "inventoryCpEthCrsDownDataIndexEthTo"))
if mibBuilder.loadTexts: inventoryCpEthCrsDownDataEntry.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthCrsDownDataEntry.setDescription('')
inventoryCpEthCrsDownDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 42, 1, 1), EntityIndex())
if mibBuilder.loadTexts: inventoryCpEthCrsDownDataNumber.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthCrsDownDataNumber.setDescription('')
inventoryCpEthCrsDownDataIndexEthFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 42, 1, 2), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inventoryCpEthCrsDownDataIndexEthFrom.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthCrsDownDataIndexEthFrom.setDescription('First index of a flow entity referencing to eth entity (parent).')
inventoryCpEthCrsDownDataIndexFlowFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 42, 1, 3), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inventoryCpEthCrsDownDataIndexFlowFrom.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthCrsDownDataIndexFlowFrom.setDescription('Second index of a flow entity referencing to svid value.')
inventoryCpEthCrsDownDataIndexEthTo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 42, 1, 4), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inventoryCpEthCrsDownDataIndexEthTo.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthCrsDownDataIndexEthTo.setDescription('First index of a flow entity referencing to eth entity (parent).')
inventoryCpEthCrsDownDataAids = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 42, 1, 5), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpEthCrsDownDataAids.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthCrsDownDataAids.setDescription('')
inventoryCpEthCrsUpDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 43), )
if mibBuilder.loadTexts: inventoryCpEthCrsUpDataTable.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthCrsUpDataTable.setDescription('Contains cross entries for connection eth')
inventoryCpEthCrsUpDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 43, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"), (0, "FspR7-MIB", "inventoryCpEthCrsUpDataNumber"), (0, "FspR7-MIB", "inventoryCpEthCrsDownDataIndexEthFrom"), (0, "FspR7-MIB", "inventoryCpEthCrsDownDataIndexFlowFrom"), (0, "FspR7-MIB", "inventoryCpEthCrsDownDataIndexEthTo"))
if mibBuilder.loadTexts: inventoryCpEthCrsUpDataEntry.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthCrsUpDataEntry.setDescription('')
inventoryCpEthCrsUpDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 43, 1, 1), EntityIndex())
if mibBuilder.loadTexts: inventoryCpEthCrsUpDataNumber.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthCrsUpDataNumber.setDescription('')
inventoryCpEthCrsUpDataAids = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 43, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpEthCrsUpDataAids.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthCrsUpDataAids.setDescription('')
teUnnumLinkEthDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 44), )
if mibBuilder.loadTexts: teUnnumLinkEthDataTable.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkEthDataTable.setDescription('')
teUnnumLinkEthDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 44, 1), ).setIndexNames((0, "FspR7-MIB", "teRouterDataIp"), (0, "FspR7-MIB", "teUnnumLinkEthDataNumber"))
if mibBuilder.loadTexts: teUnnumLinkEthDataEntry.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkEthDataEntry.setDescription('')
teUnnumLinkEthDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 44, 1, 1), Unsigned32())
if mibBuilder.loadTexts: teUnnumLinkEthDataNumber.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkEthDataNumber.setDescription('')
teUnnumLinkEthDataNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 44, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkEthDataNodeIp.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkEthDataNodeIp.setDescription('')
teUnnumLinkEthDataNodeTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 44, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkEthDataNodeTid.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkEthDataNodeTid.setDescription('')
teUnnumLinkEthDataTeLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 44, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkEthDataTeLinkId.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkEthDataTeLinkId.setDescription('')
teUnnumLinkEthDataPhysicalLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 44, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkEthDataPhysicalLink.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkEthDataPhysicalLink.setDescription('')
teUnnumLinkEthDataSynchronization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 44, 1, 6), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkEthDataSynchronization.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkEthDataSynchronization.setDescription('')
teUnnumLinkEthDataDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 44, 1, 7), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkEthDataDiscarded.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkEthDataDiscarded.setDescription('')
teUnnumLinkEthDataFendNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 44, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkEthDataFendNodeIp.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkEthDataFendNodeIp.setDescription('')
teUnnumLinkEthDataFendTeLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 44, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkEthDataFendTeLinkId.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkEthDataFendTeLinkId.setDescription('')
teUnnumLinkEthDataInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 44, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkEthDataInfo.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkEthDataInfo.setDescription('')
teNumLinkEthDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 45), )
if mibBuilder.loadTexts: teNumLinkEthDataTable.setStatus('current')
if mibBuilder.loadTexts: teNumLinkEthDataTable.setDescription('')
teNumLinkEthDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 45, 1), ).setIndexNames((0, "FspR7-MIB", "teRouterDataIp"))
if mibBuilder.loadTexts: teNumLinkEthDataEntry.setStatus('current')
if mibBuilder.loadTexts: teNumLinkEthDataEntry.setDescription('')
teNumLinkEthDataNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 45, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkEthDataNodeIp.setStatus('current')
if mibBuilder.loadTexts: teNumLinkEthDataNodeIp.setDescription('')
teNumLinkEthDataNodeTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 45, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkEthDataNodeTid.setStatus('current')
if mibBuilder.loadTexts: teNumLinkEthDataNodeTid.setDescription('')
teNumLinkEthDataTeLinkIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 45, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkEthDataTeLinkIp.setStatus('current')
if mibBuilder.loadTexts: teNumLinkEthDataTeLinkIp.setDescription('')
teNumLinkEthDataPhysicalLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 45, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkEthDataPhysicalLink.setStatus('current')
if mibBuilder.loadTexts: teNumLinkEthDataPhysicalLink.setDescription('')
teNumLinkEthDataSynchronization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 45, 1, 5), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkEthDataSynchronization.setStatus('current')
if mibBuilder.loadTexts: teNumLinkEthDataSynchronization.setDescription('')
teNumLinkEthDataDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 45, 1, 6), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkEthDataDiscarded.setStatus('current')
if mibBuilder.loadTexts: teNumLinkEthDataDiscarded.setDescription('')
teNumLinkEthDataFendNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 45, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkEthDataFendNodeIp.setStatus('current')
if mibBuilder.loadTexts: teNumLinkEthDataFendNodeIp.setDescription('')
teNumLinkEthDataFendTeLinkIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 45, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkEthDataFendTeLinkIp.setStatus('current')
if mibBuilder.loadTexts: teNumLinkEthDataFendTeLinkIp.setDescription('')
teNumLinkEthDataInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 45, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkEthDataInfo.setStatus('current')
if mibBuilder.loadTexts: teNumLinkEthDataInfo.setDescription('')
remoteAlarmCpDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 46), )
if mibBuilder.loadTexts: remoteAlarmCpDataTable.setStatus('current')
if mibBuilder.loadTexts: remoteAlarmCpDataTable.setDescription('')
remoteAlarmCpDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 46, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"), (0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: remoteAlarmCpDataEntry.setStatus('current')
if mibBuilder.loadTexts: remoteAlarmCpDataEntry.setDescription('')
remoteAlarmCpDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 46, 1, 1), EntityIndex())
if mibBuilder.loadTexts: remoteAlarmCpDataNumber.setStatus('current')
if mibBuilder.loadTexts: remoteAlarmCpDataNumber.setDescription('')
remoteAlarmCpDataNodeTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 46, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAlarmCpDataNodeTid.setStatus('current')
if mibBuilder.loadTexts: remoteAlarmCpDataNodeTid.setDescription('')
remoteAlarmCpDataNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 46, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAlarmCpDataNodeIp.setStatus('current')
if mibBuilder.loadTexts: remoteAlarmCpDataNodeIp.setDescription('')
remoteAlarmCpDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 46, 1, 4), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAlarmCpDataSource.setStatus('current')
if mibBuilder.loadTexts: remoteAlarmCpDataSource.setDescription('')
remoteAlarmCpDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 46, 1, 5), FspR7RemoteAlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAlarmCpDataType.setStatus('current')
if mibBuilder.loadTexts: remoteAlarmCpDataType.setDescription('')
remoteAlarmCpDataDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 46, 1, 6), FspR7Date()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAlarmCpDataDate.setStatus('current')
if mibBuilder.loadTexts: remoteAlarmCpDataDate.setDescription('')
remoteAlarmCpDataTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 46, 1, 7), FspR7Time()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAlarmCpDataTime.setStatus('current')
if mibBuilder.loadTexts: remoteAlarmCpDataTime.setDescription('')
remoteAlarmCpDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 46, 1, 8), FspR7RemoteAlarmPath()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAlarmCpDataPath.setStatus('current')
if mibBuilder.loadTexts: remoteAlarmCpDataPath.setDescription('')
inventoryCpEthDownFlowDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 47), )
if mibBuilder.loadTexts: inventoryCpEthDownFlowDataTable.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthDownFlowDataTable.setDescription('Contains only flow entities as a facility on connection.')
inventoryCpEthDownFlowDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 47, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"), (0, "FspR7-MIB", "inventoryCpEthDownDataNumber"), (0, "FspR7-MIB", "inventoryCpEthDownFlowDataIndexEth"))
if mibBuilder.loadTexts: inventoryCpEthDownFlowDataEntry.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthDownFlowDataEntry.setDescription('')
inventoryCpEthDownFlowDataIndexEth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 47, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inventoryCpEthDownFlowDataIndexEth.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthDownFlowDataIndexEth.setDescription('First index of a flow entity referencing to eth entity (parent).')
inventoryCpEthDownFlowDataFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 47, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpEthDownFlowDataFacilities.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthDownFlowDataFacilities.setDescription('')
inventoryCpEthUpFlowDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 48), )
if mibBuilder.loadTexts: inventoryCpEthUpFlowDataTable.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthUpFlowDataTable.setDescription('Contains only flow entities as a facility on connection.')
inventoryCpEthUpFlowDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 48, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"), (0, "FspR7-MIB", "inventoryCpEthUpDataNumber"), (0, "FspR7-MIB", "inventoryCpEthUpFlowDataIndexEth"))
if mibBuilder.loadTexts: inventoryCpEthUpFlowDataEntry.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthUpFlowDataEntry.setDescription('')
inventoryCpEthUpFlowDataIndexEth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 48, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inventoryCpEthUpFlowDataIndexEth.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthUpFlowDataIndexEth.setDescription('First index of a flow entity referencing to eth entity (parent).')
inventoryCpEthUpFlowDataFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 48, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpEthUpFlowDataFacilities.setStatus('current')
if mibBuilder.loadTexts: inventoryCpEthUpFlowDataFacilities.setDescription('')
portBindingDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 51), )
if mibBuilder.loadTexts: portBindingDataTable.setStatus('current')
if mibBuilder.loadTexts: portBindingDataTable.setDescription('')
portBindingDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 51, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: portBindingDataEntry.setStatus('current')
if mibBuilder.loadTexts: portBindingDataEntry.setDescription('')
portBindingDataLogicalIfAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 51, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBindingDataLogicalIfAid.setStatus('current')
if mibBuilder.loadTexts: portBindingDataLogicalIfAid.setDescription('Logical Interface AID')
portBindingDataLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 51, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBindingDataLocalPort.setStatus('current')
if mibBuilder.loadTexts: portBindingDataLocalPort.setDescription('Port Binding Local Port AID (OIF Signaling Interface)')
portBindingDataLocalTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 51, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBindingDataLocalTna.setStatus('current')
if mibBuilder.loadTexts: portBindingDataLocalTna.setDescription('Port Binding Local Transport Network Assigned Name (OIF Signaling Interface)')
portBindingDataRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 51, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBindingDataRemotePort.setStatus('current')
if mibBuilder.loadTexts: portBindingDataRemotePort.setDescription('Port Binding Remote Port Identifier (OIF Signaling Interface)')
portBindingDataRemoteTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 51, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBindingDataRemoteTna.setStatus('current')
if mibBuilder.loadTexts: portBindingDataRemoteTna.setDescription('Port Binding Remote Transport Network Assigned Name (OIF Signaling Interface)')
portBindingDataRemoteTnaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 51, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBindingDataRemoteTnaMask.setStatus('current')
if mibBuilder.loadTexts: portBindingDataRemoteTnaMask.setDescription('Port Binding Remote Transport Network Assigned Name Mask (OIF Signaling Interface)')
portBindingDataRemoteNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 51, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBindingDataRemoteNodeIp.setStatus('current')
if mibBuilder.loadTexts: portBindingDataRemoteNodeIp.setDescription('Port Binding Remote Node IP (OIF Signaling Interface)')
portBindingDataRemoteScn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 51, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBindingDataRemoteScn.setStatus('current')
if mibBuilder.loadTexts: portBindingDataRemoteScn.setDescription('Port Binding Remote Signaling Connection Network Address (OIF Signaling Interface)')
portBindingDataRemoteScPc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 51, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBindingDataRemoteScPc.setStatus('current')
if mibBuilder.loadTexts: portBindingDataRemoteScPc.setDescription('Port Binding Remote Signaling Controller Protocol Controller Identifier (OIF Signaling Interface)')
portBindingDataLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 51, 1, 10), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBindingDataLayer.setStatus('current')
if mibBuilder.loadTexts: portBindingDataLayer.setDescription('Notional Layer of Advertisement on Packets on the LIF')
portBindingLifAidTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 52), )
if mibBuilder.loadTexts: portBindingLifAidTable.setStatus('current')
if mibBuilder.loadTexts: portBindingLifAidTable.setDescription('')
portBindingLifAidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 52, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"), (0, "FspR7-MIB", "portBindingLifAidIndex"))
if mibBuilder.loadTexts: portBindingLifAidEntry.setStatus('current')
if mibBuilder.loadTexts: portBindingLifAidEntry.setDescription('')
portBindingLifAidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 52, 1, 1), EntityIndex())
if mibBuilder.loadTexts: portBindingLifAidIndex.setStatus('current')
if mibBuilder.loadTexts: portBindingLifAidIndex.setDescription('')
portBindingLifAidValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 52, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBindingLifAidValue.setStatus('current')
if mibBuilder.loadTexts: portBindingLifAidValue.setDescription('List of Port Bindings attached to LIF-CP')
reservationCpDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 53), )
if mibBuilder.loadTexts: reservationCpDataTable.setStatus('current')
if mibBuilder.loadTexts: reservationCpDataTable.setDescription('This table contains all Reservation entities on each LIF-CP. First index represents the LIF-CP\n         entity, the second represents the Reservation entity.')
reservationCpDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 53, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"), (0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: reservationCpDataEntry.setStatus('current')
if mibBuilder.loadTexts: reservationCpDataEntry.setDescription('')
reservationCpDataSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 53, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reservationCpDataSeqNumber.setStatus('current')
if mibBuilder.loadTexts: reservationCpDataSeqNumber.setDescription('Sequence number of an individual container within a Virtual Concatenated Group')
reservationCpDataTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 53, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reservationCpDataTunnelNo.setStatus('current')
if mibBuilder.loadTexts: reservationCpDataTunnelNo.setDescription('Tunnel Number also called Service ID. This never changes while the tunnel is in service. (internal: serviceID.tunnelID)')
reservationCpDataTunnelInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 53, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reservationCpDataTunnelInstance.setStatus('current')
if mibBuilder.loadTexts: reservationCpDataTunnelInstance.setDescription('Tunnel Instance also called Service Instance ID. This changes every time there is Make-Before-Break operation. (internal: serviceInstID.octpID)')
reservationCpDataIngressTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 53, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reservationCpDataIngressTid.setStatus('current')
if mibBuilder.loadTexts: reservationCpDataIngressTid.setDescription('Ingress Target ID')
reservationCpDataIngressNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 53, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reservationCpDataIngressNodeIp.setStatus('current')
if mibBuilder.loadTexts: reservationCpDataIngressNodeIp.setDescription('Ingress Node IP')
reservationCpDataChannelUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 53, 1, 6), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reservationCpDataChannelUp.setStatus('current')
if mibBuilder.loadTexts: reservationCpDataChannelUp.setDescription('Upstream Channel (RCV)')
reservationCpDataChannelDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 53, 1, 7), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reservationCpDataChannelDown.setStatus('current')
if mibBuilder.loadTexts: reservationCpDataChannelDown.setDescription('Downstream Channel (TRMT)')
controlPlaneOtnConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55), )
if mibBuilder.loadTexts: controlPlaneOtnConfigTable.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigTable.setDescription('')
controlPlaneOtnConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: controlPlaneOtnConfigEntry.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigEntry.setDescription('')
controlPlaneOtnConfigCtmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCtmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigCtmConfigFlag.setDescription("Label Switched Path Edge Component' Configuration Bitfield")
controlPlaneOtnConfigCtmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCtmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigCtmTraceDetail.setDescription("Label Switched Path Edge Component' Trace Detail")
controlPlaneOtnConfigCtmSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 3), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCtmSetupTimeout.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigCtmSetupTimeout.setDescription("Label Switched Path Edge Component' Set-Up Timeout")
controlPlaneOtnConfigCtmShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 4), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCtmShutdownTimeout.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigCtmShutdownTimeout.setDescription("Label Switched Path Edge Component' Shut-Down Timeout")
controlPlaneOtnConfigCtmRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 5), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCtmRetryWait.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigCtmRetryWait.setDescription("Label Switched Path Edge Component' Initialization Retry Wait")
controlPlaneOtnConfigCtmRetryWaitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCtmRetryWaitMultiplier.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigCtmRetryWaitMultiplier.setDescription("Label Switched Path Edge Component' Initialization Retry Wait Multiplier")
controlPlaneOtnConfigCtmMaximumRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 7), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCtmMaximumRetryWait.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigCtmMaximumRetryWait.setDescription("Label Switched Path Edge Component' Initialization Maximum Retry Wait")
controlPlaneOtnConfigCtmMaximumRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCtmMaximumRetryNumber.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigCtmMaximumRetryNumber.setDescription("Label Switched Path Edge Component' Initialization Maximum Retry Number")
controlPlaneOtnConfigRaConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigRaConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigRaConfigFlag.setDescription('Resource Allocator Configuration Bitfield')
controlPlaneOtnConfigRaTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigRaTraceDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigRaTraceDetail.setDescription('Resource Allocator Trace Detail')
controlPlaneOtnConfigRaAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 11), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigRaAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigRaAlarmActivationTime.setDescription('Resource Allocator Alarm Activation Time')
controlPlaneOtnConfigCmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigCmConfigFlag.setDescription("GMPLS Tunnel Manager Component' Configuration Bitfield")
controlPlaneOtnConfigCmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigCmTraceDetail.setDescription("GMPLS Tunnel Manager Component' Trace Detail")
controlPlaneOtnConfigCmAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 14), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCmAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigCmAlarmActivationTime.setDescription("GMPLS Tunnel Manager Component' Alarm Activation Time")
controlPlaneOtnConfigCmFisFrsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 15), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCmFisFrsTimeout.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigCmFisFrsTimeout.setDescription("GMPLS Tunnel Manager Component' FIS-FRS Timeout")
controlPlaneOtnConfigCmCrankBackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 16), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCmCrankBackTimeout.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigCmCrankBackTimeout.setDescription("GMPLS Tunnel Manager Component' Crank-Back Timeout")
controlPlaneOtnConfigCdbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCdbConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigCdbConfigFlag.setDescription("Label Swithed Path Database Component' Configuration Bitfield")
controlPlaneOtnConfigCdbDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCdbDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigCdbDetail.setDescription("Label Swithed Path Database Component' Trace Detail")
controlPlaneOtnConfigCdbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCdbMaxSize.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigCdbMaxSize.setDescription("Label Swithed Path Database Component' Maximum Size; 0 impiles no limit")
controlPlaneOtnConfigRsvpConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigRsvpConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigRsvpConfigFlag.setDescription("Resource Reservation Protocol Component' Configuration Bitfield")
controlPlaneOtnConfigRsvpMaxExpRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 21), Counter64String()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigRsvpMaxExpRestartTime.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigRsvpMaxExpRestartTime.setDescription("Maximum Expected Resource Reservation Protocol Component' Restart Time")
controlPlaneOtnConfigRsvpMaxExpRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 22), Unsigned32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigRsvpMaxExpRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigRsvpMaxExpRecoveryTime.setDescription("Maximum Expected Resource Reservation Protocol Component' Recovery Time")
controlPlaneOtnConfigTedbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigTedbConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigTedbConfigFlag.setDescription("Traffic Engineering Component' Database Configuration Bitfield")
controlPlaneOtnConfigTedbTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigTedbTraceDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigTedbTraceDetail.setDescription("Traffic Engineering Component' Database Trace Detail")
controlPlaneOtnConfigTedbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigTedbMaxSize.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigTedbMaxSize.setDescription("Traffic Engineering Component' Database Maximum Size")
controlPlaneOtnConfigTedbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigTedbRouterId.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigTedbRouterId.setDescription("Traffic Engineering Component' Router ID")
controlPlaneOtnConfigTedbMinAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 27), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigTedbMinAdvertWait.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigTedbMinAdvertWait.setDescription("Traffic Engineering Component' Minimum Advertisement Wait")
controlPlaneOtnConfigNaasConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigNaasConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigNaasConfigFlag.setDescription('Node Attribute Advertising Service Database Configuration Bitfield')
controlPlaneOtnConfigNaasTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigNaasTraceDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigNaasTraceDetail.setDescription('Node Attribute Advertising Service Database Trace Detail')
controlPlaneOtnConfigNaasMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigNaasMaxSize.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigNaasMaxSize.setDescription('Node Attribute Advertising Service Database Maximum Size')
controlPlaneOtnConfigNaasAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 31), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigNaasAdvertWait.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigNaasAdvertWait.setDescription('Node Attribute Advertising Service Database Advertisement Wait')
controlPlaneOtnConfigPcConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigPcConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigPcConfigFlag.setDescription("Path Computation Component' Configuration Bitfield")
controlPlaneOtnConfigPcTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigPcTraceDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigPcTraceDetail.setDescription("Path Computation Component' Trace Detail.")
controlPlaneOtnConfigCdConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCdConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigCdConfigFlag.setDescription("Configuration Data Component' Configuration Bitfield")
controlPlaneOtnConfigCdTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 35), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCdTraceDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigCdTraceDetail.setDescription("Configuration Data Component' Trace Detail")
controlPlaneOtnConfigCdResyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigCdResyncTimeout.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigCdResyncTimeout.setDescription("Configuration Data Component' Resync Timeout")
controlPlaneOtnConfigRmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigRmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigRmConfigFlag.setDescription("Resource Management Component' Configuration Bitfield")
controlPlaneOtnConfigRmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigRmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigRmTraceDetail.setDescription("Resource Management Component' Trace Detail")
controlPlaneOtnConfigRmTraceTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 55, 1, 39), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlaneOtnConfigRmTraceTarget.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnConfigRmTraceTarget.setDescription("Resource Management Component' Trace Target")
controlPlaneOtnDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 56), )
if mibBuilder.loadTexts: controlPlaneOtnDataTable.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnDataTable.setDescription('')
controlPlaneOtnDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 56, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: controlPlaneOtnDataEntry.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnDataEntry.setDescription('')
controlPlaneOtnDataCtmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 56, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnDataCtmAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnDataCtmAlias.setDescription("Label Switched Path Edge Component Component' Base Name")
controlPlaneOtnDataRaAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 56, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnDataRaAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnDataRaAlias.setDescription("Resource Allocator Component' Base Name")
controlPlaneOtnDataCmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 56, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnDataCmAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnDataCmAlias.setDescription("GMPLS Tunnel Manager Component' Base Name")
controlPlaneOtnDataCdbAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 56, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnDataCdbAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnDataCdbAlias.setDescription("Label Swithed Path Database Component' Base Name")
controlPlaneOtnDataTedbAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 56, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnDataTedbAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnDataTedbAlias.setDescription("Traffic Engineering Component' Database Name")
controlPlaneOtnDataNaasAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 56, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnDataNaasAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnDataNaasAlias.setDescription("Node Attribute Advertising Service Database Component' Base Name")
controlPlaneOtnDataPcAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 56, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnDataPcAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnDataPcAlias.setDescription("Path Computation Engine Component' Base Name")
controlPlaneOtnDataRsvpAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 56, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnDataRsvpAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnDataRsvpAlias.setDescription("Resource Reservation Protocol Component' Base Name")
controlPlaneOtnDataCdAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 56, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnDataCdAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnDataCdAlias.setDescription("Configuration Data Component' Base Name")
controlPlaneOtnDataRmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 56, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPlaneOtnDataRmAlias.setStatus('current')
if mibBuilder.loadTexts: controlPlaneOtnDataRmAlias.setDescription("Resource Management Component' Base Name")
tunnelOtnConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 57), )
if mibBuilder.loadTexts: tunnelOtnConfigTable.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnConfigTable.setDescription('')
tunnelOtnConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 57, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: tunnelOtnConfigEntry.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnConfigEntry.setDescription('')
tunnelOtnConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 57, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelOtnConfigAlias.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnConfigAlias.setDescription('Alias.')
tunnelOtnConfigProvisionedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 57, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelOtnConfigProvisionedPaths.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnConfigProvisionedPaths.setDescription('')
tunnelOtnConfigPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 57, 1, 3), FspR7CpPinning()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelOtnConfigPin.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnConfigPin.setDescription('')
tunnelOtnConfigAbortProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 57, 1, 4), FspR7CpAbortProcess()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelOtnConfigAbortProcess.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnConfigAbortProcess.setDescription('')
tunnelOtnConfigCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 57, 1, 5), FspR7CpCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelOtnConfigCommand.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnConfigCommand.setDescription('')
tunnelOtnConfigProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 57, 1, 6), FspR7CpProtectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelOtnConfigProtectionType.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnConfigProtectionType.setDescription('')
tunnelOtnConfigRestorationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 57, 1, 7), FspR7CpRestorationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelOtnConfigRestorationType.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnConfigRestorationType.setDescription('')
tunnelOtnConfigMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 57, 1, 8), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelOtnConfigMonitorEntities.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnConfigMonitorEntities.setDescription('')
tunnelOtnConfigAdminModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 57, 1, 9), FspR7CommandModifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelOtnConfigAdminModifier.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnConfigAdminModifier.setDescription('')
tunnelOtnDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58), )
if mibBuilder.loadTexts: tunnelOtnDataTable.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataTable.setDescription('')
tunnelOtnDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: tunnelOtnDataEntry.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataEntry.setDescription('')
tunnelOtnDataTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataTunnelId.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataTunnelId.setDescription('')
tunnelOtnDataTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataTunnelNo.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataTunnelNo.setDescription('')
tunnelOtnDataTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 3), FspR7CpTunnelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataTunnelType.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataTunnelType.setDescription('')
tunnelOtnDataFromTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataFromTid.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataFromTid.setDescription('')
tunnelOtnDataFromNodeIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataFromNodeIP.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataFromNodeIP.setDescription('')
tunnelOtnDataToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataToTid.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataToTid.setDescription('')
tunnelOtnDataToTidMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataToTidMonitor.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataToTidMonitor.setDescription('')
tunnelOtnDataToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataToNodeIp.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataToNodeIp.setDescription('')
tunnelOtnDataToNodeIpMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataToNodeIpMonitor.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataToNodeIpMonitor.setDescription('')
tunnelOtnDataFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 10), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataFromAid.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataFromAid.setDescription('')
tunnelOtnDataToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 11), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataToAid.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataToAid.setDescription('')
tunnelOtnDataConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 12), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataConnectionDirection.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataConnectionDirection.setDescription('')
tunnelOtnDataFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 13), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataFacilityType.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataFacilityType.setDescription('')
tunnelOtnDataComputedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataComputedPaths.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataComputedPaths.setDescription('')
tunnelOtnDataComputationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 15), FspR7CpCompState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataComputationState.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataComputationState.setDescription('')
tunnelOtnDataErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 16), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataErrorMessage.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataErrorMessage.setDescription('')
tunnelOtnDataCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 17), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataCirTrmt.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataCirTrmt.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
tunnelOtnDataCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 25600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataCbsTrmt.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataCbsTrmt.setDescription('Committed Burst Size')
tunnelOtnDataErrorCodeMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataErrorCodeMajor.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataErrorCodeMajor.setDescription('Errorcode Major')
tunnelOtnDataErrorCodeMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataErrorCodeMinor.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataErrorCodeMinor.setDescription('Errorcode Minor')
tunnelOtnDataErrorIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataErrorIp.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataErrorIp.setDescription('Error IP')
tunnelOtnDataErrorTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 22), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataErrorTid.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataErrorTid.setDescription('Error TID')
tunnelOtnDataErrorCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 23), FspR7CpErrorCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataErrorCategory.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataErrorCategory.setDescription('CP Provisioning Failure Category')
tunnelOtnDataSpecificErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 24), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataSpecificErrorMessage.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataSpecificErrorMessage.setDescription('Specific Error Message')
tunnelOtnDataTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 25), FspR7CpTunnelScope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataTunnelScope.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataTunnelScope.setDescription('Service Scope extending over either Client or Network Ports of Modules')
tunnelOtnDataLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 26), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataLayer.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataLayer.setDescription('Notional Layer of Advertisement on Packets on the LIF')
tunnelOtnDataOifUni = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 27), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataOifUni.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataOifUni.setDescription('OIF UNI Tunnel')
tunnelOtnDataTunnelNumberExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataTunnelNumberExtension.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataTunnelNumberExtension.setDescription('Tunnel Number Extension. (internal: serviceID.extTunnelID)')
tunnelOtnDataMonitorEntitiesDerive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 58, 1, 29), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelOtnDataMonitorEntitiesDerive.setStatus('current')
if mibBuilder.loadTexts: tunnelOtnDataMonitorEntitiesDerive.setDescription('')
connectionOtnConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 59), )
if mibBuilder.loadTexts: connectionOtnConfigTable.setStatus('current')
if mibBuilder.loadTexts: connectionOtnConfigTable.setDescription('')
connectionOtnConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 59, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: connectionOtnConfigEntry.setStatus('current')
if mibBuilder.loadTexts: connectionOtnConfigEntry.setDescription('')
connectionOtnConfigCancelConnEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 59, 1, 1), FspR7CpCancConnection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionOtnConfigCancelConnEntities.setStatus('current')
if mibBuilder.loadTexts: connectionOtnConfigCancelConnEntities.setDescription('')
connectionOtnConfigCancelModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 59, 1, 2), FspR7CommandModifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionOtnConfigCancelModifier.setStatus('current')
if mibBuilder.loadTexts: connectionOtnConfigCancelModifier.setDescription('')
connectionOtnDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60), )
if mibBuilder.loadTexts: connectionOtnDataTable.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataTable.setDescription('')
connectionOtnDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: connectionOtnDataEntry.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataEntry.setDescription('')
connectionOtnDataTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataTunnelId.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataTunnelId.setDescription('')
connectionOtnDataTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataTunnelNo.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataTunnelNo.setDescription('')
connectionOtnDataTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 3), FspR7CpTunnelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataTunnelType.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataTunnelType.setDescription('')
connectionOtnDataFromTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataFromTid.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataFromTid.setDescription('')
connectionOtnDataFromNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataFromNodeIp.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataFromNodeIp.setDescription('')
connectionOtnDataToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataToTid.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataToTid.setDescription('')
connectionOtnDataToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataToNodeIp.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataToNodeIp.setDescription('')
connectionOtnDataFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 8), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataFromAid.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataFromAid.setDescription('')
connectionOtnDataToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 9), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataToAid.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataToAid.setDescription('')
connectionOtnDataConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 10), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataConnectionDirection.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataConnectionDirection.setDescription('')
connectionOtnDataNetworkElementPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 11), FspR7CpNePosition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataNetworkElementPosition.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataNetworkElementPosition.setDescription('')
connectionOtnDataFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 12), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataFacilityType.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataFacilityType.setDescription('')
connectionOtnDataBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 13), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataBitrate.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataBitrate.setDescription('')
connectionOtnDataEncode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 14), FspR7CpEncode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataEncode.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataEncode.setDescription('')
connectionOtnDataTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 15), OhTerminationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataTerminationLevel.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataTerminationLevel.setDescription('')
connectionOtnDataFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 16), FspR7FecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataFecType.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataFecType.setDescription('')
connectionOtnDataStuff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 17), FspR7Stuff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataStuff.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataStuff.setDescription('')
connectionOtnDataSignalledPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 18), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataSignalledPaths.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataSignalledPaths.setDescription('')
connectionOtnDataComputedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 19), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataComputedPaths.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataComputedPaths.setDescription('')
connectionOtnDataRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 20), FspR7CpRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataRole.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataRole.setDescription('')
connectionOtnDataErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 21), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataErrorMessage.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataErrorMessage.setDescription('')
connectionOtnDataActivationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 22), FspR7CpActivState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataActivationState.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataActivationState.setDescription('')
connectionOtnDataRestorable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 23), FspR7FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataRestorable.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataRestorable.setDescription('')
connectionOtnDataEqualizationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 24), FspR7CpCompState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataEqualizationState.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataEqualizationState.setDescription('')
connectionOtnDataModificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 25), FspR7CpCompState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataModificationState.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataModificationState.setDescription('Modification Enumeration State')
connectionOtnDataTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 26), FspR7CpTunnelScope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataTunnelScope.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataTunnelScope.setDescription('Service Scope extending over either Client or Network Ports of Modules')
connectionOtnDataLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 27), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataLayer.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataLayer.setDescription('Notional Layer of Advertisement on Packets on the LIF')
connectionOtnDataSourceTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 28), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataSourceTna.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataSourceTna.setDescription('Source Transport Network Assigned Name')
connectionOtnDataDestinationTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 29), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataDestinationTna.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataDestinationTna.setDescription('Destination Transport Network Assigned Name')
connectionOtnDataTunnelNumberExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataTunnelNumberExtension.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataTunnelNumberExtension.setDescription('Tunnel Number Extension. (internal: serviceID.extTunnelID)')
connectionOtnDataTunnelInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataTunnelInstance.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataTunnelInstance.setDescription('Tunnel Instance also called Service Instance ID. This changes every time there is Make-Before-Break operation. (internal: serviceInstID.octpID)')
connectionOtnDataConnectionNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 60, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOtnDataConnectionNo.setStatus('current')
if mibBuilder.loadTexts: connectionOtnDataConnectionNo.setDescription('Connection Number also called Connection ID. This changes every time there is Make-Before-Break operation. Working and protection connection numbers are different. (internal: lsptID.octpID)')
inventoryCpOtnDownDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 61), )
if mibBuilder.loadTexts: inventoryCpOtnDownDataTable.setStatus('current')
if mibBuilder.loadTexts: inventoryCpOtnDownDataTable.setDescription('')
inventoryCpOtnDownDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 61, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"), (0, "FspR7-MIB", "inventoryCpOtnDownDataNumber"))
if mibBuilder.loadTexts: inventoryCpOtnDownDataEntry.setStatus('current')
if mibBuilder.loadTexts: inventoryCpOtnDownDataEntry.setDescription('')
inventoryCpOtnDownDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 61, 1, 1), EntityIndex())
if mibBuilder.loadTexts: inventoryCpOtnDownDataNumber.setStatus('current')
if mibBuilder.loadTexts: inventoryCpOtnDownDataNumber.setDescription('')
inventoryCpOtnDownDataResources = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 61, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpOtnDownDataResources.setStatus('current')
if mibBuilder.loadTexts: inventoryCpOtnDownDataResources.setDescription('')
inventoryCpOtnDownDataFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 61, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpOtnDownDataFacilities.setStatus('current')
if mibBuilder.loadTexts: inventoryCpOtnDownDataFacilities.setDescription('')
inventoryCpOtnDownDataPhysicalTermPoints = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 61, 1, 4), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpOtnDownDataPhysicalTermPoints.setStatus('current')
if mibBuilder.loadTexts: inventoryCpOtnDownDataPhysicalTermPoints.setDescription('')
inventoryCpOtnUpDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 62), )
if mibBuilder.loadTexts: inventoryCpOtnUpDataTable.setStatus('current')
if mibBuilder.loadTexts: inventoryCpOtnUpDataTable.setDescription('')
inventoryCpOtnUpDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 62, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"), (0, "FspR7-MIB", "inventoryCpOtnUpDataNumber"))
if mibBuilder.loadTexts: inventoryCpOtnUpDataEntry.setStatus('current')
if mibBuilder.loadTexts: inventoryCpOtnUpDataEntry.setDescription('')
inventoryCpOtnUpDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 62, 1, 1), EntityIndex())
if mibBuilder.loadTexts: inventoryCpOtnUpDataNumber.setStatus('current')
if mibBuilder.loadTexts: inventoryCpOtnUpDataNumber.setDescription('')
inventoryCpOtnUpDataResources = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 62, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpOtnUpDataResources.setStatus('current')
if mibBuilder.loadTexts: inventoryCpOtnUpDataResources.setDescription('')
inventoryCpOtnUpDataFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 62, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpOtnUpDataFacilities.setStatus('current')
if mibBuilder.loadTexts: inventoryCpOtnUpDataFacilities.setDescription('')
inventoryCpOtnUpDataPhysicalTermPoints = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 62, 1, 4), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpOtnUpDataPhysicalTermPoints.setStatus('current')
if mibBuilder.loadTexts: inventoryCpOtnUpDataPhysicalTermPoints.setDescription('')
inventoryCpOtnCrsDownDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 63), )
if mibBuilder.loadTexts: inventoryCpOtnCrsDownDataTable.setStatus('current')
if mibBuilder.loadTexts: inventoryCpOtnCrsDownDataTable.setDescription('')
inventoryCpOtnCrsDownDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 63, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"), (0, "FspR7-MIB", "inventoryCpOtnCrsDownDataNumber"), (0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: inventoryCpOtnCrsDownDataEntry.setStatus('current')
if mibBuilder.loadTexts: inventoryCpOtnCrsDownDataEntry.setDescription('')
inventoryCpOtnCrsDownDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 63, 1, 1), EntityIndex())
if mibBuilder.loadTexts: inventoryCpOtnCrsDownDataNumber.setStatus('current')
if mibBuilder.loadTexts: inventoryCpOtnCrsDownDataNumber.setDescription('')
inventoryCpOtnCrsDownDataAids = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 63, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpOtnCrsDownDataAids.setStatus('current')
if mibBuilder.loadTexts: inventoryCpOtnCrsDownDataAids.setDescription('')
inventoryCpOtnCrsUpDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 64), )
if mibBuilder.loadTexts: inventoryCpOtnCrsUpDataTable.setStatus('current')
if mibBuilder.loadTexts: inventoryCpOtnCrsUpDataTable.setDescription('')
inventoryCpOtnCrsUpDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 64, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"), (0, "FspR7-MIB", "inventoryCpOtnCrsUpDataNumber"), (0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: inventoryCpOtnCrsUpDataEntry.setStatus('current')
if mibBuilder.loadTexts: inventoryCpOtnCrsUpDataEntry.setDescription('')
inventoryCpOtnCrsUpDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 64, 1, 1), EntityIndex())
if mibBuilder.loadTexts: inventoryCpOtnCrsUpDataNumber.setStatus('current')
if mibBuilder.loadTexts: inventoryCpOtnCrsUpDataNumber.setDescription('')
inventoryCpOtnCrsUpDataAids = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 64, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inventoryCpOtnCrsUpDataAids.setStatus('current')
if mibBuilder.loadTexts: inventoryCpOtnCrsUpDataAids.setDescription('')
pathOtnDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 65), )
if mibBuilder.loadTexts: pathOtnDataTable.setStatus('current')
if mibBuilder.loadTexts: pathOtnDataTable.setDescription('')
pathOtnDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 65, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: pathOtnDataEntry.setStatus('current')
if mibBuilder.loadTexts: pathOtnDataEntry.setDescription('')
pathOtnDataPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 65, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathOtnDataPathId.setStatus('current')
if mibBuilder.loadTexts: pathOtnDataPathId.setDescription('')
pathOtnDataPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 65, 1, 2), FspR7CpPathType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathOtnDataPathType.setStatus('current')
if mibBuilder.loadTexts: pathOtnDataPathType.setDescription('')
pathOtnDataConnectionTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 65, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathOtnDataConnectionTunnelAid.setStatus('current')
if mibBuilder.loadTexts: pathOtnDataConnectionTunnelAid.setDescription('')
pathOtnDataRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 65, 1, 4), FspR7CpRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathOtnDataRole.setStatus('current')
if mibBuilder.loadTexts: pathOtnDataRole.setDescription('')
pathElementOtnDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66), )
if mibBuilder.loadTexts: pathElementOtnDataTable.setStatus('current')
if mibBuilder.loadTexts: pathElementOtnDataTable.setDescription('')
pathElementOtnDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: pathElementOtnDataEntry.setStatus('current')
if mibBuilder.loadTexts: pathElementOtnDataEntry.setDescription('')
pathElementOtnDataPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementOtnDataPathId.setStatus('current')
if mibBuilder.loadTexts: pathElementOtnDataPathId.setDescription('')
pathElementOtnDataSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementOtnDataSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: pathElementOtnDataSequenceNumber.setDescription('')
pathElementOtnDataPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 3), FspR7CpPathType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementOtnDataPathType.setStatus('current')
if mibBuilder.loadTexts: pathElementOtnDataPathType.setDescription('')
pathElementOtnDataTrafficEngineeringType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 4), FspR7CpTEType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementOtnDataTrafficEngineeringType.setStatus('current')
if mibBuilder.loadTexts: pathElementOtnDataTrafficEngineeringType.setDescription('')
pathElementOtnDataLifIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementOtnDataLifIp.setStatus('current')
if mibBuilder.loadTexts: pathElementOtnDataLifIp.setDescription('')
pathElementOtnDataNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementOtnDataNodeIp.setStatus('current')
if mibBuilder.loadTexts: pathElementOtnDataNodeIp.setDescription('')
pathElementOtnDataNodeIpMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementOtnDataNodeIpMonitor.setStatus('current')
if mibBuilder.loadTexts: pathElementOtnDataNodeIpMonitor.setDescription('')
pathElementOtnDataTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementOtnDataTid.setStatus('current')
if mibBuilder.loadTexts: pathElementOtnDataTid.setDescription('')
pathElementOtnDataTidMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementOtnDataTidMonitor.setStatus('current')
if mibBuilder.loadTexts: pathElementOtnDataTidMonitor.setDescription('')
pathElementOtnDataLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementOtnDataLogicalInterfaceId.setStatus('current')
if mibBuilder.loadTexts: pathElementOtnDataLogicalInterfaceId.setDescription('')
pathElementOtnDataTie = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 11), FspR7CpTie()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathElementOtnDataTie.setStatus('current')
if mibBuilder.loadTexts: pathElementOtnDataTie.setDescription('')
pathElementOtnDataUpTributaryODTUType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 12), FspR7OdtuType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathElementOtnDataUpTributaryODTUType.setStatus('current')
if mibBuilder.loadTexts: pathElementOtnDataUpTributaryODTUType.setDescription('')
pathElementOtnDataDownTributaryODTUType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 13), FspR7OdtuType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathElementOtnDataDownTributaryODTUType.setStatus('current')
if mibBuilder.loadTexts: pathElementOtnDataDownTributaryODTUType.setDescription('')
pathElementOtnDataUpTributaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 14), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathElementOtnDataUpTributaryPort.setStatus('current')
if mibBuilder.loadTexts: pathElementOtnDataUpTributaryPort.setDescription('')
pathElementOtnDataDownTributaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 15), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathElementOtnDataDownTributaryPort.setStatus('current')
if mibBuilder.loadTexts: pathElementOtnDataDownTributaryPort.setDescription('')
pathElementOtnDataUpTributarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 16), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathElementOtnDataUpTributarySlot.setStatus('current')
if mibBuilder.loadTexts: pathElementOtnDataUpTributarySlot.setDescription('')
pathElementOtnDataDownTributarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 17), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathElementOtnDataDownTributarySlot.setStatus('current')
if mibBuilder.loadTexts: pathElementOtnDataDownTributarySlot.setDescription('')
pathElementOtnDataUpTributaryTSMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 18), FspR7ManualAuto()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathElementOtnDataUpTributaryTSMethod.setStatus('current')
if mibBuilder.loadTexts: pathElementOtnDataUpTributaryTSMethod.setDescription('')
pathElementOtnDataDownTributaryTSMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 66, 1, 19), FspR7ManualAuto()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathElementOtnDataDownTributaryTSMethod.setStatus('current')
if mibBuilder.loadTexts: pathElementOtnDataDownTributaryTSMethod.setDescription('')
teUnnumLinkOtnDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 67), )
if mibBuilder.loadTexts: teUnnumLinkOtnDataTable.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkOtnDataTable.setDescription('')
teUnnumLinkOtnDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 67, 1), ).setIndexNames((0, "FspR7-MIB", "teRouterDataIp"), (0, "FspR7-MIB", "teUnnumLinkOtnDataNumber"))
if mibBuilder.loadTexts: teUnnumLinkOtnDataEntry.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkOtnDataEntry.setDescription('')
teUnnumLinkOtnDataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 67, 1, 1), Unsigned32())
if mibBuilder.loadTexts: teUnnumLinkOtnDataNumber.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkOtnDataNumber.setDescription('')
teUnnumLinkOtnDataNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 67, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkOtnDataNodeIp.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkOtnDataNodeIp.setDescription('')
teUnnumLinkOtnDataNodeTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 67, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkOtnDataNodeTid.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkOtnDataNodeTid.setDescription('')
teUnnumLinkOtnDataTeLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 67, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkOtnDataTeLinkId.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkOtnDataTeLinkId.setDescription('')
teUnnumLinkOtnDataPhysicalLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 67, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkOtnDataPhysicalLink.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkOtnDataPhysicalLink.setDescription('')
teUnnumLinkOtnDataSynchronization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 67, 1, 6), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkOtnDataSynchronization.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkOtnDataSynchronization.setDescription('')
teUnnumLinkOtnDataDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 67, 1, 7), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkOtnDataDiscarded.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkOtnDataDiscarded.setDescription('')
teUnnumLinkOtnDataFendNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 67, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkOtnDataFendNodeIp.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkOtnDataFendNodeIp.setDescription('')
teUnnumLinkOtnDataFendTeLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 67, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkOtnDataFendTeLinkId.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkOtnDataFendTeLinkId.setDescription('')
teUnnumLinkOtnDataInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 67, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teUnnumLinkOtnDataInfo.setStatus('current')
if mibBuilder.loadTexts: teUnnumLinkOtnDataInfo.setDescription('')
teNumLinkOtnDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 68), )
if mibBuilder.loadTexts: teNumLinkOtnDataTable.setStatus('current')
if mibBuilder.loadTexts: teNumLinkOtnDataTable.setDescription('')
teNumLinkOtnDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 68, 1), ).setIndexNames((0, "FspR7-MIB", "teRouterDataIp"))
if mibBuilder.loadTexts: teNumLinkOtnDataEntry.setStatus('current')
if mibBuilder.loadTexts: teNumLinkOtnDataEntry.setDescription('')
teNumLinkOtnDataNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 68, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkOtnDataNodeIp.setStatus('current')
if mibBuilder.loadTexts: teNumLinkOtnDataNodeIp.setDescription('')
teNumLinkOtnDataNodeTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 68, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkOtnDataNodeTid.setStatus('current')
if mibBuilder.loadTexts: teNumLinkOtnDataNodeTid.setDescription('')
teNumLinkOtnDataTeLinkIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 68, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkOtnDataTeLinkIp.setStatus('current')
if mibBuilder.loadTexts: teNumLinkOtnDataTeLinkIp.setDescription('')
teNumLinkOtnDataPhysicalLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 68, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkOtnDataPhysicalLink.setStatus('current')
if mibBuilder.loadTexts: teNumLinkOtnDataPhysicalLink.setDescription('')
teNumLinkOtnDataSynchronization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 68, 1, 5), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkOtnDataSynchronization.setStatus('current')
if mibBuilder.loadTexts: teNumLinkOtnDataSynchronization.setDescription('')
teNumLinkOtnDataDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 68, 1, 6), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkOtnDataDiscarded.setStatus('current')
if mibBuilder.loadTexts: teNumLinkOtnDataDiscarded.setDescription('')
teNumLinkOtnDataFendNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 68, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkOtnDataFendNodeIp.setStatus('current')
if mibBuilder.loadTexts: teNumLinkOtnDataFendNodeIp.setDescription('')
teNumLinkOtnDataFendTeLinkIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 68, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkOtnDataFendTeLinkIp.setStatus('current')
if mibBuilder.loadTexts: teNumLinkOtnDataFendTeLinkIp.setDescription('')
teNumLinkOtnDataInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 4, 7, 68, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teNumLinkOtnDataInfo.setStatus('current')
if mibBuilder.loadTexts: teNumLinkOtnDataInfo.setDescription('')
deployProvShelfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 1), )
if mibBuilder.loadTexts: deployProvShelfTable.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfTable.setDescription('Contains entries for provisioning of shelfs.')
deployProvShelfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvShelfEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfEntry.setDescription('All shelves which are provisioned(or during deployProv)\n         will have an entry in this table.')
deployProvShelfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvShelfRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfRowStatus.setDescription("This object is used to create, or delete a row in this table.\n         To start process of creating a new shelf, this object is initially\n         set to 'createAndWait'. After this action the state of this object\n         becomes 'notReady'. This object stays in this state until all required\n         objects are not set. Objects which must be set are indicated by special\n         objects with capabilities(provisioningShelfTypeCap -> provisioningShelfType,\n         provisioningShelfAdminCap -> provisioningShelfAdmin). If specjal object\n         exist, the indicated object have to be set by one of values specified in\n         special object. If all required objects are set, state of this object\n         becomes 'notInService'. To create a new shelf, this object have to be set\n         to 'active'.")
deployProvShelfForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 1, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvShelfForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfForceDestroy.setDescription('Forced Destroy')
deployProvShelfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 1, 1, 3), FspR7EquipmentType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvShelfType.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfType.setDescription('The type of Shelf determines uniquely the number and allowed types of\n         the provisionable dependent entities (modules).')
deployProvShelfAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 1, 1, 4), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvShelfAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full name values;\n         it will be displayed differently in TL1 syntax according to TL1 display rules.\n         The transaction into the UAS state requires a special destroy/delete function.')
deployProvShelfSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 1, 1, 5), FspR7SupplyType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvShelfSupply.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfSupply.setDescription('The kind of power supply - provisioned value')
deployProvShelfBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 1, 1, 6), FspR7OpticalBand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvShelfBand.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfBand.setDescription('The optical band of the passive shelf.')
deployProvShelfPsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 1, 1, 7), FspR7PsuOutputPower()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvShelfPsuOutputPower.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfPsuOutputPower.setDescription('Maximum PSU Output Power')
deployProvShelfCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 2), )
if mibBuilder.loadTexts: deployProvShelfCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfCapTable.setDescription('Contains entries for provisioning of shelfs.')
deployProvShelfCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 2, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvShelfCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfCapEntry.setDescription('All shelves which are provisioned(or during deployProv)\n         will have an entry in this table.')
deployProvShelfCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 2, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfCapRowStatus.setDescription("This object is used to create, or delete a row in this table.\n         To start process of creating a new shelf, this object is initially\n         set to 'createAndWait'. After this action the state of this object\n         becomes 'notReady'. This object stays in this state until all required\n         objects are not set. Objects which must be set are indicated by special\n         objects with capabilities(provisioningShelfTypeCap -> provisioningShelfType,\n         provisioningShelfAdminCap -> provisioningShelfAdmin). If specjal object\n         exist, the indicated object have to be set by one of values specified in\n         special object. If all required objects are set, state of this object\n         becomes 'notInService'. To create a new shelf, this object have to be set\n         to 'active'.")
deployProvShelfCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 2, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfCapForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfCapForceDestroy.setDescription('Forced Destroy')
deployProvShelfCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 2, 1, 3), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfCapType.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfCapType.setDescription('The type of Shelf determines uniquely the number and allowed types of\n         the provisionable dependent entities (modules).')
deployProvShelfCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 2, 1, 4), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfCapAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfCapAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full name values;\n         it will be displayed differently in TL1 syntax according to TL1 display rules.\n         The transaction into the UAS state requires a special destroy/delete function.')
deployProvShelfCapSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 2, 1, 5), FspR7SupplyTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfCapSupply.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfCapSupply.setDescription('The kind of power supply - provisioned value')
deployProvShelfCapBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 2, 1, 6), FspR7OpticalBandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfCapBand.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfCapBand.setDescription('The optical band of the passive shelf.')
deployProvShelfCapPsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 2, 1, 7), FspR7PsuOutputPowerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfCapPsuOutputPower.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfCapPsuOutputPower.setDescription('Maximum PSU Output Power')
deployProvShelfDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 3), )
if mibBuilder.loadTexts: deployProvShelfDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfDefaultsTable.setDescription('Contains entries for provisioning of shelfs.')
deployProvShelfDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 3, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvShelfDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfDefaultsEntry.setDescription('All shelves which are provisioned(or during deployProv)\n         will have an entry in this table.')
deployProvShelfDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 3, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfDefaultsRowStatus.setDescription("This object is used to create, or delete a row in this table.\n         To start process of creating a new shelf, this object is initially\n         set to 'createAndWait'. After this action the state of this object\n         becomes 'notReady'. This object stays in this state until all required\n         objects are not set. Objects which must be set are indicated by special\n         objects with capabilities(provisioningShelfTypeCap -> provisioningShelfType,\n         provisioningShelfAdminCap -> provisioningShelfAdmin). If specjal object\n         exist, the indicated object have to be set by one of values specified in\n         special object. If all required objects are set, state of this object\n         becomes 'notInService'. To create a new shelf, this object have to be set\n         to 'active'.")
deployProvShelfDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 3, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfDefaultsForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfDefaultsForceDestroy.setDescription('Forced Destroy')
deployProvShelfDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 3, 1, 3), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfDefaultsType.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfDefaultsType.setDescription('The type of Shelf determines uniquely the number and allowed types of\n         the provisionable dependent entities (modules).')
deployProvShelfDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 3, 1, 4), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfDefaultsAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfDefaultsAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full name values;\n         it will be displayed differently in TL1 syntax according to TL1 display rules.\n         The transaction into the UAS state requires a special destroy/delete function.')
deployProvShelfDefaultsSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 3, 1, 5), FspR7SupplyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfDefaultsSupply.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfDefaultsSupply.setDescription('The kind of power supply - provisioned value')
deployProvShelfDefaultsBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 3, 1, 6), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfDefaultsBand.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfDefaultsBand.setDescription('The optical band of the passive shelf.')
deployProvShelfDefaultsPsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 1, 3, 1, 7), FspR7PsuOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvShelfDefaultsPsuOutputPower.setStatus('current')
if mibBuilder.loadTexts: deployProvShelfDefaultsPsuOutputPower.setDescription('Maximum PSU Output Power')
deployProvModuleTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1), )
if mibBuilder.loadTexts: deployProvModuleTable.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleTable.setDescription('Contains entries for provisioning of modules.')
deployProvModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvModuleEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleEntry.setDescription('All modules which are provisioned(or are during deployProv) will have an entry in this table.')
deployProvModuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleRowStatus.setDescription('RowStatus')
deployProvModuleForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleForceDestroy.setDescription('Forced Destroy')
deployProvModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 3), FspR7EquipmentType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleType.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleType.setDescription('The TYPE of Module.')
deployProvModuleMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 4), FspR7TransmissionMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleMode.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleMode.setDescription('The transmission mode of the module.')
deployProvModuleDeploy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 5), FspR7DeploymentScenario()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleDeploy.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDeploy.setDescription('The deployment scenario of the module.')
deployProvModuleChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 6), FspR7ChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleChannel.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleChannel.setDescription('The optical channel.')
deployProvModuleReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 7), FspR7OpticalInterfaceReach()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleReach.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleReach.setDescription('The optical channel.')
deployProvModuleBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 8), FspR7OpticalBand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleBand.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleBand.setDescription('The The optical band of the module.')
deployProvModuleSubBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 9), FspR7OpticalSubBand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleSubBand.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleSubBand.setDescription('The subband of 16 DWDM channels.')
deployProvModuleGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 10), FspR7OpticalGroup()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleGroup.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleGroup.setDescription('The Group of 4 DWDM channels.')
deployProvModuleFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 11), FspR7OpticalFiberType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleFiber.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleFiber.setDescription('Fiber type.')
deployProvModuleEdfaPwrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 12), FspR7EdfaOutputPowerRating()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleEdfaPwrOut.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleEdfaPwrOut.setDescription('Optical Output Power Rating - Provision')
deployProvModuleAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 13), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleAdmin.setDescription('The Adminstrative State.')
deployProvModuleSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 14), FspR7SupplyType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleSupply.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleSupply.setDescription('The kind of power supply - provisioned value')
deployProvModuleDispersionCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 15), FspR7DispersionCompensation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleDispersionCompensation.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDispersionCompensation.setDescription('Dispersion Compensation Value in km of SSMF fiber')
deployProvModuleLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 16), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleLanAid.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleLanAid.setDescription('AID of LAN')
deployProvModuleSingleFiberLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 17), FspR7SingleFiberLocation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleSingleFiberLocation.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleSingleFiberLocation.setDescription('determines the location (A or B) for Single Fiber applications')
deployProvModulePsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 18), FspR7PsuOutputPower()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModulePsuOutputPower.setStatus('current')
if mibBuilder.loadTexts: deployProvModulePsuOutputPower.setDescription('Maximum PSU Output Power')
deployProvModuleTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50, 0), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleTilt.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleTilt.setDescription('Change of optical channel power in dB over the complete transmission band')
deployProvModuleGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 20), FspR7Gain()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleGain.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleGain.setDescription('Gain.')
deployProvModuleCapabilityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 21), FspR7CapInventory()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleCapabilityLevel.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapabilityLevel.setDescription('Capability level provisioned')
deployProvModuleRoadmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 22), FspR7RoadmNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleRoadmNumber.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleRoadmNumber.setDescription('Number for ROADM module typically associated with a Network Fiber or Degree')
deployProvModuleScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 23), FspR7Scrambling()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleScrambling.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleScrambling.setDescription('Virtual Fac. Scrambling')
deployProvModuleChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 24), FspR7ChannelSpacing()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleChannelSpacing.setDescription('ITU Grid channel spacing')
deployProvModuleLagSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 25), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleLagSysPrio.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleLagSysPrio.setDescription('LAG Actor Sys Pri. Part of LAG ID')
deployProvModuleGainRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 26), FspR7GainRange()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleGainRange.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleGainRange.setDescription('EDFA gain range to provision')
deployProvModuleEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 27), FspR7EqlzAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleEqlzAdmin.setDescription('Scheduled Equalization Administration')
deployProvModuleChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 28), FspR7NumberOfChannels()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleChannelsNumber.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleChannelsNumber.setDescription('Number of channels supported by an entity')
deployProvModuleDCFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 29), FspR7DCFiberType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleDCFiberType.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDCFiberType.setDescription('Dispersion Compensation Fibertype')
deployProvModuleMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 30), FspR7Mapping()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleMapping.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleMapping.setDescription('Type of mapping; transparent or framing')
deployProvModuleCac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 31), FspR7L2CacEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleCac.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCac.setDescription('Enable of CAC')
deployProvModuleChannelSpacingProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 32), FspR7ChannelSpacing()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleChannelSpacingProvision.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleChannelSpacingProvision.setDescription('Channel Space Provision, reference to CHA-SPC__INVENTORY')
deployProvModuleChannelsProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 1, 1, 33), FspR7NumberOfChannels()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvModuleChannelsProvision.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleChannelsProvision.setDescription('Number of channels supported by an entity')
deployProvModuleCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2), )
if mibBuilder.loadTexts: deployProvModuleCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapTable.setDescription('Contains entries for provisioning of modules.')
deployProvModuleCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvModuleCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapEntry.setDescription('All modules which are provisioned(or are during deployProv) will have an entry in this table.')
deployProvModuleCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapRowStatus.setDescription('RowStatus')
deployProvModuleCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapForceDestroy.setDescription('Forced Destroy')
deployProvModuleCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 3), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapType.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapType.setDescription('The TYPE of Module.')
deployProvModuleCapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 4), FspR7TransmissionModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapMode.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapMode.setDescription('The transmission mode of the module.')
deployProvModuleCapDeploy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 5), FspR7DeploymentScenarioCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapDeploy.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapDeploy.setDescription('The deployment scenario of the module.')
deployProvModuleCapChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 6), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapChannel.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapChannel.setDescription('The optical channel.')
deployProvModuleCapReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 7), FspR7OpticalInterfaceReachCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapReach.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapReach.setDescription('The optical channel.')
deployProvModuleCapBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 8), FspR7OpticalBandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapBand.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapBand.setDescription('The The optical band of the module.')
deployProvModuleCapSubBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 9), FspR7OpticalSubBandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapSubBand.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapSubBand.setDescription('The subband of 16 DWDM channels.')
deployProvModuleCapGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 10), FspR7OpticalGroupCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapGroup.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapGroup.setDescription('The Group of 4 DWDM channels.')
deployProvModuleCapFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 11), FspR7OpticalFiberTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapFiber.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapFiber.setDescription('Fiber type.')
deployProvModuleCapEdfaPwrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 12), FspR7EdfaOutputPowerRatingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapEdfaPwrOut.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapEdfaPwrOut.setDescription('Optical Output Power Rating - Provision')
deployProvModuleCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 13), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapAdmin.setDescription('The Adminstrative State.')
deployProvModuleCapSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 14), FspR7SupplyTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapSupply.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapSupply.setDescription('The kind of power supply - provisioned value')
deployProvModuleCapDispersionCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 15), FspR7DispersionCompensationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapDispersionCompensation.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapDispersionCompensation.setDescription('Dispersion Compensation Value in km of SSMF fiber')
deployProvModuleCapLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapLanAid.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapLanAid.setDescription('AID of LAN')
deployProvModuleCapSingleFiberLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 17), FspR7SingleFiberLocationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapSingleFiberLocation.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapSingleFiberLocation.setDescription('determines the location (A or B) for Single Fiber applications')
deployProvModuleCapPsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 18), FspR7PsuOutputPowerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapPsuOutputPower.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapPsuOutputPower.setDescription('Maximum PSU Output Power')
deployProvModuleCapTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 19), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapTilt.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapTilt.setDescription('Change of optical channel power in dB over the complete transmission band')
deployProvModuleCapGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 20), FspR7GainCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapGain.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapGain.setDescription('Gain.')
deployProvModuleCapCapabilityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 21), FspR7CapInventoryCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapCapabilityLevel.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapCapabilityLevel.setDescription('Capability level provisioned')
deployProvModuleCapRoadmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 22), FspR7RoadmNumberCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapRoadmNumber.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapRoadmNumber.setDescription('Number for ROADM module typically associated with a Network Fiber or Degree')
deployProvModuleCapScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 23), FspR7ScramblingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapScrambling.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapScrambling.setDescription('Virtual Fac. Scrambling')
deployProvModuleCapChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 24), FspR7ChannelSpacingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapChannelSpacing.setDescription('ITU Grid channel spacing')
deployProvModuleCapLagSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 25), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapLagSysPrio.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapLagSysPrio.setDescription('LAG Actor Sys Pri. Part of LAG ID')
deployProvModuleCapGainRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 26), FspR7GainRangeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapGainRange.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapGainRange.setDescription('EDFA gain range to provision')
deployProvModuleCapEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 27), FspR7EqlzAdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapEqlzAdmin.setDescription('Scheduled Equalization Administration')
deployProvModuleCapChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 28), FspR7NumberOfChannelsCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapChannelsNumber.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapChannelsNumber.setDescription('Number of channels supported by an entity')
deployProvModuleCapDCFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 29), FspR7DCFiberTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapDCFiberType.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapDCFiberType.setDescription('Dispersion Compensation Fibertype')
deployProvModuleCapMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 30), FspR7MappingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapMapping.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapMapping.setDescription('Type of mapping; transparent or framing')
deployProvModuleCapCac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 31), FspR7L2CacEnableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapCac.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapCac.setDescription('Enable of CAC')
deployProvModuleCapChannelSpacingProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 32), FspR7ChannelSpacingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapChannelSpacingProvision.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapChannelSpacingProvision.setDescription('Channel Space Provision, reference to CHA-SPC__INVENTORY')
deployProvModuleCapChannelsProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 2, 1, 33), FspR7NumberOfChannelsCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleCapChannelsProvision.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleCapChannelsProvision.setDescription('Number of channels supported by an entity')
deployProvModuleDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3), )
if mibBuilder.loadTexts: deployProvModuleDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsTable.setDescription('Contains entries for provisioning of modules.')
deployProvModuleDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvModuleDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsEntry.setDescription('All modules which are provisioned(or are during deployProv) will have an entry in this table.')
deployProvModuleDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsRowStatus.setDescription('RowStatus')
deployProvModuleDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsForceDestroy.setDescription('Forced Destroy')
deployProvModuleDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 3), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsType.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsType.setDescription('The TYPE of Module.')
deployProvModuleDefaultsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 4), FspR7TransmissionMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsMode.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsMode.setDescription('The transmission mode of the module.')
deployProvModuleDefaultsDeploy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 5), FspR7DeploymentScenario()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsDeploy.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsDeploy.setDescription('The deployment scenario of the module.')
deployProvModuleDefaultsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 6), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsChannel.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsChannel.setDescription('The optical channel.')
deployProvModuleDefaultsReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 7), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsReach.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsReach.setDescription('The optical channel.')
deployProvModuleDefaultsBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 8), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsBand.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsBand.setDescription('The The optical band of the module.')
deployProvModuleDefaultsSubBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 9), FspR7OpticalSubBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsSubBand.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsSubBand.setDescription('The subband of 16 DWDM channels.')
deployProvModuleDefaultsGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 10), FspR7OpticalGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsGroup.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsGroup.setDescription('The Group of 4 DWDM channels.')
deployProvModuleDefaultsFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 11), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsFiber.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsFiber.setDescription('Fiber type.')
deployProvModuleDefaultsEdfaPwrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 12), FspR7EdfaOutputPowerRating()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsEdfaPwrOut.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsEdfaPwrOut.setDescription('Optical Output Power Rating - Provision')
deployProvModuleDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 13), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsAdmin.setDescription('The Adminstrative State.')
deployProvModuleDefaultsSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 14), FspR7SupplyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsSupply.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsSupply.setDescription('The kind of power supply - provisioned value')
deployProvModuleDefaultsDispersionCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 15), FspR7DispersionCompensation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsDispersionCompensation.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsDispersionCompensation.setDescription('Dispersion Compensation Value in km of SSMF fiber')
deployProvModuleDefaultsLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 16), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsLanAid.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsLanAid.setDescription('AID of LAN')
deployProvModuleDefaultsSingleFiberLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 17), FspR7SingleFiberLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsSingleFiberLocation.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsSingleFiberLocation.setDescription('determines the location (A or B) for Single Fiber applications')
deployProvModuleDefaultsPsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 18), FspR7PsuOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsPsuOutputPower.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsPsuOutputPower.setDescription('Maximum PSU Output Power')
deployProvModuleDefaultsTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50, 0), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsTilt.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsTilt.setDescription('Change of optical channel power in dB over the complete transmission band')
deployProvModuleDefaultsGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 20), FspR7Gain()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsGain.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsGain.setDescription('Gain.')
deployProvModuleDefaultsCapabilityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 21), FspR7CapInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsCapabilityLevel.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsCapabilityLevel.setDescription('Capability level provisioned')
deployProvModuleDefaultsRoadmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 22), FspR7RoadmNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsRoadmNumber.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsRoadmNumber.setDescription('Number for ROADM module typically associated with a Network Fiber or Degree')
deployProvModuleDefaultsScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 23), FspR7Scrambling()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsScrambling.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsScrambling.setDescription('Virtual Fac. Scrambling')
deployProvModuleDefaultsChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 24), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsChannelSpacing.setDescription('ITU Grid channel spacing')
deployProvModuleDefaultsLagSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 25), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsLagSysPrio.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsLagSysPrio.setDescription('LAG Actor Sys Pri. Part of LAG ID')
deployProvModuleDefaultsGainRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 26), FspR7GainRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsGainRange.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsGainRange.setDescription('EDFA gain range to provision')
deployProvModuleDefaultsEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 27), FspR7EqlzAdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsEqlzAdmin.setDescription('Scheduled Equalization Administration')
deployProvModuleDefaultsChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 28), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsChannelsNumber.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsChannelsNumber.setDescription('Number of channels supported by an entity')
deployProvModuleDefaultsDCFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 29), FspR7DCFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsDCFiberType.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsDCFiberType.setDescription('Dispersion Compensation Fibertype')
deployProvModuleDefaultsMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 30), FspR7Mapping()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsMapping.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsMapping.setDescription('Type of mapping; transparent or framing')
deployProvModuleDefaultsCac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 31), FspR7L2CacEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsCac.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsCac.setDescription('Enable of CAC')
deployProvModuleDefaultsChannelSpacingProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 32), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsChannelSpacingProvision.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsChannelSpacingProvision.setDescription('Channel Space Provision, reference to CHA-SPC__INVENTORY')
deployProvModuleDefaultsChannelsProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 2, 3, 1, 33), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleDefaultsChannelsProvision.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleDefaultsChannelsProvision.setDescription('Number of channels supported by an entity')
deployProvPlugTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 1), )
if mibBuilder.loadTexts: deployProvPlugTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugTable.setDescription('Contains entries for provisioning of plugs.')
deployProvPlugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvPlugEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugEntry.setDescription('All plugs which are provisioned(or during deployProv) will have an entry in this table.')
deployProvPlugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPlugRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugRowStatus.setDescription('RowStatus')
deployProvPlugForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 1, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPlugForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugForceDestroy.setDescription('Forced Destroy')
deployProvPlugType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 1, 1, 3), FspR7EquipmentType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPlugType.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugType.setDescription('Allowed Interfacetype may depend additionally on Plug TYPE')
deployProvPlugMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 1, 1, 4), FspR7PlugDataRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPlugMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugMaxDataRate.setDescription('The maximal data rate of the plug.')
deployProvPlugChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 1, 1, 5), FspR7ChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPlugChannelId.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugChannelId.setDescription('The optical channel of the plug.')
deployProvPlugThirdPartyUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 1, 1, 6), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPlugThirdPartyUsage.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugThirdPartyUsage.setDescription('Usage of 3rd Party Plugs')
deployProvPlugReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 1, 1, 7), FspR7OpticalInterfaceReach()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPlugReach.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugReach.setDescription('The optical reach of the plug.')
deployProvPlugAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 1, 1, 8), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPlugAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full name values;\n         it will be differently displayed in TL1 syntax according to TL1 display rules. The transaction\n         into the UAS state requires a special destroy/delete function.')
deployProvPlugLoopbackAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 300), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPlugLoopbackAttenuation.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugLoopbackAttenuation.setDescription('Loop back attenuation of the plug')
deployProvPlugCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 2), )
if mibBuilder.loadTexts: deployProvPlugCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugCapTable.setDescription('Contains entries for provisioning of plugs.')
deployProvPlugCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 2, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvPlugCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugCapEntry.setDescription('All plugs which are provisioned(or during deployProv) will have an entry in this table.')
deployProvPlugCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 2, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugCapRowStatus.setDescription('RowStatus')
deployProvPlugCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 2, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugCapForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugCapForceDestroy.setDescription('Forced Destroy')
deployProvPlugCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 2, 1, 3), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugCapType.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugCapType.setDescription('Allowed Interfacetype may depend additionally on Plug TYPE')
deployProvPlugCapMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 2, 1, 4), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugCapMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugCapMaxDataRate.setDescription('The maximal data rate of the plug.')
deployProvPlugCapChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 2, 1, 5), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugCapChannelId.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugCapChannelId.setDescription('The optical channel of the plug.')
deployProvPlugCapThirdPartyUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 2, 1, 6), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugCapThirdPartyUsage.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugCapThirdPartyUsage.setDescription('Usage of 3rd Party Plugs')
deployProvPlugCapReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 2, 1, 7), FspR7OpticalInterfaceReachCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugCapReach.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugCapReach.setDescription('The optical reach of the plug.')
deployProvPlugCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 2, 1, 8), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugCapAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugCapAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full name values;\n         it will be differently displayed in TL1 syntax according to TL1 display rules. The transaction\n         into the UAS state requires a special destroy/delete function.')
deployProvPlugCapLoopbackAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 2, 1, 9), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugCapLoopbackAttenuation.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugCapLoopbackAttenuation.setDescription('Loop back attenuation of the plug')
deployProvPlugDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 3), )
if mibBuilder.loadTexts: deployProvPlugDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugDefaultsTable.setDescription('Contains entries for provisioning of plugs.')
deployProvPlugDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 3, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvPlugDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugDefaultsEntry.setDescription('All plugs which are provisioned(or during deployProv) will have an entry in this table.')
deployProvPlugDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 3, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugDefaultsRowStatus.setDescription('RowStatus')
deployProvPlugDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 3, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugDefaultsForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugDefaultsForceDestroy.setDescription('Forced Destroy')
deployProvPlugDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 3, 1, 3), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugDefaultsType.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugDefaultsType.setDescription('Allowed Interfacetype may depend additionally on Plug TYPE')
deployProvPlugDefaultsMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 3, 1, 4), FspR7PlugDataRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugDefaultsMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugDefaultsMaxDataRate.setDescription('The maximal data rate of the plug.')
deployProvPlugDefaultsChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 3, 1, 5), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugDefaultsChannelId.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugDefaultsChannelId.setDescription('The optical channel of the plug.')
deployProvPlugDefaultsThirdPartyUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 3, 1, 6), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugDefaultsThirdPartyUsage.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugDefaultsThirdPartyUsage.setDescription('Usage of 3rd Party Plugs')
deployProvPlugDefaultsReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 3, 1, 7), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugDefaultsReach.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugDefaultsReach.setDescription('The optical reach of the plug.')
deployProvPlugDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 3, 1, 8), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugDefaultsAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugDefaultsAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full name values;\n         it will be differently displayed in TL1 syntax according to TL1 display rules. The transaction\n         into the UAS state requires a special destroy/delete function.')
deployProvPlugDefaultsLoopbackAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 3, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 300), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPlugDefaultsLoopbackAttenuation.setStatus('current')
if mibBuilder.loadTexts: deployProvPlugDefaultsLoopbackAttenuation.setDescription('Loop back attenuation of the plug')
deployProvIfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1), )
if mibBuilder.loadTexts: deployProvIfTable.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTable.setDescription('Contains entries for provisioning of interfaces.')
deployProvIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvIfEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvIfEntry.setDescription('All interfaces which are provisioned(or during deployProv)\n         will have an entry in this table.')
deployProvIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvIfRowStatus.setDescription('RowStatus')
deployProvIfForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvIfForceDestroy.setDescription('Forced Destroy')
deployProvIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 3), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfType.setStatus('current')
if mibBuilder.loadTexts: deployProvIfType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer\n         termination OR else as payload')
deployProvIfPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 4), OtnPayloadType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfPayload.setStatus('current')
if mibBuilder.loadTexts: deployProvIfPayload.setDescription('The payload of the interface (inside a transport overhead).\n         Relevant e. g. for OTN cards which wrap a payload into an OTU1/2 wrapper.')
deployProvIfBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 5), FspR7PortBehaviour()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfBehaviour.setStatus('current')
if mibBuilder.loadTexts: deployProvIfBehaviour.setDescription('The configured behaviour of the interface. If configured as\n         a network interface, the interface will use a WDM laser.')
deployProvIfTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 6), OhTerminationLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTerminationLevel.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTerminationLevel.setDescription('Signal Tremination Level of Intrusive Access to Header Information.\n         Not used in 7.0, monitoring is one layer higher than TERM level,\n         if applicable. All conditions detected on monitoring layer will not\n         be reported (severity degradated to NR).')
deployProvIfAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 7), FspR7AlsMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfAlsMode.setStatus('current')
if mibBuilder.loadTexts: deployProvIfAlsMode.setDescription('A configuration request for the Automatic Laser Shutdown (ALS)\n         function. Refer to FspR7AlsMode Textual Convention for details.')
deployProvIfErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 8), FspR7ErrorFwdMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfErrorForwarding.setStatus('current')
if mibBuilder.loadTexts: deployProvIfErrorForwarding.setDescription('A configuration request for the error forwarding\n         function. Refer to FspR7ErrorFwdMode Textual Convention for details.')
deployProvIfLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 9), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfLaserOffDelayFunction.setStatus('current')
if mibBuilder.loadTexts: deployProvIfLaserOffDelayFunction.setDescription('A configuration request for the Laser Off Delay function. This function\n         delays turning off the laser as a consequent action to a defect.')
deployProvIfFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 10), FspR7FecType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfFecType.setStatus('current')
if mibBuilder.loadTexts: deployProvIfFecType.setDescription('Configuration of FEC type.')
deployProvIfTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 11), SonetTimingSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTimingSource.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTimingSource.setDescription('The timing source for this interface.\n         - internal: used in stand-alone, point-to-point topologies stand-alone (dedicated fiber operation).\n         - loopTiming: e.g. used in point-to-point via SONET network and feeder topologies. The default is\n         internal(1).')
deployProvIfTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 12), OtnTcmLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTcmALevel.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTcmALevel.setDescription('Configuration of TCMA level.')
deployProvIfTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 13), OtnTcmLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTcmBLevel.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTcmBLevel.setDescription('Configuration of TCMB level.')
deployProvIfSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 14), FspR7BERThreshold()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegThresSonetLine.setStatus('current')
if mibBuilder.loadTexts: deployProvIfSigDegThresSonetLine.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
deployProvIfSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegThresSdhMs.setStatus('current')
if mibBuilder.loadTexts: deployProvIfSigDegThresSdhMs.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period).\n         Defined as percentage Background Block Errors (30% default) evaluated\n         over a defined period (SDPER-RS).')
deployProvIfSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSignalDegradePeriod.setStatus('current')
if mibBuilder.loadTexts: deployProvIfSignalDegradePeriod.setDescription('The measurement period in seconds used together with\n         the deployProvIfSigDegThresSdhRegSect based on the block error counting method.\n         The valid range is 2..10,\n         The default being 7.')
deployProvIfAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 17), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfAutonegotiation.setStatus('current')
if mibBuilder.loadTexts: deployProvIfAutonegotiation.setDescription('Autonegotiation of the data rate')
deployProvIfBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 18), FspR7Bitrate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfBitrate.setStatus('current')
if mibBuilder.loadTexts: deployProvIfBitrate.setDescription('Provisioned data rate')
deployProvIfDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 19), EthDuplexMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfDuplex.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDuplex.setDescription('Duplex Mode Provision.')
deployProvIfFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 20), FspR7FlowControlMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfFlowControl.setStatus('current')
if mibBuilder.loadTexts: deployProvIfFlowControl.setDescription('Flow Control mechanism')
deployProvIfOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 21), FspR7Stuff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfOtnStuffing.setStatus('current')
if mibBuilder.loadTexts: deployProvIfOtnStuffing.setDescription('Indicates if bit/byte stuffing is used in the transport signal.')
deployProvIfSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegThresOtu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfSigDegThresOtu.setDescription('Background-Block-Error-Based Signal Degradation Definition for OTU')
deployProvIfSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegPeriodOtu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfSigDegPeriodOtu.setDescription('Integration Period for Signal degrade')
deployProvIfSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegThresOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfSigDegThresOdu.setDescription('Background-Block-Error-Based Signal Degradation Definition for ODU')
deployProvIfSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 25), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegPeriodOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfSigDegPeriodOdu.setDescription('Integration Period for Signal degrade')
deployProvIfSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegThresOduTcmA.setStatus('current')
if mibBuilder.loadTexts: deployProvIfSigDegThresOduTcmA.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-A')
deployProvIfSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegPeriodOduTcmA.setStatus('current')
if mibBuilder.loadTexts: deployProvIfSigDegPeriodOduTcmA.setDescription('Integration Period for Signal degrade')
deployProvIfSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegThresOduTcmB.setStatus('current')
if mibBuilder.loadTexts: deployProvIfSigDegThresOduTcmB.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-B')
deployProvIfSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegPeriodOduTcmB.setStatus('current')
if mibBuilder.loadTexts: deployProvIfSigDegPeriodOduTcmB.setDescription('Integration Period of TCMB Signal Segrade')
deployProvIfTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50, 0), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTilt.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTilt.setDescription('Change of optical channel power in dB over the complete transmission band')
deployProvIfGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 31), FspR7Gain()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfGain.setStatus('current')
if mibBuilder.loadTexts: deployProvIfGain.setDescription('Gain.')
deployProvIfAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 32), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvIfAdmin.setDescription('The Adminstrative State.')
deployProvIfAttenuationGradient = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 33), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 30), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB/min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfAttenuationGradient.setStatus('current')
if mibBuilder.loadTexts: deployProvIfAttenuationGradient.setDescription("Attenuation Gradient Threshold on Receive Fiber. Applies to both\n         TRMT and RCV directions; but threshold violation is reported for\n         each direction separately by the 'tapping' alarms: INTRUDE-RCV\n         and INTRUDE-TRMT.")
deployProvIfSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 34), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegThresReceiver.setStatus('current')
if mibBuilder.loadTexts: deployProvIfSigDegThresReceiver.setDescription('Signal Degrade Threshold on Receiver. Reported as ATTRMT-SDHT to far end.')
deployProvIfTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 35), OtnTcmLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTcmCLevel.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTcmCLevel.setDescription('Activation of Tandem Connection Monitoring Instance C')
deployProvIfSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegThresOduTcmC.setStatus('current')
if mibBuilder.loadTexts: deployProvIfSigDegThresOduTcmC.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-C')
deployProvIfSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 37), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegPeriodOduTcmC.setStatus('current')
if mibBuilder.loadTexts: deployProvIfSigDegPeriodOduTcmC.setDescription('Integration Period of TCMC Signal Segrade')
deployProvIfDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 38), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfDisparityCorrection.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDisparityCorrection.setDescription('Disparity correction')
deployProvIfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 39), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfIpAddr.setStatus('current')
if mibBuilder.loadTexts: deployProvIfIpAddr.setDescription('IP Address assigned to LAN IP Interface')
deployProvIfIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 40), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfIpMask.setStatus('current')
if mibBuilder.loadTexts: deployProvIfIpMask.setDescription('IP MASK assigned to LAN IP Interface')
deployProvIfOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 41), FspR7OspfMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfOspf.setStatus('current')
if mibBuilder.loadTexts: deployProvIfOspf.setDescription('OSPF Routing (Dynamic)')
deployProvIfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 42), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfMetric.setStatus('current')
if mibBuilder.loadTexts: deployProvIfMetric.setDescription('Routing Metric')
deployProvIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 43), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfAreaId.setStatus('current')
if mibBuilder.loadTexts: deployProvIfAreaId.setDescription('OSPF Area ID for IP Interface')
deployProvIfTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 44), SonetTraceForm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceFormSonetSection.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTraceFormSonetSection.setDescription('Byte-Length of Trace Compared to Expected')
deployProvIfTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 45), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceExpectedSonetSection.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTraceExpectedSonetSection.setDescription('Expected Sec/RS trace. NULL TRACE implies that no trace comparison is made.')
deployProvIfTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 46), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitSonetSection.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTraceTransmitSonetSection.setDescription('Sec/RS Trace to be Transmitted')
deployProvIfTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 47), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTimModeSonetSection.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTimModeSonetSection.setDescription('Detection of TIM Sonet Section Condition can be configured')
deployProvIfTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 48), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceExpectedOtu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTraceExpectedOtu.setDescription('Expected SAPI part of the OTU trace (15 character).\n         NULL TRACE implies that no trace comparison is made.')
deployProvIfTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 49), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitSapiOtu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTraceTransmitSapiOtu.setDescription('The transmitted SAPI part of the OTU trace (15 character)')
deployProvIfTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 50), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitDapiOtu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTraceTransmitDapiOtu.setDescription('The transmitted DAPI part of the OTU trace (15 character)')
deployProvIfTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 51), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitOpspOtu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTraceTransmitOpspOtu.setDescription('The transmitted Operator Specific part of the OTU trace (32 character)')
deployProvIfTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 52), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTimModeOtu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTimModeOtu.setDescription('Detection of TIM-OTU Condition can be configured')
deployProvIfTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 53), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceExpectedOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTraceExpectedOdu.setDescription('Expected SAPI part of the ODU trace (15 character).\n         NULL TRACE implies that no trace comparison is made.')
deployProvIfTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 54), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitSapiOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTraceTransmitSapiOdu.setDescription('The transmitted SAPI part of the ODU trace (15 character)')
deployProvIfTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitDapiOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTraceTransmitDapiOdu.setDescription('The transmitted DAPI part of the ODU trace (15 character)')
deployProvIfTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 56), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitOpspOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTraceTransmitOpspOdu.setDescription('The transmitted Operator Specific part of the ODU trace (32 character)')
deployProvIfTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 57), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTimModeOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTimModeOdu.setDescription('Detection of TIM-ODU Condition can be configured')
deployProvIfTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 58), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceExpectedOduTcmA.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTraceExpectedOduTcmA.setDescription('Expected SAPI part of the TCMA trace (15 character).\n         NULL TRACE-TCM implies that no trace comparison is made.')
deployProvIfTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 59), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitSapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTraceTransmitSapiOduTcmA.setDescription('The transmitted SAPI part of the TCMA trace (15 character)')
deployProvIfTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 60), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitDapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTraceTransmitDapiOduTcmA.setDescription('The transmitted DAPI part of the TCMA trace (15 character)')
deployProvIfTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitOpspOduTcmA.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTraceTransmitOpspOduTcmA.setDescription('The transmitted Operator Specific part of the TCMA trace (32 character)')
deployProvIfTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 62), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTimModeOduTcmA.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTimModeOduTcmA.setDescription('Detection of TIM-TCMA Condition can be configured')
deployProvIfTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 63), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceExpectedOduTcmB.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTraceExpectedOduTcmB.setDescription('Expected SAPI part of the TCMB trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
deployProvIfTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitSapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTraceTransmitSapiOduTcmB.setDescription('The transmitted SAPI part of the TCMB trace (15 character)')
deployProvIfTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 65), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitDapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTraceTransmitDapiOduTcmB.setDescription('The transmitted DAPI part of the TCMB trace (15 character)')
deployProvIfTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 66), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitOpspOduTcmB.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTraceTransmitOpspOduTcmB.setDescription('The transmitted Operator Specific part of the TCMB trace (32 character)')
deployProvIfTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 67), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTimModeOduTcmB.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTimModeOduTcmB.setDescription('Detection of TIM-TCMB Condition can be configured')
deployProvIfTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 68), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceExpectedOduTcmC.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTraceExpectedOduTcmC.setDescription('Expected SAPI part of the TCMC trace (15 character).\n         NULL TRACE-TCM implies that no trace comparison is made.')
deployProvIfTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 69), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitSapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTraceTransmitSapiOduTcmC.setDescription('The transmitted SAPI part of the TCMC trace (15 character)')
deployProvIfTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 70), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitDapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTraceTransmitDapiOduTcmC.setDescription('The transmitted DAPI part of the TCMC trace (15 character)')
deployProvIfTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 71), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTraceTransmitOpspOduTcmC.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTraceTransmitOpspOduTcmC.setDescription('The transmitted Operator Specific part of the TCMC trace (32 character)')
deployProvIfTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 72), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTimModeOduTcmC.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTimModeOduTcmC.setDescription('Detection of TIM-TCMC Condition can be configured')
deployProvIfChannelProvisioning = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 73), FspR7ChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfChannelProvisioning.setStatus('current')
if mibBuilder.loadTexts: deployProvIfChannelProvisioning.setDescription('Channel')
deployProvIfVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 74), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(50, 350), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfVariableGain.setStatus('current')
if mibBuilder.loadTexts: deployProvIfVariableGain.setDescription('Variable Gain of EDFA')
deployProvIfBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 75), FspR7OpticalBand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfBand.setStatus('current')
if mibBuilder.loadTexts: deployProvIfBand.setDescription('The The optical band of the module.')
deployProvIfSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 76), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10000), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegThreshold.setStatus('current')
if mibBuilder.loadTexts: deployProvIfSigDegThreshold.setDescription('Threshold for number of errors (CV or CV+DE) in one second')
deployProvIfSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 77), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegPeriodIntegration.setStatus('current')
if mibBuilder.loadTexts: deployProvIfSigDegPeriodIntegration.setDescription('Integration Period for Signal degrade')
deployProvIfVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 78), FspR7VoaMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfVoaMode.setStatus('current')
if mibBuilder.loadTexts: deployProvIfVoaMode.setDescription('VOA operating mode')
deployProvIfOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-250, 50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfOpticalSetPoint.setStatus('current')
if mibBuilder.loadTexts: deployProvIfOpticalSetPoint.setDescription('Sets the optical power for power equalization in ROADM or for channel power control in OPCM')
deployProvIfVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 80), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 300), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfVoaSetpoint.setStatus('current')
if mibBuilder.loadTexts: deployProvIfVoaSetpoint.setDescription('Sets the optical attenuation of VOA')
deployProvIfLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 81), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfLanAid.setStatus('current')
if mibBuilder.loadTexts: deployProvIfLanAid.setDescription('AID of LAN')
deployProvIfAprHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 82), Unsigned32()).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfAprHighThreshold.setStatus('current')
if mibBuilder.loadTexts: deployProvIfAprHighThreshold.setDescription('Automatic Power Reduction High Threshold')
deployProvIfPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(115, 138), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.2 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfPumpPower.setStatus('current')
if mibBuilder.loadTexts: deployProvIfPumpPower.setDescription('Total raman pump power')
deployProvIfIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 84), FspR7IpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfIpType.setStatus('current')
if mibBuilder.loadTexts: deployProvIfIpType.setDescription('Type of IP configuration')
deployProvIfWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 85), FspR7ChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfWdmRxChannel.setStatus('current')
if mibBuilder.loadTexts: deployProvIfWdmRxChannel.setDescription('Configuration of Rx optical channel')
deployProvIfSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 86), FspR7BERThresholdSection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegThresSonetSection.setStatus('current')
if mibBuilder.loadTexts: deployProvIfSigDegThresSonetSection.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
deployProvIfSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 87), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegThresSdhSection.setStatus('current')
if mibBuilder.loadTexts: deployProvIfSigDegThresSdhSection.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period).\n         Defined as percentage Background Block Errors (30% default) evaluated\n         over a defined period (SDPER-RS).')
deployProvIfSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 88), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfSigDegPeriodSdhSection.setStatus('current')
if mibBuilder.loadTexts: deployProvIfSigDegPeriodSdhSection.setDescription('Provisionable Signal Degrade Integration Period for SDH')
deployProvIfDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 89), FspR7DispersionModes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfDispersionMode.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDispersionMode.setDescription('Dispersion Compensation Mode')
deployProvIfDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50000, 50000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfDispersionSetting.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDispersionSetting.setDescription('Dispersion setting of dispersion comensating module')
deployProvIfOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 30), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfOffset.setStatus('current')
if mibBuilder.loadTexts: deployProvIfOffset.setDescription('Sets the offset for the mean optical power for power equalization in ROADM')
deployProvIfFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 92), FspR7InterfaceFunction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfFunction.setStatus('current')
if mibBuilder.loadTexts: deployProvIfFunction.setDescription('Interface Function')
deployProvIfPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 93), FspR7PortMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfPortMode.setStatus('current')
if mibBuilder.loadTexts: deployProvIfPortMode.setDescription('Port Mode')
deployProvIfPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 94), FspR7PortRole()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfPortRole.setStatus('current')
if mibBuilder.loadTexts: deployProvIfPortRole.setDescription('ADVA cloud Port Roles')
deployProvIfUtag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 95), FspR7UntaggedFrames()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfUtag.setStatus('current')
if mibBuilder.loadTexts: deployProvIfUtag.setDescription('If untagged frames shall be enabled on this port or not.')
deployProvIfPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 96), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfPvid.setStatus('current')
if mibBuilder.loadTexts: deployProvIfPvid.setDescription('Default VLAN ID (both STAG/CTAG mode) in case UTAG is enabled')
deployProvIfPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 97), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfPriority.setStatus('current')
if mibBuilder.loadTexts: deployProvIfPriority.setDescription('Default PCP in case UTAG is Enabled. The Prio may be remapped in the EVC.')
deployProvIfStagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 98), FspR7SnmpHexString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfStagType.setStatus('current')
if mibBuilder.loadTexts: deployProvIfStagType.setDescription('TAG type field')
deployProvIfCac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 99), FspR7L2CacEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfCac.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCac.setDescription('Enable of CAC')
deployProvIfMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 100), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1518, 9600), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: deployProvIfMaxFrameSize.setDescription('Max Frame Size')
deployProvIfVethAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 101), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfVethAid.setStatus('current')
if mibBuilder.loadTexts: deployProvIfVethAid.setDescription('Shows if PORT is a member in the LAG with the VETH AID')
deployProvIfLagPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 102), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfLagPrio.setStatus('current')
if mibBuilder.loadTexts: deployProvIfLagPrio.setDescription('Part of ID. Port pri that defines standby.')
deployProvIfLagPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 103), FspR7LagPortType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfLagPortType.setStatus('current')
if mibBuilder.loadTexts: deployProvIfLagPortType.setDescription('Type/Speed of connected ports in the LAG')
deployProvIfLagActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 104), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 12), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfLagActivePorts.setStatus('current')
if mibBuilder.loadTexts: deployProvIfLagActivePorts.setDescription('The amount of active ports in the LAG.')
deployProvIfLacpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 105), FspR7LacpMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfLacpMode.setStatus('current')
if mibBuilder.loadTexts: deployProvIfLacpMode.setDescription('Enable of LACP state machine')
deployProvIfLagLoadBallanceSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 106), FspR7LagLoadBallanceSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfLagLoadBallanceSource.setStatus('current')
if mibBuilder.loadTexts: deployProvIfLagLoadBallanceSource.setDescription('What source is used in the load balance calculation')
deployProvIfLacpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 107), FspR7LacpTimeout()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfLacpTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvIfLacpTimeout.setDescription('Timeout of the LACP')
deployProvIfFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 108), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfFarEndCommunication.setStatus('current')
if mibBuilder.loadTexts: deployProvIfFarEndCommunication.setDescription('Used for Optojack plugs; Communication to Far End Plug is observed')
deployProvIfEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 109), FspR7EqlzAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvIfEqlzAdmin.setDescription('Scheduled Equalization Administration')
deployProvIfTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 110), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTxOffDelay.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTxOffDelay.setDescription('Enable or disable TXOFFHOLD Period for Error Forwarding and LKDO-OFF Consequent Action.')
deployProvIfOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 111), FspR7OpuPayloadType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfOpuPayloadType.setStatus('current')
if mibBuilder.loadTexts: deployProvIfOpuPayloadType.setDescription('OPU Payload Type Indicator')
deployProvIfOscOpticalSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-250, 50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfOscOpticalSetpoint.setStatus('current')
if mibBuilder.loadTexts: deployProvIfOscOpticalSetpoint.setDescription('Sets the OSC optical power')
deployProvIfFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 113), FspR7FiberBrand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfFiberBrand.setStatus('current')
if mibBuilder.loadTexts: deployProvIfFiberBrand.setDescription('Brand of fiber present in the fiber plant')
deployProvIfTiltSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 114), FspR7TiltSet()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTiltSet.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTiltSet.setDescription('Tilt setting as discrete values versus a range')
deployProvIfXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 115), FspR7XfpDecisionThres()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfXfpDecisionThres.setStatus('current')
if mibBuilder.loadTexts: deployProvIfXfpDecisionThres.setDescription('XFP Decision threshold setting')
deployProvIfAutoPTassignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 116), FspR7ManualAuto()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfAutoPTassignment.setStatus('current')
if mibBuilder.loadTexts: deployProvIfAutoPTassignment.setDescription('Auto assignment of ODU PT')
deployProvIfTributarySlotMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 117), FspR7ManualAuto()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfTributarySlotMethod.setStatus('current')
if mibBuilder.loadTexts: deployProvIfTributarySlotMethod.setDescription('Tributary Slot assignment method')
deployProvIfOduTribPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 118), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfOduTribPortNo.setStatus('current')
if mibBuilder.loadTexts: deployProvIfOduTribPortNo.setDescription('ODU Tributary Port Number')
deployProvIfOduTribTimeSlottNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 119), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfOduTribTimeSlottNo.setStatus('current')
if mibBuilder.loadTexts: deployProvIfOduTribTimeSlottNo.setDescription('ODU Tributary slot number. Multiple values can be entered as a string, separated by commas or given as a range.\n         For capabilities objects possible number of slots and valid range are displayed in a form:\n         [1,2,3,8][count: 1-1]\n         In first brackets valid slots are shown and in the second possible number of slots.')
deployProvIfRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 120), ApsRevertMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfRevertiveMode.setStatus('current')
if mibBuilder.loadTexts: deployProvIfRevertiveMode.setDescription('Revertive Protection Switching')
deployProvIfBip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 1, 1, 125), FspR7Bip()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvIfBip.setStatus('current')
if mibBuilder.loadTexts: deployProvIfBip.setDescription('Bit Interleaved Parity')
deployProvIfCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2), )
if mibBuilder.loadTexts: deployProvIfCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTable.setDescription('Contains entries for provisioning of interfaces.')
deployProvIfCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvIfCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapEntry.setDescription('All interfaces which are provisioned(or during deployProv)\n         will have an entry in this table.')
deployProvIfCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapRowStatus.setDescription('RowStatus')
deployProvIfCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapForceDestroy.setDescription('Forced Destroy')
deployProvIfCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 3), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapType.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer\n         termination OR else as payload')
deployProvIfCapPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 4), OtnPayloadTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapPayload.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapPayload.setDescription('The payload of the interface (inside a transport overhead).\n         Relevant e. g. for OTN cards which wrap a payload into an OTU1/2 wrapper.')
deployProvIfCapBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 5), FspR7PortBehaviourCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapBehaviour.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapBehaviour.setDescription('The configured behaviour of the interface. If configured as\n         a network interface, the interface will use a WDM laser.')
deployProvIfCapTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 6), OhTerminationLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTerminationLevel.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTerminationLevel.setDescription('Signal Tremination Level of Intrusive Access to Header Information.\n         Not used in 7.0, monitoring is one layer higher than TERM level,\n         if applicable. All conditions detected on monitoring layer will not\n         be reported (severity degradated to NR).')
deployProvIfCapAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 7), FspR7AlsModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapAlsMode.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapAlsMode.setDescription('A configuration request for the Automatic Laser Shutdown (ALS)\n         function. Refer to FspR7AlsMode Textual Convention for details.')
deployProvIfCapErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 8), FspR7ErrorFwdModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapErrorForwarding.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapErrorForwarding.setDescription('A configuration request for the error forwarding\n         function. Refer to FspR7ErrorFwdMode Textual Convention for details.')
deployProvIfCapLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 9), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapLaserOffDelayFunction.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapLaserOffDelayFunction.setDescription('A configuration request for the Laser Off Delay function. This function\n         delays turning off the laser as a consequent action to a defect.')
deployProvIfCapFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 10), FspR7FecTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapFecType.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapFecType.setDescription('Configuration of FEC type.')
deployProvIfCapTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 11), SonetTimingSourceCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTimingSource.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTimingSource.setDescription('The timing source for this interface.\n         - internal: used in stand-alone, point-to-point topologies stand-alone (dedicated fiber operation).\n         - loopTiming: e.g. used in point-to-point via SONET network and feeder topologies. The default is\n         internal(1).')
deployProvIfCapTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 12), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTcmALevel.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTcmALevel.setDescription('Configuration of TCMA level.')
deployProvIfCapTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 13), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTcmBLevel.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTcmBLevel.setDescription('Configuration of TCMB level.')
deployProvIfCapSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 14), FspR7BERThresholdCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegThresSonetLine.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapSigDegThresSonetLine.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
deployProvIfCapSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 15), FspR7Unsigned32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegThresSdhMs.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapSigDegThresSdhMs.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period).\n         Defined as percentage Background Block Errors (30% default) evaluated\n         over a defined period (SDPER-RS).')
deployProvIfCapSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 16), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSignalDegradePeriod.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapSignalDegradePeriod.setDescription('The measurement period in seconds used together with\n         the deployProvIfSigDegThresSdhRegSect based on the block error counting method.\n         The valid range is 2..10,\n         The default being 7.')
deployProvIfCapAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 17), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapAutonegotiation.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapAutonegotiation.setDescription('Autonegotiation of the data rate')
deployProvIfCapBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 18), FspR7BitrateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapBitrate.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapBitrate.setDescription('Provisioned data rate')
deployProvIfCapDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 19), EthDuplexModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapDuplex.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapDuplex.setDescription('Duplex Mode Provision.')
deployProvIfCapFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 20), FspR7FlowControlModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapFlowControl.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapFlowControl.setDescription('Flow Control mechanism')
deployProvIfCapOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 21), FspR7StuffCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapOtnStuffing.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapOtnStuffing.setDescription('Indicates if bit/byte stuffing is used in the transport signal.')
deployProvIfCapSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 22), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegThresOtu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapSigDegThresOtu.setDescription('Background-Block-Error-Based Signal Degradation Definition for OTU')
deployProvIfCapSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 23), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegPeriodOtu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapSigDegPeriodOtu.setDescription('Integration Period for Signal degrade')
deployProvIfCapSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 24), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegThresOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapSigDegThresOdu.setDescription('Background-Block-Error-Based Signal Degradation Definition for ODU')
deployProvIfCapSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 25), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegPeriodOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapSigDegPeriodOdu.setDescription('Integration Period for Signal degrade')
deployProvIfCapSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 26), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegThresOduTcmA.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapSigDegThresOduTcmA.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-A')
deployProvIfCapSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 27), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegPeriodOduTcmA.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapSigDegPeriodOduTcmA.setDescription('Integration Period for Signal degrade')
deployProvIfCapSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 28), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegThresOduTcmB.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapSigDegThresOduTcmB.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-B')
deployProvIfCapSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 29), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegPeriodOduTcmB.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapSigDegPeriodOduTcmB.setDescription('Integration Period of TCMB Signal Segrade')
deployProvIfCapTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 30), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTilt.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTilt.setDescription('Change of optical channel power in dB over the complete transmission band')
deployProvIfCapGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 31), FspR7GainCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapGain.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapGain.setDescription('Gain.')
deployProvIfCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 32), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapAdmin.setDescription('The Adminstrative State.')
deployProvIfCapAttenuationGradient = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 33), FspR7Unsigned32Caps()).setUnits('0.1 dB/min').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapAttenuationGradient.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapAttenuationGradient.setDescription("Attenuation Gradient Threshold on Receive Fiber. Applies to both\n         TRMT and RCV directions; but threshold violation is reported for\n         each direction separately by the 'tapping' alarms: INTRUDE-RCV\n         and INTRUDE-TRMT.")
deployProvIfCapSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 34), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegThresReceiver.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapSigDegThresReceiver.setDescription('Signal Degrade Threshold on Receiver. Reported as ATTRMT-SDHT to far end.')
deployProvIfCapTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 35), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTcmCLevel.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTcmCLevel.setDescription('Activation of Tandem Connection Monitoring Instance C')
deployProvIfCapSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 36), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegThresOduTcmC.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapSigDegThresOduTcmC.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-C')
deployProvIfCapSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 37), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegPeriodOduTcmC.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapSigDegPeriodOduTcmC.setDescription('Integration Period of TCMC Signal Segrade')
deployProvIfCapDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 38), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapDisparityCorrection.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapDisparityCorrection.setDescription('Disparity correction')
deployProvIfCapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 39), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapIpAddr.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapIpAddr.setDescription('IP Address assigned to LAN IP Interface')
deployProvIfCapIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 40), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapIpMask.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapIpMask.setDescription('IP MASK assigned to LAN IP Interface')
deployProvIfCapOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 41), FspR7OspfModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapOspf.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapOspf.setDescription('OSPF Routing (Dynamic)')
deployProvIfCapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 42), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapMetric.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapMetric.setDescription('Routing Metric')
deployProvIfCapAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 43), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapAreaId.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapAreaId.setDescription('OSPF Area ID for IP Interface')
deployProvIfCapTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 44), SonetTraceFormCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceFormSonetSection.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTraceFormSonetSection.setDescription('Byte-Length of Trace Compared to Expected')
deployProvIfCapTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceExpectedSonetSection.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTraceExpectedSonetSection.setDescription('Expected Sec/RS trace. NULL TRACE implies that no trace comparison is made.')
deployProvIfCapTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitSonetSection.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitSonetSection.setDescription('Sec/RS Trace to be Transmitted')
deployProvIfCapTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 47), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTimModeSonetSection.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTimModeSonetSection.setDescription('Detection of TIM Sonet Section Condition can be configured')
deployProvIfCapTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceExpectedOtu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTraceExpectedOtu.setDescription('Expected SAPI part of the OTU trace (15 character).\n         NULL TRACE implies that no trace comparison is made.')
deployProvIfCapTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitSapiOtu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitSapiOtu.setDescription('The transmitted SAPI part of the OTU trace (15 character)')
deployProvIfCapTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitDapiOtu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitDapiOtu.setDescription('The transmitted DAPI part of the OTU trace (15 character)')
deployProvIfCapTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitOpspOtu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitOpspOtu.setDescription('The transmitted Operator Specific part of the OTU trace (32 character)')
deployProvIfCapTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 52), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTimModeOtu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTimModeOtu.setDescription('Detection of TIM-OTU Condition can be configured')
deployProvIfCapTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceExpectedOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTraceExpectedOdu.setDescription('Expected SAPI part of the ODU trace (15 character).\n         NULL TRACE implies that no trace comparison is made.')
deployProvIfCapTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitSapiOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitSapiOdu.setDescription('The transmitted SAPI part of the ODU trace (15 character)')
deployProvIfCapTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitDapiOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitDapiOdu.setDescription('The transmitted DAPI part of the ODU trace (15 character)')
deployProvIfCapTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitOpspOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitOpspOdu.setDescription('The transmitted Operator Specific part of the ODU trace (32 character)')
deployProvIfCapTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 57), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTimModeOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTimModeOdu.setDescription('Detection of TIM-ODU Condition can be configured')
deployProvIfCapTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceExpectedOduTcmA.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTraceExpectedOduTcmA.setDescription('Expected SAPI part of the TCMA trace (15 character).\n         NULL TRACE-TCM implies that no trace comparison is made.')
deployProvIfCapTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitSapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitSapiOduTcmA.setDescription('The transmitted SAPI part of the TCMA trace (15 character)')
deployProvIfCapTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitDapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitDapiOduTcmA.setDescription('The transmitted DAPI part of the TCMA trace (15 character)')
deployProvIfCapTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitOpspOduTcmA.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitOpspOduTcmA.setDescription('The transmitted Operator Specific part of the TCMA trace (32 character)')
deployProvIfCapTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 62), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTimModeOduTcmA.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTimModeOduTcmA.setDescription('Detection of TIM-TCMA Condition can be configured')
deployProvIfCapTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceExpectedOduTcmB.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTraceExpectedOduTcmB.setDescription('Expected SAPI part of the TCMB trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
deployProvIfCapTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitSapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitSapiOduTcmB.setDescription('The transmitted SAPI part of the TCMB trace (15 character)')
deployProvIfCapTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitDapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitDapiOduTcmB.setDescription('The transmitted DAPI part of the TCMB trace (15 character)')
deployProvIfCapTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitOpspOduTcmB.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitOpspOduTcmB.setDescription('The transmitted Operator Specific part of the TCMB trace (32 character)')
deployProvIfCapTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 67), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTimModeOduTcmB.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTimModeOduTcmB.setDescription('Detection of TIM-TCMB Condition can be configured')
deployProvIfCapTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceExpectedOduTcmC.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTraceExpectedOduTcmC.setDescription('Expected SAPI part of the TCMC trace (15 character).\n         NULL TRACE-TCM implies that no trace comparison is made.')
deployProvIfCapTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitSapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitSapiOduTcmC.setDescription('The transmitted SAPI part of the TCMC trace (15 character)')
deployProvIfCapTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitDapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitDapiOduTcmC.setDescription('The transmitted DAPI part of the TCMC trace (15 character)')
deployProvIfCapTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitOpspOduTcmC.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTraceTransmitOpspOduTcmC.setDescription('The transmitted Operator Specific part of the TCMC trace (32 character)')
deployProvIfCapTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 72), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTimModeOduTcmC.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTimModeOduTcmC.setDescription('Detection of TIM-TCMC Condition can be configured')
deployProvIfCapChannelProvisioning = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 73), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapChannelProvisioning.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapChannelProvisioning.setDescription('Channel')
deployProvIfCapVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 74), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapVariableGain.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapVariableGain.setDescription('Variable Gain of EDFA')
deployProvIfCapBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 75), FspR7OpticalBandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapBand.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapBand.setDescription('The The optical band of the module.')
deployProvIfCapSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 76), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegThreshold.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapSigDegThreshold.setDescription('Threshold for number of errors (CV or CV+DE) in one second')
deployProvIfCapSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 77), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegPeriodIntegration.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapSigDegPeriodIntegration.setDescription('Integration Period for Signal degrade')
deployProvIfCapVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 78), FspR7VoaModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapVoaMode.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapVoaMode.setDescription('VOA operating mode')
deployProvIfCapOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 79), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapOpticalSetPoint.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapOpticalSetPoint.setDescription('Sets the optical power for power equalization in ROADM or for channel power control in OPCM')
deployProvIfCapVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 80), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapVoaSetpoint.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapVoaSetpoint.setDescription('Sets the optical attenuation of VOA')
deployProvIfCapLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapLanAid.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapLanAid.setDescription('AID of LAN')
deployProvIfCapAprHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 82), FspR7Unsigned32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapAprHighThreshold.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapAprHighThreshold.setDescription('Automatic Power Reduction High Threshold')
deployProvIfCapPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 83), FspR7Integer32Caps()).setUnits('0.2 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapPumpPower.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapPumpPower.setDescription('Total raman pump power')
deployProvIfCapIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 84), FspR7IpTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapIpType.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapIpType.setDescription('Type of IP configuration')
deployProvIfCapWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 85), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapWdmRxChannel.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapWdmRxChannel.setDescription('Configuration of Rx optical channel')
deployProvIfCapSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 86), FspR7BERThresholdSectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegThresSonetSection.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapSigDegThresSonetSection.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
deployProvIfCapSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 87), FspR7Unsigned32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegThresSdhSection.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapSigDegThresSdhSection.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period).\n         Defined as percentage Background Block Errors (30% default) evaluated\n         over a defined period (SDPER-RS).')
deployProvIfCapSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 88), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapSigDegPeriodSdhSection.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapSigDegPeriodSdhSection.setDescription('Provisionable Signal Degrade Integration Period for SDH')
deployProvIfCapDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 89), FspR7DispersionModesCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapDispersionMode.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapDispersionMode.setDescription('Dispersion Compensation Mode')
deployProvIfCapDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 90), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapDispersionSetting.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapDispersionSetting.setDescription('Dispersion setting of dispersion comensating module')
deployProvIfCapOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 91), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapOffset.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapOffset.setDescription('Sets the offset for the mean optical power for power equalization in ROADM')
deployProvIfCapFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 92), FspR7InterfaceFunctionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapFunction.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapFunction.setDescription('Interface Function')
deployProvIfCapPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 93), FspR7PortModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapPortMode.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapPortMode.setDescription('Port Mode')
deployProvIfCapPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 94), FspR7PortRoleCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapPortRole.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapPortRole.setDescription('ADVA cloud Port Roles')
deployProvIfCapUtag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 95), FspR7UntaggedFramesCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapUtag.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapUtag.setDescription('If untagged frames shall be enabled on this port or not.')
deployProvIfCapPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 96), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapPvid.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapPvid.setDescription('Default VLAN ID (both STAG/CTAG mode) in case UTAG is enabled')
deployProvIfCapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 97), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapPriority.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapPriority.setDescription('Default PCP in case UTAG is Enabled. The Prio may be remapped in the EVC.')
deployProvIfCapStagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 98), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapStagType.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapStagType.setDescription('TAG type field')
deployProvIfCapCac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 99), FspR7L2CacEnableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapCac.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapCac.setDescription('Enable of CAC')
deployProvIfCapMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 100), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapMaxFrameSize.setDescription('Max Frame Size')
deployProvIfCapVethAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapVethAid.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapVethAid.setDescription('Shows if PORT is a member in the LAG with the VETH AID')
deployProvIfCapLagPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 102), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapLagPrio.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapLagPrio.setDescription('Part of ID. Port pri that defines standby.')
deployProvIfCapLagPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 103), FspR7LagPortTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapLagPortType.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapLagPortType.setDescription('Type/Speed of connected ports in the LAG')
deployProvIfCapLagActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 104), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapLagActivePorts.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapLagActivePorts.setDescription('The amount of active ports in the LAG.')
deployProvIfCapLacpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 105), FspR7LacpModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapLacpMode.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapLacpMode.setDescription('Enable of LACP state machine')
deployProvIfCapLagLoadBallanceSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 106), FspR7LagLoadBallanceSourceCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapLagLoadBallanceSource.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapLagLoadBallanceSource.setDescription('What source is used in the load balance calculation')
deployProvIfCapLacpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 107), FspR7LacpTimeoutCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapLacpTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapLacpTimeout.setDescription('Timeout of the LACP')
deployProvIfCapFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 108), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapFarEndCommunication.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapFarEndCommunication.setDescription('Used for Optojack plugs; Communication to Far End Plug is observed')
deployProvIfCapEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 109), FspR7EqlzAdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapEqlzAdmin.setDescription('Scheduled Equalization Administration')
deployProvIfCapTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 110), FspR7EnableDisableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTxOffDelay.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTxOffDelay.setDescription('Enable or disable TXOFFHOLD Period for Error Forwarding and LKDO-OFF Consequent Action.')
deployProvIfCapOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 111), FspR7OpuPayloadTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapOpuPayloadType.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapOpuPayloadType.setDescription('OPU Payload Type Indicator')
deployProvIfCapOscOpticalSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 112), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapOscOpticalSetpoint.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapOscOpticalSetpoint.setDescription('Sets the OSC optical power')
deployProvIfCapFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 113), FspR7FiberBrandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapFiberBrand.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapFiberBrand.setDescription('Brand of fiber present in the fiber plant')
deployProvIfCapTiltSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 114), FspR7TiltSetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTiltSet.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTiltSet.setDescription('Tilt setting as discrete values versus a range')
deployProvIfCapXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 115), FspR7XfpDecisionThresCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapXfpDecisionThres.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapXfpDecisionThres.setDescription('XFP Decision threshold setting')
deployProvIfCapAutoPTassignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 116), FspR7ManualAutoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapAutoPTassignment.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapAutoPTassignment.setDescription('Auto assignment of ODU PT')
deployProvIfCapTributarySlotMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 117), FspR7ManualAutoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapTributarySlotMethod.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapTributarySlotMethod.setDescription('Tributary Slot assignment method')
deployProvIfCapOduTribPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 118), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapOduTribPortNo.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapOduTribPortNo.setDescription('ODU Tributary Port Number')
deployProvIfCapOduTribTimeSlottNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 119), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapOduTribTimeSlottNo.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapOduTribTimeSlottNo.setDescription('ODU Tributary slot number. Multiple values can be entered as a string, separated by commas or given as a range.\n         For capabilities objects possible number of slots and valid range are displayed in a form:\n         [1,2,3,8][count: 1-1]\n         In first brackets valid slots are shown and in the second possible number of slots.')
deployProvIfCapRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 120), ApsRevertModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapRevertiveMode.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapRevertiveMode.setDescription('Revertive Protection Switching')
deployProvIfCapBip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 2, 1, 125), FspR7BipCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfCapBip.setStatus('current')
if mibBuilder.loadTexts: deployProvIfCapBip.setDescription('Bit Interleaved Parity')
deployProvIfDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3), )
if mibBuilder.loadTexts: deployProvIfDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTable.setDescription('Contains entries for provisioning of interfaces.')
deployProvIfDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvIfDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsEntry.setDescription('All interfaces which are provisioned(or during deployProv)\n         will have an entry in this table.')
deployProvIfDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsRowStatus.setDescription('RowStatus')
deployProvIfDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsForceDestroy.setDescription('Forced Destroy')
deployProvIfDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsType.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer\n         termination OR else as payload')
deployProvIfDefaultsPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 4), OtnPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsPayload.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsPayload.setDescription('The payload of the interface (inside a transport overhead).\n         Relevant e. g. for OTN cards which wrap a payload into an OTU1/2 wrapper.')
deployProvIfDefaultsBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 5), FspR7PortBehaviour()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsBehaviour.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsBehaviour.setDescription('The configured behaviour of the interface. If configured as\n         a network interface, the interface will use a WDM laser.')
deployProvIfDefaultsTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 6), OhTerminationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTerminationLevel.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTerminationLevel.setDescription('Signal Tremination Level of Intrusive Access to Header Information.\n         Not used in 7.0, monitoring is one layer higher than TERM level,\n         if applicable. All conditions detected on monitoring layer will not\n         be reported (severity degradated to NR).')
deployProvIfDefaultsAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 7), FspR7AlsMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsAlsMode.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsAlsMode.setDescription('A configuration request for the Automatic Laser Shutdown (ALS)\n         function. Refer to FspR7AlsMode Textual Convention for details.')
deployProvIfDefaultsErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 8), FspR7ErrorFwdMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsErrorForwarding.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsErrorForwarding.setDescription('A configuration request for the error forwarding\n         function. Refer to FspR7ErrorFwdMode Textual Convention for details.')
deployProvIfDefaultsLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 9), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsLaserOffDelayFunction.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsLaserOffDelayFunction.setDescription('A configuration request for the Laser Off Delay function. This function\n         delays turning off the laser as a consequent action to a defect.')
deployProvIfDefaultsFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 10), FspR7FecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsFecType.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsFecType.setDescription('Configuration of FEC type.')
deployProvIfDefaultsTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 11), SonetTimingSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTimingSource.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTimingSource.setDescription('The timing source for this interface.\n         - internal: used in stand-alone, point-to-point topologies stand-alone (dedicated fiber operation).\n         - loopTiming: e.g. used in point-to-point via SONET network and feeder topologies. The default is\n         internal(1).')
deployProvIfDefaultsTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 12), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTcmALevel.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTcmALevel.setDescription('Configuration of TCMA level.')
deployProvIfDefaultsTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 13), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTcmBLevel.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTcmBLevel.setDescription('Configuration of TCMB level.')
deployProvIfDefaultsSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 14), FspR7BERThreshold()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresSonetLine.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresSonetLine.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
deployProvIfDefaultsSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresSdhMs.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresSdhMs.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period).\n         Defined as percentage Background Block Errors (30% default) evaluated\n         over a defined period (SDPER-RS).')
deployProvIfDefaultsSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSignalDegradePeriod.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsSignalDegradePeriod.setDescription('The measurement period in seconds used together with\n         the deployProvIfSigDegThresSdhRegSect based on the block error counting method.\n         The valid range is 2..10,\n         The default being 7.')
deployProvIfDefaultsAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 17), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsAutonegotiation.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsAutonegotiation.setDescription('Autonegotiation of the data rate')
deployProvIfDefaultsBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 18), FspR7Bitrate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsBitrate.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsBitrate.setDescription('Provisioned data rate')
deployProvIfDefaultsDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 19), EthDuplexMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsDuplex.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsDuplex.setDescription('Duplex Mode Provision.')
deployProvIfDefaultsFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 20), FspR7FlowControlMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsFlowControl.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsFlowControl.setDescription('Flow Control mechanism')
deployProvIfDefaultsOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 21), FspR7Stuff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsOtnStuffing.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsOtnStuffing.setDescription('Indicates if bit/byte stuffing is used in the transport signal.')
deployProvIfDefaultsSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresOtu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresOtu.setDescription('Background-Block-Error-Based Signal Degradation Definition for OTU')
deployProvIfDefaultsSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 23), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegPeriodOtu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegPeriodOtu.setDescription('Integration Period for Signal degrade')
deployProvIfDefaultsSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresOdu.setDescription('Background-Block-Error-Based Signal Degradation Definition for ODU')
deployProvIfDefaultsSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 25), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegPeriodOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegPeriodOdu.setDescription('Integration Period for Signal degrade')
deployProvIfDefaultsSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresOduTcmA.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresOduTcmA.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-A')
deployProvIfDefaultsSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 27), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegPeriodOduTcmA.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegPeriodOduTcmA.setDescription('Integration Period for Signal degrade')
deployProvIfDefaultsSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresOduTcmB.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresOduTcmB.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-B')
deployProvIfDefaultsSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 29), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegPeriodOduTcmB.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegPeriodOduTcmB.setDescription('Integration Period of TCMB Signal Segrade')
deployProvIfDefaultsTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50, 0), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTilt.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTilt.setDescription('Change of optical channel power in dB over the complete transmission band')
deployProvIfDefaultsGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 31), FspR7Gain()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsGain.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsGain.setDescription('Gain.')
deployProvIfDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 32), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsAdmin.setDescription('The Adminstrative State.')
deployProvIfDefaultsAttenuationGradient = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 33), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 30), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB/min').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsAttenuationGradient.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsAttenuationGradient.setDescription("Attenuation Gradient Threshold on Receive Fiber. Applies to both\n         TRMT and RCV directions; but threshold violation is reported for\n         each direction separately by the 'tapping' alarms: INTRUDE-RCV\n         and INTRUDE-TRMT.")
deployProvIfDefaultsSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 34), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresReceiver.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresReceiver.setDescription('Signal Degrade Threshold on Receiver. Reported as ATTRMT-SDHT to far end.')
deployProvIfDefaultsTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 35), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTcmCLevel.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTcmCLevel.setDescription('Activation of Tandem Connection Monitoring Instance C')
deployProvIfDefaultsSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresOduTcmC.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresOduTcmC.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-C')
deployProvIfDefaultsSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 37), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegPeriodOduTcmC.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegPeriodOduTcmC.setDescription('Integration Period of TCMC Signal Segrade')
deployProvIfDefaultsDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 38), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsDisparityCorrection.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsDisparityCorrection.setDescription('Disparity correction')
deployProvIfDefaultsIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 39), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsIpAddr.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsIpAddr.setDescription('IP Address assigned to LAN IP Interface')
deployProvIfDefaultsIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 40), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsIpMask.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsIpMask.setDescription('IP MASK assigned to LAN IP Interface')
deployProvIfDefaultsOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 41), FspR7OspfMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsOspf.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsOspf.setDescription('OSPF Routing (Dynamic)')
deployProvIfDefaultsMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 42), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsMetric.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsMetric.setDescription('Routing Metric')
deployProvIfDefaultsAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 43), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsAreaId.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsAreaId.setDescription('OSPF Area ID for IP Interface')
deployProvIfDefaultsTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 44), SonetTraceForm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceFormSonetSection.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTraceFormSonetSection.setDescription('Byte-Length of Trace Compared to Expected')
deployProvIfDefaultsTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 45), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceExpectedSonetSection.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTraceExpectedSonetSection.setDescription('Expected Sec/RS trace. NULL TRACE implies that no trace comparison is made.')
deployProvIfDefaultsTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 46), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitSonetSection.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitSonetSection.setDescription('Sec/RS Trace to be Transmitted')
deployProvIfDefaultsTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 47), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTimModeSonetSection.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTimModeSonetSection.setDescription('Detection of TIM Sonet Section Condition can be configured')
deployProvIfDefaultsTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 48), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceExpectedOtu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTraceExpectedOtu.setDescription('Expected SAPI part of the OTU trace (15 character).\n         NULL TRACE implies that no trace comparison is made.')
deployProvIfDefaultsTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 49), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitSapiOtu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitSapiOtu.setDescription('The transmitted SAPI part of the OTU trace (15 character)')
deployProvIfDefaultsTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 50), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitDapiOtu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitDapiOtu.setDescription('The transmitted DAPI part of the OTU trace (15 character)')
deployProvIfDefaultsTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 51), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitOpspOtu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitOpspOtu.setDescription('The transmitted Operator Specific part of the OTU trace (32 character)')
deployProvIfDefaultsTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 52), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTimModeOtu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTimModeOtu.setDescription('Detection of TIM-OTU Condition can be configured')
deployProvIfDefaultsTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 53), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceExpectedOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTraceExpectedOdu.setDescription('Expected SAPI part of the ODU trace (15 character).\n         NULL TRACE implies that no trace comparison is made.')
deployProvIfDefaultsTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 54), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitSapiOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitSapiOdu.setDescription('The transmitted SAPI part of the ODU trace (15 character)')
deployProvIfDefaultsTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitDapiOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitDapiOdu.setDescription('The transmitted DAPI part of the ODU trace (15 character)')
deployProvIfDefaultsTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 56), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitOpspOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitOpspOdu.setDescription('The transmitted Operator Specific part of the ODU trace (32 character)')
deployProvIfDefaultsTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 57), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTimModeOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTimModeOdu.setDescription('Detection of TIM-ODU Condition can be configured')
deployProvIfDefaultsTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 58), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceExpectedOduTcmA.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTraceExpectedOduTcmA.setDescription('Expected SAPI part of the TCMA trace (15 character).\n         NULL TRACE-TCM implies that no trace comparison is made.')
deployProvIfDefaultsTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 59), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitSapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitSapiOduTcmA.setDescription('The transmitted SAPI part of the TCMA trace (15 character)')
deployProvIfDefaultsTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 60), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitDapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitDapiOduTcmA.setDescription('The transmitted DAPI part of the TCMA trace (15 character)')
deployProvIfDefaultsTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitOpspOduTcmA.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitOpspOduTcmA.setDescription('The transmitted Operator Specific part of the TCMA trace (32 character)')
deployProvIfDefaultsTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 62), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTimModeOduTcmA.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTimModeOduTcmA.setDescription('Detection of TIM-TCMA Condition can be configured')
deployProvIfDefaultsTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 63), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceExpectedOduTcmB.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTraceExpectedOduTcmB.setDescription('Expected SAPI part of the TCMB trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
deployProvIfDefaultsTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitSapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitSapiOduTcmB.setDescription('The transmitted SAPI part of the TCMB trace (15 character)')
deployProvIfDefaultsTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 65), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitDapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitDapiOduTcmB.setDescription('The transmitted DAPI part of the TCMB trace (15 character)')
deployProvIfDefaultsTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 66), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitOpspOduTcmB.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitOpspOduTcmB.setDescription('The transmitted Operator Specific part of the TCMB trace (32 character)')
deployProvIfDefaultsTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 67), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTimModeOduTcmB.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTimModeOduTcmB.setDescription('Detection of TIM-TCMB Condition can be configured')
deployProvIfDefaultsTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 68), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceExpectedOduTcmC.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTraceExpectedOduTcmC.setDescription('Expected SAPI part of the TCMC trace (15 character).\n         NULL TRACE-TCM implies that no trace comparison is made.')
deployProvIfDefaultsTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 69), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitSapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitSapiOduTcmC.setDescription('The transmitted SAPI part of the TCMC trace (15 character)')
deployProvIfDefaultsTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 70), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitDapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitDapiOduTcmC.setDescription('The transmitted DAPI part of the TCMC trace (15 character)')
deployProvIfDefaultsTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 71), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitOpspOduTcmC.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTraceTransmitOpspOduTcmC.setDescription('The transmitted Operator Specific part of the TCMC trace (32 character)')
deployProvIfDefaultsTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 72), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTimModeOduTcmC.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTimModeOduTcmC.setDescription('Detection of TIM-TCMC Condition can be configured')
deployProvIfDefaultsChannelProvisioning = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 73), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsChannelProvisioning.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsChannelProvisioning.setDescription('Channel')
deployProvIfDefaultsVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 74), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(50, 350), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsVariableGain.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsVariableGain.setDescription('Variable Gain of EDFA')
deployProvIfDefaultsBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 75), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsBand.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsBand.setDescription('The The optical band of the module.')
deployProvIfDefaultsSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 76), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10000), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThreshold.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThreshold.setDescription('Threshold for number of errors (CV or CV+DE) in one second')
deployProvIfDefaultsSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 77), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegPeriodIntegration.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegPeriodIntegration.setDescription('Integration Period for Signal degrade')
deployProvIfDefaultsVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 78), FspR7VoaMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsVoaMode.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsVoaMode.setDescription('VOA operating mode')
deployProvIfDefaultsOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-250, 50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsOpticalSetPoint.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsOpticalSetPoint.setDescription('Sets the optical power for power equalization in ROADM or for channel power control in OPCM')
deployProvIfDefaultsVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 80), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 300), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsVoaSetpoint.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsVoaSetpoint.setDescription('Sets the optical attenuation of VOA')
deployProvIfDefaultsLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 81), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsLanAid.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsLanAid.setDescription('AID of LAN')
deployProvIfDefaultsAprHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 82), Unsigned32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsAprHighThreshold.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsAprHighThreshold.setDescription('Automatic Power Reduction High Threshold')
deployProvIfDefaultsPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(115, 138), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.2 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsPumpPower.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsPumpPower.setDescription('Total raman pump power')
deployProvIfDefaultsIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 84), FspR7IpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsIpType.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsIpType.setDescription('Type of IP configuration')
deployProvIfDefaultsWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 85), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsWdmRxChannel.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsWdmRxChannel.setDescription('Configuration of Rx optical channel')
deployProvIfDefaultsSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 86), FspR7BERThresholdSection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresSonetSection.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresSonetSection.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
deployProvIfDefaultsSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 87), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresSdhSection.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegThresSdhSection.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period).\n         Defined as percentage Background Block Errors (30% default) evaluated\n         over a defined period (SDPER-RS).')
deployProvIfDefaultsSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 88), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegPeriodSdhSection.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsSigDegPeriodSdhSection.setDescription('Provisionable Signal Degrade Integration Period for SDH')
deployProvIfDefaultsDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 89), FspR7DispersionModes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsDispersionMode.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsDispersionMode.setDescription('Dispersion Compensation Mode')
deployProvIfDefaultsDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50000, 50000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsDispersionSetting.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsDispersionSetting.setDescription('Dispersion setting of dispersion comensating module')
deployProvIfDefaultsOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 30), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsOffset.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsOffset.setDescription('Sets the offset for the mean optical power for power equalization in ROADM')
deployProvIfDefaultsFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 92), FspR7InterfaceFunction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsFunction.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsFunction.setDescription('Interface Function')
deployProvIfDefaultsPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 93), FspR7PortMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsPortMode.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsPortMode.setDescription('Port Mode')
deployProvIfDefaultsPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 94), FspR7PortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsPortRole.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsPortRole.setDescription('ADVA cloud Port Roles')
deployProvIfDefaultsUtag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 95), FspR7UntaggedFrames()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsUtag.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsUtag.setDescription('If untagged frames shall be enabled on this port or not.')
deployProvIfDefaultsPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 96), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsPvid.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsPvid.setDescription('Default VLAN ID (both STAG/CTAG mode) in case UTAG is enabled')
deployProvIfDefaultsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 97), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsPriority.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsPriority.setDescription('Default PCP in case UTAG is Enabled. The Prio may be remapped in the EVC.')
deployProvIfDefaultsStagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 98), FspR7SnmpHexString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsStagType.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsStagType.setDescription('TAG type field')
deployProvIfDefaultsCac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 99), FspR7L2CacEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsCac.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsCac.setDescription('Enable of CAC')
deployProvIfDefaultsMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 100), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1518, 9600), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsMaxFrameSize.setDescription('Max Frame Size')
deployProvIfDefaultsVethAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 101), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsVethAid.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsVethAid.setDescription('Shows if PORT is a member in the LAG with the VETH AID')
deployProvIfDefaultsLagPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 102), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsLagPrio.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsLagPrio.setDescription('Part of ID. Port pri that defines standby.')
deployProvIfDefaultsLagPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 103), FspR7LagPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsLagPortType.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsLagPortType.setDescription('Type/Speed of connected ports in the LAG')
deployProvIfDefaultsLagActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 104), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 12), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsLagActivePorts.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsLagActivePorts.setDescription('The amount of active ports in the LAG.')
deployProvIfDefaultsLacpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 105), FspR7LacpMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsLacpMode.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsLacpMode.setDescription('Enable of LACP state machine')
deployProvIfDefaultsLagLoadBallanceSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 106), FspR7LagLoadBallanceSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsLagLoadBallanceSource.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsLagLoadBallanceSource.setDescription('What source is used in the load balance calculation')
deployProvIfDefaultsLacpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 107), FspR7LacpTimeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsLacpTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsLacpTimeout.setDescription('Timeout of the LACP')
deployProvIfDefaultsFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 108), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsFarEndCommunication.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsFarEndCommunication.setDescription('Used for Optojack plugs; Communication to Far End Plug is observed')
deployProvIfDefaultsEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 109), FspR7EqlzAdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsEqlzAdmin.setDescription('Scheduled Equalization Administration')
deployProvIfDefaultsTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 110), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTxOffDelay.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTxOffDelay.setDescription('Enable or disable TXOFFHOLD Period for Error Forwarding and LKDO-OFF Consequent Action.')
deployProvIfDefaultsOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 111), FspR7OpuPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsOpuPayloadType.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsOpuPayloadType.setDescription('OPU Payload Type Indicator')
deployProvIfDefaultsOscOpticalSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-250, 50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsOscOpticalSetpoint.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsOscOpticalSetpoint.setDescription('Sets the OSC optical power')
deployProvIfDefaultsFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 113), FspR7FiberBrand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsFiberBrand.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsFiberBrand.setDescription('Brand of fiber present in the fiber plant')
deployProvIfDefaultsTiltSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 114), FspR7TiltSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTiltSet.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTiltSet.setDescription('Tilt setting as discrete values versus a range')
deployProvIfDefaultsXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 115), FspR7XfpDecisionThres()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsXfpDecisionThres.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsXfpDecisionThres.setDescription('XFP Decision threshold setting')
deployProvIfDefaultsAutoPTassignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 116), FspR7ManualAuto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsAutoPTassignment.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsAutoPTassignment.setDescription('Auto assignment of ODU PT')
deployProvIfDefaultsTributarySlotMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 117), FspR7ManualAuto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsTributarySlotMethod.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsTributarySlotMethod.setDescription('Tributary Slot assignment method')
deployProvIfDefaultsOduTribPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 118), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsOduTribPortNo.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsOduTribPortNo.setDescription('ODU Tributary Port Number')
deployProvIfDefaultsOduTribTimeSlottNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 119), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsOduTribTimeSlottNo.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsOduTribTimeSlottNo.setDescription('ODU Tributary slot number. Multiple values can be entered as a string, separated by commas or given as a range.\n         For capabilities objects possible number of slots and valid range are displayed in a form:\n         [1,2,3,8][count: 1-1]\n         In first brackets valid slots are shown and in the second possible number of slots.')
deployProvIfDefaultsRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 120), ApsRevertMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsRevertiveMode.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsRevertiveMode.setDescription('Revertive Protection Switching')
deployProvIfDefaultsBip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 3, 1, 125), FspR7Bip()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfDefaultsBip.setStatus('current')
if mibBuilder.loadTexts: deployProvIfDefaultsBip.setDescription('Bit Interleaved Parity')
deployProvVchChannelTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4), )
if mibBuilder.loadTexts: deployProvVchChannelTable.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelTable.setDescription('Contains entries for provisioning of interfaces.')
deployProvVchChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvVchChannelEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelEntry.setDescription('All interfaces which are provisioned(or are during\n         provisioning) will have an entry in this table.')
deployProvVchChannelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelRowStatus.setDescription('RowStatus')
deployProvVchChannelForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelForceDestroy.setDescription('Forced Destroy')
deployProvVchChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 3), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelType.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelType.setDescription('The TYPE defines the transport service type as wrapper\n         with wrapper layer termination OR else as payload')
deployProvVchChannelVcgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 4), VirtualContainerType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelVcgType.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelVcgType.setDescription('Virtual Container Group Type')
deployProvVchChannelBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 5), SonetVcBundleAllocation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelBundle.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelBundle.setDescription('List of VC4/VC3/STS1/STS3c/STS24c/STS48c containers used in the BUNDLE')
deployProvVchChannelCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 6), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelCir.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelCir.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
deployProvVchChannelAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 7), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
deployProvVchChannelSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelSigDegThresOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelSigDegThresOdu.setDescription('Background-Block-Error-Based Signal Degradation Definition for ODU')
deployProvVchChannelSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelSigDegPeriodOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelSigDegPeriodOdu.setDescription('Integration Period for Signal degrade')
deployProvVchChannelTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelTraceExpectedOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelTraceExpectedOdu.setDescription('Expected SAPI part of the ODU trace (15 character).\n         NULL TRACE implies that no trace comparison is made.')
deployProvVchChannelTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelTraceTransmitSapiOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelTraceTransmitSapiOdu.setDescription('The transmitted SAPI part of the ODU trace (15 character)')
deployProvVchChannelTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelTraceTransmitDapiOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelTraceTransmitDapiOdu.setDescription('The transmitted DAPI part of the ODU trace (15 character)')
deployProvVchChannelTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelTraceTransmitOpspOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelTraceTransmitOpspOdu.setDescription('The transmitted Operator Specific part of the ODU trace (32 character)')
deployProvVchChannelTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 14), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelTimModeOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelTimModeOdu.setDescription('Detection of TIM-ODU Condition can be configured')
deployProvVchChannelEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 4, 1, 15), FspR7EqlzAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVchChannelEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelEqlzAdmin.setDescription('Scheduled Equalization Administration')
deployProvVchChannelCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5), )
if mibBuilder.loadTexts: deployProvVchChannelCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelCapTable.setDescription('Contains entries for provisioning of interfaces.')
deployProvVchChannelCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvVchChannelCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelCapEntry.setDescription('All interfaces which are provisioned(or are during\n         provisioning) will have an entry in this table.')
deployProvVchChannelCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelCapRowStatus.setDescription('RowStatus')
deployProvVchChannelCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelCapForceDestroy.setDescription('Forced Destroy')
deployProvVchChannelCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 3), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapType.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelCapType.setDescription('The TYPE defines the transport service type as wrapper\n         with wrapper layer termination OR else as payload')
deployProvVchChannelCapVcgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 4), VirtualContainerTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapVcgType.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelCapVcgType.setDescription('Virtual Container Group Type')
deployProvVchChannelCapBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 5), SonetVcBundleAllocationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapBundle.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelCapBundle.setDescription('List of VC4/VC3/STS1/STS3c/STS24c/STS48c containers used in the BUNDLE')
deployProvVchChannelCapCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 6), FspR7Unsigned32Caps()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapCir.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelCapCir.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
deployProvVchChannelCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 7), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelCapAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
deployProvVchChannelCapSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 8), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapSigDegThresOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelCapSigDegThresOdu.setDescription('Background-Block-Error-Based Signal Degradation Definition for ODU')
deployProvVchChannelCapSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 9), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapSigDegPeriodOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelCapSigDegPeriodOdu.setDescription('Integration Period for Signal degrade')
deployProvVchChannelCapTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapTraceExpectedOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelCapTraceExpectedOdu.setDescription('Expected SAPI part of the ODU trace (15 character).\n         NULL TRACE implies that no trace comparison is made.')
deployProvVchChannelCapTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapTraceTransmitSapiOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelCapTraceTransmitSapiOdu.setDescription('The transmitted SAPI part of the ODU trace (15 character)')
deployProvVchChannelCapTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapTraceTransmitDapiOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelCapTraceTransmitDapiOdu.setDescription('The transmitted DAPI part of the ODU trace (15 character)')
deployProvVchChannelCapTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapTraceTransmitOpspOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelCapTraceTransmitOpspOdu.setDescription('The transmitted Operator Specific part of the ODU trace (32 character)')
deployProvVchChannelCapTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 14), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapTimModeOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelCapTimModeOdu.setDescription('Detection of TIM-ODU Condition can be configured')
deployProvVchChannelCapEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 5, 1, 15), FspR7EqlzAdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelCapEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelCapEqlzAdmin.setDescription('Scheduled Equalization Administration')
deployProvVchChannelDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6), )
if mibBuilder.loadTexts: deployProvVchChannelDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelDefaultsTable.setDescription('Contains entries for provisioning of interfaces.')
deployProvVchChannelDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvVchChannelDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelDefaultsEntry.setDescription('All interfaces which are provisioned(or are during\n         provisioning) will have an entry in this table.')
deployProvVchChannelDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelDefaultsRowStatus.setDescription('RowStatus')
deployProvVchChannelDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelDefaultsForceDestroy.setDescription('Forced Destroy')
deployProvVchChannelDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsType.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelDefaultsType.setDescription('The TYPE defines the transport service type as wrapper\n         with wrapper layer termination OR else as payload')
deployProvVchChannelDefaultsVcgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 4), VirtualContainerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsVcgType.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelDefaultsVcgType.setDescription('Virtual Container Group Type')
deployProvVchChannelDefaultsBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 5), SonetVcBundleAllocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsBundle.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelDefaultsBundle.setDescription('List of VC4/VC3/STS1/STS3c/STS24c/STS48c containers used in the BUNDLE')
deployProvVchChannelDefaultsCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 6), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsCir.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelDefaultsCir.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
deployProvVchChannelDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 7), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelDefaultsAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
deployProvVchChannelDefaultsSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsSigDegThresOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelDefaultsSigDegThresOdu.setDescription('Background-Block-Error-Based Signal Degradation Definition for ODU')
deployProvVchChannelDefaultsSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsSigDegPeriodOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelDefaultsSigDegPeriodOdu.setDescription('Integration Period for Signal degrade')
deployProvVchChannelDefaultsTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsTraceExpectedOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelDefaultsTraceExpectedOdu.setDescription('Expected SAPI part of the ODU trace (15 character).\n         NULL TRACE implies that no trace comparison is made.')
deployProvVchChannelDefaultsTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsTraceTransmitSapiOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelDefaultsTraceTransmitSapiOdu.setDescription('The transmitted SAPI part of the ODU trace (15 character)')
deployProvVchChannelDefaultsTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsTraceTransmitDapiOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelDefaultsTraceTransmitDapiOdu.setDescription('The transmitted DAPI part of the ODU trace (15 character)')
deployProvVchChannelDefaultsTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsTraceTransmitOpspOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelDefaultsTraceTransmitOpspOdu.setDescription('The transmitted Operator Specific part of the ODU trace (32 character)')
deployProvVchChannelDefaultsTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 14), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsTimModeOdu.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelDefaultsTimModeOdu.setDescription('Detection of TIM-ODU Condition can be configured')
deployProvVchChannelDefaultsEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 6, 1, 15), FspR7EqlzAdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVchChannelDefaultsEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvVchChannelDefaultsEqlzAdmin.setDescription('Scheduled Equalization Administration')
deployProvApsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7), )
if mibBuilder.loadTexts: deployProvApsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvApsTable.setDescription('Contains entries for provisioning aps.')
deployProvApsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvApsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvApsEntry.setDescription('All protection groups which have been provisioned(or are during provisioning)\n         will have an entry in this table.')
deployProvApsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvApsRowStatus.setDescription('RowStatus')
deployProvApsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvApsForceDestroy.setDescription('Forced Destroy')
deployProvApsSDswitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 3), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsSDswitching.setStatus('current')
if mibBuilder.loadTexts: deployProvApsSDswitching.setDescription('This state controls whether the switch criteria for the APS group will\n         include the Signal Degrade alarm.')
deployProvApsHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 4), ApsHoldoffTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsHoldOffTime.setStatus('current')
if mibBuilder.loadTexts: deployProvApsHoldOffTime.setDescription('This value controls the switch delay (0 to 10 seconds in\n         100ms steps) for the protection group. Changing the hold-off\n         time when the timer is active will not affect the active\n         timer. The change will take effect the next time the timer\n         is active.')
deployProvApsProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 5), ProtectionMech()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsProtectionMech.setStatus('current')
if mibBuilder.loadTexts: deployProvApsProtectionMech.setDescription('The protection type of this protection group.')
deployProvApsWorkingAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 6), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsWorkingAid.setStatus('current')
if mibBuilder.loadTexts: deployProvApsWorkingAid.setDescription('AID of working port involved in the protection group.')
deployProvApsProtectionAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 7), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsProtectionAid.setStatus('current')
if mibBuilder.loadTexts: deployProvApsProtectionAid.setDescription('AID of protection entity involved in the protection group.')
deployProvApsSignalDegradeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 8), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsSignalDegradeSwitching.setStatus('current')
if mibBuilder.loadTexts: deployProvApsSignalDegradeSwitching.setDescription('Switch Trigger Additionally on Signal Degrade Link Detection')
deployProvApsSignalFailureSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 9), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsSignalFailureSwitching.setStatus('current')
if mibBuilder.loadTexts: deployProvApsSignalFailureSwitching.setDescription('Switch Trigger on Signal Failure Link Detection')
deployProvApsFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsFarEndIp.setStatus('current')
if mibBuilder.loadTexts: deployProvApsFarEndIp.setDescription('IP Address assigned to PPP Termination Point on Far-End NE. Default\n         is set by NE System on LINK establishment if FENDIPACPT = Y')
deployProvApsPeerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 11), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsPeerAid.setStatus('current')
if mibBuilder.loadTexts: deployProvApsPeerAid.setDescription('AID of Protection Partner involved in the protection group.')
deployProvApsApsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 12), ApsType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsApsType.setStatus('current')
if mibBuilder.loadTexts: deployProvApsApsType.setDescription('The type of APS implemented in this protection group.')
deployProvApsRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 13), ApsRevertMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsRevertMode.setStatus('current')
if mibBuilder.loadTexts: deployProvApsRevertMode.setDescription('Revertive Protection Switching')
deployProvApsWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 12), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsWaitToRestore.setStatus('current')
if mibBuilder.loadTexts: deployProvApsWaitToRestore.setDescription('Wait to Restore')
deployProvApsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 7, 1, 15), ApsDirection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvApsDirection.setStatus('current')
if mibBuilder.loadTexts: deployProvApsDirection.setDescription("Indicates whether the APS function is 'unidirectional' (single-ended)\n         or 'bidirectional' (dual-ended).")
deployProvApsCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8), )
if mibBuilder.loadTexts: deployProvApsCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvApsCapTable.setDescription('Contains entries for provisioning aps.')
deployProvApsCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvApsCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvApsCapEntry.setDescription('All protection groups which have been provisioned(or are during provisioning)\n         will have an entry in this table.')
deployProvApsCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvApsCapRowStatus.setDescription('RowStatus')
deployProvApsCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvApsCapForceDestroy.setDescription('Forced Destroy')
deployProvApsCapSDswitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 3), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapSDswitching.setStatus('current')
if mibBuilder.loadTexts: deployProvApsCapSDswitching.setDescription('This state controls whether the switch criteria for the APS group will\n         include the Signal Degrade alarm.')
deployProvApsCapHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 4), ApsHoldoffTimeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapHoldOffTime.setStatus('current')
if mibBuilder.loadTexts: deployProvApsCapHoldOffTime.setDescription('This value controls the switch delay (0 to 10 seconds in\n         100ms steps) for the protection group. Changing the hold-off\n         time when the timer is active will not affect the active\n         timer. The change will take effect the next time the timer\n         is active.')
deployProvApsCapProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 5), ProtectionMechCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapProtectionMech.setStatus('current')
if mibBuilder.loadTexts: deployProvApsCapProtectionMech.setDescription('The protection type of this protection group.')
deployProvApsCapWorkingAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapWorkingAid.setStatus('current')
if mibBuilder.loadTexts: deployProvApsCapWorkingAid.setDescription('AID of working port involved in the protection group.')
deployProvApsCapProtectionAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapProtectionAid.setStatus('current')
if mibBuilder.loadTexts: deployProvApsCapProtectionAid.setDescription('AID of protection entity involved in the protection group.')
deployProvApsCapSignalDegradeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 8), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapSignalDegradeSwitching.setStatus('current')
if mibBuilder.loadTexts: deployProvApsCapSignalDegradeSwitching.setDescription('Switch Trigger Additionally on Signal Degrade Link Detection')
deployProvApsCapSignalFailureSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 9), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapSignalFailureSwitching.setStatus('current')
if mibBuilder.loadTexts: deployProvApsCapSignalFailureSwitching.setDescription('Switch Trigger on Signal Failure Link Detection')
deployProvApsCapFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 10), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapFarEndIp.setStatus('current')
if mibBuilder.loadTexts: deployProvApsCapFarEndIp.setDescription('IP Address assigned to PPP Termination Point on Far-End NE. Default\n         is set by NE System on LINK establishment if FENDIPACPT = Y')
deployProvApsCapPeerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapPeerAid.setStatus('current')
if mibBuilder.loadTexts: deployProvApsCapPeerAid.setDescription('AID of Protection Partner involved in the protection group.')
deployProvApsCapApsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 12), ApsTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapApsType.setStatus('current')
if mibBuilder.loadTexts: deployProvApsCapApsType.setDescription('The type of APS implemented in this protection group.')
deployProvApsCapRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 13), ApsRevertModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapRevertMode.setStatus('current')
if mibBuilder.loadTexts: deployProvApsCapRevertMode.setDescription('Revertive Protection Switching')
deployProvApsCapWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 14), FspR7Unsigned32Caps()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapWaitToRestore.setStatus('current')
if mibBuilder.loadTexts: deployProvApsCapWaitToRestore.setDescription('Wait to Restore')
deployProvApsCapDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 8, 1, 15), ApsDirectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsCapDirection.setStatus('current')
if mibBuilder.loadTexts: deployProvApsCapDirection.setDescription("Indicates whether the APS function is 'unidirectional' (single-ended)\n         or 'bidirectional' (dual-ended).")
deployProvApsDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9), )
if mibBuilder.loadTexts: deployProvApsDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvApsDefaultsTable.setDescription('Contains entries for provisioning aps.')
deployProvApsDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvApsDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvApsDefaultsEntry.setDescription('All protection groups which have been provisioned(or are during provisioning)\n         will have an entry in this table.')
deployProvApsDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvApsDefaultsRowStatus.setDescription('RowStatus')
deployProvApsDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvApsDefaultsForceDestroy.setDescription('Forced Destroy')
deployProvApsDefaultsSDswitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 3), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsSDswitching.setStatus('current')
if mibBuilder.loadTexts: deployProvApsDefaultsSDswitching.setDescription('This state controls whether the switch criteria for the APS group will\n         include the Signal Degrade alarm.')
deployProvApsDefaultsHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 4), ApsHoldoffTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsHoldOffTime.setStatus('current')
if mibBuilder.loadTexts: deployProvApsDefaultsHoldOffTime.setDescription('This value controls the switch delay (0 to 10 seconds in\n         100ms steps) for the protection group. Changing the hold-off\n         time when the timer is active will not affect the active\n         timer. The change will take effect the next time the timer\n         is active.')
deployProvApsDefaultsProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 5), ProtectionMech()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsProtectionMech.setStatus('current')
if mibBuilder.loadTexts: deployProvApsDefaultsProtectionMech.setDescription('The protection type of this protection group.')
deployProvApsDefaultsWorkingAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 6), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsWorkingAid.setStatus('current')
if mibBuilder.loadTexts: deployProvApsDefaultsWorkingAid.setDescription('AID of working port involved in the protection group.')
deployProvApsDefaultsProtectionAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 7), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsProtectionAid.setStatus('current')
if mibBuilder.loadTexts: deployProvApsDefaultsProtectionAid.setDescription('AID of protection entity involved in the protection group.')
deployProvApsDefaultsSignalDegradeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 8), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsSignalDegradeSwitching.setStatus('current')
if mibBuilder.loadTexts: deployProvApsDefaultsSignalDegradeSwitching.setDescription('Switch Trigger Additionally on Signal Degrade Link Detection')
deployProvApsDefaultsSignalFailureSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 9), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsSignalFailureSwitching.setStatus('current')
if mibBuilder.loadTexts: deployProvApsDefaultsSignalFailureSwitching.setDescription('Switch Trigger on Signal Failure Link Detection')
deployProvApsDefaultsFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsFarEndIp.setStatus('current')
if mibBuilder.loadTexts: deployProvApsDefaultsFarEndIp.setDescription('IP Address assigned to PPP Termination Point on Far-End NE. Default\n         is set by NE System on LINK establishment if FENDIPACPT = Y')
deployProvApsDefaultsPeerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 11), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsPeerAid.setStatus('current')
if mibBuilder.loadTexts: deployProvApsDefaultsPeerAid.setDescription('AID of Protection Partner involved in the protection group.')
deployProvApsDefaultsApsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 12), ApsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsApsType.setStatus('current')
if mibBuilder.loadTexts: deployProvApsDefaultsApsType.setDescription('The type of APS implemented in this protection group.')
deployProvApsDefaultsRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 13), ApsRevertMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsRevertMode.setStatus('current')
if mibBuilder.loadTexts: deployProvApsDefaultsRevertMode.setDescription('Revertive Protection Switching')
deployProvApsDefaultsWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 12), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsWaitToRestore.setStatus('current')
if mibBuilder.loadTexts: deployProvApsDefaultsWaitToRestore.setDescription('Wait to Restore')
deployProvApsDefaultsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 9, 1, 15), ApsDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsDefaultsDirection.setStatus('current')
if mibBuilder.loadTexts: deployProvApsDefaultsDirection.setDescription("Indicates whether the APS function is 'unidirectional' (single-ended)\n         or 'bidirectional' (dual-ended).")
deployProvApsWorkingAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 10), )
if mibBuilder.loadTexts: deployProvApsWorkingAidCapsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvApsWorkingAidCapsTable.setDescription('')
deployProvApsWorkingAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 10, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvApsWorkingAidCapsIndex"))
if mibBuilder.loadTexts: deployProvApsWorkingAidCapsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvApsWorkingAidCapsEntry.setDescription('')
deployProvApsWorkingAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 10, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsWorkingAidCapsIndex.setStatus('current')
if mibBuilder.loadTexts: deployProvApsWorkingAidCapsIndex.setDescription('AID of working port involved in the protection group.')
deployProvApsProtectingAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 11), )
if mibBuilder.loadTexts: deployProvApsProtectingAidCapsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvApsProtectingAidCapsTable.setDescription('')
deployProvApsProtectingAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 11, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvApsProtectingAidCapsIndex"))
if mibBuilder.loadTexts: deployProvApsProtectingAidCapsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvApsProtectingAidCapsEntry.setDescription('')
deployProvApsProtectingAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 11, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsProtectingAidCapsIndex.setStatus('current')
if mibBuilder.loadTexts: deployProvApsProtectingAidCapsIndex.setDescription('AID of protection entity involved in the protection group.')
deployProvDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 12), )
if mibBuilder.loadTexts: deployProvDcnTable.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnTable.setDescription('Contains entries for provisioning dcnChannel.')
deployProvDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 12, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvDcnEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnEntry.setDescription('All dcnChannel which are provisioned(or are during provisioning)\n         will have an entry in this table.')
deployProvDcnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 12, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvDcnRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnRowStatus.setDescription('RowStatus')
deployProvDcnForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 12, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvDcnForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnForceDestroy.setDescription('Forced Destroy')
deployProvDcnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 12, 1, 3), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvDcnType.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnType.setDescription('The TYPE defines the transport service type as wrapper\n         with wrapper layer termination OR else as payload')
deployProvDcnAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 12, 1, 4), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvDcnAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
deployProvDcnExternalVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvDcnExternalVid.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnExternalVid.setDescription('External VID')
deployProvDcnLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 12, 1, 6), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvDcnLanAid.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnLanAid.setDescription('AID of LAN')
deployProvDcnCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 13), )
if mibBuilder.loadTexts: deployProvDcnCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnCapTable.setDescription('Contains entries for provisioning dcnChannel.')
deployProvDcnCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 13, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvDcnCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnCapEntry.setDescription('All dcnChannel which are provisioned(or are during provisioning)\n         will have an entry in this table.')
deployProvDcnCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 13, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnCapRowStatus.setDescription('RowStatus')
deployProvDcnCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 13, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnCapForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnCapForceDestroy.setDescription('Forced Destroy')
deployProvDcnCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 13, 1, 3), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnCapType.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnCapType.setDescription('The TYPE defines the transport service type as wrapper\n         with wrapper layer termination OR else as payload')
deployProvDcnCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 13, 1, 4), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnCapAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnCapAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
deployProvDcnCapExternalVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 13, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnCapExternalVid.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnCapExternalVid.setDescription('External VID')
deployProvDcnCapLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnCapLanAid.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnCapLanAid.setDescription('AID of LAN')
deployProvDcnDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 14), )
if mibBuilder.loadTexts: deployProvDcnDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnDefaultsTable.setDescription('Contains entries for provisioning dcnChannel.')
deployProvDcnDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 14, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvDcnDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnDefaultsEntry.setDescription('All dcnChannel which are provisioned(or are during provisioning)\n         will have an entry in this table.')
deployProvDcnDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 14, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnDefaultsRowStatus.setDescription('RowStatus')
deployProvDcnDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 14, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnDefaultsForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnDefaultsForceDestroy.setDescription('Forced Destroy')
deployProvDcnDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 14, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnDefaultsType.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnDefaultsType.setDescription('The TYPE defines the transport service type as wrapper\n         with wrapper layer termination OR else as payload')
deployProvDcnDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 14, 1, 4), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnDefaultsAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnDefaultsAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
deployProvDcnDefaultsExternalVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 14, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnDefaultsExternalVid.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnDefaultsExternalVid.setDescription('External VID')
deployProvDcnDefaultsLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 14, 1, 6), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnDefaultsLanAid.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnDefaultsLanAid.setDescription('AID of LAN')
deployProvPppIpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15), )
if mibBuilder.loadTexts: deployProvPppIpTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpTable.setDescription('Contains entries for provisioning PppIp.')
deployProvPppIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvPppIpEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpEntry.setDescription('All PppIp which are provisioned(or are during provisioning) will\n         have an entry in this table.')
deployProvPppIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpRowStatus.setDescription('RowStatus')
deployProvPppIpForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpForceDestroy.setDescription('Forced Destroy')
deployProvPppIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 3), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpType.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpType.setDescription('The TYPE defines the transport service type as wrapper\n         with wrapper layer termination OR else as payload')
deployProvPppIpNearEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpNearEndIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpNearEndIp.setDescription('IP Address assigned to PPP Termination Point on Near-End NE.\n         Defaults to System IP address')
deployProvPppIpFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpFarEndIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpFarEndIp.setDescription('IP Address assigned to PPP Termination Point on Far-End NE. Default\n         is set by NE System on LINK establishment if FENDIPACPT = Y')
deployProvPppIpBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1312), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('kbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpBitrate.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpBitrate.setDescription('Provisioned max. bitrate of transmitter in PPP Link established over ECC')
deployProvPppIpOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 7), FspR7OspfMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpOspf.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpOspf.setDescription('OSPF Routing (Dynamic)')
deployProvPppIpMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpMetric.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpMetric.setDescription('Routing Metric')
deployProvPppIpDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpDefaultGateway.setStatus('deprecated')
if mibBuilder.loadTexts: deployProvPppIpDefaultGateway.setDescription('If Y then a default router entry with thid PPPIP as gateway\n         will be set in the routing table if no default router is present\n         yet. It can be enabled on multiple PPPIP instances. But this\n         were an unlogical configuration.')
deployProvPppIpProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 10), FspR7NoYes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpProxyArp.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpProxyArp.setDescription('If enabled then ARP requests for FENDIP (coming in on another\n         interface in the same subnet as FENDIP) will be replied too.')
deployProvPppIpAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 11), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
deployProvPppIpAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpAreaId.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpAreaId.setDescription('OSPF Area ID for IP Interface')
deployProvPppIpBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 13), FspR7Baund()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpBaud.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpBaud.setDescription('Baud rate of the serial interface')
deployProvPppIpFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 14), FspR7FlowControlMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpFlowControl.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpFlowControl.setDescription('Flow Control mechanism')
deployProvPppIpIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 15, 1, 15), FspR7IpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPppIpIpType.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpIpType.setDescription('Type of IP configuration')
deployProvPppIpCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16), )
if mibBuilder.loadTexts: deployProvPppIpCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpCapTable.setDescription('Contains entries for provisioning PppIp.')
deployProvPppIpCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvPppIpCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpCapEntry.setDescription('All PppIp which are provisioned(or are during provisioning) will\n         have an entry in this table.')
deployProvPppIpCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpCapRowStatus.setDescription('RowStatus')
deployProvPppIpCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpCapForceDestroy.setDescription('Forced Destroy')
deployProvPppIpCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 3), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapType.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpCapType.setDescription('The TYPE defines the transport service type as wrapper\n         with wrapper layer termination OR else as payload')
deployProvPppIpCapNearEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 4), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapNearEndIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpCapNearEndIp.setDescription('IP Address assigned to PPP Termination Point on Near-End NE.\n         Defaults to System IP address')
deployProvPppIpCapFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 5), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapFarEndIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpCapFarEndIp.setDescription('IP Address assigned to PPP Termination Point on Far-End NE. Default\n         is set by NE System on LINK establishment if FENDIPACPT = Y')
deployProvPppIpCapBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 6), FspR7Unsigned32Caps()).setUnits('kbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapBitrate.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpCapBitrate.setDescription('Provisioned max. bitrate of transmitter in PPP Link established over ECC')
deployProvPppIpCapOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 7), FspR7OspfModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapOspf.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpCapOspf.setDescription('OSPF Routing (Dynamic)')
deployProvPppIpCapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 8), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapMetric.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpCapMetric.setDescription('Routing Metric')
deployProvPppIpCapDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 9), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapDefaultGateway.setStatus('deprecated')
if mibBuilder.loadTexts: deployProvPppIpCapDefaultGateway.setDescription('If Y then a default router entry with thid PPPIP as gateway\n         will be set in the routing table if no default router is present\n         yet. It can be enabled on multiple PPPIP instances. But this\n         were an unlogical configuration.')
deployProvPppIpCapProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 10), FspR7NoYesCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapProxyArp.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpCapProxyArp.setDescription('If enabled then ARP requests for FENDIP (coming in on another\n         interface in the same subnet as FENDIP) will be replied too.')
deployProvPppIpCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 11), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpCapAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
deployProvPppIpCapAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 12), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapAreaId.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpCapAreaId.setDescription('OSPF Area ID for IP Interface')
deployProvPppIpCapBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 13), FspR7BaundCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapBaud.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpCapBaud.setDescription('Baud rate of the serial interface')
deployProvPppIpCapFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 14), FspR7FlowControlModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapFlowControl.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpCapFlowControl.setDescription('Flow Control mechanism')
deployProvPppIpCapIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 16, 1, 15), FspR7IpTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpCapIpType.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpCapIpType.setDescription('Type of IP configuration')
deployProvPppIpDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17), )
if mibBuilder.loadTexts: deployProvPppIpDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpDefaultsTable.setDescription('Contains entries for provisioning PppIp.')
deployProvPppIpDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvPppIpDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpDefaultsEntry.setDescription('All PppIp which are provisioned(or are during provisioning) will\n         have an entry in this table.')
deployProvPppIpDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpDefaultsRowStatus.setDescription('RowStatus')
deployProvPppIpDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpDefaultsForceDestroy.setDescription('Forced Destroy')
deployProvPppIpDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsType.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpDefaultsType.setDescription('The TYPE defines the transport service type as wrapper\n         with wrapper layer termination OR else as payload')
deployProvPppIpDefaultsNearEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsNearEndIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpDefaultsNearEndIp.setDescription('IP Address assigned to PPP Termination Point on Near-End NE.\n         Defaults to System IP address')
deployProvPppIpDefaultsFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsFarEndIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpDefaultsFarEndIp.setDescription('IP Address assigned to PPP Termination Point on Far-End NE. Default\n         is set by NE System on LINK establishment if FENDIPACPT = Y')
deployProvPppIpDefaultsBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1312), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('kbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsBitrate.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpDefaultsBitrate.setDescription('Provisioned max. bitrate of transmitter in PPP Link established over ECC')
deployProvPppIpDefaultsOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 7), FspR7OspfMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsOspf.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpDefaultsOspf.setDescription('OSPF Routing (Dynamic)')
deployProvPppIpDefaultsMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsMetric.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpDefaultsMetric.setDescription('Routing Metric')
deployProvPppIpDefaultsDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsDefaultGateway.setStatus('deprecated')
if mibBuilder.loadTexts: deployProvPppIpDefaultsDefaultGateway.setDescription('If Y then a default router entry with thid PPPIP as gateway\n         will be set in the routing table if no default router is present\n         yet. It can be enabled on multiple PPPIP instances. But this\n         were an unlogical configuration.')
deployProvPppIpDefaultsProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 10), FspR7NoYes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsProxyArp.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpDefaultsProxyArp.setDescription('If enabled then ARP requests for FENDIP (coming in on another\n         interface in the same subnet as FENDIP) will be replied too.')
deployProvPppIpDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 11), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpDefaultsAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
deployProvPppIpDefaultsAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsAreaId.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpDefaultsAreaId.setDescription('OSPF Area ID for IP Interface')
deployProvPppIpDefaultsBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 13), FspR7Baund()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsBaud.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpDefaultsBaud.setDescription('Baud rate of the serial interface')
deployProvPppIpDefaultsFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 14), FspR7FlowControlMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsFlowControl.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpDefaultsFlowControl.setDescription('Flow Control mechanism')
deployProvPppIpDefaultsIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 17, 1, 15), FspR7IpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPppIpDefaultsIpType.setStatus('current')
if mibBuilder.loadTexts: deployProvPppIpDefaultsIpType.setDescription('Type of IP configuration')
deployProvCrsDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 18), )
if mibBuilder.loadTexts: deployProvCrsDcnTable.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnTable.setDescription('Contains entries for provisioning CrsDcn.')
deployProvCrsDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 18, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvCrsDcnEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnEntry.setDescription('All CrsDcn which are provisioned(or are during provisioning)\n         will have an entry in this table.')
deployProvCrsDcnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 18, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCrsDcnRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnRowStatus.setDescription('RowStatus')
deployProvCrsDcnForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 18, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCrsDcnForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnForceDestroy.setDescription('Forced Destroy')
deployProvCrsDcnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 18, 1, 3), FspR7TypeConnection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCrsDcnType.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnType.setDescription('Type of Cross-Connect')
deployProvCrsDcnLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 18, 1, 4), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCrsDcnLink.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnLink.setDescription('Address Identifier of PPPIP LINK Entity.')
deployProvCrsDcnEcc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 18, 1, 5), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCrsDcnEcc.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnEcc.setDescription('Address Identifier of ECC Entity.')
deployProvCrsDcnCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 19), )
if mibBuilder.loadTexts: deployProvCrsDcnCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnCapTable.setDescription('Contains entries for provisioning CrsDcn.')
deployProvCrsDcnCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 19, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvCrsDcnCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnCapEntry.setDescription('All CrsDcn which are provisioned(or are during provisioning)\n         will have an entry in this table.')
deployProvCrsDcnCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 19, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCrsDcnCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnCapRowStatus.setDescription('RowStatus')
deployProvCrsDcnCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 19, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCrsDcnCapForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnCapForceDestroy.setDescription('Forced Destroy')
deployProvCrsDcnCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 19, 1, 3), FspR7TypeConnectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCrsDcnCapType.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnCapType.setDescription('Type of Cross-Connect')
deployProvCrsDcnCapLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 19, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCrsDcnCapLink.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnCapLink.setDescription('Address Identifier of PPPIP LINK Entity.')
deployProvCrsDcnCapEcc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 19, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCrsDcnCapEcc.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnCapEcc.setDescription('Address Identifier of ECC Entity.')
deployProvCrsDcnDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 20), )
if mibBuilder.loadTexts: deployProvCrsDcnDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnDefaultsTable.setDescription('Contains entries for provisioning CrsDcn.')
deployProvCrsDcnDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 20, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvCrsDcnDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnDefaultsEntry.setDescription('All CrsDcn which are provisioned(or are during provisioning)\n         will have an entry in this table.')
deployProvCrsDcnDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 20, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCrsDcnDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnDefaultsRowStatus.setDescription('RowStatus')
deployProvCrsDcnDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 20, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCrsDcnDefaultsForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnDefaultsForceDestroy.setDescription('Forced Destroy')
deployProvCrsDcnDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 20, 1, 3), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCrsDcnDefaultsType.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnDefaultsType.setDescription('Type of Cross-Connect')
deployProvCrsDcnDefaultsLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 20, 1, 4), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCrsDcnDefaultsLink.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnDefaultsLink.setDescription('Address Identifier of PPPIP LINK Entity.')
deployProvCrsDcnDefaultsEcc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 20, 1, 5), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCrsDcnDefaultsEcc.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnDefaultsEcc.setDescription('Address Identifier of ECC Entity.')
deployProvCrsDcnLinkAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 21), )
if mibBuilder.loadTexts: deployProvCrsDcnLinkAidCapsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnLinkAidCapsTable.setDescription('')
deployProvCrsDcnLinkAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 21, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvCrsDcnLinkAidCapsIndex"))
if mibBuilder.loadTexts: deployProvCrsDcnLinkAidCapsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnLinkAidCapsEntry.setDescription('')
deployProvCrsDcnLinkAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 21, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCrsDcnLinkAidCapsIndex.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnLinkAidCapsIndex.setDescription('Address Identifier of PPPIP LINK Entity.')
deployProvCrsDcnEccAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 22), )
if mibBuilder.loadTexts: deployProvCrsDcnEccAidCapsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnEccAidCapsTable.setDescription('')
deployProvCrsDcnEccAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 22, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvCrsDcnLinkAidCapsIndex"))
if mibBuilder.loadTexts: deployProvCrsDcnEccAidCapsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnEccAidCapsEntry.setDescription('')
deployProvCrsDcnEccAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 22, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCrsDcnEccAidCapsIndex.setStatus('current')
if mibBuilder.loadTexts: deployProvCrsDcnEccAidCapsIndex.setDescription('Address Identifier of ECC Entity.')
deployProvApsPeerAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 23), )
if mibBuilder.loadTexts: deployProvApsPeerAidCapsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvApsPeerAidCapsTable.setDescription('')
deployProvApsPeerAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 23, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvApsWorkingAidCapsIndex"))
if mibBuilder.loadTexts: deployProvApsPeerAidCapsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvApsPeerAidCapsEntry.setDescription('')
deployProvApsPeerAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 23, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvApsPeerAidCapsIndex.setStatus('current')
if mibBuilder.loadTexts: deployProvApsPeerAidCapsIndex.setDescription('AID of Protection Partner involved in the protection group.')
deployProvLanTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 24), )
if mibBuilder.loadTexts: deployProvLanTable.setStatus('current')
if mibBuilder.loadTexts: deployProvLanTable.setDescription('Contains entries for provisioning LANIp.')
deployProvLanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 24, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvLanEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvLanEntry.setDescription('All LANIp which are provisioned(or are during provisioning) will\n         have an entry in this table.')
deployProvLanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 24, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLanRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvLanRowStatus.setDescription('RowStatus')
deployProvLanForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 24, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLanForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvLanForceDestroy.setDescription('Forced Destroy')
deployProvLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 24, 1, 3), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLanType.setStatus('current')
if mibBuilder.loadTexts: deployProvLanType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
deployProvLanOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 24, 1, 4), FspR7OspfMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLanOspf.setStatus('current')
if mibBuilder.loadTexts: deployProvLanOspf.setDescription('OSPF Routing (Dynamic)')
deployProvLanMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 24, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLanMetric.setStatus('current')
if mibBuilder.loadTexts: deployProvLanMetric.setDescription('Routing Metric')
deployProvLanAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 24, 1, 6), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLanAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvLanAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
deployProvLanAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 24, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLanAreaId.setStatus('current')
if mibBuilder.loadTexts: deployProvLanAreaId.setDescription('OSPF Area ID for IP Interface')
deployProvLanIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 24, 1, 8), FspR7IpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLanIpType.setStatus('current')
if mibBuilder.loadTexts: deployProvLanIpType.setDescription('Type of IP configuration')
deployProvLanIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 24, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLanIpAddr.setStatus('current')
if mibBuilder.loadTexts: deployProvLanIpAddr.setDescription('IP Address assigned to LAN IP Interface')
deployProvLanIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 24, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLanIpMask.setStatus('current')
if mibBuilder.loadTexts: deployProvLanIpMask.setDescription('IP MASK assigned to LAN IP Interface')
deployProvLanCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 25), )
if mibBuilder.loadTexts: deployProvLanCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvLanCapTable.setDescription('Contains entries for provisioning LANIp.')
deployProvLanCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 25, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvLanCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvLanCapEntry.setDescription('All LANIp which are provisioned(or are during provisioning) will\n         have an entry in this table.')
deployProvLanCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 25, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvLanCapRowStatus.setDescription('RowStatus')
deployProvLanCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 25, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanCapForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvLanCapForceDestroy.setDescription('Forced Destroy')
deployProvLanCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 25, 1, 3), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanCapType.setStatus('current')
if mibBuilder.loadTexts: deployProvLanCapType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
deployProvLanCapOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 25, 1, 4), FspR7OspfModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanCapOspf.setStatus('current')
if mibBuilder.loadTexts: deployProvLanCapOspf.setDescription('OSPF Routing (Dynamic)')
deployProvLanCapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 25, 1, 5), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanCapMetric.setStatus('current')
if mibBuilder.loadTexts: deployProvLanCapMetric.setDescription('Routing Metric')
deployProvLanCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 25, 1, 6), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanCapAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvLanCapAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
deployProvLanCapAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 25, 1, 7), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanCapAreaId.setStatus('current')
if mibBuilder.loadTexts: deployProvLanCapAreaId.setDescription('OSPF Area ID for IP Interface')
deployProvLanCapIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 25, 1, 8), FspR7IpTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanCapIpType.setStatus('current')
if mibBuilder.loadTexts: deployProvLanCapIpType.setDescription('Type of IP configuration')
deployProvLanCapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 25, 1, 9), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanCapIpAddr.setStatus('current')
if mibBuilder.loadTexts: deployProvLanCapIpAddr.setDescription('IP Address assigned to LAN IP Interface')
deployProvLanCapIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 25, 1, 10), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanCapIpMask.setStatus('current')
if mibBuilder.loadTexts: deployProvLanCapIpMask.setDescription('IP MASK assigned to LAN IP Interface')
deployProvLanDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 26), )
if mibBuilder.loadTexts: deployProvLanDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvLanDefaultsTable.setDescription('Contains entries for provisioning LANIp.')
deployProvLanDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 26, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvLanDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvLanDefaultsEntry.setDescription('All LANIp which are provisioned(or are during provisioning) will\n         have an entry in this table.')
deployProvLanDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 26, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvLanDefaultsRowStatus.setDescription('RowStatus')
deployProvLanDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 26, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanDefaultsForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvLanDefaultsForceDestroy.setDescription('Forced Destroy')
deployProvLanDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 26, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanDefaultsType.setStatus('current')
if mibBuilder.loadTexts: deployProvLanDefaultsType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
deployProvLanDefaultsOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 26, 1, 4), FspR7OspfMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanDefaultsOspf.setStatus('current')
if mibBuilder.loadTexts: deployProvLanDefaultsOspf.setDescription('OSPF Routing (Dynamic)')
deployProvLanDefaultsMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 26, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanDefaultsMetric.setStatus('current')
if mibBuilder.loadTexts: deployProvLanDefaultsMetric.setDescription('Routing Metric')
deployProvLanDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 26, 1, 6), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanDefaultsAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvLanDefaultsAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
deployProvLanDefaultsAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 26, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanDefaultsAreaId.setStatus('current')
if mibBuilder.loadTexts: deployProvLanDefaultsAreaId.setDescription('OSPF Area ID for IP Interface')
deployProvLanDefaultsIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 26, 1, 8), FspR7IpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanDefaultsIpType.setStatus('current')
if mibBuilder.loadTexts: deployProvLanDefaultsIpType.setDescription('Type of IP configuration')
deployProvLanDefaultsIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 26, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanDefaultsIpAddr.setStatus('current')
if mibBuilder.loadTexts: deployProvLanDefaultsIpAddr.setDescription('IP Address assigned to LAN IP Interface')
deployProvLanDefaultsIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 26, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLanDefaultsIpMask.setStatus('current')
if mibBuilder.loadTexts: deployProvLanDefaultsIpMask.setDescription('IP MASK assigned to LAN IP Interface')
deployProvModuleLanAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 27), )
if mibBuilder.loadTexts: deployProvModuleLanAidCapsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleLanAidCapsTable.setDescription('')
deployProvModuleLanAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 27, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvModuleLanAidCapsIndex"))
if mibBuilder.loadTexts: deployProvModuleLanAidCapsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleLanAidCapsEntry.setDescription('')
deployProvModuleLanAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 27, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvModuleLanAidCapsIndex.setStatus('current')
if mibBuilder.loadTexts: deployProvModuleLanAidCapsIndex.setDescription('AID of LAN')
deployProvTifInputTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 28), )
if mibBuilder.loadTexts: deployProvTifInputTable.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputTable.setDescription('Contains entries for provisioning of TIF alarm.')
deployProvTifInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 28, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvTifInputEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputEntry.setDescription('All TIF alarms which are provisioned(or during deployProv)\n         will have an entry in this table.')
deployProvTifInputRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 28, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTifInputRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputRowStatus.setDescription('RowStatus')
deployProvTifInputForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 28, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTifInputForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputForceDestroy.setDescription('Forced Destroy')
deployProvTifInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 28, 1, 3), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTifInputType.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
deployProvTifInputTifAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 28, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTifInputTifAlarmType.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputTifAlarmType.setDescription('Telemetry interface alarm type')
deployProvTifInputTifAlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 28, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTifInputTifAlarmMessage.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputTifAlarmMessage.setDescription('Telemetry interface alarm message')
deployProvTifInputInvertTifInputLogic = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 28, 1, 6), FspR7InvertTelemetryInputLogic()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTifInputInvertTifInputLogic.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputInvertTifInputLogic.setDescription('Invert telemetry interface input logic')
deployProvTifInputAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 28, 1, 7), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTifInputAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputAdmin.setDescription('The Adminstrative State.')
deployProvTifInputCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 29), )
if mibBuilder.loadTexts: deployProvTifInputCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputCapTable.setDescription('Contains entries for provisioning of TIF alarm.')
deployProvTifInputCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 29, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvTifInputCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputCapEntry.setDescription('All TIF alarms which are provisioned(or during deployProv)\n         will have an entry in this table.')
deployProvTifInputCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 29, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputCapRowStatus.setDescription('RowStatus')
deployProvTifInputCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 29, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputCapForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputCapForceDestroy.setDescription('Forced Destroy')
deployProvTifInputCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 29, 1, 3), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputCapType.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputCapType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
deployProvTifInputCapTifAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 29, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputCapTifAlarmType.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputCapTifAlarmType.setDescription('Telemetry interface alarm type')
deployProvTifInputCapTifAlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 29, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputCapTifAlarmMessage.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputCapTifAlarmMessage.setDescription('Telemetry interface alarm message')
deployProvTifInputCapInvertTifInputLogic = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 29, 1, 6), FspR7InvertTelemetryInputLogicCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputCapInvertTifInputLogic.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputCapInvertTifInputLogic.setDescription('Invert telemetry interface input logic')
deployProvTifInputCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 29, 1, 7), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputCapAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputCapAdmin.setDescription('The Adminstrative State.')
deployProvTifInputDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 30), )
if mibBuilder.loadTexts: deployProvTifInputDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputDefaultsTable.setDescription('Contains entries for provisioning of TIF alarm.')
deployProvTifInputDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 30, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvTifInputDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputDefaultsEntry.setDescription('All TIF alarms which are provisioned(or during deployProv)\n         will have an entry in this table.')
deployProvTifInputDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 30, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputDefaultsRowStatus.setDescription('RowStatus')
deployProvTifInputDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 30, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputDefaultsForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputDefaultsForceDestroy.setDescription('Forced Destroy')
deployProvTifInputDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 30, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputDefaultsType.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputDefaultsType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
deployProvTifInputDefaultsTifAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 30, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputDefaultsTifAlarmType.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputDefaultsTifAlarmType.setDescription('Telemetry interface alarm type')
deployProvTifInputDefaultsTifAlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 30, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputDefaultsTifAlarmMessage.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputDefaultsTifAlarmMessage.setDescription('Telemetry interface alarm message')
deployProvTifInputDefaultsInvertTifInputLogic = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 30, 1, 6), FspR7InvertTelemetryInputLogic()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputDefaultsInvertTifInputLogic.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputDefaultsInvertTifInputLogic.setDescription('Invert telemetry interface input logic')
deployProvTifInputDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 30, 1, 7), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifInputDefaultsAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvTifInputDefaultsAdmin.setDescription('The Adminstrative State.')
deployProvTifOutputTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 31), )
if mibBuilder.loadTexts: deployProvTifOutputTable.setStatus('current')
if mibBuilder.loadTexts: deployProvTifOutputTable.setDescription('Contains entries for provisioning of TIF alarm.')
deployProvTifOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 31, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvTifOutputEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvTifOutputEntry.setDescription('All TIF alarms which are provisioned(or during deployProv)\n         will have an entry in this table.')
deployProvTifOutputRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 31, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTifOutputRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvTifOutputRowStatus.setDescription('RowStatus')
deployProvTifOutputForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 31, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTifOutputForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvTifOutputForceDestroy.setDescription('Forced Destroy')
deployProvTifOutputType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 31, 1, 3), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTifOutputType.setStatus('current')
if mibBuilder.loadTexts: deployProvTifOutputType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
deployProvTifOutputTelemetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 31, 1, 4), FspR7TelemetryOutput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTifOutputTelemetry.setStatus('current')
if mibBuilder.loadTexts: deployProvTifOutputTelemetry.setDescription('Telemetry interface output provision')
deployProvTifOutputAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 31, 1, 5), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTifOutputAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvTifOutputAdmin.setDescription('The Adminstrative State.')
deployProvTifOutputCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 32), )
if mibBuilder.loadTexts: deployProvTifOutputCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvTifOutputCapTable.setDescription('Contains entries for provisioning of TIF alarm.')
deployProvTifOutputCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 32, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvTifOutputCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvTifOutputCapEntry.setDescription('All TIF alarms which are provisioned(or during deployProv)\n         will have an entry in this table.')
deployProvTifOutputCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 32, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifOutputCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvTifOutputCapRowStatus.setDescription('RowStatus')
deployProvTifOutputCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 32, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifOutputCapForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvTifOutputCapForceDestroy.setDescription('Forced Destroy')
deployProvTifOutputCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 32, 1, 3), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifOutputCapType.setStatus('current')
if mibBuilder.loadTexts: deployProvTifOutputCapType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
deployProvTifOutputCapTelemetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 32, 1, 4), FspR7TelemetryOutputCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifOutputCapTelemetry.setStatus('current')
if mibBuilder.loadTexts: deployProvTifOutputCapTelemetry.setDescription('Telemetry interface output provision')
deployProvTifOutputCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 32, 1, 5), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifOutputCapAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvTifOutputCapAdmin.setDescription('The Adminstrative State.')
deployProvTifOutputDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 33), )
if mibBuilder.loadTexts: deployProvTifOutputDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvTifOutputDefaultsTable.setDescription('Contains entries for provisioning of TIF alarm.')
deployProvTifOutputDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 33, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvTifOutputDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvTifOutputDefaultsEntry.setDescription('All TIF alarms which are provisioned(or during deployProv)\n         will have an entry in this table.')
deployProvTifOutputDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 33, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifOutputDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvTifOutputDefaultsRowStatus.setDescription('RowStatus')
deployProvTifOutputDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 33, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifOutputDefaultsForceDestroy.setStatus('current')
if mibBuilder.loadTexts: deployProvTifOutputDefaultsForceDestroy.setDescription('Forced Destroy')
deployProvTifOutputDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 33, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifOutputDefaultsType.setStatus('current')
if mibBuilder.loadTexts: deployProvTifOutputDefaultsType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
deployProvTifOutputDefaultsTelemetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 33, 1, 4), FspR7TelemetryOutput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifOutputDefaultsTelemetry.setStatus('current')
if mibBuilder.loadTexts: deployProvTifOutputDefaultsTelemetry.setDescription('Telemetry interface output provision')
deployProvTifOutputDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 33, 1, 5), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTifOutputDefaultsAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvTifOutputDefaultsAdmin.setDescription('The Adminstrative State.')
changeServiceDeployProvIfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40), )
if mibBuilder.loadTexts: changeServiceDeployProvIfTable.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTable.setDescription('')
changeServiceDeployProvIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: changeServiceDeployProvIfEntry.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfEntry.setDescription('')
changeServiceDeployProvIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfRowStatus.setDescription('RowStatus')
changeServiceDeployProvIfForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfForceDestroy.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfForceDestroy.setDescription('Forced Destroy')
changeServiceDeployProvIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 3), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfType.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer\n         termination OR else as payload')
changeServiceDeployProvIfPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 4), OtnPayloadType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfPayload.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfPayload.setDescription('The payload of the interface (inside a transport overhead).\n         Relevant e. g. for OTN cards which wrap a payload into an OTU1/2 wrapper.')
changeServiceDeployProvIfBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 5), FspR7PortBehaviour()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfBehaviour.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfBehaviour.setDescription('The configured behaviour of the interface. If configured as\n         a network interface, the interface will use a WDM laser.')
changeServiceDeployProvIfTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 6), OhTerminationLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTerminationLevel.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTerminationLevel.setDescription('Signal Tremination Level of Intrusive Access to Header Information.\n         Not used in 7.0, monitoring is one layer higher than TERM level,\n         if applicable. All conditions detected on monitoring layer will not\n         be reported (severity degradated to NR).')
changeServiceDeployProvIfAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 7), FspR7AlsMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfAlsMode.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfAlsMode.setDescription('A configuration request for the Automatic Laser Shutdown (ALS)\n         function. Refer to FspR7AlsMode Textual Convention for details.')
changeServiceDeployProvIfErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 8), FspR7ErrorFwdMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfErrorForwarding.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfErrorForwarding.setDescription('A configuration request for the error forwarding\n         function. Refer to FspR7ErrorFwdMode Textual Convention for details.')
changeServiceDeployProvIfLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 9), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfLaserOffDelayFunction.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfLaserOffDelayFunction.setDescription('A configuration request for the Laser Off Delay function. This function\n         delays turning off the laser as a consequent action to a defect.')
changeServiceDeployProvIfFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 10), FspR7FecType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfFecType.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfFecType.setDescription('Configuration of FEC type.')
changeServiceDeployProvIfTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 11), SonetTimingSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTimingSource.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTimingSource.setDescription('The timing source for this interface.\n         - internal: used in stand-alone, point-to-point topologies stand-alone (dedicated fiber operation).\n         - loopTiming: e.g. used in point-to-point via SONET network and feeder topologies. The default is\n         internal(1).')
changeServiceDeployProvIfTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 12), OtnTcmLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTcmALevel.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTcmALevel.setDescription('Configuration of TCMA level.')
changeServiceDeployProvIfTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 13), OtnTcmLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTcmBLevel.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTcmBLevel.setDescription('Configuration of TCMB level.')
changeServiceDeployProvIfSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 14), FspR7BERThreshold()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresSonetLine.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresSonetLine.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
changeServiceDeployProvIfSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresSdhMs.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresSdhMs.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period).\n         Defined as percentage Background Block Errors (30% default) evaluated\n         over a defined period (SDPER-RS).')
changeServiceDeployProvIfSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSignalDegradePeriod.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfSignalDegradePeriod.setDescription('The measurement period in seconds used together with\n         the deployProvIfSigDegThresSdhRegSect based on the block error counting method.\n         The valid range is 2..10,\n         The default being 7.')
changeServiceDeployProvIfAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 17), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfAutonegotiation.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfAutonegotiation.setDescription('Autonegotiation of the data rate')
changeServiceDeployProvIfBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 18), FspR7Bitrate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfBitrate.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfBitrate.setDescription('Provisioned data rate')
changeServiceDeployProvIfDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 19), EthDuplexMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfDuplex.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDuplex.setDescription('Duplex Mode Provision.')
changeServiceDeployProvIfFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 20), FspR7FlowControlMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfFlowControl.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfFlowControl.setDescription('Flow Control mechanism')
changeServiceDeployProvIfOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 21), FspR7Stuff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfOtnStuffing.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfOtnStuffing.setDescription('Indicates if bit/byte stuffing is used in the transport signal.')
changeServiceDeployProvIfSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresOtu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresOtu.setDescription('Background-Block-Error-Based Signal Degradation Definition for OTU')
changeServiceDeployProvIfSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 23), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegPeriodOtu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegPeriodOtu.setDescription('Integration Period for Signal degrade')
changeServiceDeployProvIfSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresOdu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresOdu.setDescription('Background-Block-Error-Based Signal Degradation Definition for ODU')
changeServiceDeployProvIfSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 25), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegPeriodOdu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegPeriodOdu.setDescription('Integration Period for Signal degrade')
changeServiceDeployProvIfSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresOduTcmA.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-A')
changeServiceDeployProvIfSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 27), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegPeriodOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegPeriodOduTcmA.setDescription('Integration Period for Signal degrade')
changeServiceDeployProvIfSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresOduTcmB.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-B')
changeServiceDeployProvIfSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 29), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegPeriodOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegPeriodOduTcmB.setDescription('Integration Period of TCMB Signal Segrade')
changeServiceDeployProvIfTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50, 0), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTilt.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTilt.setDescription('Change of optical channel power in dB over the complete transmission band')
changeServiceDeployProvIfGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 31), FspR7Gain()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfGain.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfGain.setDescription('Gain.')
changeServiceDeployProvIfAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 32), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfAdmin.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfAdmin.setDescription('The Adminstrative State.')
changeServiceDeployProvIfAttenuationGradient = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 33), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 30), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB/min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfAttenuationGradient.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfAttenuationGradient.setDescription("Attenuation Gradient Threshold on Receive Fiber. Applies to both\n         TRMT and RCV directions; but threshold violation is reported for\n         each direction separately by the 'tapping' alarms: INTRUDE-RCV\n         and INTRUDE-TRMT.")
changeServiceDeployProvIfSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 34), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresReceiver.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresReceiver.setDescription('Signal Degrade Threshold on Receiver. Reported as ATTRMT-SDHT to far end.')
changeServiceDeployProvIfTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 35), OtnTcmLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTcmCLevel.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTcmCLevel.setDescription('Activation of Tandem Connection Monitoring Instance C')
changeServiceDeployProvIfSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresOduTcmC.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-C')
changeServiceDeployProvIfSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 37), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegPeriodOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegPeriodOduTcmC.setDescription('Integration Period of TCMC Signal Segrade')
changeServiceDeployProvIfDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 38), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfDisparityCorrection.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDisparityCorrection.setDescription('Disparity correction')
changeServiceDeployProvIfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 39), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfIpAddr.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfIpAddr.setDescription('IP Address assigned to LAN IP Interface')
changeServiceDeployProvIfIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 40), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfIpMask.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfIpMask.setDescription('IP MASK assigned to LAN IP Interface')
changeServiceDeployProvIfOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 41), FspR7OspfMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfOspf.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfOspf.setDescription('OSPF Routing (Dynamic)')
changeServiceDeployProvIfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 42), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfMetric.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfMetric.setDescription('Routing Metric')
changeServiceDeployProvIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 43), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfAreaId.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfAreaId.setDescription('OSPF Area ID for IP Interface')
changeServiceDeployProvIfTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 44), SonetTraceForm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceFormSonetSection.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceFormSonetSection.setDescription('Byte-Length of Trace Compared to Expected')
changeServiceDeployProvIfTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 45), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceExpectedSonetSection.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceExpectedSonetSection.setDescription('Expected Sec/RS trace. NULL TRACE implies that no trace comparison is made.')
changeServiceDeployProvIfTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 46), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitSonetSection.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitSonetSection.setDescription('Sec/RS Trace to be Transmitted')
changeServiceDeployProvIfTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 47), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTimModeSonetSection.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTimModeSonetSection.setDescription('Detection of TIM Sonet Section Condition can be configured')
changeServiceDeployProvIfTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 48), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceExpectedOtu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceExpectedOtu.setDescription('Expected SAPI part of the OTU trace (15 character).\n         NULL TRACE implies that no trace comparison is made.')
changeServiceDeployProvIfTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 49), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitSapiOtu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitSapiOtu.setDescription('The transmitted SAPI part of the OTU trace (15 character)')
changeServiceDeployProvIfTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 50), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitDapiOtu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitDapiOtu.setDescription('The transmitted DAPI part of the OTU trace (15 character)')
changeServiceDeployProvIfTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 51), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitOpspOtu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitOpspOtu.setDescription('The transmitted Operator Specific part of the OTU trace (32 character)')
changeServiceDeployProvIfTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 52), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTimModeOtu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTimModeOtu.setDescription('Detection of TIM-OTU Condition can be configured')
changeServiceDeployProvIfTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 53), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceExpectedOdu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceExpectedOdu.setDescription('Expected SAPI part of the ODU trace (15 character).\n         NULL TRACE implies that no trace comparison is made.')
changeServiceDeployProvIfTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 54), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitSapiOdu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitSapiOdu.setDescription('The transmitted SAPI part of the ODU trace (15 character)')
changeServiceDeployProvIfTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitDapiOdu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitDapiOdu.setDescription('The transmitted DAPI part of the ODU trace (15 character)')
changeServiceDeployProvIfTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 56), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitOpspOdu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitOpspOdu.setDescription('The transmitted Operator Specific part of the ODU trace (32 character)')
changeServiceDeployProvIfTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 57), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTimModeOdu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTimModeOdu.setDescription('Detection of TIM-ODU Condition can be configured')
changeServiceDeployProvIfTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 58), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceExpectedOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceExpectedOduTcmA.setDescription('Expected SAPI part of the TCMA trace (15 character).\n         NULL TRACE-TCM implies that no trace comparison is made.')
changeServiceDeployProvIfTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 59), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitSapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitSapiOduTcmA.setDescription('The transmitted SAPI part of the TCMA trace (15 character)')
changeServiceDeployProvIfTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 60), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitDapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitDapiOduTcmA.setDescription('The transmitted DAPI part of the TCMA trace (15 character)')
changeServiceDeployProvIfTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitOpspOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitOpspOduTcmA.setDescription('The transmitted Operator Specific part of the TCMA trace (32 character)')
changeServiceDeployProvIfTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 62), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTimModeOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTimModeOduTcmA.setDescription('Detection of TIM-TCMA Condition can be configured')
changeServiceDeployProvIfTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 63), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceExpectedOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceExpectedOduTcmB.setDescription('Expected SAPI part of the TCMB trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
changeServiceDeployProvIfTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitSapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitSapiOduTcmB.setDescription('The transmitted SAPI part of the TCMB trace (15 character)')
changeServiceDeployProvIfTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 65), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitDapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitDapiOduTcmB.setDescription('The transmitted DAPI part of the TCMB trace (15 character)')
changeServiceDeployProvIfTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 66), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitOpspOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitOpspOduTcmB.setDescription('The transmitted Operator Specific part of the TCMB trace (32 character)')
changeServiceDeployProvIfTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 67), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTimModeOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTimModeOduTcmB.setDescription('Detection of TIM-TCMB Condition can be configured')
changeServiceDeployProvIfTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 68), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceExpectedOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceExpectedOduTcmC.setDescription('Expected SAPI part of the TCMC trace (15 character).\n         NULL TRACE-TCM implies that no trace comparison is made.')
changeServiceDeployProvIfTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 69), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitSapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitSapiOduTcmC.setDescription('The transmitted SAPI part of the TCMC trace (15 character)')
changeServiceDeployProvIfTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 70), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitDapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitDapiOduTcmC.setDescription('The transmitted DAPI part of the TCMC trace (15 character)')
changeServiceDeployProvIfTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 71), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitOpspOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTraceTransmitOpspOduTcmC.setDescription('The transmitted Operator Specific part of the TCMC trace (32 character)')
changeServiceDeployProvIfTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 72), TimMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTimModeOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTimModeOduTcmC.setDescription('Detection of TIM-TCMC Condition can be configured')
changeServiceDeployProvIfChannelProvisioning = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 73), FspR7ChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfChannelProvisioning.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfChannelProvisioning.setDescription('Channel')
changeServiceDeployProvIfVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 74), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(50, 350), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfVariableGain.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfVariableGain.setDescription('Variable Gain of EDFA')
changeServiceDeployProvIfBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 75), FspR7OpticalBand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfBand.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfBand.setDescription('The The optical band of the module.')
changeServiceDeployProvIfSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 76), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10000), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThreshold.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThreshold.setDescription('Threshold for number of errors (CV or CV+DE) in one second')
changeServiceDeployProvIfSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 77), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegPeriodIntegration.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegPeriodIntegration.setDescription('Integration Period for Signal degrade')
changeServiceDeployProvIfVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 78), FspR7VoaMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfVoaMode.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfVoaMode.setDescription('VOA operating mode')
changeServiceDeployProvIfOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-250, 50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfOpticalSetPoint.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfOpticalSetPoint.setDescription('Sets the optical power for power equalization in ROADM or for channel power control in OPCM')
changeServiceDeployProvIfVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 80), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 300), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfVoaSetpoint.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfVoaSetpoint.setDescription('Sets the optical attenuation of VOA')
changeServiceDeployProvIfLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 81), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfLanAid.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfLanAid.setDescription('AID of LAN')
changeServiceDeployProvIfAprHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 82), Unsigned32()).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfAprHighThreshold.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfAprHighThreshold.setDescription('Automatic Power Reduction High Threshold')
changeServiceDeployProvIfPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(115, 138), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.2 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfPumpPower.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfPumpPower.setDescription('Total raman pump power')
changeServiceDeployProvIfWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 84), FspR7ChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfWdmRxChannel.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfWdmRxChannel.setDescription('Configuration of Rx optical channel')
changeServiceDeployProvIfSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 85), FspR7BERThresholdSection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresSonetSection.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresSonetSection.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
changeServiceDeployProvIfSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 86), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresSdhSection.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegThresSdhSection.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period).\n         Defined as percentage Background Block Errors (30% default) evaluated\n         over a defined period (SDPER-RS).')
changeServiceDeployProvIfSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 87), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegPeriodSdhSection.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfSigDegPeriodSdhSection.setDescription('Provisionable Signal Degrade Integration Period for SDH')
changeServiceDeployProvIfDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 88), FspR7DispersionModes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfDispersionMode.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDispersionMode.setDescription('Dispersion Compensation Mode')
changeServiceDeployProvIfDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50000, 50000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfDispersionSetting.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDispersionSetting.setDescription('Dispersion setting of dispersion comensating module')
changeServiceDeployProvIfIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 90), FspR7IpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfIpType.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfIpType.setDescription('Type of IP configuration')
changeServiceDeployProvIfOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 30), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfOffset.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfOffset.setDescription('Sets the offset for the mean optical power for power equalization in ROADM')
changeServiceDeployProvIfFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 92), FspR7InterfaceFunction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfFunction.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfFunction.setDescription('Interface Function')
changeServiceDeployProvIfFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 93), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfFarEndCommunication.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfFarEndCommunication.setDescription('Used for Optojack plugs; Communication to Far End Plug is observed')
changeServiceDeployProvIfEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 94), FspR7EqlzAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfEqlzAdmin.setDescription('Scheduled Equalization Administration')
changeServiceDeployProvIfTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 95), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfTxOffDelay.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfTxOffDelay.setDescription('Enable or disable TXOFFHOLD Period for Error Forwarding and LKDO-OFF Consequent Action.')
changeServiceDeployProvIfOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 96), FspR7OpuPayloadType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfOpuPayloadType.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfOpuPayloadType.setDescription('OPU Payload Type Indicator')
changeServiceDeployProvIfOscOpticalSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-250, 50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfOscOpticalSetpoint.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfOscOpticalSetpoint.setDescription('Sets the OSC optical power')
changeServiceDeployProvIfFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 98), FspR7FiberBrand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfFiberBrand.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfFiberBrand.setDescription('Brand of fiber present in the fiber plant')
changeServiceDeployProvIfXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 99), FspR7XfpDecisionThres()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfXfpDecisionThres.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfXfpDecisionThres.setDescription('XFP Decision threshold setting')
changeServiceDeployProvIfBip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 40, 1, 104), FspR7Bip()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeServiceDeployProvIfBip.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfBip.setDescription('Bit Interleaved Parity')
changeServiceDeployProvIfCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41), )
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTable.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTable.setDescription('')
changeServiceDeployProvIfCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: changeServiceDeployProvIfCapEntry.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapEntry.setDescription('')
changeServiceDeployProvIfCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapRowStatus.setDescription('RowStatus')
changeServiceDeployProvIfCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapForceDestroy.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapForceDestroy.setDescription('Forced Destroy')
changeServiceDeployProvIfCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 3), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapType.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer\n         termination OR else as payload')
changeServiceDeployProvIfCapPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 4), OtnPayloadTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapPayload.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapPayload.setDescription('The payload of the interface (inside a transport overhead).\n         Relevant e. g. for OTN cards which wrap a payload into an OTU1/2 wrapper.')
changeServiceDeployProvIfCapBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 5), FspR7PortBehaviourCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapBehaviour.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapBehaviour.setDescription('The configured behaviour of the interface. If configured as\n         a network interface, the interface will use a WDM laser.')
changeServiceDeployProvIfCapTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 6), OhTerminationLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTerminationLevel.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTerminationLevel.setDescription('Signal Tremination Level of Intrusive Access to Header Information.\n         Not used in 7.0, monitoring is one layer higher than TERM level,\n         if applicable. All conditions detected on monitoring layer will not\n         be reported (severity degradated to NR).')
changeServiceDeployProvIfCapAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 7), FspR7AlsModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapAlsMode.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapAlsMode.setDescription('A configuration request for the Automatic Laser Shutdown (ALS)\n         function. Refer to FspR7AlsMode Textual Convention for details.')
changeServiceDeployProvIfCapErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 8), FspR7ErrorFwdModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapErrorForwarding.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapErrorForwarding.setDescription('A configuration request for the error forwarding\n         function. Refer to FspR7ErrorFwdMode Textual Convention for details.')
changeServiceDeployProvIfCapLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 9), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapLaserOffDelayFunction.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapLaserOffDelayFunction.setDescription('A configuration request for the Laser Off Delay function. This function\n         delays turning off the laser as a consequent action to a defect.')
changeServiceDeployProvIfCapFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 10), FspR7FecTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapFecType.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapFecType.setDescription('Configuration of FEC type.')
changeServiceDeployProvIfCapTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 11), SonetTimingSourceCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTimingSource.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTimingSource.setDescription('The timing source for this interface.\n         - internal: used in stand-alone, point-to-point topologies stand-alone (dedicated fiber operation).\n         - loopTiming: e.g. used in point-to-point via SONET network and feeder topologies. The default is\n         internal(1).')
changeServiceDeployProvIfCapTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 12), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTcmALevel.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTcmALevel.setDescription('Configuration of TCMA level.')
changeServiceDeployProvIfCapTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 13), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTcmBLevel.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTcmBLevel.setDescription('Configuration of TCMB level.')
changeServiceDeployProvIfCapSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 14), FspR7BERThresholdCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresSonetLine.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresSonetLine.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
changeServiceDeployProvIfCapSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 15), FspR7Unsigned32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresSdhMs.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresSdhMs.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period).\n         Defined as percentage Background Block Errors (30% default) evaluated\n         over a defined period (SDPER-RS).')
changeServiceDeployProvIfCapSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 16), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSignalDegradePeriod.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSignalDegradePeriod.setDescription('The measurement period in seconds used together with\n         the deployProvIfSigDegThresSdhRegSect based on the block error counting method.\n         The valid range is 2..10,\n         The default being 7.')
changeServiceDeployProvIfCapAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 17), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapAutonegotiation.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapAutonegotiation.setDescription('Autonegotiation of the data rate')
changeServiceDeployProvIfCapBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 18), FspR7BitrateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapBitrate.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapBitrate.setDescription('Provisioned data rate')
changeServiceDeployProvIfCapDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 19), EthDuplexModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapDuplex.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapDuplex.setDescription('Duplex Mode Provision.')
changeServiceDeployProvIfCapFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 20), FspR7FlowControlModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapFlowControl.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapFlowControl.setDescription('Flow Control mechanism')
changeServiceDeployProvIfCapOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 21), FspR7StuffCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapOtnStuffing.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapOtnStuffing.setDescription('Indicates if bit/byte stuffing is used in the transport signal.')
changeServiceDeployProvIfCapSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 22), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresOtu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresOtu.setDescription('Background-Block-Error-Based Signal Degradation Definition for OTU')
changeServiceDeployProvIfCapSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 23), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegPeriodOtu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegPeriodOtu.setDescription('Integration Period for Signal degrade')
changeServiceDeployProvIfCapSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 24), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresOdu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresOdu.setDescription('Background-Block-Error-Based Signal Degradation Definition for ODU')
changeServiceDeployProvIfCapSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 25), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegPeriodOdu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegPeriodOdu.setDescription('Integration Period for Signal degrade')
changeServiceDeployProvIfCapSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 26), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresOduTcmA.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-A')
changeServiceDeployProvIfCapSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 27), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegPeriodOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegPeriodOduTcmA.setDescription('Integration Period for Signal degrade')
changeServiceDeployProvIfCapSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 28), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresOduTcmB.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-B')
changeServiceDeployProvIfCapSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 29), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegPeriodOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegPeriodOduTcmB.setDescription('Integration Period of TCMB Signal Segrade')
changeServiceDeployProvIfCapTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 30), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTilt.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTilt.setDescription('Change of optical channel power in dB over the complete transmission band')
changeServiceDeployProvIfCapGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 31), FspR7GainCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapGain.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapGain.setDescription('Gain.')
changeServiceDeployProvIfCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 32), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapAdmin.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapAdmin.setDescription('The Adminstrative State.')
changeServiceDeployProvIfCapAttenuationGradient = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 33), FspR7Unsigned32Caps()).setUnits('0.1 dB/min').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapAttenuationGradient.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapAttenuationGradient.setDescription("Attenuation Gradient Threshold on Receive Fiber. Applies to both\n         TRMT and RCV directions; but threshold violation is reported for\n         each direction separately by the 'tapping' alarms: INTRUDE-RCV\n         and INTRUDE-TRMT.")
changeServiceDeployProvIfCapSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 34), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresReceiver.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresReceiver.setDescription('Signal Degrade Threshold on Receiver. Reported as ATTRMT-SDHT to far end.')
changeServiceDeployProvIfCapTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 35), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTcmCLevel.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTcmCLevel.setDescription('Activation of Tandem Connection Monitoring Instance C')
changeServiceDeployProvIfCapSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 36), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresOduTcmC.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-C')
changeServiceDeployProvIfCapSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 37), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegPeriodOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegPeriodOduTcmC.setDescription('Integration Period of TCMC Signal Segrade')
changeServiceDeployProvIfCapDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 38), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapDisparityCorrection.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapDisparityCorrection.setDescription('Disparity correction')
changeServiceDeployProvIfCapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 39), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapIpAddr.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapIpAddr.setDescription('IP Address assigned to LAN IP Interface')
changeServiceDeployProvIfCapIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 40), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapIpMask.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapIpMask.setDescription('IP MASK assigned to LAN IP Interface')
changeServiceDeployProvIfCapOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 41), FspR7OspfModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapOspf.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapOspf.setDescription('OSPF Routing (Dynamic)')
changeServiceDeployProvIfCapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 42), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapMetric.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapMetric.setDescription('Routing Metric')
changeServiceDeployProvIfCapAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 43), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapAreaId.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapAreaId.setDescription('OSPF Area ID for IP Interface')
changeServiceDeployProvIfCapTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 44), SonetTraceFormCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceFormSonetSection.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceFormSonetSection.setDescription('Byte-Length of Trace Compared to Expected')
changeServiceDeployProvIfCapTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceExpectedSonetSection.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceExpectedSonetSection.setDescription('Expected Sec/RS trace. NULL TRACE implies that no trace comparison is made.')
changeServiceDeployProvIfCapTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitSonetSection.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitSonetSection.setDescription('Sec/RS Trace to be Transmitted')
changeServiceDeployProvIfCapTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 47), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTimModeSonetSection.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTimModeSonetSection.setDescription('Detection of TIM Sonet Section Condition can be configured')
changeServiceDeployProvIfCapTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceExpectedOtu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceExpectedOtu.setDescription('Expected SAPI part of the OTU trace (15 character).\n         NULL TRACE implies that no trace comparison is made.')
changeServiceDeployProvIfCapTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitSapiOtu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitSapiOtu.setDescription('The transmitted SAPI part of the OTU trace (15 character)')
changeServiceDeployProvIfCapTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitDapiOtu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitDapiOtu.setDescription('The transmitted DAPI part of the OTU trace (15 character)')
changeServiceDeployProvIfCapTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitOpspOtu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitOpspOtu.setDescription('The transmitted Operator Specific part of the OTU trace (32 character)')
changeServiceDeployProvIfCapTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 52), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTimModeOtu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTimModeOtu.setDescription('Detection of TIM-OTU Condition can be configured')
changeServiceDeployProvIfCapTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceExpectedOdu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceExpectedOdu.setDescription('Expected SAPI part of the ODU trace (15 character).\n         NULL TRACE implies that no trace comparison is made.')
changeServiceDeployProvIfCapTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitSapiOdu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitSapiOdu.setDescription('The transmitted SAPI part of the ODU trace (15 character)')
changeServiceDeployProvIfCapTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitDapiOdu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitDapiOdu.setDescription('The transmitted DAPI part of the ODU trace (15 character)')
changeServiceDeployProvIfCapTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitOpspOdu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitOpspOdu.setDescription('The transmitted Operator Specific part of the ODU trace (32 character)')
changeServiceDeployProvIfCapTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 57), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTimModeOdu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTimModeOdu.setDescription('Detection of TIM-ODU Condition can be configured')
changeServiceDeployProvIfCapTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceExpectedOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceExpectedOduTcmA.setDescription('Expected SAPI part of the TCMA trace (15 character).\n         NULL TRACE-TCM implies that no trace comparison is made.')
changeServiceDeployProvIfCapTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitSapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitSapiOduTcmA.setDescription('The transmitted SAPI part of the TCMA trace (15 character)')
changeServiceDeployProvIfCapTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitDapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitDapiOduTcmA.setDescription('The transmitted DAPI part of the TCMA trace (15 character)')
changeServiceDeployProvIfCapTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitOpspOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitOpspOduTcmA.setDescription('The transmitted Operator Specific part of the TCMA trace (32 character)')
changeServiceDeployProvIfCapTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 62), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTimModeOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTimModeOduTcmA.setDescription('Detection of TIM-TCMA Condition can be configured')
changeServiceDeployProvIfCapTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceExpectedOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceExpectedOduTcmB.setDescription('Expected SAPI part of the TCMB trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
changeServiceDeployProvIfCapTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitSapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitSapiOduTcmB.setDescription('The transmitted SAPI part of the TCMB trace (15 character)')
changeServiceDeployProvIfCapTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitDapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitDapiOduTcmB.setDescription('The transmitted DAPI part of the TCMB trace (15 character)')
changeServiceDeployProvIfCapTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitOpspOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitOpspOduTcmB.setDescription('The transmitted Operator Specific part of the TCMB trace (32 character)')
changeServiceDeployProvIfCapTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 67), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTimModeOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTimModeOduTcmB.setDescription('Detection of TIM-TCMB Condition can be configured')
changeServiceDeployProvIfCapTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceExpectedOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceExpectedOduTcmC.setDescription('Expected SAPI part of the TCMC trace (15 character).\n         NULL TRACE-TCM implies that no trace comparison is made.')
changeServiceDeployProvIfCapTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitSapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitSapiOduTcmC.setDescription('The transmitted SAPI part of the TCMC trace (15 character)')
changeServiceDeployProvIfCapTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitDapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitDapiOduTcmC.setDescription('The transmitted DAPI part of the TCMC trace (15 character)')
changeServiceDeployProvIfCapTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitOpspOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTraceTransmitOpspOduTcmC.setDescription('The transmitted Operator Specific part of the TCMC trace (32 character)')
changeServiceDeployProvIfCapTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 72), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTimModeOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTimModeOduTcmC.setDescription('Detection of TIM-TCMC Condition can be configured')
changeServiceDeployProvIfCapChannelProvisioning = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 73), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapChannelProvisioning.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapChannelProvisioning.setDescription('Channel')
changeServiceDeployProvIfCapVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 74), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapVariableGain.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapVariableGain.setDescription('Variable Gain of EDFA')
changeServiceDeployProvIfCapBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 75), FspR7OpticalBandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapBand.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapBand.setDescription('The The optical band of the module.')
changeServiceDeployProvIfCapSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 76), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThreshold.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThreshold.setDescription('Threshold for number of errors (CV or CV+DE) in one second')
changeServiceDeployProvIfCapSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 77), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegPeriodIntegration.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegPeriodIntegration.setDescription('Integration Period for Signal degrade')
changeServiceDeployProvIfCapVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 78), FspR7VoaModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapVoaMode.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapVoaMode.setDescription('VOA operating mode')
changeServiceDeployProvIfCapOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 79), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapOpticalSetPoint.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapOpticalSetPoint.setDescription('Sets the optical power for power equalization in ROADM or for channel power control in OPCM')
changeServiceDeployProvIfCapVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 80), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapVoaSetpoint.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapVoaSetpoint.setDescription('Sets the optical attenuation of VOA')
changeServiceDeployProvIfCapLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapLanAid.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapLanAid.setDescription('AID of LAN')
changeServiceDeployProvIfCapAprHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 82), FspR7Unsigned32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapAprHighThreshold.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapAprHighThreshold.setDescription('Automatic Power Reduction High Threshold')
changeServiceDeployProvIfCapPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 83), FspR7Integer32Caps()).setUnits('0.2 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapPumpPower.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapPumpPower.setDescription('Total raman pump power')
changeServiceDeployProvIfCapWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 84), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapWdmRxChannel.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapWdmRxChannel.setDescription('Configuration of Rx optical channel')
changeServiceDeployProvIfCapSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 85), FspR7BERThresholdSectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresSonetSection.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresSonetSection.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
changeServiceDeployProvIfCapSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 86), FspR7Unsigned32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresSdhSection.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegThresSdhSection.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period).\n         Defined as percentage Background Block Errors (30% default) evaluated\n         over a defined period (SDPER-RS).')
changeServiceDeployProvIfCapSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 87), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegPeriodSdhSection.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapSigDegPeriodSdhSection.setDescription('Provisionable Signal Degrade Integration Period for SDH')
changeServiceDeployProvIfCapDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 88), FspR7DispersionModesCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapDispersionMode.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapDispersionMode.setDescription('Dispersion Compensation Mode')
changeServiceDeployProvIfCapDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 89), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapDispersionSetting.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapDispersionSetting.setDescription('Dispersion setting of dispersion comensating module')
changeServiceDeployProvIfCapIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 90), FspR7IpTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapIpType.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapIpType.setDescription('Type of IP configuration')
changeServiceDeployProvIfCapOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 91), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapOffset.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapOffset.setDescription('Sets the offset for the mean optical power for power equalization in ROADM')
changeServiceDeployProvIfCapFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 92), FspR7InterfaceFunctionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapFunction.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapFunction.setDescription('Interface Function')
changeServiceDeployProvIfCapFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 93), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapFarEndCommunication.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapFarEndCommunication.setDescription('Used for Optojack plugs; Communication to Far End Plug is observed')
changeServiceDeployProvIfCapEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 94), FspR7EqlzAdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapEqlzAdmin.setDescription('Scheduled Equalization Administration')
changeServiceDeployProvIfCapTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 95), FspR7EnableDisableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTxOffDelay.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapTxOffDelay.setDescription('Enable or disable TXOFFHOLD Period for Error Forwarding and LKDO-OFF Consequent Action.')
changeServiceDeployProvIfCapOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 96), FspR7OpuPayloadTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapOpuPayloadType.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapOpuPayloadType.setDescription('OPU Payload Type Indicator')
changeServiceDeployProvIfCapOscOpticalSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 97), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapOscOpticalSetpoint.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapOscOpticalSetpoint.setDescription('Sets the OSC optical power')
changeServiceDeployProvIfCapFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 98), FspR7FiberBrandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapFiberBrand.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapFiberBrand.setDescription('Brand of fiber present in the fiber plant')
changeServiceDeployProvIfCapXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 99), FspR7XfpDecisionThresCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapXfpDecisionThres.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapXfpDecisionThres.setDescription('XFP Decision threshold setting')
changeServiceDeployProvIfCapBip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 41, 1, 104), FspR7BipCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfCapBip.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfCapBip.setDescription('Bit Interleaved Parity')
changeServiceDeployProvIfDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42), )
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTable.setDescription('')
changeServiceDeployProvIfDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsEntry.setDescription('')
changeServiceDeployProvIfDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsRowStatus.setDescription('RowStatus')
changeServiceDeployProvIfDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsForceDestroy.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsForceDestroy.setDescription('Forced Destroy')
changeServiceDeployProvIfDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsType.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer\n         termination OR else as payload')
changeServiceDeployProvIfDefaultsPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 4), OtnPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsPayload.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsPayload.setDescription('The payload of the interface (inside a transport overhead).\n         Relevant e. g. for OTN cards which wrap a payload into an OTU1/2 wrapper.')
changeServiceDeployProvIfDefaultsBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 5), FspR7PortBehaviour()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsBehaviour.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsBehaviour.setDescription('The configured behaviour of the interface. If configured as\n         a network interface, the interface will use a WDM laser.')
changeServiceDeployProvIfDefaultsTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 6), OhTerminationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTerminationLevel.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTerminationLevel.setDescription('Signal Tremination Level of Intrusive Access to Header Information.\n         Not used in 7.0, monitoring is one layer higher than TERM level,\n         if applicable. All conditions detected on monitoring layer will not\n         be reported (severity degradated to NR).')
changeServiceDeployProvIfDefaultsAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 7), FspR7AlsMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsAlsMode.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsAlsMode.setDescription('A configuration request for the Automatic Laser Shutdown (ALS)\n         function. Refer to FspR7AlsMode Textual Convention for details.')
changeServiceDeployProvIfDefaultsErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 8), FspR7ErrorFwdMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsErrorForwarding.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsErrorForwarding.setDescription('A configuration request for the error forwarding\n         function. Refer to FspR7ErrorFwdMode Textual Convention for details.')
changeServiceDeployProvIfDefaultsLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 9), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsLaserOffDelayFunction.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsLaserOffDelayFunction.setDescription('A configuration request for the Laser Off Delay function. This function\n         delays turning off the laser as a consequent action to a defect.')
changeServiceDeployProvIfDefaultsFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 10), FspR7FecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsFecType.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsFecType.setDescription('Configuration of FEC type.')
changeServiceDeployProvIfDefaultsTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 11), SonetTimingSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTimingSource.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTimingSource.setDescription('The timing source for this interface.\n         - internal: used in stand-alone, point-to-point topologies stand-alone (dedicated fiber operation).\n         - loopTiming: e.g. used in point-to-point via SONET network and feeder topologies. The default is\n         internal(1).')
changeServiceDeployProvIfDefaultsTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 12), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTcmALevel.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTcmALevel.setDescription('Configuration of TCMA level.')
changeServiceDeployProvIfDefaultsTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 13), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTcmBLevel.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTcmBLevel.setDescription('Configuration of TCMB level.')
changeServiceDeployProvIfDefaultsSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 14), FspR7BERThreshold()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresSonetLine.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresSonetLine.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
changeServiceDeployProvIfDefaultsSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresSdhMs.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresSdhMs.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period).\n         Defined as percentage Background Block Errors (30% default) evaluated\n         over a defined period (SDPER-RS).')
changeServiceDeployProvIfDefaultsSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSignalDegradePeriod.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSignalDegradePeriod.setDescription('The measurement period in seconds used together with\n         the deployProvIfSigDegThresSdhRegSect based on the block error counting method.\n         The valid range is 2..10,\n         The default being 7.')
changeServiceDeployProvIfDefaultsAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 17), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsAutonegotiation.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsAutonegotiation.setDescription('Autonegotiation of the data rate')
changeServiceDeployProvIfDefaultsBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 18), FspR7Bitrate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsBitrate.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsBitrate.setDescription('Provisioned data rate')
changeServiceDeployProvIfDefaultsDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 19), EthDuplexMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsDuplex.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsDuplex.setDescription('Duplex Mode Provision.')
changeServiceDeployProvIfDefaultsFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 20), FspR7FlowControlMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsFlowControl.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsFlowControl.setDescription('Flow Control mechanism')
changeServiceDeployProvIfDefaultsOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 21), FspR7Stuff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsOtnStuffing.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsOtnStuffing.setDescription('Indicates if bit/byte stuffing is used in the transport signal.')
changeServiceDeployProvIfDefaultsSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresOtu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresOtu.setDescription('Background-Block-Error-Based Signal Degradation Definition for OTU')
changeServiceDeployProvIfDefaultsSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 23), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegPeriodOtu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegPeriodOtu.setDescription('Integration Period for Signal degrade')
changeServiceDeployProvIfDefaultsSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresOdu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresOdu.setDescription('Background-Block-Error-Based Signal Degradation Definition for ODU')
changeServiceDeployProvIfDefaultsSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 25), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegPeriodOdu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegPeriodOdu.setDescription('Integration Period for Signal degrade')
changeServiceDeployProvIfDefaultsSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresOduTcmA.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-A')
changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 27), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmA.setDescription('Integration Period for Signal degrade')
changeServiceDeployProvIfDefaultsSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresOduTcmB.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-B')
changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 29), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmB.setDescription('Integration Period of TCMB Signal Segrade')
changeServiceDeployProvIfDefaultsTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50, 0), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTilt.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTilt.setDescription('Change of optical channel power in dB over the complete transmission band')
changeServiceDeployProvIfDefaultsGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 31), FspR7Gain()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsGain.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsGain.setDescription('Gain.')
changeServiceDeployProvIfDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 32), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsAdmin.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsAdmin.setDescription('The Adminstrative State.')
changeServiceDeployProvIfDefaultsAttenuationGradient = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 33), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 30), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB/min').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsAttenuationGradient.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsAttenuationGradient.setDescription("Attenuation Gradient Threshold on Receive Fiber. Applies to both\n         TRMT and RCV directions; but threshold violation is reported for\n         each direction separately by the 'tapping' alarms: INTRUDE-RCV\n         and INTRUDE-TRMT.")
changeServiceDeployProvIfDefaultsSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 34), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresReceiver.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresReceiver.setDescription('Signal Degrade Threshold on Receiver. Reported as ATTRMT-SDHT to far end.')
changeServiceDeployProvIfDefaultsTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 35), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTcmCLevel.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTcmCLevel.setDescription('Activation of Tandem Connection Monitoring Instance C')
changeServiceDeployProvIfDefaultsSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresOduTcmC.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-C')
changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 37), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmC.setDescription('Integration Period of TCMC Signal Segrade')
changeServiceDeployProvIfDefaultsDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 38), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsDisparityCorrection.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsDisparityCorrection.setDescription('Disparity correction')
changeServiceDeployProvIfDefaultsIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 39), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsIpAddr.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsIpAddr.setDescription('IP Address assigned to LAN IP Interface')
changeServiceDeployProvIfDefaultsIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 40), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsIpMask.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsIpMask.setDescription('IP MASK assigned to LAN IP Interface')
changeServiceDeployProvIfDefaultsOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 41), FspR7OspfMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsOspf.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsOspf.setDescription('OSPF Routing (Dynamic)')
changeServiceDeployProvIfDefaultsMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 42), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsMetric.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsMetric.setDescription('Routing Metric')
changeServiceDeployProvIfDefaultsAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 43), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsAreaId.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsAreaId.setDescription('OSPF Area ID for IP Interface')
changeServiceDeployProvIfDefaultsTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 44), SonetTraceForm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceFormSonetSection.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceFormSonetSection.setDescription('Byte-Length of Trace Compared to Expected')
changeServiceDeployProvIfDefaultsTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 45), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceExpectedSonetSection.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceExpectedSonetSection.setDescription('Expected Sec/RS trace. NULL TRACE implies that no trace comparison is made.')
changeServiceDeployProvIfDefaultsTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 46), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitSonetSection.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitSonetSection.setDescription('Sec/RS Trace to be Transmitted')
changeServiceDeployProvIfDefaultsTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 47), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTimModeSonetSection.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTimModeSonetSection.setDescription('Detection of TIM Sonet Section Condition can be configured')
changeServiceDeployProvIfDefaultsTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 48), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceExpectedOtu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceExpectedOtu.setDescription('Expected SAPI part of the OTU trace (15 character).\n         NULL TRACE implies that no trace comparison is made.')
changeServiceDeployProvIfDefaultsTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 49), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitSapiOtu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitSapiOtu.setDescription('The transmitted SAPI part of the OTU trace (15 character)')
changeServiceDeployProvIfDefaultsTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 50), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitDapiOtu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitDapiOtu.setDescription('The transmitted DAPI part of the OTU trace (15 character)')
changeServiceDeployProvIfDefaultsTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 51), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitOpspOtu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitOpspOtu.setDescription('The transmitted Operator Specific part of the OTU trace (32 character)')
changeServiceDeployProvIfDefaultsTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 52), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTimModeOtu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTimModeOtu.setDescription('Detection of TIM-OTU Condition can be configured')
changeServiceDeployProvIfDefaultsTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 53), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceExpectedOdu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceExpectedOdu.setDescription('Expected SAPI part of the ODU trace (15 character).\n         NULL TRACE implies that no trace comparison is made.')
changeServiceDeployProvIfDefaultsTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 54), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitSapiOdu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitSapiOdu.setDescription('The transmitted SAPI part of the ODU trace (15 character)')
changeServiceDeployProvIfDefaultsTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitDapiOdu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitDapiOdu.setDescription('The transmitted DAPI part of the ODU trace (15 character)')
changeServiceDeployProvIfDefaultsTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 56), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitOpspOdu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitOpspOdu.setDescription('The transmitted Operator Specific part of the ODU trace (32 character)')
changeServiceDeployProvIfDefaultsTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 57), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTimModeOdu.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTimModeOdu.setDescription('Detection of TIM-ODU Condition can be configured')
changeServiceDeployProvIfDefaultsTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 58), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceExpectedOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceExpectedOduTcmA.setDescription('Expected SAPI part of the TCMA trace (15 character).\n         NULL TRACE-TCM implies that no trace comparison is made.')
changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 59), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmA.setDescription('The transmitted SAPI part of the TCMA trace (15 character)')
changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 60), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmA.setDescription('The transmitted DAPI part of the TCMA trace (15 character)')
changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmA.setDescription('The transmitted Operator Specific part of the TCMA trace (32 character)')
changeServiceDeployProvIfDefaultsTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 62), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTimModeOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTimModeOduTcmA.setDescription('Detection of TIM-TCMA Condition can be configured')
changeServiceDeployProvIfDefaultsTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 63), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceExpectedOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceExpectedOduTcmB.setDescription('Expected SAPI part of the TCMB trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmB.setDescription('The transmitted SAPI part of the TCMB trace (15 character)')
changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 65), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmB.setDescription('The transmitted DAPI part of the TCMB trace (15 character)')
changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 66), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmB.setDescription('The transmitted Operator Specific part of the TCMB trace (32 character)')
changeServiceDeployProvIfDefaultsTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 67), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTimModeOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTimModeOduTcmB.setDescription('Detection of TIM-TCMB Condition can be configured')
changeServiceDeployProvIfDefaultsTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 68), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceExpectedOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceExpectedOduTcmC.setDescription('Expected SAPI part of the TCMC trace (15 character).\n         NULL TRACE-TCM implies that no trace comparison is made.')
changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 69), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmC.setDescription('The transmitted SAPI part of the TCMC trace (15 character)')
changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 70), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmC.setDescription('The transmitted DAPI part of the TCMC trace (15 character)')
changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 71), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmC.setDescription('The transmitted Operator Specific part of the TCMC trace (32 character)')
changeServiceDeployProvIfDefaultsTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 72), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTimModeOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTimModeOduTcmC.setDescription('Detection of TIM-TCMC Condition can be configured')
changeServiceDeployProvIfDefaultsChannelProvisioning = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 73), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsChannelProvisioning.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsChannelProvisioning.setDescription('Channel')
changeServiceDeployProvIfDefaultsVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 74), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(50, 350), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsVariableGain.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsVariableGain.setDescription('Variable Gain of EDFA')
changeServiceDeployProvIfDefaultsBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 75), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsBand.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsBand.setDescription('The The optical band of the module.')
changeServiceDeployProvIfDefaultsSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 76), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10000), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThreshold.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThreshold.setDescription('Threshold for number of errors (CV or CV+DE) in one second')
changeServiceDeployProvIfDefaultsSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 77), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegPeriodIntegration.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegPeriodIntegration.setDescription('Integration Period for Signal degrade')
changeServiceDeployProvIfDefaultsVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 78), FspR7VoaMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsVoaMode.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsVoaMode.setDescription('VOA operating mode')
changeServiceDeployProvIfDefaultsOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-250, 50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsOpticalSetPoint.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsOpticalSetPoint.setDescription('Sets the optical power for power equalization in ROADM or for channel power control in OPCM')
changeServiceDeployProvIfDefaultsVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 80), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 300), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsVoaSetpoint.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsVoaSetpoint.setDescription('Sets the optical attenuation of VOA')
changeServiceDeployProvIfDefaultsLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 81), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsLanAid.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsLanAid.setDescription('AID of LAN')
changeServiceDeployProvIfDefaultsAprHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 82), Unsigned32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsAprHighThreshold.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsAprHighThreshold.setDescription('Automatic Power Reduction High Threshold')
changeServiceDeployProvIfDefaultsPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(115, 138), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.2 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsPumpPower.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsPumpPower.setDescription('Total raman pump power')
changeServiceDeployProvIfDefaultsWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 84), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsWdmRxChannel.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsWdmRxChannel.setDescription('Configuration of Rx optical channel')
changeServiceDeployProvIfDefaultsSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 85), FspR7BERThresholdSection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresSonetSection.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresSonetSection.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
changeServiceDeployProvIfDefaultsSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 86), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresSdhSection.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegThresSdhSection.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period).\n         Defined as percentage Background Block Errors (30% default) evaluated\n         over a defined period (SDPER-RS).')
changeServiceDeployProvIfDefaultsSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 87), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 10), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegPeriodSdhSection.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsSigDegPeriodSdhSection.setDescription('Provisionable Signal Degrade Integration Period for SDH')
changeServiceDeployProvIfDefaultsDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 88), FspR7DispersionModes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsDispersionMode.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsDispersionMode.setDescription('Dispersion Compensation Mode')
changeServiceDeployProvIfDefaultsDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50000, 50000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsDispersionSetting.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsDispersionSetting.setDescription('Dispersion setting of dispersion comensating module')
changeServiceDeployProvIfDefaultsIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 90), FspR7IpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsIpType.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsIpType.setDescription('Type of IP configuration')
changeServiceDeployProvIfDefaultsOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 30), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsOffset.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsOffset.setDescription('Sets the offset for the mean optical power for power equalization in ROADM')
changeServiceDeployProvIfDefaultsFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 92), FspR7InterfaceFunction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsFunction.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsFunction.setDescription('Interface Function')
changeServiceDeployProvIfDefaultsFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 93), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsFarEndCommunication.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsFarEndCommunication.setDescription('Used for Optojack plugs; Communication to Far End Plug is observed')
changeServiceDeployProvIfDefaultsEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 94), FspR7EqlzAdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsEqlzAdmin.setDescription('Scheduled Equalization Administration')
changeServiceDeployProvIfDefaultsTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 95), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTxOffDelay.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsTxOffDelay.setDescription('Enable or disable TXOFFHOLD Period for Error Forwarding and LKDO-OFF Consequent Action.')
changeServiceDeployProvIfDefaultsOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 96), FspR7OpuPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsOpuPayloadType.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsOpuPayloadType.setDescription('OPU Payload Type Indicator')
changeServiceDeployProvIfDefaultsOscOpticalSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-250, 50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsOscOpticalSetpoint.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsOscOpticalSetpoint.setDescription('Sets the OSC optical power')
changeServiceDeployProvIfDefaultsFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 98), FspR7FiberBrand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsFiberBrand.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsFiberBrand.setDescription('Brand of fiber present in the fiber plant')
changeServiceDeployProvIfDefaultsXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 99), FspR7XfpDecisionThres()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsXfpDecisionThres.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsXfpDecisionThres.setDescription('XFP Decision threshold setting')
changeServiceDeployProvIfDefaultsBip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 42, 1, 104), FspR7Bip()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsBip.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfDefaultsBip.setDescription('Bit Interleaved Parity')
deployProvOpticalLinkTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 43), )
if mibBuilder.loadTexts: deployProvOpticalLinkTable.setStatus('current')
if mibBuilder.loadTexts: deployProvOpticalLinkTable.setDescription('')
deployProvOpticalLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 43, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvOpticalLinkEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvOpticalLinkEntry.setDescription('')
deployProvOpticalLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 43, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvOpticalLinkRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvOpticalLinkRowStatus.setDescription('RowStatus')
deployProvOpticalLinkTxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 43, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvOpticalLinkTxLineAttenuation.setStatus('current')
if mibBuilder.loadTexts: deployProvOpticalLinkTxLineAttenuation.setDescription("The Attenuation (in 0.1 dB) on line connected to\n         transmitter of this interface. If there is loss of signal\n         then line attenuation is -65535. The value -255 will be\n         returned if the value isn't available.")
deployProvOpticalLinkRxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 43, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvOpticalLinkRxLineAttenuation.setStatus('current')
if mibBuilder.loadTexts: deployProvOpticalLinkRxLineAttenuation.setDescription("The Attenuation (in 0.1 dB) on line connected to receiver\n         of this interface. If there is loss of signal then ine\n         attenuation is -65535. The value -255 will be returned if\n         the value isn't available.")
deployProvOpticalLinkFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 43, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvOpticalLinkFarEndLocation.setStatus('current')
if mibBuilder.loadTexts: deployProvOpticalLinkFarEndLocation.setDescription('')
deployProvOpticalLinkCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 44), )
if mibBuilder.loadTexts: deployProvOpticalLinkCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvOpticalLinkCapTable.setDescription('')
deployProvOpticalLinkCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 44, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvOpticalLinkCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvOpticalLinkCapEntry.setDescription('')
deployProvOpticalLinkCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 44, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvOpticalLinkCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvOpticalLinkCapRowStatus.setDescription('RowStatus')
deployProvOpticalLinkCapTxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 44, 1, 2), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvOpticalLinkCapTxLineAttenuation.setStatus('current')
if mibBuilder.loadTexts: deployProvOpticalLinkCapTxLineAttenuation.setDescription("The Attenuation (in 0.1 dB) on line connected to\n         transmitter of this interface. If there is loss of signal\n         then line attenuation is -65535. The value -255 will be\n         returned if the value isn't available.")
deployProvOpticalLinkCapRxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 44, 1, 3), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvOpticalLinkCapRxLineAttenuation.setStatus('current')
if mibBuilder.loadTexts: deployProvOpticalLinkCapRxLineAttenuation.setDescription("The Attenuation (in 0.1 dB) on line connected to receiver\n         of this interface. If there is loss of signal then ine\n         attenuation is -65535. The value -255 will be returned if\n         the value isn't available.")
deployProvOpticalLinkCapFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 44, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvOpticalLinkCapFarEndLocation.setStatus('current')
if mibBuilder.loadTexts: deployProvOpticalLinkCapFarEndLocation.setDescription('')
deployProvOpticalLinkDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 45), )
if mibBuilder.loadTexts: deployProvOpticalLinkDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvOpticalLinkDefaultsTable.setDescription('')
deployProvOpticalLinkDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 45, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvOpticalLinkDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvOpticalLinkDefaultsEntry.setDescription('')
deployProvOpticalLinkDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 45, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvOpticalLinkDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvOpticalLinkDefaultsRowStatus.setDescription('RowStatus')
deployProvOpticalLinkDefaultsTxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 45, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvOpticalLinkDefaultsTxLineAttenuation.setStatus('current')
if mibBuilder.loadTexts: deployProvOpticalLinkDefaultsTxLineAttenuation.setDescription("The Attenuation (in 0.1 dB) on line connected to\n         transmitter of this interface. If there is loss of signal\n         then line attenuation is -65535. The value -255 will be\n         returned if the value isn't available.")
deployProvOpticalLinkDefaultsRxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 45, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvOpticalLinkDefaultsRxLineAttenuation.setStatus('current')
if mibBuilder.loadTexts: deployProvOpticalLinkDefaultsRxLineAttenuation.setDescription("The Attenuation (in 0.1 dB) on line connected to receiver\n         of this interface. If there is loss of signal then ine\n         attenuation is -65535. The value -255 will be returned if\n         the value isn't available.")
deployProvOpticalLinkDefaultsFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 45, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvOpticalLinkDefaultsFarEndLocation.setStatus('current')
if mibBuilder.loadTexts: deployProvOpticalLinkDefaultsFarEndLocation.setDescription('')
deployProvVirtualOpticalChannelTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 46), )
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelTable.setStatus('current')
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelTable.setDescription('')
deployProvVirtualOpticalChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 46, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelEntry.setDescription('')
deployProvVirtualOpticalChannelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 46, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelRowStatus.setDescription('RowStatus')
deployProvVirtualOpticalChannelAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 46, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelAlias.setStatus('current')
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelAlias.setDescription('User Applied Descriptor')
deployProvVirtualOpticalChannelCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 47), )
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelCapTable.setDescription('')
deployProvVirtualOpticalChannelCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 47, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelCapEntry.setDescription('')
deployProvVirtualOpticalChannelCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 47, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelCapRowStatus.setDescription('RowStatus')
deployProvVirtualOpticalChannelCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 47, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelCapAlias.setStatus('current')
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelCapAlias.setDescription('User Applied Descriptor')
deployProvVirtualOpticalChannelDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 48), )
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelDefaultsTable.setDescription('')
deployProvVirtualOpticalChannelDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 48, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelDefaultsEntry.setDescription('')
deployProvVirtualOpticalChannelDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 48, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelDefaultsRowStatus.setDescription('RowStatus')
deployProvVirtualOpticalChannelDefaultsAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 48, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelDefaultsAlias.setStatus('current')
if mibBuilder.loadTexts: deployProvVirtualOpticalChannelDefaultsAlias.setDescription('User Applied Descriptor')
deployProvLogicalIfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49), )
if mibBuilder.loadTexts: deployProvLogicalIfTable.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfTable.setDescription('')
deployProvLogicalIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvLogicalIfEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfEntry.setDescription('')
deployProvLogicalIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfRowStatus.setDescription('RowStatus')
deployProvLogicalIfFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 2), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfFacilityType.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfFacilityType.setDescription('Facility Type.')
deployProvLogicalIfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfAlias.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfAlias.setDescription('Alias.')
deployProvLogicalIfLanLinkAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 4), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfLanLinkAid.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfLanLinkAid.setDescription('')
deployProvLogicalIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfAreaId.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfAreaId.setDescription('OSPF Area ID for IP Interface')
deployProvLogicalIfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfMetric.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfMetric.setDescription('Routing Metric')
deployProvLogicalIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfHelloInterval.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfHelloInterval.setDescription('Hello Interval')
deployProvLogicalIfDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfDeadInterval.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDeadInterval.setDescription('Dead Interval')
deployProvLogicalIfPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfPrio.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfPrio.setDescription('Priority')
deployProvLogicalIfRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfRetransmitInterval.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfRetransmitInterval.setDescription('Retransmit Interval')
deployProvLogicalIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 11), FspR7CpAuthType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfAuthType.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfAuthType.setDescription('Authentication Type')
deployProvLogicalIfAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 12), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfAuthString.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfAuthString.setDescription('Authentication String')
deployProvLogicalIfIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 13), FspR7IpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfIpType.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfIpType.setDescription('Type of IP configuration')
deployProvLogicalIfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfIpAddr.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfIpAddr.setDescription('IP Address assigned to LAN IP Interface')
deployProvLogicalIfIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfIpAddrMask.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfIpAddrMask.setDescription('IP MASK assigned to LAN IP Interface')
deployProvLogicalIfAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 16), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
deployProvLogicalIfDcnAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 17), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfDcnAid.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDcnAid.setDescription('Supporting DCN Facility AID')
deployProvLogicalIfOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 18), FspR7OspfMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfOspf.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfOspf.setDescription('OSPF Routing (Dynamic)')
deployProvLogicalIfEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 19), FspR7CpEncapsulation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfEncapsulation.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfEncapsulation.setDescription('Encapsulation')
deployProvLogicalIfPushedNendIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfPushedNendIpHeader.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfPushedNendIpHeader.setDescription('Pushed Near End IP address in encapsulating header')
deployProvLogicalIfPushedFarEndIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfPushedFarEndIpHeader.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfPushedFarEndIpHeader.setDescription('Pushed Far End IP address in encapsulating header')
deployProvLogicalIfTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 49, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 255), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalIfTimeToLive.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfTimeToLive.setDescription('Time to Live')
deployProvLogicalIfCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50), )
if mibBuilder.loadTexts: deployProvLogicalIfCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfCapTable.setDescription('')
deployProvLogicalIfCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvLogicalIfCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfCapEntry.setDescription('')
deployProvLogicalIfCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfCapRowStatus.setDescription('RowStatus')
deployProvLogicalIfCapFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapFacilityType.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfCapFacilityType.setDescription('Facility Type.')
deployProvLogicalIfCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapAlias.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfCapAlias.setDescription('Alias.')
deployProvLogicalIfCapLanLinkAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapLanLinkAid.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfCapLanLinkAid.setDescription('')
deployProvLogicalIfCapAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 5), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapAreaId.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfCapAreaId.setDescription('OSPF Area ID for IP Interface')
deployProvLogicalIfCapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 6), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapMetric.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfCapMetric.setDescription('Routing Metric')
deployProvLogicalIfCapHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 7), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapHelloInterval.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfCapHelloInterval.setDescription('Hello Interval')
deployProvLogicalIfCapDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 8), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapDeadInterval.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfCapDeadInterval.setDescription('Dead Interval')
deployProvLogicalIfCapPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 9), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapPrio.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfCapPrio.setDescription('Priority')
deployProvLogicalIfCapRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 10), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapRetransmitInterval.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfCapRetransmitInterval.setDescription('Retransmit Interval')
deployProvLogicalIfCapAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 11), FspR7CpAuthTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapAuthType.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfCapAuthType.setDescription('Authentication Type')
deployProvLogicalIfCapAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapAuthString.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfCapAuthString.setDescription('Authentication String')
deployProvLogicalIfCapIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 13), FspR7IpTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapIpType.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfCapIpType.setDescription('Type of IP configuration')
deployProvLogicalIfCapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 14), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapIpAddr.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfCapIpAddr.setDescription('IP Address assigned to LAN IP Interface')
deployProvLogicalIfCapIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 15), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapIpAddrMask.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfCapIpAddrMask.setDescription('IP MASK assigned to LAN IP Interface')
deployProvLogicalIfCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 16), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfCapAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
deployProvLogicalIfCapDcnAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapDcnAid.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfCapDcnAid.setDescription('Supporting DCN Facility AID')
deployProvLogicalIfCapOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 18), FspR7OspfModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapOspf.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfCapOspf.setDescription('OSPF Routing (Dynamic)')
deployProvLogicalIfCapEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 19), FspR7CpEncapsulationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapEncapsulation.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfCapEncapsulation.setDescription('Encapsulation')
deployProvLogicalIfCapPushedNendIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 20), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapPushedNendIpHeader.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfCapPushedNendIpHeader.setDescription('Pushed Near End IP address in encapsulating header')
deployProvLogicalIfCapPushedFarEndIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 21), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapPushedFarEndIpHeader.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfCapPushedFarEndIpHeader.setDescription('Pushed Far End IP address in encapsulating header')
deployProvLogicalIfCapTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 50, 1, 22), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfCapTimeToLive.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfCapTimeToLive.setDescription('Time to Live')
deployProvLogicalIfDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51), )
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsTable.setDescription('')
deployProvLogicalIfDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsEntry.setDescription('')
deployProvLogicalIfDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsRowStatus.setDescription('RowStatus')
deployProvLogicalIfDefaultsFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsFacilityType.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsFacilityType.setDescription('Facility Type.')
deployProvLogicalIfDefaultsAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsAlias.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsAlias.setDescription('Alias.')
deployProvLogicalIfDefaultsLanLinkAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 4), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsLanLinkAid.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsLanLinkAid.setDescription('')
deployProvLogicalIfDefaultsAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsAreaId.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsAreaId.setDescription('OSPF Area ID for IP Interface')
deployProvLogicalIfDefaultsMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsMetric.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsMetric.setDescription('Routing Metric')
deployProvLogicalIfDefaultsHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsHelloInterval.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsHelloInterval.setDescription('Hello Interval')
deployProvLogicalIfDefaultsDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsDeadInterval.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsDeadInterval.setDescription('Dead Interval')
deployProvLogicalIfDefaultsPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsPrio.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsPrio.setDescription('Priority')
deployProvLogicalIfDefaultsRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsRetransmitInterval.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsRetransmitInterval.setDescription('Retransmit Interval')
deployProvLogicalIfDefaultsAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 11), FspR7CpAuthType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsAuthType.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsAuthType.setDescription('Authentication Type')
deployProvLogicalIfDefaultsAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsAuthString.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsAuthString.setDescription('Authentication String')
deployProvLogicalIfDefaultsIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 13), FspR7IpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsIpType.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsIpType.setDescription('Type of IP configuration')
deployProvLogicalIfDefaultsIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsIpAddr.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsIpAddr.setDescription('IP Address assigned to LAN IP Interface')
deployProvLogicalIfDefaultsIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsIpAddrMask.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsIpAddrMask.setDescription('IP MASK assigned to LAN IP Interface')
deployProvLogicalIfDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 16), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
deployProvLogicalIfDefaultsDcnAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 17), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsDcnAid.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsDcnAid.setDescription('Supporting DCN Facility AID')
deployProvLogicalIfDefaultsOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 18), FspR7OspfMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsOspf.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsOspf.setDescription('OSPF Routing (Dynamic)')
deployProvLogicalIfDefaultsEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 19), FspR7CpEncapsulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsEncapsulation.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsEncapsulation.setDescription('Encapsulation')
deployProvLogicalIfDefaultsPushedNendIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsPushedNendIpHeader.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsPushedNendIpHeader.setDescription('Pushed Near End IP address in encapsulating header')
deployProvLogicalIfDefaultsPushedFarEndIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsPushedFarEndIpHeader.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsPushedFarEndIpHeader.setDescription('Pushed Far End IP address in encapsulating header')
deployProvLogicalIfDefaultsTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 51, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 255), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsTimeToLive.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalIfDefaultsTimeToLive.setDescription('Time to Live')
deployProvIfLanAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 52), )
if mibBuilder.loadTexts: deployProvIfLanAidCapsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvIfLanAidCapsTable.setDescription('')
deployProvIfLanAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 52, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvIfLanAidCapsIndex"))
if mibBuilder.loadTexts: deployProvIfLanAidCapsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvIfLanAidCapsEntry.setDescription('')
deployProvIfLanAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 52, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfLanAidCapsIndex.setStatus('current')
if mibBuilder.loadTexts: deployProvIfLanAidCapsIndex.setDescription('AID of LAN')
changeServiceDeployProvIfLanAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 53), )
if mibBuilder.loadTexts: changeServiceDeployProvIfLanAidCapsTable.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfLanAidCapsTable.setDescription('')
changeServiceDeployProvIfLanAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 53, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "changeServiceDeployProvIfLanAidCapsIndex"))
if mibBuilder.loadTexts: changeServiceDeployProvIfLanAidCapsEntry.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfLanAidCapsEntry.setDescription('')
changeServiceDeployProvIfLanAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 53, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeServiceDeployProvIfLanAidCapsIndex.setStatus('current')
if mibBuilder.loadTexts: changeServiceDeployProvIfLanAidCapsIndex.setDescription('AID of LAN')
deployProvIfVethAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 54), )
if mibBuilder.loadTexts: deployProvIfVethAidCapsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvIfVethAidCapsTable.setDescription('')
deployProvIfVethAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 54, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvIfVethAidCapsIndex"))
if mibBuilder.loadTexts: deployProvIfVethAidCapsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvIfVethAidCapsEntry.setDescription('')
deployProvIfVethAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 54, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvIfVethAidCapsIndex.setStatus('current')
if mibBuilder.loadTexts: deployProvIfVethAidCapsIndex.setDescription('Shows if PORT is a member in the LAG with the VETH AID')
deployProvDcnExternalVidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 55), )
if mibBuilder.loadTexts: deployProvDcnExternalVidCapsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnExternalVidCapsTable.setDescription("This table is used to get capabilities for EXTVID parameter. Regular\n         cap tables including EXTVID show the length of output string.\n         Value 0 in regular cap tables means 'no capabilities'.\n         The second index (n) is used to devide the output string to n string blocks.\n         Each block has a maximum of 512 bytes. n = output string / 512.")
deployProvDcnExternalVidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 55, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvDcnExternalVidCapsIndexCap"))
if mibBuilder.loadTexts: deployProvDcnExternalVidCapsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnExternalVidCapsEntry.setDescription('')
deployProvDcnExternalVidCapsIndexCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 55, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: deployProvDcnExternalVidCapsIndexCap.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnExternalVidCapsIndexCap.setDescription('Used to display capability value per index. The number of capabilities determines the number of indexes.')
deployProvDcnExternalVidCapsStringCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 55, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnExternalVidCapsStringCap.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnExternalVidCapsStringCap.setDescription('')
deployProvDcnLanAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 56), )
if mibBuilder.loadTexts: deployProvDcnLanAidCapsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnLanAidCapsTable.setDescription('')
deployProvDcnLanAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 56, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvDcnLanAidCapsIndex"))
if mibBuilder.loadTexts: deployProvDcnLanAidCapsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnLanAidCapsEntry.setDescription('')
deployProvDcnLanAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 56, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvDcnLanAidCapsIndex.setStatus('current')
if mibBuilder.loadTexts: deployProvDcnLanAidCapsIndex.setDescription('AID of LAN')
deployProvExChannelTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57), )
if mibBuilder.loadTexts: deployProvExChannelTable.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelTable.setDescription('Contains entries for provisioning of external channels.')
deployProvExChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvExChannelEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelEntry.setDescription('')
deployProvExChannelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelRowStatus.setDescription('RowStatus')
deployProvExChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 2), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelType.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer\n         termination OR else as payload')
deployProvExChannelTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 3), FspR7ChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelTransmitChannel.setDescription('Channel')
deployProvExChannelChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 4), FspR7ChannelBandwidth()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelChannelBandwith.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelChannelBandwith.setDescription('Channel Bandwidth')
deployProvExChannelAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelAlias.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelAlias.setDescription('User Applied Descriptor')
deployProvExChannelFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelFarEndLocation.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelFarEndLocation.setDescription('')
deployProvExChannelBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 7), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelBitrate.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelBitrate.setDescription('')
deployProvExChannelFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 8), FspR7FecType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelFecType.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelFecType.setDescription('')
deployProvExChannelLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 9), FspR7LineCoding()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelLineCoding.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelLineCoding.setDescription('')
deployProvExChannelFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 10), FspR7FrameFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelFrameFormat.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelFrameFormat.setDescription('')
deployProvExChannelOpticalPowerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-9900, 600), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelOpticalPowerTx.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelOpticalPowerTx.setDescription('Optical Power Transmit')
deployProvExChannelOSNRTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 58), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelOSNRTransmit.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelOSNRTransmit.setDescription('Optical Signal to Noise Ratio Transmit')
deployProvExChannelPMDTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 30), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('ps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelPMDTransmit.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelPMDTransmit.setDescription('Polarization Mode Dispersion Transmit')
deployProvExChannelChromaticDispersionTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-60000, 60000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelChromaticDispersionTx.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelChromaticDispersionTx.setDescription('Chromatic Dispersion Transmit')
deployProvExChannelMinimumOSNRRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 58), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelMinimumOSNRRcv.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelMinimumOSNRRcv.setDescription('Minimum Optical Signal to Noise Ratio, Rcv')
deployProvExChannelMinimumOpticalPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2500, 0), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelMinimumOpticalPowerRcv.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelMinimumOpticalPowerRcv.setDescription('Minimum Optical Pwr Rcv')
deployProvExChannelMaximumOpticalPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelMaximumOpticalPowerRcv.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelMaximumOpticalPowerRcv.setDescription('Maximum Optical Pwr Rcv')
deployProvExChannelMaximumPMDRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 30), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('ps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelMaximumPMDRcv.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelMaximumPMDRcv.setDescription('Maximum Polarization Mode Dispersion Rcv')
deployProvExChannelChromaticDispersionRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-60000, 60000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelChromaticDispersionRcv.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelChromaticDispersionRcv.setDescription('Maximum Chromatic Dispersion Rcv')
deployProvExChannelMaxBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 57, 1, 20), FspR7MaxBitErrorRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvExChannelMaxBitErrorRate.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelMaxBitErrorRate.setDescription('Maximum Bit Error Rate')
deployProvExChannelCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58), )
if mibBuilder.loadTexts: deployProvExChannelCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelCapTable.setDescription('Contains entries for provisioning of external channels.')
deployProvExChannelCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvExChannelCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelCapEntry.setDescription('')
deployProvExChannelCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelCapRowStatus.setDescription('RowStatus')
deployProvExChannelCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapType.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelCapType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer\n         termination OR else as payload')
deployProvExChannelCapTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 3), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelCapTransmitChannel.setDescription('Channel')
deployProvExChannelCapChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 4), FspR7ChannelBandwidthCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapChannelBandwith.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelCapChannelBandwith.setDescription('Channel Bandwidth')
deployProvExChannelCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapAlias.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelCapAlias.setDescription('User Applied Descriptor')
deployProvExChannelCapFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapFarEndLocation.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelCapFarEndLocation.setDescription('')
deployProvExChannelCapBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 7), FspR7Unsigned32Caps()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapBitrate.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelCapBitrate.setDescription('')
deployProvExChannelCapFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 8), FspR7FecTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapFecType.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelCapFecType.setDescription('')
deployProvExChannelCapLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 9), FspR7LineCodingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapLineCoding.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelCapLineCoding.setDescription('')
deployProvExChannelCapFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 10), FspR7FrameFormatCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapFrameFormat.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelCapFrameFormat.setDescription('')
deployProvExChannelCapOpticalPowerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 11), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapOpticalPowerTx.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelCapOpticalPowerTx.setDescription('Optical Power Transmit')
deployProvExChannelCapOSNRTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 12), FspR7Unsigned32Caps()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapOSNRTransmit.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelCapOSNRTransmit.setDescription('Optical Signal to Noise Ratio Transmit')
deployProvExChannelCapPMDTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 13), FspR7Unsigned32Caps()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapPMDTransmit.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelCapPMDTransmit.setDescription('Polarization Mode Dispersion Transmit')
deployProvExChannelCapChromaticDispersionTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 14), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapChromaticDispersionTx.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelCapChromaticDispersionTx.setDescription('Chromatic Dispersion Transmit')
deployProvExChannelCapMinimumOSNRRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 15), FspR7Unsigned32Caps()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapMinimumOSNRRcv.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelCapMinimumOSNRRcv.setDescription('Minimum Optical Signal to Noise Ratio, Rcv')
deployProvExChannelCapMinimumOpticalPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 16), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapMinimumOpticalPowerRcv.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelCapMinimumOpticalPowerRcv.setDescription('Minimum Optical Pwr Rcv')
deployProvExChannelCapMaximumOpticalPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 17), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapMaximumOpticalPowerRcv.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelCapMaximumOpticalPowerRcv.setDescription('Maximum Optical Pwr Rcv')
deployProvExChannelCapMaximumPMDRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 18), FspR7Unsigned32Caps()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapMaximumPMDRcv.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelCapMaximumPMDRcv.setDescription('Maximum Polarization Mode Dispersion Rcv')
deployProvExChannelCapChromaticDispersionRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 19), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapChromaticDispersionRcv.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelCapChromaticDispersionRcv.setDescription('Maximum Chromatic Dispersion Rcv')
deployProvExChannelCapMaxBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 58, 1, 20), FspR7MaxBitErrorRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelCapMaxBitErrorRate.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelCapMaxBitErrorRate.setDescription('Maximum Bit Error Rate')
deployProvExChannelDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59), )
if mibBuilder.loadTexts: deployProvExChannelDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelDefaultsTable.setDescription('Contains entries for provisioning of external channels.')
deployProvExChannelDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvExChannelDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelDefaultsEntry.setDescription('')
deployProvExChannelDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelDefaultsRowStatus.setDescription('RowStatus')
deployProvExChannelDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsType.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelDefaultsType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer\n         termination OR else as payload')
deployProvExChannelDefaultsTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 3), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelDefaultsTransmitChannel.setDescription('Channel')
deployProvExChannelDefaultsChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 4), FspR7ChannelBandwidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsChannelBandwith.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelDefaultsChannelBandwith.setDescription('Channel Bandwidth')
deployProvExChannelDefaultsAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsAlias.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelDefaultsAlias.setDescription('User Applied Descriptor')
deployProvExChannelDefaultsFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsFarEndLocation.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelDefaultsFarEndLocation.setDescription('')
deployProvExChannelDefaultsBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 7), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsBitrate.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelDefaultsBitrate.setDescription('')
deployProvExChannelDefaultsFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 8), FspR7FecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsFecType.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelDefaultsFecType.setDescription('')
deployProvExChannelDefaultsLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 9), FspR7LineCoding()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsLineCoding.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelDefaultsLineCoding.setDescription('')
deployProvExChannelDefaultsFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 10), FspR7FrameFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsFrameFormat.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelDefaultsFrameFormat.setDescription('')
deployProvExChannelDefaultsOpticalPowerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-9900, 600), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsOpticalPowerTx.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelDefaultsOpticalPowerTx.setDescription('Optical Power Transmit')
deployProvExChannelDefaultsOSNRTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 58), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsOSNRTransmit.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelDefaultsOSNRTransmit.setDescription('Optical Signal to Noise Ratio Transmit')
deployProvExChannelDefaultsPMDTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 30), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsPMDTransmit.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelDefaultsPMDTransmit.setDescription('Polarization Mode Dispersion Transmit')
deployProvExChannelDefaultsChromaticDispersionTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-60000, 60000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsChromaticDispersionTx.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelDefaultsChromaticDispersionTx.setDescription('Chromatic Dispersion Transmit')
deployProvExChannelDefaultsMinimumOSNRRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 58), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsMinimumOSNRRcv.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelDefaultsMinimumOSNRRcv.setDescription('Minimum Optical Signal to Noise Ratio, Rcv')
deployProvExChannelDefaultsMinimumOpticalPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2500, 0), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsMinimumOpticalPowerRcv.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelDefaultsMinimumOpticalPowerRcv.setDescription('Minimum Optical Pwr Rcv')
deployProvExChannelDefaultsMaximumOpticalPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsMaximumOpticalPowerRcv.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelDefaultsMaximumOpticalPowerRcv.setDescription('Maximum Optical Pwr Rcv')
deployProvExChannelDefaultsMaximumPMDRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 30), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsMaximumPMDRcv.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelDefaultsMaximumPMDRcv.setDescription('Maximum Polarization Mode Dispersion Rcv')
deployProvExChannelDefaultsChromaticDispersionRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-60000, 60000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsChromaticDispersionRcv.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelDefaultsChromaticDispersionRcv.setDescription('Maximum Chromatic Dispersion Rcv')
deployProvExChannelDefaultsMaxBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 4, 59, 1, 20), FspR7MaxBitErrorRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvExChannelDefaultsMaxBitErrorRate.setStatus('current')
if mibBuilder.loadTexts: deployProvExChannelDefaultsMaxBitErrorRate.setDescription('Maximum Bit Error Rate')
deployProvConnType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 1), FspR7TypeConnection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvConnType.setStatus('current')
if mibBuilder.loadTexts: deployProvConnType.setDescription('Type of equipment connection')
deployProvConnEndpointA = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 2), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvConnEndpointA.setStatus('current')
if mibBuilder.loadTexts: deployProvConnEndpointA.setDescription('FROM-end of equipment connection (jumper). FROM direction is significant only\n         for 1WAY connections.')
deployProvConnEndpointB = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 3), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvConnEndpointB.setStatus('current')
if mibBuilder.loadTexts: deployProvConnEndpointB.setDescription('TO-end of equipment connection (jumper). TO direction\n         is signaificant only for 1WAY')
deployProvConnCommand = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 4), FspR7ConnCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvConnCommand.setStatus('current')
if mibBuilder.loadTexts: deployProvConnCommand.setDescription('This object is used to create or destroy rows in\n         intraNeConnectionsTable. To create a row in\n         that table, set this object to create(2) and deployConnType,\n         deployConnEndpointA, deployConnEndpointB in one request.\n         To remove a row set this object to destroy(3) and\n         deployConnEndpointA in one request.')
deployProvConnState = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 5), FspR7StateConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvConnState.setStatus('current')
if mibBuilder.loadTexts: deployProvConnState.setDescription('State of the physical connection when creation of it ends with failure.\n         When value is 0 (undefined) than it is agent internal error.')
deployProvConnCommandCounter = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvConnCommandCounter.setStatus('current')
if mibBuilder.loadTexts: deployProvConnCommandCounter.setDescription('Counter incremented when create command ends with failure.')
deployProvConnIndex = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 7), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvConnIndex.setStatus('current')
if mibBuilder.loadTexts: deployProvConnIndex.setDescription("Parameter cointain CONN index after 'create' command is invoked.")
deployProvConnStdCapFromTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 8), )
if mibBuilder.loadTexts: deployProvConnStdCapFromTable.setStatus('current')
if mibBuilder.loadTexts: deployProvConnStdCapFromTable.setDescription('Table containing capabilities of parameters for standard physical\n         connection. The first index is endpointA (FROM) and the second index is endpointB\n         (TO).')
deployProvConnStdCapFromEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 8, 1), ).setIndexNames((0, "FspR7-MIB", "deployProvConnStdCapFromEndpointA"), (0, "FspR7-MIB", "deployProvConnStdCapFromEndpointB"))
if mibBuilder.loadTexts: deployProvConnStdCapFromEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvConnStdCapFromEntry.setDescription('')
deployProvConnStdCapFromEndpointA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 8, 1, 1), EntityIndex())
if mibBuilder.loadTexts: deployProvConnStdCapFromEndpointA.setStatus('current')
if mibBuilder.loadTexts: deployProvConnStdCapFromEndpointA.setDescription('')
deployProvConnStdCapFromEndpointB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 8, 1, 2), EntityIndex())
if mibBuilder.loadTexts: deployProvConnStdCapFromEndpointB.setStatus('current')
if mibBuilder.loadTexts: deployProvConnStdCapFromEndpointB.setDescription('')
deployProvConnStdCapFromType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 8, 1, 3), FspR7TypeConnectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvConnStdCapFromType.setStatus('current')
if mibBuilder.loadTexts: deployProvConnStdCapFromType.setDescription('')
deployProvConnStdCapToTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 9), )
if mibBuilder.loadTexts: deployProvConnStdCapToTable.setStatus('current')
if mibBuilder.loadTexts: deployProvConnStdCapToTable.setDescription('Table containing capabilities of parameters for standard physical\n         connection. The first index is endpointB (TO) and the second index is endpointA\n         (FROM).')
deployProvConnStdCapToEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 9, 1), ).setIndexNames((0, "FspR7-MIB", "deployProvConnStdCapToEndpointB"), (0, "FspR7-MIB", "deployProvConnStdCapToEndpointA"))
if mibBuilder.loadTexts: deployProvConnStdCapToEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvConnStdCapToEntry.setDescription('')
deployProvConnStdCapToEndpointB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 9, 1, 1), EntityIndex())
if mibBuilder.loadTexts: deployProvConnStdCapToEndpointB.setStatus('current')
if mibBuilder.loadTexts: deployProvConnStdCapToEndpointB.setDescription('')
deployProvConnStdCapToEndpointA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 9, 1, 2), EntityIndex())
if mibBuilder.loadTexts: deployProvConnStdCapToEndpointA.setStatus('current')
if mibBuilder.loadTexts: deployProvConnStdCapToEndpointA.setDescription('')
deployProvConnStdCapToType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 9, 1, 3), FspR7TypeConnectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvConnStdCapToType.setStatus('current')
if mibBuilder.loadTexts: deployProvConnStdCapToType.setDescription('')
deployProvConnNonStdCapFromTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 10), )
if mibBuilder.loadTexts: deployProvConnNonStdCapFromTable.setStatus('current')
if mibBuilder.loadTexts: deployProvConnNonStdCapFromTable.setDescription('Table containing capabilities of parameters for non standard physical\n         connection. The first index is endpointA (FROM) and the second index is endpointB\n         (TO).')
deployProvConnNonStdCapFromEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 10, 1), ).setIndexNames((0, "FspR7-MIB", "deployProvConnNonStdCapFromEndpointA"), (0, "FspR7-MIB", "deployProvConnNonStdCapFromEndpointB"))
if mibBuilder.loadTexts: deployProvConnNonStdCapFromEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvConnNonStdCapFromEntry.setDescription('')
deployProvConnNonStdCapFromEndpointA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 10, 1, 1), EntityIndex())
if mibBuilder.loadTexts: deployProvConnNonStdCapFromEndpointA.setStatus('current')
if mibBuilder.loadTexts: deployProvConnNonStdCapFromEndpointA.setDescription('')
deployProvConnNonStdCapFromEndpointB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 10, 1, 2), EntityIndex())
if mibBuilder.loadTexts: deployProvConnNonStdCapFromEndpointB.setStatus('current')
if mibBuilder.loadTexts: deployProvConnNonStdCapFromEndpointB.setDescription('')
deployProvConnNonStdCapFromType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 10, 1, 3), FspR7TypeConnectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvConnNonStdCapFromType.setStatus('current')
if mibBuilder.loadTexts: deployProvConnNonStdCapFromType.setDescription('')
deployProvConnNonStdCapToTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 11), )
if mibBuilder.loadTexts: deployProvConnNonStdCapToTable.setStatus('current')
if mibBuilder.loadTexts: deployProvConnNonStdCapToTable.setDescription('Table containing capabilities of parameters for non standard physical\n         connection. The first index is endpointB (TO) and the second index is endpointA\n         (FROM).')
deployProvConnNonStdCapToEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 11, 1), ).setIndexNames((0, "FspR7-MIB", "deployProvConnNonStdCapToEndpointB"), (0, "FspR7-MIB", "deployProvConnNonStdCapToEndpointA"))
if mibBuilder.loadTexts: deployProvConnNonStdCapToEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvConnNonStdCapToEntry.setDescription('')
deployProvConnNonStdCapToEndpointB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 11, 1, 1), EntityIndex())
if mibBuilder.loadTexts: deployProvConnNonStdCapToEndpointB.setStatus('current')
if mibBuilder.loadTexts: deployProvConnNonStdCapToEndpointB.setDescription('')
deployProvConnNonStdCapToEndpointA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 11, 1, 2), EntityIndex())
if mibBuilder.loadTexts: deployProvConnNonStdCapToEndpointA.setStatus('current')
if mibBuilder.loadTexts: deployProvConnNonStdCapToEndpointA.setDescription('')
deployProvConnNonStdCapToType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 5, 11, 1, 3), FspR7TypeConnectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvConnNonStdCapToType.setStatus('current')
if mibBuilder.loadTexts: deployProvConnNonStdCapToType.setDescription('')
crsConnUnusedFromPointsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 1), )
if mibBuilder.loadTexts: crsConnUnusedFromPointsTable.setStatus('current')
if mibBuilder.loadTexts: crsConnUnusedFromPointsTable.setDescription('Table containing the unused startpoint which can be cross-connected.')
crsConnUnusedFromPointsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 1, 1), ).setIndexNames((0, "FspR7-MIB", "crsConnUnusedFromPointsAidValueFromPoint"))
if mibBuilder.loadTexts: crsConnUnusedFromPointsEntry.setStatus('current')
if mibBuilder.loadTexts: crsConnUnusedFromPointsEntry.setDescription('')
crsConnUnusedFromPointsAidValueFromPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 1, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnUnusedFromPointsAidValueFromPoint.setStatus('current')
if mibBuilder.loadTexts: crsConnUnusedFromPointsAidValueFromPoint.setDescription('Ports can be cross-connected.')
crsConnPossibleToCreateTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 2), )
if mibBuilder.loadTexts: crsConnPossibleToCreateTable.setStatus('current')
if mibBuilder.loadTexts: crsConnPossibleToCreateTable.setDescription('Table containing possibly cross-connections.')
crsConnPossibleToCreateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 2, 1), ).setIndexNames((0, "FspR7-MIB", "crsConnUnusedFromPointsAidValueFromPoint"), (0, "FspR7-MIB", "crsConnPossibleToCreateAidToFromPoint"))
if mibBuilder.loadTexts: crsConnPossibleToCreateEntry.setStatus('current')
if mibBuilder.loadTexts: crsConnPossibleToCreateEntry.setDescription('')
crsConnPossibleToCreateAidToFromPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 2, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnPossibleToCreateAidToFromPoint.setStatus('current')
if mibBuilder.loadTexts: crsConnPossibleToCreateAidToFromPoint.setDescription('Ports can be cross-connected.')
crsConnDeployProvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3), )
if mibBuilder.loadTexts: crsConnDeployProvTable.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvTable.setDescription('Contains entries for provisioning of cross-connections.')
crsConnDeployProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3, 1), ).setIndexNames((0, "FspR7-MIB", "crsConnDeployProvFrom"), (0, "FspR7-MIB", "crsConnDeployProvTo"))
if mibBuilder.loadTexts: crsConnDeployProvEntry.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvEntry.setDescription('')
crsConnDeployProvFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3, 1, 1), EntityIndex())
if mibBuilder.loadTexts: crsConnDeployProvFrom.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvFrom.setDescription('AID of a CH-C# or VCH instance.')
crsConnDeployProvTo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3, 1, 2), EntityIndex())
if mibBuilder.loadTexts: crsConnDeployProvTo.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvTo.setDescription('AID of a CH-C# or VCH instance.')
crsConnDeployProvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnDeployProvRowStatus.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvRowStatus.setDescription("This object is used to create, or delete a row in this table. To start process of creating\n         a new cross-connection, this object is initially set to 'createAndWait'. After this action the state of\n         this object becomes 'notReady'. This object stays in this state until all required objects are not set.\n         Objects which must be set are indicated by special objects with capabilities. If specjal object exist,\n         the indicated object have to be set by one of values specified in special object. If all required objects\n         are set, state of this object becomes 'notInService'. To create a new cross-connection, this object have\n         to be set to 'active'.")
crsConnDeployProvConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3, 1, 4), FspR7Conn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnDeployProvConn.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvConn.setDescription('Connection Direction')
crsConnDeployProvRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3, 1, 5), FspR7RedLinedState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnDeployProvRedLineState.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvRedLineState.setDescription('will be set by higher level software to act as a barrier to deletion')
crsConnDeployProvAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3, 1, 6), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnDeployProvAdmin.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
crsConnDeployProvTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3, 1, 7), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnDeployProvTunnelAid.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvTunnelAid.setDescription('Tunnel AID')
crsConnDeployProvAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3, 1, 8), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnDeployProvAlias.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvAlias.setDescription('User Applied Descriptor')
crsConnDeployProvCrossConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3, 1, 9), FspR7TypeCrs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnDeployProvCrossConnType.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvCrossConnType.setDescription('Type of Cross-Connect')
crsConnDeployProvPathNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3, 1, 10), FspR7PathNode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnDeployProvPathNode.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvPathNode.setDescription('Node count along a signal path on a unidirectional basis from the client signal\n         ingress to egress')
crsConnDeployProvType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 3, 1, 11), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsConnDeployProvType.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvType.setDescription('')
crsConnDeployProvCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4), )
if mibBuilder.loadTexts: crsConnDeployProvCapTable.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvCapTable.setDescription('Contains entries for provisioning of cross-connections.')
crsConnDeployProvCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4, 1), ).setIndexNames((0, "FspR7-MIB", "crsConnDeployProvFrom"), (0, "FspR7-MIB", "crsConnDeployProvTo"))
if mibBuilder.loadTexts: crsConnDeployProvCapEntry.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvCapEntry.setDescription('')
crsConnDeployProvCapFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: crsConnDeployProvCapFrom.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvCapFrom.setDescription('AID of a CH-C# or VCH instance.')
crsConnDeployProvCapTo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: crsConnDeployProvCapTo.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvCapTo.setDescription('AID of a CH-C# or VCH instance.')
crsConnDeployProvCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4, 1, 3), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvCapRowStatus.setDescription("This object is used to create, or delete a row in this table. To start process of creating\n         a new cross-connection, this object is initially set to 'createAndWait'. After this action the state of\n         this object becomes 'notReady'. This object stays in this state until all required objects are not set.\n         Objects which must be set are indicated by special objects with capabilities. If specjal object exist,\n         the indicated object have to be set by one of values specified in special object. If all required objects\n         are set, state of this object becomes 'notInService'. To create a new cross-connection, this object have\n         to be set to 'active'.")
crsConnDeployProvCapConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4, 1, 4), FspR7ConnCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvCapConn.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvCapConn.setDescription('Connection Direction')
crsConnDeployProvCapRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4, 1, 5), FspR7RedLinedStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvCapRedLineState.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvCapRedLineState.setDescription('will be set by higher level software to act as a barrier to deletion')
crsConnDeployProvCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4, 1, 6), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvCapAdmin.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvCapAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
crsConnDeployProvCapTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvCapTunnelAid.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvCapTunnelAid.setDescription('Tunnel AID')
crsConnDeployProvCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvCapAlias.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvCapAlias.setDescription('User Applied Descriptor')
crsConnDeployProvCapCrossConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4, 1, 9), FspR7TypeCrsCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvCapCrossConnType.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvCapCrossConnType.setDescription('Type of Cross-Connect')
crsConnDeployProvCapPathNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4, 1, 10), FspR7PathNodeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvCapPathNode.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvCapPathNode.setDescription('Node count along a signal path on a unidirectional basis from the client signal\n         ingress to egress')
crsConnDeployProvCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 4, 1, 11), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvCapType.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvCapType.setDescription('')
crsConnDeployProvDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5), )
if mibBuilder.loadTexts: crsConnDeployProvDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvDefaultsTable.setDescription('Contains entries for provisioning of cross-connections.')
crsConnDeployProvDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5, 1), ).setIndexNames((0, "FspR7-MIB", "crsConnDeployProvFrom"), (0, "FspR7-MIB", "crsConnDeployProvTo"))
if mibBuilder.loadTexts: crsConnDeployProvDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvDefaultsEntry.setDescription('')
crsConnDeployProvDefaultsFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvDefaultsFrom.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvDefaultsFrom.setDescription('AID of a CH-C# or VCH instance.')
crsConnDeployProvDefaultsTo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvDefaultsTo.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvDefaultsTo.setDescription('AID of a CH-C# or VCH instance.')
crsConnDeployProvDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvDefaultsRowStatus.setDescription("This object is used to create, or delete a row in this table. To start process of creating\n         a new cross-connection, this object is initially set to 'createAndWait'. After this action the state of\n         this object becomes 'notReady'. This object stays in this state until all required objects are not set.\n         Objects which must be set are indicated by special objects with capabilities. If specjal object exist,\n         the indicated object have to be set by one of values specified in special object. If all required objects\n         are set, state of this object becomes 'notInService'. To create a new cross-connection, this object have\n         to be set to 'active'.")
crsConnDeployProvDefaultsConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5, 1, 4), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvDefaultsConn.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvDefaultsConn.setDescription('Connection Direction')
crsConnDeployProvDefaultsRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5, 1, 5), FspR7RedLinedState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvDefaultsRedLineState.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvDefaultsRedLineState.setDescription('will be set by higher level software to act as a barrier to deletion')
crsConnDeployProvDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5, 1, 6), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvDefaultsAdmin.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvDefaultsAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
crsConnDeployProvDefaultsTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvDefaultsTunnelAid.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvDefaultsTunnelAid.setDescription('Tunnel AID')
crsConnDeployProvDefaultsAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvDefaultsAlias.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvDefaultsAlias.setDescription('User Applied Descriptor')
crsConnDeployProvDefaultsCrossConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5, 1, 9), FspR7TypeCrs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvDefaultsCrossConnType.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvDefaultsCrossConnType.setDescription('Type of Cross-Connect')
crsConnDeployProvDefaultsPathNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5, 1, 10), FspR7PathNode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvDefaultsPathNode.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvDefaultsPathNode.setDescription('Node count along a signal path on a unidirectional basis from the client signal\n         ingress to egress')
crsConnDeployProvDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 5, 1, 11), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnDeployProvDefaultsType.setStatus('current')
if mibBuilder.loadTexts: crsConnDeployProvDefaultsType.setDescription('')
crsConnWdmUnusedFromPointsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 6), )
if mibBuilder.loadTexts: crsConnWdmUnusedFromPointsTable.setStatus('current')
if mibBuilder.loadTexts: crsConnWdmUnusedFromPointsTable.setDescription('Table containing the unused startpoint which can be cross-connected.')
crsConnWdmUnusedFromPointsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 6, 1), ).setIndexNames((0, "FspR7-MIB", "crsConnWdmUnusedFromPointsAidValueFromPoint"))
if mibBuilder.loadTexts: crsConnWdmUnusedFromPointsEntry.setStatus('current')
if mibBuilder.loadTexts: crsConnWdmUnusedFromPointsEntry.setDescription('')
crsConnWdmUnusedFromPointsAidValueFromPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 6, 6, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsConnWdmUnusedFromPointsAidValueFromPoint.setStatus('current')
if mibBuilder.loadTexts: crsConnWdmUnusedFromPointsAidValueFromPoint.setDescription('Ports can be cross-connected.')
cloningTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 1), )
if mibBuilder.loadTexts: cloningTable.setStatus('current')
if mibBuilder.loadTexts: cloningTable.setDescription('Table containing all free entities')
cloningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: cloningEntry.setStatus('current')
if mibBuilder.loadTexts: cloningEntry.setDescription('')
cloningSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 1, 1, 1), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cloningSource.setStatus('current')
if mibBuilder.loadTexts: cloningSource.setDescription('')
entitiesToCloningTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 2), )
if mibBuilder.loadTexts: entitiesToCloningTable.setStatus('current')
if mibBuilder.loadTexts: entitiesToCloningTable.setDescription('Table containing entities which should be cloned from source entity')
entitiesToCloningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 2, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "entitiesToCloningEntity"))
if mibBuilder.loadTexts: entitiesToCloningEntry.setStatus('current')
if mibBuilder.loadTexts: entitiesToCloningEntry.setDescription('')
entitiesToCloningEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 2, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entitiesToCloningEntity.setStatus('current')
if mibBuilder.loadTexts: entitiesToCloningEntity.setDescription('')
forceDeployProvApsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3), )
if mibBuilder.loadTexts: forceDeployProvApsTable.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsTable.setDescription('')
forceDeployProvApsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: forceDeployProvApsEntry.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsEntry.setDescription('')
forceDeployProvApsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsRowStatus.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsRowStatus.setDescription('RowStatus')
forceDeployProvApsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 2), FspR7ForcedStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsForceDestroy.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsForceDestroy.setDescription('Forced Destroy')
forceDeployProvApsSDswitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 3), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsSDswitching.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsSDswitching.setDescription('This state controls whether the switch criteria for the APS group will\n         include the Signal Degrade alarm.')
forceDeployProvApsHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 4), ApsHoldoffTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsHoldOffTime.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsHoldOffTime.setDescription('This value controls the switch delay (0 to 10 seconds in\n         100ms steps) for the protection group. Changing the hold-off\n         time when the timer is active will not affect the active\n         timer. The change will take effect the next time the timer\n         is active.')
forceDeployProvApsProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 5), ProtectionMech()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsProtectionMech.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsProtectionMech.setDescription('The protection type of this protection group.')
forceDeployProvApsWorkingAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 6), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsWorkingAid.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsWorkingAid.setDescription('AID of working port involved in the protection group.')
forceDeployProvApsProtectionAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 7), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsProtectionAid.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsProtectionAid.setDescription('AID of protection entity involved in the protection group.')
forceDeployProvApsSignalDegradeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 8), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsSignalDegradeSwitching.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsSignalDegradeSwitching.setDescription('Switch Trigger Additionally on Signal Degrade Link Detection')
forceDeployProvApsSignalFailureSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 9), EnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsSignalFailureSwitching.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsSignalFailureSwitching.setDescription('Switch Trigger on Signal Failure Link Detection')
forceDeployProvApsFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsFarEndIp.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsFarEndIp.setDescription('IP Address assigned to PPP Termination Point on Far-End NE. Default\n         is set by NE System on LINK establishment if FENDIPACPT = Y')
forceDeployProvApsPeerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 11), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsPeerAid.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsPeerAid.setDescription('AID of Protection Partner involved in the protection group.')
forceDeployProvApsApsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 12), ApsType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsApsType.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsApsType.setDescription('The type of APS implemented in this protection group.')
forceDeployProvApsRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 13), ApsRevertMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsRevertMode.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsRevertMode.setDescription('Revertive Protection Switching')
forceDeployProvApsWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 12), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsWaitToRestore.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsWaitToRestore.setDescription('Wait to Restore')
forceDeployProvApsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 3, 1, 15), ApsDirection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceDeployProvApsDirection.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsDirection.setDescription("Indicates whether the APS function is 'unidirectional' (single-ended)\n         or 'bidirectional' (dual-ended).")
forceDeployProvApsCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4), )
if mibBuilder.loadTexts: forceDeployProvApsCapTable.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsCapTable.setDescription('')
forceDeployProvApsCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: forceDeployProvApsCapEntry.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsCapEntry.setDescription('')
forceDeployProvApsCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsCapRowStatus.setDescription('RowStatus')
forceDeployProvApsCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapForceDestroy.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsCapForceDestroy.setDescription('Forced Destroy')
forceDeployProvApsCapSDswitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 3), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapSDswitching.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsCapSDswitching.setDescription('This state controls whether the switch criteria for the APS group will\n         include the Signal Degrade alarm.')
forceDeployProvApsCapHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 4), ApsHoldoffTimeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapHoldOffTime.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsCapHoldOffTime.setDescription('This value controls the switch delay (0 to 10 seconds in\n         100ms steps) for the protection group. Changing the hold-off\n         time when the timer is active will not affect the active\n         timer. The change will take effect the next time the timer\n         is active.')
forceDeployProvApsCapProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 5), ProtectionMechCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapProtectionMech.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsCapProtectionMech.setDescription('The protection type of this protection group.')
forceDeployProvApsCapWorkingAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapWorkingAid.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsCapWorkingAid.setDescription('AID of working port involved in the protection group.')
forceDeployProvApsCapProtectionAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapProtectionAid.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsCapProtectionAid.setDescription('AID of protection entity involved in the protection group.')
forceDeployProvApsCapSignalDegradeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 8), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapSignalDegradeSwitching.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsCapSignalDegradeSwitching.setDescription('Switch Trigger Additionally on Signal Degrade Link Detection')
forceDeployProvApsCapSignalFailureSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 9), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapSignalFailureSwitching.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsCapSignalFailureSwitching.setDescription('Switch Trigger on Signal Failure Link Detection')
forceDeployProvApsCapFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 10), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapFarEndIp.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsCapFarEndIp.setDescription('IP Address assigned to PPP Termination Point on Far-End NE. Default\n         is set by NE System on LINK establishment if FENDIPACPT = Y')
forceDeployProvApsCapPeerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapPeerAid.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsCapPeerAid.setDescription('AID of Protection Partner involved in the protection group.')
forceDeployProvApsCapApsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 12), ApsTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapApsType.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsCapApsType.setDescription('The type of APS implemented in this protection group.')
forceDeployProvApsCapRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 13), ApsRevertModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapRevertMode.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsCapRevertMode.setDescription('Revertive Protection Switching')
forceDeployProvApsCapWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 14), FspR7Unsigned32Caps()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapWaitToRestore.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsCapWaitToRestore.setDescription('Wait to Restore')
forceDeployProvApsCapDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 4, 1, 15), ApsDirectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsCapDirection.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsCapDirection.setDescription("Indicates whether the APS function is 'unidirectional' (single-ended)\n         or 'bidirectional' (dual-ended).")
forceDeployProvApsDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5), )
if mibBuilder.loadTexts: forceDeployProvApsDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsDefaultsTable.setDescription('')
forceDeployProvApsDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: forceDeployProvApsDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsDefaultsEntry.setDescription('')
forceDeployProvApsDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsDefaultsRowStatus.setDescription('RowStatus')
forceDeployProvApsDefaultsForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 2), FspR7ForcedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsForceDestroy.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsDefaultsForceDestroy.setDescription('Forced Destroy')
forceDeployProvApsDefaultsSDswitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 3), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsSDswitching.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsDefaultsSDswitching.setDescription('This state controls whether the switch criteria for the APS group will\n         include the Signal Degrade alarm.')
forceDeployProvApsDefaultsHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 4), ApsHoldoffTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsHoldOffTime.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsDefaultsHoldOffTime.setDescription('This value controls the switch delay (0 to 10 seconds in\n         100ms steps) for the protection group. Changing the hold-off\n         time when the timer is active will not affect the active\n         timer. The change will take effect the next time the timer\n         is active.')
forceDeployProvApsDefaultsProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 5), ProtectionMech()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsProtectionMech.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsDefaultsProtectionMech.setDescription('The protection type of this protection group.')
forceDeployProvApsDefaultsWorkingAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 6), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsWorkingAid.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsDefaultsWorkingAid.setDescription('AID of working port involved in the protection group.')
forceDeployProvApsDefaultsProtectionAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 7), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsProtectionAid.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsDefaultsProtectionAid.setDescription('AID of protection entity involved in the protection group.')
forceDeployProvApsDefaultsSignalDegradeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 8), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsSignalDegradeSwitching.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsDefaultsSignalDegradeSwitching.setDescription('Switch Trigger Additionally on Signal Degrade Link Detection')
forceDeployProvApsDefaultsSignalFailureSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 9), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsSignalFailureSwitching.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsDefaultsSignalFailureSwitching.setDescription('Switch Trigger on Signal Failure Link Detection')
forceDeployProvApsDefaultsFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsFarEndIp.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsDefaultsFarEndIp.setDescription('IP Address assigned to PPP Termination Point on Far-End NE. Default\n         is set by NE System on LINK establishment if FENDIPACPT = Y')
forceDeployProvApsDefaultsPeerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 11), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsPeerAid.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsDefaultsPeerAid.setDescription('AID of Protection Partner involved in the protection group.')
forceDeployProvApsDefaultsApsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 12), ApsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsApsType.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsDefaultsApsType.setDescription('The type of APS implemented in this protection group.')
forceDeployProvApsDefaultsRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 13), ApsRevertMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsRevertMode.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsDefaultsRevertMode.setDescription('Revertive Protection Switching')
forceDeployProvApsDefaultsWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 12), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsWaitToRestore.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsDefaultsWaitToRestore.setDescription('Wait to Restore')
forceDeployProvApsDefaultsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 5, 1, 15), ApsDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsDefaultsDirection.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsDefaultsDirection.setDescription("Indicates whether the APS function is 'unidirectional' (single-ended)\n         or 'bidirectional' (dual-ended).")
forceDeployProvApsWorkingAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 6), )
if mibBuilder.loadTexts: forceDeployProvApsWorkingAidCapsTable.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsWorkingAidCapsTable.setDescription('')
forceDeployProvApsWorkingAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 6, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvApsWorkingAidCapsIndex"))
if mibBuilder.loadTexts: forceDeployProvApsWorkingAidCapsEntry.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsWorkingAidCapsEntry.setDescription('')
forceDeployProvApsWorkingAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 6, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsWorkingAidCapsIndex.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsWorkingAidCapsIndex.setDescription('AID of working port involved in the protection group.')
forceDeployProvApsProtectingAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 7), )
if mibBuilder.loadTexts: forceDeployProvApsProtectingAidCapsTable.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsProtectingAidCapsTable.setDescription('')
forceDeployProvApsProtectingAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 7, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvApsProtectingAidCapsIndex"))
if mibBuilder.loadTexts: forceDeployProvApsProtectingAidCapsEntry.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsProtectingAidCapsEntry.setDescription('')
forceDeployProvApsProtectingAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 7, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsProtectingAidCapsIndex.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsProtectingAidCapsIndex.setDescription('AID of protection entity involved in the protection group.')
forceDeployProvApsPeerAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 8), )
if mibBuilder.loadTexts: forceDeployProvApsPeerAidCapsTable.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsPeerAidCapsTable.setDescription('')
forceDeployProvApsPeerAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 8, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "deployProvApsWorkingAidCapsIndex"))
if mibBuilder.loadTexts: forceDeployProvApsPeerAidCapsEntry.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsPeerAidCapsEntry.setDescription('')
forceDeployProvApsPeerAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 7, 8, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceDeployProvApsPeerAidCapsIndex.setStatus('current')
if mibBuilder.loadTexts: forceDeployProvApsPeerAidCapsIndex.setDescription('AID of Protection Partner involved in the protection group.')
unusedWdmTunnelIndex = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unusedWdmTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: unusedWdmTunnelIndex.setDescription('This object is used to retrieve unused tunnel ID for provisioning purpose.')
unusedWdmPathIndex = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unusedWdmPathIndex.setStatus('current')
if mibBuilder.loadTexts: unusedWdmPathIndex.setDescription('This object is used to retrieve unused path ID for provisioning purpose.')
unusedOtnTunnelIndex = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 95), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unusedOtnTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: unusedOtnTunnelIndex.setDescription('This object is used to retrieve unused tunnel ID for provisioning purpose.')
unusedOtnPathIndex = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 96), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unusedOtnPathIndex.setStatus('current')
if mibBuilder.loadTexts: unusedOtnPathIndex.setDescription('This object is used to retrieve unused path ID for provisioning purpose.')
deployProvControlPlaneWdmTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11), )
if mibBuilder.loadTexts: deployProvControlPlaneWdmTable.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmTable.setDescription('')
deployProvControlPlaneWdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvControlPlaneWdmEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmEntry.setDescription('')
deployProvControlPlaneWdmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmRowStatus.setDescription('')
deployProvControlPlaneWdmCtmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCtmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCtmConfigFlag.setDescription("Label Switched Path Edge Component' Configuration Bitfield")
deployProvControlPlaneWdmCtmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCtmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCtmTraceDetail.setDescription("Label Switched Path Edge Component' Trace Detail")
deployProvControlPlaneWdmCtmSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 4), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCtmSetupTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCtmSetupTimeout.setDescription("Label Switched Path Edge Component' Set-Up Timeout")
deployProvControlPlaneWdmCtmShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 5), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCtmShutdownTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCtmShutdownTimeout.setDescription("Label Switched Path Edge Component' Shut-Down Timeout")
deployProvControlPlaneWdmCtmRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 6), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCtmRetryWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCtmRetryWait.setDescription("Label Switched Path Edge Component' Initialization Retry Wait")
deployProvControlPlaneWdmCtmRetryWaitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCtmRetryWaitMultiplier.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCtmRetryWaitMultiplier.setDescription("Label Switched Path Edge Component' Initialization Retry Wait Multiplier")
deployProvControlPlaneWdmCtmMaximumRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 8), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCtmMaximumRetryWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCtmMaximumRetryWait.setDescription("Label Switched Path Edge Component' Initialization Maximum Retry Wait")
deployProvControlPlaneWdmCtmMaximumRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCtmMaximumRetryNumber.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCtmMaximumRetryNumber.setDescription("Label Switched Path Edge Component' Initialization Maximum Retry Number")
deployProvControlPlaneWdmRaConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmRaConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmRaConfigFlag.setDescription("Resource Allocator Component' Configuration Bitfield")
deployProvControlPlaneWdmRaTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmRaTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmRaTraceDetail.setDescription("Resource Allocator Component' Trace Detail")
deployProvControlPlaneWdmRaAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 12), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmRaAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmRaAlarmActivationTime.setDescription("Resource Allocator Component' Alarm Activation Time")
deployProvControlPlaneWdmCmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCmConfigFlag.setDescription("GMPLS Tunnel Manager Component' Configuration Bitfield")
deployProvControlPlaneWdmCmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCmTraceDetail.setDescription("GMPLS Tunnel Manager Component' Trace Detail")
deployProvControlPlaneWdmCmAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 15), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCmAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCmAlarmActivationTime.setDescription("GMPLS Tunnel Manager Component' Alarm Activation Time")
deployProvControlPlaneWdmCmFisFrsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 16), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCmFisFrsTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCmFisFrsTimeout.setDescription("GMPLS Tunnel Manager Component' FIS-FRS Timeout")
deployProvControlPlaneWdmCmCrankBackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 17), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCmCrankBackTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCmCrankBackTimeout.setDescription("GMPLS Tunnel Manager Component' Crank-Back Timeout")
deployProvControlPlaneWdmCdbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCdbConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCdbConfigFlag.setDescription('Label Swithed Path Database Component Configuration Bitfield')
deployProvControlPlaneWdmCdbDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCdbDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCdbDetail.setDescription('Label Swithed Path Database Component Trace Detail')
deployProvControlPlaneWdmCdbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCdbMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCdbMaxSize.setDescription('Label Swithed Path Database Component Maximum Size; 0 implies no limit')
deployProvControlPlaneWdmRsvpMaxExpRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 21), Counter64String()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmRsvpMaxExpRestartTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmRsvpMaxExpRestartTime.setDescription("Maximum Expected Resource Reservation Protocol Component' Restart Time")
deployProvControlPlaneWdmRsvpMaxExpRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 22), Unsigned32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmRsvpMaxExpRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmRsvpMaxExpRecoveryTime.setDescription("Maximum Expected Resource Reservation Protocol Component' Recovery Time")
deployProvControlPlaneWdmRsvpConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmRsvpConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmRsvpConfigFlag.setDescription("Resource Reservation Protocol Component' Configuration Bitfield")
deployProvControlPlaneWdmTedbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmTedbConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmTedbConfigFlag.setDescription("Traffic Engineering Component' Configuration Bitfield")
deployProvControlPlaneWdmTedbTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmTedbTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmTedbTraceDetail.setDescription("Traffic Engineering Component' Trace Detail")
deployProvControlPlaneWdmTedbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmTedbMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmTedbMaxSize.setDescription("Traffic Engineering Component' Maximum Size")
deployProvControlPlaneWdmTedbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmTedbRouterId.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmTedbRouterId.setDescription("Traffic Engineering Component' Router ID")
deployProvControlPlaneWdmTedbMinAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 28), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmTedbMinAdvertWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmTedbMinAdvertWait.setDescription("Traffic Engineering Component' Minimum Advertisement Wait")
deployProvControlPlaneWdmNaasConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmNaasConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmNaasConfigFlag.setDescription("Node Attribute Advertising Service Database Component' Configuration Bitfield")
deployProvControlPlaneWdmNaasTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmNaasTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmNaasTraceDetail.setDescription("Node Attribute Advertising Service Database Component' Trace Detail")
deployProvControlPlaneWdmNaasMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmNaasMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmNaasMaxSize.setDescription("Node Attribute Advertising Service Database Component' Maximum Size")
deployProvControlPlaneWdmNaasAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 32), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmNaasAdvertWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmNaasAdvertWait.setDescription("Node Attribute Advertising Service Database Component' Advertisement Wait")
deployProvControlPlaneWdmPcConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmPcConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmPcConfigFlag.setDescription("Path Computation Component' Configuration Bitfield")
deployProvControlPlaneWdmPcTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmPcTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmPcTraceDetail.setDescription("Path Computation Component' Trace Detail")
deployProvControlPlaneWdmCdConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 35), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCdConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCdConfigFlag.setDescription("Configuration Data Component' Configuration Bitfield")
deployProvControlPlaneWdmCdTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCdTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCdTraceDetail.setDescription("Configuration Data Component' Trace Detail")
deployProvControlPlaneWdmCdResyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCdResyncTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCdResyncTimeout.setDescription("Configuration Data Component' Resync Timeout")
deployProvControlPlaneWdmRmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmRmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmRmConfigFlag.setDescription("Resource Management Component' Configuration Bitfield")
deployProvControlPlaneWdmRmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 39), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmRmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmRmTraceDetail.setDescription("Resource Management Component' Trace Detail")
deployProvControlPlaneWdmRmTraceTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmRmTraceTarget.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmRmTraceTarget.setDescription("Resource Management Component' Trace Target")
deployProvControlPlaneWdmNodeNameSyntax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 41), FspR7NodeId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmNodeNameSyntax.setStatus('deprecated')
if mibBuilder.loadTexts: deployProvControlPlaneWdmNodeNameSyntax.setDescription('Node Name Syntax')
deployProvControlPlaneWdmWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 11, 1, 42), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 12), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneWdmWaitToRestore.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmWaitToRestore.setDescription('Wait to Restore')
deployProvControlPlaneWdmCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12), )
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapTable.setDescription('')
deployProvControlPlaneWdmCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapEntry.setDescription('')
deployProvControlPlaneWdmCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRowStatus.setDescription('')
deployProvControlPlaneWdmCapCtmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCtmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCtmConfigFlag.setDescription("Label Switched Path Edge Component' Configuration Bitfield")
deployProvControlPlaneWdmCapCtmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCtmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCtmTraceDetail.setDescription("Label Switched Path Edge Component' Trace Detail")
deployProvControlPlaneWdmCapCtmSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 4), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCtmSetupTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCtmSetupTimeout.setDescription("Label Switched Path Edge Component' Set-Up Timeout")
deployProvControlPlaneWdmCapCtmShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 5), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCtmShutdownTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCtmShutdownTimeout.setDescription("Label Switched Path Edge Component' Shut-Down Timeout")
deployProvControlPlaneWdmCapCtmRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 6), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCtmRetryWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCtmRetryWait.setDescription("Label Switched Path Edge Component' Initialization Retry Wait")
deployProvControlPlaneWdmCapCtmRetryWaitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 7), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCtmRetryWaitMultiplier.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCtmRetryWaitMultiplier.setDescription("Label Switched Path Edge Component' Initialization Retry Wait Multiplier")
deployProvControlPlaneWdmCapCtmMaximumRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 8), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCtmMaximumRetryWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCtmMaximumRetryWait.setDescription("Label Switched Path Edge Component' Initialization Maximum Retry Wait")
deployProvControlPlaneWdmCapCtmMaximumRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 9), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCtmMaximumRetryNumber.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCtmMaximumRetryNumber.setDescription("Label Switched Path Edge Component' Initialization Maximum Retry Number")
deployProvControlPlaneWdmCapRaConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 10), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRaConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRaConfigFlag.setDescription("Resource Allocator Component' Configuration Bitfield")
deployProvControlPlaneWdmCapRaTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 11), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRaTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRaTraceDetail.setDescription("Resource Allocator Component' Trace Detail")
deployProvControlPlaneWdmCapRaAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 12), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRaAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRaAlarmActivationTime.setDescription("Resource Allocator Component' Alarm Activation Time")
deployProvControlPlaneWdmCapCmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 13), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCmConfigFlag.setDescription("GMPLS Tunnel Manager Component' Configuration Bitfield")
deployProvControlPlaneWdmCapCmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 14), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCmTraceDetail.setDescription("GMPLS Tunnel Manager Component' Trace Detail")
deployProvControlPlaneWdmCapCmAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 15), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCmAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCmAlarmActivationTime.setDescription("GMPLS Tunnel Manager Component' Alarm Activation Time")
deployProvControlPlaneWdmCapCmFisFrsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 16), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCmFisFrsTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCmFisFrsTimeout.setDescription("GMPLS Tunnel Manager Component' FIS-FRS Timeout")
deployProvControlPlaneWdmCapCmCrankBackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 17), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCmCrankBackTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCmCrankBackTimeout.setDescription("GMPLS Tunnel Manager Component' Crank-Back Timeout")
deployProvControlPlaneWdmCapCdbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 18), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCdbConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCdbConfigFlag.setDescription('Label Swithed Path Database Component Configuration Bitfield')
deployProvControlPlaneWdmCapCdbDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 19), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCdbDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCdbDetail.setDescription('Label Swithed Path Database Component Trace Detail')
deployProvControlPlaneWdmCapCdbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 20), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCdbMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCdbMaxSize.setDescription('Label Swithed Path Database Component Maximum Size; 0 implies no limit')
deployProvControlPlaneWdmCapRsvpMaxExpRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 21), Counter64StringCaps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRsvpMaxExpRestartTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRsvpMaxExpRestartTime.setDescription("Maximum Expected Resource Reservation Protocol Component' Restart Time")
deployProvControlPlaneWdmCapRsvpMaxExpRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 22), FspR7Unsigned32Caps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRsvpMaxExpRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRsvpMaxExpRecoveryTime.setDescription("Maximum Expected Resource Reservation Protocol Component' Recovery Time")
deployProvControlPlaneWdmCapRsvpConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 23), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRsvpConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRsvpConfigFlag.setDescription("Resource Reservation Protocol Component' Configuration Bitfield")
deployProvControlPlaneWdmCapTedbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 24), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapTedbConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapTedbConfigFlag.setDescription("Traffic Engineering Component' Configuration Bitfield")
deployProvControlPlaneWdmCapTedbTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 25), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapTedbTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapTedbTraceDetail.setDescription("Traffic Engineering Component' Trace Detail")
deployProvControlPlaneWdmCapTedbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 26), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapTedbMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapTedbMaxSize.setDescription("Traffic Engineering Component' Maximum Size")
deployProvControlPlaneWdmCapTedbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 27), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapTedbRouterId.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapTedbRouterId.setDescription("Traffic Engineering Component' Router ID")
deployProvControlPlaneWdmCapTedbMinAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 28), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapTedbMinAdvertWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapTedbMinAdvertWait.setDescription("Traffic Engineering Component' Minimum Advertisement Wait")
deployProvControlPlaneWdmCapNaasConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 29), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapNaasConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapNaasConfigFlag.setDescription("Node Attribute Advertising Service Database Component' Configuration Bitfield")
deployProvControlPlaneWdmCapNaasTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 30), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapNaasTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapNaasTraceDetail.setDescription("Node Attribute Advertising Service Database Component' Trace Detail")
deployProvControlPlaneWdmCapNaasMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 31), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapNaasMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapNaasMaxSize.setDescription("Node Attribute Advertising Service Database Component' Maximum Size")
deployProvControlPlaneWdmCapNaasAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 32), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapNaasAdvertWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapNaasAdvertWait.setDescription("Node Attribute Advertising Service Database Component' Advertisement Wait")
deployProvControlPlaneWdmCapPcConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 33), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapPcConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapPcConfigFlag.setDescription("Path Computation Component' Configuration Bitfield")
deployProvControlPlaneWdmCapPcTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 34), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapPcTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapPcTraceDetail.setDescription("Path Computation Component' Trace Detail")
deployProvControlPlaneWdmCapCdConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 35), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCdConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCdConfigFlag.setDescription("Configuration Data Component' Configuration Bitfield")
deployProvControlPlaneWdmCapCdTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 36), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCdTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCdTraceDetail.setDescription("Configuration Data Component' Trace Detail")
deployProvControlPlaneWdmCapCdResyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 37), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCdResyncTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapCdResyncTimeout.setDescription("Configuration Data Component' Resync Timeout")
deployProvControlPlaneWdmCapRmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 38), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRmConfigFlag.setDescription("Resource Management Component' Configuration Bitfield")
deployProvControlPlaneWdmCapRmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 39), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRmTraceDetail.setDescription("Resource Management Component' Trace Detail")
deployProvControlPlaneWdmCapRmTraceTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 40), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRmTraceTarget.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapRmTraceTarget.setDescription("Resource Management Component' Trace Target")
deployProvControlPlaneWdmCapNodeNameSyntax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 41), FspR7NodeIdCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapNodeNameSyntax.setStatus('deprecated')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapNodeNameSyntax.setDescription('Node Name Syntax')
deployProvControlPlaneWdmCapWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 12, 1, 42), FspR7Unsigned32Caps()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapWaitToRestore.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmCapWaitToRestore.setDescription('Wait to Restore')
deployProvControlPlaneWdmDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13), )
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsTable.setDescription('')
deployProvControlPlaneWdmDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsEntry.setDescription('')
deployProvControlPlaneWdmDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRowStatus.setDescription('')
deployProvControlPlaneWdmDefaultsCtmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCtmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCtmConfigFlag.setDescription("Label Switched Path Edge Component' Configuration Bitfield")
deployProvControlPlaneWdmDefaultsCtmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCtmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCtmTraceDetail.setDescription("Label Switched Path Edge Component' Trace Detail")
deployProvControlPlaneWdmDefaultsCtmSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 4), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCtmSetupTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCtmSetupTimeout.setDescription("Label Switched Path Edge Component' Set-Up Timeout")
deployProvControlPlaneWdmDefaultsCtmShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 5), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCtmShutdownTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCtmShutdownTimeout.setDescription("Label Switched Path Edge Component' Shut-Down Timeout")
deployProvControlPlaneWdmDefaultsCtmRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 6), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCtmRetryWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCtmRetryWait.setDescription("Label Switched Path Edge Component' Initialization Retry Wait")
deployProvControlPlaneWdmDefaultsCtmRetryWaitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCtmRetryWaitMultiplier.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCtmRetryWaitMultiplier.setDescription("Label Switched Path Edge Component' Initialization Retry Wait Multiplier")
deployProvControlPlaneWdmDefaultsCtmMaximumRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 8), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCtmMaximumRetryWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCtmMaximumRetryWait.setDescription("Label Switched Path Edge Component' Initialization Maximum Retry Wait")
deployProvControlPlaneWdmDefaultsCtmMaximumRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCtmMaximumRetryNumber.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCtmMaximumRetryNumber.setDescription("Label Switched Path Edge Component' Initialization Maximum Retry Number")
deployProvControlPlaneWdmDefaultsRaConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRaConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRaConfigFlag.setDescription("Resource Allocator Component' Configuration Bitfield")
deployProvControlPlaneWdmDefaultsRaTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRaTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRaTraceDetail.setDescription("Resource Allocator Component' Trace Detail")
deployProvControlPlaneWdmDefaultsRaAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 12), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRaAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRaAlarmActivationTime.setDescription("Resource Allocator Component' Alarm Activation Time")
deployProvControlPlaneWdmDefaultsCmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCmConfigFlag.setDescription("GMPLS Tunnel Manager Component' Configuration Bitfield")
deployProvControlPlaneWdmDefaultsCmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCmTraceDetail.setDescription("GMPLS Tunnel Manager Component' Trace Detail")
deployProvControlPlaneWdmDefaultsCmAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 15), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCmAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCmAlarmActivationTime.setDescription("GMPLS Tunnel Manager Component' Alarm Activation Time")
deployProvControlPlaneWdmDefaultsCmFisFrsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 16), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCmFisFrsTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCmFisFrsTimeout.setDescription("GMPLS Tunnel Manager Component' FIS-FRS Timeout")
deployProvControlPlaneWdmDefaultsCmCrankBackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 17), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCmCrankBackTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCmCrankBackTimeout.setDescription("GMPLS Tunnel Manager Component' Crank-Back Timeout")
deployProvControlPlaneWdmDefaultsCdbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCdbConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCdbConfigFlag.setDescription('Label Swithed Path Database Component Configuration Bitfield')
deployProvControlPlaneWdmDefaultsCdbDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCdbDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCdbDetail.setDescription('Label Swithed Path Database Component Trace Detail')
deployProvControlPlaneWdmDefaultsCdbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCdbMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCdbMaxSize.setDescription('Label Swithed Path Database Component Maximum Size; 0 implies no limit')
deployProvControlPlaneWdmDefaultsRsvpMaxExpRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 21), Counter64String()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRsvpMaxExpRestartTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRsvpMaxExpRestartTime.setDescription("Maximum Expected Resource Reservation Protocol Component' Restart Time")
deployProvControlPlaneWdmDefaultsRsvpMaxExpRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 22), Unsigned32()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRsvpMaxExpRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRsvpMaxExpRecoveryTime.setDescription("Maximum Expected Resource Reservation Protocol Component' Recovery Time")
deployProvControlPlaneWdmDefaultsRsvpConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRsvpConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRsvpConfigFlag.setDescription("Resource Reservation Protocol Component' Configuration Bitfield")
deployProvControlPlaneWdmDefaultsTedbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsTedbConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsTedbConfigFlag.setDescription("Traffic Engineering Component' Configuration Bitfield")
deployProvControlPlaneWdmDefaultsTedbTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsTedbTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsTedbTraceDetail.setDescription("Traffic Engineering Component' Trace Detail")
deployProvControlPlaneWdmDefaultsTedbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsTedbMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsTedbMaxSize.setDescription("Traffic Engineering Component' Maximum Size")
deployProvControlPlaneWdmDefaultsTedbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsTedbRouterId.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsTedbRouterId.setDescription("Traffic Engineering Component' Router ID")
deployProvControlPlaneWdmDefaultsTedbMinAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 28), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsTedbMinAdvertWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsTedbMinAdvertWait.setDescription("Traffic Engineering Component' Minimum Advertisement Wait")
deployProvControlPlaneWdmDefaultsNaasConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsNaasConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsNaasConfigFlag.setDescription("Node Attribute Advertising Service Database Component' Configuration Bitfield")
deployProvControlPlaneWdmDefaultsNaasTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsNaasTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsNaasTraceDetail.setDescription("Node Attribute Advertising Service Database Component' Trace Detail")
deployProvControlPlaneWdmDefaultsNaasMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsNaasMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsNaasMaxSize.setDescription("Node Attribute Advertising Service Database Component' Maximum Size")
deployProvControlPlaneWdmDefaultsNaasAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 32), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsNaasAdvertWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsNaasAdvertWait.setDescription("Node Attribute Advertising Service Database Component' Advertisement Wait")
deployProvControlPlaneWdmDefaultsPcConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsPcConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsPcConfigFlag.setDescription("Path Computation Component' Configuration Bitfield")
deployProvControlPlaneWdmDefaultsPcTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsPcTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsPcTraceDetail.setDescription("Path Computation Component' Trace Detail")
deployProvControlPlaneWdmDefaultsCdConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCdConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCdConfigFlag.setDescription("Configuration Data Component' Configuration Bitfield")
deployProvControlPlaneWdmDefaultsCdTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCdTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCdTraceDetail.setDescription("Configuration Data Component' Trace Detail")
deployProvControlPlaneWdmDefaultsCdResyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCdResyncTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsCdResyncTimeout.setDescription("Configuration Data Component' Resync Timeout")
deployProvControlPlaneWdmDefaultsRmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRmConfigFlag.setDescription("Resource Management Component' Configuration Bitfield")
deployProvControlPlaneWdmDefaultsRmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRmTraceDetail.setDescription("Resource Management Component' Trace Detail")
deployProvControlPlaneWdmDefaultsRmTraceTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRmTraceTarget.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsRmTraceTarget.setDescription("Resource Management Component' Trace Target")
deployProvControlPlaneWdmDefaultsNodeNameSyntax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 41), FspR7NodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsNodeNameSyntax.setStatus('deprecated')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsNodeNameSyntax.setDescription('Node Name Syntax')
deployProvControlPlaneWdmDefaultsWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 13, 1, 42), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 12), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsWaitToRestore.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneWdmDefaultsWaitToRestore.setDescription('Wait to Restore')
deployProvTunnelWdmTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14), )
if mibBuilder.loadTexts: deployProvTunnelWdmTable.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmTable.setDescription('')
deployProvTunnelWdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvTunnelWdmEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmEntry.setDescription('')
deployProvTunnelWdmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmRowStatus.setDescription('RowStatus')
deployProvTunnelWdmTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmTunnelId.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmTunnelId.setDescription('')
deployProvTunnelWdmTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmTunnelNo.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmTunnelNo.setDescription('')
deployProvTunnelWdmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmAlias.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmAlias.setDescription('')
deployProvTunnelWdmTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 5), FspR7CpTunnelType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmTunnelType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmTunnelType.setDescription('')
deployProvTunnelWdmToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmToTid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmToTid.setDescription('')
deployProvTunnelWdmToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmToNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmToNodeIp.setDescription('')
deployProvTunnelWdmFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 8), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmFromAid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmFromAid.setDescription('')
deployProvTunnelWdmToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 9), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmToAid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmToAid.setDescription('')
deployProvTunnelWdmConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 10), FspR7Conn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmConnectionDirection.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmConnectionDirection.setDescription('')
deployProvTunnelWdmFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 11), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmFacilityType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmFacilityType.setDescription('')
deployProvTunnelWdmTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 12), OhTerminationLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmTerminationLevel.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmTerminationLevel.setDescription('')
deployProvTunnelWdmFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 13), FspR7FecType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmFecType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmFecType.setDescription('')
deployProvTunnelWdmStuff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 14), FspR7Stuff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmStuff.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmStuff.setDescription('')
deployProvTunnelWdmProvisionedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 15), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmProvisionedPaths.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmProvisionedPaths.setDescription('')
deployProvTunnelWdmRecoveryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 16), FspR7CpRecoveryType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmRecoveryType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmRecoveryType.setDescription('')
deployProvTunnelWdmPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 17), FspR7CpPinning()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmPin.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmPin.setDescription('')
deployProvTunnelWdmRestorationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 18), FspR7CpRestorationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmRestorationType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmRestorationType.setDescription('')
deployProvTunnelWdmSubLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 19), FspR7SubLayer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmSubLayer.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmSubLayer.setDescription('')
deployProvTunnelWdmMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 20), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmMonitorEntities.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmMonitorEntities.setDescription('')
deployProvTunnelWdmSubLayerEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 21), FspR7SubLayerEncoding()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmSubLayerEncoding.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmSubLayerEncoding.setDescription('')
deployProvTunnelWdmPceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 22), FspR7PceMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmPceMode.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmPceMode.setDescription('')
deployProvTunnelWdmTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 23), FspR7CpTunnelScope()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmTunnelScope.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmTunnelScope.setDescription('Service Scope extending over either Client or Network Ports of Modules')
deployProvTunnelWdmLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 24), FspR7PacketsLayer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmLayer.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmLayer.setDescription('Notional Layer of Advertisement on Packets on the LIF')
deployProvTunnelWdmOifUni = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 25), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmOifUni.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmOifUni.setDescription('OIF UNI Tunnel')
deployProvTunnelWdmReversionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 26), FspR7CpReversionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmReversionType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmReversionType.setDescription('Manual Reversion, Automatic Reversion, or no reversion at all for tunnels supporting restoration')
deployProvTunnelWdmRestorationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 27), FspR7CpRestorationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmRestorationMode.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmRestorationMode.setDescription('Restoration Mode (replaces pinning)')
deployProvTunnelWdmRestPathsNoProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmRestPathsNoProv.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmRestPathsNoProv.setDescription('Number of provisioned Guaranteed Restoration Paths')
deployProvTunnelWdmRestorationPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 29), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmRestorationPaths.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmRestorationPaths.setDescription('')
deployProvTunnelWdmTunnelTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 30), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmTunnelTemplate.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmTunnelTemplate.setDescription("Tunnel Template, can't be brought into service")
deployProvTunnelWdmRestorationPathsComputed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 14, 1, 31), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelWdmRestorationPathsComputed.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmRestorationPathsComputed.setDescription('')
deployProvTunnelWdmCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15), )
if mibBuilder.loadTexts: deployProvTunnelWdmCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapTable.setDescription('')
deployProvTunnelWdmCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvTunnelWdmCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapEntry.setDescription('')
deployProvTunnelWdmCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapRowStatus.setDescription('RowStatus')
deployProvTunnelWdmCapTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapTunnelId.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapTunnelId.setDescription('')
deployProvTunnelWdmCapTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapTunnelNo.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapTunnelNo.setDescription('')
deployProvTunnelWdmCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapAlias.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapAlias.setDescription('')
deployProvTunnelWdmCapTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 5), FspR7CpTunnelTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapTunnelType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapTunnelType.setDescription('')
deployProvTunnelWdmCapToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapToTid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapToTid.setDescription('')
deployProvTunnelWdmCapToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 7), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapToNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapToNodeIp.setDescription('')
deployProvTunnelWdmCapFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapFromAid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapFromAid.setDescription('')
deployProvTunnelWdmCapToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapToAid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapToAid.setDescription('')
deployProvTunnelWdmCapConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 10), FspR7ConnCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapConnectionDirection.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapConnectionDirection.setDescription('')
deployProvTunnelWdmCapFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 11), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapFacilityType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapFacilityType.setDescription('')
deployProvTunnelWdmCapTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 12), OhTerminationLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapTerminationLevel.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapTerminationLevel.setDescription('')
deployProvTunnelWdmCapFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 13), FspR7FecTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapFecType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapFecType.setDescription('')
deployProvTunnelWdmCapStuff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 14), FspR7StuffCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapStuff.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapStuff.setDescription('')
deployProvTunnelWdmCapProvisionedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapProvisionedPaths.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapProvisionedPaths.setDescription('')
deployProvTunnelWdmCapRecoveryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 16), FspR7CpRecoveryTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapRecoveryType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapRecoveryType.setDescription('')
deployProvTunnelWdmCapPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 17), FspR7CpPinningCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapPin.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapPin.setDescription('')
deployProvTunnelWdmCapRestorationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 18), FspR7CpRestorationTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapRestorationType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapRestorationType.setDescription('')
deployProvTunnelWdmCapSubLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 19), FspR7SubLayerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapSubLayer.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapSubLayer.setDescription('')
deployProvTunnelWdmCapMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 20), FspR7EnableDisableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapMonitorEntities.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapMonitorEntities.setDescription('')
deployProvTunnelWdmCapSubLayerEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 21), FspR7SubLayerEncodingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapSubLayerEncoding.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapSubLayerEncoding.setDescription('')
deployProvTunnelWdmCapPceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 22), FspR7PceModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapPceMode.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapPceMode.setDescription('')
deployProvTunnelWdmCapTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 23), FspR7CpTunnelScopeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapTunnelScope.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapTunnelScope.setDescription('Service Scope extending over either Client or Network Ports of Modules')
deployProvTunnelWdmCapLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 24), FspR7PacketsLayerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapLayer.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapLayer.setDescription('Notional Layer of Advertisement on Packets on the LIF')
deployProvTunnelWdmCapOifUni = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 25), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapOifUni.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapOifUni.setDescription('OIF UNI Tunnel')
deployProvTunnelWdmCapReversionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 26), FspR7CpReversionTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapReversionType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapReversionType.setDescription('Manual Reversion, Automatic Reversion, or no reversion at all for tunnels supporting restoration')
deployProvTunnelWdmCapRestorationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 27), FspR7CpRestorationModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapRestorationMode.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapRestorationMode.setDescription('Restoration Mode (replaces pinning)')
deployProvTunnelWdmCapRestPathsNoProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 28), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapRestPathsNoProv.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapRestPathsNoProv.setDescription('Number of provisioned Guaranteed Restoration Paths')
deployProvTunnelWdmCapRestorationPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapRestorationPaths.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapRestorationPaths.setDescription('')
deployProvTunnelWdmCapTunnelTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 30), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapTunnelTemplate.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapTunnelTemplate.setDescription("Tunnel Template, can't be brought into service")
deployProvTunnelWdmCapRestorationPathsComputed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 15, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmCapRestorationPathsComputed.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmCapRestorationPathsComputed.setDescription('')
deployProvTunnelWdmDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16), )
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsTable.setDescription('')
deployProvTunnelWdmDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsEntry.setDescription('')
deployProvTunnelWdmDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsRowStatus.setDescription('RowStatus')
deployProvTunnelWdmDefaultsTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsTunnelId.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsTunnelId.setDescription('')
deployProvTunnelWdmDefaultsTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsTunnelNo.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsTunnelNo.setDescription('')
deployProvTunnelWdmDefaultsAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsAlias.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsAlias.setDescription('')
deployProvTunnelWdmDefaultsTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 5), FspR7CpTunnelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsTunnelType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsTunnelType.setDescription('')
deployProvTunnelWdmDefaultsToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsToTid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsToTid.setDescription('')
deployProvTunnelWdmDefaultsToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsToNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsToNodeIp.setDescription('')
deployProvTunnelWdmDefaultsFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 8), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsFromAid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsFromAid.setDescription('')
deployProvTunnelWdmDefaultsToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 9), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsToAid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsToAid.setDescription('')
deployProvTunnelWdmDefaultsConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 10), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsConnectionDirection.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsConnectionDirection.setDescription('')
deployProvTunnelWdmDefaultsFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 11), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsFacilityType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsFacilityType.setDescription('')
deployProvTunnelWdmDefaultsTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 12), OhTerminationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsTerminationLevel.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsTerminationLevel.setDescription('')
deployProvTunnelWdmDefaultsFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 13), FspR7FecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsFecType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsFecType.setDescription('')
deployProvTunnelWdmDefaultsStuff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 14), FspR7Stuff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsStuff.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsStuff.setDescription('')
deployProvTunnelWdmDefaultsProvisionedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsProvisionedPaths.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsProvisionedPaths.setDescription('')
deployProvTunnelWdmDefaultsRecoveryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 16), FspR7CpRecoveryType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsRecoveryType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsRecoveryType.setDescription('')
deployProvTunnelWdmDefaultsPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 17), FspR7CpPinning()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsPin.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsPin.setDescription('')
deployProvTunnelWdmDefaultsRestorationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 18), FspR7CpRestorationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsRestorationType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsRestorationType.setDescription('')
deployProvTunnelWdmDefaultsSubLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 19), FspR7SubLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsSubLayer.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsSubLayer.setDescription('')
deployProvTunnelWdmDefaultsMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 20), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsMonitorEntities.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsMonitorEntities.setDescription('')
deployProvTunnelWdmDefaultsSubLayerEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 21), FspR7SubLayerEncoding()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsSubLayerEncoding.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsSubLayerEncoding.setDescription('')
deployProvTunnelWdmDefaultsPceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 22), FspR7PceMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsPceMode.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsPceMode.setDescription('')
deployProvTunnelWdmDefaultsTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 23), FspR7CpTunnelScope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsTunnelScope.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsTunnelScope.setDescription('Service Scope extending over either Client or Network Ports of Modules')
deployProvTunnelWdmDefaultsLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 24), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsLayer.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsLayer.setDescription('Notional Layer of Advertisement on Packets on the LIF')
deployProvTunnelWdmDefaultsOifUni = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 25), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsOifUni.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsOifUni.setDescription('OIF UNI Tunnel')
deployProvTunnelWdmDefaultsReversionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 26), FspR7CpReversionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsReversionType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsReversionType.setDescription('Manual Reversion, Automatic Reversion, or no reversion at all for tunnels supporting restoration')
deployProvTunnelWdmDefaultsRestorationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 27), FspR7CpRestorationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsRestorationMode.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsRestorationMode.setDescription('Restoration Mode (replaces pinning)')
deployProvTunnelWdmDefaultsRestPathsNoProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsRestPathsNoProv.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsRestPathsNoProv.setDescription('Number of provisioned Guaranteed Restoration Paths')
deployProvTunnelWdmDefaultsRestorationPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 29), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsRestorationPaths.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsRestorationPaths.setDescription('')
deployProvTunnelWdmDefaultsTunnelTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 30), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsTunnelTemplate.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsTunnelTemplate.setDescription("Tunnel Template, can't be brought into service")
deployProvTunnelWdmDefaultsRestorationPathsComputed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 16, 1, 31), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsRestorationPathsComputed.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelWdmDefaultsRestorationPathsComputed.setDescription('')
deployProvPathWdmTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 18), )
if mibBuilder.loadTexts: deployProvPathWdmTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPathWdmTable.setDescription('')
deployProvPathWdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 18, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvPathWdmEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPathWdmEntry.setDescription('')
deployProvPathWdmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 18, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathWdmRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPathWdmRowStatus.setDescription('RowStatus')
deployProvPathWdmPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 18, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathWdmPathId.setStatus('current')
if mibBuilder.loadTexts: deployProvPathWdmPathId.setDescription('')
deployProvPathWdmCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 19), )
if mibBuilder.loadTexts: deployProvPathWdmCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPathWdmCapTable.setDescription('')
deployProvPathWdmCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 19, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvPathWdmCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPathWdmCapEntry.setDescription('')
deployProvPathWdmCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 19, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathWdmCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPathWdmCapRowStatus.setDescription('RowStatus')
deployProvPathWdmCapPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 19, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathWdmCapPathId.setStatus('current')
if mibBuilder.loadTexts: deployProvPathWdmCapPathId.setDescription('')
deployProvPathWdmDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 20), )
if mibBuilder.loadTexts: deployProvPathWdmDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPathWdmDefaultsTable.setDescription('')
deployProvPathWdmDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 20, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvPathWdmDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPathWdmDefaultsEntry.setDescription('')
deployProvPathWdmDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 20, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathWdmDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPathWdmDefaultsRowStatus.setDescription('RowStatus')
deployProvPathWdmDefaultsPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 20, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathWdmDefaultsPathId.setStatus('current')
if mibBuilder.loadTexts: deployProvPathWdmDefaultsPathId.setDescription('')
deployProvPathElementWdmTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21), )
if mibBuilder.loadTexts: deployProvPathElementWdmTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmTable.setDescription('')
deployProvPathElementWdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvPathElementWdmEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmEntry.setDescription('')
deployProvPathElementWdmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementWdmRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmRowStatus.setDescription('RowStatus')
deployProvPathElementWdmTrafficEngineeringType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21, 1, 2), FspR7CpTEType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementWdmTrafficEngineeringType.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmTrafficEngineeringType.setDescription('')
deployProvPathElementWdmLifIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementWdmLifIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmLifIp.setDescription('')
deployProvPathElementWdmNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementWdmNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmNodeIp.setDescription('')
deployProvPathElementWdmTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementWdmTid.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmTid.setDescription('')
deployProvPathElementWdmLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementWdmLogicalInterfaceId.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmLogicalInterfaceId.setDescription('')
deployProvPathElementWdmTie = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21, 1, 7), FspR7CpTie()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementWdmTie.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmTie.setDescription('')
deployProvPathElementWdmChannelUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21, 1, 8), FspR7ChannelNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementWdmChannelUp.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmChannelUp.setDescription('')
deployProvPathElementWdmChannelDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21, 1, 9), FspR7ChannelNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementWdmChannelDown.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmChannelDown.setDescription('')
deployProvPathElementWdmUpstreamModuleAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21, 1, 10), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementWdmUpstreamModuleAid.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmUpstreamModuleAid.setDescription('')
deployProvPathElementWdmDownstreamModuleAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 21, 1, 11), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementWdmDownstreamModuleAid.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmDownstreamModuleAid.setDescription('')
deployProvPathElementWdmCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22), )
if mibBuilder.loadTexts: deployProvPathElementWdmCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmCapTable.setDescription('')
deployProvPathElementWdmCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvPathElementWdmCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmCapEntry.setDescription('')
deployProvPathElementWdmCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmCapRowStatus.setDescription('RowStatus')
deployProvPathElementWdmCapTrafficEngineeringType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22, 1, 2), FspR7CpTETypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmCapTrafficEngineeringType.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmCapTrafficEngineeringType.setDescription('')
deployProvPathElementWdmCapLifIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22, 1, 3), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmCapLifIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmCapLifIp.setDescription('')
deployProvPathElementWdmCapNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22, 1, 4), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmCapNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmCapNodeIp.setDescription('')
deployProvPathElementWdmCapTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmCapTid.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmCapTid.setDescription('')
deployProvPathElementWdmCapLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22, 1, 6), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmCapLogicalInterfaceId.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmCapLogicalInterfaceId.setDescription('')
deployProvPathElementWdmCapTie = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22, 1, 7), FspR7CpTieCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmCapTie.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmCapTie.setDescription('')
deployProvPathElementWdmCapChannelUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22, 1, 8), FspR7ChannelNumberCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmCapChannelUp.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmCapChannelUp.setDescription('')
deployProvPathElementWdmCapChannelDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22, 1, 9), FspR7ChannelNumberCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmCapChannelDown.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmCapChannelDown.setDescription('')
deployProvPathElementWdmCapUpstreamModuleAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmCapUpstreamModuleAid.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmCapUpstreamModuleAid.setDescription('')
deployProvPathElementWdmCapDownstreamModuleAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 22, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmCapDownstreamModuleAid.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmCapDownstreamModuleAid.setDescription('')
deployProvPathElementWdmDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23), )
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsTable.setDescription('')
deployProvPathElementWdmDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsEntry.setDescription('')
deployProvPathElementWdmDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsRowStatus.setDescription('RowStatus')
deployProvPathElementWdmDefaultsTrafficEngineeringType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23, 1, 2), FspR7CpTEType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsTrafficEngineeringType.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsTrafficEngineeringType.setDescription('')
deployProvPathElementWdmDefaultsLifIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsLifIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsLifIp.setDescription('')
deployProvPathElementWdmDefaultsNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsNodeIp.setDescription('')
deployProvPathElementWdmDefaultsTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsTid.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsTid.setDescription('')
deployProvPathElementWdmDefaultsLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsLogicalInterfaceId.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsLogicalInterfaceId.setDescription('')
deployProvPathElementWdmDefaultsTie = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23, 1, 7), FspR7CpTie()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsTie.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsTie.setDescription('')
deployProvPathElementWdmDefaultsChannelUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23, 1, 8), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsChannelUp.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsChannelUp.setDescription('')
deployProvPathElementWdmDefaultsChannelDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23, 1, 9), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsChannelDown.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsChannelDown.setDescription('')
deployProvPathElementWdmDefaultsUpstreamModuleAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23, 1, 10), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsUpstreamModuleAid.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsUpstreamModuleAid.setDescription('')
deployProvPathElementWdmDefaultsDownstreamModuleAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 23, 1, 11), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsDownstreamModuleAid.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementWdmDefaultsDownstreamModuleAid.setDescription('')
deployProvCopyPathWdmTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 24), )
if mibBuilder.loadTexts: deployProvCopyPathWdmTable.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathWdmTable.setDescription('')
deployProvCopyPathWdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 24, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvCopyPathWdmEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathWdmEntry.setDescription('')
deployProvCopyPathWdmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 24, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCopyPathWdmRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathWdmRowStatus.setDescription('RowStatus')
deployProvCopyPathWdmSourcePathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 24, 1, 2), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCopyPathWdmSourcePathIndex.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathWdmSourcePathIndex.setDescription('')
deployProvCopyPathWdmPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 24, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCopyPathWdmPathId.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathWdmPathId.setDescription('')
deployProvCopyPathWdmCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 25), )
if mibBuilder.loadTexts: deployProvCopyPathWdmCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathWdmCapTable.setDescription('')
deployProvCopyPathWdmCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 25, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvCopyPathWdmCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathWdmCapEntry.setDescription('')
deployProvCopyPathWdmCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 25, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathWdmCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathWdmCapRowStatus.setDescription('RowStatus')
deployProvCopyPathWdmCapSourcePathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 25, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathWdmCapSourcePathIndex.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathWdmCapSourcePathIndex.setDescription('')
deployProvCopyPathWdmCapPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 25, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathWdmCapPathId.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathWdmCapPathId.setDescription('')
deployProvCopyPathWdmDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 26), )
if mibBuilder.loadTexts: deployProvCopyPathWdmDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathWdmDefaultsTable.setDescription('')
deployProvCopyPathWdmDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 26, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"))
if mibBuilder.loadTexts: deployProvCopyPathWdmDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathWdmDefaultsEntry.setDescription('')
deployProvCopyPathWdmDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 26, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathWdmDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathWdmDefaultsRowStatus.setDescription('RowStatus')
deployProvCopyPathWdmDefaultsSourcePathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 26, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathWdmDefaultsSourcePathIndex.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathWdmDefaultsSourcePathIndex.setDescription('')
deployProvCopyPathWdmDefaultsPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 26, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathWdmDefaultsPathId.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathWdmDefaultsPathId.setDescription('')
deployProvLogicalCpIfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46), )
if mibBuilder.loadTexts: deployProvLogicalCpIfTable.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfTable.setDescription('')
deployProvLogicalCpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvLogicalCpIfEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfEntry.setDescription('')
deployProvLogicalCpIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfRowStatus.setDescription('RowStatus')
deployProvLogicalCpIfFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 2), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfFacilityType.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfFacilityType.setDescription('Facility Type.')
deployProvLogicalCpIfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfAlias.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfAlias.setDescription('Alias.')
deployProvLogicalCpIfDcnAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 4), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfDcnAid.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDcnAid.setDescription('Alias.')
deployProvLogicalCpIfOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 5), FspR7OspfMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfOspf.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfOspf.setDescription('OSPF Routing (Dynamic)')
deployProvLogicalCpIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfAreaId.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfAreaId.setDescription('OSPF Area ID for IP Interface')
deployProvLogicalCpIfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfMetric.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfMetric.setDescription('Routing Metric')
deployProvLogicalCpIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfHelloInterval.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfHelloInterval.setDescription('Hello Interval')
deployProvLogicalCpIfDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfDeadInterval.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDeadInterval.setDescription('Dead Interval')
deployProvLogicalCpIfPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfPrio.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfPrio.setDescription('Priority')
deployProvLogicalCpIfRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfRetransmitInterval.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfRetransmitInterval.setDescription('Retransmit Interval')
deployProvLogicalCpIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 12), FspR7CpAuthType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfAuthType.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfAuthType.setDescription('Authentication Type')
deployProvLogicalCpIfAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 13), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfAuthString.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfAuthString.setDescription('Authentication String')
deployProvLogicalCpIfTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 14), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfTransport.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfTransport.setDescription('Transport Layer Termination Point.')
deployProvLogicalCpIfFarEndLifId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 15), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfFarEndLifId.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfFarEndLifId.setDescription('Far End Transport Layer Termination Point - index of AID')
deployProvLogicalCpIfFarEndNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfFarEndNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfFarEndNodeIp.setDescription('FEND Log. Interf. ID.')
deployProvLogicalCpIfFarEndTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 17), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfFarEndTid.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfFarEndTid.setDescription('Far End Tid.')
deployProvLogicalCpIfLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 18), FspR7PacketsLayer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfLayer.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfLayer.setDescription('Layer of Packets on LIF.')
deployProvLogicalCpIfCpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 19), FspR7CpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfCpType.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCpType.setDescription('Control Plane Type')
deployProvLogicalCpIfRefreshTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 20), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfRefreshTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfRefreshTimeout.setDescription('Refresh Timeout')
deployProvLogicalCpIfRefreshMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 21), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 20), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfRefreshMultiplier.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfRefreshMultiplier.setDescription('Refresh Multiplier')
deployProvLogicalCpIfTeMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfTeMetric.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfTeMetric.setDescription('Traffic Engineering Metric')
deployProvLogicalCpIfTeAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfTeAreaId.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfTeAreaId.setDescription('OSPF Area ID for Traffic Engineering')
deployProvLogicalCpIfLinkColor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfLinkColor.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfLinkColor.setDescription('Link Colouring')
deployProvLogicalCpIfIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 25), FspR7IpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfIpType.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfIpType.setDescription('Type of IP configuration')
deployProvLogicalCpIfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfIpAddr.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfIpAddr.setDescription('IP Address assigned to LAN IP Interface')
deployProvLogicalCpIfIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfIpAddrMask.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfIpAddrMask.setDescription('IP MASK assigned to LAN IP Interface')
deployProvLogicalCpIfAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 28), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
deployProvLogicalCpIfEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 29), FspR7CpEncapsulation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfEncapsulation.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfEncapsulation.setDescription('Encapsulation')
deployProvLogicalCpIfPushedNendIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 30), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfPushedNendIpHeader.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfPushedNendIpHeader.setDescription('Pushed Near End IP address in encapsulating header')
deployProvLogicalCpIfPushedFarEndIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 31), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfPushedFarEndIpHeader.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfPushedFarEndIpHeader.setDescription('Pushed Far End IP address in encapsulating header')
deployProvLogicalCpIfTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 32), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 255), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfTimeToLive.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfTimeToLive.setDescription('Time to Live')
deployProvLogicalCpIfNendTeLinkIdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 33), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfNendTeLinkIdNum.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfNendTeLinkIdNum.setDescription('Local Traffic Engineering Link Identifier for Numbered Link')
deployProvLogicalCpIfFendTeLinkIdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 34), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfFendTeLinkIdNum.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfFendTeLinkIdNum.setDescription('Remote Traffic Engineering Link Identifier for Numbered Link')
deployProvLogicalCpIfFendDataLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 35), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfFendDataLinkId.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfFendDataLinkId.setDescription('Remote physical link identifier')
deployProvLogicalCpIfNendTeLinkIdUnn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfNendTeLinkIdUnn.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfNendTeLinkIdUnn.setDescription('Local Traffic Engineering Link Identifier for Unnumbered Link')
deployProvLogicalCpIfFendTeLinkIdUnn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfFendTeLinkIdUnn.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfFendTeLinkIdUnn.setDescription('Remote Traffic Engineering Link Identifier for Unnumbered Link')
deployProvLogicalCpIfEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 38), FspR7CpEncode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfEncoding.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfEncoding.setDescription('Encoding')
deployProvLogicalCpIfTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 39), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfTunnelAid.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfTunnelAid.setDescription('Supporting Tunnel')
deployProvLogicalCpIfExtAdvertised = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 40), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfExtAdvertised.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfExtAdvertised.setDescription('Externally Advertised TE Link')
deployProvLogicalCpIfVTeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 41), FspR7CpVTeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfVTeType.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfVTeType.setDescription('Type of Virtual TE configuration')
deployProvLogicalCpIfVNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 42), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfVNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfVNodeIp.setDescription('Virtual Node IP')
deployProvLogicalCpIfVNodeTltp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 46, 1, 43), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvLogicalCpIfVNodeTltp.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfVNodeTltp.setDescription('Virtual Node Transport Layer Termination Point')
deployProvLogicalCpIfCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47), )
if mibBuilder.loadTexts: deployProvLogicalCpIfCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapTable.setDescription('')
deployProvLogicalCpIfCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvLogicalCpIfCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapEntry.setDescription('')
deployProvLogicalCpIfCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapRowStatus.setDescription('RowStatus')
deployProvLogicalCpIfCapFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapFacilityType.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapFacilityType.setDescription('Facility Type.')
deployProvLogicalCpIfCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapAlias.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapAlias.setDescription('Alias.')
deployProvLogicalCpIfCapDcnAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapDcnAid.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapDcnAid.setDescription('Alias.')
deployProvLogicalCpIfCapOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 5), FspR7OspfModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapOspf.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapOspf.setDescription('OSPF Routing (Dynamic)')
deployProvLogicalCpIfCapAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 6), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapAreaId.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapAreaId.setDescription('OSPF Area ID for IP Interface')
deployProvLogicalCpIfCapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 7), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapMetric.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapMetric.setDescription('Routing Metric')
deployProvLogicalCpIfCapHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 8), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapHelloInterval.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapHelloInterval.setDescription('Hello Interval')
deployProvLogicalCpIfCapDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 9), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapDeadInterval.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapDeadInterval.setDescription('Dead Interval')
deployProvLogicalCpIfCapPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 10), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapPrio.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapPrio.setDescription('Priority')
deployProvLogicalCpIfCapRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 11), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapRetransmitInterval.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapRetransmitInterval.setDescription('Retransmit Interval')
deployProvLogicalCpIfCapAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 12), FspR7CpAuthTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapAuthType.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapAuthType.setDescription('Authentication Type')
deployProvLogicalCpIfCapAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapAuthString.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapAuthString.setDescription('Authentication String')
deployProvLogicalCpIfCapTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapTransport.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapTransport.setDescription('Transport Layer Termination Point.')
deployProvLogicalCpIfCapFarEndLifId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapFarEndLifId.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapFarEndLifId.setDescription('Far End Transport Layer Termination Point - index of AID')
deployProvLogicalCpIfCapFarEndNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 16), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapFarEndNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapFarEndNodeIp.setDescription('FEND Log. Interf. ID.')
deployProvLogicalCpIfCapFarEndTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapFarEndTid.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapFarEndTid.setDescription('Far End Tid.')
deployProvLogicalCpIfCapLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 18), FspR7PacketsLayerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapLayer.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapLayer.setDescription('Layer of Packets on LIF.')
deployProvLogicalCpIfCapCpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 19), FspR7CpTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapCpType.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapCpType.setDescription('Control Plane Type')
deployProvLogicalCpIfCapRefreshTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 20), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapRefreshTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapRefreshTimeout.setDescription('Refresh Timeout')
deployProvLogicalCpIfCapRefreshMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 21), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapRefreshMultiplier.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapRefreshMultiplier.setDescription('Refresh Multiplier')
deployProvLogicalCpIfCapTeMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 22), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapTeMetric.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapTeMetric.setDescription('Traffic Engineering Metric')
deployProvLogicalCpIfCapTeAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 23), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapTeAreaId.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapTeAreaId.setDescription('OSPF Area ID for Traffic Engineering')
deployProvLogicalCpIfCapLinkColor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 24), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapLinkColor.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapLinkColor.setDescription('Link Colouring')
deployProvLogicalCpIfCapIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 25), FspR7IpTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapIpType.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapIpType.setDescription('Type of IP configuration')
deployProvLogicalCpIfCapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 26), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapIpAddr.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapIpAddr.setDescription('IP Address assigned to LAN IP Interface')
deployProvLogicalCpIfCapIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 27), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapIpAddrMask.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapIpAddrMask.setDescription('IP MASK assigned to LAN IP Interface')
deployProvLogicalCpIfCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 28), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
deployProvLogicalCpIfCapEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 29), FspR7CpEncapsulationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapEncapsulation.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapEncapsulation.setDescription('Encapsulation')
deployProvLogicalCpIfCapPushedNendIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 30), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapPushedNendIpHeader.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapPushedNendIpHeader.setDescription('Pushed Near End IP address in encapsulating header')
deployProvLogicalCpIfCapPushedFarEndIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 31), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapPushedFarEndIpHeader.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapPushedFarEndIpHeader.setDescription('Pushed Far End IP address in encapsulating header')
deployProvLogicalCpIfCapTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 32), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapTimeToLive.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapTimeToLive.setDescription('Time to Live')
deployProvLogicalCpIfCapNendTeLinkIdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 33), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapNendTeLinkIdNum.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapNendTeLinkIdNum.setDescription('Local Traffic Engineering Link Identifier for Numbered Link')
deployProvLogicalCpIfCapFendTeLinkIdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 34), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapFendTeLinkIdNum.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapFendTeLinkIdNum.setDescription('Remote Traffic Engineering Link Identifier for Numbered Link')
deployProvLogicalCpIfCapFendDataLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 35), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapFendDataLinkId.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapFendDataLinkId.setDescription('Remote physical link identifier')
deployProvLogicalCpIfCapNendTeLinkIdUnn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 36), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapNendTeLinkIdUnn.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapNendTeLinkIdUnn.setDescription('Local Traffic Engineering Link Identifier for Unnumbered Link')
deployProvLogicalCpIfCapFendTeLinkIdUnn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 37), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapFendTeLinkIdUnn.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapFendTeLinkIdUnn.setDescription('Remote Traffic Engineering Link Identifier for Unnumbered Link')
deployProvLogicalCpIfCapEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 38), FspR7CpEncodeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapEncoding.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapEncoding.setDescription('Encoding')
deployProvLogicalCpIfCapTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapTunnelAid.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapTunnelAid.setDescription('Supporting Tunnel')
deployProvLogicalCpIfCapExtAdvertised = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 40), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapExtAdvertised.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapExtAdvertised.setDescription('Externally Advertised TE Link')
deployProvLogicalCpIfCapVTeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 41), FspR7CpVTeTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapVTeType.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapVTeType.setDescription('Type of Virtual TE configuration')
deployProvLogicalCpIfCapVNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 42), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapVNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapVNodeIp.setDescription('Virtual Node IP')
deployProvLogicalCpIfCapVNodeTltp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 47, 1, 43), FspR7SnmpLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfCapVNodeTltp.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfCapVNodeTltp.setDescription('Virtual Node Transport Layer Termination Point')
deployProvLogicalCpIfDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48), )
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsTable.setDescription('')
deployProvLogicalCpIfDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsEntry.setDescription('')
deployProvLogicalCpIfDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsRowStatus.setDescription('RowStatus')
deployProvLogicalCpIfDefaultsFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsFacilityType.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsFacilityType.setDescription('Facility Type.')
deployProvLogicalCpIfDefaultsAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsAlias.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsAlias.setDescription('Alias.')
deployProvLogicalCpIfDefaultsDcnAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 4), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsDcnAid.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsDcnAid.setDescription('Alias.')
deployProvLogicalCpIfDefaultsOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 5), FspR7OspfMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsOspf.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsOspf.setDescription('OSPF Routing (Dynamic)')
deployProvLogicalCpIfDefaultsAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsAreaId.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsAreaId.setDescription('OSPF Area ID for IP Interface')
deployProvLogicalCpIfDefaultsMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsMetric.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsMetric.setDescription('Routing Metric')
deployProvLogicalCpIfDefaultsHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsHelloInterval.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsHelloInterval.setDescription('Hello Interval')
deployProvLogicalCpIfDefaultsDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsDeadInterval.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsDeadInterval.setDescription('Dead Interval')
deployProvLogicalCpIfDefaultsPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsPrio.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsPrio.setDescription('Priority')
deployProvLogicalCpIfDefaultsRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsRetransmitInterval.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsRetransmitInterval.setDescription('Retransmit Interval')
deployProvLogicalCpIfDefaultsAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 12), FspR7CpAuthType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsAuthType.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsAuthType.setDescription('Authentication Type')
deployProvLogicalCpIfDefaultsAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsAuthString.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsAuthString.setDescription('Authentication String')
deployProvLogicalCpIfDefaultsTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsTransport.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsTransport.setDescription('Transport Layer Termination Point.')
deployProvLogicalCpIfDefaultsFarEndLifId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 15), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsFarEndLifId.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsFarEndLifId.setDescription('Far End Transport Layer Termination Point - index of AID')
deployProvLogicalCpIfDefaultsFarEndNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsFarEndNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsFarEndNodeIp.setDescription('FEND Log. Interf. ID.')
deployProvLogicalCpIfDefaultsFarEndTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsFarEndTid.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsFarEndTid.setDescription('Far End Tid.')
deployProvLogicalCpIfDefaultsLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 18), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsLayer.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsLayer.setDescription('Layer of Packets on LIF.')
deployProvLogicalCpIfDefaultsCpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 19), FspR7CpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsCpType.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsCpType.setDescription('Control Plane Type')
deployProvLogicalCpIfDefaultsRefreshTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 20), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsRefreshTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsRefreshTimeout.setDescription('Refresh Timeout')
deployProvLogicalCpIfDefaultsRefreshMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 21), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 20), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsRefreshMultiplier.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsRefreshMultiplier.setDescription('Refresh Multiplier')
deployProvLogicalCpIfDefaultsTeMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsTeMetric.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsTeMetric.setDescription('Traffic Engineering Metric')
deployProvLogicalCpIfDefaultsTeAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsTeAreaId.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsTeAreaId.setDescription('OSPF Area ID for Traffic Engineering')
deployProvLogicalCpIfDefaultsLinkColor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsLinkColor.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsLinkColor.setDescription('Link Colouring')
deployProvLogicalCpIfDefaultsIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 25), FspR7IpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsIpType.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsIpType.setDescription('Type of IP configuration')
deployProvLogicalCpIfDefaultsIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 26), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsIpAddr.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsIpAddr.setDescription('IP Address assigned to LAN IP Interface')
deployProvLogicalCpIfDefaultsIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsIpAddrMask.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsIpAddrMask.setDescription('IP MASK assigned to LAN IP Interface')
deployProvLogicalCpIfDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 28), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsAdmin.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
deployProvLogicalCpIfDefaultsEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 29), FspR7CpEncapsulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsEncapsulation.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsEncapsulation.setDescription('Encapsulation')
deployProvLogicalCpIfDefaultsPushedNendIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 30), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsPushedNendIpHeader.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsPushedNendIpHeader.setDescription('Pushed Near End IP address in encapsulating header')
deployProvLogicalCpIfDefaultsPushedFarEndIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 31), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsPushedFarEndIpHeader.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsPushedFarEndIpHeader.setDescription('Pushed Far End IP address in encapsulating header')
deployProvLogicalCpIfDefaultsTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 32), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 255), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsTimeToLive.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsTimeToLive.setDescription('Time to Live')
deployProvLogicalCpIfDefaultsNendTeLinkIdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 33), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsNendTeLinkIdNum.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsNendTeLinkIdNum.setDescription('Local Traffic Engineering Link Identifier for Numbered Link')
deployProvLogicalCpIfDefaultsFendTeLinkIdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 34), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsFendTeLinkIdNum.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsFendTeLinkIdNum.setDescription('Remote Traffic Engineering Link Identifier for Numbered Link')
deployProvLogicalCpIfDefaultsFendDataLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsFendDataLinkId.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsFendDataLinkId.setDescription('Remote physical link identifier')
deployProvLogicalCpIfDefaultsNendTeLinkIdUnn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsNendTeLinkIdUnn.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsNendTeLinkIdUnn.setDescription('Local Traffic Engineering Link Identifier for Unnumbered Link')
deployProvLogicalCpIfDefaultsFendTeLinkIdUnn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsFendTeLinkIdUnn.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsFendTeLinkIdUnn.setDescription('Remote Traffic Engineering Link Identifier for Unnumbered Link')
deployProvLogicalCpIfDefaultsEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 38), FspR7CpEncode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsEncoding.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsEncoding.setDescription('Encoding')
deployProvLogicalCpIfDefaultsTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 39), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsTunnelAid.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsTunnelAid.setDescription('Supporting Tunnel')
deployProvLogicalCpIfDefaultsExtAdvertised = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 40), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsExtAdvertised.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsExtAdvertised.setDescription('Externally Advertised TE Link')
deployProvLogicalCpIfDefaultsVTeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 41), FspR7CpVTeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsVTeType.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsVTeType.setDescription('Type of Virtual TE configuration')
deployProvLogicalCpIfDefaultsVNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 42), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsVNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsVNodeIp.setDescription('Virtual Node IP')
deployProvLogicalCpIfDefaultsVNodeTltp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 48, 1, 43), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsVNodeTltp.setStatus('current')
if mibBuilder.loadTexts: deployProvLogicalCpIfDefaultsVNodeTltp.setDescription('Virtual Node Transport Layer Termination Point')
deployProvControlPlaneEthTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61), )
if mibBuilder.loadTexts: deployProvControlPlaneEthTable.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthTable.setDescription('')
deployProvControlPlaneEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvControlPlaneEthEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthEntry.setDescription('')
deployProvControlPlaneEthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthRowStatus.setDescription('')
deployProvControlPlaneEthCtmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCtmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCtmConfigFlag.setDescription("Label Switched Path Edge Component' Configuration Bitfield")
deployProvControlPlaneEthCtmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCtmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCtmTraceDetail.setDescription("Label Switched Path Edge Component' Trace Detail")
deployProvControlPlaneEthCtmSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 4), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCtmSetupTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCtmSetupTimeout.setDescription("Label Switched Path Edge Component' Set-Up Timeout")
deployProvControlPlaneEthCtmShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 5), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCtmShutdownTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCtmShutdownTimeout.setDescription("Label Switched Path Edge Component' Shut-Down Timeout")
deployProvControlPlaneEthCtmRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 6), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCtmRetryWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCtmRetryWait.setDescription("Label Switched Path Edge Component' Initialization Retry Wait")
deployProvControlPlaneEthCtmRetryWaitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCtmRetryWaitMultiplier.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCtmRetryWaitMultiplier.setDescription("Label Switched Path Edge Component' Initialization Retry Wait Multiplier")
deployProvControlPlaneEthCtmMaximumRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 8), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCtmMaximumRetryWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCtmMaximumRetryWait.setDescription("Label Switched Path Edge Component' Initialization Maximum Retry Wait")
deployProvControlPlaneEthCtmMaximumRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCtmMaximumRetryNumber.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCtmMaximumRetryNumber.setDescription("Label Switched Path Edge Component' Initialization Maximum Retry Number")
deployProvControlPlaneEthRaConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthRaConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthRaConfigFlag.setDescription("Resource Allocator Component' Configuration Bitfield")
deployProvControlPlaneEthRaTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthRaTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthRaTraceDetail.setDescription("Resource Allocator Component' Trace Detail")
deployProvControlPlaneEthRaAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 12), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthRaAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthRaAlarmActivationTime.setDescription("Resource Allocator Component' Alarm Activation Time")
deployProvControlPlaneEthCmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCmConfigFlag.setDescription("GMPLS Tunnel Manager Component' Configuration Bitfield")
deployProvControlPlaneEthCmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCmTraceDetail.setDescription("GMPLS Tunnel Manager Component' Trace Detail")
deployProvControlPlaneEthCmAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 15), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCmAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCmAlarmActivationTime.setDescription("GMPLS Tunnel Manager Component' Alarm Activation Time")
deployProvControlPlaneEthCmFisFrsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 16), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCmFisFrsTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCmFisFrsTimeout.setDescription("GMPLS Tunnel Manager Component' FIS-FRS Timeout")
deployProvControlPlaneEthCmCrankBackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 17), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCmCrankBackTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCmCrankBackTimeout.setDescription("GMPLS Tunnel Manager Component' Crank-Back Timeout")
deployProvControlPlaneEthCdbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCdbConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCdbConfigFlag.setDescription('Label Swithed Path Database Component Configuration Bitfield')
deployProvControlPlaneEthCdbDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCdbDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCdbDetail.setDescription('Label Swithed Path Database Component Trace Detail')
deployProvControlPlaneEthCdbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCdbMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCdbMaxSize.setDescription('Label Swithed Path Database Component Maximum Size; 0 implies no limit')
deployProvControlPlaneEthRsvpMaxExpRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 21), Counter64String()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthRsvpMaxExpRestartTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthRsvpMaxExpRestartTime.setDescription("Maximum Expected Resource Reservation Protocol Component' Restart Time")
deployProvControlPlaneEthRsvpMaxExpRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 22), Unsigned32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthRsvpMaxExpRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthRsvpMaxExpRecoveryTime.setDescription("Maximum Expected Resource Reservation Protocol Component' Recovery Time")
deployProvControlPlaneEthRsvpConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthRsvpConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthRsvpConfigFlag.setDescription("Resource Reservation Protocol Component' Configuration Bitfield")
deployProvControlPlaneEthTedbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthTedbConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthTedbConfigFlag.setDescription("Traffic Engineering Component' Configuration Bitfield")
deployProvControlPlaneEthTedbTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthTedbTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthTedbTraceDetail.setDescription("Traffic Engineering Component' Trace Detail")
deployProvControlPlaneEthTedbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthTedbMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthTedbMaxSize.setDescription("Traffic Engineering Component' Maximum Size")
deployProvControlPlaneEthTedbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthTedbRouterId.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthTedbRouterId.setDescription("Traffic Engineering Component' Router ID")
deployProvControlPlaneEthTedbMinAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 28), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthTedbMinAdvertWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthTedbMinAdvertWait.setDescription("Traffic Engineering Component' Minimum Advertisement Wait")
deployProvControlPlaneEthNaasConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthNaasConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthNaasConfigFlag.setDescription("Node Attribute Advertising Service Database Component' Configuration Bitfield")
deployProvControlPlaneEthNaasTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthNaasTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthNaasTraceDetail.setDescription("Node Attribute Advertising Service Database Component' Trace Detail")
deployProvControlPlaneEthNaasMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthNaasMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthNaasMaxSize.setDescription("Node Attribute Advertising Service Database Component' Maximum Size")
deployProvControlPlaneEthNaasAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 32), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthNaasAdvertWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthNaasAdvertWait.setDescription("Node Attribute Advertising Service Database Component' Advertisement Wait")
deployProvControlPlaneEthPcConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthPcConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthPcConfigFlag.setDescription("Path Computation Component' Configuration Bitfield")
deployProvControlPlaneEthPcTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthPcTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthPcTraceDetail.setDescription("Path Computation Component' Trace Detail")
deployProvControlPlaneEthCdConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 35), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCdConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCdConfigFlag.setDescription("Configuration Data Component' Configuration Bitfield")
deployProvControlPlaneEthCdTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCdTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCdTraceDetail.setDescription("Configuration Data Component' Trace Detail")
deployProvControlPlaneEthCdResyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthCdResyncTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCdResyncTimeout.setDescription("Configuration Data Component' Resync Timeout")
deployProvControlPlaneEthRmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthRmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthRmConfigFlag.setDescription("Resource Management Component' Configuration Bitfield")
deployProvControlPlaneEthRmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 39), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthRmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthRmTraceDetail.setDescription("Resource Management Component' Trace Detail")
deployProvControlPlaneEthRmTraceTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 61, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneEthRmTraceTarget.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthRmTraceTarget.setDescription("Resource Management Component' Trace Target")
deployProvControlPlaneEthCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62), )
if mibBuilder.loadTexts: deployProvControlPlaneEthCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapTable.setDescription('')
deployProvControlPlaneEthCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvControlPlaneEthCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapEntry.setDescription('')
deployProvControlPlaneEthCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRowStatus.setDescription('')
deployProvControlPlaneEthCapCtmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCtmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCtmConfigFlag.setDescription("Label Switched Path Edge Component' Configuration Bitfield")
deployProvControlPlaneEthCapCtmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCtmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCtmTraceDetail.setDescription("Label Switched Path Edge Component' Trace Detail")
deployProvControlPlaneEthCapCtmSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 4), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCtmSetupTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCtmSetupTimeout.setDescription("Label Switched Path Edge Component' Set-Up Timeout")
deployProvControlPlaneEthCapCtmShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 5), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCtmShutdownTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCtmShutdownTimeout.setDescription("Label Switched Path Edge Component' Shut-Down Timeout")
deployProvControlPlaneEthCapCtmRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 6), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCtmRetryWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCtmRetryWait.setDescription("Label Switched Path Edge Component' Initialization Retry Wait")
deployProvControlPlaneEthCapCtmRetryWaitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 7), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCtmRetryWaitMultiplier.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCtmRetryWaitMultiplier.setDescription("Label Switched Path Edge Component' Initialization Retry Wait Multiplier")
deployProvControlPlaneEthCapCtmMaximumRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 8), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCtmMaximumRetryWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCtmMaximumRetryWait.setDescription("Label Switched Path Edge Component' Initialization Maximum Retry Wait")
deployProvControlPlaneEthCapCtmMaximumRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 9), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCtmMaximumRetryNumber.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCtmMaximumRetryNumber.setDescription("Label Switched Path Edge Component' Initialization Maximum Retry Number")
deployProvControlPlaneEthCapRaConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 10), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRaConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRaConfigFlag.setDescription("Resource Allocator Component' Configuration Bitfield")
deployProvControlPlaneEthCapRaTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 11), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRaTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRaTraceDetail.setDescription("Resource Allocator Component' Trace Detail")
deployProvControlPlaneEthCapRaAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 12), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRaAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRaAlarmActivationTime.setDescription("Resource Allocator Component' Alarm Activation Time")
deployProvControlPlaneEthCapCmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 13), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCmConfigFlag.setDescription("GMPLS Tunnel Manager Component' Configuration Bitfield")
deployProvControlPlaneEthCapCmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 14), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCmTraceDetail.setDescription("GMPLS Tunnel Manager Component' Trace Detail")
deployProvControlPlaneEthCapCmAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 15), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCmAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCmAlarmActivationTime.setDescription("GMPLS Tunnel Manager Component' Alarm Activation Time")
deployProvControlPlaneEthCapCmFisFrsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 16), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCmFisFrsTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCmFisFrsTimeout.setDescription("GMPLS Tunnel Manager Component' FIS-FRS Timeout")
deployProvControlPlaneEthCapCmCrankBackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 17), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCmCrankBackTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCmCrankBackTimeout.setDescription("GMPLS Tunnel Manager Component' Crank-Back Timeout")
deployProvControlPlaneEthCapCdbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 18), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCdbConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCdbConfigFlag.setDescription('Label Swithed Path Database Component Configuration Bitfield')
deployProvControlPlaneEthCapCdbDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 19), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCdbDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCdbDetail.setDescription('Label Swithed Path Database Component Trace Detail')
deployProvControlPlaneEthCapCdbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 20), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCdbMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCdbMaxSize.setDescription('Label Swithed Path Database Component Maximum Size; 0 implies no limit')
deployProvControlPlaneEthCapRsvpMaxExpRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 21), Counter64StringCaps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRsvpMaxExpRestartTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRsvpMaxExpRestartTime.setDescription("Maximum Expected Resource Reservation Protocol Component' Restart Time")
deployProvControlPlaneEthCapRsvpMaxExpRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 22), FspR7Unsigned32Caps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRsvpMaxExpRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRsvpMaxExpRecoveryTime.setDescription("Maximum Expected Resource Reservation Protocol Component' Recovery Time")
deployProvControlPlaneEthCapRsvpConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 23), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRsvpConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRsvpConfigFlag.setDescription("Resource Reservation Protocol Component' Configuration Bitfield")
deployProvControlPlaneEthCapTedbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 24), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapTedbConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapTedbConfigFlag.setDescription("Traffic Engineering Component' Configuration Bitfield")
deployProvControlPlaneEthCapTedbTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 25), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapTedbTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapTedbTraceDetail.setDescription("Traffic Engineering Component' Trace Detail")
deployProvControlPlaneEthCapTedbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 26), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapTedbMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapTedbMaxSize.setDescription("Traffic Engineering Component' Maximum Size")
deployProvControlPlaneEthCapTedbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 27), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapTedbRouterId.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapTedbRouterId.setDescription("Traffic Engineering Component' Router ID")
deployProvControlPlaneEthCapTedbMinAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 28), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapTedbMinAdvertWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapTedbMinAdvertWait.setDescription("Traffic Engineering Component' Minimum Advertisement Wait")
deployProvControlPlaneEthCapNaasConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 29), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapNaasConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapNaasConfigFlag.setDescription("Node Attribute Advertising Service Database Component' Configuration Bitfield")
deployProvControlPlaneEthCapNaasTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 30), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapNaasTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapNaasTraceDetail.setDescription("Node Attribute Advertising Service Database Component' Trace Detail")
deployProvControlPlaneEthCapNaasMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 31), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapNaasMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapNaasMaxSize.setDescription("Node Attribute Advertising Service Database Component' Maximum Size")
deployProvControlPlaneEthCapNaasAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 32), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapNaasAdvertWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapNaasAdvertWait.setDescription("Node Attribute Advertising Service Database Component' Advertisement Wait")
deployProvControlPlaneEthCapPcConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 33), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapPcConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapPcConfigFlag.setDescription("Path Computation Component' Configuration Bitfield")
deployProvControlPlaneEthCapPcTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 34), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapPcTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapPcTraceDetail.setDescription("Path Computation Component' Trace Detail")
deployProvControlPlaneEthCapCdConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 35), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCdConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCdConfigFlag.setDescription("Configuration Data Component' Configuration Bitfield")
deployProvControlPlaneEthCapCdTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 36), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCdTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCdTraceDetail.setDescription("Configuration Data Component' Trace Detail")
deployProvControlPlaneEthCapCdResyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 37), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCdResyncTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapCdResyncTimeout.setDescription("Configuration Data Component' Resync Timeout")
deployProvControlPlaneEthCapRmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 38), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRmConfigFlag.setDescription("Resource Management Component' Configuration Bitfield")
deployProvControlPlaneEthCapRmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 39), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRmTraceDetail.setDescription("Resource Management Component' Trace Detail")
deployProvControlPlaneEthCapRmTraceTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 62, 1, 40), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRmTraceTarget.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthCapRmTraceTarget.setDescription("Resource Management Component' Trace Target")
deployProvControlPlaneEthDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63), )
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsTable.setDescription('')
deployProvControlPlaneEthDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsEntry.setDescription('')
deployProvControlPlaneEthDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRowStatus.setDescription('')
deployProvControlPlaneEthDefaultsCtmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCtmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCtmConfigFlag.setDescription("Label Switched Path Edge Component' Configuration Bitfield")
deployProvControlPlaneEthDefaultsCtmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCtmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCtmTraceDetail.setDescription("Label Switched Path Edge Component' Trace Detail")
deployProvControlPlaneEthDefaultsCtmSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 4), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCtmSetupTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCtmSetupTimeout.setDescription("Label Switched Path Edge Component' Set-Up Timeout")
deployProvControlPlaneEthDefaultsCtmShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 5), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCtmShutdownTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCtmShutdownTimeout.setDescription("Label Switched Path Edge Component' Shut-Down Timeout")
deployProvControlPlaneEthDefaultsCtmRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 6), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCtmRetryWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCtmRetryWait.setDescription("Label Switched Path Edge Component' Initialization Retry Wait")
deployProvControlPlaneEthDefaultsCtmRetryWaitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCtmRetryWaitMultiplier.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCtmRetryWaitMultiplier.setDescription("Label Switched Path Edge Component' Initialization Retry Wait Multiplier")
deployProvControlPlaneEthDefaultsCtmMaximumRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 8), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCtmMaximumRetryWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCtmMaximumRetryWait.setDescription("Label Switched Path Edge Component' Initialization Maximum Retry Wait")
deployProvControlPlaneEthDefaultsCtmMaximumRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCtmMaximumRetryNumber.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCtmMaximumRetryNumber.setDescription("Label Switched Path Edge Component' Initialization Maximum Retry Number")
deployProvControlPlaneEthDefaultsRaConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRaConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRaConfigFlag.setDescription("Resource Allocator Component' Configuration Bitfield")
deployProvControlPlaneEthDefaultsRaTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRaTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRaTraceDetail.setDescription("Resource Allocator Component' Trace Detail")
deployProvControlPlaneEthDefaultsRaAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 12), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRaAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRaAlarmActivationTime.setDescription("Resource Allocator Component' Alarm Activation Time")
deployProvControlPlaneEthDefaultsCmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCmConfigFlag.setDescription("GMPLS Tunnel Manager Component' Configuration Bitfield")
deployProvControlPlaneEthDefaultsCmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCmTraceDetail.setDescription("GMPLS Tunnel Manager Component' Trace Detail")
deployProvControlPlaneEthDefaultsCmAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 15), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCmAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCmAlarmActivationTime.setDescription("GMPLS Tunnel Manager Component' Alarm Activation Time")
deployProvControlPlaneEthDefaultsCmFisFrsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 16), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCmFisFrsTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCmFisFrsTimeout.setDescription("GMPLS Tunnel Manager Component' FIS-FRS Timeout")
deployProvControlPlaneEthDefaultsCmCrankBackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 17), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCmCrankBackTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCmCrankBackTimeout.setDescription("GMPLS Tunnel Manager Component' Crank-Back Timeout")
deployProvControlPlaneEthDefaultsCdbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCdbConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCdbConfigFlag.setDescription('Label Swithed Path Database Component Configuration Bitfield')
deployProvControlPlaneEthDefaultsCdbDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCdbDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCdbDetail.setDescription('Label Swithed Path Database Component Trace Detail')
deployProvControlPlaneEthDefaultsCdbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCdbMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCdbMaxSize.setDescription('Label Swithed Path Database Component Maximum Size; 0 implies no limit')
deployProvControlPlaneEthDefaultsRsvpMaxExpRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 21), Counter64String()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRsvpMaxExpRestartTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRsvpMaxExpRestartTime.setDescription("Maximum Expected Resource Reservation Protocol Component' Restart Time")
deployProvControlPlaneEthDefaultsRsvpMaxExpRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 22), Unsigned32()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRsvpMaxExpRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRsvpMaxExpRecoveryTime.setDescription("Maximum Expected Resource Reservation Protocol Component' Recovery Time")
deployProvControlPlaneEthDefaultsRsvpConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRsvpConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRsvpConfigFlag.setDescription("Resource Reservation Protocol Component' Configuration Bitfield")
deployProvControlPlaneEthDefaultsTedbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsTedbConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsTedbConfigFlag.setDescription("Traffic Engineering Component' Configuration Bitfield")
deployProvControlPlaneEthDefaultsTedbTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsTedbTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsTedbTraceDetail.setDescription("Traffic Engineering Component' Trace Detail")
deployProvControlPlaneEthDefaultsTedbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsTedbMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsTedbMaxSize.setDescription("Traffic Engineering Component' Maximum Size")
deployProvControlPlaneEthDefaultsTedbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsTedbRouterId.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsTedbRouterId.setDescription("Traffic Engineering Component' Router ID")
deployProvControlPlaneEthDefaultsTedbMinAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 28), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsTedbMinAdvertWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsTedbMinAdvertWait.setDescription("Traffic Engineering Component' Minimum Advertisement Wait")
deployProvControlPlaneEthDefaultsNaasConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsNaasConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsNaasConfigFlag.setDescription("Node Attribute Advertising Service Database Component' Configuration Bitfield")
deployProvControlPlaneEthDefaultsNaasTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsNaasTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsNaasTraceDetail.setDescription("Node Attribute Advertising Service Database Component' Trace Detail")
deployProvControlPlaneEthDefaultsNaasMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsNaasMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsNaasMaxSize.setDescription("Node Attribute Advertising Service Database Component' Maximum Size")
deployProvControlPlaneEthDefaultsNaasAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 32), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsNaasAdvertWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsNaasAdvertWait.setDescription("Node Attribute Advertising Service Database Component' Advertisement Wait")
deployProvControlPlaneEthDefaultsPcConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsPcConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsPcConfigFlag.setDescription("Path Computation Component' Configuration Bitfield")
deployProvControlPlaneEthDefaultsPcTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsPcTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsPcTraceDetail.setDescription("Path Computation Component' Trace Detail")
deployProvControlPlaneEthDefaultsCdConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCdConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCdConfigFlag.setDescription("Configuration Data Component' Configuration Bitfield")
deployProvControlPlaneEthDefaultsCdTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCdTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCdTraceDetail.setDescription("Configuration Data Component' Trace Detail")
deployProvControlPlaneEthDefaultsCdResyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCdResyncTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsCdResyncTimeout.setDescription("Configuration Data Component' Resync Timeout")
deployProvControlPlaneEthDefaultsRmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRmConfigFlag.setDescription("Resource Management Component' Configuration Bitfield")
deployProvControlPlaneEthDefaultsRmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRmTraceDetail.setDescription("Resource Management Component' Trace Detail")
deployProvControlPlaneEthDefaultsRmTraceTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 63, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRmTraceTarget.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneEthDefaultsRmTraceTarget.setDescription("Resource Management Component' Trace Target")
deployProvTunnelEthTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64), )
if mibBuilder.loadTexts: deployProvTunnelEthTable.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthTable.setDescription('')
deployProvTunnelEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvTunnelEthEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthEntry.setDescription('')
deployProvTunnelEthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthRowStatus.setDescription('')
deployProvTunnelEthTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthTunnelId.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthTunnelId.setDescription('')
deployProvTunnelEthTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthTunnelNo.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthTunnelNo.setDescription('')
deployProvTunnelEthAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthAlias.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthAlias.setDescription('')
deployProvTunnelEthTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 5), FspR7CpTunnelType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthTunnelType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthTunnelType.setDescription('')
deployProvTunnelEthToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthToTid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthToTid.setDescription('')
deployProvTunnelEthToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthToNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthToNodeIp.setDescription('')
deployProvTunnelEthFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 8), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthFromAid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthFromAid.setDescription('')
deployProvTunnelEthToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 9), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthToAid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthToAid.setDescription('')
deployProvTunnelEthConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 10), FspR7Conn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthConnectionDirection.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthConnectionDirection.setDescription('')
deployProvTunnelEthFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 11), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthFacilityType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthFacilityType.setDescription('')
deployProvTunnelEthProvisionedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 12), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthProvisionedPaths.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthProvisionedPaths.setDescription('')
deployProvTunnelEthPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 13), FspR7CpPinning()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthPin.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthPin.setDescription('')
deployProvTunnelEthCirRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 14), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthCirRcv.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCirRcv.setDescription('')
deployProvTunnelEthCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 26214400), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthCbsRcv.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCbsRcv.setDescription('')
deployProvTunnelEthProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 16), FspR7CpProtectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthProtectionType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthProtectionType.setDescription('')
deployProvTunnelEthRestorationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 17), FspR7CpRestorationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthRestorationType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthRestorationType.setDescription('')
deployProvTunnelEthMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 18), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthMonitorEntities.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthMonitorEntities.setDescription('')
deployProvTunnelEthTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 19), FspR7CpTunnelScope()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthTunnelScope.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthTunnelScope.setDescription('Service Scope extending over either Client or Network Ports of Modules')
deployProvTunnelEthLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 20), FspR7PacketsLayer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthLayer.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthLayer.setDescription('Notional Layer of Advertisement on Packets on the LIF')
deployProvTunnelEthOifUni = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 64, 1, 21), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelEthOifUni.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthOifUni.setDescription('OIF UNI Tunnel')
deployProvTunnelEthCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65), )
if mibBuilder.loadTexts: deployProvTunnelEthCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCapTable.setDescription('')
deployProvTunnelEthCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvTunnelEthCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCapEntry.setDescription('')
deployProvTunnelEthCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCapRowStatus.setDescription('')
deployProvTunnelEthCapTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapTunnelId.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCapTunnelId.setDescription('')
deployProvTunnelEthCapTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapTunnelNo.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCapTunnelNo.setDescription('')
deployProvTunnelEthCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapAlias.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCapAlias.setDescription('')
deployProvTunnelEthCapTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 5), FspR7CpTunnelTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapTunnelType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCapTunnelType.setDescription('')
deployProvTunnelEthCapToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapToTid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCapToTid.setDescription('')
deployProvTunnelEthCapToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 7), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapToNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCapToNodeIp.setDescription('')
deployProvTunnelEthCapFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapFromAid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCapFromAid.setDescription('')
deployProvTunnelEthCapToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapToAid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCapToAid.setDescription('')
deployProvTunnelEthCapConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 10), FspR7ConnCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapConnectionDirection.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCapConnectionDirection.setDescription('')
deployProvTunnelEthCapFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 11), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapFacilityType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCapFacilityType.setDescription('')
deployProvTunnelEthCapProvisionedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapProvisionedPaths.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCapProvisionedPaths.setDescription('')
deployProvTunnelEthCapPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 13), FspR7CpPinningCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapPin.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCapPin.setDescription('')
deployProvTunnelEthCapCirRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 14), FspR7Unsigned32Caps()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapCirRcv.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCapCirRcv.setDescription('')
deployProvTunnelEthCapCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 15), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapCbsRcv.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCapCbsRcv.setDescription('')
deployProvTunnelEthCapProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 16), FspR7CpProtectionTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapProtectionType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCapProtectionType.setDescription('')
deployProvTunnelEthCapRestorationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 17), FspR7CpRestorationTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapRestorationType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCapRestorationType.setDescription('')
deployProvTunnelEthCapMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 18), FspR7EnableDisableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapMonitorEntities.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCapMonitorEntities.setDescription('')
deployProvTunnelEthCapTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 19), FspR7CpTunnelScopeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapTunnelScope.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCapTunnelScope.setDescription('Service Scope extending over either Client or Network Ports of Modules')
deployProvTunnelEthCapLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 20), FspR7PacketsLayerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapLayer.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCapLayer.setDescription('Notional Layer of Advertisement on Packets on the LIF')
deployProvTunnelEthCapOifUni = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 65, 1, 21), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthCapOifUni.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthCapOifUni.setDescription('OIF UNI Tunnel')
deployProvTunnelEthDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66), )
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsTable.setDescription('')
deployProvTunnelEthDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsEntry.setDescription('')
deployProvTunnelEthDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsRowStatus.setDescription('')
deployProvTunnelEthDefaultsTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsTunnelId.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsTunnelId.setDescription('')
deployProvTunnelEthDefaultsTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsTunnelNo.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsTunnelNo.setDescription('')
deployProvTunnelEthDefaultsAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsAlias.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsAlias.setDescription('')
deployProvTunnelEthDefaultsTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 5), FspR7CpTunnelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsTunnelType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsTunnelType.setDescription('')
deployProvTunnelEthDefaultsToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsToTid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsToTid.setDescription('')
deployProvTunnelEthDefaultsToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsToNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsToNodeIp.setDescription('')
deployProvTunnelEthDefaultsFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 8), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsFromAid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsFromAid.setDescription('')
deployProvTunnelEthDefaultsToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 9), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsToAid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsToAid.setDescription('')
deployProvTunnelEthDefaultsConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 10), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsConnectionDirection.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsConnectionDirection.setDescription('')
deployProvTunnelEthDefaultsFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 11), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsFacilityType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsFacilityType.setDescription('')
deployProvTunnelEthDefaultsProvisionedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsProvisionedPaths.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsProvisionedPaths.setDescription('')
deployProvTunnelEthDefaultsPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 13), FspR7CpPinning()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsPin.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsPin.setDescription('')
deployProvTunnelEthDefaultsCirRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 14), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsCirRcv.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsCirRcv.setDescription('')
deployProvTunnelEthDefaultsCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 26214400), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsCbsRcv.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsCbsRcv.setDescription('')
deployProvTunnelEthDefaultsProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 16), FspR7CpProtectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsProtectionType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsProtectionType.setDescription('')
deployProvTunnelEthDefaultsRestorationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 17), FspR7CpRestorationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsRestorationType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsRestorationType.setDescription('')
deployProvTunnelEthDefaultsMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 18), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsMonitorEntities.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsMonitorEntities.setDescription('')
deployProvTunnelEthDefaultsTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 19), FspR7CpTunnelScope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsTunnelScope.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsTunnelScope.setDescription('Service Scope extending over either Client or Network Ports of Modules')
deployProvTunnelEthDefaultsLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 20), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsLayer.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsLayer.setDescription('Notional Layer of Advertisement on Packets on the LIF')
deployProvTunnelEthDefaultsOifUni = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 66, 1, 21), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsOifUni.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelEthDefaultsOifUni.setDescription('OIF UNI Tunnel')
deployProvPathEthTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 67), )
if mibBuilder.loadTexts: deployProvPathEthTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPathEthTable.setDescription('')
deployProvPathEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 67, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvPathEthEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPathEthEntry.setDescription('')
deployProvPathEthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 67, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathEthRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPathEthRowStatus.setDescription('')
deployProvPathEthPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 67, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathEthPathId.setStatus('current')
if mibBuilder.loadTexts: deployProvPathEthPathId.setDescription('')
deployProvPathEthCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 68), )
if mibBuilder.loadTexts: deployProvPathEthCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPathEthCapTable.setDescription('')
deployProvPathEthCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 68, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvPathEthCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPathEthCapEntry.setDescription('')
deployProvPathEthCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 68, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathEthCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPathEthCapRowStatus.setDescription('')
deployProvPathEthCapPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 68, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathEthCapPathId.setStatus('current')
if mibBuilder.loadTexts: deployProvPathEthCapPathId.setDescription('')
deployProvPathEthDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 69), )
if mibBuilder.loadTexts: deployProvPathEthDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPathEthDefaultsTable.setDescription('')
deployProvPathEthDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 69, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvPathEthDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPathEthDefaultsEntry.setDescription('')
deployProvPathEthDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 69, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathEthDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPathEthDefaultsRowStatus.setDescription('')
deployProvPathEthDefaultsPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 69, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathEthDefaultsPathId.setStatus('current')
if mibBuilder.loadTexts: deployProvPathEthDefaultsPathId.setDescription('')
deployProvPathElementEthTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 70), )
if mibBuilder.loadTexts: deployProvPathElementEthTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthTable.setDescription('')
deployProvPathElementEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 70, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvPathElementEthEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthEntry.setDescription('')
deployProvPathElementEthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 70, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementEthRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthRowStatus.setDescription('')
deployProvPathElementEthTrafficEngineeringType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 70, 1, 2), FspR7CpTEType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementEthTrafficEngineeringType.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthTrafficEngineeringType.setDescription('')
deployProvPathElementEthLifIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 70, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementEthLifIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthLifIp.setDescription('')
deployProvPathElementEthNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 70, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementEthNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthNodeIp.setDescription('')
deployProvPathElementEthTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 70, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementEthTid.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthTid.setDescription('')
deployProvPathElementEthLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 70, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementEthLogicalInterfaceId.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthLogicalInterfaceId.setDescription('')
deployProvPathElementEthTie = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 70, 1, 7), FspR7CpTie()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementEthTie.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthTie.setDescription('')
deployProvPathElementEthUpstreamSvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 70, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementEthUpstreamSvid.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthUpstreamSvid.setDescription('')
deployProvPathElementEthDownstreamSvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 70, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementEthDownstreamSvid.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthDownstreamSvid.setDescription('')
deployProvPathElementEthCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 71), )
if mibBuilder.loadTexts: deployProvPathElementEthCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthCapTable.setDescription('')
deployProvPathElementEthCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 71, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvPathElementEthCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthCapEntry.setDescription('')
deployProvPathElementEthCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 71, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthCapRowStatus.setDescription('')
deployProvPathElementEthCapTrafficEngineeringType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 71, 1, 2), FspR7CpTETypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthCapTrafficEngineeringType.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthCapTrafficEngineeringType.setDescription('')
deployProvPathElementEthCapLifIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 71, 1, 3), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthCapLifIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthCapLifIp.setDescription('')
deployProvPathElementEthCapNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 71, 1, 4), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthCapNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthCapNodeIp.setDescription('')
deployProvPathElementEthCapTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 71, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthCapTid.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthCapTid.setDescription('')
deployProvPathElementEthCapLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 71, 1, 6), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthCapLogicalInterfaceId.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthCapLogicalInterfaceId.setDescription('')
deployProvPathElementEthCapTie = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 71, 1, 7), FspR7CpTieCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthCapTie.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthCapTie.setDescription('')
deployProvPathElementEthCapUpstreamSvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 71, 1, 8), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthCapUpstreamSvid.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthCapUpstreamSvid.setDescription('')
deployProvPathElementEthCapDownstreamSvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 71, 1, 9), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthCapDownstreamSvid.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthCapDownstreamSvid.setDescription('')
deployProvPathElementEthDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 72), )
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsTable.setDescription('')
deployProvPathElementEthDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 72, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsEntry.setDescription('')
deployProvPathElementEthDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 72, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsRowStatus.setDescription('')
deployProvPathElementEthDefaultsTrafficEngineeringType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 72, 1, 2), FspR7CpTEType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsTrafficEngineeringType.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsTrafficEngineeringType.setDescription('')
deployProvPathElementEthDefaultsLifIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 72, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsLifIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsLifIp.setDescription('')
deployProvPathElementEthDefaultsNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 72, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsNodeIp.setDescription('')
deployProvPathElementEthDefaultsTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 72, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsTid.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsTid.setDescription('')
deployProvPathElementEthDefaultsLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 72, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsLogicalInterfaceId.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsLogicalInterfaceId.setDescription('')
deployProvPathElementEthDefaultsTie = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 72, 1, 7), FspR7CpTie()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsTie.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsTie.setDescription('')
deployProvPathElementEthDefaultsUpstreamSvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 72, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsUpstreamSvid.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsUpstreamSvid.setDescription('')
deployProvPathElementEthDefaultsDownstreamSvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 72, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsDownstreamSvid.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementEthDefaultsDownstreamSvid.setDescription('')
deployProvCopyPathEthTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 73), )
if mibBuilder.loadTexts: deployProvCopyPathEthTable.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathEthTable.setDescription('')
deployProvCopyPathEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 73, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvCopyPathEthEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathEthEntry.setDescription('')
deployProvCopyPathEthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 73, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCopyPathEthRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathEthRowStatus.setDescription('')
deployProvCopyPathEthSourcePathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 73, 1, 2), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCopyPathEthSourcePathIndex.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathEthSourcePathIndex.setDescription('')
deployProvCopyPathEthPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 73, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCopyPathEthPathId.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathEthPathId.setDescription('')
deployProvCopyPathEthCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 74), )
if mibBuilder.loadTexts: deployProvCopyPathEthCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathEthCapTable.setDescription('')
deployProvCopyPathEthCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 74, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvCopyPathEthCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathEthCapEntry.setDescription('')
deployProvCopyPathEthCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 74, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathEthCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathEthCapRowStatus.setDescription('')
deployProvCopyPathEthCapSourcePathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 74, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathEthCapSourcePathIndex.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathEthCapSourcePathIndex.setDescription('')
deployProvCopyPathEthCapPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 74, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathEthCapPathId.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathEthCapPathId.setDescription('')
deployProvCopyPathEthDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 75), )
if mibBuilder.loadTexts: deployProvCopyPathEthDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathEthDefaultsTable.setDescription('')
deployProvCopyPathEthDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 75, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneEthEntityIndex"))
if mibBuilder.loadTexts: deployProvCopyPathEthDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathEthDefaultsEntry.setDescription('')
deployProvCopyPathEthDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 75, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathEthDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathEthDefaultsRowStatus.setDescription('')
deployProvCopyPathEthDefaultsSourcePathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 75, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathEthDefaultsSourcePathIndex.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathEthDefaultsSourcePathIndex.setDescription('')
deployProvCopyPathEthDefaultsPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 75, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathEthDefaultsPathId.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathEthDefaultsPathId.setDescription('')
deployProvPortBindingTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 76), )
if mibBuilder.loadTexts: deployProvPortBindingTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingTable.setDescription('')
deployProvPortBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 76, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvPortBindingEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingEntry.setDescription('')
deployProvPortBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 76, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: deployProvPortBindingRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingRowStatus.setDescription('')
deployProvPortBindingLogicalIfAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 76, 1, 2), EntityIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: deployProvPortBindingLogicalIfAid.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingLogicalIfAid.setDescription('Logical Interface AID')
deployProvPortBindingLocalTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 76, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: deployProvPortBindingLocalTna.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingLocalTna.setDescription('Port Binding Local Transport Network Assigned Name (OIF Signaling Interface)')
deployProvPortBindingRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 76, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: deployProvPortBindingRemotePort.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingRemotePort.setDescription('Port Binding Remote Port Identifier (OIF Signaling Interface)')
deployProvPortBindingRemoteTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 76, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: deployProvPortBindingRemoteTna.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingRemoteTna.setDescription('Port Binding Remote Transport Network Assigned Name (OIF Signaling Interface)')
deployProvPortBindingRemoteTnaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 76, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: deployProvPortBindingRemoteTnaMask.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingRemoteTnaMask.setDescription('Port Binding Remote Transport Network Assigned Name Mask (OIF Signaling Interface)')
deployProvPortBindingRemoteNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 76, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: deployProvPortBindingRemoteNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingRemoteNodeIp.setDescription('Port Binding Remote Node IP (OIF Signaling Interface)')
deployProvPortBindingRemoteScn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 76, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: deployProvPortBindingRemoteScn.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingRemoteScn.setDescription('Port Binding Remote Signaling Connection Network Address (OIF Signaling Interface)')
deployProvPortBindingRemoteScPc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 76, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: deployProvPortBindingRemoteScPc.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingRemoteScPc.setDescription('Port Binding Remote Signaling Controller Protocol Controller Identifier (OIF Signaling Interface)')
deployProvPortBindingLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 76, 1, 10), FspR7PacketsLayer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: deployProvPortBindingLayer.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingLayer.setDescription('Notional Layer of Advertisement on Packets on the LIF')
deployProvPortBindingCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 77), )
if mibBuilder.loadTexts: deployProvPortBindingCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingCapTable.setDescription('')
deployProvPortBindingCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 77, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvPortBindingCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingCapEntry.setDescription('')
deployProvPortBindingCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 77, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingCapRowStatus.setDescription('')
deployProvPortBindingCapLogicalIfAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 77, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingCapLogicalIfAid.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingCapLogicalIfAid.setDescription('Logical Interface AID')
deployProvPortBindingCapLocalTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 77, 1, 3), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingCapLocalTna.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingCapLocalTna.setDescription('Port Binding Local Transport Network Assigned Name (OIF Signaling Interface)')
deployProvPortBindingCapRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 77, 1, 4), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingCapRemotePort.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingCapRemotePort.setDescription('Port Binding Remote Port Identifier (OIF Signaling Interface)')
deployProvPortBindingCapRemoteTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 77, 1, 5), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingCapRemoteTna.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingCapRemoteTna.setDescription('Port Binding Remote Transport Network Assigned Name (OIF Signaling Interface)')
deployProvPortBindingCapRemoteTnaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 77, 1, 6), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingCapRemoteTnaMask.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingCapRemoteTnaMask.setDescription('Port Binding Remote Transport Network Assigned Name Mask (OIF Signaling Interface)')
deployProvPortBindingCapRemoteNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 77, 1, 7), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingCapRemoteNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingCapRemoteNodeIp.setDescription('Port Binding Remote Node IP (OIF Signaling Interface)')
deployProvPortBindingCapRemoteScn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 77, 1, 8), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingCapRemoteScn.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingCapRemoteScn.setDescription('Port Binding Remote Signaling Connection Network Address (OIF Signaling Interface)')
deployProvPortBindingCapRemoteScPc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 77, 1, 9), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingCapRemoteScPc.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingCapRemoteScPc.setDescription('Port Binding Remote Signaling Controller Protocol Controller Identifier (OIF Signaling Interface)')
deployProvPortBindingCapLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 77, 1, 10), FspR7PacketsLayerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingCapLayer.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingCapLayer.setDescription('Notional Layer of Advertisement on Packets on the LIF')
deployProvPortBindingDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 78), )
if mibBuilder.loadTexts: deployProvPortBindingDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingDefaultsTable.setDescription('')
deployProvPortBindingDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 78, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: deployProvPortBindingDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingDefaultsEntry.setDescription('')
deployProvPortBindingDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 78, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingDefaultsRowStatus.setDescription('')
deployProvPortBindingDefaultsLogicalIfAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 78, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingDefaultsLogicalIfAid.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingDefaultsLogicalIfAid.setDescription('Logical Interface AID')
deployProvPortBindingDefaultsLocalTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 78, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingDefaultsLocalTna.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingDefaultsLocalTna.setDescription('Port Binding Local Transport Network Assigned Name (OIF Signaling Interface)')
deployProvPortBindingDefaultsRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 78, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingDefaultsRemotePort.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingDefaultsRemotePort.setDescription('Port Binding Remote Port Identifier (OIF Signaling Interface)')
deployProvPortBindingDefaultsRemoteTna = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 78, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingDefaultsRemoteTna.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingDefaultsRemoteTna.setDescription('Port Binding Remote Transport Network Assigned Name (OIF Signaling Interface)')
deployProvPortBindingDefaultsRemoteTnaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 78, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingDefaultsRemoteTnaMask.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingDefaultsRemoteTnaMask.setDescription('Port Binding Remote Transport Network Assigned Name Mask (OIF Signaling Interface)')
deployProvPortBindingDefaultsRemoteNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 78, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingDefaultsRemoteNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingDefaultsRemoteNodeIp.setDescription('Port Binding Remote Node IP (OIF Signaling Interface)')
deployProvPortBindingDefaultsRemoteScn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 78, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingDefaultsRemoteScn.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingDefaultsRemoteScn.setDescription('Port Binding Remote Signaling Connection Network Address (OIF Signaling Interface)')
deployProvPortBindingDefaultsRemoteScPc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 78, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingDefaultsRemoteScPc.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingDefaultsRemoteScPc.setDescription('Port Binding Remote Signaling Controller Protocol Controller Identifier (OIF Signaling Interface)')
deployProvPortBindingDefaultsLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 78, 1, 10), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingDefaultsLayer.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingDefaultsLayer.setDescription('Notional Layer of Advertisement on Packets on the LIF')
deployProvPortBindingLifAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 79), )
if mibBuilder.loadTexts: deployProvPortBindingLifAidCapsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingLifAidCapsTable.setDescription("This table is used to get capabilities for LIFAID parameter. Regular\n         cap tables including LogicalIfAid parameter show the number of supported entities (LIF-CP) on a given PB.\n         Value 0 in regular cap tables means 'no capabilities'.")
deployProvPortBindingLifAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 79, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneWdmEntityIndex"), (0, "FspR7-MIB", "deployProvPortBindingLifAidCapsIndex"))
if mibBuilder.loadTexts: deployProvPortBindingLifAidCapsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingLifAidCapsEntry.setDescription('')
deployProvPortBindingLifAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 79, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPortBindingLifAidCapsIndex.setStatus('current')
if mibBuilder.loadTexts: deployProvPortBindingLifAidCapsIndex.setDescription('Logical Interface AID')
deployProvControlPlaneOtnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100), )
if mibBuilder.loadTexts: deployProvControlPlaneOtnTable.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnTable.setDescription('')
deployProvControlPlaneOtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvControlPlaneOtnEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnEntry.setDescription('')
deployProvControlPlaneOtnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnRowStatus.setDescription('')
deployProvControlPlaneOtnCtmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCtmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCtmConfigFlag.setDescription("Label Switched Path Edge Component' Configuration Bitfield")
deployProvControlPlaneOtnCtmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCtmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCtmTraceDetail.setDescription("Label Switched Path Edge Component' Trace Detail")
deployProvControlPlaneOtnCtmSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 4), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCtmSetupTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCtmSetupTimeout.setDescription("Label Switched Path Edge Component' Set-Up Timeout")
deployProvControlPlaneOtnCtmShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 5), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCtmShutdownTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCtmShutdownTimeout.setDescription("Label Switched Path Edge Component' Shut-Down Timeout")
deployProvControlPlaneOtnCtmRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 6), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCtmRetryWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCtmRetryWait.setDescription("Label Switched Path Edge Component' Initialization Retry Wait")
deployProvControlPlaneOtnCtmRetryWaitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCtmRetryWaitMultiplier.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCtmRetryWaitMultiplier.setDescription("Label Switched Path Edge Component' Initialization Retry Wait Multiplier")
deployProvControlPlaneOtnCtmMaximumRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 8), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCtmMaximumRetryWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCtmMaximumRetryWait.setDescription("Label Switched Path Edge Component' Initialization Maximum Retry Wait")
deployProvControlPlaneOtnCtmMaximumRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCtmMaximumRetryNumber.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCtmMaximumRetryNumber.setDescription("Label Switched Path Edge Component' Initialization Maximum Retry Number")
deployProvControlPlaneOtnRaConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnRaConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnRaConfigFlag.setDescription("Resource Allocator Component' Configuration Bitfield")
deployProvControlPlaneOtnRaTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnRaTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnRaTraceDetail.setDescription("Resource Allocator Component' Trace Detail")
deployProvControlPlaneOtnRaAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 12), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnRaAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnRaAlarmActivationTime.setDescription("Resource Allocator Component' Alarm Activation Time")
deployProvControlPlaneOtnCmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCmConfigFlag.setDescription("GMPLS Tunnel Manager Component' Configuration Bitfield")
deployProvControlPlaneOtnCmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCmTraceDetail.setDescription("GMPLS Tunnel Manager Component' Trace Detail")
deployProvControlPlaneOtnCmAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 15), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCmAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCmAlarmActivationTime.setDescription("GMPLS Tunnel Manager Component' Alarm Activation Time")
deployProvControlPlaneOtnCmFisFrsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 16), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCmFisFrsTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCmFisFrsTimeout.setDescription("GMPLS Tunnel Manager Component' FIS-FRS Timeout")
deployProvControlPlaneOtnCmCrankBackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 17), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCmCrankBackTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCmCrankBackTimeout.setDescription("GMPLS Tunnel Manager Component' Crank-Back Timeout")
deployProvControlPlaneOtnCdbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCdbConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCdbConfigFlag.setDescription('Label Swithed Path Database Component Configuration Bitfield')
deployProvControlPlaneOtnCdbDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCdbDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCdbDetail.setDescription('Label Swithed Path Database Component Trace Detail')
deployProvControlPlaneOtnCdbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCdbMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCdbMaxSize.setDescription('Label Swithed Path Database Component Maximum Size; 0 implies no limit')
deployProvControlPlaneOtnRsvpMaxExpRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 21), Counter64String()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnRsvpMaxExpRestartTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnRsvpMaxExpRestartTime.setDescription("Maximum Expected Resource Reservation Protocol Component' Restart Time")
deployProvControlPlaneOtnRsvpMaxExpRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 22), Unsigned32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnRsvpMaxExpRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnRsvpMaxExpRecoveryTime.setDescription("Maximum Expected Resource Reservation Protocol Component' Recovery Time")
deployProvControlPlaneOtnRsvpConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnRsvpConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnRsvpConfigFlag.setDescription("Resource Reservation Protocol Component' Configuration Bitfield")
deployProvControlPlaneOtnTedbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnTedbConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnTedbConfigFlag.setDescription("Traffic Engineering Component' Configuration Bitfield")
deployProvControlPlaneOtnTedbTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnTedbTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnTedbTraceDetail.setDescription("Traffic Engineering Component' Trace Detail")
deployProvControlPlaneOtnTedbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnTedbMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnTedbMaxSize.setDescription("Traffic Engineering Component' Maximum Size")
deployProvControlPlaneOtnTedbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnTedbRouterId.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnTedbRouterId.setDescription("Traffic Engineering Component' Router ID")
deployProvControlPlaneOtnTedbMinAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 28), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnTedbMinAdvertWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnTedbMinAdvertWait.setDescription("Traffic Engineering Component' Minimum Advertisement Wait")
deployProvControlPlaneOtnNaasConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnNaasConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnNaasConfigFlag.setDescription("Node Attribute Advertising Service Database Component' Configuration Bitfield")
deployProvControlPlaneOtnNaasTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnNaasTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnNaasTraceDetail.setDescription("Node Attribute Advertising Service Database Component' Trace Detail")
deployProvControlPlaneOtnNaasMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnNaasMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnNaasMaxSize.setDescription("Node Attribute Advertising Service Database Component' Maximum Size")
deployProvControlPlaneOtnNaasAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 32), Unsigned32()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnNaasAdvertWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnNaasAdvertWait.setDescription("Node Attribute Advertising Service Database Component' Advertisement Wait")
deployProvControlPlaneOtnPcConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnPcConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnPcConfigFlag.setDescription("Path Computation Component' Configuration Bitfield")
deployProvControlPlaneOtnPcTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnPcTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnPcTraceDetail.setDescription("Path Computation Component' Trace Detail")
deployProvControlPlaneOtnCdConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 35), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCdConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCdConfigFlag.setDescription("Configuration Data Component' Configuration Bitfield")
deployProvControlPlaneOtnCdTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCdTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCdTraceDetail.setDescription("Configuration Data Component' Trace Detail")
deployProvControlPlaneOtnCdResyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCdResyncTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCdResyncTimeout.setDescription("Configuration Data Component' Resync Timeout")
deployProvControlPlaneOtnRmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnRmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnRmConfigFlag.setDescription("Resource Management Component' Configuration Bitfield")
deployProvControlPlaneOtnRmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 39), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnRmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnRmTraceDetail.setDescription("Resource Management Component' Trace Detail")
deployProvControlPlaneOtnRmTraceTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnRmTraceTarget.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnRmTraceTarget.setDescription("Resource Management Component' Trace Target")
deployProvControlPlaneOtnNodeNameSyntax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 100, 1, 41), FspR7NodeId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvControlPlaneOtnNodeNameSyntax.setStatus('deprecated')
if mibBuilder.loadTexts: deployProvControlPlaneOtnNodeNameSyntax.setDescription('Node Name Syntax')
deployProvControlPlaneOtnCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101), )
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapTable.setDescription('')
deployProvControlPlaneOtnCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapEntry.setDescription('')
deployProvControlPlaneOtnCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRowStatus.setDescription('')
deployProvControlPlaneOtnCapCtmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCtmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCtmConfigFlag.setDescription("Label Switched Path Edge Component' Configuration Bitfield")
deployProvControlPlaneOtnCapCtmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCtmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCtmTraceDetail.setDescription("Label Switched Path Edge Component' Trace Detail")
deployProvControlPlaneOtnCapCtmSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 4), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCtmSetupTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCtmSetupTimeout.setDescription("Label Switched Path Edge Component' Set-Up Timeout")
deployProvControlPlaneOtnCapCtmShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 5), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCtmShutdownTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCtmShutdownTimeout.setDescription("Label Switched Path Edge Component' Shut-Down Timeout")
deployProvControlPlaneOtnCapCtmRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 6), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCtmRetryWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCtmRetryWait.setDescription("Label Switched Path Edge Component' Initialization Retry Wait")
deployProvControlPlaneOtnCapCtmRetryWaitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 7), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCtmRetryWaitMultiplier.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCtmRetryWaitMultiplier.setDescription("Label Switched Path Edge Component' Initialization Retry Wait Multiplier")
deployProvControlPlaneOtnCapCtmMaximumRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 8), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCtmMaximumRetryWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCtmMaximumRetryWait.setDescription("Label Switched Path Edge Component' Initialization Maximum Retry Wait")
deployProvControlPlaneOtnCapCtmMaximumRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 9), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCtmMaximumRetryNumber.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCtmMaximumRetryNumber.setDescription("Label Switched Path Edge Component' Initialization Maximum Retry Number")
deployProvControlPlaneOtnCapRaConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 10), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRaConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRaConfigFlag.setDescription("Resource Allocator Component' Configuration Bitfield")
deployProvControlPlaneOtnCapRaTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 11), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRaTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRaTraceDetail.setDescription("Resource Allocator Component' Trace Detail")
deployProvControlPlaneOtnCapRaAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 12), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRaAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRaAlarmActivationTime.setDescription("Resource Allocator Component' Alarm Activation Time")
deployProvControlPlaneOtnCapCmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 13), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCmConfigFlag.setDescription("GMPLS Tunnel Manager Component' Configuration Bitfield")
deployProvControlPlaneOtnCapCmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 14), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCmTraceDetail.setDescription("GMPLS Tunnel Manager Component' Trace Detail")
deployProvControlPlaneOtnCapCmAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 15), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCmAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCmAlarmActivationTime.setDescription("GMPLS Tunnel Manager Component' Alarm Activation Time")
deployProvControlPlaneOtnCapCmFisFrsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 16), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCmFisFrsTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCmFisFrsTimeout.setDescription("GMPLS Tunnel Manager Component' FIS-FRS Timeout")
deployProvControlPlaneOtnCapCmCrankBackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 17), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCmCrankBackTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCmCrankBackTimeout.setDescription("GMPLS Tunnel Manager Component' Crank-Back Timeout")
deployProvControlPlaneOtnCapCdbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 18), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCdbConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCdbConfigFlag.setDescription('Label Swithed Path Database Component Configuration Bitfield')
deployProvControlPlaneOtnCapCdbDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 19), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCdbDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCdbDetail.setDescription('Label Swithed Path Database Component Trace Detail')
deployProvControlPlaneOtnCapCdbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 20), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCdbMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCdbMaxSize.setDescription('Label Swithed Path Database Component Maximum Size; 0 implies no limit')
deployProvControlPlaneOtnCapRsvpMaxExpRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 21), Counter64StringCaps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRsvpMaxExpRestartTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRsvpMaxExpRestartTime.setDescription("Maximum Expected Resource Reservation Protocol Component' Restart Time")
deployProvControlPlaneOtnCapRsvpMaxExpRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 22), FspR7Unsigned32Caps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRsvpMaxExpRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRsvpMaxExpRecoveryTime.setDescription("Maximum Expected Resource Reservation Protocol Component' Recovery Time")
deployProvControlPlaneOtnCapRsvpConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 23), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRsvpConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRsvpConfigFlag.setDescription("Resource Reservation Protocol Component' Configuration Bitfield")
deployProvControlPlaneOtnCapTedbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 24), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapTedbConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapTedbConfigFlag.setDescription("Traffic Engineering Component' Configuration Bitfield")
deployProvControlPlaneOtnCapTedbTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 25), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapTedbTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapTedbTraceDetail.setDescription("Traffic Engineering Component' Trace Detail")
deployProvControlPlaneOtnCapTedbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 26), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapTedbMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapTedbMaxSize.setDescription("Traffic Engineering Component' Maximum Size")
deployProvControlPlaneOtnCapTedbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 27), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapTedbRouterId.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapTedbRouterId.setDescription("Traffic Engineering Component' Router ID")
deployProvControlPlaneOtnCapTedbMinAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 28), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapTedbMinAdvertWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapTedbMinAdvertWait.setDescription("Traffic Engineering Component' Minimum Advertisement Wait")
deployProvControlPlaneOtnCapNaasConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 29), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapNaasConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapNaasConfigFlag.setDescription("Node Attribute Advertising Service Database Component' Configuration Bitfield")
deployProvControlPlaneOtnCapNaasTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 30), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapNaasTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapNaasTraceDetail.setDescription("Node Attribute Advertising Service Database Component' Trace Detail")
deployProvControlPlaneOtnCapNaasMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 31), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapNaasMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapNaasMaxSize.setDescription("Node Attribute Advertising Service Database Component' Maximum Size")
deployProvControlPlaneOtnCapNaasAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 32), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapNaasAdvertWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapNaasAdvertWait.setDescription("Node Attribute Advertising Service Database Component' Advertisement Wait")
deployProvControlPlaneOtnCapPcConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 33), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapPcConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapPcConfigFlag.setDescription("Path Computation Component' Configuration Bitfield")
deployProvControlPlaneOtnCapPcTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 34), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapPcTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapPcTraceDetail.setDescription("Path Computation Component' Trace Detail")
deployProvControlPlaneOtnCapCdConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 35), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCdConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCdConfigFlag.setDescription("Configuration Data Component' Configuration Bitfield")
deployProvControlPlaneOtnCapCdTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 36), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCdTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCdTraceDetail.setDescription("Configuration Data Component' Trace Detail")
deployProvControlPlaneOtnCapCdResyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 37), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCdResyncTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapCdResyncTimeout.setDescription("Configuration Data Component' Resync Timeout")
deployProvControlPlaneOtnCapRmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 38), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRmConfigFlag.setDescription("Resource Management Component' Configuration Bitfield")
deployProvControlPlaneOtnCapRmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 39), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRmTraceDetail.setDescription("Resource Management Component' Trace Detail")
deployProvControlPlaneOtnCapRmTraceTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 40), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRmTraceTarget.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapRmTraceTarget.setDescription("Resource Management Component' Trace Target")
deployProvControlPlaneOtnCapNodeNameSyntax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 101, 1, 41), FspR7NodeIdCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapNodeNameSyntax.setStatus('deprecated')
if mibBuilder.loadTexts: deployProvControlPlaneOtnCapNodeNameSyntax.setDescription('Node Name Syntax')
deployProvControlPlaneOtnDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102), )
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsTable.setDescription('')
deployProvControlPlaneOtnDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsEntry.setDescription('')
deployProvControlPlaneOtnDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRowStatus.setDescription('')
deployProvControlPlaneOtnDefaultsCtmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCtmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCtmConfigFlag.setDescription("Label Switched Path Edge Component' Configuration Bitfield")
deployProvControlPlaneOtnDefaultsCtmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCtmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCtmTraceDetail.setDescription("Label Switched Path Edge Component' Trace Detail")
deployProvControlPlaneOtnDefaultsCtmSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 4), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCtmSetupTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCtmSetupTimeout.setDescription("Label Switched Path Edge Component' Set-Up Timeout")
deployProvControlPlaneOtnDefaultsCtmShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 5), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCtmShutdownTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCtmShutdownTimeout.setDescription("Label Switched Path Edge Component' Shut-Down Timeout")
deployProvControlPlaneOtnDefaultsCtmRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 6), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCtmRetryWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCtmRetryWait.setDescription("Label Switched Path Edge Component' Initialization Retry Wait")
deployProvControlPlaneOtnDefaultsCtmRetryWaitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCtmRetryWaitMultiplier.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCtmRetryWaitMultiplier.setDescription("Label Switched Path Edge Component' Initialization Retry Wait Multiplier")
deployProvControlPlaneOtnDefaultsCtmMaximumRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 8), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCtmMaximumRetryWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCtmMaximumRetryWait.setDescription("Label Switched Path Edge Component' Initialization Maximum Retry Wait")
deployProvControlPlaneOtnDefaultsCtmMaximumRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCtmMaximumRetryNumber.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCtmMaximumRetryNumber.setDescription("Label Switched Path Edge Component' Initialization Maximum Retry Number")
deployProvControlPlaneOtnDefaultsRaConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRaConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRaConfigFlag.setDescription("Resource Allocator Component' Configuration Bitfield")
deployProvControlPlaneOtnDefaultsRaTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRaTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRaTraceDetail.setDescription("Resource Allocator Component' Trace Detail")
deployProvControlPlaneOtnDefaultsRaAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 12), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRaAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRaAlarmActivationTime.setDescription("Resource Allocator Component' Alarm Activation Time")
deployProvControlPlaneOtnDefaultsCmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCmConfigFlag.setDescription("GMPLS Tunnel Manager Component' Configuration Bitfield")
deployProvControlPlaneOtnDefaultsCmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCmTraceDetail.setDescription("GMPLS Tunnel Manager Component' Trace Detail")
deployProvControlPlaneOtnDefaultsCmAlarmActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 15), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCmAlarmActivationTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCmAlarmActivationTime.setDescription("GMPLS Tunnel Manager Component' Alarm Activation Time")
deployProvControlPlaneOtnDefaultsCmFisFrsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 16), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCmFisFrsTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCmFisFrsTimeout.setDescription("GMPLS Tunnel Manager Component' FIS-FRS Timeout")
deployProvControlPlaneOtnDefaultsCmCrankBackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 17), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCmCrankBackTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCmCrankBackTimeout.setDescription("GMPLS Tunnel Manager Component' Crank-Back Timeout")
deployProvControlPlaneOtnDefaultsCdbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCdbConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCdbConfigFlag.setDescription('Label Swithed Path Database Component Configuration Bitfield')
deployProvControlPlaneOtnDefaultsCdbDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCdbDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCdbDetail.setDescription('Label Swithed Path Database Component Trace Detail')
deployProvControlPlaneOtnDefaultsCdbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCdbMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCdbMaxSize.setDescription('Label Swithed Path Database Component Maximum Size; 0 implies no limit')
deployProvControlPlaneOtnDefaultsRsvpMaxExpRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 21), Counter64String()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRsvpMaxExpRestartTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRsvpMaxExpRestartTime.setDescription("Maximum Expected Resource Reservation Protocol Component' Restart Time")
deployProvControlPlaneOtnDefaultsRsvpMaxExpRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 22), Unsigned32()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRsvpMaxExpRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRsvpMaxExpRecoveryTime.setDescription("Maximum Expected Resource Reservation Protocol Component' Recovery Time")
deployProvControlPlaneOtnDefaultsRsvpConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRsvpConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRsvpConfigFlag.setDescription("Resource Reservation Protocol Component' Configuration Bitfield")
deployProvControlPlaneOtnDefaultsTedbConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsTedbConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsTedbConfigFlag.setDescription("Traffic Engineering Component' Configuration Bitfield")
deployProvControlPlaneOtnDefaultsTedbTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsTedbTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsTedbTraceDetail.setDescription("Traffic Engineering Component' Trace Detail")
deployProvControlPlaneOtnDefaultsTedbMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsTedbMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsTedbMaxSize.setDescription("Traffic Engineering Component' Maximum Size")
deployProvControlPlaneOtnDefaultsTedbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsTedbRouterId.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsTedbRouterId.setDescription("Traffic Engineering Component' Router ID")
deployProvControlPlaneOtnDefaultsTedbMinAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 28), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsTedbMinAdvertWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsTedbMinAdvertWait.setDescription("Traffic Engineering Component' Minimum Advertisement Wait")
deployProvControlPlaneOtnDefaultsNaasConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsNaasConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsNaasConfigFlag.setDescription("Node Attribute Advertising Service Database Component' Configuration Bitfield")
deployProvControlPlaneOtnDefaultsNaasTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsNaasTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsNaasTraceDetail.setDescription("Node Attribute Advertising Service Database Component' Trace Detail")
deployProvControlPlaneOtnDefaultsNaasMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsNaasMaxSize.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsNaasMaxSize.setDescription("Node Attribute Advertising Service Database Component' Maximum Size")
deployProvControlPlaneOtnDefaultsNaasAdvertWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 32), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsNaasAdvertWait.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsNaasAdvertWait.setDescription("Node Attribute Advertising Service Database Component' Advertisement Wait")
deployProvControlPlaneOtnDefaultsPcConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsPcConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsPcConfigFlag.setDescription("Path Computation Component' Configuration Bitfield")
deployProvControlPlaneOtnDefaultsPcTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsPcTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsPcTraceDetail.setDescription("Path Computation Component' Trace Detail")
deployProvControlPlaneOtnDefaultsCdConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCdConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCdConfigFlag.setDescription("Configuration Data Component' Configuration Bitfield")
deployProvControlPlaneOtnDefaultsCdTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCdTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCdTraceDetail.setDescription("Configuration Data Component' Trace Detail")
deployProvControlPlaneOtnDefaultsCdResyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCdResyncTimeout.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsCdResyncTimeout.setDescription("Configuration Data Component' Resync Timeout")
deployProvControlPlaneOtnDefaultsRmConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRmConfigFlag.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRmConfigFlag.setDescription("Resource Management Component' Configuration Bitfield")
deployProvControlPlaneOtnDefaultsRmTraceDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRmTraceDetail.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRmTraceDetail.setDescription("Resource Management Component' Trace Detail")
deployProvControlPlaneOtnDefaultsRmTraceTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRmTraceTarget.setStatus('current')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsRmTraceTarget.setDescription("Resource Management Component' Trace Target")
deployProvControlPlaneOtnDefaultsNodeNameSyntax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 102, 1, 41), FspR7NodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsNodeNameSyntax.setStatus('deprecated')
if mibBuilder.loadTexts: deployProvControlPlaneOtnDefaultsNodeNameSyntax.setDescription('Node Name Syntax')
deployProvTunnelOtnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103), )
if mibBuilder.loadTexts: deployProvTunnelOtnTable.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnTable.setDescription('')
deployProvTunnelOtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvTunnelOtnEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnEntry.setDescription('')
deployProvTunnelOtnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnRowStatus.setDescription('RowStatus')
deployProvTunnelOtnTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnTunnelId.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnTunnelId.setDescription('')
deployProvTunnelOtnTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnTunnelNo.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnTunnelNo.setDescription('')
deployProvTunnelOtnAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnAlias.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnAlias.setDescription('')
deployProvTunnelOtnTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 5), FspR7CpTunnelType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnTunnelType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnTunnelType.setDescription('')
deployProvTunnelOtnToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnToTid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnToTid.setDescription('')
deployProvTunnelOtnToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnToNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnToNodeIp.setDescription('')
deployProvTunnelOtnFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 8), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnFromAid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnFromAid.setDescription('')
deployProvTunnelOtnToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 9), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnToAid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnToAid.setDescription('')
deployProvTunnelOtnConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 10), FspR7Conn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnConnectionDirection.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnConnectionDirection.setDescription('')
deployProvTunnelOtnFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 11), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnFacilityType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnFacilityType.setDescription('')
deployProvTunnelOtnProvisionedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 12), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnProvisionedPaths.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnProvisionedPaths.setDescription('')
deployProvTunnelOtnProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 13), FspR7CpProtectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnProtectionType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnProtectionType.setDescription('')
deployProvTunnelOtnPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 14), FspR7CpPinning()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnPin.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnPin.setDescription('')
deployProvTunnelOtnRestorationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 15), FspR7CpRestorationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnRestorationType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnRestorationType.setDescription('')
deployProvTunnelOtnMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 16), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnMonitorEntities.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnMonitorEntities.setDescription('')
deployProvTunnelOtnTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 17), FspR7CpTunnelScope()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnTunnelScope.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnTunnelScope.setDescription('Service Scope extending over either Client or Network Ports of Modules')
deployProvTunnelOtnLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 18), FspR7PacketsLayer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnLayer.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnLayer.setDescription('Notional Layer of Advertisement on Packets on the LIF')
deployProvTunnelOtnOifUni = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 103, 1, 19), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvTunnelOtnOifUni.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnOifUni.setDescription('OIF UNI Tunnel')
deployProvTunnelOtnCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104), )
if mibBuilder.loadTexts: deployProvTunnelOtnCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnCapTable.setDescription('')
deployProvTunnelOtnCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvTunnelOtnCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnCapEntry.setDescription('')
deployProvTunnelOtnCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnCapRowStatus.setDescription('RowStatus')
deployProvTunnelOtnCapTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapTunnelId.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnCapTunnelId.setDescription('')
deployProvTunnelOtnCapTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapTunnelNo.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnCapTunnelNo.setDescription('')
deployProvTunnelOtnCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapAlias.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnCapAlias.setDescription('')
deployProvTunnelOtnCapTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 5), FspR7CpTunnelTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapTunnelType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnCapTunnelType.setDescription('')
deployProvTunnelOtnCapToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapToTid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnCapToTid.setDescription('')
deployProvTunnelOtnCapToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 7), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapToNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnCapToNodeIp.setDescription('')
deployProvTunnelOtnCapFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapFromAid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnCapFromAid.setDescription('')
deployProvTunnelOtnCapToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapToAid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnCapToAid.setDescription('')
deployProvTunnelOtnCapConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 10), FspR7ConnCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapConnectionDirection.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnCapConnectionDirection.setDescription('')
deployProvTunnelOtnCapFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 11), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapFacilityType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnCapFacilityType.setDescription('')
deployProvTunnelOtnCapProvisionedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapProvisionedPaths.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnCapProvisionedPaths.setDescription('')
deployProvTunnelOtnCapProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 13), FspR7CpProtectionTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapProtectionType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnCapProtectionType.setDescription('')
deployProvTunnelOtnCapPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 14), FspR7CpPinningCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapPin.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnCapPin.setDescription('')
deployProvTunnelOtnCapRestorationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 15), FspR7CpRestorationTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapRestorationType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnCapRestorationType.setDescription('')
deployProvTunnelOtnCapMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 16), FspR7EnableDisableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapMonitorEntities.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnCapMonitorEntities.setDescription('')
deployProvTunnelOtnCapTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 17), FspR7CpTunnelScopeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapTunnelScope.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnCapTunnelScope.setDescription('Service Scope extending over either Client or Network Ports of Modules')
deployProvTunnelOtnCapLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 18), FspR7PacketsLayerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapLayer.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnCapLayer.setDescription('Notional Layer of Advertisement on Packets on the LIF')
deployProvTunnelOtnCapOifUni = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 104, 1, 19), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnCapOifUni.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnCapOifUni.setDescription('OIF UNI Tunnel')
deployProvTunnelOtnDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105), )
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsTable.setDescription('')
deployProvTunnelOtnDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsEntry.setDescription('')
deployProvTunnelOtnDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsRowStatus.setDescription('RowStatus')
deployProvTunnelOtnDefaultsTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsTunnelId.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsTunnelId.setDescription('')
deployProvTunnelOtnDefaultsTunnelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsTunnelNo.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsTunnelNo.setDescription('')
deployProvTunnelOtnDefaultsAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsAlias.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsAlias.setDescription('')
deployProvTunnelOtnDefaultsTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 5), FspR7CpTunnelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsTunnelType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsTunnelType.setDescription('')
deployProvTunnelOtnDefaultsToTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsToTid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsToTid.setDescription('')
deployProvTunnelOtnDefaultsToNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsToNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsToNodeIp.setDescription('')
deployProvTunnelOtnDefaultsFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 8), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsFromAid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsFromAid.setDescription('')
deployProvTunnelOtnDefaultsToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 9), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsToAid.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsToAid.setDescription('')
deployProvTunnelOtnDefaultsConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 10), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsConnectionDirection.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsConnectionDirection.setDescription('')
deployProvTunnelOtnDefaultsFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 11), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsFacilityType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsFacilityType.setDescription('')
deployProvTunnelOtnDefaultsProvisionedPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsProvisionedPaths.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsProvisionedPaths.setDescription('')
deployProvTunnelOtnDefaultsProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 13), FspR7CpProtectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsProtectionType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsProtectionType.setDescription('')
deployProvTunnelOtnDefaultsPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 14), FspR7CpPinning()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsPin.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsPin.setDescription('')
deployProvTunnelOtnDefaultsRestorationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 15), FspR7CpRestorationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsRestorationType.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsRestorationType.setDescription('')
deployProvTunnelOtnDefaultsMonitorEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 16), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsMonitorEntities.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsMonitorEntities.setDescription('')
deployProvTunnelOtnDefaultsTunnelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 17), FspR7CpTunnelScope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsTunnelScope.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsTunnelScope.setDescription('Service Scope extending over either Client or Network Ports of Modules')
deployProvTunnelOtnDefaultsLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 18), FspR7PacketsLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsLayer.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsLayer.setDescription('Notional Layer of Advertisement on Packets on the LIF')
deployProvTunnelOtnDefaultsOifUni = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 105, 1, 19), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsOifUni.setStatus('current')
if mibBuilder.loadTexts: deployProvTunnelOtnDefaultsOifUni.setDescription('OIF UNI Tunnel')
deployProvPathOtnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 106), )
if mibBuilder.loadTexts: deployProvPathOtnTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPathOtnTable.setDescription('')
deployProvPathOtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 106, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvPathOtnEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPathOtnEntry.setDescription('')
deployProvPathOtnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 106, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathOtnRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPathOtnRowStatus.setDescription('RowStatus')
deployProvPathOtnPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 106, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathOtnPathId.setStatus('current')
if mibBuilder.loadTexts: deployProvPathOtnPathId.setDescription('')
deployProvPathOtnCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 107), )
if mibBuilder.loadTexts: deployProvPathOtnCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPathOtnCapTable.setDescription('')
deployProvPathOtnCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 107, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvPathOtnCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPathOtnCapEntry.setDescription('')
deployProvPathOtnCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 107, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathOtnCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPathOtnCapRowStatus.setDescription('RowStatus')
deployProvPathOtnCapPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 107, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathOtnCapPathId.setStatus('current')
if mibBuilder.loadTexts: deployProvPathOtnCapPathId.setDescription('')
deployProvPathOtnDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 108), )
if mibBuilder.loadTexts: deployProvPathOtnDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPathOtnDefaultsTable.setDescription('')
deployProvPathOtnDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 108, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvPathOtnDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPathOtnDefaultsEntry.setDescription('')
deployProvPathOtnDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 108, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathOtnDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPathOtnDefaultsRowStatus.setDescription('RowStatus')
deployProvPathOtnDefaultsPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 108, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathOtnDefaultsPathId.setStatus('current')
if mibBuilder.loadTexts: deployProvPathOtnDefaultsPathId.setDescription('')
deployProvPathElementOtnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109), )
if mibBuilder.loadTexts: deployProvPathElementOtnTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnTable.setDescription('')
deployProvPathElementOtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvPathElementOtnEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnEntry.setDescription('')
deployProvPathElementOtnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnRowStatus.setDescription('RowStatus')
deployProvPathElementOtnTrafficEngineeringType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 2), FspR7CpTEType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnTrafficEngineeringType.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnTrafficEngineeringType.setDescription('')
deployProvPathElementOtnLifIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnLifIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnLifIp.setDescription('')
deployProvPathElementOtnNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnNodeIp.setDescription('')
deployProvPathElementOtnTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnTid.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnTid.setDescription('')
deployProvPathElementOtnLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnLogicalInterfaceId.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnLogicalInterfaceId.setDescription('')
deployProvPathElementOtnTie = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 7), FspR7CpTie()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnTie.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnTie.setDescription('')
deployProvPathElementOtnUpTributaryODTUType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 8), FspR7OdtuType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnUpTributaryODTUType.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnUpTributaryODTUType.setDescription('')
deployProvPathElementOtnDownTributaryODTUType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 9), FspR7OdtuType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnDownTributaryODTUType.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnDownTributaryODTUType.setDescription('')
deployProvPathElementOtnUpTributaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 10), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnUpTributaryPort.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnUpTributaryPort.setDescription('')
deployProvPathElementOtnDownTributaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 11), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnDownTributaryPort.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnDownTributaryPort.setDescription('')
deployProvPathElementOtnUpTributarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 12), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnUpTributarySlot.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnUpTributarySlot.setDescription('')
deployProvPathElementOtnDownTributarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 13), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnDownTributarySlot.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnDownTributarySlot.setDescription('')
deployProvPathElementOtnUpTributaryTSMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 14), FspR7ManualAuto()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnUpTributaryTSMethod.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnUpTributaryTSMethod.setDescription('')
deployProvPathElementOtnDownTributaryTSMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 109, 1, 15), FspR7ManualAuto()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvPathElementOtnDownTributaryTSMethod.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnDownTributaryTSMethod.setDescription('')
deployProvPathElementOtnCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110), )
if mibBuilder.loadTexts: deployProvPathElementOtnCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnCapTable.setDescription('')
deployProvPathElementOtnCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvPathElementOtnCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnCapEntry.setDescription('')
deployProvPathElementOtnCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnCapRowStatus.setDescription('RowStatus')
deployProvPathElementOtnCapTrafficEngineeringType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 2), FspR7CpTETypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapTrafficEngineeringType.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnCapTrafficEngineeringType.setDescription('')
deployProvPathElementOtnCapLifIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 3), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapLifIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnCapLifIp.setDescription('')
deployProvPathElementOtnCapNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 4), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnCapNodeIp.setDescription('')
deployProvPathElementOtnCapTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapTid.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnCapTid.setDescription('')
deployProvPathElementOtnCapLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 6), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapLogicalInterfaceId.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnCapLogicalInterfaceId.setDescription('')
deployProvPathElementOtnCapTie = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 7), FspR7CpTieCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapTie.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnCapTie.setDescription('')
deployProvPathElementOtnCapUpTributaryODTUType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 8), FspR7OdtuTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapUpTributaryODTUType.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnCapUpTributaryODTUType.setDescription('')
deployProvPathElementOtnCapDownTributaryODTUType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 9), FspR7OdtuTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapDownTributaryODTUType.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnCapDownTributaryODTUType.setDescription('')
deployProvPathElementOtnCapUpTributaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapUpTributaryPort.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnCapUpTributaryPort.setDescription('')
deployProvPathElementOtnCapDownTributaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapDownTributaryPort.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnCapDownTributaryPort.setDescription('')
deployProvPathElementOtnCapUpTributarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapUpTributarySlot.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnCapUpTributarySlot.setDescription('')
deployProvPathElementOtnCapDownTributarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapDownTributarySlot.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnCapDownTributarySlot.setDescription('')
deployProvPathElementOtnCapUpTributaryTSMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 14), FspR7ManualAutoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapUpTributaryTSMethod.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnCapUpTributaryTSMethod.setDescription('')
deployProvPathElementOtnCapDownTributaryTSMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 110, 1, 15), FspR7ManualAutoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnCapDownTributaryTSMethod.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnCapDownTributaryTSMethod.setDescription('')
deployProvPathElementOtnDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111), )
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsTable.setDescription('')
deployProvPathElementOtnDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsEntry.setDescription('')
deployProvPathElementOtnDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsRowStatus.setDescription('RowStatus')
deployProvPathElementOtnDefaultsTrafficEngineeringType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 2), FspR7CpTEType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsTrafficEngineeringType.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsTrafficEngineeringType.setDescription('')
deployProvPathElementOtnDefaultsLifIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsLifIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsLifIp.setDescription('')
deployProvPathElementOtnDefaultsNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsNodeIp.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsNodeIp.setDescription('')
deployProvPathElementOtnDefaultsTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsTid.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsTid.setDescription('')
deployProvPathElementOtnDefaultsLogicalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsLogicalInterfaceId.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsLogicalInterfaceId.setDescription('')
deployProvPathElementOtnDefaultsTie = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 7), FspR7CpTie()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsTie.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsTie.setDescription('')
deployProvPathElementOtnDefaultsUpTributaryODTUType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 8), FspR7OdtuType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsUpTributaryODTUType.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsUpTributaryODTUType.setDescription('')
deployProvPathElementOtnDefaultsDownTributaryODTUType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 9), FspR7OdtuType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsDownTributaryODTUType.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsDownTributaryODTUType.setDescription('')
deployProvPathElementOtnDefaultsUpTributaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsUpTributaryPort.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsUpTributaryPort.setDescription('')
deployProvPathElementOtnDefaultsDownTributaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsDownTributaryPort.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsDownTributaryPort.setDescription('')
deployProvPathElementOtnDefaultsUpTributarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsUpTributarySlot.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsUpTributarySlot.setDescription('')
deployProvPathElementOtnDefaultsDownTributarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsDownTributarySlot.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsDownTributarySlot.setDescription('')
deployProvPathElementOtnDefaultsUpTributaryTSMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 14), FspR7ManualAuto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsUpTributaryTSMethod.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsUpTributaryTSMethod.setDescription('')
deployProvPathElementOtnDefaultsDownTributaryTSMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 111, 1, 15), FspR7ManualAuto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsDownTributaryTSMethod.setStatus('current')
if mibBuilder.loadTexts: deployProvPathElementOtnDefaultsDownTributaryTSMethod.setDescription('')
deployProvCopyPathOtnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 112), )
if mibBuilder.loadTexts: deployProvCopyPathOtnTable.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathOtnTable.setDescription('')
deployProvCopyPathOtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 112, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvCopyPathOtnEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathOtnEntry.setDescription('')
deployProvCopyPathOtnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 112, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCopyPathOtnRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathOtnRowStatus.setDescription('RowStatus')
deployProvCopyPathOtnSourcePathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 112, 1, 2), EntityIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCopyPathOtnSourcePathIndex.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathOtnSourcePathIndex.setDescription('')
deployProvCopyPathOtnPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 112, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deployProvCopyPathOtnPathId.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathOtnPathId.setDescription('')
deployProvCopyPathOtnCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 113), )
if mibBuilder.loadTexts: deployProvCopyPathOtnCapTable.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathOtnCapTable.setDescription('')
deployProvCopyPathOtnCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 113, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvCopyPathOtnCapEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathOtnCapEntry.setDescription('')
deployProvCopyPathOtnCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 113, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathOtnCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathOtnCapRowStatus.setDescription('RowStatus')
deployProvCopyPathOtnCapSourcePathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 113, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathOtnCapSourcePathIndex.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathOtnCapSourcePathIndex.setDescription('')
deployProvCopyPathOtnCapPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 113, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathOtnCapPathId.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathOtnCapPathId.setDescription('')
deployProvCopyPathOtnDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 114), )
if mibBuilder.loadTexts: deployProvCopyPathOtnDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathOtnDefaultsTable.setDescription('')
deployProvCopyPathOtnDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 114, 1), ).setIndexNames((0, "ADVA-MIB", "controlPlaneOtnEntityIndex"))
if mibBuilder.loadTexts: deployProvCopyPathOtnDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathOtnDefaultsEntry.setDescription('')
deployProvCopyPathOtnDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 114, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathOtnDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathOtnDefaultsRowStatus.setDescription('RowStatus')
deployProvCopyPathOtnDefaultsSourcePathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 114, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathOtnDefaultsSourcePathIndex.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathOtnDefaultsSourcePathIndex.setDescription('')
deployProvCopyPathOtnDefaultsPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 8, 114, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deployProvCopyPathOtnDefaultsPathId.setStatus('current')
if mibBuilder.loadTexts: deployProvCopyPathOtnDefaultsPathId.setDescription('')
areaIdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9, 10), )
if mibBuilder.loadTexts: areaIdCapTable.setStatus('deprecated')
if mibBuilder.loadTexts: areaIdCapTable.setDescription("This table is used to get capabilities for AREAID parameter. Regular\n         cap tables including AREAID show the length of output string.\n         Enumerator YES/NO in regular cap tables shows if there are capabilities or value 0\n         which means 'no capabilities'.\n         The second index (n) is used to devide the output string to n string blocks.\n         Each block has a maximum of 512 bytes. n = output string / 512.")
areaIdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9, 10, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "areaIdCapIndexCap"))
if mibBuilder.loadTexts: areaIdCapEntry.setStatus('deprecated')
if mibBuilder.loadTexts: areaIdCapEntry.setDescription('')
areaIdCapIndexCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9, 10, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: areaIdCapIndexCap.setStatus('current')
if mibBuilder.loadTexts: areaIdCapIndexCap.setDescription('Used to display capability value per index. The number of capabilities determines the number of indexes.')
areaIdCapStringCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9, 10, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: areaIdCapStringCap.setStatus('current')
if mibBuilder.loadTexts: areaIdCapStringCap.setDescription('')
nendIpCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9, 11), )
if mibBuilder.loadTexts: nendIpCapTable.setStatus('current')
if mibBuilder.loadTexts: nendIpCapTable.setDescription("This table is used to get capabilities for NENDIP parameter.\n         Enumerator YES/NO in regular cap tables shows if there are capabilities or no.\n         No values for specific entity means 'no capabilities'.\n         The second index (n) is used to devide the output string to n string blocks.\n         Each block has a maximum of 255 bytes. n = output string / 255.")
nendIpCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9, 11, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "nendIpCapIndexCap"))
if mibBuilder.loadTexts: nendIpCapEntry.setStatus('current')
if mibBuilder.loadTexts: nendIpCapEntry.setDescription('')
nendIpCapIndexCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9, 11, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nendIpCapIndexCap.setStatus('current')
if mibBuilder.loadTexts: nendIpCapIndexCap.setDescription('Used to display capability value per index. The number of capabilities determines the number of indexes.')
nendIpCapStringCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9, 11, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nendIpCapStringCap.setStatus('current')
if mibBuilder.loadTexts: nendIpCapStringCap.setDescription('')
areaAidCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9, 12), )
if mibBuilder.loadTexts: areaAidCapTable.setStatus('current')
if mibBuilder.loadTexts: areaAidCapTable.setDescription("This table is used to get capabilities for AREAAID parameter. Regular\n         cap tables including AREAAID show the length of output string.\n         Enumerator YES/NO in regular cap tables shows if there are capabilities or value 0\n         which means 'no capabilities'.\n         The second index (n) is used to devide the output string to n string blocks.\n         Each block has a maximum of 255 bytes. n = output string / 255.")
areaAidCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9, 12, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "areaIdCapIndexCap"))
if mibBuilder.loadTexts: areaAidCapEntry.setStatus('current')
if mibBuilder.loadTexts: areaAidCapEntry.setDescription('')
areaAidCapIndexCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9, 12, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: areaAidCapIndexCap.setStatus('current')
if mibBuilder.loadTexts: areaAidCapIndexCap.setDescription('Used to display capability value per index. The number of capabilities determines the number of indexes.')
areaAidCapStringCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 5, 9, 12, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: areaAidCapStringCap.setStatus('current')
if mibBuilder.loadTexts: areaAidCapStringCap.setDescription('')
thresholdOtuTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 1), )
if mibBuilder.loadTexts: thresholdOtuTable.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuTable.setDescription('')
thresholdOtuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdOtuEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuEntry.setDescription('')
thresholdOtuESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuESHighThres15min.setDescription('Errored Seconds OTU Section Monitoring')
thresholdOtuESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuESHighThres1day.setDescription('Errored Seconds OTU Section Monitoring')
thresholdOtuSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuSESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuSESHighThres15min.setDescription('Errored Seconds OTU Section Monitoring')
thresholdOtuSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuSESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuSESHighThres1day.setDescription('Errored Seconds OTU Section Monitoring')
thresholdOtuBbeHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 1, 1, 5), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuBbeHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuBbeHighThres15min.setDescription('Threshold: Background Block Errors OTU Section Monitoring')
thresholdOtuBbeHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 1, 1, 6), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuBbeHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuBbeHighThres1day.setDescription('Threshold: Background Block Errors OTU Section Monitoring')
thresholdOtuUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuUASHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuUASHighThres15min.setDescription('Unavailable Seconds OTU Section Monitoring')
thresholdOtuUASHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuUASHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuUASHighThres1day.setDescription('Unavailable Seconds OTU Section Monitoring')
thresholdOduTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 2), )
if mibBuilder.loadTexts: thresholdOduTable.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTable.setDescription('')
thresholdOduEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 2, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdOduEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdOduEntry.setDescription('')
thresholdOduESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOduESHighThres15min.setDescription('Errored Seconds ODU Path Monitoring')
thresholdOduESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOduESHighThres1day.setDescription('Errored Seconds ODU Path Monitoring')
thresholdOduSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduSESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOduSESHighThres15min.setDescription('Severely Errored Seconds ODU Path Monitoring')
thresholdOduSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduSESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOduSESHighThres1day.setDescription('Severely Errored Seconds ODU Path Monitoring')
thresholdOduBbeHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 2, 1, 5), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduBbeHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOduBbeHighThres15min.setDescription('Threshold: Background Block Erros ODU Path Monitoring')
thresholdOduBbeHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 2, 1, 6), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduBbeHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOduBbeHighThres1day.setDescription('Threshold: Background Block Erros ODU Path Monitoring')
thresholdOduUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduUASHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOduUASHighThres15min.setDescription('Unavailable Seconds ODU Path Monitoring')
thresholdOduUASHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduUASHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOduUASHighThres1day.setDescription('Unavailable Seconds ODU Path Monitoring')
thresholdOduTcmATable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 3), )
if mibBuilder.loadTexts: thresholdOduTcmATable.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmATable.setDescription('')
thresholdOduTcmAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 3, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdOduTcmAEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmAEntry.setDescription('')
thresholdOduTcmAESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmAESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmAESHighThres15min.setDescription('Errored Seconds ODU Tandem Connection Monitoring')
thresholdOduTcmAESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmAESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmAESHighThres1day.setDescription('Errored Seconds ODU Tandem Connection Monitoring')
thresholdOduTcmASESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmASESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmASESHighThres15min.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring')
thresholdOduTcmASESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmASESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmASESHighThres1day.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring')
thresholdOduTcmABbeHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 3, 1, 5), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmABbeHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmABbeHighThres15min.setDescription('Threshold of instance A: Background Block Erros ODU Tandem Connection Monitoring')
thresholdOduTcmABbeHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 3, 1, 6), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmABbeHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmABbeHighThres1day.setDescription('Threshold of instance A: Background Block Erros ODU Tandem Connection Monitoring')
thresholdOduTcmAUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmAUASHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmAUASHighThres15min.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring')
thresholdOduTcmAUASHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmAUASHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmAUASHighThres1day.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring')
thresholdOduTcmBTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 4), )
if mibBuilder.loadTexts: thresholdOduTcmBTable.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmBTable.setDescription('')
thresholdOduTcmBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 4, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdOduTcmBEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmBEntry.setDescription('')
thresholdOduTcmBBESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmBBESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmBBESHighThres15min.setDescription('Errored Seconds ODU Tandem Connection Monitoring')
thresholdOduTcmBESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmBESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmBESHighThres1day.setDescription('Errored Seconds ODU Tandem Connection Monitoring')
thresholdOduTcmBSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmBSESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmBSESHighThres15min.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring')
thresholdOduTcmBSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmBSESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmBSESHighThres1day.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring')
thresholdOduTcmBOduTcmBBbeHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 4, 1, 5), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmBOduTcmBBbeHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmBOduTcmBBbeHighThres15min.setDescription('Threshold of instance B: Background Block Erros ODU Tandem Connection Monitoring')
thresholdOduTcmBOduTcmBBbeHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 4, 1, 6), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmBOduTcmBBbeHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmBOduTcmBBbeHighThres1day.setDescription('Threshold of instance B: Background Block Erros ODU Tandem Connection Monitoring')
thresholdOduTcmBUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmBUASHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmBUASHighThres15min.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring')
thresholdOduTcmBUASHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmBUASHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmBUASHighThres1day.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring')
thresholdSonetSectTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 5), )
if mibBuilder.loadTexts: thresholdSonetSectTable.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetSectTable.setDescription('')
thresholdSonetSectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 5, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdSonetSectEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetSectEntry.setDescription('')
thresholdSonetSectESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetSectESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetSectESHighThres15min.setDescription('Errored Seconds Section')
thresholdSonetSectESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetSectESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetSectESHighThres1day.setDescription('Errored Seconds Section')
thresholdSonetSectSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetSectSESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetSectSESHighThres15min.setDescription('Severely Errored Seconds Section')
thresholdSonetSectSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetSectSESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetSectSESHighThres1day.setDescription('Severely Errored Seconds Section')
thresholdSonetSectSEFSHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetSectSEFSHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetSectSEFSHighThres15min.setDescription('Severly Errored Framing Seconds Section')
thresholdSonetSectSEFSHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetSectSEFSHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetSectSEFSHighThres1day.setDescription('Severly Errored Framing Seconds Section')
thresholdSonetSectCVHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 5, 1, 7), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetSectCVHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetSectCVHighThres15min.setDescription('Threshold 15 Min: Coding Violations Section')
thresholdSonetSectCVHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 5, 1, 8), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetSectCVHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetSectCVHighThres1day.setDescription('Threshold 1 Day: Coding Violations Section')
thresholdSonetLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 6), )
if mibBuilder.loadTexts: thresholdSonetLineTable.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdSonetLineTable.setDescription('')
thresholdSonetLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 6, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdSonetLineEntry.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdSonetLineEntry.setDescription('')
thresholdSonetLineESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineESHighThres15min.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdSonetLineESHighThres15min.setDescription('Errored Seconds Line / Muliplex Section')
thresholdSonetLineESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineESHighThres1day.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdSonetLineESHighThres1day.setDescription('Errored Seconds Line / Multiplex Section')
thresholdSonetLineSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineSESHighThres15min.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdSonetLineSESHighThres15min.setDescription('Severely Errored Seconds Line / Multiplex Section')
thresholdSonetLineSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineSESHighThres1day.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdSonetLineSESHighThres1day.setDescription('Severely Errored Seconds Line / Multiplex Section')
thresholdSonetLineUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 6, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineUASHighThres15min.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdSonetLineUASHighThres15min.setDescription('Unavailable Seconds Line / Multiplex Section')
thresholdSonetLineUASSHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 6, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineUASSHighThres1day.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdSonetLineUASSHighThres1day.setDescription('Unavailable Seconds Line / Multiplex Section 1Day Threshold')
thresholdSonetLineCVHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 6, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineCVHighThres15min.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdSonetLineCVHighThres15min.setDescription('Threshold 15 Min: Coding Violations Line / Multiplex Section')
thresholdSonetLineCVSHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 6, 1, 8), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineCVSHighThres1day.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdSonetLineCVSHighThres1day.setDescription('1Day Threshold: Coding Violations Line / Multiplex Section')
thresholdSonetLineCViolHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 6, 1, 9), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineCViolHighThres15min.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdSonetLineCViolHighThres15min.setDescription('Threshold 15 Min: Coding Violations Line / Multiplex Section')
thresholdSonetHoPathTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 7), )
if mibBuilder.loadTexts: thresholdSonetHoPathTable.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetHoPathTable.setDescription('')
thresholdSonetHoPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 7, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdSonetHoPathEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetHoPathEntry.setDescription('')
thresholdSonetHoPathESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetHoPathESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetHoPathESHighThres15min.setDescription('Errored Seconds Path')
thresholdSonetHoPathESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetHoPathESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetHoPathESHighThres1day.setDescription('Errored Seconds Path')
thresholdSonetHoPathSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetHoPathSESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetHoPathSESHighThres15min.setDescription('Severely Errored Seconds Path')
thresholdSonetHoPathSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetHoPathSESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetHoPathSESHighThres1day.setDescription('Severely Errored Seconds Path')
thresholdSonetHoPathUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 7, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetHoPathUASHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetHoPathUASHighThres15min.setDescription('Unavailable Seconds Path')
thresholdSonetHoPathUASHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 7, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetHoPathUASHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetHoPathUASHighThres1day.setDescription('Coding Violations Path')
thresholdSonetHoPathCVHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 7, 1, 7), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetHoPathCVHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetHoPathCVHighThres15min.setDescription('THreshold 15 Min: Coding Violations Path')
thresholdSonetHoPathCVHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 7, 1, 8), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetHoPathCVHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetHoPathCVHighThres1day.setDescription('Threshold 1 Day: Coding Violations Path')
thresholdSonetLoPathTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 8), )
if mibBuilder.loadTexts: thresholdSonetLoPathTable.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetLoPathTable.setDescription('')
thresholdSonetLoPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 8, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdSonetLoPathEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetLoPathEntry.setDescription('')
thresholdSonetLoPathESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLoPathESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetLoPathESHighThres15min.setDescription('Errored Seconds Lower Order Path Threshold 15MIN')
thresholdSonetLoPathESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 8, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLoPathESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetLoPathESHighThres1day.setDescription('Errored Seconds Lower Order Path Threshold 1DAY')
thresholdSonetLoPathSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 8, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLoPathSESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetLoPathSESHighThres15min.setDescription('Severely Errored Seconds LO-Path Threshold 15MIN')
thresholdSonetLoPathSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 8, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLoPathSESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetLoPathSESHighThres1day.setDescription('Severely Errored Seconds LO-Path Threshold 1DAY')
thresholdSonetLoPathUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 8, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLoPathUASHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetLoPathUASHighThres15min.setDescription('Unavailable Seconds LO-Path Threshold')
thresholdSonetLoPathUASHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 8, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLoPathUASHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetLoPathUASHighThres1day.setDescription('Unavailable Seconds LO-Path Threshold 1DAY')
thresholdSonetLoPathCVHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 8, 1, 7), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLoPathCVHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetLoPathCVHighThres15min.setDescription('Coding Violations Lower Order Path Threshold 15MIN')
thresholdSonetLoPathCVHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 8, 1, 8), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLoPathCVHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetLoPathCVHighThres1day.setDescription('Coding Violations Lower Order Path Threshold 1DAY')
thresholdPhysPerfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9), )
if mibBuilder.loadTexts: thresholdPhysPerfTable.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfTable.setDescription('')
thresholdPhysPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdPhysPerfEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfEntry.setDescription('')
thresholdPhysPerfOpticalInputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-450, 260), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfOpticalInputPwrLow.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfOpticalInputPwrLow.setDescription('Optical Input Power Received')
thresholdPhysPerfOpticalInputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-450, 260), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfOpticalInputPwrHigh.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfOpticalInputPwrHigh.setDescription('Optical Input Power Received')
thresholdPhysPerfOpticalOutputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfOpticalOutputPwrLow.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfOpticalOutputPwrLow.setDescription('Low fixed threshold of the Optical Power Transmitted (output)')
thresholdPhysPerfOpticalOutputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfOpticalOutputPwrHigh.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfOpticalOutputPwrHigh.setDescription('High fixed threshold of the Optical Power Transmitted (output)')
thresholdPhysPerfLaserBiasCurrentNormalized = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 5), Unsigned32()).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfLaserBiasCurrentNormalized.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfLaserBiasCurrentNormalized.setDescription('Laser Bias Current Normalized Fixed High Threshold.')
thresholdPhysPerfAttRxLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 6), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfAttRxLow.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfAttRxLow.setDescription('Low Threshold for Attenuation on Receive Fiber.')
thresholdPhysPerfAttRxHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 7), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfAttRxHigh.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfAttRxHigh.setDescription('High Threshold for Attenuation on Receive Fiber')
thresholdPhysPerfAttTxLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 8), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfAttTxLow.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfAttTxLow.setDescription('Low Threshold Attenuation on Transmit Fiber')
thresholdPhysPerfAttTxHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 9), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfAttTxHigh.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfAttTxHigh.setDescription('High Threshold of Attenuation on Transmit Fiber')
thresholdPhysPerfLaserTempLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 10), Integer32()).setUnits('0.1 oC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfLaserTempLowThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfLaserTempLowThres.setDescription('Laser temperature fixed low threshold.')
thresholdPhysPerfLaserTempHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 11), Integer32()).setUnits('0.1 oC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfLaserTempHighThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfLaserTempHighThres.setDescription('Laser temperature fixed high threshold.')
thresholdPhysPerfPumpLaser1TempHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 12), Integer32()).setUnits('0.1 oC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfPumpLaser1TempHighThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfPumpLaser1TempHighThres.setDescription('Laser 1 temperature fixed high threshold.')
thresholdPhysPerfPumpLaser1TempLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 13), Integer32()).setUnits('0.1 oC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfPumpLaser1TempLowThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfPumpLaser1TempLowThres.setDescription('Laser 1 temperature fixed low threshold.')
thresholdPhysPerfPumpLaser2TempHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 14), Integer32()).setUnits('0.1 oC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfPumpLaser2TempHighThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfPumpLaser2TempHighThres.setDescription('Laser 2 temperature fixed high threshold.')
thresholdPhysPerfPumpLaser2TempLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 15), Integer32()).setUnits('0.1 oC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfPumpLaser2TempLowThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfPumpLaser2TempLowThres.setDescription('Laser 2 temperature fixed low threshold')
thresholdPhysPerfOscPwrRcvHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-470, -50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfOscPwrRcvHighThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfOscPwrRcvHighThres.setDescription('Optical Supervisory Channel Input Power Received High Threshold')
thresholdPhysPerfOscPwrRcvLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-470, -50), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfOscPwrRcvLowThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfOscPwrRcvLowThres.setDescription('Optical Supervisory Channel Input Power Received Low Threshold')
thresholdPhysPerfRamanPumpPwrHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 18), Integer32()).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfRamanPumpPwrHighThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfRamanPumpPwrHighThres.setDescription('Raman Pump Power High threshold')
thresholdPhysPerfRamanPumpPwrLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 19), Integer32()).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfRamanPumpPwrLowThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfRamanPumpPwrLowThres.setDescription('Raman Pump Power Low threshold')
thresholdPhysPerfConfigurableOpticalOutputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-500, 300), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfConfigurableOpticalOutputPwrLow.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfConfigurableOpticalOutputPwrLow.setDescription('Configurable threshold of the Optical Power Transmitted (output)')
thresholdPhysPerfConfigurableOpticalOutputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-500, 300), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfConfigurableOpticalOutputPwrHigh.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfConfigurableOpticalOutputPwrHigh.setDescription('Configurable high threshold of the Optical Power Transmitted (output)')
thresholdPhysPerfBrPwrReceivedHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-300, -180), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfBrPwrReceivedHighThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfBrPwrReceivedHighThres.setDescription('Backreflection Input Received High Threshold')
thresholdPhysPerfDispersionCompensationLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-700, 700), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfDispersionCompensationLowThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfDispersionCompensationLowThres.setDescription('Chromatic Dispersion Compensation Low Threshold')
thresholdPhysPerfDispersionCompensationHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-700, 700), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfDispersionCompensationHighThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfDispersionCompensationHighThres.setDescription('Chromatic Dispersion Compensation High Threshold')
thresholdPhysPerfLowerAtlinkThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 500), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfLowerAtlinkThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfLowerAtlinkThres.setDescription('Configurable low threshold for link attenuation')
thresholdPhysPerfUpperAtlinkThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 500), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfUpperAtlinkThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfUpperAtlinkThres.setDescription('Configurable high threshold for link attenuation')
thresholdPhysPerfPumpLaser3TempHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 27), Integer32()).setUnits('0.1 oC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfPumpLaser3TempHighThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfPumpLaser3TempHighThres.setDescription('Laser 3 temperature fixed high threshold')
thresholdPhysPerfPumpLaser3TempLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 28), Integer32()).setUnits('0.1 oC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfPumpLaser3TempLowThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfPumpLaser3TempLowThres.setDescription('Laser 3 temperature fixed low threshold')
thresholdPhysPerfLatencyHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 300000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 us').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfLatencyHighThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfLatencyHighThres.setDescription('Configurable high threshold for round trip delay')
thresholdPhysPerfLatencyLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 300000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 us').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfLatencyLowThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfLatencyLowThres.setDescription('Configurable low threshold Round trip delay')
thresholdPhysPerfRoundTripDelayHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 30000000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ns').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfRoundTripDelayHighThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfRoundTripDelayHighThres.setDescription('Configurable high threshold for round trip delay')
thresholdPhysPerfRoundTripDelayLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 30000000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ns').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfRoundTripDelayLowThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfRoundTripDelayLowThres.setDescription('Configurable low threshold for round trip delay')
thresholdPhysPerfPumpLaser4TempHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 33), Integer32()).setUnits('0.1 oC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfPumpLaser4TempHighThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfPumpLaser4TempHighThres.setDescription('Laser 4 temperature fixed high threshold')
thresholdPhysPerfPumpLaser4TempLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 34), Integer32()).setUnits('0.1 oC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfPumpLaser4TempLowThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfPumpLaser4TempLowThres.setDescription('Laser 4 temperature fixed low threshold')
thresholdPhysPerfLocalOscTempLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 35), Integer32()).setUnits('0.1 oC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfLocalOscTempLowThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfLocalOscTempLowThres.setDescription('Local Oscillator Laser temperature fixed low threshold')
thresholdPhysPerfLocalOscTempHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 36), Integer32()).setUnits('0.1 oC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfLocalOscTempHighThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfLocalOscTempHighThres.setDescription('Local Oscillator Laser temperature fixed high threshold')
thresholdPhysPerfDifferentialGroupDelayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 100), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfDifferentialGroupDelayHigh.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfDifferentialGroupDelayHigh.setDescription('Differential Group Delay High TH')
thresholdPhysPerfChromaticDispersionLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50000, 50000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfChromaticDispersionLow.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfChromaticDispersionLow.setDescription('Chromatic Dispersion Low TH')
thresholdPhysPerfChromaticDispersionHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-50000, 50000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfChromaticDispersionHigh.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfChromaticDispersionHigh.setDescription('Chromatic Dispersion High TH')
thresholdPhysPerfSignalToNoiseRatioLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(105, 160), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfSignalToNoiseRatioLow.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfSignalToNoiseRatioLow.setDescription('Signal-to-Noise Ratio Low TH')
thresholdPhysPerfCarrierFreqOffsetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-32000, 32000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.001 GHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfCarrierFreqOffsetLow.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCarrierFreqOffsetLow.setDescription('Carrier Frequency Offset Low TH')
thresholdPhysPerfCarrierFreqOffsetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 9, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-32000, 32000), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.001 GHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysPerfCarrierFreqOffsetHigh.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCarrierFreqOffsetHigh.setDescription('Carrier Frequency Offset High TH')
thresholdPhysConvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 10), )
if mibBuilder.loadTexts: thresholdPhysConvTable.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvTable.setDescription('')
thresholdPhysConvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 10, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdPhysConvEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvEntry.setDescription('')
thresholdPhysConvESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvESHighThres15min.setDescription('Errored Seconds Physical Coding Layer')
thresholdPhysConvESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 89400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvESHighThres1day.setDescription('Errored Seconds Physical Coding Layer')
thresholdPhysConvDEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 10, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvDEHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvDEHighThres15min.setDescription('Threshold 15 Min: Disparity Errors Physical Coding Layer')
thresholdPhysConvDEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 10, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvDEHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvDEHighThres1day.setDescription('Threshold 1 Day: Disparity Errors Physical Coding Layer')
thresholdPhysConvCVHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 10, 1, 5), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvCVHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvCVHighThres15min.setDescription('Threshold 15 Min: Coding Violations Physical Coding Layer')
thresholdPhysConvCVHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 10, 1, 6), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvCVHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvCVHighThres1day.setDescription('Threshold 1 Day: Coding Violations - Physical Coding Layer')
thresholdEthRxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 11), )
if mibBuilder.loadTexts: thresholdEthRxTable.setStatus('current')
if mibBuilder.loadTexts: thresholdEthRxTable.setDescription('')
thresholdEthRxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 11, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdEthRxEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdEthRxEntry.setDescription('')
thresholdEthRxPauseFramesHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthRxPauseFramesHighThres15Min.setStatus('current')
if mibBuilder.loadTexts: thresholdEthRxPauseFramesHighThres15Min.setDescription('Pause Frames Received High Threshold')
thresholdEthRxPauseFramesHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthRxPauseFramesHighThres1Day.setStatus('current')
if mibBuilder.loadTexts: thresholdEthRxPauseFramesHighThres1Day.setDescription('Pause Frames Received High Threshold')
thresholdEthRxCrcFramesHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthRxCrcFramesHighThres15Min.setStatus('current')
if mibBuilder.loadTexts: thresholdEthRxCrcFramesHighThres15Min.setDescription('Errored Frames (CRC Errors) Received 15 Min Threshold')
thresholdEthRxCrcFramesHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthRxCrcFramesHighThres1Day.setStatus('current')
if mibBuilder.loadTexts: thresholdEthRxCrcFramesHighThres1Day.setDescription('Errored Frames (CRC Errors) Received 1 Day Threshold')
thresholdEthRxDiscardedFramesHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthRxDiscardedFramesHighThres15Min.setStatus('current')
if mibBuilder.loadTexts: thresholdEthRxDiscardedFramesHighThres15Min.setDescription('Received Frames Discarded 15-MIN Threshold')
thresholdEthRxDiscardedFramesHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthRxDiscardedFramesHighThres1Day.setStatus('current')
if mibBuilder.loadTexts: thresholdEthRxDiscardedFramesHighThres1Day.setDescription('Received Frames Discarded 1DAY Threshold')
thresholdEthTxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 12), )
if mibBuilder.loadTexts: thresholdEthTxTable.setStatus('current')
if mibBuilder.loadTexts: thresholdEthTxTable.setDescription('')
thresholdEthTxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 12, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdEthTxEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdEthTxEntry.setDescription('')
thresholdEthTxPauseFramesHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthTxPauseFramesHighThres15Min.setStatus('current')
if mibBuilder.loadTexts: thresholdEthTxPauseFramesHighThres15Min.setDescription('Pause Frames Transmitted High Threshold')
thresholdEthTxPauseFramesHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthTxPauseFramesHighThres1Day.setStatus('current')
if mibBuilder.loadTexts: thresholdEthTxPauseFramesHighThres1Day.setDescription('Pause Frames Transmitted High Threshold')
thresholdEthTxCrcFramesEgressHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthTxCrcFramesEgressHighThres15Min.setStatus('current')
if mibBuilder.loadTexts: thresholdEthTxCrcFramesEgressHighThres15Min.setDescription('Errored Frames (CRC Erors) Received egress from Mapper High Threshold')
thresholdEthTxCrcFramesEgressHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthTxCrcFramesEgressHighThres1Day.setStatus('current')
if mibBuilder.loadTexts: thresholdEthTxCrcFramesEgressHighThres1Day.setDescription('Errored Frames (CRC Errors) Received egress from Mapper High Threshold')
thresholdGfpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 13), )
if mibBuilder.loadTexts: thresholdGfpTable.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdGfpTable.setDescription('')
thresholdGfpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 13, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdGfpEntry.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdGfpEntry.setDescription('')
thresholdGfpCoreHecCorrectedFramesHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpCoreHecCorrectedFramesHighThres15Min.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdGfpCoreHecCorrectedFramesHighThres15Min.setDescription('Core HEC Corrected Frames High Threshold')
thresholdGfpCoreHecCorrectedFramesHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 13, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpCoreHecCorrectedFramesHighThres1Day.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdGfpCoreHecCorrectedFramesHighThres1Day.setDescription('Core HEC Corrected Frames High Threshold')
thresholdGfpTypeHecCorrectedFramesHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpTypeHecCorrectedFramesHighThres15Min.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdGfpTypeHecCorrectedFramesHighThres15Min.setDescription('Type Field HEC Corrected Frames High Threshold')
thresholdGfpTypeHecCorrectedFramesHighThres15Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 13, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpTypeHecCorrectedFramesHighThres15Day.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdGfpTypeHecCorrectedFramesHighThres15Day.setDescription('Type Field HEC Corrected Frames High Threshold')
thresholdGfpTypeHecDiscardedFramesHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpTypeHecDiscardedFramesHighThres15Min.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdGfpTypeHecDiscardedFramesHighThres15Min.setDescription('Type Field HEC Discarded Frames High Threshold')
thresholdGfpTypeHecDiscardedFramesHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 13, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpTypeHecDiscardedFramesHighThres1Day.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdGfpTypeHecDiscardedFramesHighThres1Day.setDescription('Type Field HEC Discarded Frames High Threshold')
thresholdGfpTHecDiscardedFramesHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 13, 1, 7), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpTHecDiscardedFramesHighThres1Day.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdGfpTHecDiscardedFramesHighThres1Day.setDescription('Type Field HEC Discarded Frames High Threshold')
thresholdIntrusionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 15), )
if mibBuilder.loadTexts: thresholdIntrusionTable.setStatus('current')
if mibBuilder.loadTexts: thresholdIntrusionTable.setDescription('')
thresholdIntrusionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 15, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdIntrusionEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdIntrusionEntry.setDescription('')
thresholdIntrusionGradient = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 30), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('0.1 dB/min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdIntrusionGradient.setStatus('current')
if mibBuilder.loadTexts: thresholdIntrusionGradient.setDescription("Attenuation Gradient Threshold on Receive Fiber. Applies to both\n         TRMT and RCV directions; but threshold violation is reported for\n         each direction separately by the 'tapping' alarms: INTRUDE-RCV\n         and INTRUDE-TRMT.")
thresholdOtuFecTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 16), )
if mibBuilder.loadTexts: thresholdOtuFecTable.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdOtuFecTable.setDescription('')
thresholdOtuFecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 16, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdOtuFecEntry.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdOtuFecEntry.setDescription('')
thresholdOtuFecESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 16, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecESHighThres15min.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdOtuFecESHighThres15min.setDescription('Errored Seconds FEC OTU High Threshold')
thresholdOtuFecESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 16, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecESHighThres1day.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdOtuFecESHighThres1day.setDescription('Errored Seconds FEC OTU High Threshold')
thresholdOtuFecSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 16, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSESHighThres15min.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdOtuFecSESHighThres15min.setDescription('Severely Errored Seconds FEC OTU High Threshold')
thresholdOtuFecSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 16, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSESHighThres1day.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdOtuFecSESHighThres1day.setDescription('Severely Errored Seconds FEC OTU High Threshold')
thresholdOtuFecCEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 16, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecCEHighThres15min.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdOtuFecCEHighThres15min.setDescription('FEC Corrected Errors 15 Min Threshold')
thresholdOtuFecCEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 16, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecCEHighThres1day.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdOtuFecCEHighThres1day.setDescription('FEC Corrected Errors 1Day Threshold')
thresholdOtuFecUBEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 16, 1, 7), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecUBEHighThres15min.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdOtuFecUBEHighThres15min.setDescription('Uncorrected Block Errors High Threshold')
thresholdOtuFecUBEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 16, 1, 8), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecUBEHighThres1day.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdOtuFecUBEHighThres1day.setDescription('Uncorrected Block Errors High Threshold')
thresholdOtuFecCErrHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 16, 1, 9), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecCErrHighThres15min.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdOtuFecCErrHighThres15min.setDescription('FEC Corrected Errors 15 Min Threshold')
thresholdOtuFecCErrHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 16, 1, 10), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecCErrHighThres1day.setStatus('deprecated')
if mibBuilder.loadTexts: thresholdOtuFecCErrHighThres1day.setDescription('FEC Corrected Errors 1Day Threshold')
thresholdGfptTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 17), )
if mibBuilder.loadTexts: thresholdGfptTable.setStatus('current')
if mibBuilder.loadTexts: thresholdGfptTable.setDescription('')
thresholdGfptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 17, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdGfptEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdGfptEntry.setDescription('')
thresholdGfptDiscardedSuperblocksHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 17, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfptDiscardedSuperblocksHighThres15Min.setStatus('current')
if mibBuilder.loadTexts: thresholdGfptDiscardedSuperblocksHighThres15Min.setDescription('Discarded Super-Blocks 15-MIN Threshold')
thresholdGfptDiscardedSuperblocksHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 17, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfptDiscardedSuperblocksHighThres1Day.setStatus('current')
if mibBuilder.loadTexts: thresholdGfptDiscardedSuperblocksHighThres1Day.setDescription('Discarded Super-Blocks 1-DAY Threshold')
thresholdSubAggregateTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 18), )
if mibBuilder.loadTexts: thresholdSubAggregateTable.setStatus('current')
if mibBuilder.loadTexts: thresholdSubAggregateTable.setDescription('')
thresholdSubAggregateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 18, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdSubAggregateEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdSubAggregateEntry.setDescription('')
thresholdSubAggregateESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 18, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSubAggregateESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdSubAggregateESHighThres15min.setDescription('Multiplexer Errored Seconds High Threshold')
thresholdSubAggregateESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 18, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSubAggregateESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdSubAggregateESHighThres1day.setDescription('Multiplexer Errored Seconds High Threshold')
thresholdSubAggregateSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 18, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSubAggregateSESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdSubAggregateSESHighThres15min.setDescription('Multiplexer Severely Errored Seconds High Threshold')
thresholdSubAggregateSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 18, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSubAggregateSESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdSubAggregateSESHighThres1day.setDescription('Multiplexer Severely Errored Seconds High Threshold')
thresholdOduTcmCTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 19), )
if mibBuilder.loadTexts: thresholdOduTcmCTable.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmCTable.setDescription('')
thresholdOduTcmCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 19, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdOduTcmCEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmCEntry.setDescription('')
thresholdOduTcmCBESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 19, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmCBESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmCBESHighThres15min.setDescription('Errored Seconds ODU Tandem Connection Monitoring')
thresholdOduTcmCESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 19, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmCESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmCESHighThres1day.setDescription('Errored Seconds ODU Tandem Connection Monitoring')
thresholdOduTcmCSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 19, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmCSESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmCSESHighThres15min.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring')
thresholdOduTcmCSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 19, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmCSESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmCSESHighThres1day.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring')
thresholdOduTcmCOduTcmCBbeHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 19, 1, 5), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmCOduTcmCBbeHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmCOduTcmCBbeHighThres15min.setDescription('Threshold of instance C: Background Block Erros ODU Tandem Connection Monitoring')
thresholdOduTcmCOduTcmCBbeHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 19, 1, 6), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmCOduTcmCBbeHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmCOduTcmCBbeHighThres1day.setDescription('Threshold of instance C: Background Block Erros ODU Tandem Connection Monitoring')
thresholdOduTcmCUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 19, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmCUASHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmCUASHighThres15min.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring')
thresholdOduTcmCUASHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 19, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOduTcmCUASHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOduTcmCUASHighThres1day.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring')
thresholdPhysConvHighSpeedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 20), )
if mibBuilder.loadTexts: thresholdPhysConvHighSpeedTable.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvHighSpeedTable.setDescription('')
thresholdPhysConvHighSpeedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 20, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdPhysConvHighSpeedEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvHighSpeedEntry.setDescription('')
thresholdPhysConvHighSpeedESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 20, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvHighSpeedESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvHighSpeedESHighThres15min.setDescription('Errored Seconds Physical Coding Layer')
thresholdPhysConvHighSpeedESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 20, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 89400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvHighSpeedESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvHighSpeedESHighThres1day.setDescription('Errored Seconds Physical Coding Layer')
thresholdPhysConvHighSpeedCVHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 20, 1, 3), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvHighSpeedCVHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvHighSpeedCVHighThres15min.setDescription('Threshold 15 Min: Coding Violations Physical Coding Layer')
thresholdPhysConvHighSpeedCVHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 20, 1, 4), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvHighSpeedCVHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvHighSpeedCVHighThres1day.setDescription('Threshold 1 Day: Coding Violations - Physical Coding Layer')
thresholdPhysConvHighSpeedSEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 20, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvHighSpeedSEHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvHighSpeedSEHighThres15min.setDescription('Sync Header Errors Physical Coding Layer')
thresholdPhysConvHighSpeedSEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 20, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvHighSpeedSEHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvHighSpeedSEHighThres1day.setDescription('Sync Header Errors Physical Coding Layer')
thresholdEthRxHighSpeedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 21), )
if mibBuilder.loadTexts: thresholdEthRxHighSpeedTable.setStatus('current')
if mibBuilder.loadTexts: thresholdEthRxHighSpeedTable.setDescription('')
thresholdEthRxHighSpeedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 21, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdEthRxHighSpeedEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdEthRxHighSpeedEntry.setDescription('')
thresholdEthRxHighSpeedPauseFramesHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthRxHighSpeedPauseFramesHighThres15Min.setStatus('current')
if mibBuilder.loadTexts: thresholdEthRxHighSpeedPauseFramesHighThres15Min.setDescription('Pause Frames Received High Threshold')
thresholdEthRxHighSpeedPauseFramesHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 21, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthRxHighSpeedPauseFramesHighThres1Day.setStatus('current')
if mibBuilder.loadTexts: thresholdEthRxHighSpeedPauseFramesHighThres1Day.setDescription('Pause Frames Received High Threshold')
thresholdEthRxHighSpeedCrcFramesHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 21, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthRxHighSpeedCrcFramesHighThres15Min.setStatus('current')
if mibBuilder.loadTexts: thresholdEthRxHighSpeedCrcFramesHighThres15Min.setDescription('Errored Frames (CRC Errors) Received 15 Min Threshold')
thresholdEthRxHighSpeedCrcFramesHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 21, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEthRxHighSpeedCrcFramesHighThres1Day.setStatus('current')
if mibBuilder.loadTexts: thresholdEthRxHighSpeedCrcFramesHighThres1Day.setDescription('Errored Frames (CRC Errors) Received 1 Day Threshold')
thresholdPhysPerfCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22), )
if mibBuilder.loadTexts: thresholdPhysPerfCapTable.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapTable.setDescription('')
thresholdPhysPerfCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdPhysPerfCapEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapEntry.setDescription('')
thresholdPhysPerfCapOpticalInputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 1), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapOpticalInputPwrLow.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapOpticalInputPwrLow.setDescription('This object contains capabilities for ThresholdPhysPerfOpticalInputPwrLow object.')
thresholdPhysPerfCapOpticalInputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 2), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapOpticalInputPwrHigh.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapOpticalInputPwrHigh.setDescription('This object contains capabilities for ThresholdPhysPerfOpticalInputPwrHigh object.')
thresholdPhysPerfCapAttRxLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 3), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapAttRxLow.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapAttRxLow.setDescription('This object contains capabilities for ThresholdPhysPerfAttRxLow object.')
thresholdPhysPerfCapAttRxHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 4), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapAttRxHigh.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapAttRxHigh.setDescription('This object contains capabilities for ThresholdPhysPerfAttRxHigh object.')
thresholdPhysPerfCapAttTxLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 5), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapAttTxLow.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapAttTxLow.setDescription('This object contains capabilities for ThresholdPhysPerfAttTxLow object.')
thresholdPhysPerfCapAttTxHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 6), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapAttTxHigh.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapAttTxHigh.setDescription('This object contains capabilities for ThresholdPhysPerfAttTxHigh object.')
thresholdPhysPerfCapOscPwrRcvHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 7), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapOscPwrRcvHighThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapOscPwrRcvHighThres.setDescription('This object contains capabilities for ThresholdPhysPerfOscPwrRcvHighThres object.')
thresholdPhysPerfCapOscPwrRcvLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 8), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapOscPwrRcvLowThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapOscPwrRcvLowThres.setDescription('This object contains capabilities for ThresholdPhysPerfOscPwrRcvLowThres object.')
thresholdPhysPerfCapConfigurableOpticalOutputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 9), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapConfigurableOpticalOutputPwrLow.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapConfigurableOpticalOutputPwrLow.setDescription('This object contains capabilities for ThresholdPhysPerfConfigurableOpticalOutputPwrLow object.')
thresholdPhysPerfCapConfigurableOpticalOutputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 10), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapConfigurableOpticalOutputPwrHigh.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapConfigurableOpticalOutputPwrHigh.setDescription('This object contains capabilities for ThresholdPhysPerfConfigurableOpticalOutputPwrHigh object.')
thresholdPhysPerfCapBrPwrReceivedHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 11), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapBrPwrReceivedHighThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapBrPwrReceivedHighThres.setDescription('This object contains capabilities for ThresholdPhysPerfBrPwrReceivedHighThres object.')
thresholdPhysPerfCapDispersionCompensationLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 12), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapDispersionCompensationLowThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapDispersionCompensationLowThres.setDescription('This object contains capabilities for ThresholdPhysPerfDispersionCompensationLowThres object.')
thresholdPhysPerfCapDispersionCompensationHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 13), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapDispersionCompensationHighThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapDispersionCompensationHighThres.setDescription('This object contains capabilities for ThresholdPhysPerfDispersionCompensationHighThres object.')
thresholdPhysPerfCapLowerAtlinkThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 14), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapLowerAtlinkThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapLowerAtlinkThres.setDescription('This object contains capabilities for ThresholdPhysPerfLowerAtlinkThres object.')
thresholdPhysPerfCapUpperAtlinkThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 15), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapUpperAtlinkThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapUpperAtlinkThres.setDescription('This object contains capabilities for ThresholdPhysPerfUpperAtlinkThres object.')
thresholdPhysPerfCapLatencyLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 16), FspR7Integer32Caps()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapLatencyLowThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapLatencyLowThres.setDescription('This object contains capabilities for ThresholdPhysPerfLatencyLowThres object.')
thresholdPhysPerfCapLatencyHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 17), FspR7Integer32Caps()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapLatencyHighThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapLatencyHighThres.setDescription('This object contains capabilities for ThresholdPhysPerfLatencyHighThres object.')
thresholdPhysPerfCapRoundTripDelayHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 18), FspR7Integer32Caps()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapRoundTripDelayHighThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapRoundTripDelayHighThres.setDescription('Configurable high threshold for round trip delay')
thresholdPhysPerfCapRoundTripDelayLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 19), FspR7Integer32Caps()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapRoundTripDelayLowThres.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapRoundTripDelayLowThres.setDescription('Configurable low threshold for round trip delay')
thresholdPhysPerfCapDifferentialGroupDelayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 20), FspR7Integer32Caps()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapDifferentialGroupDelayHigh.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapDifferentialGroupDelayHigh.setDescription('Differential Group Delay High TH')
thresholdPhysPerfCapChromaticDispersionLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 21), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapChromaticDispersionLow.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapChromaticDispersionLow.setDescription('Chromatic Dispersion Low TH')
thresholdPhysPerfCapChromaticDispersionHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 22), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapChromaticDispersionHigh.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapChromaticDispersionHigh.setDescription('Chromatic Dispersion High TH')
thresholdPhysPerfCapSignalToNoiseRatioLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 23), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapSignalToNoiseRatioLow.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapSignalToNoiseRatioLow.setDescription('Signal-to-Noise Ratio Low TH')
thresholdPhysPerfCapCarrierFreqOffsetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 24), FspR7Integer32Caps()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapCarrierFreqOffsetLow.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapCarrierFreqOffsetLow.setDescription('Carrier Frequency Offset Low TH')
thresholdPhysPerfCapCarrierFreqOffsetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 22, 1, 25), FspR7Integer32Caps()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdPhysPerfCapCarrierFreqOffsetHigh.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysPerfCapCarrierFreqOffsetHigh.setDescription('Carrier Frequency Offset High TH')
thresholdFarEndPhysPerfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 23), )
if mibBuilder.loadTexts: thresholdFarEndPhysPerfTable.setStatus('current')
if mibBuilder.loadTexts: thresholdFarEndPhysPerfTable.setDescription('')
thresholdFarEndPhysPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 23, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdFarEndPhysPerfEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdFarEndPhysPerfEntry.setDescription('')
thresholdFarEndPhysPerfOpticalInputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-450, 260), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdFarEndPhysPerfOpticalInputPwrLow.setStatus('current')
if mibBuilder.loadTexts: thresholdFarEndPhysPerfOpticalInputPwrLow.setDescription('Optical Input Power Received')
thresholdFarEndPhysPerfOpticalInputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-450, 260), ValueRangeConstraint(-2147483648, -2147483648), ))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdFarEndPhysPerfOpticalInputPwrHigh.setStatus('current')
if mibBuilder.loadTexts: thresholdFarEndPhysPerfOpticalInputPwrHigh.setDescription('Optical Input Power Received')
thresholdFarEndPhysPerfOpticalOutputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 23, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdFarEndPhysPerfOpticalOutputPwrLow.setStatus('current')
if mibBuilder.loadTexts: thresholdFarEndPhysPerfOpticalOutputPwrLow.setDescription('Low fixed threshold of the Optical Power Transmitted (output)')
thresholdFarEndPhysPerfOpticalOutputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 23, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdFarEndPhysPerfOpticalOutputPwrHigh.setStatus('current')
if mibBuilder.loadTexts: thresholdFarEndPhysPerfOpticalOutputPwrHigh.setDescription('High fixed threshold of the Optical Power Transmitted (output)')
thresholdFarEndPhysPerfCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 24), )
if mibBuilder.loadTexts: thresholdFarEndPhysPerfCapTable.setStatus('current')
if mibBuilder.loadTexts: thresholdFarEndPhysPerfCapTable.setDescription('')
thresholdFarEndPhysPerfCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 24, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdFarEndPhysPerfCapEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdFarEndPhysPerfCapEntry.setDescription('')
thresholdFarEndPhysPerfCapOpticalInputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 24, 1, 1), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdFarEndPhysPerfCapOpticalInputPwrLow.setStatus('current')
if mibBuilder.loadTexts: thresholdFarEndPhysPerfCapOpticalInputPwrLow.setDescription('This object contains capabilities for ThresholdPhysPerfOpticalInputPwrLow object.')
thresholdFarEndPhysPerfCapOpticalInputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 24, 1, 2), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdFarEndPhysPerfCapOpticalInputPwrHigh.setStatus('current')
if mibBuilder.loadTexts: thresholdFarEndPhysPerfCapOpticalInputPwrHigh.setDescription('This object contains capabilities for ThresholdPhysPerfOpticalInputPwrHigh object.')
thresholdPhysConvTxHighSpeedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 25), )
if mibBuilder.loadTexts: thresholdPhysConvTxHighSpeedTable.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvTxHighSpeedTable.setDescription('')
thresholdPhysConvTxHighSpeedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 25, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdPhysConvTxHighSpeedEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvTxHighSpeedEntry.setDescription('')
thresholdPhysConvTxHighSpeedESTXHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 25, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvTxHighSpeedESTXHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvTxHighSpeedESTXHighThres15min.setDescription('Tx Errored Seconds Physical Coding Layer')
thresholdPhysConvTxHighSpeedESTXHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 25, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 89400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvTxHighSpeedESTXHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvTxHighSpeedESTXHighThres1day.setDescription('Tx Errored Seconds Physical Coding Layer')
thresholdPhysConvTxHighSpeedCVTXHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 25, 1, 3), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvTxHighSpeedCVTXHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvTxHighSpeedCVTXHighThres15min.setDescription('Threshold 15 Min:Tx Coding Violations Physical Coding Layer')
thresholdPhysConvTxHighSpeedCVTXHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 25, 1, 4), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvTxHighSpeedCVTXHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvTxHighSpeedCVTXHighThres1day.setDescription('Threshold 1 Day: Tx Coding Violations - Physical Coding Layer')
thresholdPhysConvTxHighSpeedSETXHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 25, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvTxHighSpeedSETXHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvTxHighSpeedSETXHighThres15min.setDescription('Tx Sync Header Errors Physical Coding Layer')
thresholdPhysConvTxHighSpeedSETXHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 1, 25, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvTxHighSpeedSETXHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvTxHighSpeedSETXHighThres1day.setDescription('Tx Sync Header Errors Physical Coding Layer')
thresholdDefectSecondsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 14), )
if mibBuilder.loadTexts: thresholdDefectSecondsTable.setStatus('current')
if mibBuilder.loadTexts: thresholdDefectSecondsTable.setDescription('')
thresholdDefectSecondsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 14, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdDefectSecondsEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdDefectSecondsEntry.setDescription('')
thresholdDefectSecondsDefectSecondsHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdDefectSecondsDefectSecondsHighThres15Min.setStatus('current')
if mibBuilder.loadTexts: thresholdDefectSecondsDefectSecondsHighThres15Min.setDescription('Defect Seconds High Threshold 15 min')
thresholdDefectSecondsDefectSecondsHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 14, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdDefectSecondsDefectSecondsHighThres1Day.setStatus('current')
if mibBuilder.loadTexts: thresholdDefectSecondsDefectSecondsHighThres1Day.setDescription('Defect Seconds High Threshold 1 day')
currentOtu15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 1), )
if mibBuilder.loadTexts: currentOtu15minTable.setStatus('current')
if mibBuilder.loadTexts: currentOtu15minTable.setDescription('')
currentOtu15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOtu15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentOtu15minEntry.setDescription('')
currentOtu15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtu15minES.setStatus('current')
if mibBuilder.loadTexts: currentOtu15minES.setDescription('Errored Seconds OTU Section Monitoring')
currentOtu15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtu15minSES.setStatus('current')
if mibBuilder.loadTexts: currentOtu15minSES.setDescription('Severely Errored Seconds OTU Section Monitoring')
currentOtu15minBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 1, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtu15minBbe.setStatus('current')
if mibBuilder.loadTexts: currentOtu15minBbe.setDescription('Background Block Errors OTU Section Monitoring')
currentOtu15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtu15minUAS.setStatus('current')
if mibBuilder.loadTexts: currentOtu15minUAS.setDescription('Unavailable Seconds OTU Path Monitoring')
currentOtu15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtu15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentOtu15minElapsedTime.setDescription('Elapsed 15Min')
currentOtu1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 2), )
if mibBuilder.loadTexts: currentOtu1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentOtu1dayTable.setDescription('')
currentOtu1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 2, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOtu1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentOtu1dayEntry.setDescription('')
currentOtu1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtu1dayES.setStatus('current')
if mibBuilder.loadTexts: currentOtu1dayES.setDescription('Errored Seconds OTU Section Monitoring')
currentOtu1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtu1daySES.setStatus('current')
if mibBuilder.loadTexts: currentOtu1daySES.setDescription('Severely Errored Seconds OTU Section Monitoring')
currentOtu1dayBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 2, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtu1dayBbe.setStatus('current')
if mibBuilder.loadTexts: currentOtu1dayBbe.setDescription('Background Block Errors OTU Section Monitoring')
currentOtu1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtu1dayUAS.setStatus('current')
if mibBuilder.loadTexts: currentOtu1dayUAS.setDescription('Unavailable Seconds OTU Path Monitoring')
currentOtu1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtu1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentOtu1dayElapsedTime.setDescription('Elapsed 1Day')
intervalOtu15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 3), )
if mibBuilder.loadTexts: intervalOtu15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalOtu15minTable.setDescription('')
intervalOtu15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 3, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOtu15minNumber"))
if mibBuilder.loadTexts: intervalOtu15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalOtu15minEntry.setDescription('')
intervalOtu15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalOtu15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalOtu15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalOtu15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtu15minES.setStatus('current')
if mibBuilder.loadTexts: intervalOtu15minES.setDescription('Errored Seconds OTU Section Monitoring')
intervalOtu15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtu15minSES.setStatus('current')
if mibBuilder.loadTexts: intervalOtu15minSES.setDescription('Severely Errored Seconds OTU Section Monitoring')
intervalOtu15minBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 3, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtu15minBbe.setStatus('current')
if mibBuilder.loadTexts: intervalOtu15minBbe.setDescription('Background Block Errors OTU Section Monitoring')
intervalOtu15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtu15minUAS.setStatus('current')
if mibBuilder.loadTexts: intervalOtu15minUAS.setDescription('Unavailable Seconds OTU Path Monitoring')
intervalOtu15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 3, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtu15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalOtu15minValidFlag.setDescription('Valid Flag')
intervalOtu15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 3, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtu15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalOtu15minTimeStamp.setDescription('Timestamp')
intervalOtu1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 4), )
if mibBuilder.loadTexts: intervalOtu1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalOtu1dayTable.setDescription('')
intervalOtu1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 4, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOtu1dayNumber"))
if mibBuilder.loadTexts: intervalOtu1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalOtu1dayEntry.setDescription('')
intervalOtu1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalOtu1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalOtu1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalOtu1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtu1dayES.setStatus('current')
if mibBuilder.loadTexts: intervalOtu1dayES.setDescription('Errored Seconds OTU Section Monitoring')
intervalOtu1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtu1daySES.setStatus('current')
if mibBuilder.loadTexts: intervalOtu1daySES.setDescription('Severely Errored Seconds OTU Section Monitoring')
intervalOtu1dayBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 4, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtu1dayBbe.setStatus('current')
if mibBuilder.loadTexts: intervalOtu1dayBbe.setDescription('Background Block Errors OTU Section Monitoring')
intervalOtu1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtu1dayUAS.setStatus('current')
if mibBuilder.loadTexts: intervalOtu1dayUAS.setDescription('Unavailable Seconds OTU Path Monitoring')
intervalOtu1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 4, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtu1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalOtu1dayValidFlag.setDescription('Valid Flag')
intervalOtu1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 4, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtu1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalOtu1dayTimeStamp.setDescription('Timestamp')
currentOdu15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 5), )
if mibBuilder.loadTexts: currentOdu15minTable.setStatus('current')
if mibBuilder.loadTexts: currentOdu15minTable.setDescription('')
currentOdu15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 5, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOdu15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentOdu15minEntry.setDescription('')
currentOdu15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOdu15minES.setStatus('current')
if mibBuilder.loadTexts: currentOdu15minES.setDescription('Errored Seconds ODU Path Monitoring')
currentOdu15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOdu15minSES.setStatus('current')
if mibBuilder.loadTexts: currentOdu15minSES.setDescription('Severely Errored Seconds ODU Path Monitoring')
currentOdu15minBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 5, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOdu15minBbe.setStatus('current')
if mibBuilder.loadTexts: currentOdu15minBbe.setDescription('Background Block Erros ODU Path Monitoring')
currentOdu15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOdu15minUAS.setStatus('current')
if mibBuilder.loadTexts: currentOdu15minUAS.setDescription('Unavailable Seconds ODU Path Monitoring')
currentOdu15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOdu15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentOdu15minElapsedTime.setDescription('Elapsed 15Min')
currentOdu1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 6), )
if mibBuilder.loadTexts: currentOdu1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentOdu1dayTable.setDescription('')
currentOdu1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 6, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOdu1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentOdu1dayEntry.setDescription('')
currentOdu1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOdu1dayES.setStatus('current')
if mibBuilder.loadTexts: currentOdu1dayES.setDescription('Errored Seconds ODU Path Monitoring')
currentOdu1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOdu1daySES.setStatus('current')
if mibBuilder.loadTexts: currentOdu1daySES.setDescription('Severely Errored Seconds ODU Path Monitoring')
currentOdu1dayBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 6, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOdu1dayBbe.setStatus('current')
if mibBuilder.loadTexts: currentOdu1dayBbe.setDescription('Background Block Erros ODU Path Monitoring')
currentOdu1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOdu1dayUAS.setStatus('current')
if mibBuilder.loadTexts: currentOdu1dayUAS.setDescription('Unavailable Seconds ODU Path Monitoring')
currentOdu1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOdu1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentOdu1dayElapsedTime.setDescription('Elapsed 1Day')
intervalOdu15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 7), )
if mibBuilder.loadTexts: intervalOdu15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalOdu15minTable.setDescription('')
intervalOdu15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 7, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOdu15minNumber"))
if mibBuilder.loadTexts: intervalOdu15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalOdu15minEntry.setDescription('')
intervalOdu15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalOdu15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalOdu15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalOdu15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOdu15minES.setStatus('current')
if mibBuilder.loadTexts: intervalOdu15minES.setDescription('Errored Seconds ODU Path Monitoring')
intervalOdu15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOdu15minSES.setStatus('current')
if mibBuilder.loadTexts: intervalOdu15minSES.setDescription('Severely Errored Seconds ODU Path Monitoring')
intervalOdu15minBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 7, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOdu15minBbe.setStatus('current')
if mibBuilder.loadTexts: intervalOdu15minBbe.setDescription('Background Block Erros ODU Path Monitoring')
intervalOdu15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOdu15minUAS.setStatus('current')
if mibBuilder.loadTexts: intervalOdu15minUAS.setDescription('Unavailable Seconds ODU Path Monitoring')
intervalOdu15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 7, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOdu15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalOdu15minValidFlag.setDescription('Valid Flag')
intervalOdu15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 7, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOdu15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalOdu15minTimeStamp.setDescription('Timestamp')
intervalOdu1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 8), )
if mibBuilder.loadTexts: intervalOdu1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalOdu1dayTable.setDescription('')
intervalOdu1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 8, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOdu1dayNumber"))
if mibBuilder.loadTexts: intervalOdu1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalOdu1dayEntry.setDescription('')
intervalOdu1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalOdu1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalOdu1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalOdu1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOdu1dayES.setStatus('current')
if mibBuilder.loadTexts: intervalOdu1dayES.setDescription('Errored Seconds ODU Path Monitoring')
intervalOdu1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOdu1daySES.setStatus('current')
if mibBuilder.loadTexts: intervalOdu1daySES.setDescription('Severely Errored Seconds ODU Path Monitoring')
intervalOdu1dayBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 8, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOdu1dayBbe.setStatus('current')
if mibBuilder.loadTexts: intervalOdu1dayBbe.setDescription('Background Block Erros ODU Path Monitoring')
intervalOdu1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOdu1dayUAS.setStatus('current')
if mibBuilder.loadTexts: intervalOdu1dayUAS.setDescription('Unavailable Seconds ODU Path Monitoring')
intervalOdu1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 8, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOdu1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalOdu1dayValidFlag.setDescription('Valid Flag')
intervalOdu1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 8, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOdu1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalOdu1dayTimeStamp.setDescription('Timestamp')
currentOduTcmA15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 9), )
if mibBuilder.loadTexts: currentOduTcmA15minTable.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmA15minTable.setDescription('')
currentOduTcmA15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 9, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOduTcmA15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmA15minEntry.setDescription('')
currentOduTcmA15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmA15minES.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmA15minES.setDescription('Errored Seconds ODU Tandem Connection Monitoring - Instance A')
currentOduTcmA15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 9, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmA15minSES.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmA15minSES.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring - Instance A')
currentOduTcmA15minBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 9, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmA15minBbe.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmA15minBbe.setDescription('Background Block Erros ODU Tandem Connection Monitoring Instance A')
currentOduTcmA15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 9, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmA15minUAS.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmA15minUAS.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring - Instance A')
currentOduTcmA15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmA15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmA15minElapsedTime.setDescription('Elapsed 15Min')
currentOduTcmA1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 10), )
if mibBuilder.loadTexts: currentOduTcmA1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmA1dayTable.setDescription('')
currentOduTcmA1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 10, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOduTcmA1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmA1dayEntry.setDescription('')
currentOduTcmA1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 10, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmA1dayES.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmA1dayES.setDescription('Errored Seconds ODU Tandem Connection Monitoring - Instance A')
currentOduTcmA1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 10, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmA1daySES.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmA1daySES.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring - Instance A')
currentOduTcmA1dayBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 10, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmA1dayBbe.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmA1dayBbe.setDescription('Background Block Erros ODU Tandem Connection Monitoring Instance A')
currentOduTcmA1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 10, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmA1dayUAS.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmA1dayUAS.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring - Instance A')
currentOduTcmA1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmA1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmA1dayElapsedTime.setDescription('Elapsed 1Day')
intervalOduTcmA15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 11), )
if mibBuilder.loadTexts: intervalOduTcmA15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmA15minTable.setDescription('')
intervalOduTcmA15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 11, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOduTcmA15minNumber"))
if mibBuilder.loadTexts: intervalOduTcmA15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmA15minEntry.setDescription('')
intervalOduTcmA15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalOduTcmA15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmA15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalOduTcmA15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 11, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmA15minES.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmA15minES.setDescription('Errored Seconds ODU Tandem Connection Monitoring - Instance A')
intervalOduTcmA15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 11, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmA15minSES.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmA15minSES.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring - Instance A')
intervalOduTcmA15minBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 11, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmA15minBbe.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmA15minBbe.setDescription('Background Block Erros ODU Tandem Connection Monitoring Instance A')
intervalOduTcmA15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 11, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmA15minUAS.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmA15minUAS.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring - Instance A')
intervalOduTcmA15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 11, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmA15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmA15minValidFlag.setDescription('Valid Flag')
intervalOduTcmA15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 11, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmA15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmA15minTimeStamp.setDescription('Timestamp')
intervalOduTcmA1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 12), )
if mibBuilder.loadTexts: intervalOduTcmA1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmA1dayTable.setDescription('')
intervalOduTcmA1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 12, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOduTcmA1dayNumber"))
if mibBuilder.loadTexts: intervalOduTcmA1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmA1dayEntry.setDescription('')
intervalOduTcmA1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalOduTcmA1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmA1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalOduTcmA1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 12, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmA1dayES.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmA1dayES.setDescription('Errored Seconds ODU Tandem Connection Monitoring - Instance A')
intervalOduTcmA1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 12, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmA1daySES.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmA1daySES.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring - Instance A')
intervalOduTcmA1dayBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 12, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmA1dayBbe.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmA1dayBbe.setDescription('Background Block Erros ODU Tandem Connection Monitoring Instance A')
intervalOduTcmA1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 12, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmA1dayUAS.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmA1dayUAS.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring - Instance A')
intervalOduTcmA1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 12, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmA1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmA1dayValidFlag.setDescription('Valid Flag')
intervalOduTcmA1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 12, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmA1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmA1dayTimeStamp.setDescription('Timestamp')
currentOduTcmB15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 13), )
if mibBuilder.loadTexts: currentOduTcmB15minTable.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmB15minTable.setDescription('')
currentOduTcmB15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 13, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOduTcmB15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmB15minEntry.setDescription('')
currentOduTcmB15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 13, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmB15minES.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmB15minES.setDescription('Errored Seconds ODU Tandem Connection Monitoring - Instance B')
currentOduTcmB15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 13, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmB15minSES.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmB15minSES.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring - Instance B')
currentOduTcmB15minBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 13, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmB15minBbe.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmB15minBbe.setDescription('Background Block Erros ODU Tandem Connection Monitoring - Instance B')
currentOduTcmB15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 13, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmB15minUAS.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmB15minUAS.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring - Instance B')
currentOduTcmB15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmB15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmB15minElapsedTime.setDescription('Elapsed 15Min')
currentOduTcmB1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 14), )
if mibBuilder.loadTexts: currentOduTcmB1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmB1dayTable.setDescription('')
currentOduTcmB1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 14, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOduTcmB1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmB1dayEntry.setDescription('')
currentOduTcmB1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 14, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmB1dayES.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmB1dayES.setDescription('Errored Seconds ODU Tandem Connection Monitoring - Instance B')
currentOduTcmB1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 14, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmB1daySES.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmB1daySES.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring - Instance B')
currentOduTcmB1dayBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 14, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmB1dayBbe.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmB1dayBbe.setDescription('Background Block Erros ODU Tandem Connection Monitoring - Instance B')
currentOduTcmB1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 14, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmB1dayUAS.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmB1dayUAS.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring - Instance B')
currentOduTcmB1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmB1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmB1dayElapsedTime.setDescription('Elapsed 1Day')
intervalOduTcmB15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 15), )
if mibBuilder.loadTexts: intervalOduTcmB15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmB15minTable.setDescription('')
intervalOduTcmB15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 15, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOduTcmB15minNumber"))
if mibBuilder.loadTexts: intervalOduTcmB15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmB15minEntry.setDescription('')
intervalOduTcmB15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalOduTcmB15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmB15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalOduTcmB15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 15, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmB15minES.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmB15minES.setDescription('Errored Seconds ODU Tandem Connection Monitoring - Instance B')
intervalOduTcmB15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 15, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmB15minSES.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmB15minSES.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring - Instance B')
intervalOduTcmB15minBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 15, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmB15minBbe.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmB15minBbe.setDescription('Background Block Erros ODU Tandem Connection Monitoring - Instance B')
intervalOduTcmB15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 15, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmB15minUAS.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmB15minUAS.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring - Instance B')
intervalOduTcmB15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 15, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmB15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmB15minValidFlag.setDescription('Valid Flag')
intervalOduTcmB15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 15, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmB15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmB15minTimeStamp.setDescription('Timestamp')
intervalOduTcmB1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 16), )
if mibBuilder.loadTexts: intervalOduTcmB1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmB1dayTable.setDescription('')
intervalOduTcmB1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 16, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOduTcmB1dayNumber"))
if mibBuilder.loadTexts: intervalOduTcmB1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmB1dayEntry.setDescription('')
intervalOduTcmB1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalOduTcmB1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmB1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalOduTcmB1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 16, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmB1dayES.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmB1dayES.setDescription('Errored Seconds ODU Tandem Connection Monitoring - Instance B')
intervalOduTcmB1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 16, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmB1daySES.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmB1daySES.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring - Instance B')
intervalOduTcmB1dayBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 16, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmB1dayBbe.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmB1dayBbe.setDescription('Background Block Erros ODU Tandem Connection Monitoring - Instance B')
intervalOduTcmB1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 16, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmB1dayUAS.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmB1dayUAS.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring - Instance B')
intervalOduTcmB1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 16, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmB1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmB1dayValidFlag.setDescription('Valid Flag')
intervalOduTcmB1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 16, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmB1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmB1dayTimeStamp.setDescription('Timestamp')
currentSonetSect15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 17), )
if mibBuilder.loadTexts: currentSonetSect15minTable.setStatus('current')
if mibBuilder.loadTexts: currentSonetSect15minTable.setDescription('')
currentSonetSect15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 17, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentSonetSect15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentSonetSect15minEntry.setDescription('')
currentSonetSect15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 17, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetSect15minES.setStatus('current')
if mibBuilder.loadTexts: currentSonetSect15minES.setDescription('Errored Seconds Section')
currentSonetSect15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 17, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetSect15minSES.setStatus('current')
if mibBuilder.loadTexts: currentSonetSect15minSES.setDescription('Severely Errored Seconds Section')
currentSonetSect15minSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 17, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetSect15minSEFS.setStatus('current')
if mibBuilder.loadTexts: currentSonetSect15minSEFS.setDescription('Severly Errored Framing Seconds Section')
currentSonetSect15minCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 17, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetSect15minCV.setStatus('current')
if mibBuilder.loadTexts: currentSonetSect15minCV.setDescription('Coding Violations Section')
currentSonetSect15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetSect15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentSonetSect15minElapsedTime.setDescription('Elapsed 15Min')
currentSonetSect1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 18), )
if mibBuilder.loadTexts: currentSonetSect1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentSonetSect1dayTable.setDescription('')
currentSonetSect1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 18, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentSonetSect1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentSonetSect1dayEntry.setDescription('')
currentSonetSect1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 18, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetSect1dayES.setStatus('current')
if mibBuilder.loadTexts: currentSonetSect1dayES.setDescription('Errored Seconds Section')
currentSonetSect1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 18, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetSect1daySES.setStatus('current')
if mibBuilder.loadTexts: currentSonetSect1daySES.setDescription('Severely Errored Seconds Section')
currentSonetSect1daySEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 18, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetSect1daySEFS.setStatus('current')
if mibBuilder.loadTexts: currentSonetSect1daySEFS.setDescription('Severly Errored Framing Seconds Section')
currentSonetSect1dayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 18, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetSect1dayCV.setStatus('current')
if mibBuilder.loadTexts: currentSonetSect1dayCV.setDescription('Coding Violations Section')
currentSonetSect1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetSect1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentSonetSect1dayElapsedTime.setDescription('Elapsed 1Day')
intervalSonetSect15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 19), )
if mibBuilder.loadTexts: intervalSonetSect15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalSonetSect15minTable.setDescription('')
intervalSonetSect15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 19, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalSonetSect15minNumber"))
if mibBuilder.loadTexts: intervalSonetSect15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalSonetSect15minEntry.setDescription('')
intervalSonetSect15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalSonetSect15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalSonetSect15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalSonetSect15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 19, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetSect15minES.setStatus('current')
if mibBuilder.loadTexts: intervalSonetSect15minES.setDescription('Errored Seconds Section')
intervalSonetSect15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 19, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetSect15minSES.setStatus('current')
if mibBuilder.loadTexts: intervalSonetSect15minSES.setDescription('Severely Errored Seconds Section')
intervalSonetSect15minSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 19, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetSect15minSEFS.setStatus('current')
if mibBuilder.loadTexts: intervalSonetSect15minSEFS.setDescription('Severly Errored Framing Seconds Section')
intervalSonetSect15minCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 19, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetSect15minCV.setStatus('current')
if mibBuilder.loadTexts: intervalSonetSect15minCV.setDescription('Coding Violations Section')
intervalSonetSect15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 19, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetSect15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalSonetSect15minValidFlag.setDescription('Valid Flag')
intervalSonetSect15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 19, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetSect15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalSonetSect15minTimeStamp.setDescription('Timestamp')
intervalSonetSect1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 20), )
if mibBuilder.loadTexts: intervalSonetSect1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalSonetSect1dayTable.setDescription('')
intervalSonetSect1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 20, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalSonetSect1dayNumber"))
if mibBuilder.loadTexts: intervalSonetSect1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalSonetSect1dayEntry.setDescription('')
intervalSonetSect1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalSonetSect1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalSonetSect1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalSonetSect1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 20, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetSect1dayES.setStatus('current')
if mibBuilder.loadTexts: intervalSonetSect1dayES.setDescription('Errored Seconds Section')
intervalSonetSect1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 20, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetSect1daySES.setStatus('current')
if mibBuilder.loadTexts: intervalSonetSect1daySES.setDescription('Severely Errored Seconds Section')
intervalSonetSect1daySEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 20, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetSect1daySEFS.setStatus('current')
if mibBuilder.loadTexts: intervalSonetSect1daySEFS.setDescription('Severly Errored Framing Seconds Section')
intervalSonetSect1dayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 20, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetSect1dayCV.setStatus('current')
if mibBuilder.loadTexts: intervalSonetSect1dayCV.setDescription('Coding Violations Section')
intervalSonetSect1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 20, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetSect1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalSonetSect1dayValidFlag.setDescription('Valid Flag')
intervalSonetSect1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 20, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetSect1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalSonetSect1dayTimeStamp.setDescription('Timestamp')
currentSonetLine15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 21), )
if mibBuilder.loadTexts: currentSonetLine15minTable.setStatus('current')
if mibBuilder.loadTexts: currentSonetLine15minTable.setDescription('')
currentSonetLine15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 21, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentSonetLine15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentSonetLine15minEntry.setDescription('')
currentSonetLine15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 21, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLine15minES.setStatus('current')
if mibBuilder.loadTexts: currentSonetLine15minES.setDescription('Errored Seconds Line')
currentSonetLine15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 21, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLine15minSES.setStatus('current')
if mibBuilder.loadTexts: currentSonetLine15minSES.setDescription('Severely Errored Seconds Line')
currentSonetLine15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 21, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLine15minUAS.setStatus('current')
if mibBuilder.loadTexts: currentSonetLine15minUAS.setDescription('Unavailable Seconds Line')
currentSonetLine15minCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 21, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLine15minCV.setStatus('current')
if mibBuilder.loadTexts: currentSonetLine15minCV.setDescription('Coding Violations Line')
currentSonetLine15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLine15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentSonetLine15minElapsedTime.setDescription('Elapsed 15Min')
currentSonetLine1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 22), )
if mibBuilder.loadTexts: currentSonetLine1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentSonetLine1dayTable.setDescription('')
currentSonetLine1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 22, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentSonetLine1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentSonetLine1dayEntry.setDescription('')
currentSonetLine1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 22, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLine1dayES.setStatus('current')
if mibBuilder.loadTexts: currentSonetLine1dayES.setDescription('Errored Seconds Line')
currentSonetLine1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 22, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLine1daySES.setStatus('current')
if mibBuilder.loadTexts: currentSonetLine1daySES.setDescription('Severely Errored Seconds Line')
currentSonetLine1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 22, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLine1dayUAS.setStatus('current')
if mibBuilder.loadTexts: currentSonetLine1dayUAS.setDescription('Unavailable Seconds Line')
currentSonetLine1dayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 22, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLine1dayCV.setStatus('current')
if mibBuilder.loadTexts: currentSonetLine1dayCV.setDescription('Coding Violations Line')
currentSonetLine1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 22, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLine1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentSonetLine1dayElapsedTime.setDescription('Elapsed 1Day')
intervalSonetLine15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 23), )
if mibBuilder.loadTexts: intervalSonetLine15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLine15minTable.setDescription('')
intervalSonetLine15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 23, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalSonetLine15minNumber"))
if mibBuilder.loadTexts: intervalSonetLine15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLine15minEntry.setDescription('')
intervalSonetLine15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalSonetLine15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLine15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalSonetLine15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 23, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLine15minES.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLine15minES.setDescription('Errored Seconds Line')
intervalSonetLine15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 23, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLine15minSES.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLine15minSES.setDescription('Severely Errored Seconds Line')
intervalSonetLine15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 23, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLine15minUAS.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLine15minUAS.setDescription('Unavailable Seconds Line')
intervalSonetLine15minCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 23, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLine15minCV.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLine15minCV.setDescription('Coding Violations Line')
intervalSonetLine15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 23, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLine15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLine15minValidFlag.setDescription('Valid Flag')
intervalSonetLine15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 23, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLine15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLine15minTimeStamp.setDescription('Timestamp')
intervalSonetLine1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 24), )
if mibBuilder.loadTexts: intervalSonetLine1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLine1dayTable.setDescription('')
intervalSonetLine1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 24, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalSonetLine1dayNumber"))
if mibBuilder.loadTexts: intervalSonetLine1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLine1dayEntry.setDescription('')
intervalSonetLine1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalSonetLine1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLine1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalSonetLine1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 24, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLine1dayES.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLine1dayES.setDescription('Errored Seconds Line')
intervalSonetLine1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 24, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLine1daySES.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLine1daySES.setDescription('Severely Errored Seconds Line')
intervalSonetLine1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 24, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLine1dayUAS.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLine1dayUAS.setDescription('Unavailable Seconds Line')
intervalSonetLine1dayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 24, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLine1dayCV.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLine1dayCV.setDescription('Coding Violations Line')
intervalSonetLine1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 24, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLine1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLine1dayValidFlag.setDescription('Valid Flag')
intervalSonetLine1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 24, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLine1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLine1dayTimeStamp.setDescription('Timestamp')
currentSonetHoPath15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 25), )
if mibBuilder.loadTexts: currentSonetHoPath15minTable.setStatus('current')
if mibBuilder.loadTexts: currentSonetHoPath15minTable.setDescription('')
currentSonetHoPath15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 25, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentSonetHoPath15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentSonetHoPath15minEntry.setDescription('')
currentSonetHoPath15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 25, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetHoPath15minES.setStatus('current')
if mibBuilder.loadTexts: currentSonetHoPath15minES.setDescription('Errored Seconds Path')
currentSonetHoPath15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 25, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetHoPath15minSES.setStatus('current')
if mibBuilder.loadTexts: currentSonetHoPath15minSES.setDescription('Severely Errored Seconds Path')
currentSonetHoPath15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 25, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetHoPath15minUAS.setStatus('current')
if mibBuilder.loadTexts: currentSonetHoPath15minUAS.setDescription('Unavailable Seconds Path')
currentSonetHoPath15minCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 25, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetHoPath15minCV.setStatus('current')
if mibBuilder.loadTexts: currentSonetHoPath15minCV.setDescription('Coding Violations Path')
currentSonetHoPath15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 25, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetHoPath15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentSonetHoPath15minElapsedTime.setDescription('Elapsed 15Min')
currentSonetHoPath1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 26), )
if mibBuilder.loadTexts: currentSonetHoPath1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentSonetHoPath1dayTable.setDescription('')
currentSonetHoPath1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 26, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentSonetHoPath1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentSonetHoPath1dayEntry.setDescription('')
currentSonetHoPath1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 26, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetHoPath1dayES.setStatus('current')
if mibBuilder.loadTexts: currentSonetHoPath1dayES.setDescription('Errored Seconds Path')
currentSonetHoPath1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 26, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetHoPath1daySES.setStatus('current')
if mibBuilder.loadTexts: currentSonetHoPath1daySES.setDescription('Severely Errored Seconds Path')
currentSonetHoPath1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 26, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetHoPath1dayUAS.setStatus('current')
if mibBuilder.loadTexts: currentSonetHoPath1dayUAS.setDescription('Unavailable Seconds Path')
currentSonetHoPath1dayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 26, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetHoPath1dayCV.setStatus('current')
if mibBuilder.loadTexts: currentSonetHoPath1dayCV.setDescription('Coding Violations Path')
currentSonetHoPath1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 26, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetHoPath1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentSonetHoPath1dayElapsedTime.setDescription('Elapsed 1Day')
intervalSonetHoPath15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 27), )
if mibBuilder.loadTexts: intervalSonetHoPath15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalSonetHoPath15minTable.setDescription('')
intervalSonetHoPath15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 27, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalSonetHoPath15minNumber"))
if mibBuilder.loadTexts: intervalSonetHoPath15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalSonetHoPath15minEntry.setDescription('')
intervalSonetHoPath15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalSonetHoPath15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalSonetHoPath15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalSonetHoPath15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 27, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetHoPath15minES.setStatus('current')
if mibBuilder.loadTexts: intervalSonetHoPath15minES.setDescription('Errored Seconds Path')
intervalSonetHoPath15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 27, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetHoPath15minSES.setStatus('current')
if mibBuilder.loadTexts: intervalSonetHoPath15minSES.setDescription('Severely Errored Seconds Path')
intervalSonetHoPath15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 27, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetHoPath15minUAS.setStatus('current')
if mibBuilder.loadTexts: intervalSonetHoPath15minUAS.setDescription('Unavailable Seconds Path')
intervalSonetHoPath15minCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 27, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetHoPath15minCV.setStatus('current')
if mibBuilder.loadTexts: intervalSonetHoPath15minCV.setDescription('Coding Violations Path')
intervalSonetHoPath15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 27, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetHoPath15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalSonetHoPath15minValidFlag.setDescription('Valid Flag')
intervalSonetHoPath15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 27, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetHoPath15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalSonetHoPath15minTimeStamp.setDescription('Timestamp')
intervalSonetHoPath1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 28), )
if mibBuilder.loadTexts: intervalSonetHoPath1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalSonetHoPath1dayTable.setDescription('')
intervalSonetHoPath1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 28, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalSonetHoPath1dayNumber"))
if mibBuilder.loadTexts: intervalSonetHoPath1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalSonetHoPath1dayEntry.setDescription('')
intervalSonetHoPath1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalSonetHoPath1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalSonetHoPath1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalSonetHoPath1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 28, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetHoPath1dayES.setStatus('current')
if mibBuilder.loadTexts: intervalSonetHoPath1dayES.setDescription('Errored Seconds Path')
intervalSonetHoPath1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 28, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetHoPath1daySES.setStatus('current')
if mibBuilder.loadTexts: intervalSonetHoPath1daySES.setDescription('Severely Errored Seconds Path')
intervalSonetHoPath1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 28, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetHoPath1dayUAS.setStatus('current')
if mibBuilder.loadTexts: intervalSonetHoPath1dayUAS.setDescription('Unavailable Seconds Path')
intervalSonetHoPath1dayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 28, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetHoPath1dayCV.setStatus('current')
if mibBuilder.loadTexts: intervalSonetHoPath1dayCV.setDescription('Coding Violations Path')
intervalSonetHoPath1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 28, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetHoPath1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalSonetHoPath1dayValidFlag.setDescription('Valid Flag')
intervalSonetHoPath1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 28, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetHoPath1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalSonetHoPath1dayTimeStamp.setDescription('Timestamp')
currentSonetLoPath15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 29), )
if mibBuilder.loadTexts: currentSonetLoPath15minTable.setStatus('current')
if mibBuilder.loadTexts: currentSonetLoPath15minTable.setDescription('')
currentSonetLoPath15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 29, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentSonetLoPath15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentSonetLoPath15minEntry.setDescription('')
currentSonetLoPath15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 29, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLoPath15minES.setStatus('current')
if mibBuilder.loadTexts: currentSonetLoPath15minES.setDescription('Errored Seconds Lower Order Path')
currentSonetLoPath15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 29, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLoPath15minSES.setStatus('current')
if mibBuilder.loadTexts: currentSonetLoPath15minSES.setDescription('Severely Errored Seconds LO-Path')
currentSonetLoPath15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 29, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLoPath15minUAS.setStatus('current')
if mibBuilder.loadTexts: currentSonetLoPath15minUAS.setDescription('Unavailable Seconds LO-Path')
currentSonetLoPath15minCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 29, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLoPath15minCV.setStatus('current')
if mibBuilder.loadTexts: currentSonetLoPath15minCV.setDescription('Coding Violations Lower Order Path')
currentSonetLoPath15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 29, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLoPath15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentSonetLoPath15minElapsedTime.setDescription('Elapsed 15Min')
currentSonetLoPath1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 30), )
if mibBuilder.loadTexts: currentSonetLoPath1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentSonetLoPath1dayTable.setDescription('')
currentSonetLoPath1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 30, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentSonetLoPath1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentSonetLoPath1dayEntry.setDescription('')
currentSonetLoPath1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 30, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLoPath1dayES.setStatus('current')
if mibBuilder.loadTexts: currentSonetLoPath1dayES.setDescription('Errored Seconds Lower Order Path')
currentSonetLoPath1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 30, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLoPath1daySES.setStatus('current')
if mibBuilder.loadTexts: currentSonetLoPath1daySES.setDescription('Severely Errored Seconds LO-Path')
currentSonetLoPath1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 30, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLoPath1dayUAS.setStatus('current')
if mibBuilder.loadTexts: currentSonetLoPath1dayUAS.setDescription('Unavailable Seconds LO-Path')
currentSonetLoPath1dayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 30, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLoPath1dayCV.setStatus('current')
if mibBuilder.loadTexts: currentSonetLoPath1dayCV.setDescription('Coding Violations Lower Order Path')
currentSonetLoPath1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 30, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSonetLoPath1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentSonetLoPath1dayElapsedTime.setDescription('Elapsed 1Day')
intervalSonetLoPath15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 31), )
if mibBuilder.loadTexts: intervalSonetLoPath15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLoPath15minTable.setDescription('')
intervalSonetLoPath15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 31, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalSonetLoPath15minNumber"))
if mibBuilder.loadTexts: intervalSonetLoPath15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLoPath15minEntry.setDescription('')
intervalSonetLoPath15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalSonetLoPath15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLoPath15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalSonetLoPath15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 31, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLoPath15minES.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLoPath15minES.setDescription('Errored Seconds Lower Order Path')
intervalSonetLoPath15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 31, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLoPath15minSES.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLoPath15minSES.setDescription('Severely Errored Seconds LO-Path')
intervalSonetLoPath15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 31, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLoPath15minUAS.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLoPath15minUAS.setDescription('Unavailable Seconds LO-Path')
intervalSonetLoPath15minCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 31, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLoPath15minCV.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLoPath15minCV.setDescription('Coding Violations Lower Order Path')
intervalSonetLoPath15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 31, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLoPath15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLoPath15minValidFlag.setDescription('Valid Flag')
intervalSonetLoPath15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 31, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLoPath15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLoPath15minTimeStamp.setDescription('Timestamp')
intervalSonetLoPath1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 32), )
if mibBuilder.loadTexts: intervalSonetLoPath1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLoPath1dayTable.setDescription('')
intervalSonetLoPath1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 32, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalSonetLoPath1dayNumber"))
if mibBuilder.loadTexts: intervalSonetLoPath1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLoPath1dayEntry.setDescription('')
intervalSonetLoPath1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalSonetLoPath1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLoPath1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalSonetLoPath1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 32, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLoPath1dayES.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLoPath1dayES.setDescription('Errored Seconds Lower Order Path')
intervalSonetLoPath1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 32, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLoPath1daySES.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLoPath1daySES.setDescription('Severely Errored Seconds LO-Path')
intervalSonetLoPath1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 32, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLoPath1dayUAS.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLoPath1dayUAS.setDescription('Unavailable Seconds LO-Path')
intervalSonetLoPath1dayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 32, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLoPath1dayCV.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLoPath1dayCV.setDescription('Coding Violations Lower Order Path')
intervalSonetLoPath1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 32, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLoPath1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLoPath1dayValidFlag.setDescription('Valid Flag')
intervalSonetLoPath1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 32, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSonetLoPath1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalSonetLoPath1dayTimeStamp.setDescription('Timestamp')
intervalPhysPerfOpticalInputPwr15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 33), )
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr15minTable.setDescription('')
intervalPhysPerfOpticalInputPwr15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 33, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOpticalInputPwr15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr15minEntry.setDescription('')
intervalPhysPerfOpticalInputPwr15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalPhysPerfOpticalInputPwr15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 33, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr15minLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr15minLow.setDescription('Optical Input Power Received')
intervalPhysPerfOpticalInputPwr15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 33, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr15minMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr15minMean.setDescription('Optical Input Power Received')
intervalPhysPerfOpticalInputPwr15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 33, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr15minHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr15minHigh.setDescription('Optical Input Power Received')
intervalPhysPerfOpticalInputPwr15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 33, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr15minValidFlag.setDescription('Valid Flag')
intervalPhysPerfOpticalInputPwr15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 33, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr15minTimeStamp.setDescription('Timestamp')
intervalPhysPerfOpticalInputPwr1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 34), )
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1dayTable.setDescription('')
intervalPhysPerfOpticalInputPwr1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 34, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOpticalInputPwr1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1dayEntry.setDescription('')
intervalPhysPerfOpticalInputPwr1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalPhysPerfOpticalInputPwr1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 34, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1dayLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1dayLow.setDescription('Optical Input Power Received')
intervalPhysPerfOpticalInputPwr1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 34, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1dayMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1dayMean.setDescription('Optical Input Power Received')
intervalPhysPerfOpticalInputPwr1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 34, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1dayHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1dayHigh.setDescription('Optical Input Power Received')
intervalPhysPerfOpticalInputPwr1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 34, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1dayValidFlag.setDescription('Valid Flag')
intervalPhysPerfOpticalInputPwr1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 34, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1dayTimeStamp.setDescription('Timestamp')
intervalPhysPerfOpticalInputPwr1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 35), )
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1weekTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1weekTable.setDescription('')
intervalPhysPerfOpticalInputPwr1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 35, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOpticalInputPwr1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1weekEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1weekEntry.setDescription('')
intervalPhysPerfOpticalInputPwr1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 35, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1weekNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1weekNumber.setDescription('Number 1week')
intervalPhysPerfOpticalInputPwr1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 35, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1weekLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1weekLow.setDescription('Optical Input Power Received')
intervalPhysPerfOpticalInputPwr1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 35, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1weekMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1weekMean.setDescription('Optical Input Power Received')
intervalPhysPerfOpticalInputPwr1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 35, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1weekHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1weekHigh.setDescription('Optical Input Power Received')
intervalPhysPerfOpticalInputPwr1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 35, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1weekValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1weekValidFlag.setDescription('Valid Flag')
intervalPhysPerfOpticalInputPwr1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 35, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1weekTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalInputPwr1weekTimeStamp.setDescription('Timestamp')
intervalPhysPerfOpticalOutputPwr15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 36), )
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr15minTable.setDescription('')
intervalPhysPerfOpticalOutputPwr15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 36, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOpticalOutputPwr15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr15minEntry.setDescription('')
intervalPhysPerfOpticalOutputPwr15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 36, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalPhysPerfOpticalOutputPwr15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 36, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr15minLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr15minLow.setDescription('Optical Output Power Transmitted')
intervalPhysPerfOpticalOutputPwr15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 36, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr15minMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr15minMean.setDescription('Optical Output Power Transmitted')
intervalPhysPerfOpticalOutputPwr15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 36, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr15minHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr15minHigh.setDescription('Optical Output Power Transmitted')
intervalPhysPerfOpticalOutputPwr15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 36, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr15minValidFlag.setDescription('Valid Flag')
intervalPhysPerfOpticalOutputPwr15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 36, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr15minTimeStamp.setDescription('Timestamp')
intervalPhysPerfOpticalOutputPwr1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 37), )
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1dayTable.setDescription('')
intervalPhysPerfOpticalOutputPwr1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 37, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOpticalOutputPwr1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1dayEntry.setDescription('')
intervalPhysPerfOpticalOutputPwr1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalPhysPerfOpticalOutputPwr1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 37, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1dayLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1dayLow.setDescription('Optical Output Power Transmitted')
intervalPhysPerfOpticalOutputPwr1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 37, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1dayMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1dayMean.setDescription('Optical Output Power Transmitted')
intervalPhysPerfOpticalOutputPwr1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 37, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1dayHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1dayHigh.setDescription('Optical Output Power Transmitted')
intervalPhysPerfOpticalOutputPwr1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 37, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1dayValidFlag.setDescription('Valid Flag')
intervalPhysPerfOpticalOutputPwr1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 37, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1dayTimeStamp.setDescription('Timestamp')
intervalPhysPerfOpticalOutputPwr1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 38), )
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1weekTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1weekTable.setDescription('')
intervalPhysPerfOpticalOutputPwr1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 38, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOpticalOutputPwr1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1weekEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1weekEntry.setDescription('')
intervalPhysPerfOpticalOutputPwr1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 38, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1weekNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1weekNumber.setDescription('Number 1week')
intervalPhysPerfOpticalOutputPwr1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 38, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1weekLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1weekLow.setDescription('Optical Output Power Transmitted')
intervalPhysPerfOpticalOutputPwr1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 38, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1weekMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1weekMean.setDescription('Optical Output Power Transmitted')
intervalPhysPerfOpticalOutputPwr1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 38, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1weekHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1weekHigh.setDescription('Optical Output Power Transmitted')
intervalPhysPerfOpticalOutputPwr1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 38, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1weekValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1weekValidFlag.setDescription('Valid Flag')
intervalPhysPerfOpticalOutputPwr1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 38, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1weekTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOpticalOutputPwr1weekTimeStamp.setDescription('Timestamp')
intervalPhysPerfLaserBiasCurrentNormalized15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 39), )
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized15minTable.setDescription('')
intervalPhysPerfLaserBiasCurrentNormalized15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 39, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfLaserBiasCurrentNormalized15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized15minEntry.setDescription('')
intervalPhysPerfLaserBiasCurrentNormalized15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 39, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalPhysPerfLaserBiasCurrentNormalized15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 39, 1, 2), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized15minLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized15minLow.setDescription('Laser Bias Current Normalized')
intervalPhysPerfLaserBiasCurrentNormalized15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 39, 1, 3), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized15minMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized15minMean.setDescription('Laser Bias Current Normalized')
intervalPhysPerfLaserBiasCurrentNormalized15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 39, 1, 4), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized15minHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized15minHigh.setDescription('Laser Bias Current Normalized')
intervalPhysPerfLaserBiasCurrentNormalized15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 39, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized15minValidFlag.setDescription('Valid Flag')
intervalPhysPerfLaserBiasCurrentNormalized15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 39, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized15minTimeStamp.setDescription('Timestamp')
intervalPhysPerfLaserBiasCurrentNormalized1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 40), )
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1dayTable.setDescription('')
intervalPhysPerfLaserBiasCurrentNormalized1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 40, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfLaserBiasCurrentNormalized1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1dayEntry.setDescription('')
intervalPhysPerfLaserBiasCurrentNormalized1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 40, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalPhysPerfLaserBiasCurrentNormalized1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 40, 1, 2), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1dayLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1dayLow.setDescription('Laser Bias Current Normalized')
intervalPhysPerfLaserBiasCurrentNormalized1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 40, 1, 3), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1dayMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1dayMean.setDescription('Laser Bias Current Normalized')
intervalPhysPerfLaserBiasCurrentNormalized1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 40, 1, 4), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1dayHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1dayHigh.setDescription('Laser Bias Current Normalized')
intervalPhysPerfLaserBiasCurrentNormalized1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 40, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1dayValidFlag.setDescription('Valid Flag')
intervalPhysPerfLaserBiasCurrentNormalized1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 40, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1dayTimeStamp.setDescription('Timestamp')
intervalPhysPerfLaserBiasCurrentNormalized1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 41), )
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1weekTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1weekTable.setDescription('')
intervalPhysPerfLaserBiasCurrentNormalized1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 41, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfLaserBiasCurrentNormalized1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1weekEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1weekEntry.setDescription('')
intervalPhysPerfLaserBiasCurrentNormalized1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 41, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1weekNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1weekNumber.setDescription('Number 1week')
intervalPhysPerfLaserBiasCurrentNormalized1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 41, 1, 2), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1weekLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1weekLow.setDescription('Laser Bias Current Normalized')
intervalPhysPerfLaserBiasCurrentNormalized1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 41, 1, 3), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1weekMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1weekMean.setDescription('Laser Bias Current Normalized')
intervalPhysPerfLaserBiasCurrentNormalized1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 41, 1, 4), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1weekHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1weekHigh.setDescription('Laser Bias Current Normalized')
intervalPhysPerfLaserBiasCurrentNormalized1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 41, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1weekValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1weekValidFlag.setDescription('Valid Flag')
intervalPhysPerfLaserBiasCurrentNormalized1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 41, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1weekTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfLaserBiasCurrentNormalized1weekTimeStamp.setDescription('Timestamp')
intervalPhysPerfOlmRxLineAtt15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 42), )
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt15minTable.setDescription('')
intervalPhysPerfOlmRxLineAtt15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 42, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOlmRxLineAtt15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt15minEntry.setDescription('')
intervalPhysPerfOlmRxLineAtt15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 42, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalPhysPerfOlmRxLineAtt15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 42, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt15minLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt15minLow.setDescription('Low Attenuation on Receive Fiber')
intervalPhysPerfOlmRxLineAtt15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 42, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt15minMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt15minMean.setDescription('Mean Attenuation on Receive Fiber')
intervalPhysPerfOlmRxLineAtt15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 42, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt15minHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt15minHigh.setDescription('High Attenuation on Receive Fiber')
intervalPhysPerfOlmRxLineAtt15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 42, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt15minValidFlag.setDescription('Valid Flag')
intervalPhysPerfOlmRxLineAtt15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 42, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt15minTimeStamp.setDescription('Timestamp')
intervalPhysPerfOlmRxLineAtt1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 43), )
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1dayTable.setDescription('')
intervalPhysPerfOlmRxLineAtt1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 43, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOlmRxLineAtt1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1dayEntry.setDescription('')
intervalPhysPerfOlmRxLineAtt1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 43, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalPhysPerfOlmRxLineAtt1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 43, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1dayLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1dayLow.setDescription('Low Attenuation on Receive Fiber')
intervalPhysPerfOlmRxLineAtt1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 43, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1dayMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1dayMean.setDescription('Mean Attenuation on Receive Fiber')
intervalPhysPerfOlmRxLineAtt1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 43, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1dayHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1dayHigh.setDescription('High Attenuation on Receive Fiber')
intervalPhysPerfOlmRxLineAtt1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 43, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1dayValidFlag.setDescription('Valid Flag')
intervalPhysPerfOlmRxLineAtt1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 43, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1dayTimeStamp.setDescription('Timestamp')
intervalPhysPerfOlmRxLineAtt1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 44), )
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1weekTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1weekTable.setDescription('')
intervalPhysPerfOlmRxLineAtt1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 44, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOlmRxLineAtt1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1weekEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1weekEntry.setDescription('')
intervalPhysPerfOlmRxLineAtt1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 44, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1weekNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1weekNumber.setDescription('Number 1week')
intervalPhysPerfOlmRxLineAtt1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 44, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1weekLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1weekLow.setDescription('Low Attenuation on Receive Fiber')
intervalPhysPerfOlmRxLineAtt1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 44, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1weekMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1weekMean.setDescription('Mean Attenuation on Receive Fiber')
intervalPhysPerfOlmRxLineAtt1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 44, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1weekHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1weekHigh.setDescription('High Attenuation on Receive Fiber')
intervalPhysPerfOlmRxLineAtt1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 44, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1weekValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1weekValidFlag.setDescription('Valid Flag')
intervalPhysPerfOlmRxLineAtt1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 44, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1weekTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmRxLineAtt1weekTimeStamp.setDescription('Timestamp')
intervalPhysPerfOlmTxLineAtt15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 45), )
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt15minTable.setDescription('')
intervalPhysPerfOlmTxLineAtt15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 45, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOlmTxLineAtt15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt15minEntry.setDescription('')
intervalPhysPerfOlmTxLineAtt15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 45, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalPhysPerfOlmTxLineAtt15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 45, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt15minLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt15minLow.setDescription('Low Attenuation on Transmit Fiber')
intervalPhysPerfOlmTxLineAtt15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 45, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt15minHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt15minHigh.setDescription('Mean Attenuation on Transmit Fiber')
intervalPhysPerfOlmTxLineAtt15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 45, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt15minMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt15minMean.setDescription('High Attenuation on Transmit Fiber')
intervalPhysPerfOlmTxLineAtt15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 45, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt15minValidFlag.setDescription('Valid Flag')
intervalPhysPerfOlmTxLineAtt15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 45, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt15minTimeStamp.setDescription('Timestamp')
intervalPhysPerfOlmTxLineAtt1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 46), )
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1dayTable.setDescription('')
intervalPhysPerfOlmTxLineAtt1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 46, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOlmTxLineAtt1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1dayEntry.setDescription('')
intervalPhysPerfOlmTxLineAtt1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 46, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalPhysPerfOlmTxLineAtt1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 46, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1dayLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1dayLow.setDescription('Low Attenuation on Transmit Fiber')
intervalPhysPerfOlmTxLineAtt1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 46, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1dayHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1dayHigh.setDescription('Mean Attenuation on Transmit Fiber')
intervalPhysPerfOlmTxLineAtt1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 46, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1dayMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1dayMean.setDescription('High Attenuation on Transmit Fiber')
intervalPhysPerfOlmTxLineAtt1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 46, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1dayValidFlag.setDescription('Valid Flag')
intervalPhysPerfOlmTxLineAtt1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 46, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1dayTimeStamp.setDescription('Timestamp')
intervalPhysPerfOlmTxLineAtt1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 47), )
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1weekTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1weekTable.setDescription('')
intervalPhysPerfOlmTxLineAtt1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 47, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOlmTxLineAtt1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1weekEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1weekEntry.setDescription('')
intervalPhysPerfOlmTxLineAtt1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 47, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1weekNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1weekNumber.setDescription('Number 1week')
intervalPhysPerfOlmTxLineAtt1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 47, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1weekLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1weekLow.setDescription('Low Attenuation on Transmit Fiber')
intervalPhysPerfOlmTxLineAtt1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 47, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1weekHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1weekHigh.setDescription('Mean Attenuation on Transmit Fiber')
intervalPhysPerfOlmTxLineAtt1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 47, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1weekMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1weekMean.setDescription('High Attenuation on Transmit Fiber')
intervalPhysPerfOlmTxLineAtt1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 47, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1weekValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1weekValidFlag.setDescription('Valid Flag')
intervalPhysPerfOlmTxLineAtt1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 47, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1weekTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOlmTxLineAtt1weekTimeStamp.setDescription('Timestamp')
currentPhysConv15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 48), )
if mibBuilder.loadTexts: currentPhysConv15minTable.setStatus('current')
if mibBuilder.loadTexts: currentPhysConv15minTable.setDescription('')
currentPhysConv15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 48, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentPhysConv15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentPhysConv15minEntry.setDescription('')
currentPhysConv15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 48, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConv15minES.setStatus('current')
if mibBuilder.loadTexts: currentPhysConv15minES.setDescription('Errored Seconds Physical Coding Layer')
currentPhysConv15minDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 48, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConv15minDE.setStatus('current')
if mibBuilder.loadTexts: currentPhysConv15minDE.setDescription('Disparity Errors Physical Coding Layer')
currentPhysConv15minCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 48, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConv15minCV.setStatus('current')
if mibBuilder.loadTexts: currentPhysConv15minCV.setDescription('Coding Violations Physical Coding Layer')
currentPhysConv15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 48, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConv15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentPhysConv15minElapsedTime.setDescription('Elapsed 15Min')
currentPhysConv1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 49), )
if mibBuilder.loadTexts: currentPhysConv1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentPhysConv1dayTable.setDescription('')
currentPhysConv1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 49, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentPhysConv1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentPhysConv1dayEntry.setDescription('')
currentPhysConv1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 49, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConv1dayES.setStatus('current')
if mibBuilder.loadTexts: currentPhysConv1dayES.setDescription('Errored Seconds Physical Coding Layer')
currentPhysConv1dayDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 49, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConv1dayDE.setStatus('current')
if mibBuilder.loadTexts: currentPhysConv1dayDE.setDescription('Disparity Errors Physical Coding Layer')
currentPhysConv1dayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 49, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConv1dayCV.setStatus('current')
if mibBuilder.loadTexts: currentPhysConv1dayCV.setDescription('Coding Violations Physical Coding Layer')
currentPhysConv1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 49, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConv1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentPhysConv1dayElapsedTime.setDescription('Elapsed 1Day')
intervalPhysConv15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 50), )
if mibBuilder.loadTexts: intervalPhysConv15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConv15minTable.setDescription('')
intervalPhysConv15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 50, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysConv15minNumber"))
if mibBuilder.loadTexts: intervalPhysConv15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConv15minEntry.setDescription('')
intervalPhysConv15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 50, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysConv15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConv15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalPhysConv15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 50, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConv15minES.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConv15minES.setDescription('Errored Seconds Physical Coding Layer')
intervalPhysConv15minDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 50, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConv15minDE.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConv15minDE.setDescription('Disparity Errors Physical Coding Layer')
intervalPhysConv15minCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 50, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConv15minCV.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConv15minCV.setDescription('Coding Violations Physical Coding Layer')
intervalPhysConv15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 50, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConv15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConv15minValidFlag.setDescription('Valid Flag')
intervalPhysConv15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 50, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConv15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConv15minTimeStamp.setDescription('Timestamp')
intervalPhysConv1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 51), )
if mibBuilder.loadTexts: intervalPhysConv1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConv1dayTable.setDescription('')
intervalPhysConv1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 51, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysConv1dayNumber"))
if mibBuilder.loadTexts: intervalPhysConv1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConv1dayEntry.setDescription('')
intervalPhysConv1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 51, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysConv1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConv1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalPhysConv1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 51, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConv1dayES.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConv1dayES.setDescription('Errored Seconds Physical Coding Layer')
intervalPhysConv1dayDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 51, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConv1dayDE.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConv1dayDE.setDescription('Disparity Errors Physical Coding Layer')
intervalPhysConv1dayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 51, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConv1dayCV.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConv1dayCV.setDescription('Coding Violations Physical Coding Layer')
intervalPhysConv1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 51, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConv1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConv1dayValidFlag.setDescription('Valid Flag')
intervalPhysConv1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 51, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConv1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConv1dayTimeStamp.setDescription('Timestamp')
currentEthRx15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 52), )
if mibBuilder.loadTexts: currentEthRx15minTable.setStatus('current')
if mibBuilder.loadTexts: currentEthRx15minTable.setDescription('')
currentEthRx15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 52, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentEthRx15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentEthRx15minEntry.setDescription('')
currentEthRx15minGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 52, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx15minGoodFrames.setStatus('current')
if mibBuilder.loadTexts: currentEthRx15minGoodFrames.setDescription('Frames Received')
currentEthRx15minPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 52, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx15minPauseFrames.setStatus('current')
if mibBuilder.loadTexts: currentEthRx15minPauseFrames.setDescription('PAUSE Frames Received')
currentEthRx15minCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 52, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx15minCrcFrames.setStatus('current')
if mibBuilder.loadTexts: currentEthRx15minCrcFrames.setDescription('Received CRC Errors')
currentEthRx15minDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 52, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx15minDiscardedFrames.setStatus('current')
if mibBuilder.loadTexts: currentEthRx15minDiscardedFrames.setDescription('Received Frames Discarded')
currentEthRx15minBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 52, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx15minBytes.setStatus('current')
if mibBuilder.loadTexts: currentEthRx15minBytes.setDescription('Bytes Received')
currentEthRx15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 52, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentEthRx15minElapsedTime.setDescription('Elapsed 15Min')
currentEthRx1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 53), )
if mibBuilder.loadTexts: currentEthRx1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentEthRx1dayTable.setDescription('')
currentEthRx1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 53, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentEthRx1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentEthRx1dayEntry.setDescription('')
currentEthRx1dayGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 53, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx1dayGoodFrames.setStatus('current')
if mibBuilder.loadTexts: currentEthRx1dayGoodFrames.setDescription('Frames Received')
currentEthRx1dayPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 53, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx1dayPauseFrames.setStatus('current')
if mibBuilder.loadTexts: currentEthRx1dayPauseFrames.setDescription('PAUSE Frames Received')
currentEthRx1dayCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 53, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx1dayCrcFrames.setStatus('current')
if mibBuilder.loadTexts: currentEthRx1dayCrcFrames.setDescription('Received CRC Errors')
currentEthRx1dayDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 53, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx1dayDiscardedFrames.setStatus('current')
if mibBuilder.loadTexts: currentEthRx1dayDiscardedFrames.setDescription('Received Frames Discarded')
currentEthRx1dayBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 53, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx1dayBytes.setStatus('current')
if mibBuilder.loadTexts: currentEthRx1dayBytes.setDescription('Bytes Received')
currentEthRx1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 53, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentEthRx1dayElapsedTime.setDescription('Elapsed 1Day')
intervalEthRx15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 54), )
if mibBuilder.loadTexts: intervalEthRx15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx15minTable.setDescription('')
intervalEthRx15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 54, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalEthRx15minNumber"))
if mibBuilder.loadTexts: intervalEthRx15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx15minEntry.setDescription('')
intervalEthRx15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 54, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalEthRx15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalEthRx15minGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 54, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx15minGoodFrames.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx15minGoodFrames.setDescription('Frames Received')
intervalEthRx15minPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 54, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx15minPauseFrames.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx15minPauseFrames.setDescription('PAUSE Frames Received')
intervalEthRx15minCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 54, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx15minCrcFrames.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx15minCrcFrames.setDescription('Received CRC Errors')
intervalEthRx15minDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 54, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx15minDiscardedFrames.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx15minDiscardedFrames.setDescription('Received Frames Discarded')
intervalEthRx15minBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 54, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx15minBytes.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx15minBytes.setDescription('Bytes Received')
intervalEthRx15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 54, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx15minValidFlag.setDescription('Valid Flag')
intervalEthRx15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 54, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx15minTimeStamp.setDescription('Timestamp')
intervalEthRx1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 55), )
if mibBuilder.loadTexts: intervalEthRx1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx1dayTable.setDescription('')
intervalEthRx1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 55, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalEthRx1dayNumber"))
if mibBuilder.loadTexts: intervalEthRx1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx1dayEntry.setDescription('')
intervalEthRx1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 55, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalEthRx1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalEthRx1dayGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 55, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx1dayGoodFrames.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx1dayGoodFrames.setDescription('Frames Received')
intervalEthRx1dayPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 55, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx1dayPauseFrames.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx1dayPauseFrames.setDescription('PAUSE Frames Received')
intervalEthRx1dayCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 55, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx1dayCrcFrames.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx1dayCrcFrames.setDescription('Received CRC Errors')
intervalEthRx1dayDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 55, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx1dayDiscardedFrames.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx1dayDiscardedFrames.setDescription('Received Frames Discarded')
intervalEthRx1dayBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 55, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx1dayBytes.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx1dayBytes.setDescription('Bytes Received')
intervalEthRx1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 55, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx1dayValidFlag.setDescription('Valid Flag')
intervalEthRx1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 55, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx1dayTimeStamp.setDescription('Timestamp')
currentEthTx15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 56), )
if mibBuilder.loadTexts: currentEthTx15minTable.setStatus('current')
if mibBuilder.loadTexts: currentEthTx15minTable.setDescription('')
currentEthTx15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 56, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentEthTx15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentEthTx15minEntry.setDescription('')
currentEthTx15minGoodFramesx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 56, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthTx15minGoodFramesx.setStatus('current')
if mibBuilder.loadTexts: currentEthTx15minGoodFramesx.setDescription('Frames Transmitted')
currentEthTx15minPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 56, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthTx15minPauseFrames.setStatus('current')
if mibBuilder.loadTexts: currentEthTx15minPauseFrames.setDescription('PAUSE Frames Transmitted')
currentEthTx15minBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 56, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthTx15minBytes.setStatus('current')
if mibBuilder.loadTexts: currentEthTx15minBytes.setDescription('Transmitted Bytes')
currentEthTx15minCrcFramesEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 56, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthTx15minCrcFramesEgress.setStatus('current')
if mibBuilder.loadTexts: currentEthTx15minCrcFramesEgress.setDescription('Errored Frames (CRC Erors) Received egress from Mapper')
currentEthTx15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 56, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthTx15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentEthTx15minElapsedTime.setDescription('Elapsed 15Min')
currentEthTx1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 57), )
if mibBuilder.loadTexts: currentEthTx1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentEthTx1dayTable.setDescription('')
currentEthTx1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 57, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentEthTx1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentEthTx1dayEntry.setDescription('')
currentEthTx1dayGoodFramesx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 57, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthTx1dayGoodFramesx.setStatus('current')
if mibBuilder.loadTexts: currentEthTx1dayGoodFramesx.setDescription('Frames Transmitted')
currentEthTx1dayPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 57, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthTx1dayPauseFrames.setStatus('current')
if mibBuilder.loadTexts: currentEthTx1dayPauseFrames.setDescription('PAUSE Frames Transmitted')
currentEthTx1dayBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 57, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthTx1dayBytes.setStatus('current')
if mibBuilder.loadTexts: currentEthTx1dayBytes.setDescription('Transmitted Bytes')
currentEthTx1dayCrcFramesEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 57, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthTx1dayCrcFramesEgress.setStatus('current')
if mibBuilder.loadTexts: currentEthTx1dayCrcFramesEgress.setDescription('Errored Frames (CRC Erors) Received egress from Mapper')
currentEthTx1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 57, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthTx1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentEthTx1dayElapsedTime.setDescription('Elapsed 1Day')
intervalEthTx15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 58), )
if mibBuilder.loadTexts: intervalEthTx15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalEthTx15minTable.setDescription('')
intervalEthTx15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 58, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalEthTx15minNumber"))
if mibBuilder.loadTexts: intervalEthTx15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalEthTx15minEntry.setDescription('')
intervalEthTx15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 58, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalEthTx15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalEthTx15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalEthTx15minGoodFramesx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 58, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthTx15minGoodFramesx.setStatus('current')
if mibBuilder.loadTexts: intervalEthTx15minGoodFramesx.setDescription('Frames Transmitted')
intervalEthTx15minPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 58, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthTx15minPauseFrames.setStatus('current')
if mibBuilder.loadTexts: intervalEthTx15minPauseFrames.setDescription('PAUSE Frames Transmitted')
intervalEthTx15minBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 58, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthTx15minBytes.setStatus('current')
if mibBuilder.loadTexts: intervalEthTx15minBytes.setDescription('Transmitted Bytes')
intervalEthTx15minCrcFramesEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 58, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthTx15minCrcFramesEgress.setStatus('current')
if mibBuilder.loadTexts: intervalEthTx15minCrcFramesEgress.setDescription('Errored Frames (CRC Erors) Received egress from Mapper')
intervalEthTx15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 58, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthTx15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalEthTx15minValidFlag.setDescription('Valid Flag')
intervalEthTx15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 58, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthTx15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalEthTx15minTimeStamp.setDescription('Timestamp')
intervalEthTx1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 59), )
if mibBuilder.loadTexts: intervalEthTx1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalEthTx1dayTable.setDescription('')
intervalEthTx1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 59, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalEthTx1dayNumber"))
if mibBuilder.loadTexts: intervalEthTx1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalEthTx1dayEntry.setDescription('')
intervalEthTx1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 59, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalEthTx1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalEthTx1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalEthTx1dayGoodFramesx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 59, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthTx1dayGoodFramesx.setStatus('current')
if mibBuilder.loadTexts: intervalEthTx1dayGoodFramesx.setDescription('Frames Transmitted')
intervalEthTx1dayPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 59, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthTx1dayPauseFrames.setStatus('current')
if mibBuilder.loadTexts: intervalEthTx1dayPauseFrames.setDescription('PAUSE Frames Transmitted')
intervalEthTx1dayBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 59, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthTx1dayBytes.setStatus('current')
if mibBuilder.loadTexts: intervalEthTx1dayBytes.setDescription('Transmitted Bytes')
intervalEthTx1dayCrcFramesEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 59, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthTx1dayCrcFramesEgress.setStatus('current')
if mibBuilder.loadTexts: intervalEthTx1dayCrcFramesEgress.setDescription('Errored Frames (CRC Erors) Received egress from Mapper')
intervalEthTx1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 59, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthTx1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalEthTx1dayValidFlag.setDescription('Valid Flag')
intervalEthTx1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 59, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthTx1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalEthTx1dayTimeStamp.setDescription('Timestamp')
currentGfp15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 60), )
if mibBuilder.loadTexts: currentGfp15minTable.setStatus('deprecated')
if mibBuilder.loadTexts: currentGfp15minTable.setDescription('')
currentGfp15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 60, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentGfp15minEntry.setStatus('deprecated')
if mibBuilder.loadTexts: currentGfp15minEntry.setDescription('')
currentGfp15minCoreHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 60, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfp15minCoreHecCorrectedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: currentGfp15minCoreHecCorrectedFrames.setDescription('Core HEC Corrected Frames')
currentGfp15minTypeHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 60, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfp15minTypeHecCorrectedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: currentGfp15minTypeHecCorrectedFrames.setDescription('Type Field HEC Corrected Frames')
currentGfp15minTypeHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 60, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfp15minTypeHecDiscardedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: currentGfp15minTypeHecDiscardedFrames.setDescription('Type Field HEC Discarded Frames')
currentGfp15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 60, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfp15minElapsedTime.setStatus('deprecated')
if mibBuilder.loadTexts: currentGfp15minElapsedTime.setDescription('Elapsed 15Min')
currentGfp1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 61), )
if mibBuilder.loadTexts: currentGfp1dayTable.setStatus('deprecated')
if mibBuilder.loadTexts: currentGfp1dayTable.setDescription('')
currentGfp1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 61, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentGfp1dayEntry.setStatus('deprecated')
if mibBuilder.loadTexts: currentGfp1dayEntry.setDescription('')
currentGfp1dayCoreHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 61, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfp1dayCoreHecCorrectedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: currentGfp1dayCoreHecCorrectedFrames.setDescription('Core HEC Corrected Frames')
currentGfp1dayTypeHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 61, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfp1dayTypeHecCorrectedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: currentGfp1dayTypeHecCorrectedFrames.setDescription('Type Field HEC Corrected Frames')
currentGfp1dayTypeHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 61, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfp1dayTypeHecDiscardedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: currentGfp1dayTypeHecDiscardedFrames.setDescription('Type Field HEC Discarded Frames')
currentGfp1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 61, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfp1dayElapsedTime.setStatus('deprecated')
if mibBuilder.loadTexts: currentGfp1dayElapsedTime.setDescription('Elapsed 1Day')
intervalGfp15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 62), )
if mibBuilder.loadTexts: intervalGfp15minTable.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfp15minTable.setDescription('')
intervalGfp15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 62, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalGfp15minNumber"))
if mibBuilder.loadTexts: intervalGfp15minEntry.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfp15minEntry.setDescription('')
intervalGfp15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 62, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalGfp15minNumber.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfp15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalGfp15minCoreHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 62, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfp15minCoreHecCorrectedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfp15minCoreHecCorrectedFrames.setDescription('Core HEC Corrected Frames')
intervalGfp15minTypeHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 62, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfp15minTypeHecCorrectedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfp15minTypeHecCorrectedFrames.setDescription('Type Field HEC Corrected Frames')
intervalGfp15minTypeHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 62, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfp15minTypeHecDiscardedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfp15minTypeHecDiscardedFrames.setDescription('Type Field HEC Discarded Frames')
intervalGfp15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 62, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfp15minValidFlag.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfp15minValidFlag.setDescription('Valid Flag')
intervalGfp15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 62, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfp15minTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfp15minTimeStamp.setDescription('Timestamp')
intervalGfp1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 63), )
if mibBuilder.loadTexts: intervalGfp1dayTable.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfp1dayTable.setDescription('')
intervalGfp1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 63, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalGfp1dayNumber"))
if mibBuilder.loadTexts: intervalGfp1dayEntry.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfp1dayEntry.setDescription('')
intervalGfp1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 63, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalGfp1dayNumber.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfp1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalGfp1dayCoreHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 63, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfp1dayCoreHecCorrectedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfp1dayCoreHecCorrectedFrames.setDescription('Core HEC Corrected Frames')
intervalGfp1dayTypeHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 63, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfp1dayTypeHecCorrectedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfp1dayTypeHecCorrectedFrames.setDescription('Type Field HEC Corrected Frames')
intervalGfp1dayTypeHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 63, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfp1dayTypeHecDiscardedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfp1dayTypeHecDiscardedFrames.setDescription('Type Field HEC Discarded Frames')
intervalGfp1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 63, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfp1dayValidFlag.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfp1dayValidFlag.setDescription('Valid Flag')
intervalGfp1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 63, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfp1dayTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfp1dayTimeStamp.setDescription('Timestamp')
currentOtuFec15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 68), )
if mibBuilder.loadTexts: currentOtuFec15minTable.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec15minTable.setDescription('')
currentOtuFec15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 68, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOtuFec15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec15minEntry.setDescription('')
currentOtuFec15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 68, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec15minES.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec15minES.setDescription('Errored Seconds FEC OTU Monitoring')
currentOtuFec15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 68, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec15minSES.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec15minSES.setDescription('Severely Errored Seconds FEC Monitoring')
currentOtuFec15minCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 68, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec15minCE.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec15minCE.setDescription('Corrected Errors OTU FEC Monitoring [count of corrected anomalies]')
currentOtuFec15minUBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 68, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec15minUBE.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec15minUBE.setDescription('Uncorrected Block Errors - OTU FEC Monitoring')
currentOtuFec15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 68, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec15minElapsedTime.setDescription('Elapsed 15Min')
currentOtuFec15minBERCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 68, 1, 6), Counter64String()).setUnits('1.0E-18').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec15minBERCE.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec15minBERCE.setDescription('Bit error rate before FEC calculated from corrected errors')
currentOtuFec1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 69), )
if mibBuilder.loadTexts: currentOtuFec1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec1dayTable.setDescription('')
currentOtuFec1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 69, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOtuFec1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec1dayEntry.setDescription('')
currentOtuFec1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 69, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec1dayES.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec1dayES.setDescription('Errored Seconds FEC OTU Monitoring')
currentOtuFec1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 69, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec1daySES.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec1daySES.setDescription('Severely Errored Seconds FEC Monitoring')
currentOtuFec1dayCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 69, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec1dayCE.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec1dayCE.setDescription('Corrected Errors OTU FEC Monitoring [count of corrected anomalies]')
currentOtuFec1dayUBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 69, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec1dayUBE.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec1dayUBE.setDescription('Uncorrected Block Errors - OTU FEC Monitoring')
currentOtuFec1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 69, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec1dayElapsedTime.setDescription('Elapsed 1Day')
currentOtuFec1dayBERCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 69, 1, 6), Counter64String()).setUnits('1.0E-18').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec1dayBERCE.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec1dayBERCE.setDescription('Bit error rate before FEC calculated from corrected errors')
intervalOtuFec15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 70), )
if mibBuilder.loadTexts: intervalOtuFec15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec15minTable.setDescription('')
intervalOtuFec15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 70, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOtuFec15minNumber"))
if mibBuilder.loadTexts: intervalOtuFec15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec15minEntry.setDescription('')
intervalOtuFec15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 70, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalOtuFec15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalOtuFec15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 70, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec15minES.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec15minES.setDescription('Errored Seconds FEC OTU Monitoring')
intervalOtuFec15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 70, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec15minSES.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec15minSES.setDescription('Severely Errored Seconds FEC Monitoring')
intervalOtuFec15minCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 70, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec15minCE.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec15minCE.setDescription('Corrected Errors OTU FEC Monitoring [count of corrected anomalies]')
intervalOtuFec15minUBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 70, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec15minUBE.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec15minUBE.setDescription('Uncorrected Block Errors - OTU FEC Monitoring')
intervalOtuFec15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 70, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec15minValidFlag.setDescription('Valid Flag')
intervalOtuFec15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 70, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec15minTimeStamp.setDescription('Timestamp')
intervalOtuFec15minBERCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 70, 1, 8), Counter64String()).setUnits('1.0E-18').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec15minBERCE.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec15minBERCE.setDescription('Bit error rate before FEC calculated from corrected errors')
intervalOtuFec1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 71), )
if mibBuilder.loadTexts: intervalOtuFec1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec1dayTable.setDescription('')
intervalOtuFec1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 71, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOtuFec1dayNumber"))
if mibBuilder.loadTexts: intervalOtuFec1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec1dayEntry.setDescription('')
intervalOtuFec1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 71, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalOtuFec1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalOtuFec1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 71, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec1dayES.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec1dayES.setDescription('Errored Seconds FEC OTU Monitoring')
intervalOtuFec1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 71, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec1daySES.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec1daySES.setDescription('Severely Errored Seconds FEC Monitoring')
intervalOtuFec1dayCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 71, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec1dayCE.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec1dayCE.setDescription('Corrected Errors OTU FEC Monitoring [count of corrected anomalies]')
intervalOtuFec1dayUBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 71, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec1dayUBE.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec1dayUBE.setDescription('Uncorrected Block Errors - OTU FEC Monitoring')
intervalOtuFec1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 71, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec1dayValidFlag.setDescription('Valid Flag')
intervalOtuFec1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 71, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec1dayTimeStamp.setDescription('Timestamp')
intervalOtuFec1dayBERCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 71, 1, 8), Counter64String()).setUnits('1.0E-18').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec1dayBERCE.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec1dayBERCE.setDescription('Bit error rate before FEC calculated from corrected errors')
currentGfpt15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 72), )
if mibBuilder.loadTexts: currentGfpt15minTable.setStatus('current')
if mibBuilder.loadTexts: currentGfpt15minTable.setDescription('')
currentGfpt15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 72, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentGfpt15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentGfpt15minEntry.setDescription('')
currentGfpt15minDiscardedSuperblocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 72, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpt15minDiscardedSuperblocks.setStatus('current')
if mibBuilder.loadTexts: currentGfpt15minDiscardedSuperblocks.setDescription('Discarded Super-Blocks')
currentGfpt15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 72, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpt15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentGfpt15minElapsedTime.setDescription('Elapsed 15Min')
currentGfpt1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 73), )
if mibBuilder.loadTexts: currentGfpt1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentGfpt1dayTable.setDescription('')
currentGfpt1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 73, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentGfpt1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentGfpt1dayEntry.setDescription('')
currentGfpt1dayDiscardedSuperblocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 73, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpt1dayDiscardedSuperblocks.setStatus('current')
if mibBuilder.loadTexts: currentGfpt1dayDiscardedSuperblocks.setDescription('Discarded Super-Blocks')
currentGfpt1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 73, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpt1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentGfpt1dayElapsedTime.setDescription('Elapsed 1Day')
intervalGfpt15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 74), )
if mibBuilder.loadTexts: intervalGfpt15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalGfpt15minTable.setDescription('')
intervalGfpt15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 74, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalGfpt15minNumber"))
if mibBuilder.loadTexts: intervalGfpt15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalGfpt15minEntry.setDescription('')
intervalGfpt15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 74, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalGfpt15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalGfpt15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalGfpt15minDiscardedSuperblocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 74, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpt15minDiscardedSuperblocks.setStatus('current')
if mibBuilder.loadTexts: intervalGfpt15minDiscardedSuperblocks.setDescription('Discarded Super-Blocks')
intervalGfpt15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 74, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpt15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalGfpt15minValidFlag.setDescription('Valid Flag')
intervalGfpt15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 74, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpt15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalGfpt15minTimeStamp.setDescription('Timestamp')
intervalGfpt1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 75), )
if mibBuilder.loadTexts: intervalGfpt1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalGfpt1dayTable.setDescription('')
intervalGfpt1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 75, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalGfpt1dayNumber"))
if mibBuilder.loadTexts: intervalGfpt1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalGfpt1dayEntry.setDescription('')
intervalGfpt1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 75, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalGfpt1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalGfpt1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalGfpt1dayDiscardedSuperblocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 75, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpt1dayDiscardedSuperblocks.setStatus('current')
if mibBuilder.loadTexts: intervalGfpt1dayDiscardedSuperblocks.setDescription('Discarded Super-Blocks')
intervalGfpt1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 75, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpt1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalGfpt1dayValidFlag.setDescription('Valid Flag')
intervalGfpt1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 75, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpt1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalGfpt1dayTimeStamp.setDescription('Timestamp')
currentSubAggregate15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 76), )
if mibBuilder.loadTexts: currentSubAggregate15minTable.setStatus('current')
if mibBuilder.loadTexts: currentSubAggregate15minTable.setDescription('')
currentSubAggregate15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 76, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentSubAggregate15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentSubAggregate15minEntry.setDescription('')
currentSubAggregate15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 76, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSubAggregate15minES.setStatus('current')
if mibBuilder.loadTexts: currentSubAggregate15minES.setDescription('Multiplexer Errored Seconds')
currentSubAggregate15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 76, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSubAggregate15minSES.setStatus('current')
if mibBuilder.loadTexts: currentSubAggregate15minSES.setDescription('Multiplexer Severely Errored Seconds')
currentSubAggregate15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 76, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSubAggregate15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentSubAggregate15minElapsedTime.setDescription('Elapsed 15Min')
currentSubAggregate15minCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 76, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSubAggregate15minCrc.setStatus('current')
if mibBuilder.loadTexts: currentSubAggregate15minCrc.setDescription('Multiplexer Cyclic Redundancy Check')
currentSubAggregate1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 77), )
if mibBuilder.loadTexts: currentSubAggregate1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentSubAggregate1dayTable.setDescription('')
currentSubAggregate1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 77, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentSubAggregate1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentSubAggregate1dayEntry.setDescription('')
currentSubAggregate1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 77, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSubAggregate1dayES.setStatus('current')
if mibBuilder.loadTexts: currentSubAggregate1dayES.setDescription('Multiplexer Errored Seconds')
currentSubAggregate1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 77, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSubAggregate1daySES.setStatus('current')
if mibBuilder.loadTexts: currentSubAggregate1daySES.setDescription('Multiplexer Severely Errored Seconds')
currentSubAggregate1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 77, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSubAggregate1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentSubAggregate1dayElapsedTime.setDescription('Elapsed 1Day')
currentSubAggregate1dayCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 77, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSubAggregate1dayCrc.setStatus('current')
if mibBuilder.loadTexts: currentSubAggregate1dayCrc.setDescription('Multiplexer Cyclic Redundancy Check')
intervalSubAggregate15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 78), )
if mibBuilder.loadTexts: intervalSubAggregate15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalSubAggregate15minTable.setDescription('')
intervalSubAggregate15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 78, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalSubAggregate15minNumber"))
if mibBuilder.loadTexts: intervalSubAggregate15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalSubAggregate15minEntry.setDescription('')
intervalSubAggregate15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 78, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalSubAggregate15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalSubAggregate15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalSubAggregate15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 78, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSubAggregate15minES.setStatus('current')
if mibBuilder.loadTexts: intervalSubAggregate15minES.setDescription('Multiplexer Errored Seconds')
intervalSubAggregate15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 78, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSubAggregate15minSES.setStatus('current')
if mibBuilder.loadTexts: intervalSubAggregate15minSES.setDescription('Multiplexer Severely Errored Seconds')
intervalSubAggregate15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 78, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSubAggregate15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalSubAggregate15minValidFlag.setDescription('Valid Flag')
intervalSubAggregate15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 78, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSubAggregate15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalSubAggregate15minTimeStamp.setDescription('Timestamp')
intervalSubAggregate15minCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 78, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSubAggregate15minCrc.setStatus('current')
if mibBuilder.loadTexts: intervalSubAggregate15minCrc.setDescription('Multiplexer Cyclic Redundancy Check')
intervalSubAggregate1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 79), )
if mibBuilder.loadTexts: intervalSubAggregate1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalSubAggregate1dayTable.setDescription('')
intervalSubAggregate1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 79, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalSubAggregate1dayNumber"))
if mibBuilder.loadTexts: intervalSubAggregate1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalSubAggregate1dayEntry.setDescription('')
intervalSubAggregate1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 79, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalSubAggregate1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalSubAggregate1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalSubAggregate1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 79, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSubAggregate1dayES.setStatus('current')
if mibBuilder.loadTexts: intervalSubAggregate1dayES.setDescription('Multiplexer Errored Seconds')
intervalSubAggregate1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 79, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSubAggregate1daySES.setStatus('current')
if mibBuilder.loadTexts: intervalSubAggregate1daySES.setDescription('Multiplexer Severely Errored Seconds')
intervalSubAggregate1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 79, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSubAggregate1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalSubAggregate1dayValidFlag.setDescription('Valid Flag')
intervalSubAggregate1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 79, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSubAggregate1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalSubAggregate1dayTimeStamp.setDescription('Timestamp')
intervalSubAggregate1dayCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 79, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalSubAggregate1dayCrc.setStatus('current')
if mibBuilder.loadTexts: intervalSubAggregate1dayCrc.setDescription('Multiplexer Cyclic Redundancy Check')
currentOduTcmC15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 80), )
if mibBuilder.loadTexts: currentOduTcmC15minTable.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmC15minTable.setDescription('')
currentOduTcmC15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 80, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOduTcmC15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmC15minEntry.setDescription('')
currentOduTcmC15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 80, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmC15minES.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmC15minES.setDescription('Errored Seconds ODU Tandem Connection Monitoring - Instance C')
currentOduTcmC15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 80, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmC15minSES.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmC15minSES.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring - Instance C')
currentOduTcmC15minBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 80, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmC15minBbe.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmC15minBbe.setDescription('Background Block Erros ODU Tandem Connection Monitoring - Instance C')
currentOduTcmC15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 80, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmC15minUAS.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmC15minUAS.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring - Instance B')
currentOduTcmC15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 80, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmC15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmC15minElapsedTime.setDescription('Elapsed 15Min')
currentOduTcmC1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 81), )
if mibBuilder.loadTexts: currentOduTcmC1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmC1dayTable.setDescription('')
currentOduTcmC1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 81, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOduTcmC1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmC1dayEntry.setDescription('')
currentOduTcmC1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 81, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmC1dayES.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmC1dayES.setDescription('Errored Seconds ODU Tandem Connection Monitoring - Instance C')
currentOduTcmC1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 81, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmC1daySES.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmC1daySES.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring - Instance C')
currentOduTcmC1dayBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 81, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmC1dayBbe.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmC1dayBbe.setDescription('Background Block Erros ODU Tandem Connection Monitoring - Instance C')
currentOduTcmC1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 81, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmC1dayUAS.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmC1dayUAS.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring - Instance B')
currentOduTcmC1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 81, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOduTcmC1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentOduTcmC1dayElapsedTime.setDescription('Elapsed 1Day')
intervalOduTcmC15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 82), )
if mibBuilder.loadTexts: intervalOduTcmC15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmC15minTable.setDescription('')
intervalOduTcmC15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 82, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOduTcmC15minNumber"))
if mibBuilder.loadTexts: intervalOduTcmC15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmC15minEntry.setDescription('')
intervalOduTcmC15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 82, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalOduTcmC15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmC15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalOduTcmC15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 82, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmC15minES.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmC15minES.setDescription('Errored Seconds ODU Tandem Connection Monitoring - Instance C')
intervalOduTcmC15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 82, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmC15minSES.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmC15minSES.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring - Instance C')
intervalOduTcmC15minBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 82, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmC15minBbe.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmC15minBbe.setDescription('Background Block Erros ODU Tandem Connection Monitoring - Instance C')
intervalOduTcmC15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 82, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmC15minUAS.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmC15minUAS.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring - Instance B')
intervalOduTcmC15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 82, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmC15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmC15minValidFlag.setDescription('Valid Flag')
intervalOduTcmC15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 82, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmC15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmC15minTimeStamp.setDescription('Timestamp')
intervalOduTcmC1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 83), )
if mibBuilder.loadTexts: intervalOduTcmC1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmC1dayTable.setDescription('')
intervalOduTcmC1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 83, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOduTcmC1dayNumber"))
if mibBuilder.loadTexts: intervalOduTcmC1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmC1dayEntry.setDescription('')
intervalOduTcmC1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 83, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalOduTcmC1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmC1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalOduTcmC1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 83, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmC1dayES.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmC1dayES.setDescription('Errored Seconds ODU Tandem Connection Monitoring - Instance C')
intervalOduTcmC1daySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 83, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmC1daySES.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmC1daySES.setDescription('Severely Errored Seconds ODU Tandem Connection Monitoring - Instance C')
intervalOduTcmC1dayBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 83, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmC1dayBbe.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmC1dayBbe.setDescription('Background Block Erros ODU Tandem Connection Monitoring - Instance C')
intervalOduTcmC1dayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 83, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmC1dayUAS.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmC1dayUAS.setDescription('Unavailable Seconds ODU Tandem Connection Monitoring - Instance B')
intervalOduTcmC1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 83, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmC1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmC1dayValidFlag.setDescription('Valid Flag')
intervalOduTcmC1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 83, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOduTcmC1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalOduTcmC1dayTimeStamp.setDescription('Timestamp')
currentPhysConvHighSpeed15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 84), )
if mibBuilder.loadTexts: currentPhysConvHighSpeed15minTable.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvHighSpeed15minTable.setDescription('')
currentPhysConvHighSpeed15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 84, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentPhysConvHighSpeed15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvHighSpeed15minEntry.setDescription('')
currentPhysConvHighSpeed15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 84, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvHighSpeed15minES.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvHighSpeed15minES.setDescription('Errored Seconds Physical Coding Layer')
currentPhysConvHighSpeed15minCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 84, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvHighSpeed15minCV.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvHighSpeed15minCV.setDescription('Coding Violations Physical Coding Layer')
currentPhysConvHighSpeed15minSE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 84, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvHighSpeed15minSE.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvHighSpeed15minSE.setDescription('Sync Header Errors Physical Coding Layer')
currentPhysConvHighSpeed15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 84, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvHighSpeed15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvHighSpeed15minElapsedTime.setDescription('Elapsed 15Min')
currentPhysConvHighSpeed1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 85), )
if mibBuilder.loadTexts: currentPhysConvHighSpeed1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvHighSpeed1dayTable.setDescription('')
currentPhysConvHighSpeed1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 85, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentPhysConvHighSpeed1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvHighSpeed1dayEntry.setDescription('')
currentPhysConvHighSpeed1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 85, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvHighSpeed1dayES.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvHighSpeed1dayES.setDescription('Errored Seconds Physical Coding Layer')
currentPhysConvHighSpeed1dayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 85, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvHighSpeed1dayCV.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvHighSpeed1dayCV.setDescription('Coding Violations Physical Coding Layer')
currentPhysConvHighSpeed1daySE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 85, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvHighSpeed1daySE.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvHighSpeed1daySE.setDescription('Sync Header Errors Physical Coding Layer')
currentPhysConvHighSpeed1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 85, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvHighSpeed1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvHighSpeed1dayElapsedTime.setDescription('Elapsed 1Day')
intervalPhysConvHighSpeed15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 86), )
if mibBuilder.loadTexts: intervalPhysConvHighSpeed15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvHighSpeed15minTable.setDescription('')
intervalPhysConvHighSpeed15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 86, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysConvHighSpeed15minNumber"))
if mibBuilder.loadTexts: intervalPhysConvHighSpeed15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvHighSpeed15minEntry.setDescription('')
intervalPhysConvHighSpeed15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 86, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysConvHighSpeed15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvHighSpeed15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalPhysConvHighSpeed15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 86, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvHighSpeed15minES.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvHighSpeed15minES.setDescription('Errored Seconds Physical Coding Layer')
intervalPhysConvHighSpeed15minCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 86, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvHighSpeed15minCV.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvHighSpeed15minCV.setDescription('Coding Violations Physical Coding Layer')
intervalPhysConvHighSpeed15minSE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 86, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvHighSpeed15minSE.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvHighSpeed15minSE.setDescription('Sync Header Errors Physical Coding Layer')
intervalPhysConvHighSpeed15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 86, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvHighSpeed15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvHighSpeed15minValidFlag.setDescription('Valid Flag')
intervalPhysConvHighSpeed15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 86, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvHighSpeed15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvHighSpeed15minTimeStamp.setDescription('Timestamp')
intervalPhysConvHighSpeed1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 87), )
if mibBuilder.loadTexts: intervalPhysConvHighSpeed1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvHighSpeed1dayTable.setDescription('')
intervalPhysConvHighSpeed1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 87, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysConvHighSpeed1dayNumber"))
if mibBuilder.loadTexts: intervalPhysConvHighSpeed1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvHighSpeed1dayEntry.setDescription('')
intervalPhysConvHighSpeed1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 87, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysConvHighSpeed1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvHighSpeed1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalPhysConvHighSpeed1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 87, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvHighSpeed1dayES.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvHighSpeed1dayES.setDescription('Errored Seconds Physical Coding Layer')
intervalPhysConvHighSpeed1dayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 87, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvHighSpeed1dayCV.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvHighSpeed1dayCV.setDescription('Coding Violations Physical Coding Layer')
intervalPhysConvHighSpeed1daySE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 87, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvHighSpeed1daySE.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvHighSpeed1daySE.setDescription('Sync Header Errors Physical Coding Layer')
intervalPhysConvHighSpeed1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 87, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvHighSpeed1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvHighSpeed1dayValidFlag.setDescription('Valid Flag')
intervalPhysConvHighSpeed1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 87, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvHighSpeed1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvHighSpeed1dayTimeStamp.setDescription('Timestamp')
currentEthRxHighSpeed15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 88), )
if mibBuilder.loadTexts: currentEthRxHighSpeed15minTable.setStatus('current')
if mibBuilder.loadTexts: currentEthRxHighSpeed15minTable.setDescription('')
currentEthRxHighSpeed15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 88, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentEthRxHighSpeed15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentEthRxHighSpeed15minEntry.setDescription('')
currentEthRxHighSpeed15minGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 88, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRxHighSpeed15minGoodFrames.setStatus('current')
if mibBuilder.loadTexts: currentEthRxHighSpeed15minGoodFrames.setDescription('Frames Received')
currentEthRxHighSpeed15minPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 88, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRxHighSpeed15minPauseFrames.setStatus('current')
if mibBuilder.loadTexts: currentEthRxHighSpeed15minPauseFrames.setDescription('PAUSE Frames Received')
currentEthRxHighSpeed15minCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 88, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRxHighSpeed15minCrcFrames.setStatus('current')
if mibBuilder.loadTexts: currentEthRxHighSpeed15minCrcFrames.setDescription('Received CRC Errors')
currentEthRxHighSpeed15minBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 88, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRxHighSpeed15minBytes.setStatus('current')
if mibBuilder.loadTexts: currentEthRxHighSpeed15minBytes.setDescription('Bytes Received')
currentEthRxHighSpeed15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 88, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRxHighSpeed15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentEthRxHighSpeed15minElapsedTime.setDescription('Elapsed 15Min')
currentEthRxHighSpeed1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 89), )
if mibBuilder.loadTexts: currentEthRxHighSpeed1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentEthRxHighSpeed1dayTable.setDescription('')
currentEthRxHighSpeed1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 89, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentEthRxHighSpeed1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentEthRxHighSpeed1dayEntry.setDescription('')
currentEthRxHighSpeed1dayGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 89, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRxHighSpeed1dayGoodFrames.setStatus('current')
if mibBuilder.loadTexts: currentEthRxHighSpeed1dayGoodFrames.setDescription('Frames Received')
currentEthRxHighSpeed1dayPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 89, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRxHighSpeed1dayPauseFrames.setStatus('current')
if mibBuilder.loadTexts: currentEthRxHighSpeed1dayPauseFrames.setDescription('PAUSE Frames Received')
currentEthRxHighSpeed1dayCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 89, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRxHighSpeed1dayCrcFrames.setStatus('current')
if mibBuilder.loadTexts: currentEthRxHighSpeed1dayCrcFrames.setDescription('Received CRC Errors')
currentEthRxHighSpeed1dayBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 89, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRxHighSpeed1dayBytes.setStatus('current')
if mibBuilder.loadTexts: currentEthRxHighSpeed1dayBytes.setDescription('Bytes Received')
currentEthRxHighSpeed1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 89, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRxHighSpeed1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentEthRxHighSpeed1dayElapsedTime.setDescription('Elapsed 1Day')
intervalEthRxHighSpeed15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 90), )
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minTable.setDescription('')
intervalEthRxHighSpeed15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 90, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalEthRxHighSpeed15minNumber"))
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minEntry.setDescription('')
intervalEthRxHighSpeed15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 90, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalEthRxHighSpeed15minGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 90, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minGoodFrames.setStatus('current')
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minGoodFrames.setDescription('Frames Received')
intervalEthRxHighSpeed15minPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 90, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minPauseFrames.setStatus('current')
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minPauseFrames.setDescription('PAUSE Frames Received')
intervalEthRxHighSpeed15minCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 90, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minCrcFrames.setStatus('current')
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minCrcFrames.setDescription('Received CRC Errors')
intervalEthRxHighSpeed15minBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 90, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minBytes.setStatus('current')
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minBytes.setDescription('Bytes Received')
intervalEthRxHighSpeed15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 90, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minValidFlag.setDescription('Valid Flag')
intervalEthRxHighSpeed15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 90, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalEthRxHighSpeed15minTimeStamp.setDescription('Timestamp')
intervalEthRxHighSpeed1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 91), )
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayTable.setDescription('')
intervalEthRxHighSpeed1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 91, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalEthRxHighSpeed1dayNumber"))
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayEntry.setDescription('')
intervalEthRxHighSpeed1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 91, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalEthRxHighSpeed1dayGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 91, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayGoodFrames.setStatus('current')
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayGoodFrames.setDescription('Frames Received')
intervalEthRxHighSpeed1dayPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 91, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayPauseFrames.setStatus('current')
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayPauseFrames.setDescription('PAUSE Frames Received')
intervalEthRxHighSpeed1dayCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 91, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayCrcFrames.setStatus('current')
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayCrcFrames.setDescription('Received CRC Errors')
intervalEthRxHighSpeed1dayBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 91, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayBytes.setStatus('current')
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayBytes.setDescription('Bytes Received')
intervalEthRxHighSpeed1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 91, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayValidFlag.setDescription('Valid Flag')
intervalEthRxHighSpeed1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 91, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalEthRxHighSpeed1dayTimeStamp.setDescription('Timestamp')
currentGfpfr15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 92), )
if mibBuilder.loadTexts: currentGfpfr15minTable.setStatus('deprecated')
if mibBuilder.loadTexts: currentGfpfr15minTable.setDescription('')
currentGfpfr15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 92, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentGfpfr15minEntry.setStatus('deprecated')
if mibBuilder.loadTexts: currentGfpfr15minEntry.setDescription('')
currentGfpfr15minGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 92, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfr15minGoodFrames.setStatus('deprecated')
if mibBuilder.loadTexts: currentGfpfr15minGoodFrames.setDescription('GFP Good Frames')
currentGfpfr15minCHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 92, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfr15minCHecDiscardedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: currentGfpfr15minCHecDiscardedFrames.setDescription('Core Hec Discarded Frames')
currentGfpfr15minTHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 92, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfr15minTHecDiscardedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: currentGfpfr15minTHecDiscardedFrames.setDescription('Type Field HEC Discarded Frames')
currentGfpfr15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 92, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfr15minElapsedTime.setStatus('deprecated')
if mibBuilder.loadTexts: currentGfpfr15minElapsedTime.setDescription('Elapsed 15Min')
currentGfpfr1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 93), )
if mibBuilder.loadTexts: currentGfpfr1dayTable.setStatus('deprecated')
if mibBuilder.loadTexts: currentGfpfr1dayTable.setDescription('')
currentGfpfr1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 93, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentGfpfr1dayEntry.setStatus('deprecated')
if mibBuilder.loadTexts: currentGfpfr1dayEntry.setDescription('')
currentGfpfr1dayGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 93, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfr1dayGoodFrames.setStatus('deprecated')
if mibBuilder.loadTexts: currentGfpfr1dayGoodFrames.setDescription('GFP Good Frames')
currentGfpfr1dayCHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 93, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfr1dayCHecDiscardedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: currentGfpfr1dayCHecDiscardedFrames.setDescription('Core Hec Discarded Frames')
currentGfpfr1dayTHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 93, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfr1dayTHecDiscardedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: currentGfpfr1dayTHecDiscardedFrames.setDescription('Type Field HEC Discarded Frames')
currentGfpfr1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 93, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfr1dayElapsedTime.setStatus('deprecated')
if mibBuilder.loadTexts: currentGfpfr1dayElapsedTime.setDescription('Elapsed 1Day')
intervalGfpfr15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 94), )
if mibBuilder.loadTexts: intervalGfpfr15minTable.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfpfr15minTable.setDescription('')
intervalGfpfr15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 94, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalGfpfr15minNumber"))
if mibBuilder.loadTexts: intervalGfpfr15minEntry.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfpfr15minEntry.setDescription('')
intervalGfpfr15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 94, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalGfpfr15minNumber.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfpfr15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalGfpfr15minGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 94, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfr15minGoodFrames.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfpfr15minGoodFrames.setDescription('GFP Good Frames')
intervalGfpfr15minCHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 94, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfr15minCHecDiscardedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfpfr15minCHecDiscardedFrames.setDescription('Core Hec Discarded Frames')
intervalGfpfr15minTHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 94, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfr15minTHecDiscardedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfpfr15minTHecDiscardedFrames.setDescription('Type Field HEC Discarded Frames')
intervalGfpfr15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 94, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfr15minValidFlag.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfpfr15minValidFlag.setDescription('Valid Flag')
intervalGfpfr15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 94, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfr15minTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfpfr15minTimeStamp.setDescription('Timestamp')
intervalGfpfr1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 95), )
if mibBuilder.loadTexts: intervalGfpfr1dayTable.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfpfr1dayTable.setDescription('')
intervalGfpfr1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 95, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalGfpfr1dayNumber"))
if mibBuilder.loadTexts: intervalGfpfr1dayEntry.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfpfr1dayEntry.setDescription('')
intervalGfpfr1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 95, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalGfpfr1dayNumber.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfpfr1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalGfpfr1dayGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 95, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfr1dayGoodFrames.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfpfr1dayGoodFrames.setDescription('GFP Good Frames')
intervalGfpfr1dayCHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 95, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfr1dayCHecDiscardedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfpfr1dayCHecDiscardedFrames.setDescription('Core Hec Discarded Frames')
intervalGfpfr1dayTHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 95, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfr1dayTHecDiscardedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfpfr1dayTHecDiscardedFrames.setDescription('Type Field HEC Discarded Frames')
intervalGfpfr1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 95, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfr1dayValidFlag.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfpfr1dayValidFlag.setDescription('Valid Flag')
intervalGfpfr1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 95, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfr1dayTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: intervalGfpfr1dayTimeStamp.setDescription('Timestamp')
currentGfpSublayer15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 96), )
if mibBuilder.loadTexts: currentGfpSublayer15minTable.setStatus('current')
if mibBuilder.loadTexts: currentGfpSublayer15minTable.setDescription('')
currentGfpSublayer15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 96, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentGfpSublayer15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentGfpSublayer15minEntry.setDescription('')
currentGfpSublayer15minCoreHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 96, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpSublayer15minCoreHecCorrectedFrames.setStatus('current')
if mibBuilder.loadTexts: currentGfpSublayer15minCoreHecCorrectedFrames.setDescription('Core HEC Corrected Frames')
currentGfpSublayer15minTypeHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 96, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpSublayer15minTypeHecCorrectedFrames.setStatus('current')
if mibBuilder.loadTexts: currentGfpSublayer15minTypeHecCorrectedFrames.setDescription('Type Field HEC Corrected Frames')
currentGfpSublayer15minTypeHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 96, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpSublayer15minTypeHecDiscardedFrames.setStatus('current')
if mibBuilder.loadTexts: currentGfpSublayer15minTypeHecDiscardedFrames.setDescription('Type Field HEC Discarded Frames')
currentGfpSublayer15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 96, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpSublayer15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentGfpSublayer15minElapsedTime.setDescription('Elapsed 15Min')
currentGfpSublayer1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 97), )
if mibBuilder.loadTexts: currentGfpSublayer1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentGfpSublayer1dayTable.setDescription('')
currentGfpSublayer1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 97, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentGfpSublayer1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentGfpSublayer1dayEntry.setDescription('')
currentGfpSublayer1dayCoreHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 97, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpSublayer1dayCoreHecCorrectedFrames.setStatus('current')
if mibBuilder.loadTexts: currentGfpSublayer1dayCoreHecCorrectedFrames.setDescription('Core HEC Corrected Frames')
currentGfpSublayer1dayTypeHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 97, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpSublayer1dayTypeHecCorrectedFrames.setStatus('current')
if mibBuilder.loadTexts: currentGfpSublayer1dayTypeHecCorrectedFrames.setDescription('Type Field HEC Corrected Frames')
currentGfpSublayer1dayTypeHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 97, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpSublayer1dayTypeHecDiscardedFrames.setStatus('current')
if mibBuilder.loadTexts: currentGfpSublayer1dayTypeHecDiscardedFrames.setDescription('Type Field HEC Discarded Frames')
currentGfpSublayer1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 97, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpSublayer1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentGfpSublayer1dayElapsedTime.setDescription('Elapsed 1Day')
intervalGfpSublayer15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 98), )
if mibBuilder.loadTexts: intervalGfpSublayer15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalGfpSublayer15minTable.setDescription('')
intervalGfpSublayer15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 98, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalGfpSublayer15minNumber"))
if mibBuilder.loadTexts: intervalGfpSublayer15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalGfpSublayer15minEntry.setDescription('')
intervalGfpSublayer15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 98, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalGfpSublayer15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalGfpSublayer15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalGfpSublayer15minCoreHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 98, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpSublayer15minCoreHecCorrectedFrames.setStatus('current')
if mibBuilder.loadTexts: intervalGfpSublayer15minCoreHecCorrectedFrames.setDescription('Core HEC Corrected Frames')
intervalGfpSublayer15minTypeHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 98, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpSublayer15minTypeHecCorrectedFrames.setStatus('current')
if mibBuilder.loadTexts: intervalGfpSublayer15minTypeHecCorrectedFrames.setDescription('Type Field HEC Corrected Frames')
intervalGfpSublayer15minTypeHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 98, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpSublayer15minTypeHecDiscardedFrames.setStatus('current')
if mibBuilder.loadTexts: intervalGfpSublayer15minTypeHecDiscardedFrames.setDescription('Type Field HEC Discarded Frames')
intervalGfpSublayer15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 98, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpSublayer15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalGfpSublayer15minValidFlag.setDescription('Valid Flag')
intervalGfpSublayer15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 98, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpSublayer15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalGfpSublayer15minTimeStamp.setDescription('Timestamp')
intervalGfpSublayer1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 99), )
if mibBuilder.loadTexts: intervalGfpSublayer1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalGfpSublayer1dayTable.setDescription('')
intervalGfpSublayer1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 99, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalGfpSublayer1dayNumber"))
if mibBuilder.loadTexts: intervalGfpSublayer1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalGfpSublayer1dayEntry.setDescription('')
intervalGfpSublayer1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 99, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalGfpSublayer1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalGfpSublayer1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalGfpSublayer1dayCoreHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 99, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpSublayer1dayCoreHecCorrectedFrames.setStatus('current')
if mibBuilder.loadTexts: intervalGfpSublayer1dayCoreHecCorrectedFrames.setDescription('Core HEC Corrected Frames')
intervalGfpSublayer1dayTypeHecCorrectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 99, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpSublayer1dayTypeHecCorrectedFrames.setStatus('current')
if mibBuilder.loadTexts: intervalGfpSublayer1dayTypeHecCorrectedFrames.setDescription('Type Field HEC Corrected Frames')
intervalGfpSublayer1dayTypeHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 99, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpSublayer1dayTypeHecDiscardedFrames.setStatus('current')
if mibBuilder.loadTexts: intervalGfpSublayer1dayTypeHecDiscardedFrames.setDescription('Type Field HEC Discarded Frames')
intervalGfpSublayer1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 99, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpSublayer1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalGfpSublayer1dayValidFlag.setDescription('Valid Flag')
intervalGfpSublayer1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 99, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpSublayer1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalGfpSublayer1dayTimeStamp.setDescription('Timestamp')
currentGfpfrSublayer15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 100), )
if mibBuilder.loadTexts: currentGfpfrSublayer15minTable.setStatus('current')
if mibBuilder.loadTexts: currentGfpfrSublayer15minTable.setDescription('')
currentGfpfrSublayer15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 100, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentGfpfrSublayer15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentGfpfrSublayer15minEntry.setDescription('')
currentGfpfrSublayer15minGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 100, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfrSublayer15minGoodFrames.setStatus('current')
if mibBuilder.loadTexts: currentGfpfrSublayer15minGoodFrames.setDescription('GFP Good Frames')
currentGfpfrSublayer15minCHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 100, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfrSublayer15minCHecDiscardedFrames.setStatus('current')
if mibBuilder.loadTexts: currentGfpfrSublayer15minCHecDiscardedFrames.setDescription('Core Hec Discarded Frames')
currentGfpfrSublayer15minTHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 100, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfrSublayer15minTHecDiscardedFrames.setStatus('current')
if mibBuilder.loadTexts: currentGfpfrSublayer15minTHecDiscardedFrames.setDescription('Type Field HEC Discarded Frames')
currentGfpfrSublayer15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 100, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfrSublayer15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentGfpfrSublayer15minElapsedTime.setDescription('Elapsed 15Min')
currentGfpfrSublayer1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 101), )
if mibBuilder.loadTexts: currentGfpfrSublayer1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentGfpfrSublayer1dayTable.setDescription('')
currentGfpfrSublayer1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 101, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentGfpfrSublayer1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentGfpfrSublayer1dayEntry.setDescription('')
currentGfpfrSublayer1dayGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 101, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfrSublayer1dayGoodFrames.setStatus('current')
if mibBuilder.loadTexts: currentGfpfrSublayer1dayGoodFrames.setDescription('GFP Good Frames')
currentGfpfrSublayer1dayCHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 101, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfrSublayer1dayCHecDiscardedFrames.setStatus('current')
if mibBuilder.loadTexts: currentGfpfrSublayer1dayCHecDiscardedFrames.setDescription('Core Hec Discarded Frames')
currentGfpfrSublayer1dayTHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 101, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfrSublayer1dayTHecDiscardedFrames.setStatus('current')
if mibBuilder.loadTexts: currentGfpfrSublayer1dayTHecDiscardedFrames.setDescription('Type Field HEC Discarded Frames')
currentGfpfrSublayer1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 101, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentGfpfrSublayer1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentGfpfrSublayer1dayElapsedTime.setDescription('Elapsed 1Day')
intervalGfpfrSublayer15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 102), )
if mibBuilder.loadTexts: intervalGfpfrSublayer15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalGfpfrSublayer15minTable.setDescription('')
intervalGfpfrSublayer15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 102, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalGfpfrSublayer15minNumber"))
if mibBuilder.loadTexts: intervalGfpfrSublayer15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalGfpfrSublayer15minEntry.setDescription('')
intervalGfpfrSublayer15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 102, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalGfpfrSublayer15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalGfpfrSublayer15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalGfpfrSublayer15minGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 102, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfrSublayer15minGoodFrames.setStatus('current')
if mibBuilder.loadTexts: intervalGfpfrSublayer15minGoodFrames.setDescription('GFP Good Frames')
intervalGfpfrSublayer15minCHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 102, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfrSublayer15minCHecDiscardedFrames.setStatus('current')
if mibBuilder.loadTexts: intervalGfpfrSublayer15minCHecDiscardedFrames.setDescription('Core Hec Discarded Frames')
intervalGfpfrSublayer15minTHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 102, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfrSublayer15minTHecDiscardedFrames.setStatus('current')
if mibBuilder.loadTexts: intervalGfpfrSublayer15minTHecDiscardedFrames.setDescription('Type Field HEC Discarded Frames')
intervalGfpfrSublayer15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 102, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfrSublayer15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalGfpfrSublayer15minValidFlag.setDescription('Valid Flag')
intervalGfpfrSublayer15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 102, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfrSublayer15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalGfpfrSublayer15minTimeStamp.setDescription('Timestamp')
intervalGfpfrSublayer1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 103), )
if mibBuilder.loadTexts: intervalGfpfrSublayer1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalGfpfrSublayer1dayTable.setDescription('')
intervalGfpfrSublayer1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 103, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalGfpfrSublayer1dayNumber"))
if mibBuilder.loadTexts: intervalGfpfrSublayer1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalGfpfrSublayer1dayEntry.setDescription('')
intervalGfpfrSublayer1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 103, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalGfpfrSublayer1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalGfpfrSublayer1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalGfpfrSublayer1dayGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 103, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfrSublayer1dayGoodFrames.setStatus('current')
if mibBuilder.loadTexts: intervalGfpfrSublayer1dayGoodFrames.setDescription('GFP Good Frames')
intervalGfpfrSublayer1dayCHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 103, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfrSublayer1dayCHecDiscardedFrames.setStatus('current')
if mibBuilder.loadTexts: intervalGfpfrSublayer1dayCHecDiscardedFrames.setDescription('Core Hec Discarded Frames')
intervalGfpfrSublayer1dayTHecDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 103, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfrSublayer1dayTHecDiscardedFrames.setStatus('current')
if mibBuilder.loadTexts: intervalGfpfrSublayer1dayTHecDiscardedFrames.setDescription('Type Field HEC Discarded Frames')
intervalGfpfrSublayer1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 103, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfrSublayer1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalGfpfrSublayer1dayValidFlag.setDescription('Valid Flag')
intervalGfpfrSublayer1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 103, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalGfpfrSublayer1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalGfpfrSublayer1dayTimeStamp.setDescription('Timestamp')
thresholdGfpSublayerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 104), )
if mibBuilder.loadTexts: thresholdGfpSublayerTable.setStatus('current')
if mibBuilder.loadTexts: thresholdGfpSublayerTable.setDescription('')
thresholdGfpSublayerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 104, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdGfpSublayerEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdGfpSublayerEntry.setDescription('')
thresholdGfpSublayerCoreHecCorrectedFramesHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 104, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpSublayerCoreHecCorrectedFramesHighThres15Min.setStatus('current')
if mibBuilder.loadTexts: thresholdGfpSublayerCoreHecCorrectedFramesHighThres15Min.setDescription('Core HEC Corrected Frames High Threshold')
thresholdGfpSublayerCoreHecCorrectedFramesHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 104, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpSublayerCoreHecCorrectedFramesHighThres1Day.setStatus('current')
if mibBuilder.loadTexts: thresholdGfpSublayerCoreHecCorrectedFramesHighThres1Day.setDescription('Core HEC Corrected Frames High Threshold')
thresholdGfpSublayerTypeHecCorrectedFramesHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 104, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpSublayerTypeHecCorrectedFramesHighThres15Min.setStatus('current')
if mibBuilder.loadTexts: thresholdGfpSublayerTypeHecCorrectedFramesHighThres15Min.setDescription('Type Field HEC Corrected Frames High Threshold')
thresholdGfpSublayerTypeHecCorrectedFramesHighThres15Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 104, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpSublayerTypeHecCorrectedFramesHighThres15Day.setStatus('current')
if mibBuilder.loadTexts: thresholdGfpSublayerTypeHecCorrectedFramesHighThres15Day.setDescription('Type Field HEC Corrected Frames High Threshold')
thresholdGfpSublayerTypeHecDiscardedFramesHighThres15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 104, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpSublayerTypeHecDiscardedFramesHighThres15Min.setStatus('current')
if mibBuilder.loadTexts: thresholdGfpSublayerTypeHecDiscardedFramesHighThres15Min.setDescription('Type Field HEC Discarded Frames High Threshold')
thresholdGfpSublayerTypeHecDiscardedFramesHighThres1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 104, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdGfpSublayerTypeHecDiscardedFramesHighThres1Day.setStatus('current')
if mibBuilder.loadTexts: thresholdGfpSublayerTypeHecDiscardedFramesHighThres1Day.setDescription('Type Field HEC Discarded Frames High Threshold')
thresholdPhysConvCombinedTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 105), )
if mibBuilder.loadTexts: thresholdPhysConvCombinedTable.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvCombinedTable.setDescription('')
thresholdPhysConvCombinedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 105, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdPhysConvCombinedEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvCombinedEntry.setDescription('')
thresholdPhysConvCombinedESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 105, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvCombinedESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvCombinedESHighThres15min.setDescription('Errored Seconds Physical Coding Layer')
thresholdPhysConvCombinedESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 105, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 89400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvCombinedESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvCombinedESHighThres1day.setDescription('Errored Seconds Physical Coding Layer')
thresholdPhysConvCombinedCVDEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 105, 1, 3), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvCombinedCVDEHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvCombinedCVDEHighThres15min.setDescription('Threshold 15 Min: Coding Violations Physical Coding Layer')
thresholdPhysConvCombinedCVDEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 105, 1, 4), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdPhysConvCombinedCVDEHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdPhysConvCombinedCVDEHighThres1day.setDescription('Threshold 1 Day: Coding Violations - Physical Coding Layer')
currentPhysConvCombined15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 106), )
if mibBuilder.loadTexts: currentPhysConvCombined15minTable.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvCombined15minTable.setDescription('')
currentPhysConvCombined15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 106, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentPhysConvCombined15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvCombined15minEntry.setDescription('')
currentPhysConvCombined15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 106, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvCombined15minES.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvCombined15minES.setDescription('Errored Seconds Physical Coding Layer')
currentPhysConvCombined15minCVDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 106, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvCombined15minCVDE.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvCombined15minCVDE.setDescription('Coding Violations + Disparity Errors Physical Coding Layer')
currentPhysConvCombined15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 106, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvCombined15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvCombined15minElapsedTime.setDescription('Elapsed 15Min')
currentPhysConvCombined1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 107), )
if mibBuilder.loadTexts: currentPhysConvCombined1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvCombined1dayTable.setDescription('')
currentPhysConvCombined1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 107, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentPhysConvCombined1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvCombined1dayEntry.setDescription('')
currentPhysConvCombined1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 107, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvCombined1dayES.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvCombined1dayES.setDescription('Errored Seconds Physical Coding Layer')
currentPhysConvCombined1dayCVDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 107, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvCombined1dayCVDE.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvCombined1dayCVDE.setDescription('Coding Violations + Disparity Errors Physical Coding Layer')
currentPhysConvCombined1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 107, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvCombined1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvCombined1dayElapsedTime.setDescription('Elapsed 1Day')
intervalPhysConvCombined15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 108), )
if mibBuilder.loadTexts: intervalPhysConvCombined15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvCombined15minTable.setDescription('')
intervalPhysConvCombined15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 108, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysConvCombined15minNumber"))
if mibBuilder.loadTexts: intervalPhysConvCombined15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvCombined15minEntry.setDescription('')
intervalPhysConvCombined15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 108, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysConvCombined15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvCombined15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalPhysConvCombined15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 108, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvCombined15minES.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvCombined15minES.setDescription('Errored Seconds Physical Coding Layer')
intervalPhysConvCombined15minCVDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 108, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvCombined15minCVDE.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvCombined15minCVDE.setDescription('Coding Violations + Disparity Errors Physical Coding Layer')
intervalPhysConvCombined15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 108, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvCombined15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvCombined15minValidFlag.setDescription('Valid Flag')
intervalPhysConvCombined15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 108, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvCombined15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvCombined15minTimeStamp.setDescription('Timestamp')
intervalPhysConvCombined1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 109), )
if mibBuilder.loadTexts: intervalPhysConvCombined1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvCombined1dayTable.setDescription('')
intervalPhysConvCombined1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 109, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysConvCombined1dayNumber"))
if mibBuilder.loadTexts: intervalPhysConvCombined1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvCombined1dayEntry.setDescription('')
intervalPhysConvCombined1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 109, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysConvCombined1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvCombined1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalPhysConvCombined1dayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 109, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvCombined1dayES.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvCombined1dayES.setDescription('Errored Seconds Physical Coding Layer')
intervalPhysConvCombined1dayCVDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 109, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvCombined1dayCVDE.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvCombined1dayCVDE.setDescription('Coding Violations + Disparity Errors Physical Coding Layer')
intervalPhysConvCombined1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 109, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvCombined1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvCombined1dayValidFlag.setDescription('Valid Flag')
intervalPhysConvCombined1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 109, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvCombined1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvCombined1dayTimeStamp.setDescription('Timestamp')
thresholdOtuFecSublayerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 110), )
if mibBuilder.loadTexts: thresholdOtuFecSublayerTable.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuFecSublayerTable.setDescription('')
thresholdOtuFecSublayerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 110, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdOtuFecSublayerEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuFecSublayerEntry.setDescription('')
thresholdOtuFecSublayerESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 110, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuFecSublayerESHighThres15min.setDescription('Errored Seconds FEC OTU High Threshold')
thresholdOtuFecSublayerESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 110, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuFecSublayerESHighThres1day.setDescription('Errored Seconds FEC OTU High Threshold')
thresholdOtuFecSublayerSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 110, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerSESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuFecSublayerSESHighThres15min.setDescription('Severely Errored Seconds FEC OTU High Threshold')
thresholdOtuFecSublayerSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 110, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerSESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuFecSublayerSESHighThres1day.setDescription('Severely Errored Seconds FEC OTU High Threshold')
thresholdOtuFecSublayerCEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 110, 1, 5), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerCEHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuFecSublayerCEHighThres15min.setDescription('FEC Corrected Errors 15 Min Threshold')
thresholdOtuFecSublayerCEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 110, 1, 6), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerCEHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuFecSublayerCEHighThres1day.setDescription('FEC Corrected Errors 1Day Threshold')
thresholdOtuFecSublayerUBEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 110, 1, 7), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerUBEHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuFecSublayerUBEHighThres15min.setDescription('Uncorrected Block Errors High Threshold')
thresholdOtuFecSublayerUBEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 110, 1, 8), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerUBEHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuFecSublayerUBEHighThres1day.setDescription('Uncorrected Block Errors High Threshold')
thresholdOtuFecSublayerBERCEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 110, 1, 9), Counter64String()).setUnits('1.0E-18').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerBERCEHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuFecSublayerBERCEHighThres15min.setDescription('Bit error rate before FEC calculated from corrected errors')
thresholdOtuFecSublayerBERCEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 110, 1, 10), Counter64String()).setUnits('1.0E-18').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerBERCEHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuFecSublayerBERCEHighThres1day.setDescription('Bit error rate before FEC 1day high threshold')
thresholdSonetLineMsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 111), )
if mibBuilder.loadTexts: thresholdSonetLineMsTable.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetLineMsTable.setDescription('')
thresholdSonetLineMsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 111, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdSonetLineMsEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetLineMsEntry.setDescription('')
thresholdSonetLineMsESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 111, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineMsESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetLineMsESHighThres15min.setDescription('Errored Seconds Line / Muliplex Section')
thresholdSonetLineMsESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 111, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineMsESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetLineMsESHighThres1day.setDescription('Errored Seconds Line / Multiplex Section')
thresholdSonetLineMsSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 111, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineMsSESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetLineMsSESHighThres15min.setDescription('Severely Errored Seconds Line / Multiplex Section')
thresholdSonetLineMsSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 111, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineMsSESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetLineMsSESHighThres1day.setDescription('Severely Errored Seconds Line / Multiplex Section')
thresholdSonetLineMsUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 111, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineMsUASHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetLineMsUASHighThres15min.setDescription('Unavailable Seconds Line / Multiplex Section')
thresholdSonetLineMsUASSHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 111, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineMsUASSHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetLineMsUASSHighThres1day.setDescription('Unavailable Seconds Line / Multiplex Section 1Day Threshold')
thresholdSonetLineMsCVHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 111, 1, 7), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineMsCVHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetLineMsCVHighThres15min.setDescription('Threshold 15 Min: Coding Violations Line / Multiplex Section')
thresholdSonetLineMsCVSHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 111, 1, 8), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSonetLineMsCVSHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdSonetLineMsCVSHighThres1day.setDescription('1Day Threshold: Coding Violations Line / Multiplex Section')
intervalPhysPerfEstimatedSignalGain15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 112), )
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain15minTable.setDescription('')
intervalPhysPerfEstimatedSignalGain15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 112, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfEstimatedSignalGain15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain15minEntry.setDescription('')
intervalPhysPerfEstimatedSignalGain15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 112, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalPhysPerfEstimatedSignalGain15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 112, 1, 2), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain15minLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain15minLow.setDescription('Estimated signal gain low')
intervalPhysPerfEstimatedSignalGain15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 112, 1, 3), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain15minMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain15minMean.setDescription('Estimated signal gain average')
intervalPhysPerfEstimatedSignalGain15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 112, 1, 4), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain15minHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain15minHigh.setDescription('Estimated signal gain high')
intervalPhysPerfEstimatedSignalGain15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 112, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain15minValidFlag.setDescription('Valid Flag')
intervalPhysPerfEstimatedSignalGain15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 112, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain15minTimeStamp.setDescription('Timestamp')
intervalPhysPerfEstimatedSignalGain1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 113), )
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1dayTable.setDescription('')
intervalPhysPerfEstimatedSignalGain1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 113, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfEstimatedSignalGain1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1dayEntry.setDescription('')
intervalPhysPerfEstimatedSignalGain1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 113, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalPhysPerfEstimatedSignalGain1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 113, 1, 2), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1dayLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1dayLow.setDescription('Estimated signal gain low')
intervalPhysPerfEstimatedSignalGain1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 113, 1, 3), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1dayMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1dayMean.setDescription('Estimated signal gain average')
intervalPhysPerfEstimatedSignalGain1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 113, 1, 4), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1dayHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1dayHigh.setDescription('Estimated signal gain high')
intervalPhysPerfEstimatedSignalGain1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 113, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1dayValidFlag.setDescription('Valid Flag')
intervalPhysPerfEstimatedSignalGain1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 113, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1dayTimeStamp.setDescription('Timestamp')
intervalPhysPerfEstimatedSignalGain1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 114), )
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1weekTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1weekTable.setDescription('')
intervalPhysPerfEstimatedSignalGain1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 114, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfEstimatedSignalGain1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1weekEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1weekEntry.setDescription('')
intervalPhysPerfEstimatedSignalGain1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 114, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1weekNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1weekNumber.setDescription('Number 1week')
intervalPhysPerfEstimatedSignalGain1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 114, 1, 2), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1weekLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1weekLow.setDescription('Estimated signal gain low')
intervalPhysPerfEstimatedSignalGain1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 114, 1, 3), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1weekMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1weekMean.setDescription('Estimated signal gain average')
intervalPhysPerfEstimatedSignalGain1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 114, 1, 4), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1weekHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1weekHigh.setDescription('Estimated signal gain high')
intervalPhysPerfEstimatedSignalGain1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 114, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1weekValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1weekValidFlag.setDescription('Valid Flag')
intervalPhysPerfEstimatedSignalGain1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 114, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1weekTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfEstimatedSignalGain1weekTimeStamp.setDescription('Timestamp')
intervalPhysPerfCurrent15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 115), )
if mibBuilder.loadTexts: intervalPhysPerfCurrent15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrent15minTable.setDescription('')
intervalPhysPerfCurrent15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 115, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfCurrent15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfCurrent15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrent15minEntry.setDescription('')
intervalPhysPerfCurrent15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 115, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfCurrent15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrent15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalPhysPerfCurrent15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 115, 1, 2), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent15minLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrent15minLow.setDescription('Board or Pluggable Submodule Low Current')
intervalPhysPerfCurrent15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 115, 1, 3), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent15minMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrent15minMean.setDescription('Board or Pluggable Submodule Mean Current')
intervalPhysPerfCurrent15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 115, 1, 4), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent15minHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrent15minHigh.setDescription('Board or Pluggable Submodule High Current')
intervalPhysPerfCurrent15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 115, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrent15minValidFlag.setDescription('Valid Flag')
intervalPhysPerfCurrent15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 115, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrent15minTimeStamp.setDescription('Timestamp')
intervalPhysPerfCurrent1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 116), )
if mibBuilder.loadTexts: intervalPhysPerfCurrent1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrent1dayTable.setDescription('')
intervalPhysPerfCurrent1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 116, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfCurrent1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfCurrent1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrent1dayEntry.setDescription('')
intervalPhysPerfCurrent1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 116, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfCurrent1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrent1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalPhysPerfCurrent1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 116, 1, 2), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent1dayLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrent1dayLow.setDescription('Board or Pluggable Submodule Low Current')
intervalPhysPerfCurrent1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 116, 1, 3), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent1dayMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrent1dayMean.setDescription('Board or Pluggable Submodule Mean Current')
intervalPhysPerfCurrent1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 116, 1, 4), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent1dayHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrent1dayHigh.setDescription('Board or Pluggable Submodule High Current')
intervalPhysPerfCurrent1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 116, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrent1dayValidFlag.setDescription('Valid Flag')
intervalPhysPerfCurrent1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 116, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrent1dayTimeStamp.setDescription('Timestamp')
intervalPhysPerfCurrent1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 117), )
if mibBuilder.loadTexts: intervalPhysPerfCurrent1weekTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrent1weekTable.setDescription('')
intervalPhysPerfCurrent1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 117, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfCurrent1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfCurrent1weekEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrent1weekEntry.setDescription('')
intervalPhysPerfCurrent1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 117, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfCurrent1weekNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrent1weekNumber.setDescription('Number 1week')
intervalPhysPerfCurrent1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 117, 1, 2), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent1weekLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrent1weekLow.setDescription('Board or Pluggable Submodule Low Current')
intervalPhysPerfCurrent1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 117, 1, 3), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent1weekMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrent1weekMean.setDescription('Board or Pluggable Submodule Mean Current')
intervalPhysPerfCurrent1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 117, 1, 4), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent1weekHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrent1weekHigh.setDescription('Board or Pluggable Submodule High Current')
intervalPhysPerfCurrent1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 117, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent1weekValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrent1weekValidFlag.setDescription('Valid Flag')
intervalPhysPerfCurrent1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 117, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrent1weekTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrent1weekTimeStamp.setDescription('Timestamp')
intervalPhysPerfCurrentOscGain15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 118), )
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain15minTable.setDescription('')
intervalPhysPerfCurrentOscGain15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 118, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfCurrentOscGain15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain15minEntry.setDescription('')
intervalPhysPerfCurrentOscGain15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 118, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalPhysPerfCurrentOscGain15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 118, 1, 2), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain15minLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain15minLow.setDescription('OSC gain low')
intervalPhysPerfCurrentOscGain15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 118, 1, 3), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain15minMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain15minMean.setDescription('OSC gainaverage')
intervalPhysPerfCurrentOscGain15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 118, 1, 4), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain15minHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain15minHigh.setDescription('OSC gain high')
intervalPhysPerfCurrentOscGain15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 118, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain15minValidFlag.setDescription('Valid Flag')
intervalPhysPerfCurrentOscGain15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 118, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain15minTimeStamp.setDescription('Timestamp')
intervalPhysPerfCurrentOscGain1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 119), )
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1dayTable.setDescription('')
intervalPhysPerfCurrentOscGain1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 119, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfCurrentOscGain1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1dayEntry.setDescription('')
intervalPhysPerfCurrentOscGain1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 119, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalPhysPerfCurrentOscGain1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 119, 1, 2), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1dayLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1dayLow.setDescription('OSC gain low')
intervalPhysPerfCurrentOscGain1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 119, 1, 3), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1dayMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1dayMean.setDescription('OSC gainaverage')
intervalPhysPerfCurrentOscGain1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 119, 1, 4), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1dayHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1dayHigh.setDescription('OSC gain high')
intervalPhysPerfCurrentOscGain1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 119, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1dayValidFlag.setDescription('Valid Flag')
intervalPhysPerfCurrentOscGain1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 119, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1dayTimeStamp.setDescription('Timestamp')
intervalPhysPerfCurrentOscGain1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 120), )
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1weekTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1weekTable.setDescription('')
intervalPhysPerfCurrentOscGain1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 120, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfCurrentOscGain1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1weekEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1weekEntry.setDescription('')
intervalPhysPerfCurrentOscGain1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 120, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1weekNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1weekNumber.setDescription('Number 1week')
intervalPhysPerfCurrentOscGain1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 120, 1, 2), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1weekLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1weekLow.setDescription('OSC gain low')
intervalPhysPerfCurrentOscGain1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 120, 1, 3), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1weekMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1weekMean.setDescription('OSC gainaverage')
intervalPhysPerfCurrentOscGain1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 120, 1, 4), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1weekHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1weekHigh.setDescription('OSC gain high')
intervalPhysPerfCurrentOscGain1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 120, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1weekValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1weekValidFlag.setDescription('Valid Flag')
intervalPhysPerfCurrentOscGain1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 120, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1weekTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCurrentOscGain1weekTimeStamp.setDescription('Timestamp')
intervalPhysPerfBackreflectionPwrRcv15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 121), )
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv15minTable.setDescription('')
intervalPhysPerfBackreflectionPwrRcv15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 121, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfBackreflectionPwrRcv15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv15minEntry.setDescription('')
intervalPhysPerfBackreflectionPwrRcv15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 121, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalPhysPerfBackreflectionPwrRcv15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 121, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv15minLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv15minLow.setDescription('Backreflection Received')
intervalPhysPerfBackreflectionPwrRcv15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 121, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv15minMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv15minMean.setDescription('Backreflection Received Average')
intervalPhysPerfBackreflectionPwrRcv15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 121, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv15minHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv15minHigh.setDescription('Backreflection Received High')
intervalPhysPerfBackreflectionPwrRcv15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 121, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv15minValidFlag.setDescription('Valid Flag')
intervalPhysPerfBackreflectionPwrRcv15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 121, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv15minTimeStamp.setDescription('Timestamp')
intervalPhysPerfBackreflectionPwrRcv1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 122), )
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1dayTable.setDescription('')
intervalPhysPerfBackreflectionPwrRcv1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 122, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfBackreflectionPwrRcv1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1dayEntry.setDescription('')
intervalPhysPerfBackreflectionPwrRcv1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 122, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalPhysPerfBackreflectionPwrRcv1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 122, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1dayLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1dayLow.setDescription('Backreflection Received')
intervalPhysPerfBackreflectionPwrRcv1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 122, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1dayMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1dayMean.setDescription('Backreflection Received Average')
intervalPhysPerfBackreflectionPwrRcv1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 122, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1dayHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1dayHigh.setDescription('Backreflection Received High')
intervalPhysPerfBackreflectionPwrRcv1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 122, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1dayValidFlag.setDescription('Valid Flag')
intervalPhysPerfBackreflectionPwrRcv1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 122, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1dayTimeStamp.setDescription('Timestamp')
intervalPhysPerfBackreflectionPwrRcv1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 123), )
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1weekTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1weekTable.setDescription('')
intervalPhysPerfBackreflectionPwrRcv1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 123, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfBackreflectionPwrRcv1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1weekEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1weekEntry.setDescription('')
intervalPhysPerfBackreflectionPwrRcv1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 123, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1weekNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1weekNumber.setDescription('Number 1week')
intervalPhysPerfBackreflectionPwrRcv1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 123, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1weekLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1weekLow.setDescription('Backreflection Received')
intervalPhysPerfBackreflectionPwrRcv1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 123, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1weekMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1weekMean.setDescription('Backreflection Received Average')
intervalPhysPerfBackreflectionPwrRcv1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 123, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1weekHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1weekHigh.setDescription('Backreflection Received High')
intervalPhysPerfBackreflectionPwrRcv1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 123, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1weekValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1weekValidFlag.setDescription('Valid Flag')
intervalPhysPerfBackreflectionPwrRcv1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 123, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1weekTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfBackreflectionPwrRcv1weekTimeStamp.setDescription('Timestamp')
intervalPhysPerfOscPwr15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 124), )
if mibBuilder.loadTexts: intervalPhysPerfOscPwr15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscPwr15minTable.setDescription('')
intervalPhysPerfOscPwr15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 124, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOscPwr15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOscPwr15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscPwr15minEntry.setDescription('')
intervalPhysPerfOscPwr15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 124, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfOscPwr15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscPwr15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalPhysPerfOscPwr15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 124, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr15minLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscPwr15minLow.setDescription('Optical Supervisory Channel Input Power Received Low')
intervalPhysPerfOscPwr15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 124, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr15minMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscPwr15minMean.setDescription('Optical Supervisory Channel Input Power Received Average')
intervalPhysPerfOscPwr15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 124, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr15minHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscPwr15minHigh.setDescription('Optical Supervisory Channel Input Power Received High')
intervalPhysPerfOscPwr15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 124, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscPwr15minValidFlag.setDescription('Valid Flag')
intervalPhysPerfOscPwr15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 124, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscPwr15minTimeStamp.setDescription('Timestamp')
intervalPhysPerfOscPwr1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 125), )
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1dayTable.setDescription('')
intervalPhysPerfOscPwr1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 125, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOscPwr1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1dayEntry.setDescription('')
intervalPhysPerfOscPwr1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 125, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalPhysPerfOscPwr1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 125, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1dayLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1dayLow.setDescription('Optical Supervisory Channel Input Power Received Low')
intervalPhysPerfOscPwr1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 125, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1dayMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1dayMean.setDescription('Optical Supervisory Channel Input Power Received Average')
intervalPhysPerfOscPwr1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 125, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1dayHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1dayHigh.setDescription('Optical Supervisory Channel Input Power Received High')
intervalPhysPerfOscPwr1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 125, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1dayValidFlag.setDescription('Valid Flag')
intervalPhysPerfOscPwr1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 125, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1dayTimeStamp.setDescription('Timestamp')
intervalPhysPerfOscPwr1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 126), )
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1weekTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1weekTable.setDescription('')
intervalPhysPerfOscPwr1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 126, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOscPwr1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1weekEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1weekEntry.setDescription('')
intervalPhysPerfOscPwr1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 126, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1weekNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1weekNumber.setDescription('Number 1week')
intervalPhysPerfOscPwr1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 126, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1weekLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1weekLow.setDescription('Optical Supervisory Channel Input Power Received Low')
intervalPhysPerfOscPwr1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 126, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1weekMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1weekMean.setDescription('Optical Supervisory Channel Input Power Received Average')
intervalPhysPerfOscPwr1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 126, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1weekHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1weekHigh.setDescription('Optical Supervisory Channel Input Power Received High')
intervalPhysPerfOscPwr1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 126, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1weekValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1weekValidFlag.setDescription('Valid Flag')
intervalPhysPerfOscPwr1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 126, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1weekTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscPwr1weekTimeStamp.setDescription('Timestamp')
intervalPhysPerfPumpPwr15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 127), )
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr15minTable.setDescription('')
intervalPhysPerfPumpPwr15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 127, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfPumpPwr15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr15minEntry.setDescription('')
intervalPhysPerfPumpPwr15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 127, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalPhysPerfPumpPwr15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 127, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr15minLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr15minLow.setDescription('Total raman pump power low')
intervalPhysPerfPumpPwr15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 127, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr15minMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr15minMean.setDescription('Backreflection Power Received Average')
intervalPhysPerfPumpPwr15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 127, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr15minHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr15minHigh.setDescription('Total raman pump power High')
intervalPhysPerfPumpPwr15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 127, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr15minValidFlag.setDescription('Valid Flag')
intervalPhysPerfPumpPwr15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 127, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr15minTimeStamp.setDescription('Timestamp')
intervalPhysPerfPumpPwr1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 128), )
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1dayTable.setDescription('')
intervalPhysPerfPumpPwr1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 128, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfPumpPwr1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1dayEntry.setDescription('')
intervalPhysPerfPumpPwr1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 128, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalPhysPerfPumpPwr1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 128, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1dayLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1dayLow.setDescription('Total raman pump power low')
intervalPhysPerfPumpPwr1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 128, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1dayMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1dayMean.setDescription('Backreflection Power Received Average')
intervalPhysPerfPumpPwr1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 128, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1dayHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1dayHigh.setDescription('Total raman pump power High')
intervalPhysPerfPumpPwr1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 128, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1dayValidFlag.setDescription('Valid Flag')
intervalPhysPerfPumpPwr1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 128, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1dayTimeStamp.setDescription('Timestamp')
intervalPhysPerfPumpPwr1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 129), )
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1weekTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1weekTable.setDescription('')
intervalPhysPerfPumpPwr1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 129, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfPumpPwr1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1weekEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1weekEntry.setDescription('')
intervalPhysPerfPumpPwr1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 129, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1weekNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1weekNumber.setDescription('Number 1week')
intervalPhysPerfPumpPwr1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 129, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1weekLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1weekLow.setDescription('Total raman pump power low')
intervalPhysPerfPumpPwr1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 129, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1weekMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1weekMean.setDescription('Backreflection Power Received Average')
intervalPhysPerfPumpPwr1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 129, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1weekHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1weekHigh.setDescription('Total raman pump power High')
intervalPhysPerfPumpPwr1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 129, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1weekValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1weekValidFlag.setDescription('Valid Flag')
intervalPhysPerfPumpPwr1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 129, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1weekTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfPumpPwr1weekTimeStamp.setDescription('Timestamp')
intervalDispersionCompensation15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 130), )
if mibBuilder.loadTexts: intervalDispersionCompensation15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalDispersionCompensation15minTable.setDescription('')
intervalDispersionCompensation15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 130, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalDispersionCompensation15minNumber"))
if mibBuilder.loadTexts: intervalDispersionCompensation15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalDispersionCompensation15minEntry.setDescription('')
intervalDispersionCompensation15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 130, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalDispersionCompensation15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalDispersionCompensation15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalDispersionCompensation15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 130, 1, 2), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation15minLow.setStatus('current')
if mibBuilder.loadTexts: intervalDispersionCompensation15minLow.setDescription('Chromatic Dispersion Compensation Low')
intervalDispersionCompensation15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 130, 1, 3), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation15minMean.setStatus('current')
if mibBuilder.loadTexts: intervalDispersionCompensation15minMean.setDescription('Chromatic Dispersion Compensation mean')
intervalDispersionCompensation15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 130, 1, 4), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation15minHigh.setStatus('current')
if mibBuilder.loadTexts: intervalDispersionCompensation15minHigh.setDescription('Chromatic Dispersion Compensation high')
intervalDispersionCompensation15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 130, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalDispersionCompensation15minValidFlag.setDescription('Valid Flag')
intervalDispersionCompensation15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 130, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalDispersionCompensation15minTimeStamp.setDescription('Timestamp')
intervalDispersionCompensation1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 131), )
if mibBuilder.loadTexts: intervalDispersionCompensation1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalDispersionCompensation1dayTable.setDescription('')
intervalDispersionCompensation1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 131, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalDispersionCompensation1dayNumber"))
if mibBuilder.loadTexts: intervalDispersionCompensation1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalDispersionCompensation1dayEntry.setDescription('')
intervalDispersionCompensation1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 131, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalDispersionCompensation1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalDispersionCompensation1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalDispersionCompensation1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 131, 1, 2), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation1dayLow.setStatus('current')
if mibBuilder.loadTexts: intervalDispersionCompensation1dayLow.setDescription('Chromatic Dispersion Compensation Low')
intervalDispersionCompensation1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 131, 1, 3), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation1dayMean.setStatus('current')
if mibBuilder.loadTexts: intervalDispersionCompensation1dayMean.setDescription('Chromatic Dispersion Compensation mean')
intervalDispersionCompensation1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 131, 1, 4), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation1dayHigh.setStatus('current')
if mibBuilder.loadTexts: intervalDispersionCompensation1dayHigh.setDescription('Chromatic Dispersion Compensation high')
intervalDispersionCompensation1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 131, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalDispersionCompensation1dayValidFlag.setDescription('Valid Flag')
intervalDispersionCompensation1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 131, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalDispersionCompensation1dayTimeStamp.setDescription('Timestamp')
intervalDispersionCompensation1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 132), )
if mibBuilder.loadTexts: intervalDispersionCompensation1weekTable.setStatus('current')
if mibBuilder.loadTexts: intervalDispersionCompensation1weekTable.setDescription('')
intervalDispersionCompensation1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 132, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalDispersionCompensation1weekNumber"))
if mibBuilder.loadTexts: intervalDispersionCompensation1weekEntry.setStatus('current')
if mibBuilder.loadTexts: intervalDispersionCompensation1weekEntry.setDescription('')
intervalDispersionCompensation1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 132, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalDispersionCompensation1weekNumber.setStatus('current')
if mibBuilder.loadTexts: intervalDispersionCompensation1weekNumber.setDescription('Number 1week')
intervalDispersionCompensation1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 132, 1, 2), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation1weekLow.setStatus('current')
if mibBuilder.loadTexts: intervalDispersionCompensation1weekLow.setDescription('Chromatic Dispersion Compensation Low')
intervalDispersionCompensation1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 132, 1, 3), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation1weekMean.setStatus('current')
if mibBuilder.loadTexts: intervalDispersionCompensation1weekMean.setDescription('Chromatic Dispersion Compensation mean')
intervalDispersionCompensation1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 132, 1, 4), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation1weekHigh.setStatus('current')
if mibBuilder.loadTexts: intervalDispersionCompensation1weekHigh.setDescription('Chromatic Dispersion Compensation high')
intervalDispersionCompensation1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 132, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation1weekValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalDispersionCompensation1weekValidFlag.setDescription('Valid Flag')
intervalDispersionCompensation1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 132, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDispersionCompensation1weekTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalDispersionCompensation1weekTimeStamp.setDescription('Timestamp')
intervalLinkAttenuation15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 133), )
if mibBuilder.loadTexts: intervalLinkAttenuation15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalLinkAttenuation15minTable.setDescription('')
intervalLinkAttenuation15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 133, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalLinkAttenuation15minNumber"))
if mibBuilder.loadTexts: intervalLinkAttenuation15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalLinkAttenuation15minEntry.setDescription('')
intervalLinkAttenuation15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 133, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalLinkAttenuation15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalLinkAttenuation15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalLinkAttenuation15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 133, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation15minLow.setStatus('current')
if mibBuilder.loadTexts: intervalLinkAttenuation15minLow.setDescription('Link attenuation low')
intervalLinkAttenuation15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 133, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation15minMean.setStatus('current')
if mibBuilder.loadTexts: intervalLinkAttenuation15minMean.setDescription('Link attenuation mean')
intervalLinkAttenuation15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 133, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation15minHigh.setStatus('current')
if mibBuilder.loadTexts: intervalLinkAttenuation15minHigh.setDescription('Link attenuation high')
intervalLinkAttenuation15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 133, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalLinkAttenuation15minValidFlag.setDescription('Valid Flag')
intervalLinkAttenuation15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 133, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalLinkAttenuation15minTimeStamp.setDescription('Timestamp')
intervalLinkAttenuation1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 134), )
if mibBuilder.loadTexts: intervalLinkAttenuation1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalLinkAttenuation1dayTable.setDescription('')
intervalLinkAttenuation1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 134, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalLinkAttenuation1dayNumber"))
if mibBuilder.loadTexts: intervalLinkAttenuation1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalLinkAttenuation1dayEntry.setDescription('')
intervalLinkAttenuation1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 134, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalLinkAttenuation1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalLinkAttenuation1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalLinkAttenuation1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 134, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation1dayLow.setStatus('current')
if mibBuilder.loadTexts: intervalLinkAttenuation1dayLow.setDescription('Link attenuation low')
intervalLinkAttenuation1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 134, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation1dayMean.setStatus('current')
if mibBuilder.loadTexts: intervalLinkAttenuation1dayMean.setDescription('Link attenuation mean')
intervalLinkAttenuation1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 134, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation1dayHigh.setStatus('current')
if mibBuilder.loadTexts: intervalLinkAttenuation1dayHigh.setDescription('Link attenuation high')
intervalLinkAttenuation1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 134, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalLinkAttenuation1dayValidFlag.setDescription('Valid Flag')
intervalLinkAttenuation1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 134, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalLinkAttenuation1dayTimeStamp.setDescription('Timestamp')
intervalLinkAttenuation1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 135), )
if mibBuilder.loadTexts: intervalLinkAttenuation1weekTable.setStatus('current')
if mibBuilder.loadTexts: intervalLinkAttenuation1weekTable.setDescription('')
intervalLinkAttenuation1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 135, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalLinkAttenuation1weekNumber"))
if mibBuilder.loadTexts: intervalLinkAttenuation1weekEntry.setStatus('current')
if mibBuilder.loadTexts: intervalLinkAttenuation1weekEntry.setDescription('')
intervalLinkAttenuation1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 135, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalLinkAttenuation1weekNumber.setStatus('current')
if mibBuilder.loadTexts: intervalLinkAttenuation1weekNumber.setDescription('Number 1week')
intervalLinkAttenuation1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 135, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation1weekLow.setStatus('current')
if mibBuilder.loadTexts: intervalLinkAttenuation1weekLow.setDescription('Link attenuation low')
intervalLinkAttenuation1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 135, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation1weekMean.setStatus('current')
if mibBuilder.loadTexts: intervalLinkAttenuation1weekMean.setDescription('Link attenuation mean')
intervalLinkAttenuation1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 135, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation1weekHigh.setStatus('current')
if mibBuilder.loadTexts: intervalLinkAttenuation1weekHigh.setDescription('Link attenuation high')
intervalLinkAttenuation1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 135, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation1weekValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalLinkAttenuation1weekValidFlag.setDescription('Valid Flag')
intervalLinkAttenuation1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 135, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLinkAttenuation1weekTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalLinkAttenuation1weekTimeStamp.setDescription('Timestamp')
currentL2EthRx15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136), )
if mibBuilder.loadTexts: currentL2EthRx15minTable.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx15minTable.setDescription('')
currentL2EthRx15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentL2EthRx15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx15minEntry.setDescription('')
currentL2EthRx15minFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minFramesRcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx15minFramesRcv.setDescription('Frames Received')
currentL2EthRx15minBytesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minBytesRcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx15minBytesRcv.setDescription('Bytes Received')
currentL2EthRx15minBroadcastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minBroadcastFramesRcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx15minBroadcastFramesRcv.setDescription('Broadcast Frames Received')
currentL2EthRx15minMulticastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minMulticastFramesRcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx15minMulticastFramesRcv.setDescription('Multicast Frames Received')
currentL2EthRx15minCrcErrorsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minCrcErrorsRcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx15minCrcErrorsRcv.setDescription('Received CRC Errors')
currentL2EthRx15minUndersizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minUndersizedFramesRcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx15minUndersizedFramesRcv.setDescription('Undersized Frames Received')
currentL2EthRx15minOversizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 7), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minOversizedFramesRcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx15minOversizedFramesRcv.setDescription('Oversized Frames Received')
currentL2EthRx15minPauseFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 8), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minPauseFramesRcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx15minPauseFramesRcv.setDescription('PAUSE Frames Received')
currentL2EthRx15minBytesFrames64Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 9), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minBytesFrames64Rcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx15minBytesFrames64Rcv.setDescription('64 Bytes Frames Received')
currentL2EthRx15minBytesFrames65Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 10), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minBytesFrames65Rcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx15minBytesFrames65Rcv.setDescription('65-127 Bytes Frames Received')
currentL2EthRx15minBytesFrames128Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 11), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minBytesFrames128Rcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx15minBytesFrames128Rcv.setDescription('128-255 Bytes Frames Received')
currentL2EthRx15minBytesFrames256Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 12), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minBytesFrames256Rcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx15minBytesFrames256Rcv.setDescription('256-511 Bytes Frames Received')
currentL2EthRx15minBytesFrames512Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 13), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minBytesFrames512Rcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx15minBytesFrames512Rcv.setDescription('512-1023 Bytes Frames Received')
currentL2EthRx15minBytesFrames1024Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 14), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minBytesFrames1024Rcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx15minBytesFrames1024Rcv.setDescription('1024-1518 Bytes Frames Received')
currentL2EthRx15minBytesFrames1519Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 15), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minBytesFrames1519Rcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx15minBytesFrames1519Rcv.setDescription('1519-MaxSize Bytes Frames Received')
currentL2EthRx15minInterPackJunkBytesFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 16), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minInterPackJunkBytesFramesRcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx15minInterPackJunkBytesFramesRcv.setDescription('InterPackJunk Bytes Frames Received (10Gbit/s only)')
currentL2EthRx15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 136, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx15minElapsedTime.setDescription('Elapsed 15Min')
currentL2EthRx1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137), )
if mibBuilder.loadTexts: currentL2EthRx1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx1dayTable.setDescription('')
currentL2EthRx1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentL2EthRx1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx1dayEntry.setDescription('')
currentL2EthRx1dayFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayFramesRcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx1dayFramesRcv.setDescription('Frames Received')
currentL2EthRx1dayBytesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayBytesRcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx1dayBytesRcv.setDescription('Bytes Received')
currentL2EthRx1dayBroadcastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayBroadcastFramesRcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx1dayBroadcastFramesRcv.setDescription('Broadcast Frames Received')
currentL2EthRx1dayMulticastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayMulticastFramesRcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx1dayMulticastFramesRcv.setDescription('Multicast Frames Received')
currentL2EthRx1dayCrcErrorsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayCrcErrorsRcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx1dayCrcErrorsRcv.setDescription('Received CRC Errors')
currentL2EthRx1dayUndersizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayUndersizedFramesRcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx1dayUndersizedFramesRcv.setDescription('Undersized Frames Received')
currentL2EthRx1dayOversizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 7), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayOversizedFramesRcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx1dayOversizedFramesRcv.setDescription('Oversized Frames Received')
currentL2EthRx1dayPauseFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 8), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayPauseFramesRcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx1dayPauseFramesRcv.setDescription('PAUSE Frames Received')
currentL2EthRx1dayBytesFrames64Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 9), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayBytesFrames64Rcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx1dayBytesFrames64Rcv.setDescription('64 Bytes Frames Received')
currentL2EthRx1dayBytesFrames65Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 10), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayBytesFrames65Rcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx1dayBytesFrames65Rcv.setDescription('65-127 Bytes Frames Received')
currentL2EthRx1dayBytesFrames128Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 11), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayBytesFrames128Rcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx1dayBytesFrames128Rcv.setDescription('128-255 Bytes Frames Received')
currentL2EthRx1dayBytesFrames256Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 12), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayBytesFrames256Rcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx1dayBytesFrames256Rcv.setDescription('256-511 Bytes Frames Received')
currentL2EthRx1dayBytesFrames512Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 13), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayBytesFrames512Rcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx1dayBytesFrames512Rcv.setDescription('512-1023 Bytes Frames Received')
currentL2EthRx1dayBytesFrames1024Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 14), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayBytesFrames1024Rcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx1dayBytesFrames1024Rcv.setDescription('1024-1518 Bytes Frames Received')
currentL2EthRx1dayBytesFrames1519Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 15), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayBytesFrames1519Rcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx1dayBytesFrames1519Rcv.setDescription('1519-MaxSize Bytes Frames Received')
currentL2EthRx1dayInterPackJunkBytesFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 16), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayInterPackJunkBytesFramesRcv.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx1dayInterPackJunkBytesFramesRcv.setDescription('InterPackJunk Bytes Frames Received (10Gbit/s only)')
currentL2EthRx1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 137, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthRx1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentL2EthRx1dayElapsedTime.setDescription('Elapsed 1Day')
intervalL2EthRx15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138), )
if mibBuilder.loadTexts: intervalL2EthRx15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx15minTable.setDescription('')
intervalL2EthRx15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalEthRx15minNumber"))
if mibBuilder.loadTexts: intervalL2EthRx15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx15minEntry.setDescription('')
intervalL2EthRx15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalL2EthRx15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalL2EthRx15minFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minFramesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx15minFramesRcv.setDescription('Frames Received')
intervalL2EthRx15minBytesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minBytesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx15minBytesRcv.setDescription('Bytes Received')
intervalL2EthRx15minBroadcastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minBroadcastFramesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx15minBroadcastFramesRcv.setDescription('Broadcast Frames Received')
intervalL2EthRx15minMulticastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minMulticastFramesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx15minMulticastFramesRcv.setDescription('Multicast Frames Received')
intervalL2EthRx15minCrcErrorsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minCrcErrorsRcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx15minCrcErrorsRcv.setDescription('Received CRC Errors')
intervalL2EthRx15minUndersizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 7), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minUndersizedFramesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx15minUndersizedFramesRcv.setDescription('Undersized Frames Received')
intervalL2EthRx15minOversizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 8), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minOversizedFramesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx15minOversizedFramesRcv.setDescription('Oversized Frames Received')
intervalL2EthRx15minPauseFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 9), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minPauseFramesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx15minPauseFramesRcv.setDescription('PAUSE Frames Received')
intervalL2EthRx15minBytesFrames64Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 10), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minBytesFrames64Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx15minBytesFrames64Rcv.setDescription('64 Bytes Frames Received')
intervalL2EthRx15minBytesFrames65Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 11), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minBytesFrames65Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx15minBytesFrames65Rcv.setDescription('65-127 Bytes Frames Received')
intervalL2EthRx15minBytesFrames128Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 12), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minBytesFrames128Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx15minBytesFrames128Rcv.setDescription('128-255 Bytes Frames Received')
intervalL2EthRx15minBytesFrames256Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 13), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minBytesFrames256Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx15minBytesFrames256Rcv.setDescription('256-511 Bytes Frames Received')
intervalL2EthRx15minBytesFrames512Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 14), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minBytesFrames512Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx15minBytesFrames512Rcv.setDescription('512-1023 Bytes Frames Received')
intervalL2EthRx15minBytesFrames1024Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 15), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minBytesFrames1024Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx15minBytesFrames1024Rcv.setDescription('1024-1518 Bytes Frames Received')
intervalL2EthRx15minBytesFrames1519Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 16), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minBytesFrames1519Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx15minBytesFrames1519Rcv.setDescription('1519-MaxSize Bytes Frames Received')
intervalL2EthRx15minInterPackJunkBytesFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 17), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minInterPackJunkBytesFramesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx15minInterPackJunkBytesFramesRcv.setDescription('InterPackJunk Bytes Frames Received (10Gbit/s only)')
intervalL2EthRx15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx15minValidFlag.setDescription('Valid Flag')
intervalL2EthRx15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 138, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx15minTimeStamp.setDescription('Timestamp')
intervalL2EthRx1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139), )
if mibBuilder.loadTexts: intervalL2EthRx1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx1dayTable.setDescription('')
intervalL2EthRx1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalEthRx1dayNumber"))
if mibBuilder.loadTexts: intervalL2EthRx1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx1dayEntry.setDescription('')
intervalL2EthRx1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalL2EthRx1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalL2EthRx1dayFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayFramesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx1dayFramesRcv.setDescription('Frames Received')
intervalL2EthRx1dayBytesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayBytesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx1dayBytesRcv.setDescription('Bytes Received')
intervalL2EthRx1dayBroadcastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayBroadcastFramesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx1dayBroadcastFramesRcv.setDescription('Broadcast Frames Received')
intervalL2EthRx1dayMulticastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayMulticastFramesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx1dayMulticastFramesRcv.setDescription('Multicast Frames Received')
intervalL2EthRx1dayCrcErrorsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayCrcErrorsRcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx1dayCrcErrorsRcv.setDescription('Received CRC Errors')
intervalL2EthRx1dayUndersizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 7), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayUndersizedFramesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx1dayUndersizedFramesRcv.setDescription('Undersized Frames Received')
intervalL2EthRx1dayOversizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 8), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayOversizedFramesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx1dayOversizedFramesRcv.setDescription('Oversized Frames Received')
intervalL2EthRx1dayPauseFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 9), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayPauseFramesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx1dayPauseFramesRcv.setDescription('PAUSE Frames Received')
intervalL2EthRx1dayBytesFrames64Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 10), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayBytesFrames64Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx1dayBytesFrames64Rcv.setDescription('64 Bytes Frames Received')
intervalL2EthRx1dayBytesFrames65Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 11), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayBytesFrames65Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx1dayBytesFrames65Rcv.setDescription('65-127 Bytes Frames Received')
intervalL2EthRx1dayBytesFrames128Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 12), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayBytesFrames128Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx1dayBytesFrames128Rcv.setDescription('128-255 Bytes Frames Received')
intervalL2EthRx1dayBytesFrames256Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 13), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayBytesFrames256Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx1dayBytesFrames256Rcv.setDescription('256-511 Bytes Frames Received')
intervalL2EthRx1dayBytesFrames512Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 14), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayBytesFrames512Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx1dayBytesFrames512Rcv.setDescription('512-1023 Bytes Frames Received')
intervalL2EthRx1dayBytesFrames1024Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 15), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayBytesFrames1024Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx1dayBytesFrames1024Rcv.setDescription('1024-1518 Bytes Frames Received')
intervalL2EthRx1dayBytesFrames1519Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 16), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayBytesFrames1519Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx1dayBytesFrames1519Rcv.setDescription('1519-MaxSize Bytes Frames Received')
intervalL2EthRx1dayInterPackJunkBytesFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 17), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayInterPackJunkBytesFramesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx1dayInterPackJunkBytesFramesRcv.setDescription('InterPackJunk Bytes Frames Received (10Gbit/s only)')
intervalL2EthRx1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx1dayValidFlag.setDescription('Valid Flag')
intervalL2EthRx1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 139, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthRx1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthRx1dayTimeStamp.setDescription('Timestamp')
currentL2EthTx15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140), )
if mibBuilder.loadTexts: currentL2EthTx15minTable.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx15minTable.setDescription('')
currentL2EthTx15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentL2EthTx15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx15minEntry.setDescription('')
currentL2EthTx15minFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minFramesTrmt.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx15minFramesTrmt.setDescription('Frames Transmitted')
currentL2EthTx15minBytesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minBytesTrmt.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx15minBytesTrmt.setDescription('Transmitted Bytes')
currentL2EthTx15minBroadcastFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minBroadcastFramesTrmt.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx15minBroadcastFramesTrmt.setDescription('Broadcast Frames Received')
currentL2EthTx15minMulticastFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minMulticastFramesTrmt.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx15minMulticastFramesTrmt.setDescription('Multicast Frames Received')
currentL2EthTx15minPauseFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minPauseFramesTrmt.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx15minPauseFramesTrmt.setDescription('PAUSE Frames Transmitted')
currentL2EthTx15minBytesFrames64Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minBytesFrames64Trmt.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx15minBytesFrames64Trmt.setDescription('64 Bytes Frames Received')
currentL2EthTx15minBytesFrames65Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 7), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minBytesFrames65Trmt.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx15minBytesFrames65Trmt.setDescription('65-127 Bytes Frames Received')
currentL2EthTx15minBytesFrames128Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 8), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minBytesFrames128Trmt.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx15minBytesFrames128Trmt.setDescription('128-255 Bytes Frames Received')
currentL2EthTx15minBytesFrames256Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 9), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minBytesFrames256Trmt.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx15minBytesFrames256Trmt.setDescription('256-511 Bytes Frames Received')
currentL2EthTx15minBytesFrames512Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 10), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minBytesFrames512Trmt.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx15minBytesFrames512Trmt.setDescription('512-1023 Bytes Frames Received')
currentL2EthTx15minBytesFrames1024Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 11), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minBytesFrames1024Trmt.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx15minBytesFrames1024Trmt.setDescription('1024-1518 Bytes Frames Received')
currentL2EthTx15minBytesFrames1519Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 12), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minBytesFrames1519Trmt.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx15minBytesFrames1519Trmt.setDescription('1519-MaxSize Bytes Frames Received')
currentL2EthTx15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 140, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx15minElapsedTime.setDescription('Elapsed 15Min')
currentL2EthTx1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141), )
if mibBuilder.loadTexts: currentL2EthTx1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx1dayTable.setDescription('')
currentL2EthTx1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentL2EthTx1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx1dayEntry.setDescription('')
currentL2EthTx1dayFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayFramesTrmt.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx1dayFramesTrmt.setDescription('Frames Transmitted')
currentL2EthTx1dayBytesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayBytesTrmt.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx1dayBytesTrmt.setDescription('Transmitted Bytes')
currentL2EthTx1dayBroadcastFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayBroadcastFramesTrmt.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx1dayBroadcastFramesTrmt.setDescription('Broadcast Frames Received')
currentL2EthTx1dayMulticastFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayMulticastFramesTrmt.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx1dayMulticastFramesTrmt.setDescription('Multicast Frames Received')
currentL2EthTx1dayPauseFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayPauseFramesTrmt.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx1dayPauseFramesTrmt.setDescription('PAUSE Frames Transmitted')
currentL2EthTx1dayBytesFrames64Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayBytesFrames64Trmt.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx1dayBytesFrames64Trmt.setDescription('64 Bytes Frames Received')
currentL2EthTx1dayBytesFrames65Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 7), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayBytesFrames65Trmt.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx1dayBytesFrames65Trmt.setDescription('65-127 Bytes Frames Received')
currentL2EthTx1dayBytesFrames128Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 8), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayBytesFrames128Trmt.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx1dayBytesFrames128Trmt.setDescription('128-255 Bytes Frames Received')
currentL2EthTx1dayBytesFrames256Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 9), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayBytesFrames256Trmt.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx1dayBytesFrames256Trmt.setDescription('256-511 Bytes Frames Received')
currentL2EthTx1dayBytesFrames512Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 10), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayBytesFrames512Trmt.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx1dayBytesFrames512Trmt.setDescription('512-1023 Bytes Frames Received')
currentL2EthTx1dayBytesFrames1024Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 11), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayBytesFrames1024Trmt.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx1dayBytesFrames1024Trmt.setDescription('1024-1518 Bytes Frames Received')
currentL2EthTx1dayBytesFrames1519Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 12), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayBytesFrames1519Trmt.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx1dayBytesFrames1519Trmt.setDescription('1519-MaxSize Bytes Frames Received')
currentL2EthTx1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 141, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentL2EthTx1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentL2EthTx1dayElapsedTime.setDescription('Elapsed 1Day')
intervalL2EthTx15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142), )
if mibBuilder.loadTexts: intervalL2EthTx15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx15minTable.setDescription('')
intervalL2EthTx15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalEthTx15minNumber"))
if mibBuilder.loadTexts: intervalL2EthTx15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx15minEntry.setDescription('')
intervalL2EthTx15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalL2EthTx15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalL2EthTx15minFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minFramesTrmt.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx15minFramesTrmt.setDescription('Frames Transmitted')
intervalL2EthTx15minBytesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minBytesTrmt.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx15minBytesTrmt.setDescription('Transmitted Bytes')
intervalL2EthTx15minBroadcastFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minBroadcastFramesTrmt.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx15minBroadcastFramesTrmt.setDescription('Broadcast Frames Received')
intervalL2EthTx15minMulticastFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minMulticastFramesTrmt.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx15minMulticastFramesTrmt.setDescription('Multicast Frames Received')
intervalL2EthTx15minPauseFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minPauseFramesTrmt.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx15minPauseFramesTrmt.setDescription('PAUSE Frames Transmitted')
intervalL2EthTx15minBytesFrames64Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 7), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minBytesFrames64Trmt.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx15minBytesFrames64Trmt.setDescription('64 Bytes Frames Received')
intervalL2EthTx15minBytesFrames65Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 8), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minBytesFrames65Trmt.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx15minBytesFrames65Trmt.setDescription('65-127 Bytes Frames Received')
intervalL2EthTx15minBytesFrames128Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 9), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minBytesFrames128Trmt.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx15minBytesFrames128Trmt.setDescription('128-255 Bytes Frames Received')
intervalL2EthTx15minBytesFrames256Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 10), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minBytesFrames256Trmt.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx15minBytesFrames256Trmt.setDescription('256-511 Bytes Frames Received')
intervalL2EthTx15minBytesFrames512Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 11), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minBytesFrames512Trmt.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx15minBytesFrames512Trmt.setDescription('512-1023 Bytes Frames Received')
intervalL2EthTx15minBytesFrames1024Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 12), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minBytesFrames1024Trmt.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx15minBytesFrames1024Trmt.setDescription('1024-1518 Bytes Frames Received')
intervalL2EthTx15minBytesFrames1519Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 13), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minBytesFrames1519Trmt.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx15minBytesFrames1519Trmt.setDescription('1519-MaxSize Bytes Frames Received')
intervalL2EthTx15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx15minValidFlag.setDescription('Valid Flag')
intervalL2EthTx15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 142, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx15minTimeStamp.setDescription('Timestamp')
intervalL2EthTx1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143), )
if mibBuilder.loadTexts: intervalL2EthTx1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx1dayTable.setDescription('')
intervalL2EthTx1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalEthTx1dayNumber"))
if mibBuilder.loadTexts: intervalL2EthTx1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx1dayEntry.setDescription('')
intervalL2EthTx1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalL2EthTx1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalL2EthTx1dayFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayFramesTrmt.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx1dayFramesTrmt.setDescription('Frames Transmitted')
intervalL2EthTx1dayBytesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayBytesTrmt.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx1dayBytesTrmt.setDescription('Transmitted Bytes')
intervalL2EthTx1dayBroadcastFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayBroadcastFramesTrmt.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx1dayBroadcastFramesTrmt.setDescription('Broadcast Frames Received')
intervalL2EthTx1dayMulticastFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayMulticastFramesTrmt.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx1dayMulticastFramesTrmt.setDescription('Multicast Frames Received')
intervalL2EthTx1dayPauseFramesTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayPauseFramesTrmt.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx1dayPauseFramesTrmt.setDescription('PAUSE Frames Transmitted')
intervalL2EthTx1dayBytesFrames64Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 7), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayBytesFrames64Trmt.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx1dayBytesFrames64Trmt.setDescription('64 Bytes Frames Received')
intervalL2EthTx1dayBytesFrames65Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 8), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayBytesFrames65Trmt.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx1dayBytesFrames65Trmt.setDescription('65-127 Bytes Frames Received')
intervalL2EthTx1dayBytesFrames128Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 9), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayBytesFrames128Trmt.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx1dayBytesFrames128Trmt.setDescription('128-255 Bytes Frames Received')
intervalL2EthTx1dayBytesFrames256Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 10), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayBytesFrames256Trmt.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx1dayBytesFrames256Trmt.setDescription('256-511 Bytes Frames Received')
intervalL2EthTx1dayBytesFrames512Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 11), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayBytesFrames512Trmt.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx1dayBytesFrames512Trmt.setDescription('512-1023 Bytes Frames Received')
intervalL2EthTx1dayBytesFrames1024Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 12), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayBytesFrames1024Trmt.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx1dayBytesFrames1024Trmt.setDescription('1024-1518 Bytes Frames Received')
intervalL2EthTx1dayBytesFrames1519Trmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 13), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayBytesFrames1519Trmt.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx1dayBytesFrames1519Trmt.setDescription('1519-MaxSize Bytes Frames Received')
intervalL2EthTx1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx1dayValidFlag.setDescription('Valid Flag')
intervalL2EthTx1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 143, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalL2EthTx1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalL2EthTx1dayTimeStamp.setDescription('Timestamp')
intervalFarEndPhysPerfOpticalInputPwr15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 144), )
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr15minTable.setDescription('')
intervalFarEndPhysPerfOpticalInputPwr15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 144, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOpticalInputPwr15minNumber"))
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr15minEntry.setDescription('')
intervalFarEndPhysPerfOpticalInputPwr15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 144, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalFarEndPhysPerfOpticalInputPwr15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 144, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr15minLow.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr15minLow.setDescription('Optical Input Power Received')
intervalFarEndPhysPerfOpticalInputPwr15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 144, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr15minMean.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr15minMean.setDescription('Optical Input Power Received')
intervalFarEndPhysPerfOpticalInputPwr15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 144, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr15minHigh.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr15minHigh.setDescription('Optical Input Power Received')
intervalFarEndPhysPerfOpticalInputPwr15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 144, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr15minValidFlag.setDescription('Valid Flag')
intervalFarEndPhysPerfOpticalInputPwr15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 144, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr15minTimeStamp.setDescription('Timestamp')
intervalFarEndPhysPerfOpticalInputPwr1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 145), )
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1dayTable.setDescription('')
intervalFarEndPhysPerfOpticalInputPwr1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 145, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOpticalInputPwr1dayNumber"))
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1dayEntry.setDescription('')
intervalFarEndPhysPerfOpticalInputPwr1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 145, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalFarEndPhysPerfOpticalInputPwr1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 145, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1dayLow.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1dayLow.setDescription('Optical Input Power Received')
intervalFarEndPhysPerfOpticalInputPwr1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 145, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1dayMean.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1dayMean.setDescription('Optical Input Power Received')
intervalFarEndPhysPerfOpticalInputPwr1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 145, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1dayHigh.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1dayHigh.setDescription('Optical Input Power Received')
intervalFarEndPhysPerfOpticalInputPwr1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 145, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1dayValidFlag.setDescription('Valid Flag')
intervalFarEndPhysPerfOpticalInputPwr1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 145, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1dayTimeStamp.setDescription('Timestamp')
intervalFarEndPhysPerfOpticalInputPwr1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 146), )
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1weekTable.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1weekTable.setDescription('')
intervalFarEndPhysPerfOpticalInputPwr1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 146, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOpticalInputPwr1weekNumber"))
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1weekEntry.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1weekEntry.setDescription('')
intervalFarEndPhysPerfOpticalInputPwr1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 146, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1weekNumber.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1weekNumber.setDescription('Number 1week')
intervalFarEndPhysPerfOpticalInputPwr1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 146, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1weekLow.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1weekLow.setDescription('Optical Input Power Received')
intervalFarEndPhysPerfOpticalInputPwr1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 146, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1weekMean.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1weekMean.setDescription('Optical Input Power Received')
intervalFarEndPhysPerfOpticalInputPwr1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 146, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1weekHigh.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1weekHigh.setDescription('Optical Input Power Received')
intervalFarEndPhysPerfOpticalInputPwr1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 146, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1weekValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1weekValidFlag.setDescription('Valid Flag')
intervalFarEndPhysPerfOpticalInputPwr1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 146, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1weekTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalInputPwr1weekTimeStamp.setDescription('Timestamp')
intervalFarEndPhysPerfOpticalOutputPwr15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 147), )
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr15minTable.setDescription('')
intervalFarEndPhysPerfOpticalOutputPwr15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 147, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOpticalOutputPwr15minNumber"))
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr15minEntry.setDescription('')
intervalFarEndPhysPerfOpticalOutputPwr15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 147, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalFarEndPhysPerfOpticalOutputPwr15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 147, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr15minLow.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr15minLow.setDescription('Optical Output Power Transmitted')
intervalFarEndPhysPerfOpticalOutputPwr15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 147, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr15minMean.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr15minMean.setDescription('Optical Output Power Transmitted')
intervalFarEndPhysPerfOpticalOutputPwr15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 147, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr15minHigh.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr15minHigh.setDescription('Optical Output Power Transmitted')
intervalFarEndPhysPerfOpticalOutputPwr15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 147, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr15minValidFlag.setDescription('Valid Flag')
intervalFarEndPhysPerfOpticalOutputPwr15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 147, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr15minTimeStamp.setDescription('Timestamp')
intervalFarEndPhysPerfOpticalOutputPwr1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 148), )
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1dayTable.setDescription('')
intervalFarEndPhysPerfOpticalOutputPwr1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 148, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOpticalOutputPwr1dayNumber"))
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1dayEntry.setDescription('')
intervalFarEndPhysPerfOpticalOutputPwr1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 148, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalFarEndPhysPerfOpticalOutputPwr1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 148, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1dayLow.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1dayLow.setDescription('Optical Output Power Transmitted')
intervalFarEndPhysPerfOpticalOutputPwr1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 148, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1dayMean.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1dayMean.setDescription('Optical Output Power Transmitted')
intervalFarEndPhysPerfOpticalOutputPwr1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 148, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1dayHigh.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1dayHigh.setDescription('Optical Output Power Transmitted')
intervalFarEndPhysPerfOpticalOutputPwr1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 148, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1dayValidFlag.setDescription('Valid Flag')
intervalFarEndPhysPerfOpticalOutputPwr1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 148, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1dayTimeStamp.setDescription('Timestamp')
intervalFarEndPhysPerfOpticalOutputPwr1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 149), )
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1weekTable.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1weekTable.setDescription('')
intervalFarEndPhysPerfOpticalOutputPwr1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 149, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOpticalOutputPwr1weekNumber"))
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1weekEntry.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1weekEntry.setDescription('')
intervalFarEndPhysPerfOpticalOutputPwr1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 149, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1weekNumber.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1weekNumber.setDescription('Number 1week')
intervalFarEndPhysPerfOpticalOutputPwr1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 149, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1weekLow.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1weekLow.setDescription('Optical Output Power Transmitted')
intervalFarEndPhysPerfOpticalOutputPwr1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 149, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1weekMean.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1weekMean.setDescription('Optical Output Power Transmitted')
intervalFarEndPhysPerfOpticalOutputPwr1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 149, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1weekHigh.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1weekHigh.setDescription('Optical Output Power Transmitted')
intervalFarEndPhysPerfOpticalOutputPwr1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 149, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1weekValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1weekValidFlag.setDescription('Valid Flag')
intervalFarEndPhysPerfOpticalOutputPwr1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 149, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1weekTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalFarEndPhysPerfOpticalOutputPwr1weekTimeStamp.setDescription('Timestamp')
intervalLatency15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 150), )
if mibBuilder.loadTexts: intervalLatency15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalLatency15minTable.setDescription('')
intervalLatency15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 150, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalLatency15minNumber"))
if mibBuilder.loadTexts: intervalLatency15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalLatency15minEntry.setDescription('')
intervalLatency15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 150, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalLatency15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalLatency15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalLatency15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 150, 1, 2), Unsigned32()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency15minLow.setStatus('current')
if mibBuilder.loadTexts: intervalLatency15minLow.setDescription('Measured round trip delay')
intervalLatency15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 150, 1, 3), Unsigned32()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency15minMean.setStatus('current')
if mibBuilder.loadTexts: intervalLatency15minMean.setDescription('Measured round trip delay')
intervalLatency15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 150, 1, 4), Unsigned32()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency15minHigh.setStatus('current')
if mibBuilder.loadTexts: intervalLatency15minHigh.setDescription('Measured round trip delay')
intervalLatency15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 150, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalLatency15minValidFlag.setDescription('Valid Flag')
intervalLatency15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 150, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalLatency15minTimeStamp.setDescription('Timestamp')
intervalLatency1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 151), )
if mibBuilder.loadTexts: intervalLatency1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalLatency1dayTable.setDescription('')
intervalLatency1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 151, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalLatency1dayNumber"))
if mibBuilder.loadTexts: intervalLatency1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalLatency1dayEntry.setDescription('')
intervalLatency1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 151, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalLatency1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalLatency1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalLatency1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 151, 1, 2), Unsigned32()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency1dayLow.setStatus('current')
if mibBuilder.loadTexts: intervalLatency1dayLow.setDescription('Measured round trip delay')
intervalLatency1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 151, 1, 3), Unsigned32()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency1dayMean.setStatus('current')
if mibBuilder.loadTexts: intervalLatency1dayMean.setDescription('Measured round trip delay')
intervalLatency1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 151, 1, 4), Unsigned32()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency1dayHigh.setStatus('current')
if mibBuilder.loadTexts: intervalLatency1dayHigh.setDescription('Measured round trip delay')
intervalLatency1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 151, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalLatency1dayValidFlag.setDescription('Valid Flag')
intervalLatency1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 151, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalLatency1dayTimeStamp.setDescription('Timestamp')
intervalLatency1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 152), )
if mibBuilder.loadTexts: intervalLatency1weekTable.setStatus('current')
if mibBuilder.loadTexts: intervalLatency1weekTable.setDescription('')
intervalLatency1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 152, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalLatency1weekNumber"))
if mibBuilder.loadTexts: intervalLatency1weekEntry.setStatus('current')
if mibBuilder.loadTexts: intervalLatency1weekEntry.setDescription('')
intervalLatency1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 152, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalLatency1weekNumber.setStatus('current')
if mibBuilder.loadTexts: intervalLatency1weekNumber.setDescription('Number 1week')
intervalLatency1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 152, 1, 2), Unsigned32()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency1weekLow.setStatus('current')
if mibBuilder.loadTexts: intervalLatency1weekLow.setDescription('Measured round trip delay')
intervalLatency1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 152, 1, 3), Unsigned32()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency1weekMean.setStatus('current')
if mibBuilder.loadTexts: intervalLatency1weekMean.setDescription('Measured round trip delay')
intervalLatency1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 152, 1, 4), Unsigned32()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency1weekHigh.setStatus('current')
if mibBuilder.loadTexts: intervalLatency1weekHigh.setDescription('Measured round trip delay')
intervalLatency1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 152, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency1weekValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalLatency1weekValidFlag.setDescription('Valid Flag')
intervalLatency1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 152, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalLatency1weekTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalLatency1weekTimeStamp.setDescription('Timestamp')
intervalRoundTripDelay15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 153), )
if mibBuilder.loadTexts: intervalRoundTripDelay15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalRoundTripDelay15minTable.setDescription('')
intervalRoundTripDelay15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 153, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalRoundTripDelay15minNumber"))
if mibBuilder.loadTexts: intervalRoundTripDelay15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalRoundTripDelay15minEntry.setDescription('')
intervalRoundTripDelay15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 153, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalRoundTripDelay15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalRoundTripDelay15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalRoundTripDelay15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 153, 1, 2), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay15minLow.setStatus('current')
if mibBuilder.loadTexts: intervalRoundTripDelay15minLow.setDescription('Measured round trip delay low')
intervalRoundTripDelay15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 153, 1, 3), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay15minMean.setStatus('current')
if mibBuilder.loadTexts: intervalRoundTripDelay15minMean.setDescription('Measured round trip delay mean')
intervalRoundTripDelay15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 153, 1, 4), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay15minHigh.setStatus('current')
if mibBuilder.loadTexts: intervalRoundTripDelay15minHigh.setDescription('Measured round trip delay high')
intervalRoundTripDelay15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 153, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalRoundTripDelay15minValidFlag.setDescription('Valid Flag')
intervalRoundTripDelay15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 153, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalRoundTripDelay15minTimeStamp.setDescription('Timestamp')
intervalRoundTripDelay1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 154), )
if mibBuilder.loadTexts: intervalRoundTripDelay1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalRoundTripDelay1dayTable.setDescription('')
intervalRoundTripDelay1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 154, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalRoundTripDelay1dayNumber"))
if mibBuilder.loadTexts: intervalRoundTripDelay1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalRoundTripDelay1dayEntry.setDescription('')
intervalRoundTripDelay1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 154, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalRoundTripDelay1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalRoundTripDelay1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalRoundTripDelay1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 154, 1, 2), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay1dayLow.setStatus('current')
if mibBuilder.loadTexts: intervalRoundTripDelay1dayLow.setDescription('Measured round trip delay low')
intervalRoundTripDelay1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 154, 1, 3), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay1dayMean.setStatus('current')
if mibBuilder.loadTexts: intervalRoundTripDelay1dayMean.setDescription('Measured round trip delay mean')
intervalRoundTripDelay1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 154, 1, 4), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay1dayHigh.setStatus('current')
if mibBuilder.loadTexts: intervalRoundTripDelay1dayHigh.setDescription('Measured round trip delay high')
intervalRoundTripDelay1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 154, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalRoundTripDelay1dayValidFlag.setDescription('Valid Flag')
intervalRoundTripDelay1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 154, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalRoundTripDelay1dayTimeStamp.setDescription('Timestamp')
intervalRoundTripDelay1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 155), )
if mibBuilder.loadTexts: intervalRoundTripDelay1weekTable.setStatus('current')
if mibBuilder.loadTexts: intervalRoundTripDelay1weekTable.setDescription('')
intervalRoundTripDelay1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 155, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalRoundTripDelay1weekNumber"))
if mibBuilder.loadTexts: intervalRoundTripDelay1weekEntry.setStatus('current')
if mibBuilder.loadTexts: intervalRoundTripDelay1weekEntry.setDescription('')
intervalRoundTripDelay1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 155, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalRoundTripDelay1weekNumber.setStatus('current')
if mibBuilder.loadTexts: intervalRoundTripDelay1weekNumber.setDescription('Number 1week')
intervalRoundTripDelay1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 155, 1, 2), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay1weekLow.setStatus('current')
if mibBuilder.loadTexts: intervalRoundTripDelay1weekLow.setDescription('Measured round trip delay low')
intervalRoundTripDelay1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 155, 1, 3), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay1weekMean.setStatus('current')
if mibBuilder.loadTexts: intervalRoundTripDelay1weekMean.setDescription('Measured round trip delay mean')
intervalRoundTripDelay1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 155, 1, 4), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay1weekHigh.setStatus('current')
if mibBuilder.loadTexts: intervalRoundTripDelay1weekHigh.setDescription('Measured round trip delay high')
intervalRoundTripDelay1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 155, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay1weekValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalRoundTripDelay1weekValidFlag.setDescription('Valid Flag')
intervalRoundTripDelay1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 155, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalRoundTripDelay1weekTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalRoundTripDelay1weekTimeStamp.setDescription('Timestamp')
currentPmSnapshotTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156), )
if mibBuilder.loadTexts: currentPmSnapshotTable.setStatus('current')
if mibBuilder.loadTexts: currentPmSnapshotTable.setDescription('')
currentPmSnapshotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentPmSnapshotEntry.setStatus('current')
if mibBuilder.loadTexts: currentPmSnapshotEntry.setDescription('')
currentPmSnapshotOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156, 1, 1), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPmSnapshotOutputPower.setStatus('current')
if mibBuilder.loadTexts: currentPmSnapshotOutputPower.setDescription('Instantaneous Optical Power Transmitted (Output)')
currentPmSnapshotInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPmSnapshotInputPower.setStatus('current')
if mibBuilder.loadTexts: currentPmSnapshotInputPower.setDescription('Total Optical Input Power Received')
currentPmSnapshotAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPmSnapshotAttenuation.setStatus('current')
if mibBuilder.loadTexts: currentPmSnapshotAttenuation.setDescription('The attenuation in dB from the TRMT of the 1st stage to the RCV of the 2nd stage.')
currentPmSnapshotAttenuationOfVoa = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156, 1, 4), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPmSnapshotAttenuationOfVoa.setStatus('current')
if mibBuilder.loadTexts: currentPmSnapshotAttenuationOfVoa.setDescription('The attenuation of VOA in dB')
currentPmSnapshotOscGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156, 1, 5), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPmSnapshotOscGain.setStatus('current')
if mibBuilder.loadTexts: currentPmSnapshotOscGain.setDescription('Current Raman OSC gain')
currentPmSnapshotBackreflectionPowerReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156, 1, 6), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPmSnapshotBackreflectionPowerReceived.setStatus('current')
if mibBuilder.loadTexts: currentPmSnapshotBackreflectionPowerReceived.setDescription('Backreflection Received Current')
currentPmSnapshotRamanPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156, 1, 7), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPmSnapshotRamanPumpPower.setStatus('current')
if mibBuilder.loadTexts: currentPmSnapshotRamanPumpPower.setDescription('Total raman pump power')
currentPmSnapshotOscPowerReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156, 1, 8), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPmSnapshotOscPowerReceived.setStatus('current')
if mibBuilder.loadTexts: currentPmSnapshotOscPowerReceived.setDescription('Optical Supervisory Channel Input Power Received Current')
currentPmSnapshotVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156, 1, 9), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPmSnapshotVariableGain.setStatus('current')
if mibBuilder.loadTexts: currentPmSnapshotVariableGain.setDescription('Variable Gain of EDFA')
currentPmSnapshotTxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156, 1, 10), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPmSnapshotTxLineAttenuation.setStatus('current')
if mibBuilder.loadTexts: currentPmSnapshotTxLineAttenuation.setDescription('Attenuation on Transmit Fiber')
currentPmSnapshotRxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 156, 1, 11), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPmSnapshotRxLineAttenuation.setStatus('current')
if mibBuilder.loadTexts: currentPmSnapshotRxLineAttenuation.setDescription('Instantaneous Attenuation on Receive Fiber')
intervalPmSnapshotTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 157), )
if mibBuilder.loadTexts: intervalPmSnapshotTable.setStatus('current')
if mibBuilder.loadTexts: intervalPmSnapshotTable.setDescription('')
intervalPmSnapshotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 157, 1), ).setIndexNames((0, "FspR7-MIB", "intervalPmSnapshotParameter"), (0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPmSnapshotNumber"))
if mibBuilder.loadTexts: intervalPmSnapshotEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPmSnapshotEntry.setDescription('')
intervalPmSnapshotParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 157, 1, 1), FspR7PmSnapshotParameterTypes())
if mibBuilder.loadTexts: intervalPmSnapshotParameter.setStatus('current')
if mibBuilder.loadTexts: intervalPmSnapshotParameter.setDescription('Index representing the PM parameter')
intervalPmSnapshotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 157, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: intervalPmSnapshotNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPmSnapshotNumber.setDescription('Record number of optical power reference level')
intervalPmSnapshotValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 157, 1, 3), Integer32()).setUnits('0.1').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPmSnapshotValue.setStatus('current')
if mibBuilder.loadTexts: intervalPmSnapshotValue.setDescription("Different units are used for specific parameters (intervalPmSnapshotParameter - the first index of the table):\n         'dBm' for OutputPower, InputPower, RamanPumpPower, OscPowerReceived;\n         'dB' for Attenuation, AttenuationOfVoa, OscGain, BackreflectionPowerReceived, TxLineAttenuation, RxLineAttenuation;\n         'no unit' for VariableGain.")
intervalPmSnapshotValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 157, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPmSnapshotValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPmSnapshotValidFlag.setDescription('Valid Flag')
intervalPmSnapshotTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 157, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPmSnapshotTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPmSnapshotTimeStamp.setDescription('Timestamp')
intervalPhysPerfOscOpticalOutputPwr15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 158), )
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr15minTable.setDescription('')
intervalPhysPerfOscOpticalOutputPwr15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 158, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOscOpticalOutputPwr15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr15minEntry.setDescription('')
intervalPhysPerfOscOpticalOutputPwr15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 158, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalPhysPerfOscOpticalOutputPwr15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 158, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr15minLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr15minLow.setDescription('OSC Optical Output Power Transmitted')
intervalPhysPerfOscOpticalOutputPwr15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 158, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr15minMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr15minMean.setDescription('OSC Optical Output Power Transmitted')
intervalPhysPerfOscOpticalOutputPwr15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 158, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr15minHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr15minHigh.setDescription('OSC Optical Output Power Transmitted')
intervalPhysPerfOscOpticalOutputPwr15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 158, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr15minValidFlag.setDescription('Valid Flag')
intervalPhysPerfOscOpticalOutputPwr15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 158, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr15minTimeStamp.setDescription('Timestamp')
intervalPhysPerfOscOpticalOutputPwr1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 159), )
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1dayTable.setDescription('')
intervalPhysPerfOscOpticalOutputPwr1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 159, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOscOpticalOutputPwr1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1dayEntry.setDescription('')
intervalPhysPerfOscOpticalOutputPwr1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 159, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalPhysPerfOscOpticalOutputPwr1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 159, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1dayLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1dayLow.setDescription('OSC Optical Output Power Transmitted')
intervalPhysPerfOscOpticalOutputPwr1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 159, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1dayMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1dayMean.setDescription('OSC Optical Output Power Transmitted')
intervalPhysPerfOscOpticalOutputPwr1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 159, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1dayHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1dayHigh.setDescription('OSC Optical Output Power Transmitted')
intervalPhysPerfOscOpticalOutputPwr1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 159, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1dayValidFlag.setDescription('Valid Flag')
intervalPhysPerfOscOpticalOutputPwr1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 159, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1dayTimeStamp.setDescription('Timestamp')
intervalPhysPerfOscOpticalOutputPwr1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 160), )
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1weekTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1weekTable.setDescription('')
intervalPhysPerfOscOpticalOutputPwr1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 160, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfOscOpticalOutputPwr1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1weekEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1weekEntry.setDescription('')
intervalPhysPerfOscOpticalOutputPwr1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 160, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1weekNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1weekNumber.setDescription('Number 1week')
intervalPhysPerfOscOpticalOutputPwr1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 160, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1weekLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1weekLow.setDescription('OSC Optical Output Power Transmitted')
intervalPhysPerfOscOpticalOutputPwr1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 160, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1weekMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1weekMean.setDescription('OSC Optical Output Power Transmitted')
intervalPhysPerfOscOpticalOutputPwr1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 160, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1weekHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1weekHigh.setDescription('OSC Optical Output Power Transmitted')
intervalPhysPerfOscOpticalOutputPwr1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 160, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1weekValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1weekValidFlag.setDescription('Valid Flag')
intervalPhysPerfOscOpticalOutputPwr1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 160, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1weekTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfOscOpticalOutputPwr1weekTimeStamp.setDescription('Timestamp')
currentPhysConvTxHighSpeed15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 161), )
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed15minTable.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed15minTable.setDescription('')
currentPhysConvTxHighSpeed15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 161, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed15minEntry.setDescription('')
currentPhysConvTxHighSpeed15minESTX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 161, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed15minESTX.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed15minESTX.setDescription('Tx Errored Seconds Physical Coding Layer')
currentPhysConvTxHighSpeed15minCVTX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 161, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed15minCVTX.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed15minCVTX.setDescription('Tx Coding Violations Physical Coding Layer')
currentPhysConvTxHighSpeed15minSETX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 161, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed15minSETX.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed15minSETX.setDescription('Tx Sync Header Errors Physical Coding Layer')
currentPhysConvTxHighSpeed15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 161, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed15minElapsedTime.setDescription('Elapsed 15Min')
currentPhysConvTxHighSpeed1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 162), )
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed1dayTable.setDescription('')
currentPhysConvTxHighSpeed1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 162, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed1dayEntry.setDescription('')
currentPhysConvTxHighSpeed1dayESTX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 162, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed1dayESTX.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed1dayESTX.setDescription('Tx Errored Seconds Physical Coding Layer')
currentPhysConvTxHighSpeed1dayCVTX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 162, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed1dayCVTX.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed1dayCVTX.setDescription('Tx Coding Violations Physical Coding Layer')
currentPhysConvTxHighSpeed1daySETX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 162, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed1daySETX.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed1daySETX.setDescription('Tx Sync Header Errors Physical Coding Layer')
currentPhysConvTxHighSpeed1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 162, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentPhysConvTxHighSpeed1dayElapsedTime.setDescription('Elapsed 1Day')
intervalPhysConvTxHighSpeed15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 163), )
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed15minTable.setDescription('')
intervalPhysConvTxHighSpeed15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 163, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysConvTxHighSpeed15minNumber"))
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed15minEntry.setDescription('')
intervalPhysConvTxHighSpeed15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 163, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalPhysConvTxHighSpeed15minESTX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 163, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed15minESTX.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed15minESTX.setDescription('Tx Errored Seconds Physical Coding Layer')
intervalPhysConvTxHighSpeed15minCVTX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 163, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed15minCVTX.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed15minCVTX.setDescription('Tx Coding Violations Physical Coding Layer')
intervalPhysConvTxHighSpeed15minSETX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 163, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed15minSETX.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed15minSETX.setDescription('Tx Sync Header Errors Physical Coding Layer')
intervalPhysConvTxHighSpeed15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 163, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed15minValidFlag.setDescription('Valid Flag')
intervalPhysConvTxHighSpeed15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 163, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed15minTimeStamp.setDescription('Timestamp')
intervalPhysConvTxHighSpeed1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 164), )
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed1dayTable.setDescription('')
intervalPhysConvTxHighSpeed1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 164, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysConvTxHighSpeed1dayNumber"))
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed1dayEntry.setDescription('')
intervalPhysConvTxHighSpeed1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 164, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalPhysConvTxHighSpeed1dayESTX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 164, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed1dayESTX.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed1dayESTX.setDescription('Tx Errored Seconds Physical Coding Layer')
intervalPhysConvTxHighSpeed1dayCVTX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 164, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed1dayCVTX.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed1dayCVTX.setDescription('Tx Coding Violations Physical Coding Layer')
intervalPhysConvTxHighSpeed1daySETX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 164, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed1daySETX.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed1daySETX.setDescription('Tx Sync Header Errors Physical Coding Layer')
intervalPhysConvTxHighSpeed1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 164, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed1dayValidFlag.setDescription('Valid Flag')
intervalPhysConvTxHighSpeed1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 164, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysConvTxHighSpeed1dayTimeStamp.setDescription('Timestamp')
intervalPhysPerfDiffGrDelay15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 165), )
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay15minTable.setDescription('')
intervalPhysPerfDiffGrDelay15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 165, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfDiffGrDelay15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay15minEntry.setDescription('')
intervalPhysPerfDiffGrDelay15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 165, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalPhysPerfDiffGrDelay15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 165, 1, 2), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay15minLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay15minLow.setDescription('Differential Group Delay Low')
intervalPhysPerfDiffGrDelay15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 165, 1, 3), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay15minMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay15minMean.setDescription('Differential Group Delay Mean')
intervalPhysPerfDiffGrDelay15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 165, 1, 4), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay15minHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay15minHigh.setDescription('Differential Group Delay High')
intervalPhysPerfDiffGrDelay15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 165, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay15minValidFlag.setDescription('Valid Flag')
intervalPhysPerfDiffGrDelay15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 165, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay15minTimeStamp.setDescription('Timestamp')
intervalPhysPerfDiffGrDelay1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 166), )
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1dayTable.setDescription('')
intervalPhysPerfDiffGrDelay1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 166, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfDiffGrDelay1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1dayEntry.setDescription('')
intervalPhysPerfDiffGrDelay1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 166, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalPhysPerfDiffGrDelay1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 166, 1, 2), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1dayLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1dayLow.setDescription('Differential Group Delay Low')
intervalPhysPerfDiffGrDelay1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 166, 1, 3), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1dayMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1dayMean.setDescription('Differential Group Delay Mean')
intervalPhysPerfDiffGrDelay1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 166, 1, 4), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1dayHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1dayHigh.setDescription('Differential Group Delay High')
intervalPhysPerfDiffGrDelay1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 166, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1dayValidFlag.setDescription('Valid Flag')
intervalPhysPerfDiffGrDelay1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 166, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1dayTimeStamp.setDescription('Timestamp')
intervalPhysPerfDiffGrDelay1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 167), )
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1weekTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1weekTable.setDescription('')
intervalPhysPerfDiffGrDelay1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 167, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfDiffGrDelay1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1weekEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1weekEntry.setDescription('')
intervalPhysPerfDiffGrDelay1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 167, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1weekNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1weekNumber.setDescription('Number 1week')
intervalPhysPerfDiffGrDelay1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 167, 1, 2), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1weekLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1weekLow.setDescription('Differential Group Delay Low')
intervalPhysPerfDiffGrDelay1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 167, 1, 3), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1weekMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1weekMean.setDescription('Differential Group Delay Mean')
intervalPhysPerfDiffGrDelay1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 167, 1, 4), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1weekHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1weekHigh.setDescription('Differential Group Delay High')
intervalPhysPerfDiffGrDelay1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 167, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1weekValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1weekValidFlag.setDescription('Valid Flag')
intervalPhysPerfDiffGrDelay1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 167, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1weekTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfDiffGrDelay1weekTimeStamp.setDescription('Timestamp')
intervalPhysPerfChromaticDispersion15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 168), )
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion15minTable.setDescription('')
intervalPhysPerfChromaticDispersion15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 168, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfChromaticDispersion15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion15minEntry.setDescription('')
intervalPhysPerfChromaticDispersion15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 168, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalPhysPerfChromaticDispersion15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 168, 1, 2), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion15minLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion15minLow.setDescription('Chromatic Dispersion Low')
intervalPhysPerfChromaticDispersion15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 168, 1, 3), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion15minMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion15minMean.setDescription('Chromatic Dispersion Mean')
intervalPhysPerfChromaticDispersion15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 168, 1, 4), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion15minHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion15minHigh.setDescription('Chromatic Dispersion High')
intervalPhysPerfChromaticDispersion15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 168, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion15minValidFlag.setDescription('Valid Flag')
intervalPhysPerfChromaticDispersion15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 168, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion15minTimeStamp.setDescription('Timestamp')
intervalPhysPerfChromaticDispersion1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 169), )
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1dayTable.setDescription('')
intervalPhysPerfChromaticDispersion1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 169, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfChromaticDispersion1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1dayEntry.setDescription('')
intervalPhysPerfChromaticDispersion1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 169, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalPhysPerfChromaticDispersion1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 169, 1, 2), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1dayLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1dayLow.setDescription('Chromatic Dispersion Low')
intervalPhysPerfChromaticDispersion1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 169, 1, 3), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1dayMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1dayMean.setDescription('Chromatic Dispersion Mean')
intervalPhysPerfChromaticDispersion1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 169, 1, 4), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1dayHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1dayHigh.setDescription('Chromatic Dispersion High')
intervalPhysPerfChromaticDispersion1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 169, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1dayValidFlag.setDescription('Valid Flag')
intervalPhysPerfChromaticDispersion1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 169, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1dayTimeStamp.setDescription('Timestamp')
intervalPhysPerfChromaticDispersion1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 170), )
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1weekTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1weekTable.setDescription('')
intervalPhysPerfChromaticDispersion1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 170, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfChromaticDispersion1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1weekEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1weekEntry.setDescription('')
intervalPhysPerfChromaticDispersion1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 170, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1weekNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1weekNumber.setDescription('Number 1week')
intervalPhysPerfChromaticDispersion1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 170, 1, 2), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1weekLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1weekLow.setDescription('Chromatic Dispersion Low')
intervalPhysPerfChromaticDispersion1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 170, 1, 3), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1weekMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1weekMean.setDescription('Chromatic Dispersion Mean')
intervalPhysPerfChromaticDispersion1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 170, 1, 4), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1weekHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1weekHigh.setDescription('Chromatic Dispersion High')
intervalPhysPerfChromaticDispersion1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 170, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1weekValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1weekValidFlag.setDescription('Valid Flag')
intervalPhysPerfChromaticDispersion1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 170, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1weekTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfChromaticDispersion1weekTimeStamp.setDescription('Timestamp')
intervalPhysPerfSignalToNoiseRatio15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 171), )
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio15minTable.setDescription('')
intervalPhysPerfSignalToNoiseRatio15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 171, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfSignalToNoiseRatio15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio15minEntry.setDescription('')
intervalPhysPerfSignalToNoiseRatio15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 171, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalPhysPerfSignalToNoiseRatio15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 171, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio15minLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio15minLow.setDescription('Signal-to-Noise Ratio Low')
intervalPhysPerfSignalToNoiseRatio15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 171, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio15minMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio15minMean.setDescription('Signal-to-Noise Ratio Mean')
intervalPhysPerfSignalToNoiseRatio15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 171, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio15minHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio15minHigh.setDescription('Signal-to-Noise Ratio High')
intervalPhysPerfSignalToNoiseRatio15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 171, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio15minValidFlag.setDescription('Valid Flag')
intervalPhysPerfSignalToNoiseRatio15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 171, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio15minTimeStamp.setDescription('Timestamp')
intervalPhysPerfSignalToNoiseRatio1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 172), )
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1dayTable.setDescription('')
intervalPhysPerfSignalToNoiseRatio1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 172, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfSignalToNoiseRatio1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1dayEntry.setDescription('')
intervalPhysPerfSignalToNoiseRatio1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 172, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalPhysPerfSignalToNoiseRatio1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 172, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1dayLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1dayLow.setDescription('Signal-to-Noise Ratio Low')
intervalPhysPerfSignalToNoiseRatio1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 172, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1dayMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1dayMean.setDescription('Signal-to-Noise Ratio Mean')
intervalPhysPerfSignalToNoiseRatio1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 172, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1dayHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1dayHigh.setDescription('Signal-to-Noise Ratio High')
intervalPhysPerfSignalToNoiseRatio1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 172, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1dayValidFlag.setDescription('Valid Flag')
intervalPhysPerfSignalToNoiseRatio1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 172, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1dayTimeStamp.setDescription('Timestamp')
intervalPhysPerfSignalToNoiseRatio1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 173), )
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1weekTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1weekTable.setDescription('')
intervalPhysPerfSignalToNoiseRatio1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 173, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfSignalToNoiseRatio1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1weekEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1weekEntry.setDescription('')
intervalPhysPerfSignalToNoiseRatio1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 173, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1weekNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1weekNumber.setDescription('Number 1week')
intervalPhysPerfSignalToNoiseRatio1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 173, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1weekLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1weekLow.setDescription('Signal-to-Noise Ratio Low')
intervalPhysPerfSignalToNoiseRatio1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 173, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1weekMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1weekMean.setDescription('Signal-to-Noise Ratio Mean')
intervalPhysPerfSignalToNoiseRatio1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 173, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1weekHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1weekHigh.setDescription('Signal-to-Noise Ratio High')
intervalPhysPerfSignalToNoiseRatio1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 173, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1weekValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1weekValidFlag.setDescription('Valid Flag')
intervalPhysPerfSignalToNoiseRatio1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 173, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1weekTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfSignalToNoiseRatio1weekTimeStamp.setDescription('Timestamp')
intervalPhysPerfCarrierFreqOffset15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 174), )
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset15minTable.setDescription('')
intervalPhysPerfCarrierFreqOffset15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 174, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfCarrierFreqOffset15minNumber"))
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset15minEntry.setDescription('')
intervalPhysPerfCarrierFreqOffset15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 174, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalPhysPerfCarrierFreqOffset15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 174, 1, 2), Integer32()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset15minLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset15minLow.setDescription('Carrier Frequency Offset Low')
intervalPhysPerfCarrierFreqOffset15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 174, 1, 3), Integer32()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset15minMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset15minMean.setDescription('Carrier Frequency Offset Mean')
intervalPhysPerfCarrierFreqOffset15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 174, 1, 4), Integer32()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset15minHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset15minHigh.setDescription('Carrier Frequency Offset High')
intervalPhysPerfCarrierFreqOffset15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 174, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset15minValidFlag.setDescription('Valid Flag')
intervalPhysPerfCarrierFreqOffset15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 174, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset15minTimeStamp.setDescription('Timestamp')
intervalPhysPerfCarrierFreqOffset1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 175), )
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1dayTable.setDescription('')
intervalPhysPerfCarrierFreqOffset1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 175, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfCarrierFreqOffset1dayNumber"))
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1dayEntry.setDescription('')
intervalPhysPerfCarrierFreqOffset1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 175, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalPhysPerfCarrierFreqOffset1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 175, 1, 2), Integer32()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1dayLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1dayLow.setDescription('Carrier Frequency Offset Low')
intervalPhysPerfCarrierFreqOffset1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 175, 1, 3), Integer32()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1dayMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1dayMean.setDescription('Carrier Frequency Offset Mean')
intervalPhysPerfCarrierFreqOffset1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 175, 1, 4), Integer32()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1dayHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1dayHigh.setDescription('Carrier Frequency Offset High')
intervalPhysPerfCarrierFreqOffset1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 175, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1dayValidFlag.setDescription('Valid Flag')
intervalPhysPerfCarrierFreqOffset1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 175, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1dayTimeStamp.setDescription('Timestamp')
intervalPhysPerfCarrierFreqOffset1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 176), )
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1weekTable.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1weekTable.setDescription('')
intervalPhysPerfCarrierFreqOffset1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 176, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalPhysPerfCarrierFreqOffset1weekNumber"))
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1weekEntry.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1weekEntry.setDescription('')
intervalPhysPerfCarrierFreqOffset1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 176, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1weekNumber.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1weekNumber.setDescription('Number 1week')
intervalPhysPerfCarrierFreqOffset1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 176, 1, 2), Integer32()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1weekLow.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1weekLow.setDescription('Carrier Frequency Offset Low')
intervalPhysPerfCarrierFreqOffset1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 176, 1, 3), Integer32()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1weekMean.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1weekMean.setDescription('Carrier Frequency Offset Mean')
intervalPhysPerfCarrierFreqOffset1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 176, 1, 4), Integer32()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1weekHigh.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1weekHigh.setDescription('Carrier Frequency Offset High')
intervalPhysPerfCarrierFreqOffset1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 176, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1weekValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1weekValidFlag.setDescription('Valid Flag')
intervalPhysPerfCarrierFreqOffset1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 176, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1weekTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalPhysPerfCarrierFreqOffset1weekTimeStamp.setDescription('Timestamp')
thresholdOtuFecSublayerExTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 177), )
if mibBuilder.loadTexts: thresholdOtuFecSublayerExTable.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuFecSublayerExTable.setDescription('')
thresholdOtuFecSublayerExEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 177, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: thresholdOtuFecSublayerExEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuFecSublayerExEntry.setDescription('')
thresholdOtuFecSublayerExCEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 177, 1, 1), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerExCEHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuFecSublayerExCEHighThres15min.setDescription('FEC Corrected Errors 15 Min Threshold')
thresholdOtuFecSublayerExCEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 177, 1, 2), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerExCEHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuFecSublayerExCEHighThres1day.setDescription('FEC Corrected Errors 1Day Threshold')
thresholdOtuFecSublayerExUBEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 177, 1, 3), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerExUBEHighThres15min.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuFecSublayerExUBEHighThres15min.setDescription('Uncorrected Block Errors High Threshold')
thresholdOtuFecSublayerExUBEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 177, 1, 4), Counter64String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdOtuFecSublayerExUBEHighThres1day.setStatus('current')
if mibBuilder.loadTexts: thresholdOtuFecSublayerExUBEHighThres1day.setDescription('Uncorrected Block Errors High Threshold')
currentOtuFec15minExTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 178), )
if mibBuilder.loadTexts: currentOtuFec15minExTable.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec15minExTable.setDescription('')
currentOtuFec15minExEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 178, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOtuFec15minExEntry.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec15minExEntry.setDescription('')
currentOtuFec15minExCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 178, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec15minExCE.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec15minExCE.setDescription('Corrected Errors OTU FEC Monitoring [count of corrected anomalies]')
currentOtuFec15minExUBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 178, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec15minExUBE.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec15minExUBE.setDescription('Uncorrected Block Errors - OTU FEC Monitoring')
currentOtuFec15minExBERCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 178, 1, 3), Counter64String()).setUnits('1.0E-18').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec15minExBERCE.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec15minExBERCE.setDescription('Bit error rate before FEC calculated from corrected errors')
currentOtuFec15minExElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 178, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec15minExElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec15minExElapsedTime.setDescription('Elapsed 15Min')
currentOtuFec1dayExTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 179), )
if mibBuilder.loadTexts: currentOtuFec1dayExTable.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec1dayExTable.setDescription('')
currentOtuFec1dayExEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 179, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentOtuFec1dayExEntry.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec1dayExEntry.setDescription('')
currentOtuFec1dayExCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 179, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec1dayExCE.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec1dayExCE.setDescription('Corrected Errors OTU FEC Monitoring [count of corrected anomalies]')
currentOtuFec1dayExUBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 179, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec1dayExUBE.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec1dayExUBE.setDescription('Uncorrected Block Errors - OTU FEC Monitoring')
currentOtuFec1dayExBERCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 179, 1, 3), Counter64String()).setUnits('1.0E-18').setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec1dayExBERCE.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec1dayExBERCE.setDescription('Bit error rate before FEC calculated from corrected errors')
currentOtuFec1dayExElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 179, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOtuFec1dayExElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentOtuFec1dayExElapsedTime.setDescription('Elapsed 1Day')
intervalOtuFec15minExTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 180), )
if mibBuilder.loadTexts: intervalOtuFec15minExTable.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec15minExTable.setDescription('')
intervalOtuFec15minExEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 180, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOtuFec15minExNumber"))
if mibBuilder.loadTexts: intervalOtuFec15minExEntry.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec15minExEntry.setDescription('')
intervalOtuFec15minExNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 180, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalOtuFec15minExNumber.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec15minExNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalOtuFec15minExCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 180, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec15minExCE.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec15minExCE.setDescription('Corrected Errors OTU FEC Monitoring [count of corrected anomalies]')
intervalOtuFec15minExUBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 180, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec15minExUBE.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec15minExUBE.setDescription('Uncorrected Block Errors - OTU FEC Monitoring')
intervalOtuFec15minExBERCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 180, 1, 4), Counter64String()).setUnits('1.0E-18').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec15minExBERCE.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec15minExBERCE.setDescription('Bit error rate before FEC calculated from corrected errors')
intervalOtuFec15minExValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 180, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec15minExValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec15minExValidFlag.setDescription('Valid Flag')
intervalOtuFec15minExTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 180, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec15minExTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec15minExTimeStamp.setDescription('Timestamp')
intervalOtuFec1dayExTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 181), )
if mibBuilder.loadTexts: intervalOtuFec1dayExTable.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec1dayExTable.setDescription('')
intervalOtuFec1dayExEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 181, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalOtuFec1dayExNumber"))
if mibBuilder.loadTexts: intervalOtuFec1dayExEntry.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec1dayExEntry.setDescription('')
intervalOtuFec1dayExNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 181, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalOtuFec1dayExNumber.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec1dayExNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalOtuFec1dayExCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 181, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec1dayExCE.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec1dayExCE.setDescription('Corrected Errors OTU FEC Monitoring [count of corrected anomalies]')
intervalOtuFec1dayExUBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 181, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec1dayExUBE.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec1dayExUBE.setDescription('Uncorrected Block Errors - OTU FEC Monitoring')
intervalOtuFec1dayExBERCE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 181, 1, 4), Counter64String()).setUnits('1.0E-18').setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec1dayExBERCE.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec1dayExBERCE.setDescription('Bit error rate before FEC calculated from corrected errors')
intervalOtuFec1dayExValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 181, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec1dayExValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec1dayExValidFlag.setDescription('Valid Flag')
intervalOtuFec1dayExTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 181, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalOtuFec1dayExTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalOtuFec1dayExTimeStamp.setDescription('Timestamp')
currentEthRx3HS15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182), )
if mibBuilder.loadTexts: currentEthRx3HS15minTable.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS15minTable.setDescription('')
currentEthRx3HS15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentEthRx3HS15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS15minEntry.setDescription('')
currentEthRx3HS15minGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minGoodFrames.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS15minGoodFrames.setDescription('Frames Received')
currentEthRx3HS15minPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minPauseFrames.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS15minPauseFrames.setDescription('PAUSE Frames Received')
currentEthRx3HS15minCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minCrcFrames.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS15minCrcFrames.setDescription('Received CRC Errors')
currentEthRx3HS15minBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minBytes.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS15minBytes.setDescription('Bytes Received')
currentEthRx3HS15minBroadcastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minBroadcastFramesRcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS15minBroadcastFramesRcv.setDescription('Broadcast Frames Received')
currentEthRx3HS15minMulticastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minMulticastFramesRcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS15minMulticastFramesRcv.setDescription('Multicast Frames Received')
currentEthRx3HS15minUndersizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 7), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minUndersizedFramesRcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS15minUndersizedFramesRcv.setDescription('Undersized Frames Received')
currentEthRx3HS15minOversizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 8), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minOversizedFramesRcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS15minOversizedFramesRcv.setDescription('Oversized Frames Received')
currentEthRx3HS15minFragmentFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 9), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minFragmentFramesRcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS15minFragmentFramesRcv.setDescription('Rx Fragment Frames')
currentEthRx3HS15minJabberFrameRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 10), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minJabberFrameRcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS15minJabberFrameRcv.setDescription('Rx Jabber Frame')
currentEthRx3HS15minControlFrameRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 11), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minControlFrameRcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS15minControlFrameRcv.setDescription('Rx Control Frame')
currentEthRx3HS15minBytesFrames64Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 12), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minBytesFrames64Rcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS15minBytesFrames64Rcv.setDescription('64 Bytes Frames Received')
currentEthRx3HS15minBytesFrames65Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 13), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minBytesFrames65Rcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS15minBytesFrames65Rcv.setDescription('65-127 Bytes Frames Received')
currentEthRx3HS15minBytesFrames128Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 14), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minBytesFrames128Rcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS15minBytesFrames128Rcv.setDescription('128-255 Bytes Frames Received')
currentEthRx3HS15minBytesFrames256Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 15), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minBytesFrames256Rcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS15minBytesFrames256Rcv.setDescription('256-511 Bytes Frames Received')
currentEthRx3HS15minBytesFrames512Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 16), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minBytesFrames512Rcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS15minBytesFrames512Rcv.setDescription('512-1023 Bytes Frames Received')
currentEthRx3HS15minBytesFrames1024Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 17), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minBytesFrames1024Rcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS15minBytesFrames1024Rcv.setDescription('1024-1518 Bytes Frames Received')
currentEthRx3HS15minBytesFrames1519Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 18), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minBytesFrames1519Rcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS15minBytesFrames1519Rcv.setDescription('1519-MaxSize Bytes Frames Received')
currentEthRx3HS15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 182, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS15minElapsedTime.setDescription('Elapsed 15Min')
currentEthRx3HS1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183), )
if mibBuilder.loadTexts: currentEthRx3HS1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS1dayTable.setDescription('')
currentEthRx3HS1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentEthRx3HS1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS1dayEntry.setDescription('')
currentEthRx3HS1dayGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayGoodFrames.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS1dayGoodFrames.setDescription('Frames Received')
currentEthRx3HS1dayPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayPauseFrames.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS1dayPauseFrames.setDescription('PAUSE Frames Received')
currentEthRx3HS1dayCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayCrcFrames.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS1dayCrcFrames.setDescription('Received CRC Errors')
currentEthRx3HS1dayBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayBytes.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS1dayBytes.setDescription('Bytes Received')
currentEthRx3HS1dayBroadcastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayBroadcastFramesRcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS1dayBroadcastFramesRcv.setDescription('Broadcast Frames Received')
currentEthRx3HS1dayMulticastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayMulticastFramesRcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS1dayMulticastFramesRcv.setDescription('Multicast Frames Received')
currentEthRx3HS1dayUndersizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 7), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayUndersizedFramesRcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS1dayUndersizedFramesRcv.setDescription('Undersized Frames Received')
currentEthRx3HS1dayOversizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 8), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayOversizedFramesRcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS1dayOversizedFramesRcv.setDescription('Oversized Frames Received')
currentEthRx3HS1dayFragmentFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 9), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayFragmentFramesRcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS1dayFragmentFramesRcv.setDescription('Rx Fragment Frames')
currentEthRx3HS1dayJabberFrameRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 10), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayJabberFrameRcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS1dayJabberFrameRcv.setDescription('Rx Jabber Frame')
currentEthRx3HS1dayControlFrameRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 11), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayControlFrameRcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS1dayControlFrameRcv.setDescription('Rx Control Frame')
currentEthRx3HS1dayBytesFrames64Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 12), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayBytesFrames64Rcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS1dayBytesFrames64Rcv.setDescription('64 Bytes Frames Received')
currentEthRx3HS1dayBytesFrames65Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 13), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayBytesFrames65Rcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS1dayBytesFrames65Rcv.setDescription('65-127 Bytes Frames Received')
currentEthRx3HS1dayBytesFrames128Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 14), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayBytesFrames128Rcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS1dayBytesFrames128Rcv.setDescription('128-255 Bytes Frames Received')
currentEthRx3HS1dayBytesFrames256Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 15), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayBytesFrames256Rcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS1dayBytesFrames256Rcv.setDescription('256-511 Bytes Frames Received')
currentEthRx3HS1dayBytesFrames512Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 16), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayBytesFrames512Rcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS1dayBytesFrames512Rcv.setDescription('512-1023 Bytes Frames Received')
currentEthRx3HS1dayBytesFrames1024Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 17), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayBytesFrames1024Rcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS1dayBytesFrames1024Rcv.setDescription('1024-1518 Bytes Frames Received')
currentEthRx3HS1dayBytesFrames1519Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 18), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayBytesFrames1519Rcv.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS1dayBytesFrames1519Rcv.setDescription('1519-MaxSize Bytes Frames Received')
currentEthRx3HS1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 183, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEthRx3HS1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentEthRx3HS1dayElapsedTime.setDescription('Elapsed 1Day')
intervalEthRx3HS15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184), )
if mibBuilder.loadTexts: intervalEthRx3HS15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS15minTable.setDescription('')
intervalEthRx3HS15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalEthRx3HS15minNumber"))
if mibBuilder.loadTexts: intervalEthRx3HS15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS15minEntry.setDescription('')
intervalEthRx3HS15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalEthRx3HS15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalEthRx3HS15minGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minGoodFrames.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS15minGoodFrames.setDescription('Frames Received')
intervalEthRx3HS15minPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minPauseFrames.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS15minPauseFrames.setDescription('PAUSE Frames Received')
intervalEthRx3HS15minCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minCrcFrames.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS15minCrcFrames.setDescription('Received CRC Errors')
intervalEthRx3HS15minBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minBytes.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS15minBytes.setDescription('Bytes Received')
intervalEthRx3HS15minBroadcastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minBroadcastFramesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS15minBroadcastFramesRcv.setDescription('Broadcast Frames Received')
intervalEthRx3HS15minMulticastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 7), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minMulticastFramesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS15minMulticastFramesRcv.setDescription('Multicast Frames Received')
intervalEthRx3HS15minUndersizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 8), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minUndersizedFramesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS15minUndersizedFramesRcv.setDescription('Undersized Frames Received')
intervalEthRx3HS15minOversizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 9), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minOversizedFramesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS15minOversizedFramesRcv.setDescription('Oversized Frames Received')
intervalEthRx3HS15minFragmentFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 10), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minFragmentFramesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS15minFragmentFramesRcv.setDescription('Rx Fragment Frames')
intervalEthRx3HS15minJabberFrameRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 11), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minJabberFrameRcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS15minJabberFrameRcv.setDescription('Rx Jabber Frame')
intervalEthRx3HS15minControlFrameRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 12), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minControlFrameRcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS15minControlFrameRcv.setDescription('Rx Control Frame')
intervalEthRx3HS15minBytesFrames64Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 13), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minBytesFrames64Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS15minBytesFrames64Rcv.setDescription('64 Bytes Frames Received')
intervalEthRx3HS15minBytesFrames65Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 14), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minBytesFrames65Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS15minBytesFrames65Rcv.setDescription('65-127 Bytes Frames Received')
intervalEthRx3HS15minBytesFrames128Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 15), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minBytesFrames128Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS15minBytesFrames128Rcv.setDescription('128-255 Bytes Frames Received')
intervalEthRx3HS15minBytesFrames256Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 16), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minBytesFrames256Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS15minBytesFrames256Rcv.setDescription('256-511 Bytes Frames Received')
intervalEthRx3HS15minBytesFrames512Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 17), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minBytesFrames512Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS15minBytesFrames512Rcv.setDescription('512-1023 Bytes Frames Received')
intervalEthRx3HS15minBytesFrames1024Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 18), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minBytesFrames1024Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS15minBytesFrames1024Rcv.setDescription('1024-1518 Bytes Frames Received')
intervalEthRx3HS15minBytesFrames1519Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 19), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minBytesFrames1519Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS15minBytesFrames1519Rcv.setDescription('1519-MaxSize Bytes Frames Received')
intervalEthRx3HS15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS15minValidFlag.setDescription('Valid Flag')
intervalEthRx3HS15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 184, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS15minTimeStamp.setDescription('Timestamp')
intervalEthRx3HS1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185), )
if mibBuilder.loadTexts: intervalEthRx3HS1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS1dayTable.setDescription('')
intervalEthRx3HS1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalEthRx3HS1dayNumber"))
if mibBuilder.loadTexts: intervalEthRx3HS1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS1dayEntry.setDescription('')
intervalEthRx3HS1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalEthRx3HS1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalEthRx3HS1dayGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayGoodFrames.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS1dayGoodFrames.setDescription('Frames Received')
intervalEthRx3HS1dayPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayPauseFrames.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS1dayPauseFrames.setDescription('PAUSE Frames Received')
intervalEthRx3HS1dayCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayCrcFrames.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS1dayCrcFrames.setDescription('Received CRC Errors')
intervalEthRx3HS1dayBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayBytes.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS1dayBytes.setDescription('Bytes Received')
intervalEthRx3HS1dayBroadcastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 6), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayBroadcastFramesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS1dayBroadcastFramesRcv.setDescription('Broadcast Frames Received')
intervalEthRx3HS1dayMulticastFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 7), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayMulticastFramesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS1dayMulticastFramesRcv.setDescription('Multicast Frames Received')
intervalEthRx3HS1dayUndersizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 8), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayUndersizedFramesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS1dayUndersizedFramesRcv.setDescription('Undersized Frames Received')
intervalEthRx3HS1dayOversizedFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 9), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayOversizedFramesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS1dayOversizedFramesRcv.setDescription('Oversized Frames Received')
intervalEthRx3HS1dayFragmentFramesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 10), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayFragmentFramesRcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS1dayFragmentFramesRcv.setDescription('Rx Fragment Frames')
intervalEthRx3HS1dayJabberFrameRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 11), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayJabberFrameRcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS1dayJabberFrameRcv.setDescription('Rx Jabber Frame')
intervalEthRx3HS1dayControlFrameRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 12), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayControlFrameRcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS1dayControlFrameRcv.setDescription('Rx Control Frame')
intervalEthRx3HS1dayBytesFrames64Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 13), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayBytesFrames64Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS1dayBytesFrames64Rcv.setDescription('64 Bytes Frames Received')
intervalEthRx3HS1dayBytesFrames65Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 14), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayBytesFrames65Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS1dayBytesFrames65Rcv.setDescription('65-127 Bytes Frames Received')
intervalEthRx3HS1dayBytesFrames128Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 15), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayBytesFrames128Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS1dayBytesFrames128Rcv.setDescription('128-255 Bytes Frames Received')
intervalEthRx3HS1dayBytesFrames256Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 16), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayBytesFrames256Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS1dayBytesFrames256Rcv.setDescription('256-511 Bytes Frames Received')
intervalEthRx3HS1dayBytesFrames512Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 17), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayBytesFrames512Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS1dayBytesFrames512Rcv.setDescription('512-1023 Bytes Frames Received')
intervalEthRx3HS1dayBytesFrames1024Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 18), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayBytesFrames1024Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS1dayBytesFrames1024Rcv.setDescription('1024-1518 Bytes Frames Received')
intervalEthRx3HS1dayBytesFrames1519Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 19), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayBytesFrames1519Rcv.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS1dayBytesFrames1519Rcv.setDescription('1519-MaxSize Bytes Frames Received')
intervalEthRx3HS1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS1dayValidFlag.setDescription('Valid Flag')
intervalEthRx3HS1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 2, 185, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEthRx3HS1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalEthRx3HS1dayTimeStamp.setDescription('Timestamp')
currentDefectSeconds15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 64), )
if mibBuilder.loadTexts: currentDefectSeconds15minTable.setStatus('current')
if mibBuilder.loadTexts: currentDefectSeconds15minTable.setDescription('')
currentDefectSeconds15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 64, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentDefectSeconds15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentDefectSeconds15minEntry.setDescription('')
currentDefectSeconds15minDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 64, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDefectSeconds15minDS.setStatus('current')
if mibBuilder.loadTexts: currentDefectSeconds15minDS.setDescription('Defect Seconds')
currentDefectSeconds15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 64, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDefectSeconds15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentDefectSeconds15minElapsedTime.setDescription('Elapsed 15Min')
currentDefectSeconds1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 65), )
if mibBuilder.loadTexts: currentDefectSeconds1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentDefectSeconds1dayTable.setDescription('')
currentDefectSeconds1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 65, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentDefectSeconds1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentDefectSeconds1dayEntry.setDescription('')
currentDefectSeconds1dayDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 65, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDefectSeconds1dayDS.setStatus('current')
if mibBuilder.loadTexts: currentDefectSeconds1dayDS.setDescription('Defect Seconds')
currentDefectSeconds1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 65, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDefectSeconds1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentDefectSeconds1dayElapsedTime.setDescription('Elapsed 1Day')
intervalDefectSeconds15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 66), )
if mibBuilder.loadTexts: intervalDefectSeconds15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalDefectSeconds15minTable.setDescription('')
intervalDefectSeconds15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 66, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalDefectSeconds15minNumber"))
if mibBuilder.loadTexts: intervalDefectSeconds15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalDefectSeconds15minEntry.setDescription('')
intervalDefectSeconds15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 66, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalDefectSeconds15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalDefectSeconds15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalDefectSeconds15minDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 66, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDefectSeconds15minDS.setStatus('current')
if mibBuilder.loadTexts: intervalDefectSeconds15minDS.setDescription('Defect Seconds')
intervalDefectSeconds15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 66, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDefectSeconds15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalDefectSeconds15minValidFlag.setDescription('Valid Flag')
intervalDefectSeconds15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 66, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDefectSeconds15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalDefectSeconds15minTimeStamp.setDescription('Timestamp')
intervalDefectSeconds1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 67), )
if mibBuilder.loadTexts: intervalDefectSeconds1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalDefectSeconds1dayTable.setDescription('')
intervalDefectSeconds1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 67, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "FspR7-MIB", "intervalDefectSeconds1dayNumber"))
if mibBuilder.loadTexts: intervalDefectSeconds1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalDefectSeconds1dayEntry.setDescription('')
intervalDefectSeconds1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 67, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalDefectSeconds1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalDefectSeconds1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalDefectSeconds1dayDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 67, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDefectSeconds1dayDS.setStatus('current')
if mibBuilder.loadTexts: intervalDefectSeconds1dayDS.setDescription('Defect Seconds')
intervalDefectSeconds1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 67, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDefectSeconds1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalDefectSeconds1dayValidFlag.setDescription('Valid Flag')
intervalDefectSeconds1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 6, 67, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalDefectSeconds1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalDefectSeconds1dayTimeStamp.setDescription('Timestamp')
f7Containers = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 1))
f7ContainerFanSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 1, 1))
f7ContainerModuleSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 1, 2))
f7ContainerSfpSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 1, 3))
f7Shelfs = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 2))
f7FanUnits = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 3))
f7FanUnitsFan = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 3, 1))
f7Modules = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4))
f7eqpSh1hu = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 1))
f7eqpSh1huDc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 2))
f7eqpSh3hu = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 3))
f7eqpSh7hu = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 4))
f7eqpUnknown = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 5))
f7eqpNcu = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 6))
f7eqpNcutif = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 7))
f7eqpScu = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 8))
f7eqpScue = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 9))
f7eqpR6cu = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 10))
f7eqpPsu1huac = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 11))
f7eqpPsu7huac = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 12))
f7eqpPsu7hudc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 13))
f7eqpFcu7hu = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 14))
f7eqp2clsmd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 15))
f7eqp2absmc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 16))
f7eqp2bsmd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 17))
f7eqp1Gsmud = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 18))
f7eqp4gsmd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 19))
f7eqp8gsmd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 20))
f7eqp1csmuc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 21))
f7eqp1csmuewc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 22))
f7eqp4csmd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 23))
f7eqp4csmud = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 24))
f7eqp4csmc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 25))
f7eqpOsfm = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 26))
f7eqp1pm = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 27))
f7eqp2pm = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 28))
f7eqp40csmd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 29))
f7eqpDcm = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 30))
f7eqpEdfas = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 31))
f7eqpEdfasgc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 32))
f7eqpEdfadgc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 33))
f7eqpRaman = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 34))
f7eqp4tcc2g5 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 35))
f7eqp4tcc2g5d = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 36))
f7eqp4tcc10gd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 37))
f7eqp4tcc10gc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 38))
f7eqpWcc10gd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 39))
f7eqpWcc10gc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 40))
f7eqpWcc2g7 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 41))
f7eqpWcc2g7d = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 42))
f7eqp2tcm2g5 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 43))
f7eqp2tca2g5 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 44))
f7eqp8tca10gd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 45))
f7eqp8tca10gc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 46))
f7eqpWca10gd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 47))
f7eqpWca10gc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 48))
f7eqp4tca4gd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 49))
f7eqp4tca4gc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 50))
f7eqpwca2g5 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 51))
f7eqp4tca1g3d = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 52))
f7eqp4tca1g3c = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 53))
f7eqp8tce2g5d = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 54))
f7eqp8tce2g5c = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 55))
f7eqpWcelsd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 56))
f7eqpWcelsc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 57))
f7eqpVsm = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 58))
f7eqpRsmolm = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 59))
f7eqpRsmsf = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 60))
f7eqpOscm = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 61))
f7eqp2oscm = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 62))
f7eqpDrm = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 63))
f7eqpXfpG = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 64))
f7eqpsfpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 65))
f7eqpSfpc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 66))
f7eqpSfpg = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 67))
f7eqpSfpe = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 68))
f7eqpSh1hudcm = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 69))
f7eqpCustomc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 70))
f7eqpCustomd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 71))
f7eqpPsu1hudc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 72))
f7eqpWcc2g7c = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 73))
f7eqp1csmuEwD = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 74))
f7eqp1csmuG = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 75))
f7eqp3BsmC = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 76))
f7eqpF2kSh5hu = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 77))
f7eqpF2kSh6hu = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 78))
f7eqp2Tca2g5s = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 79))
f7eqp8Csmuc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 80))
f7eqpEdfaDgcb = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 81))
f7eqpOscm2n = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 82))
f7eqp4Tcc10gtd = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 83))
f7eqp4Tca4g = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 84))
f7eqpDcg = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 85))
f7eqp2Tcm2g5d = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 86))
f7eqp2Tcm2g5c = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 87))
f7eqpWcm2g5d = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 88))
f7eqpWcm2g5c = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 89))
f7eqpEdfmSgc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 90))
f7eqpF2kDemiV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 91))
f7eqpPsm955 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 92))
f7eqpNcu2e = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 93))
f7eqp8TceGl2g5d = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 94))
f7eqp8TceGl2g5c = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 4, 95))
f7Plugs = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 5))
f7SFPCL = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 5, 1))
f7SFPHS = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 5, 2))
f7SFP2G1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 5, 3))
f7SFP2G5 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 5, 4))
f7SFP4G = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 5, 5))
f7XFP10G = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 5, 6))
f7Ports = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 6))
f7OTU1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 6, 1))
f7OTU2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 6, 2))
f710GBE = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 6, 3))
f7OC192 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 6, 4))
f7OC48 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 6, 5))
f7STM16 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 6, 6))
f7STM64 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 6, 7))
f710GFC = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 6, 8))
f710GFP = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 6, 9))
f7Error = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 2, 8, 7))
mibBuilder.exportSymbols("FspR7-MIB", currentGfp1dayEntry=currentGfp1dayEntry, deployProvTunnelWdmDefaultsOifUni=deployProvTunnelWdmDefaultsOifUni, thresholdPhysPerfOscPwrRcvLowThres=thresholdPhysPerfOscPwrRcvLowThres, deployProvVchChannelTraceExpectedOdu=deployProvVchChannelTraceExpectedOdu, deployProvPlugDefaultsTable=deployProvPlugDefaultsTable, deployProvControlPlaneOtnDefaultsCdTraceDetail=deployProvControlPlaneOtnDefaultsCdTraceDetail, farEndPlugConfigEntry=farEndPlugConfigEntry, currentOduTcmB1dayElapsedTime=currentOduTcmB1dayElapsedTime, deployProvControlPlaneEthDefaultsTable=deployProvControlPlaneEthDefaultsTable, thresholdGfpTypeHecCorrectedFramesHighThres15Day=thresholdGfpTypeHecCorrectedFramesHighThres15Day, f7eqpSfpe=f7eqpSfpe, intervalSonetHoPath1dayNumber=intervalSonetHoPath1dayNumber, intervalOtuFec1dayExValidFlag=intervalOtuFec1dayExValidFlag, alarmThermoElectricCoolerEndOfLife=alarmThermoElectricCoolerEndOfLife, opticalIfDataAlsHoldoff=opticalIfDataAlsHoldoff, forceDeployProvApsCapWorkingAid=forceDeployProvApsCapWorkingAid, deployProvControlPlaneOtnCapRsvpMaxExpRestartTime=deployProvControlPlaneOtnCapRsvpMaxExpRestartTime, deployProvTunnelOtnCapProvisionedPaths=deployProvTunnelOtnCapProvisionedPaths, intervalEthRx3HS15minBytes=intervalEthRx3HS15minBytes, changeServiceDeployProvIfTcmCLevel=changeServiceDeployProvIfTcmCLevel, apsProtGroupStatusRevertiveMode=apsProtGroupStatusRevertiveMode, intervalSonetHoPath15minTable=intervalSonetHoPath15minTable, FspR7APSCommandCaps=FspR7APSCommandCaps, deployProvTunnelWdmRestorationPathsComputed=deployProvTunnelWdmRestorationPathsComputed, intervalPhysPerfChromaticDispersion15minTable=intervalPhysPerfChromaticDispersion15minTable, currentL2EthTx1dayBytesFrames64Trmt=currentL2EthTx1dayBytesFrames64Trmt, deployProvLogicalCpIfDefaultsPushedFarEndIpHeader=deployProvLogicalCpIfDefaultsPushedFarEndIpHeader, transientCryptoSessKeyLifetimeChanged=transientCryptoSessKeyLifetimeChanged, unusedWdmPathIndex=unusedWdmPathIndex, intervalEthRx3HS1dayOversizedFramesRcv=intervalEthRx3HS1dayOversizedFramesRcv, plugDataMaxPowerConsumption=plugDataMaxPowerConsumption, alarmEncryptionPortEncryptionSwitchOffEnabled=alarmEncryptionPortEncryptionSwitchOffEnabled, FspR7CpTunnelScopeCaps=FspR7CpTunnelScopeCaps, FspR7DispersionConfigCaps=FspR7DispersionConfigCaps, deployProvControlPlaneEthDefaultsCtmShutdownTimeout=deployProvControlPlaneEthDefaultsCtmShutdownTimeout, alarmLaserBiasCurrentNormalizedtooHigh=alarmLaserBiasCurrentNormalizedtooHigh, alarmOscPwrTooHigh=alarmOscPwrTooHigh, changeServiceDeployProvIfPumpPower=changeServiceDeployProvIfPumpPower, opticalIfConfigAlsMode=opticalIfConfigAlsMode, intervalGfp1dayNumber=intervalGfp1dayNumber, intervalPhysPerfOscOpticalOutputPwr15minTable=intervalPhysPerfOscOpticalOutputPwr15minTable, tunnelEthDataFromAid=tunnelEthDataFromAid, teNumLinkOtnDataTeLinkIp=teNumLinkOtnDataTeLinkIp, ptpEntityDataFiber=ptpEntityDataFiber, deployProvPathElementOtnDefaultsUpTributaryTSMethod=deployProvPathElementOtnDefaultsUpTributaryTSMethod, currentOtuFec15minUBE=currentOtuFec15minUBE, alarmThres15MinExceededPhysConvESTX=alarmThres15MinExceededPhysConvESTX, deployProvLogicalIfDefaultsOspf=deployProvLogicalIfDefaultsOspf, farEndPlugDiagnosticsEntry=farEndPlugDiagnosticsEntry, srvSyslog=srvSyslog, deployProvPathWdmTable=deployProvPathWdmTable, ntpSysCurrentConditionEntry=ntpSysCurrentConditionEntry, deployProvControlPlaneWdmDefaultsCtmMaximumRetryNumber=deployProvControlPlaneWdmDefaultsCtmMaximumRetryNumber, intervalPhysPerfOlmTxLineAtt1dayValidFlag=intervalPhysPerfOlmTxLineAtt1dayValidFlag, deployProvTifInputCapAdmin=deployProvTifInputCapAdmin, deployProvControlPlaneWdmDefaultsCtmRetryWait=deployProvControlPlaneWdmDefaultsCtmRetryWait, deployProvPathElementOtnCapEntry=deployProvPathElementOtnCapEntry, crsConnWdmDataCrsFunction=crsConnWdmDataCrsFunction, pathElementEthDataLogicalInterfaceId=pathElementEthDataLogicalInterfaceId, intervalPhysPerfOscOpticalOutputPwr1dayMean=intervalPhysPerfOscOpticalOutputPwr1dayMean, FspR7AutopLif=FspR7AutopLif, intervalGfpfrSublayer15minGoodFrames=intervalGfpfrSublayer15minGoodFrames, farEndPlugConfigAlias=farEndPlugConfigAlias, connectionEthDataEntry=connectionEthDataEntry, currentEthRx3HS1dayMulticastFramesRcv=currentEthRx3HS1dayMulticastFramesRcv, currentEthRx3HS15minEntry=currentEthRx3HS15minEntry, ntpSysCurrentConditionAffect=ntpSysCurrentConditionAffect, intervalLatency1dayHigh=intervalLatency1dayHigh, deployProvPortBindingDefaultsTable=deployProvPortBindingDefaultsTable, exChannelDataEntry=exChannelDataEntry, interfaceConfigEqlzAdmin=interfaceConfigEqlzAdmin, eRoadmConfigCapEntry=eRoadmConfigCapEntry, deployProvApsCapWaitToRestore=deployProvApsCapWaitToRestore, tunnelOtnDataErrorCodeMajor=tunnelOtnDataErrorCodeMajor, deployProvModuleDefaultsRowStatus=deployProvModuleDefaultsRowStatus, changeServiceDeployProvIfDefaultsPayload=changeServiceDeployProvIfDefaultsPayload, controlPlaneWdmConfigCdTraceDetail=controlPlaneWdmConfigCdTraceDetail, deployProvControlPlaneOtnCapCtmRetryWait=deployProvControlPlaneOtnCapCtmRetryWait, intervalLatency1dayTable=intervalLatency1dayTable, portBindingLifAidTable=portBindingLifAidTable, controlPlaneWdmConfigCdbDetail=controlPlaneWdmConfigCdbDetail, FspR7CpAuthTypeCaps=FspR7CpAuthTypeCaps, farEndPlugConfigCapMaxDataRate=farEndPlugConfigCapMaxDataRate, deployProvTunnelWdmCapPin=deployProvTunnelWdmCapPin, currentPmSnapshotAttenuationOfVoa=currentPmSnapshotAttenuationOfVoa, controlPlaneOtnEntityStateAdmin=controlPlaneOtnEntityStateAdmin, transientThres1DayExceededFecSES=transientThres1DayExceededFecSES, changeServiceDeployProvIfDefaultsSigDegThresOdu=changeServiceDeployProvIfDefaultsSigDegThresOdu, FspR7LineCodingCaps=FspR7LineCodingCaps, connectionWdmDataActivationState=connectionWdmDataActivationState, FspR7CpEncapsulation=FspR7CpEncapsulation, pmSnapshotStatus=pmSnapshotStatus, logicalIfConfigTimeToLive=logicalIfConfigTimeToLive, fspUserManagementDefaultsSecurityLevel=fspUserManagementDefaultsSecurityLevel, teUnnumLinkWdmDataTable=teUnnumLinkWdmDataTable, intervalPhysPerfOlmRxLineAtt1weekTimeStamp=intervalPhysPerfOlmRxLineAtt1weekTimeStamp, deployProvCrsDcnDefaultsEntry=deployProvCrsDcnDefaultsEntry, intervalSonetHoPath1dayTable=intervalSonetHoPath1dayTable, thresholdSonetSectESHighThres15min=thresholdSonetSectESHighThres15min, FspR7Protocol=FspR7Protocol, deployProvCrsDcnLinkAidCapsEntry=deployProvCrsDcnLinkAidCapsEntry, eRoadmConfigTable=eRoadmConfigTable, deployProvIfCapLagPrio=deployProvIfCapLagPrio, deployProvCrsDcnEntry=deployProvCrsDcnEntry, deployProvPlugTable=deployProvPlugTable, deployProvPlugDefaultsEntry=deployProvPlugDefaultsEntry, apsProtFacilityConfigInhibitSwitchToWork=apsProtFacilityConfigInhibitSwitchToWork, intervalPhysPerfPumpPwr15minNumber=intervalPhysPerfPumpPwr15minNumber, deployProvPortBindingCapTable=deployProvPortBindingCapTable, deployProvControlPlaneWdmCapCdbMaxSize=deployProvControlPlaneWdmCapCdbMaxSize, ntpSrvDeletion=ntpSrvDeletion, alarmSignalDegradeLine=alarmSignalDegradeLine, deployProvControlPlaneWdmCapRmConfigFlag=deployProvControlPlaneWdmCapRmConfigFlag, deployProvControlPlaneWdmDefaultsNaasAdvertWait=deployProvControlPlaneWdmDefaultsNaasAdvertWait, deployProvTunnelEthCapProvisionedPaths=deployProvTunnelEthCapProvisionedPaths, currentOduTcmB15minEntry=currentOduTcmB15minEntry, deployProvTunnelWdmDefaultsSubLayerEncoding=deployProvTunnelWdmDefaultsSubLayerEncoding, deployProvIfFiberBrand=deployProvIfFiberBrand, controlPlaneOtnDataRaAlias=controlPlaneOtnDataRaAlias, transientEncryptionPortSingleKeyExchgFailed=transientEncryptionPortSingleKeyExchgFailed, deployProvIfDefaultsSigDegThresOduTcmA=deployProvIfDefaultsSigDegThresOduTcmA, deployProvOpticalLinkTxLineAttenuation=deployProvOpticalLinkTxLineAttenuation, deployProvTunnelWdmSubLayerEncoding=deployProvTunnelWdmSubLayerEncoding, fspUserManagementCapTimeoutAvailable=fspUserManagementCapTimeoutAvailable, intervalPhysPerfEstimatedSignalGain15minTable=intervalPhysPerfEstimatedSignalGain15minTable, alarmAseLow=alarmAseLow, deployProvControlPlaneOtnDefaultsRsvpMaxExpRecoveryTime=deployProvControlPlaneOtnDefaultsRsvpMaxExpRecoveryTime, deployProvTunnelOtnCapToTid=deployProvTunnelOtnCapToTid, deployProvIfDefaultsAreaId=deployProvIfDefaultsAreaId, controlPlaneWdmDataEntry=controlPlaneWdmDataEntry, inventoryCpEthDownFlowDataTable=inventoryCpEthDownFlowDataTable, alarmThres15MinExceededSonetSectSES=alarmThres15MinExceededSonetSectSES, opticalIfConfigSigDegThresSdhSection=opticalIfConfigSigDegThresSdhSection, opticalIfDataLagSysPrio=opticalIfDataLagSysPrio, intervalDispersionCompensation1dayTimeStamp=intervalDispersionCompensation1dayTimeStamp, intervalFarEndPhysPerfOpticalOutputPwr1dayMean=intervalFarEndPhysPerfOpticalOutputPwr1dayMean, deployProvControlPlaneOtnRmConfigFlag=deployProvControlPlaneOtnRmConfigFlag, deployProvIfCapTraceExpectedOduTcmA=deployProvIfCapTraceExpectedOduTcmA, logicalCpIfConfigRefreshTimeout=logicalCpIfConfigRefreshTimeout, FspR7CpPinningCaps=FspR7CpPinningCaps, currentSubAggregate1dayES=currentSubAggregate1dayES, alarmCarrierFreqOffsetTooHigh=alarmCarrierFreqOffsetTooHigh, currentGfp1dayElapsedTime=currentGfp1dayElapsedTime, intraNeConnectionsEndpointB=intraNeConnectionsEndpointB, changeServiceDeployProvIfCapVariableGain=changeServiceDeployProvIfCapVariableGain, deployProvIfCapGain=deployProvIfCapGain, opticalIfConfigCapLacpMode=opticalIfConfigCapLacpMode, deployProvIfDefaultsTiltSet=deployProvIfDefaultsTiltSet, thresholdPhysPerfCapDispersionCompensationLowThres=thresholdPhysPerfCapDispersionCompensationLowThres, currentEthRx3HS15minBytesFrames128Rcv=currentEthRx3HS15minBytesFrames128Rcv, intervalEthRx3HS1dayBytesFrames1519Rcv=intervalEthRx3HS1dayBytesFrames1519Rcv, intervalOtuFec15minUBE=intervalOtuFec15minUBE, intervalPhysPerfPumpPwr1dayTimeStamp=intervalPhysPerfPumpPwr1dayTimeStamp, deployProvPathElementWdmDefaultsRowStatus=deployProvPathElementWdmDefaultsRowStatus, changeServiceDeployProvIfTraceTransmitDapiOduTcmC=changeServiceDeployProvIfTraceTransmitDapiOduTcmC, deployProvPathEthPathId=deployProvPathEthPathId, connectionOtnDataTunnelNo=connectionOtnDataTunnelNo, changeServiceDeployProvIfDefaultsTimModeOdu=changeServiceDeployProvIfDefaultsTimModeOdu, intervalPhysPerfOlmRxLineAtt1dayEntry=intervalPhysPerfOlmRxLineAtt1dayEntry, currentOdu1dayBbe=currentOdu1dayBbe, deployProvTunnelWdmDefaultsRestPathsNoProv=deployProvTunnelWdmDefaultsRestPathsNoProv, intervalSubAggregate15minValidFlag=intervalSubAggregate15minValidFlag, deployProvControlPlaneEthDefaultsTedbTraceDetail=deployProvControlPlaneEthDefaultsTedbTraceDetail, moduleDataInternalPorts=moduleDataInternalPorts, FspR7NtpTest=FspR7NtpTest, moduleDiagnosticsCurrentLowThres=moduleDiagnosticsCurrentLowThres, currentOdu15minES=currentOdu15minES, deployProvVirtualOpticalChannelDefaultsRowStatus=deployProvVirtualOpticalChannelDefaultsRowStatus, thresholdFarEndPhysPerfOpticalOutputPwrLow=thresholdFarEndPhysPerfOpticalOutputPwrLow, changeServiceDeployProvIfDefaultsSigDegThresOduTcmA=changeServiceDeployProvIfDefaultsSigDegThresOduTcmA, deployProvExChannelAlias=deployProvExChannelAlias, pppDataFarEndIp=pppDataFarEndIp, thresholdSonetHoPathUASHighThres1day=thresholdSonetHoPathUASHighThres1day, intervalPhysPerfCarrierFreqOffset15minHigh=intervalPhysPerfCarrierFreqOffset15minHigh, intervalPhysPerfCurrentOscGain15minHigh=intervalPhysPerfCurrentOscGain15minHigh, tunnelEthDataTunnelType=tunnelEthDataTunnelType, tunnelEthDataComputationState=tunnelEthDataComputationState, intervalEthRx3HS15minGoodFrames=intervalEthRx3HS15minGoodFrames, moduleDataEccPorts=moduleDataEccPorts, intervalRoundTripDelay15minTimeStamp=intervalRoundTripDelay15minTimeStamp, ethernetConfigBitrate=ethernetConfigBitrate, deployProvVchChannelSigDegThresOdu=deployProvVchChannelSigDegThresOdu, connectionWdmConfigCancelModifier=connectionWdmConfigCancelModifier, alarmRemoteDefectIndicationLine=alarmRemoteDefectIndicationLine, intervalRoundTripDelay15minLow=intervalRoundTripDelay15minLow, transientLocalCopyFileStarted=transientLocalCopyFileStarted, deployProvPathElementOtnUpTributarySlot=deployProvPathElementOtnUpTributarySlot, intervalGfp15minTable=intervalGfp15minTable, opticalLinkConfigFarEndLocation=opticalLinkConfigFarEndLocation, currentOtu1dayBbe=currentOtu1dayBbe, deployProvExChannelFecType=deployProvExChannelFecType, intervalLatency1dayEntry=intervalLatency1dayEntry, intervalPhysPerfOlmTxLineAtt15minTable=intervalPhysPerfOlmTxLineAtt15minTable, deployProvPppIpDefaultsAdmin=deployProvPppIpDefaultsAdmin, thresholdPhysConvTxHighSpeedCVTXHighThres15min=thresholdPhysConvTxHighSpeedCVTXHighThres15min, deployProvIfCapTraceTransmitSapiOdu=deployProvIfCapTraceTransmitSapiOdu, dcnOspfAreaCapEntry=dcnOspfAreaCapEntry, deployProvIfCapTraceTransmitDapiOduTcmC=deployProvIfCapTraceTransmitDapiOduTcmC, currentSonetSect1daySEFS=currentSonetSect1daySEFS, deployProvExChannelTransmitChannel=deployProvExChannelTransmitChannel, f7eqp4csmd=f7eqp4csmd, intervalPhysPerfOlmRxLineAtt1weekTable=intervalPhysPerfOlmRxLineAtt1weekTable, deployProvLogicalCpIfCapOspf=deployProvLogicalCpIfCapOspf, alarmFwdAseTableFailPilot=alarmFwdAseTableFailPilot, deployProvIfLanAidCapsEntry=deployProvIfLanAidCapsEntry, intervalPhysConvHighSpeed15minES=intervalPhysConvHighSpeed15minES, intervalPhysPerfBackreflectionPwrRcv15minValidFlag=intervalPhysPerfBackreflectionPwrRcv15minValidFlag, FspR7LossAttenuation=FspR7LossAttenuation, currentSonetSect15minES=currentSonetSect15minES, intervalEthRxHighSpeed1dayValidFlag=intervalEthRxHighSpeed1dayValidFlag, alarmEncryptionModuleSelfTestFail=alarmEncryptionModuleSelfTestFail, deployProvPathWdmCapPathId=deployProvPathWdmCapPathId, forceDeployProvApsCapSignalDegradeSwitching=forceDeployProvApsCapSignalDegradeSwitching, intervalEthTx15minTimeStamp=intervalEthTx15minTimeStamp, FspR7CpCommandCaps=FspR7CpCommandCaps, deployProvExChannelCapRowStatus=deployProvExChannelCapRowStatus, deployProvApsCapSignalDegradeSwitching=deployProvApsCapSignalDegradeSwitching, intervalOtuFec15minTimeStamp=intervalOtuFec15minTimeStamp, deployProvPathOtnPathId=deployProvPathOtnPathId, transientCopyFileNoHostKeyFail=transientCopyFileNoHostKeyFail, tunnelOtnDataErrorCategory=tunnelOtnDataErrorCategory, opticalIfConfigCapOpuPayloadType=opticalIfConfigCapOpuPayloadType, deployProvIfDefaultsTraceTransmitDapiOduTcmA=deployProvIfDefaultsTraceTransmitDapiOduTcmA, deployProvCopyPathOtnCapTable=deployProvCopyPathOtnCapTable, alarmNtpServer2Unreachable=alarmNtpServer2Unreachable, changeServiceDeployProvIfSigDegPeriodOdu=changeServiceDeployProvIfSigDegPeriodOdu, tunnelWdmDataSpecificErrorMessage=tunnelWdmDataSpecificErrorMessage, currentPhysConv1dayTable=currentPhysConv1dayTable, alarmIntrusionTx=alarmIntrusionTx, logicalCpIfDataIpType=logicalCpIfDataIpType, intervalSubAggregate15minNumber=intervalSubAggregate15minNumber, deployProvTunnelEthCapEntry=deployProvTunnelEthCapEntry, deployProvModuleSubBand=deployProvModuleSubBand, intervalPhysPerfOpticalOutputPwr1weekTimeStamp=intervalPhysPerfOpticalOutputPwr1weekTimeStamp, deployProvControlPlaneWdmCapEntry=deployProvControlPlaneWdmCapEntry, teUnnumLinkEthDataNumber=teUnnumLinkEthDataNumber, intervalPhysConvHighSpeed15minValidFlag=intervalPhysConvHighSpeed15minValidFlag, exChannelConfigFarEndLocation=exChannelConfigFarEndLocation, deployProvIfDefaultsIpType=deployProvIfDefaultsIpType, deployProvTunnelOtnCapToAid=deployProvTunnelOtnCapToAid, alarmEquipmentNotSupportedByPhysicalLayer=alarmEquipmentNotSupportedByPhysicalLayer, areaIdCapStringCap=areaIdCapStringCap, intervalPhysPerfChromaticDispersion1weekEntry=intervalPhysPerfChromaticDispersion1weekEntry, deployProvPppIpCapRowStatus=deployProvPppIpCapRowStatus, alarmSwitchtoWorkingInhibited=alarmSwitchtoWorkingInhibited, authTrapRadUserName=authTrapRadUserName, deployProvConnNonStdCapFromTable=deployProvConnNonStdCapFromTable, currentOtu15minElapsedTime=currentOtu15minElapsedTime, tunnelEthDataToTidMonitor=tunnelEthDataToTidMonitor, changeServiceDeployProvIfErrorForwarding=changeServiceDeployProvIfErrorForwarding, transientThres1DayExceededOduTcmCSES=transientThres1DayExceededOduTcmCSES, FspR7ChannelNumberCaps=FspR7ChannelNumberCaps, deployProvTunnelWdmCapToTid=deployProvTunnelWdmCapToTid, deployProvControlPlaneOtnCapTedbRouterId=deployProvControlPlaneOtnCapTedbRouterId)
mibBuilder.exportSymbols("FspR7-MIB", changeServiceDeployProvIfDefaultsErrorForwarding=changeServiceDeployProvIfDefaultsErrorForwarding, alarmBackwardDefectIndicationOdu=alarmBackwardDefectIndicationOdu, logicalCpIfDataLanLinkAidDerived=logicalCpIfDataLanLinkAidDerived, deployProvLogicalCpIfEncapsulation=deployProvLogicalCpIfEncapsulation, deployProvTunnelWdmDefaultsEntry=deployProvTunnelWdmDefaultsEntry, crsConnDeployProvConn=crsConnDeployProvConn, FspR7SubLayer=FspR7SubLayer, currentPhysConvHighSpeed1dayTable=currentPhysConvHighSpeed1dayTable, thresholdOtuFecUBEHighThres1day=thresholdOtuFecUBEHighThres1day, changeServiceDeployProvIfCapTimingSource=changeServiceDeployProvIfCapTimingSource, forceDeployProvApsDefaultsSDswitching=forceDeployProvApsDefaultsSDswitching, deployProvLogicalCpIfDefaultsFendTeLinkIdUnn=deployProvLogicalCpIfDefaultsFendTeLinkIdUnn, deployProvControlPlaneWdmDefaultsCdResyncTimeout=deployProvControlPlaneWdmDefaultsCdResyncTimeout, alarmThres15MinExceededPhysConvES=alarmThres15MinExceededPhysConvES, farEndIfDiagnosticsEntry=farEndIfDiagnosticsEntry, deployProvModuleEqlzAdmin=deployProvModuleEqlzAdmin, deployProvPortBindingDefaultsLogicalIfAid=deployProvPortBindingDefaultsLogicalIfAid, deployProvTifOutputEntry=deployProvTifOutputEntry, deployProvLogicalCpIfDefaultsDeadInterval=deployProvLogicalCpIfDefaultsDeadInterval, thresholdEthRxDiscardedFramesHighThres15Min=thresholdEthRxDiscardedFramesHighThres15Min, FspR7BERThresholdSection=FspR7BERThresholdSection, FspR7ProtectionType=FspR7ProtectionType, neDefaultGateway=neDefaultGateway, currentPhysConvHighSpeed15minSE=currentPhysConvHighSpeed15minSE, deployProvIfCapLacpMode=deployProvIfCapLacpMode, alarmEquipmentNotAccepted=alarmEquipmentNotAccepted, intervalPhysPerfLaserBiasCurrentNormalized15minMean=intervalPhysPerfLaserBiasCurrentNormalized15minMean, unusedOtnTunnelIndex=unusedOtnTunnelIndex, thresholdEthTxPauseFramesHighThres15Min=thresholdEthTxPauseFramesHighThres15Min, deployProvIfMetric=deployProvIfMetric, fspUserManagementCapEntry=fspUserManagementCapEntry, intervalEthRx15minCrcFrames=intervalEthRx15minCrcFrames, deployProvIfDefaultsSigDegPeriodOduTcmA=deployProvIfDefaultsSigDegPeriodOduTcmA, tunnelEthConfigTable=tunnelEthConfigTable, syslogConfigTable=syslogConfigTable, changeServiceDeployProvIfDefaultsTcmALevel=changeServiceDeployProvIfDefaultsTcmALevel, intervalGfpt15minDiscardedSuperblocks=intervalGfpt15minDiscardedSuperblocks, inventoryCpOtnCrsUpDataEntry=inventoryCpOtnCrsUpDataEntry, deployProvLanIpAddr=deployProvLanIpAddr, deployProvPathElementOtnDownTributaryPort=deployProvPathElementOtnDownTributaryPort, pathElementOtnDataTrafficEngineeringType=pathElementOtnDataTrafficEngineeringType, pathElementWdmDataTidMonitor=pathElementWdmDataTidMonitor, crsConnDeployProvDefaultsRowStatus=crsConnDeployProvDefaultsRowStatus, pppfConfigBaud=pppfConfigBaud, alarmThres15MinExceededPhysConvSE=alarmThres15MinExceededPhysConvSE, deployProvLogicalCpIfFendTeLinkIdNum=deployProvLogicalCpIfFendTeLinkIdNum, changeServiceDeployProvIfIpType=changeServiceDeployProvIfIpType, alarmMaxPowerConsEquipModulesToHigh=alarmMaxPowerConsEquipModulesToHigh, opticalIfDiagRoundTripDelay=opticalIfDiagRoundTripDelay, controlPlaneWdmConfigCdbConfigFlag=controlPlaneWdmConfigCdbConfigFlag, currentOtu15minBbe=currentOtu15minBbe, f7eqpVsm=f7eqpVsm, intervalOdu15minTable=intervalOdu15minTable, deployProvLanCapIpMask=deployProvLanCapIpMask, alarmVoltageTooLow=alarmVoltageTooLow, deployProvIfCapWdmRxChannel=deployProvIfCapWdmRxChannel, intervalLatency1dayLow=intervalLatency1dayLow, vc4c8allocatedFacilityType=vc4c8allocatedFacilityType, moduleDataDeploymentScenario=moduleDataDeploymentScenario, ApsType=ApsType, controlPlaneEthConfigRsvpMaxExpRestartTime=controlPlaneEthConfigRsvpMaxExpRestartTime, neighborDiscoveryDataFarEndTranLayerTermPoint=neighborDiscoveryDataFarEndTranLayerTermPoint, intervalFarEndPhysPerfOpticalOutputPwr15minValidFlag=intervalFarEndPhysPerfOpticalOutputPwr15minValidFlag, deployProvControlPlaneEthDefaultsRowStatus=deployProvControlPlaneEthDefaultsRowStatus, opticalLinkDataEntry=opticalLinkDataEntry, deployProvLanForceDestroy=deployProvLanForceDestroy, thresholdOduTcmCBESHighThres15min=thresholdOduTcmCBESHighThres15min, deployProvExChannelOSNRTransmit=deployProvExChannelOSNRTransmit, currentGfp1dayTypeHecCorrectedFrames=currentGfp1dayTypeHecCorrectedFrames, deployProvTifOutputCapTable=deployProvTifOutputCapTable, FspR7PortRole=FspR7PortRole, deployProvControlPlaneWdmCtmTraceDetail=deployProvControlPlaneWdmCtmTraceDetail, intervalGfpfrSublayer1dayGoodFrames=intervalGfpfrSublayer1dayGoodFrames, changeServiceDeployProvIfCapTimModeOduTcmA=changeServiceDeployProvIfCapTimModeOduTcmA, deployProvControlPlaneEthCtmRetryWaitMultiplier=deployProvControlPlaneEthCtmRetryWaitMultiplier, deployProvIfCapTimModeOtu=deployProvIfCapTimModeOtu, deployProvPathElementWdmDefaultsLogicalInterfaceId=deployProvPathElementWdmDefaultsLogicalInterfaceId, intervalPhysPerfEstimatedSignalGain15minTimeStamp=intervalPhysPerfEstimatedSignalGain15minTimeStamp, intervalOtuFec1daySES=intervalOtuFec1daySES, FspR7FecTypeCaps=FspR7FecTypeCaps, FspR7LacpMode=FspR7LacpMode, currentOtu1dayEntry=currentOtu1dayEntry, deployProvLanDefaultsIpType=deployProvLanDefaultsIpType, pathElementWdmDataEntry=pathElementWdmDataEntry, controlPlaneEthConfigTedbRouterId=controlPlaneEthConfigTedbRouterId, forceDeployProvApsProtectingAidCapsTable=forceDeployProvApsProtectingAidCapsTable, deployProvControlPlaneEthCapCmTraceDetail=deployProvControlPlaneEthCapCmTraceDetail, deployProvTunnelEthCapConnectionDirection=deployProvTunnelEthCapConnectionDirection, deployProvTunnelEthCapFromAid=deployProvTunnelEthCapFromAid, opticalIfDataWavelength=opticalIfDataWavelength, changeServiceDeployProvIfFlowControl=changeServiceDeployProvIfFlowControl, deployProvPathElementEthCapTid=deployProvPathElementEthCapTid, deployProvLanCapAdmin=deployProvLanCapAdmin, deployProvCopyPathWdmDefaultsTable=deployProvCopyPathWdmDefaultsTable, deployProvIfCapXfpDecisionThres=deployProvIfCapXfpDecisionThres, intervalLinkAttenuation1dayTable=intervalLinkAttenuation1dayTable, deployProvPathWdmRowStatus=deployProvPathWdmRowStatus, inventoryCpWdmUpDataPhysicalTermPoints=inventoryCpWdmUpDataPhysicalTermPoints, logicalIfConfigPushedFarEndIpHeader=logicalIfConfigPushedFarEndIpHeader, deployProvConnStdCapFromTable=deployProvConnStdCapFromTable, deployProvLanDefaultsIpAddr=deployProvLanDefaultsIpAddr, currentOduTcmC1dayEntry=currentOduTcmC1dayEntry, FspR7Scrambling=FspR7Scrambling, deployProvTunnelWdmCapTerminationLevel=deployProvTunnelWdmCapTerminationLevel, opticalIfConfigLagLoadBallanceSource=opticalIfConfigLagLoadBallanceSource, deployProvLogicalIfLanLinkAid=deployProvLogicalIfLanLinkAid, deployProvIfDefaultsTimModeOduTcmB=deployProvIfDefaultsTimModeOduTcmB, deployProvExChannelMaximumOpticalPowerRcv=deployProvExChannelMaximumOpticalPowerRcv, intervalPhysPerfLaserBiasCurrentNormalized1dayMean=intervalPhysPerfLaserBiasCurrentNormalized1dayMean, intervalDispersionCompensation1weekNumber=intervalDispersionCompensation1weekNumber, currentEthRx3HS15minMulticastFramesRcv=currentEthRx3HS15minMulticastFramesRcv, thresholdSonetLineMsESHighThres1day=thresholdSonetLineMsESHighThres1day, deployProvModuleDefaultsLanAid=deployProvModuleDefaultsLanAid, thresholdSonetLineMsUASHighThres15min=thresholdSonetLineMsUASHighThres15min, alarmFacilityDataRateNotSupported=alarmFacilityDataRateNotSupported, sts48callocatedEntry=sts48callocatedEntry, deployProvIfCapTraceTransmitOpspOtu=deployProvIfCapTraceTransmitOpspOtu, entityStateChange=entityStateChange, thresholdPhysPerfPumpLaser4TempHighThres=thresholdPhysPerfPumpLaser4TempHighThres, exChannelConfigLineCoding=exChannelConfigLineCoding, forceDeployProvApsDefaultsTable=forceDeployProvApsDefaultsTable, thresholdOtuFecSublayerESHighThres1day=thresholdOtuFecSublayerESHighThres1day, thresholdEthTxEntry=thresholdEthTxEntry, teNumLinkEthDataNodeIp=teNumLinkEthDataNodeIp, deployProvTunnelOtnDefaultsTunnelId=deployProvTunnelOtnDefaultsTunnelId, alarmHwFailure=alarmHwFailure, transientThres1DayExceededOtuUAS=transientThres1DayExceededOtuUAS, tunnelEthDataFromNodeIP=tunnelEthDataFromNodeIP, intervalPhysPerfOlmTxLineAtt1weekTimeStamp=intervalPhysPerfOlmTxLineAtt1weekTimeStamp, deployProvControlPlaneWdmDefaultsPcConfigFlag=deployProvControlPlaneWdmDefaultsPcConfigFlag, opticalAmplifierEquipmentDiagnosticsUpperSubTempThres=opticalAmplifierEquipmentDiagnosticsUpperSubTempThres, tunnelOtnConfigAlias=tunnelOtnConfigAlias, deployProvIfDefaultsAdmin=deployProvIfDefaultsAdmin, ApsDirection=ApsDirection, alarmAutoShutdownLaserOffDueToHighTxPwr=alarmAutoShutdownLaserOffDueToHighTxPwr, deployProvExChannelPMDTransmit=deployProvExChannelPMDTransmit, deployProvIfDefaultsOpticalSetPoint=deployProvIfDefaultsOpticalSetPoint, changeServiceDeployProvIfDefaultsTraceTransmitDapiOtu=changeServiceDeployProvIfDefaultsTraceTransmitDapiOtu, inactiveRoutingIpRoutingMetric=inactiveRoutingIpRoutingMetric, currentOtuFec1dayBERCE=currentOtuFec1dayBERCE, controlPlaneOtnDataTedbAlias=controlPlaneOtnDataTedbAlias, changeServiceDeployProvIfAreaId=changeServiceDeployProvIfAreaId, connectionEthConfigTable=connectionEthConfigTable, deployProvOpticalLinkCapFarEndLocation=deployProvOpticalLinkCapFarEndLocation, deployProvControlPlaneWdmCapCdbConfigFlag=deployProvControlPlaneWdmCapCdbConfigFlag, FspR7OpticalGroup=FspR7OpticalGroup, neDate=neDate, lastErrorStatus=lastErrorStatus, deployProvCopyPathEthDefaultsEntry=deployProvCopyPathEthDefaultsEntry, intervalPhysPerfChromaticDispersion1dayNumber=intervalPhysPerfChromaticDispersion1dayNumber, deployProvCopyPathEthEntry=deployProvCopyPathEthEntry, deployProvExChannelFrameFormat=deployProvExChannelFrameFormat, deployProvLogicalCpIfRefreshTimeout=deployProvLogicalCpIfRefreshTimeout, deployProvControlPlaneOtnDefaultsCdConfigFlag=deployProvControlPlaneOtnDefaultsCdConfigFlag, alarmConfigurableOpticalOutputPowerTransmittedTooLow=alarmConfigurableOpticalOutputPowerTransmittedTooLow, remoteAlarmCpDataTime=remoteAlarmCpDataTime, deployProvModuleDefaultsCac=deployProvModuleDefaultsCac, deployProvPppIpDefaultsBaud=deployProvPppIpDefaultsBaud, deployProvTunnelEthCapMonitorEntities=deployProvTunnelEthCapMonitorEntities, tunnelOtnDataSpecificErrorMessage=tunnelOtnDataSpecificErrorMessage, intervalPhysPerfPumpPwr15minHigh=intervalPhysPerfPumpPwr15minHigh, controlPlaneEthConfigTable=controlPlaneEthConfigTable, tunnelOtnDataFromTid=tunnelOtnDataFromTid, pathWdmDataEntry=pathWdmDataEntry, plugInventoryReach=plugInventoryReach, f7eqp4csmud=f7eqp4csmud, ApsRevertMode=ApsRevertMode, deployProvExChannelDefaultsChromaticDispersionTx=deployProvExChannelDefaultsChromaticDispersionTx, deployProvTifInputCapType=deployProvTifInputCapType, alarmOosPrePostSig=alarmOosPrePostSig, connectionEthDataTunnelId=connectionEthDataTunnelId, f7eqpwca2g5=f7eqpwca2g5, deployProvTunnelWdmCapRecoveryType=deployProvTunnelWdmCapRecoveryType, opticalIfConfigTable=opticalIfConfigTable, opticalIfConfigTxOffDelay=opticalIfConfigTxOffDelay, logicalCpIfConfigMetric=logicalCpIfConfigMetric, neTime=neTime, deployProvLogicalCpIfCapNendTeLinkIdNum=deployProvLogicalCpIfCapNendTeLinkIdNum, thresholdOduTcmBBESHighThres15min=thresholdOduTcmBBESHighThres15min, FspR7RedLinedStateCaps=FspR7RedLinedStateCaps, transientCryptoFwpUpdate=transientCryptoFwpUpdate, deployProvControlPlaneWdmCapNaasMaxSize=deployProvControlPlaneWdmCapNaasMaxSize, deployProvTunnelEthDefaultsLayer=deployProvTunnelEthDefaultsLayer, intervalOduTcmC1dayES=intervalOduTcmC1dayES, changeServiceDeployProvIfTraceTransmitSapiOduTcmB=changeServiceDeployProvIfTraceTransmitSapiOduTcmB, intervalLatency15minLow=intervalLatency15minLow, intervalPhysPerfOscPwr15minTable=intervalPhysPerfOscPwr15minTable, intervalDispersionCompensation1dayEntry=intervalDispersionCompensation1dayEntry, neVendorId=neVendorId, transientCpConnectionModificationStart=transientCpConnectionModificationStart, changeServiceDeployProvIfCapTraceTransmitDapiOduTcmA=changeServiceDeployProvIfCapTraceTransmitDapiOduTcmA, opticalIfDataLagFendState=opticalIfDataLagFendState, deployProvControlPlaneOtnCapRowStatus=deployProvControlPlaneOtnCapRowStatus, deployProvControlPlaneEthCtmMaximumRetryWait=deployProvControlPlaneEthCtmMaximumRetryWait, thresholdPhysConvTxHighSpeedESTXHighThres1day=thresholdPhysConvTxHighSpeedESTXHighThres1day, changeServiceDeployProvIfCapChannelProvisioning=changeServiceDeployProvIfCapChannelProvisioning, alarmSignalFailureOnLink=alarmSignalFailureOnLink, tunnelWdmDataConnectionDirection=tunnelWdmDataConnectionDirection, intervalPhysConv15minValidFlag=intervalPhysConv15minValidFlag, intervalPhysPerfOlmRxLineAtt15minEntry=intervalPhysPerfOlmRxLineAtt15minEntry, deployProvPppIpProxyArp=deployProvPppIpProxyArp, deployProvControlPlaneWdmCtmMaximumRetryWait=deployProvControlPlaneWdmCtmMaximumRetryWait, eRoadmConfigCapOffset=eRoadmConfigCapOffset, exChannelDataType=exChannelDataType, logicalCpIfConfigAreaId=logicalCpIfConfigAreaId, deployProvControlPlaneWdmCapWaitToRestore=deployProvControlPlaneWdmCapWaitToRestore, forceDeployProvApsProtectionAid=forceDeployProvApsProtectionAid, thresholdFarEndPhysPerfOpticalInputPwrHigh=thresholdFarEndPhysPerfOpticalInputPwrHigh, deployProvPathElementOtnEntry=deployProvPathElementOtnEntry, crsConnDataConn=crsConnDataConn, deployProvTunnelWdmFecType=deployProvTunnelWdmFecType, tunnelWdmConfigPin=tunnelWdmConfigPin, intervalGfpt1dayTable=intervalGfpt1dayTable, ptpEntityDataReach=ptpEntityDataReach, intraNeConnectionsEntry=intraNeConnectionsEntry, intervalPhysPerfEstimatedSignalGain1dayTimeStamp=intervalPhysPerfEstimatedSignalGain1dayTimeStamp, tunnelWdmConfigTerminationLevel=tunnelWdmConfigTerminationLevel, pathElementEthDataEntry=pathElementEthDataEntry, FspR7PlugDataRateCaps=FspR7PlugDataRateCaps, intervalPhysPerfEstimatedSignalGain1dayValidFlag=intervalPhysPerfEstimatedSignalGain1dayValidFlag, deployProvModuleLanAidCapsIndex=deployProvModuleLanAidCapsIndex, FspR7CpPathType=FspR7CpPathType, dcnOspfAreaCapStubDefaultMetric=dcnOspfAreaCapStubDefaultMetric, eRoadmConfigCapTilt=eRoadmConfigCapTilt, tunnelEthDataCirTrmt=tunnelEthDataCirTrmt, deployProvTunnelOtnProvisionedPaths=deployProvTunnelOtnProvisionedPaths, portBindingDataRemoteTna=portBindingDataRemoteTna, ntpSysCurrentConditionTable=ntpSysCurrentConditionTable, moduleDataHeight=moduleDataHeight, deployProvExChannelCapLineCoding=deployProvExChannelCapLineCoding, deployProvIfDefaultsMaxFrameSize=deployProvIfDefaultsMaxFrameSize, remoteAlarmCpDataPath=remoteAlarmCpDataPath, plugInventoryEntry=plugInventoryEntry, vc3allocatedClassInstanceNumber=vc3allocatedClassInstanceNumber, deployProvCopyPathWdmCapRowStatus=deployProvCopyPathWdmCapRowStatus, connectionWdmDataRestorable=connectionWdmDataRestorable, deployProvCopyPathEthDefaultsRowStatus=deployProvCopyPathEthDefaultsRowStatus, intervalEthTx15minNumber=intervalEthTx15minNumber, deployProvIfCapAutoPTassignment=deployProvIfCapAutoPTassignment, moduleDataChannelsNumber=moduleDataChannelsNumber, tunnelEthDataToNodeIp=tunnelEthDataToNodeIp, controlPlaneOtnConfigTedbTraceDetail=controlPlaneOtnConfigTedbTraceDetail, intervalPhysPerfOscOpticalOutputPwr1dayEntry=intervalPhysPerfOscOpticalOutputPwr1dayEntry, deployProvControlPlaneEthDefaultsNaasTraceDetail=deployProvControlPlaneEthDefaultsNaasTraceDetail, deployProvControlPlaneOtnRmTraceDetail=deployProvControlPlaneOtnRmTraceDetail, transientBootUpFailed=transientBootUpFailed, currentOduTcmA1dayBbe=currentOduTcmA1dayBbe, deployProvPortBindingCapLogicalIfAid=deployProvPortBindingCapLogicalIfAid, currentEthTx15minGoodFramesx=currentEthTx15minGoodFramesx, deployProvControlPlaneWdmCapTedbMaxSize=deployProvControlPlaneWdmCapTedbMaxSize, deployProvPortBindingCapRemoteTna=deployProvPortBindingCapRemoteTna, deployProvIfSigDegPeriodOduTcmC=deployProvIfSigDegPeriodOduTcmC, changeServiceDeployProvIfAttenuationGradient=changeServiceDeployProvIfAttenuationGradient, deployProvPathElementWdmCapDownstreamModuleAid=deployProvPathElementWdmCapDownstreamModuleAid)
mibBuilder.exportSymbols("FspR7-MIB", intervalPhysPerfCarrierFreqOffset1dayTable=intervalPhysPerfCarrierFreqOffset1dayTable, intervalPhysPerfBackreflectionPwrRcv1dayTimeStamp=intervalPhysPerfBackreflectionPwrRcv1dayTimeStamp, intervalPhysConvTxHighSpeed15minNumber=intervalPhysConvTxHighSpeed15minNumber, controlPlaneWdmConfigCdConfigFlag=controlPlaneWdmConfigCdConfigFlag, intervalPhysPerfOpticalOutputPwr1weekLow=intervalPhysPerfOpticalOutputPwr1weekLow, deployProvDcnCapLanAid=deployProvDcnCapLanAid, deployProvVchChannelDefaultsTraceTransmitOpspOdu=deployProvVchChannelDefaultsTraceTransmitOpspOdu, intervalDispersionCompensation1weekLow=intervalDispersionCompensation1weekLow, deployProvPlugDefaultsThirdPartyUsage=deployProvPlugDefaultsThirdPartyUsage, FspR7CpRole=FspR7CpRole, intervalPhysPerfCurrentOscGain1weekNumber=intervalPhysPerfCurrentOscGain1weekNumber, intervalPhysConvCombined15minValidFlag=intervalPhysConvCombined15minValidFlag, deployProvControlPlaneWdmDefaultsCdConfigFlag=deployProvControlPlaneWdmDefaultsCdConfigFlag, fspUserManagementPrivilegeLevel=fspUserManagementPrivilegeLevel, intervalPhysConvHighSpeed15minTimeStamp=intervalPhysConvHighSpeed15minTimeStamp, deployProvApsEntry=deployProvApsEntry, deployProvOpticalLinkRxLineAttenuation=deployProvOpticalLinkRxLineAttenuation, currentPmSnapshotAttenuation=currentPmSnapshotAttenuation, deployProvControlPlaneOtnNaasAdvertWait=deployProvControlPlaneOtnNaasAdvertWait, currentDiagnosticsAmpere=currentDiagnosticsAmpere, deployProvTunnelWdmCapProvisionedPaths=deployProvTunnelWdmCapProvisionedPaths, thresholdSonetLoPathEntry=thresholdSonetLoPathEntry, intervalEthTx1dayCrcFramesEgress=intervalEthTx1dayCrcFramesEgress, intervalPhysPerfOpticalOutputPwr15minValidFlag=intervalPhysPerfOpticalOutputPwr15minValidFlag, deployProvLogicalCpIfCapVNodeTltp=deployProvLogicalCpIfCapVNodeTltp, deployProvLogicalCpIfVTeType=deployProvLogicalCpIfVTeType, deployProvPathElementOtnLifIp=deployProvPathElementOtnLifIp, deployProvVchChannelTable=deployProvVchChannelTable, crsConnWdmConfigPathNode=crsConnWdmConfigPathNode, f7eqpWcc10gc=f7eqpWcc10gc, wdmChannelModuleInventoryChannelId=wdmChannelModuleInventoryChannelId, interfaceConfigEntry=interfaceConfigEntry, connectionEthDataActivationState=connectionEthDataActivationState, intervalPhysPerfOlmRxLineAtt1dayHigh=intervalPhysPerfOlmRxLineAtt1dayHigh, deployProvIfCapDisparityCorrection=deployProvIfCapDisparityCorrection, thresholdPhysConvTxHighSpeedEntry=thresholdPhysConvTxHighSpeedEntry, intervalGfpfrSublayer15minTimeStamp=intervalGfpfrSublayer15minTimeStamp, deployProvTunnelOtnCapMonitorEntities=deployProvTunnelOtnCapMonitorEntities, intervalGfpfrSublayer15minTable=intervalGfpfrSublayer15minTable, portBindingDataRemoteScPc=portBindingDataRemoteScPc, knownHostFingerprint=knownHostFingerprint, deployProvTunnelOtnProtectionType=deployProvTunnelOtnProtectionType, alarmFwdAseTableOnPilot=alarmFwdAseTableOnPilot, deployProvLogicalCpIfFendTeLinkIdUnn=deployProvLogicalCpIfFendTeLinkIdUnn, currentOduTcmB15minES=currentOduTcmB15minES, deployProvLogicalIfFacilityType=deployProvLogicalIfFacilityType, thresholdOduBbeHighThres1day=thresholdOduBbeHighThres1day, alarmDispertionTunningCondition=alarmDispertionTunningCondition, deployProvLanCapMetric=deployProvLanCapMetric, deployProvVchChannelDefaultsTraceTransmitDapiOdu=deployProvVchChannelDefaultsTraceTransmitDapiOdu, changeServiceDeployProvIfDefaultsWdmRxChannel=changeServiceDeployProvIfDefaultsWdmRxChannel, currentGfpSublayer15minCoreHecCorrectedFrames=currentGfpSublayer15minCoreHecCorrectedFrames, intervalPhysPerfSignalToNoiseRatio1dayHigh=intervalPhysPerfSignalToNoiseRatio1dayHigh, deployProvCopyPathEthCapRowStatus=deployProvCopyPathEthCapRowStatus, deployProvTunnelOtnLayer=deployProvTunnelOtnLayer, controlPlaneOtnConfigCdbDetail=controlPlaneOtnConfigCdbDetail, tunnelOtnDataComputedPaths=tunnelOtnDataComputedPaths, thresholdPhysPerfRamanPumpPwrLowThres=thresholdPhysPerfRamanPumpPwrLowThres, deployProvIfCapAlsMode=deployProvIfCapAlsMode, deployProvPathElementWdmTid=deployProvPathElementWdmTid, thresholdPhysPerfCapChromaticDispersionLow=thresholdPhysPerfCapChromaticDispersionLow, deployProvTunnelWdmRecoveryType=deployProvTunnelWdmRecoveryType, reservationCpDataChannelDown=reservationCpDataChannelDown, deployProvControlPlaneWdmTedbTraceDetail=deployProvControlPlaneWdmTedbTraceDetail, deployProvConnStdCapToTable=deployProvConnStdCapToTable, changeServiceDeployProvIfCapPumpPower=changeServiceDeployProvIfCapPumpPower, deployProvModuleDefaultsChannelSpacingProvision=deployProvModuleDefaultsChannelSpacingProvision, deployProvControlPlaneWdmCapRaConfigFlag=deployProvControlPlaneWdmCapRaConfigFlag, intervalOduTcmB1dayEntry=intervalOduTcmB1dayEntry, portBindingDataLocalTna=portBindingDataLocalTna, thresholdGfpSublayerTable=thresholdGfpSublayerTable, currentSubAggregate15minTable=currentSubAggregate15minTable, deployProvControlPlaneEthNaasTraceDetail=deployProvControlPlaneEthNaasTraceDetail, intervalOtuFec15minES=intervalOtuFec15minES, changeServiceDeployProvIfDefaultsBehaviour=changeServiceDeployProvIfDefaultsBehaviour, neAINSDefaultTimer=neAINSDefaultTimer, forceDeployProvApsDefaultsHoldOffTime=forceDeployProvApsDefaultsHoldOffTime, connectionEthDataFromAid=connectionEthDataFromAid, deployProvApsCapHoldOffTime=deployProvApsCapHoldOffTime, crsConnWdmDataType=crsConnWdmDataType, neSysType=neSysType, alarmThres15MinExceededGfpTHEC=alarmThres15MinExceededGfpTHEC, neRouteRedistribution=neRouteRedistribution, f7eqpWcc2g7=f7eqpWcc2g7, thresholdOtuFecSESHighThres15min=thresholdOtuFecSESHighThres15min, deployProvControlPlaneEthDefaultsCtmRetryWaitMultiplier=deployProvControlPlaneEthDefaultsCtmRetryWaitMultiplier, intervalPhysPerfBackreflectionPwrRcv1weekEntry=intervalPhysPerfBackreflectionPwrRcv1weekEntry, thresholdPhysPerfPumpLaser3TempHighThres=thresholdPhysPerfPumpLaser3TempHighThres, f7SFPCL=f7SFPCL, alarmApdHighVoltage=alarmApdHighVoltage, transientCopyFileAccessDenied=transientCopyFileAccessDenied, deployProvPathElementOtnCapTid=deployProvPathElementOtnCapTid, tunnelOtnDataCirTrmt=tunnelOtnDataCirTrmt, intervalPhysPerfCurrentOscGain1weekValidFlag=intervalPhysPerfCurrentOscGain1weekValidFlag, connectionOtnDataFromTid=connectionOtnDataFromTid, currentEthRx3HS15minPauseFrames=currentEthRx3HS15minPauseFrames, deployProvTunnelEthDefaultsTunnelNo=deployProvTunnelEthDefaultsTunnelNo, currentL2EthTx15minBytesFrames64Trmt=currentL2EthTx15minBytesFrames64Trmt, deployProvControlPlaneEthDefaultsCmAlarmActivationTime=deployProvControlPlaneEthDefaultsCmAlarmActivationTime, intervalOtuFec1dayExBERCE=intervalOtuFec1dayExBERCE, deployProvDcnTable=deployProvDcnTable, deployProvPortBindingDefaultsRowStatus=deployProvPortBindingDefaultsRowStatus, deployProvControlPlaneEthTedbConfigFlag=deployProvControlPlaneEthTedbConfigFlag, deployProvPlugDefaultsType=deployProvPlugDefaultsType, deployProvControlPlaneEthCapCdConfigFlag=deployProvControlPlaneEthCapCdConfigFlag, intervalOduTcmB15minUAS=intervalOduTcmB15minUAS, alarmOTDRMeasuringinProgress=alarmOTDRMeasuringinProgress, neighborDiscoveryDataFarEndPort=neighborDiscoveryDataFarEndPort, teNumLinkEthDataEntry=teNumLinkEthDataEntry, deployProvCrsDcnDefaultsType=deployProvCrsDcnDefaultsType, controlPlaneEthDataCtmAlias=controlPlaneEthDataCtmAlias, intervalSubAggregate1dayEntry=intervalSubAggregate1dayEntry, intervalPhysConvTxHighSpeed1dayESTX=intervalPhysConvTxHighSpeed1dayESTX, FspR7CpCancConnectionCaps=FspR7CpCancConnectionCaps, nendIpCapEntry=nendIpCapEntry, deployProvLogicalIfPushedFarEndIpHeader=deployProvLogicalIfPushedFarEndIpHeader, intervalRoundTripDelay1weekTable=intervalRoundTripDelay1weekTable, intervalEthTx15minGoodFramesx=intervalEthTx15minGoodFramesx, deployProvCrsDcnCapEcc=deployProvCrsDcnCapEcc, intervalPhysPerfOscPwr15minNumber=intervalPhysPerfOscPwr15minNumber, alarmSignalFailureonLinkVector=alarmSignalFailureonLinkVector, deployProvTunnelEthDefaultsToNodeIp=deployProvTunnelEthDefaultsToNodeIp, intervalPhysPerfBackreflectionPwrRcv1weekMean=intervalPhysPerfBackreflectionPwrRcv1weekMean, intervalPhysConvTxHighSpeed1dayCVTX=intervalPhysConvTxHighSpeed1dayCVTX, tunnelWdmConfigSubLayerEncoding=tunnelWdmConfigSubLayerEncoding, deployProvPlugCapReach=deployProvPlugCapReach, ntpSrvCurrentConditionType=ntpSrvCurrentConditionType, intervalL2EthTx1dayBytesFrames64Trmt=intervalL2EthTx1dayBytesFrames64Trmt, alarmAseTableGenFailSignalinput=alarmAseTableGenFailSignalinput, controlPlaneEthConfigCdbMaxSize=controlPlaneEthConfigCdbMaxSize, intervalPhysConvHighSpeed15minTable=intervalPhysConvHighSpeed15minTable, forceDeployProvApsWorkingAidCapsTable=forceDeployProvApsWorkingAidCapsTable, deployProvExChannelCapPMDTransmit=deployProvExChannelCapPMDTransmit, deployProvCopyPathOtnCapSourcePathIndex=deployProvCopyPathOtnCapSourcePathIndex, deployProvVchChannelCapTimModeOdu=deployProvVchChannelCapTimModeOdu, deployProvTunnelEthTunnelId=deployProvTunnelEthTunnelId, deployProvIfDefaultsTraceTransmitOpspOduTcmB=deployProvIfDefaultsTraceTransmitOpspOduTcmB, logicalCpIfDataFendTeLinkIdUnn=logicalCpIfDataFendTeLinkIdUnn, deployProvModuleCapCapabilityLevel=deployProvModuleCapCapabilityLevel, changeServiceDeployProvIfDefaultsTraceTransmitSapiOtu=changeServiceDeployProvIfDefaultsTraceTransmitSapiOtu, deployProvControlPlaneWdmRaTraceDetail=deployProvControlPlaneWdmRaTraceDetail, intervalFarEndPhysPerfOpticalOutputPwr1weekHigh=intervalFarEndPhysPerfOpticalOutputPwr1weekHigh, logicalCpIfDataTunnelAid=logicalCpIfDataTunnelAid, currentL2EthRx1dayBytesFrames64Rcv=currentL2EthRx1dayBytesFrames64Rcv, f7OTU1=f7OTU1, deployProvApsDefaultsWorkingAid=deployProvApsDefaultsWorkingAid, thresholdEthRxPauseFramesHighThres15Min=thresholdEthRxPauseFramesHighThres15Min, opticalIfOlmRxLineAttenuation=opticalIfOlmRxLineAttenuation, alarmSignalDegradeOduTcmB=alarmSignalDegradeOduTcmB, deployProvControlPlaneWdmDefaultsNodeNameSyntax=deployProvControlPlaneWdmDefaultsNodeNameSyntax, tunnelOtnDataFacilityType=tunnelOtnDataFacilityType, intervalEthTx15minValidFlag=intervalEthTx15minValidFlag, inventoryCpOtnDownDataPhysicalTermPoints=inventoryCpOtnDownDataPhysicalTermPoints, deployProvIfEqlzAdmin=deployProvIfEqlzAdmin, changeServiceDeployProvIfTraceExpectedOduTcmB=changeServiceDeployProvIfTraceExpectedOduTcmB, intervalPhysPerfOlmRxLineAtt1weekLow=intervalPhysPerfOlmRxLineAtt1weekLow, FspR7ApplyAlarmProfileCaps=FspR7ApplyAlarmProfileCaps, FspR7RowStatusCaps=FspR7RowStatusCaps, intervalPhysPerfPumpPwr15minMean=intervalPhysPerfPumpPwr15minMean, intervalPhysPerfOlmTxLineAtt15minLow=intervalPhysPerfOlmTxLineAtt15minLow, alarmEncryptionPortKeyExchangedForced=alarmEncryptionPortKeyExchangedForced, dcnTopologyDataIndex=dcnTopologyDataIndex, crsConnConfigTable=crsConnConfigTable, deployProvCopyPathWdmDefaultsEntry=deployProvCopyPathWdmDefaultsEntry, deployProvPppIpCapIpType=deployProvPppIpCapIpType, ntpServerIp=ntpServerIp, deployProvTunnelEthTunnelType=deployProvTunnelEthTunnelType, alarmTransmittedDisabledIdle=alarmTransmittedDisabledIdle, deployProvLogicalCpIfCapFendDataLinkId=deployProvLogicalCpIfCapFendDataLinkId, FspR7PacketsLayerCaps=FspR7PacketsLayerCaps, deployProvConnStdCapToType=deployProvConnStdCapToType, deployProvApsDefaultsSDswitching=deployProvApsDefaultsSDswitching, deployProvControlPlaneWdmCmAlarmActivationTime=deployProvControlPlaneWdmCmAlarmActivationTime, alarmProfileEntry=alarmProfileEntry, intervalPhysPerfOscOpticalOutputPwr1dayLow=intervalPhysPerfOscOpticalOutputPwr1dayLow, alarmOpticalInputPwrReceivedTooLow=alarmOpticalInputPwrReceivedTooLow, deployProvIfTimModeOdu=deployProvIfTimModeOdu, deployProvControlPlaneOtnCapNaasTraceDetail=deployProvControlPlaneOtnCapNaasTraceDetail, intervalGfp15minValidFlag=intervalGfp15minValidFlag, deployProvControlPlaneEthDefaultsTedbMaxSize=deployProvControlPlaneEthDefaultsTedbMaxSize, deployProvTunnelEthDefaultsRestorationType=deployProvTunnelEthDefaultsRestorationType, tunnelOtnDataConnectionDirection=tunnelOtnDataConnectionDirection, alarmLinkDown=alarmLinkDown, changeServiceDeployProvIfDefaultsSigDegPeriodOdu=changeServiceDeployProvIfDefaultsSigDegPeriodOdu, deployProvControlPlaneEthDefaultsCdbDetail=deployProvControlPlaneEthDefaultsCdbDetail, currentSonetLoPath1dayES=currentSonetLoPath1dayES, intervalPhysPerfChromaticDispersion1weekNumber=intervalPhysPerfChromaticDispersion1weekNumber, thresholdPhysConvTxHighSpeedCVTXHighThres1day=thresholdPhysConvTxHighSpeedCVTXHighThres1day, logicalCpIfDataVTeType=logicalCpIfDataVTeType, PYSNMP_MODULE_ID=fspR7MIB, deployProvTunnelWdmRestorationPaths=deployProvTunnelWdmRestorationPaths, thresholdPhysPerfCapAttTxLow=thresholdPhysPerfCapAttTxLow, deployProvTunnelEthRestorationType=deployProvTunnelEthRestorationType, currentOdu1dayElapsedTime=currentOdu1dayElapsedTime, deployProvLogicalIfCapPushedFarEndIpHeader=deployProvLogicalIfCapPushedFarEndIpHeader, alarmLossOfLane=alarmLossOfLane, deployProvTifInputCapForceDestroy=deployProvTifInputCapForceDestroy, neighborDiscoveryDataTable=neighborDiscoveryDataTable, sts48callocatedTable=sts48callocatedTable, forceDeployProvApsTable=forceDeployProvApsTable, currentPhysConvTxHighSpeed15minESTX=currentPhysConvTxHighSpeed15minESTX, deployProvLogicalCpIfCapCpType=deployProvLogicalCpIfCapCpType, deployProvPathElementOtnTable=deployProvPathElementOtnTable, FspR7YesNoCaps=FspR7YesNoCaps, deployProvCrsDcnCapTable=deployProvCrsDcnCapTable, transientNtpSrvSyncStarted=transientNtpSrvSyncStarted, crsConnConfigAlias=crsConnConfigAlias, deployProvApsCapWorkingAid=deployProvApsCapWorkingAid, deployProvPppIpCapFlowControl=deployProvPppIpCapFlowControl, deployProvIfDefaultsRowStatus=deployProvIfDefaultsRowStatus, alarmBackwardDefectIndicationOduTcmA=alarmBackwardDefectIndicationOduTcmA, farEndPlugDataConnectorType=farEndPlugDataConnectorType, currentOtuFec1dayExElapsedTime=currentOtuFec1dayExElapsedTime, deployProvIfDefaultsTable=deployProvIfDefaultsTable, shelfDiagnosticsPowerConsumption=shelfDiagnosticsPowerConsumption, reservationCpDataIngressTid=reservationCpDataIngressTid, tunnelOtnDataTunnelNumberExtension=tunnelOtnDataTunnelNumberExtension, FspR7AccountFlag=FspR7AccountFlag, interfaceConfigExternalVid=interfaceConfigExternalVid, intervalGfpSublayer1dayValidFlag=intervalGfpSublayer1dayValidFlag, changeServiceDeployProvIfTimModeOduTcmC=changeServiceDeployProvIfTimModeOduTcmC, deployProvControlPlaneEthCmCrankBackTimeout=deployProvControlPlaneEthCmCrankBackTimeout, connectionEthConfigEntry=connectionEthConfigEntry, intervalOtuFec1dayTable=intervalOtuFec1dayTable, currentGfpfr1dayElapsedTime=currentGfpfr1dayElapsedTime, thresholdPhysPerfCapCarrierFreqOffsetHigh=thresholdPhysPerfCapCarrierFreqOffsetHigh, thresholdGfpSublayerTypeHecDiscardedFramesHighThres1Day=thresholdGfpSublayerTypeHecDiscardedFramesHighThres1Day, changeServiceDeployProvIfTraceExpectedOdu=changeServiceDeployProvIfTraceExpectedOdu, FspR7TiltSet=FspR7TiltSet, teUnnumLinkEthDataDiscarded=teUnnumLinkEthDataDiscarded, intervalEthRx3HS15minBroadcastFramesRcv=intervalEthRx3HS15minBroadcastFramesRcv, alarmDcnCommunicationFail=alarmDcnCommunicationFail, intervalLinkAttenuation15minMean=intervalLinkAttenuation15minMean, controlPlaneEthConfigCtmRetryWaitMultiplier=controlPlaneEthConfigCtmRetryWaitMultiplier, controlPlaneOtnConfigTedbMaxSize=controlPlaneOtnConfigTedbMaxSize, currentEthRx3HS15minFragmentFramesRcv=currentEthRx3HS15minFragmentFramesRcv, deployProvControlPlaneWdmCtmRetryWaitMultiplier=deployProvControlPlaneWdmCtmRetryWaitMultiplier, thresholdOtuTable=thresholdOtuTable, moduleDiagnosticsUpperTempThres=moduleDiagnosticsUpperTempThres, connectionWdmDataEncode=connectionWdmDataEncode, intervalGfp1dayValidFlag=intervalGfp1dayValidFlag, deployProvPathElementWdmDefaultsChannelDown=deployProvPathElementWdmDefaultsChannelDown, tunnelEthDataTable=tunnelEthDataTable, connectionOtnDataToNodeIp=connectionOtnDataToNodeIp, currentL2EthTx1dayEntry=currentL2EthTx1dayEntry, sts24callocatedEntry=sts24callocatedEntry, controlPlaneOtnConfigCtmConfigFlag=controlPlaneOtnConfigCtmConfigFlag, deployProvVchChannelCapEntry=deployProvVchChannelCapEntry, opticalIfConfigCapSigDegThresSonetSection=opticalIfConfigCapSigDegThresSonetSection, teUnnumLinkOtnDataNodeIp=teUnnumLinkOtnDataNodeIp, deployProvConnState=deployProvConnState, currentPhysConvCombined15minElapsedTime=currentPhysConvCombined15minElapsedTime, tunnelWdmConfigResetRetainedFailureIndications=tunnelWdmConfigResetRetainedFailureIndications, deployProvTunnelWdmCapFecType=deployProvTunnelWdmCapFecType)
mibBuilder.exportSymbols("FspR7-MIB", opticalIfDiagDifferentialGroupDelay=opticalIfDiagDifferentialGroupDelay, deployProvPppIpCapProxyArp=deployProvPppIpCapProxyArp, intervalGfpfr1dayValidFlag=intervalGfpfr1dayValidFlag, intervalOtuFec15minTable=intervalOtuFec15minTable, intervalEthRx3HS15minFragmentFramesRcv=intervalEthRx3HS15minFragmentFramesRcv, deployProvConnEndpointA=deployProvConnEndpointA, vc4c8allocatedEntry=vc4c8allocatedEntry, intervalL2EthTx15minBytesFrames512Trmt=intervalL2EthTx15minBytesFrames512Trmt, neTimeZoneOffset=neTimeZoneOffset, FspR7ConnectorTypeCaps=FspR7ConnectorTypeCaps, alarmTransmitterDisabledAis=alarmTransmitterDisabledAis, authTrapSessionId=authTrapSessionId, deployProvIfOspf=deployProvIfOspf, FspR7DispersionModes=FspR7DispersionModes, FspR7OpticalMultiplexLevel=FspR7OpticalMultiplexLevel, nodeChannelTraceStartAid=nodeChannelTraceStartAid, intervalGfpfr15minCHecDiscardedFrames=intervalGfpfr15minCHecDiscardedFrames, moduleConfigAlias=moduleConfigAlias, intervalOduTcmA15minValidFlag=intervalOduTcmA15minValidFlag, changeServiceDeployProvIfSigDegPeriodOduTcmA=changeServiceDeployProvIfSigDegPeriodOduTcmA, currentPhysConv1dayElapsedTime=currentPhysConv1dayElapsedTime, deployProvIfDefaultsGain=deployProvIfDefaultsGain, intervalPhysPerfOlmTxLineAtt15minTimeStamp=intervalPhysPerfOlmTxLineAtt15minTimeStamp, transientBootUpRejected=transientBootUpRejected, deployProvVchChannelCapType=deployProvVchChannelCapType, intervalOtuFec15minExTable=intervalOtuFec15minExTable, deployProvLogicalCpIfTeMetric=deployProvLogicalCpIfTeMetric, apsProtGroupStatusWorkingIndex=apsProtGroupStatusWorkingIndex, alarmPayloadMismatchGfp=alarmPayloadMismatchGfp, transientAlpSettingFinished=transientAlpSettingFinished, opticalIfConfigPrbsPmReset=opticalIfConfigPrbsPmReset, deployProvPppIpCapNearEndIp=deployProvPppIpCapNearEndIp, f7eqpRsmolm=f7eqpRsmolm, deployProvPortBindingRemoteScPc=deployProvPortBindingRemoteScPc, opticalIfDataBand=opticalIfDataBand, deployProvConnStdCapFromEndpointA=deployProvConnStdCapFromEndpointA, thresholdFarEndPhysPerfTable=thresholdFarEndPhysPerfTable, deployProvIfEntry=deployProvIfEntry, deployProvTunnelEthDefaultsTable=deployProvTunnelEthDefaultsTable, transientLocalCopyMemFailNotExist=transientLocalCopyMemFailNotExist, FspR7OspfAreaTypeCaps=FspR7OspfAreaTypeCaps, logicalCpIfDataIpAddr=logicalCpIfDataIpAddr, deployProvPathElementOtnCapRowStatus=deployProvPathElementOtnCapRowStatus, intervalL2EthRx1dayBroadcastFramesRcv=intervalL2EthRx1dayBroadcastFramesRcv, tunnelEthDataFromTid=tunnelEthDataFromTid, pathElementOtnDataSequenceNumber=pathElementOtnDataSequenceNumber, inventoryCpEthDownFlowDataEntry=inventoryCpEthDownFlowDataEntry, currentL2EthTx1dayBytesFrames256Trmt=currentL2EthTx1dayBytesFrames256Trmt, deployProvLogicalCpIfDefaultsPushedNendIpHeader=deployProvLogicalCpIfDefaultsPushedNendIpHeader, deployProvPathElementOtnDefaultsDownTributaryTSMethod=deployProvPathElementOtnDefaultsDownTributaryTSMethod, deployProvIfFlowControl=deployProvIfFlowControl, changeServiceDeployProvIfTimModeOdu=changeServiceDeployProvIfTimModeOdu, transientThres1DayExceededOduBbe=transientThres1DayExceededOduBbe, opticalIfConfigCapCac=opticalIfConfigCapCac, deployProvIfCapTimingSource=deployProvIfCapTimingSource, pathEthDataRole=pathEthDataRole, intervalPhysPerfPumpPwr1weekEntry=intervalPhysPerfPumpPwr1weekEntry, intervalRoundTripDelay1dayValidFlag=intervalRoundTripDelay1dayValidFlag, intervalLatency1dayTimeStamp=intervalLatency1dayTimeStamp, deployProvLogicalCpIfDefaultsVNodeIp=deployProvLogicalCpIfDefaultsVNodeIp, intervalSonetLine15minUAS=intervalSonetLine15minUAS, deployProvModuleDefaultsChannelsNumber=deployProvModuleDefaultsChannelsNumber, deployProvShelfCapTable=deployProvShelfCapTable, nodeChannelTraceChannelNumber=nodeChannelTraceChannelNumber, farEndPlugConfigTable=farEndPlugConfigTable, currentEthRx3HS1dayBytesFrames128Rcv=currentEthRx3HS1dayBytesFrames128Rcv, thresholdPhysPerfConfigurableOpticalOutputPwrLow=thresholdPhysPerfConfigurableOpticalOutputPwrLow, alarmPumpLaser2TempTooHigh=alarmPumpLaser2TempTooHigh, opticalIfDataLagSysIdFend=opticalIfDataLagSysIdFend, neSwType=neSwType, alarmThres15MinExceededPhysConvSETX=alarmThres15MinExceededPhysConvSETX, reservationCpDataIngressNodeIp=reservationCpDataIngressNodeIp, deployProvControlPlaneOtnCapPcConfigFlag=deployProvControlPlaneOtnCapPcConfigFlag, deployProvIfCapTraceTransmitOpspOdu=deployProvIfCapTraceTransmitOpspOdu, deployProvIfCapForceDestroy=deployProvIfCapForceDestroy, alarmPumpLaser2TempTooLow=alarmPumpLaser2TempTooLow, deployProvIfDefaultsSigDegThresOduTcmB=deployProvIfDefaultsSigDegThresOduTcmB, opticalIfDataEntry=opticalIfDataEntry, deployProvTunnelEthCapRowStatus=deployProvTunnelEthCapRowStatus, tunnelWdmDataToTid=tunnelWdmDataToTid, FspR7XfpDecisionThres=FspR7XfpDecisionThres, dependenciesAid=dependenciesAid, connectionWdmDataTable=connectionWdmDataTable, changeServiceDeployProvIfCapTraceTransmitSapiOduTcmA=changeServiceDeployProvIfCapTraceTransmitSapiOduTcmA, deployProvControlPlaneOtnDefaultsCtmRetryWait=deployProvControlPlaneOtnDefaultsCtmRetryWait, intervalEthTx1dayValidFlag=intervalEthTx1dayValidFlag, deployProvIfDefaultsFlowControl=deployProvIfDefaultsFlowControl, currentL2EthRx1dayBytesFrames512Rcv=currentL2EthRx1dayBytesFrames512Rcv, f7FanUnits=f7FanUnits, deployProvApsTable=deployProvApsTable, deployProvCrsDcnEcc=deployProvCrsDcnEcc, deployProvApsPeerAidCapsEntry=deployProvApsPeerAidCapsEntry, neTimeChangeReason=neTimeChangeReason, deployProvLogicalCpIfDefaultsPrio=deployProvLogicalCpIfDefaultsPrio, deployProvPathElementEthCapTable=deployProvPathElementEthCapTable, intervalEthTx1dayEntry=intervalEthTx1dayEntry, inventoryCpEthDownDataEntry=inventoryCpEthDownDataEntry, deployProvDcnLanAidCapsIndex=deployProvDcnLanAidCapsIndex, tunnelEthConfigAdminModifier=tunnelEthConfigAdminModifier, FspR7OpticalFiberTypeCaps=FspR7OpticalFiberTypeCaps, pathElementWdmDataTrafficEngineeringType=pathElementWdmDataTrafficEngineeringType, deployProvCopyPathEthCapTable=deployProvCopyPathEthCapTable, deployProvIfDefaultsBitrate=deployProvIfDefaultsBitrate, intervalGfpt15minEntry=intervalGfpt15minEntry, opticalIfDataChannelsProvision=opticalIfDataChannelsProvision, controlPlaneWdmDataRmAlias=controlPlaneWdmDataRmAlias, neEqlzStartTime=neEqlzStartTime, deployProvControlPlaneEthDefaultsCtmMaximumRetryWait=deployProvControlPlaneEthDefaultsCtmMaximumRetryWait, deployProvCrsDcnType=deployProvCrsDcnType, thresholdOduTcmBOduTcmBBbeHighThres1day=thresholdOduTcmBOduTcmBBbeHighThres1day, deployProvPppIpCapForceDestroy=deployProvPppIpCapForceDestroy, inventoryCpOtnUpDataPhysicalTermPoints=inventoryCpOtnUpDataPhysicalTermPoints, deployProvTifInputDefaultsTifAlarmType=deployProvTifInputDefaultsTifAlarmType, alarmLaserTemperatureTooHigh=alarmLaserTemperatureTooHigh, deployProvControlPlaneWdmDefaultsCtmMaximumRetryWait=deployProvControlPlaneWdmDefaultsCtmMaximumRetryWait, deployProvIfCapLagLoadBallanceSource=deployProvIfCapLagLoadBallanceSource, intervalPhysPerfOlmTxLineAtt1weekNumber=intervalPhysPerfOlmTxLineAtt1weekNumber, pathElementWdmDataLifIp=pathElementWdmDataLifIp, alarmReceiverOverloadProtection=alarmReceiverOverloadProtection, alarmInputTIF=alarmInputTIF, deployProvLogicalIfDefaultsFacilityType=deployProvLogicalIfDefaultsFacilityType, intervalFarEndPhysPerfOpticalInputPwr1weekHigh=intervalFarEndPhysPerfOpticalInputPwr1weekHigh, intervalPhysPerfCarrierFreqOffset1dayLow=intervalPhysPerfCarrierFreqOffset1dayLow, intervalEthRxHighSpeed15minBytes=intervalEthRxHighSpeed15minBytes, changeServiceDeployProvIfDefaultsForceDestroy=changeServiceDeployProvIfDefaultsForceDestroy, currentEthRxHighSpeed15minCrcFrames=currentEthRxHighSpeed15minCrcFrames, currentPhysConvCombined15minES=currentPhysConvCombined15minES, neighborDiscoveryDataFarEndIp=neighborDiscoveryDataFarEndIp, deployProvTifInputRowStatus=deployProvTifInputRowStatus, intervalOtu1daySES=intervalOtu1daySES, areaAidCapEntry=areaAidCapEntry, controlPlaneWdmConfigRmTraceTarget=controlPlaneWdmConfigRmTraceTarget, tunnelOtnConfigTable=tunnelOtnConfigTable, intervalOtuFec1dayTimeStamp=intervalOtuFec1dayTimeStamp, FspR7LacpTimeout=FspR7LacpTimeout, transientThres1DayExceededPhysConvCV=transientThres1DayExceededPhysConvCV, intervalPhysPerfOpticalOutputPwr1weekTable=intervalPhysPerfOpticalOutputPwr1weekTable, changeServiceDeployProvIfDefaultsFecType=changeServiceDeployProvIfDefaultsFecType, intervalOtu15minUAS=intervalOtu15minUAS, intervalPhysPerfChromaticDispersion15minHigh=intervalPhysPerfChromaticDispersion15minHigh, deployProvIfOduTribPortNo=deployProvIfOduTribPortNo, controlPlaneWdmConfigNaasTraceDetail=controlPlaneWdmConfigNaasTraceDetail, deployProvLanMetric=deployProvLanMetric, deployProvTunnelWdmDefaultsTunnelScope=deployProvTunnelWdmDefaultsTunnelScope, logicalCpIfDataEntry=logicalCpIfDataEntry, portBindingDataLocalPort=portBindingDataLocalPort, deployProvIfCapSigDegThresOduTcmC=deployProvIfCapSigDegThresOduTcmC, f7eqp4tca1g3c=f7eqp4tca1g3c, logicalIfDataIpMask=logicalIfDataIpMask, intervalFarEndPhysPerfOpticalInputPwr1weekValidFlag=intervalFarEndPhysPerfOpticalInputPwr1weekValidFlag, fspUserManagementCapPrivilegeLevel=fspUserManagementCapPrivilegeLevel, deployProvLanDefaultsType=deployProvLanDefaultsType, f7eqp1csmuewc=f7eqp1csmuewc, deployProvPathElementOtnCapDownTributaryTSMethod=deployProvPathElementOtnCapDownTributaryTSMethod, intervalPhysPerfOlmTxLineAtt1dayTable=intervalPhysPerfOlmTxLineAtt1dayTable, deployProvTunnelWdmDefaultsAlias=deployProvTunnelWdmDefaultsAlias, thresholdOduTcmASESHighThres1day=thresholdOduTcmASESHighThres1day, tunnelOtnConfigProvisionedPaths=tunnelOtnConfigProvisionedPaths, deployProvCrsDcnCapForceDestroy=deployProvCrsDcnCapForceDestroy, currentGfpSublayer1dayTypeHecDiscardedFrames=currentGfpSublayer1dayTypeHecDiscardedFrames, authenticationNotification=authenticationNotification, wdmChannelModuleDataEntry=wdmChannelModuleDataEntry, neForceDelete=neForceDelete, thresholdOduTcmCUASHighThres1day=thresholdOduTcmCUASHighThres1day, deployProvIfCapTimModeOduTcmC=deployProvIfCapTimModeOduTcmC, controlPlaneWdmDataTedbAlias=controlPlaneWdmDataTedbAlias, currentGfp15minTypeHecDiscardedFrames=currentGfp15minTypeHecDiscardedFrames, intervalPhysPerfLaserBiasCurrentNormalized1weekTimeStamp=intervalPhysPerfLaserBiasCurrentNormalized1weekTimeStamp, pppfConfigEntry=pppfConfigEntry, deployProvIfTraceTransmitSapiOduTcmB=deployProvIfTraceTransmitSapiOduTcmB, intervalSonetHoPath1dayES=intervalSonetHoPath1dayES, tunnelOtnDataLayer=tunnelOtnDataLayer, controlPlaneWdmConfigCmTraceDetail=controlPlaneWdmConfigCmTraceDetail, pathElementOtnDataUpTributaryPort=pathElementOtnDataUpTributaryPort, thresholdPhysConvHighSpeedCVHighThres15min=thresholdPhysConvHighSpeedCVHighThres15min, alarmRoundTripDelayTooLow=alarmRoundTripDelayTooLow, alarmBackwardDefectIndicationOtu=alarmBackwardDefectIndicationOtu, dcnOspfAreaInterfaceEntry=dcnOspfAreaInterfaceEntry, controlPlaneWdmEntityStateEntry=controlPlaneWdmEntityStateEntry, deployProvTunnelOtnMonitorEntities=deployProvTunnelOtnMonitorEntities, currentEthRxHighSpeed15minPauseFrames=currentEthRxHighSpeed15minPauseFrames, FspR7CpTunnelScope=FspR7CpTunnelScope, deployProvPathElementOtnCapTable=deployProvPathElementOtnCapTable, thresholdPhysPerfOpticalInputPwrLow=thresholdPhysPerfOpticalInputPwrLow, intervalPhysPerfChromaticDispersion15minLow=intervalPhysPerfChromaticDispersion15minLow, currentOtuFec1dayUBE=currentOtuFec1dayUBE, deployProvIfBand=deployProvIfBand, changeServiceDeployProvIfCapTilt=changeServiceDeployProvIfCapTilt, vs1allocatedTable=vs1allocatedTable, deployProvControlPlaneWdmCdConfigFlag=deployProvControlPlaneWdmCdConfigFlag, tunnelOtnDataOifUni=tunnelOtnDataOifUni, connectionOtnDataTerminationLevel=connectionOtnDataTerminationLevel, tunnelOtnDataErrorTid=tunnelOtnDataErrorTid, intervalPhysPerfOpticalOutputPwr1dayTable=intervalPhysPerfOpticalOutputPwr1dayTable, opticalIfConfigCapTiltSet=opticalIfConfigCapTiltSet, deployProvApsSDswitching=deployProvApsSDswitching, thresholdPhysPerfCapRoundTripDelayHighThres=thresholdPhysPerfCapRoundTripDelayHighThres, alarmOosPrePostSigAfterPrecompFailed=alarmOosPrePostSigAfterPrecompFailed, deployProvLogicalIfDefaultsRetransmitInterval=deployProvLogicalIfDefaultsRetransmitInterval, changeServiceDeployProvIfDefaultsTraceTransmitSonetSection=changeServiceDeployProvIfDefaultsTraceTransmitSonetSection, alarmUnequippedHigherOrderPath=alarmUnequippedHigherOrderPath, forceDeployProvApsCapRowStatus=forceDeployProvApsCapRowStatus, deployProvControlPlaneEthDefaultsRaAlarmActivationTime=deployProvControlPlaneEthDefaultsRaAlarmActivationTime, deployProvApsProtectionAid=deployProvApsProtectionAid, deployProvConnType=deployProvConnType, alarmPrbsLossOfSeqSynch=alarmPrbsLossOfSeqSynch, intervalDispersionCompensation1weekMean=intervalDispersionCompensation1weekMean, FspR7BitrateCaps=FspR7BitrateCaps, currentEthRx3HS15minBytesFrames512Rcv=currentEthRx3HS15minBytesFrames512Rcv, lastErrorStatusCounter=lastErrorStatusCounter, intervalOdu1dayNumber=intervalOdu1dayNumber, alarmThres15MinExceededOduTcmASES=alarmThres15MinExceededOduTcmASES, opticalIfConfigTransmitChannel=opticalIfConfigTransmitChannel, deployProvPppIpBitrate=deployProvPppIpBitrate, dcnOspfAreaRowStatus=dcnOspfAreaRowStatus, deployProvExChannelCapBitrate=deployProvExChannelCapBitrate, deployProvVchChannelCir=deployProvVchChannelCir, currentPhysConv1dayEntry=currentPhysConv1dayEntry, intervalPhysPerfChromaticDispersion15minEntry=intervalPhysPerfChromaticDispersion15minEntry, farEndIfDataTransmitFrequency=farEndIfDataTransmitFrequency, intervalEthRxHighSpeed1dayCrcFrames=intervalEthRxHighSpeed1dayCrcFrames, deployProvVchChannelDefaultsSigDegPeriodOdu=deployProvVchChannelDefaultsSigDegPeriodOdu, connectionOtnDataRole=connectionOtnDataRole, intervalSonetLoPath15minUAS=intervalSonetLoPath15minUAS, intervalDispersionCompensation1weekTimeStamp=intervalDispersionCompensation1weekTimeStamp, moduleConfigTable=moduleConfigTable, intervalLinkAttenuation1dayTimeStamp=intervalLinkAttenuation1dayTimeStamp, currentEthRx3HS1dayBytesFrames1519Rcv=currentEthRx3HS1dayBytesFrames1519Rcv, intervalOduTcmC15minTimeStamp=intervalOduTcmC15minTimeStamp, intervalPhysConvTxHighSpeed15minValidFlag=intervalPhysConvTxHighSpeed15minValidFlag, deployProvControlPlaneWdmCapRsvpConfigFlag=deployProvControlPlaneWdmCapRsvpConfigFlag, intervalEthRx15minEntry=intervalEthRx15minEntry, tunnelEthConfigProvisionedPaths=tunnelEthConfigProvisionedPaths, portBindingDataLogicalIfAid=portBindingDataLogicalIfAid, interfaceConfigLoopConfig=interfaceConfigLoopConfig, deployProvControlPlaneOtnCapCmConfigFlag=deployProvControlPlaneOtnCapCmConfigFlag, deployProvLogicalCpIfDefaultsVNodeTltp=deployProvLogicalCpIfDefaultsVNodeTltp, currentL2EthTx15minBytesFrames128Trmt=currentL2EthTx15minBytesFrames128Trmt, deployProvControlPlaneWdmNaasMaxSize=deployProvControlPlaneWdmNaasMaxSize, currentOduTcmA1daySES=currentOduTcmA1daySES, deployProvExChannelDefaultsChromaticDispersionRcv=deployProvExChannelDefaultsChromaticDispersionRcv, changeServiceDeployProvIfDefaultsTraceExpectedOtu=changeServiceDeployProvIfDefaultsTraceExpectedOtu, teUnnumLinkOtnDataPhysicalLink=teUnnumLinkOtnDataPhysicalLink, deployProvModuleChannelSpacingProvision=deployProvModuleChannelSpacingProvision, deployProvDcnCapTable=deployProvDcnCapTable, deployProvCopyPathEthSourcePathIndex=deployProvCopyPathEthSourcePathIndex, intervalPhysPerfOlmTxLineAtt1dayEntry=intervalPhysPerfOlmTxLineAtt1dayEntry, opticalIfConfigSigDegPeriodOtu=opticalIfConfigSigDegPeriodOtu, sts24callocatedTable=sts24callocatedTable, changeServiceDeployProvIfSigDegPeriodOduTcmC=changeServiceDeployProvIfSigDegPeriodOduTcmC, edfaConfigGain=edfaConfigGain, intervalGfpSublayer15minEntry=intervalGfpSublayer15minEntry, apsProtGroupStatusTable=apsProtGroupStatusTable, intervalRoundTripDelay15minMean=intervalRoundTripDelay15minMean)
mibBuilder.exportSymbols("FspR7-MIB", deployProvLogicalIfHelloInterval=deployProvLogicalIfHelloInterval, controlPlaneOtnConfigCmAlarmActivationTime=controlPlaneOtnConfigCmAlarmActivationTime, deployProvControlPlaneEthTedbRouterId=deployProvControlPlaneEthTedbRouterId, deployProvTunnelOtnCapFromAid=deployProvTunnelOtnCapFromAid, f7eqpOsfm=f7eqpOsfm, deployProvIfCapTable=deployProvIfCapTable, thresholdPhysPerfDispersionCompensationLowThres=thresholdPhysPerfDispersionCompensationLowThres, deployProvTunnelWdmCapPceMode=deployProvTunnelWdmCapPceMode, changeServiceDeployProvIfCapTraceTransmitOpspOtu=changeServiceDeployProvIfCapTraceTransmitOpspOtu, currentSonetLine15minTable=currentSonetLine15minTable, alarmLossOfTransmitterClockRecovery=alarmLossOfTransmitterClockRecovery, FspR7PmSnapshotStatus=FspR7PmSnapshotStatus, routingIpDevice=routingIpDevice, deployProvVchChannelTraceTransmitSapiOdu=deployProvVchChannelTraceTransmitSapiOdu, snmpAgentSynchronizationStageChanged=snmpAgentSynchronizationStageChanged, sts48callocatedClassInstanceNumber=sts48callocatedClassInstanceNumber, intervalGfpSublayer15minTypeHecCorrectedFrames=intervalGfpSublayer15minTypeHecCorrectedFrames, ethernetDataType=ethernetDataType, intervalOtuFec15minSES=intervalOtuFec15minSES, deployProvTunnelWdmCapTable=deployProvTunnelWdmCapTable, alarmThres15MinExceededSonetLineSES=alarmThres15MinExceededSonetLineSES, currentGfp15minCoreHecCorrectedFrames=currentGfp15minCoreHecCorrectedFrames, deployProvModuleCapEqlzAdmin=deployProvModuleCapEqlzAdmin, connectionWdmDataBitrate=connectionWdmDataBitrate, alarmEquipmentMismatch=alarmEquipmentMismatch, deployProvControlPlaneEthCmConfigFlag=deployProvControlPlaneEthCmConfigFlag, deployProvControlPlaneEthDefaultsPcConfigFlag=deployProvControlPlaneEthDefaultsPcConfigFlag, changeServiceDeployProvIfLanAid=changeServiceDeployProvIfLanAid, teUnnumLinkWdmDataDiscarded=teUnnumLinkWdmDataDiscarded, deployProvShelfDefaultsTable=deployProvShelfDefaultsTable, deployProvTunnelOtnCapOifUni=deployProvTunnelOtnCapOifUni, apsProtFacilityConfigSwitchCommand=apsProtFacilityConfigSwitchCommand, changeServiceDeployProvIfBip=changeServiceDeployProvIfBip, thresholdPhysPerfOpticalOutputPwrHigh=thresholdPhysPerfOpticalOutputPwrHigh, intervalPhysPerfPumpPwr1weekMean=intervalPhysPerfPumpPwr1weekMean, intervalLinkAttenuation1dayHigh=intervalLinkAttenuation1dayHigh, FspR7ErrorFwdMode=FspR7ErrorFwdMode, deployProvPortBindingCapLocalTna=deployProvPortBindingCapLocalTna, intervalSonetHoPath15minTimeStamp=intervalSonetHoPath15minTimeStamp, vtpEntityDataSfProvision=vtpEntityDataSfProvision, alarmAseTableGenProgress=alarmAseTableGenProgress, changeServiceDeployProvIfGain=changeServiceDeployProvIfGain, tunnelOtnDataTable=tunnelOtnDataTable, deployProvTunnelWdmTable=deployProvTunnelWdmTable, deployProvControlPlaneEthCmTraceDetail=deployProvControlPlaneEthCmTraceDetail, intervalPhysPerfSignalToNoiseRatio1weekMean=intervalPhysPerfSignalToNoiseRatio1weekMean, intervalPhysPerfCurrentOscGain1weekTimeStamp=intervalPhysPerfCurrentOscGain1weekTimeStamp, farEndPlugConfigCapEntry=farEndPlugConfigCapEntry, thresholdOtuFecCErrHighThres15min=thresholdOtuFecCErrHighThres15min, transientLocalCopyMemFailFsckFailed=transientLocalCopyMemFailFsckFailed, currentL2EthRx1dayBytesFrames1024Rcv=currentL2EthRx1dayBytesFrames1024Rcv, teNumLinkOtnDataFendNodeIp=teNumLinkOtnDataFendNodeIp, thresholdSonetSectTable=thresholdSonetSectTable, intervalPhysPerfOpticalInputPwr1dayTimeStamp=intervalPhysPerfOpticalInputPwr1dayTimeStamp, opticalIfConfigCapTable=opticalIfConfigCapTable, transientThres1DayExceededOduTcmBUAS=transientThres1DayExceededOduTcmBUAS, farEndPlugDiagnosticsUpperTempThres=farEndPlugDiagnosticsUpperTempThres, intervalPhysPerfCurrent15minEntry=intervalPhysPerfCurrent15minEntry, transientDatabaseMismatch=transientDatabaseMismatch, vtpEntityDataConnector=vtpEntityDataConnector, deployProvApsWorkingAid=deployProvApsWorkingAid, thresholdSonetLineCViolHighThres15min=thresholdSonetLineCViolHighThres15min, alarmHighBer=alarmHighBer, ptpEntityDataEntry=ptpEntityDataEntry, alarmAutoShutdownSendingEPC=alarmAutoShutdownSendingEPC, shelfInfoEntry=shelfInfoEntry, deployProvLogicalIfAreaId=deployProvLogicalIfAreaId, deployProvIfSigDegThreshold=deployProvIfSigDegThreshold, deployProvVchChannelType=deployProvVchChannelType, intervalPhysPerfLaserBiasCurrentNormalized1weekLow=intervalPhysPerfLaserBiasCurrentNormalized1weekLow, deployProvLogicalCpIfTable=deployProvLogicalCpIfTable, currentOduTcmC1dayUAS=currentOduTcmC1dayUAS, routingIpDestination=routingIpDestination, transientThres1DayExceededFecES=transientThres1DayExceededFecES, transientThres1DayExceededOduTcmAUAS=transientThres1DayExceededOduTcmAUAS, currentL2EthTx15minPauseFramesTrmt=currentL2EthTx15minPauseFramesTrmt, opticalIfConfigCapPrbsPmReset=opticalIfConfigCapPrbsPmReset, deployProvPathEthCapRowStatus=deployProvPathEthCapRowStatus, currentOduTcmA1dayTable=currentOduTcmA1dayTable, deployProvIfCapVoaSetpoint=deployProvIfCapVoaSetpoint, intervalPhysPerfOscPwr15minMean=intervalPhysPerfOscPwr15minMean, sts48callocatedFacilityType=sts48callocatedFacilityType, intervalPhysPerfDiffGrDelay1dayTable=intervalPhysPerfDiffGrDelay1dayTable, deployProvIfVethAidCapsTable=deployProvIfVethAidCapsTable, crsConnWdmDataIngressNodeIp=crsConnWdmDataIngressNodeIp, deployProvLogicalCpIfDefaultsAdmin=deployProvLogicalCpIfDefaultsAdmin, vc4c16allocatedFacilityType=vc4c16allocatedFacilityType, intervalSonetSect1daySES=intervalSonetSect1daySES, intervalPhysPerfOlmRxLineAtt1dayLow=intervalPhysPerfOlmRxLineAtt1dayLow, deployProvLogicalCpIfCapHelloInterval=deployProvLogicalCpIfCapHelloInterval, moduleDataMode=moduleDataMode, intervalPhysPerfCurrentOscGain1weekLow=intervalPhysPerfCurrentOscGain1weekLow, deployProvApsCapRevertMode=deployProvApsCapRevertMode, opticalAmplifierEquipmentDiagnosticsTable=opticalAmplifierEquipmentDiagnosticsTable, alarmThres15MinExceededFecUBE=alarmThres15MinExceededFecUBE, entityStateCapTable=entityStateCapTable, forceDeployProvApsFarEndIp=forceDeployProvApsFarEndIp, alarmThres15MinExceededSonetSectSEFS=alarmThres15MinExceededSonetSectSEFS, neSystemIpMask=neSystemIpMask, fspUserManagementDefaultsSnmpTimeoutValue=fspUserManagementDefaultsSnmpTimeoutValue, deployProvIfXfpDecisionThres=deployProvIfXfpDecisionThres, FspR7EnableDisableCaps=FspR7EnableDisableCaps, FspR7InterfaceType=FspR7InterfaceType, currentEthRx3HS15minCrcFrames=currentEthRx3HS15minCrcFrames, currentOdu15minSES=currentOdu15minSES, intervalGfpt15minTimeStamp=intervalGfpt15minTimeStamp, intervalGfp15minCoreHecCorrectedFrames=intervalGfp15minCoreHecCorrectedFrames, intervalOtuFec1dayCE=intervalOtuFec1dayCE, FspR7OdtuType=FspR7OdtuType, deployProvModuleDefaultsScrambling=deployProvModuleDefaultsScrambling, deployProvControlPlaneWdmDefaultsCdbConfigFlag=deployProvControlPlaneWdmDefaultsCdbConfigFlag, currentL2EthTx1dayTable=currentL2EthTx1dayTable, deployProvLogicalIfDefaultsAuthType=deployProvLogicalIfDefaultsAuthType, fspUserManagementName=fspUserManagementName, tifiDataTifAlarmMessage=tifiDataTifAlarmMessage, logicalIfDataOspf=logicalIfDataOspf, thresholdPhysPerfCapEntry=thresholdPhysPerfCapEntry, alarmCurrentTooHigh=alarmCurrentTooHigh, neTimeConfig=neTimeConfig, teUnnumLinkWdmDataFendTeLinkId=teUnnumLinkWdmDataFendTeLinkId, deployProvDcnLanAidCapsTable=deployProvDcnLanAidCapsTable, deployProvExChannelCapMaximumPMDRcv=deployProvExChannelCapMaximumPMDRcv, moduleDataConnectionLocation=moduleDataConnectionLocation, inventoryCpOtnDownDataFacilities=inventoryCpOtnDownDataFacilities, deployProvControlPlaneWdmCapCtmConfigFlag=deployProvControlPlaneWdmCapCtmConfigFlag, neAreaId=neAreaId, deployProvTunnelOtnCapTunnelScope=deployProvTunnelOtnCapTunnelScope, deployProvExChannelMaxBitErrorRate=deployProvExChannelMaxBitErrorRate, deployProvTunnelEthEntry=deployProvTunnelEthEntry, deployProvLogicalCpIfLinkColor=deployProvLogicalCpIfLinkColor, currentL2EthRx1dayPauseFramesRcv=currentL2EthRx1dayPauseFramesRcv, transientCryptoKeyExchgFailCondClr=transientCryptoKeyExchgFailCondClr, deployProvModuleDefaultsReach=deployProvModuleDefaultsReach, opticalIfConfigSigDegThresOdu=opticalIfConfigSigDegThresOdu, pathElementEthDataTie=pathElementEthDataTie, transientCopyFileTransferInProgress=transientCopyFileTransferInProgress, vs1allocatedSequenceNumber=vs1allocatedSequenceNumber, ptpEntityDataFunction=ptpEntityDataFunction, controlPlaneEthConfigPcConfigFlag=controlPlaneEthConfigPcConfigFlag, crsConnWdmUnusedFromPointsEntry=crsConnWdmUnusedFromPointsEntry, forceDeployProvApsPeerAidCapsIndex=forceDeployProvApsPeerAidCapsIndex, connectionWdmDataTunnelNumberExtension=connectionWdmDataTunnelNumberExtension, connectionOtnConfigTable=connectionOtnConfigTable, intervalPhysPerfOpticalInputPwr15minLow=intervalPhysPerfOpticalInputPwr15minLow, exChannelConfigPMDTransmit=exChannelConfigPMDTransmit, alarmPumpLaser4TempTooLow=alarmPumpLaser4TempTooLow, deployProvVchChannelForceDestroy=deployProvVchChannelForceDestroy, currentEthRx3HS15minBytesFrames1519Rcv=currentEthRx3HS15minBytesFrames1519Rcv, deployProvIfIpMask=deployProvIfIpMask, deployProvControlPlaneEthCapCtmMaximumRetryNumber=deployProvControlPlaneEthCapCtmMaximumRetryNumber, thresholdEthTxTable=thresholdEthTxTable, moduleDiagnosticsLowerTempThres=moduleDiagnosticsLowerTempThres, forceDeployProvApsRevertMode=forceDeployProvApsRevertMode, deployProvTifInputDefaultsRowStatus=deployProvTifInputDefaultsRowStatus, deployProvTunnelEthConnectionDirection=deployProvTunnelEthConnectionDirection, controlPlaneOtnConfigRsvpConfigFlag=controlPlaneOtnConfigRsvpConfigFlag, changeServiceDeployProvIfCapSigDegThresSonetLine=changeServiceDeployProvIfCapSigDegThresSonetLine, intervalPhysPerfOscOpticalOutputPwr15minLow=intervalPhysPerfOscOpticalOutputPwr15minLow, thresholdPhysPerfLocalOscTempLowThres=thresholdPhysPerfLocalOscTempLowThres, FspR7FiberBrand=FspR7FiberBrand, moduleDataBand=moduleDataBand, inventoryCpEthCrsDownDataEntry=inventoryCpEthCrsDownDataEntry, f7eqpWcelsc=f7eqpWcelsc, FspR7CpOspfTeRoutingCaps=FspR7CpOspfTeRoutingCaps, intervalPhysPerfOlmTxLineAtt15minEntry=intervalPhysPerfOlmTxLineAtt15minEntry, neEqlzAdmin=neEqlzAdmin, gfpServiceDefEntry=gfpServiceDefEntry, intervalGfp1dayEntry=intervalGfp1dayEntry, thresholdSonetLineTable=thresholdSonetLineTable, alarmThres15MinExceededOduTcmAES=alarmThres15MinExceededOduTcmAES, currentOtuFec15minEntry=currentOtuFec15minEntry, FspR7TifOutputResetCaps=FspR7TifOutputResetCaps, deployProvControlPlaneWdmDefaultsEntry=deployProvControlPlaneWdmDefaultsEntry, alarmUnequippedLowerOrderPath=alarmUnequippedLowerOrderPath, intervalPhysPerfDiffGrDelay1weekLow=intervalPhysPerfDiffGrDelay1weekLow, deployProvPathElementEthEntry=deployProvPathElementEthEntry, changeServiceDeployProvIfCapTraceTransmitDapiOdu=changeServiceDeployProvIfCapTraceTransmitDapiOdu, deployProvPathElementEthCapTrafficEngineeringType=deployProvPathElementEthCapTrafficEngineeringType, FspR7FalseTrueCaps=FspR7FalseTrueCaps, tunnelWdmDataEncode=tunnelWdmDataEncode, f7eqpScue=f7eqpScue, deployProvPathElementEthDefaultsTable=deployProvPathElementEthDefaultsTable, intervalGfpfrSublayer15minTHecDiscardedFrames=intervalGfpfrSublayer15minTHecDiscardedFrames, deployProvPlugChannelId=deployProvPlugChannelId, intervalOduTcmC1dayValidFlag=intervalOduTcmC1dayValidFlag, interfaceConfigAndStatus=interfaceConfigAndStatus, crsConnConfigRedLineState=crsConnConfigRedLineState, controlPlaneEthConfigCmAlarmActivationTime=controlPlaneEthConfigCmAlarmActivationTime, pathEthDataEntry=pathEthDataEntry, deployProvOpticalLinkTable=deployProvOpticalLinkTable, deployProvExChannelDefaultsChannelBandwith=deployProvExChannelDefaultsChannelBandwith, ntpSysConditionSeverityTable=ntpSysConditionSeverityTable, deployProvLogicalIfCapAdmin=deployProvLogicalIfCapAdmin, deployProvTifInputCapRowStatus=deployProvTifInputCapRowStatus, currentOduTcmC15minBbe=currentOduTcmC15minBbe, connectionOtnDataNetworkElementPosition=connectionOtnDataNetworkElementPosition, neAINSProvEnabled=neAINSProvEnabled, deployProvIfDefaultsPumpPower=deployProvIfDefaultsPumpPower, f7eqpXfpG=f7eqpXfpG, intervalPhysPerfBackreflectionPwrRcv15minTable=intervalPhysPerfBackreflectionPwrRcv15minTable, deployProvControlPlaneOtnTedbMinAdvertWait=deployProvControlPlaneOtnTedbMinAdvertWait, reservationCpDataSeqNumber=reservationCpDataSeqNumber, deployProvExChannelDefaultsMinimumOSNRRcv=deployProvExChannelDefaultsMinimumOSNRRcv, inventoryCpWdmDownDataNumber=inventoryCpWdmDownDataNumber, deployProvIfCapTcmALevel=deployProvIfCapTcmALevel, alarmThres15MinExceededSonetLineES=alarmThres15MinExceededSonetLineES, neOtnSesThreshold=neOtnSesThreshold, deployProvControlPlaneOtnCtmSetupTimeout=deployProvControlPlaneOtnCtmSetupTimeout, teNumLinkOtnDataInfo=teNumLinkOtnDataInfo, tunnelWdmConfigSubLayer=tunnelWdmConfigSubLayer, currentGfpfr1dayCHecDiscardedFrames=currentGfpfr1dayCHecDiscardedFrames, controlPlaneWdmConfigNaasMaxSize=controlPlaneWdmConfigNaasMaxSize, fspUserManagementCapSecurityLevel=fspUserManagementCapSecurityLevel, deployProvTunnelEthLayer=deployProvTunnelEthLayer, deployProvOpticalLinkCapTxLineAttenuation=deployProvOpticalLinkCapTxLineAttenuation, currentGfpfr15minEntry=currentGfpfr15minEntry, pathElementOtnDataTable=pathElementOtnDataTable, deployProvPathElementEthDefaultsUpstreamSvid=deployProvPathElementEthDefaultsUpstreamSvid, deployProvApsCapDirection=deployProvApsCapDirection, unusedOtnPathIndex=unusedOtnPathIndex, intervalPhysConvCombined1dayTimeStamp=intervalPhysConvCombined1dayTimeStamp, tunnelWdmConfigRestPathsNoProv=tunnelWdmConfigRestPathsNoProv, alarmProfileAidType=alarmProfileAidType, inventoryCpOtnCrsDownDataAids=inventoryCpOtnCrsDownDataAids, deployProvExChannelDefaultsFrameFormat=deployProvExChannelDefaultsFrameFormat, FspR7SessionStatus=FspR7SessionStatus, deployProvLogicalCpIfCapExtAdvertised=deployProvLogicalCpIfCapExtAdvertised, FspR7Unsigned32Caps=FspR7Unsigned32Caps, deployProvControlPlaneWdmCapCdConfigFlag=deployProvControlPlaneWdmCapCdConfigFlag, deployProvIfCapSigDegThresOduTcmA=deployProvIfCapSigDegThresOduTcmA, teUnnumLinkWdmDataNodeTid=teUnnumLinkWdmDataNodeTid, alarmWtrTimerRunning=alarmWtrTimerRunning, dcnTopologyDataNodeIpAddress=dcnTopologyDataNodeIpAddress, deployProvConnEndpointB=deployProvConnEndpointB, deployProvVchChannelVcgType=deployProvVchChannelVcgType, inventoryCpEthUpDataResources=inventoryCpEthUpDataResources, deployProvModuleCapDispersionCompensation=deployProvModuleCapDispersionCompensation, FspR7SignalMapping=FspR7SignalMapping, deployProvIfDefaultsType=deployProvIfDefaultsType, currentEthRx3HS1dayBytesFrames65Rcv=currentEthRx3HS1dayBytesFrames65Rcv, virtualOpticalChannelDataTransmitChannel=virtualOpticalChannelDataTransmitChannel, vtpEntityDataSubBandProvision=vtpEntityDataSubBandProvision, intervalPhysPerfOpticalInputPwr15minTable=intervalPhysPerfOpticalInputPwr15minTable, FspR7LagStandby=FspR7LagStandby, alarmThres15MinExceededGfpTsuperblockDisc=alarmThres15MinExceededGfpTsuperblockDisc, deployProvTunnelWdmDefaultsPin=deployProvTunnelWdmDefaultsPin, deployProvModuleForceDestroy=deployProvModuleForceDestroy, thresholdOtuFecSublayerExCEHighThres1day=thresholdOtuFecSublayerExCEHighThres1day, FspR7FtpServerCaps=FspR7FtpServerCaps, deployProvIfOduTribTimeSlottNo=deployProvIfOduTribTimeSlottNo, deployProvPortBindingCapRowStatus=deployProvPortBindingCapRowStatus, transientThres1DayExceededBytesTx=transientThres1DayExceededBytesTx, deployProvIfTraceExpectedOduTcmB=deployProvIfTraceExpectedOduTcmB, connectionEthDataErrorMessage=connectionEthDataErrorMessage)
mibBuilder.exportSymbols("FspR7-MIB", deployProvTunnelOtnCapLayer=deployProvTunnelOtnCapLayer, changeServiceDeployProvIfCapDispersionSetting=changeServiceDeployProvIfCapDispersionSetting, teNumLinkOtnDataNodeTid=teNumLinkOtnDataNodeTid, deployProvConnStdCapFromEndpointB=deployProvConnStdCapFromEndpointB, deployProvControlPlaneOtnCmAlarmActivationTime=deployProvControlPlaneOtnCmAlarmActivationTime, deployProvControlPlaneWdmCapNaasTraceDetail=deployProvControlPlaneWdmCapNaasTraceDetail, deployProvIfPayload=deployProvIfPayload, tifiConfigInvertTifInputLogic=tifiConfigInvertTifInputLogic, intervalEthRx1dayDiscardedFrames=intervalEthRx1dayDiscardedFrames, deployProvTifInputEntry=deployProvTifInputEntry, currentEthRx3HS1dayPauseFrames=currentEthRx3HS1dayPauseFrames, deployProvControlPlaneOtnDefaultsCtmConfigFlag=deployProvControlPlaneOtnDefaultsCtmConfigFlag, deployProvVchChannelDefaultsEqlzAdmin=deployProvVchChannelDefaultsEqlzAdmin, intervalEthRx3HS15minJabberFrameRcv=intervalEthRx3HS15minJabberFrameRcv, deployProvExChannelCapTable=deployProvExChannelCapTable, transientEqlzNotRequired=transientEqlzNotRequired, moduleConfigCapCac=moduleConfigCapCac, FspR7PrbsPmReset=FspR7PrbsPmReset, intervalOtuFec15minValidFlag=intervalOtuFec15minValidFlag, teNumLinkWdmDataInfo=teNumLinkWdmDataInfo, FspR7CpTypeCaps=FspR7CpTypeCaps, vs0allocatedFacilityType=vs0allocatedFacilityType, controlPlaneWdmEntityStateTable=controlPlaneWdmEntityStateTable, tunnelOtnDataErrorIp=tunnelOtnDataErrorIp, thresholdSonetLineUASSHighThres1day=thresholdSonetLineUASSHighThres1day, moduleConfigEqlzAdmin=moduleConfigEqlzAdmin, pathElementOtnDataPathId=pathElementOtnDataPathId, inventoryCpEthUpFlowDataFacilities=inventoryCpEthUpFlowDataFacilities, intervalPhysPerfOpticalInputPwr15minEntry=intervalPhysPerfOpticalInputPwr15minEntry, deployProvModuleDefaultsPsuOutputPower=deployProvModuleDefaultsPsuOutputPower, deployProvTunnelWdmCapTunnelId=deployProvTunnelWdmCapTunnelId, intervalDefectSeconds15minDS=intervalDefectSeconds15minDS, FspR7CpCommand=FspR7CpCommand, deployProvApsDefaultsProtectionMech=deployProvApsDefaultsProtectionMech, inventoryCpOtnCrsDownDataNumber=inventoryCpOtnCrsDownDataNumber, deployProvShelfForceDestroy=deployProvShelfForceDestroy, inventoryCpEthCrsDownDataNumber=inventoryCpEthCrsDownDataNumber, intervalFarEndPhysPerfOpticalInputPwr15minHigh=intervalFarEndPhysPerfOpticalInputPwr15minHigh, intervalL2EthTx1dayEntry=intervalL2EthTx1dayEntry, f7SFP4G=f7SFP4G, vchDataOpuPayloadType=vchDataOpuPayloadType, alarmEncryptionModuleSelfTestStarted=alarmEncryptionModuleSelfTestStarted, deployProvPppIpAdmin=deployProvPppIpAdmin, inventoryCpWdmCrsUpDataNumber=inventoryCpWdmCrsUpDataNumber, deployProvLogicalCpIfCapMetric=deployProvLogicalCpIfCapMetric, intervalPhysPerfEstimatedSignalGain1weekEntry=intervalPhysPerfEstimatedSignalGain1weekEntry, deployProvApsCapEntry=deployProvApsCapEntry, deployProvIfDefaultsTraceTransmitDapiOdu=deployProvIfDefaultsTraceTransmitDapiOdu, intervalSonetLine15minEntry=intervalSonetLine15minEntry, currentEthRxHighSpeed15minElapsedTime=currentEthRxHighSpeed15minElapsedTime, crsConnDeployProvCapRedLineState=crsConnDeployProvCapRedLineState, deployProvControlPlaneWdmDefaultsCdbMaxSize=deployProvControlPlaneWdmDefaultsCdbMaxSize, FspR7CpPreprovUeqStateCaps=FspR7CpPreprovUeqStateCaps, deployProvIfDefaultsPayload=deployProvIfDefaultsPayload, deployProvPppIpOspf=deployProvPppIpOspf, intervalOduTcmA1dayEntry=intervalOduTcmA1dayEntry, eRoadmConfigOffset=eRoadmConfigOffset, alarmThres15MinExceededOduTcmCSES=alarmThres15MinExceededOduTcmCSES, intervalL2EthRx15minBytesFrames256Rcv=intervalL2EthRx15minBytesFrames256Rcv, controlPlaneEthConfigNaasConfigFlag=controlPlaneEthConfigNaasConfigFlag, deployProvIfRevertiveMode=deployProvIfRevertiveMode, intervalPhysPerfSignalToNoiseRatio1weekNumber=intervalPhysPerfSignalToNoiseRatio1weekNumber, deployProvPathEthTable=deployProvPathEthTable, intervalPhysPerfOpticalOutputPwr15minHigh=intervalPhysPerfOpticalOutputPwr15minHigh, intervalGfp15minTypeHecCorrectedFrames=intervalGfp15minTypeHecCorrectedFrames, neAlarmActivationTime=neAlarmActivationTime, deployProvControlPlaneWdmCapTedbTraceDetail=deployProvControlPlaneWdmCapTedbTraceDetail, deployProvTifInputType=deployProvTifInputType, moduleDataRoadmNumber=moduleDataRoadmNumber, alarmAlarmIndicationSignalOpu=alarmAlarmIndicationSignalOpu, deployProvDcnCapEntry=deployProvDcnCapEntry, FspR7CpRsvpSignallingCaps=FspR7CpRsvpSignallingCaps, controlPlaneOtnConfigTedbRouterId=controlPlaneOtnConfigTedbRouterId, moduleConfigCapEqlzAdmin=moduleConfigCapEqlzAdmin, intervalLatency15minNumber=intervalLatency15minNumber, alarmFaultOnOpm=alarmFaultOnOpm, FspR7StuffCaps=FspR7StuffCaps, neSdhSesThreshold=neSdhSesThreshold, thresholdGfpTypeHecDiscardedFramesHighThres15Min=thresholdGfpTypeHecDiscardedFramesHighThres15Min, crsConnDeployProvFrom=crsConnDeployProvFrom, opticalIfDiagPumpLaser3Temp=opticalIfDiagPumpLaser3Temp, thresholdSonetSectSEFSHighThres1day=thresholdSonetSectSEFSHighThres1day, intervalOtuFec15minCE=intervalOtuFec15minCE, intervalPhysPerfEstimatedSignalGain15minMean=intervalPhysPerfEstimatedSignalGain15minMean, f7Modules=f7Modules, deployProvModuleCapTilt=deployProvModuleCapTilt, changeServiceDeployProvIfDefaultsSigDegThresOduTcmC=changeServiceDeployProvIfDefaultsSigDegThresOduTcmC, intervalPhysPerfOscPwr15minHigh=intervalPhysPerfOscPwr15minHigh, changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmB=changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmB, deployProvDcnDefaultsEntry=deployProvDcnDefaultsEntry, neAlarmProfileApply=neAlarmProfileApply, deployProvControlPlaneWdmCmConfigFlag=deployProvControlPlaneWdmCmConfigFlag, FspR7PortModeCaps=FspR7PortModeCaps, intervalEthRx15minValidFlag=intervalEthRx15minValidFlag, FspR7AidType=FspR7AidType, deployProvExChannelCapOpticalPowerTx=deployProvExChannelCapOpticalPowerTx, deployProvControlPlaneOtnDefaultsCtmTraceDetail=deployProvControlPlaneOtnDefaultsCtmTraceDetail, deployProvIfDefaultsEqlzAdmin=deployProvIfDefaultsEqlzAdmin, tunnelEthConfigAlias=tunnelEthConfigAlias, connectionOtnDataFecType=connectionOtnDataFecType, deployProvExChannelDefaultsOSNRTransmit=deployProvExChannelDefaultsOSNRTransmit, forceDeployProvApsCapApsType=forceDeployProvApsCapApsType, deployProvShelfType=deployProvShelfType, deployProvTunnelWdmDefaultsRestorationPaths=deployProvTunnelWdmDefaultsRestorationPaths, deployProvTunnelEthProvisionedPaths=deployProvTunnelEthProvisionedPaths, currentConditionTimeStamp=currentConditionTimeStamp, logicalCpIfDataVNodeIp=logicalCpIfDataVNodeIp, moduleConfigOutputReset=moduleConfigOutputReset, changeServiceDeployProvIfCapFarEndCommunication=changeServiceDeployProvIfCapFarEndCommunication, alarmEncryptionModuleSelfTestFailCritical=alarmEncryptionModuleSelfTestFailCritical, areaIdCapIndexCap=areaIdCapIndexCap, tunnelWdmConfigInitiateEqualization=tunnelWdmConfigInitiateEqualization, tifoDataTelemetry=tifoDataTelemetry, deployProvIfCapPumpPower=deployProvIfCapPumpPower, FspR7AccessProtocol=FspR7AccessProtocol, alarmSubModuleTempTooHigh=alarmSubModuleTempTooHigh, deployProvIfOpuPayloadType=deployProvIfOpuPayloadType, deployProvVchChannelDefaultsRowStatus=deployProvVchChannelDefaultsRowStatus, portBindingDataRemoteTnaMask=portBindingDataRemoteTnaMask, deployProvVchChannelDefaultsTraceExpectedOdu=deployProvVchChannelDefaultsTraceExpectedOdu, currentPhysConv15minDE=currentPhysConv15minDE, moduleConfigLagSysPrio=moduleConfigLagSysPrio, deployProvControlPlaneOtnCapCtmTraceDetail=deployProvControlPlaneOtnCapCtmTraceDetail, deployProvIfTcmCLevel=deployProvIfTcmCLevel, intervalPhysPerfLaserBiasCurrentNormalized15minEntry=intervalPhysPerfLaserBiasCurrentNormalized15minEntry, portBindingDataRemoteScn=portBindingDataRemoteScn, intervalOduTcmA15minTable=intervalOduTcmA15minTable, FspR7CpPinning=FspR7CpPinning, changeServiceDeployProvIfCapTraceTransmitOpspOduTcmB=changeServiceDeployProvIfCapTraceTransmitOpspOduTcmB, intervalEthRx3HS15minEntry=intervalEthRx3HS15minEntry, currentSonetSect15minElapsedTime=currentSonetSect15minElapsedTime, deployProvControlPlaneWdmCapCmTraceDetail=deployProvControlPlaneWdmCapCmTraceDetail, intervalFarEndPhysPerfOpticalOutputPwr15minHigh=intervalFarEndPhysPerfOpticalOutputPwr15minHigh, changeServiceDeployProvIfDefaultsSigDegThresOtu=changeServiceDeployProvIfDefaultsSigDegThresOtu, deployProvLogicalCpIfEntry=deployProvLogicalCpIfEntry, deployProvControlPlaneOtnDefaultsNaasTraceDetail=deployProvControlPlaneOtnDefaultsNaasTraceDetail, plugInventoryMaxDataRate=plugInventoryMaxDataRate, currentGfpfrSublayer1dayElapsedTime=currentGfpfrSublayer1dayElapsedTime, intervalOtu1dayEntry=intervalOtu1dayEntry, intervalPhysConvHighSpeed15minEntry=intervalPhysConvHighSpeed15minEntry, changeServiceDeployProvIfCapSigDegThresOdu=changeServiceDeployProvIfCapSigDegThresOdu, intervalPhysPerfCurrentOscGain15minEntry=intervalPhysPerfCurrentOscGain15minEntry, intervalPhysPerfOpticalInputPwr1dayMean=intervalPhysPerfOpticalInputPwr1dayMean, changeServiceDeployProvIfCapTraceTransmitSonetSection=changeServiceDeployProvIfCapTraceTransmitSonetSection, deployProvTunnelOtnRestorationType=deployProvTunnelOtnRestorationType, fspUserManagementSecurityName=fspUserManagementSecurityName, deployProvControlPlaneOtnRaAlarmActivationTime=deployProvControlPlaneOtnRaAlarmActivationTime, edfaConfigTable=edfaConfigTable, FspR7ForcedStatusCaps=FspR7ForcedStatusCaps, connectionWdmDataFromNodeIp=connectionWdmDataFromNodeIp, deployProvControlPlaneWdmCmTraceDetail=deployProvControlPlaneWdmCmTraceDetail, opticalIfConfigLagActivePorts=opticalIfConfigLagActivePorts, teNumLinkEthDataDiscarded=teNumLinkEthDataDiscarded, teUnnumLinkOtnDataEntry=teUnnumLinkOtnDataEntry, thresholdPhysPerfCapOpticalInputPwrHigh=thresholdPhysPerfCapOpticalInputPwrHigh, intervalGfpSublayer15minNumber=intervalGfpSublayer15minNumber, intervalPhysPerfLaserBiasCurrentNormalized1dayEntry=intervalPhysPerfLaserBiasCurrentNormalized1dayEntry, neBackupScuAvailable=neBackupScuAvailable, farEndPlugDataTransmitChannel=farEndPlugDataTransmitChannel, interfaceConfigLanAidCapsEntry=interfaceConfigLanAidCapsEntry, opticalIfDataCirTrmt=opticalIfDataCirTrmt, currentOtuFec15minExTable=currentOtuFec15minExTable, deployProvControlPlaneOtnCtmRetryWaitMultiplier=deployProvControlPlaneOtnCtmRetryWaitMultiplier, deployProvControlPlaneOtnTedbConfigFlag=deployProvControlPlaneOtnTedbConfigFlag, currentOtu15minES=currentOtu15minES, logicalCpIfDataPushedFarEndIpHeader=logicalCpIfDataPushedFarEndIpHeader, ntpSysCurrentConditionSeverity=ntpSysCurrentConditionSeverity, intervalPhysPerfEstimatedSignalGain15minLow=intervalPhysPerfEstimatedSignalGain15minLow, neNetworkTimeProtocol=neNetworkTimeProtocol, thresholdOduTable=thresholdOduTable, intervalSubAggregate1dayTable=intervalSubAggregate1dayTable, thresholdOtuFecSublayerBERCEHighThres1day=thresholdOtuFecSublayerBERCEHighThres1day, intervalL2EthRx1dayBytesFrames1519Rcv=intervalL2EthRx1dayBytesFrames1519Rcv, f7SFP2G5=f7SFP2G5, alarmRemoteDefectIndicationLowerOrderPath=alarmRemoteDefectIndicationLowerOrderPath, changeServiceDeployProvIfCapRowStatus=changeServiceDeployProvIfCapRowStatus, alarmLaserBiasCurrAbnormal=alarmLaserBiasCurrAbnormal, opticalAmplifierEquipmentDiagnosticsEntry=opticalAmplifierEquipmentDiagnosticsEntry, intervalPhysPerfBackreflectionPwrRcv1weekTable=intervalPhysPerfBackreflectionPwrRcv1weekTable, deployProvCopyPathWdmCapSourcePathIndex=deployProvCopyPathWdmCapSourcePathIndex, intervalOduTcmC1dayNumber=intervalOduTcmC1dayNumber, currentEthRx3HS1dayBytesFrames1024Rcv=currentEthRx3HS1dayBytesFrames1024Rcv, deployProvLogicalIfAuthType=deployProvLogicalIfAuthType, intervalDispersionCompensation15minTable=intervalDispersionCompensation15minTable, deployProvPathElementEthDownstreamSvid=deployProvPathElementEthDownstreamSvid, deployProvPathElementEthDefaultsTrafficEngineeringType=deployProvPathElementEthDefaultsTrafficEngineeringType, currentOduTcmA15minES=currentOduTcmA15minES, deployProvPppIpIpType=deployProvPppIpIpType, FspR7CpTieCaps=FspR7CpTieCaps, crsConnPossibleToCreateAidToFromPoint=crsConnPossibleToCreateAidToFromPoint, eRoadmDataConnectionState=eRoadmDataConnectionState, ntpSrvAttributeValueChange=ntpSrvAttributeValueChange, teNumLinkWdmDataSynchronization=teNumLinkWdmDataSynchronization, controlPlaneWdmConfigCtmRetryWaitMultiplier=controlPlaneWdmConfigCtmRetryWaitMultiplier, deployProvIfTraceTransmitDapiOduTcmA=deployProvIfTraceTransmitDapiOduTcmA, deployProvApsCapProtectionMech=deployProvApsCapProtectionMech, alarmThres15MinExceededOduSES=alarmThres15MinExceededOduSES, FspR7CpProtectionTypeCaps=FspR7CpProtectionTypeCaps, alarmRemoved=alarmRemoved, deployProvOpticalLinkDefaultsTable=deployProvOpticalLinkDefaultsTable, intervalEthRx3HS1dayPauseFrames=intervalEthRx3HS1dayPauseFrames, fspUserManagementDefaultsTimeoutAvailable=fspUserManagementDefaultsTimeoutAvailable, thresholdEthRxHighSpeedEntry=thresholdEthRxHighSpeedEntry, intervalPhysPerfOpticalOutputPwr15minMean=intervalPhysPerfOpticalOutputPwr15minMean, interfaceConfigCapInitiateEqualization=interfaceConfigCapInitiateEqualization, moduleDiagnosticsTemp=moduleDiagnosticsTemp, intervalL2EthTx1dayBytesFrames128Trmt=intervalL2EthTx1dayBytesFrames128Trmt, thresholdOduTcmBEntry=thresholdOduTcmBEntry, deployProvModuleType=deployProvModuleType, equipmentInserted=equipmentInserted, deployProvControlPlaneWdmCapCtmMaximumRetryWait=deployProvControlPlaneWdmCapCtmMaximumRetryWait, alarmAutoShutdownLaserOffDueToErrFwd=alarmAutoShutdownLaserOffDueToErrFwd, deployProvControlPlaneOtnDefaultsRsvpMaxExpRestartTime=deployProvControlPlaneOtnDefaultsRsvpMaxExpRestartTime, FspR7InitEqualization=FspR7InitEqualization, vchDataEntry=vchDataEntry, physicalTerminationPointIndex=physicalTerminationPointIndex, thresholdPhysPerfLowerAtlinkThres=thresholdPhysPerfLowerAtlinkThres, currentPhysConvCombined15minEntry=currentPhysConvCombined15minEntry, currentGfpfr15minElapsedTime=currentGfpfr15minElapsedTime, deployProvIfCapSigDegThresSdhSection=deployProvIfCapSigDegThresSdhSection, fspUserManagementCapRowStatus=fspUserManagementCapRowStatus, deployProvTunnelWdmToNodeIp=deployProvTunnelWdmToNodeIp, intervalPhysPerfDiffGrDelay1weekHigh=intervalPhysPerfDiffGrDelay1weekHigh, deployProvIfDefaultsSigDegPeriodOduTcmB=deployProvIfDefaultsSigDegPeriodOduTcmB, deployProvTunnelWdmDefaultsReversionType=deployProvTunnelWdmDefaultsReversionType, thresholdGfpSublayerEntry=thresholdGfpSublayerEntry, crsConnWdmConfigTable=crsConnWdmConfigTable, intervalL2EthTx15minBytesFrames64Trmt=intervalL2EthTx15minBytesFrames64Trmt, intervalLatency1weekEntry=intervalLatency1weekEntry, changeServiceDeployProvIfTraceTransmitDapiOduTcmB=changeServiceDeployProvIfTraceTransmitDapiOduTcmB, intervalEthRx3HS15minCrcFrames=intervalEthRx3HS15minCrcFrames, FspR7NtpServerStatus=FspR7NtpServerStatus, alarmChannelMismatch=alarmChannelMismatch, logicalIfDataLogicalInterfaceId=logicalIfDataLogicalInterfaceId, intervalEthRx1dayPauseFrames=intervalEthRx1dayPauseFrames, deployProvControlPlaneWdmCapCtmRetryWait=deployProvControlPlaneWdmCapCtmRetryWait, intervalFarEndPhysPerfOpticalOutputPwr1dayValidFlag=intervalFarEndPhysPerfOpticalOutputPwr1dayValidFlag, alarmPilotReceiveLevelHigh=alarmPilotReceiveLevelHigh, pppDataNearEndIp=pppDataNearEndIp, intervalDefectSeconds1dayTimeStamp=intervalDefectSeconds1dayTimeStamp, crsDcnDataEntry=crsDcnDataEntry, alarmChromaticDispersionTooHigh=alarmChromaticDispersionTooHigh, deployProvIfWdmRxChannel=deployProvIfWdmRxChannel, deployProvIfCapStagType=deployProvIfCapStagType, deployProvControlPlaneOtnCapCtmShutdownTimeout=deployProvControlPlaneOtnCapCtmShutdownTimeout, currentEthRx3HS15minTable=currentEthRx3HS15minTable, f7ContainerFanSlot=f7ContainerFanSlot, vtpEntityDataBandProvision=vtpEntityDataBandProvision, pathElementEthDataNodeIp=pathElementEthDataNodeIp, deployProvIfDefaultsTimModeOtu=deployProvIfDefaultsTimModeOtu, deployProvControlPlaneWdmDefaultsNaasConfigFlag=deployProvControlPlaneWdmDefaultsNaasConfigFlag, currentL2EthTx1dayElapsedTime=currentL2EthTx1dayElapsedTime, deployProvPathEthRowStatus=deployProvPathEthRowStatus, f7eqpEdfadgc=f7eqpEdfadgc)
mibBuilder.exportSymbols("FspR7-MIB", opticalIfConfigEntry=opticalIfConfigEntry, interfaceDataType=interfaceDataType, intervalSubAggregate1daySES=intervalSubAggregate1daySES, currentEthRx3HS15minElapsedTime=currentEthRx3HS15minElapsedTime, currentEthRx3HS1dayBytesFrames512Rcv=currentEthRx3HS1dayBytesFrames512Rcv, cloningEntry=cloningEntry, deployProvLogicalCpIfCapVTeType=deployProvLogicalCpIfCapVTeType, FspR7ConnCommand=FspR7ConnCommand, opticalIfOlmTxLineAttenuation=opticalIfOlmTxLineAttenuation, logicalCpIfDataFacilityType=logicalCpIfDataFacilityType, deployProvCopyPathEthCapSourcePathIndex=deployProvCopyPathEthCapSourcePathIndex, deployProvTunnelOtnToTid=deployProvTunnelOtnToTid, deployProvModuleDefaultsDCFiberType=deployProvModuleDefaultsDCFiberType, deployProvControlPlaneOtnDefaultsRaConfigFlag=deployProvControlPlaneOtnDefaultsRaConfigFlag, tunnelWdmDataRestorationState=tunnelWdmDataRestorationState, deployProvTifInputDefaultsInvertTifInputLogic=deployProvTifInputDefaultsInvertTifInputLogic, intervalPhysPerfOscPwr1weekMean=intervalPhysPerfOscPwr1weekMean, inventoryCpEthCrsDownDataTable=inventoryCpEthCrsDownDataTable, deployProvTifInputInvertTifInputLogic=deployProvTifInputInvertTifInputLogic, opticalIfDiagCarrierFreqOffset=opticalIfDiagCarrierFreqOffset, deployProvModuleChannelSpacing=deployProvModuleChannelSpacing, logicalCpIfDataFarEndNodeIp=logicalCpIfDataFarEndNodeIp, tunnelWdmConfigTable=tunnelWdmConfigTable, controlPlaneEthConfigCmCrankBackTimeout=controlPlaneEthConfigCmCrankBackTimeout, FspR7CpActivState=FspR7CpActivState, alarmServerSignalFailureSectionRS=alarmServerSignalFailureSectionRS, sts24callocatedContainer=sts24callocatedContainer, transientWorkingSwitchedBacktoWorking=transientWorkingSwitchedBacktoWorking, FspR7CpAbortProcess=FspR7CpAbortProcess, deployProvIfTraceExpectedOtu=deployProvIfTraceExpectedOtu, intervalEthTx15minPauseFrames=intervalEthTx15minPauseFrames, alarmSignalDegradeSection=alarmSignalDegradeSection, exChannelDataTable=exChannelDataTable, crsConnConfigPathNode=crsConnConfigPathNode, alarmOpenConnectionIndicationOduTcmC=alarmOpenConnectionIndicationOduTcmC, forceDeployProvApsEntry=forceDeployProvApsEntry, thresholdOduTcmAESHighThres15min=thresholdOduTcmAESHighThres15min, deployProvIfFunction=deployProvIfFunction, intervalGfpfrSublayer15minEntry=intervalGfpfrSublayer15minEntry, intervalEthRx3HS1dayBytesFrames256Rcv=intervalEthRx3HS1dayBytesFrames256Rcv, intraNeConnectionsState=intraNeConnectionsState, deployProvControlPlaneOtnDefaultsTedbMinAdvertWait=deployProvControlPlaneOtnDefaultsTedbMinAdvertWait, deployProvLanAdmin=deployProvLanAdmin, FspR7PathNodeCaps=FspR7PathNodeCaps, intervalGfp15minTypeHecDiscardedFrames=intervalGfp15minTypeHecDiscardedFrames, shelfInfoInternalPorts=shelfInfoInternalPorts, FspR7CpPreprovUeqState=FspR7CpPreprovUeqState, eocDataTable=eocDataTable, deployProvPlugDefaultsRowStatus=deployProvPlugDefaultsRowStatus, intervalL2EthRx15minBytesFrames64Rcv=intervalL2EthRx15minBytesFrames64Rcv, logicalCpIfDataFendDataLinkId=logicalCpIfDataFendDataLinkId, deployProvApsHoldOffTime=deployProvApsHoldOffTime, deployProvModuleCapChannelsNumber=deployProvModuleCapChannelsNumber, intervalRoundTripDelay15minNumber=intervalRoundTripDelay15minNumber, currentEthRx3HS15minOversizedFramesRcv=currentEthRx3HS15minOversizedFramesRcv, changeServiceDeployProvIfDisparityCorrection=changeServiceDeployProvIfDisparityCorrection, controlPlaneEthConfigTedbMaxSize=controlPlaneEthConfigTedbMaxSize, currentEthRx3HS1dayEntry=currentEthRx3HS1dayEntry, intervalEthTx1dayNumber=intervalEthTx1dayNumber, currentSonetLine1dayEntry=currentSonetLine1dayEntry, f7eqpDcm=f7eqpDcm, interfaceConfigLanAidCapsIndex=interfaceConfigLanAidCapsIndex, interfaceDataOdtuType=interfaceDataOdtuType, deployProvVirtualOpticalChannelEntry=deployProvVirtualOpticalChannelEntry, intervalEthRx1dayGoodFrames=intervalEthRx1dayGoodFrames, connectionEthDataCirTrmt=connectionEthDataCirTrmt, vtpEntityDataChannelProvision=vtpEntityDataChannelProvision, intervalPhysPerfOpticalOutputPwr1weekEntry=intervalPhysPerfOpticalOutputPwr1weekEntry, teUnnumLinkEthDataNodeTid=teUnnumLinkEthDataNodeTid, logicalCpIfConfigTable=logicalCpIfConfigTable, alarmAutomaticPowerReduction=alarmAutomaticPowerReduction, interfaceConfigTurnupConfig=interfaceConfigTurnupConfig, deployProvModuleAdmin=deployProvModuleAdmin, deployProvModuleCac=deployProvModuleCac, intervalRoundTripDelay1dayMean=intervalRoundTripDelay1dayMean, intervalPhysPerfOscPwr15minLow=intervalPhysPerfOscPwr15minLow, currentEthRx3HS15minGoodFrames=currentEthRx3HS15minGoodFrames, forceDeployProvApsCapFarEndIp=forceDeployProvApsCapFarEndIp, connectionOtnConfigCancelConnEntities=connectionOtnConfigCancelConnEntities, deployProvPlugCapThirdPartyUsage=deployProvPlugCapThirdPartyUsage, controlPlaneOtnConfigCdbConfigFlag=controlPlaneOtnConfigCdbConfigFlag, deployProvModuleDefaultsMapping=deployProvModuleDefaultsMapping, interfaceDataTermLevel=interfaceDataTermLevel, deployProvControlPlaneOtnCapCdTraceDetail=deployProvControlPlaneOtnCapCdTraceDetail, dcnOspfAreaDeletion=dcnOspfAreaDeletion, deployProvPathEthDefaultsEntry=deployProvPathEthDefaultsEntry, deployProvIfDefaultsTraceTransmitOpspOdu=deployProvIfDefaultsTraceTransmitOpspOdu, currentOduTcmA1dayElapsedTime=currentOduTcmA1dayElapsedTime, changeServiceDeployProvIfDefaultsTilt=changeServiceDeployProvIfDefaultsTilt, intervalOdu15minTimeStamp=intervalOdu15minTimeStamp, deployProvLogicalCpIfIpAddrMask=deployProvLogicalCpIfIpAddrMask, deployProvTunnelWdmPin=deployProvTunnelWdmPin, deployProvTunnelOtnDefaultsToNodeIp=deployProvTunnelOtnDefaultsToNodeIp, tunnelEthConfigCirRcv=tunnelEthConfigCirRcv, intervalOduTcmC1dayUAS=intervalOduTcmC1dayUAS, thresholdPhysConvDEHighThres1day=thresholdPhysConvDEHighThres1day, deployProvLogicalCpIfCapFendTeLinkIdUnn=deployProvLogicalCpIfCapFendTeLinkIdUnn, currentGfpt1dayTable=currentGfpt1dayTable, intervalPhysPerfOscOpticalOutputPwr15minNumber=intervalPhysPerfOscOpticalOutputPwr15minNumber, tunnelEthDataTunnelNo=tunnelEthDataTunnelNo, deployProvControlPlaneOtnCapCdResyncTimeout=deployProvControlPlaneOtnCapCdResyncTimeout, intervalPhysPerfCarrierFreqOffset1weekLow=intervalPhysPerfCarrierFreqOffset1weekLow, FspR7InitEqualizationCaps=FspR7InitEqualizationCaps, intervalL2EthTx1dayBytesFrames65Trmt=intervalL2EthTx1dayBytesFrames65Trmt, moduleDataNetworkPlugs=moduleDataNetworkPlugs, intervalLinkAttenuation1weekTimeStamp=intervalLinkAttenuation1weekTimeStamp, deployProvPathOtnCapRowStatus=deployProvPathOtnCapRowStatus, deployProvVchChannelDefaultsTraceTransmitSapiOdu=deployProvVchChannelDefaultsTraceTransmitSapiOdu, thresholdGfpSublayerTypeHecCorrectedFramesHighThres15Day=thresholdGfpSublayerTypeHecCorrectedFramesHighThres15Day, transientThres1DayExceededOtuSES=transientThres1DayExceededOtuSES, deployProvPathElementEthUpstreamSvid=deployProvPathElementEthUpstreamSvid, intervalPhysPerfOscOpticalOutputPwr1dayValidFlag=intervalPhysPerfOscOpticalOutputPwr1dayValidFlag, deployProvLogicalCpIfAdmin=deployProvLogicalCpIfAdmin, currentSonetLoPath1daySES=currentSonetLoPath1daySES, intervalEthRx3HS1dayEntry=intervalEthRx3HS1dayEntry, intervalPhysPerfBackreflectionPwrRcv1dayTable=intervalPhysPerfBackreflectionPwrRcv1dayTable, alarmOpticalPowerTxLOS=alarmOpticalPowerTxLOS, inactiveRoutingIpRowStatus=inactiveRoutingIpRowStatus, inventoryCpWdmCrsDownDataAids=inventoryCpWdmCrsDownDataAids, sts24callocatedSequenceNumber=sts24callocatedSequenceNumber, intervalOtuFec15minExUBE=intervalOtuFec15minExUBE, FspR7DispersionCompensation=FspR7DispersionCompensation, currentDefectSeconds15minEntry=currentDefectSeconds15minEntry, deployProvModuleDefaultsGainRange=deployProvModuleDefaultsGainRange, deployProvControlPlaneOtnCtmTraceDetail=deployProvControlPlaneOtnCtmTraceDetail, deployProvExChannelDefaultsTable=deployProvExChannelDefaultsTable, ApsRevertModeCaps=ApsRevertModeCaps, deployProvOpticalLinkDefaultsRxLineAttenuation=deployProvOpticalLinkDefaultsRxLineAttenuation, deployProvControlPlaneEthRowStatus=deployProvControlPlaneEthRowStatus, deployProvPlugEntry=deployProvPlugEntry, changeServiceDeployProvIfDefaultsSigDegThresSdhMs=changeServiceDeployProvIfDefaultsSigDegThresSdhMs, controlPlaneEthEntityStateCapTable=controlPlaneEthEntityStateCapTable, deployProvControlPlaneWdmDefaultsRowStatus=deployProvControlPlaneWdmDefaultsRowStatus, intervalEthRx3HS1dayMulticastFramesRcv=intervalEthRx3HS1dayMulticastFramesRcv, intervalOduTcmA15minNumber=intervalOduTcmA15minNumber, deployProvPathElementWdmCapTie=deployProvPathElementWdmCapTie, deployProvControlPlaneOtnCapCmTraceDetail=deployProvControlPlaneOtnCapCmTraceDetail, interfaceDataBehaviour=interfaceDataBehaviour, intervalPhysPerfCurrentOscGain15minTable=intervalPhysPerfCurrentOscGain15minTable, currentGfpt1dayElapsedTime=currentGfpt1dayElapsedTime, deployProvIfCapFarEndCommunication=deployProvIfCapFarEndCommunication, pathOtnDataPathId=pathOtnDataPathId, FspR7TL1InternalStateCaps=FspR7TL1InternalStateCaps, knownHostKeyEncryptAlgorithm=knownHostKeyEncryptAlgorithm, deployProvTunnelOtnToAid=deployProvTunnelOtnToAid, deployProvIfCapSigDegPeriodOtu=deployProvIfCapSigDegPeriodOtu, opticalIfConfigAreaId=opticalIfConfigAreaId, deployProvModuleDefaultsSupply=deployProvModuleDefaultsSupply, transientCopyFileFailDisabledProtocol=transientCopyFileFailDisabledProtocol, deployProvShelfRowStatus=deployProvShelfRowStatus, thresholdPhysConvESHighThres15min=thresholdPhysConvESHighThres15min, deployProvTifOutputAdmin=deployProvTifOutputAdmin, deployProvControlPlaneWdmCapCmAlarmActivationTime=deployProvControlPlaneWdmCapCmAlarmActivationTime, logicalCpIfDataDcnAid=logicalCpIfDataDcnAid, deployProvPathElementWdmCapLogicalInterfaceId=deployProvPathElementWdmCapLogicalInterfaceId, alarmPumpLaser1TempTooLow=alarmPumpLaser1TempTooLow, alarmLinkAttenuationTooHigh=alarmLinkAttenuationTooHigh, controlPlaneWdmConfigCmCrankBackTimeout=controlPlaneWdmConfigCmCrankBackTimeout, intervalPhysPerfSignalToNoiseRatio1dayEntry=intervalPhysPerfSignalToNoiseRatio1dayEntry, deployProvLogicalCpIfRefreshMultiplier=deployProvLogicalCpIfRefreshMultiplier, opticalIfDataFrequency=opticalIfDataFrequency, pathElementWdmDataComputedOptPowerForward=pathElementWdmDataComputedOptPowerForward, FspR7StandingConditionTypes=FspR7StandingConditionTypes, currentOdu15minBbe=currentOdu15minBbe, currentEthRx1dayBytes=currentEthRx1dayBytes, deployProvTunnelEthCbsRcv=deployProvTunnelEthCbsRcv, transientPmSnapshotStarted=transientPmSnapshotStarted, deployProvLogicalCpIfDefaultsNendTeLinkIdUnn=deployProvLogicalCpIfDefaultsNendTeLinkIdUnn, thresholdSonetLineESHighThres1day=thresholdSonetLineESHighThres1day, intervalDispersionCompensation15minNumber=intervalDispersionCompensation15minNumber, vchDataTable=vchDataTable, currentPhysConvTxHighSpeed15minSETX=currentPhysConvTxHighSpeed15minSETX, controlPlaneEthConfigCtmConfigFlag=controlPlaneEthConfigCtmConfigFlag, deployProvIfCapRowStatus=deployProvIfCapRowStatus, logicalCpIfDataNendTeLinkIdNum=logicalCpIfDataNendTeLinkIdNum, deployProvCopyPathOtnRowStatus=deployProvCopyPathOtnRowStatus, intervalSonetLine1dayTable=intervalSonetLine1dayTable, alarmMaxPowerConsProvModulesToHigh=alarmMaxPowerConsProvModulesToHigh, deployProvIfDefaultsPriority=deployProvIfDefaultsPriority, shelfInfoOscPorts=shelfInfoOscPorts, changeServiceDeployProvIfCapTimModeSonetSection=changeServiceDeployProvIfCapTimModeSonetSection, pathElementEthDataDownstreamSvid=pathElementEthDataDownstreamSvid, FspR7ScuRingCaps=FspR7ScuRingCaps, intervalPhysConvTxHighSpeed15minESTX=intervalPhysConvTxHighSpeed15minESTX, currentGfp1dayTypeHecDiscardedFrames=currentGfp1dayTypeHecDiscardedFrames, neDatabaseType=neDatabaseType, transientSoftwareActivationFail=transientSoftwareActivationFail, deployProvTunnelWdmDefaultsToAid=deployProvTunnelWdmDefaultsToAid, intervalSonetLoPath15minES=intervalSonetLoPath15minES, intervalGfpt15minNumber=intervalGfpt15minNumber, intervalPhysPerfPumpPwr1weekTable=intervalPhysPerfPumpPwr1weekTable, changeServiceDeployProvIfDefaultsTxOffDelay=changeServiceDeployProvIfDefaultsTxOffDelay, transientThres1DayExceededFecUBE=transientThres1DayExceededFecUBE, currentPhysConv15minTable=currentPhysConv15minTable, deployProvControlPlaneOtnCapCmAlarmActivationTime=deployProvControlPlaneOtnCapCmAlarmActivationTime, intervalPhysConv1dayCV=intervalPhysConv1dayCV, deployProvTifInputDefaultsTifAlarmMessage=deployProvTifInputDefaultsTifAlarmMessage, farEndIfDataReach=farEndIfDataReach, currentOtuFec15minExUBE=currentOtuFec15minExUBE, f7eqpSh1hudcm=f7eqpSh1hudcm, deployProvVchChannelDefaultsType=deployProvVchChannelDefaultsType, intervalSonetLine15minES=intervalSonetLine15minES, transientThres1DayExceededPhysConvCVDE=transientThres1DayExceededPhysConvCVDE, f7STM64=f7STM64, moduleDataMapping=moduleDataMapping, connectionOtnConfigCancelModifier=connectionOtnConfigCancelModifier, FspR7AlsModeCaps=FspR7AlsModeCaps, deployProvDcnDefaultsForceDestroy=deployProvDcnDefaultsForceDestroy, changeServiceDeployProvIfAprHighThreshold=changeServiceDeployProvIfAprHighThreshold, controlPlaneWdmDataCtmAlias=controlPlaneWdmDataCtmAlias, intervalPhysConvHighSpeed1dayEntry=intervalPhysConvHighSpeed1dayEntry, inventoryCpOtnCrsDownDataEntry=inventoryCpOtnCrsDownDataEntry, intervalEthRx15minDiscardedFrames=intervalEthRx15minDiscardedFrames, alarmLaserEndOfLife=alarmLaserEndOfLife, alarmPcsSignalDegrade=alarmPcsSignalDegrade, dcnOspfAreaTable=dcnOspfAreaTable, tifiConfigTifAlarmType=tifiConfigTifAlarmType, changeServiceDeployProvIfCapAdmin=changeServiceDeployProvIfCapAdmin, alarmFanAlarm=alarmFanAlarm, tifiDataTable=tifiDataTable, intervalOduTcmC15minUAS=intervalOduTcmC15minUAS, deployProvPortBindingCapLayer=deployProvPortBindingCapLayer, controlPlaneWdmConfigRaAlarmActivationTime=controlPlaneWdmConfigRaAlarmActivationTime, deployProvCopyPathEthTable=deployProvCopyPathEthTable, deployProvTifOutputDefaultsTelemetry=deployProvTifOutputDefaultsTelemetry, alarmTraceIdentifierMismatchOtu=alarmTraceIdentifierMismatchOtu, alarmAutoShutdownLaserOffDueToHighTemp=alarmAutoShutdownLaserOffDueToHighTemp, deployProvApsDefaultsHoldOffTime=deployProvApsDefaultsHoldOffTime, intervalLinkAttenuation1weekEntry=intervalLinkAttenuation1weekEntry, connectionOtnConfigEntry=connectionOtnConfigEntry, deployProvIfDefaultsAprHighThreshold=deployProvIfDefaultsAprHighThreshold, intervalPhysConvCombined15minEntry=intervalPhysConvCombined15minEntry, intervalOduTcmC1dayBbe=intervalOduTcmC1dayBbe, thresholdOtuFecSublayerESHighThres15min=thresholdOtuFecSublayerESHighThres15min, changeServiceDeployProvIfSigDegThresOduTcmA=changeServiceDeployProvIfSigDegThresOduTcmA, logicalIfConfigPushedNearEndIpHeader=logicalIfConfigPushedNearEndIpHeader, neDatabaseSerialNumber=neDatabaseSerialNumber, transientCpConnectionModificationCompleted=transientCpConnectionModificationCompleted, vc4c8allocatedTable=vc4c8allocatedTable, controlPlaneEthConfigNaasMaxSize=controlPlaneEthConfigNaasMaxSize, opticalIfDataLacpMode=opticalIfDataLacpMode, deployProvControlPlaneEthDefaultsCdbConfigFlag=deployProvControlPlaneEthDefaultsCdbConfigFlag, deployProvIfCapFecType=deployProvIfCapFecType, intervalOtuFec1dayExCE=intervalOtuFec1dayExCE, deployProvControlPlaneWdmCapRowStatus=deployProvControlPlaneWdmCapRowStatus, deployProvDcnCapType=deployProvDcnCapType, intervalL2EthTx15minBytesFrames256Trmt=intervalL2EthTx15minBytesFrames256Trmt, shelfDiagnosticsPowerOutput=shelfDiagnosticsPowerOutput, moduleDiagnosticsTable=moduleDiagnosticsTable, interfaceDataRate=interfaceDataRate, deployProvPathWdmPathId=deployProvPathWdmPathId, intervalPhysPerfCurrentOscGain1weekHigh=intervalPhysPerfCurrentOscGain1weekHigh, deployProvTifOutputDefaultsForceDestroy=deployProvTifOutputDefaultsForceDestroy, currentOduTcmB1daySES=currentOduTcmB1daySES)
mibBuilder.exportSymbols("FspR7-MIB", intervalPhysPerfLaserBiasCurrentNormalized1weekValidFlag=intervalPhysPerfLaserBiasCurrentNormalized1weekValidFlag, tnaMapDataRemoteTna=tnaMapDataRemoteTna, deployProvIfDefaultsTimModeOdu=deployProvIfDefaultsTimModeOdu, pathWdmDataTable=pathWdmDataTable, eocDataMaxDataRate=eocDataMaxDataRate, fspUserManagementTcpSessionStatus=fspUserManagementTcpSessionStatus, deployProvIfDefaultsXfpDecisionThres=deployProvIfDefaultsXfpDecisionThres, changeServiceDeployProvIfSigDegThresReceiver=changeServiceDeployProvIfSigDegThresReceiver, connectionOtnDataFromAid=connectionOtnDataFromAid, intervalPhysConv1dayValidFlag=intervalPhysConv1dayValidFlag, transientThres1DayExceededSonetSectSEFS=transientThres1DayExceededSonetSectSEFS, teNumLinkWdmDataEntry=teNumLinkWdmDataEntry, changeServiceDeployProvIfCapPayload=changeServiceDeployProvIfCapPayload, shelfDiagnosticsMaxPowerConsumption=shelfDiagnosticsMaxPowerConsumption, intervalGfpfrSublayer1dayTimeStamp=intervalGfpfrSublayer1dayTimeStamp, f7eqpEdfasgc=f7eqpEdfasgc, connectionWdmDataDestinationTna=connectionWdmDataDestinationTna, FspR7PortBehaviourCaps=FspR7PortBehaviourCaps, intervalOduTcmB15minBbe=intervalOduTcmB15minBbe, remoteAlarmCpDataNodeIp=remoteAlarmCpDataNodeIp, alarmEncryptionModuleFwpUpdateEnabled=alarmEncryptionModuleFwpUpdateEnabled, alarmSignalToNoiseRatioTooLow=alarmSignalToNoiseRatioTooLow, thresholdPhysPerfCapOscPwrRcvLowThres=thresholdPhysPerfCapOscPwrRcvLowThres, currentOduTcmA1dayES=currentOduTcmA1dayES, thresholdGfpTypeHecDiscardedFramesHighThres1Day=thresholdGfpTypeHecDiscardedFramesHighThres1Day, deployProvTunnelWdmTunnelType=deployProvTunnelWdmTunnelType, logicalCpIfConfigPushedNearEndIpHeader=logicalCpIfConfigPushedNearEndIpHeader, exChannelConfigMaxBitErrorRate=exChannelConfigMaxBitErrorRate, deployProvIfCapTraceTransmitDapiOdu=deployProvIfCapTraceTransmitDapiOdu, intervalFarEndPhysPerfOpticalOutputPwr1weekLow=intervalFarEndPhysPerfOpticalOutputPwr1weekLow, eRoadmInfoMaxPowerConsumption=eRoadmInfoMaxPowerConsumption, thresholdEthTxPauseFramesHighThres1Day=thresholdEthTxPauseFramesHighThres1Day, deployProvPlugCapEntry=deployProvPlugCapEntry, farEndPlugDataType=farEndPlugDataType, intervalPhysPerfOlmRxLineAtt15minTimeStamp=intervalPhysPerfOlmRxLineAtt15minTimeStamp, f7eqp2bsmd=f7eqp2bsmd, deployProvControlPlaneEthCapCtmTraceDetail=deployProvControlPlaneEthCapCtmTraceDetail, intervalPhysPerfBackreflectionPwrRcv1dayValidFlag=intervalPhysPerfBackreflectionPwrRcv1dayValidFlag, currentSonetSect1dayCV=currentSonetSect1dayCV, connectionEthDataLayer=connectionEthDataLayer, deployProvIfDuplex=deployProvIfDuplex, intervalL2EthRx1dayBytesFrames64Rcv=intervalL2EthRx1dayBytesFrames64Rcv, currentOtuFec15minElapsedTime=currentOtuFec15minElapsedTime, f7eqpsfpd=f7eqpsfpd, deployProvTunnelOtnDefaultsTable=deployProvTunnelOtnDefaultsTable, controlPlaneOtnConfigCdbMaxSize=controlPlaneOtnConfigCdbMaxSize, intervalPhysPerfPumpPwr1dayValidFlag=intervalPhysPerfPumpPwr1dayValidFlag, deployProvControlPlaneOtnDefaultsRaAlarmActivationTime=deployProvControlPlaneOtnDefaultsRaAlarmActivationTime, pppfConfigBitrate=pppfConfigBitrate, apsProtFacilityConfigCapEntry=apsProtFacilityConfigCapEntry, crsDcnDataEccInstance=crsDcnDataEccInstance, deployProvExChannelCapMinimumOSNRRcv=deployProvExChannelCapMinimumOSNRRcv, FspR7XfpDecisionThresCaps=FspR7XfpDecisionThresCaps, intervalGfpSublayer1dayEntry=intervalGfpSublayer1dayEntry, neFtpClient=neFtpClient, gfpServiceDefBundleAllocation=gfpServiceDefBundleAllocation, currentOduTcmA15minTable=currentOduTcmA15minTable, neDaylightSavingsTimeEnabled=neDaylightSavingsTimeEnabled, crsConnDeployProvDefaultsPathNode=crsConnDeployProvDefaultsPathNode, crossConnectionDeletion=crossConnectionDeletion, f7eqpWca10gd=f7eqpWca10gd, changeServiceDeployProvIfDefaultsFiberBrand=changeServiceDeployProvIfDefaultsFiberBrand, deployProvIfLanAid=deployProvIfLanAid, entityStateCapEntry=entityStateCapEntry, changeServiceDeployProvIfDispersionMode=changeServiceDeployProvIfDispersionMode, intervalPhysConv15minCV=intervalPhysConv15minCV, connectionOtnDataTunnelId=connectionOtnDataTunnelId, deployProvCopyPathOtnCapRowStatus=deployProvCopyPathOtnCapRowStatus, deployProvControlPlaneEthNaasConfigFlag=deployProvControlPlaneEthNaasConfigFlag, deployProvIfDefaultsTxOffDelay=deployProvIfDefaultsTxOffDelay, thresholdOduTcmASESHighThres15min=thresholdOduTcmASESHighThres15min, deployProvIfDefaultsTraceExpectedOduTcmA=deployProvIfDefaultsTraceExpectedOduTcmA, currentL2EthRx15minBytesFrames256Rcv=currentL2EthRx15minBytesFrames256Rcv, FspR7UntaggedFrames=FspR7UntaggedFrames, deployProvTunnelWdmDefaultsTerminationLevel=deployProvTunnelWdmDefaultsTerminationLevel, thresholdPhysPerfDispersionCompensationHighThres=thresholdPhysPerfDispersionCompensationHighThres, opticalIfDiagTable=opticalIfDiagTable, controlPlaneEthConfigCmConfigFlag=controlPlaneEthConfigCmConfigFlag, alarmFuseAlarm1=alarmFuseAlarm1, FspR7CpEncapsulationCaps=FspR7CpEncapsulationCaps, routingIpRouteType=routingIpRouteType, FspR7RemoteAlarmPath=FspR7RemoteAlarmPath, alarmLossOfCharSync=alarmLossOfCharSync, intervalOtu15minTable=intervalOtu15minTable, forceDeployProvApsRowStatus=forceDeployProvApsRowStatus, fspUserManagementTl1TimeoutValue=fspUserManagementTl1TimeoutValue, deployProvVchChannelCapBundle=deployProvVchChannelCapBundle, opticalIfConfigCapLossAttenuation=opticalIfConfigCapLossAttenuation, crsConnDeployProvCapAlias=crsConnDeployProvCapAlias, controlPlaneWdmConfigTedbMaxSize=controlPlaneWdmConfigTedbMaxSize, logicalIfConfigMetric=logicalIfConfigMetric, thresholdOduTcmBSESHighThres1day=thresholdOduTcmBSESHighThres1day, currentL2EthRx15minBytesRcv=currentL2EthRx15minBytesRcv, changeServiceDeployProvIfDefaultsBitrate=changeServiceDeployProvIfDefaultsBitrate, intervalPhysPerfOpticalOutputPwr15minTimeStamp=intervalPhysPerfOpticalOutputPwr15minTimeStamp, changeServiceDeployProvIfDefaultsBand=changeServiceDeployProvIfDefaultsBand, deployProvPppIpDefaultsFlowControl=deployProvPppIpDefaultsFlowControl, deployProvApsProtectionMech=deployProvApsProtectionMech, deployProvConnCommand=deployProvConnCommand, deployProvIfIpType=deployProvIfIpType, deployProvControlPlaneEthCapCmConfigFlag=deployProvControlPlaneEthCapCmConfigFlag, deployProvPortBindingCapRemoteScPc=deployProvPortBindingCapRemoteScPc, intervalPhysConvHighSpeed15minSE=intervalPhysConvHighSpeed15minSE, deployProvPathElementEthDefaultsEntry=deployProvPathElementEthDefaultsEntry, currentL2EthTx15minBytesFrames65Trmt=currentL2EthTx15minBytesFrames65Trmt, deployProvControlPlaneOtnCapCmFisFrsTimeout=deployProvControlPlaneOtnCapCmFisFrsTimeout, deployProvLanRowStatus=deployProvLanRowStatus, FspR7CpOspfTeRouting=FspR7CpOspfTeRouting, currentEthRx15minBytes=currentEthRx15minBytes, deployProvTunnelWdmCapRowStatus=deployProvTunnelWdmCapRowStatus, changeServiceDeployProvIfCapTimModeOtu=changeServiceDeployProvIfCapTimModeOtu, deployProvIfCapTraceTransmitOpspOduTcmA=deployProvIfCapTraceTransmitOpspOduTcmA, currentOtuFec15minES=currentOtuFec15minES, currentSonetLine15minCV=currentSonetLine15minCV, transientIntrusionRx=transientIntrusionRx, transientLocalCopyMemFailGeneration=transientLocalCopyMemFailGeneration, currentGfpfr15minTable=currentGfpfr15minTable, deployProvVchChannelSigDegPeriodOdu=deployProvVchChannelSigDegPeriodOdu, FspR7GainCaps=FspR7GainCaps, deployProvControlPlaneWdmDefaultsCmAlarmActivationTime=deployProvControlPlaneWdmDefaultsCmAlarmActivationTime, deployProvControlPlaneOtnTedbRouterId=deployProvControlPlaneOtnTedbRouterId, neEqlzAdminCap=neEqlzAdminCap, deployProvControlPlaneWdmPcTraceDetail=deployProvControlPlaneWdmPcTraceDetail, intervalSonetHoPath15minCV=intervalSonetHoPath15minCV, apsProtGroupStatusDirection=apsProtGroupStatusDirection, deployProvIfErrorForwarding=deployProvIfErrorForwarding, ethernetConfigTable=ethernetConfigTable, equipmentConfigAndStatus=equipmentConfigAndStatus, deployProvControlPlaneEthCapCdbMaxSize=deployProvControlPlaneEthCapCdbMaxSize, logicalIfDataIpMaskMonitor=logicalIfDataIpMaskMonitor, intervalPhysPerfLaserBiasCurrentNormalized1weekMean=intervalPhysPerfLaserBiasCurrentNormalized1weekMean, deployProvIfDefaultsChannelProvisioning=deployProvIfDefaultsChannelProvisioning, transientAutomaticBackupReport=transientAutomaticBackupReport, FspR7LagState=FspR7LagState, FspR7CpRecoveryType=FspR7CpRecoveryType, neSshDeamon=neSshDeamon, intervalOduTcmB1dayValidFlag=intervalOduTcmB1dayValidFlag, vc4c8allocatedContainer=vc4c8allocatedContainer, deployProvLogicalCpIfCapFendTeLinkIdNum=deployProvLogicalCpIfCapFendTeLinkIdNum, chassisCreation=chassisCreation, FspR7CpRestorationState=FspR7CpRestorationState, currentL2EthRx1dayOversizedFramesRcv=currentL2EthRx1dayOversizedFramesRcv, deployProvLogicalCpIfCapAreaId=deployProvLogicalCpIfCapAreaId, wdmChannelModuleDataTable=wdmChannelModuleDataTable, deployProvExChannelCapTransmitChannel=deployProvExChannelCapTransmitChannel, deployProvLogicalIfDefaultsPushedNendIpHeader=deployProvLogicalIfDefaultsPushedNendIpHeader, deployProvPathElementEthCapTie=deployProvPathElementEthCapTie, deployProvModuleDefaultsSingleFiberLocation=deployProvModuleDefaultsSingleFiberLocation, intervalPhysPerfOlmRxLineAtt1dayTable=intervalPhysPerfOlmRxLineAtt1dayTable, deployProvLanTable=deployProvLanTable, ntpServerOperState=ntpServerOperState, currentGfpfrSublayer15minGoodFrames=currentGfpfrSublayer15minGoodFrames, deployProvTunnelOtnDefaultsProtectionType=deployProvTunnelOtnDefaultsProtectionType, deployProvIfVethAidCapsEntry=deployProvIfVethAidCapsEntry, FspR7UntaggedFramesCaps=FspR7UntaggedFramesCaps, crsConnDeployProvDefaultsTo=crsConnDeployProvDefaultsTo, intervalL2EthRx15minEntry=intervalL2EthRx15minEntry, deployProvControlPlaneOtnDefaultsTedbTraceDetail=deployProvControlPlaneOtnDefaultsTedbTraceDetail, intervalPhysPerfSignalToNoiseRatio1weekLow=intervalPhysPerfSignalToNoiseRatio1weekLow, f7ContainerModuleSlot=f7ContainerModuleSlot, deployProvIfCapTraceTransmitDapiOduTcmA=deployProvIfCapTraceTransmitDapiOduTcmA, opticalIfDataTransmitWavelength=opticalIfDataTransmitWavelength, pathElementEthDataPathType=pathElementEthDataPathType, moduleDiagnosticsDescription=moduleDiagnosticsDescription, deployProvPppIpDefaultsEntry=deployProvPppIpDefaultsEntry, intervalLatency15minEntry=intervalLatency15minEntry, FspR7AseTabOpr=FspR7AseTabOpr, deployProvExChannelCapMaxBitErrorRate=deployProvExChannelCapMaxBitErrorRate, intervalOdu1dayValidFlag=intervalOdu1dayValidFlag, deployProvTunnelOtnCapPin=deployProvTunnelOtnCapPin, deployProvExChannelDefaultsMaximumOpticalPowerRcv=deployProvExChannelDefaultsMaximumOpticalPowerRcv, deployProvPlugCapTable=deployProvPlugCapTable, deployProvPathOtnRowStatus=deployProvPathOtnRowStatus, deployProvShelfDefaultsAdmin=deployProvShelfDefaultsAdmin, intervalPhysPerfOlmTxLineAtt1dayNumber=intervalPhysPerfOlmTxLineAtt1dayNumber, opticalIfConfigPvid=opticalIfConfigPvid, FspR7YesNo=FspR7YesNo, opticalIfDataCbsRcv=opticalIfDataCbsRcv, intervalPhysPerfSignalToNoiseRatio15minLow=intervalPhysPerfSignalToNoiseRatio15minLow, intervalPhysPerfOpticalOutputPwr1dayValidFlag=intervalPhysPerfOpticalOutputPwr1dayValidFlag, deployProvConnCommandCounter=deployProvConnCommandCounter, changeServiceDeployProvIfDefaultsAdmin=changeServiceDeployProvIfDefaultsAdmin, f7eqpRaman=f7eqpRaman, currentSonetLine15minUAS=currentSonetLine15minUAS, deployProvVchChannelEqlzAdmin=deployProvVchChannelEqlzAdmin, ethernetConfigIpAddrMonitor=ethernetConfigIpAddrMonitor, deployProvTifInputAdmin=deployProvTifInputAdmin, intervalPhysPerfOlmTxLineAtt1weekEntry=intervalPhysPerfOlmTxLineAtt1weekEntry, deployProvApsWorkingAidCapsIndex=deployProvApsWorkingAidCapsIndex, authTrapSrcIp=authTrapSrcIp, intervalPhysPerfBackreflectionPwrRcv15minTimeStamp=intervalPhysPerfBackreflectionPwrRcv15minTimeStamp, currentPhysConvCombined1dayES=currentPhysConvCombined1dayES, intervalPhysPerfCarrierFreqOffset1dayEntry=intervalPhysPerfCarrierFreqOffset1dayEntry, deployProvControlPlaneWdmDefaultsCtmTraceDetail=deployProvControlPlaneWdmDefaultsCtmTraceDetail, deployProvTunnelOtnDefaultsFromAid=deployProvTunnelOtnDefaultsFromAid, deployProvControlPlaneWdmDefaultsRsvpMaxExpRestartTime=deployProvControlPlaneWdmDefaultsRsvpMaxExpRestartTime, crsConnDeployProvCapConn=crsConnDeployProvCapConn, changeServiceDeployProvIfDefaultsEntry=changeServiceDeployProvIfDefaultsEntry, alarmLocalOscLevelAbnormal=alarmLocalOscLevelAbnormal, intervalPhysPerfOpticalOutputPwr1dayHigh=intervalPhysPerfOpticalOutputPwr1dayHigh, farEndIfDataConnector=farEndIfDataConnector, FspR7NeType=FspR7NeType, intervalPhysPerfLaserBiasCurrentNormalized15minHigh=intervalPhysPerfLaserBiasCurrentNormalized15minHigh, deployProvIfDispersionMode=deployProvIfDispersionMode, intervalPhysPerfCarrierFreqOffset15minNumber=intervalPhysPerfCarrierFreqOffset15minNumber, deployProvControlPlaneOtnRowStatus=deployProvControlPlaneOtnRowStatus, intervalEthRx3HS15minBytesFrames64Rcv=intervalEthRx3HS15minBytesFrames64Rcv, currentOtu15minUAS=currentOtu15minUAS, intervalOdu15minBbe=intervalOdu15minBbe, intervalOdu15minES=intervalOdu15minES, deployProvIfCapTxOffDelay=deployProvIfCapTxOffDelay, deployProvIfDefaultsSigDegThreshold=deployProvIfDefaultsSigDegThreshold, currentL2EthTx15minBytesFrames256Trmt=currentL2EthTx15minBytesFrames256Trmt, intervalPhysPerfDiffGrDelay15minValidFlag=intervalPhysPerfDiffGrDelay15minValidFlag, deployProvControlPlaneEthCapCdbDetail=deployProvControlPlaneEthCapCdbDetail, deployProvConnNonStdCapToEndpointA=deployProvConnNonStdCapToEndpointA, intervalSubAggregate15minEntry=intervalSubAggregate15minEntry, deployProvTunnelWdmDefaultsProvisionedPaths=deployProvTunnelWdmDefaultsProvisionedPaths, intervalPhysPerfOlmRxLineAtt1dayNumber=intervalPhysPerfOlmRxLineAtt1dayNumber, connectionWdmDataTunnelNo=connectionWdmDataTunnelNo, deployProvControlPlaneOtnDefaultsCtmSetupTimeout=deployProvControlPlaneOtnDefaultsCtmSetupTimeout, deployProvLogicalCpIfAreaId=deployProvLogicalCpIfAreaId, deployProvLogicalIfCapOspf=deployProvLogicalIfCapOspf, opticalIfConfigLagPrio=opticalIfConfigLagPrio, deployProvIfDefaultsLacpMode=deployProvIfDefaultsLacpMode, neAutoProvLifCp=neAutoProvLifCp, eRoadmConfigCapTable=eRoadmConfigCapTable, deployProvIfDefaultsTraceFormSonetSection=deployProvIfDefaultsTraceFormSonetSection, deployProvTunnelOtnDefaultsTunnelType=deployProvTunnelOtnDefaultsTunnelType, intervalPhysPerfLaserBiasCurrentNormalized1dayValidFlag=intervalPhysPerfLaserBiasCurrentNormalized1dayValidFlag, controlPlaneOtnDataRmAlias=controlPlaneOtnDataRmAlias, teUnnumLinkOtnDataInfo=teUnnumLinkOtnDataInfo, currentSonetLoPath1dayTable=currentSonetLoPath1dayTable, intervalL2EthRx15minBytesFrames1519Rcv=intervalL2EthRx15minBytesFrames1519Rcv, opticalAmplifierInterfaceDiagnosticsAttenuation=opticalAmplifierInterfaceDiagnosticsAttenuation, deployProvPathElementOtnLogicalInterfaceId=deployProvPathElementOtnLogicalInterfaceId, opticalIfDiagLatency=opticalIfDiagLatency, neighborDiscoveryDataEntry=neighborDiscoveryDataEntry, alarmLossOfFrameLossOfMultiFrameOdu=alarmLossOfFrameLossOfMultiFrameOdu, intervalEthRxHighSpeed1dayEntry=intervalEthRxHighSpeed1dayEntry, thresholdPhysPerfLatencyLowThres=thresholdPhysPerfLatencyLowThres, alarmFiberConnectionMissing=alarmFiberConnectionMissing, deployProvControlPlaneWdmDefaultsCtmConfigFlag=deployProvControlPlaneWdmDefaultsCtmConfigFlag, pathElementWdmDataUpstreamModuleAid=pathElementWdmDataUpstreamModuleAid, forceDeployProvApsCapEntry=forceDeployProvApsCapEntry, deployProvIfCapAutonegotiation=deployProvIfCapAutonegotiation, changeServiceDeployProvIfFecType=changeServiceDeployProvIfFecType, FspR7OtdrPeriod=FspR7OtdrPeriod, intervalPhysPerfOlmTxLineAtt1weekHigh=intervalPhysPerfOlmTxLineAtt1weekHigh, alarmSignalDegradationonLinkVector=alarmSignalDegradationonLinkVector, f7eqpWcc2g7c=f7eqpWcc2g7c, teUnnumLinkEthDataFendTeLinkId=teUnnumLinkEthDataFendTeLinkId, FspR7LaserOffDelayTimeCaps=FspR7LaserOffDelayTimeCaps, intervalDispersionCompensation15minMean=intervalDispersionCompensation15minMean)
mibBuilder.exportSymbols("FspR7-MIB", virtualOpticalChannelConfigTable=virtualOpticalChannelConfigTable, pathElementOtnDataLifIp=pathElementOtnDataLifIp, thresholdSonetHoPathCVHighThres1day=thresholdSonetHoPathCVHighThres1day, deployProvIfDefaultsVoaMode=deployProvIfDefaultsVoaMode, deployProvVchChannelCapSigDegPeriodOdu=deployProvVchChannelCapSigDegPeriodOdu, changeServiceDeployProvIfDefaultsTimModeSonetSection=changeServiceDeployProvIfDefaultsTimModeSonetSection, intervalEthRx3HS15minTimeStamp=intervalEthRx3HS15minTimeStamp, opticalIfDiagAttenuationOfVoa=opticalIfDiagAttenuationOfVoa, deployProvVchChannelDefaultsAdmin=deployProvVchChannelDefaultsAdmin, deployProvExChannelCapMinimumOpticalPowerRcv=deployProvExChannelCapMinimumOpticalPowerRcv, intervalSonetLoPath1dayES=intervalSonetLoPath1dayES, deployProvTunnelOtnDefaultsConnectionDirection=deployProvTunnelOtnDefaultsConnectionDirection, deployProvIfCapSigDegPeriodOduTcmA=deployProvIfCapSigDegPeriodOduTcmA, FspR7PathNode=FspR7PathNode, changeServiceDeployProvIfOtnStuffing=changeServiceDeployProvIfOtnStuffing, changeServiceDeployProvIfOpuPayloadType=changeServiceDeployProvIfOpuPayloadType, remoteAlarmCpDataType=remoteAlarmCpDataType, vtpEntityDataFunction=vtpEntityDataFunction, intervalPhysPerfDiffGrDelay1weekNumber=intervalPhysPerfDiffGrDelay1weekNumber, tunnelOtnDataTunnelScope=tunnelOtnDataTunnelScope, intervalL2EthRx15minValidFlag=intervalL2EthRx15minValidFlag, farEndPlugDataEntry=farEndPlugDataEntry, tunnelEthConfigPin=tunnelEthConfigPin, changeServiceDeployProvIfDefaultsSigDegPeriodSdhSection=changeServiceDeployProvIfDefaultsSigDegPeriodSdhSection, currentOtuFec1dayEntry=currentOtuFec1dayEntry, FspR7OpuPayloadTypeCaps=FspR7OpuPayloadTypeCaps, deployProvApsRevertMode=deployProvApsRevertMode, deployProvIfTraceTransmitOpspOduTcmC=deployProvIfTraceTransmitOpspOduTcmC, tunnelWdmDataRestPathsNoAvail=tunnelWdmDataRestPathsNoAvail, changeServiceDeployProvIfCapVoaMode=changeServiceDeployProvIfCapVoaMode, connectionWdmDataStuff=connectionWdmDataStuff, FspR7PmSnapshotParameterTypes=FspR7PmSnapshotParameterTypes, deployProvPppIpRowStatus=deployProvPppIpRowStatus, currentL2EthRx15minBytesFrames64Rcv=currentL2EthRx15minBytesFrames64Rcv, pathWdmDataConnectionTunnelAid=pathWdmDataConnectionTunnelAid, deployProvControlPlaneOtnCapTedbTraceDetail=deployProvControlPlaneOtnCapTedbTraceDetail, currentGfpfrSublayer1dayTHecDiscardedFrames=currentGfpfrSublayer1dayTHecDiscardedFrames, dcnTopologyStatusTopologyType=dcnTopologyStatusTopologyType, opticalLinkConfigTxLineAttenuation=opticalLinkConfigTxLineAttenuation, intervalOduTcmC15minNumber=intervalOduTcmC15minNumber, opticalIfDataChannelSpacing=opticalIfDataChannelSpacing, intervalEthRx3HS15minPauseFrames=intervalEthRx3HS15minPauseFrames, intervalOdu15minUAS=intervalOdu15minUAS, teNumLinkOtnDataSynchronization=teNumLinkOtnDataSynchronization, deployProvModuleDefaultsTable=deployProvModuleDefaultsTable, deployProvTifInputCapTifAlarmType=deployProvTifInputCapTifAlarmType, deployProvTifOutputCapEntry=deployProvTifOutputCapEntry, intervalFarEndPhysPerfOpticalOutputPwr1weekValidFlag=intervalFarEndPhysPerfOpticalOutputPwr1weekValidFlag, alarmInputVoltageFailure=alarmInputVoltageFailure, FspR7SnmpSecuLevel=FspR7SnmpSecuLevel, deployProvTifOutputCapType=deployProvTifOutputCapType, alarmTraceIdentifierMismatchOdu=alarmTraceIdentifierMismatchOdu, intervalPhysPerfCurrent15minMean=intervalPhysPerfCurrent15minMean, f7eqpDcg=f7eqpDcg, FspR7FtpServer=FspR7FtpServer, deployProvIfCapFiberBrand=deployProvIfCapFiberBrand, deployProvControlPlaneEthCtmShutdownTimeout=deployProvControlPlaneEthCtmShutdownTimeout, deployProvIfDefaultsLagLoadBallanceSource=deployProvIfDefaultsLagLoadBallanceSource, changeServiceDeployProvIfDefaultsIpAddr=changeServiceDeployProvIfDefaultsIpAddr, intervalDefectSeconds15minNumber=intervalDefectSeconds15minNumber, alarmGfpLossOfClientSig=alarmGfpLossOfClientSig, intervalPhysPerfDiffGrDelay1dayLow=intervalPhysPerfDiffGrDelay1dayLow, thresholdOtuBbeHighThres15min=thresholdOtuBbeHighThres15min, thresholdSonetHoPathCVHighThres15min=thresholdSonetHoPathCVHighThres15min, deployProvCopyPathEthPathId=deployProvCopyPathEthPathId, deployProvPathElementWdmDefaultsDownstreamModuleAid=deployProvPathElementWdmDefaultsDownstreamModuleAid, deployProvIfCapOscOpticalSetpoint=deployProvIfCapOscOpticalSetpoint, alarmAseTableBuild=alarmAseTableBuild, deployProvVchChannelAdmin=deployProvVchChannelAdmin, connectionEthDataFromNodeIp=connectionEthDataFromNodeIp, eRoadmConfigCapInitiateEqualization=eRoadmConfigCapInitiateEqualization, intervalPhysPerfDiffGrDelay1dayHigh=intervalPhysPerfDiffGrDelay1dayHigh, crsConnDeployProvDefaultsTunnelAid=crsConnDeployProvDefaultsTunnelAid, deployProvExChannelDefaultsAlias=deployProvExChannelDefaultsAlias, currentL2EthRx15minPauseFramesRcv=currentL2EthRx15minPauseFramesRcv, deployProvPathWdmDefaultsRowStatus=deployProvPathWdmDefaultsRowStatus, intervalOtuFec1dayUBE=intervalOtuFec1dayUBE, FspR7TypeCrs=FspR7TypeCrs, alarmReceiverDisabled=alarmReceiverDisabled, intervalL2EthRx1dayInterPackJunkBytesFramesRcv=intervalL2EthRx1dayInterPackJunkBytesFramesRcv, neDatabaseNcuType=neDatabaseNcuType, deployProvTunnelEthDefaultsCbsRcv=deployProvTunnelEthDefaultsCbsRcv, teUnnumLinkEthDataTable=teUnnumLinkEthDataTable, intervalFarEndPhysPerfOpticalInputPwr15minValidFlag=intervalFarEndPhysPerfOpticalInputPwr15minValidFlag, alarmAutomaticPowerReductionForEyeSafety=alarmAutomaticPowerReductionForEyeSafety, deployProvExChannelCapType=deployProvExChannelCapType, deployProvIfDefaultsTributarySlotMethod=deployProvIfDefaultsTributarySlotMethod, deployProvIfDefaultsSigDegThresOduTcmC=deployProvIfDefaultsSigDegThresOduTcmC, forceDeployProvApsDefaultsApsType=forceDeployProvApsDefaultsApsType, deployProvModuleDefaultsEntry=deployProvModuleDefaultsEntry, intervalPhysPerfPumpPwr15minLow=intervalPhysPerfPumpPwr15minLow, deployProvLogicalCpIfCapAdmin=deployProvLogicalCpIfCapAdmin, intervalPhysPerfBackreflectionPwrRcv15minEntry=intervalPhysPerfBackreflectionPwrRcv15minEntry, deployProvControlPlaneOtnCapCtmRetryWaitMultiplier=deployProvControlPlaneOtnCapCtmRetryWaitMultiplier, deployProvIfDefaultsSigDegPeriodOdu=deployProvIfDefaultsSigDegPeriodOdu, logicalIfConfigDeadInterval=logicalIfConfigDeadInterval, intervalPhysPerfOscOpticalOutputPwr15minEntry=intervalPhysPerfOscOpticalOutputPwr15minEntry, fspUserManagementUdpSessionStatus=fspUserManagementUdpSessionStatus, apsConfigEntry=apsConfigEntry, deployProvControlPlaneEthCapTedbRouterId=deployProvControlPlaneEthCapTedbRouterId, currentSonetLoPath15minElapsedTime=currentSonetLoPath15minElapsedTime, FspR7Conn=FspR7Conn, currentPhysConv1dayCV=currentPhysConv1dayCV, deployProvPathElementWdmCapLifIp=deployProvPathElementWdmCapLifIp, FspR7IpTypeCaps=FspR7IpTypeCaps, ntpTimeZoneCapsEntry=ntpTimeZoneCapsEntry, controlPlaneEthDataTedbAlias=controlPlaneEthDataTedbAlias, deployProvControlPlaneEthCtmConfigFlag=deployProvControlPlaneEthCtmConfigFlag, intervalEthRx3HS1dayBytesFrames1024Rcv=intervalEthRx3HS1dayBytesFrames1024Rcv, changeServiceDeployProvIfOpticalSetPoint=changeServiceDeployProvIfOpticalSetPoint, deployProvControlPlaneEthCtmRetryWait=deployProvControlPlaneEthCtmRetryWait, controlPlaneWdmConfigCdResyncTimeout=controlPlaneWdmConfigCdResyncTimeout, thresholdIntrusionTable=thresholdIntrusionTable, intervalPhysPerfCarrierFreqOffset15minEntry=intervalPhysPerfCarrierFreqOffset15minEntry, nodeChannelTraceChannelRx=nodeChannelTraceChannelRx, f7eqp8tca10gd=f7eqp8tca10gd, currentEthRxHighSpeed1dayCrcFrames=currentEthRxHighSpeed1dayCrcFrames, alarmAutoShutdownSendingIdle=alarmAutoShutdownSendingIdle, FspR7OspfAreaType=FspR7OspfAreaType, alarmBrPwrRxTooHigh=alarmBrPwrRxTooHigh, currentGfpSublayer1dayTypeHecCorrectedFrames=currentGfpSublayer1dayTypeHecCorrectedFrames, intervalPhysPerfChromaticDispersion15minValidFlag=intervalPhysPerfChromaticDispersion15minValidFlag, FspR7NumberOfChannelsCaps=FspR7NumberOfChannelsCaps, intervalPhysPerfSignalToNoiseRatio15minNumber=intervalPhysPerfSignalToNoiseRatio15minNumber, FspR7EnableDisable=FspR7EnableDisable, connectionWdmDataLayer=connectionWdmDataLayer, deployProvVchChannelDefaultsEntry=deployProvVchChannelDefaultsEntry, opticalAmplifierInterfaceDiagnosticsTable=opticalAmplifierInterfaceDiagnosticsTable, currentEthRx3HS1dayOversizedFramesRcv=currentEthRx3HS1dayOversizedFramesRcv, intervalPhysPerfCurrent1dayMean=intervalPhysPerfCurrent1dayMean, intraNeConnectionsTable=intraNeConnectionsTable, deployProvControlPlaneWdmCapCtmMaximumRetryNumber=deployProvControlPlaneWdmCapCtmMaximumRetryNumber, intervalGfpSublayer15minTable=intervalGfpSublayer15minTable, alarmThres15MinExceededOduTcmBUAS=alarmThres15MinExceededOduTcmBUAS, opticalIfConfigAprHighThreshold=opticalIfConfigAprHighThreshold, f7eqp8TceGl2g5c=f7eqp8TceGl2g5c, intervalSonetSect1dayTimeStamp=intervalSonetSect1dayTimeStamp, intervalOtuFec1dayES=intervalOtuFec1dayES, controlPlaneOtnConfigCtmSetupTimeout=controlPlaneOtnConfigCtmSetupTimeout, changeServiceDeployProvIfTraceTransmitOpspOdu=changeServiceDeployProvIfTraceTransmitOpspOdu, alarmEncryptionModuleCryPasswdMissing=alarmEncryptionModuleCryPasswdMissing, changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmC=changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmC, interfaceDataOduTribPortNo=interfaceDataOduTribPortNo, currentOtuFec1dayExBERCE=currentOtuFec1dayExBERCE, knownHostCreation=knownHostCreation, controlPlaneEthConfigCdResyncTimeout=controlPlaneEthConfigCdResyncTimeout, tunnelWdmConfigReversionType=tunnelWdmConfigReversionType, deployProvIfCapVethAid=deployProvIfCapVethAid, intervalSonetHoPath1dayUAS=intervalSonetHoPath1dayUAS, deployProvPathElementOtnDefaultsRowStatus=deployProvPathElementOtnDefaultsRowStatus, deployProvVchChannelRowStatus=deployProvVchChannelRowStatus, intervalOduTcmB1dayTable=intervalOduTcmB1dayTable, changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmA=changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmA, thresholdEthRxEntry=thresholdEthRxEntry, intervalPhysPerfOlmRxLineAtt1dayTimeStamp=intervalPhysPerfOlmRxLineAtt1dayTimeStamp, inventoryCpWdmUpDataNumber=inventoryCpWdmUpDataNumber, deployProvControlPlaneEthCapRowStatus=deployProvControlPlaneEthCapRowStatus, transientThres1DayExceededSonetLineSES=transientThres1DayExceededSonetLineSES, intervalEthTx1dayBytes=intervalEthTx1dayBytes, intervalEthRxHighSpeed1dayPauseFrames=intervalEthRxHighSpeed1dayPauseFrames, intervalPhysPerfCurrent1weekNumber=intervalPhysPerfCurrent1weekNumber, intervalPhysPerfLaserBiasCurrentNormalized1dayHigh=intervalPhysPerfLaserBiasCurrentNormalized1dayHigh, intervalPhysPerfPumpPwr1weekLow=intervalPhysPerfPumpPwr1weekLow, intervalLinkAttenuation1weekMean=intervalLinkAttenuation1weekMean, currentOduTcmA15minBbe=currentOduTcmA15minBbe, intervalOduTcmA1dayUAS=intervalOduTcmA1dayUAS, thresholdPhysPerfCapLatencyHighThres=thresholdPhysPerfCapLatencyHighThres, FspR7InterfaceTypeCaps=FspR7InterfaceTypeCaps, alarmThermoElectricCoolerCurrentTooHigh=alarmThermoElectricCoolerCurrentTooHigh, crsDcnDataTable=crsDcnDataTable, transientWeek1RecordsAvailable=transientWeek1RecordsAvailable, shelfConfigEntry=shelfConfigEntry, currentDiagnosticsUpperThres=currentDiagnosticsUpperThres, crsConnDataIngressTid=crsConnDataIngressTid, vs1allocatedFacilityType=vs1allocatedFacilityType, intervalSonetSect15minTimeStamp=intervalSonetSect15minTimeStamp, alarmLossofSequenceHigherOrderPath=alarmLossofSequenceHigherOrderPath, transientReversionStarted=transientReversionStarted, opticalIfDiagOscGain=opticalIfDiagOscGain, deployProvTunnelOtnTunnelNo=deployProvTunnelOtnTunnelNo, deployProvTifInputTifAlarmType=deployProvTifInputTifAlarmType, deployProvPathElementOtnDefaultsDownTributarySlot=deployProvPathElementOtnDefaultsDownTributarySlot, deployProvTunnelOtnPin=deployProvTunnelOtnPin, intervalSonetLine15minNumber=intervalSonetLine15minNumber, intervalEthRx3HS1dayBytesFrames64Rcv=intervalEthRx3HS1dayBytesFrames64Rcv, currentEthRxHighSpeed15minTable=currentEthRxHighSpeed15minTable, f7OC48=f7OC48, deployProvControlPlaneEthRmConfigFlag=deployProvControlPlaneEthRmConfigFlag, alarmSectionSignalFailure=alarmSectionSignalFailure, tunnelOtnDataEntry=tunnelOtnDataEntry, intervalPhysPerfOlmTxLineAtt1dayLow=intervalPhysPerfOlmTxLineAtt1dayLow, exChannelConfigMinimumOSNRRcv=exChannelConfigMinimumOSNRRcv, intervalPhysPerfOpticalInputPwr1dayEntry=intervalPhysPerfOpticalInputPwr1dayEntry, FspR7NtpTestStatus=FspR7NtpTestStatus, deployProvControlPlaneWdmDefaultsCmFisFrsTimeout=deployProvControlPlaneWdmDefaultsCmFisFrsTimeout, intervalPhysPerfOlmRxLineAtt15minValidFlag=intervalPhysPerfOlmRxLineAtt15minValidFlag, currentOtuFec15minTable=currentOtuFec15minTable, neNtpMode=neNtpMode, opticalIfConfigOffset=opticalIfConfigOffset, thresholdOduESHighThres1day=thresholdOduESHighThres1day, alarmOpticalOutputPowerTransmittedTooLow=alarmOpticalOutputPowerTransmittedTooLow, deployProvTunnelOtnCapTunnelNo=deployProvTunnelOtnCapTunnelNo, changeServiceDeployProvIfCapTraceTransmitDapiOduTcmC=changeServiceDeployProvIfCapTraceTransmitDapiOduTcmC, intervalOduTcmA15minEntry=intervalOduTcmA15minEntry, deployProvIfCapSigDegPeriodIntegration=deployProvIfCapSigDegPeriodIntegration, dcnTopologyConfigCapActivateDetect=dcnTopologyConfigCapActivateDetect, FspR7CommandModifier=FspR7CommandModifier, deployProvTifInputDefaultsTable=deployProvTifInputDefaultsTable, FspR7ParityBit=FspR7ParityBit, thresholdPhysPerfChromaticDispersionHigh=thresholdPhysPerfChromaticDispersionHigh, intervalEthRx1dayNumber=intervalEthRx1dayNumber, deployProvTunnelEthCapPin=deployProvTunnelEthCapPin, FspR7TestMode=FspR7TestMode, alarmChromaticDispersionTooLow=alarmChromaticDispersionTooLow, intervalEthRx3HS15minNumber=intervalEthRx3HS15minNumber, teNumLinkOtnDataTable=teNumLinkOtnDataTable, intervalSonetLoPath1dayUAS=intervalSonetLoPath1dayUAS, changeServiceDeployProvIfSigDegThresSonetLine=changeServiceDeployProvIfSigDegThresSonetLine, thresholdFarEndPhysPerfEntry=thresholdFarEndPhysPerfEntry, deployProvLogicalCpIfTransport=deployProvLogicalCpIfTransport, deployProvLogicalIfDefaultsDcnAid=deployProvLogicalIfDefaultsDcnAid, intervalOtuFec1dayValidFlag=intervalOtuFec1dayValidFlag, deployProvDcnCapExternalVid=deployProvDcnCapExternalVid, thresholdPhysConvCombinedEntry=thresholdPhysConvCombinedEntry, interfaceConfigCapLoopConfig=interfaceConfigCapLoopConfig, deployProvIfDefaultsPvid=deployProvIfDefaultsPvid, currentOdu15minUAS=currentOdu15minUAS, deployProvIfCapAttenuationGradient=deployProvIfCapAttenuationGradient, deployProvTifOutputTable=deployProvTifOutputTable, deployProvModuleDefaultsChannel=deployProvModuleDefaultsChannel, currentOtu1dayElapsedTime=currentOtu1dayElapsedTime, transientInstallFwpCompleted=transientInstallFwpCompleted, controlPlaneWdmConfigEntry=controlPlaneWdmConfigEntry, alarmNtpNotInSync=alarmNtpNotInSync, deployProvLogicalIfIpType=deployProvLogicalIfIpType, tunnelWdmDataTunnelType=tunnelWdmDataTunnelType, intervalGfpt1dayDiscardedSuperblocks=intervalGfpt1dayDiscardedSuperblocks, intervalSonetSect15minSEFS=intervalSonetSect15minSEFS, FspR7CapInventory=FspR7CapInventory, teUnnumLinkEthDataNodeIp=teUnnumLinkEthDataNodeIp, moduleDataFanPorts=moduleDataFanPorts, changeServiceDeployProvIfDefaultsTraceFormSonetSection=changeServiceDeployProvIfDefaultsTraceFormSonetSection, FspR7ForcedStatus=FspR7ForcedStatus, deployProvIfCapSigDegThreshold=deployProvIfCapSigDegThreshold, controlPlaneOtnConfigCtmMaximumRetryWait=controlPlaneOtnConfigCtmMaximumRetryWait, deployProvLogicalCpIfCapDcnAid=deployProvLogicalCpIfCapDcnAid, deployProvShelfDefaultsPsuOutputPower=deployProvShelfDefaultsPsuOutputPower, deployProvControlPlaneEthTable=deployProvControlPlaneEthTable, deployProvTunnelWdmCapRestPathsNoProv=deployProvTunnelWdmCapRestPathsNoProv, deployProvTunnelOtnCapToNodeIp=deployProvTunnelOtnCapToNodeIp, deployProvIfVoaMode=deployProvIfVoaMode, changeServiceDeployProvIfDefaultsTraceExpectedOduTcmB=changeServiceDeployProvIfDefaultsTraceExpectedOduTcmB, alarmThresOptPowerCtrlFailureLow=alarmThresOptPowerCtrlFailureLow, teNumLinkWdmDataPhysicalLink=teNumLinkWdmDataPhysicalLink)
mibBuilder.exportSymbols("FspR7-MIB", interfaceConfigDataLayerPmReset=interfaceConfigDataLayerPmReset, alarmMultiplexStructureIdentifierMismatchOPU=alarmMultiplexStructureIdentifierMismatchOPU, intervalPhysConvCombined1dayEntry=intervalPhysConvCombined1dayEntry, deployProvPortBindingDefaultsRemoteTnaMask=deployProvPortBindingDefaultsRemoteTnaMask, alarmAutoShutdownOpuClientSignalFail=alarmAutoShutdownOpuClientSignalFail, intervalL2EthTx1dayBytesFrames256Trmt=intervalL2EthTx1dayBytesFrames256Trmt, intervalPhysPerfCarrierFreqOffset1dayTimeStamp=intervalPhysPerfCarrierFreqOffset1dayTimeStamp, intervalPhysPerfCurrent15minTimeStamp=intervalPhysPerfCurrent15minTimeStamp, deployProvPlugForceDestroy=deployProvPlugForceDestroy, FspR7TimeChangeReason=FspR7TimeChangeReason, deployProvApsWorkingAidCapsTable=deployProvApsWorkingAidCapsTable, deployProvTifInputDefaultsEntry=deployProvTifInputDefaultsEntry, deployProvConnNonStdCapFromEndpointA=deployProvConnNonStdCapFromEndpointA, deployProvTunnelEthDefaultsAlias=deployProvTunnelEthDefaultsAlias, intervalDefectSeconds1dayTable=intervalDefectSeconds1dayTable, deployProvVchChannelCapTraceTransmitDapiOdu=deployProvVchChannelCapTraceTransmitDapiOdu, controlPlaneOtnConfigCtmRetryWait=controlPlaneOtnConfigCtmRetryWait, intervalOtuFec15minExBERCE=intervalOtuFec15minExBERCE, alarmThres15MinExceededOtuUAS=alarmThres15MinExceededOtuUAS, transientCryptoRtf=transientCryptoRtf, forceDeployProvApsApsType=forceDeployProvApsApsType, alarmSwitchFailed=alarmSwitchFailed, FspR7PsuOutputPowerCaps=FspR7PsuOutputPowerCaps, intervalPhysPerfOpticalOutputPwr1dayNumber=intervalPhysPerfOpticalOutputPwr1dayNumber, intervalPhysConv15minDE=intervalPhysConv15minDE, opticalIfDataCirRcv=opticalIfDataCirRcv, intervalSonetSect1dayES=intervalSonetSect1dayES, intervalPhysPerfCurrent1weekEntry=intervalPhysPerfCurrent1weekEntry, opticalIfConfigPriority=opticalIfConfigPriority, connectionWdmDataEqualizationState=connectionWdmDataEqualizationState, neTrapsinkObjectDeletion=neTrapsinkObjectDeletion, FspR7ApplyAlarmProfile=FspR7ApplyAlarmProfile, ethTunnelResultNotification=ethTunnelResultNotification, FspR7SnmpPrivLevel=FspR7SnmpPrivLevel, currentEthRx1dayGoodFrames=currentEthRx1dayGoodFrames, deployProvIfCapDispersionSetting=deployProvIfCapDispersionSetting, deployProvLogicalCpIfCapTransport=deployProvLogicalCpIfCapTransport, deployProvTunnelOtnFromAid=deployProvTunnelOtnFromAid, sts24callocatedClassInstanceNumber=sts24callocatedClassInstanceNumber, deployProvControlPlaneOtnCtmMaximumRetryNumber=deployProvControlPlaneOtnCtmMaximumRetryNumber, FspR7OpticalBandCaps=FspR7OpticalBandCaps, connectionWdmDataSourceTna=connectionWdmDataSourceTna, thresholdOtuFecSublayerExUBEHighThres15min=thresholdOtuFecSublayerExUBEHighThres15min, portBindingLifAidEntry=portBindingLifAidEntry, currentPhysConvTxHighSpeed1dayCVTX=currentPhysConvTxHighSpeed1dayCVTX, intervalOtu1dayUAS=intervalOtu1dayUAS, currentL2EthTx15minBroadcastFramesTrmt=currentL2EthTx15minBroadcastFramesTrmt, deployProvIfDefaultsLacpTimeout=deployProvIfDefaultsLacpTimeout, intervalL2EthRx15minNumber=intervalL2EthRx15minNumber, FspR7OpticalBand=FspR7OpticalBand, connectionEthConfigCancelConnEntities=connectionEthConfigCancelConnEntities, f7eqp1csmuEwD=f7eqp1csmuEwD, intervalPhysPerfOlmRxLineAtt15minMean=intervalPhysPerfOlmRxLineAtt15minMean, deployProvCrsDcnEccAidCapsIndex=deployProvCrsDcnEccAidCapsIndex, intervalOdu1dayTimeStamp=intervalOdu1dayTimeStamp, deployProvConnStdCapFromEntry=deployProvConnStdCapFromEntry, FspR7CpAffinityInclusion=FspR7CpAffinityInclusion, intervalPhysPerfDiffGrDelay15minTimeStamp=intervalPhysPerfDiffGrDelay15minTimeStamp, deployProvLogicalIfDefaultsPushedFarEndIpHeader=deployProvLogicalIfDefaultsPushedFarEndIpHeader, changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmC=changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmC, deployProvControlPlaneEthRmTraceTarget=deployProvControlPlaneEthRmTraceTarget, teUnnumLinkEthDataTeLinkId=teUnnumLinkEthDataTeLinkId, intervalFarEndPhysPerfOpticalOutputPwr1dayHigh=intervalFarEndPhysPerfOpticalOutputPwr1dayHigh, changeServiceDeployProvIfDefaultsSigDegThresSdhSection=changeServiceDeployProvIfDefaultsSigDegThresSdhSection, intervalPmSnapshotTimeStamp=intervalPmSnapshotTimeStamp, deployProvControlPlaneWdmCapTedbMinAdvertWait=deployProvControlPlaneWdmCapTedbMinAdvertWait, deployProvTifInputTifAlarmMessage=deployProvTifInputTifAlarmMessage, FspR7CpCancConnection=FspR7CpCancConnection, vtpEntityDataEntry=vtpEntityDataEntry, changeServiceDeployProvIfCapSigDegPeriodOtu=changeServiceDeployProvIfCapSigDegPeriodOtu, alarmThres15MinExceededOtuES=alarmThres15MinExceededOtuES, FspR7LossAttenuationCaps=FspR7LossAttenuationCaps, changeServiceDeployProvIfDefaultsIpMask=changeServiceDeployProvIfDefaultsIpMask, intervalRoundTripDelay15minValidFlag=intervalRoundTripDelay15minValidFlag, interfaceDataConnectionState=interfaceDataConnectionState, FspR7LineCoding=FspR7LineCoding, changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmB=changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmB, currentL2EthTx1dayBroadcastFramesTrmt=currentL2EthTx1dayBroadcastFramesTrmt, forceDeployProvApsCapRevertMode=forceDeployProvApsCapRevertMode, currentPmSnapshotTxLineAttenuation=currentPmSnapshotTxLineAttenuation, deployProvPathElementEthLifIp=deployProvPathElementEthLifIp, deployProvControlPlaneOtnCdbMaxSize=deployProvControlPlaneOtnCdbMaxSize, deployProvModuleTilt=deployProvModuleTilt, deployProvLanCapEntry=deployProvLanCapEntry, tunnelWdmDataTunnelTemplate=tunnelWdmDataTunnelTemplate, tunnelWdmDataTunnelId=tunnelWdmDataTunnelId, deployProvLogicalIfCapAreaId=deployProvLogicalIfCapAreaId, deployProvIfCapEntry=deployProvIfCapEntry, connectionOtnDataTunnelType=connectionOtnDataTunnelType, deployProvLogicalCpIfCapVNodeIp=deployProvLogicalCpIfCapVNodeIp, connectionEthDataNetworkElementPosition=connectionEthDataNetworkElementPosition, intervalOtuFec15minExCE=intervalOtuFec15minExCE, alarmOpticalInputPwrReceivedTooHigh=alarmOpticalInputPwrReceivedTooHigh, deployProvIfCapTimModeSonetSection=deployProvIfCapTimModeSonetSection, vtpEntityDataGroupProvision=vtpEntityDataGroupProvision, deployProvLogicalIfDefaultsEncapsulation=deployProvLogicalIfDefaultsEncapsulation, deployProvControlPlaneWdmCapCtmTraceDetail=deployProvControlPlaneWdmCapCtmTraceDetail, forceDeployProvApsDefaultsFarEndIp=forceDeployProvApsDefaultsFarEndIp, deployProvControlPlaneOtnCapTedbMinAdvertWait=deployProvControlPlaneOtnCapTedbMinAdvertWait, deployProvIfCapTimModeOduTcmB=deployProvIfCapTimModeOduTcmB, alarmAlarmIndicationSignalOtu=alarmAlarmIndicationSignalOtu, thresholdSonetLineMsTable=thresholdSonetLineMsTable, deployProvLogicalCpIfDefaultsRefreshMultiplier=deployProvLogicalCpIfDefaultsRefreshMultiplier, thresholdPhysConvHighSpeedESHighThres1day=thresholdPhysConvHighSpeedESHighThres1day, opticalIfConfigLacpMode=opticalIfConfigLacpMode, intervalOduTcmC1dayEntry=intervalOduTcmC1dayEntry, deployProvIfCapSigDegPeriodSdhSection=deployProvIfCapSigDegPeriodSdhSection, currentPhysConvHighSpeed1daySE=currentPhysConvHighSpeed1daySE, deployProvControlPlaneOtnCtmConfigFlag=deployProvControlPlaneOtnCtmConfigFlag, opticalIfDiagPrbsElapsedTime=opticalIfDiagPrbsElapsedTime, controlPlaneOtnEntityStateEntry=controlPlaneOtnEntityStateEntry, deployProvPathOtnDefaultsPathId=deployProvPathOtnDefaultsPathId, FspR7CpNePosition=FspR7CpNePosition, deployProvModuleSingleFiberLocation=deployProvModuleSingleFiberLocation, intervalL2EthTx15minPauseFramesTrmt=intervalL2EthTx15minPauseFramesTrmt, connectionOtnDataConnectionDirection=connectionOtnDataConnectionDirection, intervalEthRx1dayCrcFrames=intervalEthRx1dayCrcFrames, thresholdPhysConvTable=thresholdPhysConvTable, deployProvControlPlaneWdmRowStatus=deployProvControlPlaneWdmRowStatus, moduleDataChannelsProvision=moduleDataChannelsProvision, physicalTerminationPointTable=physicalTerminationPointTable, vchConfigBundle=vchConfigBundle, deployProvPathElementEthCapEntry=deployProvPathElementEthCapEntry, deployProvControlPlaneOtnCapNodeNameSyntax=deployProvControlPlaneOtnCapNodeNameSyntax, intervalPhysPerfBackreflectionPwrRcv1dayMean=intervalPhysPerfBackreflectionPwrRcv1dayMean, changeServiceDeployProvIfFiberBrand=changeServiceDeployProvIfFiberBrand, currentConditionSeverity=currentConditionSeverity, tifiConfigTable=tifiConfigTable, opticalIfConfigCapEntry=opticalIfConfigCapEntry, currentL2EthTx1dayFramesTrmt=currentL2EthTx1dayFramesTrmt, deployProvControlPlaneWdmDefaultsRaAlarmActivationTime=deployProvControlPlaneWdmDefaultsRaAlarmActivationTime, intervalPhysPerfCurrent1weekHigh=intervalPhysPerfCurrent1weekHigh, intervalL2EthRx1dayCrcErrorsRcv=intervalL2EthRx1dayCrcErrorsRcv, deployProvControlPlaneWdmCapRmTraceTarget=deployProvControlPlaneWdmCapRmTraceTarget, thresholdOtuFecSublayerCEHighThres15min=thresholdOtuFecSublayerCEHighThres15min, FspR7PmResetCaps=FspR7PmResetCaps, changeServiceDeployProvIfCapTraceExpectedOduTcmA=changeServiceDeployProvIfCapTraceExpectedOduTcmA, exChannelConfigOpticalPowerTx=exChannelConfigOpticalPowerTx, deployProvControlPlaneEthPcConfigFlag=deployProvControlPlaneEthPcConfigFlag, intervalLinkAttenuation15minEntry=intervalLinkAttenuation15minEntry, transientThres1DayExceededOduSES=transientThres1DayExceededOduSES, teNumLinkOtnDataDiscarded=teNumLinkOtnDataDiscarded, currentOduTcmB15minElapsedTime=currentOduTcmB15minElapsedTime, deployProvControlPlaneEthDefaultsTedbRouterId=deployProvControlPlaneEthDefaultsTedbRouterId, logicalIfDataTable=logicalIfDataTable, connectionEthDataTable=connectionEthDataTable, deployProvIfCapOduTribTimeSlottNo=deployProvIfCapOduTribTimeSlottNo, deployProvLogicalIfAuthString=deployProvLogicalIfAuthString, currentPmSnapshotRamanPumpPower=currentPmSnapshotRamanPumpPower, areaAidCapIndexCap=areaAidCapIndexCap, deployProvPppIpDefaultsProxyArp=deployProvPppIpDefaultsProxyArp, transientHardwareResetInputTIF=transientHardwareResetInputTIF, alarmTraceIdentifierMismatchOduTcmB=alarmTraceIdentifierMismatchOduTcmB, alarmSwitchtoProtectionInhibited=alarmSwitchtoProtectionInhibited, intervalOduTcmB15minES=intervalOduTcmB15minES, deployProvIfCapTerminationLevel=deployProvIfCapTerminationLevel, changeServiceDeployProvIfPayload=changeServiceDeployProvIfPayload, teUnnumLinkOtnDataNumber=teUnnumLinkOtnDataNumber, deployProvIfDefaultsOduTribTimeSlottNo=deployProvIfDefaultsOduTribTimeSlottNo, pathElementOtnDataNodeIp=pathElementOtnDataNodeIp, intervalPhysPerfOscPwr1weekEntry=intervalPhysPerfOscPwr1weekEntry, currentEthRx1dayDiscardedFrames=currentEthRx1dayDiscardedFrames, deployProvLogicalCpIfDefaultsTimeToLive=deployProvLogicalCpIfDefaultsTimeToLive, deployProvLogicalCpIfDefaultsVTeType=deployProvLogicalCpIfDefaultsVTeType, opticalLinkConfigEntry=opticalLinkConfigEntry, edfaConfigVariableGain=edfaConfigVariableGain, deployProvPathElementWdmChannelDown=deployProvPathElementWdmChannelDown, transientLocalCopyMemFailWrongState=transientLocalCopyMemFailWrongState, changeServiceDeployProvIfAutonegotiation=changeServiceDeployProvIfAutonegotiation, deployProvControlPlaneEthDefaultsRsvpConfigFlag=deployProvControlPlaneEthDefaultsRsvpConfigFlag, alarmThres15MinExceededOduTcmCUAS=alarmThres15MinExceededOduTcmCUAS, currentSonetSect15minCV=currentSonetSect15minCV, deployProvControlPlaneOtnDefaultsRsvpConfigFlag=deployProvControlPlaneOtnDefaultsRsvpConfigFlag, intervalPhysPerfChromaticDispersion15minMean=intervalPhysPerfChromaticDispersion15minMean, alarmVoaControlFail=alarmVoaControlFail, f7eqpF2kSh5hu=f7eqpF2kSh5hu, tunnelOtnDataErrorMessage=tunnelOtnDataErrorMessage, deployProvModuleLanAidCapsEntry=deployProvModuleLanAidCapsEntry, opticalIfDiagPumpLaser4Temp=opticalIfDiagPumpLaser4Temp, intervalSonetLoPath1daySES=intervalSonetLoPath1daySES, apsProtFacilityConfigCapInhibitSwitchToProt=apsProtFacilityConfigCapInhibitSwitchToProt, deployProvIfSigDegThresOdu=deployProvIfSigDegThresOdu, deployProvIfDefaultsVethAid=deployProvIfDefaultsVethAid, crsConnDeployProvPathNode=crsConnDeployProvPathNode, intervalSonetSect15minNumber=intervalSonetSect15minNumber, tunnelWdmDataErrorTid=tunnelWdmDataErrorTid, deployProvLogicalCpIfCapAuthType=deployProvLogicalCpIfCapAuthType, ethernetConfigEntry=ethernetConfigEntry, deployProvApsDefaultsSignalDegradeSwitching=deployProvApsDefaultsSignalDegradeSwitching, deployProvConnNonStdCapFromEndpointB=deployProvConnNonStdCapFromEndpointB, f7Plugs=f7Plugs, intervalLatency1weekValidFlag=intervalLatency1weekValidFlag, tunnelWdmConfigRecoveryType=tunnelWdmConfigRecoveryType, deployProvPathOtnDefaultsEntry=deployProvPathOtnDefaultsEntry, deployProvIfSigDegThresOduTcmA=deployProvIfSigDegThresOduTcmA, inventoryCpEthDownFlowDataIndexEth=inventoryCpEthDownFlowDataIndexEth, deployProvControlPlaneEthDefaultsCmFisFrsTimeout=deployProvControlPlaneEthDefaultsCmFisFrsTimeout, intervalL2EthRx1dayEntry=intervalL2EthRx1dayEntry, ntpSysConditionSeverityType=ntpSysConditionSeverityType, deployProvIfDefaultsIpMask=deployProvIfDefaultsIpMask, deployProvTunnelWdmToAid=deployProvTunnelWdmToAid, currentGfpfrSublayer15minCHecDiscardedFrames=currentGfpfrSublayer15minCHecDiscardedFrames, opticalIfDiagPumpLaserBiasCurrent2=opticalIfDiagPumpLaserBiasCurrent2, tunnelEthDataErrorCodeMinor=tunnelEthDataErrorCodeMinor, intervalL2EthRx1dayTimeStamp=intervalL2EthRx1dayTimeStamp, controlPlaneEthConfigCtmRetryWait=controlPlaneEthConfigCtmRetryWait, f7XFP10G=f7XFP10G, ethernetConfigAutoNegotiation=ethernetConfigAutoNegotiation, intervalOdu1dayEntry=intervalOdu1dayEntry, deployProvLogicalCpIfCapTeMetric=deployProvLogicalCpIfCapTeMetric, alarmPowerMissing=alarmPowerMissing, deployProvControlPlaneEthCapRaTraceDetail=deployProvControlPlaneEthCapRaTraceDetail, transientLocalCopyMemFailCrcErr=transientLocalCopyMemFailCrcErr, deployProvIfSigDegPeriodIntegration=deployProvIfSigDegPeriodIntegration, deployProvControlPlaneEthDefaultsPcTraceDetail=deployProvControlPlaneEthDefaultsPcTraceDetail, intervalOdu15minValidFlag=intervalOdu15minValidFlag, intervalPhysPerfOpticalInputPwr15minNumber=intervalPhysPerfOpticalInputPwr15minNumber, inventoryCpEthDownDataResources=inventoryCpEthDownDataResources, pathElementOtnDataDownTributaryTSMethod=pathElementOtnDataDownTributaryTSMethod, currentL2EthTx15minElapsedTime=currentL2EthTx15minElapsedTime, deployProvLanCapType=deployProvLanCapType, controlPlaneEthConfigCtmMaximumRetryWait=controlPlaneEthConfigCtmMaximumRetryWait, opticalAmplifierInterfaceDiagnosticsOperatingHours=opticalAmplifierInterfaceDiagnosticsOperatingHours, changeServiceDeployProvIfDefaultsOspf=changeServiceDeployProvIfDefaultsOspf, deployProvExChannelCapOSNRTransmit=deployProvExChannelCapOSNRTransmit, intervalDispersionCompensation1dayMean=intervalDispersionCompensation1dayMean, thresholdPhysConvHighSpeedCVHighThres1day=thresholdPhysConvHighSpeedCVHighThres1day, sts48callocatedContainer=sts48callocatedContainer, deployProvControlPlaneEthDefaultsNaasConfigFlag=deployProvControlPlaneEthDefaultsNaasConfigFlag, ntpServerRowStatus=ntpServerRowStatus, intervalL2EthRx1dayOversizedFramesRcv=intervalL2EthRx1dayOversizedFramesRcv, deployProvPppIpDefaultsForceDestroy=deployProvPppIpDefaultsForceDestroy, currentOduTcmC15minEntry=currentOduTcmC15minEntry, deployProvPathElementWdmTable=deployProvPathElementWdmTable, deployProvIfDefaultsOduTribPortNo=deployProvIfDefaultsOduTribPortNo, deployProvIfOtnStuffing=deployProvIfOtnStuffing, deployProvTifOutputCapForceDestroy=deployProvTifOutputCapForceDestroy, intervalRoundTripDelay1dayTable=intervalRoundTripDelay1dayTable, intervalEthRx3HS1dayBytesFrames65Rcv=intervalEthRx3HS1dayBytesFrames65Rcv, alarmOscPwrTooLow=alarmOscPwrTooLow, currentOduTcmB1dayUAS=currentOduTcmB1dayUAS, intervalSonetLine1dayEntry=intervalSonetLine1dayEntry, alarmOosMaintenance=alarmOosMaintenance, FspR7Mapping=FspR7Mapping, eRoadmInfoInternalPorts=eRoadmInfoInternalPorts, intervalPhysPerfDiffGrDelay1dayNumber=intervalPhysPerfDiffGrDelay1dayNumber, moduleDataMaxPowerConsumption=moduleDataMaxPowerConsumption, deployProvPathElementEthDefaultsLogicalInterfaceId=deployProvPathElementEthDefaultsLogicalInterfaceId, deployProvTunnelEthCapToAid=deployProvTunnelEthCapToAid, intervalPhysPerfCarrierFreqOffset15minMean=intervalPhysPerfCarrierFreqOffset15minMean, intervalPhysPerfDiffGrDelay15minMean=intervalPhysPerfDiffGrDelay15minMean, alarmEmbeddedOperationsChannelFailure=alarmEmbeddedOperationsChannelFailure, deployProvTunnelWdmCapStuff=deployProvTunnelWdmCapStuff, alarmTurnupCondition=alarmTurnupCondition)
mibBuilder.exportSymbols("FspR7-MIB", deployProvTunnelWdmCapSubLayer=deployProvTunnelWdmCapSubLayer, syslogConfigReportsStatus=syslogConfigReportsStatus, FspR7NoYesCaps=FspR7NoYesCaps, opticalIfConfigErrorForwarding=opticalIfConfigErrorForwarding, deployProvControlPlaneOtnCmTraceDetail=deployProvControlPlaneOtnCmTraceDetail, farEndPlugConfigCapTable=farEndPlugConfigCapTable, deployProvApsDefaultsApsType=deployProvApsDefaultsApsType, thresholdOtuESHighThres1day=thresholdOtuESHighThres1day, opticalIfDataLagSysMac=opticalIfDataLagSysMac, changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmC=changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmC, deployProvControlPlaneEthCtmMaximumRetryNumber=deployProvControlPlaneEthCtmMaximumRetryNumber, f7eqpWcelsd=f7eqpWcelsd, forceDeployProvApsSignalDegradeSwitching=forceDeployProvApsSignalDegradeSwitching, deployProvControlPlaneOtnDefaultsCtmMaximumRetryWait=deployProvControlPlaneOtnDefaultsCtmMaximumRetryWait, fspUserManagementRowStatus=fspUserManagementRowStatus, deployProvLogicalCpIfTimeToLive=deployProvLogicalCpIfTimeToLive, logicalCpIfDataExtAdvertised=logicalCpIfDataExtAdvertised, deployProvModuleRowStatus=deployProvModuleRowStatus, changeServiceDeployProvIfDefaultsDispersionMode=changeServiceDeployProvIfDefaultsDispersionMode, deployProvControlPlaneEthCapRaConfigFlag=deployProvControlPlaneEthCapRaConfigFlag, otdrConfigTimePeriod=otdrConfigTimePeriod, intervalL2EthRx1dayBytesFrames1024Rcv=intervalL2EthRx1dayBytesFrames1024Rcv, intervalSonetSect15minEntry=intervalSonetSect15minEntry, cloningEntitiesDeployProv=cloningEntitiesDeployProv, deployProvControlPlaneEthDefaultsTedbConfigFlag=deployProvControlPlaneEthDefaultsTedbConfigFlag, deployProvModuleCapChannelsProvision=deployProvModuleCapChannelsProvision, controlPlaneWdmConfigCtmSetupTimeout=controlPlaneWdmConfigCtmSetupTimeout, intervalEthRxHighSpeed1dayGoodFrames=intervalEthRxHighSpeed1dayGoodFrames, FspR7AccessStatus=FspR7AccessStatus, intervalPhysPerfChromaticDispersion1dayMean=intervalPhysPerfChromaticDispersion1dayMean, reservationCpDataChannelUp=reservationCpDataChannelUp, deployProvLogicalIfDefaultsMetric=deployProvLogicalIfDefaultsMetric, deployProvControlPlaneOtnPcConfigFlag=deployProvControlPlaneOtnPcConfigFlag, deployProvModuleDefaultsRoadmNumber=deployProvModuleDefaultsRoadmNumber, thresholdPhysConvTxHighSpeedESTXHighThres15min=thresholdPhysConvTxHighSpeedESTXHighThres15min, intervalPhysPerfEstimatedSignalGain1weekMean=intervalPhysPerfEstimatedSignalGain1weekMean, lanIpConfigTable=lanIpConfigTable, deployProvTunnelEthCapFacilityType=deployProvTunnelEthCapFacilityType, deployProvLanDefaultsForceDestroy=deployProvLanDefaultsForceDestroy, deployProvTunnelEthDefaultsMonitorEntities=deployProvTunnelEthDefaultsMonitorEntities, deployProvPppIpCapFarEndIp=deployProvPppIpCapFarEndIp, alarmThres15MinExceededOduTcmAUAS=alarmThres15MinExceededOduTcmAUAS, interfaceDataOduTribTimeSlottNo=interfaceDataOduTribTimeSlottNo, shelfInfoShelfId=shelfInfoShelfId, FspR7CpEncode=FspR7CpEncode, thresholdPhysPerfDifferentialGroupDelayHigh=thresholdPhysPerfDifferentialGroupDelayHigh, alarmPrbsRcvActivated=alarmPrbsRcvActivated, deployProvModuleChannelsNumber=deployProvModuleChannelsNumber, currentDiagnosticsEntry=currentDiagnosticsEntry, alarmAttOnReceiverFiberLowerThanMonitor=alarmAttOnReceiverFiberLowerThanMonitor, FspR7FiberBrandCaps=FspR7FiberBrandCaps, deployProvPathOtnDefaultsRowStatus=deployProvPathOtnDefaultsRowStatus, transientRestorationFailed=transientRestorationFailed, teUnnumLinkOtnDataTeLinkId=teUnnumLinkOtnDataTeLinkId, intervalPhysConvCombined15minNumber=intervalPhysConvCombined15minNumber, intervalLinkAttenuation1weekNumber=intervalLinkAttenuation1weekNumber, deployProvControlPlaneEthDefaultsNaasMaxSize=deployProvControlPlaneEthDefaultsNaasMaxSize, fspUserManagementAuthPrivKeyOld=fspUserManagementAuthPrivKeyOld, intervalPhysPerfCarrierFreqOffset1dayNumber=intervalPhysPerfCarrierFreqOffset1dayNumber, changeServiceDeployProvIfTraceExpectedOduTcmA=changeServiceDeployProvIfTraceExpectedOduTcmA, logicalCpIfDataIpAddrMonitor=logicalCpIfDataIpAddrMonitor, intervalPhysPerfEstimatedSignalGain1dayHigh=intervalPhysPerfEstimatedSignalGain1dayHigh, intervalRoundTripDelay1weekEntry=intervalRoundTripDelay1weekEntry, intervalEthRxHighSpeed15minTable=intervalEthRxHighSpeed15minTable, deployProvPlugCapType=deployProvPlugCapType, interfaceDataTable=interfaceDataTable, FspR7MaxBitErrorRateCaps=FspR7MaxBitErrorRateCaps, controlPlaneEthConfigRsvpConfigFlag=controlPlaneEthConfigRsvpConfigFlag, changeServiceDeployProvIfCapTraceTransmitSapiOdu=changeServiceDeployProvIfCapTraceTransmitSapiOdu, intervalDispersionCompensation15minEntry=intervalDispersionCompensation15minEntry, deployProvOpticalLinkDefaultsRowStatus=deployProvOpticalLinkDefaultsRowStatus, currentOtuFec1dayExEntry=currentOtuFec1dayExEntry, tunnelOtnDataErrorCodeMinor=tunnelOtnDataErrorCodeMinor, alarmServerSignalFailureODU=alarmServerSignalFailureODU, alarmAlarmIndicationSignalLowerOrderPath=alarmAlarmIndicationSignalLowerOrderPath, deployProvPathWdmCapTable=deployProvPathWdmCapTable, thresholdOduTcmCTable=thresholdOduTcmCTable, FspR7SnmpPrivLevelCaps=FspR7SnmpPrivLevelCaps, alarmServerSignalFailureVf=alarmServerSignalFailureVf, teUnnumLinkOtnDataDiscarded=teUnnumLinkOtnDataDiscarded, deployProvCopyPathOtnPathId=deployProvCopyPathOtnPathId, changeServiceDeployProvIfSigDegThresOduTcmB=changeServiceDeployProvIfSigDegThresOduTcmB, intervalGfpSublayer15minCoreHecCorrectedFrames=intervalGfpSublayer15minCoreHecCorrectedFrames, apsConfigHoldOffTime=apsConfigHoldOffTime, FspR7ResetRfiCaps=FspR7ResetRfiCaps, controlPlaneOtnDataRsvpAlias=controlPlaneOtnDataRsvpAlias, changeServiceDeployProvIfDefaultsTimModeOduTcmA=changeServiceDeployProvIfDefaultsTimModeOduTcmA, intervalPhysPerfLaserBiasCurrentNormalized1weekTable=intervalPhysPerfLaserBiasCurrentNormalized1weekTable, alarmFanUnitAlarm=alarmFanUnitAlarm, apsProtFacilityConfigInhibitSwitchToProt=apsProtFacilityConfigInhibitSwitchToProt, tifoDataTable=tifoDataTable, currentGfpfr1dayTable=currentGfpfr1dayTable, currentPhysConvTxHighSpeed1dayElapsedTime=currentPhysConvTxHighSpeed1dayElapsedTime, deployProvPppIpDefaultsBitrate=deployProvPppIpDefaultsBitrate, thresholdSonetSectSEFSHighThres15min=thresholdSonetSectSEFSHighThres15min, apsProtFacilityConfigCapTable=apsProtFacilityConfigCapTable, alarmLossOfFrameMux=alarmLossOfFrameMux, deployProvCrsDcnLinkAidCapsTable=deployProvCrsDcnLinkAidCapsTable, intervalPhysPerfLaserBiasCurrentNormalized15minValidFlag=intervalPhysPerfLaserBiasCurrentNormalized15minValidFlag, intervalPhysConvTxHighSpeed15minTable=intervalPhysConvTxHighSpeed15minTable, currentOduTcmC1daySES=currentOduTcmC1daySES, deploymentProvisioningMIB=deploymentProvisioningMIB, deployProvCrsDcnCapRowStatus=deployProvCrsDcnCapRowStatus, deployProvPathElementWdmCapChannelUp=deployProvPathElementWdmCapChannelUp, ntpSrvConditionSeverityEntry=ntpSrvConditionSeverityEntry, deployProvVchChannelBundle=deployProvVchChannelBundle, changeServiceDeployProvIfDefaultsType=changeServiceDeployProvIfDefaultsType, deployProvControlPlaneOtnCmCrankBackTimeout=deployProvControlPlaneOtnCmCrankBackTimeout, intervalEthRx15minGoodFrames=intervalEthRx15minGoodFrames, intervalEthRxHighSpeed1dayTable=intervalEthRxHighSpeed1dayTable, deployProvPathElementOtnDefaultsLogicalInterfaceId=deployProvPathElementOtnDefaultsLogicalInterfaceId, opticalIfDiagPumpLaserBiasCurrent1=opticalIfDiagPumpLaserBiasCurrent1, opticalIfDataAutoPTassignment=opticalIfDataAutoPTassignment, currentGfpfrSublayer15minTHecDiscardedFrames=currentGfpfrSublayer15minTHecDiscardedFrames, currentL2EthTx1dayMulticastFramesTrmt=currentL2EthTx1dayMulticastFramesTrmt, alarmThres15MinExceededGfpTHecDisc=alarmThres15MinExceededGfpTHecDisc, intervalEthRx3HS1dayCrcFrames=intervalEthRx3HS1dayCrcFrames, FspR7CpNodeId=FspR7CpNodeId, deployProvCopyPathEthDefaultsPathId=deployProvCopyPathEthDefaultsPathId, intervalEthRx3HS1dayUndersizedFramesRcv=intervalEthRx3HS1dayUndersizedFramesRcv, deployProvTunnelEthRowStatus=deployProvTunnelEthRowStatus, intervalDispersionCompensation15minTimeStamp=intervalDispersionCompensation15minTimeStamp, currentDefectSeconds1dayElapsedTime=currentDefectSeconds1dayElapsedTime, deployProvShelfPsuOutputPower=deployProvShelfPsuOutputPower, deployProvPathElementWdmCapTable=deployProvPathElementWdmCapTable, deployProvLogicalCpIfHelloInterval=deployProvLogicalCpIfHelloInterval, deployProvLogicalIfCapPushedNendIpHeader=deployProvLogicalIfCapPushedNendIpHeader, deployProvVirtualOpticalChannelTable=deployProvVirtualOpticalChannelTable, intervalPhysPerfOscOpticalOutputPwr15minValidFlag=intervalPhysPerfOscOpticalOutputPwr15minValidFlag, f7eqp4csmc=f7eqp4csmc, deployProvPathElementEthCapUpstreamSvid=deployProvPathElementEthCapUpstreamSvid, thresholdPhysPerfRoundTripDelayHighThres=thresholdPhysPerfRoundTripDelayHighThres, FspR7L2CacEnable=FspR7L2CacEnable, deployProvIfSigDegThresSdhMs=deployProvIfSigDegThresSdhMs, transientEqlzFailed=transientEqlzFailed, thresholdPhysConvCombinedCVDEHighThres1day=thresholdPhysConvCombinedCVDEHighThres1day, alarmDispersionCompensationTooLow=alarmDispersionCompensationTooLow, deployProvIfVethAidCapsIndex=deployProvIfVethAidCapsIndex, ptpEntityDataDirection=ptpEntityDataDirection, intervalOduTcmC15minValidFlag=intervalOduTcmC15minValidFlag, deployProvPathElementWdmDefaultsLifIp=deployProvPathElementWdmDefaultsLifIp, deployProvControlPlaneOtnCapTedbMaxSize=deployProvControlPlaneOtnCapTedbMaxSize, alarmLossofTandemConnectionOduTcmA=alarmLossofTandemConnectionOduTcmA, changeServiceDeployProvIfCapTable=changeServiceDeployProvIfCapTable, remoteAlarmCpDataDate=remoteAlarmCpDataDate, deployProvDcnLanAidCapsEntry=deployProvDcnLanAidCapsEntry, changeServiceDeployProvIfTimModeOduTcmB=changeServiceDeployProvIfTimModeOduTcmB, crsConnWdmConfigType=crsConnWdmConfigType, FspR7SysType=FspR7SysType, tunnelEthDataOifUni=tunnelEthDataOifUni, deployProvTifOutputDefaultsAdmin=deployProvTifOutputDefaultsAdmin, entityStateAdmin=entityStateAdmin, neDatabaseNcuAid=neDatabaseNcuAid, exChannelConfigFrameFormat=exChannelConfigFrameFormat, intervalPhysPerfOscPwr1weekHigh=intervalPhysPerfOscPwr1weekHigh, intervalPhysPerfDiffGrDelay15minEntry=intervalPhysPerfDiffGrDelay15minEntry, currentEthRxHighSpeed15minEntry=currentEthRxHighSpeed15minEntry, thresholdPhysPerfRoundTripDelayLowThres=thresholdPhysPerfRoundTripDelayLowThres, thresholdDefectSecondsTable=thresholdDefectSecondsTable, crsConnDeployProvDefaultsAlias=crsConnDeployProvDefaultsAlias, FspR7EdfaOutputPowerRating=FspR7EdfaOutputPowerRating, intervalPhysPerfChromaticDispersion1weekValidFlag=intervalPhysPerfChromaticDispersion1weekValidFlag, deployProvPortBindingDefaultsLayer=deployProvPortBindingDefaultsLayer, FspR7CpReversionType=FspR7CpReversionType, pathElementEthDataTrafficEngineeringType=pathElementEthDataTrafficEngineeringType, deployProvApsDefaultsRowStatus=deployProvApsDefaultsRowStatus, currentSonetHoPath1dayEntry=currentSonetHoPath1dayEntry, deployProvModuleMode=deployProvModuleMode, forceDeployProvApsCapDirection=forceDeployProvApsCapDirection, FspR7NumberOfChannels=FspR7NumberOfChannels, controlPlaneOtnConfigCtmTraceDetail=controlPlaneOtnConfigCtmTraceDetail, interfaceDataEntry=interfaceDataEntry, opticalIfConfigCapLagLoadBallanceSource=opticalIfConfigCapLagLoadBallanceSource, deployProvControlPlaneEthDefaultsEntry=deployProvControlPlaneEthDefaultsEntry, intervalLinkAttenuation1dayEntry=intervalLinkAttenuation1dayEntry, deployProvPortBindingRemoteTna=deployProvPortBindingRemoteTna, crsConnDataIngressNodeIp=crsConnDataIngressNodeIp, shelfDiagnosticsEntry=shelfDiagnosticsEntry, alarmPumpLaser1TempTooHigh=alarmPumpLaser1TempTooHigh, apsProtFacilityConfigCapSwitchCommand=apsProtFacilityConfigCapSwitchCommand, deployProvControlPlaneOtnDefaultsCmFisFrsTimeout=deployProvControlPlaneOtnDefaultsCmFisFrsTimeout, currentGfp15minTable=currentGfp15minTable, FspR7PreferredFacilityType=FspR7PreferredFacilityType, conditionSeverityValue=conditionSeverityValue, intervalPhysPerfOpticalInputPwr15minTimeStamp=intervalPhysPerfOpticalInputPwr15minTimeStamp, deployProvModuleCapPsuOutputPower=deployProvModuleCapPsuOutputPower, connectionWdmDataFacilityType=connectionWdmDataFacilityType, deployProvControlPlaneOtnDefaultsRmConfigFlag=deployProvControlPlaneOtnDefaultsRmConfigFlag, alarmFuseAlarm2=alarmFuseAlarm2, deployProvPlugCapChannelId=deployProvPlugCapChannelId, FspR7EqlzInterval=FspR7EqlzInterval, alarmEncryptionModuleTamperDetected=alarmEncryptionModuleTamperDetected, currentEthRxHighSpeed1dayPauseFrames=currentEthRxHighSpeed1dayPauseFrames, intervalL2EthTx15minBytesTrmt=intervalL2EthTx15minBytesTrmt, opticalIfConfigAseTabCreation=opticalIfConfigAseTabCreation, intervalPhysPerfCurrent1weekMean=intervalPhysPerfCurrent1weekMean, currentGfpSublayer15minElapsedTime=currentGfpSublayer15minElapsedTime, deployProvCopyPathOtnDefaultsSourcePathIndex=deployProvCopyPathOtnDefaultsSourcePathIndex, FspR7ScuRing=FspR7ScuRing, controlPlaneEthConfigCtmMaximumRetryNumber=controlPlaneEthConfigCtmMaximumRetryNumber, intervalPhysPerfEstimatedSignalGain1dayTable=intervalPhysPerfEstimatedSignalGain1dayTable, alarmOduTribMsiMismatch=alarmOduTribMsiMismatch, connectionWdmDataFromTid=connectionWdmDataFromTid, deployProvTunnelWdmDefaultsFacilityType=deployProvTunnelWdmDefaultsFacilityType, intervalLinkAttenuation1weekValidFlag=intervalLinkAttenuation1weekValidFlag, deployProvIfDefaultsOffset=deployProvIfDefaultsOffset, pathElementWdmDataPathType=pathElementWdmDataPathType, deployProvPathOtnDefaultsTable=deployProvPathOtnDefaultsTable, deployProvControlPlaneEthCdbConfigFlag=deployProvControlPlaneEthCdbConfigFlag, changeServiceDeployProvIfSigDegThresSdhMs=changeServiceDeployProvIfSigDegThresSdhMs, farEndIfDataTable=farEndIfDataTable, deployProvTunnelEthCapTable=deployProvTunnelEthCapTable, currentEthRx3HS15minJabberFrameRcv=currentEthRx3HS15minJabberFrameRcv, intervalPhysConvTxHighSpeed15minEntry=intervalPhysConvTxHighSpeed15minEntry, connectionWdmDataSignalledPaths=connectionWdmDataSignalledPaths, deployProvControlPlaneEthDefaultsRaConfigFlag=deployProvControlPlaneEthDefaultsRaConfigFlag, controlPlaneOtnEntityStateOper=controlPlaneOtnEntityStateOper, deployProvControlPlaneEthDefaultsRsvpMaxExpRestartTime=deployProvControlPlaneEthDefaultsRsvpMaxExpRestartTime, deployProvLogicalIfDefaultsPrio=deployProvLogicalIfDefaultsPrio, deployProvIfCapTiltSet=deployProvIfCapTiltSet, FspR7VoaMode=FspR7VoaMode, currentGfp15minElapsedTime=currentGfp15minElapsedTime, currentGfpSublayer15minTypeHecDiscardedFrames=currentGfpSublayer15minTypeHecDiscardedFrames, controlPlaneOtnConfigPcConfigFlag=controlPlaneOtnConfigPcConfigFlag, thresholdPhysPerfCapOpticalInputPwrLow=thresholdPhysPerfCapOpticalInputPwrLow, intervalLinkAttenuation1dayValidFlag=intervalLinkAttenuation1dayValidFlag, deployProvIfType=deployProvIfType, thresholdOtuFecSublayerUBEHighThres15min=thresholdOtuFecSublayerUBEHighThres15min, farEndPlugDataMaxDataRate=farEndPlugDataMaxDataRate, transientManualWorkingSwitchedtoProtection=transientManualWorkingSwitchedtoProtection, inventoryCpWdmDownDataPhysicalTermPoints=inventoryCpWdmDownDataPhysicalTermPoints, deployProvModuleCapChannelSpacing=deployProvModuleCapChannelSpacing, intervalFarEndPhysPerfOpticalOutputPwr15minMean=intervalFarEndPhysPerfOpticalOutputPwr15minMean, deployProvLogicalCpIfDefaultsNendTeLinkIdNum=deployProvLogicalCpIfDefaultsNendTeLinkIdNum, transientFarEndChanged=transientFarEndChanged, alarmClientFailForwarding=alarmClientFailForwarding, deployProvLanAreaId=deployProvLanAreaId, deployProvIfOffset=deployProvIfOffset, opticalIfOlmFarEndSigDegThres=opticalIfOlmFarEndSigDegThres, intervalPhysPerfOlmRxLineAtt15minTable=intervalPhysPerfOlmRxLineAtt15minTable, forceDeployProvApsSignalFailureSwitching=forceDeployProvApsSignalFailureSwitching, deployProvControlPlaneWdmCtmSetupTimeout=deployProvControlPlaneWdmCtmSetupTimeout, opticalIfDataLagState=opticalIfDataLagState, loopbackChange=loopbackChange, currentPhysConvHighSpeed1dayEntry=currentPhysConvHighSpeed1dayEntry, deployProvModuleDefaultsChannelsProvision=deployProvModuleDefaultsChannelsProvision, deployProvControlPlaneOtnCdResyncTimeout=deployProvControlPlaneOtnCdResyncTimeout, deployProvModuleDefaultsChannelSpacing=deployProvModuleDefaultsChannelSpacing, currentOtuFec15minExBERCE=currentOtuFec15minExBERCE, changeServiceDeployProvIfXfpDecisionThres=changeServiceDeployProvIfXfpDecisionThres, exChannelDataConnectionState=exChannelDataConnectionState, deployProvSyslogSourceIp=deployProvSyslogSourceIp, deployProvCopyPathWdmCapTable=deployProvCopyPathWdmCapTable, opticalIfDiagEntry=opticalIfDiagEntry)
mibBuilder.exportSymbols("FspR7-MIB", FspR7CpReversionTypeCaps=FspR7CpReversionTypeCaps, capabilityDataCapabilityLevel=capabilityDataCapabilityLevel, tunnelOtnConfigPin=tunnelOtnConfigPin, plugDataConnectorType=plugDataConnectorType, alarmApsConfigMismatch=alarmApsConfigMismatch, farEndPlugDataReach=farEndPlugDataReach, opticalIfConfigFecType=opticalIfConfigFecType, inventoryCpEthUpDataNumber=inventoryCpEthUpDataNumber, alarmProvisioningLocked=alarmProvisioningLocked, portBindingDataTable=portBindingDataTable, changeServiceDeployProvIfEqlzAdmin=changeServiceDeployProvIfEqlzAdmin, tunnelEthDataTunnelNumberExtension=tunnelEthDataTunnelNumberExtension, intervalGfp1dayTimeStamp=intervalGfp1dayTimeStamp, deployProvTifInputCapEntry=deployProvTifInputCapEntry, opticalIfConfigCac=opticalIfConfigCac, transientThres1DayExceededMuxSES=transientThres1DayExceededMuxSES, currentSonetLine1dayElapsedTime=currentSonetLine1dayElapsedTime, tunnelWdmConfigRestorationPaths=tunnelWdmConfigRestorationPaths, intervalLinkAttenuation1weekLow=intervalLinkAttenuation1weekLow, plugDataTable=plugDataTable, deployProvPathElementWdmUpstreamModuleAid=deployProvPathElementWdmUpstreamModuleAid, performanceAdmin=performanceAdmin, changeServiceDeployProvIfCapFlowControl=changeServiceDeployProvIfCapFlowControl, conditionSeverityTable=conditionSeverityTable, deployProvLogicalCpIfCapLayer=deployProvLogicalCpIfCapLayer, f7eqpWcm2g5c=f7eqpWcm2g5c, currentOtu1daySES=currentOtu1daySES, ntpSrvCurrentConditionSeverity=ntpSrvCurrentConditionSeverity, alarmEntityOutageIndication=alarmEntityOutageIndication, deployProvTunnelOtnCapAlias=deployProvTunnelOtnCapAlias, moduleConfigEntry=moduleConfigEntry, deployProvPathWdmEntry=deployProvPathWdmEntry, deployProvIfDefaultsMetric=deployProvIfDefaultsMetric, deployProvVchChannelCapTraceTransmitSapiOdu=deployProvVchChannelCapTraceTransmitSapiOdu, deployProvLogicalIfCapAuthType=deployProvLogicalIfCapAuthType, ntpSysConditionSeverityEntry=ntpSysConditionSeverityEntry, interfaceConfigIdentifier=interfaceConfigIdentifier, changeServiceDeployProvIfCapTraceTransmitDapiOduTcmB=changeServiceDeployProvIfCapTraceTransmitDapiOduTcmB, alarmEncryptionPortMaxKeyExchgFailuresReachedIs=alarmEncryptionPortMaxKeyExchgFailuresReachedIs, alarmLaserTemperatureTooLow=alarmLaserTemperatureTooLow, controlPlaneWdmConfigNaasConfigFlag=controlPlaneWdmConfigNaasConfigFlag, inventoryCpOtnCrsUpDataAids=inventoryCpOtnCrsUpDataAids, connectionEthDataMonitorEntities=connectionEthDataMonitorEntities, FspR7EntityType=FspR7EntityType, deployProvControlPlaneEthRmTraceDetail=deployProvControlPlaneEthRmTraceDetail, intervalPhysPerfOscOpticalOutputPwr1dayTimeStamp=intervalPhysPerfOscOpticalOutputPwr1dayTimeStamp, controlPlaneEthDataTable=controlPlaneEthDataTable, deployProvCopyPathWdmRowStatus=deployProvCopyPathWdmRowStatus, alarmLossofAlignmentVCG=alarmLossofAlignmentVCG, deployProvPathElementEthDefaultsDownstreamSvid=deployProvPathElementEthDefaultsDownstreamSvid, deployProvOpticalLinkDefaultsTxLineAttenuation=deployProvOpticalLinkDefaultsTxLineAttenuation, intervalL2EthTx1dayBytesTrmt=intervalL2EthTx1dayBytesTrmt, FspR7CpRecoveryTypeCaps=FspR7CpRecoveryTypeCaps, changeServiceDeployProvIfTimModeOtu=changeServiceDeployProvIfTimModeOtu, intervalOduTcmB1dayES=intervalOduTcmB1dayES, intervalOtuFec1dayBERCE=intervalOtuFec1dayBERCE, deployProvIfTiltSet=deployProvIfTiltSet, thresholdOtuFecSublayerUBEHighThres1day=thresholdOtuFecSublayerUBEHighThres1day, intervalL2EthRx15minPauseFramesRcv=intervalL2EthRx15minPauseFramesRcv, interfaceConfigInitiateEqualization=interfaceConfigInitiateEqualization, deployProvTunnelOtnDefaultsLayer=deployProvTunnelOtnDefaultsLayer, alarmAlarmIndicationSignalHigherOrderPath=alarmAlarmIndicationSignalHigherOrderPath, transientEqlzCompleted=transientEqlzCompleted, changeServiceDeployProvIfSigDegThresOduTcmC=changeServiceDeployProvIfSigDegThresOduTcmC, eRoadmInfoShelfHeight=eRoadmInfoShelfHeight, intervalGfpSublayer1dayTypeHecCorrectedFrames=intervalGfpSublayer1dayTypeHecCorrectedFrames, currentEthTx15minElapsedTime=currentEthTx15minElapsedTime, FspR7DatabaseType=FspR7DatabaseType, transientThres1DayExceededPhysConvES=transientThres1DayExceededPhysConvES, opticalIfConfigCapLacpTimeout=opticalIfConfigCapLacpTimeout, deployProvPathElementEthTie=deployProvPathElementEthTie, deployProvIfCapChannelProvisioning=deployProvIfCapChannelProvisioning, intervalEthTx1dayGoodFramesx=intervalEthTx1dayGoodFramesx, connectionEthDataTunnelInstance=connectionEthDataTunnelInstance, pppfConfigIpType=pppfConfigIpType, thresholdOtuFecESHighThres1day=thresholdOtuFecESHighThres1day, crsConnWdmConfigAlias=crsConnWdmConfigAlias, gfpServiceDefVcType=gfpServiceDefVcType, virtualOpticalChannelDataEntry=virtualOpticalChannelDataEntry, logicalIfDataLanLinkAidDerived=logicalIfDataLanLinkAidDerived, opticalIfDataOduTribPortNo=opticalIfDataOduTribPortNo, connectionWdmConfigTable=connectionWdmConfigTable, usedBackplaneBandwidth=usedBackplaneBandwidth, currentOduTcmA1dayUAS=currentOduTcmA1dayUAS, intervalPhysPerfCurrent15minNumber=intervalPhysPerfCurrent15minNumber, alarmThres15MinExceededSonetSectCV=alarmThres15MinExceededSonetSectCV, neSystemIp=neSystemIp, alarmCpTunnelPrecompFailed=alarmCpTunnelPrecompFailed, controlPlaneWdmEntityStateSecondaryStates=controlPlaneWdmEntityStateSecondaryStates, changeServiceDeployProvIfDefaultsTraceExpectedOduTcmC=changeServiceDeployProvIfDefaultsTraceExpectedOduTcmC, intervalPhysPerfOpticalOutputPwr15minTable=intervalPhysPerfOpticalOutputPwr15minTable, changeServiceDeployProvIfCapLaserOffDelayFunction=changeServiceDeployProvIfCapLaserOffDelayFunction, alarmGainTiltNotSettable=alarmGainTiltNotSettable, alarmConfigurableOpticalOutputPowerTransmittedTooHigh=alarmConfigurableOpticalOutputPowerTransmittedTooHigh, routingIpRowStatus=routingIpRowStatus, deployProvTunnelEthDefaultsProtectionType=deployProvTunnelEthDefaultsProtectionType, deployProvControlPlaneEthRaTraceDetail=deployProvControlPlaneEthRaTraceDetail, intervalL2EthTx15minFramesTrmt=intervalL2EthTx15minFramesTrmt, deployProvModuleCapGainRange=deployProvModuleCapGainRange, thresholdOduTcmBUASHighThres1day=thresholdOduTcmBUASHighThres1day, changeServiceDeployProvIfDefaultsAttenuationGradient=changeServiceDeployProvIfDefaultsAttenuationGradient, deployProvExChannelMaximumPMDRcv=deployProvExChannelMaximumPMDRcv, teNumLinkEthDataNodeTid=teNumLinkEthDataNodeTid, deployProvTunnelWdmCapSubLayerEncoding=deployProvTunnelWdmCapSubLayerEncoding, pathWdmDataRole=pathWdmDataRole, deployProvPathElementWdmDefaultsNodeIp=deployProvPathElementWdmDefaultsNodeIp, alarmLossOfPointerHigherOrderPath=alarmLossOfPointerHigherOrderPath, opticalIfDiagSignalToNoiseRatio=opticalIfDiagSignalToNoiseRatio, controlPlaneOtnConfigTedbConfigFlag=controlPlaneOtnConfigTedbConfigFlag, deployProvLogicalIfEncapsulation=deployProvLogicalIfEncapsulation, eRoadmInfoUpgradePorts=eRoadmInfoUpgradePorts, intervalPhysPerfCurrentOscGain1dayNumber=intervalPhysPerfCurrentOscGain1dayNumber, intervalEthRx3HS1dayBroadcastFramesRcv=intervalEthRx3HS1dayBroadcastFramesRcv, FspR7Gain=FspR7Gain, deployProvOpticalLinkDefaultsFarEndLocation=deployProvOpticalLinkDefaultsFarEndLocation, currentPhysConvHighSpeed1dayES=currentPhysConvHighSpeed1dayES, connectionEthDataRestorable=connectionEthDataRestorable, tunnelEthDataToNodeIpMonitor=tunnelEthDataToNodeIpMonitor, deployProvTunnelOtnDefaultsTunnelNo=deployProvTunnelOtnDefaultsTunnelNo, alarmMismatch=alarmMismatch, intervalL2EthRx1dayFramesRcv=intervalL2EthRx1dayFramesRcv, deployProvControlPlaneEthCapCtmRetryWait=deployProvControlPlaneEthCapCtmRetryWait, deployProvControlPlaneOtnCapEntry=deployProvControlPlaneOtnCapEntry, intervalEthRx1dayEntry=intervalEthRx1dayEntry, tunnelOtnDataToTid=tunnelOtnDataToTid, deployProvDcnCapAdmin=deployProvDcnCapAdmin, deployProvVirtualOpticalChannelCapAlias=deployProvVirtualOpticalChannelCapAlias, FspR7BaundCaps=FspR7BaundCaps, intervalPhysPerfPumpPwr1weekNumber=intervalPhysPerfPumpPwr1weekNumber, deployProvPathElementWdmDefaultsTie=deployProvPathElementWdmDefaultsTie, inventoryCpWdmCrsUpDataEntry=inventoryCpWdmCrsUpDataEntry, deployProvLogicalCpIfTeAreaId=deployProvLogicalCpIfTeAreaId, intervalPhysPerfCurrent1weekLow=intervalPhysPerfCurrent1weekLow, opticalAmplifierInterfaceDiagnosticsAttenuationVoa=opticalAmplifierInterfaceDiagnosticsAttenuationVoa, intervalOduTcmC1daySES=intervalOduTcmC1daySES, FspR7AdminStateCaps=FspR7AdminStateCaps, changeServiceDeployProvIfSigDegThresSonetSection=changeServiceDeployProvIfSigDegThresSonetSection, forceDeployProvApsSDswitching=forceDeployProvApsSDswitching, deployProvTunnelEthDefaultsConnectionDirection=deployProvTunnelEthDefaultsConnectionDirection, ethernetDataMonitoredDuplexMode=ethernetDataMonitoredDuplexMode, deployProvTunnelWdmLayer=deployProvTunnelWdmLayer, opticalIfConfigDispersionMode=opticalIfConfigDispersionMode, intervalEthRx15minTable=intervalEthRx15minTable, logicalIfConfigOspf=logicalIfConfigOspf, deployProvPathElementOtnCapNodeIp=deployProvPathElementOtnCapNodeIp, FspR7CpActivStateCaps=FspR7CpActivStateCaps, currentGfpt15minDiscardedSuperblocks=currentGfpt15minDiscardedSuperblocks, deployProvTunnelWdmDefaultsRestorationType=deployProvTunnelWdmDefaultsRestorationType, intervalGfpSublayer15minTimeStamp=intervalGfpSublayer15minTimeStamp, thresholdPhysPerfCapSignalToNoiseRatioLow=thresholdPhysPerfCapSignalToNoiseRatioLow, deployProvControlPlaneWdmCapNaasConfigFlag=deployProvControlPlaneWdmCapNaasConfigFlag, deployProvIfCapDuplex=deployProvIfCapDuplex, thresholdPhysPerfAttTxHigh=thresholdPhysPerfAttTxHigh, FspR7TransmissionMode=FspR7TransmissionMode, deployProvControlPlaneEthCapRsvpConfigFlag=deployProvControlPlaneEthCapRsvpConfigFlag, currentEthRxHighSpeed1dayTable=currentEthRxHighSpeed1dayTable, deployProvLogicalIfAlias=deployProvLogicalIfAlias, changeServiceDeployProvIfCapSigDegThresSdhMs=changeServiceDeployProvIfCapSigDegThresSdhMs, intervalPhysPerfOscPwr1weekTable=intervalPhysPerfOscPwr1weekTable, thresholdPhysConvCombinedTable=thresholdPhysConvCombinedTable, sts3callocatedClassInstanceNumber=sts3callocatedClassInstanceNumber, logicalIfConfigRetransmitInterval=logicalIfConfigRetransmitInterval, deployProvOpticalLinkDefaultsEntry=deployProvOpticalLinkDefaultsEntry, deployProvControlPlaneOtnCapNaasConfigFlag=deployProvControlPlaneOtnCapNaasConfigFlag, opticalIfDiagRamanEstSignalGain=opticalIfDiagRamanEstSignalGain, timeNtpAttributeValueChange=timeNtpAttributeValueChange, controlPlaneWdmDataTable=controlPlaneWdmDataTable, deployProvIfCapSignalDegradePeriod=deployProvIfCapSignalDegradePeriod, deployProvApsDefaultsWaitToRestore=deployProvApsDefaultsWaitToRestore, FspR7CpTEType=FspR7CpTEType, controlPlaneWdmConfigRsvpConfigFlag=controlPlaneWdmConfigRsvpConfigFlag, deployProvDcnExternalVidCapsTable=deployProvDcnExternalVidCapsTable, currentPhysConvHighSpeed15minCV=currentPhysConvHighSpeed15minCV, thresholdSonetSectSESHighThres15min=thresholdSonetSectSESHighThres15min, intervalEthRx3HS15minBytesFrames256Rcv=intervalEthRx3HS15minBytesFrames256Rcv, tunnelEthDataCbsTrmt=tunnelEthDataCbsTrmt, controlPlaneOtnConfigRaConfigFlag=controlPlaneOtnConfigRaConfigFlag, shelfConfigRack=shelfConfigRack, thresholdIntrusionGradient=thresholdIntrusionGradient, controlPlaneWdmDataRsvpAlias=controlPlaneWdmDataRsvpAlias, pathElementEthDataTid=pathElementEthDataTid, FspR7DeploymentScenarioCaps=FspR7DeploymentScenarioCaps, changeServiceDeployProvIfOffset=changeServiceDeployProvIfOffset, deployProvControlPlaneOtnCapCtmConfigFlag=deployProvControlPlaneOtnCapCtmConfigFlag, intervalL2EthTx1dayPauseFramesTrmt=intervalL2EthTx1dayPauseFramesTrmt, currentEthTx15minPauseFrames=currentEthTx15minPauseFrames, crsConnPossibleToCreateTable=crsConnPossibleToCreateTable, alarmLocalOscTemperatureTooLow=alarmLocalOscTemperatureTooLow, deployProvControlPlaneEthDefaultsRsvpMaxExpRecoveryTime=deployProvControlPlaneEthDefaultsRsvpMaxExpRecoveryTime, deployProvTunnelWdmOifUni=deployProvTunnelWdmOifUni, intervalPhysPerfDiffGrDelay1weekValidFlag=intervalPhysPerfDiffGrDelay1weekValidFlag, deployProvIfDefaultsTraceTransmitSonetSection=deployProvIfDefaultsTraceTransmitSonetSection, deployProvModuleCapMapping=deployProvModuleCapMapping, deployProvLogicalCpIfExtAdvertised=deployProvLogicalCpIfExtAdvertised, intervalL2EthTx1dayTable=intervalL2EthTx1dayTable, intervalPhysPerfDiffGrDelay15minHigh=intervalPhysPerfDiffGrDelay15minHigh, deployProvTunnelEthFacilityType=deployProvTunnelEthFacilityType, fspUserSpinLock=fspUserSpinLock, deployProvShelfCapBand=deployProvShelfCapBand, deployProvApsDefaultsEntry=deployProvApsDefaultsEntry, opticalIfConfigSigDegThresOtu=opticalIfConfigSigDegThresOtu, deployProvIfTraceTransmitDapiOduTcmB=deployProvIfTraceTransmitDapiOduTcmB, intervalFarEndPhysPerfOpticalOutputPwr15minNumber=intervalFarEndPhysPerfOpticalOutputPwr15minNumber, controlPlaneEthConfigEntry=controlPlaneEthConfigEntry, currentSonetHoPath15minUAS=currentSonetHoPath15minUAS, deployProvPathElementWdmNodeIp=deployProvPathElementWdmNodeIp, tunnelWdmDataErrorMessage=tunnelWdmDataErrorMessage, currentGfpt1dayDiscardedSuperblocks=currentGfpt1dayDiscardedSuperblocks, intervalGfpt1dayValidFlag=intervalGfpt1dayValidFlag, deployProvTunnelWdmRestPathsNoProv=deployProvTunnelWdmRestPathsNoProv, currentSubAggregate1dayElapsedTime=currentSubAggregate1dayElapsedTime, currentEthTx1dayTable=currentEthTx1dayTable, deployProvLogicalCpIfDefaultsTable=deployProvLogicalCpIfDefaultsTable, dcnTopologyStatusEntry=dcnTopologyStatusEntry, farEndPlugDiagnosticsTemp=farEndPlugDiagnosticsTemp, currentConditions=currentConditions, exChannelConfigMaximumOpticalPowerRcv=exChannelConfigMaximumOpticalPowerRcv, alarmSignalFailureOPU=alarmSignalFailureOPU, deployProvPathElementEthDefaultsTie=deployProvPathElementEthDefaultsTie, thresholdGfpCoreHecCorrectedFramesHighThres1Day=thresholdGfpCoreHecCorrectedFramesHighThres1Day, intervalPhysConvCombined15minTimeStamp=intervalPhysConvCombined15minTimeStamp, changeServiceDeployProvIfDefaultsXfpDecisionThres=changeServiceDeployProvIfDefaultsXfpDecisionThres, interfaceConfigLanAidCapsTable=interfaceConfigLanAidCapsTable, deployProvModuleCapRowStatus=deployProvModuleCapRowStatus, deployProvIfDefaultsTcmCLevel=deployProvIfDefaultsTcmCLevel, tifoDataEntry=tifoDataEntry, changeServiceDeployProvIfDuplex=changeServiceDeployProvIfDuplex, intervalPhysPerfSignalToNoiseRatio15minHigh=intervalPhysPerfSignalToNoiseRatio15minHigh, deployProvControlPlaneEthTedbMaxSize=deployProvControlPlaneEthTedbMaxSize, intervalSonetHoPath1dayTimeStamp=intervalSonetHoPath1dayTimeStamp, transientCopyFileChecksumFail=transientCopyFileChecksumFail, intervalPhysPerfCurrent1dayHigh=intervalPhysPerfCurrent1dayHigh, FspR7CpVTeType=FspR7CpVTeType, deployProvVchChannelCapTraceExpectedOdu=deployProvVchChannelCapTraceExpectedOdu, deployProvLogicalIfCapIpType=deployProvLogicalIfCapIpType, deployProvTunnelWdmCapLayer=deployProvTunnelWdmCapLayer, controlPlaneOtnDataCtmAlias=controlPlaneOtnDataCtmAlias, teNumLinkEthDataPhysicalLink=teNumLinkEthDataPhysicalLink, deployProvControlPlaneOtnDefaultsNaasAdvertWait=deployProvControlPlaneOtnDefaultsNaasAdvertWait, transientCryptoFwpRevChanged=transientCryptoFwpRevChanged, deployProvControlPlaneEthCapTedbConfigFlag=deployProvControlPlaneEthCapTedbConfigFlag, fspUserManagementDefaultsInternalState=fspUserManagementDefaultsInternalState, deployProvTunnelEthToTid=deployProvTunnelEthToTid, currentOtuFec15minBERCE=currentOtuFec15minBERCE, vtpEntityDataTable=vtpEntityDataTable, deployProvLogicalCpIfCapIpAddr=deployProvLogicalCpIfCapIpAddr, FspR7Integer32Caps=FspR7Integer32Caps, deployProvTunnelWdmStuff=deployProvTunnelWdmStuff, thresholdPhysPerfOscPwrRcvHighThres=thresholdPhysPerfOscPwrRcvHighThres, lanIpDataEntry=lanIpDataEntry, deployProvControlPlaneEthDefaultsCdTraceDetail=deployProvControlPlaneEthDefaultsCdTraceDetail, intervalLinkAttenuation1weekHigh=intervalLinkAttenuation1weekHigh, intervalDispersionCompensation15minLow=intervalDispersionCompensation15minLow, deployProvControlPlaneOtnCapCdbConfigFlag=deployProvControlPlaneOtnCapCdbConfigFlag)
mibBuilder.exportSymbols("FspR7-MIB", intervalPhysPerfOscPwr15minTimeStamp=intervalPhysPerfOscPwr15minTimeStamp, currentEthRxHighSpeed1dayGoodFrames=currentEthRxHighSpeed1dayGoodFrames, intervalLatency1weekTimeStamp=intervalLatency1weekTimeStamp, deployProvApsPeerAidCapsTable=deployProvApsPeerAidCapsTable, f7eqpSfpg=f7eqpSfpg, opticalIfConfigStagType=opticalIfConfigStagType, intervalSubAggregate15minES=intervalSubAggregate15minES, deployProvIfCapOffset=deployProvIfCapOffset, inventoryCpEthCrsDownDataIndexEthFrom=inventoryCpEthCrsDownDataIndexEthFrom, FspR7ProtectionTypeCaps=FspR7ProtectionTypeCaps, alarmReceiverHighTemp=alarmReceiverHighTemp, currentGfpSublayer15minTable=currentGfpSublayer15minTable, intervalPhysPerfOscOpticalOutputPwr1dayTable=intervalPhysPerfOscOpticalOutputPwr1dayTable, changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmA=changeServiceDeployProvIfDefaultsTraceTransmitDapiOduTcmA, changeServiceDeployProvIfDefaultsOffset=changeServiceDeployProvIfDefaultsOffset, currentSonetLine1dayUAS=currentSonetLine1dayUAS, f7eqpWcc2g7d=f7eqpWcc2g7d, controlPlaneEthEntityStateAdmin=controlPlaneEthEntityStateAdmin, forceDeployProvApsDefaultsProtectionAid=forceDeployProvApsDefaultsProtectionAid, deployProvIfDefaultsSigDegPeriodSdhSection=deployProvIfDefaultsSigDegPeriodSdhSection, deployProvModuleCapScrambling=deployProvModuleCapScrambling, inventoryCpEthDownDataFacilities=inventoryCpEthDownDataFacilities, thresholdPhysPerfOpticalInputPwrHigh=thresholdPhysPerfOpticalInputPwrHigh, deployProvControlPlaneWdmCapCmConfigFlag=deployProvControlPlaneWdmCapCmConfigFlag, changeServiceDeployProvIfCapDuplex=changeServiceDeployProvIfCapDuplex, intervalSonetSect15minValidFlag=intervalSonetSect15minValidFlag, interfaceDataMonLevel=interfaceDataMonLevel, alarmServerSignalFailureODUcrs=alarmServerSignalFailureODUcrs, intraNeConnectionsType=intraNeConnectionsType, alarmOscOpticalPowerControlFailHigh=alarmOscOpticalPowerControlFailHigh, deployProvTunnelOtnDefaultsOifUni=deployProvTunnelOtnDefaultsOifUni, alarmTurnupFailed=alarmTurnupFailed, opticalIfDiagPumpLaserBiasCurrent3=opticalIfDiagPumpLaserBiasCurrent3, deployProvModuleCapChannel=deployProvModuleCapChannel, changeServiceDeployProvIfTraceTransmitSapiOdu=changeServiceDeployProvIfTraceTransmitSapiOdu, deployProvIfCapTraceTransmitDapiOtu=deployProvIfCapTraceTransmitDapiOtu, deployProvLogicalCpIfVNodeIp=deployProvLogicalCpIfVNodeIp, crsConnDeployProvCapType=crsConnDeployProvCapType, deployProvShelfDefaultsRowStatus=deployProvShelfDefaultsRowStatus, currentSonetSect1dayEntry=currentSonetSect1dayEntry, intervalOtuFec1dayNumber=intervalOtuFec1dayNumber, deployProvIfGain=deployProvIfGain, thresholdSonetHoPathUASHighThres15min=thresholdSonetHoPathUASHighThres15min, virtualOpticalChannelConfigAlias=virtualOpticalChannelConfigAlias, intervalPhysPerfOlmTxLineAtt1dayTimeStamp=intervalPhysPerfOlmTxLineAtt1dayTimeStamp, intervalL2EthTx1dayValidFlag=intervalL2EthTx1dayValidFlag, connectionOtnDataEqualizationState=connectionOtnDataEqualizationState, deployProvControlPlaneWdmTedbMaxSize=deployProvControlPlaneWdmTedbMaxSize, currentL2EthRx1dayInterPackJunkBytesFramesRcv=currentL2EthRx1dayInterPackJunkBytesFramesRcv, controlPlaneWdmConfigRsvpMaxExpRecoveryTime=controlPlaneWdmConfigRsvpMaxExpRecoveryTime, intervalPhysPerfOpticalOutputPwr1weekMean=intervalPhysPerfOpticalOutputPwr1weekMean, FspR7CpAbortProcessCaps=FspR7CpAbortProcessCaps, deployProvShelfCapRowStatus=deployProvShelfCapRowStatus, currentOduTcmB1dayES=currentOduTcmB1dayES, controlPlaneEthConfigTedbMinAdvertWait=controlPlaneEthConfigTedbMinAdvertWait, intervalOduTcmA15minSES=intervalOduTcmA15minSES, currentL2EthTx1dayPauseFramesTrmt=currentL2EthTx1dayPauseFramesTrmt, tunnelEthConfigProtectionType=tunnelEthConfigProtectionType, FspR7TypeCrsCaps=FspR7TypeCrsCaps, FspR7AutopLifCaps=FspR7AutopLifCaps, intervalPhysPerfCurrentOscGain15minMean=intervalPhysPerfCurrentOscGain15minMean, currentGfpSublayer1dayCoreHecCorrectedFrames=currentGfpSublayer1dayCoreHecCorrectedFrames, deployProvPlugAdmin=deployProvPlugAdmin, intervalEthTx15minBytes=intervalEthTx15minBytes, inventoryCpEthUpFlowDataTable=inventoryCpEthUpFlowDataTable, intervalGfpSublayer15minTypeHecDiscardedFrames=intervalGfpSublayer15minTypeHecDiscardedFrames, connectionDeployProv=connectionDeployProv, FspR7Stages=FspR7Stages, logicalCpIfDataOspf=logicalCpIfDataOspf, controlPlaneWdmConfigPcTraceDetail=controlPlaneWdmConfigPcTraceDetail, currentL2EthRx15minBytesFrames1519Rcv=currentL2EthRx15minBytesFrames1519Rcv, changeServiceDeployProvIfCapErrorForwarding=changeServiceDeployProvIfCapErrorForwarding, intervalEthRx3HS15minBytesFrames65Rcv=intervalEthRx3HS15minBytesFrames65Rcv, deployProvPppIpForceDestroy=deployProvPppIpForceDestroy, deployProvPathWdmDefaultsPathId=deployProvPathWdmDefaultsPathId, deployProvIfCapTraceFormSonetSection=deployProvIfCapTraceFormSonetSection, connectionEthDataConnectionDirection=connectionEthDataConnectionDirection, deployProvExChannelCapAlias=deployProvExChannelCapAlias, neScuAutoRestoreEnabled=neScuAutoRestoreEnabled, moduleConfigInitiateEqualization=moduleConfigInitiateEqualization, intervalFarEndPhysPerfOpticalInputPwr1weekLow=intervalFarEndPhysPerfOpticalInputPwr1weekLow, deployProvIfSigDegThresOduTcmC=deployProvIfSigDegThresOduTcmC, intervalFarEndPhysPerfOpticalInputPwr15minMean=intervalFarEndPhysPerfOpticalInputPwr15minMean, changeServiceDeployProvIfTraceTransmitSapiOduTcmA=changeServiceDeployProvIfTraceTransmitSapiOduTcmA, alarmLossOfGfpFrame=alarmLossOfGfpFrame, forceDeployProvApsDefaultsSignalFailureSwitching=forceDeployProvApsDefaultsSignalFailureSwitching, deployProvControlPlaneWdmNaasTraceDetail=deployProvControlPlaneWdmNaasTraceDetail, opticalIfConfigCapTributarySlotMethod=opticalIfConfigCapTributarySlotMethod, controlPlaneWdmConfigCtmTraceDetail=controlPlaneWdmConfigCtmTraceDetail, tunnelOtnConfigCommand=tunnelOtnConfigCommand, logicalCpIfDataNendTeLinkIdUnn=logicalCpIfDataNendTeLinkIdUnn, thresholdOduTcmAESHighThres1day=thresholdOduTcmAESHighThres1day, intervalPhysPerfCurrentOscGain1weekMean=intervalPhysPerfCurrentOscGain1weekMean, controlPlaneEthEntityStateOper=controlPlaneEthEntityStateOper, moduleDiagnosticsCurrentHighThres=moduleDiagnosticsCurrentHighThres, deployProvControlPlaneOtnEntry=deployProvControlPlaneOtnEntry, thresholdSonetHoPathSESHighThres1day=thresholdSonetHoPathSESHighThres1day, intervalPhysConv1dayEntry=intervalPhysConv1dayEntry, alarmThres15MinExceededPhysConvCVDE=alarmThres15MinExceededPhysConvCVDE, changeServiceDeployProvIfCapTerminationLevel=changeServiceDeployProvIfCapTerminationLevel, deployProvIfDefaultsFarEndCommunication=deployProvIfDefaultsFarEndCommunication, deployProvTunnelEthPin=deployProvTunnelEthPin, crossConnectionCreation=crossConnectionCreation, deployProvPathElementOtnDefaultsTrafficEngineeringType=deployProvPathElementOtnDefaultsTrafficEngineeringType, teNumLinkOtnDataFendTeLinkIp=teNumLinkOtnDataFendTeLinkIp, deployProvTunnelEthDefaultsPin=deployProvTunnelEthDefaultsPin, intervalPhysPerfEstimatedSignalGain1weekHigh=intervalPhysPerfEstimatedSignalGain1weekHigh, exChannelConfigMinimumOpticalPowerRcv=exChannelConfigMinimumOpticalPowerRcv, f7eqp4tca4gd=f7eqp4tca4gd, controlPlaneEthEntityStateCapAdmin=controlPlaneEthEntityStateCapAdmin, pathElementWdmDataLine=pathElementWdmDataLine, deployProvIfTraceTransmitDapiOtu=deployProvIfTraceTransmitDapiOtu, changeServiceDeployProvIfCapSigDegThresReceiver=changeServiceDeployProvIfCapSigDegThresReceiver, FspR7OpticalInterfaceReach=FspR7OpticalInterfaceReach, intervalPhysPerfOlmTxLineAtt15minMean=intervalPhysPerfOlmTxLineAtt15minMean, thresholdEthRxHighSpeedCrcFramesHighThres15Min=thresholdEthRxHighSpeedCrcFramesHighThres15Min, opticalIfDiagPrbsErrorFreeTime=opticalIfDiagPrbsErrorFreeTime, FspR7OpticalSubBand=FspR7OpticalSubBand, teUnnumLinkWdmDataNumber=teUnnumLinkWdmDataNumber, deployProvControlPlaneOtnDefaultsEntry=deployProvControlPlaneOtnDefaultsEntry, FspR7OdtuTypeCaps=FspR7OdtuTypeCaps, currentL2EthRx15minInterPackJunkBytesFramesRcv=currentL2EthRx15minInterPackJunkBytesFramesRcv, deployProvTunnelOtnCapEntry=deployProvTunnelOtnCapEntry, teNumLinkWdmDataNodeIp=teNumLinkWdmDataNodeIp, deployProvIfSigDegThresOtu=deployProvIfSigDegThresOtu, deployProvPppIpEntry=deployProvPppIpEntry, deployProvControlPlaneEthDefaultsTedbMinAdvertWait=deployProvControlPlaneEthDefaultsTedbMinAdvertWait, f7eqp2tcm2g5=f7eqp2tcm2g5, crsConnDeployProvCapPathNode=crsConnDeployProvCapPathNode, currentEthTx1dayGoodFramesx=currentEthTx1dayGoodFramesx, interfaceConfigExternalVidCapsEntry=interfaceConfigExternalVidCapsEntry, opticalIfDataLagPortNo=opticalIfDataLagPortNo, thresholdPhysPerfCapUpperAtlinkThres=thresholdPhysPerfCapUpperAtlinkThres, thresholdSonetLoPathCVHighThres15min=thresholdSonetLoPathCVHighThres15min, FspR7DispersionOperation=FspR7DispersionOperation, interfaceDataFacilityType=interfaceDataFacilityType, intervalPhysPerfBackreflectionPwrRcv1dayLow=intervalPhysPerfBackreflectionPwrRcv1dayLow, deployProvControlPlaneEthCapCtmShutdownTimeout=deployProvControlPlaneEthCapCtmShutdownTimeout, currentOduTcmA15minSES=currentOduTcmA15minSES, alarmThirdPartyPlug=alarmThirdPartyPlug, intervalPhysPerfSignalToNoiseRatio15minValidFlag=intervalPhysPerfSignalToNoiseRatio15minValidFlag, opticalIfDiagPrbsMaxBER=opticalIfDiagPrbsMaxBER, parameterCapabilities=parameterCapabilities, thresholdFarEndPhysPerfOpticalInputPwrLow=thresholdFarEndPhysPerfOpticalInputPwrLow, lanIpConfigIpAddrMask=lanIpConfigIpAddrMask, forceDeployProvApsDefaultsSignalDegradeSwitching=forceDeployProvApsDefaultsSignalDegradeSwitching, deployProvIfLagLoadBallanceSource=deployProvIfLagLoadBallanceSource, crsConnWdmDataOper=crsConnWdmDataOper, changeServiceDeployProvIfWdmRxChannel=changeServiceDeployProvIfWdmRxChannel, transientManualWorkingSwitchedBacktoWorking=transientManualWorkingSwitchedBacktoWorking, deployProvPathElementWdmCapTid=deployProvPathElementWdmCapTid, alarmLossOfSignalTransmitter=alarmLossOfSignalTransmitter, intervalRoundTripDelay1weekHigh=intervalRoundTripDelay1weekHigh, alarmOpenConnectionIndicationOdu=alarmOpenConnectionIndicationOdu, changeServiceDeployProvIfDefaultsTraceExpectedOdu=changeServiceDeployProvIfDefaultsTraceExpectedOdu, intervalOtu15minNumber=intervalOtu15minNumber, changeServiceDeployProvIfSigDegPeriodOduTcmB=changeServiceDeployProvIfSigDegPeriodOduTcmB, interfaceConfigExternalVidCapsStringCap=interfaceConfigExternalVidCapsStringCap, deployProvControlPlaneOtnDefaultsTedbMaxSize=deployProvControlPlaneOtnDefaultsTedbMaxSize, transientDatabaseActivationFail=transientDatabaseActivationFail, deployProvIfDefaultsTraceExpectedOduTcmC=deployProvIfDefaultsTraceExpectedOduTcmC, tunnelEthDataLayer=tunnelEthDataLayer, deployProvPppIpDefaultsIpType=deployProvPppIpDefaultsIpType, alarmAlarmIndicationSignalOduTcmB=alarmAlarmIndicationSignalOduTcmB, tunnelWdmDataLayer=tunnelWdmDataLayer, crsConnUnusedFromPointsAidValueFromPoint=crsConnUnusedFromPointsAidValueFromPoint, deployProvIfVethAid=deployProvIfVethAid, controlPlaneWdmConfigTedbConfigFlag=controlPlaneWdmConfigTedbConfigFlag, deployProvIfDefaultsTraceExpectedOduTcmB=deployProvIfDefaultsTraceExpectedOduTcmB, deployProvIfDefaultsSigDegPeriodIntegration=deployProvIfDefaultsSigDegPeriodIntegration, tunnelWdmDataErrorCodeMajor=tunnelWdmDataErrorCodeMajor, deployProvTunnelEthMonitorEntities=deployProvTunnelEthMonitorEntities, intervalFarEndPhysPerfOpticalOutputPwr1weekMean=intervalFarEndPhysPerfOpticalOutputPwr1weekMean, controlPlaneEthEntityStateTable=controlPlaneEthEntityStateTable, intervalPhysConvHighSpeed15minCV=intervalPhysConvHighSpeed15minCV, deployProvControlPlaneWdmDefaultsWaitToRestore=deployProvControlPlaneWdmDefaultsWaitToRestore, deployProvVchChannelCapVcgType=deployProvVchChannelCapVcgType, deployProvExChannelCapMaximumOpticalPowerRcv=deployProvExChannelCapMaximumOpticalPowerRcv, transientBootUpCompleted=transientBootUpCompleted, currentEthRx3HS1dayFragmentFramesRcv=currentEthRx3HS1dayFragmentFramesRcv, connectionOtnDataTunnelNumberExtension=connectionOtnDataTunnelNumberExtension, deployProvIfDisparityCorrection=deployProvIfDisparityCorrection, deployProvModuleCapSingleFiberLocation=deployProvModuleCapSingleFiberLocation, deployProvPathElementWdmCapRowStatus=deployProvPathElementWdmCapRowStatus, currentEthRx3HS15minControlFrameRcv=currentEthRx3HS15minControlFrameRcv, neTrapsinkObjectCreation=neTrapsinkObjectCreation, moduleDataMidstagePorts=moduleDataMidstagePorts, deployProvLogicalCpIfDefaultsCpType=deployProvLogicalCpIfDefaultsCpType, FspR7SystemBusy=FspR7SystemBusy, pathElementEthDataPathId=pathElementEthDataPathId, deployProvLogicalIfCapHelloInterval=deployProvLogicalIfCapHelloInterval, currentL2EthTx1dayBytesFrames128Trmt=currentL2EthTx1dayBytesFrames128Trmt, alarmProfileConfig=alarmProfileConfig, changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmA=changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmA, FspR7ChannelIdentifierCaps=FspR7ChannelIdentifierCaps, changeServiceDeployProvIfCapOtnStuffing=changeServiceDeployProvIfCapOtnStuffing, thresholdSonetSectESHighThres1day=thresholdSonetSectESHighThres1day, changeServiceDeployProvIfCapSigDegPeriodOduTcmC=changeServiceDeployProvIfCapSigDegPeriodOduTcmC, currentPhysConvCombined15minTable=currentPhysConvCombined15minTable, intervalPhysPerfCarrierFreqOffset15minValidFlag=intervalPhysPerfCarrierFreqOffset15minValidFlag, changeServiceDeployProvIfTraceTransmitOpspOduTcmC=changeServiceDeployProvIfTraceTransmitOpspOduTcmC, thresholdOtuFecEntry=thresholdOtuFecEntry, changeServiceDeployProvIfOspf=changeServiceDeployProvIfOspf, intervalPhysPerfChromaticDispersion1weekTimeStamp=intervalPhysPerfChromaticDispersion1weekTimeStamp, intervalEthRx3HS15minMulticastFramesRcv=intervalEthRx3HS15minMulticastFramesRcv, opticalIfConfigCapAutoThresReset=opticalIfConfigCapAutoThresReset, intervalPhysPerfOscPwr15minEntry=intervalPhysPerfOscPwr15minEntry, nodeChannelTraceRouteElementId=nodeChannelTraceRouteElementId, alarmProfileDefaultValue=alarmProfileDefaultValue, f7eqp3BsmC=f7eqp3BsmC, controlPlaneOtnEntityStateCapTable=controlPlaneOtnEntityStateCapTable, intervalPhysPerfChromaticDispersion1dayTimeStamp=intervalPhysPerfChromaticDispersion1dayTimeStamp, deployProvExChannelFarEndLocation=deployProvExChannelFarEndLocation, deployProvLogicalIfCapLanLinkAid=deployProvLogicalIfCapLanLinkAid, conditionSeverityEntry=conditionSeverityEntry, deployProvLanCapRowStatus=deployProvLanCapRowStatus, intervalOdu15minSES=intervalOdu15minSES, f7SFP2G1=f7SFP2G1, moduleDataChannel=moduleDataChannel, intervalGfpfr15minTable=intervalGfpfr15minTable, intervalOduTcmB15minTable=intervalOduTcmB15minTable, alarmProfileValue=alarmProfileValue, teNumLinkEthDataTeLinkIp=teNumLinkEthDataTeLinkIp, deployProvIfCapBand=deployProvIfCapBand, intervalPhysPerfSignalToNoiseRatio1weekTimeStamp=intervalPhysPerfSignalToNoiseRatio1weekTimeStamp, connectionOtnDataTable=connectionOtnDataTable, deployProvTunnelEthCapLayer=deployProvTunnelEthCapLayer, controlPlaneEthConfigRmConfigFlag=controlPlaneEthConfigRmConfigFlag, deployProvModuleFiber=deployProvModuleFiber, currentSonetHoPath1dayUAS=currentSonetHoPath1dayUAS, deployProvVchChannelCapSigDegThresOdu=deployProvVchChannelCapSigDegThresOdu, currentPhysConvHighSpeed15minTable=currentPhysConvHighSpeed15minTable, deployProvPlugDefaultsMaxDataRate=deployProvPlugDefaultsMaxDataRate, alarmAseTableGenFailOscMissing=alarmAseTableGenFailOscMissing, interfaceDataRevertiveMode=interfaceDataRevertiveMode, opticalIfDataPortRole=opticalIfDataPortRole, thresholdPhysPerfOpticalOutputPwrLow=thresholdPhysPerfOpticalOutputPwrLow, deployProvVchChannelEntry=deployProvVchChannelEntry, deployProvLogicalIfPrio=deployProvLogicalIfPrio, portBindingLifAidIndex=portBindingLifAidIndex, intervalPhysPerfOpticalInputPwr1weekLow=intervalPhysPerfOpticalInputPwr1weekLow, thresholdPhysPerfCapLowerAtlinkThres=thresholdPhysPerfCapLowerAtlinkThres, deployProvLogicalIfDefaultsIpAddrMask=deployProvLogicalIfDefaultsIpAddrMask, deployProvPortBindingDefaultsRemoteNodeIp=deployProvPortBindingDefaultsRemoteNodeIp, exChannelConfigOSNRTransmit=exChannelConfigOSNRTransmit, deployProvPortBindingRemoteNodeIp=deployProvPortBindingRemoteNodeIp, transientThres1DayExceededOduUAS=transientThres1DayExceededOduUAS, deployProvModuleDefaultsEqlzAdmin=deployProvModuleDefaultsEqlzAdmin, intervalOduTcmB1daySES=intervalOduTcmB1daySES, deployProvLanCapIpAddr=deployProvLanCapIpAddr, deployProvPortBindingCapRemoteScn=deployProvPortBindingCapRemoteScn, intervalLatency15minMean=intervalLatency15minMean, intervalFarEndPhysPerfOpticalOutputPwr1weekTable=intervalFarEndPhysPerfOpticalOutputPwr1weekTable, deployProvControlPlaneWdmWaitToRestore=deployProvControlPlaneWdmWaitToRestore)
mibBuilder.exportSymbols("FspR7-MIB", intervalOduTcmA1dayNumber=intervalOduTcmA1dayNumber, currentOdu1daySES=currentOdu1daySES, logicalCpIfConfigAuthString=logicalCpIfConfigAuthString, controlPlaneWdmDataCdbAlias=controlPlaneWdmDataCdbAlias, deployProvControlPlaneEthDefaultsCmCrankBackTimeout=deployProvControlPlaneEthDefaultsCmCrankBackTimeout, intervalEthRx1dayTable=intervalEthRx1dayTable, intervalFarEndPhysPerfOpticalInputPwr15minTimeStamp=intervalFarEndPhysPerfOpticalInputPwr15minTimeStamp, opticalIfDataOduTribTimeSlottNo=opticalIfDataOduTribTimeSlottNo, intervalOduTcmB15minNumber=intervalOduTcmB15minNumber, ptpEntityDataGroupProvision=ptpEntityDataGroupProvision, deployProvControlPlaneOtnRsvpMaxExpRestartTime=deployProvControlPlaneOtnRsvpMaxExpRestartTime, transientPreComputationReady=transientPreComputationReady, currentPmSnapshotOutputPower=currentPmSnapshotOutputPower, intervalGfpSublayer1dayTypeHecDiscardedFrames=intervalGfpSublayer1dayTypeHecDiscardedFrames, crsConnObjectChange=crsConnObjectChange, alarmAttOnTransmitterFiberLowerThanMonitor=alarmAttOnTransmitterFiberLowerThanMonitor, eocDataIpEntity=eocDataIpEntity, changeServiceDeployProvIfDefaultsAlsMode=changeServiceDeployProvIfDefaultsAlsMode, changeServiceDeployProvIfCapOpticalSetPoint=changeServiceDeployProvIfCapOpticalSetPoint, eocDataConnectionType=eocDataConnectionType, trapVariables=trapVariables, intervalPhysPerfLaserBiasCurrentNormalized1weekHigh=intervalPhysPerfLaserBiasCurrentNormalized1weekHigh, thresholdOtuESHighThres15min=thresholdOtuESHighThres15min, FspR7EqlzIntervalCaps=FspR7EqlzIntervalCaps, crsConnDataChannelSpacing=crsConnDataChannelSpacing, connectionWdmDataNetworkElementPosition=connectionWdmDataNetworkElementPosition, deployProvTifInputCapInvertTifInputLogic=deployProvTifInputCapInvertTifInputLogic, alarmLosAttProgress=alarmLosAttProgress, tunnelEthDataErrorCodeMajor=tunnelEthDataErrorCodeMajor, deployProvPortBindingRemoteTnaMask=deployProvPortBindingRemoteTnaMask, currentPhysConv1dayES=currentPhysConv1dayES, FspR7SnmpSecuLevelCaps=FspR7SnmpSecuLevelCaps, transientCopyFileConnectionFail=transientCopyFileConnectionFail, intervalPhysPerfSignalToNoiseRatio15minTable=intervalPhysPerfSignalToNoiseRatio15minTable, deployProvIfBitrate=deployProvIfBitrate, intervalRoundTripDelay15minHigh=intervalRoundTripDelay15minHigh, tunnelWdmDataToNodeIp=tunnelWdmDataToNodeIp, FspR7DispersionModesCaps=FspR7DispersionModesCaps, entityObjectChange=entityObjectChange, alarmPayloadMismatch=alarmPayloadMismatch, FspR7DCFiberType=FspR7DCFiberType, opticalIfConfigTestPrbsRcvMode=opticalIfConfigTestPrbsRcvMode, intervalGfpSublayer1dayNumber=intervalGfpSublayer1dayNumber, intervalSonetHoPath1dayCV=intervalSonetHoPath1dayCV, deployProvIfCapLanAid=deployProvIfCapLanAid, lanIpDataOscmMembers=lanIpDataOscmMembers, farEndIfDiagnosticsTable=farEndIfDiagnosticsTable, intervalPhysPerfPumpPwr1dayNumber=intervalPhysPerfPumpPwr1dayNumber, sts3callocatedTable=sts3callocatedTable, vs0allocatedClassInstanceNumber=vs0allocatedClassInstanceNumber, deployProvControlPlaneEthNaasMaxSize=deployProvControlPlaneEthNaasMaxSize, intervalRoundTripDelay1dayLow=intervalRoundTripDelay1dayLow, currentEthTx1dayEntry=currentEthTx1dayEntry, deployProvPortBindingDefaultsEntry=deployProvPortBindingDefaultsEntry, deployProvApsPeerAid=deployProvApsPeerAid, teUnnumLinkWdmDataNodeIp=teUnnumLinkWdmDataNodeIp, currentSonetLoPath15minCV=currentSonetLoPath15minCV, controlPlaneWdmConfigTedbRouterId=controlPlaneWdmConfigTedbRouterId, intervalFarEndPhysPerfOpticalOutputPwr15minEntry=intervalFarEndPhysPerfOpticalOutputPwr15minEntry, intervalDefectSeconds1dayValidFlag=intervalDefectSeconds1dayValidFlag, controlPlaneEthDataCmAlias=controlPlaneEthDataCmAlias, deployProvConnStdCapToEntry=deployProvConnStdCapToEntry, thresholdOtuFecSublayerEntry=thresholdOtuFecSublayerEntry, deployProvIfCapSigDegPeriodOduTcmB=deployProvIfCapSigDegPeriodOduTcmB, deployProvIfSigDegPeriodOdu=deployProvIfSigDegPeriodOdu, deployProvTifOutputRowStatus=deployProvTifOutputRowStatus, deployProvDcnDefaultsRowStatus=deployProvDcnDefaultsRowStatus, deployProvControlPlaneEthCapPcConfigFlag=deployProvControlPlaneEthCapPcConfigFlag, opticalIfDataTributaryFreeSlotNo=opticalIfDataTributaryFreeSlotNo, opticalIfDataFunction=opticalIfDataFunction, controlPlaneOtnConfigNaasTraceDetail=controlPlaneOtnConfigNaasTraceDetail, currentL2EthRx1dayBytesFrames256Rcv=currentL2EthRx1dayBytesFrames256Rcv, deployProvApsCapSDswitching=deployProvApsCapSDswitching, intervalPmSnapshotValue=intervalPmSnapshotValue, currentDefectSeconds1dayDS=currentDefectSeconds1dayDS, farEndIfDiagnosticsInputPower=farEndIfDiagnosticsInputPower, deployProvIfBehaviour=deployProvIfBehaviour, intervalPhysPerfCarrierFreqOffset1dayHigh=intervalPhysPerfCarrierFreqOffset1dayHigh, deployProvVchChannelCapCir=deployProvVchChannelCapCir, deployProvLanDefaultsIpMask=deployProvLanDefaultsIpMask, deployProvTunnelEthDefaultsTunnelType=deployProvTunnelEthDefaultsTunnelType, pathOtnDataPathType=pathOtnDataPathType, crsConnDeployProvDefaultsRedLineState=crsConnDeployProvDefaultsRedLineState, controlPlaneOtnEntityStateCapAdmin=controlPlaneOtnEntityStateCapAdmin, alarmFwpMismatchDownloadServiceAffecting=alarmFwpMismatchDownloadServiceAffecting, controlPlaneEntityStateCapTable=controlPlaneEntityStateCapTable, deployProvModuleDefaultsDeploy=deployProvModuleDefaultsDeploy, deployProvTunnelWdmCapTunnelTemplate=deployProvTunnelWdmCapTunnelTemplate, changeServiceDeployProvIfCapSigDegPeriodOduTcmA=changeServiceDeployProvIfCapSigDegPeriodOduTcmA, controlPlaneEthConfigRaTraceDetail=controlPlaneEthConfigRaTraceDetail, deployProvTunnelOtnConnectionDirection=deployProvTunnelOtnConnectionDirection, currentPhysConvHighSpeed15minEntry=currentPhysConvHighSpeed15minEntry, intervalSubAggregate15minSES=intervalSubAggregate15minSES, changeServiceDeployProvIfTcmALevel=changeServiceDeployProvIfTcmALevel, tnaMapDataEntry=tnaMapDataEntry, deployProvPlugDefaultsLoopbackAttenuation=deployProvPlugDefaultsLoopbackAttenuation, intervalFarEndPhysPerfOpticalInputPwr15minLow=intervalFarEndPhysPerfOpticalInputPwr15minLow, alarmOpuClientSignalFail=alarmOpuClientSignalFail, intervalPhysPerfCarrierFreqOffset1weekEntry=intervalPhysPerfCarrierFreqOffset1weekEntry, currentSonetLine1dayCV=currentSonetLine1dayCV, transientThres1DayExceededPhysConvDE=transientThres1DayExceededPhysConvDE, neSystemId=neSystemId, intervalPhysPerfEstimatedSignalGain15minHigh=intervalPhysPerfEstimatedSignalGain15minHigh, intervalPhysPerfOpticalInputPwr15minValidFlag=intervalPhysPerfOpticalInputPwr15minValidFlag, deployProvTunnelWdmCapEntry=deployProvTunnelWdmCapEntry, deployProvControlPlaneEthCapRmTraceTarget=deployProvControlPlaneEthCapRmTraceTarget, changeServiceDeployProvIfCapFunction=changeServiceDeployProvIfCapFunction, deployProvTunnelEthToNodeIp=deployProvTunnelEthToNodeIp, thresholdFarEndPhysPerfCapTable=thresholdFarEndPhysPerfCapTable, deployProvControlPlaneWdmCtmRetryWait=deployProvControlPlaneWdmCtmRetryWait, alarmThres15MinExceededGfpCHEC=alarmThres15MinExceededGfpCHEC, inventoryCpOtnDownDataEntry=inventoryCpOtnDownDataEntry, authTrapStatus=authTrapStatus, deployProvPortBindingCapRemoteNodeIp=deployProvPortBindingCapRemoteNodeIp, routingIpTable=routingIpTable, controlPlaneOtnConfigCmCrankBackTimeout=controlPlaneOtnConfigCmCrankBackTimeout, intervalGfpSublayer1dayCoreHecCorrectedFrames=intervalGfpSublayer1dayCoreHecCorrectedFrames, teUnnumLinkWdmDataTeLinkId=teUnnumLinkWdmDataTeLinkId, FspR7ManualAutoCaps=FspR7ManualAutoCaps, changeServiceDeployProvIfDefaultsTerminationLevel=changeServiceDeployProvIfDefaultsTerminationLevel, deployProvControlPlaneWdmRsvpMaxExpRecoveryTime=deployProvControlPlaneWdmRsvpMaxExpRecoveryTime, currentOtuFec1daySES=currentOtuFec1daySES, currentEthRxHighSpeed15minBytes=currentEthRxHighSpeed15minBytes, alarmThres15MinExceededFecBERCE=alarmThres15MinExceededFecBERCE, deployProvModuleCapAdmin=deployProvModuleCapAdmin, intervalPhysPerfSignalToNoiseRatio1dayValidFlag=intervalPhysPerfSignalToNoiseRatio1dayValidFlag, deployProvLogicalIfDefaultsDeadInterval=deployProvLogicalIfDefaultsDeadInterval, inactiveRoutingIpRouteType=inactiveRoutingIpRouteType, controlPlaneWdmEntityStateOper=controlPlaneWdmEntityStateOper, pathElementWdmDataComputedOnsrReverse=pathElementWdmDataComputedOnsrReverse, currentL2EthTx1dayBytesFrames1519Trmt=currentL2EthTx1dayBytesFrames1519Trmt, opticalIfDataWdmChannel=opticalIfDataWdmChannel, controlPlaneWdmConfigCtmShutdownTimeout=controlPlaneWdmConfigCtmShutdownTimeout, deployProvTunnelWdmCapToNodeIp=deployProvTunnelWdmCapToNodeIp, deployProvVchChannelDefaultsBundle=deployProvVchChannelDefaultsBundle, transientThres1DayExceededOduTcmCUAS=transientThres1DayExceededOduTcmCUAS, deployProvTifOutputForceDestroy=deployProvTifOutputForceDestroy, deployProvModuleGainRange=deployProvModuleGainRange, FspR7SecurityModeCaps=FspR7SecurityModeCaps, connectionEthDataFromTid=connectionEthDataFromTid, intervalPhysPerfCurrent15minTable=intervalPhysPerfCurrent15minTable, intervalOduTcmC15minTable=intervalOduTcmC15minTable, connectionOtnDataModificationState=connectionOtnDataModificationState, intervalSonetSect15minTable=intervalSonetSect15minTable, intervalGfpfr15minNumber=intervalGfpfr15minNumber, deployProvControlPlaneEthCapCdResyncTimeout=deployProvControlPlaneEthCapCdResyncTimeout, transientDay1RecordsAvailable=transientDay1RecordsAvailable, connectionOtnDataEntry=connectionOtnDataEntry, deployProvControlPlaneOtnCapCmCrankBackTimeout=deployProvControlPlaneOtnCapCmCrankBackTimeout, knownHostEntry=knownHostEntry, deployProvTunnelOtnCapTable=deployProvTunnelOtnCapTable, currentPhysConvHighSpeed1dayElapsedTime=currentPhysConvHighSpeed1dayElapsedTime, intervalEthRx3HS1dayFragmentFramesRcv=intervalEthRx3HS1dayFragmentFramesRcv, interfaceConfigCapDispersionOperation=interfaceConfigCapDispersionOperation, deployProvIfOpticalSetPoint=deployProvIfOpticalSetPoint, portBindingLifAidValue=portBindingLifAidValue, f7eqpFcu7hu=f7eqpFcu7hu, intervalPhysPerfCurrentOscGain1dayHigh=intervalPhysPerfCurrentOscGain1dayHigh, deployProvControlPlaneWdmNaasConfigFlag=deployProvControlPlaneWdmNaasConfigFlag, thresholdPhysPerfCapBrPwrReceivedHighThres=thresholdPhysPerfCapBrPwrReceivedHighThres, deployProvIfTraceTransmitSapiOduTcmC=deployProvIfTraceTransmitSapiOduTcmC, tunnelOtnConfigMonitorEntities=tunnelOtnConfigMonitorEntities, connectionOtnDataDestinationTna=connectionOtnDataDestinationTna, intervalPhysPerfCurrent1weekTable=intervalPhysPerfCurrent1weekTable, alarmOpenConnectionIndicationOduTcmB=alarmOpenConnectionIndicationOduTcmB, FspR7LaserOffDelayTime=FspR7LaserOffDelayTime, deployProvPortBindingLifAidCapsEntry=deployProvPortBindingLifAidCapsEntry, remoteAlarmCpDataEntry=remoteAlarmCpDataEntry, deployProvPortBindingCapRemoteTnaMask=deployProvPortBindingCapRemoteTnaMask, ntpSysCurrentConditionTimeStamp=ntpSysCurrentConditionTimeStamp, thresholdPhysConvTxHighSpeedSETXHighThres1day=thresholdPhysConvTxHighSpeedSETXHighThres1day, deployProvTunnelWdmConnectionDirection=deployProvTunnelWdmConnectionDirection, tunnelWdmDataOifUni=tunnelWdmDataOifUni, deployProvIfDefaultsLagPortType=deployProvIfDefaultsLagPortType, currentSonetHoPath1dayES=currentSonetHoPath1dayES, FspR7BERThresholdCaps=FspR7BERThresholdCaps, shelfInfoOscChannel=shelfInfoOscChannel, tunnelOtnDataToNodeIp=tunnelOtnDataToNodeIp, transientFarEndDyingGasp=transientFarEndDyingGasp, snmpAgentStateChanged=snmpAgentStateChanged, f7eqp1csmuG=f7eqp1csmuG, changeServiceDeployProvIfDefaultsAprHighThreshold=changeServiceDeployProvIfDefaultsAprHighThreshold, ospfConfigEntry=ospfConfigEntry, intervalFarEndPhysPerfOpticalOutputPwr1dayTimeStamp=intervalFarEndPhysPerfOpticalOutputPwr1dayTimeStamp, connectionOtnDataFromNodeIp=connectionOtnDataFromNodeIp, ntpTimeZoneCapsValue=ntpTimeZoneCapsValue, deployProvIfDefaultsForceDestroy=deployProvIfDefaultsForceDestroy, currentEthRx15minPauseFrames=currentEthRx15minPauseFrames, alarmThres15MinExceededFecES=alarmThres15MinExceededFecES, FspR7TypeConnection=FspR7TypeConnection, deployProvLogicalIfIpAddrMask=deployProvLogicalIfIpAddrMask, deployProvControlPlaneOtnNaasConfigFlag=deployProvControlPlaneOtnNaasConfigFlag, changeServiceDeployProvIfCapSigDegThresOduTcmA=changeServiceDeployProvIfCapSigDegThresOduTcmA, neighborDiscoveryDataFarEndPortAid=neighborDiscoveryDataFarEndPortAid, controlPlaneEthConfigRsvpMaxExpRecoveryTime=controlPlaneEthConfigRsvpMaxExpRecoveryTime, deployProvControlPlaneWdmDefaultsRmTraceDetail=deployProvControlPlaneWdmDefaultsRmTraceDetail, intervalPhysPerfCurrentOscGain1weekTable=intervalPhysPerfCurrentOscGain1weekTable, intervalPhysPerfPumpPwr15minTable=intervalPhysPerfPumpPwr15minTable, deployProvIfDefaultsAutonegotiation=deployProvIfDefaultsAutonegotiation, intervalEthRx3HS1dayBytesFrames512Rcv=intervalEthRx3HS1dayBytesFrames512Rcv, FspR7TiltSetCaps=FspR7TiltSetCaps, intervalEthRxHighSpeed15minValidFlag=intervalEthRxHighSpeed15minValidFlag, opticalIfConfigForceFwdAsePilotOn=opticalIfConfigForceFwdAsePilotOn, deployProvLanOspf=deployProvLanOspf, deployProvTunnelEthToAid=deployProvTunnelEthToAid, apsProtGroupStatusProtectionMech=apsProtGroupStatusProtectionMech, intervalPhysPerfCurrent1dayEntry=intervalPhysPerfCurrent1dayEntry, channelTrace=channelTrace, deployProvLogicalCpIfAlias=deployProvLogicalCpIfAlias, deployProvTunnelOtnRowStatus=deployProvTunnelOtnRowStatus, conditionSeverityType=conditionSeverityType, fspUserManagementTl1TimeoutAvailable=fspUserManagementTl1TimeoutAvailable, deployProvLogicalCpIfDefaultsIpAddrMask=deployProvLogicalCpIfDefaultsIpAddrMask, deployProvTunnelEthCapTunnelNo=deployProvTunnelEthCapTunnelNo, FspR7InvertTelemetryInputLogic=FspR7InvertTelemetryInputLogic, alarmThres15MinExceededOduBbe=alarmThres15MinExceededOduBbe, deployProvIfCapTraceExpectedOtu=deployProvIfCapTraceExpectedOtu, intervalPhysConv15minES=intervalPhysConv15minES, intervalEthRx3HS1dayTable=intervalEthRx3HS1dayTable, crsConnUnusedFromPointsEntry=crsConnUnusedFromPointsEntry, inventoryCpEthCrsDownDataIndexEthTo=inventoryCpEthCrsDownDataIndexEthTo, deployProvIfSigDegThresSonetSection=deployProvIfSigDegThresSonetSection, intervalGfpfrSublayer1dayTable=intervalGfpfrSublayer1dayTable, currentL2EthRx1dayEntry=currentL2EthRx1dayEntry, deployProvExChannelChromaticDispersionTx=deployProvExChannelChromaticDispersionTx, vtpEntityDataConnEqptState=vtpEntityDataConnEqptState, intervalPhysPerfOlmTxLineAtt1dayMean=intervalPhysPerfOlmTxLineAtt1dayMean, deployProvTunnelWdmDefaultsFromAid=deployProvTunnelWdmDefaultsFromAid, deployProvIfCapFunction=deployProvIfCapFunction, pathElementWdmDataNodeIpMonitor=pathElementWdmDataNodeIpMonitor, intervalPhysPerfOlmTxLineAtt1weekMean=intervalPhysPerfOlmTxLineAtt1weekMean, deployProvTunnelWdmReversionType=deployProvTunnelWdmReversionType, currentEthRx3HS1dayCrcFrames=currentEthRx3HS1dayCrcFrames, intervalEthTx15minCrcFramesEgress=intervalEthTx15minCrcFramesEgress, intervalPhysPerfEstimatedSignalGain15minNumber=intervalPhysPerfEstimatedSignalGain15minNumber, transientAlarmProfileActivation=transientAlarmProfileActivation, tunnelEthConfigEntry=tunnelEthConfigEntry, crsConnDeployProvEntry=crsConnDeployProvEntry, opticalIfConfigOscOpticalSetpoint=opticalIfConfigOscOpticalSetpoint, teRouterDataNodeTid=teRouterDataNodeTid, tunnelEthDataFacilityType=tunnelEthDataFacilityType, opticalIfConfigCapFiberBrand=opticalIfConfigCapFiberBrand, transientNtpSrvSyncEnded=transientNtpSrvSyncEnded, inventoryCpEthUpFlowDataIndexEth=inventoryCpEthUpFlowDataIndexEth, deployProvIfDefaultsTerminationLevel=deployProvIfDefaultsTerminationLevel, thresholdOtuFecESHighThres15min=thresholdOtuFecESHighThres15min, intervalGfp15minNumber=intervalGfp15minNumber, deployProvIfUtag=deployProvIfUtag, thresholdEthTxCrcFramesEgressHighThres15Min=thresholdEthTxCrcFramesEgressHighThres15Min, pathElementOtnDataEntry=pathElementOtnDataEntry, intervalPhysPerfLaserBiasCurrentNormalized1dayLow=intervalPhysPerfLaserBiasCurrentNormalized1dayLow, intervalPhysPerfOpticalOutputPwr1weekNumber=intervalPhysPerfOpticalOutputPwr1weekNumber, intervalPhysPerfLaserBiasCurrentNormalized1dayTimeStamp=intervalPhysPerfLaserBiasCurrentNormalized1dayTimeStamp, deployProvModuleCapSupply=deployProvModuleCapSupply)
mibBuilder.exportSymbols("FspR7-MIB", logicalCpIfDataFarEndLifId=logicalCpIfDataFarEndLifId, crsConnDataCrsType=crsConnDataCrsType, deployProvTunnelWdmCapRestorationType=deployProvTunnelWdmCapRestorationType, teUnnumLinkEthDataSynchronization=teUnnumLinkEthDataSynchronization, deployProvExChannelDefaultsType=deployProvExChannelDefaultsType, crsConnDataTable=crsConnDataTable, deployProvTunnelWdmCapRestorationPathsComputed=deployProvTunnelWdmCapRestorationPathsComputed, intervalPhysPerfCurrentOscGain1dayTable=intervalPhysPerfCurrentOscGain1dayTable, intervalPhysPerfSignalToNoiseRatio1dayMean=intervalPhysPerfSignalToNoiseRatio1dayMean, vs0allocatedContainer=vs0allocatedContainer, controlPlaneOtnDataCdbAlias=controlPlaneOtnDataCdbAlias, intervalPhysConv1dayES=intervalPhysConv1dayES, deployProvControlPlaneEthPcTraceDetail=deployProvControlPlaneEthPcTraceDetail, intervalPhysPerfOscPwr1weekValidFlag=intervalPhysPerfOscPwr1weekValidFlag, currentEthRx1dayEntry=currentEthRx1dayEntry, deployProvPortBindingLayer=deployProvPortBindingLayer, deployProvControlPlaneEthDefaultsCtmConfigFlag=deployProvControlPlaneEthDefaultsCtmConfigFlag, facilityAttributeValueChange=facilityAttributeValueChange, intervalDispersionCompensation1dayValidFlag=intervalDispersionCompensation1dayValidFlag, deployProvLogicalCpIfDefaultsAuthType=deployProvLogicalCpIfDefaultsAuthType, deployProvPathElementOtnCapDownTributaryODTUType=deployProvPathElementOtnCapDownTributaryODTUType, controlPlaneWdmConfigTedbMinAdvertWait=controlPlaneWdmConfigTedbMinAdvertWait, intervalL2EthTx15minBytesFrames128Trmt=intervalL2EthTx15minBytesFrames128Trmt, deployProvLogicalIfDefaultsAlias=deployProvLogicalIfDefaultsAlias, f7eqpF2kSh6hu=f7eqpF2kSh6hu, deployProvTunnelOtnCapFacilityType=deployProvTunnelOtnCapFacilityType, intervalOduTcmA15minTimeStamp=intervalOduTcmA15minTimeStamp, currentL2EthTx15minBytesFrames1519Trmt=currentL2EthTx15minBytesFrames1519Trmt, intervalEthRxHighSpeed15minTimeStamp=intervalEthRxHighSpeed15minTimeStamp, vchDataVcType=vchDataVcType, knownHostTable=knownHostTable, controlPlaneWdmConfigCtmMaximumRetryWait=controlPlaneWdmConfigCtmMaximumRetryWait, intervalFarEndPhysPerfOpticalOutputPwr1dayNumber=intervalFarEndPhysPerfOpticalOutputPwr1dayNumber, pathElementWdmDataPathId=pathElementWdmDataPathId, intervalSubAggregate15minCrc=intervalSubAggregate15minCrc, intervalSonetHoPath15minUAS=intervalSonetHoPath15minUAS, intervalOduTcmC1dayTimeStamp=intervalOduTcmC1dayTimeStamp, FspR7SignalMappingCaps=FspR7SignalMappingCaps, deployProvPppIpCapBitrate=deployProvPppIpCapBitrate, changeServiceDeployProvIfDefaultsOpuPayloadType=changeServiceDeployProvIfDefaultsOpuPayloadType, deployProvVchChannelCapForceDestroy=deployProvVchChannelCapForceDestroy, ntpServerTest=ntpServerTest, currentGfpfr1dayEntry=currentGfpfr1dayEntry, deployProvTunnelEthCapTunnelType=deployProvTunnelEthCapTunnelType, transientNtpSrvTestSuccessed=transientNtpSrvTestSuccessed, capabilityDataDescription=capabilityDataDescription, deployProvExChannelLineCoding=deployProvExChannelLineCoding, currentPhysConvCombined1dayEntry=currentPhysConvCombined1dayEntry, deployProvPathElementEthCapRowStatus=deployProvPathElementEthCapRowStatus, alarmEncryptionModuleCryPasswdError=alarmEncryptionModuleCryPasswdError, intervalSonetSect1dayEntry=intervalSonetSect1dayEntry, currentEthRx15minElapsedTime=currentEthRx15minElapsedTime, changeServiceDeployProvIfDefaultsTcmCLevel=changeServiceDeployProvIfDefaultsTcmCLevel, alarmPumpLaser3TempTooLow=alarmPumpLaser3TempTooLow, inventoryCpEthCrsUpDataNumber=inventoryCpEthCrsUpDataNumber, controlPlaneEthConfigRmTraceDetail=controlPlaneEthConfigRmTraceDetail, pathElementEthDataLifIp=pathElementEthDataLifIp, currentEthRx3HS1dayUndersizedFramesRcv=currentEthRx3HS1dayUndersizedFramesRcv, thresholdOtuFecSublayerCEHighThres1day=thresholdOtuFecSublayerCEHighThres1day, opticalIfDataTributaryAssignedSlotNo=opticalIfDataTributaryAssignedSlotNo, intervalOtu15minEntry=intervalOtu15minEntry, intervalFarEndPhysPerfOpticalInputPwr1weekMean=intervalFarEndPhysPerfOpticalInputPwr1weekMean, deployProvVchChannelCapAdmin=deployProvVchChannelCapAdmin, eRoadmDataTable=eRoadmDataTable, currentPhysConvCombined1dayElapsedTime=currentPhysConvCombined1dayElapsedTime, moduleDataTable=moduleDataTable, opticalIfConfigLossAttenuation=opticalIfConfigLossAttenuation, deployProvIfDefaultsDisparityCorrection=deployProvIfDefaultsDisparityCorrection, FspR7DispersionOperationCaps=FspR7DispersionOperationCaps, FspR7CpAffinityInclusionCaps=FspR7CpAffinityInclusionCaps, deployProvControlPlaneOtnCapNaasMaxSize=deployProvControlPlaneOtnCapNaasMaxSize, alarmUPortFailure=alarmUPortFailure, FspR7LagIdFend=FspR7LagIdFend, thresholdPhysPerfCapAttTxHigh=thresholdPhysPerfCapAttTxHigh, ntpSrvCurrentConditionTimeStamp=ntpSrvCurrentConditionTimeStamp, intervalPhysPerfChromaticDispersion1dayHigh=intervalPhysPerfChromaticDispersion1dayHigh, transientWaitToRevert=transientWaitToRevert, deployProvPppIpAreaId=deployProvPppIpAreaId, deployProvPlugLoopbackAttenuation=deployProvPlugLoopbackAttenuation, deployProvControlPlaneOtnDefaultsCmAlarmActivationTime=deployProvControlPlaneOtnDefaultsCmAlarmActivationTime, currentSonetHoPath15minElapsedTime=currentSonetHoPath15minElapsedTime, thresholdSonetSectCVHighThres15min=thresholdSonetSectCVHighThres15min, intervalPhysPerfOlmTxLineAtt1weekTable=intervalPhysPerfOlmTxLineAtt1weekTable, FspR7PortRoleCaps=FspR7PortRoleCaps, deployProvIfDefaultsUtag=deployProvIfDefaultsUtag, changeServiceDeployProvIfBehaviour=changeServiceDeployProvIfBehaviour, thresholdOduTcmCSESHighThres15min=thresholdOduTcmCSESHighThres15min, ntpServerTestStatus=ntpServerTestStatus, deployProvPlugRowStatus=deployProvPlugRowStatus, intervalPhysPerfPumpPwr1weekHigh=intervalPhysPerfPumpPwr1weekHigh, logicalCpIfDataFendTeLinkAid=logicalCpIfDataFendTeLinkAid, intervalPhysConvHighSpeed1dayTimeStamp=intervalPhysConvHighSpeed1dayTimeStamp, connectionEthDataTunnelScope=connectionEthDataTunnelScope, intervalPhysPerfOscOpticalOutputPwr1weekEntry=intervalPhysPerfOscOpticalOutputPwr1weekEntry, transientThres1DayExceededSonetLineCV=transientThres1DayExceededSonetLineCV, controlPlaneEthDataPcAlias=controlPlaneEthDataPcAlias, currentSonetLoPath15minEntry=currentSonetLoPath15minEntry, deployProvIfRowStatus=deployProvIfRowStatus, transientThres1DayExceededFecBERCE=transientThres1DayExceededFecBERCE, intervalFarEndPhysPerfOpticalInputPwr1weekTimeStamp=intervalFarEndPhysPerfOpticalInputPwr1weekTimeStamp, f7FanUnitsFan=f7FanUnitsFan, alarmLossOfMultiFrameOtu=alarmLossOfMultiFrameOtu, deployProvLogicalIfDefaultsIpAddr=deployProvLogicalIfDefaultsIpAddr, teUnnumLinkWdmDataInfo=teUnnumLinkWdmDataInfo, intervalGfpfrSublayer1dayTHecDiscardedFrames=intervalGfpfrSublayer1dayTHecDiscardedFrames, farEndIfDataType=farEndIfDataType, gfpServiceDefBandwidth=gfpServiceDefBandwidth, deployProvCrsDcnLinkAidCapsIndex=deployProvCrsDcnLinkAidCapsIndex, deployProvPathElementWdmCapChannelDown=deployProvPathElementWdmCapChannelDown, deployProvExChannelMinimumOpticalPowerRcv=deployProvExChannelMinimumOpticalPowerRcv, transientNtpSrvSyncFailed=transientNtpSrvSyncFailed, intervalPhysPerfOpticalOutputPwr1dayEntry=intervalPhysPerfOpticalOutputPwr1dayEntry, vs1allocatedClassInstanceNumber=vs1allocatedClassInstanceNumber, intervalEthRxHighSpeed15minEntry=intervalEthRxHighSpeed15minEntry, FspR7SnmpHexString=FspR7SnmpHexString, FspR7ChannelNumber=FspR7ChannelNumber, intervalOduTcmA15minES=intervalOduTcmA15minES, transientRestorationCompleted=transientRestorationCompleted, currentOtuFec15minExCE=currentOtuFec15minExCE, deployProvPppIpCapDefaultGateway=deployProvPppIpCapDefaultGateway, deployProvIfDefaultsSigDegThresReceiver=deployProvIfDefaultsSigDegThresReceiver, intervalPhysPerfBackreflectionPwrRcv15minHigh=intervalPhysPerfBackreflectionPwrRcv15minHigh, thresholdOduTcmABbeHighThres15min=thresholdOduTcmABbeHighThres15min, intervalPhysPerfChromaticDispersion1weekTable=intervalPhysPerfChromaticDispersion1weekTable, apsProtFacilityConfigCapInhibitSwitchToWork=apsProtFacilityConfigCapInhibitSwitchToWork, deployProvControlPlaneEthCapCmFisFrsTimeout=deployProvControlPlaneEthCapCmFisFrsTimeout, alarmAutoShutdownSendingAisLine=alarmAutoShutdownSendingAisLine, intervalEthRx3HS1dayValidFlag=intervalEthRx3HS1dayValidFlag, FspR7FalseTrue=FspR7FalseTrue, intervalFarEndPhysPerfOpticalInputPwr1dayTimeStamp=intervalFarEndPhysPerfOpticalInputPwr1dayTimeStamp, deployProvTunnelOtnDefaultsAlias=deployProvTunnelOtnDefaultsAlias, intervalGfpfr15minValidFlag=intervalGfpfr15minValidFlag, intervalPhysConvTxHighSpeed1dayNumber=intervalPhysConvTxHighSpeed1dayNumber, deployProvModuleEdfaPwrOut=deployProvModuleEdfaPwrOut, deployProvConnNonStdCapFromEntry=deployProvConnNonStdCapFromEntry, deployProvTunnelWdmTunnelId=deployProvTunnelWdmTunnelId, transientThres1DayExceededPhysConvESTX=transientThres1DayExceededPhysConvESTX, neEqlzStartDate=neEqlzStartDate, logicalIfDataIpType=logicalIfDataIpType, deployProvControlPlaneOtnRsvpMaxExpRecoveryTime=deployProvControlPlaneOtnRsvpMaxExpRecoveryTime, intervalOduTcmC15minBbe=intervalOduTcmC15minBbe, opticalIfConfigCapDispersionMode=opticalIfConfigCapDispersionMode, inventoryCpWdmUpDataFacilities=inventoryCpWdmUpDataFacilities, alarmRamanPumpPwrTooHigh=alarmRamanPumpPwrTooHigh, deployProvIfTimModeSonetSection=deployProvIfTimModeSonetSection, deployProvControlPlaneEthEntry=deployProvControlPlaneEthEntry, deployProvPathElementOtnCapLifIp=deployProvPathElementOtnCapLifIp, logicalCpIfConfigRefreshMultiplier=logicalCpIfConfigRefreshMultiplier, currentOduTcmB15minSES=currentOduTcmB15minSES, apsProtGroupStatusProtectionIndex=apsProtGroupStatusProtectionIndex, FspR7GainRange=FspR7GainRange, intervalFarEndPhysPerfOpticalInputPwr15minNumber=intervalFarEndPhysPerfOpticalInputPwr15minNumber, thresholdOtuFecSublayerTable=thresholdOtuFecSublayerTable, deployProvControlPlaneWdmDefaultsTedbMaxSize=deployProvControlPlaneWdmDefaultsTedbMaxSize, deployProvApsCapForceDestroy=deployProvApsCapForceDestroy, intervalPhysConvTxHighSpeed15minCVTX=intervalPhysConvTxHighSpeed15minCVTX, ntpSysCurrentConditionType=ntpSysCurrentConditionType, interfaceConfigTable=interfaceConfigTable, deployProvShelfDefaultsType=deployProvShelfDefaultsType, intervalL2EthRx15minInterPackJunkBytesFramesRcv=intervalL2EthRx15minInterPackJunkBytesFramesRcv, deployProvPathEthDefaultsTable=deployProvPathEthDefaultsTable, wdmChannelModuleDataSuppClientPlugRates=wdmChannelModuleDataSuppClientPlugRates, neTopologyType=neTopologyType, deployProvModuleDefaultsTilt=deployProvModuleDefaultsTilt, deployProvOpticalLinkEntry=deployProvOpticalLinkEntry, intervalEthTx1dayTimeStamp=intervalEthTx1dayTimeStamp, crsConnWdmDataConn=crsConnWdmDataConn, deployProvControlPlaneOtnRaTraceDetail=deployProvControlPlaneOtnRaTraceDetail, thresholdEthRxCrcFramesHighThres1Day=thresholdEthRxCrcFramesHighThres1Day, deployProvControlPlaneWdmDefaultsCtmRetryWaitMultiplier=deployProvControlPlaneWdmDefaultsCtmRetryWaitMultiplier, deployProvCrsDcnCapEntry=deployProvCrsDcnCapEntry, tnaMapDataNodeIp=tnaMapDataNodeIp, deployProvVirtualOpticalChannelAlias=deployProvVirtualOpticalChannelAlias, conditionFilters=conditionFilters, deployProvControlPlaneEthRaAlarmActivationTime=deployProvControlPlaneEthRaAlarmActivationTime, deployProvControlPlaneOtnDefaultsCdbConfigFlag=deployProvControlPlaneOtnDefaultsCdbConfigFlag, FspR7StateConnection=FspR7StateConnection, deployProvControlPlaneEthCapNaasMaxSize=deployProvControlPlaneEthCapNaasMaxSize, intervalOtuFec1dayExNumber=intervalOtuFec1dayExNumber, deployProvControlPlaneOtnCapCdbMaxSize=deployProvControlPlaneOtnCapCdbMaxSize, thresholdPhysPerfAttRxHigh=thresholdPhysPerfAttRxHigh, FspR7FlowControlModeCaps=FspR7FlowControlModeCaps, deployProvShelfCapForceDestroy=deployProvShelfCapForceDestroy, transientThres1DayExceededOduTcmCES=transientThres1DayExceededOduTcmCES, apsProtGroupStatusProtectionType=apsProtGroupStatusProtectionType, f7STM16=f7STM16, alarmVoltageOutOfRange=alarmVoltageOutOfRange, neRackSize=neRackSize, FspR7Bitrate=FspR7Bitrate, alarmOscOpticalPowerControlFailLow=alarmOscOpticalPowerControlFailLow, deployProvPortBindingLocalTna=deployProvPortBindingLocalTna, pppDataProxyArp=pppDataProxyArp, deployProvIfDefaultsFunction=deployProvIfDefaultsFunction, moduleDataEntry=moduleDataEntry, changeServiceDeployProvIfCapSigDegThresSonetSection=changeServiceDeployProvIfCapSigDegThresSonetSection, deployProvPathWdmCapRowStatus=deployProvPathWdmCapRowStatus, FspR7DispersionCompensationCaps=FspR7DispersionCompensationCaps, moduleDataSerialPorts=moduleDataSerialPorts, deployProvControlPlaneOtnCdConfigFlag=deployProvControlPlaneOtnCdConfigFlag, transientThres1DayExceededOduTcmBSES=transientThres1DayExceededOduTcmBSES, intervalSubAggregate15minTimeStamp=intervalSubAggregate15minTimeStamp, deployProvCopyPathEthDefaultsSourcePathIndex=deployProvCopyPathEthDefaultsSourcePathIndex, intervalPhysConvCombined15minTable=intervalPhysConvCombined15minTable, tunnelOtnDataTunnelType=tunnelOtnDataTunnelType, deployProvPathElementOtnUpTributaryODTUType=deployProvPathElementOtnUpTributaryODTUType, deployProvModuleCapForceDestroy=deployProvModuleCapForceDestroy, intervalPhysConv15minEntry=intervalPhysConv15minEntry, deployProvLogicalIfCapEntry=deployProvLogicalIfCapEntry, deployProvCrsDcnForceDestroy=deployProvCrsDcnForceDestroy, deployProvShelfCapAdmin=deployProvShelfCapAdmin, syslogDataIpAddr=syslogDataIpAddr, alarmFarEndIpAddressUnknown=alarmFarEndIpAddressUnknown, intervalPhysPerfBackreflectionPwrRcv1weekHigh=intervalPhysPerfBackreflectionPwrRcv1weekHigh, intervalRoundTripDelay15minTable=intervalRoundTripDelay15minTable, teNumLinkEthDataFendNodeIp=teNumLinkEthDataFendNodeIp, deployProvIfCapBehaviour=deployProvIfCapBehaviour, ntpServerSyncStatus=ntpServerSyncStatus, deployProvExChannelBitrate=deployProvExChannelBitrate, deployProvIfCapTraceTransmitSapiOduTcmC=deployProvIfCapTraceTransmitSapiOduTcmC, intervalPhysPerfDiffGrDelay1weekMean=intervalPhysPerfDiffGrDelay1weekMean, ptpEntityDataSubBandProvision=ptpEntityDataSubBandProvision, transientLocalCopyMemFailVersionMismatch=transientLocalCopyMemFailVersionMismatch, syslogConfigEntry=syslogConfigEntry, alarmPrbsTrmtActivated=alarmPrbsTrmtActivated, inactiveRoutingIpMask=inactiveRoutingIpMask, deployProvIfCapCac=deployProvIfCapCac, eRoadmInfoInternalPlugRates=eRoadmInfoInternalPlugRates, deployProvControlPlaneWdmDefaultsRmConfigFlag=deployProvControlPlaneWdmDefaultsRmConfigFlag, FspR7PceModeCaps=FspR7PceModeCaps, thresholdPhysConvHighSpeedSEHighThres15min=thresholdPhysConvHighSpeedSEHighThres15min, deployProvShelfDefaultsSupply=deployProvShelfDefaultsSupply, deployProvLogicalCpIfCapTeAreaId=deployProvLogicalCpIfCapTeAreaId, deployProvConnNonStdCapToType=deployProvConnNonStdCapToType, thresholdSonetLoPathUASHighThres1day=thresholdSonetLoPathUASHighThres1day, crsConnDataEntry=crsConnDataEntry, deployProvLogicalIfDefaultsRowStatus=deployProvLogicalIfDefaultsRowStatus, pppDataEntry=pppDataEntry, opticalIfConfigCapTestPrbsRcvMode=opticalIfConfigCapTestPrbsRcvMode, intervalPhysPerfOlmTxLineAtt15minValidFlag=intervalPhysPerfOlmTxLineAtt15minValidFlag, intervalSonetLine1dayCV=intervalSonetLine1dayCV, forceDeployProvApsDefaultsDirection=forceDeployProvApsDefaultsDirection, intervalFarEndPhysPerfOpticalInputPwr1dayValidFlag=intervalFarEndPhysPerfOpticalInputPwr1dayValidFlag, deployProvIfCapTimModeOduTcmA=deployProvIfCapTimModeOduTcmA, deployProvControlPlaneWdmRmTraceTarget=deployProvControlPlaneWdmRmTraceTarget, crsConnDeployProvCapRowStatus=crsConnDeployProvCapRowStatus, intervalLatency15minHigh=intervalLatency15minHigh, deployProvLogicalIfDefaultsTable=deployProvLogicalIfDefaultsTable, changeServiceDeployProvIfIpMask=changeServiceDeployProvIfIpMask, deployProvIfDefaultsVariableGain=deployProvIfDefaultsVariableGain, deployProvControlPlaneEthCdResyncTimeout=deployProvControlPlaneEthCdResyncTimeout, neModel=neModel, neTimeZone=neTimeZone, equipmentRemoved=equipmentRemoved, eRoadmInfoChannel=eRoadmInfoChannel)
mibBuilder.exportSymbols("FspR7-MIB", inventoryCpWdmCrsUpDataAids=inventoryCpWdmCrsUpDataAids, alarmLossOfSequenceVCG=alarmLossOfSequenceVCG, deployProvModuleMapping=deployProvModuleMapping, deployProvControlPlaneEthDefaultsCtmSetupTimeout=deployProvControlPlaneEthDefaultsCtmSetupTimeout, intervalEthRxHighSpeed15minCrcFrames=intervalEthRxHighSpeed15minCrcFrames, intervalPhysPerfPumpPwr1dayTable=intervalPhysPerfPumpPwr1dayTable, intervalRoundTripDelay15minEntry=intervalRoundTripDelay15minEntry, f7eqp2Tcm2g5c=f7eqp2Tcm2g5c, f7eqpNcutif=f7eqpNcutif, changeServiceDeployProvIfTraceTransmitOpspOduTcmB=changeServiceDeployProvIfTraceTransmitOpspOduTcmB, dependenciesEntry=dependenciesEntry, currentOduTcmC15minSES=currentOduTcmC15minSES, deployProvPppIpCapBaud=deployProvPppIpCapBaud, intervalGfpfr1dayEntry=intervalGfpfr1dayEntry, transientThres1DayExceededOtuES=transientThres1DayExceededOtuES, currentSonetLine15minEntry=currentSonetLine15minEntry, intervalSonetSect15minSES=intervalSonetSect15minSES, currentOtu15minEntry=currentOtu15minEntry, intervalLinkAttenuation1weekTable=intervalLinkAttenuation1weekTable, thresholdOduTcmATable=thresholdOduTcmATable, moduleDataStages=moduleDataStages, connectionWdmDataToAid=connectionWdmDataToAid, deployProvLogicalCpIfCapFarEndNodeIp=deployProvLogicalCpIfCapFarEndNodeIp, deployProvPathElementWdmEntry=deployProvPathElementWdmEntry, logicalIfDataFacilityType=logicalIfDataFacilityType, intervalPhysPerfDiffGrDelay1dayMean=intervalPhysPerfDiffGrDelay1dayMean, thresholdOduTcmAUASHighThres1day=thresholdOduTcmAUASHighThres1day, thresholdPhysPerfPumpLaser2TempHighThres=thresholdPhysPerfPumpLaser2TempHighThres, ospfDataEntry=ospfDataEntry, deployProvControlPlaneEthRsvpMaxExpRecoveryTime=deployProvControlPlaneEthRsvpMaxExpRecoveryTime, intervalOtu1dayES=intervalOtu1dayES, deployProvLanEntry=deployProvLanEntry, changeServiceDeployProvIfDefaultsTraceTransmitOpspOdu=changeServiceDeployProvIfDefaultsTraceTransmitOpspOdu, opticalIfDataLagIdFend=opticalIfDataLagIdFend, intervalPhysPerfCarrierFreqOffset15minTimeStamp=intervalPhysPerfCarrierFreqOffset15minTimeStamp, thresholdOtuFecSublayerExCEHighThres15min=thresholdOtuFecSublayerExCEHighThres15min, deployProvIfDefaultsTilt=deployProvIfDefaultsTilt, deployProvLogicalCpIfCapPushedNendIpHeader=deployProvLogicalCpIfCapPushedNendIpHeader, intervalEthRx3HS1dayJabberFrameRcv=intervalEthRx3HS1dayJabberFrameRcv, controlPlaneEthEntityStateEntry=controlPlaneEthEntityStateEntry, changeServiceDeployProvIfType=changeServiceDeployProvIfType, deployProvIfTimModeOduTcmA=deployProvIfTimModeOduTcmA, deployProvApsApsType=deployProvApsApsType, deployProvControlPlaneOtnDefaultsCmCrankBackTimeout=deployProvControlPlaneOtnDefaultsCmCrankBackTimeout, authTrapLctIp=authTrapLctIp, intervalPhysPerfPumpPwr1dayEntry=intervalPhysPerfPumpPwr1dayEntry, intervalL2EthRx15minTimeStamp=intervalL2EthRx15minTimeStamp, ntpSrvConditionSeverityType=ntpSrvConditionSeverityType, deployProvControlPlaneEthNaasAdvertWait=deployProvControlPlaneEthNaasAdvertWait, changeServiceDeployProvIfAlsMode=changeServiceDeployProvIfAlsMode, intervalPhysPerfPumpPwr1dayMean=intervalPhysPerfPumpPwr1dayMean, intervalL2EthRx1dayValidFlag=intervalL2EthRx1dayValidFlag, currentPmSnapshotEntry=currentPmSnapshotEntry, currentEthRx3HS1dayElapsedTime=currentEthRx3HS1dayElapsedTime, intervalEthRx15minNumber=intervalEthRx15minNumber, f7eqpCustomc=f7eqpCustomc, entityCreation=entityCreation, farEndIfConfigCapLoopConfig=farEndIfConfigCapLoopConfig, intervalPhysPerfLaserBiasCurrentNormalized1weekEntry=intervalPhysPerfLaserBiasCurrentNormalized1weekEntry, ntpSrvCurrentConditionTable=ntpSrvCurrentConditionTable, thresholdPhysConvHighSpeedSEHighThres1day=thresholdPhysConvHighSpeedSEHighThres1day, currentPhysConv15minElapsedTime=currentPhysConv15minElapsedTime, deployProvCopyPathWdmDefaultsSourcePathIndex=deployProvCopyPathWdmDefaultsSourcePathIndex, crsConnDeployProvCapEntry=crsConnDeployProvCapEntry, eroadmIfDiagnosticsAttenuationVoa=eroadmIfDiagnosticsAttenuationVoa, FspR7ErrorFwdModeCaps=FspR7ErrorFwdModeCaps, currentSonetSect15minSEFS=currentSonetSect15minSEFS, FspR7TelemetryOutputCaps=FspR7TelemetryOutputCaps, intervalEthRxHighSpeed15minPauseFrames=intervalEthRxHighSpeed15minPauseFrames, deployProvLogicalCpIfDefaultsRetransmitInterval=deployProvLogicalCpIfDefaultsRetransmitInterval, inventoryCpWdmDownDataFacilities=inventoryCpWdmDownDataFacilities, f7eqpPsm955=f7eqpPsm955, currentEthTx15minCrcFramesEgress=currentEthTx15minCrcFramesEgress, alarmLoopbackError=alarmLoopbackError, intervalPhysPerfOlmTxLineAtt1weekLow=intervalPhysPerfOlmTxLineAtt1weekLow, alarmNtpSrvOosDsbld=alarmNtpSrvOosDsbld, deployProvExChannelCapChromaticDispersionRcv=deployProvExChannelCapChromaticDispersionRcv, intervalPhysPerfSignalToNoiseRatio15minEntry=intervalPhysPerfSignalToNoiseRatio15minEntry, transientLocalCopyMemFailDamagedConfFile=transientLocalCopyMemFailDamagedConfFile, alarmLossOsc=alarmLossOsc, intervalOdu15minNumber=intervalOdu15minNumber, thresholdOtuFecTable=thresholdOtuFecTable, FspR7FrameFormatCaps=FspR7FrameFormatCaps, teNumLinkWdmDataFendNodeIp=teNumLinkWdmDataFendNodeIp, deployProvIfDefaultsSignalDegradePeriod=deployProvIfDefaultsSignalDegradePeriod, transientCryptoAuthPasswdChanged=transientCryptoAuthPasswdChanged, deployProvIfDefaultsLanAid=deployProvIfDefaultsLanAid, deployProvControlPlaneEthDefaultsCtmTraceDetail=deployProvControlPlaneEthDefaultsCtmTraceDetail, intervalPhysPerfChromaticDispersion1weekHigh=intervalPhysPerfChromaticDispersion1weekHigh, controlPlaneOtnConfigTedbMinAdvertWait=controlPlaneOtnConfigTedbMinAdvertWait, transientThres1DayExceededSonetLineES=transientThres1DayExceededSonetLineES, deployProvLogicalCpIfFarEndNodeIp=deployProvLogicalCpIfFarEndNodeIp, thresholdEthRxDiscardedFramesHighThres1Day=thresholdEthRxDiscardedFramesHighThres1Day, thresholdPhysPerfCapConfigurableOpticalOutputPwrLow=thresholdPhysPerfCapConfigurableOpticalOutputPwrLow, intervalPhysPerfOlmRxLineAtt1dayMean=intervalPhysPerfOlmRxLineAtt1dayMean, tunnelEthDataConnectionDirection=tunnelEthDataConnectionDirection, deployProvControlPlaneOtnCapCdbDetail=deployProvControlPlaneOtnCapCdbDetail, controlPlaneWdmDataPcAlias=controlPlaneWdmDataPcAlias, deployProvControlPlaneEthDefaultsCtmRetryWait=deployProvControlPlaneEthDefaultsCtmRetryWait, thresholdGfpSublayerCoreHecCorrectedFramesHighThres15Min=thresholdGfpSublayerCoreHecCorrectedFramesHighThres15Min, forceDeployProvApsCapSDswitching=forceDeployProvApsCapSDswitching, vchConfigEntry=vchConfigEntry, intervalLatency1dayMean=intervalLatency1dayMean, deployProvModuleDefaultsSubBand=deployProvModuleDefaultsSubBand, intervalPmSnapshotParameter=intervalPmSnapshotParameter, intervalOduTcmA1dayTimeStamp=intervalOduTcmA1dayTimeStamp, alarmOpmAbnormalCondition=alarmOpmAbnormalCondition, connectionOtnDataBitrate=connectionOtnDataBitrate, thresholdGfpEntry=thresholdGfpEntry, pathOtnDataRole=pathOtnDataRole, sts3callocatedSequenceNumber=sts3callocatedSequenceNumber, thresholdPhysPerfPumpLaser4TempLowThres=thresholdPhysPerfPumpLaser4TempLowThres, intervalPhysPerfEstimatedSignalGain1dayEntry=intervalPhysPerfEstimatedSignalGain1dayEntry, deployProvModuleSupply=deployProvModuleSupply, deployProvTunnelOtnCapRestorationType=deployProvTunnelOtnCapRestorationType, opticalIfDiagLocalOscBiasLevel=opticalIfDiagLocalOscBiasLevel, currentL2EthRx15minBytesFrames65Rcv=currentL2EthRx15minBytesFrames65Rcv, changeServiceDeployProvIfTraceTransmitSapiOtu=changeServiceDeployProvIfTraceTransmitSapiOtu, moduleDiagnosticsEntry=moduleDiagnosticsEntry, intervalSonetSect15minES=intervalSonetSect15minES, deployProvIfSignalDegradePeriod=deployProvIfSignalDegradePeriod, deployProvIfTimModeOduTcmC=deployProvIfTimModeOduTcmC, crsConnDeployProvDefaultsTable=crsConnDeployProvDefaultsTable, transientAlpSettingStarted=transientAlpSettingStarted, deployProvTunnelEthDefaultsToAid=deployProvTunnelEthDefaultsToAid, deployProvShelfSupply=deployProvShelfSupply, alarmAutoShutdown=alarmAutoShutdown, changeServiceDeployProvIfDefaultsTraceExpectedSonetSection=changeServiceDeployProvIfDefaultsTraceExpectedSonetSection, alarmThres15MinExceededOduTcmBSES=alarmThres15MinExceededOduTcmBSES, deployProvIfDefaultsTimModeOduTcmA=deployProvIfDefaultsTimModeOduTcmA, alarmThres15MinExceededOduES=alarmThres15MinExceededOduES, intervalEthRxHighSpeed15minNumber=intervalEthRxHighSpeed15minNumber, deployProvTunnelEthDefaultsToTid=deployProvTunnelEthDefaultsToTid, currentEthTx15minBytes=currentEthTx15minBytes, deployProvControlPlaneEthCapTedbTraceDetail=deployProvControlPlaneEthCapTedbTraceDetail, deployProvLogicalCpIfDefaultsIpType=deployProvLogicalCpIfDefaultsIpType, deployProvCopyPathOtnDefaultsEntry=deployProvCopyPathOtnDefaultsEntry, currentEthRx3HS15minBytesFrames64Rcv=currentEthRx3HS15minBytesFrames64Rcv, transientTopologyDataInvalid=transientTopologyDataInvalid, alarmOpenConnectionIndicationOduTcmA=alarmOpenConnectionIndicationOduTcmA, wdmChannelModuleInventoryReach=wdmChannelModuleInventoryReach, deployProvModuleCapLagSysPrio=deployProvModuleCapLagSysPrio, intervalPhysPerfSignalToNoiseRatio1dayLow=intervalPhysPerfSignalToNoiseRatio1dayLow, changeServiceDeployProvIfSigDegThreshold=changeServiceDeployProvIfSigDegThreshold, intervalSonetLine1dayTimeStamp=intervalSonetLine1dayTimeStamp, changeServiceDeployProvIfCapAreaId=changeServiceDeployProvIfCapAreaId, changeServiceDeployProvIfCapTraceExpectedSonetSection=changeServiceDeployProvIfCapTraceExpectedSonetSection, f7eqp8tce2g5c=f7eqp8tce2g5c, intervalPhysPerfSignalToNoiseRatio1dayTable=intervalPhysPerfSignalToNoiseRatio1dayTable, thresholdPhysPerfLocalOscTempHighThres=thresholdPhysPerfLocalOscTempHighThres, alarmAmplifierAbnormal=alarmAmplifierAbnormal, teRouterDataTable=teRouterDataTable, deployProvIfCapLagPortType=deployProvIfCapLagPortType, intervalL2EthTx1dayBroadcastFramesTrmt=intervalL2EthTx1dayBroadcastFramesTrmt, thresholdOtuBbeHighThres1day=thresholdOtuBbeHighThres1day, deployProvIfCapVariableGain=deployProvIfCapVariableGain, alarmTopologyDataCalculationInProgress=alarmTopologyDataCalculationInProgress, startPmSnapshot=startPmSnapshot, teNumLinkOtnDataNodeIp=teNumLinkOtnDataNodeIp, dcnTopologyConfigEntry=dcnTopologyConfigEntry, thresholdOduTcmBOduTcmBBbeHighThres15min=thresholdOduTcmBOduTcmBBbeHighThres15min, changeServiceDeployProvIfCapBip=changeServiceDeployProvIfCapBip, eRoadmConfigTilt=eRoadmConfigTilt, intervalL2EthTx15minMulticastFramesTrmt=intervalL2EthTx15minMulticastFramesTrmt, intervalSonetLine15minSES=intervalSonetLine15minSES, currentPmSnapshotTable=currentPmSnapshotTable, FspR7EqlzAdminState=FspR7EqlzAdminState, vs1allocatedContainer=vs1allocatedContainer, deployProvIfTraceTransmitDapiOdu=deployProvIfTraceTransmitDapiOdu, deployProvIfCapAprHighThreshold=deployProvIfCapAprHighThreshold, deployProvIfCapSigDegThresOduTcmB=deployProvIfCapSigDegThresOduTcmB, deployProvIfChannelProvisioning=deployProvIfChannelProvisioning, forceDeployProvApsWorkingAid=forceDeployProvApsWorkingAid, tunnelWdmConfigRestorationPathsComputed=tunnelWdmConfigRestorationPathsComputed, deployProvShelfAdmin=deployProvShelfAdmin, forceDeployProvApsCapTable=forceDeployProvApsCapTable, FspR7PmReset=FspR7PmReset, opticalLinkConfigTable=opticalLinkConfigTable, deployProvIfDefaultsLaserOffDelayFunction=deployProvIfDefaultsLaserOffDelayFunction, pathElementEthDataTable=pathElementEthDataTable, currentConditionEntry=currentConditionEntry, intervalOdu1dayTable=intervalOdu1dayTable, controlPlaneEthConfigCdbConfigFlag=controlPlaneEthConfigCdbConfigFlag, intervalPhysPerfEstimatedSignalGain1dayNumber=intervalPhysPerfEstimatedSignalGain1dayNumber, deployProvIfLanAidCapsTable=deployProvIfLanAidCapsTable, opticalIfConfigOpuPayloadType=opticalIfConfigOpuPayloadType, FspR7OpuPayloadType=FspR7OpuPayloadType, deployProvIfFecType=deployProvIfFecType, neCpPcsPriority=neCpPcsPriority, FspR7CpTie=FspR7CpTie, FspR7CpRestorationModeCaps=FspR7CpRestorationModeCaps, currentEthRx1dayTable=currentEthRx1dayTable, intervalPhysPerfCarrierFreqOffset1dayMean=intervalPhysPerfCarrierFreqOffset1dayMean, deployProvIfCapPortMode=deployProvIfCapPortMode, intervalPhysPerfCarrierFreqOffset1weekValidFlag=intervalPhysPerfCarrierFreqOffset1weekValidFlag, intervalDispersionCompensation1dayHigh=intervalDispersionCompensation1dayHigh, deployProvIfDefaultsDispersionMode=deployProvIfDefaultsDispersionMode, currentConditionType=currentConditionType, deployProvControlPlaneWdmRsvpMaxExpRestartTime=deployProvControlPlaneWdmRsvpMaxExpRestartTime, opticalIfDiagChromaticDispersion=opticalIfDiagChromaticDispersion, alarmPayloadMismatchLowerOrderPath=alarmPayloadMismatchLowerOrderPath, routingIpRoutingMetric=routingIpRoutingMetric, neEqlzInterval=neEqlzInterval, changeServiceDeployProvIfCapIpMask=changeServiceDeployProvIfCapIpMask, opticalFilterIfDataMultiplexLevel=opticalFilterIfDataMultiplexLevel, deployProvControlPlaneEthCapCtmSetupTimeout=deployProvControlPlaneEthCapCtmSetupTimeout, deployProvControlPlaneEthDefaultsRmTraceTarget=deployProvControlPlaneEthDefaultsRmTraceTarget, deployProvVchChannelTraceTransmitOpspOdu=deployProvVchChannelTraceTransmitOpspOdu, controlPlaneEthDataCdbAlias=controlPlaneEthDataCdbAlias, apsConfigWaitToRestore=apsConfigWaitToRestore, controlPlaneEthConfigNaasAdvertWait=controlPlaneEthConfigNaasAdvertWait, farEndPlugDataAdmin=farEndPlugDataAdmin, currentConditionAffect=currentConditionAffect, intervalLinkAttenuation15minNumber=intervalLinkAttenuation15minNumber, deployProvDcnDefaultsAdmin=deployProvDcnDefaultsAdmin, currentEthRxHighSpeed15minGoodFrames=currentEthRxHighSpeed15minGoodFrames, FspR7AutoThresResetCaps=FspR7AutoThresResetCaps, deployProvIfLacpMode=deployProvIfLacpMode, intervalPhysPerfCurrent1dayTable=intervalPhysPerfCurrent1dayTable, deployProvExChannelCapChromaticDispersionTx=deployProvExChannelCapChromaticDispersionTx, controlPlaneWdmEntityStateAdmin=controlPlaneWdmEntityStateAdmin, deployProvIfDefaultsBand=deployProvIfDefaultsBand, alarmProfileTable=alarmProfileTable, thresholdEthRxHighSpeedPauseFramesHighThres15Min=thresholdEthRxHighSpeedPauseFramesHighThres15Min, deployProvIfDefaultsFiberBrand=deployProvIfDefaultsFiberBrand, deployProvPathOtnCapEntry=deployProvPathOtnCapEntry, intervalL2EthRx1dayBytesFrames256Rcv=intervalL2EthRx1dayBytesFrames256Rcv, interfaceDataCir=interfaceDataCir, currentGfp1dayCoreHecCorrectedFrames=currentGfp1dayCoreHecCorrectedFrames, intervalPhysPerfChromaticDispersion1dayTable=intervalPhysPerfChromaticDispersion1dayTable, capabilityDataType=capabilityDataType, deployProvTunnelWdmCapRestorationMode=deployProvTunnelWdmCapRestorationMode, deployProvTunnelWdmTunnelTemplate=deployProvTunnelWdmTunnelTemplate, deployProvControlPlaneOtnNodeNameSyntax=deployProvControlPlaneOtnNodeNameSyntax, eRoadmConfigInitiateEqualization=eRoadmConfigInitiateEqualization, configAndStatusMIB=configAndStatusMIB, deployProvIfTimModeOtu=deployProvIfTimModeOtu, controlPlaneOtnConfigNaasAdvertWait=controlPlaneOtnConfigNaasAdvertWait, FspR7NtpSyncStatus=FspR7NtpSyncStatus, thresholdEthRxCrcFramesHighThres15Min=thresholdEthRxCrcFramesHighThres15Min, alarmAutoShutdownSendingAisOpu=alarmAutoShutdownSendingAisOpu, FspR7CpCompState=FspR7CpCompState, intervalPhysPerfPumpPwr1dayHigh=intervalPhysPerfPumpPwr1dayHigh, f7eqp2Tca2g5s=f7eqp2Tca2g5s, farEndPlugDataFiberType=farEndPlugDataFiberType, teUnnumLinkOtnDataSynchronization=teUnnumLinkOtnDataSynchronization, thresholdSonetLineCVHighThres15min=thresholdSonetLineCVHighThres15min, opticalAmplifierInterfaceDiagnosticsEntry=opticalAmplifierInterfaceDiagnosticsEntry, intervalPhysPerfOpticalOutputPwr15minEntry=intervalPhysPerfOpticalOutputPwr15minEntry, neNtpServer2=neNtpServer2, currentEthRx3HS15minBroadcastFramesRcv=currentEthRx3HS15minBroadcastFramesRcv, controlPlaneWdmDataNaasAlias=controlPlaneWdmDataNaasAlias, alarmAlarmIndicationSignalOdu=alarmAlarmIndicationSignalOdu, alarmLossOfMultiframeVCG=alarmLossOfMultiframeVCG)
mibBuilder.exportSymbols("FspR7-MIB", intervalSonetLine1dayNumber=intervalSonetLine1dayNumber, opticalIfConfigCapWdmRxChannel=opticalIfConfigCapWdmRxChannel, controlPlaneWdmConfigCmAlarmActivationTime=controlPlaneWdmConfigCmAlarmActivationTime, alarmLinkAttenuationTooLow=alarmLinkAttenuationTooLow, thresholdOtuSESHighThres15min=thresholdOtuSESHighThres15min, intervalOtu15minSES=intervalOtu15minSES, controlPlaneWdmConfigRmTraceDetail=controlPlaneWdmConfigRmTraceDetail, f7eqpEdfmSgc=f7eqpEdfmSgc, intervalOduTcmC15minEntry=intervalOduTcmC15minEntry, FspR7SshDeamon=FspR7SshDeamon, alarmDatabaseMismatch=alarmDatabaseMismatch, thresholdPhysPerfEntry=thresholdPhysPerfEntry, alarmAutoPowerShutdown=alarmAutoPowerShutdown, intervalSonetLoPath15minTimeStamp=intervalSonetLoPath15minTimeStamp, f7eqpWcc10gd=f7eqpWcc10gd, controlPlaneEthConfigRaConfigFlag=controlPlaneEthConfigRaConfigFlag, deployProvModuleCapEdfaPwrOut=deployProvModuleCapEdfaPwrOut, intervalGfpSublayer1dayTimeStamp=intervalGfpSublayer1dayTimeStamp, thresholdOduSESHighThres15min=thresholdOduSESHighThres15min, neNtpServer1=neNtpServer1, deployProvTunnelEthCapAlias=deployProvTunnelEthCapAlias, currentSonetLoPath1dayElapsedTime=currentSonetLoPath1dayElapsedTime, controlPlaneOtnDataTable=controlPlaneOtnDataTable, currentEthRx3HS1dayGoodFrames=currentEthRx3HS1dayGoodFrames, intervalEthRx3HS1dayTimeStamp=intervalEthRx3HS1dayTimeStamp, transientEqlzProcessWait=transientEqlzProcessWait, controlPlaneOtnConfigCtmShutdownTimeout=controlPlaneOtnConfigCtmShutdownTimeout, alarmLossOfLinkPulse=alarmLossOfLinkPulse, deployProvModuleDeploy=deployProvModuleDeploy, deployProvTunnelWdmMonitorEntities=deployProvTunnelWdmMonitorEntities, intervalPhysPerfOlmTxLineAtt1dayHigh=intervalPhysPerfOlmTxLineAtt1dayHigh, interfaceDataConnector=interfaceDataConnector, deployProvLogicalCpIfAuthType=deployProvLogicalCpIfAuthType, deployProvControlPlaneWdmPcConfigFlag=deployProvControlPlaneWdmPcConfigFlag, deployProvLogicalCpIfIpType=deployProvLogicalCpIfIpType, currentL2EthRx1dayBroadcastFramesRcv=currentL2EthRx1dayBroadcastFramesRcv, deployProvCrsDcnLink=deployProvCrsDcnLink, tunnelWdmDataFromAid=tunnelWdmDataFromAid, FspR7EquipmentType=FspR7EquipmentType, deployProvControlPlaneEthCmFisFrsTimeout=deployProvControlPlaneEthCmFisFrsTimeout, controlPlaneEthConfigRmTraceTarget=controlPlaneEthConfigRmTraceTarget, intervalSubAggregate1dayNumber=intervalSubAggregate1dayNumber, deployProvLogicalCpIfCapPrio=deployProvLogicalCpIfCapPrio, deployProvTunnelOtnTunnelType=deployProvTunnelOtnTunnelType, deployProvIfDefaultsTraceExpectedSonetSection=deployProvIfDefaultsTraceExpectedSonetSection, deployProvPppIpType=deployProvPppIpType, changeServiceDeployProvIfTimModeSonetSection=changeServiceDeployProvIfTimModeSonetSection, currentPhysConvCombined15minCVDE=currentPhysConvCombined15minCVDE, intervalDispersionCompensation15minValidFlag=intervalDispersionCompensation15minValidFlag, currentDefectSeconds15minDS=currentDefectSeconds15minDS, FspR7InterfaceFunction=FspR7InterfaceFunction, intervalPhysPerfCarrierFreqOffset1dayValidFlag=intervalPhysPerfCarrierFreqOffset1dayValidFlag, intervalPhysPerfLaserBiasCurrentNormalized1dayNumber=intervalPhysPerfLaserBiasCurrentNormalized1dayNumber, controlPlaneOtnConfigCmFisFrsTimeout=controlPlaneOtnConfigCmFisFrsTimeout, logicalIfConfigAlias=logicalIfConfigAlias, deployProvApsSignalDegradeSwitching=deployProvApsSignalDegradeSwitching, eRoadmDataSumTransmited=eRoadmDataSumTransmited, logicalCpIfConfigLinkColor=logicalCpIfConfigLinkColor, intervalPhysPerfOlmTxLineAtt15minNumber=intervalPhysPerfOlmTxLineAtt15minNumber, transientCryptoAuthPasswdInvalid=transientCryptoAuthPasswdInvalid, deployProvLogicalCpIfDefaultsExtAdvertised=deployProvLogicalCpIfDefaultsExtAdvertised, opticalIfConfigCapOpticalSetPoint=opticalIfConfigCapOpticalSetPoint, deployProvControlPlaneWdmCapCdTraceDetail=deployProvControlPlaneWdmCapCdTraceDetail, thresholdEthTxCrcFramesEgressHighThres1Day=thresholdEthTxCrcFramesEgressHighThres1Day, intervalPhysConvCombined1dayTable=intervalPhysConvCombined1dayTable, alarmOosPrePostSigInSetUpProcess=alarmOosPrePostSigInSetUpProcess, deployProvTunnelWdmDefaultsPceMode=deployProvTunnelWdmDefaultsPceMode, tifoConfigTable=tifoConfigTable, tunnelEthDataEntry=tunnelEthDataEntry, deployProvTunnelWdmRestorationMode=deployProvTunnelWdmRestorationMode, deployProvControlPlaneOtnDefaultsCmTraceDetail=deployProvControlPlaneOtnDefaultsCmTraceDetail, crsConnDeployProvTunnelAid=crsConnDeployProvTunnelAid, f7eqpSh7hu=f7eqpSh7hu, deployProvPathWdmDefaultsTable=deployProvPathWdmDefaultsTable, deployProvVchChannelDefaultsCir=deployProvVchChannelDefaultsCir, deployProvPathElementEthCapDownstreamSvid=deployProvPathElementEthCapDownstreamSvid, shelfInfoStandardSlotHeight=shelfInfoStandardSlotHeight, intervalGfpfrSublayer1dayCHecDiscardedFrames=intervalGfpfrSublayer1dayCHecDiscardedFrames, intervalPhysPerfSignalToNoiseRatio1weekValidFlag=intervalPhysPerfSignalToNoiseRatio1weekValidFlag, opticalIfDataLaserOffDelayTime=opticalIfDataLaserOffDelayTime, inventoryCpOtnCrsDownDataTable=inventoryCpOtnCrsDownDataTable, currentL2EthRx1dayTable=currentL2EthRx1dayTable, FspR7Time=FspR7Time, deployProvPortBindingRowStatus=deployProvPortBindingRowStatus, syslogConfigStatus=syslogConfigStatus, deployProvTunnelWdmDefaultsStuff=deployProvTunnelWdmDefaultsStuff, thresholdSonetLineCVSHighThres1day=thresholdSonetLineCVSHighThres1day, deployProvIfPriority=deployProvIfPriority, deployProvControlPlaneWdmCapTable=deployProvControlPlaneWdmCapTable, deployProvControlPlaneWdmCapCmCrankBackTimeout=deployProvControlPlaneWdmCapCmCrankBackTimeout, deployProvIfSigDegThresSonetLine=deployProvIfSigDegThresSonetLine, changeServiceDeployProvIfDefaultsTimModeOduTcmC=changeServiceDeployProvIfDefaultsTimModeOduTcmC, deployProvLogicalCpIfDcnAid=deployProvLogicalCpIfDcnAid, reservationCpDataEntry=reservationCpDataEntry, alarmThres15MinExceededFecSES=alarmThres15MinExceededFecSES, opticalIfConfigFiberBrand=opticalIfConfigFiberBrand, alarmSignalDegradeHigherOrderPath=alarmSignalDegradeHigherOrderPath, intervalOtuFec15minExEntry=intervalOtuFec15minExEntry, transientDatabaseActivation=transientDatabaseActivation, deployProvIfCapTraceExpectedOdu=deployProvIfCapTraceExpectedOdu, f7eqp4tcc2g5d=f7eqp4tcc2g5d, dcnTopologyDataEntry=dcnTopologyDataEntry, crsConnDeployProvCapTo=crsConnDeployProvCapTo, opticalIfConfigCapFarEndCommunication=opticalIfConfigCapFarEndCommunication, deployProvIfCapAreaId=deployProvIfCapAreaId, FspR7StartPmSnapshot=FspR7StartPmSnapshot, FspR7OspfMode=FspR7OspfMode, FspR7FlowControlMode=FspR7FlowControlMode, deployProvVirtualOpticalChannelCapEntry=deployProvVirtualOpticalChannelCapEntry, opticalIfConfigCapTransmitChannel=opticalIfConfigCapTransmitChannel, currentSonetHoPath1dayTable=currentSonetHoPath1dayTable, f7eqpPsu7huac=f7eqpPsu7huac, opticalIfDataLagStandby=opticalIfDataLagStandby, intervalRoundTripDelay1weekValidFlag=intervalRoundTripDelay1weekValidFlag, opticalIfConfigWdmRxChannel=opticalIfConfigWdmRxChannel, thresholdOduTcmCESHighThres1day=thresholdOduTcmCESHighThres1day, deployProvPathWdmCapEntry=deployProvPathWdmCapEntry, changeServiceDeployProvIfCapTraceTransmitOpspOduTcmC=changeServiceDeployProvIfCapTraceTransmitOpspOduTcmC, currentL2EthRx1dayBytesRcv=currentL2EthRx1dayBytesRcv, f7eqpCustomd=f7eqpCustomd, logicalCpIfConfigCpType=logicalCpIfConfigCpType, intervalPhysConv1dayDE=intervalPhysConv1dayDE, thresholdPhysPerfCarrierFreqOffsetHigh=thresholdPhysPerfCarrierFreqOffsetHigh, deployProvLogicalCpIfDefaultsFacilityType=deployProvLogicalCpIfDefaultsFacilityType, currentOtuFec15minCE=currentOtuFec15minCE, deployProvLogicalCpIfCpType=deployProvLogicalCpIfCpType, deployProvIfCapTraceTransmitDapiOduTcmB=deployProvIfCapTraceTransmitDapiOduTcmB, deployProvDcnDefaultsType=deployProvDcnDefaultsType, pppDataEccInstance=pppDataEccInstance, deployProvLanDefaultsOspf=deployProvLanDefaultsOspf, intervalPhysPerfPumpPwr1weekTimeStamp=intervalPhysPerfPumpPwr1weekTimeStamp, changeServiceDeployProvIfSigDegThresOdu=changeServiceDeployProvIfSigDegThresOdu, changeServiceDeployProvIfCapSigDegThresSdhSection=changeServiceDeployProvIfCapSigDegThresSdhSection, deployProvControlPlaneWdmDefaultsRsvpMaxExpRecoveryTime=deployProvControlPlaneWdmDefaultsRsvpMaxExpRecoveryTime, deployProvLogicalCpIfDefaultsOspf=deployProvLogicalCpIfDefaultsOspf, deployProvApsCapSignalFailureSwitching=deployProvApsCapSignalFailureSwitching, intervalLinkAttenuation15minHigh=intervalLinkAttenuation15minHigh, f7eqp2tca2g5=f7eqp2tca2g5, deployProvPathElementEthDefaultsTid=deployProvPathElementEthDefaultsTid, teNumLinkOtnDataEntry=teNumLinkOtnDataEntry, deployProvModuleLanAid=deployProvModuleLanAid, deployProvExChannelChromaticDispersionRcv=deployProvExChannelChromaticDispersionRcv, logicalCpIfDataPushedNearEndIpHeader=logicalCpIfDataPushedNearEndIpHeader, tunnelOtnConfigAdminModifier=tunnelOtnConfigAdminModifier, deployProvVchChannelDefaultsTimModeOdu=deployProvVchChannelDefaultsTimModeOdu, thresholdPhysConvHighSpeedTable=thresholdPhysConvHighSpeedTable, changeServiceDeployProvIfCapVoaSetpoint=changeServiceDeployProvIfCapVoaSetpoint, deployProvApsFarEndIp=deployProvApsFarEndIp, forceDeployProvApsPeerAid=forceDeployProvApsPeerAid, interfaceConfigCapDispertionConfig=interfaceConfigCapDispertionConfig, eRoadmInfoTable=eRoadmInfoTable, intervalPhysPerfOpticalOutputPwr1dayMean=intervalPhysPerfOpticalOutputPwr1dayMean, intervalPhysPerfCurrentOscGain15minLow=intervalPhysPerfCurrentOscGain15minLow, connectionOtnDataRestorable=connectionOtnDataRestorable, thresholdOtuUASHighThres15min=thresholdOtuUASHighThres15min, portBindingDataRemotePort=portBindingDataRemotePort, deployProvLogicalIfTimeToLive=deployProvLogicalIfTimeToLive, f7eqp4gsmd=f7eqp4gsmd, intervalFarEndPhysPerfOpticalInputPwr15minTable=intervalFarEndPhysPerfOpticalInputPwr15minTable, forceDeployProvApsCapWaitToRestore=forceDeployProvApsCapWaitToRestore, deployProvCrsDcnCapLink=deployProvCrsDcnCapLink, deployProvExChannelDefaultsBitrate=deployProvExChannelDefaultsBitrate, transientCpConnectionModificationFail=transientCpConnectionModificationFail, deployProvTunnelOtnCapTunnelType=deployProvTunnelOtnCapTunnelType, intervalLatency15minValidFlag=intervalLatency15minValidFlag, deployProvPortBindingEntry=deployProvPortBindingEntry, currentGfpfrSublayer1dayGoodFrames=currentGfpfrSublayer1dayGoodFrames, entityStateCapAdmin=entityStateCapAdmin, alarmLossOfFrameOtu=alarmLossOfFrameOtu, deployProvDcnRowStatus=deployProvDcnRowStatus, changeServiceDeployProvIfTxOffDelay=changeServiceDeployProvIfTxOffDelay, controlPlaneEthEntityStateSecondaryStates=controlPlaneEthEntityStateSecondaryStates, currentPhysConv15minES=currentPhysConv15minES, vs0allocatedTable=vs0allocatedTable, neNtpSourceIp=neNtpSourceIp, deployProvTunnelWdmCapTunnelScope=deployProvTunnelWdmCapTunnelScope, f7eqp4tca1g3d=f7eqp4tca1g3d, thresholdSonetHoPathTable=thresholdSonetHoPathTable, deployProvDcnForceDestroy=deployProvDcnForceDestroy, currentOtuFec15minExElapsedTime=currentOtuFec15minExElapsedTime, currentL2EthRx15minEntry=currentL2EthRx15minEntry, deployProvTunnelWdmDefaultsFecType=deployProvTunnelWdmDefaultsFecType, intervalDefectSeconds1dayDS=intervalDefectSeconds1dayDS, deployProvTunnelOtnTunnelScope=deployProvTunnelOtnTunnelScope, thresholdSonetLoPathTable=thresholdSonetLoPathTable, deployProvLanDefaultsMetric=deployProvLanDefaultsMetric, currentL2EthRx15minTable=currentL2EthRx15minTable, nodeChannelTraceChannelTx=nodeChannelTraceChannelTx, thresholdOtuFecSublayerExUBEHighThres1day=thresholdOtuFecSublayerExUBEHighThres1day, deployProvTunnelWdmDefaultsTunnelNo=deployProvTunnelWdmDefaultsTunnelNo, vc4allocatedSequenceNumber=vc4allocatedSequenceNumber, deployProvModuleCapSubBand=deployProvModuleCapSubBand, opticalIfConfigLaserOffDelayFunction=opticalIfConfigLaserOffDelayFunction, deployProvLogicalIfDefaultsIpType=deployProvLogicalIfDefaultsIpType, thresholdEthRxHighSpeedTable=thresholdEthRxHighSpeedTable, currentL2EthTx15minEntry=currentL2EthTx15minEntry, deployProvTunnelOtnDefaultsProvisionedPaths=deployProvTunnelOtnDefaultsProvisionedPaths, teUnnumLinkEthDataEntry=teUnnumLinkEthDataEntry, FspR7EntitySecondaryStates=FspR7EntitySecondaryStates, intervalOtu15minES=intervalOtu15minES, logicalCpIfConfigAlias=logicalCpIfConfigAlias, deployProvPathElementOtnCapUpTributaryODTUType=deployProvPathElementOtnCapUpTributaryODTUType, changeServiceDeployProvIfAdmin=changeServiceDeployProvIfAdmin, thresholdOduUASHighThres1day=thresholdOduUASHighThres1day, deployProvCopyPathOtnCapEntry=deployProvCopyPathOtnCapEntry, connectionWdmDataTunnelInstance=connectionWdmDataTunnelInstance, currentPhysConvCombined1dayTable=currentPhysConvCombined1dayTable, alarmSignalDegradeOduTcmA=alarmSignalDegradeOduTcmA, transientIntrusionTx=transientIntrusionTx, nePreferredFacilityType=nePreferredFacilityType, intervalRoundTripDelay1dayHigh=intervalRoundTripDelay1dayHigh, changeServiceDeployProvIfCapTraceTransmitSapiOduTcmB=changeServiceDeployProvIfCapTraceTransmitSapiOduTcmB, currentOduTcmB1dayEntry=currentOduTcmB1dayEntry, moduleConfigCapInitiateEqualization=moduleConfigCapInitiateEqualization, interfaceDataParity=interfaceDataParity, deployProvSyslogStatus=deployProvSyslogStatus, deployProvControlPlaneWdmCapRaTraceDetail=deployProvControlPlaneWdmCapRaTraceDetail, shelfDiagnosticsTable=shelfDiagnosticsTable, controlPlaneEthDataNaasAlias=controlPlaneEthDataNaasAlias, controlPlaneOtnDataNaasAlias=controlPlaneOtnDataNaasAlias, FspR7CpRestorationMode=FspR7CpRestorationMode, pathElementOtnDataDownTributaryODTUType=pathElementOtnDataDownTributaryODTUType, alarmNtpServer3Unreachable=alarmNtpServer3Unreachable, alarmMansw=alarmMansw, currentSonetHoPath15minCV=currentSonetHoPath15minCV, ethernetConfigIpType=ethernetConfigIpType, deployProvApsDirection=deployProvApsDirection, deployProvOpticalLinkCapRxLineAttenuation=deployProvOpticalLinkCapRxLineAttenuation, currentEthRx3HS15minBytes=currentEthRx3HS15minBytes, deployProvPortBindingLogicalIfAid=deployProvPortBindingLogicalIfAid, controlPlaneWdmDataNodeNameSyntax=controlPlaneWdmDataNodeNameSyntax, vc4allocatedTable=vc4allocatedTable, thresholdSonetLoPathUASHighThres15min=thresholdSonetLoPathUASHighThres15min, changeServiceDeployProvIfCapBand=changeServiceDeployProvIfCapBand, changeServiceDeployProvIfVariableGain=changeServiceDeployProvIfVariableGain, Counter64StringCaps=Counter64StringCaps, ethernetDataTable=ethernetDataTable, connectionOtnDataTunnelScope=connectionOtnDataTunnelScope, deployProvVchChannelCapEqlzAdmin=deployProvVchChannelCapEqlzAdmin, neAutoProvisioning=neAutoProvisioning, deployProvLogicalIfDeadInterval=deployProvLogicalIfDeadInterval, ntpServerSourceIp=ntpServerSourceIp, changeServiceDeployProvIfDefaultsSigDegThresSonetSection=changeServiceDeployProvIfDefaultsSigDegThresSonetSection, intervalPhysConvCombined15minES=intervalPhysConvCombined15minES, currentL2EthRx1dayMulticastFramesRcv=currentL2EthRx1dayMulticastFramesRcv, alarmAlarmIndicationSignalOduTcmC=alarmAlarmIndicationSignalOduTcmC, deployProvLogicalCpIfMetric=deployProvLogicalCpIfMetric, deployProvConnNonStdCapToTable=deployProvConnNonStdCapToTable, deployProvPathOtnTable=deployProvPathOtnTable, deployProvPathElementWdmDefaultsTable=deployProvPathElementWdmDefaultsTable, intervalPhysPerfCarrierFreqOffset1weekTimeStamp=intervalPhysPerfCarrierFreqOffset1weekTimeStamp, transientLocalCopyMemFail=transientLocalCopyMemFail, deployProvPathElementWdmLogicalInterfaceId=deployProvPathElementWdmLogicalInterfaceId, intervalPhysConvHighSpeed1dayValidFlag=intervalPhysConvHighSpeed1dayValidFlag)
mibBuilder.exportSymbols("FspR7-MIB", alarmSignalDegradeOtu=alarmSignalDegradeOtu, tunnelOtnConfigRestorationType=tunnelOtnConfigRestorationType, moduleDataInternalPlugRates=moduleDataInternalPlugRates, crsConnDeployProvDefaultsEntry=crsConnDeployProvDefaultsEntry, opticalIfConfigTiltSet=opticalIfConfigTiltSet, deployProvApsCapApsType=deployProvApsCapApsType, thresholdOduTcmBUASHighThres15min=thresholdOduTcmBUASHighThres15min, changeServiceDeployProvIfCapType=changeServiceDeployProvIfCapType, f710GBE=f710GBE, currentOduTcmA15minUAS=currentOduTcmA15minUAS, alarmElasticStoreOverflowTransmitter=alarmElasticStoreOverflowTransmitter, thresholdGfpTable=thresholdGfpTable, intervalLinkAttenuation15minLow=intervalLinkAttenuation15minLow, vc4c16allocatedEntry=vc4c16allocatedEntry, transientAlarmProfileActivationFail=transientAlarmProfileActivationFail, thresholdOtuFecSESHighThres1day=thresholdOtuFecSESHighThres1day, connectionEthDataRestorationState=connectionEthDataRestorationState, changeServiceDeployProvIfDefaultsAutonegotiation=changeServiceDeployProvIfDefaultsAutonegotiation, changeServiceDeployProvIfCapBitrate=changeServiceDeployProvIfCapBitrate, currentOduTcmB1dayTable=currentOduTcmB1dayTable, intervalPhysPerfCurrentOscGain1dayMean=intervalPhysPerfCurrentOscGain1dayMean, neTimerForceOprToRls=neTimerForceOprToRls, deployProvIfDefaultsOpuPayloadType=deployProvIfDefaultsOpuPayloadType, tifoConfigTelemetry=tifoConfigTelemetry, deployProvIfCapTilt=deployProvIfCapTilt, deployProvApsDefaultsForceDestroy=deployProvApsDefaultsForceDestroy, deployProvTifOutputTelemetry=deployProvTifOutputTelemetry, intervalPhysPerfOscOpticalOutputPwr1weekHigh=intervalPhysPerfOscOpticalOutputPwr1weekHigh, deployProvControlPlaneWdmTedbConfigFlag=deployProvControlPlaneWdmTedbConfigFlag, intervalPmSnapshotValidFlag=intervalPmSnapshotValidFlag, thresholdPhysPerfChromaticDispersionLow=thresholdPhysPerfChromaticDispersionLow, connectionEthDataCbsRcv=connectionEthDataCbsRcv, connectionWdmDataEntry=connectionWdmDataEntry, intervalEthTx15minEntry=intervalEthTx15minEntry, controlPlaneEthConfigCtmTraceDetail=controlPlaneEthConfigCtmTraceDetail, crsConnDeployProvDefaultsCrossConnType=crsConnDeployProvDefaultsCrossConnType, deployProvIfCapPriority=deployProvIfCapPriority, logicalCpIfDataEncapsulation=logicalCpIfDataEncapsulation, FspR7AdminState=FspR7AdminState, deployProvControlPlaneEthCapRmConfigFlag=deployProvControlPlaneEthCapRmConfigFlag, intervalSonetLoPath15minEntry=intervalSonetLoPath15minEntry, intervalL2EthRx15minMulticastFramesRcv=intervalL2EthRx15minMulticastFramesRcv, deployProvTunnelEthDefaultsTunnelScope=deployProvTunnelEthDefaultsTunnelScope, dcnOspfAreaInterfaceTable=dcnOspfAreaInterfaceTable, alarmLossOfPointerLowerOrderPath=alarmLossOfPointerLowerOrderPath, deployProvLogicalCpIfCapRefreshMultiplier=deployProvLogicalCpIfCapRefreshMultiplier, currentEthRxHighSpeed1dayBytes=currentEthRxHighSpeed1dayBytes, currentEthRx15minGoodFrames=currentEthRx15minGoodFrames, alarmLaserOnDelay=alarmLaserOnDelay, changeServiceDeployProvIfSigDegPeriodIntegration=changeServiceDeployProvIfSigDegPeriodIntegration, vc4c8allocatedClassInstanceNumber=vc4c8allocatedClassInstanceNumber, controlPlaneEthConfigPcTraceDetail=controlPlaneEthConfigPcTraceDetail, deployProvVchChannelDefaultsForceDestroy=deployProvVchChannelDefaultsForceDestroy, intervalSonetHoPath15minValidFlag=intervalSonetHoPath15minValidFlag, deployProvIfCapRevertiveMode=deployProvIfCapRevertiveMode, neSysTypeChanged=neSysTypeChanged, deployProvIfCapTributarySlotMethod=deployProvIfCapTributarySlotMethod, exChannelConfigTable=exChannelConfigTable, forceDeployProvApsPeerAidCapsEntry=forceDeployProvApsPeerAidCapsEntry, deployProvExChannelDefaultsMaxBitErrorRate=deployProvExChannelDefaultsMaxBitErrorRate, deployProvLogicalCpIfCapEncoding=deployProvLogicalCpIfCapEncoding, deployProvConnNonStdCapToEndpointB=deployProvConnNonStdCapToEndpointB, crsConnDeployProvCapFrom=crsConnDeployProvCapFrom, teNumLinkWdmDataFendTeLinkIp=teNumLinkWdmDataFendTeLinkIp, alarmThres15MinExceededPhysConvDE=alarmThres15MinExceededPhysConvDE, deployProvLogicalCpIfTunnelAid=deployProvLogicalCpIfTunnelAid, changeServiceDeployProvIfCapFecType=changeServiceDeployProvIfCapFecType, deployProvControlPlaneOtnDefaultsCtmMaximumRetryNumber=deployProvControlPlaneOtnDefaultsCtmMaximumRetryNumber, alarmEncryptionPortAuthPasswdMissing=alarmEncryptionPortAuthPasswdMissing, tunnelWdmDataLogicalIfAid=tunnelWdmDataLogicalIfAid, deployProvControlPlaneWdmDefaultsCdTraceDetail=deployProvControlPlaneWdmDefaultsCdTraceDetail, intervalGfpt1dayEntry=intervalGfpt1dayEntry, changeServiceDeployProvIfDefaultsLanAid=changeServiceDeployProvIfDefaultsLanAid, thresholdSonetHoPathSESHighThres15min=thresholdSonetHoPathSESHighThres15min, deployProvVirtualOpticalChannelDefaultsAlias=deployProvVirtualOpticalChannelDefaultsAlias, deployProvModuleDefaultsDispersionCompensation=deployProvModuleDefaultsDispersionCompensation, connectionWdmConfigEntry=connectionWdmConfigEntry, forceDeployProvApsForceDestroy=forceDeployProvApsForceDestroy, connectionOtnDataToAid=connectionOtnDataToAid, forceDeployProvApsDefaultsWaitToRestore=forceDeployProvApsDefaultsWaitToRestore, deployProvTunnelEthTunnelNo=deployProvTunnelEthTunnelNo, deployProvVirtualOpticalChannelRowStatus=deployProvVirtualOpticalChannelRowStatus, intervalEthRx1dayBytes=intervalEthRx1dayBytes, authTrapPort=authTrapPort, routingIpGateway=routingIpGateway, thresholdPhysConvESHighThres1day=thresholdPhysConvESHighThres1day, deployProvControlPlaneEthTedbTraceDetail=deployProvControlPlaneEthTedbTraceDetail, deployProvIfDefaultsDispersionSetting=deployProvIfDefaultsDispersionSetting, changeServiceDeployProvIfIpAddr=changeServiceDeployProvIfIpAddr, opticalIfConfigLacpTimeout=opticalIfConfigLacpTimeout, ntpSrvCreation=ntpSrvCreation, intervalPhysPerfEstimatedSignalGain1weekTimeStamp=intervalPhysPerfEstimatedSignalGain1weekTimeStamp, deployProvLogicalCpIfCapTable=deployProvLogicalCpIfCapTable, f7eqpEdfaDgcb=f7eqpEdfaDgcb, deployProvLogicalCpIfIpAddr=deployProvLogicalCpIfIpAddr, alarmEquipmentNotApproved=alarmEquipmentNotApproved, intervalL2EthTx15minNumber=intervalL2EthTx15minNumber, thresholdSonetLineMsUASSHighThres1day=thresholdSonetLineMsUASSHighThres1day, deployProvConnIndex=deployProvConnIndex, deployProvIfDefaultsLagPrio=deployProvIfDefaultsLagPrio, connectionWdmDataRole=connectionWdmDataRole, opticalIfConfigCapBip=opticalIfConfigCapBip, tunnelWdmConfigOperateReversion=tunnelWdmConfigOperateReversion, alarmElasticStoreOverflowReceiver=alarmElasticStoreOverflowReceiver, controlPlaneEthConfigCtmShutdownTimeout=controlPlaneEthConfigCtmShutdownTimeout, thresholdPhysPerfCapCarrierFreqOffsetLow=thresholdPhysPerfCapCarrierFreqOffsetLow, deployProvControlPlaneEthDefaultsCmConfigFlag=deployProvControlPlaneEthDefaultsCmConfigFlag, currentSonetHoPath15minES=currentSonetHoPath15minES, deployProvPathElementWdmDefaultsEntry=deployProvPathElementWdmDefaultsEntry, changeServiceDeployProvIfTraceTransmitSonetSection=changeServiceDeployProvIfTraceTransmitSonetSection, intervalPhysPerfCurrent1dayTimeStamp=intervalPhysPerfCurrent1dayTimeStamp, deployProvTunnelWdmProvisionedPaths=deployProvTunnelWdmProvisionedPaths, currentPmSnapshotInputPower=currentPmSnapshotInputPower, deployProvLogicalIfRowStatus=deployProvLogicalIfRowStatus, opticalIfDiagChromaticDispersionCompensation=opticalIfDiagChromaticDispersionCompensation, deployProvTifOutputCapRowStatus=deployProvTifOutputCapRowStatus, alarmLinkControlProtocolFailure=alarmLinkControlProtocolFailure, deployProvPathElementWdmDefaultsTid=deployProvPathElementWdmDefaultsTid, f7eqp40csmd=f7eqp40csmd, deployProvControlPlaneWdmCapTedbConfigFlag=deployProvControlPlaneWdmCapTedbConfigFlag, intervalPhysPerfBackreflectionPwrRcv1weekNumber=intervalPhysPerfBackreflectionPwrRcv1weekNumber, deployProvTunnelEthTunnelScope=deployProvTunnelEthTunnelScope, changeServiceDeployProvIfDefaultsSigDegThresOduTcmB=changeServiceDeployProvIfDefaultsSigDegThresOduTcmB, thresholdPhysPerfCapLatencyLowThres=thresholdPhysPerfCapLatencyLowThres, deployProvTunnelWdmTunnelScope=deployProvTunnelWdmTunnelScope, changeServiceDeployProvIfDefaultsTraceTransmitOpspOtu=changeServiceDeployProvIfDefaultsTraceTransmitOpspOtu, crsConnWdmConfigTunnelAid=crsConnWdmConfigTunnelAid, deployProvControlPlaneWdmCdTraceDetail=deployProvControlPlaneWdmCdTraceDetail, dcnOspfAreaType=dcnOspfAreaType, opticalIfDataTunableHighestChannel=opticalIfDataTunableHighestChannel, deployProvControlPlaneOtnCapRmConfigFlag=deployProvControlPlaneOtnCapRmConfigFlag, changeServiceDeployProvIfDefaultsDuplex=changeServiceDeployProvIfDefaultsDuplex, changeServiceDeployProvIfCapTcmALevel=changeServiceDeployProvIfCapTcmALevel, intervalGfpfrSublayer15minCHecDiscardedFrames=intervalGfpfrSublayer15minCHecDiscardedFrames, FspR7Stuff=FspR7Stuff, crsConnDeployProvCapTable=crsConnDeployProvCapTable, deployProvExChannelCapChannelBandwith=deployProvExChannelCapChannelBandwith, deployProvIfAlsMode=deployProvIfAlsMode, opticalIfDiagPumpLaser1Temp=opticalIfDiagPumpLaser1Temp, controlPlaneOtnConfigRmTraceDetail=controlPlaneOtnConfigRmTraceDetail, deployProvControlPlaneWdmCapRmTraceDetail=deployProvControlPlaneWdmCapRmTraceDetail, deployProvTunnelWdmCapAlias=deployProvTunnelWdmCapAlias, intervalEthRx15minTimeStamp=intervalEthRx15minTimeStamp, tunnelWdmDataTunnelNumberExtension=tunnelWdmDataTunnelNumberExtension, deployProvVirtualOpticalChannelCapRowStatus=deployProvVirtualOpticalChannelCapRowStatus, intervalPhysPerfBackreflectionPwrRcv1dayHigh=intervalPhysPerfBackreflectionPwrRcv1dayHigh, deployProvControlPlaneWdmCtmMaximumRetryNumber=deployProvControlPlaneWdmCtmMaximumRetryNumber, intervalFarEndPhysPerfOpticalOutputPwr15minLow=intervalFarEndPhysPerfOpticalOutputPwr15minLow, deployProvIfPvid=deployProvIfPvid, deployProvCrsDcnDefaultsRowStatus=deployProvCrsDcnDefaultsRowStatus, deployProvIfDefaultsOspf=deployProvIfDefaultsOspf, changeServiceDeployProvIfBand=changeServiceDeployProvIfBand, fspR7V1=fspR7V1, opticalIfDiagLaserTemp=opticalIfDiagLaserTemp, thresholdPhysPerfCapRoundTripDelayLowThres=thresholdPhysPerfCapRoundTripDelayLowThres, alarmAutoShutdownSendingAisOdu=alarmAutoShutdownSendingAisOdu, alarmIntrusionRx=alarmIntrusionRx, opticalIfDiagPumpLaserBiasCurrent4=opticalIfDiagPumpLaserBiasCurrent4, syslogDataTable=syslogDataTable, deployProvControlPlaneEthCapTable=deployProvControlPlaneEthCapTable, deployProvExChannelCapEntry=deployProvExChannelCapEntry, thresholdGfptEntry=thresholdGfptEntry, neNtpStatusServer2=neNtpStatusServer2, intervalOduTcmA15minBbe=intervalOduTcmA15minBbe, opticalIfDataCbsTrmt=opticalIfDataCbsTrmt, deployProvPathElementOtnTid=deployProvPathElementOtnTid, intervalGfpfrSublayer15minValidFlag=intervalGfpfrSublayer15minValidFlag, controlPlaneOtnConfigRmConfigFlag=controlPlaneOtnConfigRmConfigFlag, crsConnConfigTunnelAid=crsConnConfigTunnelAid, currentPhysConvTxHighSpeed15minTable=currentPhysConvTxHighSpeed15minTable, deployProvIfTraceExpectedOduTcmC=deployProvIfTraceExpectedOduTcmC, vc4allocatedContainer=vc4allocatedContainer, deployProvApsCapProtectionAid=deployProvApsCapProtectionAid, tunnelWdmDataRfiList=tunnelWdmDataRfiList, inventoryCpOtnDownDataNumber=inventoryCpOtnDownDataNumber, currentGfpfrSublayer15minEntry=currentGfpfrSublayer15minEntry, eRoadmDataSumReceived=eRoadmDataSumReceived, adminMIB=adminMIB, intervalPhysPerfCurrent15minValidFlag=intervalPhysPerfCurrent15minValidFlag, thresholdEthRxTable=thresholdEthRxTable, pathElementWdmDataDownstreamModuleAid=pathElementWdmDataDownstreamModuleAid, deployProvControlPlaneWdmCapTedbRouterId=deployProvControlPlaneWdmCapTedbRouterId, currentEthRxHighSpeed1dayElapsedTime=currentEthRxHighSpeed1dayElapsedTime, deployProvTunnelEthDefaultsCirRcv=deployProvTunnelEthDefaultsCirRcv, alarmAlarmIndicationSignalOduTcmA=alarmAlarmIndicationSignalOduTcmA, edfaConfigTilt=edfaConfigTilt, currentSonetSect1dayElapsedTime=currentSonetSect1dayElapsedTime, connectionOtnDataComputedPaths=connectionOtnDataComputedPaths, currentL2EthTx15minMulticastFramesTrmt=currentL2EthTx15minMulticastFramesTrmt, intervalOduTcmB1dayUAS=intervalOduTcmB1dayUAS, intervalGfpfr1dayTimeStamp=intervalGfpfr1dayTimeStamp, thresholdOduEntry=thresholdOduEntry, teUnnumLinkEthDataFendNodeIp=teUnnumLinkEthDataFendNodeIp, deployProvApsDefaultsRevertMode=deployProvApsDefaultsRevertMode, dcnTopologyConfigCapTable=dcnTopologyConfigCapTable, tunnelWdmDataErrorCategory=tunnelWdmDataErrorCategory, changeServiceDeployProvIfCapTraceTransmitSapiOtu=changeServiceDeployProvIfCapTraceTransmitSapiOtu, intervalPhysPerfCurrent1dayValidFlag=intervalPhysPerfCurrent1dayValidFlag, intervalGfpt1dayTimeStamp=intervalGfpt1dayTimeStamp, deployProvModuleLagSysPrio=deployProvModuleLagSysPrio, deployProvIfCapTraceTransmitSapiOduTcmB=deployProvIfCapTraceTransmitSapiOduTcmB, deployProvControlPlaneOtnCdTraceDetail=deployProvControlPlaneOtnCdTraceDetail, transientReversionCompleted=transientReversionCompleted, farEndIfDataEntry=farEndIfDataEntry, thresholdSubAggregateSESHighThres1day=thresholdSubAggregateSESHighThres1day, intervalEthRx3HS1dayControlFrameRcv=intervalEthRx3HS1dayControlFrameRcv, interfaceConfigBehaviour=interfaceConfigBehaviour, connectionWdmDataToNodeIp=connectionWdmDataToNodeIp, intervalPhysConvHighSpeed1dayTable=intervalPhysConvHighSpeed1dayTable, teNumLinkEthDataSynchronization=teNumLinkEthDataSynchronization, currentSubAggregate15minEntry=currentSubAggregate15minEntry, deployProvLogicalIfCapEncapsulation=deployProvLogicalIfCapEncapsulation, pathElementWdmDataSequenceNumber=pathElementWdmDataSequenceNumber, vs1allocatedEntry=vs1allocatedEntry, logicalIfConfigAuthType=logicalIfConfigAuthType, currentDefectSeconds1dayEntry=currentDefectSeconds1dayEntry, deployProvIfLagPrio=deployProvIfLagPrio, deployProvShelfCapEntry=deployProvShelfCapEntry, intervalOduTcmC15minES=intervalOduTcmC15minES, fspUserManagementAuthPrivKey=fspUserManagementAuthPrivKey, syslogDataEntry=syslogDataEntry, deployProvPppIpFarEndIp=deployProvPppIpFarEndIp, deployProvPppIpCapEntry=deployProvPppIpCapEntry, intervalPhysConv1dayNumber=intervalPhysConv1dayNumber, FspR7AlsHoldoffCaps=FspR7AlsHoldoffCaps, FspR7TurnupConfigCaps=FspR7TurnupConfigCaps, logicalCpIfDataIpMaskMonitor=logicalCpIfDataIpMaskMonitor, tifiConfigTifAlarmMessage=tifiConfigTifAlarmMessage, deployProvIfBip=deployProvIfBip, shelfInfoOmBand=shelfInfoOmBand, deployProvTunnelWdmCapConnectionDirection=deployProvTunnelWdmCapConnectionDirection, forceDeployProvApsCapPeerAid=forceDeployProvApsCapPeerAid, alarmLossofTandemConnectionOduTcmB=alarmLossofTandemConnectionOduTcmB, intervalOduTcmB1dayBbe=intervalOduTcmB1dayBbe, currentSubAggregate15minSES=currentSubAggregate15minSES, deployProvOpticalLinkFarEndLocation=deployProvOpticalLinkFarEndLocation, crsConnDeployProvTo=crsConnDeployProvTo, deployProvControlPlaneEthDefaultsCdResyncTimeout=deployProvControlPlaneEthDefaultsCdResyncTimeout, tunnelWdmConfigPceMode=tunnelWdmConfigPceMode, deployProvOpticalLinkCapEntry=deployProvOpticalLinkCapEntry, intervalPhysPerfOscOpticalOutputPwr1dayNumber=intervalPhysPerfOscOpticalOutputPwr1dayNumber, intervalPhysPerfOpticalOutputPwr1weekValidFlag=intervalPhysPerfOpticalOutputPwr1weekValidFlag, currentL2EthRx1dayBytesFrames1519Rcv=currentL2EthRx1dayBytesFrames1519Rcv, deployProvIfDefaultsSigDegThresSdhSection=deployProvIfDefaultsSigDegThresSdhSection, dcnOspfAreaCapTable=dcnOspfAreaCapTable, moduleDiagnosticsCapabilityLevel=moduleDiagnosticsCapabilityLevel, deployProvLanDefaultsAreaId=deployProvLanDefaultsAreaId, deployProvTunnelWdmDefaultsRestorationMode=deployProvTunnelWdmDefaultsRestorationMode, dcnOspfAreaInterfaceIndexAid=dcnOspfAreaInterfaceIndexAid, crsConnDeployProvRowStatus=crsConnDeployProvRowStatus, changeServiceDeployProvIfCapOpuPayloadType=changeServiceDeployProvIfCapOpuPayloadType, tunnelWdmDataTable=tunnelWdmDataTable, deployProvModuleDefaultsFiber=deployProvModuleDefaultsFiber, entityStateEntry=entityStateEntry)
mibBuilder.exportSymbols("FspR7-MIB", deployProvIfDefaultsTimModeSonetSection=deployProvIfDefaultsTimModeSonetSection, currentPhysConvTxHighSpeed1daySETX=currentPhysConvTxHighSpeed1daySETX, currentSonetHoPath15minEntry=currentSonetHoPath15minEntry, deployProvIfTraceExpectedOduTcmA=deployProvIfTraceExpectedOduTcmA, FspR7ManualAuto=FspR7ManualAuto, intervalEthTx1dayTable=intervalEthTx1dayTable, deployProvControlPlaneWdmCapRsvpMaxExpRestartTime=deployProvControlPlaneWdmCapRsvpMaxExpRestartTime, FspR7RoadmNumberCaps=FspR7RoadmNumberCaps, currentOtuFec15minSES=currentOtuFec15minSES, FspR7AlsHoldoff=FspR7AlsHoldoff, deployProvLanIpMask=deployProvLanIpMask, connectionEthDataSignalledPaths=connectionEthDataSignalledPaths, deployProvPathElementEthRowStatus=deployProvPathElementEthRowStatus, thresholdOduTcmBTable=thresholdOduTcmBTable, deployProvApsProtectingAidCapsEntry=deployProvApsProtectingAidCapsEntry, opticalIfDataChannelsNumber=opticalIfDataChannelsNumber, intervalRoundTripDelay1weekLow=intervalRoundTripDelay1weekLow, deployProvLogicalCpIfDefaultsFendTeLinkIdNum=deployProvLogicalCpIfDefaultsFendTeLinkIdNum, intervalPhysPerfOscPwr1dayMean=intervalPhysPerfOscPwr1dayMean, logicalIfDataDcnAid=logicalIfDataDcnAid, deployProvControlPlaneOtnTable=deployProvControlPlaneOtnTable, alarmCpTunnelModificationInProgess=alarmCpTunnelModificationInProgess, deployProvPppIpCapOspf=deployProvPppIpCapOspf, alarmThres15MinExceededOduTcmCES=alarmThres15MinExceededOduTcmCES, deployProvPathElementOtnCapUpTributaryTSMethod=deployProvPathElementOtnCapUpTributaryTSMethod, FspR7EquipmentTypeCaps=FspR7EquipmentTypeCaps, neStateChange=neStateChange, transientDispersionCompFailed=transientDispersionCompFailed, currentSonetSect15minSES=currentSonetSect15minSES, teUnnumLinkWdmDataFendNodeIp=teUnnumLinkWdmDataFendNodeIp, deployProvIfTraceTransmitSapiOtu=deployProvIfTraceTransmitSapiOtu, deployProvControlPlaneWdmCdbDetail=deployProvControlPlaneWdmCdbDetail, tunnelWdmDataTunnelScope=tunnelWdmDataTunnelScope, areaIdCapEntry=areaIdCapEntry, deployProvTunnelEthCapTunnelId=deployProvTunnelEthCapTunnelId, deployProvLogicalCpIfDefaultsDcnAid=deployProvLogicalCpIfDefaultsDcnAid, inactiveRoutingIpEntry=inactiveRoutingIpEntry, f7eqp4tcc2g5=f7eqp4tcc2g5, alarmAseTableGenFailLow=alarmAseTableGenFailLow, thresholdOduTcmCEntry=thresholdOduTcmCEntry, vtpEntityDataReach=vtpEntityDataReach, deployProvTunnelOtnTable=deployProvTunnelOtnTable, currentPhysConvHighSpeed15minElapsedTime=currentPhysConvHighSpeed15minElapsedTime, intervalPhysPerfCurrentOscGain15minTimeStamp=intervalPhysPerfCurrentOscGain15minTimeStamp, routingIpMask=routingIpMask, currentGfpt1dayEntry=currentGfpt1dayEntry, transientCpConnectionEstablishmentCompleted=transientCpConnectionEstablishmentCompleted, deployProvSyslogEntry=deployProvSyslogEntry, connectionEthDataToNodeIp=connectionEthDataToNodeIp, deployProvTunnelOtnDefaultsTunnelScope=deployProvTunnelOtnDefaultsTunnelScope, vc4allocatedClassInstanceNumber=vc4allocatedClassInstanceNumber, deployProvShelfCapSupply=deployProvShelfCapSupply, deployProvControlPlaneOtnDefaultsRmTraceDetail=deployProvControlPlaneOtnDefaultsRmTraceDetail, intervalPhysPerfOscPwr1dayNumber=intervalPhysPerfOscPwr1dayNumber, deployProvLogicalCpIfFendDataLinkId=deployProvLogicalCpIfFendDataLinkId, intervalOduTcmA1dayValidFlag=intervalOduTcmA1dayValidFlag, thresholdOtuFecSublayerSESHighThres15min=thresholdOtuFecSublayerSESHighThres15min, alarmThresOptPowerCtrlFailureHigh=alarmThresOptPowerCtrlFailureHigh, deployProvCopyPathWdmSourcePathIndex=deployProvCopyPathWdmSourcePathIndex, opticalIfDiagLocalOscTemp=opticalIfDiagLocalOscTemp, intervalL2EthRx1dayMulticastFramesRcv=intervalL2EthRx1dayMulticastFramesRcv, opticalIfConfigCapUtag=opticalIfConfigCapUtag, deployProvModuleDefaultsMode=deployProvModuleDefaultsMode, teUnnumLinkWdmDataPhysicalLink=teUnnumLinkWdmDataPhysicalLink, intervalOtuFec1dayExTable=intervalOtuFec1dayExTable, virtualOpticalChannelConfigEntry=virtualOpticalChannelConfigEntry, deployProvLanCapAreaId=deployProvLanCapAreaId, intervalPhysPerfOscOpticalOutputPwr1weekTable=intervalPhysPerfOscOpticalOutputPwr1weekTable, alarmAseTableGenFailHighBackreflection=alarmAseTableGenFailHighBackreflection, forceDeployProvApsCapHoldOffTime=forceDeployProvApsCapHoldOffTime, deployProvModuleCapFiber=deployProvModuleCapFiber, inventoryCpOtnUpDataTable=inventoryCpOtnUpDataTable, deployProvLogicalIfAdmin=deployProvLogicalIfAdmin, changeServiceDeployProvIfCapTraceTransmitSapiOduTcmC=changeServiceDeployProvIfCapTraceTransmitSapiOduTcmC, deployProvControlPlaneOtnDefaultsPcConfigFlag=deployProvControlPlaneOtnDefaultsPcConfigFlag, currentOdu1dayEntry=currentOdu1dayEntry, deployProvDcnCapForceDestroy=deployProvDcnCapForceDestroy, apsProtFacilityConfigEntry=apsProtFacilityConfigEntry, thresholdOduTcmCOduTcmCBbeHighThres15min=thresholdOduTcmCOduTcmCBbeHighThres15min, currentPmSnapshotOscPowerReceived=currentPmSnapshotOscPowerReceived, intervalPhysConvTxHighSpeed1dayValidFlag=intervalPhysConvTxHighSpeed1dayValidFlag, deployProvOpticalLinkCapRowStatus=deployProvOpticalLinkCapRowStatus, intervalPhysPerfDiffGrDelay1dayTimeStamp=intervalPhysPerfDiffGrDelay1dayTimeStamp, tunnelWdmConfigCommand=tunnelWdmConfigCommand, connectionOtnDataConnectionNo=connectionOtnDataConnectionNo, deployProvCrsDcnDefaultsEcc=deployProvCrsDcnDefaultsEcc, deployProvLogicalIfDefaultsAuthString=deployProvLogicalIfDefaultsAuthString, controlPlaneEthConfigRaAlarmActivationTime=controlPlaneEthConfigRaAlarmActivationTime, logicalIfConfigTable=logicalIfConfigTable, shelfConfigRackNumber=shelfConfigRackNumber, deployProvModuleGroup=deployProvModuleGroup, FspR7ChannelIdentifier=FspR7ChannelIdentifier, thresholdSonetLoPathESHighThres1day=thresholdSonetLoPathESHighThres1day, intervalDispersionCompensation1weekValidFlag=intervalDispersionCompensation1weekValidFlag, controlPlaneWdmConfigCmConfigFlag=controlPlaneWdmConfigCmConfigFlag, FspR7FecType=FspR7FecType, intervalFarEndPhysPerfOpticalOutputPwr1weekNumber=intervalFarEndPhysPerfOpticalOutputPwr1weekNumber, eRoadmConfigEntry=eRoadmConfigEntry, deployProvControlPlaneOtnTedbMaxSize=deployProvControlPlaneOtnTedbMaxSize, currentSonetHoPath15minTable=currentSonetHoPath15minTable, intervalOtuFec15minEntry=intervalOtuFec15minEntry, deployProvControlPlaneOtnCapCtmSetupTimeout=deployProvControlPlaneOtnCapCtmSetupTimeout, deployProvIfCapSigDegThresSonetLine=deployProvIfCapSigDegThresSonetLine, deployProvPathElementOtnUpTributaryPort=deployProvPathElementOtnUpTributaryPort, deployProvConnStdCapToEndpointB=deployProvConnStdCapToEndpointB, deployProvIfDefaultsErrorForwarding=deployProvIfDefaultsErrorForwarding, deployProvIfTraceTransmitSapiOduTcmA=deployProvIfTraceTransmitSapiOduTcmA, FspR7BipCaps=FspR7BipCaps, intervalSonetLine15minValidFlag=intervalSonetLine15minValidFlag, logicalCpIfConfigEntry=logicalCpIfConfigEntry, f7eqp8tca10gc=f7eqp8tca10gc, connectionEthDataTunnelNumberExtension=connectionEthDataTunnelNumberExtension, crsConnWdmDataEntityOutage=crsConnWdmDataEntityOutage, fspUserManagementInternalState=fspUserManagementInternalState, currentEthRxHighSpeed1dayEntry=currentEthRxHighSpeed1dayEntry, interfaceConfigCapEqlzAdmin=interfaceConfigCapEqlzAdmin, intervalPhysPerfDiffGrDelay1dayEntry=intervalPhysPerfDiffGrDelay1dayEntry, opticalFilterIfDataEntry=opticalFilterIfDataEntry, deployProvIfDispersionSetting=deployProvIfDispersionSetting, changeServiceDeployProvIfCapTraceTransmitOpspOdu=changeServiceDeployProvIfCapTraceTransmitOpspOdu, pathElementOtnDataUpTributarySlot=pathElementOtnDataUpTributarySlot, thresholdPhysPerfCapDifferentialGroupDelayHigh=thresholdPhysPerfCapDifferentialGroupDelayHigh, currentGfpfrSublayer15minTable=currentGfpfrSublayer15minTable, dependenciesIndex=dependenciesIndex, deployProvIfSigDegPeriodOtu=deployProvIfSigDegPeriodOtu, thresholdSubAggregateEntry=thresholdSubAggregateEntry, currentPhysConvTxHighSpeed15minElapsedTime=currentPhysConvTxHighSpeed15minElapsedTime, changeServiceDeployProvIfDefaultsSigDegPeriodIntegration=changeServiceDeployProvIfDefaultsSigDegPeriodIntegration, deployProvExChannelDefaultsMinimumOpticalPowerRcv=deployProvExChannelDefaultsMinimumOpticalPowerRcv, FspR7CpRestorationTypeCaps=FspR7CpRestorationTypeCaps, deployProvCopyPathEthCapEntry=deployProvCopyPathEthCapEntry, deployProvIfSigDegThresOduTcmB=deployProvIfSigDegThresOduTcmB, deployProvControlPlaneWdmCapNodeNameSyntax=deployProvControlPlaneWdmCapNodeNameSyntax, tunnelOtnDataCbsTrmt=tunnelOtnDataCbsTrmt, fspUserManagementDefaultsEntry=fspUserManagementDefaultsEntry, intervalPhysPerfDiffGrDelay1weekEntry=intervalPhysPerfDiffGrDelay1weekEntry, logicalCpIfDataFarEndTid=logicalCpIfDataFarEndTid, alarmLaserFailure=alarmLaserFailure, forceDeployProvApsWorkingAidCapsIndex=forceDeployProvApsWorkingAidCapsIndex, deployProvControlPlaneWdmDefaultsNaasTraceDetail=deployProvControlPlaneWdmDefaultsNaasTraceDetail, alarmReceiverLowTemp=alarmReceiverLowTemp, deployProvTifOutputDefaultsEntry=deployProvTifOutputDefaultsEntry, intervalPhysPerfCarrierFreqOffset15minTable=intervalPhysPerfCarrierFreqOffset15minTable, tunnelEthDataToAid=tunnelEthDataToAid, deployProvPathElementWdmRowStatus=deployProvPathElementWdmRowStatus, currentPhysConvHighSpeed1dayCV=currentPhysConvHighSpeed1dayCV, intervalOtuFec1dayExUBE=intervalOtuFec1dayExUBE, deployProvControlPlaneWdmNaasAdvertWait=deployProvControlPlaneWdmNaasAdvertWait, changeServiceDeployProvIfCapTxOffDelay=changeServiceDeployProvIfCapTxOffDelay, neighborDiscoveryDataFarEndTid=neighborDiscoveryDataFarEndTid, intervalOtu1dayNumber=intervalOtu1dayNumber, intervalPhysConvTxHighSpeed1dayTimeStamp=intervalPhysConvTxHighSpeed1dayTimeStamp, deployProvControlPlaneEthCmAlarmActivationTime=deployProvControlPlaneEthCmAlarmActivationTime, crsConnWdmUnusedFromPointsTable=crsConnWdmUnusedFromPointsTable, intervalPhysConvTxHighSpeed1dayTable=intervalPhysConvTxHighSpeed1dayTable, deployProvTunnelOtnDefaultsMonitorEntities=deployProvTunnelOtnDefaultsMonitorEntities, alarmHwOprReachedHT=alarmHwOprReachedHT, farEndPlugDiagnosticsTable=farEndPlugDiagnosticsTable, currentGfpfrSublayer1dayTable=currentGfpfrSublayer1dayTable, transientCopyFileSpaceFail=transientCopyFileSpaceFail, controlPlaneWdmConfigCmFisFrsTimeout=controlPlaneWdmConfigCmFisFrsTimeout, alarmCpTunnelEstablishFailed=alarmCpTunnelEstablishFailed, entityDeletion=entityDeletion, deployProvIfLacpTimeout=deployProvIfLacpTimeout, intervalOduTcmB15minEntry=intervalOduTcmB15minEntry, intervalRoundTripDelay1weekTimeStamp=intervalRoundTripDelay1weekTimeStamp, deployProvLogicalIfCapDeadInterval=deployProvLogicalIfCapDeadInterval, currentL2EthRx1dayBytesFrames65Rcv=currentL2EthRx1dayBytesFrames65Rcv, alarmThres15MinExceededPhysConvCVTX=alarmThres15MinExceededPhysConvCVTX, nodeChannelTraceFromAid=nodeChannelTraceFromAid, intervalOtu1dayTable=intervalOtu1dayTable, f7eqp2Tcm2g5d=f7eqp2Tcm2g5d, FspR7NodeIdCaps=FspR7NodeIdCaps, deployProvDcnExternalVidCapsIndexCap=deployProvDcnExternalVidCapsIndexCap, intervalFarEndPhysPerfOpticalInputPwr1dayNumber=intervalFarEndPhysPerfOpticalInputPwr1dayNumber, FspR7TopologyTypeCaps=FspR7TopologyTypeCaps, deployProvApsCapFarEndIp=deployProvApsCapFarEndIp, forceDeployProvApsCapSignalFailureSwitching=forceDeployProvApsCapSignalFailureSwitching, deployProvTunnelEthCapTunnelScope=deployProvTunnelEthCapTunnelScope, moduleDeployProv=moduleDeployProv, currentEthTx1dayElapsedTime=currentEthTx1dayElapsedTime, controlPlaneOtnConfigPcTraceDetail=controlPlaneOtnConfigPcTraceDetail, forceDeployProvApsHoldOffTime=forceDeployProvApsHoldOffTime, currentSonetLine1dayES=currentSonetLine1dayES, intervalEthRx3HS1dayBytesFrames128Rcv=intervalEthRx3HS1dayBytesFrames128Rcv, currentDefectSeconds15minTable=currentDefectSeconds15minTable, deployProvTunnelWdmDefaultsTable=deployProvTunnelWdmDefaultsTable, deployProvIfCapLaserOffDelayFunction=deployProvIfCapLaserOffDelayFunction, alarmInputVoltageFailurePort1=alarmInputVoltageFailurePort1, currentGfpSublayer1dayEntry=currentGfpSublayer1dayEntry, alarmTraceIdentifierMismatchOduTcmC=alarmTraceIdentifierMismatchOduTcmC, deployProvIfDefaultsTraceTransmitSapiOduTcmB=deployProvIfDefaultsTraceTransmitSapiOduTcmB, deployProvTunnelWdmTunnelNo=deployProvTunnelWdmTunnelNo, intervalPhysPerfPumpPwr15minEntry=intervalPhysPerfPumpPwr15minEntry, plugDataFiberType=plugDataFiberType, deployProvTunnelWdmDefaultsRecoveryType=deployProvTunnelWdmDefaultsRecoveryType, changeServiceDeployProvIfDefaultsChannelProvisioning=changeServiceDeployProvIfDefaultsChannelProvisioning, pathElementOtnDataDownTributaryPort=pathElementOtnDataDownTributaryPort, deployProvPathElementEthDefaultsNodeIp=deployProvPathElementEthDefaultsNodeIp, transientThres1DayExceededOduTcmAES=transientThres1DayExceededOduTcmAES, wdmChannelModuleInventoryEntry=wdmChannelModuleInventoryEntry, intervalSonetSect1dayTable=intervalSonetSect1dayTable, deployProvPathElementWdmDownstreamModuleAid=deployProvPathElementWdmDownstreamModuleAid, inventoryCpEthCrsUpDataTable=inventoryCpEthCrsUpDataTable, deployProvControlPlaneWdmDefaultsTedbMinAdvertWait=deployProvControlPlaneWdmDefaultsTedbMinAdvertWait, deployProvIfDefaultsWdmRxChannel=deployProvIfDefaultsWdmRxChannel, deployProvLogicalCpIfDefaultsTunnelAid=deployProvLogicalCpIfDefaultsTunnelAid, connectionOtnDataSignalledPaths=connectionOtnDataSignalledPaths, authTrapUnsuccessfulAuthCount=authTrapUnsuccessfulAuthCount, cloningSource=cloningSource, deployProvTunnelWdmTerminationLevel=deployProvTunnelWdmTerminationLevel, currentSonetLoPath15minES=currentSonetLoPath15minES, teUnnumLinkWdmDataSynchronization=teUnnumLinkWdmDataSynchronization, pathElementOtnDataUpTributaryODTUType=pathElementOtnDataUpTributaryODTUType, farEndIfDiagnosticsLaserBiasCurrentLevel=farEndIfDiagnosticsLaserBiasCurrentLevel, deployProvModuleLanAidCapsTable=deployProvModuleLanAidCapsTable, FspR7LagPortTypeCaps=FspR7LagPortTypeCaps, deployProvCopyPathWdmTable=deployProvCopyPathWdmTable, transientEqlzProcessPassed=transientEqlzProcessPassed, deployProvPathElementOtnCapTrafficEngineeringType=deployProvPathElementOtnCapTrafficEngineeringType, intervalL2EthRx1dayBytesRcv=intervalL2EthRx1dayBytesRcv, intervalOduTcmB1dayTimeStamp=intervalOduTcmB1dayTimeStamp, thresholdGfpCoreHecCorrectedFramesHighThres15Min=thresholdGfpCoreHecCorrectedFramesHighThres15Min, logicalIfDataIpAddrMonitor=logicalIfDataIpAddrMonitor, inventoryCpWdmDownDataResources=inventoryCpWdmDownDataResources, controlPlaneWdmConfigCtmMaximumRetryNumber=controlPlaneWdmConfigCtmMaximumRetryNumber, deployProvIfCapAdmin=deployProvIfCapAdmin, transientWorkingSwitchedtoProtection=transientWorkingSwitchedtoProtection, FspR7CpTunnelType=FspR7CpTunnelType, deployProvPppIpDefaultsDefaultGateway=deployProvPppIpDefaultsDefaultGateway, exChannelConfigMaximumPMDRcv=exChannelConfigMaximumPMDRcv, controlPlaneEthDataRaAlias=controlPlaneEthDataRaAlias, intervalL2EthTx15minBytesFrames1024Trmt=intervalL2EthTx15minBytesFrames1024Trmt, currentL2EthRx1dayElapsedTime=currentL2EthRx1dayElapsedTime, deployProvIfFarEndCommunication=deployProvIfFarEndCommunication, deployProvConnNonStdCapFromType=deployProvConnNonStdCapFromType, deployProvApsPeerAidCapsIndex=deployProvApsPeerAidCapsIndex, farEndIfDataTransmitWavelength=farEndIfDataTransmitWavelength, deployProvPathElementWdmCapEntry=deployProvPathElementWdmCapEntry, deployProvControlPlaneWdmNodeNameSyntax=deployProvControlPlaneWdmNodeNameSyntax, currentL2EthTx15minBytesFrames512Trmt=currentL2EthTx15minBytesFrames512Trmt, neFtpServer=neFtpServer, transientThres1DayExceededOduTcmBBbe=transientThres1DayExceededOduTcmBBbe, inventoryCpEthUpDataFacilities=inventoryCpEthUpDataFacilities, deployProvShelfDefaultsForceDestroy=deployProvShelfDefaultsForceDestroy, deployProvApsCapRowStatus=deployProvApsCapRowStatus, deployProvIfCapIpType=deployProvIfCapIpType, thresholdPhysConvDEHighThres15min=thresholdPhysConvDEHighThres15min, changeServiceDeployProvIfCapSignalDegradePeriod=changeServiceDeployProvIfCapSignalDegradePeriod, f7eqpWca10gc=f7eqpWca10gc, ethernetDataMonitoredBitrate=ethernetDataMonitoredBitrate, alarmAlarmIndicationSignalLine=alarmAlarmIndicationSignalLine, thresholdPhysConvCombinedCVDEHighThres15min=thresholdPhysConvCombinedCVDEHighThres15min, intervalPhysPerfOscOpticalOutputPwr15minMean=intervalPhysPerfOscOpticalOutputPwr15minMean)
mibBuilder.exportSymbols("FspR7-MIB", tnaMapDataRemoteTnaMask=tnaMapDataRemoteTnaMask, f7SFPHS=f7SFPHS, intervalDefectSeconds15minTable=intervalDefectSeconds15minTable, alarmSignalDegradeOduTcmC=alarmSignalDegradeOduTcmC, thresholdSonetHoPathESHighThres1day=thresholdSonetHoPathESHighThres1day, intervalLinkAttenuation15minTable=intervalLinkAttenuation15minTable, deployProvTunnelEthCapRestorationType=deployProvTunnelEthCapRestorationType, FspR7PrbsPmResetCaps=FspR7PrbsPmResetCaps, thresholdPhysPerfCapAttRxLow=thresholdPhysPerfCapAttRxLow, changeServiceDeployProvIfTraceTransmitDapiOtu=changeServiceDeployProvIfTraceTransmitDapiOtu, alarmAutoShutdownSendingLckOdu=alarmAutoShutdownSendingLckOdu, f7ContainerSfpSlot=f7ContainerSfpSlot, controlPlaneWdmDataCmAlias=controlPlaneWdmDataCmAlias, intervalSonetHoPath1daySES=intervalSonetHoPath1daySES, commonConfigAndStatus=commonConfigAndStatus, neModusLastRestart=neModusLastRestart, intervalL2EthTx1dayBytesFrames1024Trmt=intervalL2EthTx1dayBytesFrames1024Trmt, deployProvLogicalCpIfFarEndTid=deployProvLogicalCpIfFarEndTid, intervalPhysPerfOpticalInputPwr1dayNumber=intervalPhysPerfOpticalInputPwr1dayNumber, deployProvIfDefaultsSigDegThresSonetLine=deployProvIfDefaultsSigDegThresSonetLine, tunnelWdmDataReversionState=tunnelWdmDataReversionState, changeServiceDeployProvIfCapEqlzAdmin=changeServiceDeployProvIfCapEqlzAdmin, thresholdSubAggregateESHighThres1day=thresholdSubAggregateESHighThres1day, intervalGfpfr1dayGoodFrames=intervalGfpfr1dayGoodFrames, interfaceDataSignalMapping=interfaceDataSignalMapping, deployProvTunnelOtnTunnelId=deployProvTunnelOtnTunnelId, thresholdOtuUASHighThres1day=thresholdOtuUASHighThres1day, controlPlaneWdmConfigCtmConfigFlag=controlPlaneWdmConfigCtmConfigFlag, deployProvPlugCapMaxDataRate=deployProvPlugCapMaxDataRate, alarmThres15MinExceededMuxES=alarmThres15MinExceededMuxES, transientForcedWorkingSwitchedBacktoProtection=transientForcedWorkingSwitchedBacktoProtection, deployProvPppIpCapAreaId=deployProvPppIpCapAreaId, cloningTable=cloningTable, deployProvIfDefaultsFecType=deployProvIfDefaultsFecType, thresholdDefectSecondsDefectSecondsHighThres15Min=thresholdDefectSecondsDefectSecondsHighThres15Min, intervalOtuFec15minExNumber=intervalOtuFec15minExNumber, deployProvControlPlaneWdmCapPcConfigFlag=deployProvControlPlaneWdmCapPcConfigFlag, deployProvLogicalCpIfCapIpAddrMask=deployProvLogicalCpIfCapIpAddrMask, logicalCpIfDataFendTeLinkIdNum=logicalCpIfDataFendTeLinkIdNum, FspR7OpticalFiberType=FspR7OpticalFiberType, deployProvPathElementWdmCapTrafficEngineeringType=deployProvPathElementWdmCapTrafficEngineeringType, thresholdPhysConvTxHighSpeedTable=thresholdPhysConvTxHighSpeedTable, deployProvLogicalCpIfFacilityType=deployProvLogicalCpIfFacilityType, apsProtFacilityConfigTable=apsProtFacilityConfigTable, deployProvTunnelOtnEntry=deployProvTunnelOtnEntry, intervalSonetSect1daySEFS=intervalSonetSect1daySEFS, intervalGfpfr15minEntry=intervalGfpfr15minEntry, FspR7PortMode=FspR7PortMode, remoteAlarmCpDataSource=remoteAlarmCpDataSource, controlPlaneOtnEntityStateSecondaryStates=controlPlaneOtnEntityStateSecondaryStates, ntpServerTable=ntpServerTable, deployProvTunnelEthDefaultsEntry=deployProvTunnelEthDefaultsEntry, deployProvIfTraceExpectedOdu=deployProvIfTraceExpectedOdu, currentOdu1dayUAS=currentOdu1dayUAS, intervalSonetLoPath1dayValidFlag=intervalSonetLoPath1dayValidFlag, alarmThres15MinExceededOduTcmBES=alarmThres15MinExceededOduTcmBES, FspR7CpErrorCategory=FspR7CpErrorCategory, deployProvControlPlaneEthCapCmAlarmActivationTime=deployProvControlPlaneEthCapCmAlarmActivationTime, thresholdFarEndPhysPerfCapEntry=thresholdFarEndPhysPerfCapEntry, intervalGfpt15minValidFlag=intervalGfpt15minValidFlag, vtpEntityDataFiber=vtpEntityDataFiber, deployProvIfDefaultsIpAddr=deployProvIfDefaultsIpAddr, f7eqpSh1hu=f7eqpSh1hu, intervalEthRx3HS15minOversizedFramesRcv=intervalEthRx3HS15minOversizedFramesRcv, FspR7ChannelBandwidthCaps=FspR7ChannelBandwidthCaps, changeServiceDeployProvIfCapTcmCLevel=changeServiceDeployProvIfCapTcmCLevel, changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmB=changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmB, thresholdPhysPerfPumpLaser3TempLowThres=thresholdPhysPerfPumpLaser3TempLowThres, currentGfp15minEntry=currentGfp15minEntry, intervalGfpt1dayNumber=intervalGfpt1dayNumber, deployProvTunnelEthDefaultsTunnelId=deployProvTunnelEthDefaultsTunnelId, transientNeColdStart=transientNeColdStart, deployProvIfDefaultsCac=deployProvIfDefaultsCac, opticalIfDataProtectionRole=opticalIfDataProtectionRole, intervalOdu1daySES=intervalOdu1daySES, intervalSonetSect1dayCV=intervalSonetSect1dayCV, intervalEthRx3HS1dayNumber=intervalEthRx3HS1dayNumber, alarmTemperatureTooHigh=alarmTemperatureTooHigh, currentSonetSect1daySES=currentSonetSect1daySES, deployProvLogicalCpIfPrio=deployProvLogicalCpIfPrio, deployProvIfAreaId=deployProvIfAreaId, dependenciesTable=dependenciesTable, deployProvDcnDefaultsTable=deployProvDcnDefaultsTable, intervalPhysPerfOscOpticalOutputPwr1dayHigh=intervalPhysPerfOscOpticalOutputPwr1dayHigh, controlPlaneOtnConfigRaAlarmActivationTime=controlPlaneOtnConfigRaAlarmActivationTime, eocDataProtectionRole=eocDataProtectionRole, intervalPhysPerfOscOpticalOutputPwr1weekMean=intervalPhysPerfOscOpticalOutputPwr1weekMean, FspR7Bip=FspR7Bip, forceDeployProvApsDirection=forceDeployProvApsDirection, transientNtpSrvTestFailed=transientNtpSrvTestFailed, intervalPhysPerfLaserBiasCurrentNormalized1weekNumber=intervalPhysPerfLaserBiasCurrentNormalized1weekNumber, deployProvApsDefaultsTable=deployProvApsDefaultsTable, alarmVirtualChannelAis=alarmVirtualChannelAis, deployProvLogicalCpIfPushedFarEndIpHeader=deployProvLogicalCpIfPushedFarEndIpHeader, deployProvPathElementWdmDefaultsChannelUp=deployProvPathElementWdmDefaultsChannelUp, alarmPumpLaser3TempTooHigh=alarmPumpLaser3TempTooHigh, deployProvPathElementOtnCapDownTributarySlot=deployProvPathElementOtnCapDownTributarySlot, deployProvControlPlaneEthTedbMinAdvertWait=deployProvControlPlaneEthTedbMinAdvertWait, intervalL2EthRx15minFramesRcv=intervalL2EthRx15minFramesRcv, tunnelWdmDataErrorCodeMinor=tunnelWdmDataErrorCodeMinor, wdmChannelModuleDataSuppClientPlugTypes=wdmChannelModuleDataSuppClientPlugTypes, deployProvIfCapEqlzAdmin=deployProvIfCapEqlzAdmin, deployProvLogicalCpIfCapRowStatus=deployProvLogicalCpIfCapRowStatus, alarmThres15MinExceededOtuSES=alarmThres15MinExceededOtuSES, portBindingDataEntry=portBindingDataEntry, tunnelWdmConfigRestorationType=tunnelWdmConfigRestorationType, intervalL2EthTx15minBytesFrames1519Trmt=intervalL2EthTx15minBytesFrames1519Trmt, alarmBackwardDefectIndicationOduTcmC=alarmBackwardDefectIndicationOduTcmC, FspR7NoYes=FspR7NoYes, thresholdSonetLoPathESHighThres15min=thresholdSonetLoPathESHighThres15min, intervalSonetLine1dayUAS=intervalSonetLine1dayUAS, intervalOtuFec1dayExTimeStamp=intervalOtuFec1dayExTimeStamp, f7eqp2pm=f7eqp2pm, alarmEncryptionPortMaxKeyExchgFailuresReachedOos=alarmEncryptionPortMaxKeyExchgFailuresReachedOos, deployProvControlPlaneOtnDefaultsRowStatus=deployProvControlPlaneOtnDefaultsRowStatus, virtualOpticalChannelDataTransmitFrequency=virtualOpticalChannelDataTransmitFrequency, tunnelWdmDataMonitorEntitiesDerive=tunnelWdmDataMonitorEntitiesDerive, deployProvPlugCapAdmin=deployProvPlugCapAdmin, coldStartAgentReconfigured=coldStartAgentReconfigured, deployProvLogicalCpIfDefaultsAlias=deployProvLogicalCpIfDefaultsAlias, deployProvVchChannelTraceTransmitDapiOdu=deployProvVchChannelTraceTransmitDapiOdu, deployProvControlPlaneEthCapRsvpMaxExpRestartTime=deployProvControlPlaneEthCapRsvpMaxExpRestartTime, intervalRoundTripDelay1dayNumber=intervalRoundTripDelay1dayNumber, transientNeTimeChanged=transientNeTimeChanged, controlPlaneWdmConfigRaConfigFlag=controlPlaneWdmConfigRaConfigFlag, deployProvDcnLanAid=deployProvDcnLanAid, deployProvIfTimModeOduTcmB=deployProvIfTimModeOduTcmB, intervalSonetSect1dayNumber=intervalSonetSect1dayNumber, deployProvLogicalIfDefaultsHelloInterval=deployProvLogicalIfDefaultsHelloInterval, opticalIfDataVethAid=opticalIfDataVethAid, ntpTimeZoneCapsTable=ntpTimeZoneCapsTable, intervalL2EthRx15minBytesRcv=intervalL2EthRx15minBytesRcv, teNumLinkWdmDataTable=teNumLinkWdmDataTable, deployProvIfMaxFrameSize=deployProvIfMaxFrameSize, transientThres1DayExceededPhysConvCVTX=transientThres1DayExceededPhysConvCVTX, FspR7CpType=FspR7CpType, deployProvLogicalIfDefaultsLanLinkAid=deployProvLogicalIfDefaultsLanLinkAid, logicalCpIfConfigLayer=logicalCpIfConfigLayer, deployProvIfDefaultsTraceExpectedOdu=deployProvIfDefaultsTraceExpectedOdu, controlPlaneOtnConfigNaasConfigFlag=controlPlaneOtnConfigNaasConfigFlag, FspR7SecurityMode=FspR7SecurityMode, knownHostRowStatus=knownHostRowStatus, deployProvPppIpDefaultsRowStatus=deployProvPppIpDefaultsRowStatus, deployProvIfTraceTransmitSapiOdu=deployProvIfTraceTransmitSapiOdu, deployProvControlPlaneWdmDefaultsPcTraceDetail=deployProvControlPlaneWdmDefaultsPcTraceDetail, intervalPhysPerfChromaticDispersion1weekLow=intervalPhysPerfChromaticDispersion1weekLow, changeServiceDeployProvIfVoaSetpoint=changeServiceDeployProvIfVoaSetpoint, thresholdSonetLoPathSESHighThres15min=thresholdSonetLoPathSESHighThres15min, thresholdGfptDiscardedSuperblocksHighThres15Min=thresholdGfptDiscardedSuperblocksHighThres15Min, deployProvIfDefaultsTraceTransmitDapiOduTcmC=deployProvIfDefaultsTraceTransmitDapiOduTcmC, controlPlaneWdmConfigRaTraceDetail=controlPlaneWdmConfigRaTraceDetail, crsConnWdmDataTunnelAid=crsConnWdmDataTunnelAid, thresholdPhysPerfUpperAtlinkThres=thresholdPhysPerfUpperAtlinkThres, intervalLatency1weekTable=intervalLatency1weekTable, vc3allocatedSequenceNumber=vc3allocatedSequenceNumber, thresholdGfpTHecDiscardedFramesHighThres1Day=thresholdGfpTHecDiscardedFramesHighThres1Day, deployProvIfDefaultsSigDegPeriodOduTcmC=deployProvIfDefaultsSigDegPeriodOduTcmC, moduleDataWidth=moduleDataWidth, currentEthTx1dayPauseFrames=currentEthTx1dayPauseFrames, intervalPhysPerfOlmRxLineAtt15minNumber=intervalPhysPerfOlmRxLineAtt15minNumber, forceDeployProvApsPeerAidCapsTable=forceDeployProvApsPeerAidCapsTable, tunnelEthDataTunnelScope=tunnelEthDataTunnelScope, thresholdOduTcmBESHighThres1day=thresholdOduTcmBESHighThres1day, changeServiceDeployProvIfCapDisparityCorrection=changeServiceDeployProvIfCapDisparityCorrection, deployProvIfTraceTransmitDapiOduTcmC=deployProvIfTraceTransmitDapiOduTcmC, intervalPhysPerfOscPwr1dayEntry=intervalPhysPerfOscPwr1dayEntry, alarmThres15MinExceededPhysConvCV=alarmThres15MinExceededPhysConvCV, deployProvControlPlaneWdmCdbConfigFlag=deployProvControlPlaneWdmCdbConfigFlag, thresholdGfpSublayerTypeHecCorrectedFramesHighThres15Min=thresholdGfpSublayerTypeHecCorrectedFramesHighThres15Min, deployProvTunnelEthTable=deployProvTunnelEthTable, deployProvControlPlaneWdmCapCtmSetupTimeout=deployProvControlPlaneWdmCapCtmSetupTimeout, shelfConfigRackOrder=shelfConfigRackOrder, currentSonetHoPath1daySES=currentSonetHoPath1daySES, connectionWdmDataMonitorEntities=connectionWdmDataMonitorEntities, neAlarmProfileApplyCap=neAlarmProfileApplyCap, deployProvControlPlaneEthCapPcTraceDetail=deployProvControlPlaneEthCapPcTraceDetail, lanIpDataTable=lanIpDataTable, opticalIfConfigCapTxOffDelay=opticalIfConfigCapTxOffDelay, changeServiceDeployProvIfDefaultsSigDegThresSonetLine=changeServiceDeployProvIfDefaultsSigDegThresSonetLine, ntpSrvObjectChange=ntpSrvObjectChange, intervalPhysPerfCarrierFreqOffset15minLow=intervalPhysPerfCarrierFreqOffset15minLow, moduleDataNetworkPorts=moduleDataNetworkPorts, fspUserManagementSnmpTimeoutValue=fspUserManagementSnmpTimeoutValue, deployProvCopyPathEthDefaultsTable=deployProvCopyPathEthDefaultsTable, transientThres1DayExceededOduTcmCBbe=transientThres1DayExceededOduTcmCBbe, reservationCpDataTunnelNo=reservationCpDataTunnelNo, intervalEthRx15minBytes=intervalEthRx15minBytes, tunnelOtnConfigEntry=tunnelOtnConfigEntry, inventoryCpEthDownFlowDataFacilities=inventoryCpEthDownFlowDataFacilities, FspR7OscChannel=FspR7OscChannel, FspR7ActionCaps=FspR7ActionCaps, deployProvModuleChannel=deployProvModuleChannel, intervalL2EthRx15minBytesFrames1024Rcv=intervalL2EthRx15minBytesFrames1024Rcv, alarmOptSignalFailure=alarmOptSignalFailure, thresholdSubAggregateSESHighThres15min=thresholdSubAggregateSESHighThres15min, intervalLatency1dayNumber=intervalLatency1dayNumber, changeServiceDeployProvIfCapAttenuationGradient=changeServiceDeployProvIfCapAttenuationGradient, intervalEthRx3HS15minControlFrameRcv=intervalEthRx3HS15minControlFrameRcv, thresholdOduTcmAEntry=thresholdOduTcmAEntry, inventoryCpOtnDownDataResources=inventoryCpOtnDownDataResources, plugDataEntry=plugDataEntry, controlPlaneEthConfigTedbConfigFlag=controlPlaneEthConfigTedbConfigFlag, deployProvCopyPathOtnTable=deployProvCopyPathOtnTable, FspR7CpProtectionType=FspR7CpProtectionType, deployProvApsSignalFailureSwitching=deployProvApsSignalFailureSwitching, thresholdPhysConvCombinedESHighThres1day=thresholdPhysConvCombinedESHighThres1day, interfaceDataTransmitWavelength=interfaceDataTransmitWavelength, currentEthRx3HS1dayBroadcastFramesRcv=currentEthRx3HS1dayBroadcastFramesRcv, alarmAttOnTransmitterFiberHigherThanMonitor=alarmAttOnTransmitterFiberHigherThanMonitor, tunnelOtnDataToNodeIpMonitor=tunnelOtnDataToNodeIpMonitor, FspR7CpRsvpSignalling=FspR7CpRsvpSignalling, deployProvControlPlaneOtnCdbDetail=deployProvControlPlaneOtnCdbDetail, deployProvIfAutoPTassignment=deployProvIfAutoPTassignment, deployProvTunnelWdmCapMonitorEntities=deployProvTunnelWdmCapMonitorEntities, plugInventoryTable=plugInventoryTable, intervalPhysPerfBackreflectionPwrRcv1dayEntry=intervalPhysPerfBackreflectionPwrRcv1dayEntry, deployProvPortBindingLifAidCapsTable=deployProvPortBindingLifAidCapsTable, teUnnumLinkOtnDataTable=teUnnumLinkOtnDataTable, thresholdPhysPerfConfigurableOpticalOutputPwrHigh=thresholdPhysPerfConfigurableOpticalOutputPwrHigh, deployProvLogicalIfCapAlias=deployProvLogicalIfCapAlias, tunnelWdmConfigRestorationMode=tunnelWdmConfigRestorationMode, changeServiceDeployProvIfTraceExpectedOtu=changeServiceDeployProvIfTraceExpectedOtu, eRoadmDataEntry=eRoadmDataEntry, crsConnPossibleToCreateEntry=crsConnPossibleToCreateEntry, currentL2EthRx15minBroadcastFramesRcv=currentL2EthRx15minBroadcastFramesRcv, deployProvDcnDefaultsLanAid=deployProvDcnDefaultsLanAid, deployProvLogicalCpIfDefaultsLinkColor=deployProvLogicalCpIfDefaultsLinkColor, intervalPhysPerfLaserBiasCurrentNormalized15minLow=intervalPhysPerfLaserBiasCurrentNormalized15minLow, tifiDataEntry=tifiDataEntry, inventoryCpWdmCrsDownDataTable=inventoryCpWdmCrsDownDataTable, pathElementEthDataNodeIpMonitor=pathElementEthDataNodeIpMonitor, intervalSonetHoPath1dayValidFlag=intervalSonetHoPath1dayValidFlag, changeServiceDeployProvIfEntry=changeServiceDeployProvIfEntry, intervalFarEndPhysPerfOpticalOutputPwr1dayTable=intervalFarEndPhysPerfOpticalOutputPwr1dayTable, FspR7CpVTeTypeCaps=FspR7CpVTeTypeCaps, deployProvTunnelEthDefaultsFacilityType=deployProvTunnelEthDefaultsFacilityType, eroadmIfDiagnosticsOutputPower=eroadmIfDiagnosticsOutputPower, intervalLinkAttenuation1dayNumber=intervalLinkAttenuation1dayNumber, intervalL2EthTx1dayTimeStamp=intervalL2EthTx1dayTimeStamp, opticalIfConfigDispersionSetting=opticalIfConfigDispersionSetting, intervalSonetLine15minTable=intervalSonetLine15minTable, currentGfpt15minEntry=currentGfpt15minEntry, deployProvIfCapOduTribPortNo=deployProvIfCapOduTribPortNo, changeServiceDeployProvIfDefaultsTraceTransmitDapiOdu=changeServiceDeployProvIfDefaultsTraceTransmitDapiOdu, deployProvControlPlaneEthCdbDetail=deployProvControlPlaneEthCdbDetail, tunnelEthDataToTid=tunnelEthDataToTid, plugDeployProv=plugDeployProv, performanceMIB=performanceMIB, deployProvModuleCapEntry=deployProvModuleCapEntry, currentSonetHoPath1dayCV=currentSonetHoPath1dayCV, intervalPhysPerfEstimatedSignalGain1weekValidFlag=intervalPhysPerfEstimatedSignalGain1weekValidFlag, tunnelWdmConfigFacilityType=tunnelWdmConfigFacilityType, changeServiceDeployProvIfCapTraceFormSonetSection=changeServiceDeployProvIfCapTraceFormSonetSection, currentDiagnosticsTable=currentDiagnosticsTable)
mibBuilder.exportSymbols("FspR7-MIB", currentPhysConv15minEntry=currentPhysConv15minEntry, f7eqp8Csmuc=f7eqp8Csmuc, changeServiceDeployProvIfVoaMode=changeServiceDeployProvIfVoaMode, currentEthRx3HS1dayJabberFrameRcv=currentEthRx3HS1dayJabberFrameRcv, alarmFwpMismatchDownloadNotServiceAffecting=alarmFwpMismatchDownloadNotServiceAffecting, deployProvLogicalIfDefaultsAdmin=deployProvLogicalIfDefaultsAdmin, alarmMidstageFault=alarmMidstageFault, interfaceDataTransmitFrequency=interfaceDataTransmitFrequency, lanIpConfigEntry=lanIpConfigEntry, deployProvIfCapOpticalSetPoint=deployProvIfCapOpticalSetPoint, thresholdEthRxPauseFramesHighThres1Day=thresholdEthRxPauseFramesHighThres1Day, intervalPhysPerfDiffGrDelay1dayValidFlag=intervalPhysPerfDiffGrDelay1dayValidFlag, deployProvPlugThirdPartyUsage=deployProvPlugThirdPartyUsage, currentOtuFec1dayExCE=currentOtuFec1dayExCE, vtpEntityDataLevel=vtpEntityDataLevel, intervalGfpfrSublayer1dayValidFlag=intervalGfpfrSublayer1dayValidFlag, tunnelWdmConfigAbortProcess=tunnelWdmConfigAbortProcess, deployProvVirtualOpticalChannelCapTable=deployProvVirtualOpticalChannelCapTable, deployProvPathElementOtnDefaultsNodeIp=deployProvPathElementOtnDefaultsNodeIp, deployProvIfCapOpuPayloadType=deployProvIfCapOpuPayloadType, intervalSonetLine1dayES=intervalSonetLine1dayES, currentOduTcmC1dayBbe=currentOduTcmC1dayBbe, intervalOtuFec1dayExEntry=intervalOtuFec1dayExEntry, opticalIfConfigFarEndCommunication=opticalIfConfigFarEndCommunication, deployProvPathEthEntry=deployProvPathEthEntry, moduleDataCategory=moduleDataCategory, changeServiceDeployProvIfTraceFormSonetSection=changeServiceDeployProvIfTraceFormSonetSection, opticalIfConfigAutoThresReset=opticalIfConfigAutoThresReset, edfaConfigEntry=edfaConfigEntry, deployProvIfVoaSetpoint=deployProvIfVoaSetpoint, intervalOduTcmB1dayNumber=intervalOduTcmB1dayNumber, thresholdOtuFecCEHighThres1day=thresholdOtuFecCEHighThres1day, transientLocalCopyMemComplted=transientLocalCopyMemComplted, intervalSonetLoPath1dayEntry=intervalSonetLoPath1dayEntry, deployProvModuleDefaultsLagSysPrio=deployProvModuleDefaultsLagSysPrio, crsConnDeployProvTable=crsConnDeployProvTable, ptpEntityDataFrequency=ptpEntityDataFrequency, deployProvLogicalIfTable=deployProvLogicalIfTable, interfaceDataProtectionRole=interfaceDataProtectionRole, deployProvLogicalCpIfVNodeTltp=deployProvLogicalCpIfVNodeTltp, controlPlaneOtnConfigRaTraceDetail=controlPlaneOtnConfigRaTraceDetail, changeServiceDeployProvIfTraceTransmitSapiOduTcmC=changeServiceDeployProvIfTraceTransmitSapiOduTcmC, deployProvPortBindingDefaultsRemotePort=deployProvPortBindingDefaultsRemotePort, nendIpCapIndexCap=nendIpCapIndexCap, deployProvPppIpBaud=deployProvPppIpBaud, deployProvIfDefaultsTimModeOduTcmC=deployProvIfDefaultsTimModeOduTcmC, deployProvIfCapPvid=deployProvIfCapPvid, alarmLossofMultiframeLowerOrderPath=alarmLossofMultiframeLowerOrderPath, crsConnConfigType=crsConnConfigType, intervalFarEndPhysPerfOpticalOutputPwr1dayLow=intervalFarEndPhysPerfOpticalOutputPwr1dayLow, deployProvPathElementOtnDownTributaryTSMethod=deployProvPathElementOtnDownTributaryTSMethod, sts1allocatedEntry=sts1allocatedEntry, deployProvTunnelEthDefaultsRowStatus=deployProvTunnelEthDefaultsRowStatus, opticalIfConfigSigDegPeriodOdu=opticalIfConfigSigDegPeriodOdu, intervalPhysPerfOlmRxLineAtt1weekValidFlag=intervalPhysPerfOlmRxLineAtt1weekValidFlag, FspR7NtpMode=FspR7NtpMode, alarmLockedDefectOdu=alarmLockedDefectOdu, ptpEntityDataConnector=ptpEntityDataConnector, currentSonetLine15minSES=currentSonetLine15minSES, deployProvControlPlaneWdmTedbMinAdvertWait=deployProvControlPlaneWdmTedbMinAdvertWait, currentL2EthTx15minTable=currentL2EthTx15minTable, thresholdOtuFecUBEHighThres15min=thresholdOtuFecUBEHighThres15min, deployProvCopyPathOtnDefaultsRowStatus=deployProvCopyPathOtnDefaultsRowStatus, dcnOspf=dcnOspf, deployProvTunnelOtnDefaultsRestorationType=deployProvTunnelOtnDefaultsRestorationType, deployProvPppIpDefaultsType=deployProvPppIpDefaultsType, deployProvControlPlaneEthDefaultsCdConfigFlag=deployProvControlPlaneEthDefaultsCdConfigFlag, opticalIfDiagInputPower=opticalIfDiagInputPower, alarmTransmitterDisabledEpc=alarmTransmitterDisabledEpc, lanIpConfigIpAddr=lanIpConfigIpAddr, intervalPhysPerfOpticalInputPwr1dayHigh=intervalPhysPerfOpticalInputPwr1dayHigh, deployProvPathElementEthTable=deployProvPathElementEthTable, transientRestorationStart=transientRestorationStart, intervalPhysConvCombined15minCVDE=intervalPhysConvCombined15minCVDE, tunnelOtnDataTunnelId=tunnelOtnDataTunnelId, deployProvControlPlaneOtnDefaultsCtmRetryWaitMultiplier=deployProvControlPlaneOtnDefaultsCtmRetryWaitMultiplier, pathElementEthDataTidMonitor=pathElementEthDataTidMonitor, deployProvModuleCapLanAid=deployProvModuleCapLanAid, intervalPhysPerfOpticalInputPwr1dayTable=intervalPhysPerfOpticalInputPwr1dayTable, deployProvPathElementEthCapNodeIp=deployProvPathElementEthCapNodeIp, changeServiceDeployProvIfDispersionSetting=changeServiceDeployProvIfDispersionSetting, connectionOtnDataFacilityType=connectionOtnDataFacilityType, connectionEthDataToTid=connectionEthDataToTid, deployProvPathElementOtnCapUpTributaryPort=deployProvPathElementOtnCapUpTributaryPort, crsConnWdmDataIngressTid=crsConnWdmDataIngressTid, intervalPhysConv15minNumber=intervalPhysConv15minNumber, deployProvIfTraceTransmitOpspOduTcmA=deployProvIfTraceTransmitOpspOduTcmA, inventoryCpOtnUpDataEntry=inventoryCpOtnUpDataEntry, thresholdSonetLoPathSESHighThres1day=thresholdSonetLoPathSESHighThres1day, deployProvTunnelEthCirRcv=deployProvTunnelEthCirRcv, opticalIfDataLagPorts=opticalIfDataLagPorts, farEndIfConfigCapTable=farEndIfConfigCapTable, tunnelEthDataErrorCategory=tunnelEthDataErrorCategory, currentL2EthRx15minOversizedFramesRcv=currentL2EthRx15minOversizedFramesRcv, changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmA=changeServiceDeployProvIfDefaultsTraceTransmitSapiOduTcmA, currentOduTcmC15minElapsedTime=currentOduTcmC15minElapsedTime, deployProvLogicalCpIfDefaultsEncoding=deployProvLogicalCpIfDefaultsEncoding, deployProvShelfBand=deployProvShelfBand, deployProvLogicalCpIfDefaultsAuthString=deployProvLogicalCpIfDefaultsAuthString, fspR7VendorTypes=fspR7VendorTypes, sts1allocatedClassInstanceNumber=sts1allocatedClassInstanceNumber, deployProvIfDefaultsTraceTransmitOpspOduTcmC=deployProvIfDefaultsTraceTransmitOpspOduTcmC, inventoryCpOtnDownDataTable=inventoryCpOtnDownDataTable, intervalPmSnapshotTable=intervalPmSnapshotTable, intervalPhysPerfBackreflectionPwrRcv1dayNumber=intervalPhysPerfBackreflectionPwrRcv1dayNumber, f7OTU2=f7OTU2, deployProvPppIpDefaultsAreaId=deployProvPppIpDefaultsAreaId, FspR7FtpClient=FspR7FtpClient, intervalPhysPerfSignalToNoiseRatio1weekHigh=intervalPhysPerfSignalToNoiseRatio1weekHigh, alarmAutoShutdownAls=alarmAutoShutdownAls, deployProvPortBindingLifAidCapsIndex=deployProvPortBindingLifAidCapsIndex, intervalOtuFec15minExTimeStamp=intervalOtuFec15minExTimeStamp, crsDcnDataPppInstance=crsDcnDataPppInstance, deployProvControlPlaneWdmTable=deployProvControlPlaneWdmTable, controlPlaneOtnConfigCmConfigFlag=controlPlaneOtnConfigCmConfigFlag, currentEthRx3HS1dayControlFrameRcv=currentEthRx3HS1dayControlFrameRcv, alarmLossOfSignal=alarmLossOfSignal, deployProvLogicalCpIfDefaultsRefreshTimeout=deployProvLogicalCpIfDefaultsRefreshTimeout, opticalIfDiagPumpLaser2Temp=opticalIfDiagPumpLaser2Temp, deployProvControlPlaneOtnDefaultsRmTraceTarget=deployProvControlPlaneOtnDefaultsRmTraceTarget, connectionWdmDataFecType=connectionWdmDataFecType, inactiveRoutingIpDevice=inactiveRoutingIpDevice, alarmAttOnReceiverFiberHigherThanMonitor=alarmAttOnReceiverFiberHigherThanMonitor, tunnelEthDataErrorIp=tunnelEthDataErrorIp, transientCryptoPasswdChanged=transientCryptoPasswdChanged, changeServiceDeployProvIfForceDestroy=changeServiceDeployProvIfForceDestroy, deployProvIfCapSigDegThresSdhMs=deployProvIfCapSigDegThresSdhMs, intervalPhysPerfCurrentOscGain1dayTimeStamp=intervalPhysPerfCurrentOscGain1dayTimeStamp, alarmSignalDegradeScn=alarmSignalDegradeScn, deployProvLogicalCpIfLayer=deployProvLogicalCpIfLayer, systemConfigAndStatus=systemConfigAndStatus, ApsTypeCaps=ApsTypeCaps, opticalIfDataFiberType=opticalIfDataFiberType, connectionEthDataToAid=connectionEthDataToAid, intervalPhysPerfCurrent1weekTimeStamp=intervalPhysPerfCurrent1weekTimeStamp, pathEthDataConnectionTunnelAid=pathEthDataConnectionTunnelAid, pathElementWdmDataTable=pathElementWdmDataTable, deployProvModuleScrambling=deployProvModuleScrambling, thresholdFarEndPhysPerfCapOpticalInputPwrHigh=thresholdFarEndPhysPerfCapOpticalInputPwrHigh, currentL2EthTx15minBytesTrmt=currentL2EthTx15minBytesTrmt, neFtpServerCap=neFtpServerCap, alarmCapabilityLevelMismatch=alarmCapabilityLevelMismatch, inventoryCpWdmDownDataTable=inventoryCpWdmDownDataTable, thresholdPhysPerfAttRxLow=thresholdPhysPerfAttRxLow, intervalPhysPerfOscOpticalOutputPwr1weekNumber=intervalPhysPerfOscOpticalOutputPwr1weekNumber, intervalL2EthTx1dayNumber=intervalL2EthTx1dayNumber, FspR7RedLinedState=FspR7RedLinedState, FspR7MappingCaps=FspR7MappingCaps, deployProvTunnelWdmDefaultsTunnelTemplate=deployProvTunnelWdmDefaultsTunnelTemplate, crsConnDataTunnelId=crsConnDataTunnelId, deployProvTunnelOtnCapConnectionDirection=deployProvTunnelOtnCapConnectionDirection, deployProvTunnelEthAlias=deployProvTunnelEthAlias, farEndIfDiagnosticsOutputPower=farEndIfDiagnosticsOutputPower, intervalPhysPerfOscPwr1dayValidFlag=intervalPhysPerfOscPwr1dayValidFlag, deployProvPathElementWdmTie=deployProvPathElementWdmTie, f7eqpEdfas=f7eqpEdfas, sts1allocatedSequenceNumber=sts1allocatedSequenceNumber, deployProvControlPlaneEthCapCmCrankBackTimeout=deployProvControlPlaneEthCapCmCrankBackTimeout, intervalSonetLoPath15minNumber=intervalSonetLoPath15minNumber, gfpServiceConfigAndStatus=gfpServiceConfigAndStatus, deployProvLogicalCpIfCapFacilityType=deployProvLogicalCpIfCapFacilityType, wdmChannelModuleDataSuppNetworkPlugTypes=wdmChannelModuleDataSuppNetworkPlugTypes, deployProvCrsDcnDefaultsLink=deployProvCrsDcnDefaultsLink, deployProvTunnelOtnToNodeIp=deployProvTunnelOtnToNodeIp, FspR7LagSysIdFend=FspR7LagSysIdFend, crossConnectionDeployProv=crossConnectionDeployProv, intervalGfpSublayer15minValidFlag=intervalGfpSublayer15minValidFlag, deployProvTunnelEthCapCirRcv=deployProvTunnelEthCapCirRcv, controlPlaneWdmConfigPcConfigFlag=controlPlaneWdmConfigPcConfigFlag, currentGfp1dayTable=currentGfp1dayTable, pathElementOtnDataNodeIpMonitor=pathElementOtnDataNodeIpMonitor, intervalL2EthRx15minUndersizedFramesRcv=intervalL2EthRx15minUndersizedFramesRcv, deployProvLogicalCpIfDefaultsFendDataLinkId=deployProvLogicalCpIfDefaultsFendDataLinkId, intervalPhysPerfSignalToNoiseRatio1dayNumber=intervalPhysPerfSignalToNoiseRatio1dayNumber, intervalPhysConvCombined1dayCVDE=intervalPhysConvCombined1dayCVDE, sts1allocatedContainer=sts1allocatedContainer, currentEthRx3HS15minBytesFrames256Rcv=currentEthRx3HS15minBytesFrames256Rcv, deployProvTunnelOtnDefaultsToTid=deployProvTunnelOtnDefaultsToTid, intervalSonetLoPath1dayTable=intervalSonetLoPath1dayTable, currentEthTx15minEntry=currentEthTx15minEntry, intervalGfp1dayTable=intervalGfp1dayTable, intervalOtu15minTimeStamp=intervalOtu15minTimeStamp, changeServiceDeployProvIfDefaultsSigDegPeriodOtu=changeServiceDeployProvIfDefaultsSigDegPeriodOtu, inventoryCpOtnUpDataFacilities=inventoryCpOtnUpDataFacilities, currentSubAggregate15minElapsedTime=currentSubAggregate15minElapsedTime, currentPhysConvHighSpeed15minES=currentPhysConvHighSpeed15minES, controlPlaneOtnConfigCdConfigFlag=controlPlaneOtnConfigCdConfigFlag, intervalPhysPerfSignalToNoiseRatio15minMean=intervalPhysPerfSignalToNoiseRatio15minMean, controlPlaneOtnDataPcAlias=controlPlaneOtnDataPcAlias, thresholdPhysPerfBrPwrReceivedHighThres=thresholdPhysPerfBrPwrReceivedHighThres, currentSonetLoPath1dayUAS=currentSonetLoPath1dayUAS, neMinPasswordLength=neMinPasswordLength, thresholdPhysPerfLaserTempHighThres=thresholdPhysPerfLaserTempHighThres, f7eqpOscm=f7eqpOscm, deployProvTunnelWdmCapFromAid=deployProvTunnelWdmCapFromAid, deployProvControlPlaneWdmCdResyncTimeout=deployProvControlPlaneWdmCdResyncTimeout, deployProvIfCapPayload=deployProvIfCapPayload, currentEthRx3HS15minUndersizedFramesRcv=currentEthRx3HS15minUndersizedFramesRcv, tunnelWdmConfigProvisionedPaths=tunnelWdmConfigProvisionedPaths, deployProvControlPlaneOtnCapRaConfigFlag=deployProvControlPlaneOtnCapRaConfigFlag, deployProvModuleDispersionCompensation=deployProvModuleDispersionCompensation, intervalFarEndPhysPerfOpticalInputPwr1dayHigh=intervalFarEndPhysPerfOpticalInputPwr1dayHigh, alarmLossOfSignalCPort=alarmLossOfSignalCPort, deployProvLogicalCpIfDefaultsRowStatus=deployProvLogicalCpIfDefaultsRowStatus, alarmFacilityLoopback=alarmFacilityLoopback, currentSubAggregate1daySES=currentSubAggregate1daySES, connectionOtnDataEncode=connectionOtnDataEncode, deployProvLogicalIfCapFacilityType=deployProvLogicalIfCapFacilityType, intervalFarEndPhysPerfOpticalInputPwr1dayEntry=intervalFarEndPhysPerfOpticalInputPwr1dayEntry, ntpTimeZoneCapsIndex=ntpTimeZoneCapsIndex, intervalPhysConvHighSpeed1dayCV=intervalPhysConvHighSpeed1dayCV, FspR7LaserForcedOperation=FspR7LaserForcedOperation, alarmEncryptionPortKeyInitExchgMissed=alarmEncryptionPortKeyInitExchgMissed, changeServiceDeployProvIfCapSigDegPeriodSdhSection=changeServiceDeployProvIfCapSigDegPeriodSdhSection, tnaMapDataTable=tnaMapDataTable, opticalIfOlmEntry=opticalIfOlmEntry, forceDeployProvApsDefaultsWorkingAid=forceDeployProvApsDefaultsWorkingAid, intervalPhysPerfOpticalOutputPwr1dayTimeStamp=intervalPhysPerfOpticalOutputPwr1dayTimeStamp, controlPlaneOtnConfigRsvpMaxExpRestartTime=controlPlaneOtnConfigRsvpMaxExpRestartTime, FspR7L2CacEnableCaps=FspR7L2CacEnableCaps, intervalRoundTripDelay1dayEntry=intervalRoundTripDelay1dayEntry, dcnOspfAreaCreation=dcnOspfAreaCreation, intervalEthRx3HS15minBytesFrames512Rcv=intervalEthRx3HS15minBytesFrames512Rcv, connectionEthDataTunnelType=connectionEthDataTunnelType, logicalCpIfDataFarEndNodeIpMonitor=logicalCpIfDataFarEndNodeIpMonitor, deployProvExChannelDefaultsEntry=deployProvExChannelDefaultsEntry, intervalPhysPerfCurrent1dayNumber=intervalPhysPerfCurrent1dayNumber, thresholdDefectSecondsDefectSecondsHighThres1Day=thresholdDefectSecondsDefectSecondsHighThres1Day, deployProvPortBindingDefaultsRemoteScPc=deployProvPortBindingDefaultsRemoteScPc, transientThres1DayExceededOtuBbe=transientThres1DayExceededOtuBbe, intervalPhysConv15minTimeStamp=intervalPhysConv15minTimeStamp, systemBusy=systemBusy, currentPhysConvTxHighSpeed15minCVTX=currentPhysConvTxHighSpeed15minCVTX, deployProvModuleDCFiberType=deployProvModuleDCFiberType, deployProvTunnelOtnCapProtectionType=deployProvTunnelOtnCapProtectionType, currentPmSnapshotBackreflectionPowerReceived=currentPmSnapshotBackreflectionPowerReceived, intervalPhysPerfBackreflectionPwrRcv1weekLow=intervalPhysPerfBackreflectionPwrRcv1weekLow, changeServiceDeployProvIfCapDispersionMode=changeServiceDeployProvIfCapDispersionMode, moduleConfigCapabilityLevelProvision=moduleConfigCapabilityLevelProvision, intervalPhysPerfOpticalInputPwr1dayValidFlag=intervalPhysPerfOpticalInputPwr1dayValidFlag, deployProvLogicalCpIfDefaultsTransport=deployProvLogicalCpIfDefaultsTransport, f7eqp2absmc=f7eqp2absmc, thresholdIntrusionEntry=thresholdIntrusionEntry, deployProvExChannelEntry=deployProvExChannelEntry, intervalSonetHoPath15minSES=intervalSonetHoPath15minSES, alarmOpticalOutputPowerTransmittedTooHigh=alarmOpticalOutputPowerTransmittedTooHigh, dcnOspfAreaStubDefaultMetric=dcnOspfAreaStubDefaultMetric, sts1allocatedTable=sts1allocatedTable, ptpEntityDataConnEqptState=ptpEntityDataConnEqptState, changeServiceDeployProvIfCapWdmRxChannel=changeServiceDeployProvIfCapWdmRxChannel, deployProvTifInputDefaultsAdmin=deployProvTifInputDefaultsAdmin, deployProvControlPlaneOtnCapPcTraceDetail=deployProvControlPlaneOtnCapPcTraceDetail, controlPlaneEthConfigNaasTraceDetail=controlPlaneEthConfigNaasTraceDetail, intervalSonetHoPath1dayEntry=intervalSonetHoPath1dayEntry)
mibBuilder.exportSymbols("FspR7-MIB", pathElementWdmDataChannelUp=pathElementWdmDataChannelUp, tunnelEthDataErrorTid=tunnelEthDataErrorTid, FspR7Date=FspR7Date, deployProvIfDefaultsAttenuationGradient=deployProvIfDefaultsAttenuationGradient, deployProvIfCapErrorForwarding=deployProvIfCapErrorForwarding, intervalEthTx1dayPauseFrames=intervalEthTx1dayPauseFrames, currentOdu1dayTable=currentOdu1dayTable, deployProvIfLanAidCapsIndex=deployProvIfLanAidCapsIndex, controlPlaneWdmConfigNaasAdvertWait=controlPlaneWdmConfigNaasAdvertWait, intervalL2EthTx1dayBytesFrames512Trmt=intervalL2EthTx1dayBytesFrames512Trmt, thresholdSonetSectCVHighThres1day=thresholdSonetSectCVHighThres1day, controlPlaneOtnConfigCtmRetryWaitMultiplier=controlPlaneOtnConfigCtmRetryWaitMultiplier, tunnelWdmDataTunnelNo=tunnelWdmDataTunnelNo, deployProvControlPlaneEthCdTraceDetail=deployProvControlPlaneEthCdTraceDetail, alarmThres15MinExceededFecCE=alarmThres15MinExceededFecCE, opticalIfDiagRamanPumpPower=opticalIfDiagRamanPumpPower, deployProvIfDefaultsAlsMode=deployProvIfDefaultsAlsMode, logicalCpIfConfigHelloInterval=logicalCpIfConfigHelloInterval, entitiesToCloningTable=entitiesToCloningTable, intervalLinkAttenuation1dayLow=intervalLinkAttenuation1dayLow, deployProvModuleDefaultsForceDestroy=deployProvModuleDefaultsForceDestroy, interfaceDataPayload=interfaceDataPayload, FspR7LagPortType=FspR7LagPortType, connectionWdmDataTunnelId=connectionWdmDataTunnelId, intervalPhysPerfLaserBiasCurrentNormalized15minTimeStamp=intervalPhysPerfLaserBiasCurrentNormalized15minTimeStamp, neNtpStatusServer1=neNtpStatusServer1, interfaceConfigCapDataLayerPmReset=interfaceConfigCapDataLayerPmReset, transientCopyFileTransferComplete=transientCopyFileTransferComplete, alarmPumpLaser4TempTooHigh=alarmPumpLaser4TempTooHigh, deployProvShelfDefaultsEntry=deployProvShelfDefaultsEntry, virtualOpticalChannelDataTable=virtualOpticalChannelDataTable, controlPlaneEthEntityStateCapEntry=controlPlaneEthEntityStateCapEntry, FspR7PlugDataRate=FspR7PlugDataRate, intervalEthRx3HS15minBytesFrames1519Rcv=intervalEthRx3HS15minBytesFrames1519Rcv, intervalGfpfrSublayer1dayNumber=intervalGfpfrSublayer1dayNumber, interfaceConfigCapBehaviour=interfaceConfigCapBehaviour, fspUserManagementTable=fspUserManagementTable, changeServiceDeployProvIfCapTimModeOduTcmB=changeServiceDeployProvIfCapTimModeOduTcmB, changeServiceDeployProvIfCapOspf=changeServiceDeployProvIfCapOspf, logicalCpIfConfigTimeToLive=logicalCpIfConfigTimeToLive, thresholdPhysConvHighSpeedEntry=thresholdPhysConvHighSpeedEntry, remoteAlarmCpDataNodeTid=remoteAlarmCpDataNodeTid, deployProvLogicalIfCapRowStatus=deployProvLogicalIfCapRowStatus, deployProvTunnelWdmDefaultsLayer=deployProvTunnelWdmDefaultsLayer, inventoryCpWdmDownDataEntry=inventoryCpWdmDownDataEntry, interfaceConfigCapTable=interfaceConfigCapTable, tunnelOtnDataFromAid=tunnelOtnDataFromAid, deployProvControlPlaneWdmCapCdbDetail=deployProvControlPlaneWdmCapCdbDetail, deployProvControlPlaneEthRaConfigFlag=deployProvControlPlaneEthRaConfigFlag, connectionWdmDataTunnelScope=connectionWdmDataTunnelScope, otdrDataRemainingTime=otdrDataRemainingTime, alarmAutoShutdownTxRxLasersDueToHighTemp=alarmAutoShutdownTxRxLasersDueToHighTemp, FspR7OpticalInterfaceReachCaps=FspR7OpticalInterfaceReachCaps, farEndIfConfigAlias=farEndIfConfigAlias, currentEthRx3HS1dayTable=currentEthRx3HS1dayTable, areaAidCapStringCap=areaAidCapStringCap, deployProvExChannelOpticalPowerTx=deployProvExChannelOpticalPowerTx, inventoryCpEthCrsUpDataEntry=inventoryCpEthCrsUpDataEntry, neEqlzIntervalCap=neEqlzIntervalCap, deployProvIfCapSigDegThresReceiver=deployProvIfCapSigDegThresReceiver, changeServiceDeployProvIfCapAprHighThreshold=changeServiceDeployProvIfCapAprHighThreshold, thresholdPhysPerfPumpLaser2TempLowThres=thresholdPhysPerfPumpLaser2TempLowThres, changeServiceDeployProvIfCapTraceExpectedOdu=changeServiceDeployProvIfCapTraceExpectedOdu, pathElementWdmDataLogicalInterfaceId=pathElementWdmDataLogicalInterfaceId, changeServiceDeployProvIfDefaultsOscOpticalSetpoint=changeServiceDeployProvIfDefaultsOscOpticalSetpoint, deployProvPppIpDefaultsFarEndIp=deployProvPppIpDefaultsFarEndIp, currentL2EthRx15minCrcErrorsRcv=currentL2EthRx15minCrcErrorsRcv, eRoadmInfoNetworkPorts=eRoadmInfoNetworkPorts, apsConfigTable=apsConfigTable, currentOtu1dayTable=currentOtu1dayTable, controlPlaneWdmConfigRsvpMaxExpRestartTime=controlPlaneWdmConfigRsvpMaxExpRestartTime, deployProvModuleChannelsProvision=deployProvModuleChannelsProvision, deployProvControlPlaneOtnCapCtmMaximumRetryNumber=deployProvControlPlaneOtnCapCtmMaximumRetryNumber, pathElementWdmDataComputedOnsrForward=pathElementWdmDataComputedOnsrForward, deployProvModuleCapGain=deployProvModuleCapGain, deployProvLogicalCpIfCapRefreshTimeout=deployProvLogicalCpIfCapRefreshTimeout, f7eqp2oscm=f7eqp2oscm, FspR7RouteRedist=FspR7RouteRedist, deployProvCopyPathEthCapPathId=deployProvCopyPathEthCapPathId, tunnelWdmConfigEntry=tunnelWdmConfigEntry, intervalPhysPerfOscPwr1weekLow=intervalPhysPerfOscPwr1weekLow, FspR7TL1TimoutAvailable=FspR7TL1TimoutAvailable, farEndIfDataConnectionType=farEndIfDataConnectionType, deployProvLogicalIfRetransmitInterval=deployProvLogicalIfRetransmitInterval, vc3allocatedEntry=vc3allocatedEntry, deployProvIfCapIpAddr=deployProvIfCapIpAddr, gfpServiceDefTable=gfpServiceDefTable, changeServiceDeployProvIfTraceTransmitDapiOdu=changeServiceDeployProvIfTraceTransmitDapiOdu, changeServiceDeployProvIfTimingSource=changeServiceDeployProvIfTimingSource, alarmPayloadMismatchOPU=alarmPayloadMismatchOPU, neSwVersion=neSwVersion, changeServiceDeployProvIfDefaultsPumpPower=changeServiceDeployProvIfDefaultsPumpPower, tunnelEthDataComputedPaths=tunnelEthDataComputedPaths, intervalRoundTripDelay1weekMean=intervalRoundTripDelay1weekMean, deployProvPathElementOtnNodeIp=deployProvPathElementOtnNodeIp, deployProvPppIpCapTable=deployProvPppIpCapTable, deployProvCopyPathWdmDefaultsRowStatus=deployProvCopyPathWdmDefaultsRowStatus, deployProvPathElementOtnTie=deployProvPathElementOtnTie, intervalFarEndPhysPerfOpticalOutputPwr1dayEntry=intervalFarEndPhysPerfOpticalOutputPwr1dayEntry, alarmDcnServerSignalFailure=alarmDcnServerSignalFailure, intervalLinkAttenuation15minValidFlag=intervalLinkAttenuation15minValidFlag, teRouterDataInfo=teRouterDataInfo, thresholdOduESHighThres15min=thresholdOduESHighThres15min, ethernetConfigIpMaskMonitor=ethernetConfigIpMaskMonitor, ptpEntityDataSfProvision=ptpEntityDataSfProvision, currentGfpfr1dayTHecDiscardedFrames=currentGfpfr1dayTHecDiscardedFrames, alarmThres15MinExceededOduUAS=alarmThres15MinExceededOduUAS, currentSonetLoPath1dayEntry=currentSonetLoPath1dayEntry, f7eqpPsu1hudc=f7eqpPsu1hudc, shelfConfigTable=shelfConfigTable, alarmRoundTripDelayTooHigh=alarmRoundTripDelayTooHigh, currentOdu15minElapsedTime=currentOdu15minElapsedTime, intervalFarEndPhysPerfOpticalInputPwr1dayMean=intervalFarEndPhysPerfOpticalInputPwr1dayMean, farEndIfDataFiberType=farEndIfDataFiberType, deployProvDcnType=deployProvDcnType, alarmOosAins=alarmOosAins, transientCpConnectionEstablishmentFail=transientCpConnectionEstablishmentFail, pathOtnDataTable=pathOtnDataTable, deployProvPlugCapLoopbackAttenuation=deployProvPlugCapLoopbackAttenuation, intervalPhysPerfDiffGrDelay1weekTimeStamp=intervalPhysPerfDiffGrDelay1weekTimeStamp, intervalSubAggregate15minTable=intervalSubAggregate15minTable, deployProvTunnelEthFromAid=deployProvTunnelEthFromAid, controlPlaneOtnEntityStateTable=controlPlaneOtnEntityStateTable, deployProvIfDefaultsSigDegThresSdhMs=deployProvIfDefaultsSigDegThresSdhMs, deployProvLogicalIfCapMetric=deployProvLogicalIfCapMetric, FspR7ProtectionRole=FspR7ProtectionRole, deployProvIfSigDegPeriodOduTcmA=deployProvIfSigDegPeriodOduTcmA, inventoryCpOtnUpDataNumber=inventoryCpOtnUpDataNumber, intervalPhysPerfDiffGrDelay15minTable=intervalPhysPerfDiffGrDelay15minTable, entitiesToCloningEntity=entitiesToCloningEntity, deployProvLogicalCpIfDefaultsHelloInterval=deployProvLogicalCpIfDefaultsHelloInterval, ptpEntityDataBandProvision=ptpEntityDataBandProvision, intervalPhysPerfOlmTxLineAtt15minHigh=intervalPhysPerfOlmTxLineAtt15minHigh, changeServiceDeployProvIfCapIpType=changeServiceDeployProvIfCapIpType, FspR7SingleFiberLocation=FspR7SingleFiberLocation, crsConnWdmConfigRedLineState=crsConnWdmConfigRedLineState, deployProvExChannelTable=deployProvExChannelTable, deployProvIfIpAddr=deployProvIfIpAddr, FspR7CpProtType=FspR7CpProtType, connectionEthDataConnectionNo=connectionEthDataConnectionNo, farEndPlugConfigMaxDataRate=farEndPlugConfigMaxDataRate, FspR7DCFiberTypeCaps=FspR7DCFiberTypeCaps, deployProvApsWorkingAidCapsEntry=deployProvApsWorkingAidCapsEntry, deployProvLogicalIfMetric=deployProvLogicalIfMetric, deployProvDcnEntry=deployProvDcnEntry, alarmEquipmentMismatchAllow=alarmEquipmentMismatchAllow, capabilityDataEntry=capabilityDataEntry, connectionEthDataSourceTna=connectionEthDataSourceTna, currentOduTcmB15minTable=currentOduTcmB15minTable, intervalPhysPerfOscPwr1dayLow=intervalPhysPerfOscPwr1dayLow, f7eqp8TceGl2g5d=f7eqp8TceGl2g5d, deployProvTunnelWdmDefaultsToNodeIp=deployProvTunnelWdmDefaultsToNodeIp, transientThres1DayExceededOduES=transientThres1DayExceededOduES, currentEthRx3HS1dayBytesFrames256Rcv=currentEthRx3HS1dayBytesFrames256Rcv, thresholdSonetLineEntry=thresholdSonetLineEntry, interfaceConfigCapTurnupConfig=interfaceConfigCapTurnupConfig, FspR7CommandModifierCaps=FspR7CommandModifierCaps, changeServiceDeployProvIfDefaultsSigDegThreshold=changeServiceDeployProvIfDefaultsSigDegThreshold, teRouterDataNodeIp=teRouterDataNodeIp, thresholdOduSESHighThres1day=thresholdOduSESHighThres1day, thresholdPhysPerfLaserTempLowThres=thresholdPhysPerfLaserTempLowThres, crsConnDeployProvDefaultsType=crsConnDeployProvDefaultsType, neNtpStatusServer3=neNtpStatusServer3, opticalIfOlmTable=opticalIfOlmTable, intervalOdu15minEntry=intervalOdu15minEntry, intervalDefectSeconds15minTimeStamp=intervalDefectSeconds15minTimeStamp, intervalPhysConvCombined1dayValidFlag=intervalPhysConvCombined1dayValidFlag, currentEthRx3HS15minBytesFrames65Rcv=currentEthRx3HS15minBytesFrames65Rcv, deployProvOpticalLinkRowStatus=deployProvOpticalLinkRowStatus, alarmCarrierFreqOffsetTooLow=alarmCarrierFreqOffsetTooLow, deployProvPathElementWdmChannelUp=deployProvPathElementWdmChannelUp, changeServiceDeployProvIfCapSigDegThresOduTcmB=changeServiceDeployProvIfCapSigDegThresOduTcmB, controlPlaneOtnConfigCtmMaximumRetryNumber=controlPlaneOtnConfigCtmMaximumRetryNumber, crsConnDeployProvDefaultsConn=crsConnDeployProvDefaultsConn, crsConnWdmDataChannelSpacing=crsConnWdmDataChannelSpacing, deployProvModuleCapTable=deployProvModuleCapTable, deployProvModuleDefaultsEdfaPwrOut=deployProvModuleDefaultsEdfaPwrOut, deployProvControlPlaneWdmCapCtmRetryWaitMultiplier=deployProvControlPlaneWdmCapCtmRetryWaitMultiplier, deployProvIfDefaultsSigDegThresSonetSection=deployProvIfDefaultsSigDegThresSonetSection, deployProvModuleCapBand=deployProvModuleCapBand, fspR7Products=fspR7Products, deployProvLogicalCpIfDefaultsFarEndTid=deployProvLogicalCpIfDefaultsFarEndTid, deployProvIfCapSigDegPeriodOdu=deployProvIfCapSigDegPeriodOdu, currentSonetHoPath1dayElapsedTime=currentSonetHoPath1dayElapsedTime, currentGfpSublayer1dayElapsedTime=currentGfpSublayer1dayElapsedTime, thresholdPhysPerfLaserBiasCurrentNormalized=thresholdPhysPerfLaserBiasCurrentNormalized, shelfInfoShelfHeight=shelfInfoShelfHeight, alarmTraceIdentifierMismatchOduTcmA=alarmTraceIdentifierMismatchOduTcmA, SourceIpAddress=SourceIpAddress, deployProvControlPlaneWdmRaAlarmActivationTime=deployProvControlPlaneWdmRaAlarmActivationTime, currentSonetLine1dayTable=currentSonetLine1dayTable, FspR7CpAuthType=FspR7CpAuthType, f7eqpRsmsf=f7eqpRsmsf, vtpEntityDataDirection=vtpEntityDataDirection, thresholdOtuFecSublayerExTable=thresholdOtuFecSublayerExTable, intervalPhysPerfOscPwr1dayTimeStamp=intervalPhysPerfOscPwr1dayTimeStamp, forceDeployProvApsProtectingAidCapsIndex=forceDeployProvApsProtectingAidCapsIndex, currentPhysConv1dayDE=currentPhysConv1dayDE, farEndIfDataAdmin=farEndIfDataAdmin, thresholdOduTcmAUASHighThres15min=thresholdOduTcmAUASHighThres15min, dcnTopologyConfigTable=dcnTopologyConfigTable, neNodeNameSyntax=neNodeNameSyntax, alarmMultipleFanFailure=alarmMultipleFanFailure, deployProvLogicalCpIfCapEntry=deployProvLogicalCpIfCapEntry, deployProvExChannelDefaultsMaximumPMDRcv=deployProvExChannelDefaultsMaximumPMDRcv, intervalLatency1weekNumber=intervalLatency1weekNumber, intervalPhysPerfChromaticDispersion15minNumber=intervalPhysPerfChromaticDispersion15minNumber, currentSubAggregate15minCrc=currentSubAggregate15minCrc, currentPmSnapshotRxLineAttenuation=currentPmSnapshotRxLineAttenuation, transientThres1DayExceededOduTcmBES=transientThres1DayExceededOduTcmBES, alarmThres15MinExceededSonetLineUAS=alarmThres15MinExceededSonetLineUAS, FspR7DeploymentScenario=FspR7DeploymentScenario, currentPmSnapshotOscGain=currentPmSnapshotOscGain, controlPlaneOtnConfigRmTraceTarget=controlPlaneOtnConfigRmTraceTarget, deployProvControlPlaneWdmRaConfigFlag=deployProvControlPlaneWdmRaConfigFlag, alarmLocalOscTemperatureTooHigh=alarmLocalOscTemperatureTooHigh, currentSonetHoPath15minSES=currentSonetHoPath15minSES, eocDataProtAvailability=eocDataProtAvailability, teUnnumLinkWdmDataEntry=teUnnumLinkWdmDataEntry, controlPlaneWdmConfigCdbMaxSize=controlPlaneWdmConfigCdbMaxSize, f7Containers=f7Containers, nodeChannelTraceRouteId=nodeChannelTraceRouteId, routingMIB=routingMIB, deployProvLogicalCpIfPushedNendIpHeader=deployProvLogicalCpIfPushedNendIpHeader, deployProvPlugDefaultsChannelId=deployProvPlugDefaultsChannelId, opticalIfDiagLaserBiasCurrentNormalized=opticalIfDiagLaserBiasCurrentNormalized, currentSonetLine1daySES=currentSonetLine1daySES, capabilityDataTable=capabilityDataTable, currentEthRx15minTable=currentEthRx15minTable, intervalPhysPerfEstimatedSignalGain1weekNumber=intervalPhysPerfEstimatedSignalGain1weekNumber, deployProvControlPlaneWdmRmConfigFlag=deployProvControlPlaneWdmRmConfigFlag, intervalL2EthTx15minEntry=intervalL2EthTx15minEntry, neScuRingCap=neScuRingCap, ethernetConfigFlowControl=ethernetConfigFlowControl, intervalPhysPerfChromaticDispersion1weekMean=intervalPhysPerfChromaticDispersion1weekMean, transientReversionFailed=transientReversionFailed, crsConnDeployProvCapAdmin=crsConnDeployProvCapAdmin, deployProvLogicalIfCapAuthString=deployProvLogicalIfCapAuthString, deployProvPppIpDefaultGateway=deployProvPppIpDefaultGateway, deployProvPathOtnEntry=deployProvPathOtnEntry, deployProvLogicalIfCapIpAddrMask=deployProvLogicalIfCapIpAddrMask, controlPlaneEthDataRmAlias=controlPlaneEthDataRmAlias, deployProvTunnelWdmAlias=deployProvTunnelWdmAlias, fspR7MIB=fspR7MIB, intervalPhysPerfOlmTxLineAtt1weekValidFlag=intervalPhysPerfOlmTxLineAtt1weekValidFlag, deployProvTunnelWdmCapOifUni=deployProvTunnelWdmCapOifUni, currentOduTcmB15minUAS=currentOduTcmB15minUAS, deployProvControlPlaneOtnCtmMaximumRetryWait=deployProvControlPlaneOtnCtmMaximumRetryWait, FspR7IpType=FspR7IpType, deployProvTifOutputDefaultsType=deployProvTifOutputDefaultsType, connectionWdmDataComputedPaths=connectionWdmDataComputedPaths, deployProvApsRowStatus=deployProvApsRowStatus, connectionOtnDataErrorMessage=connectionOtnDataErrorMessage, intervalEthRx3HS1dayGoodFrames=intervalEthRx3HS1dayGoodFrames)
mibBuilder.exportSymbols("FspR7-MIB", FspR7LagLoadBallanceSourceCaps=FspR7LagLoadBallanceSourceCaps, currentOtuFec1dayExUBE=currentOtuFec1dayExUBE, intervalL2EthTx1dayFramesTrmt=intervalL2EthTx1dayFramesTrmt, intervalPhysPerfOpticalInputPwr15minMean=intervalPhysPerfOpticalInputPwr15minMean, deployProvTunnelOtnCapTunnelId=deployProvTunnelOtnCapTunnelId, deployProvIfCapTraceExpectedOduTcmC=deployProvIfCapTraceExpectedOduTcmC, deployProvPathElementOtnDefaultsUpTributaryPort=deployProvPathElementOtnDefaultsUpTributaryPort, currentSubAggregate1dayEntry=currentSubAggregate1dayEntry, currentOtu1dayES=currentOtu1dayES, deployProvControlPlaneOtnRsvpConfigFlag=deployProvControlPlaneOtnRsvpConfigFlag, deployProvControlPlaneEthCdConfigFlag=deployProvControlPlaneEthCdConfigFlag, intervalPhysPerfEstimatedSignalGain15minEntry=intervalPhysPerfEstimatedSignalGain15minEntry, thresholdSonetLineMsEntry=thresholdSonetLineMsEntry, neScuRing=neScuRing, pathOtnDataConnectionTunnelAid=pathOtnDataConnectionTunnelAid, deployProvPathElementOtnTrafficEngineeringType=deployProvPathElementOtnTrafficEngineeringType, FspR7SingleFiberLocationCaps=FspR7SingleFiberLocationCaps, inventoryCpOtnUpDataResources=inventoryCpOtnUpDataResources, plugDataLoopbackAttenuation=plugDataLoopbackAttenuation, teUnnumLinkEthDataPhysicalLink=teUnnumLinkEthDataPhysicalLink, FspR7PacketsLayer=FspR7PacketsLayer, changeServiceDeployProvIfDefaultsIpType=changeServiceDeployProvIfDefaultsIpType, teNumLinkWdmDataDiscarded=teNumLinkWdmDataDiscarded, deployProvPathElementEthDefaultsRowStatus=deployProvPathElementEthDefaultsRowStatus, changeServiceDeployProvIfTraceExpectedOduTcmC=changeServiceDeployProvIfTraceExpectedOduTcmC, FspR7PceMode=FspR7PceMode, intervalOduTcmB15minSES=intervalOduTcmB15minSES, pppfConfigAlias=pppfConfigAlias, deployProvCrsDcnEccAidCapsTable=deployProvCrsDcnEccAidCapsTable, intervalL2EthTx15minBytesFrames65Trmt=intervalL2EthTx15minBytesFrames65Trmt, deployProvPathElementEthCapLifIp=deployProvPathElementEthCapLifIp, teNumLinkEthDataInfo=teNumLinkEthDataInfo, alarmPowerSupplyUnitFailure=alarmPowerSupplyUnitFailure, FspR7TelemetryOutput=FspR7TelemetryOutput, opticalIfConfigForceLaserOn=opticalIfConfigForceLaserOn, deployProvCopyPathOtnSourcePathIndex=deployProvCopyPathOtnSourcePathIndex, interfaceDataValidSignalTimer=interfaceDataValidSignalTimer, deployProvIfTxOffDelay=deployProvIfTxOffDelay, intervalGfpfr1dayTHecDiscardedFrames=intervalGfpfr1dayTHecDiscardedFrames, changeServiceDeployProvIfCapSigDegThresOduTcmC=changeServiceDeployProvIfCapSigDegThresOduTcmC, deployProvLogicalIfCapPrio=deployProvLogicalIfCapPrio, transientThres1DayExceededSonetLineUAS=transientThres1DayExceededSonetLineUAS, eRoadmInfoEntry=eRoadmInfoEntry, deployProvControlPlaneEthCapCdTraceDetail=deployProvControlPlaneEthCapCdTraceDetail, transientThres1DayExceededSonetSectCV=transientThres1DayExceededSonetSectCV, deployProvTunnelWdmCapTunnelType=deployProvTunnelWdmCapTunnelType, dcnTopologyDataTable=dcnTopologyDataTable, alarmDatabaseFailure=alarmDatabaseFailure, thresholdPhysPerfCarrierFreqOffsetLow=thresholdPhysPerfCarrierFreqOffsetLow, intervalPhysPerfOpticalOutputPwr15minNumber=intervalPhysPerfOpticalOutputPwr15minNumber, dcnOspfAreaId=dcnOspfAreaId, FspR7LacpModeCaps=FspR7LacpModeCaps, deployProvControlPlaneOtnCapRaAlarmActivationTime=deployProvControlPlaneOtnCapRaAlarmActivationTime, deployProvDcnExternalVidCapsStringCap=deployProvDcnExternalVidCapsStringCap, deployProvTifInputTable=deployProvTifInputTable, otdrConfigEntry=otdrConfigEntry, opticalLinkDataTable=opticalLinkDataTable, inventoryCpEthUpDataTable=inventoryCpEthUpDataTable, deployProvApsProtectingAidCapsIndex=deployProvApsProtectingAidCapsIndex, alarmProtectionNotAvailable=alarmProtectionNotAvailable, intervalGfpfr1dayCHecDiscardedFrames=intervalGfpfr1dayCHecDiscardedFrames, intervalPhysPerfCarrierFreqOffset1weekTable=intervalPhysPerfCarrierFreqOffset1weekTable, moduleDataUpgradePorts=moduleDataUpgradePorts, currentL2EthRx15minUndersizedFramesRcv=currentL2EthRx15minUndersizedFramesRcv, SourceIpAddressCaps=SourceIpAddressCaps, deployProvLogicalCpIfRetransmitInterval=deployProvLogicalCpIfRetransmitInterval, alarmThres15MinExceededOduTcmCBbe=alarmThres15MinExceededOduTcmCBbe, thresholdPhysConvHighSpeedESHighThres15min=thresholdPhysConvHighSpeedESHighThres15min, FspR7SubLayerCaps=FspR7SubLayerCaps, deployProvPortBindingDefaultsLocalTna=deployProvPortBindingDefaultsLocalTna, tunnelWdmDataToNodeIpMonitor=tunnelWdmDataToNodeIpMonitor, deployProvIfTraceTransmitOpspOdu=deployProvIfTraceTransmitOpspOdu, opticalAmplifierEquipmentDiagnosticsSubTemp=opticalAmplifierEquipmentDiagnosticsSubTemp, entitiesToCloningEntry=entitiesToCloningEntry, intervalFarEndPhysPerfOpticalOutputPwr15minTimeStamp=intervalFarEndPhysPerfOpticalOutputPwr15minTimeStamp, tifoConfigEntry=tifoConfigEntry, vc3allocatedTable=vc3allocatedTable, controlPlaneOtnConfigTable=controlPlaneOtnConfigTable, teUnnumLinkOtnDataNodeTid=teUnnumLinkOtnDataNodeTid, intervalPhysPerfDiffGrDelay15minNumber=intervalPhysPerfDiffGrDelay15minNumber, deployProvIfTcmBLevel=deployProvIfTcmBLevel, transientMin15RecordsAvailable=transientMin15RecordsAvailable, deployProvModuleDefaultsGroup=deployProvModuleDefaultsGroup, alarmNtpForSchedEqlzRequired=alarmNtpForSchedEqlzRequired, deployProvIfDefaultsTraceTransmitSapiOtu=deployProvIfDefaultsTraceTransmitSapiOtu, deployProvLogicalCpIfDefaultsLayer=deployProvLogicalCpIfDefaultsLayer, neighborDiscoveryDataFarEndTranLayerTermPointAid=neighborDiscoveryDataFarEndTranLayerTermPointAid, logicalIfDataLanLinkAid=logicalIfDataLanLinkAid, inventoryCpEthCrsUpDataAids=inventoryCpEthCrsUpDataAids, alarmThres15MinExceededMuxSES=alarmThres15MinExceededMuxSES, FspR7EocProtAvailability=FspR7EocProtAvailability, alarmOosDisabled=alarmOosDisabled, changeServiceDeployProvIfDefaultsDispersionSetting=changeServiceDeployProvIfDefaultsDispersionSetting, deployProvControlPlaneOtnCapRmTraceDetail=deployProvControlPlaneOtnCapRmTraceDetail, deployProvIfCapBitrate=deployProvIfCapBitrate, alarmAseTableNotAvailable=alarmAseTableNotAvailable, currentL2EthRx1dayCrcErrorsRcv=currentL2EthRx1dayCrcErrorsRcv, vc4c16allocatedContainer=vc4c16allocatedContainer, teNumLinkWdmDataTeLinkIp=teNumLinkWdmDataTeLinkIp, intervalOduTcmA1daySES=intervalOduTcmA1daySES, thresholdOduBbeHighThres15min=thresholdOduBbeHighThres15min, FspR7MaxBitErrorRate=FspR7MaxBitErrorRate, changeServiceDeployProvIfDefaultsLaserOffDelayFunction=changeServiceDeployProvIfDefaultsLaserOffDelayFunction, shelfDeployProv=shelfDeployProv, deployProvIfSigDegThresSdhSection=deployProvIfSigDegThresSdhSection, pppfConfigAreaId=pppfConfigAreaId, FspR7NCTRouteType=FspR7NCTRouteType, thresholdGfptTable=thresholdGfptTable, deployProvIfCapDispersionMode=deployProvIfCapDispersionMode, deployProvApsCapTable=deployProvApsCapTable, FspR7ConnectState=FspR7ConnectState, changeServiceDeployProvIfOscOpticalSetpoint=changeServiceDeployProvIfOscOpticalSetpoint, thresholdOduTcmCUASHighThres15min=thresholdOduTcmCUASHighThres15min, currentEthRx1dayCrcFrames=currentEthRx1dayCrcFrames, changeServiceDeployProvIfCapLanAid=changeServiceDeployProvIfCapLanAid, deployProvPathElementOtnDefaultsUpTributarySlot=deployProvPathElementOtnDefaultsUpTributarySlot, changeServiceDeployProvIfTerminationLevel=changeServiceDeployProvIfTerminationLevel, deployProvApsDefaultsPeerAid=deployProvApsDefaultsPeerAid, deployProvLogicalCpIfCapEncapsulation=deployProvLogicalCpIfCapEncapsulation, ptpEntityDataTable=ptpEntityDataTable, exChannelConfigAlias=exChannelConfigAlias, alarmLossofSequenceLowerOrderPath=alarmLossofSequenceLowerOrderPath, controlPlaneOtnConfigCdTraceDetail=controlPlaneOtnConfigCdTraceDetail, currentDefectSeconds15minElapsedTime=currentDefectSeconds15minElapsedTime, changeServiceDeployProvIfDefaultsGain=changeServiceDeployProvIfDefaultsGain, deployProvTunnelEthCapCbsRcv=deployProvTunnelEthCapCbsRcv, transientLocalCopyMemFailDenied=transientLocalCopyMemFailDenied, deployProvIfCapFlowControl=deployProvIfCapFlowControl, intervalOduTcmA15minUAS=intervalOduTcmA15minUAS, intervalPhysPerfCurrentOscGain1dayValidFlag=intervalPhysPerfCurrentOscGain1dayValidFlag, FspR7TurnupConfig=FspR7TurnupConfig, deployProvCrsDcnRowStatus=deployProvCrsDcnRowStatus, alarmDisabledChannelPowerTooHigh=alarmDisabledChannelPowerTooHigh, currentL2EthRx15minFramesRcv=currentL2EthRx15minFramesRcv, neGradeInventory=neGradeInventory, thresholdOduTcmCSESHighThres1day=thresholdOduTcmCSESHighThres1day, transientThres1DayExceededOduTcmABbe=transientThres1DayExceededOduTcmABbe, alarmFarEndInformationMismatch=alarmFarEndInformationMismatch, fspR7Conformance=fspR7Conformance, intervalPhysPerfSignalToNoiseRatio1weekEntry=intervalPhysPerfSignalToNoiseRatio1weekEntry, deployProvPortBindingCapRemotePort=deployProvPortBindingCapRemotePort, syslogConfigSourceIp=syslogConfigSourceIp, alarmLossofTandemConnectionOduTcmC=alarmLossofTandemConnectionOduTcmC, logicalIfDataEncapsulation=logicalIfDataEncapsulation, deployProvIfTimingSource=deployProvIfTimingSource, changeServiceDeployProvIfCapXfpDecisionThres=changeServiceDeployProvIfCapXfpDecisionThres, currentL2EthTx1dayBytesTrmt=currentL2EthTx1dayBytesTrmt, logicalCpIfConfigDeadInterval=logicalCpIfConfigDeadInterval, pathEthDataTable=pathEthDataTable, thresholdSonetLineSESHighThres1day=thresholdSonetLineSESHighThres1day, intervalSonetLoPath15minCV=intervalSonetLoPath15minCV, deployProvIfPortMode=deployProvIfPortMode, intervalPhysPerfOpticalInputPwr1weekTimeStamp=intervalPhysPerfOpticalInputPwr1weekTimeStamp, dcnOspfAreaCapRowStatus=dcnOspfAreaCapRowStatus, thresholdOtuFecCErrHighThres1day=thresholdOtuFecCErrHighThres1day, intervalPhysPerfEstimatedSignalGain1weekLow=intervalPhysPerfEstimatedSignalGain1weekLow, transientThres1DayExceededPhysConvSETX=transientThres1DayExceededPhysConvSETX, knownHostIP=knownHostIP, FspR7SshHostKeyEncryptAlgorithm=FspR7SshHostKeyEncryptAlgorithm, deployProvControlPlaneWdmDefaultsRmTraceTarget=deployProvControlPlaneWdmDefaultsRmTraceTarget, deployProvIfTraceTransmitSonetSection=deployProvIfTraceTransmitSonetSection, tunnelEthDataTunnelId=tunnelEthDataTunnelId, deployProvIfDefaultsEntry=deployProvIfDefaultsEntry, FspR7CpTunnelTypeCaps=FspR7CpTunnelTypeCaps, deployProvControlPlaneOtnCmFisFrsTimeout=deployProvControlPlaneOtnCmFisFrsTimeout, currentSonetLine15minES=currentSonetLine15minES, deployProvIfCapTraceTransmitSonetSection=deployProvIfCapTraceTransmitSonetSection, deployProvIfLagActivePorts=deployProvIfLagActivePorts, deployProvLogicalCpIfDefaultsTeAreaId=deployProvLogicalCpIfDefaultsTeAreaId, thresholdPhysConvCombinedESHighThres15min=thresholdPhysConvCombinedESHighThres15min, intervalPhysConvCombined1dayNumber=intervalPhysConvCombined1dayNumber, deployProvIfCapTraceTransmitSapiOtu=deployProvIfCapTraceTransmitSapiOtu, deployProvIfDefaultsBehaviour=deployProvIfDefaultsBehaviour, deployProvCrsDcnDefaultsForceDestroy=deployProvCrsDcnDefaultsForceDestroy, changeServiceDeployProvIfCapTraceExpectedOduTcmB=changeServiceDeployProvIfCapTraceExpectedOduTcmB, logicalCpIfDataEncoding=logicalCpIfDataEncoding, alarmThermoElectricCoolerCurrentTooLow=alarmThermoElectricCoolerCurrentTooLow, controlPlaneWdmConfigWaitToRestore=controlPlaneWdmConfigWaitToRestore, changeServiceDeployProvIfDefaultsAreaId=changeServiceDeployProvIfDefaultsAreaId, deployProvControlPlaneWdmCapCdResyncTimeout=deployProvControlPlaneWdmCapCdResyncTimeout, deployProvPortBindingRemoteScn=deployProvPortBindingRemoteScn, deployProvLogicalIfCapIpAddr=deployProvLogicalIfCapIpAddr, sts48callocatedSequenceNumber=sts48callocatedSequenceNumber, currentEthRx15minCrcFrames=currentEthRx15minCrcFrames, interfaceConfigDispertionConfig=interfaceConfigDispertionConfig, deployProvIfCapSigDegThresSonetSection=deployProvIfCapSigDegThresSonetSection, transientAlarmProfileFactoryDefaultActivation=transientAlarmProfileFactoryDefaultActivation, changeServiceDeployProvIfMetric=changeServiceDeployProvIfMetric, deployProvLogicalIfPushedNendIpHeader=deployProvLogicalIfPushedNendIpHeader, deployProvModuleCapMode=deployProvModuleCapMode, deployProvLogicalCpIfDefaultsIpAddr=deployProvLogicalCpIfDefaultsIpAddr, f7eqpSh3hu=f7eqpSh3hu, deployProvVchChannelDefaultsSigDegThresOdu=deployProvVchChannelDefaultsSigDegThresOdu, FspR7RoadmNumber=FspR7RoadmNumber, intervalPhysPerfBackreflectionPwrRcv15minNumber=intervalPhysPerfBackreflectionPwrRcv15minNumber, controlPlaneOtnConfigCmTraceDetail=controlPlaneOtnConfigCmTraceDetail, intervalSubAggregate1dayValidFlag=intervalSubAggregate1dayValidFlag, deployProvLogicalCpIfCapAlias=deployProvLogicalCpIfCapAlias, forceDeployProvApsDefaultsPeerAid=forceDeployProvApsDefaultsPeerAid, deployProvLogicalCpIfEncoding=deployProvLogicalCpIfEncoding, intervalSonetLine1dayValidFlag=intervalSonetLine1dayValidFlag, deployProvLanCapIpType=deployProvLanCapIpType, deployProvModuleRoadmNumber=deployProvModuleRoadmNumber, deployProvPppIpFlowControl=deployProvPppIpFlowControl, changeServiceDeployProvIfCapTraceExpectedOtu=changeServiceDeployProvIfCapTraceExpectedOtu, deployProvShelfCapType=deployProvShelfCapType, deployProvControlPlaneWdmCapCtmShutdownTimeout=deployProvControlPlaneWdmCapCtmShutdownTimeout, teRouterDataIp=teRouterDataIp, deployProvModuleReach=deployProvModuleReach, deployProvIfCapTraceExpectedSonetSection=deployProvIfCapTraceExpectedSonetSection, forceDeployProvApsDefaultsProtectionMech=forceDeployProvApsDefaultsProtectionMech, intervalGfpfr15minGoodFrames=intervalGfpfr15minGoodFrames, deployProvExChannelRowStatus=deployProvExChannelRowStatus, deployProvPathElementOtnDefaultsDownTributaryPort=deployProvPathElementOtnDefaultsDownTributaryPort, ospfDataDesignatedRouter=ospfDataDesignatedRouter, forceDeployProvApsDefaultsEntry=forceDeployProvApsDefaultsEntry, farEndIfConfigEntry=farEndIfConfigEntry, deployProvTunnelWdmDefaultsToTid=deployProvTunnelWdmDefaultsToTid, intervalPhysPerfDiffGrDelay1weekTable=intervalPhysPerfDiffGrDelay1weekTable, intervalOtuFec15minNumber=intervalOtuFec15minNumber, deployProvPppIpCapType=deployProvPppIpCapType, opticalIfConfigSigDegThresSonetSection=opticalIfConfigSigDegThresSonetSection, logicalCpIfConfigTeAreaId=logicalCpIfConfigTeAreaId, deployProvTunnelEthCapProtectionType=deployProvTunnelEthCapProtectionType, deployProvControlPlaneEthDefaultsRmTraceDetail=deployProvControlPlaneEthDefaultsRmTraceDetail, deployProvLogicalCpIfCapFarEndTid=deployProvLogicalCpIfCapFarEndTid, FspR7OperState=FspR7OperState, intervalLinkAttenuation1dayMean=intervalLinkAttenuation1dayMean, intervalPhysPerfCurrentOscGain1dayLow=intervalPhysPerfCurrentOscGain1dayLow, deployProvTunnelWdmDefaultsConnectionDirection=deployProvTunnelWdmDefaultsConnectionDirection, inventoryCpEthCrsDownDataAids=inventoryCpEthCrsDownDataAids, controlPlaneEthDataRsvpAlias=controlPlaneEthDataRsvpAlias, changeServiceDeployProvIfTraceExpectedSonetSection=changeServiceDeployProvIfTraceExpectedSonetSection, deployProvControlPlaneEthCapEntry=deployProvControlPlaneEthCapEntry, moduleDataType=moduleDataType, thresholdGfpTypeHecCorrectedFramesHighThres15Min=thresholdGfpTypeHecCorrectedFramesHighThres15Min, FspR7SnmpLongString=FspR7SnmpLongString, deployProvApsDefaultsSignalFailureSwitching=deployProvApsDefaultsSignalFailureSwitching, thresholdPhysConvCVHighThres15min=thresholdPhysConvCVHighThres15min, opticalIfConfigTilt=opticalIfConfigTilt, changeServiceDeployProvIfDefaultsFunction=changeServiceDeployProvIfDefaultsFunction, logicalIfConfigHelloInterval=logicalIfConfigHelloInterval, currentOduTcmC15minUAS=currentOduTcmC15minUAS, deployProvControlPlaneWdmEntry=deployProvControlPlaneWdmEntry, intervalGfpfr15minTHecDiscardedFrames=intervalGfpfr15minTHecDiscardedFrames, ospfConfigMetric=ospfConfigMetric, deployProvControlPlaneWdmCmCrankBackTimeout=deployProvControlPlaneWdmCmCrankBackTimeout, deployProvLanIpType=deployProvLanIpType, deployProvTunnelEthCapToTid=deployProvTunnelEthCapToTid, currentOtu1dayUAS=currentOtu1dayUAS, intervalL2EthRx1dayBytesFrames128Rcv=intervalL2EthRx1dayBytesFrames128Rcv, otdrDataTable=otdrDataTable, tunnelWdmDataComputationState=tunnelWdmDataComputationState, deployProvTunnelWdmEntry=deployProvTunnelWdmEntry)
mibBuilder.exportSymbols("FspR7-MIB", deployProvPathElementEthTrafficEngineeringType=deployProvPathElementEthTrafficEngineeringType, currentL2EthTx15minFramesTrmt=currentL2EthTx15minFramesTrmt, changeServiceDeployProvIfDefaultsSigDegThresReceiver=changeServiceDeployProvIfDefaultsSigDegThresReceiver, currentGfpfr15minCHecDiscardedFrames=currentGfpfr15minCHecDiscardedFrames, changeServiceDeployProvIfSigDegPeriodOtu=changeServiceDeployProvIfSigDegPeriodOtu, deployProvTifOutputDefaultsRowStatus=deployProvTifOutputDefaultsRowStatus, deployProvPlugCapRowStatus=deployProvPlugCapRowStatus, deployProvPathElementOtnDefaultsTable=deployProvPathElementOtnDefaultsTable, intervalPhysPerfCurrent15minHigh=intervalPhysPerfCurrent15minHigh, deployProvExChannelDefaultsOpticalPowerTx=deployProvExChannelDefaultsOpticalPowerTx, FspR7ChannelSpacing=FspR7ChannelSpacing, deployProvApsProtectingAidCapsTable=deployProvApsProtectingAidCapsTable, currentGfpt15minTable=currentGfpt15minTable, intervalL2EthRx1dayPauseFramesRcv=intervalL2EthRx1dayPauseFramesRcv, deployProvIfDefaultsLagActivePorts=deployProvIfDefaultsLagActivePorts, changeServiceDeployProvIfCapOffset=changeServiceDeployProvIfCapOffset, currentSonetSect15minTable=currentSonetSect15minTable, intervalL2EthTx15minBroadcastFramesTrmt=intervalL2EthTx15minBroadcastFramesTrmt, alarmPeerLink=alarmPeerLink, deployProvPlugCapForceDestroy=deployProvPlugCapForceDestroy, tunnelWdmConfigFecType=tunnelWdmConfigFecType, deployProvTunnelWdmFromAid=deployProvTunnelWdmFromAid, moduleDiagnosticsInventoryDescription=moduleDiagnosticsInventoryDescription, alarmRemoteDefectIndicationHigherOrderPath=alarmRemoteDefectIndicationHigherOrderPath, deployProvControlPlaneOtnDefaultsRaTraceDetail=deployProvControlPlaneOtnDefaultsRaTraceDetail, alarmLatencyTooHigh=alarmLatencyTooHigh, intervalOtu15minBbe=intervalOtu15minBbe, deployProvIfCapUtag=deployProvIfCapUtag, sts3callocatedContainer=sts3callocatedContainer, deployProvPppIpDefaultsNearEndIp=deployProvPppIpDefaultsNearEndIp, deployProvTunnelEthDefaultsOifUni=deployProvTunnelEthDefaultsOifUni, deployProvControlPlaneOtnCmConfigFlag=deployProvControlPlaneOtnCmConfigFlag, logicalCpIfConfigPushedFarEndIpHeader=logicalCpIfConfigPushedFarEndIpHeader, controlPlaneEthConfigCmTraceDetail=controlPlaneEthConfigCmTraceDetail, FspR7AutoThresReset=FspR7AutoThresReset, currentL2EthTx1dayBytesFrames65Trmt=currentL2EthTx1dayBytesFrames65Trmt, deployProvControlPlaneOtnDefaultsTable=deployProvControlPlaneOtnDefaultsTable, transientEqlzRequestDenied=transientEqlzRequestDenied, alarmLocalFault=alarmLocalFault, alarmOosPrePostSigEstablishFailed=alarmOosPrePostSigEstablishFailed, alarmSignalDegradeOdu=alarmSignalDegradeOdu, deployProvLogicalCpIfCapPushedFarEndIpHeader=deployProvLogicalCpIfCapPushedFarEndIpHeader, eroadmIfDiagnosticsEntry=eroadmIfDiagnosticsEntry, deployProvLogicalIfCapTimeToLive=deployProvLogicalIfCapTimeToLive, deployProvLogicalIfCapDcnAid=deployProvLogicalIfCapDcnAid, deployProvIfCapOtnStuffing=deployProvIfCapOtnStuffing, deployProvControlPlaneEthDefaultsRaTraceDetail=deployProvControlPlaneEthDefaultsRaTraceDetail, deployProvIfCapIpMask=deployProvIfCapIpMask, changeServiceDeployProvIfDefaultsTable=changeServiceDeployProvIfDefaultsTable, deployProvPathElementOtnDefaultsUpTributaryODTUType=deployProvPathElementOtnDefaultsUpTributaryODTUType, neAdmin=neAdmin, FspR7ScramblingCaps=FspR7ScramblingCaps, currentOdu15minTable=currentOdu15minTable, intervalGfp1dayTypeHecDiscardedFrames=intervalGfp1dayTypeHecDiscardedFrames, thresholdOtuFecSublayerBERCEHighThres15min=thresholdOtuFecSublayerBERCEHighThres15min, deployProvShelfEntry=deployProvShelfEntry, currentOdu1dayES=currentOdu1dayES, currentOduTcmC1dayElapsedTime=currentOduTcmC1dayElapsedTime, deployProvTunnelOtnOifUni=deployProvTunnelOtnOifUni, deployProvIfStagType=deployProvIfStagType, controlPlaneEthConfigCtmSetupTimeout=controlPlaneEthConfigCtmSetupTimeout, deployProvExChannelDefaultsFarEndLocation=deployProvExChannelDefaultsFarEndLocation, inactiveRoutingIpDestination=inactiveRoutingIpDestination, conditionMIB=conditionMIB, changeServiceDeployProvIfDefaultsRowStatus=changeServiceDeployProvIfDefaultsRowStatus, f7eqpUnknown=f7eqpUnknown, deployProvControlPlaneEthCapCtmRetryWaitMultiplier=deployProvControlPlaneEthCapCtmRetryWaitMultiplier, intervalGfpfrSublayer15minNumber=intervalGfpfrSublayer15minNumber, deployProvIfCapSigDegPeriodOduTcmC=deployProvIfCapSigDegPeriodOduTcmC, pathWdmDataPathId=pathWdmDataPathId, tunnelEthDataSpecificErrorMessage=tunnelEthDataSpecificErrorMessage, f7eqp8gsmd=f7eqp8gsmd, controlPlaneWdmConfigTedbTraceDetail=controlPlaneWdmConfigTedbTraceDetail, teUnnumLinkOtnDataFendTeLinkId=teUnnumLinkOtnDataFendTeLinkId, thresholdSonetLineUASHighThres15min=thresholdSonetLineUASHighThres15min, tunnelOtnDataMonitorEntitiesDerive=tunnelOtnDataMonitorEntitiesDerive, logicalIfDataEntry=logicalIfDataEntry, tunnelWdmDataFromNodeIP=tunnelWdmDataFromNodeIP, currentSubAggregate1dayTable=currentSubAggregate1dayTable, FspR7LagFendState=FspR7LagFendState, transientThres1DayExceededSonetSectSES=transientThres1DayExceededSonetSectSES, deployProvControlPlaneEthRsvpMaxExpRestartTime=deployProvControlPlaneEthRsvpMaxExpRestartTime, f7eqp4tcc10gc=f7eqp4tcc10gc, transientCopyFileSshHostKeyFail=transientCopyFileSshHostKeyFail, tunnelWdmDataErrorIp=tunnelWdmDataErrorIp, intervalEthRx15minPauseFrames=intervalEthRx15minPauseFrames, thresholdSonetLineMsESHighThres15min=thresholdSonetLineMsESHighThres15min, deployProvTunnelWdmDefaultsSubLayer=deployProvTunnelWdmDefaultsSubLayer, deployProvCopyPathOtnDefaultsPathId=deployProvCopyPathOtnDefaultsPathId, FspR7EqlzAdminStateCaps=FspR7EqlzAdminStateCaps, ospfConfigOspf=ospfConfigOspf, intervalRoundTripDelay1weekNumber=intervalRoundTripDelay1weekNumber, eRoadmInfoChannelSpacing=eRoadmInfoChannelSpacing, ntpSrvCurrentConditionAffect=ntpSrvCurrentConditionAffect, currentPmSnapshotVariableGain=currentPmSnapshotVariableGain, intervalPhysPerfEstimatedSignalGain1dayMean=intervalPhysPerfEstimatedSignalGain1dayMean, controlPlaneEthConfigCmFisFrsTimeout=controlPlaneEthConfigCmFisFrsTimeout, deployProvLanCapForceDestroy=deployProvLanCapForceDestroy, deployProvLogicalCpIfCapTimeToLive=deployProvLogicalCpIfCapTimeToLive, FspR7ChannelBandwidth=FspR7ChannelBandwidth, deployProvTunnelWdmDefaultsTunnelId=deployProvTunnelWdmDefaultsTunnelId, currentGfpfrSublayer1dayCHecDiscardedFrames=currentGfpfrSublayer1dayCHecDiscardedFrames, intervalPhysConvHighSpeed1dayNumber=intervalPhysConvHighSpeed1dayNumber, changeServiceDeployProvIfSigDegThresOtu=changeServiceDeployProvIfSigDegThresOtu, intervalSonetSect1dayValidFlag=intervalSonetSect1dayValidFlag, deployProvLogicalCpIfAuthString=deployProvLogicalCpIfAuthString, intervalPhysPerfCurrentOscGain1dayEntry=intervalPhysPerfCurrentOscGain1dayEntry, dcnTopologyStatusTable=dcnTopologyStatusTable, intervalPhysPerfOscOpticalOutputPwr1weekValidFlag=intervalPhysPerfOscOpticalOutputPwr1weekValidFlag, intervalPhysPerfDiffGrDelay15minLow=intervalPhysPerfDiffGrDelay15minLow, moduleConfigCapEntry=moduleConfigCapEntry, opticalIfConfigCapForceLaserOn=opticalIfConfigCapForceLaserOn, transientCopyFileProtocolFail=transientCopyFileProtocolFail, currentEthTx15minTable=currentEthTx15minTable, deployProvControlPlaneWdmRmTraceDetail=deployProvControlPlaneWdmRmTraceDetail, alarmLatencyTooLow=alarmLatencyTooLow, deployProvIfDefaultsTraceTransmitOpspOtu=deployProvIfDefaultsTraceTransmitOpspOtu, intervalOtuFec15minExValidFlag=intervalOtuFec15minExValidFlag, exChannelDataChannelBandwidth=exChannelDataChannelBandwidth, changeServiceDeployProvIfCapFiberBrand=changeServiceDeployProvIfCapFiberBrand, f7eqpDrm=f7eqpDrm, changeServiceDeployProvIfTraceTransmitDapiOduTcmA=changeServiceDeployProvIfTraceTransmitDapiOduTcmA, intervalPhysConvHighSpeed1dayES=intervalPhysConvHighSpeed1dayES, opticalIfConfigMaxFrameSize=opticalIfConfigMaxFrameSize, virtualOpticalChannelDataConnectState=virtualOpticalChannelDataConnectState, authTrapUserName=authTrapUserName, intervalPhysPerfOlmRxLineAtt1weekHigh=intervalPhysPerfOlmRxLineAtt1weekHigh, deployProvModuleGain=deployProvModuleGain, deployProvControlPlaneWdmCtmShutdownTimeout=deployProvControlPlaneWdmCtmShutdownTimeout, intervalFarEndPhysPerfOpticalInputPwr1dayTable=intervalFarEndPhysPerfOpticalInputPwr1dayTable, intervalFarEndPhysPerfOpticalInputPwr1weekEntry=intervalFarEndPhysPerfOpticalInputPwr1weekEntry, f7eqpPsu7hudc=f7eqpPsu7hudc, deployProvIfCapTcmCLevel=deployProvIfCapTcmCLevel, currentOduTcmA1dayEntry=currentOduTcmA1dayEntry, FspR7SubLayerEncodingCaps=FspR7SubLayerEncodingCaps, opticalIfDataPortMode=opticalIfDataPortMode, FspR7BERThreshold=FspR7BERThreshold, deployProvModuleCapabilityLevel=deployProvModuleCapabilityLevel, pathElementWdmDataTid=pathElementWdmDataTid, fspUserManagementCapInternalState=fspUserManagementCapInternalState, deployProvTunnelEthDefaultsFromAid=deployProvTunnelEthDefaultsFromAid, deployProvModuleCapCac=deployProvModuleCapCac, deployProvPlugDefaultsReach=deployProvPlugDefaultsReach, deployProvIfPortRole=deployProvIfPortRole, changeServiceDeployProvIfCapAlsMode=changeServiceDeployProvIfCapAlsMode, deployProvTunnelWdmDefaultsMonitorEntities=deployProvTunnelWdmDefaultsMonitorEntities, controlPlaneEthConfigCdTraceDetail=controlPlaneEthConfigCdTraceDetail, deployProvControlPlaneOtnDefaultsCtmShutdownTimeout=deployProvControlPlaneOtnDefaultsCtmShutdownTimeout, deployProvTunnelEthDefaultsProvisionedPaths=deployProvTunnelEthDefaultsProvisionedPaths, deployProvIfDefaultsSigDegPeriodOtu=deployProvIfDefaultsSigDegPeriodOtu, connectionOtnDataToTid=connectionOtnDataToTid, changeServiceDeployProvIfDefaultsVariableGain=changeServiceDeployProvIfDefaultsVariableGain, inventoryCpEthUpFlowDataEntry=inventoryCpEthUpFlowDataEntry, farEndIfConfigTable=farEndIfConfigTable, alarmThres15MinExceededOtuBbe=alarmThres15MinExceededOtuBbe, changeServiceDeployProvIfCapTraceTransmitOpspOduTcmA=changeServiceDeployProvIfCapTraceTransmitOpspOduTcmA, opticalIfConfigBip=opticalIfConfigBip, deployProvControlPlaneOtnCapCdConfigFlag=deployProvControlPlaneOtnCapCdConfigFlag, deployProvControlPlaneWdmDefaultsCtmShutdownTimeout=deployProvControlPlaneWdmDefaultsCtmShutdownTimeout, pathElementOtnDataUpTributaryTSMethod=pathElementOtnDataUpTributaryTSMethod, controlPlaneEthConfigTedbTraceDetail=controlPlaneEthConfigTedbTraceDetail, deployProvPathElementWdmDefaultsUpstreamModuleAid=deployProvPathElementWdmDefaultsUpstreamModuleAid, intervalPhysPerfOpticalInputPwr1dayLow=intervalPhysPerfOpticalInputPwr1dayLow, deployProvDcnExternalVidCapsEntry=deployProvDcnExternalVidCapsEntry, alarmLossOfPilotSignal=alarmLossOfPilotSignal, deployProvTunnelOtnDefaultsEntry=deployProvTunnelOtnDefaultsEntry, deployProvIfTraceTransmitOpspOduTcmB=deployProvIfTraceTransmitOpspOduTcmB, currentConditionTable=currentConditionTable, changeServiceDeployProvIfCapMetric=changeServiceDeployProvIfCapMetric, shelfInfoClientPorts=shelfInfoClientPorts, FspR7APSCommand=FspR7APSCommand, nodeChannelTraceTable=nodeChannelTraceTable, crsConnWdmUnusedFromPointsAidValueFromPoint=crsConnWdmUnusedFromPointsAidValueFromPoint, pathOtnDataEntry=pathOtnDataEntry, FspR7VoaModeCaps=FspR7VoaModeCaps, tunnelEthConfigMonitorEntities=tunnelEthConfigMonitorEntities, deployProvIfDefaultsOscOpticalSetpoint=deployProvIfDefaultsOscOpticalSetpoint, intervalPhysPerfCurrentOscGain15minValidFlag=intervalPhysPerfCurrentOscGain15minValidFlag, alarmServerSignalFail=alarmServerSignalFail, alarmLossOfTestSeqSynchOpu=alarmLossOfTestSeqSynchOpu, pathElementWdmDataTie=pathElementWdmDataTie, alarmOpticalInputPowerReceiverFailure=alarmOpticalInputPowerReceiverFailure, deployProvPathElementWdmDefaultsTrafficEngineeringType=deployProvPathElementWdmDefaultsTrafficEngineeringType, intervalOduTcmC15minSES=intervalOduTcmC15minSES, alarmInputVoltageFailurePort2=alarmInputVoltageFailurePort2, intervalPhysConvTxHighSpeed1dayEntry=intervalPhysConvTxHighSpeed1dayEntry, fspUserManagementSecurityLevel=fspUserManagementSecurityLevel, FspR7EdfaOutputPowerRatingCaps=FspR7EdfaOutputPowerRatingCaps, logicalCpIfConfigTeMetric=logicalCpIfConfigTeMetric, deployProvPathWdmDefaultsEntry=deployProvPathWdmDefaultsEntry, deployProvApsCapPeerAid=deployProvApsCapPeerAid, changeServiceDeployProvIfCapTcmBLevel=changeServiceDeployProvIfCapTcmBLevel, deployProvIfDefaultsTraceTransmitSapiOdu=deployProvIfDefaultsTraceTransmitSapiOdu, tunnelOtnDataTunnelNo=tunnelOtnDataTunnelNo, teUnnumLinkOtnDataFendNodeIp=teUnnumLinkOtnDataFendNodeIp, deployProvVchChannelDefaultsTable=deployProvVchChannelDefaultsTable, inactiveRoutingIpTable=inactiveRoutingIpTable, deployProvIfTcmALevel=deployProvIfTcmALevel, logicalCpIfDataTransport=logicalCpIfDataTransport, thresholdFarEndPhysPerfOpticalOutputPwrHigh=thresholdFarEndPhysPerfOpticalOutputPwrHigh, intervalEthRx3HS15minBytesFrames128Rcv=intervalEthRx3HS15minBytesFrames128Rcv, moduleDataInternalPlugs=moduleDataInternalPlugs, deployProvExChannelDefaultsPMDTransmit=deployProvExChannelDefaultsPMDTransmit, deployProvLogicalCpIfCapTunnelAid=deployProvLogicalCpIfCapTunnelAid, nendIpCapStringCap=nendIpCapStringCap, intervalPhysPerfPumpPwr15minTimeStamp=intervalPhysPerfPumpPwr15minTimeStamp, FspR7NodeId=FspR7NodeId, changeServiceDeployProvIfCapSigDegThreshold=changeServiceDeployProvIfCapSigDegThreshold, thresholdPhysPerfPumpLaser1TempLowThres=thresholdPhysPerfPumpLaser1TempLowThres, currentL2EthRx15minBytesFrames512Rcv=currentL2EthRx15minBytesFrames512Rcv, changeServiceDeployProvIfTimModeOduTcmA=changeServiceDeployProvIfTimModeOduTcmA, currentGfpfr1dayGoodFrames=currentGfpfr1dayGoodFrames, intervalL2EthRx15minBytesFrames65Rcv=intervalL2EthRx15minBytesFrames65Rcv, interfaceConfigCapEntry=interfaceConfigCapEntry, transientPmSnapshotEnded=transientPmSnapshotEnded, eRoadmInfoScuRing=eRoadmInfoScuRing, FspR7ModeDbInit=FspR7ModeDbInit, deployProvLogicalCpIfCapLinkColor=deployProvLogicalCpIfCapLinkColor, eRoadmInfoClientPorts=eRoadmInfoClientPorts, sts24callocatedFacilityType=sts24callocatedFacilityType, deployProvTifOutputCapTelemetry=deployProvTifOutputCapTelemetry, logicalCpIfDataLayer=logicalCpIfDataLayer, wdmChannelModuleDataSuppNetworkPlugRates=wdmChannelModuleDataSuppNetworkPlugRates, opticalIfConfigTestPrbsTrmtMode=opticalIfConfigTestPrbsTrmtMode, deployProvControlPlaneWdmDefaultsCmCrankBackTimeout=deployProvControlPlaneWdmDefaultsCmCrankBackTimeout, eroadmIfDiagnosticsTable=eroadmIfDiagnosticsTable, deployProvIfDefaultsOtnStuffing=deployProvIfDefaultsOtnStuffing, FspR7NtpAdminState=FspR7NtpAdminState, ospfDataTable=ospfDataTable, deployProvApsWaitToRestore=deployProvApsWaitToRestore, deployProvLogicalCpIfDeadInterval=deployProvLogicalCpIfDeadInterval, remoteAlarmCpDataTable=remoteAlarmCpDataTable, alarmLossOfCharSyncFromFarEnd=alarmLossOfCharSyncFromFarEnd, currentPhysConvTxHighSpeed1dayESTX=currentPhysConvTxHighSpeed1dayESTX, deployProvControlPlaneOtnCapTedbConfigFlag=deployProvControlPlaneOtnCapTedbConfigFlag, deployProvApsDefaultsProtectionAid=deployProvApsDefaultsProtectionAid, alarmTerminalLoopback=alarmTerminalLoopback, currentL2EthRx1dayBytesFrames128Rcv=currentL2EthRx1dayBytesFrames128Rcv, ethernetConfigDuplexMode=ethernetConfigDuplexMode, vc4c16allocatedClassInstanceNumber=vc4c16allocatedClassInstanceNumber, crsConnDeployProvDefaultsFrom=crsConnDeployProvDefaultsFrom, intervalPhysConvTxHighSpeed15minSETX=intervalPhysConvTxHighSpeed15minSETX, intervalGfpfr15minTimeStamp=intervalGfpfr15minTimeStamp, farEndIfDataTransmitChannel=farEndIfDataTransmitChannel, deployProvTunnelOtnDefaultsToAid=deployProvTunnelOtnDefaultsToAid, intervalPhysConv1dayTable=intervalPhysConv1dayTable, pathElementEthDataUpstreamSvid=pathElementEthDataUpstreamSvid, inventoryCpOtnCrsUpDataNumber=inventoryCpOtnCrsUpDataNumber, f7eqp4tca4gc=f7eqp4tca4gc, intervalL2EthRx15minTable=intervalL2EthRx15minTable, deployProvTunnelWdmDefaultsRestorationPathsComputed=deployProvTunnelWdmDefaultsRestorationPathsComputed, currentSonetLoPath15minUAS=currentSonetLoPath15minUAS, logicalCpIfDataTable=logicalCpIfDataTable, deployProvTunnelWdmSubLayer=deployProvTunnelWdmSubLayer)
mibBuilder.exportSymbols("FspR7-MIB", tunnelWdmDataBitrate=tunnelWdmDataBitrate, opticalIfDiagOscOutputPower=opticalIfDiagOscOutputPower, teNumLinkWdmDataNodeTid=teNumLinkWdmDataNodeTid, intervalFarEndPhysPerfOpticalInputPwr1weekTable=intervalFarEndPhysPerfOpticalInputPwr1weekTable, alarmLossofMultiframeHigherOrderPath=alarmLossofMultiframeHigherOrderPath, deployProvVchChannelCapRowStatus=deployProvVchChannelCapRowStatus, deployProvIfCapTcmBLevel=deployProvIfCapTcmBLevel, authenticationNotificationSummary=authenticationNotificationSummary, crsConnWdmDataEntry=crsConnWdmDataEntry, moduleConfigScrambling=moduleConfigScrambling, crsConnWdmDataTable=crsConnWdmDataTable, ApsDirectionCaps=ApsDirectionCaps, intervalPhysPerfPumpPwr1weekValidFlag=intervalPhysPerfPumpPwr1weekValidFlag, deployProvLogicalIfIpAddr=deployProvLogicalIfIpAddr, opticalLinkConfigRxLineAttenuation=opticalLinkConfigRxLineAttenuation, transientCpConnectionEstablishmentAborted=transientCpConnectionEstablishmentAborted, FspR7SubLayerEncoding=FspR7SubLayerEncoding, opticalLinkDataLogicalInterfaceAid=opticalLinkDataLogicalInterfaceAid, deployProvTunnelEthCapOifUni=deployProvTunnelEthCapOifUni, FspR7ChannelSpacingCaps=FspR7ChannelSpacingCaps, tunnelOtnDataToTidMonitor=tunnelOtnDataToTidMonitor, syslogDataIp=syslogDataIp, changeServiceDeployProvIfFarEndCommunication=changeServiceDeployProvIfFarEndCommunication, deployProvModuleDefaultsAdmin=deployProvModuleDefaultsAdmin, thresholdPhysPerfPumpLaser1TempHighThres=thresholdPhysPerfPumpLaser1TempHighThres, intervalSonetLoPath15minValidFlag=intervalSonetLoPath15minValidFlag, deployProvControlPlaneOtnCapRmTraceTarget=deployProvControlPlaneOtnCapRmTraceTarget, deployProvLogicalCpIfCapRetransmitInterval=deployProvLogicalCpIfCapRetransmitInterval, deployProvLogicalCpIfDefaultsEntry=deployProvLogicalCpIfDefaultsEntry, f7eqpWcm2g5d=f7eqpWcm2g5d, thresholdOtuSESHighThres1day=thresholdOtuSESHighThres1day, changeServiceDeployProvIfTraceTransmitOpspOtu=changeServiceDeployProvIfTraceTransmitOpspOtu, transientCopyFileLoginFail=transientCopyFileLoginFail, deployProvIfDefaultsBip=deployProvIfDefaultsBip, neAttributeValueChange=neAttributeValueChange, intervalPhysConv15minTable=intervalPhysConv15minTable, teNumLinkEthDataTable=teNumLinkEthDataTable, currentOdu15minEntry=currentOdu15minEntry, tunnelWdmDataToAid=tunnelWdmDataToAid, deployProvModuleDefaultsGain=deployProvModuleDefaultsGain, deployProvLogicalCpIfDefaultsAreaId=deployProvLogicalCpIfDefaultsAreaId, deployProvControlPlaneOtnDefaultsTedbRouterId=deployProvControlPlaneOtnDefaultsTedbRouterId, deployProvLogicalIfOspf=deployProvLogicalIfOspf, thresholdGfpSublayerCoreHecCorrectedFramesHighThres1Day=thresholdGfpSublayerCoreHecCorrectedFramesHighThres1Day, performanceMonitoring=performanceMonitoring, deployProvPathElementOtnCapUpTributarySlot=deployProvPathElementOtnCapUpTributarySlot, alarmThres15MinExceededOduTcmABbe=alarmThres15MinExceededOduTcmABbe, alarmLossOfReceiverClockRecovery=alarmLossOfReceiverClockRecovery, deployProvTunnelOtnDefaultsPin=deployProvTunnelOtnDefaultsPin, alarmApsProtocolFailure=alarmApsProtocolFailure, FspR7PreferredFacilityTypeCaps=FspR7PreferredFacilityTypeCaps, opticalIfConfigUtag=opticalIfConfigUtag, deployProvCrsDcnDefaultsTable=deployProvCrsDcnDefaultsTable, controlPlaneOtnConfigEntry=controlPlaneOtnConfigEntry, thresholdSonetLoPathCVHighThres1day=thresholdSonetLoPathCVHighThres1day, deployProvIfTributarySlotMethod=deployProvIfTributarySlotMethod, currentGfpt15minElapsedTime=currentGfpt15minElapsedTime, tunnelWdmConfigStuff=tunnelWdmConfigStuff, intervalEthRx3HS15minBytesFrames1024Rcv=intervalEthRx3HS15minBytesFrames1024Rcv, changeServiceDeployProvIfSigDegPeriodSdhSection=changeServiceDeployProvIfSigDegPeriodSdhSection, deployProvLogicalIfCapRetransmitInterval=deployProvLogicalIfCapRetransmitInterval, intervalSonetLine1daySES=intervalSonetLine1daySES, currentSonetSect1dayES=currentSonetSect1dayES, deployProvIfDefaultsTraceTransmitSapiOduTcmA=deployProvIfDefaultsTraceTransmitSapiOduTcmA, tunnelEthConfigCommand=tunnelEthConfigCommand, opticalIfConfigCapForceFwdAsePilotOn=opticalIfConfigCapForceFwdAsePilotOn, intervalPhysConvTxHighSpeed1daySETX=intervalPhysConvTxHighSpeed1daySETX, intervalPhysPerfOpticalInputPwr15minHigh=intervalPhysPerfOpticalInputPwr15minHigh, alarmLockedDefectOduTcmA=alarmLockedDefectOduTcmA, alarmServerSignalReduced=alarmServerSignalReduced, FspR7SshHostKeyEncryptAlgorithmCaps=FspR7SshHostKeyEncryptAlgorithmCaps, intervalPhysPerfOpticalInputPwr1weekTable=intervalPhysPerfOpticalInputPwr1weekTable, intervalPhysPerfBackreflectionPwrRcv15minLow=intervalPhysPerfBackreflectionPwrRcv15minLow, deployProvControlPlaneWdmCapCmFisFrsTimeout=deployProvControlPlaneWdmCapCmFisFrsTimeout, deployProvLanType=deployProvLanType, deployProvPathElementOtnDefaultsEntry=deployProvPathElementOtnDefaultsEntry, currentSubAggregate1dayCrc=currentSubAggregate1dayCrc, deployProvIfCapTraceExpectedOduTcmB=deployProvIfCapTraceExpectedOduTcmB, entityStateOper=entityStateOper, deployProvModuleDefaultsBand=deployProvModuleDefaultsBand, intervalSubAggregate1dayES=intervalSubAggregate1dayES, intervalDispersionCompensation1dayTable=intervalDispersionCompensation1dayTable, deployProvModuleCapDeploy=deployProvModuleCapDeploy, deployProvIfDefaultsTraceTransmitOpspOduTcmA=deployProvIfDefaultsTraceTransmitOpspOduTcmA, deployProvLogicalIfCapTable=deployProvLogicalIfCapTable, crsConnDeployProvAlias=crsConnDeployProvAlias, intervalPhysPerfOscPwr1weekNumber=intervalPhysPerfOscPwr1weekNumber, intervalL2EthRx15minBytesFrames512Rcv=intervalL2EthRx15minBytesFrames512Rcv, deployProvControlPlaneOtnDefaultsNodeNameSyntax=deployProvControlPlaneOtnDefaultsNodeNameSyntax, deployProvModuleCapChannelSpacingProvision=deployProvModuleCapChannelSpacingProvision, opticalAmplifierInterfaceDiagnosticsLaserBiasCurrentLevelAverage=opticalAmplifierInterfaceDiagnosticsLaserBiasCurrentLevelAverage, physicalTerminationPointEntry=physicalTerminationPointEntry, intervalEthRx3HS15minValidFlag=intervalEthRx3HS15minValidFlag, deployProvPathOtnCapPathId=deployProvPathOtnCapPathId, deployProvPathElementOtnCapTie=deployProvPathElementOtnCapTie, deployProvPathElementOtnUpTributaryTSMethod=deployProvPathElementOtnUpTributaryTSMethod, intervalL2EthRx1dayTable=intervalL2EthRx1dayTable, nodeChannelTraceEntry=nodeChannelTraceEntry, deployProvControlPlaneEthCapRaAlarmActivationTime=deployProvControlPlaneEthCapRaAlarmActivationTime, intervalPhysPerfOpticalOutputPwr15minLow=intervalPhysPerfOpticalOutputPwr15minLow, ospfDataBkupDesignatedRouter=ospfDataBkupDesignatedRouter, f7eqp1Gsmud=f7eqp1Gsmud, exChannelConfigChromaticDispersionRcv=exChannelConfigChromaticDispersionRcv, changeServiceDeployProvIfCapTimModeOdu=changeServiceDeployProvIfCapTimModeOdu, alarmBackwardDefectIndicationOduTcmB=alarmBackwardDefectIndicationOduTcmB, intervalPhysPerfOscPwr15minValidFlag=intervalPhysPerfOscPwr15minValidFlag, otdrConfigTable=otdrConfigTable, deployProvPppIpDefaultsMetric=deployProvPppIpDefaultsMetric, currentGfpfrSublayer15minElapsedTime=currentGfpfrSublayer15minElapsedTime, alarmServerSignalFailurePath=alarmServerSignalFailurePath, changeServiceDeployProvIfDefaultsTraceTransmitSapiOdu=changeServiceDeployProvIfDefaultsTraceTransmitSapiOdu, ethernetDataEntry=ethernetDataEntry, deployProvPortBindingDefaultsRemoteTna=deployProvPortBindingDefaultsRemoteTna, transientBootUpStarted=transientBootUpStarted, intervalPhysPerfLaserBiasCurrentNormalized15minTable=intervalPhysPerfLaserBiasCurrentNormalized15minTable, changeServiceDeployProvIfCapGain=changeServiceDeployProvIfCapGain, currentOtuFec1dayES=currentOtuFec1dayES, connectionEthDataModificationState=connectionEthDataModificationState, deployProvControlPlaneOtnCapCtmMaximumRetryWait=deployProvControlPlaneOtnCapCtmMaximumRetryWait, intervalL2EthRx15minCrcErrorsRcv=intervalL2EthRx15minCrcErrorsRcv, transientSwResetReload=transientSwResetReload, deployProvConnNonStdCapToEntry=deployProvConnNonStdCapToEntry, intervalPhysPerfOlmRxLineAtt1weekNumber=intervalPhysPerfOlmRxLineAtt1weekNumber, deployProvLogicalCpIfCapDeadInterval=deployProvLogicalCpIfCapDeadInterval, intervalPmSnapshotNumber=intervalPmSnapshotNumber, deployProvLogicalIfDcnAid=deployProvLogicalIfDcnAid, intervalPhysPerfOscOpticalOutputPwr1weekLow=intervalPhysPerfOscOpticalOutputPwr1weekLow, deployProvPathEthCapPathId=deployProvPathEthCapPathId, deployProvApsDefaultsFarEndIp=deployProvApsDefaultsFarEndIp, currentEthRx3HS1dayBytes=currentEthRx3HS1dayBytes, inventoryCpWdmCrsDownDataNumber=inventoryCpWdmCrsDownDataNumber, crsConnDeployProvCapTunnelAid=crsConnDeployProvCapTunnelAid, deployProvExChannelDefaultsRowStatus=deployProvExChannelDefaultsRowStatus, deployProvModuleEntry=deployProvModuleEntry, currentEthRx15minEntry=currentEthRx15minEntry, f7eqpSfpc=f7eqpSfpc, intervalFarEndPhysPerfOpticalOutputPwr1weekTimeStamp=intervalFarEndPhysPerfOpticalOutputPwr1weekTimeStamp, connectionOtnDataActivationState=connectionOtnDataActivationState, thresholdOduTcmCOduTcmCBbeHighThres1day=thresholdOduTcmCOduTcmCBbeHighThres1day, changeServiceDeployProvIfDefaultsTimModeOtu=changeServiceDeployProvIfDefaultsTimModeOtu, changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmC=changeServiceDeployProvIfDefaultsTraceTransmitOpspOduTcmC, FspR7OpticalGroupCaps=FspR7OpticalGroupCaps, tunnelEthConfigAbortProcess=tunnelEthConfigAbortProcess, deployProvLogicalCpIfCapFarEndLifId=deployProvLogicalCpIfCapFarEndLifId, deployProvTunnelOtnFacilityType=deployProvTunnelOtnFacilityType, dcnOspfAreaEntry=dcnOspfAreaEntry, reservationCpDataTable=reservationCpDataTable, deployProvPathEthCapEntry=deployProvPathEthCapEntry, intervalDefectSeconds1dayNumber=intervalDefectSeconds1dayNumber, deployProvIfCapVoaMode=deployProvIfCapVoaMode, opticalIfConfigCapAseTabCreation=opticalIfConfigCapAseTabCreation, currentEthTx1dayBytes=currentEthTx1dayBytes, intervalPhysPerfOlmRxLineAtt1weekMean=intervalPhysPerfOlmRxLineAtt1weekMean, vtpEntityDataLambda=vtpEntityDataLambda, thresholdPhysPerfCapOscPwrRcvHighThres=thresholdPhysPerfCapOscPwrRcvHighThres, deployProvTunnelWdmRowStatus=deployProvTunnelWdmRowStatus, FspR7CpEncodeCaps=FspR7CpEncodeCaps, crsConnUnusedFromPointsTable=crsConnUnusedFromPointsTable, opticalIfDiagBackreflectionPowerReceived=opticalIfDiagBackreflectionPowerReceived, deployProvLogicalIfEntry=deployProvLogicalIfEntry, deployProvExChannelChannelBandwith=deployProvExChannelChannelBandwith, ethernetConfigAreaId=ethernetConfigAreaId, deployProvControlPlaneWdmDefaultsRaTraceDetail=deployProvControlPlaneWdmDefaultsRaTraceDetail, fspUserManagementDefaultsTable=fspUserManagementDefaultsTable, thresholdOduTcmABbeHighThres1day=thresholdOduTcmABbeHighThres1day, ntpServerEntry=ntpServerEntry, currentOduTcmC15minTable=currentOduTcmC15minTable, intervalRoundTripDelay1dayTimeStamp=intervalRoundTripDelay1dayTimeStamp, deployProvOpticalLinkCapTable=deployProvOpticalLinkCapTable, intervalEthRx3HS15minTable=intervalEthRx3HS15minTable, tunnelWdmConfigAdminModifier=tunnelWdmConfigAdminModifier, logicalCpIfDataNendTeLinkAid=logicalCpIfDataNendTeLinkAid, opticalIfConfigTributarySlotMethod=opticalIfConfigTributarySlotMethod, ptpEntityDataLevel=ptpEntityDataLevel, deployProvTunnelWdmCapTunnelNo=deployProvTunnelWdmCapTunnelNo, interfaceDataPhysIfBaseType=interfaceDataPhysIfBaseType, deployProvIfDefaultsTraceTransmitDapiOduTcmB=deployProvIfDefaultsTraceTransmitDapiOduTcmB, intervalSonetLine15minCV=intervalSonetLine15minCV, intraNeConnectionsEndpointA=intraNeConnectionsEndpointA, deployProvPppIpDefaultsTable=deployProvPppIpDefaultsTable, intervalL2EthRx1dayBytesFrames512Rcv=intervalL2EthRx1dayBytesFrames512Rcv, inventoryCpEthDownDataNumber=inventoryCpEthDownDataNumber, currentEthRx1dayElapsedTime=currentEthRx1dayElapsedTime, inactiveRoutingIpGateway=inactiveRoutingIpGateway, changeServiceDeployProvIfDefaultsSignalDegradePeriod=changeServiceDeployProvIfDefaultsSignalDegradePeriod, opticalIfConfigDisparityCorrection=opticalIfConfigDisparityCorrection, opticalIfDiagLinkAttenuation=opticalIfDiagLinkAttenuation, connectionWdmDataTerminationLevel=connectionWdmDataTerminationLevel, deployProvPortBindingCapEntry=deployProvPortBindingCapEntry, alarmDatabaseNcuMismatch=alarmDatabaseNcuMismatch, alarmAutoShutdownStbyProtection=alarmAutoShutdownStbyProtection, intervalGfpfr1dayNumber=intervalGfpfr1dayNumber, interfaceConfigLanAid=interfaceConfigLanAid, opticalIfDataLagPortType=opticalIfDataLagPortType, alarmThres15MinExceededSonetLineCV=alarmThres15MinExceededSonetLineCV, pathElementOtnDataLogicalInterfaceId=pathElementOtnDataLogicalInterfaceId, FspR7Model=FspR7Model, deployProvTunnelEthCapToNodeIp=deployProvTunnelEthCapToNodeIp, thresholdOtuFecSublayerSESHighThres1day=thresholdOtuFecSublayerSESHighThres1day, changeServiceDeployProvIfLanAidCapsTable=changeServiceDeployProvIfLanAidCapsTable, deployProvVchChannelCapTable=deployProvVchChannelCapTable, crsConnDataType=crsConnDataType, deployProvIfAprHighThreshold=deployProvIfAprHighThreshold, deployProvIfDefaultsPortRole=deployProvIfDefaultsPortRole, deployProvIfCapOspf=deployProvIfCapOspf, deployProvControlPlaneEthCapNaasTraceDetail=deployProvControlPlaneEthCapNaasTraceDetail, alarmEncryptionPortEncryptionSwitchedOff=alarmEncryptionPortEncryptionSwitchedOff, intervalPhysConv1dayTimeStamp=intervalPhysConv1dayTimeStamp, intervalPhysPerfOpticalInputPwr1weekHigh=intervalPhysPerfOpticalInputPwr1weekHigh, crsConnDeployProvRedLineState=crsConnDeployProvRedLineState, deployProvControlPlaneWdmCdbMaxSize=deployProvControlPlaneWdmCdbMaxSize, currentSonetLine15minElapsedTime=currentSonetLine15minElapsedTime, intervalPhysConvHighSpeed15minNumber=intervalPhysConvHighSpeed15minNumber, changeServiceDeployProvIfCapSigDegPeriodOdu=changeServiceDeployProvIfCapSigDegPeriodOdu, deployProvVchChannelDefaultsVcgType=deployProvVchChannelDefaultsVcgType, currentOduTcmC1dayTable=currentOduTcmC1dayTable, deployProvLogicalCpIfCapAuthString=deployProvLogicalCpIfCapAuthString, intervalPhysPerfCurrent15minLow=intervalPhysPerfCurrent15minLow, intervalEthRxHighSpeed15minGoodFrames=intervalEthRxHighSpeed15minGoodFrames, changeServiceDeployProvIfCapTraceExpectedOduTcmC=changeServiceDeployProvIfCapTraceExpectedOduTcmC, connectionConfigAndStatus=connectionConfigAndStatus, neAlarmDeactivationTime=neAlarmDeactivationTime, deployProvVirtualOpticalChannelDefaultsEntry=deployProvVirtualOpticalChannelDefaultsEntry, deployProvControlPlaneOtnRmTraceTarget=deployProvControlPlaneOtnRmTraceTarget, thresholdSonetLineMsCVHighThres15min=thresholdSonetLineMsCVHighThres15min, deployProvExChannelDefaultsTransmitChannel=deployProvExChannelDefaultsTransmitChannel, neSecurityMode=neSecurityMode, deployProvTunnelOtnDefaultsFacilityType=deployProvTunnelOtnDefaultsFacilityType, pathElementOtnDataTid=pathElementOtnDataTid, logicalCpIfDataIpMask=logicalCpIfDataIpMask, thresholdSonetLineMsCVSHighThres1day=thresholdSonetLineMsCVSHighThres1day, connectionOtnDataSourceTna=connectionOtnDataSourceTna, intervalDispersionCompensation1weekTable=intervalDispersionCompensation1weekTable, tunnelEthDataErrorMessage=tunnelEthDataErrorMessage, interfaceConfigDispersionOperation=interfaceConfigDispersionOperation, deployProvDcnAdmin=deployProvDcnAdmin, logicalCpIfDataLogicalInterfaceId=logicalCpIfDataLogicalInterfaceId, changeServiceDeployProvIfDefaultsTimModeOduTcmB=changeServiceDeployProvIfDefaultsTimModeOduTcmB, alarmLockedDefectOduTcmB=alarmLockedDefectOduTcmB, tifiConfigEntry=tifiConfigEntry, crsConnDeployProvType=crsConnDeployProvType, deployProvSyslogReportsStatus=deployProvSyslogReportsStatus, intervalOtu1dayBbe=intervalOtu1dayBbe, thresholdSonetLineSESHighThres15min=thresholdSonetLineSESHighThres15min, intervalSonetLoPath1dayTimeStamp=intervalSonetLoPath1dayTimeStamp, fspUserManagementEntry=fspUserManagementEntry, controlPlaneWdmConfigRmConfigFlag=controlPlaneWdmConfigRmConfigFlag, f7Ports=f7Ports, connectionEthDataCbsTrmt=connectionEthDataCbsTrmt, deployProvTunnelWdmFacilityType=deployProvTunnelWdmFacilityType, intervalPhysPerfChromaticDispersion1dayValidFlag=intervalPhysPerfChromaticDispersion1dayValidFlag, alarmTxPowerLimited=alarmTxPowerLimited, apsProtGroupStatusApsType=apsProtGroupStatusApsType, controlPlaneWdmDataCdAlias=controlPlaneWdmDataCdAlias)
mibBuilder.exportSymbols("FspR7-MIB", intervalPhysPerfPumpPwr15minValidFlag=intervalPhysPerfPumpPwr15minValidFlag, exChannelConfigChromaticDispersionTx=exChannelConfigChromaticDispersionTx, deployProvControlPlaneOtnCtmShutdownTimeout=deployProvControlPlaneOtnCtmShutdownTimeout, interfaceDataTransmitChannel=interfaceDataTransmitChannel, FspR7BERThresholdSectionCaps=FspR7BERThresholdSectionCaps, deployProvPathEthDefaultsPathId=deployProvPathEthDefaultsPathId, moduleDataLanPorts=moduleDataLanPorts, pppDataTable=pppDataTable, deployProvModuleBand=deployProvModuleBand, deployProvTunnelWdmToTid=deployProvTunnelWdmToTid, deployProvControlPlaneOtnRaConfigFlag=deployProvControlPlaneOtnRaConfigFlag, changeServiceDeployProvIfFunction=changeServiceDeployProvIfFunction, currentDiagnosticsPsuOutputPower=currentDiagnosticsPsuOutputPower, ntpServerAdminState=ntpServerAdminState, authTrapSuccessfulAuthCount=authTrapSuccessfulAuthCount, deployProvIfDefaultsSigDegThresOdu=deployProvIfDefaultsSigDegThresOdu, currentPhysConvTxHighSpeed1dayEntry=currentPhysConvTxHighSpeed1dayEntry, deployProvPathElementWdmTrafficEngineeringType=deployProvPathElementWdmTrafficEngineeringType, moduleDataScuRing=moduleDataScuRing, crsConnDeployProvCrossConnType=crsConnDeployProvCrossConnType, intervalPhysPerfOlmRxLineAtt15minLow=intervalPhysPerfOlmRxLineAtt15minLow, FspR7DispersionConfig=FspR7DispersionConfig, f7eqpSh1huDc=f7eqpSh1huDc, intervalSonetLoPath15minSES=intervalSonetLoPath15minSES, intervalPhysPerfBackreflectionPwrRcv15minMean=intervalPhysPerfBackreflectionPwrRcv15minMean, deployProvLanDefaultsTable=deployProvLanDefaultsTable, currentOtu15minSES=currentOtu15minSES, deployProvControlPlaneEthCtmTraceDetail=deployProvControlPlaneEthCtmTraceDetail, tunnelOtnConfigProtectionType=tunnelOtnConfigProtectionType, deployProvVirtualOpticalChannelDefaultsTable=deployProvVirtualOpticalChannelDefaultsTable, deployProvControlPlaneEthCapTedbMaxSize=deployProvControlPlaneEthCapTedbMaxSize, currentOduTcmA15minElapsedTime=currentOduTcmA15minElapsedTime, logicalIfConfigAreaId=logicalIfConfigAreaId, changeServiceDeployProvIfDefaultsVoaSetpoint=changeServiceDeployProvIfDefaultsVoaSetpoint, intervalLatency15minTable=intervalLatency15minTable, currentL2EthRx1dayUndersizedFramesRcv=currentL2EthRx1dayUndersizedFramesRcv, thresholdPhysPerfCapDispersionCompensationHighThres=thresholdPhysPerfCapDispersionCompensationHighThres, intervalFarEndPhysPerfOpticalInputPwr1weekNumber=intervalFarEndPhysPerfOpticalInputPwr1weekNumber, deployProvIfForceDestroy=deployProvIfForceDestroy, pathElementEthDataSequenceNumber=pathElementEthDataSequenceNumber, changeServiceDeployProvIfTraceTransmitOpspOduTcmA=changeServiceDeployProvIfTraceTransmitOpspOduTcmA, intervalPhysPerfOpticalInputPwr1weekMean=intervalPhysPerfOpticalInputPwr1weekMean, FspR7TifOutputReset=FspR7TifOutputReset, deployProvTifOutputDefaultsTable=deployProvTifOutputDefaultsTable, ntpSrvConditionSeverityValue=ntpSrvConditionSeverityValue, unusedWdmTunnelIndex=unusedWdmTunnelIndex, virtualOpticalChannelDataTransmitWavelength=virtualOpticalChannelDataTransmitWavelength, alarmAutoShutdownBlock=alarmAutoShutdownBlock, deployProvIfDefaultsTcmBLevel=deployProvIfDefaultsTcmBLevel, changeServiceDeployProvIfDefaultsOpticalSetPoint=changeServiceDeployProvIfDefaultsOpticalSetPoint, snmpAgentStartupDate=snmpAgentStartupDate, changeServiceDeployProvIfCapOscOpticalSetpoint=changeServiceDeployProvIfCapOscOpticalSetpoint, thresholdPhysPerfLatencyHighThres=thresholdPhysPerfLatencyHighThres, deployProvIfDefaultsTimingSource=deployProvIfDefaultsTimingSource, FspR7TL1InternalState=FspR7TL1InternalState, deployProvIfCapMaxFrameSize=deployProvIfCapMaxFrameSize, vs0allocatedEntry=vs0allocatedEntry, deployProvControlPlaneWdmDefaultsTedbTraceDetail=deployProvControlPlaneWdmDefaultsTedbTraceDetail, deployProvCopyPathWdmCapPathId=deployProvCopyPathWdmCapPathId, alarmServerSignalFailureGfp=alarmServerSignalFailureGfp, deployProvControlPlaneWdmCapRaAlarmActivationTime=deployProvControlPlaneWdmCapRaAlarmActivationTime, intervalPhysPerfCurrentOscGain15minNumber=intervalPhysPerfCurrentOscGain15minNumber, inventoryCpWdmUpDataResources=inventoryCpWdmUpDataResources, changeServiceDeployProvIfLanAidCapsEntry=changeServiceDeployProvIfLanAidCapsEntry, deployProvControlPlaneOtnTedbTraceDetail=deployProvControlPlaneOtnTedbTraceDetail, alarmOspfIpServerNotAvailable=alarmOspfIpServerNotAvailable, intervalDispersionCompensation15minHigh=intervalDispersionCompensation15minHigh, intervalPhysPerfOpticalOutputPwr1weekHigh=intervalPhysPerfOpticalOutputPwr1weekHigh, crsConnDataOper=crsConnDataOper, deployProvLogicalIfDefaultsTimeToLive=deployProvLogicalIfDefaultsTimeToLive, deployProvIfAutonegotiation=deployProvIfAutonegotiation, intervalEthRx1dayValidFlag=intervalEthRx1dayValidFlag, opticalIfConfigOpticalSetPoint=opticalIfConfigOpticalSetPoint, currentPhysConvTxHighSpeed1dayTable=currentPhysConvTxHighSpeed1dayTable, ptpEntityDataChannelProvision=ptpEntityDataChannelProvision, deployProvControlPlaneWdmDefaultsTedbConfigFlag=deployProvControlPlaneWdmDefaultsTedbConfigFlag, transientCopyFileFailNotExist=transientCopyFileFailNotExist, FspR7TransmissionModeCaps=FspR7TransmissionModeCaps, entityStateTable=entityStateTable, connectionWdmDataConnectionDirection=connectionWdmDataConnectionDirection, deployProvLanCapOspf=deployProvLanCapOspf, tunnelEthConfigRestorationType=tunnelEthConfigRestorationType, changeServiceDeployProvIfDefaultsFarEndCommunication=changeServiceDeployProvIfDefaultsFarEndCommunication, FspR7FunctionCrs=FspR7FunctionCrs, deployProvControlPlaneEthRsvpConfigFlag=deployProvControlPlaneEthRsvpConfigFlag, deployProvIfCapTimModeOdu=deployProvIfCapTimModeOdu, currentSonetLoPath15minTable=currentSonetLoPath15minTable, intervalOtuFec1dayEntry=intervalOtuFec1dayEntry, thresholdFarEndPhysPerfCapOpticalInputPwrLow=thresholdFarEndPhysPerfCapOpticalInputPwrLow, intervalGfpfrSublayer1dayEntry=intervalGfpfrSublayer1dayEntry, deployProvLanCapTable=deployProvLanCapTable, deployProvConnStdCapFromType=deployProvConnStdCapFromType, currentL2EthRx15minBytesFrames128Rcv=currentL2EthRx15minBytesFrames128Rcv, exChannelConfigFecType=exChannelConfigFecType, intraNeConnectionsLastChanged=intraNeConnectionsLastChanged, currentPhysConvTxHighSpeed15minEntry=currentPhysConvTxHighSpeed15minEntry, pathWdmDataPathType=pathWdmDataPathType, connectionEthDataRole=connectionEthDataRole, deployProvLogicalCpIfDefaultsTeMetric=deployProvLogicalCpIfDefaultsTeMetric, deployProvModuleDefaultsType=deployProvModuleDefaultsType, changeServiceDeployProvIfDefaultsMetric=changeServiceDeployProvIfDefaultsMetric, intervalL2EthRx1dayBytesFrames65Rcv=intervalL2EthRx1dayBytesFrames65Rcv, deployProvControlPlaneEthDefaultsCdbMaxSize=deployProvControlPlaneEthDefaultsCdbMaxSize, intervalLinkAttenuation15minTimeStamp=intervalLinkAttenuation15minTimeStamp, FspR7NCTraceId=FspR7NCTraceId, intervalOtu1dayTimeStamp=intervalOtu1dayTimeStamp, interfaceDataReach=interfaceDataReach, deployProvIfCapTraceTransmitOpspOduTcmC=deployProvIfCapTraceTransmitOpspOduTcmC, deployProvPathElementOtnDefaultsLifIp=deployProvPathElementOtnDefaultsLifIp, deployProvShelfTable=deployProvShelfTable, intervalPhysPerfOscPwr1dayHigh=intervalPhysPerfOscPwr1dayHigh, intervalDispersionCompensation1weekHigh=intervalDispersionCompensation1weekHigh, neSecurityModeCapability=neSecurityModeCapability, deployProvSyslogTable=deployProvSyslogTable, neNtpServer3=neNtpServer3, FspR7SupplyTypeCaps=FspR7SupplyTypeCaps, logicalCpIfConfigRetransmitInterval=logicalCpIfConfigRetransmitInterval, fspUserManagementDefaultsPrivilegeLevel=fspUserManagementDefaultsPrivilegeLevel, intervalSonetHoPath15minES=intervalSonetHoPath15minES, deployProvIfDefaultsTraceTransmitDapiOtu=deployProvIfDefaultsTraceTransmitDapiOtu, currentL2EthRx15minMulticastFramesRcv=currentL2EthRx15minMulticastFramesRcv, inventoryCpEthUpDataEntry=inventoryCpEthUpDataEntry, deployProvPlugDefaultsAdmin=deployProvPlugDefaultsAdmin, pppDataNearEndIpMonitor=pppDataNearEndIpMonitor, intervalPhysPerfSignalToNoiseRatio1dayTimeStamp=intervalPhysPerfSignalToNoiseRatio1dayTimeStamp, deployProvLanDefaultsRowStatus=deployProvLanDefaultsRowStatus, deployProvTunnelEthProtectionType=deployProvTunnelEthProtectionType, alarmServerSignalFailTx=alarmServerSignalFailTx, intervalGfpt15minTable=intervalGfpt15minTable, f7eqp4Tca4g=f7eqp4Tca4g, thresholdSubAggregateTable=thresholdSubAggregateTable, dcnOspfAreaPropertiesChange=dcnOspfAreaPropertiesChange, f7eqp1pm=f7eqp1pm, deployProvPathElementEthNodeIp=deployProvPathElementEthNodeIp, alarmOosManagement=alarmOosManagement, f7eqpPsu1huac=f7eqpPsu1huac, deployProvIfDefaultsTraceTransmitSapiOduTcmC=deployProvIfDefaultsTraceTransmitSapiOduTcmC, exChannelConfigBitrate=exChannelConfigBitrate, shelfInfoNetworkPorts=shelfInfoNetworkPorts, alarmRamanPumpPwrTooLow=alarmRamanPumpPwrTooLow, thresholdPhysPerfRamanPumpPwrHighThres=thresholdPhysPerfRamanPumpPwrHighThres, intervalGfp15minEntry=intervalGfp15minEntry, deployProvControlPlaneWdmDefaultsCtmSetupTimeout=deployProvControlPlaneWdmDefaultsCtmSetupTimeout, deployProvPathElementOtnDefaultsTie=deployProvPathElementOtnDefaultsTie, inventoryCpEthDownDataTable=inventoryCpEthDownDataTable, deployProvCopyPathOtnCapPathId=deployProvCopyPathOtnCapPathId, intervalOduTcmB15minTimeStamp=intervalOduTcmB15minTimeStamp, deployProvIfCapTraceTransmitOpspOduTcmB=deployProvIfCapTraceTransmitOpspOduTcmB, moduleConfigCac=moduleConfigCac, deployProvControlPlaneOtnCtmRetryWait=deployProvControlPlaneOtnCtmRetryWait, deployProvIfDefaultsAutoPTassignment=deployProvIfDefaultsAutoPTassignment, intervalPhysPerfPumpPwr1dayLow=intervalPhysPerfPumpPwr1dayLow, ntpSysConditionSeverityValue=ntpSysConditionSeverityValue, FspR7TL1TimoutAvailableCaps=FspR7TL1TimoutAvailableCaps, deployProvPppIpMetric=deployProvPppIpMetric, connectionWdmDataModificationState=connectionWdmDataModificationState, vc3allocatedContainer=vc3allocatedContainer, changeServiceDeployProvIfCapAutonegotiation=changeServiceDeployProvIfCapAutonegotiation, currentSubAggregate15minES=currentSubAggregate15minES, pathElementOtnDataPathType=pathElementOtnDataPathType, FspR7ModusLastRestart=FspR7ModusLastRestart, deployProvControlPlaneWdmRsvpConfigFlag=deployProvControlPlaneWdmRsvpConfigFlag, FspR7GainRangeCaps=FspR7GainRangeCaps, deployProvControlPlaneOtnDefaultsTedbConfigFlag=deployProvControlPlaneOtnDefaultsTedbConfigFlag, logicalCpIfDataActivationState=logicalCpIfDataActivationState, deployProvIfSigDegPeriodSdhSection=deployProvIfSigDegPeriodSdhSection, changeServiceDeployProvIfTcmBLevel=changeServiceDeployProvIfTcmBLevel, FspR7SupplyType=FspR7SupplyType, deployProvModuleCapGroup=deployProvModuleCapGroup, currentOtuFec1dayCE=currentOtuFec1dayCE, intervalOduTcmB15minValidFlag=intervalOduTcmB15minValidFlag, transientThres1DayExceededFecCE=transientThres1DayExceededFecCE, deployProvLogicalCpIfDefaultsMetric=deployProvLogicalCpIfDefaultsMetric, intervalOduTcmA1dayTable=intervalOduTcmA1dayTable, intervalSonetHoPath15minNumber=intervalSonetHoPath15minNumber, moduleDataClientPorts=moduleDataClientPorts, tifiDataTifAlarmType=tifiDataTifAlarmType, exChannelDataTransmitChannel=exChannelDataTransmitChannel, thresholdSonetLineMsSESHighThres15min=thresholdSonetLineMsSESHighThres15min, connectionWdmDataToTid=connectionWdmDataToTid, controlPlaneEthConfigCdbDetail=controlPlaneEthConfigCdbDetail, changeServiceDeployProvIfCapEntry=changeServiceDeployProvIfCapEntry, thresholdOtuFecSublayerExEntry=thresholdOtuFecSublayerExEntry, connectionWdmDataFromAid=connectionWdmDataFromAid, deployProvTunnelOtnDefaultsRowStatus=deployProvTunnelOtnDefaultsRowStatus, currentSonetSect15minEntry=currentSonetSect15minEntry, deployProvControlPlaneWdmCapRsvpMaxExpRecoveryTime=deployProvControlPlaneWdmCapRsvpMaxExpRecoveryTime, f7eqp4Tcc10gtd=f7eqp4Tcc10gtd, currentPhysConvCombined1dayCVDE=currentPhysConvCombined1dayCVDE, chassisDeletion=chassisDeletion, logicalIfConfigEntry=logicalIfConfigEntry, deployProvIfCapType=deployProvIfCapType, deployProvControlPlaneOtnCapRaTraceDetail=deployProvControlPlaneOtnCapRaTraceDetail, deployProvPathEthCapTable=deployProvPathEthCapTable, changeServiceDeployProvIfCapForceDestroy=changeServiceDeployProvIfCapForceDestroy, deployProvControlPlaneEthCapCtmConfigFlag=deployProvControlPlaneEthCapCtmConfigFlag, farEndIfConfigLoopConfig=farEndIfConfigLoopConfig, deployProvCrsDcnEccAidCapsEntry=deployProvCrsDcnEccAidCapsEntry, alarmLossOfFrame=alarmLossOfFrame, thresholdOtuEntry=thresholdOtuEntry, currentGfpSublayer15minEntry=currentGfpSublayer15minEntry, areaAidCapTable=areaAidCapTable, intervalPhysConvTxHighSpeed15minTimeStamp=intervalPhysConvTxHighSpeed15minTimeStamp, currentOtuFec1dayExTable=currentOtuFec1dayExTable, intervalPhysPerfOlmRxLineAtt1dayValidFlag=intervalPhysPerfOlmRxLineAtt1dayValidFlag, tunnelOtnDataFromNodeIP=tunnelOtnDataFromNodeIP, deployProvPathElementOtnDownTributaryODTUType=deployProvPathElementOtnDownTributaryODTUType, logicalIfConfigPrio=logicalIfConfigPrio, intervalSubAggregate1dayTimeStamp=intervalSubAggregate1dayTimeStamp, FspR7InterfaceFunctionCaps=FspR7InterfaceFunctionCaps, teRouterDataEntry=teRouterDataEntry, intervalL2EthTx1dayMulticastFramesTrmt=intervalL2EthTx1dayMulticastFramesTrmt, crsConnDataEntityOutage=crsConnDataEntityOutage, FspR7OspfModeCaps=FspR7OspfModeCaps, intervalPhysPerfLaserBiasCurrentNormalized15minNumber=intervalPhysPerfLaserBiasCurrentNormalized15minNumber, deployProvControlPlaneEthDefaultsRmConfigFlag=deployProvControlPlaneEthDefaultsRmConfigFlag, intervalOtu15minValidFlag=intervalOtu15minValidFlag, vchConfigTable=vchConfigTable, f710GFP=f710GFP, changeServiceDeployProvIfCapSigDegPeriodIntegration=changeServiceDeployProvIfCapSigDegPeriodIntegration, changeServiceDeployProvIfTable=changeServiceDeployProvIfTable, FspR7LagLoadBallanceSource=FspR7LagLoadBallanceSource, deployProvIfAdmin=deployProvIfAdmin, intervalPhysConvCombined1dayES=intervalPhysConvCombined1dayES, crsConnDeployProvCapCrossConnType=crsConnDeployProvCapCrossConnType, currentPhysConv15minCV=currentPhysConv15minCV, deployProvControlPlaneOtnPcTraceDetail=deployProvControlPlaneOtnPcTraceDetail, thresholdPhysPerfTable=thresholdPhysPerfTable, ospfConfigTable=ospfConfigTable, deployProvLogicalCpIfDefaultsFarEndNodeIp=deployProvLogicalCpIfDefaultsFarEndNodeIp, controlPlaneConfigAndStatus=controlPlaneConfigAndStatus, deployProvCrsDcnTable=deployProvCrsDcnTable, farEndPlugDataTable=farEndPlugDataTable, deployProvPathElementWdmLifIp=deployProvPathElementWdmLifIp, intervalOtuFec15minBERCE=intervalOtuFec15minBERCE, connectionWdmConfigCancelConnEntities=connectionWdmConfigCancelConnEntities, teUnnumLinkEthDataInfo=teUnnumLinkEthDataInfo, deployProvControlPlaneOtnDefaultsNaasConfigFlag=deployProvControlPlaneOtnDefaultsNaasConfigFlag, deployProvIfSigDegPeriodOduTcmB=deployProvIfSigDegPeriodOduTcmB, fspUserManagementDefaultsTimeoutValue=fspUserManagementDefaultsTimeoutValue, FspR7AlsMode=FspR7AlsMode, deployProvModulePsuOutputPower=deployProvModulePsuOutputPower, forceDeployProvApsCapForceDestroy=forceDeployProvApsCapForceDestroy, deployProvControlPlaneEthDefaultsCtmMaximumRetryNumber=deployProvControlPlaneEthDefaultsCtmMaximumRetryNumber, deployProvControlPlaneWdmTedbRouterId=deployProvControlPlaneWdmTedbRouterId, deployProvControlPlaneWdmDefaultsNaasMaxSize=deployProvControlPlaneWdmDefaultsNaasMaxSize, deployProvCopyPathOtnDefaultsTable=deployProvCopyPathOtnDefaultsTable, currentEthTx1dayCrcFramesEgress=currentEthTx1dayCrcFramesEgress, nodeChannelTraceRouteType=nodeChannelTraceRouteType, FspR7PsuOutputPower=FspR7PsuOutputPower, opticalFilterIfDataTable=opticalFilterIfDataTable, alarmTransmitterDisabledOff=alarmTransmitterDisabledOff, changeServiceDeployProvIfRowStatus=changeServiceDeployProvIfRowStatus, changeServiceDeployProvIfDefaultsTraceExpectedOduTcmA=changeServiceDeployProvIfDefaultsTraceExpectedOduTcmA)
mibBuilder.exportSymbols("FspR7-MIB", thresholdGfpSublayerTypeHecDiscardedFramesHighThres15Min=thresholdGfpSublayerTypeHecDiscardedFramesHighThres15Min, intervalPmSnapshotEntry=intervalPmSnapshotEntry, intervalDispersionCompensation1weekEntry=intervalDispersionCompensation1weekEntry, transientSoftwareActivation=transientSoftwareActivation, opticalIfConfigCapTestPrbsTrmtMode=opticalIfConfigCapTestPrbsTrmtMode, vc4allocatedEntry=vc4allocatedEntry, intervalPhysPerfEstimatedSignalGain1weekTable=intervalPhysPerfEstimatedSignalGain1weekTable, intervalEthRxHighSpeed1dayNumber=intervalEthRxHighSpeed1dayNumber, deployProvControlPlaneEthCdbMaxSize=deployProvControlPlaneEthCdbMaxSize, intervalGfp1dayTypeHecCorrectedFrames=intervalGfp1dayTypeHecCorrectedFrames, wdmChannelModuleInventoryTable=wdmChannelModuleInventoryTable, FspR7CpTETypeCaps=FspR7CpTETypeCaps, otdrDataEntry=otdrDataEntry, alarmThres15MinExceededOduTcmBBbe=alarmThres15MinExceededOduTcmBBbe, deployProvControlPlaneWdmDefaultsTedbRouterId=deployProvControlPlaneWdmDefaultsTedbRouterId, intervalPhysPerfChromaticDispersion1dayLow=intervalPhysPerfChromaticDispersion1dayLow, plugInventoryChannelId=plugInventoryChannelId, deployProvPathElementOtnDefaultsTid=deployProvPathElementOtnDefaultsTid, deployProvIfCac=deployProvIfCac, intervalPhysConvHighSpeed1daySE=intervalPhysConvHighSpeed1daySE, currentL2EthTx15minBytesFrames1024Trmt=currentL2EthTx15minBytesFrames1024Trmt, controlPlaneOtnEntityStateCapEntry=controlPlaneOtnEntityStateCapEntry, deployProvControlPlaneEthCapNaasConfigFlag=deployProvControlPlaneEthCapNaasConfigFlag, currentL2EthRx15minBytesFrames1024Rcv=currentL2EthRx15minBytesFrames1024Rcv, intervalDefectSeconds1dayEntry=intervalDefectSeconds1dayEntry, facilityDeployProv=facilityDeployProv, pathElementWdmDataChannelDown=pathElementWdmDataChannelDown, changeServiceDeployProvIfDefaultsVoaMode=changeServiceDeployProvIfDefaultsVoaMode, remoteAlarmCpDataNumber=remoteAlarmCpDataNumber, ptpEntityDataLambda=ptpEntityDataLambda, deployProvLogicalCpIfDefaultsEncapsulation=deployProvLogicalCpIfDefaultsEncapsulation, intervalPhysPerfOpticalInputPwr1weekEntry=intervalPhysPerfOpticalInputPwr1weekEntry, transientForcedWorkingSwitchedBacktoWorking=transientForcedWorkingSwitchedBacktoWorking, deployProvIfLagPortType=deployProvIfLagPortType, moduleDataTransmitChannel=moduleDataTransmitChannel, controlPlaneOtnDataCmAlias=controlPlaneOtnDataCmAlias, currentOduTcmA15minEntry=currentOduTcmA15minEntry, intervalPhysPerfSignalToNoiseRatio1weekTable=intervalPhysPerfSignalToNoiseRatio1weekTable, changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmB=changeServiceDeployProvIfDefaultsSigDegPeriodOduTcmB, opticalIfDiagLaserBiasCurrentLevel=opticalIfDiagLaserBiasCurrentLevel, eocDataEntry=eocDataEntry, intervalFarEndPhysPerfOpticalInputPwr1dayLow=intervalFarEndPhysPerfOpticalInputPwr1dayLow, nodeChannelTraceToAid=nodeChannelTraceToAid, tunnelWdmConfigMonitorEntities=tunnelWdmConfigMonitorEntities, currentGfpSublayer15minTypeHecCorrectedFrames=currentGfpSublayer15minTypeHecCorrectedFrames, deployProvExChannelCapFecType=deployProvExChannelCapFecType, forceDeployProvApsProtectingAidCapsEntry=forceDeployProvApsProtectingAidCapsEntry, f7OC192=f7OC192, deployProvIfCapLacpTimeout=deployProvIfCapLacpTimeout, deployProvTunnelWdmRestorationType=deployProvTunnelWdmRestorationType, currentGfpfr15minTHecDiscardedFrames=currentGfpfr15minTHecDiscardedFrames, crsConnDataCrsFunction=crsConnDataCrsFunction, interfaceDataLaserReleaseTimer=interfaceDataLaserReleaseTimer, trapMibPrefix=trapMibPrefix, deployProvPppIpCapMetric=deployProvPppIpCapMetric, controlPlaneEthDataCdAlias=controlPlaneEthDataCdAlias, alarmAirDustFilterClogged=alarmAirDustFilterClogged, deployProvTunnelWdmDefaultsRowStatus=deployProvTunnelWdmDefaultsRowStatus, deployProvIfPumpPower=deployProvIfPumpPower, pathElementOtnDataDownTributarySlot=pathElementOtnDataDownTributarySlot, deployProvPlugReach=deployProvPlugReach, connectionOtnDataStuff=connectionOtnDataStuff, shelfInfoTable=shelfInfoTable, deployProvIfCapLagActivePorts=deployProvIfCapLagActivePorts, pathEthDataPathType=pathEthDataPathType, connectionOtnDataLayer=connectionOtnDataLayer, intervalSonetHoPath15minEntry=intervalSonetHoPath15minEntry, intervalPhysPerfSignalToNoiseRatio15minTimeStamp=intervalPhysPerfSignalToNoiseRatio15minTimeStamp, fspUser=fspUser, farEndIfConfigCapEntry=farEndIfConfigCapEntry, transientEqlzStart=transientEqlzStart, forceDeployProvApsWorkingAidCapsEntry=forceDeployProvApsWorkingAidCapsEntry, FspR7TestModeCaps=FspR7TestModeCaps, deployProvLogicalCpIfRowStatus=deployProvLogicalCpIfRowStatus, deployProvControlPlaneEthCapCtmMaximumRetryWait=deployProvControlPlaneEthCapCtmMaximumRetryWait, deployProvIfDefaultsRevertiveMode=deployProvIfDefaultsRevertiveMode, tunnelWdmDataToTidMonitor=tunnelWdmDataToTidMonitor, tunnelWdmConfigAlias=tunnelWdmConfigAlias, deployProvControlPlaneOtnDefaultsCmConfigFlag=deployProvControlPlaneOtnDefaultsCmConfigFlag, thresholdPhysConvEntry=thresholdPhysConvEntry, deployProvControlPlaneWdmDefaultsCdbDetail=deployProvControlPlaneWdmDefaultsCdbDetail, controlPlaneEthConfigCdConfigFlag=controlPlaneEthConfigCdConfigFlag, changeServiceDeployProvIfBitrate=changeServiceDeployProvIfBitrate, deployProvTifInputCapTifAlarmMessage=deployProvTifInputCapTifAlarmMessage, exChannelConfigEntry=exChannelConfigEntry, thresholdSubAggregateESHighThres15min=thresholdSubAggregateESHighThres15min, pathElementWdmDataComputedOptPowerReverse=pathElementWdmDataComputedOptPowerReverse, deployProvIfDefaultsDuplex=deployProvIfDefaultsDuplex, deployProvDcnCapRowStatus=deployProvDcnCapRowStatus, deployProvLogicalCpIfNendTeLinkIdNum=deployProvLogicalCpIfNendTeLinkIdNum, alarmDispersionCompensationTooHigh=alarmDispersionCompensationTooHigh, deployProvControlPlaneOtnDefaultsNaasMaxSize=deployProvControlPlaneOtnDefaultsNaasMaxSize, intervalL2EthRx1dayNumber=intervalL2EthRx1dayNumber, intervalPhysPerfBackreflectionPwrRcv1weekValidFlag=intervalPhysPerfBackreflectionPwrRcv1weekValidFlag, changeServiceDeployProvIfCapIpAddr=changeServiceDeployProvIfCapIpAddr, thresholdSonetHoPathEntry=thresholdSonetHoPathEntry, FspR7CpCompStateCaps=FspR7CpCompStateCaps, deployProvTunnelWdmCapRestorationPaths=deployProvTunnelWdmCapRestorationPaths, intervalPhysPerfLaserBiasCurrentNormalized1dayTable=intervalPhysPerfLaserBiasCurrentNormalized1dayTable, currentL2EthTx1dayBytesFrames512Trmt=currentL2EthTx1dayBytesFrames512Trmt, deployProvPppIpCapAdmin=deployProvPppIpCapAdmin, intervalEthRx1dayTimeStamp=intervalEthRx1dayTimeStamp, deployProvApsForceDestroy=deployProvApsForceDestroy, deployProvCrsDcnCapType=deployProvCrsDcnCapType, changeServiceDeployProvIfCapSigDegThresOtu=changeServiceDeployProvIfCapSigDegThresOtu, f7eqpNcu2e=f7eqpNcu2e, transientCopyFileTransferStart=transientCopyFileTransferStart, deployProvTifOutputType=deployProvTifOutputType, opticalIfDiagPrbsAvgBER=opticalIfDiagPrbsAvgBER, tunnelWdmDataEntry=tunnelWdmDataEntry, pathElementOtnDataTie=pathElementOtnDataTie, changeServiceDeployProvIfDefaultsOtnStuffing=changeServiceDeployProvIfDefaultsOtnStuffing, intervalPhysPerfCarrierFreqOffset1weekHigh=intervalPhysPerfCarrierFreqOffset1weekHigh, ntpSrvConditionSeverityTable=ntpSrvConditionSeverityTable, alarmPayloadMismatchHigherOrderPath=alarmPayloadMismatchHigherOrderPath, deployProvControlPlaneOtnDefaultsPcTraceDetail=deployProvControlPlaneOtnDefaultsPcTraceDetail, transientCpConnectionEstablishmentStart=transientCpConnectionEstablishmentStart, intervalGfpfr1dayTable=intervalGfpfr1dayTable, deployProvControlPlaneEthCapRsvpMaxExpRecoveryTime=deployProvControlPlaneEthCapRsvpMaxExpRecoveryTime, FspR7RemoteAlarmType=FspR7RemoteAlarmType, thresholdSonetLineESHighThres15min=thresholdSonetLineESHighThres15min, deployProvTunnelWdmPceMode=deployProvTunnelWdmPceMode, currentOtuFec1dayTable=currentOtuFec1dayTable, alarmSectionTraceMismatch=alarmSectionTraceMismatch, intervalPhysPerfCurrent1dayLow=intervalPhysPerfCurrent1dayLow, opticalIfDataTable=opticalIfDataTable, deployProvTunnelEthOifUni=deployProvTunnelEthOifUni, deployProvPathElementEthLogicalInterfaceId=deployProvPathElementEthLogicalInterfaceId, intervalPhysPerfChromaticDispersion1dayEntry=intervalPhysPerfChromaticDispersion1dayEntry, FspR7Action=FspR7Action, deployProvIfCapSigDegThresOtu=deployProvIfCapSigDegThresOtu, alarmFarEndCommFailure=alarmFarEndCommFailure, routingIpEntry=routingIpEntry, deployProvLogicalCpIfCapNendTeLinkIdUnn=deployProvLogicalCpIfCapNendTeLinkIdUnn, changeServiceDeployProvIfDefaultsTcmBLevel=changeServiceDeployProvIfDefaultsTcmBLevel, inventoryCpOtnCrsUpDataTable=inventoryCpOtnCrsUpDataTable, intervalLatency1weekLow=intervalLatency1weekLow, intervalPhysPerfOscPwr1dayTable=intervalPhysPerfOscPwr1dayTable, logicalCpIfConfigPrio=logicalCpIfConfigPrio, FspR7PortBehaviour=FspR7PortBehaviour, deployProvIfCapPortRole=deployProvIfCapPortRole, currentOduTcmC1dayES=currentOduTcmC1dayES, intervalPhysPerfCarrierFreqOffset1weekMean=intervalPhysPerfCarrierFreqOffset1weekMean, deployProvExChannelMinimumOSNRRcv=deployProvExChannelMinimumOSNRRcv, f7eqp4tcc10gd=f7eqp4tcc10gd, crsConnDeployProvAdmin=crsConnDeployProvAdmin, deployProvDcnExternalVid=deployProvDcnExternalVid, deployProvPathElementOtnCapDownTributaryPort=deployProvPathElementOtnCapDownTributaryPort, alarmLockedDefectOduTcmC=alarmLockedDefectOduTcmC, deployProvPortBindingDefaultsRemoteScn=deployProvPortBindingDefaultsRemoteScn, deployProvControlPlaneWdmCtmConfigFlag=deployProvControlPlaneWdmCtmConfigFlag, intervalL2EthTx15minValidFlag=intervalL2EthTx15minValidFlag, controlPlaneWdmConfigCtmRetryWait=controlPlaneWdmConfigCtmRetryWait, intervalPhysPerfCurrent1weekValidFlag=intervalPhysPerfCurrent1weekValidFlag, deployProvShelfDefaultsBand=deployProvShelfDefaultsBand, knownHostDeletion=knownHostDeletion, FspR7CpReversionState=FspR7CpReversionState, intervalPhysPerfChromaticDispersion15minTimeStamp=intervalPhysPerfChromaticDispersion15minTimeStamp, deployProvPathElementOtnDownTributarySlot=deployProvPathElementOtnDownTributarySlot, intervalDispersionCompensation1dayLow=intervalDispersionCompensation1dayLow, FspR7Baund=FspR7Baund, opticalIfDataStuff=opticalIfDataStuff, deployProvIfDefaultsTcmALevel=deployProvIfDefaultsTcmALevel, currentEthRx1dayPauseFrames=currentEthRx1dayPauseFrames, tunnelOtnDataToAid=tunnelOtnDataToAid, FspR7TopologyType=FspR7TopologyType, alarmApdLowVoltage=alarmApdLowVoltage, controlPlaneWdmConfigTable=controlPlaneWdmConfigTable, changeServiceDeployProvIfLaserOffDelayFunction=changeServiceDeployProvIfLaserOffDelayFunction, controlPlaneOtnConfigNaasMaxSize=controlPlaneOtnConfigNaasMaxSize, deployProvPathElementWdmCapNodeIp=deployProvPathElementWdmCapNodeIp, thresholdPhysConvTxHighSpeedSETXHighThres15min=thresholdPhysConvTxHighSpeedSETXHighThres15min, wdmTunnelResultNotification=wdmTunnelResultNotification, connectionEthDataComputedPaths=connectionEthDataComputedPaths, deployProvLogicalCpIfFarEndLifId=deployProvLogicalCpIfFarEndLifId, forceDeployProvApsCapProtectionMech=forceDeployProvApsCapProtectionMech, controlPlaneOtnConfigCdResyncTimeout=controlPlaneOtnConfigCdResyncTimeout, FspR7CpOperateReversion=FspR7CpOperateReversion, thresholdOduUASHighThres15min=thresholdOduUASHighThres15min, deployProvIfTilt=deployProvIfTilt, deployProvControlPlaneEthDefaultsNaasAdvertWait=deployProvControlPlaneEthDefaultsNaasAdvertWait, deployProvPathElementEthTid=deployProvPathElementEthTid, intervalDefectSeconds15minEntry=intervalDefectSeconds15minEntry, FspR7OscChannelCaps=FspR7OscChannelCaps, deployProvControlPlaneOtnDefaultsCdbMaxSize=deployProvControlPlaneOtnDefaultsCdbMaxSize, intervalPhysPerfOlmRxLineAtt1weekEntry=intervalPhysPerfOlmRxLineAtt1weekEntry, deployProvExChannelType=deployProvExChannelType, deployProvIfCapMetric=deployProvIfCapMetric, intervalFarEndPhysPerfOpticalOutputPwr15minTable=intervalFarEndPhysPerfOpticalOutputPwr15minTable, thresholdPhysPerfSignalToNoiseRatioLow=thresholdPhysPerfSignalToNoiseRatioLow, thresholdPhysConvCVHighThres1day=thresholdPhysConvCVHighThres1day, forceDeployProvApsCapProtectionAid=forceDeployProvApsCapProtectionAid, alarmVoltageTooHigh=alarmVoltageTooHigh, tunnelOtnDataComputationState=tunnelOtnDataComputationState, thresholdSonetLineMsSESHighThres1day=thresholdSonetLineMsSESHighThres1day, alarmSingleFanFailure=alarmSingleFanFailure, logicalCpIfConfigAuthType=logicalCpIfConfigAuthType, pppfConfigDataLayerPmReset=pppfConfigDataLayerPmReset, changeServiceDeployProvIfTilt=changeServiceDeployProvIfTilt, deployProvControlPlaneOtnCapRsvpConfigFlag=deployProvControlPlaneOtnCapRsvpConfigFlag, controlPlaneOtnConfigRsvpMaxExpRecoveryTime=controlPlaneOtnConfigRsvpMaxExpRecoveryTime, fspUserManagementCapTable=fspUserManagementCapTable, deployProvVchChannelCapTraceTransmitOpspOdu=deployProvVchChannelCapTraceTransmitOpspOdu, deployProvCopyPathWdmPathId=deployProvCopyPathWdmPathId, deployProvIfDefaultsPortMode=deployProvIfDefaultsPortMode, intervalPhysPerfOscOpticalOutputPwr15minTimeStamp=intervalPhysPerfOscOpticalOutputPwr15minTimeStamp, dcnTopologyConfigCapEntry=dcnTopologyConfigCapEntry, deployProvSyslogRowStatus=deployProvSyslogRowStatus, FspR7ConnectorType=FspR7ConnectorType, thresholdDefectSecondsEntry=thresholdDefectSecondsEntry, intervalEthRxHighSpeed1dayTimeStamp=intervalEthRxHighSpeed1dayTimeStamp, serviceConfigAndStatus=serviceConfigAndStatus, deployProvIfDefaultsStagType=deployProvIfDefaultsStagType, deployProvControlPlaneOtnCapNaasAdvertWait=deployProvControlPlaneOtnCapNaasAdvertWait, deployProvPlugMaxDataRate=deployProvPlugMaxDataRate, deployProvControlPlaneOtnCdbConfigFlag=deployProvControlPlaneOtnCdbConfigFlag, deployProvIfVariableGain=deployProvIfVariableGain, forceDeployProvApsDefaultsRevertMode=forceDeployProvApsDefaultsRevertMode, intervalOduTcmA1dayBbe=intervalOduTcmA1dayBbe, controlPlaneWdmDataRaAlias=controlPlaneWdmDataRaAlias, opticalIfDataLagKey=opticalIfDataLagKey, f7eqpR6cu=f7eqpR6cu, currentL2EthTx1dayBytesFrames1024Trmt=currentL2EthTx1dayBytesFrames1024Trmt, portBindingDataLayer=portBindingDataLayer, deployProvExChannelCapFrameFormat=deployProvExChannelCapFrameFormat, connectionWdmDataRestorationState=connectionWdmDataRestorationState, entityStateSecondaryStates=entityStateSecondaryStates, deployProvLogicalCpIfNendTeLinkIdUnn=deployProvLogicalCpIfNendTeLinkIdUnn, deployProvControlPlaneWdmDefaultsCmConfigFlag=deployProvControlPlaneWdmDefaultsCmConfigFlag, deployProvControlPlaneOtnDefaultsCdResyncTimeout=deployProvControlPlaneOtnDefaultsCdResyncTimeout, FspR7CapInventoryCaps=FspR7CapInventoryCaps, logicalIfConfigAuthString=logicalIfConfigAuthString, deployProvPathElementEthCapLogicalInterfaceId=deployProvPathElementEthCapLogicalInterfaceId, deployProvControlPlaneOtnCapTable=deployProvControlPlaneOtnCapTable, intervalSonetLoPath1dayNumber=intervalSonetLoPath1dayNumber, deployProvPppIpDefaultsOspf=deployProvPppIpDefaultsOspf, FspR7ScuDbBackup=FspR7ScuDbBackup, forceDeployProvApsDefaultsForceDestroy=forceDeployProvApsDefaultsForceDestroy, changeServiceDeployProvIfCapTraceTransmitDapiOtu=changeServiceDeployProvIfCapTraceTransmitDapiOtu, deployProvTifInputCapTable=deployProvTifInputCapTable, FspR7Category=FspR7Category, tnaMapDataLocalPort=tnaMapDataLocalPort, deployProvLanDefaultsAdmin=deployProvLanDefaultsAdmin, deployProvControlPlaneEthCapCdbConfigFlag=deployProvControlPlaneEthCapCdbConfigFlag, crsConnDeployProvDefaultsAdmin=crsConnDeployProvDefaultsAdmin, alarmDatabaseVersionMismatch=alarmDatabaseVersionMismatch, deployProvIfSigDegThresReceiver=deployProvIfSigDegThresReceiver, deployProvPathOtnCapTable=deployProvPathOtnCapTable, deployProvPathElementOtnCapLogicalInterfaceId=deployProvPathElementOtnCapLogicalInterfaceId, logicalCpIfDataVNodeTltp=logicalCpIfDataVNodeTltp, intervalPhysPerfOscPwr1weekTimeStamp=intervalPhysPerfOscPwr1weekTimeStamp, intervalPhysPerfOpticalOutputPwr1dayLow=intervalPhysPerfOpticalOutputPwr1dayLow, deployProvModuleTable=deployProvModuleTable, apsProtGroupStatusEntry=apsProtGroupStatusEntry)
mibBuilder.exportSymbols("FspR7-MIB", interfaceConfigExternalVidCapsTable=interfaceConfigExternalVidCapsTable, thresholdPhysPerfCapAttRxHigh=thresholdPhysPerfCapAttRxHigh, intervalSubAggregate1dayCrc=intervalSubAggregate1dayCrc, intervalGfp1dayCoreHecCorrectedFrames=intervalGfp1dayCoreHecCorrectedFrames, intervalDefectSeconds15minValidFlag=intervalDefectSeconds15minValidFlag, transientThres1DayExceededPhysConvSE=transientThres1DayExceededPhysConvSE, FspR7LagPorts=FspR7LagPorts, inventoryCpWdmUpDataEntry=inventoryCpWdmUpDataEntry, thresholdEthRxHighSpeedPauseFramesHighThres1Day=thresholdEthRxHighSpeedPauseFramesHighThres1Day, deployProvIfDefaultsTraceExpectedOtu=deployProvIfDefaultsTraceExpectedOtu, deployProvTunnelWdmDefaultsTunnelType=deployProvTunnelWdmDefaultsTunnelType, intervalLatency1dayValidFlag=intervalLatency1dayValidFlag, authTrapProtocol=authTrapProtocol, deployProvModuleCapRoadmNumber=deployProvModuleCapRoadmNumber, deployProvIfCapSigDegThresOdu=deployProvIfCapSigDegThresOdu, thresholdPhysPerfCapChromaticDispersionHigh=thresholdPhysPerfCapChromaticDispersionHigh, intervalPhysPerfOlmRxLineAtt15minHigh=intervalPhysPerfOlmRxLineAtt15minHigh, deployProvCopyPathOtnEntry=deployProvCopyPathOtnEntry, thresholdGfptDiscardedSuperblocksHighThres1Day=thresholdGfptDiscardedSuperblocksHighThres1Day, deployProvApsDefaultsDirection=deployProvApsDefaultsDirection, deployProvExChannelCapFarEndLocation=deployProvExChannelCapFarEndLocation, deployProvTifInputDefaultsForceDestroy=deployProvTifInputDefaultsForceDestroy, currentOduTcmB1dayBbe=currentOduTcmB1dayBbe, deployProvControlPlaneOtnNaasMaxSize=deployProvControlPlaneOtnNaasMaxSize, intervalEthRx3HS1dayBytes=intervalEthRx3HS1dayBytes, deployProvLanDefaultsEntry=deployProvLanDefaultsEntry, pppfConfigTable=pppfConfigTable, deployProvIfTraceExpectedSonetSection=deployProvIfTraceExpectedSonetSection, currentL2EthRx1dayFramesRcv=currentL2EthRx1dayFramesRcv, deployProvIfOscOpticalSetpoint=deployProvIfOscOpticalSetpoint, changeServiceDeployProvIfChannelProvisioning=changeServiceDeployProvIfChannelProvisioning, currentDefectSeconds1dayTable=currentDefectSeconds1dayTable, thresholdPhysPerfAttTxLow=thresholdPhysPerfAttTxLow, deployProvPathEthDefaultsRowStatus=deployProvPathEthDefaultsRowStatus, tunnelWdmDataFromTid=tunnelWdmDataFromTid, deployProvLogicalIfDefaultsEntry=deployProvLogicalIfDefaultsEntry, thresholdPhysPerfCapConfigurableOpticalOutputPwrHigh=thresholdPhysPerfCapConfigurableOpticalOutputPwrHigh, thresholdSonetSectSESHighThres1day=thresholdSonetSectSESHighThres1day, deployProvExChannelDefaultsFecType=deployProvExChannelDefaultsFecType, deployProvIfDefaultsVoaSetpoint=deployProvIfDefaultsVoaSetpoint, intervalPhysPerfOpticalInputPwr1weekValidFlag=intervalPhysPerfOpticalInputPwr1weekValidFlag, f7eqpScu=f7eqpScu, teNumLinkOtnDataPhysicalLink=teNumLinkOtnDataPhysicalLink, deployProvTunnelWdmCapReversionType=deployProvTunnelWdmCapReversionType, alarmFacilityForcedOn=alarmFacilityForcedOn, alarmTemperatureTooLow=alarmTemperatureTooLow, thresholdEthRxHighSpeedCrcFramesHighThres1Day=thresholdEthRxHighSpeedCrcFramesHighThres1Day, opticalIfConfigXfpDecisionThres=opticalIfConfigXfpDecisionThres, deployProvControlPlaneWdmDefaultsRsvpConfigFlag=deployProvControlPlaneWdmDefaultsRsvpConfigFlag, deployProvControlPlaneOtnNaasTraceDetail=deployProvControlPlaneOtnNaasTraceDetail, intervalGfp15minTimeStamp=intervalGfp15minTimeStamp, transientNtpSrvSyncChanged=transientNtpSrvSyncChanged, controlPlaneOtnDataCdAlias=controlPlaneOtnDataCdAlias, pathElementWdmDataNodeIp=pathElementWdmDataNodeIp, intervalSonetLoPath1dayCV=intervalSonetLoPath1dayCV, intervalL2EthTx15minTimeStamp=intervalL2EthTx15minTimeStamp, f710GFC=f710GFC, deployProvPathElementOtnDefaultsDownTributaryODTUType=deployProvPathElementOtnDefaultsDownTributaryODTUType, deployProvIfDefaultsSigDegThresOtu=deployProvIfDefaultsSigDegThresOtu, changeServiceDeployProvIfDefaultsFlowControl=changeServiceDeployProvIfDefaultsFlowControl, opticalIfDiagOscPowerReceived=opticalIfDiagOscPowerReceived, deployProvPortBindingRemotePort=deployProvPortBindingRemotePort, inventoryCpEthCrsDownDataIndexFlowFrom=inventoryCpEthCrsDownDataIndexFlowFrom, intervalDispersionCompensation1dayNumber=intervalDispersionCompensation1dayNumber, FspR7OpticalSubBandCaps=FspR7OpticalSubBandCaps, deployProvControlPlaneEthCapNaasAdvertWait=deployProvControlPlaneEthCapNaasAdvertWait, crsConnDataTunnelAid=crsConnDataTunnelAid, transientThres1DayExceededSonetSectES=transientThres1DayExceededSonetSectES, currentGfpSublayer1dayTable=currentGfpSublayer1dayTable, deployProvModuleCapDCFiberType=deployProvModuleCapDCFiberType, changeServiceDeployProvIfSigDegThresSdhSection=changeServiceDeployProvIfSigDegThresSdhSection, intervalSonetLoPath15minTable=intervalSonetLoPath15minTable, thresholdSonetSectEntry=thresholdSonetSectEntry, changeServiceDeployProvIfDefaultsDisparityCorrection=changeServiceDeployProvIfDefaultsDisparityCorrection, f7eqp1csmuc=f7eqp1csmuc, deployProvLogicalCpIfDefaultsFarEndLifId=deployProvLogicalCpIfDefaultsFarEndLifId, deployProvControlPlaneOtnDefaultsCdbDetail=deployProvControlPlaneOtnDefaultsCdbDetail, deployProvTifInputForceDestroy=deployProvTifInputForceDestroy, alarmOosPrePostSigInTearDownProcess=alarmOosPrePostSigInTearDownProcess, transientThres1DayExceededMuxES=transientThres1DayExceededMuxES, intervalOdu1dayBbe=intervalOdu1dayBbe, intervalEthRxHighSpeed1dayBytes=intervalEthRxHighSpeed1dayBytes, deployProvControlPlaneEthCapRmTraceDetail=deployProvControlPlaneEthCapRmTraceDetail, deployProvModuleCapReach=deployProvModuleCapReach, deployProvTunnelWdmCapToAid=deployProvTunnelWdmCapToAid, FspR7CpRestorationType=FspR7CpRestorationType, forceDeployProvApsProtectionMech=forceDeployProvApsProtectionMech, connectionEthDataCirRcv=connectionEthDataCirRcv, deployProvPathElementWdmCapUpstreamModuleAid=deployProvPathElementWdmCapUpstreamModuleAid, changeServiceDeployProvIfLanAidCapsIndex=changeServiceDeployProvIfLanAidCapsIndex, pathEthDataPathId=pathEthDataPathId, intervalOduTcmA1dayES=intervalOduTcmA1dayES, logicalCpIfConfigOspf=logicalCpIfConfigOspf, inventoryCpWdmCrsDownDataEntry=inventoryCpWdmCrsDownDataEntry, deployProvDcnDefaultsExternalVid=deployProvDcnDefaultsExternalVid, intervalSonetSect15minCV=intervalSonetSect15minCV, FspR7ConnCaps=FspR7ConnCaps, intervalOdu1dayUAS=intervalOdu1dayUAS, connectionWdmDataErrorMessage=connectionWdmDataErrorMessage, deployProvLogicalIfDefaultsAreaId=deployProvLogicalIfDefaultsAreaId, transientThres1DayExceededOduTcmASES=transientThres1DayExceededOduTcmASES, intervalPhysPerfOpticalInputPwr1weekNumber=intervalPhysPerfOpticalInputPwr1weekNumber, trapMIB=trapMIB, f7Error=f7Error, connectionWdmDataConnectionNo=connectionWdmDataConnectionNo, apsConfigSDswitching=apsConfigSDswitching, deployProvPlugType=deployProvPlugType, opticalIfDataLinkLength=opticalIfDataLinkLength, intervalLatency1weekMean=intervalLatency1weekMean, vchConfigCir=vchConfigCir, intervalPhysPerfCarrierFreqOffset1weekNumber=intervalPhysPerfCarrierFreqOffset1weekNumber, connectionEthDataTunnelNo=connectionEthDataTunnelNo, alarmAseTableGenFailPilot=alarmAseTableGenFailPilot, deployProvIfCapBip=deployProvIfCapBip, currentOduTcmC15minES=currentOduTcmC15minES, f7Shelfs=f7Shelfs, vc4c16allocatedTable=vc4c16allocatedTable, interfaceDataConnectionType=interfaceDataConnectionType, changeServiceDeployProvIfDefaultsEqlzAdmin=changeServiceDeployProvIfDefaultsEqlzAdmin, sts3callocatedEntry=sts3callocatedEntry, opticalIfConfigSigDegPeriodSdhSection=opticalIfConfigSigDegPeriodSdhSection, deployProvCopyPathWdmDefaultsPathId=deployProvCopyPathWdmDefaultsPathId, intervalLatency15minTimeStamp=intervalLatency15minTimeStamp, deployProvPathElementOtnRowStatus=deployProvPathElementOtnRowStatus, deployProvControlPlaneOtnCapRsvpMaxExpRecoveryTime=deployProvControlPlaneOtnCapRsvpMaxExpRecoveryTime, deployProvPathElementEthDefaultsLifIp=deployProvPathElementEthDefaultsLifIp, intervalOtu1dayValidFlag=intervalOtu1dayValidFlag, deployProvPppIpNearEndIp=deployProvPppIpNearEndIp, opticalIfDiagOutputPower=opticalIfDiagOutputPower, currentSonetLoPath1dayCV=currentSonetLoPath1dayCV, deployProvPortBindingTable=deployProvPortBindingTable, interfaceDataFiberType=interfaceDataFiberType, eRoadmConfigCapOpticalSetPoint=eRoadmConfigCapOpticalSetPoint, tunnelOtnConfigAbortProcess=tunnelOtnConfigAbortProcess, moduleDataChannelSpacing=moduleDataChannelSpacing, thresholdOtuFecCEHighThres15min=thresholdOtuFecCEHighThres15min, intervalOduTcmC1dayTable=intervalOduTcmC1dayTable, FspR7InvertTelemetryInputLogicCaps=FspR7InvertTelemetryInputLogicCaps, opticalIfDataTunableLowestChannel=opticalIfDataTunableLowestChannel, ethernetDataValidSignalTimer=ethernetDataValidSignalTimer, intervalOdu1dayES=intervalOdu1dayES, deployProvIfAttenuationGradient=deployProvIfAttenuationGradient, deployProvTifOutputCapAdmin=deployProvTifOutputCapAdmin, thresholdPhysPerfCapTable=thresholdPhysPerfCapTable, currentEthRx3HS15minBytesFrames1024Rcv=currentEthRx3HS15minBytesFrames1024Rcv, currentL2EthRx15minElapsedTime=currentL2EthRx15minElapsedTime, currentOduTcmB15minBbe=currentOduTcmB15minBbe, opticalIfConfigCapXfpDecisionThres=opticalIfConfigCapXfpDecisionThres, deployProvIfTerminationLevel=deployProvIfTerminationLevel, deployProvModuleDefaultsCapabilityLevel=deployProvModuleDefaultsCapabilityLevel, fspUserManagementEngineID=fspUserManagementEngineID, alarmDifferentialGroupDelayTooHigh=alarmDifferentialGroupDelayTooHigh, intervalL2EthTx15minTable=intervalL2EthTx15minTable, currentOtuFec1dayElapsedTime=currentOtuFec1dayElapsedTime, currentGfpfr15minGoodFrames=currentGfpfr15minGoodFrames, intervalPhysPerfEstimatedSignalGain1dayLow=intervalPhysPerfEstimatedSignalGain1dayLow, deployProvExChannelDefaultsLineCoding=deployProvExChannelDefaultsLineCoding, deployProvControlPlaneEthCapTedbMinAdvertWait=deployProvControlPlaneEthCapTedbMinAdvertWait, dcnTopologyConfigActivateDetect=dcnTopologyConfigActivateDetect, alarmEqualizationProgress=alarmEqualizationProgress, alarmPowerFailure=alarmPowerFailure, thresholdOduTcmBSESHighThres15min=thresholdOduTcmBSESHighThres15min, deployProvVchChannelTimModeOdu=deployProvVchChannelTimModeOdu, alarmReceiverFailure=alarmReceiverFailure, deployProvControlPlaneWdmCapNaasAdvertWait=deployProvControlPlaneWdmCapNaasAdvertWait, pathElementOtnDataTidMonitor=pathElementOtnDataTidMonitor, deployProvControlPlaneEthDefaultsCmTraceDetail=deployProvControlPlaneEthDefaultsCmTraceDetail, currentSonetSect1dayTable=currentSonetSect1dayTable, deployProvControlPlaneWdmDefaultsTable=deployProvControlPlaneWdmDefaultsTable, alarmCurrentTooLow=alarmCurrentTooLow, currentSonetLoPath15minSES=currentSonetLoPath15minSES, opticalIfDataOdtuType=opticalIfDataOdtuType, intervalLatency1weekHigh=intervalLatency1weekHigh, f7eqpF2kDemiV2=f7eqpF2kDemiV2, currentEthRx3HS1dayBytesFrames64Rcv=currentEthRx3HS1dayBytesFrames64Rcv, deployProvTunnelOtnAlias=deployProvTunnelOtnAlias, deployProvControlPlaneWdmCmFisFrsTimeout=deployProvControlPlaneWdmCmFisFrsTimeout, moduleConfigCapTable=moduleConfigCapTable, intervalL2EthRx15minBroadcastFramesRcv=intervalL2EthRx15minBroadcastFramesRcv, deployProvControlPlaneEthCtmSetupTimeout=deployProvControlPlaneEthCtmSetupTimeout, deployProvTunnelWdmCapFacilityType=deployProvTunnelWdmCapFacilityType, deployProvIfTable=deployProvIfTable, inventoryCpWdmUpDataTable=inventoryCpWdmUpDataTable, alarmAutoShutdownSendingAisOtu=alarmAutoShutdownSendingAisOtu, intervalEthTx15minTable=intervalEthTx15minTable, deployProvShelfCapPsuOutputPower=deployProvShelfCapPsuOutputPower, intervalPhysPerfOscOpticalOutputPwr15minHigh=intervalPhysPerfOscOpticalOutputPwr15minHigh, tunnelWdmDataComputedPaths=tunnelWdmDataComputedPaths, moduleDataInternalPlugsReach=moduleDataInternalPlugsReach, FspR7SessionStatusCaps=FspR7SessionStatusCaps, currentGfp15minTypeHecCorrectedFrames=currentGfp15minTypeHecCorrectedFrames, f7eqpOscm2n=f7eqpOscm2n, thresholdSonetHoPathESHighThres15min=thresholdSonetHoPathESHighThres15min, FspR7LaserForcedOperationCaps=FspR7LaserForcedOperationCaps, currentGfpfrSublayer1dayEntry=currentGfpfrSublayer1dayEntry, maxBackplaneBandwidth=maxBackplaneBandwidth, intervalPhysPerfCurrentOscGain1weekEntry=intervalPhysPerfCurrentOscGain1weekEntry, reservationCpDataTunnelInstance=reservationCpDataTunnelInstance, intervalPhysPerfEstimatedSignalGain15minValidFlag=intervalPhysPerfEstimatedSignalGain15minValidFlag, crsConnWdmConfigEntry=crsConnWdmConfigEntry, intervalEthRx3HS15minUndersizedFramesRcv=intervalEthRx3HS15minUndersizedFramesRcv, deployProvIfLaserOffDelayFunction=deployProvIfLaserOffDelayFunction, intervalPhysPerfBackreflectionPwrRcv1weekTimeStamp=intervalPhysPerfBackreflectionPwrRcv1weekTimeStamp, alarmSignalDegradeOlm=alarmSignalDegradeOlm, areaIdCapTable=areaIdCapTable, shelfInfoStandardSlots=shelfInfoStandardSlots, intervalGfpSublayer1dayTable=intervalGfpSublayer1dayTable, deployProvCopyPathEthRowStatus=deployProvCopyPathEthRowStatus, logicalCpIfDataFarEndTidMonitor=logicalCpIfDataFarEndTidMonitor, vc4c8allocatedSequenceNumber=vc4c8allocatedSequenceNumber, FspR7TypeConnectionCaps=FspR7TypeConnectionCaps, deployProvLogicalCpIfOspf=deployProvLogicalCpIfOspf, deployProvTifInputDefaultsType=deployProvTifInputDefaultsType, deployProvConnStdCapToEndpointA=deployProvConnStdCapToEndpointA, eRoadmInfoInternalPlugs=eRoadmInfoInternalPlugs, nendIpCapTable=nendIpCapTable, changeServiceDeployProvIfCapBehaviour=changeServiceDeployProvIfCapBehaviour, intervalL2EthRx1dayUndersizedFramesRcv=intervalL2EthRx1dayUndersizedFramesRcv, alarmLossOfFrameMuxFarEnd=alarmLossOfFrameMuxFarEnd, logicalIfDataIpAddr=logicalIfDataIpAddr, connectionEthDataDestinationTna=connectionEthDataDestinationTna, deployProvIfCapTraceTransmitSapiOduTcmA=deployProvIfCapTraceTransmitSapiOduTcmA, deployProvCopyPathWdmCapEntry=deployProvCopyPathWdmCapEntry, vtpEntityDataFrequency=vtpEntityDataFrequency, alarmAutoShutdownSendingOciOdu=alarmAutoShutdownSendingOciOdu, connectionOtnDataTunnelInstance=connectionOtnDataTunnelInstance, alarmIdleSignalReceived=alarmIdleSignalReceived, intervalL2EthRx15minOversizedFramesRcv=intervalL2EthRx15minOversizedFramesRcv, crsConnConfigEntry=crsConnConfigEntry, controlPlaneEthDataEntry=controlPlaneEthDataEntry, inventoryCpWdmCrsUpDataTable=inventoryCpWdmCrsUpDataTable, deployProvCopyPathWdmEntry=deployProvCopyPathWdmEntry, teNumLinkEthDataFendTeLinkIp=teNumLinkEthDataFendTeLinkIp, deployProvModuleCapType=deployProvModuleCapType, intervalPhysPerfOscOpticalOutputPwr1weekTimeStamp=intervalPhysPerfOscOpticalOutputPwr1weekTimeStamp, changeServiceDeployProvIfDefaultsTimingSource=changeServiceDeployProvIfDefaultsTimingSource, connectionWdmDataTunnelType=connectionWdmDataTunnelType, controlPlaneEntityStateCapEntry=controlPlaneEntityStateCapEntry, changeServiceDeployProvIfCapSigDegPeriodOduTcmB=changeServiceDeployProvIfCapSigDegPeriodOduTcmB, f7eqpNcu=f7eqpNcu, ntpSrvCurrentConditionEntry=ntpSrvCurrentConditionEntry, neType=neType, farEndPlugDiagnosticsLowerTempThres=farEndPlugDiagnosticsLowerTempThres, FspR7LacpTimeoutCaps=FspR7LacpTimeoutCaps, portBindingDataRemoteNodeIp=portBindingDataRemoteNodeIp, tunnelEthConfigCbsRcv=tunnelEthConfigCbsRcv, deployProvControlPlaneWdmDefaultsCmTraceDetail=deployProvControlPlaneWdmDefaultsCmTraceDetail, intervalFarEndPhysPerfOpticalInputPwr15minEntry=intervalFarEndPhysPerfOpticalInputPwr15minEntry, alarmNtpServer1Unreachable=alarmNtpServer1Unreachable, controlPlaneEntityStateCapAdmin=controlPlaneEntityStateCapAdmin, deployProvIfTraceFormSonetSection=deployProvIfTraceFormSonetSection, alarmThres15MinExceededSonetSectES=alarmThres15MinExceededSonetSectES, currentOtuFec15minExEntry=currentOtuFec15minExEntry, intervalL2EthTx1dayBytesFrames1519Trmt=intervalL2EthTx1dayBytesFrames1519Trmt)
mibBuilder.exportSymbols("FspR7-MIB", deployProvIfTraceTransmitOpspOtu=deployProvIfTraceTransmitOpspOtu, fspUserManagementAccountFlag=fspUserManagementAccountFlag, f7eqp2clsmd=f7eqp2clsmd, f7eqp8tce2g5d=f7eqp8tce2g5d, changeServiceDeployProvIfSignalDegradePeriod=changeServiceDeployProvIfSignalDegradePeriod, currentOtu15minTable=currentOtu15minTable, FspR7FrameFormat=FspR7FrameFormat, controlPlaneOtnDataEntry=controlPlaneOtnDataEntry, eRoadmConfigOpticalSetPoint=eRoadmConfigOpticalSetPoint, currentEthRx15minDiscardedFrames=currentEthRx15minDiscardedFrames, deployProvTunnelOtnCapRowStatus=deployProvTunnelOtnCapRowStatus, intervalL2EthRx15minBytesFrames128Rcv=intervalL2EthRx15minBytesFrames128Rcv, crsConnWdmDataCrsType=crsConnWdmDataCrsType, forceDeployProvApsDefaultsRowStatus=forceDeployProvApsDefaultsRowStatus, intervalFarEndPhysPerfOpticalOutputPwr1weekEntry=intervalFarEndPhysPerfOpticalOutputPwr1weekEntry, changeServiceDeployProvIfDefaultsBip=changeServiceDeployProvIfDefaultsBip, forceDeployProvApsWaitToRestore=forceDeployProvApsWaitToRestore, deployProvPppIpTable=deployProvPppIpTable, controlPlaneDeployProv=controlPlaneDeployProv, FspR7AseTabOprCaps=FspR7AseTabOprCaps, deployProvLogicalCpIfCapIpType=deployProvLogicalCpIfCapIpType, dcnOspfAreaIfListSize=dcnOspfAreaIfListSize, shelfInfoUpgradePorts=shelfInfoUpgradePorts, intervalSonetLine15minTimeStamp=intervalSonetLine15minTimeStamp, deployProvPlugDefaultsForceDestroy=deployProvPlugDefaultsForceDestroy, deployProvControlPlaneWdmDefaultsRaConfigFlag=deployProvControlPlaneWdmDefaultsRaConfigFlag, changeServiceDeployProvIfCapTimModeOduTcmC=changeServiceDeployProvIfCapTimModeOduTcmC, deployProvControlPlaneWdmCapPcTraceDetail=deployProvControlPlaneWdmCapPcTraceDetail, FspR7ResetRfi=FspR7ResetRfi, alarmXfpDecisionThresSetFailed=alarmXfpDecisionThresSetFailed)
