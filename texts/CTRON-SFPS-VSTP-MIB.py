#
# PySNMP MIB module CTRON-SFPS-VSTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTRON-SFPS-VSTP-MIB
# Produced by pysmi-1.1.12 at Mon Jul  1 09:19:22 2024
# On host fv-az735-465 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
vlanSpanningTreePort, vlanSpanningTreeSwitch = mibBuilder.importSymbols("CTRON-SFPS-INCLUDE-MIB", "vlanSpanningTreePort", "vlanSpanningTreeSwitch")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Integer32, iso, Counter64, TimeTicks, ModuleIdentity, NotificationType, Unsigned32, Bits, Gauge32, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "iso", "Counter64", "TimeTicks", "ModuleIdentity", "NotificationType", "Unsigned32", "Bits", "Gauge32", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class SfpsSwitchPort(Integer32):
    pass

class HexInteger(Integer32):
    pass

vlanSpanningTreePortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 1, 1), )
if mibBuilder.loadTexts: vlanSpanningTreePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreePortTable.setDescription('This table contains information used by the spanning tree algorithm\n                 for each port instance.')
vlanSpanningTreePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 1, 1, 1), ).setIndexNames((0, "CTRON-SFPS-VSTP-MIB", "vlanSpanningTreePortPortNumber"))
if mibBuilder.loadTexts: vlanSpanningTreePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreePortEntry.setDescription('Each entry contains spanning tree information for that port instance.')
vlanSpanningTreePortPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 1, 1, 1, 1), SfpsSwitchPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpanningTreePortPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreePortPortNumber.setDescription('The port number of the port instance. This value is also the \n                 primary index for the table.')
vlanSpanningTreePortPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("blocking", 3), ("listening", 4), ("learning", 5), ("forwarding", 6), ("broken", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpanningTreePortPortState.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreePortPortState.setDescription('The spanning tree port state for this port.')
vlanSpanningTreePortPortIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 1, 1, 1, 3), HexInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpanningTreePortPortIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreePortPortIdentifier.setDescription('The spanning tree port identifier for this port.')
vlanSpanningTreePortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSpanningTreePortPathCost.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreePortPathCost.setDescription('The spanning tree path cost for this port.')
vlanSpanningTreePortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpanningTreePortDesignatedRoot.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreePortDesignatedRoot.setDescription('The spanning tree designated root for this port.')
vlanSpanningTreePortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpanningTreePortDesignatedCost.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreePortDesignatedCost.setDescription('The spanning tree designated cost for this port.')
vlanSpanningTreePortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 1, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpanningTreePortDesignatedBridge.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreePortDesignatedBridge.setDescription('The spanning tree designated bridge for this port.')
vlanSpanningTreePortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 1, 1, 1, 8), HexInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpanningTreePortDesignatedPort.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreePortDesignatedPort.setDescription('The spanning tree designated port.')
vlanSpanningTreeSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 2, 1), )
if mibBuilder.loadTexts: vlanSpanningTreeSwitchTable.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreeSwitchTable.setDescription('This table contains information used by the spanning tree\n                 algorithm specific to the switch on which the algorithm is\n                 running.')
vlanSpanningTreeSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 2, 1, 1), ).setIndexNames((0, "CTRON-SFPS-VSTP-MIB", "vlanSpanningTreeSwitchIndex"))
if mibBuilder.loadTexts: vlanSpanningTreeSwitchEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreeSwitchEntry.setDescription('Each entry specifies switch specific spanning tree information.')
vlanSpanningTreeSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpanningTreeSwitchIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreeSwitchIndex.setDescription('Table index value.')
vlanSpanningTreeSwitchBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 2, 1, 1, 2), HexInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSpanningTreeSwitchBridgePriority.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreeSwitchBridgePriority.setDescription('Spanning tree designated bridge priority.')
vlanSpanningTreeSwitchBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpanningTreeSwitchBridgeId.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreeSwitchBridgeId.setDescription('Spanning tree bridge id value.')
vlanSpanningTreeSwitchDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpanningTreeSwitchDesignatedRoot.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreeSwitchDesignatedRoot.setDescription('Spanning tree designated root value.')
vlanSpanningTreeSwitchRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpanningTreeSwitchRootPathCost.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreeSwitchRootPathCost.setDescription('Spanning tree root path cost.')
vlanSpanningTreeSwitchOperTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpanningTreeSwitchOperTime.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreeSwitchOperTime.setDescription('Spanning tree operational time.')
vlanSpanningTreeSwitchRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 2, 1, 1, 7), SfpsSwitchPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpanningTreeSwitchRootPort.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreeSwitchRootPort.setDescription('Spanning tree root port.')
vlanSpanningTreeSwitchRootPortTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 2, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpanningTreeSwitchRootPortTime.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreeSwitchRootPortTime.setDescription('Spanning tree root port time.')
vlanSpanningTreeSwitchPrevRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 2, 1, 1, 9), SfpsSwitchPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpanningTreeSwitchPrevRootPort.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreeSwitchPrevRootPort.setDescription('Spanning tree previous root port.')
vlanSpanningTreeSwitchPrevRootPortTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 2, 1, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpanningTreeSwitchPrevRootPortTime.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreeSwitchPrevRootPortTime.setDescription('Spanning tree previous root port time.')
vlanSpanningTreeSwitchMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSpanningTreeSwitchMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreeSwitchMaxAge.setDescription('Spanning tree max age value.')
vlanSpanningTreeSwitchHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSpanningTreeSwitchHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreeSwitchHelloTime.setDescription('Spanning tree hello time value.')
vlanSpanningTreeSwitchForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 2, 8, 2, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSpanningTreeSwitchForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: vlanSpanningTreeSwitchForwardDelay.setDescription('Spanning tree forward delay value.')
mibBuilder.exportSymbols("CTRON-SFPS-VSTP-MIB", vlanSpanningTreeSwitchEntry=vlanSpanningTreeSwitchEntry, vlanSpanningTreeSwitchRootPortTime=vlanSpanningTreeSwitchRootPortTime, HexInteger=HexInteger, vlanSpanningTreeSwitchOperTime=vlanSpanningTreeSwitchOperTime, vlanSpanningTreePortDesignatedCost=vlanSpanningTreePortDesignatedCost, vlanSpanningTreeSwitchBridgePriority=vlanSpanningTreeSwitchBridgePriority, vlanSpanningTreeSwitchBridgeId=vlanSpanningTreeSwitchBridgeId, vlanSpanningTreeSwitchMaxAge=vlanSpanningTreeSwitchMaxAge, vlanSpanningTreePortTable=vlanSpanningTreePortTable, vlanSpanningTreeSwitchHelloTime=vlanSpanningTreeSwitchHelloTime, vlanSpanningTreePortDesignatedRoot=vlanSpanningTreePortDesignatedRoot, SfpsSwitchPort=SfpsSwitchPort, vlanSpanningTreePortPortIdentifier=vlanSpanningTreePortPortIdentifier, vlanSpanningTreeSwitchPrevRootPortTime=vlanSpanningTreeSwitchPrevRootPortTime, vlanSpanningTreeSwitchForwardDelay=vlanSpanningTreeSwitchForwardDelay, vlanSpanningTreeSwitchPrevRootPort=vlanSpanningTreeSwitchPrevRootPort, vlanSpanningTreePortPortNumber=vlanSpanningTreePortPortNumber, vlanSpanningTreePortEntry=vlanSpanningTreePortEntry, vlanSpanningTreePortPathCost=vlanSpanningTreePortPathCost, vlanSpanningTreePortDesignatedPort=vlanSpanningTreePortDesignatedPort, vlanSpanningTreeSwitchDesignatedRoot=vlanSpanningTreeSwitchDesignatedRoot, vlanSpanningTreeSwitchRootPort=vlanSpanningTreeSwitchRootPort, vlanSpanningTreeSwitchIndex=vlanSpanningTreeSwitchIndex, vlanSpanningTreeSwitchTable=vlanSpanningTreeSwitchTable, vlanSpanningTreeSwitchRootPathCost=vlanSpanningTreeSwitchRootPathCost, vlanSpanningTreePortPortState=vlanSpanningTreePortPortState, vlanSpanningTreePortDesignatedBridge=vlanSpanningTreePortDesignatedBridge)
