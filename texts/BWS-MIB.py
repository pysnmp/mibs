#
# PySNMP MIB module BWS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/barracuda/BWS-MIB
# Produced by pysmi-1.1.12 at Tue May 28 11:44:19 2024
# On host fv-az665-912 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
barracuda, = mibBuilder.importSymbols("BARRACUDA-REF", "barracuda")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Counter64, Integer32, NotificationType, ObjectIdentity, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, TimeTicks, Gauge32, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "Integer32", "NotificationType", "ObjectIdentity", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "TimeTicks", "Gauge32", "IpAddress", "MibIdentifier")
TextualConvention, TimeStamp, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "DisplayString")
bws = ModuleIdentity((1, 3, 6, 1, 4, 1, 20632, 8))
bws.setRevisions(('2019-02-12 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bws.setRevisionsDescriptions(('Updated: Added bwsStats object',))
if mibBuilder.loadTexts: bws.setLastUpdated('201902121200Z')
if mibBuilder.loadTexts: bws.setOrganization('Barracuda Networks, Inc.')
if mibBuilder.loadTexts: bws.setContactInfo('\n            Barracuda Networks Inc.\n            3175 S. Winchester Blvd.\n            Campbell, CA 95008 \n            ')
if mibBuilder.loadTexts: bws.setDescription('\n            Barracuda Website Firewall MIB.\n            Provides:\n                Objects:\n                    * 1.3.6.1.4.1.20632.8.2 -- totalApplications\n                    * 1.3.6.1.4.1.20632.8.3 -- totalServers\n                    * 1.3.6.1.4.1.20632.8.4 -- totalAttacks\n                    * 1.3.6.1.4.1.20632.8.5 -- activeApplications\n                    * 1.3.6.1.4.1.20632.8.6 -- activeServers\n                    * 1.3.6.1.4.1.20632.8.7 -- bwsMessageRsvd\n                    * 1.3.6.1.4.1.20632.8.8 -- systemLoad\n                    * 1.3.6.1.4.1.20632.8.9 -- cpuFanSpeed\n                    * 1.3.6.1.4.1.20632.8.10 -- systemFanSpeed\n                    * 1.3.6.1.4.1.20632.8.11 -- cpuTemperature\n                    * 1.3.6.1.4.1.20632.8.12 -- firmwareStorage\n                    * 1.3.6.1.4.1.20632.8.13 -- logStorage\n                    * 1.3.6.1.4.1.20632.8.14 -- highAvailabilityStatus\n                    * 1.3.6.1.4.1.20632.8.15 -- operationalMode\n                    * 1.3.6.1.4.1.20632.8.16 -- dataPathStatus\n                    * 1.3.6.1.4.1.20632.8.17 -- linkStatus\n                    * 1.3.6.1.4.1.20632.8.18 -- vipStatus\n                    * 1.3.6.1.4.1.20632.8.19 -- memUtilization\n                    * 1.3.6.1.4.1.20632.8.20 -- cpuUtilization\n                    * 1.3.6.1.4.1.20632.8.21 -- totalBandwidth\n                    * 1.3.6.1.4.1.20632.8.22 -- uptime\n                    * 1.3.6.1.4.1.20632.8.23 -- totalMem\n                    * 1.3.6.1.4.1.20632.8.24 -- freeMem\n                    * 1.3.6.1.4.1.20632.8.25 -- currentFirmwareVersion\n                    * 1.3.6.1.4.1.20632.8.26 -- virusDefUpdates\n                    * 1.3.6.1.4.1.20632.8.27 -- securityDefUpdates\n                    * 1.3.6.1.4.1.20632.8.28 -- systemSerialNumber\n                Traps:\n                    * 1.3.6.1.4.1.20632.8.1.3 -- tempCritical\n                    * 1.3.6.1.4.1.20632.8.1.4 -- tempHigh\n                    * 1.3.6.1.4.1.20632.8.1.5 -- systemFailOver\n                    * 1.3.6.1.4.1.20632.8.1.6 -- switchingToMaintMode\n                    * 1.3.6.1.4.1.20632.8.1.7 -- fanDead\n                    * 1.3.6.1.4.1.20632.8.1.8 -- dataPortLinkDown\n                    * 1.3.6.1.4.1.20632.8.1.9 -- serverDown\n                    * 1.3.6.1.4.1.20632.8.1.10 -- peerDown\n                    * 1.3.6.1.4.1.20632.8.1.11 -- dataPortLinkUp\n                    * 1.3.6.1.4.1.20632.8.1.12 -- serverUp\n                    * 1.3.6.1.4.1.20632.8.1.13 -- peerUp\n                    * 1.3.6.1.4.1.20632.8.1.14 -- switchingToBypassMode \n                    * 1.3.6.1.4.1.20632.8.1.15 -- switchingToInlineMode \n                    * 1.3.6.1.4.1.20632.8.1.16 -- sharedSecretKeyAboutToExpire\n                    * 1.3.6.1.4.1.20632.8.1.17 -- sharedSecretKeyExpired\n                    * 1.3.6.1.4.1.20632.8.1.18 -- firmwareStorageHigh\n                    * 1.3.6.1.4.1.20632.8.1.19 -- logStorageHigh\n                    * 1.3.6.1.4.1.20632.8.1.20 -- raidDegrading\n                    * 1.3.6.1.4.1.20632.8.1.21 -- energizeUpdateExpire\n                    * 1.3.6.1.4.1.20632.8.1.22 -- firmwareUpdateAvailable\n                    * 1.3.6.1.4.1.20632.8.1.24 -- attackDefinitionUpdateAvailable\n                    * 1.3.6.1.4.1.20632.8.1.25 -- processCountHigh\n                    * 1.3.6.1.4.1.20632.8.1.26 -- memoryUsageHigh\n                    * 1.3.6.1.4.1.20632.8.1.27 -- newAttackDefinitionInstalled\n                    * 1.3.6.1.4.1.20632.8.1.28 -- systemFailure\n            ')
bwstraps = MibIdentifier((1, 3, 6, 1, 4, 1, 20632, 8, 1))
bwsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 20632, 8, 50))
bwsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 20632, 8, 51))
bwsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 20632, 8, 51, 1))
bwsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 20632, 8, 51, 2))
totalApplications = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalApplications.setStatus('current')
if mibBuilder.loadTexts: totalApplications.setDescription('Total applications configured.')
totalServers = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalServers.setStatus('current')
if mibBuilder.loadTexts: totalServers.setDescription('Total servers configured.')
totalAttacks = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalAttacks.setStatus('current')
if mibBuilder.loadTexts: totalAttacks.setDescription('Count of attacks in last one hour')
activeApplications = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeApplications.setStatus('current')
if mibBuilder.loadTexts: activeApplications.setDescription('Total Applications configured whose status is on')
activeServers = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeServers.setStatus('current')
if mibBuilder.loadTexts: activeServers.setDescription('Total Servers whose operational status is in-service')
bwsMessage = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 7), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bwsMessage.setStatus('current')
if mibBuilder.loadTexts: bwsMessage.setDescription('System Log Message.')
systemLoad = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemLoad.setStatus('current')
if mibBuilder.loadTexts: systemLoad.setDescription('System Load in percentage.')
cpuFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFanSpeed.setStatus('current')
if mibBuilder.loadTexts: cpuFanSpeed.setDescription('Cpu Fan Speen in RPM.')
systemFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFanSpeed.setStatus('current')
if mibBuilder.loadTexts: systemFanSpeed.setDescription('System Fan Speen in RPM.')
cpuTemperature = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTemperature.setStatus('current')
if mibBuilder.loadTexts: cpuTemperature.setDescription('Cpu Temperature in degree Celsius.')
firmwareStorage = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareStorage.setStatus('current')
if mibBuilder.loadTexts: firmwareStorage.setDescription('Firware Storage in percentage.')
logStorage = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logStorage.setStatus('current')
if mibBuilder.loadTexts: logStorage.setDescription('Log Storage in percentage.')
highAvailabilityStatus = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: highAvailabilityStatus.setStatus('current')
if mibBuilder.loadTexts: highAvailabilityStatus.setDescription('High Availability Status.')
operationalMode = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalMode.setStatus('current')
if mibBuilder.loadTexts: operationalMode.setDescription('Operation Mode.')
dataPathStatus = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPathStatus.setStatus('current')
if mibBuilder.loadTexts: dataPathStatus.setDescription('Data Path Status.')
linkStatus = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatus.setStatus('current')
if mibBuilder.loadTexts: linkStatus.setDescription('Link Status.')
vipStatus = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vipStatus.setStatus('current')
if mibBuilder.loadTexts: vipStatus.setDescription('VIP Status.')
memUtilization = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memUtilization.setStatus('current')
if mibBuilder.loadTexts: memUtilization.setDescription('Memory Utilization.')
cpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilization.setStatus('current')
if mibBuilder.loadTexts: cpuUtilization.setDescription('CPU Utilization .')
totalBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBandwidth.setStatus('current')
if mibBuilder.loadTexts: totalBandwidth.setDescription('Total Bandwidth .')
uptime = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uptime.setStatus('current')
if mibBuilder.loadTexts: uptime.setDescription('Uptime.')
totalMem = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalMem.setStatus('current')
if mibBuilder.loadTexts: totalMem.setDescription('Total Memory.')
freeMem = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeMem.setStatus('current')
if mibBuilder.loadTexts: freeMem.setDescription('Free Memory.')
currentFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: currentFirmwareVersion.setDescription('Current firmware version running in the system(WAF)')
virusDefUpdates = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virusDefUpdates.setStatus('current')
if mibBuilder.loadTexts: virusDefUpdates.setDescription('This management object shall contain the current version of the\n                      virus definitions and the date and time when the last virus definition\n                      got updated.')
securityDefUpdates = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityDefUpdates.setStatus('current')
if mibBuilder.loadTexts: securityDefUpdates.setDescription('This management object shall contain the current version of the\n                       security definitions and the date and time when the last security\n                       definitions got updated.')
systemSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 20632, 8, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSerialNumber.setStatus('current')
if mibBuilder.loadTexts: systemSerialNumber.setDescription('This management object shall contain the system serial number')
bwsHttpProxyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1), )
if mibBuilder.loadTexts: bwsHttpProxyStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwsHttpProxyStatsTable.setDescription('A table of HTTP proxy stats. ')
bwsHttpProxyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1), ).setIndexNames((0, "BWS-MIB", "httpProxyAddressType"), (0, "BWS-MIB", "httpProxyAddress"), (0, "BWS-MIB", "httpProxyPort"))
if mibBuilder.loadTexts: bwsHttpProxyStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwsHttpProxyStatsEntry.setDescription('HTTP proxy stats entry. ')
httpProxyAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: httpProxyAddressType.setReference('RFC 4001')
if mibBuilder.loadTexts: httpProxyAddressType.setStatus('current')
if mibBuilder.loadTexts: httpProxyAddressType.setDescription('The type of the http Proxy address, as defined\n            in the InetAddress MIB. ')
httpProxyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: httpProxyAddress.setStatus('current')
if mibBuilder.loadTexts: httpProxyAddress.setDescription('The http Proxy address. ')
httpProxyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: httpProxyPort.setStatus('current')
if mibBuilder.loadTexts: httpProxyPort.setDescription('The port on which http Proxy is listening. ')
httpProxyActiveConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyActiveConn.setStatus('current')
if mibBuilder.loadTexts: httpProxyActiveConn.setDescription('Number of active connections. ')
httpProxyTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyTotalConn.setStatus('current')
if mibBuilder.loadTexts: httpProxyTotalConn.setDescription('Total number of connections. ')
httpProxyTotalReq = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyTotalReq.setStatus('current')
if mibBuilder.loadTexts: httpProxyTotalReq.setDescription('Total number of requests. ')
httpProxyServerReq = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyServerReq.setStatus('current')
if mibBuilder.loadTexts: httpProxyServerReq.setDescription('Total number of server requests. ')
httpProxyServerErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyServerErr.setStatus('current')
if mibBuilder.loadTexts: httpProxyServerErr.setDescription('Total number of server errors. ')
httpProxyClientAbrt = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyClientAbrt.setStatus('current')
if mibBuilder.loadTexts: httpProxyClientAbrt.setDescription('Total number of client aborts. ')
httpProxyServerAbrt = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyServerAbrt.setStatus('current')
if mibBuilder.loadTexts: httpProxyServerAbrt.setDescription('Total number of server aborts. ')
httpProxySessionTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxySessionTimeOut.setStatus('current')
if mibBuilder.loadTexts: httpProxySessionTimeOut.setDescription('Total number of session timeouts. ')
httpProxyParseErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyParseErr.setStatus('current')
if mibBuilder.loadTexts: httpProxyParseErr.setDescription('Total number of parse errors. ')
httpProxyUnknownRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyUnknownRsp.setStatus('current')
if mibBuilder.loadTexts: httpProxyUnknownRsp.setDescription('Total number of unknown responses. ')
httpProxyInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyInBytes.setStatus('current')
if mibBuilder.loadTexts: httpProxyInBytes.setDescription('Total number of In octets. ')
httpProxyOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyOutBytes.setStatus('current')
if mibBuilder.loadTexts: httpProxyOutBytes.setDescription('Total number of Out octets. ')
httpProxyWAFBlockedIntrusions = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyWAFBlockedIntrusions.setStatus('current')
if mibBuilder.loadTexts: httpProxyWAFBlockedIntrusions.setDescription('Total number of WAF blocked intrusions. ')
httpProxyWAFMonitoredIntrusions = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyWAFMonitoredIntrusions.setStatus('current')
if mibBuilder.loadTexts: httpProxyWAFMonitoredIntrusions.setDescription('Total number of WAF monitored intrusions. ')
httpProxyWAFWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyWAFWarnings.setStatus('current')
if mibBuilder.loadTexts: httpProxyWAFWarnings.setDescription('Total number of WAF warnings. ')
bwsSslProxyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2), )
if mibBuilder.loadTexts: bwsSslProxyStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwsSslProxyStatsTable.setDescription('A table of SSL stats. ')
bwsSslProxyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1), ).setIndexNames((0, "BWS-MIB", "sslProxyAddressType"), (0, "BWS-MIB", "sslProxyAddress"), (0, "BWS-MIB", "sslProxyPort"))
if mibBuilder.loadTexts: bwsSslProxyStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwsSslProxyStatsEntry.setDescription('SSL stats entry. ')
sslProxyAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: sslProxyAddressType.setReference('RFC 4001')
if mibBuilder.loadTexts: sslProxyAddressType.setStatus('current')
if mibBuilder.loadTexts: sslProxyAddressType.setDescription('The type of the SSL Proxy address, as defined\n            in the InetAddress MIB. ')
sslProxyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: sslProxyAddress.setStatus('current')
if mibBuilder.loadTexts: sslProxyAddress.setDescription('The SSL Proxy address. ')
sslProxyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: sslProxyPort.setStatus('current')
if mibBuilder.loadTexts: sslProxyPort.setDescription('The port on which SSL Proxy is listening. ')
sslProxyActiveConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyActiveConn.setStatus('current')
if mibBuilder.loadTexts: sslProxyActiveConn.setDescription('Number of active connections. ')
sslProxyFullHandshakes = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyFullHandshakes.setStatus('current')
if mibBuilder.loadTexts: sslProxyFullHandshakes.setDescription('Number of full handshakes. ')
sslProxyResumptionHandshakes = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyResumptionHandshakes.setStatus('current')
if mibBuilder.loadTexts: sslProxyResumptionHandshakes.setDescription('Number of resumption handshakes. ')
sslProxyHandshakeAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyHandshakeAttempts.setStatus('current')
if mibBuilder.loadTexts: sslProxyHandshakeAttempts.setDescription('Number of handshake attempts. ')
sslProxyCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyCacheHits.setStatus('current')
if mibBuilder.loadTexts: sslProxyCacheHits.setDescription('Number of cache hits. ')
sslProxyCacheMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyCacheMiss.setStatus('current')
if mibBuilder.loadTexts: sslProxyCacheMiss.setDescription('Number of cache hits. ')
sslProxyCacheTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyCacheTimeouts.setStatus('current')
if mibBuilder.loadTexts: sslProxyCacheTimeouts.setDescription('Number of cache hits. ')
sslProxyErrPms = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyErrPms.setStatus('current')
if mibBuilder.loadTexts: sslProxyErrPms.setDescription('Number of PMC errors. ')
sslProxyAuthBadCertErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyAuthBadCertErr.setStatus('current')
if mibBuilder.loadTexts: sslProxyAuthBadCertErr.setDescription('Number of bad certificates. ')
sslProxyAuthBadCNErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyAuthBadCNErr.setStatus('current')
if mibBuilder.loadTexts: sslProxyAuthBadCNErr.setDescription('Number of bad CN errors. ')
sslProxyBadDNCErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyBadDNCErr.setStatus('current')
if mibBuilder.loadTexts: sslProxyBadDNCErr.setDescription('Number of bad DNC errors. ')
sslProxyBadCRLErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyBadCRLErr.setStatus('current')
if mibBuilder.loadTexts: sslProxyBadCRLErr.setDescription('Number of bad CRL errors. ')
sslProxyInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyInBytes.setStatus('current')
if mibBuilder.loadTexts: sslProxyInBytes.setDescription('Number of IN octets. ')
sslProxyOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyOutBytes.setStatus('current')
if mibBuilder.loadTexts: sslProxyOutBytes.setDescription('Number of OUT octets. ')
sslProxyTotalReq = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyTotalReq.setStatus('current')
if mibBuilder.loadTexts: sslProxyTotalReq.setDescription('Total number of requests. ')
sslProxyTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyTotalConn.setStatus('current')
if mibBuilder.loadTexts: sslProxyTotalConn.setDescription('Total number of connections. ')
sslProxyCurrentConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslProxyCurrentConn.setStatus('current')
if mibBuilder.loadTexts: sslProxyCurrentConn.setDescription('Current number of connections. ')
bwsCompressionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 3), )
if mibBuilder.loadTexts: bwsCompressionStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwsCompressionStatsTable.setDescription('A table of compression stats. ')
bwsCompressionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 3, 1), ).setIndexNames((0, "BWS-MIB", "webCmprProtocol"), (0, "BWS-MIB", "webCmprAddressType"), (0, "BWS-MIB", "webCmprAddress"), (0, "BWS-MIB", "webCmprPort"))
if mibBuilder.loadTexts: bwsCompressionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwsCompressionStatsEntry.setDescription('Compression stats entry. ')
webCmprProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: webCmprProtocol.setStatus('current')
if mibBuilder.loadTexts: webCmprProtocol.setDescription('The protocol used (https or https).')
webCmprAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 3, 1, 2), InetAddressType())
if mibBuilder.loadTexts: webCmprAddressType.setReference('RFC 4001')
if mibBuilder.loadTexts: webCmprAddressType.setStatus('current')
if mibBuilder.loadTexts: webCmprAddressType.setDescription('The type of the Proxy address, as defined\n            in the InetAddress MIB. ')
webCmprAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 3, 1, 3), InetAddress())
if mibBuilder.loadTexts: webCmprAddress.setStatus('current')
if mibBuilder.loadTexts: webCmprAddress.setDescription('The Proxy address. ')
webCmprPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 3, 1, 4), InetPortNumber())
if mibBuilder.loadTexts: webCmprPort.setStatus('current')
if mibBuilder.loadTexts: webCmprPort.setDescription('The port on which Proxy is listening. ')
webCmprNoOfReqCompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCmprNoOfReqCompressed.setStatus('current')
if mibBuilder.loadTexts: webCmprNoOfReqCompressed.setDescription('Number of requests that got compressed. ')
webCmprCompressibleDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCmprCompressibleDataSize.setStatus('current')
if mibBuilder.loadTexts: webCmprCompressibleDataSize.setDescription('Compressible data size. ')
webCmprCompressedDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCmprCompressedDataSize.setStatus('current')
if mibBuilder.loadTexts: webCmprCompressedDataSize.setDescription('Compressed data size. ')
bwsCacheStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4), )
if mibBuilder.loadTexts: bwsCacheStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwsCacheStatsTable.setDescription('A table of cache stats. ')
bwsCacheStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1), ).setIndexNames((0, "BWS-MIB", "webCacheProtocol"), (0, "BWS-MIB", "webCacheAddressType"), (0, "BWS-MIB", "webCacheAddress"), (0, "BWS-MIB", "webCachePort"))
if mibBuilder.loadTexts: bwsCacheStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwsCacheStatsEntry.setDescription('Cashe stats entry. ')
webCacheProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: webCacheProtocol.setStatus('current')
if mibBuilder.loadTexts: webCacheProtocol.setDescription('The protocol used (https or https).')
webCacheAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1, 2), InetAddressType())
if mibBuilder.loadTexts: webCacheAddressType.setReference('RFC 4001')
if mibBuilder.loadTexts: webCacheAddressType.setStatus('current')
if mibBuilder.loadTexts: webCacheAddressType.setDescription('The type of the Proxy address, as defined\n            in the InetAddress MIB. ')
webCacheAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1, 3), InetAddress())
if mibBuilder.loadTexts: webCacheAddress.setStatus('current')
if mibBuilder.loadTexts: webCacheAddress.setDescription('The Proxy address. ')
webCachePort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1, 4), InetPortNumber())
if mibBuilder.loadTexts: webCachePort.setStatus('current')
if mibBuilder.loadTexts: webCachePort.setDescription('The port on which Proxy is listening. ')
webCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheHits.setStatus('current')
if mibBuilder.loadTexts: webCacheHits.setDescription('Number of hits. ')
webCacheMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheMiss.setStatus('current')
if mibBuilder.loadTexts: webCacheMiss.setDescription('Number of miss. ')
webCacheStale = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheStale.setStatus('current')
if mibBuilder.loadTexts: webCacheStale.setDescription('Number of stales. ')
webCacheCacheableRes = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheCacheableRes.setStatus('current')
if mibBuilder.loadTexts: webCacheCacheableRes.setDescription('Number of cacheable responses. ')
webCacheReq = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheReq.setStatus('current')
if mibBuilder.loadTexts: webCacheReq.setDescription('Number of requests. ')
webCacheCachedObjects = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheCachedObjects.setStatus('current')
if mibBuilder.loadTexts: webCacheCachedObjects.setDescription('Number of cached objects. ')
webCacheLongHdrs = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheLongHdrs.setStatus('current')
if mibBuilder.loadTexts: webCacheLongHdrs.setDescription('Number of long headers. ')
webCacheBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheBytesOut.setStatus('current')
if mibBuilder.loadTexts: webCacheBytesOut.setDescription('Number of out bytes. ')
bwsHttpSrvrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5), )
if mibBuilder.loadTexts: bwsHttpSrvrStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwsHttpSrvrStatsTable.setDescription('A table of HTTP server stats. ')
bwsHttpSrvrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1), ).setIndexNames((0, "BWS-MIB", "httpSrvrSrvcAddressType"), (0, "BWS-MIB", "httpSrvrSrvcAddress"), (0, "BWS-MIB", "httpSrvrSrvcPort"), (0, "BWS-MIB", "httpSrvrAddressType"), (0, "BWS-MIB", "httpSrvrAddress"), (0, "BWS-MIB", "httpSrvrPort"))
if mibBuilder.loadTexts: bwsHttpSrvrStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwsHttpSrvrStatsEntry.setDescription('HTTP Server stats entry. ')
httpSrvrSrvcAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 1), InetAddressType())
if mibBuilder.loadTexts: httpSrvrSrvcAddressType.setReference('RFC 4001')
if mibBuilder.loadTexts: httpSrvrSrvcAddressType.setStatus('current')
if mibBuilder.loadTexts: httpSrvrSrvcAddressType.setDescription('The type of the servse address, as defined\n            in the InetAddress MIB. ')
httpSrvrSrvcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 2), InetAddress())
if mibBuilder.loadTexts: httpSrvrSrvcAddress.setStatus('current')
if mibBuilder.loadTexts: httpSrvrSrvcAddress.setDescription('The http service address. ')
httpSrvrSrvcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: httpSrvrSrvcPort.setStatus('current')
if mibBuilder.loadTexts: httpSrvrSrvcPort.setDescription('The port on which http service is listening. ')
httpSrvrAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 4), InetAddressType())
if mibBuilder.loadTexts: httpSrvrAddressType.setReference('RFC 4001')
if mibBuilder.loadTexts: httpSrvrAddressType.setStatus('current')
if mibBuilder.loadTexts: httpSrvrAddressType.setDescription('The type of the server address, as defined\n            in the InetAddress MIB. ')
httpSrvrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 5), InetAddress())
if mibBuilder.loadTexts: httpSrvrAddress.setStatus('current')
if mibBuilder.loadTexts: httpSrvrAddress.setDescription('The http server address. ')
httpSrvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 6), InetPortNumber())
if mibBuilder.loadTexts: httpSrvrPort.setStatus('current')
if mibBuilder.loadTexts: httpSrvrPort.setDescription('The port on which http server is listening. ')
httpSrvrTotReqAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrTotReqAccepted.setStatus('current')
if mibBuilder.loadTexts: httpSrvrTotReqAccepted.setDescription('The total number of request accepted by http servers. ')
httpSrvrTotReqActive = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrTotReqActive.setStatus('current')
if mibBuilder.loadTexts: httpSrvrTotReqActive.setDescription('The total number of active request at servers. ')
httpSrvrTotReqRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrTotReqRejected.setStatus('current')
if mibBuilder.loadTexts: httpSrvrTotReqRejected.setDescription('The total number of request rejected at servers. ')
httpSrvrTotSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrTotSuccess.setStatus('current')
if mibBuilder.loadTexts: httpSrvrTotSuccess.setDescription('The total number of request successfull at servers. ')
httpSrvrTotRefused = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrTotRefused.setStatus('current')
if mibBuilder.loadTexts: httpSrvrTotRefused.setDescription('The total number of request rejected at servers. ')
httpSrvrTotTimedout = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrTotTimedout.setStatus('current')
if mibBuilder.loadTexts: httpSrvrTotTimedout.setDescription('The total number of request timedout at servers. ')
httpSrvrAvgReqPerConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrAvgReqPerConn.setStatus('current')
if mibBuilder.loadTexts: httpSrvrAvgReqPerConn.setDescription('The average number of request per connection at servers. ')
httpSrvrTotResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrTotResponse.setStatus('current')
if mibBuilder.loadTexts: httpSrvrTotResponse.setDescription('The total number of response at servers. ')
httpSrvrAvgResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrAvgResTime.setStatus('current')
if mibBuilder.loadTexts: httpSrvrAvgResTime.setDescription('The average response time at servers. ')
httpSrvrMaxResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrMaxResTime.setStatus('current')
if mibBuilder.loadTexts: httpSrvrMaxResTime.setDescription('The maximum response time at servers. ')
httpSrvrMinResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrMinResTime.setStatus('current')
if mibBuilder.loadTexts: httpSrvrMinResTime.setDescription('The minimum response time at servers. ')
httpSrvrNumReqEnqueue = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrNumReqEnqueue.setStatus('current')
if mibBuilder.loadTexts: httpSrvrNumReqEnqueue.setDescription('The number of enqueued requests. ')
httpSrvrNumFreeConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrNumFreeConn.setStatus('current')
if mibBuilder.loadTexts: httpSrvrNumFreeConn.setDescription('Number of free connections. ')
httpSrvrNumOpeningConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrNumOpeningConn.setStatus('current')
if mibBuilder.loadTexts: httpSrvrNumOpeningConn.setDescription('Number of opening connection . ')
httpSrvrNumConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrNumConn.setStatus('current')
if mibBuilder.loadTexts: httpSrvrNumConn.setDescription('Number of connections . ')
httpSrvrNumIBDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrNumIBDisabled.setStatus('current')
if mibBuilder.loadTexts: httpSrvrNumIBDisabled.setDescription('Number of IB disables . ')
httpSrvrNumOOBDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrNumOOBDisabled.setStatus('current')
if mibBuilder.loadTexts: httpSrvrNumOOBDisabled.setDescription('Number of OOB disables. ')
httpSrvrNumOOBEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrNumOOBEnabled.setStatus('current')
if mibBuilder.loadTexts: httpSrvrNumOOBEnabled.setDescription('Number of OOB enables. ')
httpSrvrLastDisabledTime = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 25), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrLastDisabledTime.setStatus('current')
if mibBuilder.loadTexts: httpSrvrLastDisabledTime.setDescription('Last disabled time at server. ')
httpSrvrState = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrState.setStatus('current')
if mibBuilder.loadTexts: httpSrvrState.setDescription('Server state. ')
httpSrvrInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrInBytes.setStatus('current')
if mibBuilder.loadTexts: httpSrvrInBytes.setDescription('Total IN bytes. ')
httpSrvrOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 5, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpSrvrOutBytes.setStatus('current')
if mibBuilder.loadTexts: httpSrvrOutBytes.setDescription('Total OUT bytes. ')
bwsSslSrvrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6), )
if mibBuilder.loadTexts: bwsSslSrvrStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwsSslSrvrStatsTable.setDescription('A table of Ssl server stats. ')
bwsSslSrvrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1), ).setIndexNames((0, "BWS-MIB", "sslSrvrSrvcAddressType"), (0, "BWS-MIB", "sslSrvrSrvcAddress"), (0, "BWS-MIB", "sslSrvrSrvcPort"), (0, "BWS-MIB", "sslSrvrAddressType"), (0, "BWS-MIB", "sslSrvrAddress"), (0, "BWS-MIB", "sslSrvrPort"))
if mibBuilder.loadTexts: bwsSslSrvrStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwsSslSrvrStatsEntry.setDescription('Ssl Server stats entry. ')
sslSrvrSrvcAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 1), InetAddressType())
if mibBuilder.loadTexts: sslSrvrSrvcAddressType.setReference('RFC 4001')
if mibBuilder.loadTexts: sslSrvrSrvcAddressType.setStatus('current')
if mibBuilder.loadTexts: sslSrvrSrvcAddressType.setDescription('The type of the service address, as defined\n            in the InetAddress MIB. ')
sslSrvrSrvcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 2), InetAddress())
if mibBuilder.loadTexts: sslSrvrSrvcAddress.setStatus('current')
if mibBuilder.loadTexts: sslSrvrSrvcAddress.setDescription('The ssl service address. ')
sslSrvrSrvcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: sslSrvrSrvcPort.setStatus('current')
if mibBuilder.loadTexts: sslSrvrSrvcPort.setDescription('The port on which ssl service is listening. ')
sslSrvrAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 4), InetAddressType())
if mibBuilder.loadTexts: sslSrvrAddressType.setReference('RFC 4001')
if mibBuilder.loadTexts: sslSrvrAddressType.setStatus('current')
if mibBuilder.loadTexts: sslSrvrAddressType.setDescription('The type of the server address, as defined\n            in the InetAddress MIB. ')
sslSrvrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 5), InetAddress())
if mibBuilder.loadTexts: sslSrvrAddress.setStatus('current')
if mibBuilder.loadTexts: sslSrvrAddress.setDescription('The ssl server address. ')
sslSrvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 6), InetPortNumber())
if mibBuilder.loadTexts: sslSrvrPort.setStatus('current')
if mibBuilder.loadTexts: sslSrvrPort.setDescription('The port on which ssl server is listening. ')
sslSrvrTotReqAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrTotReqAccepted.setStatus('current')
if mibBuilder.loadTexts: sslSrvrTotReqAccepted.setDescription('The total number of request accepted by ssl server. ')
sslSrvrTotReqActive = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrTotReqActive.setStatus('current')
if mibBuilder.loadTexts: sslSrvrTotReqActive.setDescription('The total number of active request at server. ')
sslSrvrTotReqRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrTotReqRejected.setStatus('current')
if mibBuilder.loadTexts: sslSrvrTotReqRejected.setDescription('The total number of request rejected at server. ')
sslSrvrTotSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrTotSuccess.setStatus('current')
if mibBuilder.loadTexts: sslSrvrTotSuccess.setDescription('The total number of request successfull at server. ')
sslSrvrTotRefused = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrTotRefused.setStatus('current')
if mibBuilder.loadTexts: sslSrvrTotRefused.setDescription('The total number of request rejected at server. ')
sslSrvrTotTimedout = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrTotTimedout.setStatus('current')
if mibBuilder.loadTexts: sslSrvrTotTimedout.setDescription('The total number of request timedout at server. ')
sslSrvrAvgReqPerConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrAvgReqPerConn.setStatus('current')
if mibBuilder.loadTexts: sslSrvrAvgReqPerConn.setDescription('The average number of request per connection at server. ')
sslSrvrTotResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrTotResponse.setStatus('current')
if mibBuilder.loadTexts: sslSrvrTotResponse.setDescription('The total number of response at server. ')
sslSrvrAvgResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrAvgResTime.setStatus('current')
if mibBuilder.loadTexts: sslSrvrAvgResTime.setDescription('The average response time at server. ')
sslSrvrMaxResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrMaxResTime.setStatus('current')
if mibBuilder.loadTexts: sslSrvrMaxResTime.setDescription('The maximum response time at server. ')
sslSrvrMinResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrMinResTime.setStatus('current')
if mibBuilder.loadTexts: sslSrvrMinResTime.setDescription('The minimum response time at server. ')
sslSrvrNumReqEnqueue = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrNumReqEnqueue.setStatus('current')
if mibBuilder.loadTexts: sslSrvrNumReqEnqueue.setDescription('The number of request enqueued at server. ')
sslSrvrNumFreeConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrNumFreeConn.setStatus('current')
if mibBuilder.loadTexts: sslSrvrNumFreeConn.setDescription('Number of free connection at server. ')
sslSrvrNumOpeningConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrNumOpeningConn.setStatus('current')
if mibBuilder.loadTexts: sslSrvrNumOpeningConn.setDescription('Number of opening connection at server. ')
sslSrvrNumConn = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrNumConn.setStatus('current')
if mibBuilder.loadTexts: sslSrvrNumConn.setDescription('Number of connections at server. ')
sslSrvrNumIBDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrNumIBDisabled.setStatus('current')
if mibBuilder.loadTexts: sslSrvrNumIBDisabled.setDescription('Number of IB disabled at server. ')
sslSrvrNumOOBDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrNumOOBDisabled.setStatus('current')
if mibBuilder.loadTexts: sslSrvrNumOOBDisabled.setDescription('Number of OOB disabled at server. ')
sslSrvrNumOOBEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrNumOOBEnabled.setStatus('current')
if mibBuilder.loadTexts: sslSrvrNumOOBEnabled.setDescription('Number of OOB enabled at server. ')
sslSrvrLastDisabledTime = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 25), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrLastDisabledTime.setStatus('current')
if mibBuilder.loadTexts: sslSrvrLastDisabledTime.setDescription('Last disabled time at server. ')
sslSrvrState = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrState.setStatus('current')
if mibBuilder.loadTexts: sslSrvrState.setDescription('Server state. ')
sslSrvrInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrInBytes.setStatus('current')
if mibBuilder.loadTexts: sslSrvrInBytes.setDescription('Total IN bytes. ')
sslSrvrOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 6, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSrvrOutBytes.setStatus('current')
if mibBuilder.loadTexts: sslSrvrOutBytes.setDescription('Total OUT bytes. ')
bwsIpsReqSrvcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 7), )
if mibBuilder.loadTexts: bwsIpsReqSrvcStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwsIpsReqSrvcStatsTable.setDescription('A table of IPS request service stats. ')
bwsIpsReqSrvcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 7, 1), ).setIndexNames((0, "BWS-MIB", "ipsReqSrvcAddressType"), (0, "BWS-MIB", "ipsReqSrvcAddress"), (0, "BWS-MIB", "ipsReqSrvcPort"))
if mibBuilder.loadTexts: bwsIpsReqSrvcStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwsIpsReqSrvcStatsEntry.setDescription('IPS request service stats entry. ')
ipsReqSrvcAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 7, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipsReqSrvcAddressType.setReference('RFC 4001')
if mibBuilder.loadTexts: ipsReqSrvcAddressType.setStatus('current')
if mibBuilder.loadTexts: ipsReqSrvcAddressType.setDescription('The type of the service address, as defined\n            in the InetAddress MIB. ')
ipsReqSrvcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 7, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipsReqSrvcAddress.setStatus('current')
if mibBuilder.loadTexts: ipsReqSrvcAddress.setDescription('The service address. ')
ipsReqSrvcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 7, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: ipsReqSrvcPort.setStatus('current')
if mibBuilder.loadTexts: ipsReqSrvcPort.setDescription('The port on which ips service is listening. ')
ipsReqSrvcNoOfUrlProfMatched = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsReqSrvcNoOfUrlProfMatched.setStatus('current')
if mibBuilder.loadTexts: ipsReqSrvcNoOfUrlProfMatched.setDescription('Number of URL profiles matched. ')
ipsReqSrvcNoOfAppProfViol = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsReqSrvcNoOfAppProfViol.setStatus('current')
if mibBuilder.loadTexts: ipsReqSrvcNoOfAppProfViol.setDescription('Number of app profile violations. ')
ipsReqSrvcTotProfViol = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 7, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsReqSrvcTotProfViol.setStatus('current')
if mibBuilder.loadTexts: ipsReqSrvcTotProfViol.setDescription('Total number of profile violations. ')
bwsIpsLrnSrvcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8), )
if mibBuilder.loadTexts: bwsIpsLrnSrvcStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwsIpsLrnSrvcStatsTable.setDescription('A table of IPS request service stats. ')
bwsIpsLrnSrvcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8, 1), ).setIndexNames((0, "BWS-MIB", "ipsLrnSrvcAddressType"), (0, "BWS-MIB", "ipsLrnSrvcAddress"), (0, "BWS-MIB", "ipsLrnSrvcPort"))
if mibBuilder.loadTexts: bwsIpsLrnSrvcStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwsIpsLrnSrvcStatsEntry.setDescription('IPS request service stats entry. ')
ipsLrnSrvcAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipsLrnSrvcAddressType.setReference('RFC 4001')
if mibBuilder.loadTexts: ipsLrnSrvcAddressType.setStatus('current')
if mibBuilder.loadTexts: ipsLrnSrvcAddressType.setDescription('The type of the service address, as defined\n            in the InetAddress MIB. ')
ipsLrnSrvcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipsLrnSrvcAddress.setStatus('current')
if mibBuilder.loadTexts: ipsLrnSrvcAddress.setDescription('The service address. ')
ipsLrnSrvcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: ipsLrnSrvcPort.setStatus('current')
if mibBuilder.loadTexts: ipsLrnSrvcPort.setDescription('The port on which ips service is listening. ')
ipsLrnSrvcUpdatesByReq = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsLrnSrvcUpdatesByReq.setStatus('current')
if mibBuilder.loadTexts: ipsLrnSrvcUpdatesByReq.setDescription('Number of updated by requests. ')
ipsLrnSrvcUpdatesByRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsLrnSrvcUpdatesByRsp.setStatus('current')
if mibBuilder.loadTexts: ipsLrnSrvcUpdatesByRsp.setDescription('Number of updated by response. ')
ipsLrnSrvcTotUpdatesByReq = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsLrnSrvcTotUpdatesByReq.setStatus('current')
if mibBuilder.loadTexts: ipsLrnSrvcTotUpdatesByReq.setDescription('Total number of updated by requests. ')
ipsLrnSrvcTotUpdatesByRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsLrnSrvcTotUpdatesByRsp.setStatus('current')
if mibBuilder.loadTexts: ipsLrnSrvcTotUpdatesByRsp.setDescription('Total number of updated by response. ')
ipsLrnSrvcTotUrlUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsLrnSrvcTotUrlUpdated.setStatus('current')
if mibBuilder.loadTexts: ipsLrnSrvcTotUrlUpdated.setDescription('Total number URL updated. ')
ipsLrnSrvcTotParamsLearned = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsLrnSrvcTotParamsLearned.setStatus('current')
if mibBuilder.loadTexts: ipsLrnSrvcTotParamsLearned.setDescription('Total number parameters learned. ')
ipsLrnSrvcTimeLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsLrnSrvcTimeLastUpdated.setStatus('current')
if mibBuilder.loadTexts: ipsLrnSrvcTimeLastUpdated.setDescription('Time at which last update was done. ')
ipsLrnSrvcTimeLocked = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 8, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsLrnSrvcTimeLocked.setStatus('current')
if mibBuilder.loadTexts: ipsLrnSrvcTimeLocked.setDescription('Time at which profile was locked. ')
bwsIpsReqLimitStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9), )
if mibBuilder.loadTexts: bwsIpsReqLimitStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwsIpsReqLimitStatsTable.setDescription('A table of IPS request limit stats. ')
bwsIpsReqLimitStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9, 1), ).setIndexNames((0, "BWS-MIB", "ipsReqLimitAddressType"), (0, "BWS-MIB", "ipsReqLimitAddress"), (0, "BWS-MIB", "ipsReqLimitPort"))
if mibBuilder.loadTexts: bwsIpsReqLimitStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwsIpsReqLimitStatsEntry.setDescription('IPS request limit stats entry. ')
ipsReqLimitAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipsReqLimitAddressType.setReference('RFC 4001')
if mibBuilder.loadTexts: ipsReqLimitAddressType.setStatus('current')
if mibBuilder.loadTexts: ipsReqLimitAddressType.setDescription('The type of the service address, as defined\n            in the InetAddress MIB. ')
ipsReqLimitAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipsReqLimitAddress.setStatus('current')
if mibBuilder.loadTexts: ipsReqLimitAddress.setDescription('The service address. ')
ipsReqLimitPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: ipsReqLimitPort.setStatus('current')
if mibBuilder.loadTexts: ipsReqLimitPort.setDescription('The port on which ips service is listening. ')
ipsReqLimitUrlLenOFErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsReqLimitUrlLenOFErr.setStatus('current')
if mibBuilder.loadTexts: ipsReqLimitUrlLenOFErr.setDescription('Number of URL length overflow error. ')
ipsReqLimitQueryLenOFErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsReqLimitQueryLenOFErr.setStatus('current')
if mibBuilder.loadTexts: ipsReqLimitQueryLenOFErr.setDescription('Number of query length overflow error. ')
ipsReqLimitReqLenOFErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsReqLimitReqLenOFErr.setStatus('current')
if mibBuilder.loadTexts: ipsReqLimitReqLenOFErr.setDescription('Number of request length overflow error. ')
ipsReqLimitCookieLenOFErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsReqLimitCookieLenOFErr.setStatus('current')
if mibBuilder.loadTexts: ipsReqLimitCookieLenOFErr.setDescription('Number of Cookie length overflow error. ')
ipsReqLimitHdrCntOFErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsReqLimitHdrCntOFErr.setStatus('current')
if mibBuilder.loadTexts: ipsReqLimitHdrCntOFErr.setDescription('Number of header count overflow error. ')
ipsReqLimitHdrLenOFErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsReqLimitHdrLenOFErr.setStatus('current')
if mibBuilder.loadTexts: ipsReqLimitHdrLenOFErr.setDescription('Number of header length overflow error. ')
ipsReqLimitContentLenErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsReqLimitContentLenErr.setStatus('current')
if mibBuilder.loadTexts: ipsReqLimitContentLenErr.setDescription('Number of content length overflow error. ')
ipsReqLimitBlkdMethodErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsReqLimitBlkdMethodErr.setStatus('current')
if mibBuilder.loadTexts: ipsReqLimitBlkdMethodErr.setDescription('Number of blocked method error. ')
bwsIpsUrlNormStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 10), )
if mibBuilder.loadTexts: bwsIpsUrlNormStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwsIpsUrlNormStatsTable.setDescription('A table of IPS URL normalization stats. ')
bwsIpsUrlNormStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 10, 1), ).setIndexNames((0, "BWS-MIB", "ipsUrlNormAddressType"), (0, "BWS-MIB", "ipsUrlNormAddress"), (0, "BWS-MIB", "ipsUrlNormPort"))
if mibBuilder.loadTexts: bwsIpsUrlNormStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwsIpsUrlNormStatsEntry.setDescription('IPS URL normalization stats entry. ')
ipsUrlNormAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 10, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipsUrlNormAddressType.setReference('RFC 4001')
if mibBuilder.loadTexts: ipsUrlNormAddressType.setStatus('current')
if mibBuilder.loadTexts: ipsUrlNormAddressType.setDescription('The type of the service address, as defined\n            in the InetAddress MIB. ')
ipsUrlNormAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 10, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipsUrlNormAddress.setStatus('current')
if mibBuilder.loadTexts: ipsUrlNormAddress.setDescription('The service address. ')
ipsUrlNormPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 10, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: ipsUrlNormPort.setStatus('current')
if mibBuilder.loadTexts: ipsUrlNormPort.setDescription('The port on which ips service is listening. ')
ipsUrlNormEncodingErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlNormEncodingErr.setStatus('current')
if mibBuilder.loadTexts: ipsUrlNormEncodingErr.setDescription('Number of encoding error. ')
ipsUrlNormSlashDotInUrlErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlNormSlashDotInUrlErr.setStatus('current')
if mibBuilder.loadTexts: ipsUrlNormSlashDotInUrlErr.setDescription('Number of slash dot in URL error. ')
ipsUrlNormTildaInUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlNormTildaInUrl.setStatus('current')
if mibBuilder.loadTexts: ipsUrlNormTildaInUrl.setDescription('Number of tilda in URL error. ')
ipsUrlNormCharSetEncodingErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlNormCharSetEncodingErr.setStatus('current')
if mibBuilder.loadTexts: ipsUrlNormCharSetEncodingErr.setDescription('Number of character set encoding error. ')
bwsIpsCookieSecStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 11), )
if mibBuilder.loadTexts: bwsIpsCookieSecStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwsIpsCookieSecStatsTable.setDescription('A table of IPS cookie security stats. ')
bwsIpsCookieSecStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 11, 1), ).setIndexNames((0, "BWS-MIB", "ipsCookieSecAddressType"), (0, "BWS-MIB", "ipsCookieSecAddress"), (0, "BWS-MIB", "ipsCookieSecPort"))
if mibBuilder.loadTexts: bwsIpsCookieSecStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwsIpsCookieSecStatsEntry.setDescription('IPS cookie security stats entry. ')
ipsCookieSecAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 11, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipsCookieSecAddressType.setReference('RFC 4001')
if mibBuilder.loadTexts: ipsCookieSecAddressType.setStatus('current')
if mibBuilder.loadTexts: ipsCookieSecAddressType.setDescription('The type of the service address, as defined\n            in the InetAddress MIB. ')
ipsCookieSecAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 11, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipsCookieSecAddress.setStatus('current')
if mibBuilder.loadTexts: ipsCookieSecAddress.setDescription('The service address. ')
ipsCookieSecPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 11, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: ipsCookieSecPort.setStatus('current')
if mibBuilder.loadTexts: ipsCookieSecPort.setDescription('The port on which ips service is listening. ')
ipsCookieSecEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsCookieSecEncrypted.setStatus('current')
if mibBuilder.loadTexts: ipsCookieSecEncrypted.setDescription('Number of cookie encrypted. ')
ipsCookieSecTampered = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsCookieSecTampered.setStatus('current')
if mibBuilder.loadTexts: ipsCookieSecTampered.setDescription('Number of cookie tampered. ')
ipsCookieSecNumCookieAllow = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsCookieSecNumCookieAllow.setStatus('current')
if mibBuilder.loadTexts: ipsCookieSecNumCookieAllow.setDescription('Number of cookie allowed. ')
ipsCookieSecNumCookieSet = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsCookieSecNumCookieSet.setStatus('current')
if mibBuilder.loadTexts: ipsCookieSecNumCookieSet.setDescription('Number of cookie set. ')
ipsCookieSecNumCookieErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsCookieSecNumCookieErr.setStatus('current')
if mibBuilder.loadTexts: ipsCookieSecNumCookieErr.setDescription('Number of cookie error. ')
ipsCookieSecCookieDecErr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsCookieSecCookieDecErr.setStatus('current')
if mibBuilder.loadTexts: ipsCookieSecCookieDecErr.setDescription('Number of cookie dec error. ')
ipsCookieSecCookieDecrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsCookieSecCookieDecrypted.setStatus('current')
if mibBuilder.loadTexts: ipsCookieSecCookieDecrypted.setDescription('Number of cookie decrypted. ')
bwsIpsUrlAclStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 12), )
if mibBuilder.loadTexts: bwsIpsUrlAclStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwsIpsUrlAclStatsTable.setDescription('A table of IPS URL ACLstats. ')
bwsIpsUrlAclStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 12, 1), ).setIndexNames((0, "BWS-MIB", "ipsUrlAclAddressType"), (0, "BWS-MIB", "ipsUrlAclAddress"), (0, "BWS-MIB", "ipsUrlAclPort"))
if mibBuilder.loadTexts: bwsIpsUrlAclStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwsIpsUrlAclStatsEntry.setDescription('IPS URL ACL stats entry. ')
ipsUrlAclAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 12, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipsUrlAclAddressType.setReference('RFC 4001')
if mibBuilder.loadTexts: ipsUrlAclAddressType.setStatus('current')
if mibBuilder.loadTexts: ipsUrlAclAddressType.setDescription('The type of the service address, as defined\n            in the InetAddress MIB. ')
ipsUrlAclAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 12, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipsUrlAclAddress.setStatus('current')
if mibBuilder.loadTexts: ipsUrlAclAddress.setDescription('The service address. ')
ipsUrlAclPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 12, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: ipsUrlAclPort.setStatus('current')
if mibBuilder.loadTexts: ipsUrlAclPort.setDescription('The port on which ips service is listening. ')
ipsUrlAclProcessAclHits = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlAclProcessAclHits.setStatus('current')
if mibBuilder.loadTexts: ipsUrlAclProcessAclHits.setDescription('Number of ACL hits. ')
ipsUrlAclPolicyHits = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlAclPolicyHits.setStatus('current')
if mibBuilder.loadTexts: ipsUrlAclPolicyHits.setDescription('Number of ACL policy hits. ')
ipsUrlAclTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 12, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlAclTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ipsUrlAclTimeStamp.setDescription('Time stamp at which this entry was last modified. ')
ipsUrlAclReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 12, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlAclReserved.setStatus('current')
if mibBuilder.loadTexts: ipsUrlAclReserved.setDescription('Reserved. ')
ipsUrlAclAllowAclHits = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlAclAllowAclHits.setStatus('current')
if mibBuilder.loadTexts: ipsUrlAclAllowAclHits.setDescription('Number of ACL policy hits. ')
bwsIpsHdrAclStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 13), )
if mibBuilder.loadTexts: bwsIpsHdrAclStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwsIpsHdrAclStatsTable.setDescription('A table of IPS header ACL stats. ')
bwsIpsHdrAclStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 13, 1), ).setIndexNames((0, "BWS-MIB", "ipsHdrAclAddressType"), (0, "BWS-MIB", "ipsHdrAclAddress"), (0, "BWS-MIB", "ipsHdrAclPort"))
if mibBuilder.loadTexts: bwsIpsHdrAclStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwsIpsHdrAclStatsEntry.setDescription('IPS header ACL stats entry. ')
ipsHdrAclAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 13, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipsHdrAclAddressType.setReference('RFC 4001')
if mibBuilder.loadTexts: ipsHdrAclAddressType.setStatus('current')
if mibBuilder.loadTexts: ipsHdrAclAddressType.setDescription('The type of the service address, as defined\n            in the InetAddress MIB. ')
ipsHdrAclAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 13, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipsHdrAclAddress.setStatus('current')
if mibBuilder.loadTexts: ipsHdrAclAddress.setDescription('The service address. ')
ipsHdrAclPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 13, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: ipsHdrAclPort.setStatus('current')
if mibBuilder.loadTexts: ipsHdrAclPort.setDescription('The port on which ips service is listening. ')
ipsHdrAclHits = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsHdrAclHits.setStatus('current')
if mibBuilder.loadTexts: ipsHdrAclHits.setDescription('Number of ACL hits. ')
ipsHdrAclTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 13, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsHdrAclTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ipsHdrAclTimeStamp.setDescription('Time stamp at which this entry was last modified. ')
bwsIpsWebAddrTransStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 14), )
if mibBuilder.loadTexts: bwsIpsWebAddrTransStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwsIpsWebAddrTransStatsTable.setDescription('A table of IPS header ACL stats. ')
bwsIpsWebAddrTransStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 14, 1), ).setIndexNames((0, "BWS-MIB", "ipsWebAddrTransAddressType"), (0, "BWS-MIB", "ipsWebAddrTransAddress"), (0, "BWS-MIB", "ipsWebAddrTransPort"))
if mibBuilder.loadTexts: bwsIpsWebAddrTransStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwsIpsWebAddrTransStatsEntry.setDescription('IPS header ACL stats entry. ')
ipsWebAddrTransAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 14, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipsWebAddrTransAddressType.setReference('RFC 4001')
if mibBuilder.loadTexts: ipsWebAddrTransAddressType.setStatus('current')
if mibBuilder.loadTexts: ipsWebAddrTransAddressType.setDescription('The type of the service address, as defined\n            in the InetAddress MIB. ')
ipsWebAddrTransAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 14, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipsWebAddrTransAddress.setStatus('current')
if mibBuilder.loadTexts: ipsWebAddrTransAddress.setDescription('The service address. ')
ipsWebAddrTransPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 14, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: ipsWebAddrTransPort.setStatus('current')
if mibBuilder.loadTexts: ipsWebAddrTransPort.setDescription('The port on which ips service is listening. ')
ipsWebAddrTransReqUrlTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsWebAddrTransReqUrlTrans.setStatus('current')
if mibBuilder.loadTexts: ipsWebAddrTransReqUrlTrans.setDescription('Number of URL translation requests. ')
ipsWebAddrTransRspUrlTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 14, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsWebAddrTransRspUrlTrans.setStatus('current')
if mibBuilder.loadTexts: ipsWebAddrTransRspUrlTrans.setDescription('Number of URL translation response. ')
ipsWebAddrTransReqUrlReWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 14, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsWebAddrTransReqUrlReWritten.setStatus('current')
if mibBuilder.loadTexts: ipsWebAddrTransReqUrlReWritten.setDescription('Number of URL re-written. ')
ipsWebAddrTransReqHdrReWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsWebAddrTransReqHdrReWritten.setStatus('current')
if mibBuilder.loadTexts: ipsWebAddrTransReqHdrReWritten.setDescription('Number of request header re-written. ')
ipsWebAddrTransRspHdrReWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsWebAddrTransRspHdrReWritten.setStatus('current')
if mibBuilder.loadTexts: ipsWebAddrTransRspHdrReWritten.setDescription('Number of response header re-written. ')
ipsWebAddrTransReqReDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 14, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsWebAddrTransReqReDirection.setStatus('current')
if mibBuilder.loadTexts: ipsWebAddrTransReqReDirection.setDescription('Number of request redirection. ')
ipsWebAddrTransTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 14, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsWebAddrTransTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ipsWebAddrTransTimeStamp.setDescription('Time stamp at which this entry was last modified. ')
bwsIpsAccessCtrlStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15), )
if mibBuilder.loadTexts: bwsIpsAccessCtrlStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwsIpsAccessCtrlStatsTable.setDescription('A table of IPS access control stats. ')
bwsIpsAccessCtrlStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1), ).setIndexNames((0, "BWS-MIB", "ipsAccessCtrlAddressType"), (0, "BWS-MIB", "ipsAccessCtrlAddress"), (0, "BWS-MIB", "ipsAccessCtrlPort"))
if mibBuilder.loadTexts: bwsIpsAccessCtrlStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwsIpsAccessCtrlStatsEntry.setDescription('IPS access control stats entry. ')
ipsAccessCtrlAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipsAccessCtrlAddressType.setReference('RFC 4001')
if mibBuilder.loadTexts: ipsAccessCtrlAddressType.setStatus('current')
if mibBuilder.loadTexts: ipsAccessCtrlAddressType.setDescription('The type of the service address, as defined\n            in the InetAddress MIB. ')
ipsAccessCtrlAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipsAccessCtrlAddress.setStatus('current')
if mibBuilder.loadTexts: ipsAccessCtrlAddress.setDescription('The service address. ')
ipsAccessCtrlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: ipsAccessCtrlPort.setStatus('current')
if mibBuilder.loadTexts: ipsAccessCtrlPort.setDescription('The port on which ips service is listening. ')
ipsAccessCtrlMissingCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlMissingCookie.setStatus('current')
if mibBuilder.loadTexts: ipsAccessCtrlMissingCookie.setDescription('Number of missing cookies. ')
ipsAccessCtrlNoAuthHdr = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlNoAuthHdr.setStatus('current')
if mibBuilder.loadTexts: ipsAccessCtrlNoAuthHdr.setDescription('Number of no authorization header. ')
ipsAccessCtrlInvalidCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlInvalidCookie.setStatus('current')
if mibBuilder.loadTexts: ipsAccessCtrlInvalidCookie.setDescription('Number of invalid cookie. ')
ipsAccessCtrlExpiredCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlExpiredCookie.setStatus('current')
if mibBuilder.loadTexts: ipsAccessCtrlExpiredCookie.setDescription('Number of expired cookie. ')
ipsAccessCtrlAccessDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlAccessDenied.setStatus('current')
if mibBuilder.loadTexts: ipsAccessCtrlAccessDenied.setDescription('Number of access denied. ')
ipsAccessCtrlGenFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlGenFailure.setStatus('current')
if mibBuilder.loadTexts: ipsAccessCtrlGenFailure.setDescription('Number of general failure. ')
ipsAccessCtrlAccessAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlAccessAttempts.setStatus('current')
if mibBuilder.loadTexts: ipsAccessCtrlAccessAttempts.setDescription('Number of access attempts. ')
ipsAccessCtrlAccessAttemptsTotRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlAccessAttemptsTotRtt.setStatus('current')
if mibBuilder.loadTexts: ipsAccessCtrlAccessAttemptsTotRtt.setDescription('Number of access attempts. ')
ipsAccessCtrlInvalidSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlInvalidSrcIp.setStatus('current')
if mibBuilder.loadTexts: ipsAccessCtrlInvalidSrcIp.setDescription('Number of invalid source ip. ')
ipsAccessCtrlAuthCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlAuthCacheHits.setStatus('current')
if mibBuilder.loadTexts: ipsAccessCtrlAuthCacheHits.setDescription('Number of authorization cache hits. ')
ipsAccessCtrlAuthCacheMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlAuthCacheMiss.setStatus('current')
if mibBuilder.loadTexts: ipsAccessCtrlAuthCacheMiss.setDescription('Number of authorization cache miss. ')
ipsAccessCtrlAuthCacheExp = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlAuthCacheExp.setStatus('current')
if mibBuilder.loadTexts: ipsAccessCtrlAuthCacheExp.setDescription('Number of authorization cache expiry. ')
ipsAccessCtrlTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 15, 1, 16), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsAccessCtrlTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ipsAccessCtrlTimeStamp.setDescription('Time stamp at which this entry was last modified. ')
bwsIpsRCStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 16), )
if mibBuilder.loadTexts: bwsIpsRCStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwsIpsRCStatsTable.setDescription('A table of IPS rate control stats. ')
bwsIpsRCStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 16, 1), ).setIndexNames((0, "BWS-MIB", "ipsRCAddressType"), (0, "BWS-MIB", "ipsRCAddress"), (0, "BWS-MIB", "ipsRCPort"))
if mibBuilder.loadTexts: bwsIpsRCStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwsIpsRCStatsEntry.setDescription('IPS rate control stats entry. ')
ipsRCAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 16, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipsRCAddressType.setReference('RFC 4001')
if mibBuilder.loadTexts: ipsRCAddressType.setStatus('current')
if mibBuilder.loadTexts: ipsRCAddressType.setDescription('The type of the service address, as defined\n            in the InetAddress MIB. ')
ipsRCAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 16, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipsRCAddress.setStatus('current')
if mibBuilder.loadTexts: ipsRCAddress.setDescription('The service address. ')
ipsRCPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 16, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: ipsRCPort.setStatus('current')
if mibBuilder.loadTexts: ipsRCPort.setDescription('The port on which ips service is listening. ')
ipsRCTotServed = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsRCTotServed.setStatus('current')
if mibBuilder.loadTexts: ipsRCTotServed.setDescription('Total number of RC served. ')
ipsRCTotQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsRCTotQueued.setStatus('current')
if mibBuilder.loadTexts: ipsRCTotQueued.setDescription('Total number RC queued. ')
ipsRCTotDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsRCTotDropped.setStatus('current')
if mibBuilder.loadTexts: ipsRCTotDropped.setDescription('Total number RC dropped. ')
ipsRCTotOutOfResource = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsRCTotOutOfResource.setStatus('current')
if mibBuilder.loadTexts: ipsRCTotOutOfResource.setDescription('Total number of out of resource error. ')
ipsRCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 16, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsRCTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ipsRCTimeStamp.setDescription('Time stamp at which this entry was last modified. ')
bwsIpsUrlPolicyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 17), )
if mibBuilder.loadTexts: bwsIpsUrlPolicyStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwsIpsUrlPolicyStatsTable.setDescription('A table of IPS UrlPolicy stats. ')
bwsIpsUrlPolicyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 17, 1), ).setIndexNames((0, "BWS-MIB", "ipsUrlPolicyAddressType"), (0, "BWS-MIB", "ipsUrlPolicyAddress"), (0, "BWS-MIB", "ipsUrlPolicyPort"))
if mibBuilder.loadTexts: bwsIpsUrlPolicyStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwsIpsUrlPolicyStatsEntry.setDescription('IPS UrlPolicy stats entry. ')
ipsUrlPolicyAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 17, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipsUrlPolicyAddressType.setReference('RFC 4001')
if mibBuilder.loadTexts: ipsUrlPolicyAddressType.setStatus('current')
if mibBuilder.loadTexts: ipsUrlPolicyAddressType.setDescription('The type of the service address, as defined\n            in the InetAddress MIB. ')
ipsUrlPolicyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 17, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipsUrlPolicyAddress.setStatus('current')
if mibBuilder.loadTexts: ipsUrlPolicyAddress.setDescription('The service address. ')
ipsUrlPolicyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 17, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: ipsUrlPolicyPort.setStatus('current')
if mibBuilder.loadTexts: ipsUrlPolicyPort.setDescription('The port on which ips service is listening. ')
ipsUrlPolicyTotServed = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlPolicyTotServed.setStatus('current')
if mibBuilder.loadTexts: ipsUrlPolicyTotServed.setDescription('Total number of UrlPolicy served. ')
ipsUrlPolicyTotQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlPolicyTotQueued.setStatus('current')
if mibBuilder.loadTexts: ipsUrlPolicyTotQueued.setDescription('Total number UrlPolicy queued. ')
ipsUrlPolicyTotDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlPolicyTotDropped.setStatus('current')
if mibBuilder.loadTexts: ipsUrlPolicyTotDropped.setDescription('Total number UrlPolicy dropped. ')
ipsUrlPolicyTotOutOfResource = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlPolicyTotOutOfResource.setStatus('current')
if mibBuilder.loadTexts: ipsUrlPolicyTotOutOfResource.setDescription('Total number of out of resource error. ')
ipsUrlPolicyEntryCtrlAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlPolicyEntryCtrlAuth.setStatus('current')
if mibBuilder.loadTexts: ipsUrlPolicyEntryCtrlAuth.setDescription('Total number entry control authentication. ')
ipsUrlPolicyTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 17, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsUrlPolicyTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ipsUrlPolicyTimeStamp.setDescription('Time stamp at which this entry was last modified. ')
bwsSMUserSessionTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 18), )
if mibBuilder.loadTexts: bwsSMUserSessionTable.setStatus('current')
if mibBuilder.loadTexts: bwsSMUserSessionTable.setDescription('A table of siteminder user session info. ')
bwsSMUserSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 18, 1), ).setIndexNames((0, "BWS-MIB", "smRealmName"))
if mibBuilder.loadTexts: bwsSMUserSessionEntry.setStatus('current')
if mibBuilder.loadTexts: bwsSMUserSessionEntry.setDescription('siteminder user session info entry. ')
smRealmName = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 18, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 30)))
if mibBuilder.loadTexts: smRealmName.setStatus('current')
if mibBuilder.loadTexts: smRealmName.setDescription('The realm name.')
smAgentName = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 18, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smAgentName.setStatus('current')
if mibBuilder.loadTexts: smAgentName.setDescription('The agent name. ')
smNumUserSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 18, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smNumUserSessions.setStatus('current')
if mibBuilder.loadTexts: smNumUserSessions.setDescription('Number of user sessions. ')
bwsServiceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 20632, 8, 50, 19), )
if mibBuilder.loadTexts: bwsServiceStatusTable.setStatus('current')
if mibBuilder.loadTexts: bwsServiceStatusTable.setDescription('A table of service status info. ')
bwsServiceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20632, 8, 50, 19, 1), ).setIndexNames((0, "BWS-MIB", "srvcName"))
if mibBuilder.loadTexts: bwsServiceStatusEntry.setStatus('current')
if mibBuilder.loadTexts: bwsServiceStatusEntry.setDescription('service status info entry. ')
srvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 19, 1, 1), OctetString())
if mibBuilder.loadTexts: srvcName.setStatus('current')
if mibBuilder.loadTexts: srvcName.setDescription('The name of service used for indexing. ')
serviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 19, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceName.setStatus('current')
if mibBuilder.loadTexts: serviceName.setDescription('service name. ')
serviceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 19, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceAddress.setStatus('current')
if mibBuilder.loadTexts: serviceAddress.setDescription('The service address. ')
servicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 19, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: servicePort.setStatus('current')
if mibBuilder.loadTexts: servicePort.setDescription('The port on which service is listening. ')
serviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 20632, 8, 50, 19, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceStatus.setStatus('current')
if mibBuilder.loadTexts: serviceStatus.setDescription('service status. ')
tempCritical = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 3)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: tempCritical.setStatus('current')
if mibBuilder.loadTexts: tempCritical.setDescription('Severity: Alert\n                      System temperature exceeded its threshold.')
tempHigh = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 4)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: tempHigh.setStatus('current')
if mibBuilder.loadTexts: tempHigh.setDescription('Severity: Critical\n                      System temperature is higher than 80C.')
systemFailOver = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 5)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: systemFailOver.setStatus('current')
if mibBuilder.loadTexts: systemFailOver.setDescription('Severity: Critical\n                      System has failed over.')
switchingToMaintMode = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 6)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: switchingToMaintMode.setStatus('current')
if mibBuilder.loadTexts: switchingToMaintMode.setDescription('Severity: Warning\n                      System is in failed state.')
fanDead = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 7)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: fanDead.setStatus('current')
if mibBuilder.loadTexts: fanDead.setDescription('Severity: Error\n                      One of the System fans is dead.')
dataPortLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 8)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: dataPortLinkDown.setStatus('current')
if mibBuilder.loadTexts: dataPortLinkDown.setDescription('Severity: Error\n                      Data link is down.')
serverDown = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 9)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: serverDown.setStatus('current')
if mibBuilder.loadTexts: serverDown.setDescription('Severity: Error\n                      Back-end Server is down.')
peerDown = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 10)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: peerDown.setStatus('current')
if mibBuilder.loadTexts: peerDown.setDescription('Severity: Error\n                      Peer is down.')
dataPortLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 11)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: dataPortLinkUp.setStatus('current')
if mibBuilder.loadTexts: dataPortLinkUp.setDescription('Severity: Information\n                      Peer is up.')
serverUp = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 12)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: serverUp.setStatus('current')
if mibBuilder.loadTexts: serverUp.setDescription('Severity: Information\n                      Back-end Server is up.')
peerUp = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 13)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: peerUp.setStatus('current')
if mibBuilder.loadTexts: peerUp.setDescription('Severity: Information\n                      Peer is up.')
switchingToBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 14)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: switchingToBypassMode.setStatus('current')
if mibBuilder.loadTexts: switchingToBypassMode.setDescription('Severity: Information\n                      Switching to bypass mode.')
switchingToInlineMode = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 15)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: switchingToInlineMode.setStatus('current')
if mibBuilder.loadTexts: switchingToInlineMode.setDescription('Severity: Information\n                      Switching to inline mode.')
sharedSecretKeyAboutToExpire = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 16)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: sharedSecretKeyAboutToExpire.setStatus('current')
if mibBuilder.loadTexts: sharedSecretKeyAboutToExpire.setDescription('Severity: Information\n                      Shared secret key about to expire.')
sharedSecretKeyExpired = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 17)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: sharedSecretKeyExpired.setStatus('current')
if mibBuilder.loadTexts: sharedSecretKeyExpired.setDescription('Severity: Information\n                      Shared secret key expired.')
firmwareStorageHigh = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 18)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: firmwareStorageHigh.setStatus('current')
if mibBuilder.loadTexts: firmwareStorageHigh.setDescription('Severity: Alert\n                      Firmware storage exceeds 75%.')
logStorageHigh = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 19)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: logStorageHigh.setStatus('current')
if mibBuilder.loadTexts: logStorageHigh.setDescription('Severity: Alert\n                      Log storage exceeds 85%.')
raidDegrading = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 20)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: raidDegrading.setStatus('current')
if mibBuilder.loadTexts: raidDegrading.setDescription('Severity: Alert\n                      One of the RAID arrays is degrading.')
energizeUpdateExpire = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 21)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: energizeUpdateExpire.setStatus('current')
if mibBuilder.loadTexts: energizeUpdateExpire.setDescription('Severity: Alert\n                      Energize Updates subscription is about to expire.')
firmwareUpdateAvailable = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 22)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: firmwareUpdateAvailable.setStatus('current')
if mibBuilder.loadTexts: firmwareUpdateAvailable.setDescription('Severity: Alert\n                     New Firmware Update is available.')
attackDefinitionUpdateAvailable = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 24)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: attackDefinitionUpdateAvailable.setStatus('current')
if mibBuilder.loadTexts: attackDefinitionUpdateAvailable.setDescription('Severity: Alert\n                     New Attack Definition is available.')
processCountHigh = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 25)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: processCountHigh.setStatus('current')
if mibBuilder.loadTexts: processCountHigh.setDescription('Severity: Alert \n\t\t     CPU Usage exceeded its threshold.')
memoryUsageHigh = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 26)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: memoryUsageHigh.setStatus('current')
if mibBuilder.loadTexts: memoryUsageHigh.setDescription('Severity: Alert \n\t\t     Memory Usage exceeded its threshold.')
newAttackDefinitionInstalled = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 27)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: newAttackDefinitionInstalled.setStatus('current')
if mibBuilder.loadTexts: newAttackDefinitionInstalled.setDescription('Severity: Alert\n                     New Attack Definition is installed.')
systemFailure = NotificationType((1, 3, 6, 1, 4, 1, 20632, 8, 1, 28)).setObjects(("BWS-MIB", "bwsMessage"))
if mibBuilder.loadTexts: systemFailure.setStatus('current')
if mibBuilder.loadTexts: systemFailure.setDescription('Severity: Alert\n                      System had crashed or is in failed state.')
bwsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 20632, 8, 51, 1, 1)).setObjects(("BWS-MIB", "bwsStatsGroup"), ("BWS-MIB", "bwsTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwsMIBCompliance = bwsMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: bwsMIBCompliance.setDescription('The compliance statement for bws mib.')
bwsStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20632, 8, 51, 2, 1)).setObjects(("BWS-MIB", "totalApplications"), ("BWS-MIB", "totalServers"), ("BWS-MIB", "totalAttacks"), ("BWS-MIB", "activeApplications"), ("BWS-MIB", "activeServers"), ("BWS-MIB", "bwsMessage"), ("BWS-MIB", "systemLoad"), ("BWS-MIB", "cpuFanSpeed"), ("BWS-MIB", "systemFanSpeed"), ("BWS-MIB", "cpuTemperature"), ("BWS-MIB", "firmwareStorage"), ("BWS-MIB", "logStorage"), ("BWS-MIB", "highAvailabilityStatus"), ("BWS-MIB", "operationalMode"), ("BWS-MIB", "dataPathStatus"), ("BWS-MIB", "linkStatus"), ("BWS-MIB", "vipStatus"), ("BWS-MIB", "memUtilization"), ("BWS-MIB", "cpuUtilization"), ("BWS-MIB", "totalBandwidth"), ("BWS-MIB", "uptime"), ("BWS-MIB", "totalMem"), ("BWS-MIB", "freeMem"), ("BWS-MIB", "currentFirmwareVersion"), ("BWS-MIB", "virusDefUpdates"), ("BWS-MIB", "securityDefUpdates"), ("BWS-MIB", "systemSerialNumber"), ("BWS-MIB", "httpProxyActiveConn"), ("BWS-MIB", "httpProxyTotalConn"), ("BWS-MIB", "httpProxyTotalReq"), ("BWS-MIB", "httpProxyServerReq"), ("BWS-MIB", "httpProxyServerErr"), ("BWS-MIB", "httpProxyClientAbrt"), ("BWS-MIB", "httpProxyServerAbrt"), ("BWS-MIB", "httpProxySessionTimeOut"), ("BWS-MIB", "httpProxyParseErr"), ("BWS-MIB", "httpProxyUnknownRsp"), ("BWS-MIB", "httpProxyInBytes"), ("BWS-MIB", "httpProxyOutBytes"), ("BWS-MIB", "httpProxyWAFBlockedIntrusions"), ("BWS-MIB", "httpProxyWAFMonitoredIntrusions"), ("BWS-MIB", "httpProxyWAFWarnings"), ("BWS-MIB", "sslProxyActiveConn"), ("BWS-MIB", "sslProxyFullHandshakes"), ("BWS-MIB", "sslProxyResumptionHandshakes"), ("BWS-MIB", "sslProxyHandshakeAttempts"), ("BWS-MIB", "sslProxyCacheHits"), ("BWS-MIB", "sslProxyCacheMiss"), ("BWS-MIB", "sslProxyCacheTimeouts"), ("BWS-MIB", "sslProxyErrPms"), ("BWS-MIB", "sslProxyAuthBadCertErr"), ("BWS-MIB", "sslProxyAuthBadCNErr"), ("BWS-MIB", "sslProxyBadDNCErr"), ("BWS-MIB", "sslProxyBadCRLErr"), ("BWS-MIB", "sslProxyInBytes"), ("BWS-MIB", "sslProxyOutBytes"), ("BWS-MIB", "sslProxyTotalReq"), ("BWS-MIB", "sslProxyTotalConn"), ("BWS-MIB", "sslProxyCurrentConn"), ("BWS-MIB", "webCmprNoOfReqCompressed"), ("BWS-MIB", "webCmprCompressibleDataSize"), ("BWS-MIB", "webCmprCompressedDataSize"), ("BWS-MIB", "webCacheHits"), ("BWS-MIB", "webCacheMiss"), ("BWS-MIB", "webCacheStale"), ("BWS-MIB", "webCacheCacheableRes"), ("BWS-MIB", "webCacheReq"), ("BWS-MIB", "webCacheCachedObjects"), ("BWS-MIB", "webCacheLongHdrs"), ("BWS-MIB", "webCacheBytesOut"), ("BWS-MIB", "httpSrvrTotReqAccepted"), ("BWS-MIB", "httpSrvrTotReqActive"), ("BWS-MIB", "httpSrvrTotReqRejected"), ("BWS-MIB", "httpSrvrTotSuccess"), ("BWS-MIB", "httpSrvrTotRefused"), ("BWS-MIB", "httpSrvrTotTimedout"), ("BWS-MIB", "httpSrvrAvgReqPerConn"), ("BWS-MIB", "httpSrvrTotResponse"), ("BWS-MIB", "httpSrvrAvgResTime"), ("BWS-MIB", "httpSrvrMaxResTime"), ("BWS-MIB", "httpSrvrMinResTime"), ("BWS-MIB", "httpSrvrNumReqEnqueue"), ("BWS-MIB", "httpSrvrNumFreeConn"), ("BWS-MIB", "httpSrvrNumOpeningConn"), ("BWS-MIB", "httpSrvrNumConn"), ("BWS-MIB", "httpSrvrNumIBDisabled"), ("BWS-MIB", "httpSrvrNumOOBDisabled"), ("BWS-MIB", "httpSrvrNumOOBEnabled"), ("BWS-MIB", "httpSrvrLastDisabledTime"), ("BWS-MIB", "httpSrvrState"), ("BWS-MIB", "httpSrvrInBytes"), ("BWS-MIB", "httpSrvrOutBytes"), ("BWS-MIB", "sslSrvrTotReqAccepted"), ("BWS-MIB", "sslSrvrTotReqActive"), ("BWS-MIB", "sslSrvrTotReqRejected"), ("BWS-MIB", "sslSrvrTotSuccess"), ("BWS-MIB", "sslSrvrTotRefused"), ("BWS-MIB", "sslSrvrTotTimedout"), ("BWS-MIB", "sslSrvrAvgReqPerConn"), ("BWS-MIB", "sslSrvrTotResponse"), ("BWS-MIB", "sslSrvrAvgResTime"), ("BWS-MIB", "sslSrvrMaxResTime"), ("BWS-MIB", "sslSrvrMinResTime"), ("BWS-MIB", "sslSrvrNumReqEnqueue"), ("BWS-MIB", "sslSrvrNumFreeConn"), ("BWS-MIB", "sslSrvrNumOpeningConn"), ("BWS-MIB", "sslSrvrNumConn"), ("BWS-MIB", "sslSrvrNumIBDisabled"), ("BWS-MIB", "sslSrvrNumOOBDisabled"), ("BWS-MIB", "sslSrvrNumOOBEnabled"), ("BWS-MIB", "sslSrvrLastDisabledTime"), ("BWS-MIB", "sslSrvrState"), ("BWS-MIB", "sslSrvrInBytes"), ("BWS-MIB", "sslSrvrOutBytes"), ("BWS-MIB", "ipsReqSrvcNoOfUrlProfMatched"), ("BWS-MIB", "ipsReqSrvcNoOfAppProfViol"), ("BWS-MIB", "ipsReqSrvcTotProfViol"), ("BWS-MIB", "ipsLrnSrvcUpdatesByReq"), ("BWS-MIB", "ipsLrnSrvcUpdatesByRsp"), ("BWS-MIB", "ipsLrnSrvcTotUpdatesByReq"), ("BWS-MIB", "ipsLrnSrvcTotUpdatesByRsp"), ("BWS-MIB", "ipsLrnSrvcTotUrlUpdated"), ("BWS-MIB", "ipsLrnSrvcTotParamsLearned"), ("BWS-MIB", "ipsLrnSrvcTimeLastUpdated"), ("BWS-MIB", "ipsLrnSrvcTimeLocked"), ("BWS-MIB", "ipsReqLimitUrlLenOFErr"), ("BWS-MIB", "ipsReqLimitQueryLenOFErr"), ("BWS-MIB", "ipsReqLimitReqLenOFErr"), ("BWS-MIB", "ipsReqLimitCookieLenOFErr"), ("BWS-MIB", "ipsReqLimitHdrCntOFErr"), ("BWS-MIB", "ipsReqLimitHdrLenOFErr"), ("BWS-MIB", "ipsReqLimitContentLenErr"), ("BWS-MIB", "ipsReqLimitBlkdMethodErr"), ("BWS-MIB", "ipsUrlNormEncodingErr"), ("BWS-MIB", "ipsUrlNormSlashDotInUrlErr"), ("BWS-MIB", "ipsUrlNormTildaInUrl"), ("BWS-MIB", "ipsUrlNormCharSetEncodingErr"), ("BWS-MIB", "ipsCookieSecEncrypted"), ("BWS-MIB", "ipsCookieSecTampered"), ("BWS-MIB", "ipsCookieSecNumCookieAllow"), ("BWS-MIB", "ipsCookieSecNumCookieSet"), ("BWS-MIB", "ipsCookieSecNumCookieErr"), ("BWS-MIB", "ipsCookieSecCookieDecErr"), ("BWS-MIB", "ipsCookieSecCookieDecrypted"), ("BWS-MIB", "ipsUrlAclProcessAclHits"), ("BWS-MIB", "ipsUrlAclPolicyHits"), ("BWS-MIB", "ipsUrlAclTimeStamp"), ("BWS-MIB", "ipsUrlAclReserved"), ("BWS-MIB", "ipsUrlAclAllowAclHits"), ("BWS-MIB", "ipsHdrAclHits"), ("BWS-MIB", "ipsHdrAclTimeStamp"), ("BWS-MIB", "ipsWebAddrTransReqUrlTrans"), ("BWS-MIB", "ipsWebAddrTransRspUrlTrans"), ("BWS-MIB", "ipsWebAddrTransReqUrlReWritten"), ("BWS-MIB", "ipsWebAddrTransReqHdrReWritten"), ("BWS-MIB", "ipsWebAddrTransRspHdrReWritten"), ("BWS-MIB", "ipsWebAddrTransReqReDirection"), ("BWS-MIB", "ipsWebAddrTransTimeStamp"), ("BWS-MIB", "ipsAccessCtrlMissingCookie"), ("BWS-MIB", "ipsAccessCtrlNoAuthHdr"), ("BWS-MIB", "ipsAccessCtrlInvalidCookie"), ("BWS-MIB", "ipsAccessCtrlExpiredCookie"), ("BWS-MIB", "ipsAccessCtrlAccessDenied"), ("BWS-MIB", "ipsAccessCtrlGenFailure"), ("BWS-MIB", "ipsAccessCtrlAccessAttempts"), ("BWS-MIB", "ipsAccessCtrlAccessAttemptsTotRtt"), ("BWS-MIB", "ipsAccessCtrlInvalidSrcIp"), ("BWS-MIB", "ipsAccessCtrlAuthCacheHits"), ("BWS-MIB", "ipsAccessCtrlAuthCacheMiss"), ("BWS-MIB", "ipsAccessCtrlAuthCacheExp"), ("BWS-MIB", "ipsAccessCtrlTimeStamp"), ("BWS-MIB", "ipsRCTotServed"), ("BWS-MIB", "ipsRCTotQueued"), ("BWS-MIB", "ipsRCTotDropped"), ("BWS-MIB", "ipsRCTotOutOfResource"), ("BWS-MIB", "ipsRCTimeStamp"), ("BWS-MIB", "ipsUrlPolicyTotServed"), ("BWS-MIB", "ipsUrlPolicyTotQueued"), ("BWS-MIB", "ipsUrlPolicyTotDropped"), ("BWS-MIB", "ipsUrlPolicyTotOutOfResource"), ("BWS-MIB", "ipsUrlPolicyEntryCtrlAuth"), ("BWS-MIB", "ipsUrlPolicyTimeStamp"), ("BWS-MIB", "serviceName"), ("BWS-MIB", "serviceAddress"), ("BWS-MIB", "servicePort"), ("BWS-MIB", "serviceStatus"), ("BWS-MIB", "smAgentName"), ("BWS-MIB", "smNumUserSessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwsStatsGroup = bwsStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwsStatsGroup.setDescription('A collection of stats objects for bws.')
bwsTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 20632, 8, 51, 2, 2)).setObjects(("BWS-MIB", "tempCritical"), ("BWS-MIB", "tempHigh"), ("BWS-MIB", "systemFailOver"), ("BWS-MIB", "switchingToMaintMode"), ("BWS-MIB", "fanDead"), ("BWS-MIB", "dataPortLinkDown"), ("BWS-MIB", "serverDown"), ("BWS-MIB", "peerDown"), ("BWS-MIB", "dataPortLinkUp"), ("BWS-MIB", "serverUp"), ("BWS-MIB", "peerUp"), ("BWS-MIB", "switchingToBypassMode"), ("BWS-MIB", "switchingToInlineMode"), ("BWS-MIB", "sharedSecretKeyAboutToExpire"), ("BWS-MIB", "sharedSecretKeyExpired"), ("BWS-MIB", "firmwareStorageHigh"), ("BWS-MIB", "logStorageHigh"), ("BWS-MIB", "raidDegrading"), ("BWS-MIB", "energizeUpdateExpire"), ("BWS-MIB", "firmwareUpdateAvailable"), ("BWS-MIB", "processCountHigh"), ("BWS-MIB", "memoryUsageHigh"), ("BWS-MIB", "attackDefinitionUpdateAvailable"), ("BWS-MIB", "newAttackDefinitionInstalled"), ("BWS-MIB", "systemFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwsTrapGroup = bwsTrapGroup.setStatus('current')
if mibBuilder.loadTexts: bwsTrapGroup.setDescription('A collection of notification objects for bws.')
mibBuilder.exportSymbols("BWS-MIB", httpProxyClientAbrt=httpProxyClientAbrt, ipsAccessCtrlTimeStamp=ipsAccessCtrlTimeStamp, httpSrvrNumOpeningConn=httpSrvrNumOpeningConn, httpSrvrLastDisabledTime=httpSrvrLastDisabledTime, ipsReqSrvcAddressType=ipsReqSrvcAddressType, bwsHttpSrvrStatsEntry=bwsHttpSrvrStatsEntry, sslSrvrTotSuccess=sslSrvrTotSuccess, sslSrvrTotReqActive=sslSrvrTotReqActive, ipsLrnSrvcUpdatesByReq=ipsLrnSrvcUpdatesByReq, ipsLrnSrvcTotUpdatesByRsp=ipsLrnSrvcTotUpdatesByRsp, systemFanSpeed=systemFanSpeed, ipsUrlNormPort=ipsUrlNormPort, ipsUrlAclPort=ipsUrlAclPort, ipsRCTimeStamp=ipsRCTimeStamp, bwsHttpSrvrStatsTable=bwsHttpSrvrStatsTable, sslProxyFullHandshakes=sslProxyFullHandshakes, ipsReqLimitAddress=ipsReqLimitAddress, sslProxyCurrentConn=sslProxyCurrentConn, bwsCacheStatsEntry=bwsCacheStatsEntry, sslProxyActiveConn=sslProxyActiveConn, bwsIpsWebAddrTransStatsTable=bwsIpsWebAddrTransStatsTable, ipsCookieSecNumCookieSet=ipsCookieSecNumCookieSet, ipsRCTotQueued=ipsRCTotQueued, httpSrvrNumFreeConn=httpSrvrNumFreeConn, ipsRCAddressType=ipsRCAddressType, securityDefUpdates=securityDefUpdates, bwsIpsRCStatsEntry=bwsIpsRCStatsEntry, ipsRCAddress=ipsRCAddress, peerDown=peerDown, sslProxyBadDNCErr=sslProxyBadDNCErr, cpuTemperature=cpuTemperature, ipsUrlNormCharSetEncodingErr=ipsUrlNormCharSetEncodingErr, ipsReqLimitPort=ipsReqLimitPort, ipsUrlNormAddressType=ipsUrlNormAddressType, ipsWebAddrTransAddress=ipsWebAddrTransAddress, bwsIpsUrlPolicyStatsEntry=bwsIpsUrlPolicyStatsEntry, sslSrvrAddressType=sslSrvrAddressType, serviceName=serviceName, ipsWebAddrTransAddressType=ipsWebAddrTransAddressType, bwsIpsUrlAclStatsTable=bwsIpsUrlAclStatsTable, httpSrvrNumOOBDisabled=httpSrvrNumOOBDisabled, bwsIpsWebAddrTransStatsEntry=bwsIpsWebAddrTransStatsEntry, dataPathStatus=dataPathStatus, bwsIpsUrlPolicyStatsTable=bwsIpsUrlPolicyStatsTable, servicePort=servicePort, sslProxyAddressType=sslProxyAddressType, httpSrvrMaxResTime=httpSrvrMaxResTime, bwsIpsReqLimitStatsTable=bwsIpsReqLimitStatsTable, fanDead=fanDead, ipsUrlAclAddress=ipsUrlAclAddress, ipsReqSrvcNoOfAppProfViol=ipsReqSrvcNoOfAppProfViol, cpuFanSpeed=cpuFanSpeed, ipsCookieSecAddress=ipsCookieSecAddress, httpSrvrTotSuccess=httpSrvrTotSuccess, ipsAccessCtrlAddressType=ipsAccessCtrlAddressType, ipsReqLimitHdrCntOFErr=ipsReqLimitHdrCntOFErr, ipsUrlAclPolicyHits=ipsUrlAclPolicyHits, ipsHdrAclPort=ipsHdrAclPort, bwsIpsReqLimitStatsEntry=bwsIpsReqLimitStatsEntry, ipsWebAddrTransRspHdrReWritten=ipsWebAddrTransRspHdrReWritten, sslSrvrNumOOBDisabled=sslSrvrNumOOBDisabled, sslProxyAuthBadCertErr=sslProxyAuthBadCertErr, bwsIpsHdrAclStatsEntry=bwsIpsHdrAclStatsEntry, totalAttacks=totalAttacks, newAttackDefinitionInstalled=newAttackDefinitionInstalled, currentFirmwareVersion=currentFirmwareVersion, bwsIpsUrlAclStatsEntry=bwsIpsUrlAclStatsEntry, attackDefinitionUpdateAvailable=attackDefinitionUpdateAvailable, ipsAccessCtrlAuthCacheMiss=ipsAccessCtrlAuthCacheMiss, ipsCookieSecNumCookieAllow=ipsCookieSecNumCookieAllow, ipsReqLimitReqLenOFErr=ipsReqLimitReqLenOFErr, webCmprAddress=webCmprAddress, ipsHdrAclTimeStamp=ipsHdrAclTimeStamp, webCacheProtocol=webCacheProtocol, ipsUrlNormTildaInUrl=ipsUrlNormTildaInUrl, bwsTrapGroup=bwsTrapGroup, httpProxyInBytes=httpProxyInBytes, sslSrvrLastDisabledTime=sslSrvrLastDisabledTime, sslSrvrAddress=sslSrvrAddress, ipsAccessCtrlPort=ipsAccessCtrlPort, raidDegrading=raidDegrading, bwsIpsCookieSecStatsEntry=bwsIpsCookieSecStatsEntry, sslProxyTotalReq=sslProxyTotalReq, smAgentName=smAgentName, serverUp=serverUp, httpSrvrNumOOBEnabled=httpSrvrNumOOBEnabled, ipsAccessCtrlAddress=ipsAccessCtrlAddress, totalApplications=totalApplications, ipsUrlPolicyEntryCtrlAuth=ipsUrlPolicyEntryCtrlAuth, ipsRCTotDropped=ipsRCTotDropped, sslSrvrNumConn=sslSrvrNumConn, ipsLrnSrvcTotUpdatesByReq=ipsLrnSrvcTotUpdatesByReq, ipsUrlAclProcessAclHits=ipsUrlAclProcessAclHits, httpSrvrAvgResTime=httpSrvrAvgResTime, ipsLrnSrvcTotUrlUpdated=ipsLrnSrvcTotUrlUpdated, ipsRCTotServed=ipsRCTotServed, ipsWebAddrTransPort=ipsWebAddrTransPort, httpSrvrAddressType=httpSrvrAddressType, firmwareUpdateAvailable=firmwareUpdateAvailable, ipsCookieSecAddressType=ipsCookieSecAddressType, httpProxyUnknownRsp=httpProxyUnknownRsp, serviceAddress=serviceAddress, httpProxyServerReq=httpProxyServerReq, ipsReqLimitCookieLenOFErr=ipsReqLimitCookieLenOFErr, ipsReqLimitContentLenErr=ipsReqLimitContentLenErr, sslSrvrSrvcAddress=sslSrvrSrvcAddress, webCacheCacheableRes=webCacheCacheableRes, sslProxyResumptionHandshakes=sslProxyResumptionHandshakes, linkStatus=linkStatus, vipStatus=vipStatus, ipsAccessCtrlGenFailure=ipsAccessCtrlGenFailure, webCacheAddressType=webCacheAddressType, ipsCookieSecPort=ipsCookieSecPort, ipsReqLimitUrlLenOFErr=ipsReqLimitUrlLenOFErr, httpSrvrMinResTime=httpSrvrMinResTime, systemLoad=systemLoad, ipsHdrAclHits=ipsHdrAclHits, systemFailure=systemFailure, ipsLrnSrvcAddressType=ipsLrnSrvcAddressType, switchingToInlineMode=switchingToInlineMode, sslProxyCacheHits=sslProxyCacheHits, bwsStatsGroup=bwsStatsGroup, logStorage=logStorage, bwsIpsUrlNormStatsTable=bwsIpsUrlNormStatsTable, PYSNMP_MODULE_ID=bws, ipsLrnSrvcUpdatesByRsp=ipsLrnSrvcUpdatesByRsp, ipsReqLimitAddressType=ipsReqLimitAddressType, httpSrvrSrvcAddress=httpSrvrSrvcAddress, bwsSslProxyStatsEntry=bwsSslProxyStatsEntry, sslSrvrMinResTime=sslSrvrMinResTime, webCacheCachedObjects=webCacheCachedObjects, processCountHigh=processCountHigh, ipsAccessCtrlNoAuthHdr=ipsAccessCtrlNoAuthHdr, sslSrvrAvgResTime=sslSrvrAvgResTime, webCacheLongHdrs=webCacheLongHdrs, dataPortLinkDown=dataPortLinkDown, sslSrvrNumOOBEnabled=sslSrvrNumOOBEnabled, httpSrvrTotResponse=httpSrvrTotResponse, sharedSecretKeyExpired=sharedSecretKeyExpired, bwsHttpProxyStatsTable=bwsHttpProxyStatsTable, ipsReqLimitQueryLenOFErr=ipsReqLimitQueryLenOFErr, httpProxyWAFBlockedIntrusions=httpProxyWAFBlockedIntrusions, bwsMIBConformance=bwsMIBConformance, webCmprAddressType=webCmprAddressType, energizeUpdateExpire=energizeUpdateExpire, highAvailabilityStatus=highAvailabilityStatus, httpSrvrInBytes=httpSrvrInBytes, tempHigh=tempHigh, sslProxyInBytes=sslProxyInBytes, ipsUrlPolicyTotQueued=ipsUrlPolicyTotQueued, totalMem=totalMem, ipsAccessCtrlMissingCookie=ipsAccessCtrlMissingCookie, bwsIpsUrlNormStatsEntry=bwsIpsUrlNormStatsEntry, httpSrvrNumConn=httpSrvrNumConn, switchingToMaintMode=switchingToMaintMode, ipsLrnSrvcAddress=ipsLrnSrvcAddress, smRealmName=smRealmName, ipsWebAddrTransReqHdrReWritten=ipsWebAddrTransReqHdrReWritten, httpSrvrTotReqAccepted=httpSrvrTotReqAccepted, webCmprPort=webCmprPort, httpProxyTotalReq=httpProxyTotalReq, ipsRCPort=ipsRCPort, ipsUrlNormSlashDotInUrlErr=ipsUrlNormSlashDotInUrlErr, ipsAccessCtrlInvalidSrcIp=ipsAccessCtrlInvalidSrcIp, sslProxyCacheMiss=sslProxyCacheMiss, sslProxyBadCRLErr=sslProxyBadCRLErr, sslSrvrNumIBDisabled=sslSrvrNumIBDisabled, ipsUrlAclAllowAclHits=ipsUrlAclAllowAclHits, ipsUrlPolicyTimeStamp=ipsUrlPolicyTimeStamp, sslSrvrNumOpeningConn=sslSrvrNumOpeningConn, httpProxyPort=httpProxyPort, sslSrvrTotReqRejected=sslSrvrTotReqRejected, sslProxyErrPms=sslProxyErrPms, bwsIpsAccessCtrlStatsEntry=bwsIpsAccessCtrlStatsEntry, ipsUrlPolicyAddressType=ipsUrlPolicyAddressType, ipsUrlAclAddressType=ipsUrlAclAddressType, memoryUsageHigh=memoryUsageHigh, bwsMIBCompliance=bwsMIBCompliance, httpProxyServerErr=httpProxyServerErr, httpSrvrNumIBDisabled=httpSrvrNumIBDisabled, sslSrvrAvgReqPerConn=sslSrvrAvgReqPerConn, ipsLrnSrvcTotParamsLearned=ipsLrnSrvcTotParamsLearned, ipsReqSrvcAddress=ipsReqSrvcAddress, ipsCookieSecTampered=ipsCookieSecTampered, httpSrvrPort=httpSrvrPort, ipsAccessCtrlAccessDenied=ipsAccessCtrlAccessDenied, bwstraps=bwstraps, smNumUserSessions=smNumUserSessions, ipsCookieSecCookieDecErr=ipsCookieSecCookieDecErr, sslSrvrSrvcPort=sslSrvrSrvcPort, httpSrvrTotTimedout=httpSrvrTotTimedout, ipsReqSrvcPort=ipsReqSrvcPort, webCmprProtocol=webCmprProtocol, activeApplications=activeApplications, memUtilization=memUtilization, serverDown=serverDown, bwsSMUserSessionEntry=bwsSMUserSessionEntry, ipsUrlPolicyTotOutOfResource=ipsUrlPolicyTotOutOfResource, bwsSMUserSessionTable=bwsSMUserSessionTable, cpuUtilization=cpuUtilization, ipsUrlPolicyAddress=ipsUrlPolicyAddress, bwsIpsLrnSrvcStatsEntry=bwsIpsLrnSrvcStatsEntry, httpProxyServerAbrt=httpProxyServerAbrt, webCacheHits=webCacheHits, sslSrvrMaxResTime=sslSrvrMaxResTime, sslSrvrInBytes=sslSrvrInBytes, sslProxyPort=sslProxyPort, httpProxyAddress=httpProxyAddress, sslSrvrNumReqEnqueue=sslSrvrNumReqEnqueue, ipsCookieSecEncrypted=ipsCookieSecEncrypted, uptime=uptime, peerUp=peerUp, httpProxyWAFMonitoredIntrusions=httpProxyWAFMonitoredIntrusions, httpSrvrAddress=httpSrvrAddress, httpProxyAddressType=httpProxyAddressType, webCacheMiss=webCacheMiss, httpProxyWAFWarnings=httpProxyWAFWarnings, sslProxyTotalConn=sslProxyTotalConn, ipsLrnSrvcPort=ipsLrnSrvcPort, bwsMessage=bwsMessage, ipsUrlPolicyTotServed=ipsUrlPolicyTotServed, ipsAccessCtrlAuthCacheExp=ipsAccessCtrlAuthCacheExp, ipsUrlNormAddress=ipsUrlNormAddress, firmwareStorageHigh=firmwareStorageHigh, ipsUrlPolicyPort=ipsUrlPolicyPort, ipsAccessCtrlAuthCacheHits=ipsAccessCtrlAuthCacheHits, sslProxyCacheTimeouts=sslProxyCacheTimeouts, webCmprCompressedDataSize=webCmprCompressedDataSize, httpProxySessionTimeOut=httpProxySessionTimeOut, httpSrvrSrvcPort=httpSrvrSrvcPort, bwsMIBGroups=bwsMIBGroups, ipsRCTotOutOfResource=ipsRCTotOutOfResource, ipsAccessCtrlExpiredCookie=ipsAccessCtrlExpiredCookie, ipsReqLimitHdrLenOFErr=ipsReqLimitHdrLenOFErr, ipsReqSrvcNoOfUrlProfMatched=ipsReqSrvcNoOfUrlProfMatched, webCacheReq=webCacheReq, httpSrvrSrvcAddressType=httpSrvrSrvcAddressType, ipsWebAddrTransRspUrlTrans=ipsWebAddrTransRspUrlTrans, httpSrvrTotRefused=httpSrvrTotRefused, switchingToBypassMode=switchingToBypassMode, webCacheStale=webCacheStale, httpSrvrTotReqActive=httpSrvrTotReqActive, ipsHdrAclAddressType=ipsHdrAclAddressType, httpProxyActiveConn=httpProxyActiveConn, ipsWebAddrTransTimeStamp=ipsWebAddrTransTimeStamp, firmwareStorage=firmwareStorage, sslProxyAuthBadCNErr=sslProxyAuthBadCNErr, httpProxyParseErr=httpProxyParseErr, sslSrvrState=sslSrvrState, bwsCacheStatsTable=bwsCacheStatsTable, sslSrvrSrvcAddressType=sslSrvrSrvcAddressType, ipsAccessCtrlAccessAttemptsTotRtt=ipsAccessCtrlAccessAttemptsTotRtt, bwsIpsCookieSecStatsTable=bwsIpsCookieSecStatsTable, ipsUrlAclReserved=ipsUrlAclReserved)
mibBuilder.exportSymbols("BWS-MIB", ipsReqSrvcTotProfViol=ipsReqSrvcTotProfViol, bwsIpsLrnSrvcStatsTable=bwsIpsLrnSrvcStatsTable, webCmprCompressibleDataSize=webCmprCompressibleDataSize, freeMem=freeMem, webCacheAddress=webCacheAddress, webCacheBytesOut=webCacheBytesOut, bwsSslSrvrStatsEntry=bwsSslSrvrStatsEntry, sslProxyOutBytes=sslProxyOutBytes, sslSrvrTotResponse=sslSrvrTotResponse, ipsHdrAclAddress=ipsHdrAclAddress, ipsCookieSecNumCookieErr=ipsCookieSecNumCookieErr, activeServers=activeServers, sslSrvrPort=sslSrvrPort, bwsIpsRCStatsTable=bwsIpsRCStatsTable, operationalMode=operationalMode, httpProxyTotalConn=httpProxyTotalConn, httpSrvrState=httpSrvrState, ipsUrlAclTimeStamp=ipsUrlAclTimeStamp, httpProxyOutBytes=httpProxyOutBytes, ipsLrnSrvcTimeLastUpdated=ipsLrnSrvcTimeLastUpdated, bwsIpsHdrAclStatsTable=bwsIpsHdrAclStatsTable, serviceStatus=serviceStatus, bwsIpsReqSrvcStatsEntry=bwsIpsReqSrvcStatsEntry, ipsWebAddrTransReqUrlTrans=ipsWebAddrTransReqUrlTrans, ipsReqLimitBlkdMethodErr=ipsReqLimitBlkdMethodErr, logStorageHigh=logStorageHigh, totalBandwidth=totalBandwidth, ipsWebAddrTransReqReDirection=ipsWebAddrTransReqReDirection, sslProxyAddress=sslProxyAddress, httpSrvrNumReqEnqueue=httpSrvrNumReqEnqueue, totalServers=totalServers, sslSrvrTotReqAccepted=sslSrvrTotReqAccepted, systemFailOver=systemFailOver, systemSerialNumber=systemSerialNumber, sslSrvrNumFreeConn=sslSrvrNumFreeConn, webCmprNoOfReqCompressed=webCmprNoOfReqCompressed, bwsStats=bwsStats, sslSrvrTotTimedout=sslSrvrTotTimedout, httpSrvrOutBytes=httpSrvrOutBytes, sslSrvrOutBytes=sslSrvrOutBytes, bwsIpsAccessCtrlStatsTable=bwsIpsAccessCtrlStatsTable, tempCritical=tempCritical, bwsSslSrvrStatsTable=bwsSslSrvrStatsTable, httpSrvrTotReqRejected=httpSrvrTotReqRejected, ipsWebAddrTransReqUrlReWritten=ipsWebAddrTransReqUrlReWritten, ipsUrlPolicyTotDropped=ipsUrlPolicyTotDropped, virusDefUpdates=virusDefUpdates, bws=bws, bwsSslProxyStatsTable=bwsSslProxyStatsTable, bwsIpsReqSrvcStatsTable=bwsIpsReqSrvcStatsTable, sslSrvrTotRefused=sslSrvrTotRefused, srvcName=srvcName, bwsHttpProxyStatsEntry=bwsHttpProxyStatsEntry, bwsCompressionStatsEntry=bwsCompressionStatsEntry, ipsAccessCtrlAccessAttempts=ipsAccessCtrlAccessAttempts, bwsMIBCompliances=bwsMIBCompliances, webCachePort=webCachePort, sslProxyHandshakeAttempts=sslProxyHandshakeAttempts, bwsCompressionStatsTable=bwsCompressionStatsTable, sharedSecretKeyAboutToExpire=sharedSecretKeyAboutToExpire, dataPortLinkUp=dataPortLinkUp, ipsAccessCtrlInvalidCookie=ipsAccessCtrlInvalidCookie, ipsLrnSrvcTimeLocked=ipsLrnSrvcTimeLocked, bwsServiceStatusEntry=bwsServiceStatusEntry, ipsUrlNormEncodingErr=ipsUrlNormEncodingErr, bwsServiceStatusTable=bwsServiceStatusTable, ipsCookieSecCookieDecrypted=ipsCookieSecCookieDecrypted, httpSrvrAvgReqPerConn=httpSrvrAvgReqPerConn)
