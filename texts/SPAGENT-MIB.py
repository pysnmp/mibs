#
# PySNMP MIB module SPAGENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/akcp/SPAGENT-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 02:36:34 2024
# On host fv-az1200-411 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32, NotificationType, MibIdentifier, Gauge32, enterprises, Integer32, Counter32, Counter64, IpAddress, TimeTicks, ModuleIdentity, ObjectIdentity, NotificationType, Opaque = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32", "NotificationType", "MibIdentifier", "Gauge32", "enterprises", "Integer32", "Counter32", "Counter64", "IpAddress", "TimeTicks", "ModuleIdentity", "ObjectIdentity", "NotificationType", "Opaque")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
akcp = MibIdentifier((1, 3, 6, 1, 4, 1, 3854))
sensorProbe = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1))
spSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 1))
spStatus = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("warning", 3), ("critical", 4), ("sensorError", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spStatus.setStatus('mandatory')
if mibBuilder.loadTexts: spStatus.setDescription('The current status of this sensorProbe. The status of the sensorProbe is the worst status of all the sensors under the control of this sensorProbe.')
spManufName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spManufName.setStatus('mandatory')
if mibBuilder.loadTexts: spManufName.setDescription('The manufacturers name')
spHelpUrl = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spHelpUrl.setStatus('mandatory')
if mibBuilder.loadTexts: spHelpUrl.setDescription('The URL of the web based help')
spProductName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spProductName.setStatus('mandatory')
if mibBuilder.loadTexts: spProductName.setDescription('The product name')
spHostName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spHostName.setStatus('mandatory')
if mibBuilder.loadTexts: spHostName.setDescription('The hostname')
spStatusEachModule = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 1, 10))
spStatusRJ45 = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("warning", 3), ("critical", 4), ("sensorError", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spStatusRJ45.setStatus('mandatory')
if mibBuilder.loadTexts: spStatusRJ45.setDescription('The status of the sensorProbe is the worst status of all sensors on RJ45 port')
spStatusNoVideoSignal = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("warning", 3), ("critical", 4), ("sensorError", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spStatusNoVideoSignal.setStatus('mandatory')
if mibBuilder.loadTexts: spStatusNoVideoSignal.setDescription('The status of the sensorProbe is the worst status of all No Video Signal sensors')
spStatusSoundDetector = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("warning", 3), ("critical", 4), ("sensorError", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spStatusSoundDetector.setStatus('mandatory')
if mibBuilder.loadTexts: spStatusSoundDetector.setDescription('The status of the sensorProbe is the worst status of Sound Detector sensors')
spStatusVirtual = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("warning", 3), ("critical", 4), ("sensorError", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spStatusVirtual.setStatus('mandatory')
if mibBuilder.loadTexts: spStatusVirtual.setDescription('The status of the sensorProbe is the worst status of all Virtual sensors ')
spStatusSoftMotion = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("warning", 3), ("critical", 4), ("sensorError", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spStatusSoftMotion.setStatus('mandatory')
if mibBuilder.loadTexts: spStatusSoftMotion.setDescription('The status of the sensorProbe is the worst status of all Camera Motion Detector sensors ')
spSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2))
sensorProbeDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2))
sensorProbeEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1))
sensorProbeHost = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHost.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHost.setDescription('The Host of this sensor, this is the IP address')
sensorProbeUseDHCP = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeUseDHCP.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeUseDHCP.setDescription('To use DHCP enter a 1, to use a static IP address enter a 2')
sensorProbeMAC = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeMAC.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMAC.setDescription('The MAC address of this system')
sensorProbeSetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSetCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSetCommunity.setDescription('The sensorProbe community string used for snmp Sets')
sensorProbeGetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeGetCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeGetCommunity.setDescription('The sensorProbe community string used for snmp Gets')
sensorProbeTempTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16), )
if mibBuilder.loadTexts: sensorProbeTempTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempTable.setDescription('This table contains the data for every Temperature Sensor in the SensorArray. Each row in the table contains data for a different Temperature Sensor.')
sensorProbeTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTempIndex"))
if mibBuilder.loadTexts: sensorProbeTempEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempEntry.setDescription('This is an entry in the sensorProbeTempEntry Table')
sensorProbeTempDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempDescription.setDescription('A Description of this sensor')
sensorProbeTempLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempLocation.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempLocation.setDescription('The physical location of this sensor')
sensorProbeTempDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTempDegree.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempDegree.setDescription('The degrees in this sensor')
sensorProbeTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTempStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempStatus.setDescription('The current status of this Sensor')
sensorProbeTempOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTempOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempOnline.setDescription('If this Sensor is currently online')
sensorProbeTempGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeTempHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempHighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensorProbeTempHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorProbeTempLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempLowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorProbeTempLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorProbeTempRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorProbeTempDegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempDegreeType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempDegreeType.setDescription('The degrees are in fahrenheit(0) or in celsius(1)')
sensorProbeTempSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("type1", 0), ("type2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSensorType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempSensorType.setDescription('The type of temperture sensor')
sensorProbeTempDegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTempDegreeRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempDegreeRaw.setDescription('SP Only: The raw degree data from the temperature sensor, slightly higher resolution')
sensorProbeTempEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempEmailTrapLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempEmailTrapLimit.setDescription('Enable email/trap limit feature')
sensorProbeTempEmailTrapSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempEmailTrapSchedule.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempEmailTrapSchedule.setDescription('SP Only: Email/trap limit schedule for this sensor')
sensorProbeTempEmailTrapInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempEmailTrapInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempEmailTrapInterval.setDescription('Minimum time between each [email/trap:SP, only trap:CP8] (can be from 0 to 60 minutes).')
sensorProbeTempSendNormalTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSendNormalTrap.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempSendNormalTrap.setDescription('Enable sending email/trap when sensor goes to normal')
sensorProbeTempDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorProbeTempDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorProbeTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTempIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempIndex.setDescription('The index into the temperature sensor table')
sensorProbeTempRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempRelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeTempRelayOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempRelayOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempRelayOnPort.setDescription('The sensor port that the relay will listen to. If this is set to 255, then the relay will not listen to any sensor ports')
sensorProbeTempRelayActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempRelayActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempRelayActiveStatus.setDescription('Sensor status that will activate the relay')
sensorProbeTempRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempRelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeTempEmailInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempEmailInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempEmailInterval.setDescription('CP8 Only: Minimum time between each email (can be from 0 to 60 minutes)')
sensorProbeTempIndexCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTempIndexCount.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempIndexCount.setDescription('Number of Temperature sensor online')
sensorProbeTempOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempOffset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempOffset.setDescription('Temperature Offset reading')
sensorProbeTempSirenCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSirenCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempSirenCycleTime.setDescription('Siren toggle period in seconds for Cycle action.')
sensorProbeTempSirenOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSirenOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempSirenOnPort.setDescription('The sensor port that the siren will listen to. If this is set to 255, then the siren will not listen to any sensor ports')
sensorProbeTempSirenActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSirenActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempSirenActiveStatus.setDescription('Sensor status that will activate the siren')
sensorProbeTempSirenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSirenAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempSirenAction.setDescription('What the siren will do when the listened to port status turns to the specified active status.')
sensorProbeTempAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempAcknowledgement.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempAcknowledgement.setDescription('Acknowledged sensor error and stop notification')
sensorProbeTempSirenDelayAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSirenDelayAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempSirenDelayAlarm.setDescription('Siren delay in seconds before start Alarm.')
sensorProbeTempURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 36), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempURL.setDescription('Sensor URL link.')
sensorProbeTempOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempOpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempOpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeTempDatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempDatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempDatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeTempContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeTempContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeTempContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeTempContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeTempContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeTempContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeTempCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempCalendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempCalendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeThermostatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatIndex.setDescription('A unique value for each sensor thermostat port.')
sensorProbeThermostatDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatDescription.setDescription('A Description of this sensor thermostat')
sensorProbeThermostatValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatValue.setDescription('The value in this sensor')
sensorProbeThermostatOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatOnline.setDescription('If this Sensor is currently online')
sensorProbeThermostatGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeThermostatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatMode.setDescription('To select the thermostat mode for working on time-bases(1) or normal(0).')
sensorProbeThermostatRelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatRelayControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatRelayControlPort.setDescription('To select a relay port to be controled by this thermostat sensor.')
sensorProbeThermostatNormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatNormalAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatNormalAction1.setDescription('Profile1: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatHighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatHighLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatHighLimit1.setDescription('Profile1: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatHighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatHighLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatHighLimitAction1.setDescription('Profile1: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatLowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatLowLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatLowLimit1.setDescription('Profile1: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatLowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatLowLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatLowLimitAction1.setDescription('Profile1: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatNormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatNormalAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatNormalAction2.setDescription('Profile2: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatHighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatHighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatHighLimit2.setDescription('Profile2: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatHighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatHighLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatHighLimitAction2.setDescription('Profile2: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatLowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatLowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatLowLimit2.setDescription('Profile2: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatLowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatLowLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatLowLimitAction2.setDescription('Profile2: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatEnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 63), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatEnableTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatEnableTime.setDescription('Time to enable on Thermostat')
sensorProbeTempSendNormalMail = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSendNormalMail.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempSendNormalMail.setDescription('Enable sending email when sensor goes to normal')
sensorProbeTempSendTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSendTrap.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempSendTrap.setDescription('Enable sending trap when sensor change status')
sensorProbeTempSendMail = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSendMail.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempSendMail.setDescription('Enable sending email when sensor change status')
sensorProbeHumidityTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17), )
if mibBuilder.loadTexts: sensorProbeHumidityTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityTable.setDescription('This table contains the data for every Humidity Sensor in the SensorArray. Each row in the table contains data for a different Humidity Sensor.')
sensorProbeHumidityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeHumidityIndex"))
if mibBuilder.loadTexts: sensorProbeHumidityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityEntry.setDescription('This is an entry in the sensorProbeHumidityEntry Table')
sensorProbeHumidityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityDescription.setDescription('A Description of this sensor')
sensorProbeHumidityLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityLocation.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityLocation.setDescription('The physical location of this sensor')
sensorProbeHumidityPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeHumidityPercent.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityPercent.setDescription('The relative humidity percentage measured by this sensor')
sensorProbeHumidityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeHumidityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityStatus.setDescription('The current status of this Sensor')
sensorProbeHumidityOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeHumidityOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityOnline.setDescription('If this Sensor is currently online')
sensorProbeHumidityGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeHumidityHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityHighWarning.setDescription('How high the relative humidity this sensor measures before it sends a warning')
sensorProbeHumidityHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityHighCritical.setDescription('How high the relative humidity this sensor measures before it becomes critical')
sensorProbeHumidityLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityLowWarning.setDescription('How low the relative humidity this sensor measures before it sends a warning')
sensorProbeHumidityLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityLowCritical.setDescription('How low the relative humidity this sensor measures before it becomes critical')
sensorProbeHumidityRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityRearm.setDescription('The percent relative humidity to rearm the status. For example if status goes from normal to warning, the humidity must go down spAnalogueRearm below warning before the status goes to normal')
sensorProbeHumidityRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeHumidityRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage. This number can go from 0 to 1023 depending on the input voltage')
sensorProbeHumidityLowVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityLowVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityLowVoltage.setDescription('SP Only: The low voltage range for use in AtoD conversion.')
sensorProbeHumidityHighVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityHighVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityHighVoltage.setDescription('SP Only: The high voltage range for use in AtoD conversion.')
sensorProbeHumidityEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityEmailTrapLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityEmailTrapLimit.setDescription('Enable email/trap limit feature')
sensorProbeHumidityEmailTrapSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityEmailTrapSchedule.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityEmailTrapSchedule.setDescription('SP Only: Email/trap limit schedule for this sensor')
sensorProbeHumidityEmailTrapInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityEmailTrapInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityEmailTrapInterval.setDescription('Minimum time between each [email/trap:SP, only trap:CP8] (can be from 0 to 60 minutes)')
sensorProbeHumiditySendNormalTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySendNormalTrap.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumiditySendNormalTrap.setDescription('Enable sending email/trap when sensor goes to normal')
sensorProbeHumidityDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorProbeHumidityDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorProbeHumidityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeHumidityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityIndex.setDescription('The index into the Humidity sensor table')
sensorProbeHumidityAtoDAmountMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityAtoDAmountMaxVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityAtoDAmountMaxVoltage.setDescription('The maximum scale of DC voltage conversion.')
sensorProbeHumidityAtoDAmountBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityAtoDAmountBaseVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityAtoDAmountBaseVoltage.setDescription('The base scale of DC voltage conversion.')
sensorProbeHumidityAtoDTypeUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absolute", 1), ("percent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityAtoDTypeUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityAtoDTypeUnit.setDescription('Type of scale for use in DC voltage conversion.')
sensorProbeHumidityDcUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityDcUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityDcUnit.setDescription('Display unit in DC voltage conversion.')
sensorProbeHumidityAtoDJumper = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-600, -400, -300, -200, -100, 100, 200, 300, 400, 600))).clone(namedValues=NamedValues(("jumperAt-60", -600), ("jumperAt-40", -400), ("jumperAt-30", -300), ("jumperAt-20", -200), ("jumperAt-10", -100), ("jumperAt10", 100), ("jumperAt20", 200), ("jumperAt30", 300), ("jumperAt40", 400), ("jumperAt60", 600)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityAtoDJumper.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityAtoDJumper.setDescription('Selected voltage scale (jumper 0) in DC voltage conversion.')
sensorProbeHumidityRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityRelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeHumidityRelayOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityRelayOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityRelayOnPort.setDescription('The sensor port that the relay will listen to. If this is set to 255, then the relay will not listen to any sensor ports')
sensorProbeHumidityRelayActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityRelayActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityRelayActiveStatus.setDescription('Sensor status that will activate the relay')
sensorProbeHumidityRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityRelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeHumidityEmailInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityEmailInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityEmailInterval.setDescription('CP8 Only: Minimum time between each emial (can be from 0 to 60 minutes)')
sensorProbeHumidity4to20mAUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 34), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidity4to20mAUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidity4to20mAUnit.setDescription('Display unit in DC voltage conversion.')
sensorProbeHumidityIndexCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeHumidityIndexCount.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityIndexCount.setDescription('Number of Humidity sensor online')
sensorProbeHumidityOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityOffset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityOffset.setDescription('Humidity Offset reading')
sensorProbeHumiditySirenCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySirenCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumiditySirenCycleTime.setDescription('Siren toggle period in seconds for Cycle action.')
sensorProbeHumiditySirenOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySirenOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumiditySirenOnPort.setDescription('The sensor port that the siren will listen to. If this is set to 255, then the siren will not listen to any sensor ports')
sensorProbeHumiditySirenActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySirenActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumiditySirenActiveStatus.setDescription('Sensor status that will activate the siren')
sensorProbeHumiditySirenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySirenAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumiditySirenAction.setDescription('What the siren will do when the listened to port status turns to the specified active status.')
sensorProbeHumidityAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityAcknowledgement.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityAcknowledgement.setDescription('Acknowledged sensor error and stop notification')
sensorProbeHumiditySirenDelayAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySirenDelayAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumiditySirenDelayAlarm.setDescription('Siren delay in seconds before start Alarm.')
sensorProbeHumidityURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityURL.setDescription('Sensor URL link.')
sensorProbeHumidityOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityOpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityOpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeHumidityDatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityDatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityDatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeHumidityContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeHumidityContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeHumidityContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeHumidityContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeHumidityContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeHumidityContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeHumidityCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityCalendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityCalendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeHumiditySendNormalMail = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySendNormalMail.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumiditySendNormalMail.setDescription('Enable sending email when sensor goes to normal')
sensorProbeHumiditySendTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySendTrap.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumiditySendTrap.setDescription('Enable sending trap when sensor change status')
sensorProbeHumiditySendMail = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySendMail.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumiditySendMail.setDescription('Enable sending email when sensor change status')
sensorProbeIDCVVoltateRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIDCVVoltateRatio.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIDCVVoltateRatio.setDescription('iDCV calibrate voltate ratio')
sensorProbeIDCVErrorFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeIDCVErrorFlag.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIDCVErrorFlag.setDescription('iDCV error flag')
sensorProbeIDCVCalibrate = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIDCVCalibrate.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIDCVCalibrate.setDescription('iDCV calibrate')
sensorProbeAirFlowProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("analogType", 0), ("i2cType", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeAirFlowProtocolType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeAirFlowProtocolType.setDescription('Air flow protocol type')
sensorProbeAirFlowSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeAirFlowSensitivity.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeAirFlowSensitivity.setDescription('Air flow (AFS00) sensitivity')
sensorProbeAirFlowNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("presense", 0), ("absense", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeAirFlowNormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeAirFlowNormalState.setDescription('Air flow (AFS00) normal state')
sensorProbeAirFlowCalibrate = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeAirFlowCalibrate.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeAirFlowCalibrate.setDescription('Air flow (AFS00) normal state')
sensorProbeSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18), )
if mibBuilder.loadTexts: sensorProbeSwitchTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchTable.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeSwitchIndex"))
if mibBuilder.loadTexts: sensorProbeSwitchEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchEntry.setDescription('This is an entry in the sensorProbeSwitchEntry Table')
sensorProbeSwitchDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchDescription.setDescription('A Description of this sensor Switch')
sensorProbeSwitchLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchLocation.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchLocation.setDescription('The physical location of this sensor Switch')
sensorProbeSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSwitchStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchStatus.setDescription('The current status of this Sensor, only input switches have a status')
sensorProbeSwitchOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSwitchOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchOnline.setDescription('If this Sensor is currently online')
sensorProbeSwitchGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeSwitchDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchDirection.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchDirection.setDescription('To set a switch to input enter 0. To set a switch to output enter 1')
sensorProbeSwitchNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchNormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchNormalState.setDescription('The normal state of an input switch. If an input switch is in this state it is normal, else it is critical. An open switch senses +5 volts. A closed switch senses 0 volts.')
sensorProbeSwitchOutputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchOutputLevel.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchOutputLevel.setDescription('An output swith can be set to this level')
sensorProbeSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14))).clone(namedValues=NamedValues(("temperature", 1), ("fourTo20mA", 2), ("humidity", 3), ("water", 4), ("atod", 5), ("security", 6), ("airflow", 8), ("siren", 9), ("dryContact", 10), ("voltage", 12), ("relay", 13), ("motion", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSensorType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSensorType.setDescription('Enter the type of this Sensor')
sensorProbeSwitchEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchEmailTrapLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchEmailTrapLimit.setDescription('Enable email/trap limit feature')
sensorProbeSwitchEmailTrapSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchEmailTrapSchedule.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchEmailTrapSchedule.setDescription('SP Only: Email/trap limit schedule for this sensor')
sensorProbeSwitchEmailTrapInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchEmailTrapInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchEmailTrapInterval.setDescription('Minimum time between each [email/trap:SP, only trap:CP8] (can be from 0 to 60 minutes)')
sensorProbeSwitchSendNormalTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSendNormalTrap.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchSendNormalTrap.setDescription('Enable sending email/trap when sensor goes to normal')
sensorProbeSwitchDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorProbeSwitchDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorProbeSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 67))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSwitchIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchIndex.setDescription('The index into the Switch sensor table')
sensorProbeSwitchRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchRelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeSwitchRelayOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchRelayOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchRelayOnPort.setDescription('The sensor port that the relay will listen to. If this is set to 255, then the relay will not listen to any sensor ports')
sensorProbeSwitchRelayActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchRelayActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchRelayActiveStatus.setDescription('Sensor status that will activate the relay')
sensorProbeSwitchRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchRelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeSwitchEmailInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchEmailInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchEmailInterval.setDescription('CP8 Only: Minimum time between each email (can be from 0 to 60 minutes)')
sensorProbeSwitchRelayOutputVoltStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 10, 11))).clone(namedValues=NamedValues(("sensorError", 7), ("noVoltagePresent", 10), ("voltagePresent", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSwitchRelayOutputVoltStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchRelayOutputVoltStatus.setDescription('SP Only: The current voltage status of the relay')
sensorProbeSwitchManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchManualRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchManualRelayCycleTime.setDescription('Relay toggle period in seconds for Manual Cycle action.')
sensorProbeSwitchManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchManualRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchManualRelayAction.setDescription('Control the relay manualy')
sensorProbeSwitchRelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchRelayDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchRelayDescOn.setDescription('Description of relay On')
sensorProbeSwitchRelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchRelayDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchRelayDescOff.setDescription('Description of relay Off')
sensorProbeSwitchIndexCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSwitchIndexCount.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchIndexCount.setDescription('Number of Switch sensor online')
sensorProbeSwitchSirenCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSirenCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchSirenCycleTime.setDescription('Siren toggle period in seconds for Cycle action.')
sensorProbeSwitchSirenOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSirenOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchSirenOnPort.setDescription('The sensor port that the siren will listen to. If this is set to 255, then the siren will not listen to any sensor ports')
sensorProbeSwitchSirenActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSirenActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchSirenActiveStatus.setDescription('Sensor status that will activate the siren')
sensorProbeSwitchSirenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSirenAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchSirenAction.setDescription('What the siren will do when the listened to port status turns to the specified active status.')
sensorProbeSwitchAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchAcknowledgement.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchAcknowledgement.setDescription('Acknowledged sensor error and stop notification')
sensorProbeSwitchSirenDelayAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSirenDelayAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchSirenDelayAlarm.setDescription('Siren delay in seconds before start Alarm.')
sensorProbeSwitchURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 35), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchURL.setDescription('Sensor URL link.')
sensorProbeSwitchOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchOpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchOpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeSwitchContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeSwitchContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeSwitchCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchCalendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchCalendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeSwitchRelayControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchRelayControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchRelayControlMode.setDescription('Relay Control Mode used for selecting the mode to control a relay.')
sensorProbeSwitchSirenControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSirenControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchSirenControlMode.setDescription('Siren Control Mode used for selecting the mode to control a siren.')
sensorProbeSwitchSendNormalMail = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSendNormalMail.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchSendNormalMail.setDescription('Enable sending email when sensor goes to normal')
sensorProbeSwitchSendTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSendTrap.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchSendTrap.setDescription('Enable sending trap when sensor change status')
sensorProbeSwitchSendMail = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSendMail.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchSendMail.setDescription('Enable sending email when sensor change status')
sensorProbeSwitchWaterRopeLeakLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeLeakLocation.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeLeakLocation.setDescription('Location of leakage of water rope sensor.')
sensorProbeSwitchWaterRopeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeLength.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeLength.setDescription('Length of water rope sensor.')
sensorProbeSwitchWaterRopeUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("meters", 0), ("feet", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeUnit.setDescription('Display unit of water rope sensor.')
sensorProbeSwitchWaterRopeImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeImpedance.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeImpedance.setDescription('Sensing wire impedance per meter value times 100')
sensorProbeSwitchWaterRopeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeRaw.setDescription('Raw value of location or length in ohms')
sensorProbeSwitchWaterRopeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("custom", 0), ("water", 1), ("fuel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeType.setDescription('Water rope sensing cable type')
sensorProbeOtherSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19))
sensorProbeIRMSSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26))
sensorProbeIRMSSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeIRMSSensorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSSensorNumber.setDescription('The total number of RMS current Sensor port.')
sensorProbeIRMSSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2), )
if mibBuilder.loadTexts: sensorProbeIRMSSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSSensorTable.setDescription('This table contains the data for every RMS current Sensor in the SensorArray. Each row in the table contains data for a different RMS current Sensor.')
sensorProbeIRMSSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeIRMSSensorIndex"))
if mibBuilder.loadTexts: sensorProbeIRMSSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSSensorEntry.setDescription('This is an entry in the sensorProbeIRMSSensorEntry Table')
sensorProbeIRMSSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeIRMSSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSSensorIndex.setDescription('A unique value for each IRMS sensor port.')
sensorProbeIRMSDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSDescription.setDescription('A Description of this sensor IRMS')
sensorProbeIRMSPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeIRMSPercent.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSPercent.setDescription('The relative IRMS percentage measured by this sensor')
sensorProbeIRMSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeIRMSStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSStatus.setDescription('The current status of this Sensor')
sensorProbeIRMSOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeIRMSOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSOnline.setDescription('If this Sensor is currently online')
sensorProbeIRMSGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeIRMSHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSHighWarning.setDescription('How high the relative IRMS this sensor measures before it sends a warning')
sensorProbeIRMSHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSHighCritical.setDescription('How high the relative IRMS this sensor measures before it becomes critical')
sensorProbeIRMSLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSLowWarning.setDescription('How low the relative IRMS this sensor measures before it sends a warning')
sensorProbeIRMSLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSLowCritical.setDescription('How low the relative IRMS this sensor measures before it becomes critical')
sensorProbeIRMSRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSRearm.setDescription('The percent relative IRMS to rearm the status. For example if status goes from normal to warning, the IRMS must go down spAnalogueRearm below warning before the status goes to normal')
sensorProbeIRMSRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeIRMSRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage. This number can go from 0 to 1023 depending on the input voltage')
sensorProbeIRMSEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSEmailTrapLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSEmailTrapLimit.setDescription('Enable email/trap limit feature')
sensorProbeIRMSDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorProbeIRMSDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorProbeIRMSRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSRelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeIRMSRelayOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSRelayOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSRelayOnPort.setDescription('The sensor port that the relay will listen to. If this is set to 255, then the relay will not listen to any sensor ports')
sensorProbeIRMSRelayActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSRelayActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSRelayActiveStatus.setDescription('Sensor status that will activate the relay')
sensorProbeIRMSRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSRelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeIRMSSirenCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSSirenCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSSirenCycleTime.setDescription('Siren toggle period in seconds for Cycle action.')
sensorProbeIRMSSirenOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSSirenOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSSirenOnPort.setDescription('The sensor port that the siren will listen to. If this is set to 255, then the siren will not listen to any sensor ports')
sensorProbeIRMSSirenActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSSirenActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSSirenActiveStatus.setDescription('Sensor status that will activate the siren')
sensorProbeIRMSSirenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSSirenAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSSirenAction.setDescription('What the siren will do when the listened to port status turns to the specified active status.')
sensorProbeIRMSAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSAcknowledgement.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSAcknowledgement.setDescription('Acknowledged sensor error and stop notification')
sensorProbeIRMSSirenDelayAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSSirenDelayAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSSirenDelayAlarm.setDescription('Siren delay in seconds before start Alarm.')
sensorProbeIRMSURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSURL.setDescription('Sensor URL link.')
sensorProbeIRMSOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSOpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSOpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeIRMSDatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSDatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSDatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeIRMSContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeIRMSContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeIRMSContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeIRMSContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeIRMSContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeIRMSContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeIRMSCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSCalendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSCalendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeVRMSSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27))
sensorProbeVRMSSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVRMSSensorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSSensorNumber.setDescription('The total number of RMS voltage Sensor port.')
sensorProbeVRMSSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2), )
if mibBuilder.loadTexts: sensorProbeVRMSSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSSensorTable.setDescription('This table contains the data for every RMS voltage Sensor in the SensorArray. Each row in the table contains data for a different RMS voltage Sensor.')
sensorProbeVRMSSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeVRMSSensorIndex"))
if mibBuilder.loadTexts: sensorProbeVRMSSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSSensorEntry.setDescription('This is an entry in the sensorProbeVRMSSensorEntry Table')
sensorProbeVRMSSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVRMSSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSSensorIndex.setDescription('A unique value for each VRMS sensor port.')
sensorProbeVRMSDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSDescription.setDescription('A Description of this sensor VRMS')
sensorProbeVRMSPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVRMSPercent.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSPercent.setDescription('The relative VRMS percentage measured by this sensor')
sensorProbeVRMSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVRMSStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSStatus.setDescription('The current status of this Sensor')
sensorProbeVRMSOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVRMSOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSOnline.setDescription('If this Sensor is currently online')
sensorProbeVRMSGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeVRMSHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSHighWarning.setDescription('How high the relative VRMS this sensor measures before it sends a warning')
sensorProbeVRMSHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSHighCritical.setDescription('How high the relative VRMS this sensor measures before it becomes critical')
sensorProbeVRMSLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSLowWarning.setDescription('How low the relative VRMS this sensor measures before it sends a warning')
sensorProbeVRMSLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSLowCritical.setDescription('How low the relative VRMS this sensor measures before it becomes critical')
sensorProbeVRMSRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSRearm.setDescription('The percent relative VRMS to rearm the status. For example if status goes from normal to warning, the VRMS must go down spAnalogueRearm below warning before the status goes to normal')
sensorProbeVRMSRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVRMSRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage. This number can go from 0 to 1023 depending on the input voltage')
sensorProbeVRMSEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSEmailTrapLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSEmailTrapLimit.setDescription('Enable email/trap limit feature')
sensorProbeVRMSDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorProbeVRMSDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorProbeVRMSRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSRelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeVRMSRelayOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSRelayOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSRelayOnPort.setDescription('The sensor port that the relay will listen to. If this is set to 255, then the relay will not listen to any sensor ports')
sensorProbeVRMSRelayActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSRelayActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSRelayActiveStatus.setDescription('Sensor status that will activate the relay')
sensorProbeVRMSRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSRelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeVRMSSirenCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSSirenCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSSirenCycleTime.setDescription('Siren toggle period in seconds for Cycle action.')
sensorProbeVRMSSirenOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSSirenOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSSirenOnPort.setDescription('The sensor port that the siren will listen to. If this is set to 255, then the siren will not listen to any sensor ports')
sensorProbeVRMSSirenActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSSirenActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSSirenActiveStatus.setDescription('Sensor status that will activate the siren')
sensorProbeVRMSSirenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSSirenAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSSirenAction.setDescription('What the siren will do when the listened to port status turns to the specified active status.')
sensorProbeVRMSAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSAcknowledgement.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSAcknowledgement.setDescription('Acknowledged sensor error and stop notification')
sensorProbeVRMSSirenDelayAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSSirenDelayAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSSirenDelayAlarm.setDescription('Siren delay in seconds before start Alarm.')
sensorProbeVRMSvoltageMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(110, 220))).clone(namedValues=NamedValues(("ac-110", 110), ("ac-220", 220)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSvoltageMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSvoltageMode.setDescription('VRMS Voltage Mode.')
sensorProbeVRMSURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 44), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSURL.setDescription('Sensor URL link.')
sensorProbeVRMSOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSOpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSOpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeVRMSDatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSDatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSDatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeVRMSContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeVRMSContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeVRMSContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeVRMSContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeVRMSContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeVRMSContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeVRMSCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSCalendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSCalendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeEnergySensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28))
sensorProbeEnergySensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeEnergySensorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergySensorNumber.setDescription('The total number of Energy Sensor port.')
sensorProbeEnergySensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2), )
if mibBuilder.loadTexts: sensorProbeEnergySensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergySensorTable.setDescription('This table contains the data for every Energy Sensor in the SensorArray. Each row in the table contains data for a different Energy Sensor.')
sensorProbeEnergySensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeEnergySensorIndex"))
if mibBuilder.loadTexts: sensorProbeEnergySensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergySensorEntry.setDescription('This is an entry in the sensorProbeEnergySensorEntry Table')
sensorProbeEnergySensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeEnergySensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergySensorIndex.setDescription('A unique value for each Energy sensor port.')
sensorProbeEnergyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyDescription.setDescription('A Description of this sensor Energy')
sensorProbeEnergyPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeEnergyPercent.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyPercent.setDescription('The relative Energy percentage measured by this sensor')
sensorProbeEnergyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeEnergyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyStatus.setDescription('The current status of this Sensor')
sensorProbeEnergyOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeEnergyOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyOnline.setDescription('If this Sensor is currently online')
sensorProbeEnergyGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeEnergyHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyHighWarning.setDescription('How high the relative Energy this sensor measures before it sends a warning')
sensorProbeEnergyHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyHighCritical.setDescription('How high the relative Energy this sensor measures before it becomes critical')
sensorProbeEnergyLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyLowWarning.setDescription('How low the relative Energy this sensor measures before it sends a warning')
sensorProbeEnergyLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyLowCritical.setDescription('How low the relative Energy this sensor measures before it becomes critical')
sensorProbeEnergyRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyRearm.setDescription('The percent relative Energy to rearm the status. For example if status goes from normal to warning, the Energy must go down spAnalogueRearm below warning before the status goes to normal')
sensorProbeEnergyRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeEnergyRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage. This number can go from 0 to 1023 depending on the input voltage')
sensorProbeEnergyEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyEmailTrapLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyEmailTrapLimit.setDescription('Enable email/trap limit feature')
sensorProbeEnergyDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorProbeEnergyDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorProbeEnergyRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyRelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeEnergyRelayOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyRelayOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyRelayOnPort.setDescription('The sensor port that the relay will listen to. If this is set to 255, then the relay will not listen to any sensor ports')
sensorProbeEnergyRelayActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyRelayActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyRelayActiveStatus.setDescription('Sensor status that will activate the relay')
sensorProbeEnergyRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyRelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeEnergySirenCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergySirenCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergySirenCycleTime.setDescription('Siren toggle period in seconds for Cycle action.')
sensorProbeEnergySirenOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergySirenOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergySirenOnPort.setDescription('The sensor port that the siren will listen to. If this is set to 255, then the siren will not listen to any sensor ports')
sensorProbeEnergySirenActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergySirenActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergySirenActiveStatus.setDescription('Sensor status that will activate the siren')
sensorProbeEnergySirenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergySirenAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergySirenAction.setDescription('What the siren will do when the listened to port status turns to the specified active status.')
sensorProbeEnergyAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyAcknowledgement.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyAcknowledgement.setDescription('Acknowledged sensor error and stop notification')
sensorProbeEnergySirenDelayAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergySirenDelayAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergySirenDelayAlarm.setDescription('Siren delay in seconds before start Alarm.')
sensorProbeEnergyReadingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("active", 0), ("apparent", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyReadingMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyReadingMode.setDescription('Energy Meter Reading Mode.')
sensorProbeEnergyURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 44), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyURL.setDescription('Sensor URL link.')
sensorProbeEnergyOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyOpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyOpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeEnergyDatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyDatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyDatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeEnergyContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeEnergyContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeEnergyContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeEnergyContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeEnergyContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeEnergyContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeEnergyCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyCalendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyCalendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeRelayArraySensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29))
sensorProbeRelayArrayPort1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1))
sensorProbeRelayArrayPort1Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Number.setDescription('The total number of port on the RelayArray.')
sensorProbeRelayArrayPort1Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2), )
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeRelayArrayPort1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeRelayArrayPort1Index"))
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Entry.setDescription('This is an entry in the sensorProbeRelayArrayPort1 Table')
sensorProbeRelayArrayPort1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Index.setDescription('A unique value for each sensor RelayArray port.')
sensorProbeRelayArrayPort1Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Description.setDescription('A Description of this sensor RelayArray')
sensorProbeRelayArrayPort1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Status.setDescription('The current status of this Sensor')
sensorProbeRelayArrayPort1Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Online.setDescription('If this Sensor is currently online')
sensorProbeRelayArrayPort1GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeRelayArrayPort1NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1NormalState.setDescription('The normal state of RelayArray')
sensorProbeRelayArrayPort1RelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1RelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1RelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeRelayArrayPort1RelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1RelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1RelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeRelayArrayPort1ManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1ManualRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1ManualRelayCycleTime.setDescription('Relay toggle period in seconds for Manual Cycle action.')
sensorProbeRelayArrayPort1ManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1ManualRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1ManualRelayAction.setDescription('Control the relay manualy')
sensorProbeRelayArrayPort1RelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1RelayDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1RelayDescOn.setDescription('Description of relay On')
sensorProbeRelayArrayPort1RelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1RelayDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1RelayDescOff.setDescription('Description of relay Off')
sensorProbeRelayArrayPort1URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1URL.setDescription('Sersor URL link.')
sensorProbeRelayArrayPort1OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeRelayArrayPort1ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1ControlMode.setDescription('Relay Control Mode used for selecting the mode to control a relay.')
sensorProbeRelayArrayPort2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2))
sensorProbeRelayArrayPort2Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Number.setDescription('The total number of port on the RelayArray.')
sensorProbeRelayArrayPort2Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2), )
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeRelayArrayPort2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeRelayArrayPort2Index"))
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Entry.setDescription('This is an entry in the sensorProbeRelayArrayPort2 Table')
sensorProbeRelayArrayPort2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Index.setDescription('A unique value for each sensor RelayArray port.')
sensorProbeRelayArrayPort2Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Description.setDescription('A Description of this sensor RelayArray')
sensorProbeRelayArrayPort2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Status.setDescription('The current status of this Sensor')
sensorProbeRelayArrayPort2Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Online.setDescription('If this Sensor is currently online')
sensorProbeRelayArrayPort2GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeRelayArrayPort2NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2NormalState.setDescription('The normal state of RleayArray')
sensorProbeRelayArrayPort2RelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2RelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2RelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeRelayArrayPort2RelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2RelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2RelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeRelayArrayPort2ManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2ManualRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2ManualRelayCycleTime.setDescription('Relay toggle period in seconds for Manual Cycle action.')
sensorProbeRelayArrayPort2ManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2ManualRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2ManualRelayAction.setDescription('Control the relay manualy')
sensorProbeRelayArrayPort2RelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2RelayDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2RelayDescOn.setDescription('Description of relay On')
sensorProbeRelayArrayPort2RelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2RelayDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2RelayDescOff.setDescription('Description of relay Off')
sensorProbeRelayArrayPort2URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2URL.setDescription('Sensor URL link')
sensorProbeRelayArrayPort2OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeRelayArrayPort2ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2ControlMode.setDescription('Relay Control Mode used for selecting the mode to control a relay.')
sensorProbeRelayArrayPort3 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3))
sensorProbeRelayArrayPort3Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Number.setDescription('The total number of port on the RelayArray.')
sensorProbeRelayArrayPort3Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2), )
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeRelayArrayPort3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeRelayArrayPort3Index"))
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Entry.setDescription('This is an entry in the sensorProbeRelayArrayPort3 Table')
sensorProbeRelayArrayPort3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Index.setDescription('A unique value for each sensor RelayArray port.')
sensorProbeRelayArrayPort3Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Description.setDescription('A Description of this sensor RelayArray')
sensorProbeRelayArrayPort3Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Status.setDescription('The current status of this Sensor')
sensorProbeRelayArrayPort3Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Online.setDescription('If this Sensor is currently online')
sensorProbeRelayArrayPort3GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeRelayArrayPort3NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3NormalState.setDescription('The normal state of RleayArray')
sensorProbeRelayArrayPort3RelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3RelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3RelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeRelayArrayPort3RelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3RelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3RelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeRelayArrayPort3ManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3ManualRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3ManualRelayCycleTime.setDescription('Relay toggle period in seconds for Manual Cycle action.')
sensorProbeRelayArrayPort3ManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3ManualRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3ManualRelayAction.setDescription('Control the relay manualy')
sensorProbeRelayArrayPort3RelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3RelayDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3RelayDescOn.setDescription('Description of relay On')
sensorProbeRelayArrayPort3RelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3RelayDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3RelayDescOff.setDescription('Description of relay Off')
sensorProbeRelayArrayPort3URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3URL.setDescription('Sensor URL link.')
sensorProbeRelayArrayPort3OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeRelayArrayPort3ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3ControlMode.setDescription('Relay Control Mode used for selecting the mode to control a relay.')
sensorProbeRelayArrayPort4 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4))
sensorProbeRelayArrayPort4Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Number.setDescription('The total number of port on the RelayArray.')
sensorProbeRelayArrayPort4Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2), )
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeRelayArrayPort4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeRelayArrayPort4Index"))
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Entry.setDescription('This is an entry in the sensorProbeRelayArrayPort4 Table')
sensorProbeRelayArrayPort4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Index.setDescription('A unique value for each sensor RelayArray port.')
sensorProbeRelayArrayPort4Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Description.setDescription('A Description of this sensor RelayArray')
sensorProbeRelayArrayPort4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Status.setDescription('The current status of this Sensor')
sensorProbeRelayArrayPort4Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Online.setDescription('If this Sensor is currently online')
sensorProbeRelayArrayPort4GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeRelayArrayPort4NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4NormalState.setDescription('The normal state of RleayArray')
sensorProbeRelayArrayPort4RelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4RelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4RelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeRelayArrayPort4RelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4RelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4RelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeRelayArrayPort4ManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4ManualRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4ManualRelayCycleTime.setDescription('Relay toggle period in seconds for Manual Cycle action.')
sensorProbeRelayArrayPort4ManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4ManualRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4ManualRelayAction.setDescription('Control the relay manualy')
sensorProbeRelayArrayPort4RelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4RelayDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4RelayDescOn.setDescription('Description of relay On')
sensorProbeRelayArrayPort4RelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4RelayDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4RelayDescOff.setDescription('Description of relay Off')
sensorProbeRelayArrayPort4URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4URL.setDescription('Sensor URL link.')
sensorProbeRelayArrayPort4OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeRelayArrayPort4ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4ControlMode.setDescription('Relay Control Mode used for selecting the mode to control a relay.')
sensorProbeRelayArrayPort5 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5))
sensorProbeRelayArrayPort5Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Number.setDescription('The total number of port on the RelayArray.')
sensorProbeRelayArrayPort5Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2), )
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeRelayArrayPort5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeRelayArrayPort5Index"))
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Entry.setDescription('This is an entry in the sensorProbeRelayArrayPort5 Table')
sensorProbeRelayArrayPort5Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Index.setDescription('A unique value for each sensor RelayArray port.')
sensorProbeRelayArrayPort5Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Description.setDescription('A Description of this sensor RelayArray')
sensorProbeRelayArrayPort5Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Status.setDescription('The current status of this Sensor')
sensorProbeRelayArrayPort5Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Online.setDescription('If this Sensor is currently online')
sensorProbeRelayArrayPort5GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeRelayArrayPort5NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5NormalState.setDescription('The normal state of RleayArray')
sensorProbeRelayArrayPort5RelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5RelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5RelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeRelayArrayPort5RelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5RelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5RelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeRelayArrayPort5ManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5ManualRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5ManualRelayCycleTime.setDescription('Relay toggle period in seconds for Manual Cycle action.')
sensorProbeRelayArrayPort5ManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5ManualRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5ManualRelayAction.setDescription('Control the relay manualy')
sensorProbeRelayArrayPort5RelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5RelayDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5RelayDescOn.setDescription('Description of relay On')
sensorProbeRelayArrayPort5RelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5RelayDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5RelayDescOff.setDescription('Description of relay Off')
sensorProbeRelayArrayPort5URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5URL.setDescription('Sensor URL link.')
sensorProbeRelayArrayPort5OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeRelayArrayPort5ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5ControlMode.setDescription('Relay Control Mode used for selecting the mode to control a relay.')
sensorProbeRelayArrayPort6 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6))
sensorProbeRelayArrayPort6Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Number.setDescription('The total number of port on the RelayArray.')
sensorProbeRelayArrayPort6Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2), )
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeRelayArrayPort6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeRelayArrayPort6Index"))
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Entry.setDescription('This is an entry in the sensorProbeRelayArrayPort6 Table')
sensorProbeRelayArrayPort6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Index.setDescription('A unique value for each sensor RelayArray port.')
sensorProbeRelayArrayPort6Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Description.setDescription('A Description of this sensor RelayArray')
sensorProbeRelayArrayPort6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Status.setDescription('The current status of this Sensor')
sensorProbeRelayArrayPort6Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Online.setDescription('If this Sensor is currently online')
sensorProbeRelayArrayPort6GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeRelayArrayPort6NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6NormalState.setDescription('The normal state of RleayArray')
sensorProbeRelayArrayPort6RelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6RelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6RelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeRelayArrayPort6RelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6RelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6RelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeRelayArrayPort6ManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6ManualRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6ManualRelayCycleTime.setDescription('Relay toggle period in seconds for Manual Cycle action.')
sensorProbeRelayArrayPort6ManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6ManualRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6ManualRelayAction.setDescription('Control the relay manualy')
sensorProbeRelayArrayPort6RelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6RelayDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6RelayDescOn.setDescription('Description of relay On')
sensorProbeRelayArrayPort6RelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6RelayDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6RelayDescOff.setDescription('Description of relay Off')
sensorProbeRelayArrayPort6URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6URL.setDescription('Sensor URL link.')
sensorProbeRelayArrayPort6OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeRelayArrayPort6ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6ControlMode.setDescription('Relay Control Mode used for selecting the mode to control a relay.')
sensorProbeRelayArrayPort7 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7))
sensorProbeRelayArrayPort7Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Number.setDescription('The total number of port on the RelayArray.')
sensorProbeRelayArrayPort7Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2), )
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeRelayArrayPort7Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeRelayArrayPort7Index"))
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Entry.setDescription('This is an entry in the sensorProbeRelayArrayPort7 Table')
sensorProbeRelayArrayPort7Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Index.setDescription('A unique value for each sensor RelayArray port.')
sensorProbeRelayArrayPort7Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Description.setDescription('A Description of this sensor RelayArray')
sensorProbeRelayArrayPort7Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Status.setDescription('The current status of this Sensor')
sensorProbeRelayArrayPort7Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Online.setDescription('If this Sensor is currently online')
sensorProbeRelayArrayPort7GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeRelayArrayPort7NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7NormalState.setDescription('The normal state of RleayArray')
sensorProbeRelayArrayPort7RelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7RelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7RelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeRelayArrayPort7RelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7RelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7RelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeRelayArrayPort7ManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7ManualRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7ManualRelayCycleTime.setDescription('Relay toggle period in seconds for Manual Cycle action.')
sensorProbeRelayArrayPort7ManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7ManualRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7ManualRelayAction.setDescription('Control the relay manualy')
sensorProbeRelayArrayPort7RelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7RelayDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7RelayDescOn.setDescription('Description of relay On')
sensorProbeRelayArrayPort7RelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7RelayDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7RelayDescOff.setDescription('Description of relay Off')
sensorProbeRelayArrayPort7URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7URL.setDescription('Sensor URL link.')
sensorProbeRelayArrayPort7OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeRelayArrayPort7ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7ControlMode.setDescription('Relay Control Mode used for selecting the mode to control a relay.')
sensorProbeRelayArrayPort8 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8))
sensorProbeRelayArrayPort8Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Number.setDescription('The total number of port on the RelayArray.')
sensorProbeRelayArrayPort8Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2), )
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeRelayArrayPort8Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeRelayArrayPort8Index"))
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Entry.setDescription('This is an entry in the sensorProbeRelayArrayPort8 Table')
sensorProbeRelayArrayPort8Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Index.setDescription('A unique value for each sensor RelayArray port.')
sensorProbeRelayArrayPort8Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Description.setDescription('A Description of this sensor RelayArray')
sensorProbeRelayArrayPort8Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Status.setDescription('The current status of this Sensor')
sensorProbeRelayArrayPort8Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Online.setDescription('If this Sensor is currently online')
sensorProbeRelayArrayPort8GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeRelayArrayPort8NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8NormalState.setDescription('The normal state of RleayArray')
sensorProbeRelayArrayPort8RelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8RelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8RelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeRelayArrayPort8RelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8RelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8RelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeRelayArrayPort8ManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8ManualRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8ManualRelayCycleTime.setDescription('Relay toggle period in seconds for Manual Cycle action.')
sensorProbeRelayArrayPort8ManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8ManualRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8ManualRelayAction.setDescription('Control the relay manualy')
sensorProbeRelayArrayPort8RelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8RelayDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8RelayDescOn.setDescription('Description of relay On')
sensorProbeRelayArrayPort8RelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8RelayDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8RelayDescOff.setDescription('Description of relay Off')
sensorProbeRelayArrayPort8URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8URL.setDescription('Sensor URL link.')
sensorProbeRelayArrayPort8OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeRelayArrayPort8ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8ControlMode.setDescription('Relay Control Mode used for selecting the mode to control a relay.')
sensorProbeVirtualAnalogSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30))
sensorProbeVirtualAnalogSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogSensorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogSensorNumber.setDescription('The total number of VirtualAnalog Sensor port.')
sensorProbeVirtualAnalogSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2), )
if mibBuilder.loadTexts: sensorProbeVirtualAnalogSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogSensorTable.setDescription('This table contains the data for every VirtualAnalog Sensor in the SensorArray. Each row in the table contains data for a different VirtualAnalog Sensor.')
sensorProbeVirtualAnalogSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeVirtualAnalogSensorIndex"))
if mibBuilder.loadTexts: sensorProbeVirtualAnalogSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogSensorEntry.setDescription('This is an entry in the sensorProbeVirtualAnalogSensorEntry Table')
sensorProbeVirtualAnalogSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 67))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogSensorIndex.setDescription('A unique value for each VirtualAnalog sensor port.')
sensorProbeVirtualAnalogDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogDescription.setDescription('A Description of this sensor')
sensorProbeVirtualAnalogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogStatus.setDescription('The current status of this Sensor')
sensorProbeVirtualAnalogOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogOnline.setDescription('If this Sensor is currently online')
sensorProbeVirtualAnalogGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeVirtualAnalogHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogHighWarning.setDescription('How high the relative VirtualAnalog this sensor measures before it sends a warning')
sensorProbeVirtualAnalogHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogHighCritical.setDescription('How high the relative VirtualAnalog this sensor measures before it becomes critical')
sensorProbeVirtualAnalogLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogLowWarning.setDescription('How low the relative VirtualAnalog this sensor measures before it sends a warning')
sensorProbeVirtualAnalogLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogLowCritical.setDescription('How low the relative VirtualAnalog this sensor measures before it becomes critical')
sensorProbeVirtualAnalogRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogRearm.setDescription('The percent relative VirtualAnalog to rearm the status. For example if status goes from normal to warning, the VirtualAnalog must go down spAnalogueRearm below warning before the status goes to normal')
sensorProbeVirtualAnalogRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage. This number can go from 0 to 1023 depending on the input voltage')
sensorProbeVirtualAnalogEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogEmailTrapLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogEmailTrapLimit.setDescription('Enable email/trap limit feature')
sensorProbeVirtualAnalogDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorProbeVirtualAnalogDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorProbeVirtualAnalogUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogUnit.setDescription('Display unit in VirtualAnalog.')
sensorProbeVirtualAnalogAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogAcknowledgement.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogAcknowledgement.setDescription('Acknowledged sensor error and stop notification')
sensorProbeVirtualAnalogURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogURL.setDescription('Sensor URL link.')
sensorProbeVirtualAnalogOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogOpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogOpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeVirtualAnalogContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeVirtualAnalogContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeVirtualAnalogContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeVirtualAnalogContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeVirtualAnalogContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeVirtualAnalogContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeVirtualAnalogCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogCalendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogCalendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeVirtualAnalogValueFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 100, 1000))).clone(namedValues=NamedValues(("x1", 1), ("x0-1", 10), ("x0-01", 100), ("x0-001", 1000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogValueFactor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogValueFactor.setDescription('To change the ratio of value.')
sensorProbeVirtualSwitchSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31))
sensorProbeVirtualSwitchSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchSensorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchSensorNumber.setDescription('The total number of VirtualSwitch Sensor port.')
sensorProbeVirtualSwitchSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2), )
if mibBuilder.loadTexts: sensorProbeVirtualSwitchSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchSensorTable.setDescription('This table contains the data for every VirtualSwitch Sensor in the SensorArray. Each row in the table contains data for a different VirtualSwitch Sensor.')
sensorProbeVirtualSwitchSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeVirtualSwitchSensorIndex"))
if mibBuilder.loadTexts: sensorProbeVirtualSwitchSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchSensorEntry.setDescription('This is an entry in the sensorProbeVirtualSwitchSensorEntry Table')
sensorProbeVirtualSwitchSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 67))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchSensorIndex.setDescription('A unique value for each VirtualSwitch sensor port.')
sensorProbeVirtualSwitchDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchDescription.setDescription('A Description of this sensor')
sensorProbeVirtualSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchStatus.setDescription('The current status of this Sensor')
sensorProbeVirtualSwitchOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchOnline.setDescription('If this Sensor is currently online')
sensorProbeVirtualSwitchGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeVirtualSwitchEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchEmailTrapLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchEmailTrapLimit.setDescription('Enable email/trap limit feature')
sensorProbeVirtualSwitchContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeVirtualSwitchContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeVirtualSwitchDescriptionCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchDescriptionCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchDescriptionCritical.setDescription('Description of status when the virsual switch is critical')
sensorProbeVirtualSwitchDescriptionNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchDescriptionNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchDescriptionNormal.setDescription('Description of status when the virsual switch is normal')
sensorProbeVirtualSwitchAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchAcknowledgement.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchAcknowledgement.setDescription('Acknowledged sensor error and stop notification')
sensorProbeVirtualSwitchURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchURL.setDescription('Sensor URL link.')
sensorProbeVirtualSwitchOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchOpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchOpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeVirtualSwitchCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchCalendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchCalendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeVirtualSwitchNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchNormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchNormalState.setDescription('The normal state of a return of the virsual switch. If a return of the virsual switch is equal this normal state value, it is normal. Otherwise, it is critical.')
sensorProbeWattHoursSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 32))
sensorProbeWattHoursSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 32, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeWattHoursSensorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeWattHoursSensorNumber.setDescription('The total number of WattHours Sensor port.')
sensorProbeWattHoursSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 32, 2), )
if mibBuilder.loadTexts: sensorProbeWattHoursSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeWattHoursSensorTable.setDescription('This table contains the data for every WattHours Sensor in the SensorArray. Each row in the table contains data for a different WattHours Sensor.')
sensorProbeWattHoursSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 32, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeWattHoursSensorIndex"))
if mibBuilder.loadTexts: sensorProbeWattHoursSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeWattHoursSensorEntry.setDescription('This is an entry in the sensorProbeWattHoursSensorEntry Table')
sensorProbeWattHoursSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 32, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeWattHoursSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeWattHoursSensorIndex.setDescription('A unique value for each WattHours sensor port.')
sensorProbeWattHoursDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 32, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeWattHoursDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeWattHoursDescription.setDescription('A Description of this sensor')
sensorProbeWattHoursPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 32, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeWattHoursPercent.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeWattHoursPercent.setDescription('The relative WattHours percentage measured by this sensor')
sensorProbeWattHoursReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 32, 2, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeWattHoursReset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeWattHoursReset.setDescription('The relative WattHours percentage measured by this sensor')
sensorProbeTemperatureArraySensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33))
sensorProbeTemperatureArrayPort1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1))
sensorProbeTemperatureArrayPort1Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Number.setDescription('The total number of port on the TemperatureArray.')
sensorProbeTemperatureArrayPort1Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2), )
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeTemperatureArrayPort1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTemperatureArrayPort1Index"))
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Entry.setDescription('This is an entry in the sensorProbeTemperatureArrayPort1 Table')
sensorProbeTemperatureArrayPort1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Index.setDescription('A unique value for each sensor TemperatureArray port.')
sensorProbeTemperatureArrayPort1Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Description.setDescription('A Description of this sensor TemperatureArray')
sensorProbeTemperatureArrayPort1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Value.setDescription('The value in this sensor')
sensorProbeTemperatureArrayPort1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Status.setDescription('The current status of this Sensor')
sensorProbeTemperatureArrayPort1Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Online.setDescription('If this Sensor is currently online')
sensorProbeTemperatureArrayPort1GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeTemperatureArrayPort1HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1HighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1HighWarning.setDescription('How hot this  sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort1HighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1HighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1HighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort1LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1LowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1LowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort1LowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1LowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1LowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort1Rearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Rearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Rearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorProbeTemperatureArrayPort1DegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1DegreeType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1DegreeType.setDescription('The degrees are in fahrenheit(0) or in celsius(1)')
sensorProbeTemperatureArrayPort1DegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1DegreeRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1DegreeRaw.setDescription('The raw degree data from the temperature sensor, slightly higher resolution')
sensorProbeTemperatureArrayPort1Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Offset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Offset.setDescription('Offset reading')
sensorProbeTemperatureArrayPort1URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1URL.setDescription('Sensor URL link.')
sensorProbeTemperatureArrayPort1OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeTemperatureArrayPort1DatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1DatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1DatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeTemperatureArrayPort1ContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeTemperatureArrayPort1ContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeTemperatureArrayPort1ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeTemperatureArrayPort1ContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeTemperatureArrayPort1ContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeTemperatureArrayPort1ContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeTemperatureArrayPort1Calendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Calendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Calendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeThermostatTemperatureArrayPort1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Index.setDescription('A unique value for each sensor thermostat port.')
sensorProbeThermostatTemperatureArrayPort1Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Description.setDescription('A Description of this sensor thermostat')
sensorProbeThermostatTemperatureArrayPort1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Value.setDescription('The value in this sensor')
sensorProbeThermostatTemperatureArrayPort1Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Online.setDescription('If this Sensor is currently online')
sensorProbeThermostatTemperatureArrayPort1GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeThermostatTemperatureArrayPort1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Mode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Mode.setDescription('To select the thermostat mode for working on time-bases(1) or normal(0).')
sensorProbeThermostatTemperatureArrayPort1RelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1RelayControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1RelayControlPort.setDescription('To select a relay port to be controled by this thermostat sensor.')
sensorProbeThermostatTemperatureArrayPort1NormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1NormalAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1NormalAction1.setDescription('Profile1: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort1HighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1HighLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1HighLimit1.setDescription('Profile1: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort1HighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1HighLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1HighLimitAction1.setDescription('Profile1: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort1LowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1LowLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1LowLimit1.setDescription('Profile1: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort1LowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1LowLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1LowLimitAction1.setDescription('Profile1: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort1NormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1NormalAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1NormalAction2.setDescription('Profile2: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort1HighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1HighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1HighLimit2.setDescription('Profile2: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort1HighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1HighLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1HighLimitAction2.setDescription('Profile2: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort1LowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1LowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1LowLimit2.setDescription('Profile2: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort1LowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1LowLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1LowLimitAction2.setDescription('Profile2: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort1EnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1EnableTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1EnableTime.setDescription('Time to enable on Thermostat')
sensorProbeTemperatureArrayPort2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2))
sensorProbeTemperatureArrayPort2Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Number.setDescription('The total number of port on the TemperatureArray.')
sensorProbeTemperatureArrayPort2Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2), )
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeTemperatureArrayPort2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTemperatureArrayPort2Index"))
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Entry.setDescription('This is an entry in the sensorProbeTemperatureArrayPort2 Table')
sensorProbeTemperatureArrayPort2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Index.setDescription('A unique value for each sensor TemperatureArray port.')
sensorProbeTemperatureArrayPort2Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Description.setDescription('A Description of this sensor TemperatureArray')
sensorProbeTemperatureArrayPort2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Value.setDescription('The value in this sensor')
sensorProbeTemperatureArrayPort2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Status.setDescription('The current status of this Sensor')
sensorProbeTemperatureArrayPort2Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Online.setDescription('If this Sensor is currently online')
sensorProbeTemperatureArrayPort2GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeTemperatureArrayPort2HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2HighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2HighWarning.setDescription('How hot this  sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort2HighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2HighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2HighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort2LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2LowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2LowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort2LowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2LowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2LowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort2Rearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Rearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Rearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorProbeTemperatureArrayPort2DegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2DegreeType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2DegreeType.setDescription('The degrees are in fahrenheit(0) or in celsius(1)')
sensorProbeTemperatureArrayPort2DegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2DegreeRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2DegreeRaw.setDescription('The raw degree data from the temperature sensor, slightly higher resolution')
sensorProbeTemperatureArrayPort2Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Offset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Offset.setDescription('Offset reading')
sensorProbeTemperatureArrayPort2URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2URL.setDescription('Sensor URL link.')
sensorProbeTemperatureArrayPort2OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeTemperatureArrayPort2DatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2DatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2DatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeTemperatureArrayPort2ContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeTemperatureArrayPort2ContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeTemperatureArrayPort2ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeTemperatureArrayPort2ContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeTemperatureArrayPort2ContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeTemperatureArrayPort2ContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeTemperatureArrayPort2Calendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Calendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Calendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeThermostatTemperatureArrayPort2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Index.setDescription('A unique value for each sensor thermostat port.')
sensorProbeThermostatTemperatureArrayPort2Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Description.setDescription('A Description of this sensor thermostat')
sensorProbeThermostatTemperatureArrayPort2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Value.setDescription('The value in this sensor')
sensorProbeThermostatTemperatureArrayPort2Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Online.setDescription('If this Sensor is currently online')
sensorProbeThermostatTemperatureArrayPort2GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeThermostatTemperatureArrayPort2Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Mode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Mode.setDescription('To select the thermostat mode for working on time-bases(1) or normal(0).')
sensorProbeThermostatTemperatureArrayPort2RelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2RelayControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2RelayControlPort.setDescription('To select a relay port to be controled by this thermostat sensor.')
sensorProbeThermostatTemperatureArrayPort2NormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2NormalAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2NormalAction1.setDescription('Profile1: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort2HighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2HighLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2HighLimit1.setDescription('Profile1: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort2HighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2HighLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2HighLimitAction1.setDescription('Profile1: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort2LowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2LowLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2LowLimit1.setDescription('Profile1: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort2LowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2LowLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2LowLimitAction1.setDescription('Profile1: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort2NormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2NormalAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2NormalAction2.setDescription('Profile2: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort2HighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2HighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2HighLimit2.setDescription('Profile2: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort2HighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2HighLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2HighLimitAction2.setDescription('Profile2: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort2LowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2LowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2LowLimit2.setDescription('Profile2: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort2LowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2LowLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2LowLimitAction2.setDescription('Profile2: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort2EnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2EnableTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2EnableTime.setDescription('Time to enable on Thermostat')
sensorProbeTemperatureArrayPort3 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3))
sensorProbeTemperatureArrayPort3Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Number.setDescription('The total number of port on the TemperatureArray.')
sensorProbeTemperatureArrayPort3Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2), )
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeTemperatureArrayPort3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTemperatureArrayPort3Index"))
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Entry.setDescription('This is an entry in the sensorProbeTemperatureArrayPort3 Table')
sensorProbeTemperatureArrayPort3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Index.setDescription('A unique value for each sensor TemperatureArray port.')
sensorProbeTemperatureArrayPort3Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Description.setDescription('A Description of this sensor TemperatureArray')
sensorProbeTemperatureArrayPort3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Value.setDescription('The value in this sensor')
sensorProbeTemperatureArrayPort3Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Status.setDescription('The current status of this Sensor')
sensorProbeTemperatureArrayPort3Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Online.setDescription('If this Sensor is currently online')
sensorProbeTemperatureArrayPort3GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeTemperatureArrayPort3HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3HighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3HighWarning.setDescription('How hot this  sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort3HighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3HighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3HighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort3LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3LowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3LowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort3LowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3LowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3LowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort3Rearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Rearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Rearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorProbeTemperatureArrayPort3DegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3DegreeType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3DegreeType.setDescription('The degrees are in fahrenheit(0) or in celsius(1)')
sensorProbeTemperatureArrayPort3DegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3DegreeRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3DegreeRaw.setDescription('The raw degree data from the temperature sensor, slightly higher resolution')
sensorProbeTemperatureArrayPort3Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Offset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Offset.setDescription('Offset reading')
sensorProbeTemperatureArrayPort3URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3URL.setDescription('Sensor URL link.')
sensorProbeTemperatureArrayPort3OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeTemperatureArrayPort3DatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3DatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3DatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeTemperatureArrayPort3ContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeTemperatureArrayPort3ContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeTemperatureArrayPort3ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeTemperatureArrayPort3ContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeTemperatureArrayPort3ContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeTemperatureArrayPort3ContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeTemperatureArrayPort3Calendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Calendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Calendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeThermostatTemperatureArrayPort3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Index.setDescription('A unique value for each sensor thermostat port.')
sensorProbeThermostatTemperatureArrayPort3Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Description.setDescription('A Description of this sensor thermostat')
sensorProbeThermostatTemperatureArrayPort3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Value.setDescription('The value in this sensor')
sensorProbeThermostatTemperatureArrayPort3Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Online.setDescription('If this Sensor is currently online')
sensorProbeThermostatTemperatureArrayPort3GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeThermostatTemperatureArrayPort3Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Mode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Mode.setDescription('To select the thermostat mode for working on time-bases(1) or normal(0).')
sensorProbeThermostatTemperatureArrayPort3RelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3RelayControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3RelayControlPort.setDescription('To select a relay port to be controled by this thermostat sensor.')
sensorProbeThermostatTemperatureArrayPort3NormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3NormalAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3NormalAction1.setDescription('Profile1: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort3HighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3HighLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3HighLimit1.setDescription('Profile1: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort3HighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3HighLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3HighLimitAction1.setDescription('Profile1: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort3LowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3LowLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3LowLimit1.setDescription('Profile1: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort3LowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3LowLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3LowLimitAction1.setDescription('Profile1: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort3NormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3NormalAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3NormalAction2.setDescription('Profile2: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort3HighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3HighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3HighLimit2.setDescription('Profile2: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort3HighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3HighLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3HighLimitAction2.setDescription('Profile2: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort3LowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3LowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3LowLimit2.setDescription('Profile2: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort3LowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3LowLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3LowLimitAction2.setDescription('Profile2: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort3EnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3EnableTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3EnableTime.setDescription('Time to enable on Thermostat')
sensorProbeTemperatureArrayPort4 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4))
sensorProbeTemperatureArrayPort4Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Number.setDescription('The total number of port on the TemperatureArray.')
sensorProbeTemperatureArrayPort4Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2), )
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeTemperatureArrayPort4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTemperatureArrayPort4Index"))
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Entry.setDescription('This is an entry in the sensorProbeTemperatureArrayPort4 Table')
sensorProbeTemperatureArrayPort4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Index.setDescription('A unique value for each sensor TemperatureArray port.')
sensorProbeTemperatureArrayPort4Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Description.setDescription('A Description of this sensor TemperatureArray')
sensorProbeTemperatureArrayPort4Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Value.setDescription('The value in this sensor')
sensorProbeTemperatureArrayPort4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Status.setDescription('The current status of this Sensor')
sensorProbeTemperatureArrayPort4Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Online.setDescription('If this Sensor is currently online')
sensorProbeTemperatureArrayPort4GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeTemperatureArrayPort4HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4HighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4HighWarning.setDescription('How hot this  sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort4HighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4HighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4HighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort4LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4LowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4LowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort4LowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4LowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4LowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort4Rearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Rearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Rearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorProbeTemperatureArrayPort4DegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4DegreeType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4DegreeType.setDescription('The degrees are in fahrenheit(0) or in celsius(1)')
sensorProbeTemperatureArrayPort4DegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4DegreeRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4DegreeRaw.setDescription('The raw degree data from the temperature sensor, slightly higher resolution')
sensorProbeTemperatureArrayPort4Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Offset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Offset.setDescription('Offset reading')
sensorProbeTemperatureArrayPort4URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4URL.setDescription('Sensor URL link.')
sensorProbeTemperatureArrayPort4OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeTemperatureArrayPort4DatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4DatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4DatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeTemperatureArrayPort4ContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeTemperatureArrayPort4ContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeTemperatureArrayPort4ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeTemperatureArrayPort4ContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeTemperatureArrayPort4ContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeTemperatureArrayPort4ContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeTemperatureArrayPort4Calendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Calendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Calendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeThermostatTemperatureArrayPort4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Index.setDescription('A unique value for each sensor thermostat port.')
sensorProbeThermostatTemperatureArrayPort4Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Description.setDescription('A Description of this sensor thermostat')
sensorProbeThermostatTemperatureArrayPort4Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Value.setDescription('The value in this sensor')
sensorProbeThermostatTemperatureArrayPort4Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Online.setDescription('If this Sensor is currently online')
sensorProbeThermostatTemperatureArrayPort4GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeThermostatTemperatureArrayPort4Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Mode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Mode.setDescription('To select the thermostat mode for working on time-bases(1) or normal(0).')
sensorProbeThermostatTemperatureArrayPort4RelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4RelayControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4RelayControlPort.setDescription('To select a relay port to be controled by this thermostat sensor.')
sensorProbeThermostatTemperatureArrayPort4NormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4NormalAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4NormalAction1.setDescription('Profile1: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort4HighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4HighLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4HighLimit1.setDescription('Profile1: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort4HighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4HighLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4HighLimitAction1.setDescription('Profile1: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort4LowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4LowLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4LowLimit1.setDescription('Profile1: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort4LowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4LowLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4LowLimitAction1.setDescription('Profile1: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort4NormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4NormalAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4NormalAction2.setDescription('Profile2: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort4HighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4HighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4HighLimit2.setDescription('Profile2: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort4HighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4HighLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4HighLimitAction2.setDescription('Profile2: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort4LowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4LowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4LowLimit2.setDescription('Profile2: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort4LowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4LowLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4LowLimitAction2.setDescription('Profile2: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort4EnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4EnableTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4EnableTime.setDescription('Time to enable on Thermostat')
sensorProbeTemperatureArrayPort5 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5))
sensorProbeTemperatureArrayPort5Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Number.setDescription('The total number of port on the TemperatureArray.')
sensorProbeTemperatureArrayPort5Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2), )
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeTemperatureArrayPort5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTemperatureArrayPort5Index"))
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Entry.setDescription('This is an entry in the sensorProbeTemperatureArrayPort5 Table')
sensorProbeTemperatureArrayPort5Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Index.setDescription('A unique value for each sensor TemperatureArray port.')
sensorProbeTemperatureArrayPort5Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Description.setDescription('A Description of this sensor TemperatureArray')
sensorProbeTemperatureArrayPort5Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Value.setDescription('The value in this sensor')
sensorProbeTemperatureArrayPort5Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Status.setDescription('The current status of this Sensor')
sensorProbeTemperatureArrayPort5Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Online.setDescription('If this Sensor is currently online')
sensorProbeTemperatureArrayPort5GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeTemperatureArrayPort5HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5HighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5HighWarning.setDescription('How hot this  sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort5HighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5HighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5HighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort5LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5LowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5LowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort5LowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5LowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5LowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort5Rearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Rearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Rearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorProbeTemperatureArrayPort5DegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5DegreeType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5DegreeType.setDescription('The degrees are in fahrenheit(0) or in celsius(1)')
sensorProbeTemperatureArrayPort5DegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5DegreeRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5DegreeRaw.setDescription('The raw degree data from the temperature sensor, slightly higher resolution')
sensorProbeTemperatureArrayPort5Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Offset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Offset.setDescription('Offset reading')
sensorProbeTemperatureArrayPort5URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5URL.setDescription('Sensor URL link.')
sensorProbeTemperatureArrayPort5OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeTemperatureArrayPort5DatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5DatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5DatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeTemperatureArrayPort5ContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeTemperatureArrayPort5ContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeTemperatureArrayPort5ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeTemperatureArrayPort5ContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeTemperatureArrayPort5ContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeTemperatureArrayPort5ContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeTemperatureArrayPort5Calendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Calendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Calendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeThermostatTemperatureArrayPort5Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Index.setDescription('A unique value for each sensor thermostat port.')
sensorProbeThermostatTemperatureArrayPort5Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Description.setDescription('A Description of this sensor thermostat')
sensorProbeThermostatTemperatureArrayPort5Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Value.setDescription('The value in this sensor')
sensorProbeThermostatTemperatureArrayPort5Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Online.setDescription('If this Sensor is currently online')
sensorProbeThermostatTemperatureArrayPort5GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeThermostatTemperatureArrayPort5Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Mode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Mode.setDescription('To select the thermostat mode for working on time-bases(1) or normal(0).')
sensorProbeThermostatTemperatureArrayPort5RelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5RelayControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5RelayControlPort.setDescription('To select a relay port to be controled by this thermostat sensor.')
sensorProbeThermostatTemperatureArrayPort5NormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5NormalAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5NormalAction1.setDescription('Profile1: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort5HighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5HighLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5HighLimit1.setDescription('Profile1: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort5HighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5HighLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5HighLimitAction1.setDescription('Profile1: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort5LowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5LowLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5LowLimit1.setDescription('Profile1: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort5LowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5LowLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5LowLimitAction1.setDescription('Profile1: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort5NormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5NormalAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5NormalAction2.setDescription('Profile2: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort5HighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5HighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5HighLimit2.setDescription('Profile2: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort5HighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5HighLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5HighLimitAction2.setDescription('Profile2: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort5LowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5LowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5LowLimit2.setDescription('Profile2: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort5LowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5LowLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5LowLimitAction2.setDescription('Profile2: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort5EnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5EnableTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5EnableTime.setDescription('Time to enable on Thermostat')
sensorProbeTemperatureArrayPort6 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6))
sensorProbeTemperatureArrayPort6Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Number.setDescription('The total number of port on the TemperatureArray.')
sensorProbeTemperatureArrayPort6Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2), )
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeTemperatureArrayPort6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTemperatureArrayPort6Index"))
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Entry.setDescription('This is an entry in the sensorProbeTemperatureArrayPort6 Table')
sensorProbeTemperatureArrayPort6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Index.setDescription('A unique value for each sensor TemperatureArray port.')
sensorProbeTemperatureArrayPort6Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Description.setDescription('A Description of this sensor TemperatureArray')
sensorProbeTemperatureArrayPort6Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Value.setDescription('The value in this sensor')
sensorProbeTemperatureArrayPort6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Status.setDescription('The current status of this Sensor')
sensorProbeTemperatureArrayPort6Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Online.setDescription('If this Sensor is currently online')
sensorProbeTemperatureArrayPort6GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeTemperatureArrayPort6HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6HighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6HighWarning.setDescription('How hot this  sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort6HighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6HighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6HighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort6LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6LowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6LowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort6LowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6LowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6LowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort6Rearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Rearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Rearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorProbeTemperatureArrayPort6DegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6DegreeType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6DegreeType.setDescription('The degrees are in fahrenheit(0) or in celsius(1)')
sensorProbeTemperatureArrayPort6DegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6DegreeRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6DegreeRaw.setDescription('The raw degree data from the temperature sensor, slightly higher resolution')
sensorProbeTemperatureArrayPort6Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Offset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Offset.setDescription('Offset reading')
sensorProbeTemperatureArrayPort6URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6URL.setDescription('Sensor URL link.')
sensorProbeTemperatureArrayPort6OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeTemperatureArrayPort6DatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6DatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6DatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeTemperatureArrayPort6ContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeTemperatureArrayPort6ContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeTemperatureArrayPort6ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeTemperatureArrayPort6ContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeTemperatureArrayPort6ContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeTemperatureArrayPort6ContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeTemperatureArrayPort6Calendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Calendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Calendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeThermostatTemperatureArrayPort6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Index.setDescription('A unique value for each sensor thermostat port.')
sensorProbeThermostatTemperatureArrayPort6Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Description.setDescription('A Description of this sensor thermostat')
sensorProbeThermostatTemperatureArrayPort6Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Value.setDescription('The value in this sensor')
sensorProbeThermostatTemperatureArrayPort6Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Online.setDescription('If this Sensor is currently online')
sensorProbeThermostatTemperatureArrayPort6GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeThermostatTemperatureArrayPort6Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Mode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Mode.setDescription('To select the thermostat mode for working on time-bases(1) or normal(0).')
sensorProbeThermostatTemperatureArrayPort6RelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6RelayControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6RelayControlPort.setDescription('To select a relay port to be controled by this thermostat sensor.')
sensorProbeThermostatTemperatureArrayPort6NormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6NormalAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6NormalAction1.setDescription('Profile1: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort6HighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6HighLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6HighLimit1.setDescription('Profile1: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort6HighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6HighLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6HighLimitAction1.setDescription('Profile1: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort6LowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6LowLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6LowLimit1.setDescription('Profile1: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort6LowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6LowLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6LowLimitAction1.setDescription('Profile1: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort6NormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6NormalAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6NormalAction2.setDescription('Profile2: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort6HighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6HighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6HighLimit2.setDescription('Profile2: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort6HighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6HighLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6HighLimitAction2.setDescription('Profile2: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort6LowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6LowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6LowLimit2.setDescription('Profile2: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort6LowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6LowLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6LowLimitAction2.setDescription('Profile2: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort6EnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6EnableTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6EnableTime.setDescription('Time to enable on Thermostat')
sensorProbeTemperatureArrayPort7 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7))
sensorProbeTemperatureArrayPort7Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Number.setDescription('The total number of port on the TemperatureArray.')
sensorProbeTemperatureArrayPort7Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2), )
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeTemperatureArrayPort7Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTemperatureArrayPort7Index"))
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Entry.setDescription('This is an entry in the sensorProbeTemperatureArrayPort7 Table')
sensorProbeTemperatureArrayPort7Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Index.setDescription('A unique value for each sensor TemperatureArray port.')
sensorProbeTemperatureArrayPort7Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Description.setDescription('A Description of this sensor TemperatureArray')
sensorProbeTemperatureArrayPort7Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Value.setDescription('The value in this sensor')
sensorProbeTemperatureArrayPort7Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Status.setDescription('The current status of this Sensor')
sensorProbeTemperatureArrayPort7Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Online.setDescription('If this Sensor is currently online')
sensorProbeTemperatureArrayPort7GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeTemperatureArrayPort7HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7HighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7HighWarning.setDescription('How hot this  sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort7HighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7HighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7HighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort7LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7LowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7LowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort7LowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7LowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7LowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort7Rearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Rearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Rearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorProbeTemperatureArrayPort7DegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7DegreeType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7DegreeType.setDescription('The degrees are in fahrenheit(0) or in celsius(1)')
sensorProbeTemperatureArrayPort7DegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7DegreeRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7DegreeRaw.setDescription('The raw degree data from the temperature sensor, slightly higher resolution')
sensorProbeTemperatureArrayPort7Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Offset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Offset.setDescription('Offset reading')
sensorProbeTemperatureArrayPort7URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7URL.setDescription('Sensor URL link.')
sensorProbeTemperatureArrayPort7OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeTemperatureArrayPort7DatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7DatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7DatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeTemperatureArrayPort7ContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeTemperatureArrayPort7ContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeTemperatureArrayPort7ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeTemperatureArrayPort7ContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeTemperatureArrayPort7ContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeTemperatureArrayPort7ContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeTemperatureArrayPort7Calendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Calendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Calendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeThermostatTemperatureArrayPort7Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Index.setDescription('A unique value for each sensor thermostat port.')
sensorProbeThermostatTemperatureArrayPort7Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Description.setDescription('A Description of this sensor thermostat')
sensorProbeThermostatTemperatureArrayPort7Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Value.setDescription('The value in this sensor')
sensorProbeThermostatTemperatureArrayPort7Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Online.setDescription('If this Sensor is currently online')
sensorProbeThermostatTemperatureArrayPort7GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeThermostatTemperatureArrayPort7Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Mode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Mode.setDescription('To select the thermostat mode for working on time-bases(1) or normal(0).')
sensorProbeThermostatTemperatureArrayPort7RelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7RelayControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7RelayControlPort.setDescription('To select a relay port to be controled by this thermostat sensor.')
sensorProbeThermostatTemperatureArrayPort7NormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7NormalAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7NormalAction1.setDescription('Profile1: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort7HighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7HighLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7HighLimit1.setDescription('Profile1: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort7HighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7HighLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7HighLimitAction1.setDescription('Profile1: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort7LowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7LowLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7LowLimit1.setDescription('Profile1: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort7LowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7LowLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7LowLimitAction1.setDescription('Profile1: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort7NormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7NormalAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7NormalAction2.setDescription('Profile2: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort7HighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7HighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7HighLimit2.setDescription('Profile2: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort7HighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7HighLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7HighLimitAction2.setDescription('Profile2: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort7LowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7LowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7LowLimit2.setDescription('Profile2: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort7LowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7LowLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7LowLimitAction2.setDescription('Profile2: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort7EnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7EnableTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7EnableTime.setDescription('Time to enable on Thermostat')
sensorProbeTemperatureArrayPort8 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8))
sensorProbeTemperatureArrayPort8Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Number.setDescription('The total number of port on the TemperatureArray.')
sensorProbeTemperatureArrayPort8Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2), )
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeTemperatureArrayPort8Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTemperatureArrayPort8Index"))
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Entry.setDescription('This is an entry in the sensorProbeTemperatureArrayPort8 Table')
sensorProbeTemperatureArrayPort8Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Index.setDescription('A unique value for each sensor TemperatureArray port.')
sensorProbeTemperatureArrayPort8Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Description.setDescription('A Description of this sensor TemperatureArray')
sensorProbeTemperatureArrayPort8Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Value.setDescription('The value in this sensor')
sensorProbeTemperatureArrayPort8Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Status.setDescription('The current status of this Sensor')
sensorProbeTemperatureArrayPort8Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Online.setDescription('If this Sensor is currently online')
sensorProbeTemperatureArrayPort8GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeTemperatureArrayPort8HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8HighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8HighWarning.setDescription('How hot this  sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort8HighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8HighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8HighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort8LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8LowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8LowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort8LowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8LowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8LowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort8Rearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Rearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Rearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorProbeTemperatureArrayPort8DegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8DegreeType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8DegreeType.setDescription('The degrees are in fahrenheit(0) or in celsius(1)')
sensorProbeTemperatureArrayPort8DegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8DegreeRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8DegreeRaw.setDescription('The raw degree data from the temperature sensor, slightly higher resolution')
sensorProbeTemperatureArrayPort8Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Offset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Offset.setDescription('Offset reading')
sensorProbeTemperatureArrayPort8URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8URL.setDescription('Sensor URL link.')
sensorProbeTemperatureArrayPort8OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeTemperatureArrayPort8DatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8DatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8DatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeTemperatureArrayPort8ContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeTemperatureArrayPort8ContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeTemperatureArrayPort8ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeTemperatureArrayPort8ContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeTemperatureArrayPort8ContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeTemperatureArrayPort8ContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeTemperatureArrayPort8Calendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Calendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Calendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeThermostatTemperatureArrayPort8Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Index.setDescription('A unique value for each sensor thermostat port.')
sensorProbeThermostatTemperatureArrayPort8Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Description.setDescription('A Description of this sensor thermostat')
sensorProbeThermostatTemperatureArrayPort8Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Value.setDescription('The value in this sensor')
sensorProbeThermostatTemperatureArrayPort8Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Online.setDescription('If this Sensor is currently online')
sensorProbeThermostatTemperatureArrayPort8GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeThermostatTemperatureArrayPort8Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Mode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Mode.setDescription('To select the thermostat mode for working on time-bases(1) or normal(0).')
sensorProbeThermostatTemperatureArrayPort8RelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8RelayControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8RelayControlPort.setDescription('To select a relay port to be controled by this thermostat sensor.')
sensorProbeThermostatTemperatureArrayPort8NormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8NormalAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8NormalAction1.setDescription('Profile1: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort8HighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8HighLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8HighLimit1.setDescription('Profile1: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort8HighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8HighLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8HighLimitAction1.setDescription('Profile1: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort8LowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8LowLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8LowLimit1.setDescription('Profile1: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort8LowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8LowLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8LowLimitAction1.setDescription('Profile1: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort8NormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8NormalAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8NormalAction2.setDescription('Profile2: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort8HighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8HighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8HighLimit2.setDescription('Profile2: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort8HighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8HighLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8HighLimitAction2.setDescription('Profile2: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort8LowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8LowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8LowLimit2.setDescription('Profile2: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort8LowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8LowLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8LowLimitAction2.setDescription('Profile2: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort8EnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8EnableTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8EnableTime.setDescription('Time to enable on Thermostat')
sensorProbeNoCameraSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34))
sensorProbeNoCameraSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeNoCameraSensorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNoCameraSensorNumber.setDescription('The total number of no camera sensor port.')
sensorProbeNoCameraSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2), )
if mibBuilder.loadTexts: sensorProbeNoCameraSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNoCameraSensorTable.setDescription('This table contains the data for every no camera Sensor. Each row in the table contains data for a different NoCamera Sensor.')
sensorProbeNoCameraSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeNoCameraSensorIndex"))
if mibBuilder.loadTexts: sensorProbeNoCameraSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNoCameraSensorEntry.setDescription('This is an entry in the sensorProbeNoCameraSensorEntry Table')
sensorProbeNoCameraSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeNoCameraSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNoCameraSensorIndex.setDescription('A unique value for each no camera sensor port.')
sensorProbeNoCameraDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeNoCameraDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNoCameraDescription.setDescription('A Description of this sensor')
sensorProbeNoCameraStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeNoCameraStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNoCameraStatus.setDescription('The current status of this Sensor.')
sensorProbeNoCameraOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeNoCameraOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNoCameraOnline.setDescription('If this Sensor is currently online')
sensorProbeNoCameraGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeNoCameraGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNoCameraGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeNoCameraContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeNoCameraContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNoCameraContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeNoCameraContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeNoCameraContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNoCameraContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeNoCameraCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeNoCameraCalendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNoCameraCalendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeSoftMotionSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35))
sensorProbeSoftMotionSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoftMotionSensorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionSensorNumber.setDescription('The total number of SoftMotionSensor port.')
sensorProbeSoftMotionSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2), )
if mibBuilder.loadTexts: sensorProbeSoftMotionSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionSensorTable.setDescription('This table contains the data for every SoftMotion Sensor. Each row in the table contains data for a different SoftMotion Sensor.')
sensorProbeSoftMotionSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeSoftMotionSensorIndex"))
if mibBuilder.loadTexts: sensorProbeSoftMotionSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionSensorEntry.setDescription('This is an entry in the sensorProbeSoftMotionSensorEntry Table')
sensorProbeSoftMotionSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoftMotionSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionSensorIndex.setDescription('A unique value for each soft motion sensor port.')
sensorProbeSoftMotionDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionDescription.setDescription('A Description of this sensor')
sensorProbeSoftMotionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoftMotionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionStatus.setDescription('The current status of this Sensor.')
sensorProbeSoftMotionOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoftMotionOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionOnline.setDescription('If this Sensor is currently online')
sensorProbeSoftMotionGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeSoftMotionPercentSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionPercentSensitivity.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionPercentSensitivity.setDescription('The percent of sensitivity uses for setting the sentisitivity of motion detector.')
sensorProbeSoftMotionURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionURL.setDescription('Sensor URL link.')
sensorProbeSoftMotionOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionOpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionOpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeSoftMotionContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeSoftMotionContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeSoftMotionCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionCalendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionCalendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeSoftMotionMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 33554431))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionMask.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionMask.setDescription('Mask of enable or disable of SoftMotion.')
sensorProbeSoundDetectorSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36))
sensorProbeSoundDetectorSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoundDetectorSensorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorSensorNumber.setDescription('The total number of SoundDetectorSensor port.')
sensorProbeSoundDetectorSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2), )
if mibBuilder.loadTexts: sensorProbeSoundDetectorSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorSensorTable.setDescription('This table contains the data for every SoundDetectorSensor Sensor. Each row in the table contains data for a different SoundDetectorSensor Sensor.')
sensorProbeSoundDetectorSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeSoundDetectorIndex"))
if mibBuilder.loadTexts: sensorProbeSoundDetectorSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorSensorEntry.setDescription('This is an entry in the sensorProbeSoundDetectorSensorEntry Table')
sensorProbeSoundDetectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoundDetectorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorIndex.setDescription('A unique value for each sound detector sensor port.')
sensorProbeSoundDetectorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorDescription.setDescription('A Description of this sensor')
sensorProbeSoundDetectorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoundDetectorValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorValue.setDescription('The value in this sensor')
sensorProbeSoundDetectorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoundDetectorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorStatus.setDescription('The current status of this Sensor')
sensorProbeSoundDetectorOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoundDetectorOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorOnline.setDescription('If this Sensor is currently online')
sensorProbeSoundDetectorGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeSoundDetectorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorHighWarning.setDescription('How hot this  sensor gets before it sends a warning')
sensorProbeSoundDetectorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorProbeSoundDetectorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorLowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorProbeSoundDetectorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorProbeSoundDetectorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down Rearm degrees below warning before the status goes to normal')
sensorProbeSoundDetectorRecordingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("internal-mic", 0), ("line-in", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorRecordingSource.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorRecordingSource.setDescription('To select a recording source being in internal microphone(0) or in line-in(1).')
sensorProbeSoundDetectorMicBoost = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorMicBoost.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorMicBoost.setDescription('Enable or disable a microphone boost(+20 db).')
sensorProbeSoundDetectorMicSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 20, 40, 60, 80, 100))).clone(namedValues=NamedValues(("i0", 0), ("i20", 20), ("i40", 40), ("i60", 60), ("i80", 80), ("i100", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorMicSensitivity.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorMicSensitivity.setDescription('The sensitivity of microphone to detect sound.')
sensorProbeSoundDetectorPulseLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorPulseLength.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorPulseLength.setDescription('Continuous time for detecting before changing status.')
sensorProbeSoundDetectorURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorURL.setDescription('Sensor URL link.')
sensorProbeSoundDetectorOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorOpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorOpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeSoundDetectorDatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorDatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorDatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeSoundDetectorContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeSoundDetectorContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeSoundDetectorContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeSoundDetectorContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeSoundDetectorContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeSoundDetectorContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeSoundDetectorCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorCalendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorCalendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeDrycontactArraySensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37))
sensorProbeDrycontactArrayPort1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1))
sensorProbeDrycontactArrayPort1Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Number.setDescription('The total number of port on the DrycontactArray.')
sensorProbeDrycontactArrayPort1Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2), )
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Table.setDescription('This table contains the data for every Drycontact Sensor in the SensorArray. Each row in the table contains data for a different Drycontact Sensor.')
sensorProbeDrycontactArrayPort1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeDrycontactArrayPort1Index"))
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Entry.setDescription('This is an entry in the sensorProbeDrycontactArrayPort1 Table')
sensorProbeDrycontactArrayPort1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Index.setDescription('A unique value for each sensor DrycontactArray port.')
sensorProbeDrycontactArrayPort1Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Description.setDescription('A Description of this sensor DrycontactArray')
sensorProbeDrycontactArrayPort1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Status.setDescription('The current status of this Sensor')
sensorProbeDrycontactArrayPort1Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Online.setDescription('If this Sensor is currently online')
sensorProbeDrycontactArrayPort1GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeDrycontactArrayPort1NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1NormalState.setDescription('The normal state of DrycontactArray')
sensorProbeDrycontactArrayPort1Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Direction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Direction.setDescription('To set a drycontact to input enter 0. To set a switch to output enter 1')
sensorProbeDrycontactArrayPort1ContTimeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ContTimeCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ContTimeCritical.setDescription('Continuous time for this sensor to be in Critical before accepting new Status.')
sensorProbeDrycontactArrayPort1ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeDrycontactArrayPort1ManualOutputCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ManualOutputCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ManualOutputCycleTime.setDescription('Drycontact output toggle period in seconds for Manual Cycle action.')
sensorProbeDrycontactArrayPort1ManualOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ManualOutputAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ManualOutputAction.setDescription('Control the drycontact output manualy')
sensorProbeDrycontactArrayPort1OutputDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1OutputDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1OutputDescOn.setDescription('Description of Drycontact output On')
sensorProbeDrycontactArrayPort1OutputDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1OutputDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1OutputDescOff.setDescription('Description of Drycontact output Off')
sensorProbeDrycontactArrayPort1URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1URL.setDescription('Sersor URL link.')
sensorProbeDrycontactArrayPort1OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeDrycontactArrayPort1ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ControlMode.setDescription('Control Mode used for selecting the mode to control a drycontact output.')
sensorProbeDrycontactArrayPort2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2))
sensorProbeDrycontactArrayPort2Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Number.setDescription('The total number of port on the DrycontactArray.')
sensorProbeDrycontactArrayPort2Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2), )
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Table.setDescription('This table contains the data for every Drycontact Sensor in the SensorArray. Each row in the table contains data for a different Drycontact Sensor.')
sensorProbeDrycontactArrayPort2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeDrycontactArrayPort2Index"))
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Entry.setDescription('This is an entry in the sensorProbeDrycontactArrayPort2 Table')
sensorProbeDrycontactArrayPort2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Index.setDescription('A unique value for each sensor DrycontactArray port.')
sensorProbeDrycontactArrayPort2Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Description.setDescription('A Description of this sensor DrycontactArray')
sensorProbeDrycontactArrayPort2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Status.setDescription('The current status of this Sensor')
sensorProbeDrycontactArrayPort2Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Online.setDescription('If this Sensor is currently online')
sensorProbeDrycontactArrayPort2GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeDrycontactArrayPort2NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2NormalState.setDescription('The normal state of DrycontactArray')
sensorProbeDrycontactArrayPort2Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Direction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Direction.setDescription('To set a drycontact to input enter 0. To set a switch to output enter 1')
sensorProbeDrycontactArrayPort2ContTimeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ContTimeCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ContTimeCritical.setDescription('Continuous time for this sensor to be in Critical before accepting new Status.')
sensorProbeDrycontactArrayPort2ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeDrycontactArrayPort2ManualOutputCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ManualOutputCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ManualOutputCycleTime.setDescription('Drycontact toggle period in seconds for Manual Cycle action.')
sensorProbeDrycontactArrayPort2ManualOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ManualOutputAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ManualOutputAction.setDescription('Control the Drycontact output manualy')
sensorProbeDrycontactArrayPort2OutputDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2OutputDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2OutputDescOn.setDescription('Description of Drycontact output On')
sensorProbeDrycontactArrayPort2OutputDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2OutputDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2OutputDescOff.setDescription('Description of Drycontact output Off')
sensorProbeDrycontactArrayPort2URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2URL.setDescription('Sensor URL link')
sensorProbeDrycontactArrayPort2OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeDrycontactArrayPort2ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ControlMode.setDescription('Control Mode used for selecting the mode to control a Drycontact output.')
sensorProbeDrycontactArrayPort3 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3))
sensorProbeDrycontactArrayPort3Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Number.setDescription('The total number of port on the DrycontactArray.')
sensorProbeDrycontactArrayPort3Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2), )
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Table.setDescription('This table contains the data for every Drycontact Sensor in the SensorArray. Each row in the table contains data for a different Drycontact Sensor.')
sensorProbeDrycontactArrayPort3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeDrycontactArrayPort3Index"))
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Entry.setDescription('This is an entry in the sensorProbeDrycontactArrayPort3 Table')
sensorProbeDrycontactArrayPort3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Index.setDescription('A unique value for each sensor DrycontactArray port.')
sensorProbeDrycontactArrayPort3Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Description.setDescription('A Description of this sensor DrycontactArray')
sensorProbeDrycontactArrayPort3Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Status.setDescription('The current status of this Sensor')
sensorProbeDrycontactArrayPort3Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Online.setDescription('If this Sensor is currently online')
sensorProbeDrycontactArrayPort3GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeDrycontactArrayPort3NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3NormalState.setDescription('The normal state of DrycontactArray')
sensorProbeDrycontactArrayPort3Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Direction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Direction.setDescription('To set a drycontact to input enter 0. To set a switch to output enter 1')
sensorProbeDrycontactArrayPort3ContTimeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ContTimeCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ContTimeCritical.setDescription('Continuous time for this sensor to be in Critical before accepting new Status.')
sensorProbeDrycontactArrayPort3ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeDrycontactArrayPort3ManualOutputCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ManualOutputCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ManualOutputCycleTime.setDescription('Drycontact toggle period in seconds for Manual Cycle action.')
sensorProbeDrycontactArrayPort3ManualOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ManualOutputAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ManualOutputAction.setDescription('Control the Drycontact output manualy')
sensorProbeDrycontactArrayPort3OutputDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3OutputDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3OutputDescOn.setDescription('Description of Drycontact output On')
sensorProbeDrycontactArrayPort3OutputDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3OutputDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3OutputDescOff.setDescription('Description of Drycontact output Off')
sensorProbeDrycontactArrayPort3URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3URL.setDescription('Sensor URL link.')
sensorProbeDrycontactArrayPort3OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeDrycontactArrayPort3ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ControlMode.setDescription('Control Mode used for selecting the mode to control a Drycontact output.')
sensorProbeDrycontactArrayPort4 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4))
sensorProbeDrycontactArrayPort4Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Number.setDescription('The total number of port on the DrycontactArray.')
sensorProbeDrycontactArrayPort4Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2), )
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Table.setDescription('This table contains the data for every Drycontact Sensor in the SensorArray. Each row in the table contains data for a different Drycontact Sensor.')
sensorProbeDrycontactArrayPort4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeDrycontactArrayPort4Index"))
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Entry.setDescription('This is an entry in the sensorProbeDrycontactArrayPort4 Table')
sensorProbeDrycontactArrayPort4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Index.setDescription('A unique value for each sensor DrycontactArray port.')
sensorProbeDrycontactArrayPort4Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Description.setDescription('A Description of this sensor DrycontactArray')
sensorProbeDrycontactArrayPort4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Status.setDescription('The current status of this Sensor')
sensorProbeDrycontactArrayPort4Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Online.setDescription('If this Sensor is currently online')
sensorProbeDrycontactArrayPort4GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeDrycontactArrayPort4NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4NormalState.setDescription('The normal state of DrycontactArray')
sensorProbeDrycontactArrayPort4Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Direction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Direction.setDescription('To set a drycontact to input enter 0. To set a switch to output enter 1')
sensorProbeDrycontactArrayPort4ContTimeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ContTimeCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ContTimeCritical.setDescription('Continuous time for this sensor to be in Critical before accepting new Status.')
sensorProbeDrycontactArrayPort4ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeDrycontactArrayPort4ManualOutputCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ManualOutputCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ManualOutputCycleTime.setDescription('Drycontact toggle period in seconds for Manual Cycle action.')
sensorProbeDrycontactArrayPort4ManualOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ManualOutputAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ManualOutputAction.setDescription('Control the Drycontact output manualy')
sensorProbeDrycontactArrayPort4OutputDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4OutputDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4OutputDescOn.setDescription('Description of Drycontact output On')
sensorProbeDrycontactArrayPort4OutputDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4OutputDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4OutputDescOff.setDescription('Description of Drycontact output Off')
sensorProbeDrycontactArrayPort4URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4URL.setDescription('Sensor URL link.')
sensorProbeDrycontactArrayPort4OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeDrycontactArrayPort4ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ControlMode.setDescription('Control Mode used for selecting the mode to control a Drycontact output.')
sensorProbeDrycontactArrayPort5 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5))
sensorProbeDrycontactArrayPort5Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Number.setDescription('The total number of port on the DrycontactArray.')
sensorProbeDrycontactArrayPort5Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2), )
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Table.setDescription('This table contains the data for every Drycontact Sensor in the SensorArray. Each row in the table contains data for a different Drycontact Sensor.')
sensorProbeDrycontactArrayPort5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeDrycontactArrayPort5Index"))
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Entry.setDescription('This is an entry in the sensorProbeDrycontactArrayPort5 Table')
sensorProbeDrycontactArrayPort5Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Index.setDescription('A unique value for each sensor DrycontactArray port.')
sensorProbeDrycontactArrayPort5Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Description.setDescription('A Description of this sensor DrycontactArray')
sensorProbeDrycontactArrayPort5Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Status.setDescription('The current status of this Sensor')
sensorProbeDrycontactArrayPort5Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Online.setDescription('If this Sensor is currently online')
sensorProbeDrycontactArrayPort5GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeDrycontactArrayPort5NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5NormalState.setDescription('The normal state of DrycontactArray')
sensorProbeDrycontactArrayPort5Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Direction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Direction.setDescription('To set a drycontact to input enter 0. To set a switch to output enter 1')
sensorProbeDrycontactArrayPort5ContTimeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ContTimeCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ContTimeCritical.setDescription('Continuous time for this sensor to be in Critical before accepting new Status.')
sensorProbeDrycontactArrayPort5ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeDrycontactArrayPort5ManualOutputCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ManualOutputCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ManualOutputCycleTime.setDescription('Drycontact toggle period in seconds for Manual Cycle action.')
sensorProbeDrycontactArrayPort5ManualOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ManualOutputAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ManualOutputAction.setDescription('Control the Drycontact output manualy')
sensorProbeDrycontactArrayPort5OutputDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5OutputDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5OutputDescOn.setDescription('Description of Drycontact output On')
sensorProbeDrycontactArrayPort5OutputDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5OutputDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5OutputDescOff.setDescription('Description of Drycontact output Off')
sensorProbeDrycontactArrayPort5URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5URL.setDescription('Sensor URL link.')
sensorProbeDrycontactArrayPort5OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeDrycontactArrayPort5ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ControlMode.setDescription('Control Mode used for selecting the mode to control a Drycontact output.')
sensorProbeDrycontactArrayPort6 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6))
sensorProbeDrycontactArrayPort6Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Number.setDescription('The total number of port on the DrycontactArray.')
sensorProbeDrycontactArrayPort6Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2), )
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Table.setDescription('This table contains the data for every Drycontact Sensor in the SensorArray. Each row in the table contains data for a different Drycontact Sensor.')
sensorProbeDrycontactArrayPort6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeDrycontactArrayPort6Index"))
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Entry.setDescription('This is an entry in the sensorProbeDrycontactArrayPort6 Table')
sensorProbeDrycontactArrayPort6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Index.setDescription('A unique value for each sensor DrycontactArray port.')
sensorProbeDrycontactArrayPort6Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Description.setDescription('A Description of this sensor DrycontactArray')
sensorProbeDrycontactArrayPort6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Status.setDescription('The current status of this Sensor')
sensorProbeDrycontactArrayPort6Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Online.setDescription('If this Sensor is currently online')
sensorProbeDrycontactArrayPort6GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeDrycontactArrayPort6NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6NormalState.setDescription('The normal state of DrycontactArray')
sensorProbeDrycontactArrayPort6Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Direction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Direction.setDescription('To set a drycontact to input enter 0. To set a switch to output enter 1')
sensorProbeDrycontactArrayPort6ContTimeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ContTimeCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ContTimeCritical.setDescription('Continuous time for this sensor to be in Critical before accepting new Status.')
sensorProbeDrycontactArrayPort6ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeDrycontactArrayPort6ManualOutputCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ManualOutputCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ManualOutputCycleTime.setDescription('Drycontact toggle period in seconds for Manual Cycle action.')
sensorProbeDrycontactArrayPort6ManualOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ManualOutputAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ManualOutputAction.setDescription('Control the Drycontact output manualy')
sensorProbeDrycontactArrayPort6OutputDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6OutputDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6OutputDescOn.setDescription('Description of Drycontact output On')
sensorProbeDrycontactArrayPort6OutputDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6OutputDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6OutputDescOff.setDescription('Description of Drycontact output Off')
sensorProbeDrycontactArrayPort6URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6URL.setDescription('Sensor URL link.')
sensorProbeDrycontactArrayPort6OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeDrycontactArrayPort6ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ControlMode.setDescription('Control Mode used for selecting the mode to control a Drycontact output.')
sensorProbeDrycontactArrayPort7 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7))
sensorProbeDrycontactArrayPort7Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Number.setDescription('The total number of port on the DrycontactArray.')
sensorProbeDrycontactArrayPort7Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2), )
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Table.setDescription('This table contains the data for every Drycontact Sensor in the SensorArray. Each row in the table contains data for a different Drycontact Sensor.')
sensorProbeDrycontactArrayPort7Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeDrycontactArrayPort7Index"))
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Entry.setDescription('This is an entry in the sensorProbeDrycontactArrayPort7 Table')
sensorProbeDrycontactArrayPort7Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Index.setDescription('A unique value for each sensor DrycontactArray port.')
sensorProbeDrycontactArrayPort7Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Description.setDescription('A Description of this sensor DrycontactArray')
sensorProbeDrycontactArrayPort7Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Status.setDescription('The current status of this Sensor')
sensorProbeDrycontactArrayPort7Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Online.setDescription('If this Sensor is currently online')
sensorProbeDrycontactArrayPort7GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeDrycontactArrayPort7NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7NormalState.setDescription('The normal state of DrycontactArray')
sensorProbeDrycontactArrayPort7Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Direction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Direction.setDescription('To set a drycontact to input enter 0. To set a switch to output enter 1')
sensorProbeDrycontactArrayPort7ContTimeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ContTimeCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ContTimeCritical.setDescription('Continuous time for this sensor to be in Critical before accepting new Status.')
sensorProbeDrycontactArrayPort7ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeDrycontactArrayPort7ManualOutputCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ManualOutputCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ManualOutputCycleTime.setDescription('Drycontact toggle period in seconds for Manual Cycle action.')
sensorProbeDrycontactArrayPort7ManualOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ManualOutputAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ManualOutputAction.setDescription('Control the Drycontact output manualy')
sensorProbeDrycontactArrayPort7OutputDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7OutputDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7OutputDescOn.setDescription('Description of Drycontact output On')
sensorProbeDrycontactArrayPort7OutputDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7OutputDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7OutputDescOff.setDescription('Description of Drycontact output Off')
sensorProbeDrycontactArrayPort7URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7URL.setDescription('Sensor URL link.')
sensorProbeDrycontactArrayPort7OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeDrycontactArrayPort7ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ControlMode.setDescription('Control Mode used for selecting the mode to control a Drycontact output.')
sensorProbeDrycontactArrayPort8 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8))
sensorProbeDrycontactArrayPort8Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Number.setDescription('The total number of port on the DrycontactArray.')
sensorProbeDrycontactArrayPort8Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2), )
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Table.setDescription('This table contains the data for every Drycontact Sensor in the SensorArray. Each row in the table contains data for a different Drycontact Sensor.')
sensorProbeDrycontactArrayPort8Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeDrycontactArrayPort8Index"))
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Entry.setDescription('This is an entry in the sensorProbeDrycontactArrayPort8 Table')
sensorProbeDrycontactArrayPort8Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Index.setDescription('A unique value for each sensor DrycontactArray port.')
sensorProbeDrycontactArrayPort8Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Description.setDescription('A Description of this sensor DrycontactArray')
sensorProbeDrycontactArrayPort8Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Status.setDescription('The current status of this Sensor')
sensorProbeDrycontactArrayPort8Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Online.setDescription('If this Sensor is currently online')
sensorProbeDrycontactArrayPort8GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeDrycontactArrayPort8NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8NormalState.setDescription('The normal state of DrycontactArray')
sensorProbeDrycontactArrayPort8Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Direction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Direction.setDescription('To set a drycontact to input enter 0. To set a switch to output enter 1')
sensorProbeDrycontactArrayPort8ContTimeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ContTimeCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ContTimeCritical.setDescription('Continuous time for this sensor to be in Critical before accepting new Status.')
sensorProbeDrycontactArrayPort8ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeDrycontactArrayPort8ManualOutputCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ManualOutputCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ManualOutputCycleTime.setDescription('Drycontact toggle period in seconds for Manual Cycle action.')
sensorProbeDrycontactArrayPort8ManualOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ManualOutputAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ManualOutputAction.setDescription('Control the Drycontact output manualy')
sensorProbeDrycontactArrayPort8OutputDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8OutputDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8OutputDescOn.setDescription('Description of Drycontact output On')
sensorProbeDrycontactArrayPort8OutputDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8OutputDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8OutputDescOff.setDescription('Description of Drycontact output Off')
sensorProbeDrycontactArrayPort8URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8URL.setDescription('Sensor URL link.')
sensorProbeDrycontactArrayPort8OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeDrycontactArrayPort8ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ControlMode.setDescription('Control Mode used for selecting the mode to control a Drycontact output.')
sensorProbeDebug = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDebug.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDebug.setDescription('SP only: Turn on or off debug messages')
sensorProbeTrapResend = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTrapResend.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTrapResend.setDescription('If traps for Warning or Error should be resent. Traps for Normal status are sent once')
sensorProbeTrapResendInterval = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTrapResendInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTrapResendInterval.setDescription('How often to resend mail or Traps. Enter the number of seconds from 15 to 65535. Mail for WARNING and ERROR are resent at this interval. Traps for Normal status are sent once')
sensorProbeSendTraps = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSendTraps.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSendTraps.setDescription('Turn on or off the sending of traps')
sensorProbeTrapDestination = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTrapDestination.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTrapDestination.setDescription('The IP address of the trap destination')
sensorProbeTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTrapCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTrapCommunity.setDescription('The community string of the trap destination')
sensorProbeDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDefaultGateway.setDescription('If the destination is on another network, enter the IP address of the router')
sensorProbeSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 28), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSubnetMask.setDescription('If the trap destination uses the default gateway')
sensorProbeRouteAdd = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRouteAdd.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRouteAdd.setDescription('SP only: Up to 4, Manual additions to the routing table in the form, Network IP Address, Netmask, Gateway IP address')
sensorProbeSendMail = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSendMail.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSendMail.setDescription('Turn on or off the sending of Mail')
sensorProbeMailRecpt = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailRecpt.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMailRecpt.setDescription('The email address of the Recipient')
sensorProbeMailFrom = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailFrom.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMailFrom.setDescription('The email address of the Sender')
sensorProbeMailSMTP = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 33), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailSMTP.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMailSMTP.setDescription('The Address of the SMTP server')
sensorProbeMailJpgInline = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inline", 1), ("link", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailJpgInline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMailJpgInline.setDescription('If the jpg for this event is sent as an http link or is included with mail as an attachment')
sensorProbeMailResendInterval = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailResendInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMailResendInterval.setDescription('How often to resend mail or Traps. Enter the number of seconds from 10 to 60. Mail for WARNING and ERROR are resent at this interval. Mail for Normal status are sent once')
sensorProbeMailMaxResend = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailMaxResend.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMailMaxResend.setDescription('The maximum number of times to resend mail. If set to 0 only send once. The maximum value is 5')
sensorProbeMailLastStatus = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeMailLastStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMailLastStatus.setDescription('The status of the most recent attempt to send an email')
sensorProbeSupportMailRcpt = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 40), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSupportMailRcpt.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSupportMailRcpt.setDescription('SP8L only: E-Mail address of support')
sensorProbeCameraServerTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42), )
if mibBuilder.loadTexts: sensorProbeCameraServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeCameraServerTable.setDescription('CP8 Only: This table contains the Camera Server features, This allows the sensorProbe to connect to a sensorProbe')
sensorProbeCameraServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeCameraServerIndex"))
if mibBuilder.loadTexts: sensorProbeCameraServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeCameraServerEntry.setDescription('This is an entry in the sensorProbeCameraServerEntry Table')
sensorProbeCameraServerClientOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeCameraServerClientOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeCameraServerClientOnline.setDescription('If this Client is currently online')
sensorProbeCameraServerClientGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeCameraServerClientGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeCameraServerClientGoOnline.setDescription('To put this Client online enter a 1, to take offline enter a 2')
sensorProbeCameraServerClientIP = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeCameraServerClientIP.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeCameraServerClientIP.setDescription('The IP address of the sensorProbe, used to send snmp keep alive messages')
sensorProbeCameraServerClientSetPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeCameraServerClientSetPassword.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeCameraServerClientSetPassword.setDescription('SP Only: The Set Password for the snmp keep alive messages sent to the sensorProbes')
sensorProbeCameraServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeCameraServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeCameraServerIndex.setDescription('The index into the Camera table')
sensorProbeJavaTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeJavaTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeJavaTimeOut.setDescription('Timeout in minutes for Java client')
sensorProbeJpegQualityFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 95))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeJpegQualityFactor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeJpegQualityFactor.setDescription('Quality factor of jpeg image')
sensorProbeCameraDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeCameraDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeCameraDescription.setDescription('A description of camera')
sensorProbeCameraRotate = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nonRotate", 0), ("rotate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeCameraRotate.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeCameraRotate.setDescription('A Rotate of this camera')
sensorProbeCameraResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("resolution320x240", 0), ("resolution640x480", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeCameraResolution.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeCameraResolution.setDescription('Resolution of camera')
sensorProbePTZRotateRelative = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePTZRotateRelative.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbePTZRotateRelative.setDescription("Control PTZ by put Direction and step 'DIR STEP' when direction 0 or 1 is LEFT or RIGH and 2 or 3 is UP or DOWN ")
sensorProbePTZRotateAbsolute = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePTZRotateAbsolute.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbePTZRotateAbsolute.setDescription("Control PTZ by put position of x and y 'POS_X POS_Y' value of position is 0 to 100")
sensorProbeAudioAttachChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAttachAudio", 0), ("attachAudio", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeAudioAttachChannel.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeAudioAttachChannel.setDescription('Disable/Enable audio attachment')
sensorProbePTZEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enableInternal", 1), ("enableExternal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePTZEnable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbePTZEnable.setDescription('Disable/Enable Ptz controller')
sensorProbePTZBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("generalBrand", 0), ("akcpBrand", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePTZBrand.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbePTZBrand.setDescription('PTZ Brand')
sensorProbePTZPanTiltUntilEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("stop", 0), ("right", 1), ("left", 2), ("up", 3), ("down", 4), ("right-up", 5), ("right-down", 6), ("left-up", 7), ("left-down", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePTZPanTiltUntilEnd.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbePTZPanTiltUntilEnd.setDescription('Pan or Tilt PTZ until endpoint')
sensorProbeTrapMailPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTrapMailPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTrapMailPollInterval.setDescription('SP Only: How often the sensor thresholds are tested before sending traps or mail. This can vary from 3 to 15 seconds')
sensorProbeSendTestMail = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSendTestMail.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSendTestMail.setDescription('Send out an email test message')
sensorProbeLastSystemError = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeLastSystemError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeLastSystemError.setDescription('A text string containing the description of the last system error')
sensorProbeDataCollectionPeriod = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDataCollectionPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDataCollectionPeriod.setDescription('The number of minutes between collections of the data logger. This can vary from 1 to 60 minutes')
sensorProbeMailTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMailTimeout.setDescription('The number of seconds to wait for a timeout while sending email This can vary from 10 to 30 seconds')
sensorProbeAutoSense = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeAutoSense.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeAutoSense.setDescription('Enable Auto-sense feature')
sensorProbeChecksum = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeChecksum.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeChecksum.setDescription('SP Only: The Flash Checksum, computed dynamically whenever this object is read')
sensorProbeUsePassword = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usePassword", 0), ("doNotUsePassword", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeUsePassword.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeUsePassword.setDescription('Determines whether or not the set and get community are used to check for access rights')
sensorProbeDisplayLogo = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDisplayLogo.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDisplayLogo.setDescription('Enable or Disable the display of the logo')
sensorProbeTrapType = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("specificTypeTrap", 1), ("generalTypeTrap", 2), ("bothTypeTraps", 3), ("statusTypeTraps", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTrapType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTrapType.setDescription('Whether to generate a trap that covers all sensors, a specific trap for each sensor, or both types of traps')
sensorProbeMailCC = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 61), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailCC.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMailCC.setDescription('The email address of the CC')
sensorProbeAllowIPChange = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeAllowIPChange.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeAllowIPChange.setDescription('This disables the changing of the IP address. The default is to enable changing the IP address')
sensorProbeTimeOfDay = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 65), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTimeOfDay.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTimeOfDay.setDescription('The time of day in the format day/month/year hour(1-24):minutes:seconds for example 23/10/02 12:45:06')
sensorProbeEnableSysLog = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLogToFlash", 1), ("enableLogToNetAndFlash", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnableSysLog.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnableSysLog.setDescription('This enables sysLog Messages,including logging to the Net. The Destination IP of the net messages is the same as the source IP of the sender of this command')
sensorProbeReadSysLog = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lastMessage", 1), ("allMessages", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeReadSysLog.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeReadSysLog.setDescription('Return the sysLog Message in the snmp PDU and if enableLogToNetAndFlash in sensorProbeEnableSysLog, also send in debug message format, A Write of a 2 will return all of the messages in debug format')
sensorProbeClearSysLog = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("allMessages", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeClearSysLog.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeClearSysLog.setDescription('Delete all entries in the sys log')
sensorProbeSyslogDestIP = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 69), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSyslogDestIP.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSyslogDestIP.setDescription('The IP Address of the Syslog server. Note: This must be in dotted decimal form')
sensorProbeSyslogPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 70), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSyslogPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSyslogPort.setDescription('The Port Number of the Syslog server.')
sensorProbeSetSyslogMsgPrefix = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 71), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSetSyslogMsgPrefix.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSetSyslogMsgPrefix.setDescription('SP Only: The Prefix message of the Syslog message')
sensorProbeTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 81), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTimeZone.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTimeZone.setDescription('System time zone')
sensorProbeMegaVersion = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeMegaVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMegaVersion.setDescription('Version number of mega board')
sensorProbeNtpMode = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notUse", 0), ("oneTime", 1), ("onSystemStartUp", 2), ("onceAMounth", 3), ("onceAWeek", 4), ("onceADay", 5), ("onceAnHour", 6), ("continuous", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeNtpMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNtpMode.setDescription('Mode to synchronous with ntp server')
sensorProbeNtpServer = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 85), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeNtpServer.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNtpServer.setDescription('NTP server which this machine synchronous with')
sensorProbeSMTPAuth = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSMTPAuth.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSMTPAuth.setDescription('This enables the SMTP authentication')
sensorProbeSMTPLogin = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 88), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSMTPLogin.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSMTPLogin.setDescription('The username used to login into SMTP server')
sensorProbeSMTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 89), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSMTPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSMTPPassword.setDescription('The password used to login into SMTP server')
sensorProbeDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 90), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDNSServer.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDNSServer.setDescription('IP address of the DNS server')
sensorProbeAltWebPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 91), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeAltWebPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeAltWebPort.setDescription('The alternative for a port number 80 used to access the web interface')
sensorProbeNumberOfSensorPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeNumberOfSensorPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNumberOfSensorPort.setDescription('The number of sensor ports(regardless of their current state)')
sensorProbeSendTrapsAlive = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 93), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSendTrapsAlive.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSendTrapsAlive.setDescription('On or off send keep alive traps.')
sensorProbeTrapReIntervalAlive = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 94), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTrapReIntervalAlive.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTrapReIntervalAlive.setDescription('Time between each keep alive trap.')
sensorProbeUseCamera = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 95), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeUseCamera.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeUseCamera.setDescription('On or off camera.')
sensorProbeAdcCalibratePort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 96), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeAdcCalibratePort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeAdcCalibratePort.setDescription('Calibrate value for analog sensor.')
sensorProbeMailSubject = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 98), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailSubject.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMailSubject.setDescription('Email Subject.')
sensorProbeSnmpPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 99), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSnmpPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSnmpPort.setDescription('SP Only: Port number used to access snmp')
sensorProbeSnmpTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 100), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSnmpTrapPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSnmpTrapPort.setDescription('SP Only: Port number used to access trap snmp')
sensorProbeSnmpIndexingMode = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("index0", 0), ("index1", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSnmpIndexingMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSnmpIndexingMode.setDescription('CP8 Only: Snmp table index starting from 0 or 1 ')
sensorProbeNotifyBoot = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 103), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeNotifyBoot.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNotifyBoot.setDescription('SP2 Only: Enable Notify on boot up')
sensorProbeDelayNotifyBoot = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 104), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDelayNotifyBoot.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDelayNotifyBoot.setDescription('SP2 Only: Delay time for boot up notify')
sensorProbeSmtpPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 105), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSmtpPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSmtpPort.setDescription('SMTP Port number used to send email')
sensorProbeReboot = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 106), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeReboot.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeReboot.setDescription('Reboot SP2/SP8 set to 1')
sensorProbeServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeServerEnable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeServerEnable.setDescription('Enable database changed notify feature')
sensorProbeFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 108), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeFirmwareVersion.setDescription('Current firmware version')
sensorProbeProductType = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 109), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 11, 12, 13, 16))).clone(namedValues=NamedValues(("sensorProbe2", 1), ("sensorProbe8", 2), ("cameraProbe", 4), ("securityProbe", 5), ("securityProbe5E", 6), ("securityProbe5ES", 11), ("securityProbe5ESV", 12), ("securityProbeDCU", 13), ("sensorProbePlus", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeProductType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeProductType.setDescription('Product type')
sensorProbeRequestResendTrap = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 110), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRequestResendTrap.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRequestResendTrap.setDescription('SP only: Send immediately all traps by set to 1')
sensorProbeSeparateEmail = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notSeparate", 0), ("separate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSeparateEmail.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSeparateEmail.setDescription('SP only: Separate Email by set 1 for not Separate Email set 0')
sensorProbeMailCustom = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 113), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("custom", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailCustom.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMailCustom.setDescription("SP only: Custom mail is removed 'http://' in the mail footer")
sensorProbeUntidePassword = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 114), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tidePassword", 0), ("untidePassword", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeUntidePassword.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeUntidePassword.setDescription('Use web password as SNMP password')
sensorProbeReloadNetwork = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 116), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reload", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeReloadNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeReloadNetwork.setDescription('Set 1 for reload network seting')
sensorProbeStatusNumber = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 117))
sensorProbeStatusNumberNotNormal = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 117, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeStatusNumberNotNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeStatusNumberNotNormal.setDescription('Number of sensor status is Warning, Critical and Sensor Error')
sensorProbeStatusNumberCriticalAndError = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 117, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeStatusNumberCriticalAndError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeStatusNumberCriticalAndError.setDescription('Number of sensor status is Critical and Sensor Error')
sensorProbeStatusNumberError = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 117, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeStatusNumberError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeStatusNumberError.setDescription('Number of sensor status is Sensor Error')
sensorProbeTypeName = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118))
sensorProbeTypeTemperatureName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeTemperatureName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeTemperatureName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeSHT11HumidityName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeSHT11HumidityName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeSHT11HumidityName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeSHT11TempName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeSHT11TempName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeSHT11TempName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeType4to20MAName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeType4to20MAName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeType4to20MAName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeDCvoltageName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeDCvoltageName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeDCvoltageName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeAirflowName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeAirflowName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeAirflowName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeDrycontactInoutName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeDrycontactInoutName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeDrycontactInoutName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeDrycontactInputName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeDrycontactInputName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeDrycontactInputName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeMotionName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeMotionName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeMotionName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeWaterName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeWaterName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeWaterName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeSecurityName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeSecurityName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeSecurityName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeSirenName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeSirenName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeSirenName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeRelayName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeRelayName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeRelayName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeACvoltageName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeACvoltageName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeACvoltageName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeADE7763VRMSName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeADE7763VRMSName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeADE7763VRMSName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeADE7763IRMSName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeADE7763IRMSName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeADE7763IRMSName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeADE7763WattName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeADE7763WattName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeADE7763WattName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeADE7763WatthourName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeADE7763WatthourName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeADE7763WatthourName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypePCF8574XRelayName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypePCF8574XRelayName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypePCF8574XRelayName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeThermocoupleName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeThermocoupleName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeThermocoupleName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeSmokeName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeSmokeName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeSmokeName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeXDryName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeXDryName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeXDryName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeTemperatureArrayName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeTemperatureArrayName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeTemperatureArrayName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeWaterRopeName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeWaterRopeName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeWaterRopeName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeFuelLevelName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeFuelLevelName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeFuelLevelName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeTankSenderName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeTankSenderName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeTankSenderName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeThermostatName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 128), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeThermostatName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeThermostatName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeVirtualName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 129), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeVirtualName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeVirtualName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeSoundName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 130), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeSoundName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeSoundName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeSoftMotionName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 131), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeSoftMotionName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeSoftMotionName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeNoSignalName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 132), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeNoSignalName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeNoSignalName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypePowerMeterName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 134), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypePowerMeterName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypePowerMeterName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeSHT11Name = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 135), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeSHT11Name.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeSHT11Name.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeADE7763Name = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 136), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeADE7763Name.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeADE7763Name.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeProductRevision = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 119), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeProductRevision.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeProductRevision.setDescription('SP only: Revision number')
sensorProbePowerMeter = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 125))
sensorProbePowerMeter1phDelayBetweenCommand = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 125, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePowerMeter1phDelayBetweenCommand.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbePowerMeter1phDelayBetweenCommand.setDescription('A delay time between command for 1ph power meter(in milliseconds)')
sensorProbePowerMeter3phDelayBetweenCommand = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 125, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePowerMeter3phDelayBetweenCommand.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbePowerMeter3phDelayBetweenCommand.setDescription('A delay time between command for 3ph power meter(in milliseconds)')
sensorProbePowerMeter1phDelayBetweenMeter = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 125, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePowerMeter1phDelayBetweenMeter.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbePowerMeter1phDelayBetweenMeter.setDescription('A delay time of command between power meter(in milliseconds)')
sensorProbePowerMeter3phDelayBetweenMeter = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 125, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePowerMeter3phDelayBetweenMeter.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbePowerMeter3phDelayBetweenMeter.setDescription('A delay time of command between power meter(in milliseconds)')
sensorProbePowerMeterWaitTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 125, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePowerMeterWaitTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbePowerMeterWaitTimeout.setDescription('A waiting timeout for receiving a command(in milliseconds)')
sensorProbePowerMeterCountSentPacket = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 125, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbePowerMeterCountSentPacket.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbePowerMeterCountSentPacket.setDescription('Count send packets of this sensorProbe')
sensorProbePowerMeterCountRecievedPacket = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 125, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbePowerMeterCountRecievedPacket.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbePowerMeterCountRecievedPacket.setDescription('Count received packets of this sensorProbe')
sensorProbePowerMeterCountTimeoutPacket = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 125, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbePowerMeterCountTimeoutPacket.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbePowerMeterCountTimeoutPacket.setDescription('Count timeout packets of this sensorProbe')
sensorProbePowerMeterCountCRCErrorPacket = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 125, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbePowerMeterCountCRCErrorPacket.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbePowerMeterCountCRCErrorPacket.setDescription('Count error crc packets of this sensorProbe')
securityProbe = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 2))
secSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 2, 1))
secDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 2, 2))
deviceTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 2, 1), )
if mibBuilder.loadTexts: deviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: deviceTable.setDescription('This table contains the property for every plugged-in device.')
deviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 2, 1, 1), ).setIndexNames((0, "SPAGENT-MIB", "deviceIndex"))
if mibBuilder.loadTexts: deviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: deviceEntry.setDescription('This is an entry in the deviceEntry Table')
deviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 184549375))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: deviceIndex.setDescription('The index into the device table')
deviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceDescription.setStatus('mandatory')
if mibBuilder.loadTexts: deviceDescription.setDescription('A Description of this device')
deviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceType.setStatus('mandatory')
if mibBuilder.loadTexts: deviceType.setDescription('...')
deviceInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInfo.setStatus('mandatory')
if mibBuilder.loadTexts: deviceInfo.setDescription('A information of this device')
deviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: deviceStatus.setDescription('...')
deviceWorstSensotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceWorstSensotStatus.setStatus('mandatory')
if mibBuilder.loadTexts: deviceWorstSensotStatus.setDescription('...')
deviceIntelligentTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2), )
if mibBuilder.loadTexts: deviceIntelligentTable.setStatus('mandatory')
if mibBuilder.loadTexts: deviceIntelligentTable.setDescription('This table contains the property for every plugged-in device.')
deviceIntelligentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "deviceIntelligentIndex"))
if mibBuilder.loadTexts: deviceIntelligentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: deviceIntelligentEntry.setDescription('This is an entry in the deviceEntry Table')
deviceIntelligentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIntelligentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: deviceIntelligentIndex.setDescription('The index into the deviceIntelligent table')
deviceIntelligentDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceIntelligentDescription.setStatus('mandatory')
if mibBuilder.loadTexts: deviceIntelligentDescription.setDescription('A Description of this device')
deviceIntelligentInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIntelligentInfo.setStatus('mandatory')
if mibBuilder.loadTexts: deviceIntelligentInfo.setDescription('A information of this device')
deviceIntelligentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIntelligentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: deviceIntelligentStatus.setDescription('...')
sensorIntelligentTypeSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentTypeSelected.setStatus('mandatory')
if mibBuilder.loadTexts: sensorIntelligentTypeSelected.setDescription('...')
deviceIntelligentWorstSensotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIntelligentWorstSensotStatus.setStatus('mandatory')
if mibBuilder.loadTexts: deviceIntelligentWorstSensotStatus.setDescription('...')
sensorIntelligentPort1GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentPort1GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorIntelligentPort1GoOnline.setDescription('...')
sensorIntelligentPort2GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentPort2GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorIntelligentPort2GoOnline.setDescription('...')
sensorIntelligentPort3GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentPort3GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorIntelligentPort3GoOnline.setDescription('...')
sensorIntelligentPort4GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentPort4GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorIntelligentPort4GoOnline.setDescription('...')
sensorIntelligentPort5GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentPort5GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorIntelligentPort5GoOnline.setDescription('...')
sensorIntelligentPort6GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentPort6GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorIntelligentPort6GoOnline.setDescription('...')
sensorIntelligentPort7GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentPort7GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorIntelligentPort7GoOnline.setDescription('...')
sensorIntelligentPort8GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentPort8GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorIntelligentPort8GoOnline.setDescription('...')
deviceDryContactTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3), )
if mibBuilder.loadTexts: deviceDryContactTable.setStatus('mandatory')
if mibBuilder.loadTexts: deviceDryContactTable.setDescription('This table contains the property for every plugged-in device.')
deviceDryContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1), ).setIndexNames((0, "SPAGENT-MIB", "deviceDryContactIndex"))
if mibBuilder.loadTexts: deviceDryContactEntry.setStatus('mandatory')
if mibBuilder.loadTexts: deviceDryContactEntry.setDescription('This is an entry in the deviceEntry Table')
deviceDryContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDryContactIndex.setStatus('mandatory')
if mibBuilder.loadTexts: deviceDryContactIndex.setDescription('The index into the deviceDryContact table')
deviceDryContactDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceDryContactDescription.setStatus('mandatory')
if mibBuilder.loadTexts: deviceDryContactDescription.setDescription('A Description of this device')
deviceDryContactInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDryContactInfo.setStatus('mandatory')
if mibBuilder.loadTexts: deviceDryContactInfo.setDescription('A information of this device')
deviceDryContactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDryContactStatus.setStatus('mandatory')
if mibBuilder.loadTexts: deviceDryContactStatus.setDescription('...')
deviceDryContactWorstSensotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDryContactWorstSensotStatus.setStatus('mandatory')
if mibBuilder.loadTexts: deviceDryContactWorstSensotStatus.setDescription('...')
sensorDryContactPort1GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort1GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort1GoOnline.setDescription('...')
sensorDryContactPort2GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort2GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort2GoOnline.setDescription('...')
sensorDryContactPort3GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort3GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort3GoOnline.setDescription('...')
sensorDryContactPort4GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort4GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort4GoOnline.setDescription('...')
sensorDryContactPort5GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort5GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort5GoOnline.setDescription('...')
sensorDryContactPort6GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort6GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort6GoOnline.setDescription('...')
sensorDryContactPort7GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort7GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort7GoOnline.setDescription('...')
sensorDryContactPort8GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort8GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort8GoOnline.setDescription('...')
sensorDryContactPort9GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort9GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort9GoOnline.setDescription('...')
sensorDryContactPort10GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 109), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort10GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort10GoOnline.setDescription('...')
sensorDryContactPort11GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort11GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort11GoOnline.setDescription('...')
sensorDryContactPort12GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort12GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort12GoOnline.setDescription('...')
sensorDryContactPort13GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort13GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort13GoOnline.setDescription('...')
sensorDryContactPort14GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 113), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort14GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort14GoOnline.setDescription('...')
sensorDryContactPort15GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 114), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort15GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort15GoOnline.setDescription('...')
sensorDryContactPort16GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 115), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort16GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort16GoOnline.setDescription('...')
deviceAccessTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 2, 4), )
if mibBuilder.loadTexts: deviceAccessTable.setStatus('mandatory')
if mibBuilder.loadTexts: deviceAccessTable.setDescription('This table contains the property for every plugged-in device.')
deviceAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 2, 4, 1), ).setIndexNames((0, "SPAGENT-MIB", "deviceAccessIndex"))
if mibBuilder.loadTexts: deviceAccessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: deviceAccessEntry.setDescription('This is an entry in the deviceEntry Table')
deviceAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceAccessIndex.setStatus('mandatory')
if mibBuilder.loadTexts: deviceAccessIndex.setDescription('The index into the deviceAccess table')
deviceAccessDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceAccessDescription.setStatus('mandatory')
if mibBuilder.loadTexts: deviceAccessDescription.setDescription('A Description of this device')
deviceAccessInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceAccessInfo.setStatus('mandatory')
if mibBuilder.loadTexts: deviceAccessInfo.setDescription('A information of this device')
deviceAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceAccessStatus.setStatus('mandatory')
if mibBuilder.loadTexts: deviceAccessStatus.setDescription('...')
deviceAccessWorstSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceAccessWorstSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: deviceAccessWorstSensorStatus.setDescription('...')
devicePowerMeterTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5), )
if mibBuilder.loadTexts: devicePowerMeterTable.setStatus('mandatory')
if mibBuilder.loadTexts: devicePowerMeterTable.setDescription('This table contains the property for every power meter plugged-in.')
devicePowerMeterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5, 1), ).setIndexNames((0, "SPAGENT-MIB", "devicePowerMeterIndex"))
if mibBuilder.loadTexts: devicePowerMeterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: devicePowerMeterEntry.setDescription('This is an entry in the devicePowerMeterEntry Table')
devicePowerMeterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 184549375))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerMeterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: devicePowerMeterIndex.setDescription('The index into the power meter table')
devicePowerMeterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devicePowerMeterDescription.setStatus('mandatory')
if mibBuilder.loadTexts: devicePowerMeterDescription.setDescription('A Description of this power meter')
devicePowerMeterInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerMeterInfo.setStatus('mandatory')
if mibBuilder.loadTexts: devicePowerMeterInfo.setDescription('A information of this power meter')
devicePowerMeterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerMeterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: devicePowerMeterStatus.setDescription('A status of this power meter')
devicePowerMeterWorstSensotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerMeterWorstSensotStatus.setStatus('mandatory')
if mibBuilder.loadTexts: devicePowerMeterWorstSensotStatus.setDescription('...')
devicePowerMeterType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerMeterType.setStatus('mandatory')
if mibBuilder.loadTexts: devicePowerMeterType.setDescription('A type of this power meter')
devicePowerMeterDelayBetweenCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devicePowerMeterDelayBetweenCommand.setStatus('mandatory')
if mibBuilder.loadTexts: devicePowerMeterDelayBetweenCommand.setDescription('A delay time between communication packet of this power meter(in milliseconds)')
devicePowerMeterCountSentPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerMeterCountSentPacket.setStatus('mandatory')
if mibBuilder.loadTexts: devicePowerMeterCountSentPacket.setDescription('Count send packets of this sensor')
devicePowerMeterCountRecievedPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerMeterCountRecievedPacket.setStatus('mandatory')
if mibBuilder.loadTexts: devicePowerMeterCountRecievedPacket.setDescription('Count received packets of this sensor')
devicePowerMeterCountTimeoutPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerMeterCountTimeoutPacket.setStatus('mandatory')
if mibBuilder.loadTexts: devicePowerMeterCountTimeoutPacket.setDescription('Count timeout packets of this sensor')
devicePowerMeterCountCRCerrorPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerMeterCountCRCerrorPacket.setStatus('mandatory')
if mibBuilder.loadTexts: devicePowerMeterCountCRCerrorPacket.setDescription('Count error crc packets of this sensor')
deviceLicense = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6))
deviceLicenseExpTotal = MibScalar((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicenseExpTotal.setStatus('mandatory')
if mibBuilder.loadTexts: deviceLicenseExpTotal.setDescription('Expansion License Total')
deviceLicenseExpUsed = MibScalar((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicenseExpUsed.setStatus('mandatory')
if mibBuilder.loadTexts: deviceLicenseExpUsed.setDescription('Expansion License Used')
deviceLicenseExpAvailable = MibScalar((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicenseExpAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: deviceLicenseExpAvailable.setDescription('Expansion License Available')
deviceLicensePmsTotal = MibScalar((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicensePmsTotal.setStatus('mandatory')
if mibBuilder.loadTexts: deviceLicensePmsTotal.setDescription('PMS License Total')
deviceLicensePmsUsed = MibScalar((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicensePmsUsed.setStatus('mandatory')
if mibBuilder.loadTexts: deviceLicensePmsUsed.setDescription('PMS License Used')
deviceLicensePmsAvailable = MibScalar((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicensePmsAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: deviceLicensePmsAvailable.setDescription('PMS License Available')
deviceLicenseVrtTotal = MibScalar((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicenseVrtTotal.setStatus('mandatory')
if mibBuilder.loadTexts: deviceLicenseVrtTotal.setDescription('Virtual License Total')
deviceLicenseVrtUsed = MibScalar((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicenseVrtUsed.setStatus('mandatory')
if mibBuilder.loadTexts: deviceLicenseVrtUsed.setDescription('Virtual License Used')
deviceLicenseVrtAvailable = MibScalar((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicenseVrtAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: deviceLicenseVrtAvailable.setDescription('Virtual License Available')
deviceLicenseIPv6Enable = MibScalar((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicenseIPv6Enable.setStatus('mandatory')
if mibBuilder.loadTexts: deviceLicenseIPv6Enable.setDescription('IPv6 License Enable (0 : Disable, 1 : Enable)')
deviceLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 11), )
if mibBuilder.loadTexts: deviceLicenseTable.setStatus('mandatory')
if mibBuilder.loadTexts: deviceLicenseTable.setDescription('This table contains the license of Expansion board, PMS and Virtual sensor.')
deviceLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 11, 1), ).setIndexNames((0, "SPAGENT-MIB", "deviceLicenseIndex"))
if mibBuilder.loadTexts: deviceLicenseEntry.setStatus('mandatory')
if mibBuilder.loadTexts: deviceLicenseEntry.setDescription('This is an entry in the deviceLicenseEntry Table')
deviceLicenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicenseIndex.setStatus('mandatory')
if mibBuilder.loadTexts: deviceLicenseIndex.setDescription('The index into the device table (License Key)')
deviceLicenseExpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicenseExpCount.setStatus('mandatory')
if mibBuilder.loadTexts: deviceLicenseExpCount.setDescription('Expansion Connection')
deviceLicensePmsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicensePmsCount.setStatus('mandatory')
if mibBuilder.loadTexts: deviceLicensePmsCount.setDescription('PMS Unit number')
deviceLicenseVrtCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicenseVrtCount.setStatus('mandatory')
if mibBuilder.loadTexts: deviceLicenseVrtCount.setDescription('Virtual Sensor')
deviceLicenseIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicenseIpv6.setStatus('mandatory')
if mibBuilder.loadTexts: deviceLicenseIpv6.setDescription('IPv6 license enable (0 : Disable, 1 : Enable)')
deviceLicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 6, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activated", 1), ("deactivated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLicenseStatus.setStatus('mandatory')
if mibBuilder.loadTexts: deviceLicenseStatus.setDescription('License status')
secSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 2, 3))
sensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1), )
if mibBuilder.loadTexts: sensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTable.setDescription('This table contains the property and reading value for every sensor.')
sensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorIndex"))
if mibBuilder.loadTexts: sensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorEntry.setDescription('This is an entry in the sensorTable Table')
sensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorIndex.setDescription('The index into the sensor table')
sensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDescription.setDescription('A Description of this sensor')
sensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 128, 129, 130, 131, 132, 133, 224, 255))).clone(namedValues=NamedValues(("temperature", 1), ("humidity", 2), ("temperature-dual", 3), ("four-20mA", 4), ("dcvoltage", 5), ("airflow", 6), ("io", 7), ("drycontact", 8), ("motion", 9), ("water", 10), ("security", 11), ("siren", 12), ("relay", 13), ("acvoltage", 14), ("vrms", 15), ("irms", 16), ("watt", 17), ("watthour", 18), ("xrelay", 19), ("thermocouple", 20), ("smoke", 21), ("drycontact-array", 22), ("temperature-array", 23), ("thermostat", 128), ("virtual", 129), ("sound", 130), ("softmotion", 131), ("camera-dummy", 132), ("board-state", 133), ("nosignal", 224), ("test", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorType.setDescription('Enter the type of this Sensor')
sensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorValue.setDescription('The value in this sensor')
sensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorUnit.setDescription('The unit string')
sensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorStatus.setDescription('The current status of this sensor')
sensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorGoOffline.setDescription('To take offline enter a 2')
sensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPort.setDescription('Sensor port')
sensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSubPort.setDescription('Sensor sub port')
sensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDeviceIndex.setDescription('Device Index of sensor')
sensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDisplayStyle.setDescription('Temperature display style')
sensorHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHighCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHighCriticalDescription.setDescription('A HighCritical Description of this sensor')
sensorLowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorLowCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorLowCriticalDescription.setDescription('A LowCritical Description of this sensor')
sensorNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorNormalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorNormalDescription.setDescription('A Normal Description of this sensor')
sensorLowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorLowWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorLowWarningDescription.setDescription('A LowWarning Description of this sensor')
sensorHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHighWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHighWarningDescription.setDescription('A HighWarning Description of this sensor')
sensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorErrorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorErrorDescription.setDescription('A SensorError Description of this sensor')
sensorOnDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorOnDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorOnDescription.setDescription('A On Description of this sensor')
sensorOffDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorOffDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorOffDescription.setDescription('A Off Description of this sensor')
sensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHighCriticalColor.setDescription('A HighCritical Color of this sensor')
sensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorLowCriticalColor.setDescription('A LowCritical Color of this sensor')
sensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorNormalColor.setDescription('A Normal Color of this sensor')
sensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorLowWarningColor.setDescription('A LowWarning Color of this sensor')
sensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHighWarningColor.setDescription('A HighWarning Color of this sensor')
sensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorErrorColor.setDescription('A SensorError Color of this sensor')
sensorOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorOnColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorOnColor.setDescription('A On Color of this sensor')
sensorOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorOffColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorOffColor.setDescription('A Off Color of this sensor')
sensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAcknowledge.setDescription('Sensor acknowledge')
sensorValueFormatFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 99), Opaque().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorValueFormatFloat.setStatus('mandatory')
if mibBuilder.loadTexts: sensorValueFormatFloat.setDescription('The floating-point IEEE Standard 754 reading value in this sensor')
sensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorId.setStatus('mandatory')
if mibBuilder.loadTexts: sensorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
sensorTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2), )
if mibBuilder.loadTexts: sensorTemperatureTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureTable.setDescription('This table contains the property and reading value for every Temperature sensor.')
sensorTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorTemperatureIndex"))
if mibBuilder.loadTexts: sensorTemperatureEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureIndex.setDescription('The index into the sensor table')
sensorTemperatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureDescription.setDescription('A Description of this sensor')
sensorTemperatureType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 20, 23))).clone(namedValues=NamedValues(("temperature", 1), ("dualsensor", 3), ("thermocouple", 20), ("arraytemp", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureType.setDescription('Enter the type of this Sensor')
sensorTemperatureDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureDegree.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureDegree.setDescription('The degrees in this sensor')
sensorTemperatureUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureUnit.setDescription('The unit string')
sensorTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureStatus.setDescription('The current status of this Sensor')
sensorTemperatureGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureGoOffline.setDescription('To take offline enter a 2')
sensorTemperatureLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorTemperatureLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureLowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorTemperatureHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureHighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensorTemperatureHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorTemperatureRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorTemperatureDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorTemperatureDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorTemperatureDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorTemperatureDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorTemperatureDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorTemperatureDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorTemperatureRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureRaw.setDescription('The raw degree data from the temperature sensor, slightly higher resolution')
sensorTemperatureOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureOffset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureOffset.setDescription('Temperature Offset reading')
sensorTemperaturePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperaturePort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperaturePort.setDescription('Sensor port')
sensorTemperatureSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureSubPort.setDescription('Sensor sub port')
sensorTemperatureDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureDeviceIndex.setDescription('Device Index of sensor')
sensorTemperatureDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureDisplayStyle.setDescription('Temperature display style')
sensorTemperatureHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
sensorTemperatureLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
sensorTemperatureNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureNormalDesc.setDescription('A Normal Description of this sensor')
sensorTemperatureLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureLowWarningDesc.setDescription('A LowWarning Description of this sensor')
sensorTemperatureHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureHighWarningDesc.setDescription('A HighWarning Description of this sensor')
sensorTemperatureSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureSensorErrorDesc.setDescription('A SensorError Description of this sensor')
sensorTemperatureHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureHighCriticalColor.setDescription('A HighCritical Color of this sensor')
sensorTemperatureLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureLowCriticalColor.setDescription('A LowCritical Color of this sensor')
sensorTemperatureNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureNormalColor.setDescription('A Normal Color of this sensor')
sensorTemperatureLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureLowWarningColor.setDescription('A LowWarning Color of this sensor')
sensorTemperatureHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureHighWarningColor.setDescription('A HighWarning Color of this sensor')
sensorTemperatureSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureSensorErrorColor.setDescription('A SensorError Color of this sensor')
sensorTemperatureAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureAcknowledge.setDescription('Temperature sensor acknowledge')
sensorTemperatureSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 71), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureSerialNumber.setDescription('Serial Number of Temperature Sensor in the following format\n               x is Hex Digit xx-xx-xx-xx-xx-xx-xx-xx')
sensorTemperatureId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureId.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
sensorHumidityTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3), )
if mibBuilder.loadTexts: sensorHumidityTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityTable.setDescription('This table contains the property and reading value for every sensor.')
sensorHumidityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorHumidityIndex"))
if mibBuilder.loadTexts: sensorHumidityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorHumidityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumidityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityIndex.setDescription('The index into the sensor table')
sensorHumidityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityDescription.setDescription('A Description of this sensor')
sensorHumidityPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumidityPercent.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityPercent.setDescription('The relative humidity percentage measured by this sensor')
sensorHumidityUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityUnit.setDescription('The unit string')
sensorHumidityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumidityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityStatus.setDescription('The current status of this Sensor')
sensorHumidityGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityGoOffline.setDescription('To take offline enter a 2')
sensorHumidityLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorHumidityLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityLowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorHumidityHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityHighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensorHumidityHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorHumidityRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorHumidityDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorHumidityDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorHumidityDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorHumidityDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorHumidityDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorHumidityDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorHumidityRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumidityRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage. This number can go from 0 to 1023 depending on the input voltage')
sensorHumidityOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityOffset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityOffset.setDescription('Humidity Offset reading')
sensorHumidityPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumidityPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityPort.setDescription('Sensor port')
sensorHumiditySubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumiditySubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumiditySubPort.setDescription('Sensor sub port')
sensorHumidityDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumidityDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityDeviceIndex.setDescription('Device Index of sensor')
sensorHumidityDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityDisplayStyle.setDescription('Humidity display style')
sensorHumidityHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
sensorHumidityLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
sensorHumidityNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityNormalDesc.setDescription('A Normal Description of this sensor')
sensorHumidityLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityLowWarningDesc.setDescription('A LowWarning Description of this sensor')
sensorHumidityHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityHighWarningDesc.setDescription('A HighWarning Description of this sensor')
sensorHumiditySensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumiditySensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumiditySensorErrorDesc.setDescription('A SensorError Description of this sensor')
sensorHumidityHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityHighCriticalColor.setDescription('A HighCritical Color of this sensor')
sensorHumidityLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityLowCriticalColor.setDescription('A LowCritical Color of this sensor')
sensorHumidityNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityNormalColor.setDescription('A Normal Color of this sensor')
sensorHumidityLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityLowWarningColor.setDescription('A LowWarning Color of this sensor')
sensorHumidityHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityHighWarningColor.setDescription('A HighWarning Color of this sensor')
sensorHumiditySensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumiditySensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumiditySensorErrorColor.setDescription('A SensorError Color of this sensor')
sensorHumidityAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityAcknowledge.setDescription('Humidity sensor acknowledge')
sensorHumidityId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumidityId.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
sensorDryContactTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4), )
if mibBuilder.loadTexts: sensorDryContactTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactTable.setDescription('This table contains the property and reading value for every sensor.')
sensorDryContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorDryContactIndex"))
if mibBuilder.loadTexts: sensorDryContactEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorDryContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDryContactIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactIndex.setDescription('The index into the Switch sensor table')
sensorDryContactDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactDescription.setDescription('A Description of this sensor Switch')
sensorDryContactType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 22))).clone(namedValues=NamedValues(("drycontact-inout", 7), ("drycontact-input", 8), ("drycontact-array", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDryContactType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactType.setDescription('Enter the type of this Sensor')
sensorDryContactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("outputLow", 8), ("outputHigh", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDryContactStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactStatus.setDescription('The current status of this Sensor, only input switches have a status')
sensorDryContactGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactGoOffline.setDescription('To take offline enter a 2')
sensorDryContactDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactDirection.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactDirection.setDescription('To set a switch to input enter 0. To set a switch to output enter 1')
sensorDryContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactNormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactNormalState.setDescription('The normal state of an input switch. If an input switch is in this state it is normal, else it is critical. An open switch senses +5 volts. A closed switch senses 0 volts.')
sensorDryContactControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("sensor-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactControlMode.setDescription('Control Mode used for selecting the mode to control a sensor output.')
sensorDryContactOutputManualCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactOutputManualCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactOutputManualCycleTime.setDescription('Toggle period in seconds for Manual Cycle action.')
sensorDryContactOutputManualAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("high", 1), ("cycle-Low-High-Low", 2), ("cycle-High-Low-High", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactOutputManualAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactOutputManualAction.setDescription('Control the sensor output manualy')
sensorDryContactPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDryContactPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort.setDescription('Sensor port')
sensorDryContactSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDryContactSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactSubPort.setDescription('Sensor sub port')
sensorDryContactDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDryContactDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactDeviceIndex.setDescription('Device Index of sensor')
sensorDryContactCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactCriticalDesc.setDescription('A Critical Description of this sensor')
sensorDryContactNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactNormalDesc.setDescription('A Normal Description of this sensor')
sensorDryContactOnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactOnDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactOnDesc.setDescription('A On Description of this sensor')
sensorDryContactOffDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactOffDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactOffDesc.setDescription('A Off Description of this sensor')
sensorDryContactCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactCriticalColor.setDescription('A Critical Color of this sensor')
sensorDryContactNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactNormalColor.setDescription('A Normal Color of this sensor')
sensorDryContactOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactOnColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactOnColor.setDescription('A On Color of this sensor')
sensorDryContactOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactOffColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactOffColor.setDescription('A Off Color of this sensor')
sensorDryContactAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactAcknowledge.setDescription('Dry Contact sensor acknowledge')
sensorDryContactId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDryContactId.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
sensor4to20mATable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5), )
if mibBuilder.loadTexts: sensor4to20mATable.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mATable.setDescription('This table contains the property and reading value for every sensor.')
sensor4to20mAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensor4to20mAIndex"))
if mibBuilder.loadTexts: sensor4to20mAEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensor4to20mAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4to20mAIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAIndex.setDescription('The index into the sensor table')
sensor4to20mADescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mADescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mADescription.setDescription('A Description of this sensor')
sensor4to20mAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4to20mAValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAValue.setDescription('The reading value in this sensor')
sensor4to20mAUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAUnit.setDescription('The unit string')
sensor4to20mAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4to20mAStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAStatus.setDescription('The current status of this Sensor')
sensor4to20mAGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAGoOffline.setDescription('To take offline enter a 2')
sensor4to20mALowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mALowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mALowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensor4to20mALowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mALowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mALowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensor4to20mAHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAHighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensor4to20mAHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensor4to20mARearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mARearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mARearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensor4to20mADelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mADelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mADelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensor4to20mADelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mADelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mADelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensor4to20mADelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mADelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mADelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensor4to20mADelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mADelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mADelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensor4to20mADelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mADelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mADelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensor4to20mADelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mADelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mADelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensor4to20mARaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4to20mARaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mARaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage. This number can go from 0 to 1023 depending on the input voltage')
sensor4to20mAOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAOffset.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAOffset.setDescription('4to20mA Offset reading')
sensor4to20mAAmountMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAAmountMaxVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAAmountMaxVoltage.setDescription('The maximum scale of 4to20mA conversion.')
sensor4to20mAAmountBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAAmountBaseVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAAmountBaseVoltage.setDescription('The base scale of 4to20mA conversion.')
sensor4to20mAPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4to20mAPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAPort.setDescription('Sensor port')
sensor4to20mASubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4to20mASubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mASubPort.setDescription('Sensor sub port')
sensor4to20mADeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4to20mADeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mADeviceIndex.setDescription('Device Index of sensor')
sensor4to20mAMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAMaxVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAMaxVoltage.setDescription('The max range for use in conversion.')
sensor4to20mABaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mABaseVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mABaseVoltage.setDescription('The base range for use in conversion.')
sensor4to20mADisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mADisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mADisplayStyle.setDescription('4to20mA display style')
sensor4to20mAHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
sensor4to20mALowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mALowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mALowCriticalDesc.setDescription('A LowCritical Description of this sensor')
sensor4to20mANormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mANormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mANormalDesc.setDescription('A Normal Description of this sensor')
sensor4to20mALowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mALowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mALowWarningDesc.setDescription('A LowWarning Description of this sensor')
sensor4to20mAHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAHighWarningDesc.setDescription('A HighWarning Description of this sensor')
sensor4to20mASensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mASensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mASensorErrorDesc.setDescription('A SensorError Description of this sensor')
sensor4to20mAHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAHighCriticalColor.setDescription('A HighCritical Color of this sensor')
sensor4to20mALowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mALowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mALowCriticalColor.setDescription('A LowCritical Color of this sensor')
sensor4to20mANormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mANormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mANormalColor.setDescription('A Normal Color of this sensor')
sensor4to20mALowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mALowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mALowWarningColor.setDescription('A LowWarning Color of this sensor')
sensor4to20mAHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAHighWarningColor.setDescription('A HighWarning Color of this sensor')
sensor4to20mASensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mASensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mASensorErrorColor.setDescription('A SensorError Color of this sensor')
sensor4to20mASensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mASensorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mASensorAcknowledge.setDescription('4to20mA sensor acknowledge')
sensor4to20mAId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4to20mAId.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
sensorDCvoltageTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6), )
if mibBuilder.loadTexts: sensorDCvoltageTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageTable.setDescription('This table contains the property and reading value for every sensor.')
sensorDCvoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorDCvoltageIndex"))
if mibBuilder.loadTexts: sensorDCvoltageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorDCvoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDCvoltageIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageIndex.setDescription('The index into the sensor table')
sensorDCvoltageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageDescription.setDescription('A Description of this sensor')
sensorDCvoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDCvoltageValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageValue.setDescription('The reading value in this sensor')
sensorDCvoltageUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageUnit.setDescription('The unit string')
sensorDCvoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDCvoltageStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageStatus.setDescription('The current status of this Sensor')
sensorDCvoltageGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageGoOffline.setDescription('To take offline enter a 2')
sensorDCvoltageLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorDCvoltageLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageLowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorDCvoltageHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageHighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensorDCvoltageHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorDCvoltageRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorDCvoltageDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorDCvoltageDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorDCvoltageDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorDCvoltageDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorDCvoltageDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorDCvoltageDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorDCvoltageRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDCvoltageRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage. This number can go from 0 to 1023 depending on the input voltage')
sensorDCvoltageOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageOffset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageOffset.setDescription('DC voltage Offset reading')
sensorDCvoltageJumper = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-600, -400, -300, -200, -100, 100, 200, 300, 400, 600))).clone(namedValues=NamedValues(("jumperAt-60", -600), ("jumperAt-40", -400), ("jumperAt-30", -300), ("jumperAt-20", -200), ("jumperAt-10", -100), ("jumperAt10", 100), ("jumperAt20", 200), ("jumperAt30", 300), ("jumperAt40", 400), ("jumperAt60", 600)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageJumper.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageJumper.setDescription('Selected voltage scale (jumper 0) in DC voltage conversion.')
sensorDCvoltageAmountMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageAmountMaxVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageAmountMaxVoltage.setDescription('The maximum scale of DC voltage conversion.')
sensorDCvoltageAmountBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageAmountBaseVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageAmountBaseVoltage.setDescription('The base scale of DC voltage conversion.')
sensorDCvoltagePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDCvoltagePort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltagePort.setDescription('Sensor port')
sensorDCvoltageSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDCvoltageSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageSubPort.setDescription('Sensor sub port')
sensorDCvoltageDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDCvoltageDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageDeviceIndex.setDescription('Device Index of sensor')
sensorDCvoltageMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageMaxVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageMaxVoltage.setDescription('The max voltage range for use in conversion.')
sensorDCvoltageBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageBaseVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageBaseVoltage.setDescription('The base voltage range for use in conversion.')
sensorDCvoltageDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageDisplayStyle.setDescription('DCVoltage display style')
sensorDCvoltageHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
sensorDCvoltageLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
sensorDCvoltageNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageNormalDesc.setDescription('A Normal Description of this sensor')
sensorDCvoltageLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageLowWarningDesc.setDescription('A LowWarning Description of this sensor')
sensorDCvoltageHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageHighWarningDesc.setDescription('A HighWarning Description of this sensor')
sensorDCvoltageSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageSensorErrorDesc.setDescription('A SensorError Description of this sensor')
sensorDCvoltageHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageHighCriticalColor.setDescription('A HighCritical Color of this sensor')
sensorDCvoltageLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageLowCriticalColor.setDescription('A LowCritical Color of this sensor')
sensorDCvoltageNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageNormalColor.setDescription('A Normal Color of this sensor')
sensorDCvoltageLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageLowWarningColor.setDescription('A LowWarning Color of this sensor')
sensorDCvoltageHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageHighWarningColor.setDescription('A HighWarning Color of this sensor')
sensorDCvoltageSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageSensorErrorColor.setDescription('A SensorError Color of this sensor')
sensorDCvoltageAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageAcknowledge.setDescription('DCvoltage sensor acknowledge')
sensorDCvoltageId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDCvoltageId.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
sensorAirflowTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7), )
if mibBuilder.loadTexts: sensorAirflowTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowTable.setDescription('This table contains the property and reading value for every sensor.')
sensorAirflowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorAirflowIndex"))
if mibBuilder.loadTexts: sensorAirflowEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorAirflowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAirflowIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowIndex.setDescription('The index into the Switch sensor table')
sensorAirflowDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowDescription.setDescription('A Description of this sensor Switch')
sensorAirflowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAirflowValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowValue.setDescription('The reading value in this sensor')
sensorAirflowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAirflowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowStatus.setDescription('The current status of this Sensor, only input switches have a status')
sensorAirflowGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowGoOffline.setDescription('To take offline enter a 2')
sensorAirflowLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorAirflowLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowLowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorAirflowHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowHighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensorAirflowHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorAirflowRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorAirflowDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorAirflowDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorAirflowDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorAirflowDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorAirflowDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorAirflowDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorAirflowRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAirflowRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage. This number can go from 0 to 1023 depending on the input voltage')
sensorAirflowPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAirflowPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowPort.setDescription('Sensor port')
sensorAirflowSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAirflowSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowSubPort.setDescription('Sensor sub port')
sensorAirflowDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAirflowDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowDeviceIndex.setDescription('Device Index of sensor')
sensorAirflowDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowDisplayStyle.setDescription('Airflow display style')
sensorAirflowHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
sensorAirflowLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
sensorAirflowNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowNormalDesc.setDescription('A Normal Description of this sensor')
sensorAirflowLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowLowWarningDesc.setDescription('A LowWarning Description of this sensor')
sensorAirflowHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowHighWarningDesc.setDescription('A HighWarning Description of this sensor')
sensorAirflowSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowSensorErrorDesc.setDescription('A SensorError Description of this sensor')
sensorAirflowHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowHighCriticalColor.setDescription('A HighCritical Color of this sensor')
sensorAirflowLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowLowCriticalColor.setDescription('A LowCritical Color of this sensor')
sensorAirflowNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowNormalColor.setDescription('A Normal Color of this sensor')
sensorAirflowLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowLowWarningColor.setDescription('A LowWarning Color of this sensor')
sensorAirflowHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowHighWarningColor.setDescription('A HighWarning Color of this sensor')
sensorAirflowSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowSensorErrorColor.setDescription('A SensorError Color of this sensor')
sensorAirflowAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowAcknowledge.setDescription('Airflow sensor acknowledge')
sensorAirflowId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAirflowId.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
sensorMotionTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8), )
if mibBuilder.loadTexts: sensorMotionTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionTable.setDescription('This table contains the property and reading value for every sensor.')
sensorMotionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorMotionIndex"))
if mibBuilder.loadTexts: sensorMotionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorMotionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorMotionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionIndex.setDescription('The index into the Switch sensor table')
sensorMotionDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMotionDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionDescription.setDescription('A Description of this sensor Switch')
sensorMotionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorMotionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionStatus.setDescription('The current status of this Sensor, only input switches have a status')
sensorMotionGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMotionGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionGoOffline.setDescription('To take offline enter a 2')
sensorMotionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorMotionPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionPort.setDescription('Sensor port')
sensorMotionSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorMotionSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionSubPort.setDescription('Sensor sub port')
sensorMotionDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorMotionDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionDeviceIndex.setDescription('Device Index of sensor')
sensorMotionCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMotionCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionCriticalDesc.setDescription('A Critical Description of this sensor')
sensorMotionNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMotionNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionNormalDesc.setDescription('A Normal Description of this sensor')
sensorMotionCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMotionCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionCriticalColor.setDescription('A Critical Color of this sensor')
sensorMotionNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMotionNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionNormalColor.setDescription('A Normal Color of this sensor')
sensorMotionAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMotionAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionAcknowledge.setDescription('Motion sensor acknowledge')
sensorMotionId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorMotionId.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
sensorWaterTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9), )
if mibBuilder.loadTexts: sensorWaterTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterTable.setDescription('This table contains the property and reading value for every sensor.')
sensorWaterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorWaterIndex"))
if mibBuilder.loadTexts: sensorWaterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorWaterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterIndex.setDescription('The index into the Switch sensor table')
sensorWaterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterDescription.setDescription('A Description of this sensor Switch')
sensorWaterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterStatus.setDescription('The current status of this Sensor, only input switches have a status')
sensorWaterGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterGoOffline.setDescription('To take offline enter a 2')
sensorWaterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterPort.setDescription('Sensor port')
sensorWaterSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterSubPort.setDescription('Sensor sub port')
sensorWaterDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterDeviceIndex.setDescription('Device Index of sensor')
sensorWaterCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterCriticalDesc.setDescription('A Critical Description of this sensor')
sensorWaterNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterNormalDesc.setDescription('A Normal Description of this sensor')
sensorWaterCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterCriticalColor.setDescription('A Critical Color of this sensor')
sensorWaterNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterNormalColor.setDescription('A Normal Color of this sensor')
sensorWaterAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterAcknowledge.setDescription('Water sensor acknowledge')
sensorWaterId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterId.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
sensorSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10), )
if mibBuilder.loadTexts: sensorSecurityTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityTable.setDescription('This table contains the property and reading value for every sensor.')
sensorSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorSecurityIndex"))
if mibBuilder.loadTexts: sensorSecurityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorSecurityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSecurityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityIndex.setDescription('The index into the Switch sensor table')
sensorSecurityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSecurityDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityDescription.setDescription('A Description of this sensor Switch')
sensorSecurityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSecurityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityStatus.setDescription('The current status of this Sensor, only input switches have a status')
sensorSecurityGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSecurityGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityGoOffline.setDescription('To take offline enter a 2')
sensorSecurityPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSecurityPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityPort.setDescription('Sensor port')
sensorSecuritySubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSecuritySubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecuritySubPort.setDescription('Sensor sub port')
sensorSecurityDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSecurityDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityDeviceIndex.setDescription('Device Index of sensor')
sensorSecurityCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSecurityCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityCriticalDesc.setDescription('A Critical Description of this sensor')
sensorSecurityNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSecurityNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityNormalDesc.setDescription('A Normal Description of this sensor')
sensorSecurityCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSecurityCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityCriticalColor.setDescription('A Critical Color of this sensor')
sensorSecurityNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSecurityNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityNormalColor.setDescription('A Normal Color of this sensor')
sensorSecurityAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSecurityAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityAcknowledge.setDescription('Security sensor acknowledge')
sensorSecurityId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSecurityId.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
sensorSirenTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11), )
if mibBuilder.loadTexts: sensorSirenTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenTable.setDescription('This table contains the property and reading value for every sensor.')
sensorSirenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorSirenIndex"))
if mibBuilder.loadTexts: sensorSirenEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorSirenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSirenIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenIndex.setDescription('The index into the Switch sensor table')
sensorSirenDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenDescription.setDescription('A Description of this sensor Switch')
sensorSirenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSirenStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenStatus.setDescription('The current status of this Sensor, only input switches have a status')
sensorSirenGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenGoOffline.setDescription('To take offline enter a 2')
sensorSirenControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("sensor-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenControlMode.setDescription('Control Mode used for selecting the mode to control a siren.')
sensorSirenManualCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenManualCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenManualCycleTime.setDescription('Toggle period in seconds for Manual Cycle action.')
sensorSirenManualAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("turn-On", 0), ("turn-Off", 1), ("cycle-On-Off-On", 2), ("cycle-Off-On-Off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenManualAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenManualAction.setDescription('Control the siren manualy')
sensorSirenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSirenPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenPort.setDescription('Sensor port')
sensorSirenSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSirenSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenSubPort.setDescription('Sensor sub port')
sensorSirenDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSirenDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenDeviceIndex.setDescription('Device Index of sensor')
sensorSirenOnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenOnDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenOnDesc.setDescription('A On Description of this sensor')
sensorSirenOffDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenOffDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenOffDesc.setDescription('A Off Description of this sensor')
sensorSirenOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenOnColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenOnColor.setDescription('A On Color of this sensor')
sensorSirenOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenOffColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenOffColor.setDescription('A Off Color of this sensor')
sensorSirenAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenAcknowledge.setDescription('Siren sensor acknowledge')
sensorSirenId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSirenId.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
sensorRelayTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12), )
if mibBuilder.loadTexts: sensorRelayTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayTable.setDescription('This table contains the property and reading value for every sensor.')
sensorRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorRelayIndex"))
if mibBuilder.loadTexts: sensorRelayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorRelayIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayIndex.setDescription('The index into the Switch sensor table')
sensorRelayDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayDescription.setDescription('A Description of this sensor Switch')
sensorRelayType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(13, 19))).clone(namedValues=NamedValues(("relay", 13), ("xrelay", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorRelayType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayType.setDescription('Enter the type of this Sensor')
sensorRelayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorRelayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayStatus.setDescription('The current status of this Sensor, only input switches have a status')
sensorRelayGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayGoOffline.setDescription('To take offline enter a 2')
sensorRelayControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("sensor-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayControlMode.setDescription('Control Mode used for selecting the mode to control a relay.')
sensorRelayManualCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayManualCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayManualCycleTime.setDescription('Toggle period in seconds for Manual Cycle action.')
sensorRelayManualAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("turn-On", 0), ("turn-Off", 1), ("cycle-On-Off-On", 2), ("cycle-Off-On-Off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayManualAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayManualAction.setDescription('Control the relay manualy')
sensorRelayPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorRelayPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayPort.setDescription('Sensor port')
sensorRelaySubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorRelaySubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelaySubPort.setDescription('Sensor sub port')
sensorRelayDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorRelayDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayDeviceIndex.setDescription('Device Index of sensor')
sensorRelayOnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayOnDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayOnDesc.setDescription('A On Description of this sensor')
sensorRelayOffDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayOffDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayOffDesc.setDescription('A Off Description of this sensor')
sensorRelayOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayOnColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayOnColor.setDescription('A On Color of this sensor')
sensorRelayOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayOffColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayOffColor.setDescription('A Off Color of this sensor')
sensorRelayAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayAcknowledge.setDescription('Relay sensor acknowledge')
sensorRelayId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorRelayId.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
sensorACvoltageTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13), )
if mibBuilder.loadTexts: sensorACvoltageTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageTable.setDescription('This table contains the property and reading value for every sensor.')
sensorACvoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorACvoltageIndex"))
if mibBuilder.loadTexts: sensorACvoltageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorACvoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorACvoltageIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageIndex.setDescription('The index into the Switch sensor table')
sensorACvoltageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorACvoltageDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageDescription.setDescription('A Description of this sensor Switch')
sensorACvoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorACvoltageStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageStatus.setDescription('The current status of this Sensor, only input switches have a status')
sensorACvoltageGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorACvoltageGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageGoOffline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorACvoltagePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorACvoltagePort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltagePort.setDescription('Sensor port')
sensorACvoltageSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorACvoltageSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageSubPort.setDescription('Sensor sub port')
sensorACvoltageDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorACvoltageDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageDeviceIndex.setDescription('Device Index of sensor')
sensorACvoltageCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorACvoltageCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageCriticalDesc.setDescription('A Critical Description of this sensor')
sensorACvoltageNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorACvoltageNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageNormalDesc.setDescription('A Normal Description of this sensor')
sensorACvoltageCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorACvoltageCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageCriticalColor.setDescription('A Critical Color of this sensor')
sensorACvoltageNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorACvoltageNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageNormalColor.setDescription('A Normal Color of this sensor')
sensorACvoltageAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorACvoltageAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageAcknowledge.setDescription('ACvoltage sensor acknowledge')
sensorACvoltageId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorACvoltageId.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
sensorSmokeTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14), )
if mibBuilder.loadTexts: sensorSmokeTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeTable.setDescription('This table contains the property and reading value for every sensor.')
sensorSmokeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorSmokeIndex"))
if mibBuilder.loadTexts: sensorSmokeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorSmokeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSmokeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeIndex.setDescription('The index into the Switch sensor table')
sensorSmokeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSmokeDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeDescription.setDescription('A Description of this sensor Switch')
sensorSmokeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSmokeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeStatus.setDescription('The current status of this Sensor, only input switches have a status')
sensorSmokeGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSmokeGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeGoOffline.setDescription('To take offline enter a 2')
sensorSmokePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSmokePort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokePort.setDescription('Sensor port')
sensorSmokeSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSmokeSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeSubPort.setDescription('Sensor sub port')
sensorSmokeDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSmokeDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeDeviceIndex.setDescription('Device Index of sensor')
sensorSmokeCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSmokeCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeCriticalDesc.setDescription('A Critical Description of this sensor')
sensorSmokeNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSmokeNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeNormalDesc.setDescription('A Normal Description of this sensor')
sensorSmokeCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSmokeCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeCriticalColor.setDescription('A Critical Color of this sensor')
sensorSmokeNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSmokeNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeNormalColor.setDescription('A Normal Color of this sensor')
sensorSmokeAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSmokeAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeAcknowledge.setDescription('Smoke sensor acknowledge')
sensorSmokeId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSmokeId.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
sensorThermostatTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20), )
if mibBuilder.loadTexts: sensorThermostatTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatTable.setDescription('This table contains the property and reading value for every sensor.')
sensorThermostatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorThermostatIndex"))
if mibBuilder.loadTexts: sensorThermostatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorThermostatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorThermostatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatIndex.setDescription('The index into the sensor table')
sensorThermostatDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatDescription.setDescription('A Description of this sensor')
sensorThermostatDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorThermostatDegree.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatDegree.setDescription('The degrees in this sensor')
sensorThermostatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorThermostatStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatStatus.setDescription('The current status of this Sensor')
sensorThermostatGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatGoOffline.setDescription('To take offline enter a 2')
sensorThermostatLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorThermostatLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatLowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorThermostatHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatHighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensorThermostatHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorThermostatRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorThermostatDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorThermostatDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorThermostatDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorThermostatDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorThermostatDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorThermostatDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorThermostatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorThermostatPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatPort.setDescription('Sensor port')
sensorThermostatSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorThermostatSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatSubPort.setDescription('Sensor sub port')
sensorThermostatDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorThermostatDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatDeviceIndex.setDescription('Device Index of sensor')
sensorThermostatDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatDisplayStyle.setDescription('Thermostat display style')
sensorThermostatHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
sensorThermostatLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
sensorThermostatNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatNormalDesc.setDescription('A Normal Description of this sensor')
sensorThermostatLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatLowWarningDesc.setDescription('A LowWarning Description of this sensor')
sensorThermostatHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatHighWarningDesc.setDescription('A HighWarning Description of this sensor')
sensorThermostatSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatSensorErrorDesc.setDescription('A SensorError Description of this sensor')
sensorThermostatHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatHighCriticalColor.setDescription('A HighCritical Color of this sensor')
sensorThermostatLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatLowCriticalColor.setDescription('A LowCritical Color of this sensor')
sensorThermostatNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatNormalColor.setDescription('A Normal Color of this sensor')
sensorThermostatLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatLowWarningColor.setDescription('A LowWarning Color of this sensor')
sensorThermostatHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatHighWarningColor.setDescription('A HighWarning Color of this sensor')
sensorThermostatSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatSensorErrorColor.setDescription('A SensorError Color of this sensor')
sensorThermostatAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatAcknowledge.setDescription('Thermostat sensor acknowledge')
sensorThermostatId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorThermostatId.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
sensorWaterRopeTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21), )
if mibBuilder.loadTexts: sensorWaterRopeTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeTable.setDescription('This table contains the property and reading value for every sensor.')
sensorWaterRopeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorWaterRopeIndex"))
if mibBuilder.loadTexts: sensorWaterRopeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeEntry.setDescription('This is an entry in the SensorWaterRopeEntry Table')
sensorWaterRopeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterRopeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeIndex.setDescription('The index into the sensor table')
sensorWaterRopeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeDescription.setDescription('A Description of this sensor')
sensorWaterRopeLeakLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterRopeLeakLocation.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeLeakLocation.setDescription('Location of leakage of water rope sensor.')
sensorWaterRopeUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeUnit.setDescription('Display unit of water rope sensor.')
sensorWaterRopeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterRopeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeStatus.setDescription('The current status of this Sensor')
sensorWaterRopeGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeGoOffline.setDescription('To take offline enter a 2')
sensorWaterRopeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterRopeRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeRaw.setDescription('Raw value of location or length in ohms')
sensorWaterRopeDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterRopeDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeDeviceIndex.setDescription('Device Index of sensor')
sensorWaterRopeCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeCriticalDesc.setDescription('A Critical Description of this sensor')
sensorWaterRopeNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeNormalDesc.setDescription('A Normal Description of this sensor')
sensorWaterRopeSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeSensorErrorDesc.setDescription('A SensorError Description of this sensor')
sensorWaterRopeCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeCriticalColor.setDescription('A Critical Color of this sensor')
sensorWaterRopeNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeNormalColor.setDescription('A Normal Color of this sensor')
sensorWaterRopeSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeSensorErrorColor.setDescription('A SensorError Color of this sensor')
sensorWaterRopeAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeAcknowledge.setDescription('Water Rope sensor acknowledge')
sensorWaterRopeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterRopeLength.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeLength.setDescription('Length of water rope sensor.')
sensorWaterRopeImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeImpedance.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeImpedance.setDescription('Sensing wire impedance per meter value times 100')
sensorWaterRopeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("custom", 0), ("water", 1), ("fuel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeType.setDescription('Water rope sensing cable type')
sensorWaterRopeId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterRopeId.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
sensorPowerTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22), )
if mibBuilder.loadTexts: sensorPowerTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerTable.setDescription('This table contains the property and reading value for every sensor.')
sensorPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorPowerIndex"))
if mibBuilder.loadTexts: sensorPowerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerEntry.setDescription('This is an entry in the sensorPowerEntry Table')
sensorPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPowerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerIndex.setDescription('The index into the Switch sensor table')
sensorPowerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerDescription.setDescription('A Description of this sensor Switch')
sensorPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPowerValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerValue.setDescription('The reading value in this sensor')
sensorPowerUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerUnit.setDescription('The unit string')
sensorPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPowerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerStatus.setDescription('The current status of this Sensor, only input switches have a status')
sensorPowerGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerGoOffline.setDescription('To take offline enter a 2')
sensorPowerLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorPowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerLowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorPowerHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerHighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensorPowerHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorPowerRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorPowerDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorPowerDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorPowerDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorPowerDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorPowerDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorPowerDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorPowerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPowerPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerPort.setDescription('Sensor port')
sensorPowerSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPowerSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerSubPort.setDescription('Sensor sub port')
sensorPowerDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPowerDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerDeviceIndex.setDescription('Device Index of sensor')
sensorPowerTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerTimeOut.setDescription('The polling timeout of Power Sensor.')
sensorPowerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 720))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerInterval.setDescription('The polling interval of Power Sensor.')
sensorPowerErrorRetryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerErrorRetryNum.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerErrorRetryNum.setDescription('Number of retry before error.')
sensorPowerMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerMaxValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerMaxValue.setDescription('The maximum scale of Power value.')
sensorPowerMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerMinValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerMinValue.setDescription('The minimum scale of Power value.')
sensorPowerDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerDisplayStyle.setDescription('Power display style.')
sensorPowerHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
sensorPowerLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
sensorPowerNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerNormalDesc.setDescription('A Normal Description of this sensor')
sensorPowerLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerLowWarningDesc.setDescription('A LowWarning Description of this sensor')
sensorPowerHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerHighWarningDesc.setDescription('A HighWarning Description of this sensor')
sensorPowerSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerSensorErrorDesc.setDescription('A SensorError Description of this sensor')
sensorPowerHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerHighCriticalColor.setDescription('A HighCritical Color of this sensor')
sensorPowerLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerLowCriticalColor.setDescription('A LowCritical Color of this sensor')
sensorPowerNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerNormalColor.setDescription('A Normal Color of this sensor')
sensorPowerLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerLowWarningColor.setDescription('A LowWarning Color of this sensor')
sensorPowerHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerHighWarningColor.setDescription('A HighWarning Color of this sensor')
sensorPowerSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerSensorErrorColor.setDescription('A SensorError Color of this sensor')
sensorPowerValueFormatString = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 66), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPowerValueFormatString.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerValueFormatString.setDescription('The string-based reading value in this sensor')
sensorPowerValueFormatFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 67), Opaque().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPowerValueFormatFloat.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerValueFormatFloat.setDescription('The floating-point IEEE Standard 754 reading value in this sensor')
sensorPowerAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerAcknowledge.setDescription('Power sensor acknowledge')
sensorPowerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPowerId.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
sensorFuelTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24), )
if mibBuilder.loadTexts: sensorFuelTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelTable.setDescription('This table contains the property and reading value for every sensor.')
sensorFuelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorFuelIndex"))
if mibBuilder.loadTexts: sensorFuelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelEntry.setDescription('This is an entry in the SensorFuelEntry Table')
sensorFuelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorFuelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelIndex.setDescription('The index into the sensor table')
sensorFuelDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelDescription.setDescription('A Description of this sensor')
sensorFuelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorFuelValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelValue.setDescription('The reading value in this sensor')
sensorFuelUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelUnit.setDescription('The unit string')
sensorFuelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorFuelStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelStatus.setDescription('The current status of this Sensor')
sensorFuelGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelGoOffline.setDescription('To take offline enter a 2')
sensorFuelLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelLowCritical.setDescription('Level value of this sensor gets before it sends a critical event')
sensorFuelLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelLowWarning.setDescription('Level value of this sensor gets before it sends a warning')
sensorFuelHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelHighWarning.setDescription('Level value of this sensor gets before it sends a warning')
sensorFuelHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelHighCritical.setDescription('Level value of this sensor gets before it sends a critical event')
sensorFuelRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorFuelDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorFuelDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorFuelDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorFuelDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorFuelDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorFuelDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorFuelRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorFuelRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage.')
sensorFuelAmountMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelAmountMaxValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelAmountMaxValue.setDescription('The maximum scale of value conversion.')
sensorFuelAmountBaseValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelAmountBaseValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelAmountBaseValue.setDescription('The base scale of value conversion.')
sensorFuelDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorFuelDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelDeviceIndex.setDescription('Device Index of sensor')
sensorFuelDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelDisplayStyle.setDescription('Fuel display style')
sensorFuelHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
sensorFuelLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
sensorFuelNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelNormalDesc.setDescription('A Normal Description of this sensor')
sensorFuelLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelLowWarningDesc.setDescription('A LowWarning Description of this sensor')
sensorFuelHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelHighWarningDesc.setDescription('A HighWarning Description of this sensor')
sensorFuelSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelSensorErrorDesc.setDescription('A SensorError Description of this sensor')
sensorFuelHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelHighCriticalColor.setDescription('A HighCritical Color of this sensor')
sensorFuelLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelLowCriticalColor.setDescription('A LowCritical Color of this sensor')
sensorFuelNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelNormalColor.setDescription('A Normal Color of this sensor')
sensorFuelLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelLowWarningColor.setDescription('A LowWarning Color of this sensor')
sensorFuelHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelHighWarningColor.setDescription('A HighWarning Color of this sensor')
sensorFuelSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelSensorErrorColor.setDescription('A SensorError Color of this sensor')
sensorFuelAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelAcknowledge.setDescription('Fuel sensor acknowledge')
sensorFuelId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorFuelId.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
sensorTankSenderTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26), )
if mibBuilder.loadTexts: sensorTankSenderTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderTable.setDescription('This table contains the property and reading value for every sensor.')
sensorTankSenderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorTankSenderIndex"))
if mibBuilder.loadTexts: sensorTankSenderEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderEntry.setDescription('This is an entry in the sensorTankSenderEntry Table')
sensorTankSenderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTankSenderIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderIndex.setDescription('The index into the sensor table')
sensorTankSenderDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderDescription.setDescription('A Description of this sensor')
sensorTankSenderValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTankSenderValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderValue.setDescription('The reading value in this sensor')
sensorTankSenderUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderUnit.setDescription('The unit string')
sensorTankSenderStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTankSenderStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderStatus.setDescription('The current status of this Sensor')
sensorTankSenderGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderGoOffline.setDescription('To take offline enter a 2')
sensorTankSenderLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderLowCritical.setDescription('Level value of this sensor gets before it sends a critical event')
sensorTankSenderLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderLowWarning.setDescription('Level value of this sensor gets before it sends a warning')
sensorTankSenderHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderHighWarning.setDescription('Level value of this sensor gets before it sends a warning')
sensorTankSenderHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderHighCritical.setDescription('Level value of this sensor gets before it sends a critical event')
sensorTankSenderRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorTankSenderDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorTankSenderDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorTankSenderDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorTankSenderDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorTankSenderDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorTankSenderDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorTankSenderRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTankSenderRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage.')
sensorTankSenderDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTankSenderDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderDeviceIndex.setDescription('Device Index of sensor')
sensorTankSenderDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderDisplayStyle.setDescription('TankSender display style')
sensorTankSenderHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
sensorTankSenderLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
sensorTankSenderNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderNormalDesc.setDescription('A Normal Description of this sensor')
sensorTankSenderLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderLowWarningDesc.setDescription('A LowWarning Description of this sensor')
sensorTankSenderHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderHighWarningDesc.setDescription('A HighWarning Description of this sensor')
sensorTankSenderSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderSensorErrorDesc.setDescription('A SensorError Description of this sensor')
sensorTankSenderHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderHighCriticalColor.setDescription('A HighCritical Color of this sensor')
sensorTankSenderLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderLowCriticalColor.setDescription('A LowCritical Color of this sensor')
sensorTankSenderNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderNormalColor.setDescription('A Normal Color of this sensor')
sensorTankSenderLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderLowWarningColor.setDescription('A LowWarning Color of this sensor')
sensorTankSenderHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderHighWarningColor.setDescription('A HighWarning Color of this sensor')
sensorTankSenderSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderSensorErrorColor.setDescription('A SensorError Color of this sensor')
sensorTankSenderAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderAcknowledge.setDescription('Tank Sender sensor acknowledge')
sensorTankSenderId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTankSenderId.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
sensorDoorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 27), )
if mibBuilder.loadTexts: sensorDoorTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDoorTable.setDescription('This table contains the property and reading value for every sensor.')
sensorDoorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 27, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorDoorIndex"))
if mibBuilder.loadTexts: sensorDoorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDoorEntry.setDescription('This is an entry in the sensorDoorEntry Table')
sensorDoorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDoorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDoorIndex.setDescription('The index into the sensor table')
sensorDoorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 27, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDoorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDoorDescription.setDescription('A Description of this sensor')
sensorDoorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 27, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDoorValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDoorValue.setDescription('The reading value in this sensor')
sensorDoorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 27, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("closed", 2), ("heldOpen", 3), ("fire", 4), ("opened", 5), ("forceOpened", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDoorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDoorStatus.setDescription('The current status of this Sensor')
sensorDoorUnlockPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 27, 1, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDoorUnlockPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDoorUnlockPeriod.setDescription('Door unlock period')
sensorDoorOpenPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 27, 1, 63), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDoorOpenPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDoorOpenPeriod.setDescription('Door open period')
sensorDoorCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 27, 1, 64), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDoorCmd.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDoorCmd.setDescription('Door command')
sensorDoorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 27, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDoorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDoorAcknowledge.setDescription('Door sensor acknowledge')
sensorDoorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 27, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDoorId.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDoorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
sensorTemperatureArrayTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28), )
if mibBuilder.loadTexts: sensorTemperatureArrayTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayTable.setDescription('This table contains the property and reading value for every Temperature sensor.')
sensorTemperatureArrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorTemperatureArrayIndex"))
if mibBuilder.loadTexts: sensorTemperatureArrayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayEntry.setDescription('This is an entry in the sensorTemperatureArrayEntry Table')
sensorTemperatureArrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureArrayIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayIndex.setDescription('The index into the sensor table')
sensorTemperatureArrayDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayDescription.setDescription('A Description of this sensor')
sensorTemperatureArrayType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(23))).clone(namedValues=NamedValues(("arraytemp", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureArrayType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayType.setDescription('Enter the type of this Sensor')
sensorTemperatureArrayDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureArrayDegree.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayDegree.setDescription('The degrees in this sensor')
sensorTemperatureArrayUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureArrayUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayUnit.setDescription('The unit string')
sensorTemperatureArrayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureArrayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayStatus.setDescription('The current status of this Sensor')
sensorTemperatureArrayGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayGoOffline.setDescription('To take offline enter a 2')
sensorTemperatureArrayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorTemperatureArrayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayLowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorTemperatureArrayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayHighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensorTemperatureArrayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorTemperatureArrayRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorTemperatureArrayDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorTemperatureArrayDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorTemperatureArrayDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorTemperatureArrayDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorTemperatureArrayDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorTemperatureArrayDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorTemperatureArrayRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureArrayRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayRaw.setDescription('The raw degree data from the temperature sensor, slightly higher resolution')
sensorTemperatureArrayOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayOffset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayOffset.setDescription('Temperature Offset reading')
sensorTemperatureArrayPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureArrayPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayPort.setDescription('Sensor port')
sensorTemperatureArraySubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureArraySubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArraySubPort.setDescription('Sensor sub port')
sensorTemperatureArrayDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureArrayDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayDeviceIndex.setDescription('Device Index of sensor')
sensorTemperatureArrayDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayDisplayStyle.setDescription('Temperature display style')
sensorTemperatureArrayHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
sensorTemperatureArrayLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
sensorTemperatureArrayNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayNormalDesc.setDescription('A Normal Description of this sensor')
sensorTemperatureArrayLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayLowWarningDesc.setDescription('A LowWarning Description of this sensor')
sensorTemperatureArrayHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayHighWarningDesc.setDescription('A HighWarning Description of this sensor')
sensorTemperatureArraySensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArraySensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArraySensorErrorDesc.setDescription('A SensorError Description of this sensor')
sensorTemperatureArrayHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayHighCriticalColor.setDescription('A HighCritical Color of this sensor')
sensorTemperatureArrayLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayLowCriticalColor.setDescription('A LowCritical Color of this sensor')
sensorTemperatureArrayNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayNormalColor.setDescription('A Normal Color of this sensor')
sensorTemperatureArrayLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayLowWarningColor.setDescription('A LowWarning Color of this sensor')
sensorTemperatureArrayHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayHighWarningColor.setDescription('A HighWarning Color of this sensor')
sensorTemperatureArraySensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArraySensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArraySensorErrorColor.setDescription('A SensorError Color of this sensor')
sensorTemperatureArrayAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArrayAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayAcknowledge.setDescription('Temperature sensor acknowledge')
sensorTemperatureArraySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 71), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureArraySerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArraySerialNumber.setDescription('Serial Number of Temperature Sensor\n               x is Hex Digit xx-xx-xx-xx-xx-xx-xx-xx')
sensorTemperatureArrayId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 28, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureArrayId.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureArrayId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
secNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 2, 4))
action = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 2, 4, 1))
actionTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 4, 1, 1), )
if mibBuilder.loadTexts: actionTable.setStatus('mandatory')
if mibBuilder.loadTexts: actionTable.setDescription('This table contains the property for every action of notification.')
actionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 4, 1, 1, 1), ).setIndexNames((0, "SPAGENT-MIB", "actionIndex"))
if mibBuilder.loadTexts: actionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: actionEntry.setDescription('This is an entry in the actionTable Table')
actionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: actionIndex.setDescription('The index into the action table.')
actionType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22))).clone(namedValues=NamedValues(("trap", 1), ("email", 2), ("sms", 3), ("mms", 4), ("sound", 5), ("speech", 6), ("dial", 7), ("relay", 8), ("custom", 9), ("ftp", 10), ("event", 11), ("fax", 12), ("soundlog", 13), ("camera", 14), ("siren", 15), ("mobile", 16), ("shut", 17), ("windows", 19), ("skype", 20), ("drycontact", 21), ("ctrSensorAction", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionType.setStatus('mandatory')
if mibBuilder.loadTexts: actionType.setDescription('The type of this action.')
actionName = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 4, 1, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionName.setStatus('mandatory')
if mibBuilder.loadTexts: actionName.setDescription('A name of this action.')
actionMaxResend = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 4, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionMaxResend.setStatus('mandatory')
if mibBuilder.loadTexts: actionMaxResend.setDescription('The maximum number of times to resend action. If set to 0 only send once. The maximum value is 5.')
actionResendInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 4, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionResendInterval.setStatus('mandatory')
if mibBuilder.loadTexts: actionResendInterval.setDescription('How often to resend action. Enter the number of seconds from 15 to 65535.')
actionTest = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 4, 1, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionTest.setStatus('mandatory')
if mibBuilder.loadTexts: actionTest.setDescription('Do test an action of notification.')
sensorByPort = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 2, 5))
commonSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1), )
if mibBuilder.loadTexts: commonSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorTable.setDescription('This table contains the property and reading value for every Sensor.')
commonSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1), ).setIndexNames((0, "SPAGENT-MIB", "commonSensorIndex"))
if mibBuilder.loadTexts: commonSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorEntry.setDescription('This is an entry in the commonSensorTable')
commonSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
commonSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorDescription.setDescription('A Description of this sensor')
commonSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 128, 129, 130, 131, 132, 133, 224, 255))).clone(namedValues=NamedValues(("temperature", 1), ("humidity", 2), ("temperature-dual", 3), ("four-20mA", 4), ("dcvoltage", 5), ("airflow", 6), ("io", 7), ("drycontact", 8), ("motion", 9), ("water", 10), ("security", 11), ("siren", 12), ("relay", 13), ("acvoltage", 14), ("vrms", 15), ("irms", 16), ("watt", 17), ("watthour", 18), ("xrelay", 19), ("thermocouple", 20), ("smoke", 21), ("drycontact-array", 22), ("temperature-array", 23), ("thermostat", 128), ("virtual", 129), ("sound", 130), ("softmotion", 131), ("camera-dummy", 132), ("board-state", 133), ("nosignal", 224), ("test", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSensorType.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorType.setDescription('Enter the type of this Sensor')
commonSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSensorValue.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorValue.setDescription('The value in this sensor')
commonSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSensorUnit.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorUnit.setDescription('The unit string')
commonSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorStatus.setDescription('The current status of this sensor')
commonSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorGoOffline.setDescription('To take offline enter a 2')
commonSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSensorPort.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorPort.setDescription('Sensor port')
commonSensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSensorSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorSubPort.setDescription('Sensor sub port')
commonSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSensorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorDeviceIndex.setDescription('Device Index of sensor')
commonSensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorDisplayStyle.setDescription('Temperature display style')
commonSensorHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorHighCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorHighCriticalDescription.setDescription('A HighCritical Description of this sensor')
commonSensorLowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorLowCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorLowCriticalDescription.setDescription('A LowCritical Description of this sensor')
commonSensorSensorNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorSensorNormalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorSensorNormalDescription.setDescription('A Normal Description of this sensor')
commonSensorLowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorLowWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorLowWarningDescription.setDescription('A LowWarning Description of this sensor')
commonSensorHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorHighWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorHighWarningDescription.setDescription('A HighWarning Description of this sensor')
commonSensorSensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorSensorErrorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorSensorErrorDescription.setDescription('A SensorError Description of this sensor')
commonSensorOnDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorOnDescription.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorOnDescription.setDescription('A On Description of this sensor')
commonSensorOffDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorOffDescription.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorOffDescription.setDescription('A Off Description of this sensor')
commonSensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorHighCriticalColor.setDescription('A HighCritical Color of this sensor')
commonSensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorLowCriticalColor.setDescription('A LowCritical Color of this sensor')
commonSensorSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorSensorNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorSensorNormalColor.setDescription('A Normal Color of this sensor')
commonSensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorLowWarningColor.setDescription('A LowWarning Color of this sensor')
commonSensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorHighWarningColor.setDescription('A HighWarning Color of this sensor')
commonSensorSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorSensorErrorColor.setDescription('A SensorError Color of this sensor')
commonSensorOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorOnColor.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorOnColor.setDescription('A On Color of this sensor')
commonSensorOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorOffColor.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorOffColor.setDescription('A Off Color of this sensor')
commonSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorAcknowledge.setDescription('Sensor acknowledge')
commonSensorValueFormatFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 99), Opaque().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSensorValueFormatFloat.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorValueFormatFloat.setDescription('The floating-point IEEE Standard 754 reading value in this sensor')
commonSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 1, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSensorId.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
temperatureSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2), )
if mibBuilder.loadTexts: temperatureSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorTable.setDescription('This table contains the property and reading value for every Temperature sensor.')
temperatureSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "temperatureSensorIndex"))
if mibBuilder.loadTexts: temperatureSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorEntry.setDescription('This is an entry in the temperatureSensorEntry Table')
temperatureSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
temperatureSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorDescription.setDescription('A Description of this sensor')
temperatureSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 20))).clone(namedValues=NamedValues(("temperature", 1), ("dualsensor", 3), ("thermocouple", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorType.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorType.setDescription('Enter the type of this Sensor')
temperatureSensorDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorDegree.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorDegree.setDescription('The degrees in this sensor')
temperatureSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorUnit.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorUnit.setDescription('The unit string')
temperatureSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorStatus.setDescription('The current status of this Sensor')
temperatureSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorGoOffline.setDescription('To take offline enter a 2')
temperatureSensorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
temperatureSensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorLowWarning.setDescription('How cold this sensor gets before it sends a warning')
temperatureSensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorHighWarning.setDescription('How hot this sensor gets before it sends a warning')
temperatureSensorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
temperatureSensorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorRearm.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
temperatureSensorDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
temperatureSensorDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
temperatureSensorDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
temperatureSensorDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
temperatureSensorDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
temperatureSensorDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
temperatureSensorRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorRaw.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorRaw.setDescription('The raw degree data from the temperature sensor, slightly higher resolution')
temperatureSensorOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorOffset.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorOffset.setDescription('Temperature Offset reading')
temperatureSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorPort.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorPort.setDescription('Sensor port')
temperatureSensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorSubPort.setDescription('Sensor sub port')
temperatureSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorDeviceIndex.setDescription('Device Index of sensor')
temperatureSensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorDisplayStyle.setDescription('Temperature display style')
temperatureSensorHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
temperatureSensorLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
temperatureSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorNormalDesc.setDescription('A Normal Description of this sensor')
temperatureSensorLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorLowWarningDesc.setDescription('A LowWarning Description of this sensor')
temperatureSensorHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorHighWarningDesc.setDescription('A HighWarning Description of this sensor')
temperatureSensorSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorSensorErrorDesc.setDescription('A SensorError Description of this sensor')
temperatureSensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorHighCriticalColor.setDescription('A HighCritical Color of this sensor')
temperatureSensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorLowCriticalColor.setDescription('A LowCritical Color of this sensor')
temperatureSensorSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorSensorNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorSensorNormalColor.setDescription('A Normal Color of this sensor')
temperatureSensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorLowWarningColor.setDescription('A LowWarning Color of this sensor')
temperatureSensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorHighWarningColor.setDescription('A HighWarning Color of this sensor')
temperatureSensorSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorSensorErrorColor.setDescription('A SensorError Color of this sensor')
temperatureSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorAcknowledge.setDescription('Temperature sensor acknowledge')
temperatureSensorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 71), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorSerialNumber.setDescription('Serial Number of Temperature Sensor\n               x is Hex Digit xx-xx-xx-xx-xx-xx-xx-xx')
temperatureSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 2, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorId.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
humiditySensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3), )
if mibBuilder.loadTexts: humiditySensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorTable.setDescription('This table contains the property and reading value for every sensor.')
humiditySensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1), ).setIndexNames((0, "SPAGENT-MIB", "humiditySensorIndex"))
if mibBuilder.loadTexts: humiditySensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorEntry.setDescription('This is an entry in the cmpTemperatureEntry Table')
humiditySensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
humiditySensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorDescription.setDescription('A Description of this sensor')
humiditySensorPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorPercent.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorPercent.setDescription('The relative humidity percentage measured by this sensor')
humiditySensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorUnit.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorUnit.setDescription('The unit string')
humiditySensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorStatus.setDescription('The current status of this Sensor')
humiditySensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorGoOffline.setDescription('To take offline enter a 2')
humiditySensorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
humiditySensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorLowWarning.setDescription('How cold this sensor gets before it sends a warning')
humiditySensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorHighWarning.setDescription('How hot this sensor gets before it sends a warning')
humiditySensorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
humiditySensorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorRearm.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
humiditySensorDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
humiditySensorDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
humiditySensorDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
humiditySensorDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
humiditySensorDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
humiditySensorDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
humiditySensorRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorRaw.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage. This number can go from 0 to 1023 depending on the input voltage')
humiditySensorOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorOffset.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorOffset.setDescription('Humidity Offset reading')
humiditySensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorPort.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorPort.setDescription('Sensor port')
humiditySensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorSubPort.setDescription('Sensor sub port')
humiditySensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorDeviceIndex.setDescription('Device Index of sensor')
humiditySensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorDisplayStyle.setDescription('Humidity display style')
humiditySensorHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
humiditySensorLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
humiditySensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorNormalDesc.setDescription('A Normal Description of this sensor')
humiditySensorLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorLowWarningDesc.setDescription('A LowWarning Description of this sensor')
humiditySensorHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorHighWarningDesc.setDescription('A HighWarning Description of this sensor')
humiditySensorSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorSensorErrorDesc.setDescription('A SensorError Description of this sensor')
humiditySensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorHighCriticalColor.setDescription('A HighCritical Color of this sensor')
humiditySensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorLowCriticalColor.setDescription('A LowCritical Color of this sensor')
humiditySensorSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorSensorNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorSensorNormalColor.setDescription('A Normal Color of this sensor')
humiditySensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorLowWarningColor.setDescription('A LowWarning Color of this sensor')
humiditySensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorHighWarningColor.setDescription('A HighWarning Color of this sensor')
humiditySensorSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorSensorErrorColor.setDescription('A SensorError Color of this sensor')
humiditySensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorAcknowledge.setDescription('Humidity sensor acknowledge')
humiditySensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 3, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorId.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
dryContactSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4), )
if mibBuilder.loadTexts: dryContactSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorTable.setDescription('This table contains the property and reading value for every sensor.')
dryContactSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1), ).setIndexNames((0, "SPAGENT-MIB", "dryContactSensorIndex"))
if mibBuilder.loadTexts: dryContactSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
dryContactSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dryContactSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
dryContactSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorDescription.setDescription('A Description of this sensor Switch')
dryContactSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 22))).clone(namedValues=NamedValues(("drycontact-inout", 7), ("drycontact-input", 8), ("drycontact-array", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dryContactSensorType.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorType.setDescription('Enter the type of this Sensor')
dryContactSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("outputLow", 8), ("outputHigh", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dryContactSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorStatus.setDescription('The current status of this Sensor, only input switches have a status')
dryContactSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorGoOffline.setDescription('To take offline enter a 2')
dryContactSensorDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorDirection.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorDirection.setDescription('To set a switch to input enter 0. To set a switch to output enter 1')
dryContactSensorNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorNormalState.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorNormalState.setDescription('The normal state of an input switch. If an input switch is in this state it is normal, else it is critical. An open switch senses +5 volts. A closed switch senses 0 volts.')
dryContactSensorControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("sensor-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorControlMode.setDescription('Control Mode used for selecting the mode to control a sensor output.')
dryContactSensorOutputManualCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorOutputManualCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorOutputManualCycleTime.setDescription('Toggle period in seconds for Manual Cycle action.')
dryContactSensorOutputManualAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("high", 1), ("cycle-Low-High-Low", 2), ("cycle-High-Low-High", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorOutputManualAction.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorOutputManualAction.setDescription('Control the sensor output manualy')
dryContactSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dryContactSensorPort.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorPort.setDescription('Sensor port')
dryContactSensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dryContactSensorSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorSubPort.setDescription('Sensor sub port')
dryContactSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dryContactSensorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorDeviceIndex.setDescription('Device Index of sensor')
dryContactSensorCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorCriticalDesc.setDescription('A Critical Description of this sensor')
dryContactSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorNormalDesc.setDescription('A Normal Description of this sensor')
dryContactSensorOnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorOnDesc.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorOnDesc.setDescription('A On Description of this sensor')
dryContactSensorOffDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorOffDesc.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorOffDesc.setDescription('A Off Description of this sensor')
dryContactSensorCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorCriticalColor.setDescription('A Critical Color of this sensor')
dryContactSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorNormalColor.setDescription('A Normal Color of this sensor')
dryContactSensorOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorOnColor.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorOnColor.setDescription('A On Color of this sensor')
dryContactSensorOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorOffColor.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorOffColor.setDescription('A Off Color of this sensor')
dryContactSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dryContactSensorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorAcknowledge.setDescription('Dry Contact sensor acknowledge')
dryContactSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 4, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dryContactSensorId.setStatus('mandatory')
if mibBuilder.loadTexts: dryContactSensorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
current4to20mASensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5), )
if mibBuilder.loadTexts: current4to20mASensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorTable.setDescription('This table contains the property and reading value for every sensor.')
current4to20mASensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1), ).setIndexNames((0, "SPAGENT-MIB", "current4to20mASensorIndex"))
if mibBuilder.loadTexts: current4to20mASensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
current4to20mASensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mASensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
current4to20mASensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorDescription.setDescription('A Description of this sensor')
current4to20mASensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mASensorValue.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorValue.setDescription('The reading value in this sensor')
current4to20mASensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorUnit.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorUnit.setDescription('The unit string')
current4to20mASensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mASensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorStatus.setDescription('The current status of this Sensor')
current4to20mASensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorGoOffline.setDescription('To take offline enter a 2')
current4to20mASensorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
current4to20mASensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorLowWarning.setDescription('How cold this sensor gets before it sends a warning')
current4to20mASensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorHighWarning.setDescription('How hot this sensor gets before it sends a warning')
current4to20mASensorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
current4to20mASensorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorRearm.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
current4to20mASensorDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
current4to20mASensorDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
current4to20mASensorDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
current4to20mASensorDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
current4to20mASensorDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
current4to20mASensorDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
current4to20mASensorRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mASensorRaw.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage. This number can go from 0 to 1023 depending on the input voltage')
current4to20mASensorOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorOffset.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorOffset.setDescription('4to20mA Offset reading')
current4to20mASensorAmountMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorAmountMaxVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorAmountMaxVoltage.setDescription('The maximum scale of 4to20mA conversion.')
current4to20mASensorAmountBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorAmountBaseVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorAmountBaseVoltage.setDescription('The base scale of 4to20mA conversion.')
current4to20mASensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mASensorPort.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorPort.setDescription('Sensor port')
current4to20mASensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mASensorSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorSubPort.setDescription('Sensor sub port')
current4to20mASensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mASensorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorDeviceIndex.setDescription('Device Index of sensor')
current4to20mASensorMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorMaxVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorMaxVoltage.setDescription('The max range for use in conversion.')
current4to20mASensorBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorBaseVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorBaseVoltage.setDescription('The base range for use in conversion.')
current4to20mASensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorDisplayStyle.setDescription('4to20mA display style')
current4to20mASensorHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
current4to20mASensorLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
current4to20mASensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorNormalDesc.setDescription('A Normal Description of this sensor')
current4to20mASensorLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorLowWarningDesc.setDescription('A LowWarning Description of this sensor')
current4to20mASensorHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorHighWarningDesc.setDescription('A HighWarning Description of this sensor')
current4to20mASensorSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorSensorErrorDesc.setDescription('A SensorError Description of this sensor')
current4to20mASensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorHighCriticalColor.setDescription('A HighCritical Color of this sensor')
current4to20mASensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorLowCriticalColor.setDescription('A LowCritical Color of this sensor')
current4to20mASensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorNormalColor.setDescription('A Normal Color of this sensor')
current4to20mASensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorLowWarningColor.setDescription('A LowWarning Color of this sensor')
current4to20mASensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorHighWarningColor.setDescription('A HighWarning Color of this sensor')
current4to20mASensorSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorSensorErrorColor.setDescription('A SensorError Color of this sensor')
current4to20mASensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorAcknowledge.setDescription('4to20mA sensor acknowledge')
current4to20mASensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 5, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mASensorId.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
dcVoltageSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6), )
if mibBuilder.loadTexts: dcVoltageSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorTable.setDescription('This table contains the property and reading value for every sensor.')
dcVoltageSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1), ).setIndexNames((0, "SPAGENT-MIB", "dcVoltageSensorIndex"))
if mibBuilder.loadTexts: dcVoltageSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
dcVoltageSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
dcVoltageSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorDescription.setDescription('A Description of this sensor')
dcVoltageSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageSensorValue.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorValue.setDescription('The reading value in this sensor')
dcVoltageSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorUnit.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorUnit.setDescription('The unit string')
dcVoltageSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorStatus.setDescription('The current status of this Sensor')
dcVoltageSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorGoOffline.setDescription('To take offline enter a 2')
dcVoltageSensorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
dcVoltageSensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorLowWarning.setDescription('How cold this sensor gets before it sends a warning')
dcVoltageSensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorHighWarning.setDescription('How hot this sensor gets before it sends a warning')
dcVoltageSensorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
dcVoltageSensorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorRearm.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
dcVoltageSensorDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
dcVoltageSensorDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
dcVoltageSensorDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
dcVoltageSensorDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
dcVoltageSensorDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
dcVoltageSensorDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
dcVoltageSensorRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageSensorRaw.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage. This number can go from 0 to 1023 depending on the input voltage')
dcVoltageSensorOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorOffset.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorOffset.setDescription('DC voltage Offset reading')
dcVoltageSensorJumper = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-600, -400, -300, -200, -100, 100, 200, 300, 400, 600))).clone(namedValues=NamedValues(("jumperAt-60", -600), ("jumperAt-40", -400), ("jumperAt-30", -300), ("jumperAt-20", -200), ("jumperAt-10", -100), ("jumperAt10", 100), ("jumperAt20", 200), ("jumperAt30", 300), ("jumperAt40", 400), ("jumperAt60", 600)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorJumper.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorJumper.setDescription('Selected voltage scale (jumper 0) in DC voltage conversion.')
dcVoltageSensorAmountMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorAmountMaxVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorAmountMaxVoltage.setDescription('The maximum scale of DC voltage conversion.')
dcVoltageSensorAmountBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorAmountBaseVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorAmountBaseVoltage.setDescription('The base scale of DC voltage conversion.')
dcVoltageSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageSensorPort.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorPort.setDescription('Sensor port')
dcVoltageSensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageSensorSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorSubPort.setDescription('Sensor sub port')
dcVoltageSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageSensorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorDeviceIndex.setDescription('Device Index of sensor')
dcVoltageSensorMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorMaxVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorMaxVoltage.setDescription('The max voltage range for use in conversion.')
dcVoltageSensorBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorBaseVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorBaseVoltage.setDescription('The base voltage range for use in conversion.')
dcVoltageSensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorDisplayStyle.setDescription('DCVoltage display style')
dcVoltageSensorHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
dcVoltageSensorLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
dcVoltageSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorNormalDesc.setDescription('A Normal Description of this sensor')
dcVoltageSensorLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorLowWarningDesc.setDescription('A LowWarning Description of this sensor')
dcVoltageSensorHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorHighWarningDesc.setDescription('A HighWarning Description of this sensor')
dcVoltageSensorSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorSensorErrorDesc.setDescription('A SensorError Description of this sensor')
dcVoltageSensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorHighCriticalColor.setDescription('A HighCritical Color of this sensor')
dcVoltageSensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorLowCriticalColor.setDescription('A LowCritical Color of this sensor')
dcVoltageSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorNormalColor.setDescription('A Normal Color of this sensor')
dcVoltageSensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorLowWarningColor.setDescription('A LowWarning Color of this sensor')
dcVoltageSensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorHighWarningColor.setDescription('A HighWarning Color of this sensor')
dcVoltageSensorSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorSensorErrorColor.setDescription('A SensorError Color of this sensor')
dcVoltageSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorAcknowledge.setDescription('DCvoltage sensor acknowledge')
dcVoltageSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 6, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageSensorId.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
airflowSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7), )
if mibBuilder.loadTexts: airflowSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorTable.setDescription('This table contains the property and reading value for every sensor.')
airflowSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1), ).setIndexNames((0, "SPAGENT-MIB", "airflowSensorIndex"))
if mibBuilder.loadTexts: airflowSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
airflowSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
airflowSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorDescription.setDescription('A Description of this sensor Switch')
airflowSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowSensorValue.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorValue.setDescription('The reading value in this sensor')
airflowSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorStatus.setDescription('The current status of this Sensor, only input switches have a status')
airflowSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorGoOffline.setDescription('To take offline enter a 2')
airflowSensorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
airflowSensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorLowWarning.setDescription('How cold this sensor gets before it sends a warning')
airflowSensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorHighWarning.setDescription('How hot this sensor gets before it sends a warning')
airflowSensorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
airflowSensorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorRearm.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
airflowSensorDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
airflowSensorDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
airflowSensorDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
airflowSensorDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
airflowSensorDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
airflowSensorDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
airflowSensorRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowSensorRaw.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage. This number can go from 0 to 1023 depending on the input voltage')
airflowSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowSensorPort.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorPort.setDescription('Sensor port')
airflowSensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowSensorSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorSubPort.setDescription('Sensor sub port')
airflowSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowSensorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorDeviceIndex.setDescription('Device Index of sensor')
airflowSensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorDisplayStyle.setDescription('Airflow display style')
airflowSensorHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
airflowSensorLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
airflowSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorNormalDesc.setDescription('A Normal Description of this sensor')
airflowSensorLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorLowWarningDesc.setDescription('A LowWarning Description of this sensor')
airflowSensorHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorHighWarningDesc.setDescription('A HighWarning Description of this sensor')
airflowSensorSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorSensorErrorDesc.setDescription('A SensorError Description of this sensor')
airflowSensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorHighCriticalColor.setDescription('A HighCritical Color of this sensor')
airflowSensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorLowCriticalColor.setDescription('A LowCritical Color of this sensor')
airflowSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorNormalColor.setDescription('A Normal Color of this sensor')
airflowSensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorLowWarningColor.setDescription('A LowWarning Color of this sensor')
airflowSensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorHighWarningColor.setDescription('A HighWarning Color of this sensor')
airflowSensorSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorSensorErrorColor.setDescription('A SensorError Color of this sensor')
airflowSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorAcknowledge.setDescription('Airflow sensor acknowledge')
airflowSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 7, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowSensorId.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
motionSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8), )
if mibBuilder.loadTexts: motionSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: motionSensorTable.setDescription('This table contains the property and reading value for every sensor.')
motionSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1), ).setIndexNames((0, "SPAGENT-MIB", "motionSensorIndex"))
if mibBuilder.loadTexts: motionSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: motionSensorEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
motionSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: motionSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: motionSensorIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
motionSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: motionSensorDescription.setDescription('A Description of this sensor Switch')
motionSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: motionSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: motionSensorStatus.setDescription('The current status of this Sensor, only input switches have a status')
motionSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionSensorGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: motionSensorGoOffline.setDescription('To take offline enter a 2')
motionSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: motionSensorPort.setStatus('mandatory')
if mibBuilder.loadTexts: motionSensorPort.setDescription('Sensor port')
motionSensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: motionSensorSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: motionSensorSubPort.setDescription('Sensor sub port')
motionSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: motionSensorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: motionSensorDeviceIndex.setDescription('Device Index of sensor')
motionSensorCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionSensorCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: motionSensorCriticalDesc.setDescription('A Critical Description of this sensor')
motionSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionSensorNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: motionSensorNormalDesc.setDescription('A Normal Description of this sensor')
motionSensorCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionSensorCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: motionSensorCriticalColor.setDescription('A Critical Color of this sensor')
motionSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionSensorNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: motionSensorNormalColor.setDescription('A Normal Color of this sensor')
motionSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionSensorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: motionSensorAcknowledge.setDescription('Motion sensor acknowledge')
motionSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 8, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: motionSensorId.setStatus('mandatory')
if mibBuilder.loadTexts: motionSensorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
waterSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9), )
if mibBuilder.loadTexts: waterSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: waterSensorTable.setDescription('This table contains the property and reading value for every sensor.')
waterSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1), ).setIndexNames((0, "SPAGENT-MIB", "waterSensorIndex"))
if mibBuilder.loadTexts: waterSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: waterSensorEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
waterSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: waterSensorIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
waterSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: waterSensorDescription.setDescription('A Description of this sensor Switch')
waterSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: waterSensorStatus.setDescription('The current status of this Sensor, only input switches have a status')
waterSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterSensorGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: waterSensorGoOffline.setDescription('To take offline enter a 2')
waterSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterSensorPort.setStatus('mandatory')
if mibBuilder.loadTexts: waterSensorPort.setDescription('Sensor port')
waterSensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterSensorSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: waterSensorSubPort.setDescription('Sensor sub port')
waterSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterSensorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: waterSensorDeviceIndex.setDescription('Device Index of sensor')
waterSensorCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterSensorCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: waterSensorCriticalDesc.setDescription('A Critical Description of this sensor')
waterSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterSensorNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: waterSensorNormalDesc.setDescription('A Normal Description of this sensor')
waterSensorCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterSensorCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: waterSensorCriticalColor.setDescription('A Critical Color of this sensor')
waterSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterSensorNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: waterSensorNormalColor.setDescription('A Normal Color of this sensor')
waterSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterSensorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: waterSensorAcknowledge.setDescription('Water sensor acknowledge')
waterSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 9, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterSensorId.setStatus('mandatory')
if mibBuilder.loadTexts: waterSensorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
securitySensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10), )
if mibBuilder.loadTexts: securitySensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: securitySensorTable.setDescription('This table contains the property and reading value for every sensor.')
securitySensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1), ).setIndexNames((0, "SPAGENT-MIB", "securitySensorIndex"))
if mibBuilder.loadTexts: securitySensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: securitySensorEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
securitySensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securitySensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: securitySensorIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
securitySensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securitySensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: securitySensorDescription.setDescription('A Description of this sensor Switch')
securitySensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securitySensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: securitySensorStatus.setDescription('The current status of this Sensor, only input switches have a status')
securitySensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securitySensorGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: securitySensorGoOffline.setDescription('To take offline enter a 2')
securitySensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securitySensorPort.setStatus('mandatory')
if mibBuilder.loadTexts: securitySensorPort.setDescription('Sensor port')
securitySensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securitySensorSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: securitySensorSubPort.setDescription('Sensor sub port')
securitySensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securitySensorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: securitySensorDeviceIndex.setDescription('Device Index of sensor')
securitySensorCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securitySensorCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: securitySensorCriticalDesc.setDescription('A Critical Description of this sensor')
securitySensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securitySensorNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: securitySensorNormalDesc.setDescription('A Normal Description of this sensor')
securitySensorCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securitySensorCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: securitySensorCriticalColor.setDescription('A Critical Color of this sensor')
securitySensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securitySensorNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: securitySensorNormalColor.setDescription('A Normal Color of this sensor')
securitySensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securitySensorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: securitySensorAcknowledge.setDescription('Security sensor acknowledge')
securitySensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 10, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securitySensorId.setStatus('mandatory')
if mibBuilder.loadTexts: securitySensorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
sirenSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11), )
if mibBuilder.loadTexts: sirenSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: sirenSensorTable.setDescription('This table contains the property and reading value for every sensor.')
sirenSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1), ).setIndexNames((0, "SPAGENT-MIB", "sirenSensorIndex"))
if mibBuilder.loadTexts: sirenSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sirenSensorEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sirenSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sirenSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sirenSensorIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
sirenSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sirenSensorDescription.setDescription('A Description of this sensor Switch')
sirenSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sirenSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sirenSensorStatus.setDescription('The current status of this Sensor, only input switches have a status')
sirenSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenSensorGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sirenSensorGoOffline.setDescription('To take offline enter a 2')
sirenSensorControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("sensor-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenSensorControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sirenSensorControlMode.setDescription('Control Mode used for selecting the mode to control a siren.')
sirenSensorManualCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenSensorManualCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sirenSensorManualCycleTime.setDescription('Toggle period in seconds for Manual Cycle action.')
sirenSensorManualAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("turn-On", 0), ("turn-Off", 1), ("cycle-On-Off-On", 2), ("cycle-Off-On-Off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenSensorManualAction.setStatus('mandatory')
if mibBuilder.loadTexts: sirenSensorManualAction.setDescription('Control the siren manualy')
sirenSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sirenSensorPort.setStatus('mandatory')
if mibBuilder.loadTexts: sirenSensorPort.setDescription('Sensor port')
sirenSensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sirenSensorSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sirenSensorSubPort.setDescription('Sensor sub port')
sirenSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sirenSensorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sirenSensorDeviceIndex.setDescription('Device Index of sensor')
sirenSensorOnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenSensorOnDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sirenSensorOnDesc.setDescription('A On Description of this sensor')
sirenSensorOffDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenSensorOffDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sirenSensorOffDesc.setDescription('A Off Description of this sensor')
sirenSensorOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenSensorOnColor.setStatus('mandatory')
if mibBuilder.loadTexts: sirenSensorOnColor.setDescription('A On Color of this sensor')
sirenSensorOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenSensorOffColor.setStatus('mandatory')
if mibBuilder.loadTexts: sirenSensorOffColor.setDescription('A Off Color of this sensor')
sirenSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenSensorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: sirenSensorAcknowledge.setDescription('Siren sensor acknowledge')
sirenSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 11, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sirenSensorId.setStatus('mandatory')
if mibBuilder.loadTexts: sirenSensorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
relaySensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12), )
if mibBuilder.loadTexts: relaySensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: relaySensorTable.setDescription('This table contains the property and reading value for every sensor.')
relaySensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1), ).setIndexNames((0, "SPAGENT-MIB", "relaySensorIndex"))
if mibBuilder.loadTexts: relaySensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: relaySensorEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
relaySensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: relaySensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: relaySensorIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
relaySensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaySensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: relaySensorDescription.setDescription('A Description of this sensor Switch')
relaySensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(13, 19))).clone(namedValues=NamedValues(("relay", 13), ("xrelay", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relaySensorType.setStatus('mandatory')
if mibBuilder.loadTexts: relaySensorType.setDescription('Enter the type of this Sensor')
relaySensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relaySensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: relaySensorStatus.setDescription('The current status of this Sensor, only input switches have a status')
relaySensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaySensorGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: relaySensorGoOffline.setDescription('To take offline enter a 2')
relaySensorControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("sensor-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaySensorControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: relaySensorControlMode.setDescription('Control Mode used for selecting the mode to control a relay.')
relaySensorManualCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaySensorManualCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: relaySensorManualCycleTime.setDescription('Toggle period in seconds for Manual Cycle action.')
relaySensorManualAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("turn-On", 0), ("turn-Off", 1), ("cycle-On-Off-On", 2), ("cycle-Off-On-Off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaySensorManualAction.setStatus('mandatory')
if mibBuilder.loadTexts: relaySensorManualAction.setDescription('Control the relay manualy')
relaySensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relaySensorPort.setStatus('mandatory')
if mibBuilder.loadTexts: relaySensorPort.setDescription('Sensor port')
relaySensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relaySensorSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: relaySensorSubPort.setDescription('Sensor sub port')
relaySensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relaySensorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: relaySensorDeviceIndex.setDescription('Device Index of sensor')
relaySensorOnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaySensorOnDesc.setStatus('mandatory')
if mibBuilder.loadTexts: relaySensorOnDesc.setDescription('A On Description of this sensor')
relaySensorOffDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaySensorOffDesc.setStatus('mandatory')
if mibBuilder.loadTexts: relaySensorOffDesc.setDescription('A Off Description of this sensor')
relaySensorOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaySensorOnColor.setStatus('mandatory')
if mibBuilder.loadTexts: relaySensorOnColor.setDescription('A On Color of this sensor')
relaySensorOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaySensorOffColor.setStatus('mandatory')
if mibBuilder.loadTexts: relaySensorOffColor.setDescription('A Off Color of this sensor')
relaySensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaySensorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: relaySensorAcknowledge.setDescription('Relay sensor acknowledge')
relaySensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 12, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: relaySensorId.setStatus('mandatory')
if mibBuilder.loadTexts: relaySensorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
acVoltageSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13), )
if mibBuilder.loadTexts: acVoltageSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageSensorTable.setDescription('This table contains the property and reading value for every sensor.')
acVoltageSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1), ).setIndexNames((0, "SPAGENT-MIB", "acVoltageSensorIndex"))
if mibBuilder.loadTexts: acVoltageSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageSensorEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
acVoltageSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltageSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageSensorIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
acVoltageSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageSensorDescription.setDescription('A Description of this sensor Switch')
acVoltageSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltageSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageSensorStatus.setDescription('The current status of this Sensor, only input switches have a status')
acVoltageSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageSensorGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageSensorGoOffline.setDescription('To put online enter a 1, to take offline enter a 2')
acVoltageSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltageSensorPort.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageSensorPort.setDescription('Sensor port')
acVoltageSensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltageSensorSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageSensorSubPort.setDescription('Sensor sub port')
acVoltageSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltageSensorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageSensorDeviceIndex.setDescription('Device Index of sensor')
acVoltageSensorCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageSensorCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageSensorCriticalDesc.setDescription('A Critical Description of this sensor')
acVoltageSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageSensorNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageSensorNormalDesc.setDescription('A Normal Description of this sensor')
acVoltageSensorCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageSensorCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageSensorCriticalColor.setDescription('A Critical Color of this sensor')
acVoltageSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageSensorNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageSensorNormalColor.setDescription('A Normal Color of this sensor')
acVoltageSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageSensorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageSensorAcknowledge.setDescription('ACvoltage sensor acknowledge')
acVoltageSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 13, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltageSensorId.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageSensorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
smokeSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14), )
if mibBuilder.loadTexts: smokeSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: smokeSensorTable.setDescription('This table contains the property and reading value for every sensor.')
smokeSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1), ).setIndexNames((0, "SPAGENT-MIB", "smokeSensorIndex"))
if mibBuilder.loadTexts: smokeSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: smokeSensorEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
smokeSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: smokeSensorIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
smokeSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: smokeSensorDescription.setDescription('A Description of this sensor Switch')
smokeSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: smokeSensorStatus.setDescription('The current status of this Sensor, only input switches have a status')
smokeSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeSensorGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: smokeSensorGoOffline.setDescription('To take offline enter a 2')
smokeSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeSensorPort.setStatus('mandatory')
if mibBuilder.loadTexts: smokeSensorPort.setDescription('Sensor port')
smokeSensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeSensorSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: smokeSensorSubPort.setDescription('Sensor sub port')
smokeSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeSensorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: smokeSensorDeviceIndex.setDescription('Device Index of sensor')
smokeSensorCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeSensorCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: smokeSensorCriticalDesc.setDescription('A Critical Description of this sensor')
smokeSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeSensorNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: smokeSensorNormalDesc.setDescription('A Normal Description of this sensor')
smokeSensorCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeSensorCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: smokeSensorCriticalColor.setDescription('A Critical Color of this sensor')
smokeSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeSensorNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: smokeSensorNormalColor.setDescription('A Normal Color of this sensor')
smokeSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeSensorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: smokeSensorAcknowledge.setDescription('Smoke sensor acknowledge')
smokeSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 14, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeSensorId.setStatus('mandatory')
if mibBuilder.loadTexts: smokeSensorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
thermostatSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20), )
if mibBuilder.loadTexts: thermostatSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorTable.setDescription('This table contains the property and reading value for every sensor.')
thermostatSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1), ).setIndexNames((0, "SPAGENT-MIB", "thermostatSensorIndex"))
if mibBuilder.loadTexts: thermostatSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
thermostatSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thermostatSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
thermostatSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorDescription.setDescription('A Description of this sensor')
thermostatSensorDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thermostatSensorDegree.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorDegree.setDescription('The degrees in this sensor')
thermostatSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thermostatSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorStatus.setDescription('The current status of this Sensor')
thermostatSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorGoOffline.setDescription('To take offline enter a 2')
thermostatSensorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
thermostatSensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorLowWarning.setDescription('How cold this sensor gets before it sends a warning')
thermostatSensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorHighWarning.setDescription('How hot this sensor gets before it sends a warning')
thermostatSensorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
thermostatSensorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorRearm.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
thermostatSensorDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
thermostatSensorDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
thermostatSensorDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
thermostatSensorDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
thermostatSensorDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
thermostatSensorDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
thermostatSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thermostatSensorPort.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorPort.setDescription('Sensor port')
thermostatSensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thermostatSensorSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorSubPort.setDescription('Sensor sub port')
thermostatSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thermostatSensorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorDeviceIndex.setDescription('Device Index of sensor')
thermostatSensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorDisplayStyle.setDescription('Thermostat display style')
thermostatSensorHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
thermostatSensorLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
thermostatSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorNormalDesc.setDescription('A Normal Description of this sensor')
thermostatSensorLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorLowWarningDesc.setDescription('A LowWarning Description of this sensor')
thermostatSensorHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorHighWarningDesc.setDescription('A HighWarning Description of this sensor')
thermostatSensorSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorSensorErrorDesc.setDescription('A SensorError Description of this sensor')
thermostatSensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorHighCriticalColor.setDescription('A HighCritical Color of this sensor')
thermostatSensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorLowCriticalColor.setDescription('A LowCritical Color of this sensor')
thermostatSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorNormalColor.setDescription('A Normal Color of this sensor')
thermostatSensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorLowWarningColor.setDescription('A LowWarning Color of this sensor')
thermostatSensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorHighWarningColor.setDescription('A HighWarning Color of this sensor')
thermostatSensorSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorSensorErrorColor.setDescription('A SensorError Color of this sensor')
thermostatSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermostatSensorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorAcknowledge.setDescription('Thermostat sensor acknowledge')
thermostatSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 20, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thermostatSensorId.setStatus('mandatory')
if mibBuilder.loadTexts: thermostatSensorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
waterRopeSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21), )
if mibBuilder.loadTexts: waterRopeSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeSensorTable.setDescription('This table contains the property and reading value for every sensor.')
waterRopeSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1), ).setIndexNames((0, "SPAGENT-MIB", "waterRopeSensorIndex"))
if mibBuilder.loadTexts: waterRopeSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeSensorEntry.setDescription('This is an entry in the waterRopeSensorEntry Table')
waterRopeSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeSensorIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
waterRopeSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeSensorDescription.setDescription('A Description of this sensor')
waterRopeSensorLeakLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeSensorLeakLocation.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeSensorLeakLocation.setDescription('Location of leakage of water rope sensor.')
waterRopeSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorUnit.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeSensorUnit.setDescription('Display unit of water rope sensor.')
waterRopeSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeSensorStatus.setDescription('The current status of this Sensor')
waterRopeSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeSensorGoOffline.setDescription('To take offline enter a 2')
waterRopeSensorRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeSensorRaw.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeSensorRaw.setDescription('Raw value of location or length in ohms')
waterRopeSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeSensorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeSensorDeviceIndex.setDescription('Device Index of sensor')
waterRopeSensorCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeSensorCriticalDesc.setDescription('A Critical Description of this sensor')
waterRopeSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeSensorNormalDesc.setDescription('A Normal Description of this sensor')
waterRopeSensorSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeSensorSensorErrorDesc.setDescription('A SensorError Description of this sensor')
waterRopeSensorCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeSensorCriticalColor.setDescription('A Critical Color of this sensor')
waterRopeSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeSensorNormalColor.setDescription('A Normal Color of this sensor')
waterRopeSensorSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeSensorSensorErrorColor.setDescription('A SensorError Color of this sensor')
waterRopeSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeSensorAcknowledge.setDescription('Water Rope sensor acknowledge')
waterRopeSensorLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeSensorLength.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeSensorLength.setDescription('Length of water rope sensor.')
waterRopeSensorImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorImpedance.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeSensorImpedance.setDescription('Sensing wire impedance per meter value times 100')
waterRopeSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("custom", 0), ("water", 1), ("fuel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorType.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeSensorType.setDescription('Water rope sensing cable type')
waterRopeSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 21, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeSensorId.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeSensorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
powerSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22), )
if mibBuilder.loadTexts: powerSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorTable.setDescription('This table contains the property and reading value for every sensor.')
powerSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1), ).setIndexNames((0, "SPAGENT-MIB", "powerSensorIndex"))
if mibBuilder.loadTexts: powerSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorEntry.setDescription('This is an entry in the powerSensorEntry Table')
powerSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
powerSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorDescription.setDescription('A Description of this sensor Switch')
powerSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSensorValue.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorValue.setDescription('The reading value in this sensor')
powerSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorUnit.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorUnit.setDescription('The unit string')
powerSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorStatus.setDescription('The current status of this Sensor, only input switches have a status')
powerSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorGoOffline.setDescription('To take offline enter a 2')
powerSensorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
powerSensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorLowWarning.setDescription('How cold this sensor gets before it sends a warning')
powerSensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorHighWarning.setDescription('How hot this sensor gets before it sends a warning')
powerSensorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
powerSensorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorRearm.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
powerSensorDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
powerSensorDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
powerSensorDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
powerSensorDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
powerSensorDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
powerSensorDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
powerSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSensorPort.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorPort.setDescription('Sensor port')
powerSensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSensorSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorSubPort.setDescription('Sensor sub port')
powerSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSensorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorDeviceIndex.setDescription('Device Index of sensor')
powerSensorTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorTimeOut.setDescription('The polling timeout of Power Sensor.')
powerSensorInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 720))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorInterval.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorInterval.setDescription('The polling interval of Power Sensor.')
powerSensorErrorRetryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorErrorRetryNum.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorErrorRetryNum.setDescription('Number of retry before error.')
powerSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorMaxValue.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorMaxValue.setDescription('The maximum scale of Power value.')
powerSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorMinValue.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorMinValue.setDescription('The minimum scale of Power value.')
powerSensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorDisplayStyle.setDescription('Power display style.')
powerSensorHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
powerSensorLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
powerSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorNormalDesc.setDescription('A Normal Description of this sensor')
powerSensorLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorLowWarningDesc.setDescription('A LowWarning Description of this sensor')
powerSensorHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorHighWarningDesc.setDescription('A HighWarning Description of this sensor')
powerSensorSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorSensorErrorDesc.setDescription('A SensorError Description of this sensor')
powerSensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorHighCriticalColor.setDescription('A HighCritical Color of this sensor')
powerSensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorLowCriticalColor.setDescription('A LowCritical Color of this sensor')
powerSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorNormalColor.setDescription('A Normal Color of this sensor')
powerSensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorLowWarningColor.setDescription('A LowWarning Color of this sensor')
powerSensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorHighWarningColor.setDescription('A HighWarning Color of this sensor')
powerSensorSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorSensorErrorColor.setDescription('A SensorError Color of this sensor')
powerSensorValueFormatString = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 66), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSensorValueFormatString.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorValueFormatString.setDescription('The string-based reading value in this sensor')
powerSensorValueFormatFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 67), Opaque().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSensorValueFormatFloat.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorValueFormatFloat.setDescription('The floating-point IEEE Standard 754 reading value in this sensor')
powerSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorAcknowledge.setDescription('Power sensor acknowledge')
powerSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 22, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSensorId.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
fuelSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24), )
if mibBuilder.loadTexts: fuelSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorTable.setDescription('This table contains the property and reading value for every sensor.')
fuelSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1), ).setIndexNames((0, "SPAGENT-MIB", "fuelSensorIndex"))
if mibBuilder.loadTexts: fuelSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorEntry.setDescription('This is an entry in the fuelSensorEntry Table')
fuelSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
fuelSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorDescription.setDescription('A Description of this sensor')
fuelSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelSensorValue.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorValue.setDescription('The reading value in this sensor')
fuelSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorUnit.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorUnit.setDescription('The unit string')
fuelSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorStatus.setDescription('The current status of this Sensor')
fuelSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorGoOffline.setDescription('To take offline enter a 2')
fuelSensorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorLowCritical.setDescription('Level value of this sensor gets before it sends a critical event')
fuelSensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorLowWarning.setDescription('Level value of this sensor gets before it sends a warning')
fuelSensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorHighWarning.setDescription('Level value of this sensor gets before it sends a warning')
fuelSensorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorHighCritical.setDescription('Level value of this sensor gets before it sends a critical event')
fuelSensorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorRearm.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
fuelSensorDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
fuelSensorDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
fuelSensorDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
fuelSensorDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
fuelSensorDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
fuelSensorDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
fuelSensorRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelSensorRaw.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage.')
fuelSensorAmountMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorAmountMaxValue.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorAmountMaxValue.setDescription('The maximum scale of value conversion.')
fuelSensorAmountBaseValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorAmountBaseValue.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorAmountBaseValue.setDescription('The base scale of value conversion.')
fuelSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelSensorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorDeviceIndex.setDescription('Device Index of sensor')
fuelSensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorDisplayStyle.setDescription('Fuel display style')
fuelSensorHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
fuelSensorLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
fuelSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorNormalDesc.setDescription('A Normal Description of this sensor')
fuelSensorLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorLowWarningDesc.setDescription('A LowWarning Description of this sensor')
fuelSensorHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorHighWarningDesc.setDescription('A HighWarning Description of this sensor')
fuelSensorSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorSensorErrorDesc.setDescription('A SensorError Description of this sensor')
fuelSensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorHighCriticalColor.setDescription('A HighCritical Color of this sensor')
fuelSensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorLowCriticalColor.setDescription('A LowCritical Color of this sensor')
fuelSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorNormalColor.setDescription('A Normal Color of this sensor')
fuelSensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorLowWarningColor.setDescription('A LowWarning Color of this sensor')
fuelSensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorHighWarningColor.setDescription('A HighWarning Color of this sensor')
fuelSensorSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorSensorErrorColor.setDescription('A SensorError Color of this sensor')
fuelSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorAcknowledge.setDescription('Fuel sensor acknowledge')
fuelSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 24, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelSensorId.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
tankSenderSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26), )
if mibBuilder.loadTexts: tankSenderSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorTable.setDescription('This table contains the property and reading value for every sensor.')
tankSenderSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1), ).setIndexNames((0, "SPAGENT-MIB", "tankSenderSensorIndex"))
if mibBuilder.loadTexts: tankSenderSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorEntry.setDescription('This is an entry in the tankSenderSensorEntry Table')
tankSenderSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tankSenderSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
tankSenderSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorDescription.setDescription('A Description of this sensor')
tankSenderSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tankSenderSensorValue.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorValue.setDescription('The reading value in this sensor')
tankSenderSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorUnit.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorUnit.setDescription('The unit string')
tankSenderSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tankSenderSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorStatus.setDescription('The current status of this Sensor')
tankSenderSensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorGoOffline.setDescription('To take offline enter a 2')
tankSenderSensorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorLowCritical.setDescription('Level value of this sensor gets before it sends a critical event')
tankSenderSensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorLowWarning.setDescription('Level value of this sensor gets before it sends a warning')
tankSenderSensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorHighWarning.setDescription('Level value of this sensor gets before it sends a warning')
tankSenderSensorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorHighCritical.setDescription('Level value of this sensor gets before it sends a critical event')
tankSenderSensorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorRearm.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
tankSenderSensorDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
tankSenderSensorDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
tankSenderSensorDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
tankSenderSensorDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
tankSenderSensorDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
tankSenderSensorDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
tankSenderSensorRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tankSenderSensorRaw.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage.')
tankSenderSensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tankSenderSensorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorDeviceIndex.setDescription('Device Index of sensor')
tankSenderSensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorDisplayStyle.setDescription('TankSender display style')
tankSenderSensorHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
tankSenderSensorLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
tankSenderSensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorNormalDesc.setDescription('A Normal Description of this sensor')
tankSenderSensorLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorLowWarningDesc.setDescription('A LowWarning Description of this sensor')
tankSenderSensorHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorHighWarningDesc.setDescription('A HighWarning Description of this sensor')
tankSenderSensorSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorSensorErrorDesc.setDescription('A SensorError Description of this sensor')
tankSenderSensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorHighCriticalColor.setDescription('A HighCritical Color of this sensor')
tankSenderSensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorLowCriticalColor.setDescription('A LowCritical Color of this sensor')
tankSenderSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorNormalColor.setDescription('A Normal Color of this sensor')
tankSenderSensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorLowWarningColor.setDescription('A LowWarning Color of this sensor')
tankSenderSensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorHighWarningColor.setDescription('A HighWarning Color of this sensor')
tankSenderSensorSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorSensorErrorColor.setDescription('A SensorError Color of this sensor')
tankSenderSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorAcknowledge.setDescription('Tank Sender sensor acknowledge')
tankSenderSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 26, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tankSenderSensorId.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
doorSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 27), )
if mibBuilder.loadTexts: doorSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: doorSensorTable.setDescription('This table contains the property and reading value for every sensor.')
doorSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 27, 1), ).setIndexNames((0, "SPAGENT-MIB", "doorSensorIndex"))
if mibBuilder.loadTexts: doorSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: doorSensorEntry.setDescription('This is an entry in the doorSensorEntry Table')
doorSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 27, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: doorSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: doorSensorIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
doorSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 27, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doorSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: doorSensorDescription.setDescription('A Description of this sensor')
doorSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 27, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: doorSensorValue.setStatus('mandatory')
if mibBuilder.loadTexts: doorSensorValue.setDescription('The reading value in this sensor')
doorSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 27, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("closed", 2), ("heldOpen", 3), ("fire", 4), ("opened", 5), ("forceOpened", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: doorSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: doorSensorStatus.setDescription('The current status of this Sensor')
doorSensorUnlockPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 27, 1, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doorSensorUnlockPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: doorSensorUnlockPeriod.setDescription('Door unlock period')
doorSensorOpenPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 27, 1, 63), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doorSensorOpenPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: doorSensorOpenPeriod.setDescription('Door open period')
doorSensorCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 27, 1, 64), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doorSensorCmd.setStatus('mandatory')
if mibBuilder.loadTexts: doorSensorCmd.setDescription('Door command')
doorSensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 27, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doorSensorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: doorSensorAcknowledge.setDescription('Door sensor acknowledge')
doorSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 27, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: doorSensorId.setStatus('mandatory')
if mibBuilder.loadTexts: doorSensorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
temperatureArraySensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28), )
if mibBuilder.loadTexts: temperatureArraySensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorTable.setDescription('This table contains the property and reading value for every Temperature sensor.')
temperatureArraySensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1), ).setIndexNames((0, "SPAGENT-MIB", "temperatureArraySensorIndex"))
if mibBuilder.loadTexts: temperatureArraySensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorEntry.setDescription('This is an entry in the temperatureArraySensorEntry Table')
temperatureArraySensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArraySensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
temperatureArraySensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorDescription.setDescription('A Description of this sensor')
temperatureArraySensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 20))).clone(namedValues=NamedValues(("temperature", 1), ("dualsensor", 3), ("thermocouple", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArraySensorType.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorType.setDescription('Enter the type of this Sensor')
temperatureArraySensorDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArraySensorDegree.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorDegree.setDescription('The degrees in this sensor')
temperatureArraySensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArraySensorUnit.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorUnit.setDescription('The unit string')
temperatureArraySensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArraySensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorStatus.setDescription('The current status of this Sensor')
temperatureArraySensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorGoOffline.setDescription('To take offline enter a 2')
temperatureArraySensorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
temperatureArraySensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorLowWarning.setDescription('How cold this sensor gets before it sends a warning')
temperatureArraySensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorHighWarning.setDescription('How hot this sensor gets before it sends a warning')
temperatureArraySensorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
temperatureArraySensorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorRearm.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
temperatureArraySensorDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
temperatureArraySensorDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
temperatureArraySensorDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
temperatureArraySensorDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
temperatureArraySensorDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
temperatureArraySensorDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
temperatureArraySensorRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArraySensorRaw.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorRaw.setDescription('The raw degree data from the temperature sensor, slightly higher resolution')
temperatureArraySensorOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorOffset.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorOffset.setDescription('Temperature Offset reading')
temperatureArraySensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArraySensorPort.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorPort.setDescription('Sensor port')
temperatureArraySensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArraySensorSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorSubPort.setDescription('Sensor sub port')
temperatureArraySensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArraySensorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorDeviceIndex.setDescription('Device Index of sensor')
temperatureArraySensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorDisplayStyle.setDescription('Temperature display style')
temperatureArraySensorHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
temperatureArraySensorLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
temperatureArraySensorNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorNormalDesc.setDescription('A Normal Description of this sensor')
temperatureArraySensorLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorLowWarningDesc.setDescription('A LowWarning Description of this sensor')
temperatureArraySensorHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorHighWarningDesc.setDescription('A HighWarning Description of this sensor')
temperatureArraySensorSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorSensorErrorDesc.setDescription('A SensorError Description of this sensor')
temperatureArraySensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorHighCriticalColor.setDescription('A HighCritical Color of this sensor')
temperatureArraySensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorLowCriticalColor.setDescription('A LowCritical Color of this sensor')
temperatureArraySensorSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorSensorNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorSensorNormalColor.setDescription('A Normal Color of this sensor')
temperatureArraySensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorLowWarningColor.setDescription('A LowWarning Color of this sensor')
temperatureArraySensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorHighWarningColor.setDescription('A HighWarning Color of this sensor')
temperatureArraySensorSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorSensorErrorColor.setDescription('A SensorError Color of this sensor')
temperatureArraySensorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorAcknowledge.setDescription('Temperature sensor acknowledge')
temperatureArraySensorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 71), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorSerialNumber.setDescription('Serial Number of Temperature Sensor\n               x is Hex Digit xx-xx-xx-xx-xx-xx-xx-xx')
temperatureArraySensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 28, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArraySensorId.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
virtualSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129))
virtualAnalogSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2), )
if mibBuilder.loadTexts: virtualAnalogSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorTable.setDescription('This table contains the data for every VirtualAnalog Sensor in the SensorArray. Each row in the table contains data for a different VirtualAnalog Sensor.')
virtualAnalogSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "virtualAnalogSensorIndex"))
if mibBuilder.loadTexts: virtualAnalogSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorEntry.setDescription('This is an entry in the virtualAnalogSensorEntry Table')
virtualAnalogSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualAnalogSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
virtualAnalogSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorDescription.setDescription('A Description of this sensor')
virtualAnalogSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualAnalogSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorStatus.setDescription('The current status of this Sensor')
virtualAnalogSensorOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualAnalogSensorOnline.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorOnline.setDescription('If this Sensor is currently online')
virtualAnalogSensorGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
virtualAnalogSensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorHighWarning.setDescription('How high the relative VirtualAnalog this sensor measures before it sends a warning')
virtualAnalogSensorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorHighCritical.setDescription('How high the relative VirtualAnalog this sensor measures before it becomes critical')
virtualAnalogSensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorLowWarning.setDescription('How low the relative VirtualAnalog this sensor measures before it sends a warning')
virtualAnalogSensorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorLowCritical.setDescription('How low the relative VirtualAnalog this sensor measures before it becomes critical')
virtualAnalogSensorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorRearm.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorRearm.setDescription('The percent relative VirtualAnalog to rearm the status. For example if status goes from normal to warning, the VirtualAnalog must go down spAnalogueRearm below warning before the status goes to normal')
virtualAnalogSensorRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualAnalogSensorRaw.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage. This number can go from 0 to 1023 depending on the input voltage')
virtualAnalogSensorEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorEmailTrapLimit.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorEmailTrapLimit.setDescription('Enable email/trap limit feature')
virtualAnalogSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorUnit.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorUnit.setDescription('Display unit in VirtualAnalog.')
virtualAnalogSensorAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorAcknowledgement.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorAcknowledgement.setDescription('Acknowledged sensor error and stop notification')
virtualAnalogSensorURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorURL.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorURL.setDescription('Sensor URL link.')
virtualAnalogSensorOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorOpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorOpenURL.setDescription('Open URL in this browser or open in a new window.')
virtualAnalogSensorContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
virtualAnalogSensorContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
virtualAnalogSensorContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
virtualAnalogSensorContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
virtualAnalogSensorContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
virtualAnalogSensorContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
virtualAnalogSensorCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorCalendar.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorCalendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
virtualAnalogSensorValueFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 100, 1000))).clone(namedValues=NamedValues(("x1", 1), ("x0-1", 10), ("x0-01", 100), ("x0-001", 1000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAnalogSensorValueFactor.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorValueFactor.setDescription('To change the ratio of value.')
virtualAnalogSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 2, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualAnalogSensorId.setStatus('mandatory')
if mibBuilder.loadTexts: virtualAnalogSensorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
virtualSwitchSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4), )
if mibBuilder.loadTexts: virtualSwitchSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSwitchSensorTable.setDescription('This table contains the data for every VirtualSwitch Sensor in the SensorArray. Each row in the table contains data for a different VirtualSwitch Sensor.')
virtualSwitchSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1), ).setIndexNames((0, "SPAGENT-MIB", "virtualSwitchSensorIndex"))
if mibBuilder.loadTexts: virtualSwitchSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSwitchSensorEntry.setDescription('This is an entry in the virtualSwitchSensorEntry Table')
virtualSwitchSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSwitchSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSwitchSensorIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
virtualSwitchSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSwitchSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSwitchSensorDescription.setDescription('A Description of this sensor')
virtualSwitchSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSwitchSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSwitchSensorStatus.setDescription('The current status of this Sensor')
virtualSwitchSensorOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSwitchSensorOnline.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSwitchSensorOnline.setDescription('If this Sensor is currently online')
virtualSwitchSensorGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSwitchSensorGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSwitchSensorGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
virtualSwitchSensorEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSwitchSensorEmailTrapLimit.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSwitchSensorEmailTrapLimit.setDescription('Enable email/trap limit feature')
virtualSwitchSensorContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSwitchSensorContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSwitchSensorContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
virtualSwitchSensorContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSwitchSensorContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSwitchSensorContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
virtualSwitchSensorDescriptionCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSwitchSensorDescriptionCritical.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSwitchSensorDescriptionCritical.setDescription('Description of status when the virsual switch is critical')
virtualSwitchSensorDescriptionNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSwitchSensorDescriptionNormal.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSwitchSensorDescriptionNormal.setDescription('Description of status when the virsual switch is normal')
virtualSwitchSensorAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSwitchSensorAcknowledgement.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSwitchSensorAcknowledgement.setDescription('Acknowledged sensor error and stop notification')
virtualSwitchSensorURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSwitchSensorURL.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSwitchSensorURL.setDescription('Sensor URL link.')
virtualSwitchSensorOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSwitchSensorOpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSwitchSensorOpenURL.setDescription('Open URL in this browser or open in a new window.')
virtualSwitchSensorCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSwitchSensorCalendar.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSwitchSensorCalendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
virtualSwitchSensorNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSwitchSensorNormalState.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSwitchSensorNormalState.setDescription('The normal state of a return of the virsual switch. If a return of the virsual switch is equal this normal state value, it is normal. Otherwise, it is critical.')
virtualSwitchSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 5, 129, 4, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSwitchSensorId.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSwitchSensorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
sensorProbeTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 7))
spSensorStatus = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7), ("turnOn", 8), ("turnOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorStatus.setDescription('The current integer status of the sensor causing this trap to be sent')
spSensorValue = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorValue.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorValue.setDescription('The current integer value of the sensor causing this trap to be sent')
spSensorLevelExceeded = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorLevelExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorLevelExceeded.setDescription('The integer level that was exceeded causing this trap to be sent')
spSensorIndex = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorIndex.setDescription('The integer index of the sensor causing this trap to be sent')
spSensorName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorName.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorName.setDescription('The name of the sensor causing this trap to be sent')
spSensorDescription = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorDescription.setDescription('The description of the sensor causing this trap to be sent')
spSensorProbeKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorProbeKeepAlive.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorProbeKeepAlive.setDescription('Keep alive trap to be sent')
spSensorType = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 128, 129, 132, 134, 138))).clone(namedValues=NamedValues(("temperature", 1), ("fourTo20mA", 2), ("humidity", 3), ("water", 4), ("atod", 5), ("security", 6), ("airflow", 8), ("siren", 9), ("dryContact", 10), ("voltage", 12), ("relay", 13), ("motion", 14), ("extradrycontact", 16), ("thermostat", 23), ("smoke", 24), ("power", 25), ("irms", 26), ("vrms", 27), ("watt", 28), ("relayarray", 29), ("virtual", 30), ("watthour", 32), ("temperaturearray", 33), ("waterrope", 34), ("fuellevel", 35), ("tanksender", 36), ("sound", 128), ("softwaremotion", 129), ("nosignal", 132), ("powermeter", 134), ("door", 138)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorType.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorType.setDescription('Type of this sensor')
spSensorStatusName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorStatusName.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorStatusName.setDescription('The current status of the sensor causing this trap to be sent')
spSensorSubIndex = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorSubIndex.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorSubIndex.setDescription('The integer sub index of the sensor causing this trap to be sent. Only for temperaturearray and relayarray')
spBoardIndex = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spBoardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: spBoardIndex.setDescription('The integer index of the sensor board causing this trap to be sent.')
spBoardDescription = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spBoardDescription.setStatus('mandatory')
if mibBuilder.loadTexts: spBoardDescription.setDescription('The description of the sensor board causing this trap to be sent')
spEventTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spEventTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: spEventTimeStamp.setDescription('The time(MM/DD/YYYY HH:MM:SS) of an event causing this trap to be sent')
spEventClassNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spEventClassNumber.setStatus('mandatory')
if mibBuilder.loadTexts: spEventClassNumber.setDescription('The user-defined class number associated with this trap')
spEventClassName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spEventClassName.setStatus('mandatory')
if mibBuilder.loadTexts: spEventClassName.setDescription('The user-defined class Name associated with this trap')
spSensorDecimalValue = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorDecimalValue.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorDecimalValue.setDescription('The current decimal value of the sensor causing this trap to be sent')
spSensorAliveHigh = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorAliveHigh.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorAliveHigh.setDescription('The highest sensor value in the period')
spSensorAliveLow = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorAliveLow.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorAliveLow.setDescription('The  lowset sensor value in the period')
plusSeries = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 3))
summary = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 3, 1))
device = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 3, 2))
notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 3, 4))
sensors = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 3, 5))
virtual = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 3, 6))
config = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1))
cfgServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cfgServerAddress.setDescription("The DCIM's IP Address that device is connected to.")
cfgServerPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: cfgServerPort.setDescription("The DCIM's Port that device is connected to. Default is 5000.")
cfgDevicePassword = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 3), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfgDevicePassword.setStatus('mandatory')
if mibBuilder.loadTexts: cfgDevicePassword.setDescription("The local Administrator account's password for accessing the Web UI, Telnet and SSH services of the device. Default is 'public'.")
cfgSystemDescription = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSystemDescription.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSystemDescription.setDescription("The system's description of the device.")
cfgSystemName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSystemName.setDescription('The system name for the device.')
cfgSystemLocation = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSystemLocation.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSystemLocation.setDescription('The system location for the device.')
cfgSystemContact = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSystemContact.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSystemContact.setDescription('The administrator contact for the system.')
cfgIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cfgIPAddress.setDescription("The device's Ethernet IP Address.")
cfgSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSubnetMask.setDescription("The device's Ethernet Subnet Mask.")
cfgDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: cfgDefaultGateway.setDescription("The device's Ethernet Default Gateway.")
cfgDefaultDNS = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgDefaultDNS.setStatus('mandatory')
if mibBuilder.loadTexts: cfgDefaultDNS.setDescription("The device's Ethernet Default Domain Name System (DNS) for name resolution.")
cfgDeviceUseDHCP = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgDeviceUseDHCP.setStatus('mandatory')
if mibBuilder.loadTexts: cfgDeviceUseDHCP.setDescription('Enable Ethernet Dynamic Host Configuration Protocol (DHCP) on the device; it will automatically provide IP Address for the device.')
cfgNTPMode = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("do-not-use", 0), ("one-time", 1), ("on-system-start-up", 2), ("once-a-month", 3), ("once-a-week", 4), ("once-a-day", 5), ("once-a-hour", 6), ("continuously", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgNTPMode.setStatus('mandatory')
if mibBuilder.loadTexts: cfgNTPMode.setDescription('Network Time Protocol (NTP) Mode; this will define how often the device synchronizes time with the NTP Server.')
cfgNTPServer1 = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgNTPServer1.setStatus('mandatory')
if mibBuilder.loadTexts: cfgNTPServer1.setDescription('The first server that the device will synchronize time with, when NTP is enabled.')
cfgNTPServer2 = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgNTPServer2.setStatus('mandatory')
if mibBuilder.loadTexts: cfgNTPServer2.setDescription('The second server that the device will synchronize time with, when NTP is enabled.')
cfgTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgTimeZone.setStatus('mandatory')
if mibBuilder.loadTexts: cfgTimeZone.setDescription('The Time Zone of the device.')
cfgGSMConnectionMethod = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("never-dial", 0), ("dial-if-eth-failed", 1), ("dial-only", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgGSMConnectionMethod.setStatus('mandatory')
if mibBuilder.loadTexts: cfgGSMConnectionMethod.setDescription("The GSM Modem's Connection method. It will be defined when the device will be connecting via GSM's Modem.")
cfgGSMConnectionType = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgGSMConnectionType.setStatus('mandatory')
if mibBuilder.loadTexts: cfgGSMConnectionType.setDescription("The GSM Modem's Connection type. It will be defined when the GSM Modem is always being used to connect, or depends on the Connection Method Setting.")
cfgGSMInitString = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgGSMInitString.setStatus('mandatory')
if mibBuilder.loadTexts: cfgGSMInitString.setDescription("The GSM Modem's Initialization String, a list of AT commands that will be sent when a connection to the modem is being established.")
cfgGSMConnectionMode = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgGSMConnectionMode.setStatus('mandatory')
if mibBuilder.loadTexts: cfgGSMConnectionMode.setDescription("The GSM Modem's Connection Mode, it defines which GSM protocol will be used to transfer data.")
cfgGSMAPN = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgGSMAPN.setStatus('mandatory')
if mibBuilder.loadTexts: cfgGSMAPN.setDescription('Access Point Name (APN), the name of a gateway between a GSM, GPRS, 3G or 4G mobile network and another computer network, frequently the public Internet.')
cfgGSMRetry = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgGSMRetry.setStatus('mandatory')
if mibBuilder.loadTexts: cfgGSMRetry.setDescription('The number of attempts that the GSM modem will use to redial if previous attempts have failed.')
cfgGSMIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgGSMIdleTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: cfgGSMIdleTimeout.setDescription('Time in seconds for the GSM modem to be idle before hanging up automatically.')
cfgGSMLogin = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgGSMLogin.setStatus('mandatory')
if mibBuilder.loadTexts: cfgGSMLogin.setDescription("GSM modem Point-to-Point Protocol (PPP)'s Login Name.")
cfgGSMPassword = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 32), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfgGSMPassword.setStatus('mandatory')
if mibBuilder.loadTexts: cfgGSMPassword.setDescription("GSM Modem Point-to-Point Protocol (PPP)'s Password.")
cfgGSMDNS = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 33), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgGSMDNS.setStatus('mandatory')
if mibBuilder.loadTexts: cfgGSMDNS.setDescription('IP address for the Domain Name System (DNS) for GSM Modem Connection.')
cfgWEBPasswordEnable = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgWEBPasswordEnable.setStatus('mandatory')
if mibBuilder.loadTexts: cfgWEBPasswordEnable.setDescription('Enable/disable password checking for the Web UI.')
cfgWEBPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgWEBPort.setStatus('mandatory')
if mibBuilder.loadTexts: cfgWEBPort.setDescription('Web interface port (default value is 80).')
cfgWEBSecurePort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgWEBSecurePort.setStatus('mandatory')
if mibBuilder.loadTexts: cfgWEBSecurePort.setDescription('Secured Web interface port (default value is 443).')
cfgWEBSecureEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("useByDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgWEBSecureEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: cfgWEBSecureEnabled.setDescription('Enable/disable Secured Web interface.')
cfgWEBEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgWEBEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: cfgWEBEnabled.setDescription('Enable/disable Web interface.')
cfgSNMPReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 42), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfgSNMPReadCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSNMPReadCommunity.setDescription("SNMP read community, the community password for use with SNMP to read variables. Default is 'public'.")
cfgSNMPWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 43), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfgSNMPWriteCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSNMPWriteCommunity.setDescription("SNMP write community, the community password for use with SNMP to write variables. Default is 'public'.")
cfgSNMPv3Mode = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("authNoPriv", 0), ("authPriv", 1), ("noAuthNoPriv", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSNMPv3Mode.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSNMPv3Mode.setDescription('Security Level for SNMPv3 to be used during communication.')
cfgEMailEnable = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEMailEnable.setStatus('mandatory')
if mibBuilder.loadTexts: cfgEMailEnable.setDescription('Enable/disable the usage of the E-Mail feature on the device.')
cfgSMTPServer = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSMTPServer.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSMTPServer.setDescription('The name or IP address of the SMTP server, to be used for sending an E-Mail.')
cfgSMTPPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSMTPPort.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSMTPPort.setDescription('The port number for the SMTP connection. Default is 25.')
cfgSMTPAuth = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-required", 0), ("required", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSMTPAuth.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSMTPAuth.setDescription('Enable/disable the SMTP authentication for the E-Mail service on the device.')
cfgSMTPLogin = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSMTPLogin.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSMTPLogin.setDescription('The user name for the SMTP server login.')
cfgSMTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 52), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfgSMTPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSMTPPassword.setDescription("The user's password for the SMTP server login.")
cfgEMailResendInterval = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEMailResendInterval.setStatus('mandatory')
cfgEMailMaxResend = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEMailMaxResend.setStatus('mandatory')
cfgKeepAliveTime = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 78), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgKeepAliveTime.setStatus('mandatory')
if mibBuilder.loadTexts: cfgKeepAliveTime.setDescription("The DCIM's keep-alive time in seconds.")
cfgHostID = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgHostID.setStatus('mandatory')
if mibBuilder.loadTexts: cfgHostID.setDescription('Server host ID')
cfgHostUID = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgHostUID.setStatus('mandatory')
if mibBuilder.loadTexts: cfgHostUID.setDescription('Server host update ID')
cfgHostSensorUID = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgHostSensorUID.setStatus('mandatory')
if mibBuilder.loadTexts: cfgHostSensorUID.setDescription('Server host update ID for updating sensor and board properties')
cfgVPNServerPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgVPNServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: cfgVPNServerPort.setDescription("The VPN connection's port number on the DCIM. Default is 1194.")
cfgVPNServerDNSName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 84), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgVPNServerDNSName.setStatus('mandatory')
if mibBuilder.loadTexts: cfgVPNServerDNSName.setDescription('The Domain Name System (DNS) name of the DCIM for the VPN connection.')
cfgRSysLogServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 85), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRSysLogServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cfgRSysLogServerAddress.setDescription('IP address for the Remote SysLog server.')
cfgRSysLogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRSysLogServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: cfgRSysLogServerPort.setDescription('The port number for the Remote SysLog server.')
cfgSMTPSSL = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("no-encryption", 0), ("ssl-tls", 1), ("starttls", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSMTPSSL.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSMTPSSL.setDescription("The SMTP security level's protocol that will be used upon connection to an SMTP Server.")
cfgVPNCipherType = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("blowfish", 1), ("aes128", 2), ("des-ede3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgVPNCipherType.setStatus('mandatory')
if mibBuilder.loadTexts: cfgVPNCipherType.setDescription('The VPN cipher protocol that will be used to communicate with the DCIM over the network.')
cfgVPNPassword = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 91), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfgVPNPassword.setStatus('mandatory')
if mibBuilder.loadTexts: cfgVPNPassword.setDescription("The VPN Password for connecting to the DCIM's VPN server.")
cfgVPNEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgVPNEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: cfgVPNEnabled.setDescription('Enable/disable the VPN feature on the device. If enabled, the device will try to connect to the DCIM VPN server if the configuration is correct.')
cfgSNMPPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 93), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSNMPPort.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSNMPPort.setDescription('The port used for SNMP communication.')
cfgSNMPv3EngineId = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 94), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSNMPv3EngineId.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSNMPv3EngineId.setDescription('The Engine ID that will be used for connection with SNMPv3.')
cfgSNMPv3UserName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 95), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSNMPv3UserName.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSNMPv3UserName.setDescription('The user name for connecting with SNMPv3 to this device.')
cfgSNMPv3AuthProtocol = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 96), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("md5", 0), ("sha1", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSNMPv3AuthProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSNMPv3AuthProtocol.setDescription('The Authentication protocol that will be used with SNMPv3 connection (MD5 / SHA).')
cfgSNMPv3AuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 97), Opaque()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfgSNMPv3AuthPassword.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSNMPv3AuthPassword.setDescription('The SNMPv3 authentication password.')
cfgSNMPv3PrivProtocol = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("des", 0), ("aes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSNMPv3PrivProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSNMPv3PrivProtocol.setDescription('The SNMPv3 privacy protocol that will be used with SNMPv3 connection (DES / AES).')
cfgSNMPv3PrivPassword = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 99), Opaque()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfgSNMPv3PrivPassword.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSNMPv3PrivPassword.setDescription('The SNMPv3 privacy password.')
cfgSNMPv3AccessPrivelege = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("read-only", 0), ("read-write", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSNMPv3AccessPrivelege.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSNMPv3AccessPrivelege.setDescription('The access privilege of SNMPv3 (read only / read-write).')
cfgSNMPv1Disable = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSNMPv1Disable.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSNMPv1Disable.setDescription('Disable SNMPv1 and SNMPv2c from being used.')
cfgSNMPv3Disable = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSNMPv3Disable.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSNMPv3Disable.setDescription('Disable SNMPv3 from being used.')
cfgGraphDataCollectionPeriod = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 104), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgGraphDataCollectionPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: cfgGraphDataCollectionPeriod.setDescription('The graph data collection period in seconds. The more seconds you define, the more graph data can be stored.')
cfgServiceTelnet = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgServiceTelnet.setStatus('mandatory')
if mibBuilder.loadTexts: cfgServiceTelnet.setDescription('Enable/disable the Telnet service on the device.')
cfgEnableNotiFilteringOnBoot = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEnableNotiFilteringOnBoot.setStatus('mandatory')
if mibBuilder.loadTexts: cfgEnableNotiFilteringOnBoot.setDescription('Enable/disable notifications filtering when the device is booting up. If enabled (set to nonzero) will trigger notification on device boot (initial sensor state change events). If disabled (set to zero) will filter notifications on software boot on initial sensor status change events. This is useful to avoid false notifications on initial sensor status change events.')
cfgSystemURL = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 107), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSystemURL.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSystemURL.setDescription('Custom URL what users can use in Email and SMS notifications to expand macro $[SYSURL]. It can point to a page on the device, or to any external URL.')
cfgServerIntegrationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgServerIntegrationEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: cfgServerIntegrationEnabled.setDescription('Enable/disable the DCIM Integration.')
cfgServerIntegrationPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 109), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgServerIntegrationPort.setStatus('mandatory')
if mibBuilder.loadTexts: cfgServerIntegrationPort.setDescription('Port for DCIM Integration.')
cfgSMTPEMailFrom = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 110), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSMTPEMailFrom.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSMTPEMailFrom.setDescription("The default E-mail address that will show in an E-mail's 'From' field and which will be used to send mail to support.")
cfgSupportEMail = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 111), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSupportEMail.setStatus('mandatory')
if mibBuilder.loadTexts: cfgSupportEMail.setDescription("The E-mail address of the device's support department.")
cfgDHCPHostName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 1, 137), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgDHCPHostName.setStatus('mandatory')
if mibBuilder.loadTexts: cfgDHCPHostName.setDescription('DHCP hostname.')
licenses = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2))
licenseTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 1), )
if mibBuilder.loadTexts: licenseTable.setStatus('mandatory')
licenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 1, 1), ).setIndexNames((0, "SPAGENT-MIB", "licenseIndex"))
if mibBuilder.loadTexts: licenseEntry.setStatus('mandatory')
licenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseIndex.setStatus('mandatory')
license5DC = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: license5DC.setStatus('mandatory')
licenseSNMPv3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseSNMPv3.setStatus('mandatory')
licenseVPN = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseVPN.setStatus('mandatory')
licenseVSens = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseVSens.setStatus('mandatory')
licenseAccessUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseAccessUsers.setStatus('mandatory')
license3rdPartyPMS = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: license3rdPartyPMS.setStatus('mandatory')
lic5DCTotal = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lic5DCTotal.setStatus('mandatory')
lic5DCUsed = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lic5DCUsed.setStatus('mandatory')
licSNMPv3 = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("forbidden", 0), ("allowed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licSNMPv3.setStatus('mandatory')
licVPN = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("forbidden", 0), ("allowed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licVPN.setStatus('mandatory')
licVSensTotal = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licVSensTotal.setStatus('mandatory')
licVSensUsed = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licVSensUsed.setStatus('mandatory')
licAccessUsersTotal = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licAccessUsersTotal.setStatus('mandatory')
licAccessUsersUsed = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licAccessUsersUsed.setStatus('mandatory')
lic3rdPartyPMS = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("forbidden", 0), ("allowed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lic3rdPartyPMS.setStatus('mandatory')
licAddKey = MibScalar((1, 3, 6, 1, 4, 1, 3854, 3, 2, 2, 1000), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: licAddKey.setStatus('mandatory')
commonTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1), )
if mibBuilder.loadTexts: commonTable.setStatus('mandatory')
if mibBuilder.loadTexts: commonTable.setDescription('This table contains the properties for each any sensor')
commonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1), ).setIndexNames((0, "SPAGENT-MIB", "commonIndex"))
if mibBuilder.loadTexts: commonEntry.setStatus('mandatory')
commonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonIndex.setStatus('mandatory')
if mibBuilder.loadTexts: commonIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
commonDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDescription.setStatus('mandatory')
if mibBuilder.loadTexts: commonDescription.setDescription('The user specified description of this sensor. Unless specified, the default value is used.')
commonType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 31, 128, 129, 130, 131, 132, 133, 224, 255))).clone(namedValues=NamedValues(("temperature", 1), ("humidity", 2), ("temperature-dual", 3), ("four-20mA", 4), ("dcvoltage", 5), ("airflow", 6), ("io", 7), ("drycontact", 8), ("motion", 9), ("water", 10), ("security", 11), ("siren", 12), ("relay", 13), ("acvoltage", 14), ("vrms", 15), ("irms", 16), ("watt", 17), ("watthour", 18), ("xrelay", 19), ("thermocouple", 20), ("smoke", 21), ("drycontact-array", 22), ("temperature-array", 23), ("waterrope", 24), ("five-drycontacts", 31), ("thermostat", 128), ("virtual", 129), ("sound", 130), ("softmotion", 131), ("camera-dummy", 132), ("board-state", 133), ("nosignal", 224), ("test", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonType.setStatus('mandatory')
if mibBuilder.loadTexts: commonType.setDescription("The type of the sensor; it represents the sensor's functionality.")
commonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonValue.setStatus('mandatory')
if mibBuilder.loadTexts: commonValue.setDescription("The value reading for this sensor; it's a different measure for each sensor type.")
commonUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonUnit.setStatus('mandatory')
if mibBuilder.loadTexts: commonUnit.setDescription("The sensor's value unit; it defines the sensor value's reading unit.")
commonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonStatus.setStatus('mandatory')
if mibBuilder.loadTexts: commonStatus.setDescription('The current status of this sensor.')
commonGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: commonGoOffline.setDescription("Command to offline this sensor: use value '2' to set the sensor offline.")
commonRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonRaw.setStatus('mandatory')
if mibBuilder.loadTexts: commonRaw.setDescription("The sensor's unformatted (raw) value that is being read directly from sensor, before it is converted to the preferred value.")
commonPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonPort.setStatus('mandatory')
if mibBuilder.loadTexts: commonPort.setDescription("The device's sensor port number, where this sensor is plugged in to.")
commonSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: commonSubPort.setDescription('The logical port number of this sensor in the array, or in a set of sensors.')
commonDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: commonDisplayStyle.setDescription("The sensor's Display Style for the Web UI, to display the reading as a gauge or bar. 0 = bar style, 1 = gauge style.")
commonHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonHighCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: commonHighCriticalDescription.setDescription("The user specified 'High Critical' status description of this sensor. Unless specified, the default value is used.")
commonLowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonLowCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: commonLowCriticalDescription.setDescription("The user specified 'Low Critical' status description of this sensor. Unless specified, the default value is used.")
commonSensorNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorNormalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorNormalDescription.setDescription("The user specified 'Normal' status description of this sensor. Unless specified, the default value is used.")
commonLowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonLowWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: commonLowWarningDescription.setDescription("The user specified 'Low Warning' status description of this sensor. Unless specified, the default value is used.")
commonHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonHighWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: commonHighWarningDescription.setDescription("The user specified 'High Warning' status description of this sensor. Unless specified, the default value is used.")
commonSensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorErrorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorErrorDescription.setDescription("The user specified 'Sensor Error' status description of this sensor. Unless specified, the default value is used.")
commonOnDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonOnDescription.setStatus('mandatory')
if mibBuilder.loadTexts: commonOnDescription.setDescription("The user specified 'On' status description of this sensor. Unless specified, the default value is used.")
commonOffDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonOffDescription.setStatus('mandatory')
if mibBuilder.loadTexts: commonOffDescription.setDescription("The user specified 'Off' Description of this sensor. Unless specified, the default value is used.")
commonHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: commonHighCriticalColor.setDescription("The user specified 'High Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
commonLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: commonLowCriticalColor.setDescription("The user specified 'Low Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
commonSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorNormalColor.setDescription("The user specified 'Normal' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
commonLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: commonLowWarningColor.setDescription("The user specified 'Low Warning' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
commonHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: commonHighWarningColor.setDescription("The user specified 'High Warning' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
commonSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: commonSensorErrorColor.setDescription("The user specified 'Sensor Error' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
commonOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonOnColor.setStatus('mandatory')
if mibBuilder.loadTexts: commonOnColor.setDescription("The user specified 'On' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
commonOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonOffColor.setStatus('mandatory')
if mibBuilder.loadTexts: commonOffColor.setDescription("The user specified 'Off' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
commonAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: commonAcknowledge.setDescription('The acknowledge status for the current status of the sensor: 0 = the status has been changed and waiting to be acknowledged, 1 = status is normal or have been already acknowledged, 2 = acknowledge the current status (this status is write-only)')
commonValueFormatFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 99), Opaque().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonValueFormatFloat.setStatus('mandatory')
if mibBuilder.loadTexts: commonValueFormatFloat.setDescription('The floating-point IEEE 754 Standard reading value for this sensor (in commonValue float form instead of integer).')
commonId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 1, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonId.setStatus('mandatory')
if mibBuilder.loadTexts: commonId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
temperatureTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2), )
if mibBuilder.loadTexts: temperatureTable.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureTable.setDescription('This table contains the properties for each temperature sensor')
temperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "temperatureIndex"))
if mibBuilder.loadTexts: temperatureEntry.setStatus('mandatory')
temperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureIndex.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
temperatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureDescription.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureDescription.setDescription('The user specified description of this sensor. Unless specified, the default value is used.')
temperatureType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 20, 23))).clone(namedValues=NamedValues(("temperature", 1), ("temperature-dual", 3), ("thermocouple", 20), ("temperature-array", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureType.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureType.setDescription("The type of the sensor; it represents the sensor's functionality. For the temperature sensor, it has 3 sub-types: Normal temperature sensor, Dual sensor, and Thermocouple sensor.")
temperatureDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureDegree.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureDegree.setDescription('The temperature degree value in numerical reading.')
temperatureUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureUnit.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureUnit.setDescription("The sensor's value unit string, in what the sensor's value is read in. For the temperature sensor it can be Celsius or Fahrenheit.")
temperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureStatus.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureStatus.setDescription('The current status of this sensor.')
temperatureGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureGoOffline.setDescription("Command to offline this sensor: use value '2' to set the sensor offline.")
temperatureLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureLowCritical.setDescription("The user specified 'Low Critical' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
temperatureLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureLowWarning.setDescription("The user specified 'Low Warning' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
temperatureHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureHighWarning.setDescription("The user specified 'High Warning' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
temperatureHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureHighCritical.setDescription("The user specified 'High Critical' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
temperatureRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureRearm.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureRearm.setDescription('This value tells how many degrees the sensor has to reach beyond the threshold value, before changing to a new status. Useful to prevent the quick fluctuation of readings.')
temperatureDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureDelayError.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Error' status before its status is changed.")
temperatureDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureDelayNormal.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Normal' status before its status is changed.")
temperatureDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureDelayLowCritical.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Low Critical' status before its status is changed.")
temperatureDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureDelayLowWarning.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Low Warning' status before its status is changed.")
temperatureDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureDelayHighWarning.setDescription("The time in seconds (continuous time) that the sensor has to be in 'High Warning' status before its status is changed.")
temperatureDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureDelayHighCritical.setDescription("The time in seconds (continuous time) that the sensor has to be in 'High Critical' status before its status is changed.")
temperatureRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureRaw.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureRaw.setDescription("The sensor's unformatted (raw) value that is being read directly from sensor, before it is converted to the preferred value.")
temperatureOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureOffset.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureOffset.setDescription("The offset value for this sensor. It's used to adjust the reading value in case the reading is incorrect.")
temperaturePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperaturePort.setStatus('mandatory')
if mibBuilder.loadTexts: temperaturePort.setDescription("The device's sensor port number, where this sensor is plugged in to.")
temperatureSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSubPort.setDescription("The logical port number of this sensor in the array, or in a set of sensors. For Temperature Sensor, it's for the array of Temperature Sensors and Dual Sensors.  For example x.1, x.2, x.3 ...")
temperatureDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureDisplayStyle.setDescription("The sensor's Display Style for the Web UI, to display the reading as a gauge or bar. 0 = bar style, 1 = gauge style.")
temperatureHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureHighCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureHighCriticalDescription.setDescription("The user specified 'High Critical' status description of this sensor. Unless specified, the default value is used.")
temperatureLowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureLowCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureLowCriticalDescription.setDescription("The user specified 'Low Critical' status description of this sensor. Unless specified, the default value is used.")
temperatureSensorNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorNormalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorNormalDescription.setDescription("The user specified 'Normal' status description of this sensor. Unless specified, the default value is used.")
temperatureLowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureLowWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureLowWarningDescription.setDescription("The user specified 'Low Warning' status description of this sensor. Unless specified, the default value is used.")
temperatureHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureHighWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureHighWarningDescription.setDescription("The user specified 'High Warning' status description of this sensor. Unless specified, the default value is used.")
temperatureSensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorErrorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorErrorDescription.setDescription("The user specified 'Sensor Error' status description of this sensor. Unless specified, the default value is used.")
temperatureHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureHighCriticalColor.setDescription("The user specified 'High Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
temperatureLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureLowCriticalColor.setDescription("The user specified 'Low Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
temperatureSensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorNormalColor.setDescription("The user specified 'Normal' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
temperatureLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureLowWarningColor.setDescription("The user specified 'Low Warning' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
temperatureHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureHighWarningColor.setDescription("The user specified 'High Warning' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
temperatureSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSensorErrorColor.setDescription("The user specified 'Sensor Error' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
temperatureAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureAcknowledge.setDescription('The acknowledge status for the current status of the sensor: 0 = the status has been changed and waiting to be acknowledged, 1 = status is normal or have been already acknowledged, 2 = acknowledge the current status (this status is write-only)')
temperatureSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 71), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSerialNumber.setDescription('The serial number of temperature sensor, used to indicate which sensor it is in an array. It matches the MAC ID of the sensor for a DCT sensor array.')
temperatureId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 2, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureId.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
humidityTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3), )
if mibBuilder.loadTexts: humidityTable.setStatus('mandatory')
if mibBuilder.loadTexts: humidityTable.setDescription('This table contains the properties for each humidity sensor')
humidityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1), ).setIndexNames((0, "SPAGENT-MIB", "humidityIndex"))
if mibBuilder.loadTexts: humidityEntry.setStatus('mandatory')
humidityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: humidityIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
humidityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityDescription.setStatus('mandatory')
if mibBuilder.loadTexts: humidityDescription.setDescription('The user specified description of this sensor. Unless specified, the default value is used.')
humidityPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityPercent.setStatus('mandatory')
if mibBuilder.loadTexts: humidityPercent.setDescription('The relative humidity percentage measured by this sensor')
humidityUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityUnit.setStatus('mandatory')
if mibBuilder.loadTexts: humidityUnit.setDescription("The sensor's value unit string, in what the sensor's value is read in.")
humidityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: humidityStatus.setDescription('The current status of this sensor.')
humidityGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: humidityGoOffline.setDescription("Command to offline this sensor: use value '2' to set the sensor offline.")
humidityLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: humidityLowCritical.setDescription("The user specified 'Low Critical' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
humidityLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: humidityLowWarning.setDescription("The user specified 'Low Warning' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
humidityHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: humidityHighWarning.setDescription("The user specified 'High Warning' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
humidityHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: humidityHighCritical.setDescription("The user specified 'High Critical' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
humidityRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityRearm.setStatus('mandatory')
if mibBuilder.loadTexts: humidityRearm.setDescription('This value tells how many percentage the sensor has to reach beyond the threshold value, before changing to a new status. Useful to prevent the quick fluctuation of readings.')
humidityDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: humidityDelayError.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Error' status before its status is changed.")
humidityDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: humidityDelayNormal.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Normal' status before its status is changed.")
humidityDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: humidityDelayLowCritical.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Low Critical' status before its status is changed.")
humidityDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: humidityDelayLowWarning.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Low Warning' status before its status is changed.")
humidityDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: humidityDelayHighWarning.setDescription("The time in seconds (continuous time) that the sensor has to be in 'High Warning' status before its status is changed.")
humidityDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: humidityDelayHighCritical.setDescription("The time in seconds (continuous time) that the sensor has to be in 'High Critical' status before its status is changed.")
humidityRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityRaw.setStatus('mandatory')
if mibBuilder.loadTexts: humidityRaw.setDescription("The sensor's unformatted (raw) value that is being read directly from sensor, before it is converted to the preferred value.")
humidityOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityOffset.setStatus('mandatory')
if mibBuilder.loadTexts: humidityOffset.setDescription("The offset value for this sensor. It's used to adjust the reading value in case the reading is incorrect.")
humidityPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityPort.setStatus('mandatory')
if mibBuilder.loadTexts: humidityPort.setDescription("The device's sensor port number, where this sensor is plugged in to.")
humiditySubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySubPort.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySubPort.setDescription("The logical port number of this sensor in the array, or in a set of sensors. For Humidity Sensor, it's for the Dual Sensors.")
humidityDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: humidityDisplayStyle.setDescription("The sensor's Display Style for the Web UI, to display the reading as a gauge or bar. 0 = bar style, 1 = gauge style.")
humidityHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityHighCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: humidityHighCriticalDescription.setDescription("The user specified 'High Critical' status description of this sensor. Unless specified, the default value is used.")
humidityLowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: humidityLowCriticalDescription.setDescription("The user specified 'Low Critical' status description of this sensor. Unless specified, the default value is used.")
humiditySensorNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorNormalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorNormalDescription.setDescription("The user specified 'Normal' status description of this sensor. Unless specified, the default value is used.")
humidityLowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: humidityLowWarningDescription.setDescription("The user specified 'Low Warning' status description of this sensor. Unless specified, the default value is used.")
humidityHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityHighWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: humidityHighWarningDescription.setDescription("The user specified 'High Warning' status description of this sensor. Unless specified, the default value is used.")
humiditySensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorErrorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorErrorDescription.setDescription("The user specified 'Sensor Error' status description of this sensor. Unless specified, the default value is used.")
humidityHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: humidityHighCriticalColor.setDescription("The user specified 'High Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
humidityLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: humidityLowCriticalColor.setDescription("The user specified 'Low Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
humiditySensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorNormalColor.setDescription("The user specified 'Normal' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
humidityLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: humidityLowWarningColor.setDescription("The user specified 'Low Warning' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
humidityHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: humidityHighWarningColor.setDescription("The user specified 'High Warning' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
humiditySensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: humiditySensorErrorColor.setDescription("The user specified 'Sensor Error' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
humidityAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: humidityAcknowledge.setDescription('The acknowledge status for the current status of the sensor: 0 = the status has been changed and waiting to be acknowledged, 1 = status is normal or have been already acknowledged, 2 = acknowledge the current status (this status is write-only)')
humidityId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 3, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityId.setStatus('mandatory')
if mibBuilder.loadTexts: humidityId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
drycontactTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4), )
if mibBuilder.loadTexts: drycontactTable.setStatus('mandatory')
if mibBuilder.loadTexts: drycontactTable.setDescription('This table contains the properties for each drycontact sensor')
drycontactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1), ).setIndexNames((0, "SPAGENT-MIB", "drycontactIndex"))
if mibBuilder.loadTexts: drycontactEntry.setStatus('mandatory')
drycontactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drycontactIndex.setStatus('mandatory')
if mibBuilder.loadTexts: drycontactIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
drycontactDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactDescription.setStatus('mandatory')
if mibBuilder.loadTexts: drycontactDescription.setDescription('The user specified description of this sensor. Unless specified, the default value is used.')
drycontactType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 22))).clone(namedValues=NamedValues(("drycontact-inout", 7), ("drycontact-input", 8), ("drycontact-array", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drycontactType.setStatus('mandatory')
if mibBuilder.loadTexts: drycontactType.setDescription("The type of the sensor; it represents the sensor's functionality. For the drycontact sensor, it has 3 sub-types: drycontact-input, drycontact-output and drycontact-array.")
drycontactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("outputLow", 8), ("outputHigh", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drycontactStatus.setStatus('mandatory')
if mibBuilder.loadTexts: drycontactStatus.setDescription('The current status of this sensor.')
drycontactGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: drycontactGoOffline.setDescription("Command to offline this sensor: use value '2' to set the sensor offline.")
drycontactDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactDirection.setStatus('mandatory')
if mibBuilder.loadTexts: drycontactDirection.setDescription("The functional direction of this drycontact sensors: use value '0' for input drycontact and '1' for output drycontact")
drycontactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactNormalState.setStatus('mandatory')
if mibBuilder.loadTexts: drycontactNormalState.setDescription('The normal state of the input drycontact. If an input switch is in this state it is normal, else it is critical. An open drycontact senses +5 volts. A closed drycontact senses 0 volts.')
drycontactControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("sensor-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: drycontactControlMode.setDescription('The Control Mode for controlling this drycontact sensor with, it can be one of these: Manual, Notification, Time, Thermostat.')
drycontactOutputManualCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactOutputManualCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: drycontactOutputManualCycleTime.setDescription('The time in seconds that the drycontact will stay in a state, before changing to the next state in case the cycle action have been used.')
drycontactOutputManualAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("high", 1), ("cycle-Low-High-Low", 2), ("cycle-High-Low-High", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactOutputManualAction.setStatus('mandatory')
if mibBuilder.loadTexts: drycontactOutputManualAction.setDescription('The manual output control for the drycontact state: Low, High, Toggle Low-High, Toggle High-Low.')
drycontactPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drycontactPort.setStatus('mandatory')
if mibBuilder.loadTexts: drycontactPort.setDescription("The device's sensor port number, where this sensor is plugged in to.")
drycontactSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drycontactSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: drycontactSubPort.setDescription('The logical port number of this sensor in the array, or in a set of sensors.')
drycontactCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: drycontactCriticalDescription.setDescription("The user specified 'Critical' status description of this sensor. Unless specified, the default value is used.")
drycontactNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactNormalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: drycontactNormalDescription.setDescription("The user specified 'Normal' status description of this sensor. Unless specified, the default value is used.")
drycontactOnDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactOnDescription.setStatus('mandatory')
if mibBuilder.loadTexts: drycontactOnDescription.setDescription("The user specified 'On' status description of this sensor. Unless specified, the default value is used.")
drycontactOffDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactOffDescription.setStatus('mandatory')
if mibBuilder.loadTexts: drycontactOffDescription.setDescription("The user specified 'Off' status description of this sensor. Unless specified, the default value is used.")
drycontactCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: drycontactCriticalColor.setDescription("The user specified 'Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
drycontactNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: drycontactNormalColor.setDescription("The user specified 'Normal' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
drycontactOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactOnColor.setStatus('mandatory')
if mibBuilder.loadTexts: drycontactOnColor.setDescription("The user specified 'On' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
drycontactOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactOffColor.setStatus('mandatory')
if mibBuilder.loadTexts: drycontactOffColor.setDescription("The user specified 'Off' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
drycontactAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drycontactAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: drycontactAcknowledge.setDescription('The acknowledge status for the current status of the sensor: 0 = the status has been changed and waiting to be acknowledged, 1 = status is normal or have been already acknowledged, 2 = acknowledge the current status (this status is write-only)')
drycontactId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 4, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drycontactId.setStatus('mandatory')
if mibBuilder.loadTexts: drycontactId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
current4to20mATable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5), )
if mibBuilder.loadTexts: current4to20mATable.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mATable.setDescription('This table contains the properties for each 4-20mAmp sensor')
current4to20mAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1), ).setIndexNames((0, "SPAGENT-MIB", "current4to20mAIndex"))
if mibBuilder.loadTexts: current4to20mAEntry.setStatus('mandatory')
current4to20mAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mAIndex.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mAIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
current4to20mADescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mADescription.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mADescription.setDescription('The user specified description of this sensor. Unless specified, the default value is used.')
current4to20mAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mAValue.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mAValue.setDescription('The value in numerical reading.')
current4to20mAUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAUnit.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mAUnit.setDescription("The sensor's value unit string, in what the sensor's value is read in.")
current4to20mAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mAStatus.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mAStatus.setDescription('The current status of this sensor.')
current4to20mAGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mAGoOffline.setDescription("Command to offline this sensor: use value '2' to set the sensor offline.")
current4to20mALowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mALowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mALowCritical.setDescription("The user specified 'Low Critical' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
current4to20mALowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mALowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mALowWarning.setDescription("The user specified 'Low Warning' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
current4to20mAHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mAHighWarning.setDescription("The user specified 'High Warning' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
current4to20mAHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mAHighCritical.setDescription("The user specified 'High Critical' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
current4to20mARearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mARearm.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mARearm.setDescription('This value tells how many values the sensor has to reach beyond the threshold value, before changing to a new status. Useful to prevent the quick fluctuation of readings.')
current4to20mADelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mADelayError.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mADelayError.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Error' status before its status is changed.")
current4to20mADelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mADelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mADelayNormal.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Normal' status before its status is changed.")
current4to20mADelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mADelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mADelayLowCritical.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Low Critical' status before its status is changed.")
current4to20mADelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mADelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mADelayLowWarning.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Low Warning' status before its status is changed.")
current4to20mADelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mADelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mADelayHighWarning.setDescription("The time in seconds (continuous time) that the sensor has to be in 'High Warning' status before its status is changed.")
current4to20mADelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mADelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mADelayHighCritical.setDescription("The time in seconds (continuous time) that the sensor has to be in 'High Critical' status before its status is changed.")
current4to20mARaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mARaw.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mARaw.setDescription("The sensor's unformatted (raw) value that is being read directly from sensor, before it is converted to the preferred value.")
current4to20mAOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAOffset.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mAOffset.setDescription("The offset value for this sensor. It's used to adjust the reading value in case the reading is incorrect.")
current4to20mAAmountMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAAmountMaxVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mAAmountMaxVoltage.setDescription('The maximum scale of 4to20mA conversion.')
current4to20mAAmountBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAAmountBaseVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mAAmountBaseVoltage.setDescription('The base scale of 4to20mA conversion.')
current4to20mAPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mAPort.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mAPort.setDescription("The device's sensor port number, where this sensor is plugged in to.")
current4to20mASubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mASubPort.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASubPort.setDescription("The logical port number of this sensor in the array, or in a set of sensors. For Temperature Sensor, it's for the array of Temperature Sensors and Dual Sensors.  For example x.1, x.2, x.3 ...")
current4to20mAMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAMaxVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mAMaxVoltage.setDescription('The maximum range for use in conversion.')
current4to20mABaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mABaseVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mABaseVoltage.setDescription('The base range for use in conversion.')
current4to20mADisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mADisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mADisplayStyle.setDescription("The sensor's Display Style for the Web UI, to display the reading as a gauge or bar. 0 = bar style, 1 = gauge style.")
current4to20mAHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAHighCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mAHighCriticalDescription.setDescription("The user specified 'High Critical' status description of this sensor. Unless specified, the default value is used.")
current4to20mALowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mALowCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mALowCriticalDescription.setDescription("The user specified 'Low Critical' status description of this sensor. Unless specified, the default value is used.")
current4to20mANormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mANormalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mANormalDescription.setDescription("The user specified 'Normal' status description of this sensor. Unless specified, the default value is used.")
current4to20mALowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mALowWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mALowWarningDescription.setDescription("The user specified 'Low Warning' status description of this sensor. Unless specified, the default value is used.")
current4to20mAHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAHighWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mAHighWarningDescription.setDescription("The user specified 'High Warning' status description of this sensor. Unless specified, the default value is used.")
current4to20mASensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorErrorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorErrorDescription.setDescription("The user specified 'Sensor Error' status description of this sensor. Unless specified, the default value is used.")
current4to20mAHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mAHighCriticalColor.setDescription("The user specified 'High Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
current4to20mALowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mALowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mALowCriticalColor.setDescription("The user specified 'Low Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
current4to20mANormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mANormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mANormalColor.setDescription("The user specified 'Normal' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
current4to20mALowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mALowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mALowWarningColor.setDescription("The user specified 'Low Warning' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
current4to20mAHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mAHighWarningColor.setDescription("The user specified 'High Warning' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
current4to20mASensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mASensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mASensorErrorColor.setDescription("The user specified 'Sensor Error' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
current4to20mAAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: current4to20mAAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mAAcknowledge.setDescription('The acknowledge status for the current status of the sensor: 0 = the status has been changed and waiting to be acknowledged, 1 = status is normal or have been already acknowledged, 2 = acknowledge the current status (this status is write-only)')
current4to20mAId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 5, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: current4to20mAId.setStatus('mandatory')
if mibBuilder.loadTexts: current4to20mAId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
dcVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6), )
if mibBuilder.loadTexts: dcVoltageTable.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageTable.setDescription('This table contains the properties for each DC voltage sensor')
dcVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1), ).setIndexNames((0, "SPAGENT-MIB", "dcVoltageIndex"))
if mibBuilder.loadTexts: dcVoltageEntry.setStatus('mandatory')
dcVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
dcVoltageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageDescription.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageDescription.setDescription('The user specified description of this sensor. Unless specified, the default value is used.')
dcVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageValue.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageValue.setDescription('The value in numerical reading.')
dcVoltageUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageUnit.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageUnit.setDescription("The sensor's value unit string, in what the sensor's value is read in.")
dcVoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageStatus.setDescription('The current status of this sensor.')
dcVoltageGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageGoOffline.setDescription("Command to offline this sensor: use value '2' to set the sensor offline.")
dcVoltageLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageLowCritical.setDescription("The user specified 'Low Critical' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
dcVoltageLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageLowWarning.setDescription("The user specified 'Low Warning' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
dcVoltageHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageHighWarning.setDescription("The user specified 'High Warning' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
dcVoltageHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageHighCritical.setDescription("The user specified 'High Critical' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
dcVoltageRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageRearm.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageRearm.setDescription('This value tells how many values the sensor has to reach beyond the threshold value, before changing to a new status. Useful to prevent the quick fluctuation of readings.')
dcVoltageDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageDelayError.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Error' status before its status is changed.")
dcVoltageDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageDelayNormal.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Normal' status before its status is changed.")
dcVoltageDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageDelayLowCritical.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Low Critical' status before its status is changed.")
dcVoltageDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageDelayLowWarning.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Low Warning' status before its status is changed.")
dcVoltageDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageDelayHighWarning.setDescription("The time in seconds (continuous time) that the sensor has to be in 'High Warning' status before its status is changed.")
dcVoltageDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageDelayHighCritical.setDescription("The time in seconds (continuous time) that the sensor has to be in 'High Critical' status before its status is changed.")
dcVoltageRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageRaw.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageRaw.setDescription("The sensor's unformatted (raw) value that is being read directly from sensor, before it is converted to the preferred value.")
dcVoltageOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageOffset.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageOffset.setDescription("The offset value for this sensor. It's used to adjust the reading value in case the reading is incorrect.")
dcVoltageJumper = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-600, -400, -300, -200, -100, 100, 200, 300, 400, 600))).clone(namedValues=NamedValues(("jumperAt-60", -600), ("jumperAt-40", -400), ("jumperAt-30", -300), ("jumperAt-20", -200), ("jumperAt-10", -100), ("jumperAt10", 100), ("jumperAt20", 200), ("jumperAt30", 300), ("jumperAt40", 400), ("jumperAt60", 600)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageJumper.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageJumper.setDescription('Selected voltage scale (jumper 0) in DC voltage conversion.')
dcVoltageAmountMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageAmountMaxVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageAmountMaxVoltage.setDescription('The maximum scale of DC voltage conversion.')
dcVoltageAmountBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageAmountBaseVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageAmountBaseVoltage.setDescription('The base scale of DC voltage conversion.')
dcVoltagePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltagePort.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltagePort.setDescription("The device's sensor port number, where this sensor is plugged in to.")
dcVoltageSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSubPort.setDescription("The logical port number of this sensor in the array, or in a set of sensors. For Temperature Sensor, it's for the array of Temperature Sensors and Dual Sensors.  For example x.1, x.2, x.3 ...")
dcVoltageMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageMaxVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageMaxVoltage.setDescription('The maximum voltage range for use in conversion.')
dcVoltageBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageBaseVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageBaseVoltage.setDescription('The base voltage range for use in conversion.')
dcVoltageDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageDisplayStyle.setDescription("The sensor's Display Style for the Web UI, to display the reading as a gauge or bar. 0 = bar style, 1 = gauge style.")
dcVoltageHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageHighCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageHighCriticalDescription.setDescription("The user specified 'High Critical' status description of this sensor. Unless specified, the default value is used.")
dcVoltageLowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageLowCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageLowCriticalDescription.setDescription("The user specified 'Low Critical' status description of this sensor. Unless specified, the default value is used.")
dcVoltageNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageNormalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageNormalDescription.setDescription("The user specified 'Normal' status description of this sensor. Unless specified, the default value is used.")
dcVoltageLowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageLowWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageLowWarningDescription.setDescription("The user specified 'Low Warning' status description of this sensor. Unless specified, the default value is used.")
dcVoltageHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageHighWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageHighWarningDescription.setDescription("The user specified 'High Warning' status description of this sensor. Unless specified, the default value is used.")
dcVoltageSensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorErrorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorErrorDescription.setDescription("The user specified 'Sensor Error' status description of this sensor. Unless specified, the default value is used.")
dcVoltageHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageHighCriticalColor.setDescription("The user specified 'High Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
dcVoltageLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageLowCriticalColor.setDescription("The user specified 'Low Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
dcVoltageNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageNormalColor.setDescription("The user specified 'Normal' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
dcVoltageLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageLowWarningColor.setDescription("The user specified 'Low Warning' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
dcVoltageHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageHighWarningColor.setDescription("The user specified 'High Warning' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
dcVoltageSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageSensorErrorColor.setDescription("The user specified 'Sensor Error' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
dcVoltageAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcVoltageAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageAcknowledge.setDescription('The acknowledge status for the current status of the sensor: 0 = the status has been changed and waiting to be acknowledged, 1 = status is normal or have been already acknowledged, 2 = acknowledge the current status (this status is write-only)')
dcVoltageId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 6, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVoltageId.setStatus('mandatory')
if mibBuilder.loadTexts: dcVoltageId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
airflowTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7), )
if mibBuilder.loadTexts: airflowTable.setStatus('mandatory')
if mibBuilder.loadTexts: airflowTable.setDescription('This table contains the properties for each airflow sensor')
airflowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1), ).setIndexNames((0, "SPAGENT-MIB", "airflowIndex"))
if mibBuilder.loadTexts: airflowEntry.setStatus('mandatory')
airflowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowIndex.setStatus('mandatory')
if mibBuilder.loadTexts: airflowIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
airflowDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowDescription.setStatus('mandatory')
if mibBuilder.loadTexts: airflowDescription.setDescription('The user specified description of this sensor. Unless specified, the default value is used.')
airflowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowValue.setStatus('mandatory')
if mibBuilder.loadTexts: airflowValue.setDescription('The value in numerical reading.')
airflowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: airflowStatus.setDescription('The current status of this sensor.')
airflowGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: airflowGoOffline.setDescription("Command to offline this sensor: use value '2' to set the sensor offline.")
airflowLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: airflowLowCritical.setDescription("The user specified 'Low Critical' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
airflowLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: airflowLowWarning.setDescription("The user specified 'Low Warning' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
airflowHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: airflowHighWarning.setDescription("The user specified 'High Warning' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
airflowHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: airflowHighCritical.setDescription("The user specified 'High Critical' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
airflowRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowRearm.setStatus('mandatory')
if mibBuilder.loadTexts: airflowRearm.setDescription('This value tells how many values the sensor has to reach beyond the threshold value, before changing to a new status. Useful to prevent the quick fluctuation of readings.')
airflowDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: airflowDelayError.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Error' status before its status is changed.")
airflowDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: airflowDelayNormal.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Normal' status before its status is changed.")
airflowDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: airflowDelayLowCritical.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Low Critical' status before its status is changed.")
airflowDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: airflowDelayLowWarning.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Low Warning' status before its status is changed.")
airflowDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: airflowDelayHighWarning.setDescription("The time in seconds (continuous time) that the sensor has to be in 'High Warning' status before its status is changed.")
airflowDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: airflowDelayHighCritical.setDescription("The time in seconds (continuous time) that the sensor has to be in 'High Critical' status before its status is changed.")
airflowRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowRaw.setStatus('mandatory')
if mibBuilder.loadTexts: airflowRaw.setDescription("The sensor's unformatted (raw) value that is being read directly from sensor, before it is converted to the preferred value.")
airflowPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowPort.setStatus('mandatory')
if mibBuilder.loadTexts: airflowPort.setDescription("The device's sensor port number, where this sensor is plugged in to.")
airflowSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSubPort.setDescription('The logical port number of this sensor in the array, or in a set of sensors.')
airflowDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: airflowDisplayStyle.setDescription("The sensor's Display Style for the Web UI, to display the reading as a gauge or bar. 0 = bar style, 1 = gauge style.")
airflowHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowHighCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: airflowHighCriticalDescription.setDescription("The user specified 'High Critical' status description of this sensor. Unless specified, the default value is used.")
airflowLowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowLowCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: airflowLowCriticalDescription.setDescription("The user specified 'Low Critical' status description of this sensor. Unless specified, the default value is used.")
airflowNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowNormalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: airflowNormalDescription.setDescription("The user specified 'Normal' status description of this sensor. Unless specified, the default value is used.")
airflowLowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowLowWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: airflowLowWarningDescription.setDescription("The user specified 'Low Warning' status description of this sensor. Unless specified, the default value is used.")
airflowHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowHighWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: airflowHighWarningDescription.setDescription("The user specified 'High Warning' status description of this sensor. Unless specified, the default value is used.")
airflowSensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorErrorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorErrorDescription.setDescription("The user specified 'Sensor Error' status description of this sensor. Unless specified, the default value is used.")
airflowHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: airflowHighCriticalColor.setDescription("The user specified 'High Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
airflowLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: airflowLowCriticalColor.setDescription("The user specified 'Low Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
airflowNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: airflowNormalColor.setDescription("The user specified 'Normal' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
airflowLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: airflowLowWarningColor.setDescription("The user specified 'Low Warning' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
airflowHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: airflowHighWarningColor.setDescription("The user specified 'High Warning' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
airflowSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: airflowSensorErrorColor.setDescription("The user specified 'Sensor Error' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
airflowAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airflowAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: airflowAcknowledge.setDescription('The acknowledge status for the current status of the sensor: 0 = the status has been changed and waiting to be acknowledged, 1 = status is normal or have been already acknowledged, 2 = acknowledge the current status (this status is write-only)')
airflowId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 7, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowId.setStatus('mandatory')
if mibBuilder.loadTexts: airflowId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
motionTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8), )
if mibBuilder.loadTexts: motionTable.setStatus('mandatory')
if mibBuilder.loadTexts: motionTable.setDescription('This table contains the property and reading value for every sensor.')
motionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1), ).setIndexNames((0, "SPAGENT-MIB", "motionIndex"))
if mibBuilder.loadTexts: motionEntry.setStatus('mandatory')
motionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: motionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: motionIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
motionDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionDescription.setStatus('mandatory')
if mibBuilder.loadTexts: motionDescription.setDescription('A Description of this sensor Switch')
motionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: motionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: motionStatus.setDescription('The current status of this Sensor, only input switches have a status')
motionGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: motionGoOffline.setDescription('To take offline enter a 2')
motionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: motionPort.setStatus('mandatory')
if mibBuilder.loadTexts: motionPort.setDescription('Sensor port')
motionSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: motionSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: motionSubPort.setDescription('Sensor sub port')
motionCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: motionCriticalDescription.setDescription('A Critical Description of this sensor')
motionNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionNormalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: motionNormalDescription.setDescription('A Normal Description of this sensor')
motionCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: motionCriticalColor.setDescription('A Critical Color of this sensor')
motionNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: motionNormalColor.setDescription('A Normal Color of this sensor')
motionAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: motionAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: motionAcknowledge.setDescription('Motion sensor acknowledge')
motionId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 8, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: motionId.setStatus('mandatory')
if mibBuilder.loadTexts: motionId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
waterTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9), )
if mibBuilder.loadTexts: waterTable.setStatus('mandatory')
if mibBuilder.loadTexts: waterTable.setDescription('This table contains the properties for each water sensor')
waterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1), ).setIndexNames((0, "SPAGENT-MIB", "waterIndex"))
if mibBuilder.loadTexts: waterEntry.setStatus('mandatory')
waterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: waterIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
waterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterDescription.setStatus('mandatory')
if mibBuilder.loadTexts: waterDescription.setDescription('The user specified description of this sensor. Unless specified, the default value is used.')
waterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: waterStatus.setDescription('The current status of this sensor.')
waterGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: waterGoOffline.setDescription("Command to offline this sensor: use value '2' to set the sensor offline.")
waterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterPort.setStatus('mandatory')
if mibBuilder.loadTexts: waterPort.setDescription("The device's sensor port number, where this sensor is plugged in to.")
waterSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: waterSubPort.setDescription("The logical port number of this sensor in the array, or in a set of sensors. For Temperature Sensor, it's for the array of Temperature Sensors and Dual Sensors.  For example x.1, x.2, x.3 ...")
waterCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: waterCriticalDescription.setDescription("The user specified 'Critical' status description of this sensor. Unless specified, the default value is used.")
waterNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterNormalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: waterNormalDescription.setDescription("The user specified 'Normal' status description of this sensor. Unless specified, the default value is used.")
waterCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: waterCriticalColor.setDescription("The user specified 'Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
waterNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: waterNormalColor.setDescription("The user specified 'Normal' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
waterAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: waterAcknowledge.setDescription('The acknowledge status for the current status of the sensor: 0 = the status has been changed and waiting to be acknowledged, 1 = status is normal or have been already acknowledged, 2 = acknowledge the current status (this status is write-only)')
waterId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 9, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterId.setStatus('mandatory')
if mibBuilder.loadTexts: waterId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
securityTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10), )
if mibBuilder.loadTexts: securityTable.setStatus('mandatory')
if mibBuilder.loadTexts: securityTable.setDescription('This table contains the properties for each security sensor')
securityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1), ).setIndexNames((0, "SPAGENT-MIB", "securityIndex"))
if mibBuilder.loadTexts: securityEntry.setStatus('mandatory')
securityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: securityIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
securityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityDescription.setStatus('mandatory')
if mibBuilder.loadTexts: securityDescription.setDescription('The user specified description of this sensor. Unless specified, the default value is used.')
securityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: securityStatus.setDescription('The current status of this sensor.')
securityGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: securityGoOffline.setDescription("Command to offline this sensor: use value '2' to set the sensor offline.")
securityPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityPort.setStatus('mandatory')
if mibBuilder.loadTexts: securityPort.setDescription("The device's sensor port number, where this sensor is plugged in to.")
securitySubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securitySubPort.setStatus('mandatory')
if mibBuilder.loadTexts: securitySubPort.setDescription('The logical port number of this sensor in the array, or in a set of sensors.')
securityCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: securityCriticalDescription.setDescription("The user specified 'Critical' status description of this sensor. Unless specified, the default value is used.")
securityNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityNormalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: securityNormalDescription.setDescription("The user specified 'Normal' status description of this sensor. Unless specified, the default value is used.")
securityCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: securityCriticalColor.setDescription("The user specified 'Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
securityNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: securityNormalColor.setDescription("The user specified 'Normal' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
securityAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: securityAcknowledge.setDescription('The acknowledge status for the current status of the sensor: 0 = the status has been changed and waiting to be acknowledged, 1 = status is normal or have been already acknowledged, 2 = acknowledge the current status (this status is write-only)')
securityId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 10, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityId.setStatus('mandatory')
if mibBuilder.loadTexts: securityId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
sirenTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11), )
if mibBuilder.loadTexts: sirenTable.setStatus('mandatory')
if mibBuilder.loadTexts: sirenTable.setDescription('This table contains the property and reading value for siren sensor.')
sirenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1), ).setIndexNames((0, "SPAGENT-MIB", "sirenIndex"))
if mibBuilder.loadTexts: sirenEntry.setStatus('mandatory')
sirenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sirenIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sirenIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
sirenDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sirenDescription.setDescription('The user specified description of this sensor. Unless specified, the default value is used.')
sirenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sirenStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sirenStatus.setDescription('The current status of this sensor.')
sirenGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sirenGoOffline.setDescription("Command to offline this sensor: use value '2' to set the sensor offline.")
sirenControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("sensor-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sirenControlMode.setDescription('The Control Mode for controlling this siren sensor with, it can be one of these: Manual, Notification, Time, Thermostat.')
sirenManualCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenManualCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sirenManualCycleTime.setDescription('The time in seconds that the relay will stay in a state, before changing to the next state in case the cycle action have been used.')
sirenManualAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("turn-On", 0), ("turn-Off", 1), ("cycle-On-Off-On", 2), ("cycle-Off-On-Off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenManualAction.setStatus('mandatory')
if mibBuilder.loadTexts: sirenManualAction.setDescription('The manual control for the relay state: Off, On, Toggle Off-On, Toggle On-Off.')
sirenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sirenPort.setStatus('mandatory')
if mibBuilder.loadTexts: sirenPort.setDescription("The device's sensor port number, where this sensor is plugged in to.")
sirenSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sirenSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sirenSubPort.setDescription('The logical port number of this sensor in the array, or in a set of sensors.')
sirenOnDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenOnDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sirenOnDescription.setDescription("The user specified 'On' status description of this sensor. Unless specified, the default value is used.")
sirenOffDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenOffDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sirenOffDescription.setDescription("The user specified 'Off' status description of this sensor. Unless specified, the default value is used.")
sirenOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenOnColor.setStatus('mandatory')
if mibBuilder.loadTexts: sirenOnColor.setDescription("The user specified 'On' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
sirenOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenOffColor.setStatus('mandatory')
if mibBuilder.loadTexts: sirenOffColor.setDescription("The user specified 'Off' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
sirenAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sirenAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: sirenAcknowledge.setDescription('The acknowledge status for the current status of the sensor: 0 = the status has been changed and waiting to be acknowledged, 1 = status is normal or have been already acknowledged, 2 = acknowledge the current status (this status is write-only)')
sirenId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 11, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sirenId.setStatus('mandatory')
if mibBuilder.loadTexts: sirenId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
relayTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12), )
if mibBuilder.loadTexts: relayTable.setStatus('mandatory')
if mibBuilder.loadTexts: relayTable.setDescription('This table contains the properties for each relay sensor')
relayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1), ).setIndexNames((0, "SPAGENT-MIB", "relayIndex"))
if mibBuilder.loadTexts: relayEntry.setStatus('mandatory')
relayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayIndex.setStatus('mandatory')
if mibBuilder.loadTexts: relayIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
relayDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayDescription.setStatus('mandatory')
if mibBuilder.loadTexts: relayDescription.setDescription('The user specified description of this sensor. Unless specified, the default value is used.')
relayType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(13, 19))).clone(namedValues=NamedValues(("relay", 13), ("xrelay", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayType.setStatus('mandatory')
if mibBuilder.loadTexts: relayType.setDescription("The type of the sensor; it represents the sensor's functionality. For the relay sensor, it has 2 sub-type: normal relay, and xrelay.")
relayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: relayStatus.setDescription('The current status of this sensor.')
relayGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: relayGoOffline.setDescription("Command to offline this sensor: use value '2' to set the sensor offline.")
relayControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("sensor-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: relayControlMode.setDescription('The Control Mode for controlling this relay sensor with, it can be one of these: Manual, Notification, Time, Thermostat.')
relayManualCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayManualCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: relayManualCycleTime.setDescription('The time in seconds that the relay will stay in a state, before changing to the next state in case the cycle action have been used.')
relayManualAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("turn-On", 0), ("turn-Off", 1), ("cycle-On-Off-On", 2), ("cycle-Off-On-Off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayManualAction.setStatus('mandatory')
if mibBuilder.loadTexts: relayManualAction.setDescription('The manual control for the relay state: Off, On, Toggle Off-On, Toggle On-Off.')
relayPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayPort.setStatus('mandatory')
if mibBuilder.loadTexts: relayPort.setDescription("The device's sensor port number, where this sensor is plugged in to.")
relaySubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: relaySubPort.setStatus('mandatory')
if mibBuilder.loadTexts: relaySubPort.setDescription('The logical port number of this sensor on the array of a relay (xelay) sensor. For example x.1, x.2, x.3 ...')
relayOnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayOnDesc.setStatus('mandatory')
if mibBuilder.loadTexts: relayOnDesc.setDescription("The user specified 'On' status description of this sensor. Unless specified, the default value is used.")
relayOffDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayOffDesc.setStatus('mandatory')
if mibBuilder.loadTexts: relayOffDesc.setDescription("The user specified 'Off' Description of this sensor. Unless specified, the default value is used.")
relayOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayOnColor.setStatus('mandatory')
if mibBuilder.loadTexts: relayOnColor.setDescription("The user specified 'On' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
relayOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayOffColor.setStatus('mandatory')
if mibBuilder.loadTexts: relayOffColor.setDescription("The user specified 'Off' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
relayAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: relayAcknowledge.setDescription('The acknowledge status for the current status of the sensor: 0 = the status has been changed and waiting to be acknowledged, 1 = status is normal or have been already acknowledged, 2 = acknowledge the current status (this status is write-only)')
relayId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 12, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayId.setStatus('mandatory')
if mibBuilder.loadTexts: relayId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
acVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13), )
if mibBuilder.loadTexts: acVoltageTable.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageTable.setDescription('This table contains the properties for each AC voltage sensor')
acVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1), ).setIndexNames((0, "SPAGENT-MIB", "acVoltageIndex"))
if mibBuilder.loadTexts: acVoltageEntry.setStatus('mandatory')
acVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltageIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
acVoltageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageDescription.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageDescription.setDescription('The user specified description of this sensor. Unless specified, the default value is used.')
acVoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltageStatus.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageStatus.setDescription('The current status of this sensor.')
acVoltageGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageGoOffline.setDescription("Command to offline this sensor: use value '2' to set the sensor offline.")
acVoltagePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltagePort.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltagePort.setDescription("The device's sensor port number, where this sensor is plugged in to.")
acVoltageSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltageSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageSubPort.setDescription('The logical port number of this sensor on the array of sensors.')
acVoltageCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageCriticalDescription.setDescription("The user specified 'Critical' status description of this sensor. Unless specified, the default value is used.")
acVoltageNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageNormalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageNormalDescription.setDescription("The user specified 'Normal' status description of this sensor. Unless specified, the default value is used.")
acVoltageCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageCriticalColor.setDescription("The user specified 'Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
acVoltageNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageNormalColor.setDescription("The user specified 'Normal' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
acVoltageAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoltageAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageAcknowledge.setDescription('The acknowledge status for the current status of the sensor: 0 = the status has been changed and waiting to be acknowledged, 1 = status is normal or have been already acknowledged, 2 = acknowledge the current status (this status is write-only)')
acVoltageId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 13, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acVoltageId.setStatus('mandatory')
if mibBuilder.loadTexts: acVoltageId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
smokeTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14), )
if mibBuilder.loadTexts: smokeTable.setStatus('mandatory')
if mibBuilder.loadTexts: smokeTable.setDescription('This table contains the properties for each smoke sensor')
smokeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1), ).setIndexNames((0, "SPAGENT-MIB", "smokeIndex"))
if mibBuilder.loadTexts: smokeEntry.setStatus('mandatory')
smokeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: smokeIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
smokeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeDescription.setStatus('mandatory')
if mibBuilder.loadTexts: smokeDescription.setDescription('The user specified description of this sensor. Unless specified, the default value is used.')
smokeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: smokeStatus.setDescription('The current status of this sensor.')
smokeGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: smokeGoOffline.setDescription("Command to offline this sensor: use value '2' to set the sensor offline.")
smokePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokePort.setStatus('mandatory')
if mibBuilder.loadTexts: smokePort.setDescription("The device's sensor port number, where this sensor is plugged in to.")
smokeSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: smokeSubPort.setDescription('The logical port number of this sensor in the array, or in a set of sensors.')
smokeCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: smokeCriticalDescription.setDescription("The user specified 'Critical' status description of this sensor. Unless specified, the default value is used.")
smokeNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeNormalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: smokeNormalDescription.setDescription("The user specified 'Normal' status description of this sensor. Unless specified, the default value is used.")
smokeCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: smokeCriticalColor.setDescription("The user specified 'Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
smokeNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: smokeNormalColor.setDescription("The user specified 'Normal' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
smokeAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smokeAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: smokeAcknowledge.setDescription('The acknowledge status for the current status of the sensor: 0 = the status has been changed and waiting to be acknowledged, 1 = status is normal or have been already acknowledged, 2 = acknowledge the current status (this status is write-only)')
smokeId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 14, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeId.setStatus('mandatory')
if mibBuilder.loadTexts: smokeId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
waterRopeTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21), )
if mibBuilder.loadTexts: waterRopeTable.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeTable.setDescription('This table contains the properties for each water rope sensor')
waterRopeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1), ).setIndexNames((0, "SPAGENT-MIB", "waterRopeIndex"))
if mibBuilder.loadTexts: waterRopeEntry.setStatus('mandatory')
waterRopeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
waterRopeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeDescription.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeDescription.setDescription('The user specified description of this sensor. Unless specified, the default value is used.')
waterRopeLeakLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeLeakLocation.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeLeakLocation.setDescription('Location of leakage from the begining of water rope sensor.')
waterRopeUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeUnit.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeUnit.setDescription("The sensor's value unit string, in what the sensor's value is read in.")
waterRopeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeStatus.setDescription('The current status of this sensor.')
waterRopeGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeGoOffline.setDescription("Command to offline this sensor: use value '2' to set the sensor offline.")
waterRopeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeRaw.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeRaw.setDescription("The sensor's unformatted (raw) value that is being read directly from sensor, before it is converted to the preferred value.")
waterRopeCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeCriticalDescription.setDescription("The user specified 'Critical' status description of this sensor. Unless specified, the default value is used.")
waterRopeNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeNormalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeNormalDescription.setDescription("The user specified 'Normal' status description of this sensor. Unless specified, the default value is used.")
waterRopeSensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorErrorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeSensorErrorDescription.setDescription("The user specified 'Sensor Error' status description of this sensor. Unless specified, the default value is used.")
waterRopeCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeCriticalColor.setDescription("The user specified 'Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
waterRopeNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeNormalColor.setDescription("The user specified 'Normal' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
waterRopeSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeSensorErrorColor.setDescription("The user specified 'Sensor Error' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
waterRopeAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeAcknowledge.setDescription('The acknowledge status for the current status of the sensor: 0 = the status has been changed and waiting to be acknowledged, 1 = status is normal or have been already acknowledged, 2 = acknowledge the current status (this status is write-only)')
waterRopeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeLength.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeLength.setDescription('Length of water rope sensor.')
waterRopeImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 101), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeImpedance.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeImpedance.setDescription('Sensing wire impedance per meter value times 100')
waterRopeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("custom", 0), ("water", 1), ("fuel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterRopeType.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeType.setDescription("The type of the sensor; it represents the sensor's functionality.")
waterRopeId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 21, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterRopeId.setStatus('mandatory')
if mibBuilder.loadTexts: waterRopeId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
powerTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22), )
if mibBuilder.loadTexts: powerTable.setStatus('mandatory')
if mibBuilder.loadTexts: powerTable.setDescription('This table contains the properties for each power sensor')
powerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1), ).setIndexNames((0, "SPAGENT-MIB", "powerIndex"))
if mibBuilder.loadTexts: powerEntry.setStatus('mandatory')
powerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: powerIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
powerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerDescription.setStatus('mandatory')
if mibBuilder.loadTexts: powerDescription.setDescription('The user specified description of this sensor. Unless specified, the default value is used.')
powerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerValue.setStatus('mandatory')
if mibBuilder.loadTexts: powerValue.setDescription('The value in numerical reading.')
powerUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnit.setStatus('mandatory')
if mibBuilder.loadTexts: powerUnit.setDescription("The sensor's value unit string, in what the sensor's value is read in.")
powerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: powerStatus.setDescription('The current status of this sensor.')
powerGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: powerGoOffline.setDescription("Command to offline this sensor: use value '2' to set the sensor offline.")
powerLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: powerLowCritical.setDescription("The user specified 'Low Critical' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
powerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: powerLowWarning.setDescription("The user specified 'Low Warning' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
powerHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: powerHighWarning.setDescription("The user specified 'High Warning' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
powerHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: powerHighCritical.setDescription("The user specified 'High Critical' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
powerRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerRearm.setStatus('mandatory')
if mibBuilder.loadTexts: powerRearm.setDescription('This value tells how many value the sensor has to reach beyond the threshold value, before changing to a new status. Useful to prevent the quick fluctuation of readings.')
powerDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: powerDelayError.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Error' status before its status is changed.")
powerDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: powerDelayNormal.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Normal' status before its status is changed.")
powerDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: powerDelayLowCritical.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Low Critical' status before its status is changed.")
powerDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: powerDelayLowWarning.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Low Warning' status before its status is changed.")
powerDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: powerDelayHighWarning.setDescription("The time in seconds (continuous time) that the sensor has to be in 'High Warning' status before its status is changed.")
powerDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: powerDelayHighCritical.setDescription("The time in seconds (continuous time) that the sensor has to be in 'High Critical' status before its status is changed.")
powerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerPort.setStatus('mandatory')
if mibBuilder.loadTexts: powerPort.setDescription("The device's sensor port number, where this sensor is plugged in to.")
powerSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: powerSubPort.setDescription('The logical port number of this sensor in the array, or in a set of sensors.')
powerDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: powerDisplayStyle.setDescription("The sensor's Display Style for the Web UI, to display the reading as a gauge or bar. 0 = bar style, 1 = gauge style.")
powerHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerHighCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: powerHighCriticalDescription.setDescription("The user specified 'High Critical' status description of this sensor. Unless specified, the default value is used.")
powerLowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerLowCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: powerLowCriticalDescription.setDescription("The user specified 'Low Critical' status description of this sensor. Unless specified, the default value is used.")
powerNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerNormalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: powerNormalDescription.setDescription("The user specified 'Normal' status description of this sensor. Unless specified, the default value is used.")
powerLowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerLowWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: powerLowWarningDescription.setDescription("The user specified 'Low Warning' status description of this sensor. Unless specified, the default value is used.")
powerHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerHighWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: powerHighWarningDescription.setDescription("The user specified 'High Warning' status description of this sensor. Unless specified, the default value is used.")
powerSensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorErrorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorErrorDescription.setDescription("The user specified 'Sensor Error' status description of this sensor. Unless specified, the default value is used.")
powerHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: powerHighCriticalColor.setDescription("The user specified 'High Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
powerLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: powerLowCriticalColor.setDescription("The user specified 'Low Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
powerNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: powerNormalColor.setDescription("The user specified 'Normal' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
powerLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: powerLowWarningColor.setDescription("The user specified 'Low Warning' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
powerHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: powerHighWarningColor.setDescription("The user specified 'High Warning' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
powerSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: powerSensorErrorColor.setDescription("The user specified 'Sensor Error' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
powerValueFormatString = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 66), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerValueFormatString.setStatus('mandatory')
if mibBuilder.loadTexts: powerValueFormatString.setDescription('The string-based reading value in this sensor.')
powerValueFormatFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 67), Opaque().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerValueFormatFloat.setStatus('mandatory')
if mibBuilder.loadTexts: powerValueFormatFloat.setDescription('The floating-point IEEE Standard 754 reading value in this sensor.')
powerAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: powerAcknowledge.setDescription('The acknowledge status for the current status of the sensor: 0 = the status has been changed and waiting to be acknowledged, 1 = status is normal or have been already acknowledged, 2 = acknowledge the current status (this status is write-only)')
powerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 22, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerId.setStatus('mandatory')
if mibBuilder.loadTexts: powerId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
fuelTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24), )
if mibBuilder.loadTexts: fuelTable.setStatus('mandatory')
if mibBuilder.loadTexts: fuelTable.setDescription('This table contains the properties for each fuel sensor')
fuelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1), ).setIndexNames((0, "SPAGENT-MIB", "fuelIndex"))
if mibBuilder.loadTexts: fuelEntry.setStatus('mandatory')
fuelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fuelIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
fuelDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelDescription.setStatus('mandatory')
if mibBuilder.loadTexts: fuelDescription.setDescription('The user specified description of this sensor. Unless specified, the default value is used.')
fuelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelValue.setStatus('mandatory')
if mibBuilder.loadTexts: fuelValue.setDescription('The reading value in this sensor')
fuelUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelUnit.setStatus('mandatory')
if mibBuilder.loadTexts: fuelUnit.setDescription("The sensor's value unit string, in what the sensor's value is read in.")
fuelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fuelStatus.setDescription('The current status of this sensor.')
fuelGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: fuelGoOffline.setDescription("Command to offline this sensor: use value '2' to set the sensor offline.")
fuelLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: fuelLowCritical.setDescription("The user specified 'Low Critical' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
fuelLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: fuelLowWarning.setDescription("The user specified 'Low Warning' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
fuelHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: fuelHighWarning.setDescription("The user specified 'High Warning' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
fuelHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: fuelHighCritical.setDescription("The user specified 'High Critical' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
fuelRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelRearm.setStatus('mandatory')
if mibBuilder.loadTexts: fuelRearm.setDescription('This value tells how many value the sensor has to reach beyond the threshold value, before changing to a new status. Useful to prevent the quick fluctuation of readings.')
fuelDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: fuelDelayError.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Error' status before its status is changed.")
fuelDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: fuelDelayNormal.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Normal' status before its status is changed.")
fuelDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: fuelDelayLowCritical.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Low Critical' status before its status is changed.")
fuelDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: fuelDelayLowWarning.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Low Warning' status before its status is changed.")
fuelDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: fuelDelayHighWarning.setDescription("The time in seconds (continuous time) that the sensor has to be in 'High Warning' status before its status is changed.")
fuelDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: fuelDelayHighCritical.setDescription("The time in seconds (continuous time) that the sensor has to be in 'High Critical' status before its status is changed.")
fuelRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelRaw.setStatus('mandatory')
if mibBuilder.loadTexts: fuelRaw.setDescription("The sensor's unformatted (raw) value that is being read directly from sensor, before it is converted to the preferred value.")
fuelAmountMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelAmountMaxValue.setStatus('mandatory')
if mibBuilder.loadTexts: fuelAmountMaxValue.setDescription('The maximum scale of value conversion.')
fuelAmountBaseValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelAmountBaseValue.setStatus('mandatory')
if mibBuilder.loadTexts: fuelAmountBaseValue.setDescription('The base scale of value conversion.')
fuelDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: fuelDisplayStyle.setDescription("The sensor's Display Style for the Web UI, to display the reading as a gauge or bar. 0 = bar style, 1 = gauge style.")
fuelHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelHighCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: fuelHighCriticalDescription.setDescription("The user specified 'High Critical' status description of this sensor. Unless specified, the default value is used.")
fuelLowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelLowCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: fuelLowCriticalDescription.setDescription("The user specified 'Low Critical' status description of this sensor. Unless specified, the default value is used.")
fuelNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelNormalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: fuelNormalDescription.setDescription("The user specified 'Normal' status description of this sensor. Unless specified, the default value is used.")
fuelLowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelLowWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: fuelLowWarningDescription.setDescription("The user specified 'Low Warning' status description of this sensor. Unless specified, the default value is used.")
fuelHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelHighWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: fuelHighWarningDescription.setDescription("The user specified 'High Warning' status description of this sensor. Unless specified, the default value is used.")
fuelSensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorErrorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorErrorDescription.setDescription("The user specified 'Sensor Error' status description of this sensor. Unless specified, the default value is used.")
fuelHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: fuelHighCriticalColor.setDescription("The user specified 'High Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
fuelLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: fuelLowCriticalColor.setDescription("The user specified 'Low Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
fuelNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: fuelNormalColor.setDescription("The user specified 'Normal' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
fuelLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: fuelLowWarningColor.setDescription("The user specified 'Low Warning' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
fuelHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: fuelHighWarningColor.setDescription("The user specified 'High Warning' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
fuelSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: fuelSensorErrorColor.setDescription("The user specified 'Sensor Error' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
fuelAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: fuelAcknowledge.setDescription('The acknowledge status for the current status of the sensor: 0 = the status has been changed and waiting to be acknowledged, 1 = status is normal or have been already acknowledged, 2 = acknowledge the current status (this status is write-only)')
fuelId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 24, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelId.setStatus('mandatory')
if mibBuilder.loadTexts: fuelId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
tankSenderTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26), )
if mibBuilder.loadTexts: tankSenderTable.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderTable.setDescription('This table contains the property and reading value for every sensor.')
tankSenderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1), ).setIndexNames((0, "SPAGENT-MIB", "tankSenderIndex"))
if mibBuilder.loadTexts: tankSenderEntry.setStatus('mandatory')
tankSenderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tankSenderIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
tankSenderDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderDescription.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderDescription.setDescription('The user specified description of this sensor. Unless specified, the default value is used.')
tankSenderValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tankSenderValue.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderValue.setDescription('The sensor value in numerical reading.')
tankSenderUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderUnit.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderUnit.setDescription("The sensor's value unit string, in what the sensor's value is read in.")
tankSenderStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tankSenderStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderStatus.setDescription('The current status of this sensor.')
tankSenderGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderGoOffline.setDescription("Command to offline this sensor: use value '2' to set the sensor offline.")
tankSenderLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderLowCritical.setDescription("The user specified 'Low Critical' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
tankSenderLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderLowWarning.setDescription("The user specified 'Low Warning' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
tankSenderHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderHighWarning.setDescription("The user specified 'High Warning' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
tankSenderHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderHighCritical.setDescription("The user specified 'High Critical' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
tankSenderRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderRearm.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderRearm.setDescription('This value tells how many value the sensor has to reach beyond the threshold value, before changing to a new status. Useful to prevent the quick fluctuation of readings.')
tankSenderDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderDelayError.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Error' status before its status is changed.")
tankSenderDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderDelayNormal.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Normal' status before its status is changed.")
tankSenderDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderDelayLowCritical.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Low Critical' status before its status is changed.")
tankSenderDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderDelayLowWarning.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Low Warning' status before its status is changed.")
tankSenderDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderDelayHighWarning.setDescription("The time in seconds (continuous time) that the sensor has to be in 'High Warning' status before its status is changed.")
tankSenderDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderDelayHighCritical.setDescription("The time in seconds (continuous time) that the sensor has to be in 'High Critical' status before its status is changed.")
tankSenderRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tankSenderRaw.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderRaw.setDescription("The sensor's unformatted (raw) value that is being read directly from sensor, before it is converted to the preferred value.")
tankSenderDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderDisplayStyle.setDescription("The sensor's Display Style for the Web UI, to display the reading as a gauge or bar. 0 = bar style, 1 = gauge style.")
tankSenderHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderHighCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderHighCriticalDescription.setDescription("The user specified 'High Critical' status description of this sensor. Unless specified, the default value is used.")
tankSenderLowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderLowCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderLowCriticalDescription.setDescription("The user specified 'Low Critical' status description of this sensor. Unless specified, the default value is used.")
tankSenderNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderNormalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderNormalDescription.setDescription("The user specified 'Normal' status description of this sensor. Unless specified, the default value is used.")
tankSenderLowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderLowWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderLowWarningDescription.setDescription("The user specified 'Low Warning' status description of this sensor. Unless specified, the default value is used.")
tankSenderHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderHighWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderHighWarningDescription.setDescription("The user specified 'High Warning' status description of this sensor. Unless specified, the default value is used.")
tankSenderSensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorErrorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorErrorDescription.setDescription("The user specified 'Sensor Error' status description of this sensor. Unless specified, the default value is used.")
tankSenderHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderHighCriticalColor.setDescription("The user specified 'High Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
tankSenderLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderLowCriticalColor.setDescription("The user specified 'Low Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
tankSenderNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderNormalColor.setDescription("The user specified 'Normal' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
tankSenderLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderLowWarningColor.setDescription("The user specified 'Low Warning' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
tankSenderHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderHighWarningColor.setDescription("The user specified 'High Warning' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
tankSenderSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderSensorErrorColor.setDescription("The user specified 'Sensor Error' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
tankSenderAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tankSenderAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderAcknowledge.setDescription('The acknowledge status for the current status of the sensor: 0 = the status has been changed and waiting to be acknowledged, 1 = status is normal or have been already acknowledged, 2 = acknowledge the current status (this status is write-only)')
tankSenderId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 26, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tankSenderId.setStatus('mandatory')
if mibBuilder.loadTexts: tankSenderId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
doorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 27), )
if mibBuilder.loadTexts: doorTable.setStatus('mandatory')
if mibBuilder.loadTexts: doorTable.setDescription('This table contains the properties for each door sensor')
doorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 27, 1), ).setIndexNames((0, "SPAGENT-MIB", "doorIndex"))
if mibBuilder.loadTexts: doorEntry.setStatus('mandatory')
doorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 27, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: doorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: doorIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
doorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 27, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: doorDescription.setDescription('The user specified description of this sensor. Unless specified, the default value is used.')
doorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 27, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: doorValue.setStatus('mandatory')
if mibBuilder.loadTexts: doorValue.setDescription('The reading value for this sensor. It will be used to calculate the sensor status.')
doorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 27, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("closed", 2), ("heldOpen", 3), ("fire", 4), ("opened", 5), ("forceOpened", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: doorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: doorStatus.setDescription('The current status of this sensor.')
doorUnlockPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 27, 1, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doorUnlockPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: doorUnlockPeriod.setDescription('The time in seconds for the door to stay unlocked before it is automatically locked again.')
doorOpenPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 27, 1, 63), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doorOpenPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: doorOpenPeriod.setDescription("The time in seconds for the door to stay in the 'Open' status before it sends the alert 'Door is held open'.")
doorCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 27, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("trig-open", 1), ("trig-close", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: doorCmd.setStatus('mandatory')
if mibBuilder.loadTexts: doorCmd.setDescription("The Door Sensor's command, used to open/close the door.")
doorAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 27, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doorAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: doorAcknowledge.setDescription('The acknowledge status for the current status of the sensor: 0 = the status has been changed and waiting to be acknowledged, 1 = status is normal or have been already acknowledged, 2 = acknowledge the current status (this status is write-only)')
doorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 27, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: doorId.setStatus('mandatory')
if mibBuilder.loadTexts: doorId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
temperatureArrayTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28), )
if mibBuilder.loadTexts: temperatureArrayTable.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayTable.setDescription('This table contains the properties for each temperature array sensor')
temperatureArrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1), ).setIndexNames((0, "SPAGENT-MIB", "temperatureArrayIndex"))
if mibBuilder.loadTexts: temperatureArrayEntry.setStatus('mandatory')
temperatureArrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArrayIndex.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayIndex.setDescription('The Sensor Compound ID of this sensor, used to identify which sensor it is in the system configuration.')
temperatureArrayDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayDescription.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayDescription.setDescription('The user specified description of this sensor. Unless specified, the default value is used.')
temperatureArrayType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 20, 23))).clone(namedValues=NamedValues(("temperature", 1), ("thermocouple", 20), ("arraytemp", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArrayType.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayType.setDescription("The type of the sensor; it represents the sensor's functionality. For the temperature sensor, it has 3 sub-types: Normal temperature sensor, One-wire temperature sensor, and Thermocouple sensor.")
temperatureArrayDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArrayDegree.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayDegree.setDescription('The temperature degree value in numerical reading.')
temperatureArrayUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayUnit.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayUnit.setDescription("The sensor's value unit string, in what the sensor's value is read in. For the temperature sensor it can be Celsius or Fahrenheit.")
temperatureArrayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArrayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayStatus.setDescription('The current status of this sensor.')
temperatureArrayGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayGoOffline.setDescription("Command to offline this sensor: use value '2' to set the sensor offline.")
temperatureArrayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayLowCritical.setDescription("The user specified 'Low Critical' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
temperatureArrayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayLowWarning.setDescription("The user specified 'Low Warning' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
temperatureArrayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayHighWarning.setDescription("The user specified 'High Warning' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
temperatureArrayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayHighCritical.setDescription("The user specified 'High Critical' value of this sensor. The unit will check the current reading against this value, and send an alert if it's configured. Unless specified, the default value is used.")
temperatureArrayRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayRearm.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayRearm.setDescription('This value tells how many degrees the sensor has to reach beyond the threshold value, before changing to a new status. Useful to prevent the quick fluctuation of readings.')
temperatureArrayDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayDelayError.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Error' status before its status is changed.")
temperatureArrayDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayDelayNormal.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Normal' status before its status is changed.")
temperatureArrayDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayDelayLowCritical.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Low Critical' status before its status is changed.")
temperatureArrayDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayDelayLowWarning.setDescription("The time in seconds (continuous time) that the sensor has to be in 'Low Warning' status before its status is changed.")
temperatureArrayDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayDelayHighWarning.setDescription("The time in seconds (continuous time) that the sensor has to be in 'High Warning' status before its status is changed.")
temperatureArrayDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayDelayHighCritical.setDescription("The time in seconds (continuous time) that the sensor has to be in 'High Critical' status before its status is changed.")
temperatureArrayRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArrayRaw.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayRaw.setDescription("The sensor's unformatted (raw) value that is being read directly from sensor, before it is converted to the preferred value.")
temperatureArrayOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayOffset.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayOffset.setDescription("The offset value for this sensor. It's used to adjust the reading value in case the reading is incorrect.")
temperatureArrayPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArrayPort.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayPort.setDescription("The device's sensor port number, where this sensor is plugged in to.")
temperatureArraySubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArraySubPort.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySubPort.setDescription("The logical port number of this sensor in the array, or in a set of sensors. For Temperature Sensor, it's for the array of Temperature Sensors and Dual Sensors.  For example x.1, x.2, x.3 ...")
temperatureArrayDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayDisplayStyle.setDescription("The sensor's Display Style for the Web UI, to display the reading as a gauge or bar. 0 = bar style, 1 = gauge style.")
temperatureArrayHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayHighCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayHighCriticalDescription.setDescription("The user specified 'High Critical' status description of this sensor. Unless specified, the default value is used.")
temperatureArrayLowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayLowCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayLowCriticalDescription.setDescription("The user specified 'Low Critical' status description of this sensor. Unless specified, the default value is used.")
temperatureArraySensorNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorNormalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorNormalDescription.setDescription("The user specified 'Normal' status description of this sensor. Unless specified, the default value is used.")
temperatureArrayLowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayLowWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayLowWarningDescription.setDescription("The user specified 'Low Warning' status description of this sensor. Unless specified, the default value is used.")
temperatureArrayHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayHighWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayHighWarningDescription.setDescription("The user specified 'High Warning' status description of this sensor. Unless specified, the default value is used.")
temperatureArraySensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorErrorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorErrorDescription.setDescription("The user specified 'Sensor Error' status description of this sensor. Unless specified, the default value is used.")
temperatureArrayHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayHighCriticalColor.setDescription("The user specified 'High Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
temperatureArrayLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayLowCriticalColor.setDescription("The user specified 'Low Critical' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
temperatureArraySensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorNormalColor.setDescription("The user specified 'Normal' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
temperatureArrayLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayLowWarningColor.setDescription("The user specified 'Low Warning' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
temperatureArrayHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayHighWarningColor.setDescription("The user specified 'High Warning' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
temperatureArraySensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySensorErrorColor.setDescription("The user specified 'Sensor Error' status field color. The unit will show this color on its web interface and in DCIM. Unless specified, the default value is used.")
temperatureArrayAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-acked", 0), ("acked", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArrayAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayAcknowledge.setDescription('The acknowledge status for the current status of the sensor: 0 = the status has been changed and waiting to be acknowledged, 1 = status is normal or have been already acknowledged, 2 = acknowledge the current status (this status is write-only)')
temperatureArraySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 71), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureArraySerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArraySerialNumber.setDescription('The serial number of temperature sensor, used to indicate which sensor it is in an array. It matches the MAC ID of the sensor for a DCT sensor array.')
temperatureArrayId = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 3, 5, 28, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureArrayId.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureArrayId.setDescription('The Sensor ID of this sensor, used to identify which sensor it is in the system configuration.')
spNormalStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,1))
if mibBuilder.loadTexts: spNormalStatus.setDescription('sensorProbe status is Normal')
spWarningStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,2))
if mibBuilder.loadTexts: spWarningStatus.setDescription('sensorProbe status went to Warning')
spCriticalStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,3))
if mibBuilder.loadTexts: spCriticalStatus.setDescription('sensorProbe status went to Critical')
spDownStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,4))
if mibBuilder.loadTexts: spDownStatus.setDescription('sensorProbe status went to Disabled')
spKeepAliveTrap = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,5))
if mibBuilder.loadTexts: spKeepAliveTrap.setDescription('sensorProbe send keep alive trap.')
spUnknownStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,7))
if mibBuilder.loadTexts: spUnknownStatus.setDescription('sensorProbe status went to Unknown')
spTemperatureStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,10)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureStatus.setDescription('Temperature sensor trap')
spTemperatureArray1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,11)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray1Status.setDescription('Temperature sensor trap')
spTemperatureArray2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,12)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray2Status.setDescription('Temperature sensor trap')
spTemperatureArray3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,13)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray3Status.setDescription('Temperature sensor trap')
spTemperatureArray4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,14)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray4Status.setDescription('Temperature sensor trap')
spTemperatureArray5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,15)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray5Status.setDescription('Temperature sensor trap')
spTemperatureArray6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,16)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray6Status.setDescription('Temperature sensor trap')
spTemperatureArray7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,17)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray7Status.setDescription('Temperature sensor trap')
spTemperatureArray8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,18)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray8Status.setDescription('Temperature sensor trap')
spAnalogueStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,20)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spAnalogueStatus.setDescription('Analogue Sensor Type')
spSwitchStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,30)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitchStatus.setDescription('Switch sensor trap')
spIRMSStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,40)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spIRMSStatus.setDescription('IRMS sensor trap')
spVRMSStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,50)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVRMSStatus.setDescription('VRMS sensor trap')
spWattStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,60)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spWattStatus.setDescription('Energy sensor trap')
spRelayArray1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,71)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray1Status.setDescription('RelayArray1 sensor trap')
spRelayArray2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,72)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray2Status.setDescription('RelayArray2 sensor trap')
spRelayArray3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,73)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray3Status.setDescription('RelayArray3 sensor trap')
spRelayArray4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,74)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray4Status.setDescription('RelayArray4 sensor trap')
spRelayArray5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,75)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray5Status.setDescription('RelayArray5 sensor trap')
spRelayArray6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,77)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray6Status.setDescription('RelayArray6 sensor trap')
spRelayArray8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,78)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray8Status.setDescription('RelayArray8 sensor trap')
spVirtualStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,80)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtualStatus.setDescription('Virtual sensor trap')
spSenUnknownStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,51)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSenUnknownStatus.setDescription('sensorProbe sensor status went to Unknown')
spSenNormalStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,52)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSenNormalStatus.setDescription('sensorProbe sensor status is Normal')
spSenWarningStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,53)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSenWarningStatus.setDescription('sensorProbe sensor status went to Warning')
spSenCriticalStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,54)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSenCriticalStatus.setDescription('sensorProbe sensor status went to Critical')
spSenDownStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,55)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSenDownStatus.setDescription('sensorProbe sensor status went to Disabled')
spTemperature1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,101)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperature1Status.setDescription('Temperature sensor trap')
spTemperature2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,102)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperature2Status.setDescription('Temperature sensor trap')
spTemperature3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,103)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperature3Status.setDescription('Temperature sensor trap')
spTemperature4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,104)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperature4Status.setDescription('Temperature sensor trap')
spTemperature5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,105)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperature5Status.setDescription('Temperature sensor trap')
spTemperature6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,106)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperature6Status.setDescription('Temperature sensor trap')
spTemperature7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,107)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperature7Status.setDescription('Temperature sensor trap')
spTemperature8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,108)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperature8Status.setDescription('Temperature sensor trap')
spTemperatureArray1_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,111)).setLabel("spTemperatureArray1-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray1_1Status.setDescription('Temperature sensor trap')
spTemperatureArray1_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,112)).setLabel("spTemperatureArray1-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray1_2Status.setDescription('Temperature sensor trap')
spTemperatureArray1_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,113)).setLabel("spTemperatureArray1-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray1_3Status.setDescription('Temperature sensor trap')
spTemperatureArray1_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,114)).setLabel("spTemperatureArray1-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray1_4Status.setDescription('Temperature sensor trap')
spTemperatureArray1_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,115)).setLabel("spTemperatureArray1-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray1_5Status.setDescription('Temperature sensor trap')
spTemperatureArray1_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,116)).setLabel("spTemperatureArray1-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray1_6Status.setDescription('Temperature sensor trap')
spTemperatureArray1_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,117)).setLabel("spTemperatureArray1-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray1_7Status.setDescription('Temperature sensor trap')
spTemperatureArray1_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,118)).setLabel("spTemperatureArray1-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray1_8Status.setDescription('Temperature sensor trap')
spTemperatureArray2_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,121)).setLabel("spTemperatureArray2-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray2_1Status.setDescription('Temperature sensor trap')
spTemperatureArray2_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,122)).setLabel("spTemperatureArray2-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray2_2Status.setDescription('Temperature sensor trap')
spTemperatureArray2_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,123)).setLabel("spTemperatureArray2-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray2_3Status.setDescription('Temperature sensor trap')
spTemperatureArray2_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,124)).setLabel("spTemperatureArray2-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray2_4Status.setDescription('Temperature sensor trap')
spTemperatureArray2_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,125)).setLabel("spTemperatureArray2-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray2_5Status.setDescription('Temperature sensor trap')
spTemperatureArray2_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,126)).setLabel("spTemperatureArray2-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray2_6Status.setDescription('Temperature sensor trap')
spTemperatureArray2_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,127)).setLabel("spTemperatureArray2-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray2_7Status.setDescription('Temperature sensor trap')
spTemperatureArray2_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,128)).setLabel("spTemperatureArray2-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray2_8Status.setDescription('Temperature sensor trap')
spTemperatureArray3_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,131)).setLabel("spTemperatureArray3-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray3_1Status.setDescription('Temperature sensor trap')
spTemperatureArray3_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,132)).setLabel("spTemperatureArray3-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray3_2Status.setDescription('Temperature sensor trap')
spTemperatureArray3_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,133)).setLabel("spTemperatureArray3-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray3_3Status.setDescription('Temperature sensor trap')
spTemperatureArray3_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,134)).setLabel("spTemperatureArray3-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray3_4Status.setDescription('Temperature sensor trap')
spTemperatureArray3_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,135)).setLabel("spTemperatureArray3-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray3_5Status.setDescription('Temperature sensor trap')
spTemperatureArray3_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,136)).setLabel("spTemperatureArray3-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray3_6Status.setDescription('Temperature sensor trap')
spTemperatureArray3_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,137)).setLabel("spTemperatureArray3-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray3_7Status.setDescription('Temperature sensor trap')
spTemperatureArray3_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,138)).setLabel("spTemperatureArray3-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray3_8Status.setDescription('Temperature sensor trap')
spTemperatureArray4_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,141)).setLabel("spTemperatureArray4-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray4_1Status.setDescription('Temperature sensor trap')
spTemperatureArray4_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,142)).setLabel("spTemperatureArray4-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray4_2Status.setDescription('Temperature sensor trap')
spTemperatureArray4_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,143)).setLabel("spTemperatureArray4-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray4_3Status.setDescription('Temperature sensor trap')
spTemperatureArray4_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,144)).setLabel("spTemperatureArray4-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray4_4Status.setDescription('Temperature sensor trap')
spTemperatureArray4_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,145)).setLabel("spTemperatureArray4-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray4_5Status.setDescription('Temperature sensor trap')
spTemperatureArray4_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,146)).setLabel("spTemperatureArray4-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray4_6Status.setDescription('Temperature sensor trap')
spTemperatureArray4_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,147)).setLabel("spTemperatureArray4-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray4_7Status.setDescription('Temperature sensor trap')
spTemperatureArray4_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,148)).setLabel("spTemperatureArray4-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray4_8Status.setDescription('Temperature sensor trap')
spTemperatureArray5_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,151)).setLabel("spTemperatureArray5-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray5_1Status.setDescription('Temperature sensor trap')
spTemperatureArray5_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,152)).setLabel("spTemperatureArray5-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray5_2Status.setDescription('Temperature sensor trap')
spTemperatureArray5_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,153)).setLabel("spTemperatureArray5-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray5_3Status.setDescription('Temperature sensor trap')
spTemperatureArray5_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,154)).setLabel("spTemperatureArray5-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray5_4Status.setDescription('Temperature sensor trap')
spTemperatureArray5_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,155)).setLabel("spTemperatureArray5-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray5_5Status.setDescription('Temperature sensor trap')
spTemperatureArray5_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,156)).setLabel("spTemperatureArray5-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray5_6Status.setDescription('Temperature sensor trap')
spTemperatureArray5_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,157)).setLabel("spTemperatureArray5-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray5_7Status.setDescription('Temperature sensor trap')
spTemperatureArray5_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,158)).setLabel("spTemperatureArray5-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray5_8Status.setDescription('Temperature sensor trap')
spTemperatureArray6_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,161)).setLabel("spTemperatureArray6-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray6_1Status.setDescription('Temperature sensor trap')
spTemperatureArray6_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,162)).setLabel("spTemperatureArray6-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray6_2Status.setDescription('Temperature sensor trap')
spTemperatureArray6_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,163)).setLabel("spTemperatureArray6-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray6_3Status.setDescription('Temperature sensor trap')
spTemperatureArray6_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,164)).setLabel("spTemperatureArray6-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray6_4Status.setDescription('Temperature sensor trap')
spTemperatureArray6_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,165)).setLabel("spTemperatureArray6-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray6_5Status.setDescription('Temperature sensor trap')
spTemperatureArray6_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,166)).setLabel("spTemperatureArray6-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray6_6Status.setDescription('Temperature sensor trap')
spTemperatureArray6_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,167)).setLabel("spTemperatureArray6-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray6_7Status.setDescription('Temperature sensor trap')
spTemperatureArray6_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,168)).setLabel("spTemperatureArray6-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray6_8Status.setDescription('Temperature sensor trap')
spTemperatureArray7_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,171)).setLabel("spTemperatureArray7-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray7_1Status.setDescription('Temperature sensor trap')
spTemperatureArray7_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,172)).setLabel("spTemperatureArray7-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray7_2Status.setDescription('Temperature sensor trap')
spTemperatureArray7_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,173)).setLabel("spTemperatureArray7-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray7_3Status.setDescription('Temperature sensor trap')
spTemperatureArray7_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,174)).setLabel("spTemperatureArray7-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray7_4Status.setDescription('Temperature sensor trap')
spTemperatureArray7_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,175)).setLabel("spTemperatureArray7-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray7_5Status.setDescription('Temperature sensor trap')
spTemperatureArray7_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,176)).setLabel("spTemperatureArray7-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray7_6Status.setDescription('Temperature sensor trap')
spTemperatureArray7_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,177)).setLabel("spTemperatureArray7-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray7_7Status.setDescription('Temperature sensor trap')
spTemperatureArray7_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,178)).setLabel("spTemperatureArray7-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray7_8Status.setDescription('Temperature sensor trap')
spTemperatureArray8_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,181)).setLabel("spTemperatureArray8-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray8_1Status.setDescription('Temperature sensor trap')
spTemperatureArray8_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,182)).setLabel("spTemperatureArray8-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray8_2Status.setDescription('Temperature sensor trap')
spTemperatureArray8_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,183)).setLabel("spTemperatureArray8-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray8_3Status.setDescription('Temperature sensor trap')
spTemperatureArray8_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,184)).setLabel("spTemperatureArray8-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray8_4Status.setDescription('Temperature sensor trap')
spTemperatureArray8_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,185)).setLabel("spTemperatureArray8-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray8_5Status.setDescription('Temperature sensor trap')
spTemperatureArray8_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,186)).setLabel("spTemperatureArray8-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray8_6Status.setDescription('Temperature sensor trap')
spTemperatureArray8_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,187)).setLabel("spTemperatureArray8-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray8_7Status.setDescription('Temperature sensor trap')
spTemperatureArray8_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,188)).setLabel("spTemperatureArray8-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray8_8Status.setDescription('Temperature sensor trap')
spAnalogue1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,201)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spAnalogue1Status.setDescription('Analogue Sensor Type')
spAnalogue2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,202)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spAnalogue2Status.setDescription('Analogue Sensor Type')
spAnalogue3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,203)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spAnalogue3Status.setDescription('Analogue Sensor Type')
spAnalogue4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,204)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spAnalogue4Status.setDescription('Analogue Sensor Type')
spAnalogue5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,205)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spAnalogue5Status.setDescription('Analogue Sensor Type')
spAnalogue6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,206)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spAnalogue6Status.setDescription('Analogue Sensor Type')
spAnalogue7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,207)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spAnalogue7Status.setDescription('Analogue Sensor Type')
spAnalogue8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,208)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spAnalogue8Status.setDescription('Analogue Sensor Type')
spSwitch1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,301)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch1Status.setDescription('Switch sensor trap')
spSwitch2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,302)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch2Status.setDescription('Switch sensor trap')
spSwitch3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,303)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch3Status.setDescription('Switch sensor trap')
spSwitch4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,304)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch4Status.setDescription('Switch sensor trap')
spSwitch5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,305)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch5Status.setDescription('Switch sensor trap')
spSwitch6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,306)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch6Status.setDescription('Switch sensor trap')
spSwitch7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,307)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch7Status.setDescription('Switch sensor trap')
spSwitch8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,308)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch8Status.setDescription('Switch sensor trap')
spSwitch9Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,309)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch9Status.setDescription('Switch sensor trap')
spSwitch10Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,310)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch10Status.setDescription('Switch sensor trap')
spSwitch11Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,311)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch11Status.setDescription('Switch sensor trap')
spSwitch12Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,312)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch12Status.setDescription('Switch sensor trap')
spSwitch13Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,313)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch13Status.setDescription('Switch sensor trap')
spSwitch14Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,314)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch14Status.setDescription('Switch sensor trap')
spSwitch15Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,315)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch15Status.setDescription('Switch sensor trap')
spSwitch16Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,316)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch16Status.setDescription('Switch sensor trap')
spSwitch17Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,317)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch17Status.setDescription('Switch sensor trap')
spSwitch18Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,318)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch18Status.setDescription('Switch sensor trap')
spSwitch19Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,319)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch19Status.setDescription('Switch sensor trap')
spSwitch20Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,320)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch20Status.setDescription('Switch sensor trap')
spSwitch21Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,321)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch21Status.setDescription('Switch sensor trap')
spSwitch22Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,322)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch22Status.setDescription('Switch sensor trap')
spSwitch23Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,323)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch23Status.setDescription('Switch sensor trap')
spSwitch24Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,324)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch24Status.setDescription('Switch sensor trap')
spSwitch25Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,325)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch25Status.setDescription('Switch sensor trap')
spSwitch26Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,326)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch26Status.setDescription('Switch sensor trap')
spSwitch27Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,327)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch27Status.setDescription('Switch sensor trap')
spSwitch28Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,328)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch28Status.setDescription('Switch sensor trap')
spSwitch29Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,329)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch29Status.setDescription('Switch sensor trap')
spSwitch30Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,330)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch30Status.setDescription('Switch sensor trap')
spSwitch31Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,331)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch31Status.setDescription('Switch sensor trap')
spSwitch32Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,332)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch32Status.setDescription('Switch sensor trap')
spSwitch33Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,333)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch33Status.setDescription('Switch sensor trap')
spSwitch34Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,334)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch34Status.setDescription('Switch sensor trap')
spSwitch35Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,335)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch35Status.setDescription('Switch sensor trap')
spSwitch36Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,336)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch36Status.setDescription('Switch sensor trap')
spSwitch37Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,337)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch37Status.setDescription('Switch sensor trap')
spSwitch38Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,338)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch38Status.setDescription('Switch sensor trap')
spSwitch39Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,339)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch39Status.setDescription('Switch sensor trap')
spSwitch40Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,340)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch40Status.setDescription('Switch sensor trap')
spSwitch41Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,341)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch41Status.setDescription('Switch sensor trap')
spSwitch42Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,342)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch42Status.setDescription('Switch sensor trap')
spSwitch43Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,343)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch43Status.setDescription('Switch sensor trap')
spSwitch44Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,344)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch44Status.setDescription('Switch sensor trap')
spSwitch45Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,345)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch45Status.setDescription('Switch sensor trap')
spSwitch46Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,346)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch46Status.setDescription('Switch sensor trap')
spSwitch47Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,347)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch47Status.setDescription('Switch sensor trap')
spSwitch48Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,348)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch48Status.setDescription('Switch sensor trap')
spSwitch49Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,349)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch49Status.setDescription('Switch sensor trap')
spSwitch50Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,350)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch50Status.setDescription('Switch sensor trap')
spSwitch51Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,351)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch51Status.setDescription('Switch sensor trap')
spSwitch52Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,352)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch52Status.setDescription('Switch sensor trap')
spSwitch53Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,353)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch53Status.setDescription('Switch sensor trap')
spSwitch54Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,354)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch54Status.setDescription('Switch sensor trap')
spSwitch55Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,355)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch55Status.setDescription('Switch sensor trap')
spSwitch56Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,356)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch56Status.setDescription('Switch sensor trap')
spSwitch57Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,357)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch57Status.setDescription('Switch sensor trap')
spSwitch58Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,358)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch58Status.setDescription('Switch sensor trap')
spSwitch59Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,359)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch59Status.setDescription('Switch sensor trap')
spSwitch60Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,360)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch60Status.setDescription('Switch sensor trap')
spSwitch61Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,361)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch61Status.setDescription('Switch sensor trap')
spSwitch62Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,362)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch62Status.setDescription('Switch sensor trap')
spSwitch63Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,363)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch63Status.setDescription('Switch sensor trap')
spSwitch64Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,364)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch64Status.setDescription('Switch sensor trap')
spSwitch65Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,365)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch65Status.setDescription('Switch sensor trap')
spSwitch66Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,366)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch66Status.setDescription('Switch sensor trap')
spSwitch67Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,367)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch67Status.setDescription('Switch sensor trap')
spSwitch68Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,368)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch68Status.setDescription('Switch sensor trap')
spIRMS1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,401)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spIRMS1Status.setDescription('IRMS sensor trap')
spIRMS2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,402)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spIRMS2Status.setDescription('IRMS sensor trap')
spIRMS3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,403)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spIRMS3Status.setDescription('IRMS sensor trap')
spIRMS4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,404)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spIRMS4Status.setDescription('IRMS sensor trap')
spIRMS5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,405)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spIRMS5Status.setDescription('IRMS sensor trap')
spIRMS6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,406)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spIRMS6Status.setDescription('IRMS sensor trap')
spIRMS7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,407)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spIRMS7Status.setDescription('IRMS sensor trap')
spIRMS8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,408)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spIRMS8Status.setDescription('IRMS sensor trap')
spVRMS1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,501)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVRMS1Status.setDescription('VRMS sensor trap')
spVRMS2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,502)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVRMS2Status.setDescription('VRMS sensor trap')
spVRMS3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,503)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVRMS3Status.setDescription('VRMS sensor trap')
spVRMS4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,504)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVRMS4Status.setDescription('VRMS sensor trap')
spVRMS5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,505)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVRMS5Status.setDescription('VRMS sensor trap')
spVRMS6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,506)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVRMS6Status.setDescription('VRMS sensor trap')
spVRMS7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,507)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVRMS7Status.setDescription('VRMS sensor trap')
spVRMS8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,508)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVRMS8Status.setDescription('VRMS sensor trap')
spEnergy1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,601)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spEnergy1Status.setDescription('Energy sensor trap')
spEnergy2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,602)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spEnergy2Status.setDescription('Energy sensor trap')
spEnergy3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,603)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spEnergy3Status.setDescription('Energy sensor trap')
spEnergy4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,604)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spEnergy4Status.setDescription('Energy sensor trap')
spEnergy5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,605)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spEnergy5Status.setDescription('Energy sensor trap')
spEnergy6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,606)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spEnergy6Status.setDescription('Energy sensor trap')
spEnergy7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,607)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spEnergy7Status.setDescription('Energy sensor trap')
spEnergy8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,608)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spEnergy8Status.setDescription('Energy sensor trap')
spRelayArray1_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,711)).setLabel("spRelayArray1-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray1_1Status.setDescription('RelayArray1.1 sensor trap')
spRelayArray1_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,712)).setLabel("spRelayArray1-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray1_2Status.setDescription('RelayArray1.2 sensor trap')
spRelayArray1_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,713)).setLabel("spRelayArray1-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray1_3Status.setDescription('RelayArray1.3 sensor trap')
spRelayArray1_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,714)).setLabel("spRelayArray1-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray1_4Status.setDescription('RelayArray1.4 sensor trap')
spRelayArray1_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,715)).setLabel("spRelayArray1-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray1_5Status.setDescription('RelayArray1.5 sensor trap')
spRelayArray1_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,716)).setLabel("spRelayArray1-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray1_6Status.setDescription('RelayArray1.6 sensor trap')
spRelayArray1_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,717)).setLabel("spRelayArray1-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray1_7Status.setDescription('RelayArray1.7 sensor trap')
spRelayArray1_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,718)).setLabel("spRelayArray1-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray1_8Status.setDescription('RelayArray1.8 sensor trap')
spRelayArray2_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,721)).setLabel("spRelayArray2-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray2_1Status.setDescription('RelayArray2.1 sensor trap')
spRelayArray2_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,722)).setLabel("spRelayArray2-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray2_2Status.setDescription('RelayArray2.2 sensor trap')
spRelayArray2_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,723)).setLabel("spRelayArray2-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray2_3Status.setDescription('RelayArray2.3 sensor trap')
spRelayArray2_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,724)).setLabel("spRelayArray2-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray2_4Status.setDescription('RelayArray2.4 sensor trap')
spRelayArray2_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,725)).setLabel("spRelayArray2-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray2_5Status.setDescription('RelayArray2.5 sensor trap')
spRelayArray2_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,726)).setLabel("spRelayArray2-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray2_6Status.setDescription('RelayArray2.6 sensor trap')
spRelayArray2_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,727)).setLabel("spRelayArray2-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray2_7Status.setDescription('RelayArray2.7 sensor trap')
spRelayArray2_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,728)).setLabel("spRelayArray2-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray2_8Status.setDescription('RelayArray2.8 sensor trap')
spRelayArray3_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,731)).setLabel("spRelayArray3-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray3_1Status.setDescription('RelayArray3.1 sensor trap')
spRelayArray3_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,732)).setLabel("spRelayArray3-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray3_2Status.setDescription('RelayArray3.2 sensor trap')
spRelayArray3_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,733)).setLabel("spRelayArray3-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray3_3Status.setDescription('RelayArray3.3 sensor trap')
spRelayArray3_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,734)).setLabel("spRelayArray3-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray3_4Status.setDescription('RelayArray3.4 sensor trap')
spRelayArray3_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,735)).setLabel("spRelayArray3-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray3_5Status.setDescription('RelayArray3.5 sensor trap')
spRelayArray3_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,736)).setLabel("spRelayArray3-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray3_6Status.setDescription('RelayArray3.6 sensor trap')
spRelayArray3_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,737)).setLabel("spRelayArray3-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray3_7Status.setDescription('RelayArray3.7 sensor trap')
spRelayArray3_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,738)).setLabel("spRelayArray3-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray3_8Status.setDescription('RelayArray3.8 sensor trap')
spRelayArray4_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,741)).setLabel("spRelayArray4-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray4_1Status.setDescription('RelayArray4.1 sensor trap')
spRelayArray4_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,742)).setLabel("spRelayArray4-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray4_2Status.setDescription('RelayArray4.2 sensor trap')
spRelayArray4_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,743)).setLabel("spRelayArray4-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray4_3Status.setDescription('RelayArray4.3 sensor trap')
spRelayArray4_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,744)).setLabel("spRelayArray4-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray4_4Status.setDescription('RelayArray4.4 sensor trap')
spRelayArray4_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,745)).setLabel("spRelayArray4-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray4_5Status.setDescription('RelayArray4.5 sensor trap')
spRelayArray4_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,746)).setLabel("spRelayArray4-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray4_6Status.setDescription('RelayArray4.6 sensor trap')
spRelayArray4_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,747)).setLabel("spRelayArray4-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray4_7Status.setDescription('RelayArray4.7 sensor trap')
spRelayArray4_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,748)).setLabel("spRelayArray4-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray4_8Status.setDescription('RelayArray4.8 sensor trap')
spRelayArray5_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,751)).setLabel("spRelayArray5-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray5_1Status.setDescription('RelayArray5.1 sensor trap')
spRelayArray5_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,752)).setLabel("spRelayArray5-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray5_2Status.setDescription('RelayArray5.2 sensor trap')
spRelayArray5_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,753)).setLabel("spRelayArray5-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray5_3Status.setDescription('RelayArray5.3 sensor trap')
spRelayArray5_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,754)).setLabel("spRelayArray5-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray5_4Status.setDescription('RelayArray5.4 sensor trap')
spRelayArray5_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,755)).setLabel("spRelayArray5-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray5_5Status.setDescription('RelayArray5.5 sensor trap')
spRelayArray5_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,756)).setLabel("spRelayArray5-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray5_6Status.setDescription('RelayArray5.6 sensor trap')
spRelayArray5_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,757)).setLabel("spRelayArray5-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray5_7Status.setDescription('RelayArray5.7 sensor trap')
spRelayArray5_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,758)).setLabel("spRelayArray5-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray5_8Status.setDescription('RelayArray5.8 sensor trap')
spRelayArray6_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,761)).setLabel("spRelayArray6-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray6_1Status.setDescription('RelayArray6.1 sensor trap')
spRelayArray6_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,762)).setLabel("spRelayArray6-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray6_2Status.setDescription('RelayArray6.2 sensor trap')
spRelayArray6_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,763)).setLabel("spRelayArray6-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray6_3Status.setDescription('RelayArray6.3 sensor trap')
spRelayArray6_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,764)).setLabel("spRelayArray6-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray6_4Status.setDescription('RelayArray6.4 sensor trap')
spRelayArray6_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,765)).setLabel("spRelayArray6-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray6_5Status.setDescription('RelayArray6.5 sensor trap')
spRelayArray6_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,766)).setLabel("spRelayArray6-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray6_6Status.setDescription('RelayArray6.6 sensor trap')
spRelayArray6_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,767)).setLabel("spRelayArray6-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray6_7Status.setDescription('RelayArray6.7 sensor trap')
spRelayArray6_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,768)).setLabel("spRelayArray6-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray6_8Status.setDescription('RelayArray6.8 sensor trap')
spRelayArray7_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,771)).setLabel("spRelayArray7-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray7_1Status.setDescription('RelayArray7.1 sensor trap')
spRelayArray7_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,772)).setLabel("spRelayArray7-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray7_2Status.setDescription('RelayArray7.2 sensor trap')
spRelayArray7_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,773)).setLabel("spRelayArray7-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray7_3Status.setDescription('RelayArray7.3 sensor trap')
spRelayArray7_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,774)).setLabel("spRelayArray7-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray7_4Status.setDescription('RelayArray7.4 sensor trap')
spRelayArray7_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,775)).setLabel("spRelayArray7-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray7_5Status.setDescription('RelayArray7.5 sensor trap')
spRelayArray7_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,776)).setLabel("spRelayArray7-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray7_6Status.setDescription('RelayArray7.6 sensor trap')
spRelayArray7_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,777)).setLabel("spRelayArray7-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray7_7Status.setDescription('RelayArray7.7 sensor trap')
spRelayArray7_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,778)).setLabel("spRelayArray7-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray7_8Status.setDescription('RelayArray7.8 sensor trap')
spRelayArray8_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,781)).setLabel("spRelayArray8-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray8_1Status.setDescription('RelayArray8.1 sensor trap')
spRelayArray8_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,782)).setLabel("spRelayArray8-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray8_2Status.setDescription('RelayArray8.2 sensor trap')
spRelayArray8_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,783)).setLabel("spRelayArray8-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray8_3Status.setDescription('RelayArray8.3 sensor trap')
spRelayArray8_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,784)).setLabel("spRelayArray8-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray8_4Status.setDescription('RelayArray8.4 sensor trap')
spRelayArray8_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,785)).setLabel("spRelayArray8-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray8_5Status.setDescription('RelayArray8.5 sensor trap')
spRelayArray8_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,786)).setLabel("spRelayArray8-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray8_6Status.setDescription('RelayArray8.6 sensor trap')
spRelayArray8_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,787)).setLabel("spRelayArray8-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray8_7Status.setDescription('RelayArray8.7 sensor trap')
spRelayArray8_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,788)).setLabel("spRelayArray8-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray8_8Status.setDescription('RelayArray8.8 sensor trap')
spVirtual1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,801)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual1Status.setDescription('Virtual1 sensor trap')
spVirtual2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,802)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual2Status.setDescription('Virtual2 sensor trap')
spVirtual3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,803)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual3Status.setDescription('Virtual3 sensor trap')
spVirtual4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,804)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual4Status.setDescription('Virtual4 sensor trap')
spVirtual5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,805)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual5Status.setDescription('Virtual5 sensor trap')
spVirtual6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,806)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual6Status.setDescription('Virtual6 sensor trap')
spVirtual7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,807)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual7Status.setDescription('Virtual7 sensor trap')
spVirtual8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,808)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual8Status.setDescription('Virtual8 sensor trap')
spVirtual9Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,809)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual9Status.setDescription('Virtual9 sensor trap')
spVirtual10Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,810)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual10Status.setDescription('Virtual10 sensor trap')
spVirtual11Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,811)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual11Status.setDescription('Virtual11 sensor trap')
spVirtual12Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,812)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual12Status.setDescription('Virtual12 sensor trap')
spVirtual13Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,813)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual13Status.setDescription('Virtual13 sensor trap')
spVirtual14Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,814)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual14Status.setDescription('Virtual14 sensor trap')
spVirtual15Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,815)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual15Status.setDescription('Virtual15 sensor trap')
spVirtual16Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,816)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual16Status.setDescription('Virtual16 sensor trap')
spVirtual17Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,817)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual17Status.setDescription('Virtual17 sensor trap')
spVirtual18Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,818)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual18Status.setDescription('Virtual18 sensor trap')
spVirtual19Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,819)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual19Status.setDescription('Virtual19 sensor trap')
spVirtual20Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,820)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual20Status.setDescription('Virtual20 sensor trap')
spCustomStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,1000)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"), ("SPAGENT-MIB", "spSensorType"), ("SPAGENT-MIB", "spSensorStatusName"), ("SPAGENT-MIB", "spSensorSubIndex"), ("SPAGENT-MIB", "spBoardIndex"), ("SPAGENT-MIB", "spBoardDescription"), ("SPAGENT-MIB", "spEventTimeStamp"), ("SPAGENT-MIB", "spEventClassNumber"), ("SPAGENT-MIB", "spEventClassName"))
if mibBuilder.loadTexts: spCustomStatus.setDescription('Custom sensor trap')
mibBuilder.exportSymbols("SPAGENT-MIB", sensorProbeSwitchManualRelayAction=sensorProbeSwitchManualRelayAction, sensorFuelSensorErrorColor=sensorFuelSensorErrorColor, motionCriticalDescription=motionCriticalDescription, sensorProbeTemperatureArrayPort7Value=sensorProbeTemperatureArrayPort7Value, spRelayArray8_2Status=spRelayArray8_2Status, commonSensorDisplayStyle=commonSensorDisplayStyle, airflowNormalColor=airflowNormalColor, airflowSensorHighWarning=airflowSensorHighWarning, securitySensorNormalDesc=securitySensorNormalDesc, sensorProbeThermostatDescription=sensorProbeThermostatDescription, relaySensorAcknowledge=relaySensorAcknowledge, dcVoltageHighCritical=dcVoltageHighCritical, sensorProbeDrycontactArrayPort8ManualOutputCycleTime=sensorProbeDrycontactArrayPort8ManualOutputCycleTime, sensorProbeHumidityLowWarning=sensorProbeHumidityLowWarning, sensorDryContactOutputManualAction=sensorDryContactOutputManualAction, temperatureArrayLowWarningDescription=temperatureArrayLowWarningDescription, sensorProbeIRMSContTimeLowWarning=sensorProbeIRMSContTimeLowWarning, temperatureSensorDelayNormal=temperatureSensorDelayNormal, sensorDryContactEntry=sensorDryContactEntry, sensorProbeIRMSRelayAction=sensorProbeIRMSRelayAction, humiditySensorDelayNormal=humiditySensorDelayNormal, sensorDCvoltageSubPort=sensorDCvoltageSubPort, sensorProbeTemperatureArrayPort4ContTimeNormal=sensorProbeTemperatureArrayPort4ContTimeNormal, virtualAnalogSensorLowWarning=virtualAnalogSensorLowWarning, airflowAcknowledge=airflowAcknowledge, dcVoltageSensorIndex=dcVoltageSensorIndex, sensorProbeTempSendNormalTrap=sensorProbeTempSendNormalTrap, humiditySensorSubPort=humiditySensorSubPort, sensorTemperatureDisplayStyle=sensorTemperatureDisplayStyle, deviceLicenseStatus=deviceLicenseStatus, sensorProbeTemperatureArrayPort8Online=sensorProbeTemperatureArrayPort8Online, sensorProbeRelayArrayPort4RelayDescOff=sensorProbeRelayArrayPort4RelayDescOff, waterRopeSensorErrorDescription=waterRopeSensorErrorDescription, relayOffColor=relayOffColor, temperatureArraySensorHighWarningDesc=temperatureArraySensorHighWarningDesc, temperatureArrayEntry=temperatureArrayEntry, temperatureSensorErrorDescription=temperatureSensorErrorDescription, spTemperatureArray7_1Status=spTemperatureArray7_1Status, temperatureSensorDelayHighWarning=temperatureSensorDelayHighWarning, sensorLowWarningColor=sensorLowWarningColor, dryContactSensorCriticalColor=dryContactSensorCriticalColor, sensorProbeDrycontactArrayPort6GoOnline=sensorProbeDrycontactArrayPort6GoOnline, sensorProbeTemperatureArrayPort5DatacollectType=sensorProbeTemperatureArrayPort5DatacollectType, sensorProbeDrycontactArrayPort2Entry=sensorProbeDrycontactArrayPort2Entry, sensorProbeSoundDetectorDatacollectType=sensorProbeSoundDetectorDatacollectType, current4to20mASensorDelayNormal=current4to20mASensorDelayNormal, sensorProbeSwitchEmailTrapInterval=sensorProbeSwitchEmailTrapInterval, humidityDisplayStyle=humidityDisplayStyle, powerHighCriticalDescription=powerHighCriticalDescription, sensorProbeRelayArrayPort5NormalState=sensorProbeRelayArrayPort5NormalState, securityCriticalColor=securityCriticalColor, sensorProbeVirtualAnalogAcknowledgement=sensorProbeVirtualAnalogAcknowledgement, spVRMS7Status=spVRMS7Status, sensorProbeTempSirenOnPort=sensorProbeTempSirenOnPort, virtualAnalogSensorGoOnline=virtualAnalogSensorGoOnline, smokeSensorGoOffline=smokeSensorGoOffline, sensorProbeTemperatureArrayPort4Entry=sensorProbeTemperatureArrayPort4Entry, sensorProbeDrycontactArrayPort4Online=sensorProbeDrycontactArrayPort4Online, sensorWaterDescription=sensorWaterDescription, spVirtual5Status=spVirtual5Status, sensorProbeTemperatureArrayPort6Index=sensorProbeTemperatureArrayPort6Index, sensorProbeDrycontactArrayPort5Description=sensorProbeDrycontactArrayPort5Description, sensorProbeTemperatureArrayPort3ContTimeNormal=sensorProbeTemperatureArrayPort3ContTimeNormal, sensorProbeMegaVersion=sensorProbeMegaVersion, spEnergy1Status=spEnergy1Status, sensor4to20mAUnit=sensor4to20mAUnit, spRelayArray8_5Status=spRelayArray8_5Status, sensor4to20mALowCritical=sensor4to20mALowCritical, fuelDelayHighWarning=fuelDelayHighWarning, deviceAccessWorstSensorStatus=deviceAccessWorstSensorStatus, sensorProbeThermostatTemperatureArrayPort5LowLimitAction2=sensorProbeThermostatTemperatureArrayPort5LowLimitAction2, sensorPowerMinValue=sensorPowerMinValue, commonSensorSensorNormalDescription=commonSensorSensorNormalDescription, tankSenderHighCriticalDescription=tankSenderHighCriticalDescription, sensorProbeSwitchEmailInterval=sensorProbeSwitchEmailInterval, sensorRelayOnDesc=sensorRelayOnDesc, spSwitch46Status=spSwitch46Status, dcVoltageSensorBaseVoltage=dcVoltageSensorBaseVoltage, spRelayArray6_8Status=spRelayArray6_8Status, doorSensorId=doorSensorId, sensorProbeRelayArrayPort1NormalState=sensorProbeRelayArrayPort1NormalState, sensorProbeDrycontactArrayPort1Description=sensorProbeDrycontactArrayPort1Description, sensorProbeThermostatTemperatureArrayPort1HighLimit2=sensorProbeThermostatTemperatureArrayPort1HighLimit2, drycontactEntry=drycontactEntry, sensorProbeServerEnable=sensorProbeServerEnable, temperatureArraySensorIndex=temperatureArraySensorIndex, sensorProbeTempGoOnline=sensorProbeTempGoOnline, cfgGraphDataCollectionPeriod=cfgGraphDataCollectionPeriod, sensorSirenId=sensorSirenId, sensorProbeTemperatureArrayPort3HighCritical=sensorProbeTemperatureArrayPort3HighCritical, temperatureArrayDelayHighCritical=temperatureArrayDelayHighCritical, sensorDryContactControlMode=sensorDryContactControlMode, temperatureArraySensorDelayHighWarning=temperatureArraySensorDelayHighWarning, spProductName=spProductName, sensorProbeIRMSRelayOnPort=sensorProbeIRMSRelayOnPort, commonDisplayStyle=commonDisplayStyle, sensorACvoltageCriticalDesc=sensorACvoltageCriticalDesc, cfgSNMPv3AuthProtocol=cfgSNMPv3AuthProtocol, cfgEnableNotiFilteringOnBoot=cfgEnableNotiFilteringOnBoot, airflowIndex=airflowIndex, sensorProbeHumidityHighCritical=sensorProbeHumidityHighCritical, sensorDCvoltageLowCriticalColor=sensorDCvoltageLowCriticalColor, sensorAirflowLowCriticalDesc=sensorAirflowLowCriticalDesc, spSwitch21Status=spSwitch21Status, fuelLowWarningDescription=fuelLowWarningDescription, sensorSmokeId=sensorSmokeId, sensorProbeTemperatureArrayPort2HighWarning=sensorProbeTemperatureArrayPort2HighWarning, sensorProbeNtpMode=sensorProbeNtpMode, sensorProbeSetCommunity=sensorProbeSetCommunity, sensorProbeRelayArrayPort4Number=sensorProbeRelayArrayPort4Number, waterRopeSensorAcknowledge=waterRopeSensorAcknowledge, sensorProbeEnergyContTimeLowWarning=sensorProbeEnergyContTimeLowWarning, sensorPowerSensorErrorDesc=sensorPowerSensorErrorDesc, commonSensorStatus=commonSensorStatus, cfgGSMRetry=cfgGSMRetry, spSwitch15Status=spSwitch15Status, sensorProbeDrycontactArrayPort2ContTimeCritical=sensorProbeDrycontactArrayPort2ContTimeCritical, sensorProbeRelayArrayPort1Table=sensorProbeRelayArrayPort1Table, sensorProbeRelayArrayPort6Number=sensorProbeRelayArrayPort6Number, sensorProbeRelayArrayPort4URL=sensorProbeRelayArrayPort4URL, sensorProbeMailMaxResend=sensorProbeMailMaxResend, sensorDryContactOnDesc=sensorDryContactOnDesc, sensorWaterGoOffline=sensorWaterGoOffline, sensorFuelDisplayStyle=sensorFuelDisplayStyle, sensorProbeDrycontactArrayPort1URL=sensorProbeDrycontactArrayPort1URL, commonLowWarningColor=commonLowWarningColor, sensorUnit=sensorUnit, dcVoltageIndex=dcVoltageIndex, sirenAcknowledge=sirenAcknowledge, sensorTemperatureLowWarningDesc=sensorTemperatureLowWarningDesc, spTemperatureArray2Status=spTemperatureArray2Status, dcVoltageSensorSubPort=dcVoltageSensorSubPort, motionSensorTable=motionSensorTable, smokeSensorPort=smokeSensorPort, dryContactSensorDescription=dryContactSensorDescription, sensorTemperatureDelayNormal=sensorTemperatureDelayNormal, sensorProbeTemperatureArrayPort7Index=sensorProbeTemperatureArrayPort7Index, sensorFuelDelayNormal=sensorFuelDelayNormal, temperatureIndex=temperatureIndex, humidityDelayHighWarning=humidityDelayHighWarning, sensorProbeTempOffset=sensorProbeTempOffset, dcVoltageSensorDelayError=dcVoltageSensorDelayError, sensorProbeNoCameraContTimeNormal=sensorProbeNoCameraContTimeNormal, motionSensorPort=motionSensorPort, powerDescription=powerDescription, sensorProbeTraps=sensorProbeTraps, sensorProbeDrycontactArrayPort7Description=sensorProbeDrycontactArrayPort7Description, sensorDryContactOutputManualCycleTime=sensorDryContactOutputManualCycleTime, temperatureSensorDisplayStyle=temperatureSensorDisplayStyle, virtualAnalogSensorAcknowledgement=virtualAnalogSensorAcknowledgement, commonSensorEntry=commonSensorEntry, airflowSensorErrorColor=airflowSensorErrorColor, sensorDryContactPort9GoOnline=sensorDryContactPort9GoOnline, airflowSensorSensorErrorDesc=airflowSensorSensorErrorDesc, sensorProbeTemperatureArrayPort8Rearm=sensorProbeTemperatureArrayPort8Rearm, tankSenderSensorLowWarningDesc=tankSenderSensorLowWarningDesc, sensorProbeDelayNotifyBoot=sensorProbeDelayNotifyBoot, dcVoltageSensorDelayNormal=dcVoltageSensorDelayNormal, sensorProbeVirtualAnalogGoOnline=sensorProbeVirtualAnalogGoOnline, cfgSystemLocation=cfgSystemLocation, sensorProbeThermostatTemperatureArrayPort2LowLimitAction1=sensorProbeThermostatTemperatureArrayPort2LowLimitAction1, doorOpenPeriod=doorOpenPeriod, powerSensorHighCriticalDesc=powerSensorHighCriticalDesc, virtualSwitchSensorId=virtualSwitchSensorId, actionType=actionType, sensorProbeTemperatureArrayPort2Index=sensorProbeTemperatureArrayPort2Index, temperatureSensorHighCritical=temperatureSensorHighCritical, spRelayArray4Status=spRelayArray4Status, sensorThermostatHighWarningColor=sensorThermostatHighWarningColor, sensorProbeTemperatureArrayPort6Value=sensorProbeTemperatureArrayPort6Value, sensorPowerTimeOut=sensorPowerTimeOut, sensorProbeRelayArrayPort4ManualRelayCycleTime=sensorProbeRelayArrayPort4ManualRelayCycleTime, sensorProbeDrycontactArrayPort3ContTimeCritical=sensorProbeDrycontactArrayPort3ContTimeCritical, current4to20mASensorNormalDesc=current4to20mASensorNormalDesc, sensorWaterRopeEntry=sensorWaterRopeEntry, spWarningStatus=spWarningStatus, spTemperatureArray1_5Status=spTemperatureArray1_5Status, sensorDryContactPort7GoOnline=sensorDryContactPort7GoOnline, sensorProbeThermostatTemperatureArrayPort5NormalAction2=sensorProbeThermostatTemperatureArrayPort5NormalAction2, tankSenderSensorLowCriticalColor=tankSenderSensorLowCriticalColor, sensorProbeRelayArrayPort4ControlMode=sensorProbeRelayArrayPort4ControlMode, devicePowerMeterDescription=devicePowerMeterDescription, airflowSensorLowWarningDesc=airflowSensorLowWarningDesc, sensorProbeAirFlowProtocolType=sensorProbeAirFlowProtocolType, waterSensorEntry=waterSensorEntry, sensorDCvoltageDelayHighWarning=sensorDCvoltageDelayHighWarning, doorSensorIndex=doorSensorIndex, sensorProbeHumidityAtoDAmountMaxVoltage=sensorProbeHumidityAtoDAmountMaxVoltage, sensorProbeDrycontactArrayPort7ManualOutputAction=sensorProbeDrycontactArrayPort7ManualOutputAction, tankSenderSensorErrorColor=tankSenderSensorErrorColor, sensorProbeTimeZone=sensorProbeTimeZone, sensorProbeRelayArrayPort2URL=sensorProbeRelayArrayPort2URL, sensorProbeRelayArrayPort6ManualRelayAction=sensorProbeRelayArrayPort6ManualRelayAction, relaySensorPort=relaySensorPort, dcVoltageSensorHighWarningColor=dcVoltageSensorHighWarningColor, sensorTemperatureArrayDegree=sensorTemperatureArrayDegree, sensorProbeTemperatureArrayPort3OpenURL=sensorProbeTemperatureArrayPort3OpenURL, sensorProbeHumidityEntry=sensorProbeHumidityEntry, sensorProbeDrycontactArrayPort6OpenURL=sensorProbeDrycontactArrayPort6OpenURL, relayIndex=relayIndex, sensorIntelligentPort6GoOnline=sensorIntelligentPort6GoOnline, sensorProbeHumidityDcUnit=sensorProbeHumidityDcUnit, sensorProbeThermostatTemperatureArrayPort2LowLimitAction2=sensorProbeThermostatTemperatureArrayPort2LowLimitAction2, sensorProbeTemperatureArrayPort3ContTimeSensorError=sensorProbeTemperatureArrayPort3ContTimeSensorError, sensorProbeThermostatTemperatureArrayPort3Index=sensorProbeThermostatTemperatureArrayPort3Index, sensorProbeSwitchSirenCycleTime=sensorProbeSwitchSirenCycleTime, deviceLicenseVrtCount=deviceLicenseVrtCount, spSensorAliveHigh=spSensorAliveHigh, sensorProbeRelayArrayPort4NormalState=sensorProbeRelayArrayPort4NormalState, sensorProbeTempIndex=sensorProbeTempIndex, sensorProbeAltWebPort=sensorProbeAltWebPort, sensorHumidityLowWarningDesc=sensorHumidityLowWarningDesc, licenseVPN=licenseVPN, sirenManualAction=sirenManualAction, powerId=powerId, sensorProbeIRMSSirenActiveStatus=sensorProbeIRMSSirenActiveStatus, sensorProbeRelayArrayPort7RelayCycleTime=sensorProbeRelayArrayPort7RelayCycleTime, tankSenderSensorLowCritical=tankSenderSensorLowCritical, sensorProbeTemperatureArrayPort1HighCritical=sensorProbeTemperatureArrayPort1HighCritical, sensorMotionAcknowledge=sensorMotionAcknowledge, sirenSensorId=sirenSensorId, licenseAccessUsers=licenseAccessUsers, sensorProbeDataCollectionPeriod=sensorProbeDataCollectionPeriod, sensorProbeSoftMotionSensorTable=sensorProbeSoftMotionSensorTable, sensorProbeDrycontactArrayPort7Index=sensorProbeDrycontactArrayPort7Index, spVirtual15Status=spVirtual15Status, deviceDryContactInfo=deviceDryContactInfo, spSwitch31Status=spSwitch31Status, sensorProbeDrycontactArrayPort2Description=sensorProbeDrycontactArrayPort2Description, sensorProbeTemperatureArrayPort7ContTimeLowCritical=sensorProbeTemperatureArrayPort7ContTimeLowCritical, sensorProbeDrycontactArrayPort5GoOnline=sensorProbeDrycontactArrayPort5GoOnline, sensorIntelligentPort4GoOnline=sensorIntelligentPort4GoOnline, sensorProbeThermostatTemperatureArrayPort3Mode=sensorProbeThermostatTemperatureArrayPort3Mode, sensorProbeTemperatureArrayPort5Offset=sensorProbeTemperatureArrayPort5Offset, sensorProbeTemperatureArrayPort8DatacollectType=sensorProbeTemperatureArrayPort8DatacollectType, relaySensorOnColor=relaySensorOnColor, spVRMS4Status=spVRMS4Status, spIRMS6Status=spIRMS6Status, sensorFuelDelayHighWarning=sensorFuelDelayHighWarning, fuelSensorDelayError=fuelSensorDelayError, airflowHighWarningColor=airflowHighWarningColor, sensorHumiditySubPort=sensorHumiditySubPort, current4to20mASensorLowCriticalDesc=current4to20mASensorLowCriticalDesc, sensorProbeRelayArrayPort6Index=sensorProbeRelayArrayPort6Index, cfgWEBEnabled=cfgWEBEnabled, sensorProbeHumidityEmailTrapLimit=sensorProbeHumidityEmailTrapLimit, sensorProbeTemperatureArrayPort8Table=sensorProbeTemperatureArrayPort8Table, deviceLicenseVrtTotal=deviceLicenseVrtTotal, sensorProbeDrycontactArrayPort4Index=sensorProbeDrycontactArrayPort4Index, relayPort=relayPort, cfgKeepAliveTime=cfgKeepAliveTime, sensorTankSenderRearm=sensorTankSenderRearm, sensorProbeThermostatTemperatureArrayPort2LowLimit1=sensorProbeThermostatTemperatureArrayPort2LowLimit1, fuelSensorLowCriticalColor=fuelSensorLowCriticalColor)
mibBuilder.exportSymbols("SPAGENT-MIB", virtualAnalogSensorValueFactor=virtualAnalogSensorValueFactor, current4to20mAIndex=current4to20mAIndex, sensorProbeSwitchDescription=sensorProbeSwitchDescription, sensorProbeHumiditySirenCycleTime=sensorProbeHumiditySirenCycleTime, spSenDownStatus=spSenDownStatus, dcVoltageSensorAmountMaxVoltage=dcVoltageSensorAmountMaxVoltage, dcVoltageRaw=dcVoltageRaw, thermostatSensorHighCriticalDesc=thermostatSensorHighCriticalDesc, sensorProbeRelayArrayPort1RelayDescOn=sensorProbeRelayArrayPort1RelayDescOn, current4to20mANormalDescription=current4to20mANormalDescription, sensorProbeSwitchRelayAction=sensorProbeSwitchRelayAction, virtualSwitchSensorStatus=virtualSwitchSensorStatus, securitySensorSubPort=securitySensorSubPort, sensorTemperatureAcknowledge=sensorTemperatureAcknowledge, sensorProbeSoftMotionContTimeNormal=sensorProbeSoftMotionContTimeNormal, sensorRelayManualCycleTime=sensorRelayManualCycleTime, spSwitch60Status=spSwitch60Status, sensorProbeRelayArrayPort1OpenURL=sensorProbeRelayArrayPort1OpenURL, tankSenderSensorHighWarningDesc=tankSenderSensorHighWarningDesc, sensorProbeIRMSContTimeNormal=sensorProbeIRMSContTimeNormal, sensorProbeDrycontactArrayPort8GoOnline=sensorProbeDrycontactArrayPort8GoOnline, sensorProbeTemperatureArrayPort4=sensorProbeTemperatureArrayPort4, current4to20mARearm=current4to20mARearm, sensorProbeThermostatTemperatureArrayPort3GoOnline=sensorProbeThermostatTemperatureArrayPort3GoOnline, devicePowerMeterDelayBetweenCommand=devicePowerMeterDelayBetweenCommand, sensorThermostatDelayHighCritical=sensorThermostatDelayHighCritical, sensorProbeRelayArrayPort2Entry=sensorProbeRelayArrayPort2Entry, sensorProbeRelayArrayPort8ControlMode=sensorProbeRelayArrayPort8ControlMode, sensorProbeVRMSAcknowledgement=sensorProbeVRMSAcknowledgement, sensorProbeEnergyReadingMode=sensorProbeEnergyReadingMode, sensorProbeTemperatureArrayPort1Online=sensorProbeTemperatureArrayPort1Online, thermostatSensorRearm=thermostatSensorRearm, sensorProbeNoCameraDescription=sensorProbeNoCameraDescription, sensorProbeRelayArrayPort2Table=sensorProbeRelayArrayPort2Table, spTemperatureArray8_8Status=spTemperatureArray8_8Status, sensorProbeTemperatureArrayPort7DegreeRaw=sensorProbeTemperatureArrayPort7DegreeRaw, deviceWorstSensotStatus=deviceWorstSensotStatus, sensorProbeTemperatureArrayPort1ContTimeSensorError=sensorProbeTemperatureArrayPort1ContTimeSensorError, powerHighCriticalColor=powerHighCriticalColor, sensorProbeThermostatTemperatureArrayPort7HighLimitAction1=sensorProbeThermostatTemperatureArrayPort7HighLimitAction1, airflowSensorGoOffline=airflowSensorGoOffline, sensorProbeSwitchSirenControlMode=sensorProbeSwitchSirenControlMode, sensorProbeHumidityIndex=sensorProbeHumidityIndex, sensorProbeThermostatTemperatureArrayPort2Value=sensorProbeThermostatTemperatureArrayPort2Value, airflowSensorDelayLowWarning=airflowSensorDelayLowWarning, securityId=securityId, spVirtual4Status=spVirtual4Status, sensorProbeThermostatTemperatureArrayPort8Online=sensorProbeThermostatTemperatureArrayPort8Online, smokeSensorId=smokeSensorId, powerSensorIndex=powerSensorIndex, motionSensorStatus=motionSensorStatus, airflowRearm=airflowRearm, sensorSecurityNormalDesc=sensorSecurityNormalDesc, sensorProbeThermostatTemperatureArrayPort8EnableTime=sensorProbeThermostatTemperatureArrayPort8EnableTime, acVoltageStatus=acVoltageStatus, spSwitch48Status=spSwitch48Status, sensorProbeHumidityRaw=sensorProbeHumidityRaw, sensorProbeEnergyOnline=sensorProbeEnergyOnline, sensorProbeVirtualAnalogContTimeNormal=sensorProbeVirtualAnalogContTimeNormal, sensorProbeWattHoursSensorTable=sensorProbeWattHoursSensorTable, lic5DCTotal=lic5DCTotal, sensorProbeHumiditySendMail=sensorProbeHumiditySendMail, sensorProbeDrycontactArrayPort6Table=sensorProbeDrycontactArrayPort6Table, spIRMS7Status=spIRMS7Status, sensorProbeRelayArrayPort3GoOnline=sensorProbeRelayArrayPort3GoOnline, fuelSensorStatus=fuelSensorStatus, powerSensorLowWarningDesc=powerSensorLowWarningDesc, tankSenderSensorDelayNormal=tankSenderSensorDelayNormal, sensorProbeTempEntry=sensorProbeTempEntry, acVoltageAcknowledge=acVoltageAcknowledge, humiditySubPort=humiditySubPort, sensorProbeThermostatTemperatureArrayPort5Value=sensorProbeThermostatTemperatureArrayPort5Value, sensorProbeRelayArrayPort3ControlMode=sensorProbeRelayArrayPort3ControlMode, sensor4to20mADelayHighCritical=sensor4to20mADelayHighCritical, sensorAirflowPort=sensorAirflowPort, fuelSensorLowWarning=fuelSensorLowWarning, sensorProbeRelayArrayPort7RelayDescOn=sensorProbeRelayArrayPort7RelayDescOn, dryContactSensorOffDesc=dryContactSensorOffDesc, powerSensorEntry=powerSensorEntry, relaySensorOffColor=relaySensorOffColor, sensorTemperatureArrayType=sensorTemperatureArrayType, doorTable=doorTable, fuelAmountBaseValue=fuelAmountBaseValue, sensorProbeSoundDetectorContTimeHighCritical=sensorProbeSoundDetectorContTimeHighCritical, sensorProbeRelayArrayPort7ManualRelayAction=sensorProbeRelayArrayPort7ManualRelayAction, sensorProbeDrycontactArrayPort4=sensorProbeDrycontactArrayPort4, spEventClassNumber=spEventClassNumber, spRelayArray2_4Status=spRelayArray2_4Status, devicePowerMeterCountTimeoutPacket=devicePowerMeterCountTimeoutPacket, humiditySensorUnit=humiditySensorUnit, waterSensorIndex=waterSensorIndex, drycontactPort=drycontactPort, sensorProbeRelayArrayPort8Table=sensorProbeRelayArrayPort8Table, commonHighWarningColor=commonHighWarningColor, sensorProbeRelayArrayPort4RelayAction=sensorProbeRelayArrayPort4RelayAction, sensorProbeTemperatureArrayPort3Index=sensorProbeTemperatureArrayPort3Index, commonUnit=commonUnit, smokeGoOffline=smokeGoOffline, sensorProbeNoCameraSensorIndex=sensorProbeNoCameraSensorIndex, sensorProbePTZEnable=sensorProbePTZEnable, spTemperatureArray2_4Status=spTemperatureArray2_4Status, sensorProbeIRMSLowWarning=sensorProbeIRMSLowWarning, sensorProbeTemperatureArrayPort5HighWarning=sensorProbeTemperatureArrayPort5HighWarning, dcVoltageMaxVoltage=dcVoltageMaxVoltage, lic3rdPartyPMS=lic3rdPartyPMS, sensorTemperatureArrayId=sensorTemperatureArrayId, thermostatSensorPort=thermostatSensorPort, temperatureSensorHighCriticalDesc=temperatureSensorHighCriticalDesc, sensorProbeEnergyRelayOnPort=sensorProbeEnergyRelayOnPort, sensorProbeThermostatTemperatureArrayPort1Description=sensorProbeThermostatTemperatureArrayPort1Description, sensorProbeTemperatureArrayPort4DegreeRaw=sensorProbeTemperatureArrayPort4DegreeRaw, sensorProbeHumidityRelayCycleTime=sensorProbeHumidityRelayCycleTime, sensorProbeDrycontactArrayPort7OutputDescOff=sensorProbeDrycontactArrayPort7OutputDescOff, deviceTable=deviceTable, tankSenderDelayHighCritical=tankSenderDelayHighCritical, sensorACvoltageStatus=sensorACvoltageStatus, sensorProbeNoCameraCalendar=sensorProbeNoCameraCalendar, sensorProbeSwitchSirenOnPort=sensorProbeSwitchSirenOnPort, commonSensorLowWarningColor=commonSensorLowWarningColor, fuelSensorAcknowledge=fuelSensorAcknowledge, sensorRelayIndex=sensorRelayIndex, sensorProbeTemperatureArrayPort7URL=sensorProbeTemperatureArrayPort7URL, virtualSwitchSensorOpenURL=virtualSwitchSensorOpenURL, humidityDescription=humidityDescription, temperatureHighCritical=temperatureHighCritical, spTemperatureStatus=spTemperatureStatus, waterRopeAcknowledge=waterRopeAcknowledge, sensorProbeDrycontactArrayPort5=sensorProbeDrycontactArrayPort5, sensorProbePTZPanTiltUntilEnd=sensorProbePTZPanTiltUntilEnd, sensorTemperatureHighWarningColor=sensorTemperatureHighWarningColor, sensorSmokeEntry=sensorSmokeEntry, powerSensorLowCriticalColor=powerSensorLowCriticalColor, humidityPercent=humidityPercent, waterRopeSensorDescription=waterRopeSensorDescription, temperatureArraySensorLowWarningColor=temperatureArraySensorLowWarningColor, temperatureSensorSubPort=temperatureSensorSubPort, waterRopeEntry=waterRopeEntry, sensorTankSenderDelayHighWarning=sensorTankSenderDelayHighWarning, acVoltageSensorGoOffline=acVoltageSensorGoOffline, sensorProbeVirtualAnalogDelayNormal=sensorProbeVirtualAnalogDelayNormal, sensorProbeRelayArrayPort8Entry=sensorProbeRelayArrayPort8Entry, sensorSmokeSubPort=sensorSmokeSubPort, motionCriticalColor=motionCriticalColor, sensorProbeThermostatTemperatureArrayPort1HighLimit1=sensorProbeThermostatTemperatureArrayPort1HighLimit1, sensorProbeDrycontactArrayPort6ContTimeNormal=sensorProbeDrycontactArrayPort6ContTimeNormal, sensorACvoltageNormalColor=sensorACvoltageNormalColor, temperatureSensorNormalDescription=temperatureSensorNormalDescription, tankSenderValue=tankSenderValue, cfgSNMPv1Disable=cfgSNMPv1Disable, temperatureSensorSensorNormalColor=temperatureSensorSensorNormalColor, sensorProbeDisplayLogo=sensorProbeDisplayLogo, sensorProbeTemperatureArrayPort4HighWarning=sensorProbeTemperatureArrayPort4HighWarning, spSwitch35Status=spSwitch35Status, sensorProbeDrycontactArrayPort8Online=sensorProbeDrycontactArrayPort8Online, sensorProbeThermostatTemperatureArrayPort8LowLimitAction1=sensorProbeThermostatTemperatureArrayPort8LowLimitAction1, sensorProbeSoundDetectorSensorEntry=sensorProbeSoundDetectorSensorEntry, sensorSmokeCriticalColor=sensorSmokeCriticalColor, sirenSensorOffColor=sirenSensorOffColor, sensorProbeTempHighCritical=sensorProbeTempHighCritical, sensorProbeRelayArrayPort3OpenURL=sensorProbeRelayArrayPort3OpenURL, sensorValue=sensorValue, waterRopeSensorSensorErrorDesc=waterRopeSensorSensorErrorDesc, sensorWaterStatus=sensorWaterStatus, sensorProbeHumidityEmailTrapInterval=sensorProbeHumidityEmailTrapInterval, sensorThermostatNormalColor=sensorThermostatNormalColor, spVRMS6Status=spVRMS6Status, cfgEMailMaxResend=cfgEMailMaxResend, temperatureArrayRaw=temperatureArrayRaw, airflowLowCriticalColor=airflowLowCriticalColor, commonId=commonId, sensorProbeTemperatureArrayPort8HighWarning=sensorProbeTemperatureArrayPort8HighWarning, sensorLowCriticalDescription=sensorLowCriticalDescription, spSwitch57Status=spSwitch57Status, sensorProbeSwitchRelayOutputVoltStatus=sensorProbeSwitchRelayOutputVoltStatus, sensorProbeEnergyRelayCycleTime=sensorProbeEnergyRelayCycleTime, temperatureArrayUnit=temperatureArrayUnit, doorSensorUnlockPeriod=doorSensorUnlockPeriod, current4to20mATable=current4to20mATable, sensorProbeTempRelayAction=sensorProbeTempRelayAction, sensorTemperatureDelayHighWarning=sensorTemperatureDelayHighWarning, temperatureArraySensorId=temperatureArraySensorId, sensorProbeRelayArrayPort1RelayDescOff=sensorProbeRelayArrayPort1RelayDescOff, spTemperatureArray3_7Status=spTemperatureArray3_7Status, spSwitch52Status=spSwitch52Status, sensorSubPort=sensorSubPort, fuelSensorHighCriticalDesc=fuelSensorHighCriticalDesc, spEnergy5Status=spEnergy5Status, motionEntry=motionEntry, drycontactCriticalDescription=drycontactCriticalDescription, sensorAirflowDelayHighWarning=sensorAirflowDelayHighWarning, sensorTemperatureLowCriticalColor=sensorTemperatureLowCriticalColor, sensorTemperatureLowCritical=sensorTemperatureLowCritical, sensorPowerLowCriticalColor=sensorPowerLowCriticalColor, sirenSensorManualCycleTime=sirenSensorManualCycleTime, licenseSNMPv3=licenseSNMPv3, cfgSNMPv3PrivPassword=cfgSNMPv3PrivPassword, sensorAirflowDisplayStyle=sensorAirflowDisplayStyle, spRelayArray8_8Status=spRelayArray8_8Status, sensorAirflowDelayError=sensorAirflowDelayError, powerSensorLowCriticalDesc=powerSensorLowCriticalDesc, tankSenderSensorId=tankSenderSensorId, sensorProbeSoftMotionPercentSensitivity=sensorProbeSoftMotionPercentSensitivity, sensorProbeTemperatureArrayPort6ContTimeHighWarning=sensorProbeTemperatureArrayPort6ContTimeHighWarning, sensorSmokeDescription=sensorSmokeDescription, sensorDoorAcknowledge=sensorDoorAcknowledge, airflowSensorDelayNormal=airflowSensorDelayNormal, sensorProbeDrycontactArrayPort2=sensorProbeDrycontactArrayPort2, sensorDCvoltageNormalColor=sensorDCvoltageNormalColor, spRelayArray5_8Status=spRelayArray5_8Status, sensorAirflowLowWarning=sensorAirflowLowWarning, virtualSwitchSensorContTimeNormal=virtualSwitchSensorContTimeNormal, sensorProbeNoCameraSensorEntry=sensorProbeNoCameraSensorEntry, spRelayArray7_4Status=spRelayArray7_4Status, sensorProbeSoundDetectorContTimeLowCritical=sensorProbeSoundDetectorContTimeLowCritical, spRelayArray5_6Status=spRelayArray5_6Status, humidityDelayLowCritical=humidityDelayLowCritical, sensorProbeTrapMailPollInterval=sensorProbeTrapMailPollInterval, sensorTemperatureLowWarningColor=sensorTemperatureLowWarningColor, spSwitch9Status=spSwitch9Status, sensorDCvoltageDelayLowWarning=sensorDCvoltageDelayLowWarning, sensorProbeHumidityAtoDTypeUnit=sensorProbeHumidityAtoDTypeUnit, sensorProbeThermostatTemperatureArrayPort3Value=sensorProbeThermostatTemperatureArrayPort3Value, sensorProbeTemperatureArrayPort1ContTimeHighWarning=sensorProbeTemperatureArrayPort1ContTimeHighWarning, sensorTemperatureDeviceIndex=sensorTemperatureDeviceIndex, sensorProbeTemperatureArrayPort2GoOnline=sensorProbeTemperatureArrayPort2GoOnline, sensorProbeDrycontactArrayPort1Status=sensorProbeDrycontactArrayPort1Status, sensor4to20mAHighCriticalColor=sensor4to20mAHighCriticalColor, thermostatSensorNormalColor=thermostatSensorNormalColor, sensorProbeRelayArrayPort2Number=sensorProbeRelayArrayPort2Number, sensorProbeSoundDetectorMicBoost=sensorProbeSoundDetectorMicBoost, sensorTable=sensorTable, sensorProbeTemperatureArrayPort2Description=sensorProbeTemperatureArrayPort2Description, sensor4to20mANormalColor=sensor4to20mANormalColor, sensorProbeIRMSEmailTrapLimit=sensorProbeIRMSEmailTrapLimit, spSwitch49Status=spSwitch49Status, sensorMotionDescription=sensorMotionDescription, sensorProbeReadSysLog=sensorProbeReadSysLog, temperatureArraySensorSubPort=temperatureArraySensorSubPort, virtualAnalogSensorCalendar=virtualAnalogSensorCalendar, sensorFuelDelayLowWarning=sensorFuelDelayLowWarning, smokeSensorCriticalColor=smokeSensorCriticalColor, temperatureSensorGoOffline=temperatureSensorGoOffline, sensorWaterRopeUnit=sensorWaterRopeUnit, acVoltageCriticalDescription=acVoltageCriticalDescription, fuelHighWarning=fuelHighWarning, sensorTemperatureArraySensorErrorColor=sensorTemperatureArraySensorErrorColor, sensorProbeRelayArrayPort7URL=sensorProbeRelayArrayPort7URL, relayControlMode=relayControlMode, temperatureSensorHighWarningDesc=temperatureSensorHighWarningDesc, dcVoltageSensorTable=dcVoltageSensorTable, sensorTankSenderHighCriticalDesc=sensorTankSenderHighCriticalDesc, sensorProbeTempDatacollectType=sensorProbeTempDatacollectType, waterNormalColor=waterNormalColor, dryContactSensorDeviceIndex=dryContactSensorDeviceIndex)
mibBuilder.exportSymbols("SPAGENT-MIB", powerSensorDelayHighCritical=powerSensorDelayHighCritical, sensorProbeTempContTimeNormal=sensorProbeTempContTimeNormal, tankSenderDescription=tankSenderDescription, powerIndex=powerIndex, sensorSecurityPort=sensorSecurityPort, sensorIntelligentPort1GoOnline=sensorIntelligentPort1GoOnline, relaySensorManualCycleTime=relaySensorManualCycleTime, sensorDoorUnlockPeriod=sensorDoorUnlockPeriod, sensorProbeVRMSHighCritical=sensorProbeVRMSHighCritical, sensorSmokeCriticalDesc=sensorSmokeCriticalDesc, airflowSensorErrorDescription=airflowSensorErrorDescription, sensorTankSenderDelayHighCritical=sensorTankSenderDelayHighCritical, thermostatSensorStatus=thermostatSensorStatus, sensorProbeDrycontactArrayPort7Number=sensorProbeDrycontactArrayPort7Number, spHostName=spHostName, sensorProbeHumidityRelayOnPort=sensorProbeHumidityRelayOnPort, sensorProbeIRMSDescription=sensorProbeIRMSDescription, sensorProbeTemperatureArrayPort5Status=sensorProbeTemperatureArrayPort5Status, sensorProbeDrycontactArrayPort3Online=sensorProbeDrycontactArrayPort3Online, sensorProbeHumidityLowVoltage=sensorProbeHumidityLowVoltage, sensorDoorDescription=sensorDoorDescription, cfgSMTPAuth=cfgSMTPAuth, sensorProbeTempContTimeHighCritical=sensorProbeTempContTimeHighCritical, sensorWaterDeviceIndex=sensorWaterDeviceIndex, spRelayArray2_7Status=spRelayArray2_7Status, sensorProbeRelayArrayPort3Number=sensorProbeRelayArrayPort3Number, current4to20mASensorLowWarningDesc=current4to20mASensorLowWarningDesc, powerDelayError=powerDelayError, sensorProbeDrycontactArrayPort6ContTimeCritical=sensorProbeDrycontactArrayPort6ContTimeCritical, spBoardDescription=spBoardDescription, sensorProbeThermostatTemperatureArrayPort5RelayControlPort=sensorProbeThermostatTemperatureArrayPort5RelayControlPort, sensorTemperatureUnit=sensorTemperatureUnit, tankSenderSensorDeviceIndex=tankSenderSensorDeviceIndex, sensorProbeDrycontactArrayPort7ManualOutputCycleTime=sensorProbeDrycontactArrayPort7ManualOutputCycleTime, virtualSwitchSensorEmailTrapLimit=virtualSwitchSensorEmailTrapLimit, sensorProbeTemperatureArrayPort5Number=sensorProbeTemperatureArrayPort5Number, sensorProbeRelayArrayPort5Index=sensorProbeRelayArrayPort5Index, sensorTemperatureArrayRearm=sensorTemperatureArrayRearm, thermostatSensorId=thermostatSensorId, deviceIntelligentInfo=deviceIntelligentInfo, sensorIntelligentPort2GoOnline=sensorIntelligentPort2GoOnline, sensorACvoltageEntry=sensorACvoltageEntry, waterRopeSensorLength=waterRopeSensorLength, cfgNTPServer1=cfgNTPServer1, sensorProbeThermostatEnableTime=sensorProbeThermostatEnableTime, sensorProbeVRMSRelayAction=sensorProbeVRMSRelayAction, sensorProbeSoundDetectorHighCritical=sensorProbeSoundDetectorHighCritical, sensorProbeMailRecpt=sensorProbeMailRecpt, motionSensorGoOffline=motionSensorGoOffline, plusSeries=plusSeries, action=action, powerValue=powerValue, sensorProbeTypePCF8574XRelayName=sensorProbeTypePCF8574XRelayName, doorCmd=doorCmd, sensorProbeThermostatTemperatureArrayPort4Index=sensorProbeThermostatTemperatureArrayPort4Index, sensorProbeRequestResendTrap=sensorProbeRequestResendTrap, dcVoltageSensorJumper=dcVoltageSensorJumper, waterSensorCriticalColor=waterSensorCriticalColor, powerNormalColor=powerNormalColor, smokeCriticalDescription=smokeCriticalDescription, sensorProbeTypeVirtualName=sensorProbeTypeVirtualName, sensorProbeStatusNumberError=sensorProbeStatusNumberError, sensorProbeSoftMotionCalendar=sensorProbeSoftMotionCalendar, sensorDoorIndex=sensorDoorIndex, sensorTemperatureArrayLowWarningColor=sensorTemperatureArrayLowWarningColor, fuelSensorLowWarningColor=fuelSensorLowWarningColor, waterPort=waterPort, temperatureArrayId=temperatureArrayId, spRelayArray3_5Status=spRelayArray3_5Status, sensorProbeTempLocation=sensorProbeTempLocation, sensorProbeVirtualAnalogLowCritical=sensorProbeVirtualAnalogLowCritical, sensorProbeEnergyContTimeHighCritical=sensorProbeEnergyContTimeHighCritical, spSwitch55Status=spSwitch55Status, temperatureSensorNormalDesc=temperatureSensorNormalDesc, sensorProbeVRMSLowCritical=sensorProbeVRMSLowCritical, sensorACvoltageDeviceIndex=sensorACvoltageDeviceIndex, sensorAirflowEntry=sensorAirflowEntry, spSwitch41Status=spSwitch41Status, spStatusVirtual=spStatusVirtual, motionSensorDescription=motionSensorDescription, spTemperatureArray5_4Status=spTemperatureArray5_4Status, sensorProbeSoundDetectorOnline=sensorProbeSoundDetectorOnline, sensorProbeHumidityHighWarning=sensorProbeHumidityHighWarning, current4to20mASensorDisplayStyle=current4to20mASensorDisplayStyle, sensorPowerHighCritical=sensorPowerHighCritical, sensorHumidityGoOffline=sensorHumidityGoOffline, sensorFuelAmountMaxValue=sensorFuelAmountMaxValue, sensorProbeEnergyCalendar=sensorProbeEnergyCalendar, fuelNormalColor=fuelNormalColor, spTemperature3Status=spTemperature3Status, thermostatSensorDelayLowWarning=thermostatSensorDelayLowWarning, sensorProbeTemperatureArrayPort6DatacollectType=sensorProbeTemperatureArrayPort6DatacollectType, sensorSecurityId=sensorSecurityId, sensorTemperatureId=sensorTemperatureId, spRelayArray8_3Status=spRelayArray8_3Status, sensorProbeRelayArrayPort6Status=sensorProbeRelayArrayPort6Status, sensorTankSenderDescription=sensorTankSenderDescription, fuelLowWarningColor=fuelLowWarningColor, drycontactDirection=drycontactDirection, sensorRelayGoOffline=sensorRelayGoOffline, summary=summary, sensorProbeTypeAirflowName=sensorProbeTypeAirflowName, spSensorType=spSensorType, sensor4to20mALowWarning=sensor4to20mALowWarning, sensorProbeIRMSURL=sensorProbeIRMSURL, doorId=doorId, acVoltageSensorPort=acVoltageSensorPort, virtualAnalogSensorUnit=virtualAnalogSensorUnit, sensorThermostatDelayLowWarning=sensorThermostatDelayLowWarning, sensorProbeSwitchEmailTrapSchedule=sensorProbeSwitchEmailTrapSchedule, dcVoltageHighWarning=dcVoltageHighWarning, deviceAccessDescription=deviceAccessDescription, sensorDryContactId=sensorDryContactId, sensorProbeIRMSSensorNumber=sensorProbeIRMSSensorNumber, sensorProbeHumidityPercent=sensorProbeHumidityPercent, sensorStatus=sensorStatus, sensorProbeVRMSStatus=sensorProbeVRMSStatus, sensorTankSenderIndex=sensorTankSenderIndex, current4to20mASensorNormalColor=current4to20mASensorNormalColor, sirenPort=sirenPort, temperatureArrayLowWarning=temperatureArrayLowWarning, sensorProbeHumidityContTimeLowWarning=sensorProbeHumidityContTimeLowWarning, sensorProbeIRMSCalendar=sensorProbeIRMSCalendar, sensorProbeRelayArrayPort8NormalState=sensorProbeRelayArrayPort8NormalState, sensorProbeEnergyRaw=sensorProbeEnergyRaw, sensorDoorValue=sensorDoorValue, sensorProbeHumidityCalendar=sensorProbeHumidityCalendar, temperatureArraySensorLowWarningDesc=temperatureArraySensorLowWarningDesc, spSwitch32Status=spSwitch32Status, spManufName=spManufName, sensorProbeThermostatTemperatureArrayPort7LowLimit2=sensorProbeThermostatTemperatureArrayPort7LowLimit2, drycontactNormalColor=drycontactNormalColor, sensorSecurityNormalColor=sensorSecurityNormalColor, sensorProbeSwitchRelayControlMode=sensorProbeSwitchRelayControlMode, sensorProbeRelayArrayPort6Table=sensorProbeRelayArrayPort6Table, thermostatSensorLowCriticalColor=thermostatSensorLowCriticalColor, sensorProbeSoftMotionOpenURL=sensorProbeSoftMotionOpenURL, temperatureRaw=temperatureRaw, sensorProbeHumiditySirenActiveStatus=sensorProbeHumiditySirenActiveStatus, sensorProbeTemperatureArrayPort3LowCritical=sensorProbeTemperatureArrayPort3LowCritical, sensorProbeTrapResendInterval=sensorProbeTrapResendInterval, humiditySensorNormalDescription=humiditySensorNormalDescription, sensorProbeThermostatTemperatureArrayPort1Index=sensorProbeThermostatTemperatureArrayPort1Index, sensorAirflowNormalDesc=sensorAirflowNormalDesc, commonSensorOnDescription=commonSensorOnDescription, powerSensorDelayNormal=powerSensorDelayNormal, sensorACvoltagePort=sensorACvoltagePort, licVSensUsed=licVSensUsed, sensorProbeIRMSStatus=sensorProbeIRMSStatus, sensorProbeRelayArrayPort2NormalState=sensorProbeRelayArrayPort2NormalState, sensor4to20mAId=sensor4to20mAId, sensorProbeIRMSPercent=sensorProbeIRMSPercent, spSwitch47Status=spSwitch47Status, sensorProbeTemperatureArrayPort3Rearm=sensorProbeTemperatureArrayPort3Rearm, sensorProbeSoundDetectorURL=sensorProbeSoundDetectorURL, dryContactSensorSubPort=dryContactSensorSubPort, spRelayArray1_7Status=spRelayArray1_7Status, sensorProbeThermostatTemperatureArrayPort4LowLimitAction2=sensorProbeThermostatTemperatureArrayPort4LowLimitAction2, sensorProbeThermostatTemperatureArrayPort7LowLimitAction1=sensorProbeThermostatTemperatureArrayPort7LowLimitAction1, sensorProbeDrycontactArraySensor=sensorProbeDrycontactArraySensor, smokeSubPort=smokeSubPort, spSensorIndex=spSensorIndex, securityNormalDescription=securityNormalDescription, spTemperatureArray6_5Status=spTemperatureArray6_5Status, drycontactOffColor=drycontactOffColor, sensorProbeThermostatTemperatureArrayPort5HighLimit2=sensorProbeThermostatTemperatureArrayPort5HighLimit2, sensorProbeRelayArrayPort6NormalState=sensorProbeRelayArrayPort6NormalState, humidityRearm=humidityRearm, spRelayArray7_2Status=spRelayArray7_2Status, securitySensorTable=securitySensorTable, commonSensorSubPort=commonSensorSubPort, waterRopeSensorStatus=waterRopeSensorStatus, sensorDryContactType=sensorDryContactType, sensorDCvoltageOffset=sensorDCvoltageOffset, smokeTable=smokeTable, thermostatSensorLowWarning=thermostatSensorLowWarning, sensorProbeTypeADE7763Name=sensorProbeTypeADE7763Name, sirenSensorControlMode=sirenSensorControlMode, smokeDescription=smokeDescription, sensorProbeEnergyContTimeLowCritical=sensorProbeEnergyContTimeLowCritical, cfgWEBSecureEnabled=cfgWEBSecureEnabled, sensorFuelIndex=sensorFuelIndex, commonType=commonType, sensorProbeRelayArrayPort5Entry=sensorProbeRelayArrayPort5Entry, sensorProbeVirtualSwitchDescriptionNormal=sensorProbeVirtualSwitchDescriptionNormal, spSwitch3Status=spSwitch3Status, sensorProbeIRMSRelayActiveStatus=sensorProbeIRMSRelayActiveStatus, sensorProbeVirtualSwitchSensorEntry=sensorProbeVirtualSwitchSensorEntry, sensorProbeTemperatureArrayPort5HighCritical=sensorProbeTemperatureArrayPort5HighCritical, sensorProbeTemperatureArrayPort7ContTimeNormal=sensorProbeTemperatureArrayPort7ContTimeNormal, securityNormalColor=securityNormalColor, sensorProbeSoftMotionSensor=sensorProbeSoftMotionSensor, motionSensorNormalColor=motionSensorNormalColor, current4to20mADelayError=current4to20mADelayError, waterSensorId=waterSensorId, temperatureArraySensorDegree=temperatureArraySensorDegree, commonSensorLowCriticalColor=commonSensorLowCriticalColor, thermostatSensorIndex=thermostatSensorIndex, sensorProbeEnergyStatus=sensorProbeEnergyStatus, commonSensorSensorNormalColor=commonSensorSensorNormalColor, waterCriticalDescription=waterCriticalDescription, sensorTemperatureArrayHighCriticalDesc=sensorTemperatureArrayHighCriticalDesc, sensorProbeSnmpIndexingMode=sensorProbeSnmpIndexingMode, cfgWEBSecurePort=cfgWEBSecurePort, spRelayArray8_1Status=spRelayArray8_1Status, sensorProbeTempOnline=sensorProbeTempOnline, sensorProbeTemperatureArrayPort8Index=sensorProbeTemperatureArrayPort8Index, fuelDelayLowCritical=fuelDelayLowCritical, sensorProbeRelayArrayPort7Status=sensorProbeRelayArrayPort7Status, sensorProbeClearSysLog=sensorProbeClearSysLog, spVRMS3Status=spVRMS3Status, sensorThermostatHighWarningDesc=sensorThermostatHighWarningDesc, sensorProbeThermostatTemperatureArrayPort8NormalAction1=sensorProbeThermostatTemperatureArrayPort8NormalAction1, humiditySensorNormalColor=humiditySensorNormalColor, airflowSensorDelayLowCritical=airflowSensorDelayLowCritical, sensorTemperatureArrayRaw=sensorTemperatureArrayRaw, spSwitch50Status=spSwitch50Status, sensorPowerDelayError=sensorPowerDelayError, temperatureLowWarningColor=temperatureLowWarningColor, temperatureDelayHighCritical=temperatureDelayHighCritical, humiditySensorId=humiditySensorId, spSwitch40Status=spSwitch40Status, spRelayArray4_4Status=spRelayArray4_4Status, sensorProbeVRMSSensorIndex=sensorProbeVRMSSensorIndex, sensorProbeThermostatTemperatureArrayPort2HighLimitAction1=sensorProbeThermostatTemperatureArrayPort2HighLimitAction1, sensorTemperatureRaw=sensorTemperatureRaw, sensorFuelId=sensorFuelId, tankSenderSensorTable=tankSenderSensorTable, temperatureArraySensorNormalColor=temperatureArraySensorNormalColor, sensorProbeTypeSecurityName=sensorProbeTypeSecurityName, airflowSensorDisplayStyle=airflowSensorDisplayStyle, temperatureArraySensorSensorNormalColor=temperatureArraySensorSensorNormalColor, sensorFuelLowWarningDesc=sensorFuelLowWarningDesc, drycontactType=drycontactType, sensorDCvoltageMaxVoltage=sensorDCvoltageMaxVoltage, cfgWEBPasswordEnable=cfgWEBPasswordEnable, temperatureArraySensorHighCritical=temperatureArraySensorHighCritical, sensorProbeVirtualSwitchSensor=sensorProbeVirtualSwitchSensor, cfgSNMPv3AccessPrivelege=cfgSNMPv3AccessPrivelege, powerSensorLowWarningColor=powerSensorLowWarningColor, humidityOffset=humidityOffset, sensorProbeRelayArrayPort6RelayDescOn=sensorProbeRelayArrayPort6RelayDescOn, temperatureSensorLowCriticalColor=temperatureSensorLowCriticalColor, spSwitch12Status=spSwitch12Status, acVoltageSensorNormalDesc=acVoltageSensorNormalDesc, acVoltageSubPort=acVoltageSubPort, sensorProbeTemperatureArrayPort5Description=sensorProbeTemperatureArrayPort5Description, powerDelayNormal=powerDelayNormal, drycontactOnColor=drycontactOnColor, sensorProbeSwitchRelayDescOn=sensorProbeSwitchRelayDescOn, sensorProbeSwitchDirection=sensorProbeSwitchDirection, sensorTankSenderLowWarningDesc=sensorTankSenderLowWarningDesc, fuelSensorHighWarningColor=fuelSensorHighWarningColor, securitySensorStatus=securitySensorStatus)
mibBuilder.exportSymbols("SPAGENT-MIB", temperatureArraySensorHighWarning=temperatureArraySensorHighWarning, sensorProbeSMTPAuth=sensorProbeSMTPAuth, spRelayArray2_1Status=spRelayArray2_1Status, sensorProbeTypeADE7763VRMSName=sensorProbeTypeADE7763VRMSName, temperatureSensorSensorErrorColor=temperatureSensorSensorErrorColor, sensorTankSenderHighCritical=sensorTankSenderHighCritical, spVirtual10Status=spVirtual10Status, sensorProbeThermostatTemperatureArrayPort5LowLimit1=sensorProbeThermostatTemperatureArrayPort5LowLimit1, sensorProbeVRMSContTimeSensorError=sensorProbeVRMSContTimeSensorError, sensorProbeDrycontactArrayPort2Status=sensorProbeDrycontactArrayPort2Status, current4to20mAPort=current4to20mAPort, cfgSupportEMail=cfgSupportEMail, sensorProbeSwitchRelayCycleTime=sensorProbeSwitchRelayCycleTime, sensorTemperatureHighWarning=sensorTemperatureHighWarning, sensorProbeDrycontactArrayPort7NormalState=sensorProbeDrycontactArrayPort7NormalState, temperatureArraySubPort=temperatureArraySubPort, sensorDryContactSubPort=sensorDryContactSubPort, sensorProbeSwitchRelayOnPort=sensorProbeSwitchRelayOnPort, sensorProbeRelayArrayPort5ManualRelayCycleTime=sensorProbeRelayArrayPort5ManualRelayCycleTime, powerSensorValueFormatFloat=powerSensorValueFormatFloat, sensorProbeDrycontactArrayPort4ContTimeCritical=sensorProbeDrycontactArrayPort4ContTimeCritical, commonDescription=commonDescription, sensorProbeTemperatureArrayPort3GoOnline=sensorProbeTemperatureArrayPort3GoOnline, dryContactSensorOutputManualCycleTime=dryContactSensorOutputManualCycleTime, sensorThermostatDeviceIndex=sensorThermostatDeviceIndex, sensorProbeRouteAdd=sensorProbeRouteAdd, tankSenderSensorGoOffline=tankSenderSensorGoOffline, current4to20mAGoOffline=current4to20mAGoOffline, sensorProbeIRMSAcknowledgement=sensorProbeIRMSAcknowledgement, spTemperatureArray1_7Status=spTemperatureArray1_7Status, sensorWaterNormalDesc=sensorWaterNormalDesc, sensorPowerDelayLowCritical=sensorPowerDelayLowCritical, current4to20mAMaxVoltage=current4to20mAMaxVoltage, spTemperatureArray4_2Status=spTemperatureArray4_2Status, sirenIndex=sirenIndex, spRelayArray5_1Status=spRelayArray5_1Status, temperatureSensorDescription=temperatureSensorDescription, waterRopeSensorErrorColor=waterRopeSensorErrorColor, virtualAnalogSensorId=virtualAnalogSensorId, relayManualCycleTime=relayManualCycleTime, thermostatSensorDelayNormal=thermostatSensorDelayNormal, sensorProbeDrycontactArrayPort2Direction=sensorProbeDrycontactArrayPort2Direction, motionTable=motionTable, sensorTemperatureIndex=sensorTemperatureIndex, sensorProbeVRMSRelayActiveStatus=sensorProbeVRMSRelayActiveStatus, sensorProbeDrycontactArrayPort5NormalState=sensorProbeDrycontactArrayPort5NormalState, deviceType=deviceType, sensorProbeTypeTemperatureName=sensorProbeTypeTemperatureName, spEventTimeStamp=spEventTimeStamp, spTemperatureArray1_3Status=spTemperatureArray1_3Status, sensorProbeEnergyDatacollectType=sensorProbeEnergyDatacollectType, sensorDCvoltageRearm=sensorDCvoltageRearm, cfgSystemName=cfgSystemName, tankSenderHighWarningColor=tankSenderHighWarningColor, sensorTemperatureArraySerialNumber=sensorTemperatureArraySerialNumber, tankSenderSensorValue=tankSenderSensorValue, humiditySensorOffset=humiditySensorOffset, temperatureArrayDegree=temperatureArrayDegree, dryContactSensorOnDesc=dryContactSensorOnDesc, sensorProbeTempRearm=sensorProbeTempRearm, virtualAnalogSensorOpenURL=virtualAnalogSensorOpenURL, cfgVPNServerPort=cfgVPNServerPort, spTemperatureArray7_4Status=spTemperatureArray7_4Status, sensorTemperatureLowCriticalDesc=sensorTemperatureLowCriticalDesc, dcVoltageSensorHighCritical=dcVoltageSensorHighCritical, sensorProbeTemperatureArrayPort4Value=sensorProbeTemperatureArrayPort4Value, smokeEntry=smokeEntry, sensorDCvoltageTable=sensorDCvoltageTable, dcVoltageSensorSensorErrorDesc=dcVoltageSensorSensorErrorDesc, spRelayArray4_3Status=spRelayArray4_3Status, sensorIndex=sensorIndex, sensorProbeDrycontactArrayPort7Status=sensorProbeDrycontactArrayPort7Status, sensorTemperaturePort=sensorTemperaturePort, spRelayArray1_8Status=spRelayArray1_8Status, spTemperatureArray5_2Status=spTemperatureArray5_2Status, spSwitch63Status=spSwitch63Status, sensorPowerEntry=sensorPowerEntry, cfgHostSensorUID=cfgHostSensorUID, sensorProbeTemperatureArrayPort1Value=sensorProbeTemperatureArrayPort1Value, sensorProbePowerMeter=sensorProbePowerMeter, sensorAirflowHighWarningDesc=sensorAirflowHighWarningDesc, thermostatSensorDescription=thermostatSensorDescription, temperatureDisplayStyle=temperatureDisplayStyle, spRelayArray3_4Status=spRelayArray3_4Status, sensorProbeSoftMotionOnline=sensorProbeSoftMotionOnline, fuelSensorAmountMaxValue=fuelSensorAmountMaxValue, sensorProbeThermostatTemperatureArrayPort3NormalAction2=sensorProbeThermostatTemperatureArrayPort3NormalAction2, sensorProbeTemperatureArrayPort5OpenURL=sensorProbeTemperatureArrayPort5OpenURL, sensorProbeThermostatTemperatureArrayPort7Online=sensorProbeThermostatTemperatureArrayPort7Online, sensorProbeTemperatureArrayPort8LowWarning=sensorProbeTemperatureArrayPort8LowWarning, sensorProbeTemperatureArrayPort8=sensorProbeTemperatureArrayPort8, sensorProbeTemperatureArrayPort1ContTimeHighCritical=sensorProbeTemperatureArrayPort1ContTimeHighCritical, acVoltageSensorTable=acVoltageSensorTable, smokeId=smokeId, deviceDryContactTable=deviceDryContactTable, sensorPowerValueFormatString=sensorPowerValueFormatString, sensorProbeNoCameraContTimeHighCritical=sensorProbeNoCameraContTimeHighCritical, fuelSensorRaw=fuelSensorRaw, temperatureArraySensorDisplayStyle=temperatureArraySensorDisplayStyle, sensorProbeVirtualSwitchSensorIndex=sensorProbeVirtualSwitchSensorIndex, sensorProbeSwitchOnline=sensorProbeSwitchOnline, sensorProbeDrycontactArrayPort4Status=sensorProbeDrycontactArrayPort4Status, sensorProbeEnergyOpenURL=sensorProbeEnergyOpenURL, current4to20mADescription=current4to20mADescription, sensorProbeThermostatNormalAction2=sensorProbeThermostatNormalAction2, sensorProbeDrycontactArrayPort4NormalState=sensorProbeDrycontactArrayPort4NormalState, spSwitch45Status=spSwitch45Status, spSensor=spSensor, sensorProbeRelayArrayPort2RelayCycleTime=sensorProbeRelayArrayPort2RelayCycleTime, sensorProbeVirtualAnalogSensorEntry=sensorProbeVirtualAnalogSensorEntry, smokeSensorNormalColor=smokeSensorNormalColor, spSwitch62Status=spSwitch62Status, sensorProbeSoftMotionMask=sensorProbeSoftMotionMask, virtualAnalogSensorRaw=virtualAnalogSensorRaw, sensorProbeTypeSHT11Name=sensorProbeTypeSHT11Name, sensorProbeTemperatureArrayPort7DatacollectType=sensorProbeTemperatureArrayPort7DatacollectType, deviceLicensePmsTotal=deviceLicensePmsTotal, humiditySensorRaw=humiditySensorRaw, powerSensorId=powerSensorId, sensorProbeTemperatureArrayPort3ContTimeHighCritical=sensorProbeTemperatureArrayPort3ContTimeHighCritical, sensorProbeDrycontactArrayPort3OutputDescOn=sensorProbeDrycontactArrayPort3OutputDescOn, dcVoltageSensorHighCriticalDesc=dcVoltageSensorHighCriticalDesc, powerSensorDelayLowCritical=powerSensorDelayLowCritical, deviceLicenseIPv6Enable=deviceLicenseIPv6Enable, sensorSecurityTable=sensorSecurityTable, sensorThermostatTable=sensorThermostatTable, sirenSensorOnColor=sirenSensorOnColor, smokeSensorTable=smokeSensorTable, commonOffColor=commonOffColor, temperaturePort=temperaturePort, current4to20mASensorErrorColor=current4to20mASensorErrorColor, sensorProbeRelayArrayPort5GoOnline=sensorProbeRelayArrayPort5GoOnline, waterRopeNormalColor=waterRopeNormalColor, sensorProbeSensorType=sensorProbeSensorType, spRelayArray6_5Status=spRelayArray6_5Status, dcVoltageLowCriticalColor=dcVoltageLowCriticalColor, sensorRelayId=sensorRelayId, airflowLowCritical=airflowLowCritical, devicePowerMeterCountCRCerrorPacket=devicePowerMeterCountCRCerrorPacket, sensorProbeRelayArrayPort3NormalState=sensorProbeRelayArrayPort3NormalState, sensorProbePTZRotateRelative=sensorProbePTZRotateRelative, sensorProbeRelayArrayPort1Online=sensorProbeRelayArrayPort1Online, sensorProbeTemperatureArrayPort6DegreeType=sensorProbeTemperatureArrayPort6DegreeType, temperatureDelayNormal=temperatureDelayNormal, dryContactSensorStatus=dryContactSensorStatus, sensorWaterRopeNormalColor=sensorWaterRopeNormalColor, dcVoltageSensorGoOffline=dcVoltageSensorGoOffline, powerSensorStatus=powerSensorStatus, sensorProbeVRMSEmailTrapLimit=sensorProbeVRMSEmailTrapLimit, virtualAnalogSensorTable=virtualAnalogSensorTable, dcVoltageDelayError=dcVoltageDelayError, sensorNormalDescription=sensorNormalDescription, sensorProbeDrycontactArrayPort1Online=sensorProbeDrycontactArrayPort1Online, temperatureLowCriticalColor=temperatureLowCriticalColor, sensorProbeRelayArrayPort3Online=sensorProbeRelayArrayPort3Online, sensorProbeSwitchEmailTrapLimit=sensorProbeSwitchEmailTrapLimit, sensorProbeThermostatTemperatureArrayPort3HighLimitAction1=sensorProbeThermostatTemperatureArrayPort3HighLimitAction1, airflowDelayNormal=airflowDelayNormal, sensorProbeTemperatureArrayPort6GoOnline=sensorProbeTemperatureArrayPort6GoOnline, relayAcknowledge=relayAcknowledge, spSwitch25Status=spSwitch25Status, sensorProbeTempDelayError=sensorProbeTempDelayError, sensorHumidityLowWarning=sensorHumidityLowWarning, sensorHumidityTable=sensorHumidityTable, powerPort=powerPort, spTemperatureArray4_5Status=spTemperatureArray4_5Status, sensorSecurityDescription=sensorSecurityDescription, sensorProbeDrycontactArrayPort5ControlMode=sensorProbeDrycontactArrayPort5ControlMode, sensorTankSenderNormalDesc=sensorTankSenderNormalDesc, sensorProbeThermostatTemperatureArrayPort7GoOnline=sensorProbeThermostatTemperatureArrayPort7GoOnline, sensorProbeTemperatureArrayPort8GoOnline=sensorProbeTemperatureArrayPort8GoOnline, powerSensorHighWarning=powerSensorHighWarning, sensorHumidityEntry=sensorHumidityEntry, sensorRelayType=sensorRelayType, lic5DCUsed=lic5DCUsed, sensorProbeDrycontactArrayPort1ContTimeCritical=sensorProbeDrycontactArrayPort1ContTimeCritical, sensorProbeThermostatTemperatureArrayPort8Mode=sensorProbeThermostatTemperatureArrayPort8Mode, sensorProbeTemperatureArrayPort4ContTimeLowCritical=sensorProbeTemperatureArrayPort4ContTimeLowCritical, sensorProbeThermostatTemperatureArrayPort7HighLimitAction2=sensorProbeThermostatTemperatureArrayPort7HighLimitAction2, sensorProbeSoundDetectorCalendar=sensorProbeSoundDetectorCalendar, sensorProbeDrycontactArrayPort6ManualOutputAction=sensorProbeDrycontactArrayPort6ManualOutputAction, sensorHumidityDisplayStyle=sensorHumidityDisplayStyle, sensorRelayManualAction=sensorRelayManualAction, sensorProbeTemperatureArrayPort8Description=sensorProbeTemperatureArrayPort8Description, cfgSystemDescription=cfgSystemDescription, sensorProbePowerMeter3phDelayBetweenCommand=sensorProbePowerMeter3phDelayBetweenCommand, sensorProbeSwitchWaterRopeImpedance=sensorProbeSwitchWaterRopeImpedance, sensorProbeHumidityHighVoltage=sensorProbeHumidityHighVoltage, sensor4to20mAEntry=sensor4to20mAEntry, sensorProbeDrycontactArrayPort7Direction=sensorProbeDrycontactArrayPort7Direction, sensorProbeRelayArrayPort6=sensorProbeRelayArrayPort6, current4to20mASensorErrorDescription=current4to20mASensorErrorDescription, devicePowerMeterCountSentPacket=devicePowerMeterCountSentPacket, sensorProbeDrycontactArrayPort6=sensorProbeDrycontactArrayPort6, dcVoltageSensorDelayHighCritical=dcVoltageSensorDelayHighCritical, humidityStatus=humidityStatus, sensorProbeTypeXDryName=sensorProbeTypeXDryName, current4to20mAStatus=current4to20mAStatus, humidityLowWarning=humidityLowWarning, sensorProbeHumidityEmailTrapSchedule=sensorProbeHumidityEmailTrapSchedule, sensorProbeDrycontactArrayPort5ContTimeCritical=sensorProbeDrycontactArrayPort5ContTimeCritical, temperatureHighWarningDescription=temperatureHighWarningDescription, sensorAirflowGoOffline=sensorAirflowGoOffline, commonSensorType=commonSensorType, sensorProbeTempDegree=sensorProbeTempDegree, sensorProbeTemperatureArrayPort2DegreeRaw=sensorProbeTemperatureArrayPort2DegreeRaw, sensorProbeSubnetMask=sensorProbeSubnetMask, sensorProbeDrycontactArrayPort8Number=sensorProbeDrycontactArrayPort8Number, sensorTemperatureOffset=sensorTemperatureOffset, powerSensorHighCritical=powerSensorHighCritical, dcVoltageNormalColor=dcVoltageNormalColor, sensorProbeRelayArrayPort7Index=sensorProbeRelayArrayPort7Index, sensorProbeWattHoursDescription=sensorProbeWattHoursDescription, sensorHumidityDelayHighCritical=sensorHumidityDelayHighCritical, sensorHumidityNormalDesc=sensorHumidityNormalDesc, dcVoltageSensorLowWarningDesc=dcVoltageSensorLowWarningDesc, fuelRearm=fuelRearm, airflowSensorDelayHighWarning=airflowSensorDelayHighWarning, sensorProbeVRMSLowWarning=sensorProbeVRMSLowWarning, sensorThermostatSubPort=sensorThermostatSubPort, sirenSensorTable=sirenSensorTable, tankSenderDelayError=tankSenderDelayError, sensorProbeRelayArrayPort7Number=sensorProbeRelayArrayPort7Number, temperatureAcknowledge=temperatureAcknowledge, spRelayArray3_6Status=spRelayArray3_6Status, sensorProbeSwitchSendTrap=sensorProbeSwitchSendTrap, temperatureDelayError=temperatureDelayError, sensorProbeSoftMotionStatus=sensorProbeSoftMotionStatus, sensorProbeIRMSRaw=sensorProbeIRMSRaw, tankSenderRaw=tankSenderRaw, sensorProbeTypeADE7763IRMSName=sensorProbeTypeADE7763IRMSName, sensorProbeThermostatTemperatureArrayPort7HighLimit1=sensorProbeThermostatTemperatureArrayPort7HighLimit1, spSwitch20Status=spSwitch20Status, sensorProbeTypeDCvoltageName=sensorProbeTypeDCvoltageName, sensorHighWarningColor=sensorHighWarningColor, sensorProbeDrycontactArrayPort4OpenURL=sensorProbeDrycontactArrayPort4OpenURL, fuelUnit=fuelUnit, sensorProbeTemperatureArrayPort2OpenURL=sensorProbeTemperatureArrayPort2OpenURL, securitySensorGoOffline=securitySensorGoOffline, airflowSensorStatus=airflowSensorStatus, tankSenderSensorHighCriticalDesc=tankSenderSensorHighCriticalDesc, sensorPowerDelayHighCritical=sensorPowerDelayHighCritical, sensorTankSenderGoOffline=sensorTankSenderGoOffline, dcVoltageLowCritical=dcVoltageLowCritical, humiditySensorTable=humiditySensorTable, thermostatSensorTable=thermostatSensorTable, sensorProbeSwitchOutputLevel=sensorProbeSwitchOutputLevel, sensorProbeThermostatHighLimitAction2=sensorProbeThermostatHighLimitAction2, sensorProbeHumidityRelayAction=sensorProbeHumidityRelayAction, sensorProbeRelayArrayPort6ManualRelayCycleTime=sensorProbeRelayArrayPort6ManualRelayCycleTime, sensorProbeEnergySensorIndex=sensorProbeEnergySensorIndex, sensorProbeIRMSSirenAction=sensorProbeIRMSSirenAction, sensorProbeRelayArrayPort8Description=sensorProbeRelayArrayPort8Description, sensorProbeVirtualSwitchCalendar=sensorProbeVirtualSwitchCalendar)
mibBuilder.exportSymbols("SPAGENT-MIB", sensorProbeThermostatTemperatureArrayPort6LowLimitAction2=sensorProbeThermostatTemperatureArrayPort6LowLimitAction2, sensorPowerPort=sensorPowerPort, sensorTemperatureArrayHighWarningDesc=sensorTemperatureArrayHighWarningDesc, powerSensorHighCriticalColor=powerSensorHighCriticalColor, airflowDisplayStyle=airflowDisplayStyle, spSenCriticalStatus=spSenCriticalStatus, sensor4to20mAIndex=sensor4to20mAIndex, sensorTemperatureArrayStatus=sensorTemperatureArrayStatus, sensor4to20mALowWarningDesc=sensor4to20mALowWarningDesc, sensorSecuritySubPort=sensorSecuritySubPort, commonSensorValue=commonSensorValue, sensorProbeThermostatTemperatureArrayPort2NormalAction2=sensorProbeThermostatTemperatureArrayPort2NormalAction2, waterRopeSensorDeviceIndex=waterRopeSensorDeviceIndex, drycontactCriticalColor=drycontactCriticalColor, cfgRSysLogServerAddress=cfgRSysLogServerAddress, sensorProbeRelayArrayPort8ManualRelayAction=sensorProbeRelayArrayPort8ManualRelayAction, sensorProbeRelayArrayPort3ManualRelayCycleTime=sensorProbeRelayArrayPort3ManualRelayCycleTime, humiditySensorHighCriticalDesc=humiditySensorHighCriticalDesc, deviceIntelligentDescription=deviceIntelligentDescription, acVoltageSensorStatus=acVoltageSensorStatus, sensorProbeTemperatureArrayPort3ContTimeLowWarning=sensorProbeTemperatureArrayPort3ContTimeLowWarning, devicePowerMeterTable=devicePowerMeterTable, sensorHumidityDelayNormal=sensorHumidityDelayNormal, sensorProbeTemperatureArrayPort3Offset=sensorProbeTemperatureArrayPort3Offset, sensorProbeDrycontactArrayPort7ContTimeCritical=sensorProbeDrycontactArrayPort7ContTimeCritical, sensorProbeTemperatureArrayPort7ContTimeHighCritical=sensorProbeTemperatureArrayPort7ContTimeHighCritical, sensor4to20mADeviceIndex=sensor4to20mADeviceIndex, sensorProbeThermostatTemperatureArrayPort6HighLimitAction1=sensorProbeThermostatTemperatureArrayPort6HighLimitAction1, deviceDescription=deviceDescription, sensorTankSenderHighWarningDesc=sensorTankSenderHighWarningDesc, airflowSensorLowCriticalColor=airflowSensorLowCriticalColor, sensorProbeSwitchLocation=sensorProbeSwitchLocation, powerSensorMinValue=powerSensorMinValue, sensorProbeTypeSoftMotionName=sensorProbeTypeSoftMotionName, spSwitch42Status=spSwitch42Status, spRelayArray7_7Status=spRelayArray7_7Status, smokeAcknowledge=smokeAcknowledge, sensorProbeDrycontactArrayPort8Status=sensorProbeDrycontactArrayPort8Status, humidityTable=humidityTable, sensorProbeVRMSDelayNormal=sensorProbeVRMSDelayNormal, sensorPowerLowWarningColor=sensorPowerLowWarningColor, humiditySensorLowCritical=humiditySensorLowCritical, cfgServiceTelnet=cfgServiceTelnet, cfgVPNEnabled=cfgVPNEnabled, sensorProbeIDCVCalibrate=sensorProbeIDCVCalibrate, sensorProbeTemperatureArrayPort2ContTimeLowCritical=sensorProbeTemperatureArrayPort2ContTimeLowCritical, sensorProbeEnergyDelayError=sensorProbeEnergyDelayError, commonSensorAcknowledge=commonSensorAcknowledge, cfgGSMConnectionMode=cfgGSMConnectionMode, dryContactSensorDirection=dryContactSensorDirection, sensorProbeRelayArrayPort5ManualRelayAction=sensorProbeRelayArrayPort5ManualRelayAction, commonLowWarningDescription=commonLowWarningDescription, sensorProbeRelayArrayPort1ManualRelayCycleTime=sensorProbeRelayArrayPort1ManualRelayCycleTime, sensorTemperatureArrayEntry=sensorTemperatureArrayEntry, waterRopeSensorType=waterRopeSensorType, sensorAirflowNormalColor=sensorAirflowNormalColor, waterRopeCriticalColor=waterRopeCriticalColor, temperatureArraySensorErrorDescription=temperatureArraySensorErrorDescription, airflowValue=airflowValue, temperatureArraySensorDeviceIndex=temperatureArraySensorDeviceIndex, waterEntry=waterEntry, sirenOnDescription=sirenOnDescription, sensorTemperatureDescription=sensorTemperatureDescription, sensorProbeHumidityDescription=sensorProbeHumidityDescription, temperatureArraySerialNumber=temperatureArraySerialNumber, spTemperatureArray7_7Status=spTemperatureArray7_7Status, sensorProbeUsePassword=sensorProbeUsePassword, sensorProbeTemperatureArrayPort8Offset=sensorProbeTemperatureArrayPort8Offset, spSwitch10Status=spSwitch10Status, commonHighWarningDescription=commonHighWarningDescription, current4to20mASensorAcknowledge=current4to20mASensorAcknowledge, waterSensorDescription=waterSensorDescription, spSwitch26Status=spSwitch26Status, sensorThermostatEntry=sensorThermostatEntry, sensorProbeTemperatureArrayPort6ContTimeLowWarning=sensorProbeTemperatureArrayPort6ContTimeLowWarning, sensorProbeDrycontactArrayPort8ContTimeCritical=sensorProbeDrycontactArrayPort8ContTimeCritical, sensorProbeVirtualSwitchStatus=sensorProbeVirtualSwitchStatus, sensorProbeDrycontactArrayPort6Index=sensorProbeDrycontactArrayPort6Index, securitySensorCriticalColor=securitySensorCriticalColor, spSwitch1Status=spSwitch1Status, powerAcknowledge=powerAcknowledge, spTemperature7Status=spTemperature7Status, sensorProbeRelayArrayPort5RelayDescOff=sensorProbeRelayArrayPort5RelayDescOff, sensorProbeIRMSContTimeHighWarning=sensorProbeIRMSContTimeHighWarning, sensorProbeThermostatTemperatureArrayPort1NormalAction1=sensorProbeThermostatTemperatureArrayPort1NormalAction1, current4to20mALowWarningDescription=current4to20mALowWarningDescription, spTemperatureArray6_7Status=spTemperatureArray6_7Status, sensor4to20mAHighCritical=sensor4to20mAHighCritical, humiditySensorHighWarning=humiditySensorHighWarning, sensorProbeSoundDetectorGoOnline=sensorProbeSoundDetectorGoOnline, sensor4to20mAMaxVoltage=sensor4to20mAMaxVoltage, sirenDescription=sirenDescription, sensorProbeVirtualAnalogSensorNumber=sensorProbeVirtualAnalogSensorNumber, acVoltageId=acVoltageId, securityProbe=securityProbe, deviceIntelligentEntry=deviceIntelligentEntry, waterRopeSensorUnit=waterRopeSensorUnit, airflowDelayError=airflowDelayError, deviceDryContactIndex=deviceDryContactIndex, sensorSecurityAcknowledge=sensorSecurityAcknowledge, sensorProbeTemperatureArrayPort4HighCritical=sensorProbeTemperatureArrayPort4HighCritical, securityAcknowledge=securityAcknowledge, tankSenderDelayLowCritical=tankSenderDelayLowCritical, waterSensorNormalDesc=waterSensorNormalDesc, securityIndex=securityIndex, cfgGSMConnectionType=cfgGSMConnectionType, sensorProbeRelayArrayPort1=sensorProbeRelayArrayPort1, sensorProbeDrycontactArrayPort1Table=sensorProbeDrycontactArrayPort1Table, tankSenderSensorIndex=tankSenderSensorIndex, tankSenderLowWarningColor=tankSenderLowWarningColor, sensorACvoltageDescription=sensorACvoltageDescription, dcVoltageUnit=dcVoltageUnit, sensorTankSenderNormalColor=sensorTankSenderNormalColor, current4to20mARaw=current4to20mARaw, powerLowWarning=powerLowWarning, securitySensorCriticalDesc=securitySensorCriticalDesc, sensorProbeThermostatTemperatureArrayPort3NormalAction1=sensorProbeThermostatTemperatureArrayPort3NormalAction1, sensorProbeTemperatureArrayPort4Offset=sensorProbeTemperatureArrayPort4Offset, sensorProbeTempSirenActiveStatus=sensorProbeTempSirenActiveStatus, sensorFuelHighWarning=sensorFuelHighWarning, sensorProbeTempEmailTrapInterval=sensorProbeTempEmailTrapInterval, sensorTemperatureArrayDeviceIndex=sensorTemperatureArrayDeviceIndex, sensorDCvoltageHighCriticalDesc=sensorDCvoltageHighCriticalDesc, fuelSensorLowCritical=fuelSensorLowCritical, sensorProbeTypeTankSenderName=sensorProbeTypeTankSenderName, sensorWaterCriticalColor=sensorWaterCriticalColor, sensorTemperatureArrayUnit=sensorTemperatureArrayUnit, sensorProbeTempSirenCycleTime=sensorProbeTempSirenCycleTime, sensorProbePowerMeter3phDelayBetweenMeter=sensorProbePowerMeter3phDelayBetweenMeter, sensorProbeSendTestMail=sensorProbeSendTestMail, sensorSirenDescription=sensorSirenDescription, sensorProbeThermostatTemperatureArrayPort5Description=sensorProbeThermostatTemperatureArrayPort5Description, humiditySensorLowWarningDesc=humiditySensorLowWarningDesc, sensorProbeTypeSoundName=sensorProbeTypeSoundName, sensorAirflowDeviceIndex=sensorAirflowDeviceIndex, fuelSensorLowWarningDesc=fuelSensorLowWarningDesc, sensorPowerGoOffline=sensorPowerGoOffline, sensorDCvoltageAmountBaseVoltage=sensorDCvoltageAmountBaseVoltage, drycontactOffDescription=drycontactOffDescription, sensorProbeTemperatureArrayPort2ContTimeHighCritical=sensorProbeTemperatureArrayPort2ContTimeHighCritical, actionTable=actionTable, sensorProbeThermostatTemperatureArrayPort5Mode=sensorProbeThermostatTemperatureArrayPort5Mode, powerSubPort=powerSubPort, sensorProbeDrycontactArrayPort8=sensorProbeDrycontactArrayPort8, sensorProbeEnergySirenActiveStatus=sensorProbeEnergySirenActiveStatus, sensorProbeVRMSContTimeLowWarning=sensorProbeVRMSContTimeLowWarning, sensorProbeDrycontactArrayPort4GoOnline=sensorProbeDrycontactArrayPort4GoOnline, sensorDryContactNormalDesc=sensorDryContactNormalDesc, airflowSensorAcknowledge=airflowSensorAcknowledge, humidityDelayError=humidityDelayError, powerSensorSensorErrorDesc=powerSensorSensorErrorDesc, powerSensorDeviceIndex=powerSensorDeviceIndex, sensorProbeTemperatureArrayPort1Description=sensorProbeTemperatureArrayPort1Description, temperatureSensorLowWarningDesc=temperatureSensorLowWarningDesc, temperatureArraySensorHighWarningColor=temperatureArraySensorHighWarningColor, motionNormalDescription=motionNormalDescription, powerEntry=powerEntry, sensorProbeThermostatTemperatureArrayPort6HighLimitAction2=sensorProbeThermostatTemperatureArrayPort6HighLimitAction2, sensorProbeDrycontactArrayPort5OutputDescOff=sensorProbeDrycontactArrayPort5OutputDescOff, temperatureArraySensorLowCriticalDesc=temperatureArraySensorLowCriticalDesc, sensorProbeDrycontactArrayPort1Entry=sensorProbeDrycontactArrayPort1Entry, acVoltageSensorSubPort=acVoltageSensorSubPort, sensorSirenTable=sensorSirenTable, securitySubPort=securitySubPort, sensorProbeVirtualAnalogUnit=sensorProbeVirtualAnalogUnit, sensorProbeSeparateEmail=sensorProbeSeparateEmail, sensorWaterRopeCriticalColor=sensorWaterRopeCriticalColor, cfgNTPMode=cfgNTPMode, current4to20mAHighWarning=current4to20mAHighWarning, sensorProbeHumidityContTimeHighWarning=sensorProbeHumidityContTimeHighWarning, sensorDCvoltageHighWarning=sensorDCvoltageHighWarning, temperatureLowCritical=temperatureLowCritical, cfgHostID=cfgHostID, commonTable=commonTable, powerDelayHighWarning=powerDelayHighWarning, dcVoltageDelayLowWarning=dcVoltageDelayLowWarning, dryContactSensorGoOffline=dryContactSensorGoOffline, deviceLicenseExpTotal=deviceLicenseExpTotal, current4to20mAUnit=current4to20mAUnit, virtualAnalogSensorIndex=virtualAnalogSensorIndex, spTemperatureArray3_3Status=spTemperatureArray3_3Status, sensorProbeHumidityDelayError=sensorProbeHumidityDelayError, tankSenderSensorLowWarningColor=tankSenderSensorLowWarningColor, sensorAirflowHighCritical=sensorAirflowHighCritical, sensorMotionNormalDesc=sensorMotionNormalDesc, sensorProbeThermostatTemperatureArrayPort1LowLimitAction1=sensorProbeThermostatTemperatureArrayPort1LowLimitAction1, sensorTemperatureArrayLowCritical=sensorTemperatureArrayLowCritical, sensorThermostatSensorErrorColor=sensorThermostatSensorErrorColor, current4to20mASensorHighCriticalDesc=current4to20mASensorHighCriticalDesc, sensorProbeTemperatureArrayPort5DegreeRaw=sensorProbeTemperatureArrayPort5DegreeRaw, sensorFuelSensorErrorDesc=sensorFuelSensorErrorDesc, powerSensorDisplayStyle=powerSensorDisplayStyle, smokeSensorDescription=smokeSensorDescription, sensorProbeDrycontactArrayPort2ManualOutputAction=sensorProbeDrycontactArrayPort2ManualOutputAction, sensorProbeTemperatureArrayPort8URL=sensorProbeTemperatureArrayPort8URL, sensor4to20mALowWarningColor=sensor4to20mALowWarningColor, sensorProbeEnergyEmailTrapLimit=sensorProbeEnergyEmailTrapLimit, fuelDelayHighCritical=fuelDelayHighCritical, sensorProbeVirtualAnalogSensorTable=sensorProbeVirtualAnalogSensorTable, securityEntry=securityEntry, sensorProbeVRMSSirenActiveStatus=sensorProbeVRMSSirenActiveStatus, spRelayArray6_1Status=spRelayArray6_1Status, sensorDoorCmd=sensorDoorCmd, sensorProbeTempContTimeLowCritical=sensorProbeTempContTimeLowCritical, sensorProbeTemperatureArrayPort3DegreeRaw=sensorProbeTemperatureArrayPort3DegreeRaw, sensorThermostatNormalDesc=sensorThermostatNormalDesc, temperatureSensorPort=temperatureSensorPort, tankSenderLowWarning=tankSenderLowWarning, sensorProbeThermostatTemperatureArrayPort5HighLimitAction2=sensorProbeThermostatTemperatureArrayPort5HighLimitAction2, motionSubPort=motionSubPort, sensorHumidityNormalColor=sensorHumidityNormalColor, sensorProbeThermostatTemperatureArrayPort8GoOnline=sensorProbeThermostatTemperatureArrayPort8GoOnline, spSwitch5Status=spSwitch5Status, sensorProbeRelayArrayPort6Entry=sensorProbeRelayArrayPort6Entry, current4to20mASensorId=current4to20mASensorId, powerRearm=powerRearm, sensorProbeTemperatureArrayPort6HighCritical=sensorProbeTemperatureArrayPort6HighCritical, sensorFuelHighWarningDesc=sensorFuelHighWarningDesc, spAnalogue1Status=spAnalogue1Status, thermostatSensorLowWarningDesc=thermostatSensorLowWarningDesc, tankSenderSensorErrorDescription=tankSenderSensorErrorDescription, sensorProbeSwitchIndexCount=sensorProbeSwitchIndexCount, sensorProbeThermostatTemperatureArrayPort1HighLimitAction2=sensorProbeThermostatTemperatureArrayPort1HighLimitAction2, sensorProbeDrycontactArrayPort5Status=sensorProbeDrycontactArrayPort5Status, airflowSubPort=airflowSubPort, sensor4to20mATable=sensor4to20mATable, acVoltageEntry=acVoltageEntry, sensorThermostatLowWarningColor=sensorThermostatLowWarningColor, sensorProbeTemperatureArrayPort1GoOnline=sensorProbeTemperatureArrayPort1GoOnline, spAnalogue2Status=spAnalogue2Status, sensor4to20mADisplayStyle=sensor4to20mADisplayStyle, commonSensorOffDescription=commonSensorOffDescription, sensorProbeTempDelayNormal=sensorProbeTempDelayNormal, sensorProbeTemperatureArrayPort5URL=sensorProbeTemperatureArrayPort5URL, sensorIntelligentPort3GoOnline=sensorIntelligentPort3GoOnline, current4to20mASensorBaseVoltage=current4to20mASensorBaseVoltage, securityGoOffline=securityGoOffline, sensorProbeDrycontactArrayPort4ManualOutputAction=sensorProbeDrycontactArrayPort4ManualOutputAction, virtualSwitchSensorTable=virtualSwitchSensorTable, sensorProbeMAC=sensorProbeMAC, sensorProbeTemperatureArrayPort3Value=sensorProbeTemperatureArrayPort3Value, sensorProbeHumidityLowCritical=sensorProbeHumidityLowCritical, sensorProbeThermostatTemperatureArrayPort2RelayControlPort=sensorProbeThermostatTemperatureArrayPort2RelayControlPort, relaySensorTable=relaySensorTable, spTemperatureArray5_6Status=spTemperatureArray5_6Status, smokeSensorStatus=smokeSensorStatus, sensorProbeThermostatHighLimit1=sensorProbeThermostatHighLimit1, sensorProbeVirtualSwitchDescription=sensorProbeVirtualSwitchDescription, sensorProbeRelayArrayPort8OpenURL=sensorProbeRelayArrayPort8OpenURL, sensorProbeRelayArrayPort1RelayCycleTime=sensorProbeRelayArrayPort1RelayCycleTime, sensorProbeTemperatureArrayPort2Offset=sensorProbeTemperatureArrayPort2Offset, airflowStatus=airflowStatus, sensorProbeDrycontactArrayPort6NormalState=sensorProbeDrycontactArrayPort6NormalState, sensorSmokeNormalColor=sensorSmokeNormalColor)
mibBuilder.exportSymbols("SPAGENT-MIB", sensorDryContactGoOffline=sensorDryContactGoOffline, sensorProbeTypeSHT11HumidityName=sensorProbeTypeSHT11HumidityName, tankSenderSensorSensorErrorDesc=tankSenderSensorSensorErrorDesc, virtualSwitchSensorGoOnline=virtualSwitchSensorGoOnline, virtualSwitchSensorDescriptionNormal=virtualSwitchSensorDescriptionNormal, sensorProbeThermostatTemperatureArrayPort2LowLimit2=sensorProbeThermostatTemperatureArrayPort2LowLimit2, sensorProbeThermostatTemperatureArrayPort4LowLimit2=sensorProbeThermostatTemperatureArrayPort4LowLimit2, sensorProbeTempRelayActiveStatus=sensorProbeTempRelayActiveStatus, dcVoltageEntry=dcVoltageEntry, sensorProbeVirtualSwitchURL=sensorProbeVirtualSwitchURL, sensorProbeRelayArrayPort4Online=sensorProbeRelayArrayPort4Online, sensorProbeThermostatTemperatureArrayPort3Online=sensorProbeThermostatTemperatureArrayPort3Online, sensorProbeDrycontactArrayPort2ContTimeNormal=sensorProbeDrycontactArrayPort2ContTimeNormal, spSwitch13Status=spSwitch13Status, dcVoltageSensorLowWarning=dcVoltageSensorLowWarning, commonSensorHighCriticalDescription=commonSensorHighCriticalDescription, sensorAirflowValue=sensorAirflowValue, sensorProbeVRMSPercent=sensorProbeVRMSPercent, sensorTankSenderHighCriticalColor=sensorTankSenderHighCriticalColor, sensorDCvoltageAmountMaxVoltage=sensorDCvoltageAmountMaxVoltage, deviceAccessTable=deviceAccessTable, sensorProbeDrycontactArrayPort1GoOnline=sensorProbeDrycontactArrayPort1GoOnline, spSwitch19Status=spSwitch19Status, sensorProbeThermostatLowLimit1=sensorProbeThermostatLowLimit1, spTemperatureArray4_8Status=spTemperatureArray4_8Status, commonHighCriticalColor=commonHighCriticalColor, sensorProbeDrycontactArrayPort5Online=sensorProbeDrycontactArrayPort5Online, temperatureSensorHighCriticalColor=temperatureSensorHighCriticalColor, sensorProbeType4to20MAName=sensorProbeType4to20MAName, powerSensorValueFormatString=powerSensorValueFormatString, sensorProbeTemperatureArrayPort5LowWarning=sensorProbeTemperatureArrayPort5LowWarning, dcVoltageSensorLowCriticalDesc=dcVoltageSensorLowCriticalDesc, sensorProbeTemperatureArrayPort4Online=sensorProbeTemperatureArrayPort4Online, sensorHighCriticalColor=sensorHighCriticalColor, humiditySensorNormalDesc=humiditySensorNormalDesc, spTemperatureArray8_5Status=spTemperatureArray8_5Status, sensorProbeThermostatTemperatureArrayPort8NormalAction2=sensorProbeThermostatTemperatureArrayPort8NormalAction2, sensorACvoltageIndex=sensorACvoltageIndex, tankSenderRearm=tankSenderRearm, deviceIntelligentStatus=deviceIntelligentStatus, temperatureArraySensorLowCritical=temperatureArraySensorLowCritical, spSwitch43Status=spSwitch43Status, sensorThermostatHighCriticalColor=sensorThermostatHighCriticalColor, virtualAnalogSensorDescription=virtualAnalogSensorDescription, sirenSensorManualAction=sirenSensorManualAction, sensorAirflowLowWarningDesc=sensorAirflowLowWarningDesc, licAccessUsersUsed=licAccessUsersUsed, sensorProbeCameraServerClientIP=sensorProbeCameraServerClientIP, powerTable=powerTable, tankSenderDisplayStyle=tankSenderDisplayStyle, current4to20mALowWarning=current4to20mALowWarning, spVirtual1Status=spVirtual1Status, sensorProbeEnergyPercent=sensorProbeEnergyPercent, sensorDryContactPort2GoOnline=sensorDryContactPort2GoOnline, sensorHumidityIndex=sensorHumidityIndex, sensorProbeThermostatTemperatureArrayPort8LowLimit2=sensorProbeThermostatTemperatureArrayPort8LowLimit2, sensorProbeSoundDetectorDescription=sensorProbeSoundDetectorDescription, sensorProbeTypeADE7763WatthourName=sensorProbeTypeADE7763WatthourName, temperatureArrayTable=temperatureArrayTable, sensorProbeVRMSCalendar=sensorProbeVRMSCalendar, sensorProbeDrycontactArrayPort8NormalState=sensorProbeDrycontactArrayPort8NormalState, sensorDryContactPort13GoOnline=sensorDryContactPort13GoOnline, spRelayArray1_3Status=spRelayArray1_3Status, sensorProbeRelayArrayPort5RelayDescOn=sensorProbeRelayArrayPort5RelayDescOn, sensorProbeThermostatTemperatureArrayPort6Index=sensorProbeThermostatTemperatureArrayPort6Index, tankSenderTable=tankSenderTable, temperatureLowWarningDescription=temperatureLowWarningDescription, airflowSensorId=airflowSensorId, sensorDoorId=sensorDoorId, sirenSensorGoOffline=sirenSensorGoOffline, sensorProbeTimeOfDay=sensorProbeTimeOfDay, sensorProbeSwitchWaterRopeLeakLocation=sensorProbeSwitchWaterRopeLeakLocation, sensorProbeTemperatureArrayPort6ContTimeLowCritical=sensorProbeTemperatureArrayPort6ContTimeLowCritical, dcVoltageSensorStatus=dcVoltageSensorStatus, commonIndex=commonIndex, sensorMotionCriticalColor=sensorMotionCriticalColor, sensorProbeRelayArrayPort4Status=sensorProbeRelayArrayPort4Status, sensorProbeHumidityAcknowledgement=sensorProbeHumidityAcknowledgement, sensorProbeThermostatTemperatureArrayPort3LowLimitAction1=sensorProbeThermostatTemperatureArrayPort3LowLimitAction1, sensorProbeSwitchWaterRopeType=sensorProbeSwitchWaterRopeType, sensorProbeRelayArrayPort2RelayDescOn=sensorProbeRelayArrayPort2RelayDescOn, sensorProbeRelayArrayPort6Online=sensorProbeRelayArrayPort6Online, powerSensorLowCritical=powerSensorLowCritical, spSwitch58Status=spSwitch58Status, spSwitch53Status=spSwitch53Status, sensorProbeDrycontactArrayPort5Index=sensorProbeDrycontactArrayPort5Index, sensorProbeTemperatureArrayPort3Number=sensorProbeTemperatureArrayPort3Number, sensorTankSenderTable=sensorTankSenderTable, sensorProbeSwitchRelayDescOff=sensorProbeSwitchRelayDescOff, waterSensorStatus=waterSensorStatus, sensorAirflowLowCritical=sensorAirflowLowCritical, temperatureSensorId=temperatureSensorId, current4to20mASensorIndex=current4to20mASensorIndex, temperatureArraySensorTable=temperatureArraySensorTable, sensorProbeRelayArrayPort5RelayAction=sensorProbeRelayArrayPort5RelayAction, sensorMotionCriticalDesc=sensorMotionCriticalDesc, dcVoltageDescription=dcVoltageDescription, spTemperatureArray3Status=spTemperatureArray3Status, sensorProbeDrycontactArrayPort3Number=sensorProbeDrycontactArrayPort3Number, sensorProbeTempIndexCount=sensorProbeTempIndexCount, sensorProbeThermostatTemperatureArrayPort7NormalAction2=sensorProbeThermostatTemperatureArrayPort7NormalAction2, sensorDryContactPort16GoOnline=sensorDryContactPort16GoOnline, sensorProbeTemperatureArrayPort5ContTimeLowWarning=sensorProbeTemperatureArrayPort5ContTimeLowWarning, sensorProbeThermostatTemperatureArrayPort4NormalAction1=sensorProbeThermostatTemperatureArrayPort4NormalAction1, sensorPowerSubPort=sensorPowerSubPort, actionTest=actionTest, thermostatSensorHighWarning=thermostatSensorHighWarning, waterGoOffline=waterGoOffline, sensorFuelEntry=sensorFuelEntry, sensorProbeRelayArrayPort2Online=sensorProbeRelayArrayPort2Online, sensorProbeRelayArrayPort6GoOnline=sensorProbeRelayArrayPort6GoOnline, sensorProbeTemperatureArrayPort7GoOnline=sensorProbeTemperatureArrayPort7GoOnline, sensorProbeSoftMotionSensorEntry=sensorProbeSoftMotionSensorEntry, relayOnColor=relayOnColor, airflowHighWarningDescription=airflowHighWarningDescription, sirenOffColor=sirenOffColor, cfgServerPort=cfgServerPort, sensorProbeThermostatTemperatureArrayPort7LowLimitAction2=sensorProbeThermostatTemperatureArrayPort7LowLimitAction2, sensorProbeSwitchEntry=sensorProbeSwitchEntry, spRelayArray1_2Status=spRelayArray1_2Status, waterId=waterId, sensorProbeThermostatLowLimit2=sensorProbeThermostatLowLimit2, sensorProbeDrycontactArrayPort4Description=sensorProbeDrycontactArrayPort4Description, relayStatus=relayStatus, virtualSwitchSensorDescription=virtualSwitchSensorDescription, dcVoltageSensorSensorErrorColor=dcVoltageSensorSensorErrorColor, commonSensorNormalDescription=commonSensorNormalDescription, spVirtual8Status=spVirtual8Status, spSensorStatus=spSensorStatus, sensorProbeTemperatureArrayPort3ContTimeHighWarning=sensorProbeTemperatureArrayPort3ContTimeHighWarning, sensorMotionStatus=sensorMotionStatus, sensorHumidityHighCriticalColor=sensorHumidityHighCriticalColor, sensorTemperatureArrayLowCriticalDesc=sensorTemperatureArrayLowCriticalDesc, spTemperatureArray4_1Status=spTemperatureArray4_1Status, sensorIntelligentPort7GoOnline=sensorIntelligentPort7GoOnline, sensorProbeThermostatTemperatureArrayPort3LowLimit1=sensorProbeThermostatTemperatureArrayPort3LowLimit1, sensorSmokeIndex=sensorSmokeIndex, fuelSensorId=fuelSensorId, temperatureSensorDeviceIndex=temperatureSensorDeviceIndex, sensorProbeThermostatTemperatureArrayPort5NormalAction1=sensorProbeThermostatTemperatureArrayPort5NormalAction1, current4to20mASensorAmountMaxVoltage=current4to20mASensorAmountMaxVoltage, tankSenderLowCriticalDescription=tankSenderLowCriticalDescription, spRelayArray2Status=spRelayArray2Status, sensorProbeThermostatTemperatureArrayPort7EnableTime=sensorProbeThermostatTemperatureArrayPort7EnableTime, fuelSensorDeviceIndex=fuelSensorDeviceIndex, relayManualAction=relayManualAction, spSwitchStatus=spSwitchStatus, dryContactSensorAcknowledge=dryContactSensorAcknowledge, spSwitch22Status=spSwitch22Status, sensorProbeTemperatureArrayPort7Offset=sensorProbeTemperatureArrayPort7Offset, sensorProbeRelayArrayPort1Number=sensorProbeRelayArrayPort1Number, sensorProbeWattHoursPercent=sensorProbeWattHoursPercent, commonLowCriticalColor=commonLowCriticalColor, fuelSensorDisplayStyle=fuelSensorDisplayStyle, sensorProbeNtpServer=sensorProbeNtpServer, sensor4to20mADelayLowWarning=sensor4to20mADelayLowWarning, powerLowWarningColor=powerLowWarningColor, commonSensorErrorColor=commonSensorErrorColor, sensorTankSenderEntry=sensorTankSenderEntry, spTemperatureArray4Status=spTemperatureArray4Status, temperatureDelayHighWarning=temperatureDelayHighWarning, sensorTemperatureArrayGoOffline=sensorTemperatureArrayGoOffline, virtualAnalogSensorEntry=virtualAnalogSensorEntry, cfgGSMDNS=cfgGSMDNS, sensorProbeSMTPPassword=sensorProbeSMTPPassword, sensorProbeRelayArrayPort8Number=sensorProbeRelayArrayPort8Number, commonSensorOnColor=commonSensorOnColor, sensorProbeTypeSirenName=sensorProbeTypeSirenName, sensorAirflowDescription=sensorAirflowDescription, sensorWaterAcknowledge=sensorWaterAcknowledge, sensorProbePowerMeterCountCRCErrorPacket=sensorProbePowerMeterCountCRCErrorPacket, sensorThermostatDelayHighWarning=sensorThermostatDelayHighWarning, doorSensorCmd=doorSensorCmd, sensorProbeVRMSSensorEntry=sensorProbeVRMSSensorEntry, commonAcknowledge=commonAcknowledge, sensorProbeSwitchIndex=sensorProbeSwitchIndex, sensorTemperatureNormalColor=sensorTemperatureNormalColor, sensorProbeEnergyDelayNormal=sensorProbeEnergyDelayNormal, sensorProbeEnergyHighWarning=sensorProbeEnergyHighWarning, sirenSensorOffDesc=sirenSensorOffDesc, thermostatSensorLowCriticalDesc=thermostatSensorLowCriticalDesc, sensorProbeTypeSHT11TempName=sensorProbeTypeSHT11TempName, sensorProbeTypeSmokeName=sensorProbeTypeSmokeName, sensorProbeRelayArrayPort4Index=sensorProbeRelayArrayPort4Index, sensorProbeVirtualAnalogDelayError=sensorProbeVirtualAnalogDelayError, motionSensorSubPort=motionSensorSubPort, sensorProbeTempURL=sensorProbeTempURL, sensorDescription=sensorDescription, sensorProbeTemperatureArrayPort1Status=sensorProbeTemperatureArrayPort1Status, sensorProbeTemperatureArrayPort2Table=sensorProbeTemperatureArrayPort2Table, sensorProbeTemperatureArrayPort2HighCritical=sensorProbeTemperatureArrayPort2HighCritical, sensor4to20mADelayHighWarning=sensor4to20mADelayHighWarning, powerSensorGoOffline=powerSensorGoOffline, spRelayArray7_8Status=spRelayArray7_8Status, sensorEntry=sensorEntry, spVirtual11Status=spVirtual11Status, airflowSensorDescription=airflowSensorDescription, sensorProbeVirtualSwitchContTimeHighCritical=sensorProbeVirtualSwitchContTimeHighCritical, commonSensorUnit=commonSensorUnit, airflowSensorIndex=airflowSensorIndex, spStatusRJ45=spStatusRJ45, sensorProbeTemperatureArrayPort1Offset=sensorProbeTemperatureArrayPort1Offset, sensorIntelligentPort8GoOnline=sensorIntelligentPort8GoOnline, airflowLowWarning=airflowLowWarning, spVirtual13Status=spVirtual13Status, sensor4to20mARearm=sensor4to20mARearm, tankSenderSensorDelayLowWarning=tankSenderSensorDelayLowWarning, temperatureSensorNormalColor=temperatureSensorNormalColor, sensorProbeEnergySirenDelayAlarm=sensorProbeEnergySirenDelayAlarm, spDownStatus=spDownStatus, spRelayArray3_2Status=spRelayArray3_2Status, sensorProbeRelayArrayPort2GoOnline=sensorProbeRelayArrayPort2GoOnline, humidityHighWarning=humidityHighWarning, sensorProbeDrycontactArrayPort3NormalState=sensorProbeDrycontactArrayPort3NormalState, cfgSNMPWriteCommunity=cfgSNMPWriteCommunity, sensorAirflowStatus=sensorAirflowStatus, dcVoltageSensorAmountBaseVoltage=dcVoltageSensorAmountBaseVoltage, sensorProbeThermostatHighLimitAction1=sensorProbeThermostatHighLimitAction1, sensorProbeTemperatureArrayPort2ContTimeLowWarning=sensorProbeTemperatureArrayPort2ContTimeLowWarning, sensorACvoltageId=sensorACvoltageId, sensorProbeRelayArrayPort4GoOnline=sensorProbeRelayArrayPort4GoOnline, sensorProbeDrycontactArrayPort6OutputDescOn=sensorProbeDrycontactArrayPort6OutputDescOn, spSwitch7Status=spSwitch7Status, sensorProbeTempEmailTrapLimit=sensorProbeTempEmailTrapLimit, spAnalogue6Status=spAnalogue6Status, airflowHighCriticalColor=airflowHighCriticalColor, sensorProbeTemperatureArrayPort6Status=sensorProbeTemperatureArrayPort6Status, tankSenderHighWarning=tankSenderHighWarning, sensorProbeDrycontactArrayPort5OutputDescOn=sensorProbeDrycontactArrayPort5OutputDescOn, dcVoltageTable=dcVoltageTable, spEnergy3Status=spEnergy3Status, spSwitch37Status=spSwitch37Status, spTemperature2Status=spTemperature2Status, sensorProbeThermostatTemperatureArrayPort5LowLimit2=sensorProbeThermostatTemperatureArrayPort5LowLimit2, sensorProbeTemperatureArrayPort2DegreeType=sensorProbeTemperatureArrayPort2DegreeType, temperatureArrayLowWarningColor=temperatureArrayLowWarningColor, sensorProbeRelayArrayPort5Number=sensorProbeRelayArrayPort5Number, sensorProbeTemperatureArrayPort1URL=sensorProbeTemperatureArrayPort1URL, deviceAccessStatus=deviceAccessStatus, sirenOffDescription=sirenOffDescription, temperatureArrayDelayNormal=temperatureArrayDelayNormal, sirenSensorDescription=sirenSensorDescription, sensorProbeTemperatureArrayPort4Table=sensorProbeTemperatureArrayPort4Table, sensorPowerDescription=sensorPowerDescription, sensorDryContactCriticalColor=sensorDryContactCriticalColor, spTemperatureArray8_3Status=spTemperatureArray8_3Status, sensorPowerHighWarningDesc=sensorPowerHighWarningDesc, temperatureArraySensorPort=temperatureArraySensorPort, humidityDelayNormal=humidityDelayNormal, sensorProbeIRMSHighCritical=sensorProbeIRMSHighCritical, sensorProbeRelayArrayPort5Table=sensorProbeRelayArrayPort5Table, tankSenderSensorStatus=tankSenderSensorStatus, motionAcknowledge=motionAcknowledge, airflowSensorLowWarning=airflowSensorLowWarning)
mibBuilder.exportSymbols("SPAGENT-MIB", sensorProbeThermostatTemperatureArrayPort2HighLimitAction2=sensorProbeThermostatTemperatureArrayPort2HighLimitAction2, temperatureArraySensorSensorErrorColor=temperatureArraySensorSensorErrorColor, waterRopeSensorGoOffline=waterRopeSensorGoOffline, sensorSirenSubPort=sensorSirenSubPort, doorDescription=doorDescription, sensorProbeTemperatureArrayPort6Offset=sensorProbeTemperatureArrayPort6Offset, sensorProbeNoCameraSensor=sensorProbeNoCameraSensor, sensorProbeJavaTimeOut=sensorProbeJavaTimeOut, sensorTemperatureLowWarning=sensorTemperatureLowWarning, drycontactAcknowledge=drycontactAcknowledge, sensorProbeDrycontactArrayPort7Table=sensorProbeDrycontactArrayPort7Table, sensorHumidityRearm=sensorHumidityRearm, spTemperatureArray2_2Status=spTemperatureArray2_2Status, sensorProbeIRMSContTimeLowCritical=sensorProbeIRMSContTimeLowCritical, sensorProbeTemperatureArrayPort4Index=sensorProbeTemperatureArrayPort4Index, virtualSwitchSensorContTimeHighCritical=virtualSwitchSensorContTimeHighCritical, fuelSensorErrorColor=fuelSensorErrorColor, sensorDryContactIndex=sensorDryContactIndex, sensorProbeVirtualAnalogContTimeSensorError=sensorProbeVirtualAnalogContTimeSensorError, temperatureArraySensorDelayNormal=temperatureArraySensorDelayNormal, current4to20mASensorHighCriticalColor=current4to20mASensorHighCriticalColor, sensorDryContactNormalColor=sensorDryContactNormalColor, virtualAnalogSensorContTimeHighCritical=virtualAnalogSensorContTimeHighCritical, current4to20mASensorValue=current4to20mASensorValue, waterRopeSensorTable=waterRopeSensorTable, sensorMotionDeviceIndex=sensorMotionDeviceIndex, waterNormalDescription=waterNormalDescription, sensorProbeTemperatureArrayPort4ContTimeHighCritical=sensorProbeTemperatureArrayPort4ContTimeHighCritical, smokeSensorIndex=smokeSensorIndex, temperatureArrayType=temperatureArrayType, sensorProbeDrycontactArrayPort2Online=sensorProbeDrycontactArrayPort2Online, sensorProbeDrycontactArrayPort1Number=sensorProbeDrycontactArrayPort1Number, sensorTemperatureArrayNormalDesc=sensorTemperatureArrayNormalDesc, spTemperatureArray7_6Status=spTemperatureArray7_6Status, sensorProbeThermostatTemperatureArrayPort6Online=sensorProbeThermostatTemperatureArrayPort6Online, sensorProbeNumberOfSensorPort=sensorProbeNumberOfSensorPort, temperatureSensorHighWarningColor=temperatureSensorHighWarningColor, sensorHumidityHighWarningDesc=sensorHumidityHighWarningDesc, airflowSensorLowWarningColor=airflowSensorLowWarningColor, temperatureArrayHighCritical=temperatureArrayHighCritical, sensorProbeSoftMotionSensorIndex=sensorProbeSoftMotionSensorIndex, sensorProbeCameraServerClientSetPassword=sensorProbeCameraServerClientSetPassword, sensorProbeRelayArrayPort8RelayDescOn=sensorProbeRelayArrayPort8RelayDescOn, sensorProbeTemperatureArrayPort1DegreeRaw=sensorProbeTemperatureArrayPort1DegreeRaw, sensorProbeThermostatTemperatureArrayPort6LowLimit2=sensorProbeThermostatTemperatureArrayPort6LowLimit2, motionNormalColor=motionNormalColor, spTemperatureArray8_2Status=spTemperatureArray8_2Status, sensorProbeTempDegreeRaw=sensorProbeTempDegreeRaw, sensorProbeDrycontactArrayPort6OutputDescOff=sensorProbeDrycontactArrayPort6OutputDescOff, sensorSirenOffColor=sensorSirenOffColor, sensorTemperatureArrayPort=sensorTemperatureArrayPort, dcVoltageId=dcVoltageId, humidityLowCriticalDescription=humidityLowCriticalDescription, tankSenderSensorDescription=tankSenderSensorDescription, sensorProbeHumidityIndexCount=sensorProbeHumidityIndexCount, spStatus=spStatus, sensorProbeRelayArrayPort1GoOnline=sensorProbeRelayArrayPort1GoOnline, sensorProbeTemperatureArrayPort3DatacollectType=sensorProbeTemperatureArrayPort3DatacollectType, sensorProbeRelayArrayPort2Status=sensorProbeRelayArrayPort2Status, spTemperatureArray4_7Status=spTemperatureArray4_7Status, spVirtual12Status=spVirtual12Status, sensorMotionGoOffline=sensorMotionGoOffline, acVoltageCriticalColor=acVoltageCriticalColor, sensorProbeTempTable=sensorProbeTempTable, airflowSensorRaw=airflowSensorRaw, actionEntry=actionEntry, sensorProbeVirtualAnalogContTimeLowWarning=sensorProbeVirtualAnalogContTimeLowWarning, sensorProbeTemperatureArrayPort1DegreeType=sensorProbeTemperatureArrayPort1DegreeType, sensorTemperatureArrayHighCritical=sensorTemperatureArrayHighCritical, sensorWaterRopeNormalDesc=sensorWaterRopeNormalDesc, temperatureSensorSerialNumber=temperatureSensorSerialNumber, sirenManualCycleTime=sirenManualCycleTime, sensorProbeCameraServerIndex=sensorProbeCameraServerIndex, securitySensorAcknowledge=securitySensorAcknowledge, tankSenderUnit=tankSenderUnit, sensorProbeEnableSysLog=sensorProbeEnableSysLog, sensorThermostatSensorErrorDesc=sensorThermostatSensorErrorDesc, sensorProbeThermostatTemperatureArrayPort5Online=sensorProbeThermostatTemperatureArrayPort5Online, dcVoltageSensorMaxVoltage=dcVoltageSensorMaxVoltage, sensorProbeDrycontactArrayPort2OutputDescOff=sensorProbeDrycontactArrayPort2OutputDescOff, fuelHighCriticalDescription=fuelHighCriticalDescription, sensorProbeThermostatTemperatureArrayPort6HighLimit1=sensorProbeThermostatTemperatureArrayPort6HighLimit1, current4to20mADelayLowCritical=current4to20mADelayLowCritical, sensorProbeRelayArrayPort7RelayAction=sensorProbeRelayArrayPort7RelayAction, sensorTankSenderSensorErrorDesc=sensorTankSenderSensorErrorDesc, sensorProbeRelayArrayPort5URL=sensorProbeRelayArrayPort5URL, sensorSmokeAcknowledge=sensorSmokeAcknowledge, sensorProbeVRMSRelayOnPort=sensorProbeVRMSRelayOnPort, sensorProbeThermostatTemperatureArrayPort2NormalAction1=sensorProbeThermostatTemperatureArrayPort2NormalAction1, sensorProbeTemperatureArrayPort6DegreeRaw=sensorProbeTemperatureArrayPort6DegreeRaw, humidityHighCritical=humidityHighCritical, sensorAirflowAcknowledge=sensorAirflowAcknowledge, sensorProbeThermostatTemperatureArrayPort7LowLimit1=sensorProbeThermostatTemperatureArrayPort7LowLimit1, sensorProbeRelayArrayPort3RelayDescOff=sensorProbeRelayArrayPort3RelayDescOff, sensorProbeUseDHCP=sensorProbeUseDHCP, sensorProbeRelayArrayPort2Index=sensorProbeRelayArrayPort2Index, smokePort=smokePort, sensorProbeRelayArrayPort1Index=sensorProbeRelayArrayPort1Index, motionSensorCriticalDesc=motionSensorCriticalDesc, temperatureArrayGoOffline=temperatureArrayGoOffline, temperatureSensorLowCritical=temperatureSensorLowCritical, sensorProbeHumiditySirenOnPort=sensorProbeHumiditySirenOnPort, thermostatSensorNormalDesc=thermostatSensorNormalDesc, sensorProbeRelayArrayPort7GoOnline=sensorProbeRelayArrayPort7GoOnline, sensorOnColor=sensorOnColor, powerSensorErrorColor=powerSensorErrorColor, sensorSmokeGoOffline=sensorSmokeGoOffline, spSwitch24Status=spSwitch24Status, sensorProbeSwitchContTimeHighCritical=sensorProbeSwitchContTimeHighCritical, sensorDryContactPort1GoOnline=sensorDryContactPort1GoOnline, sensorProbeMailTimeout=sensorProbeMailTimeout, temperatureArrayHighWarningColor=temperatureArrayHighWarningColor, sensorProbeCameraServerClientOnline=sensorProbeCameraServerClientOnline, commonSensorErrorDescription=commonSensorErrorDescription, sensorProbeIRMSHighWarning=sensorProbeIRMSHighWarning, acVoltagePort=acVoltagePort, dcVoltageBaseVoltage=dcVoltageBaseVoltage, sensorProbeWattHoursReset=sensorProbeWattHoursReset, sensorProbeDrycontactArrayPort7URL=sensorProbeDrycontactArrayPort7URL, temperatureSensorTable=temperatureSensorTable, sensorProbeVRMSContTimeNormal=sensorProbeVRMSContTimeNormal, powerSensorInterval=powerSensorInterval, spTemperatureArray8_6Status=spTemperatureArray8_6Status, sensorPowerLowCriticalDesc=sensorPowerLowCriticalDesc, powerDelayHighCritical=powerDelayHighCritical, sensorProbeVRMSRaw=sensorProbeVRMSRaw, sensorWaterId=sensorWaterId, sensorProbeDrycontactArrayPort2Table=sensorProbeDrycontactArrayPort2Table, sensorProbeDrycontactArrayPort1ContTimeNormal=sensorProbeDrycontactArrayPort1ContTimeNormal, virtualSwitchSensorIndex=virtualSwitchSensorIndex, spRelayArray1_5Status=spRelayArray1_5Status, relaySensorType=relaySensorType, sensorProbeTemperatureArrayPort4ContTimeSensorError=sensorProbeTemperatureArrayPort4ContTimeSensorError, acVoltageSensorCriticalColor=acVoltageSensorCriticalColor, sensorProbeTempLowWarning=sensorProbeTempLowWarning, current4to20mASensorRaw=current4to20mASensorRaw, current4to20mAHighCriticalColor=current4to20mAHighCriticalColor, sensorHumidityLowCriticalColor=sensorHumidityLowCriticalColor, sensorSirenOnColor=sensorSirenOnColor, sensorProbeEnergyContTimeNormal=sensorProbeEnergyContTimeNormal, spTemperatureArray6_4Status=spTemperatureArray6_4Status, sensorTankSenderValue=sensorTankSenderValue, airflowSensorNormalColor=airflowSensorNormalColor, actionIndex=actionIndex, sensorProbeDrycontactArrayPort3OutputDescOff=sensorProbeDrycontactArrayPort3OutputDescOff, sensorFuelDelayHighCritical=sensorFuelDelayHighCritical, waterRopeLength=waterRopeLength, humiditySensorPort=humiditySensorPort, sensorProbeThermostatTemperatureArrayPort2Description=sensorProbeThermostatTemperatureArrayPort2Description, current4to20mANormalColor=current4to20mANormalColor, airflowRaw=airflowRaw, sensorProbeIRMSRearm=sensorProbeIRMSRearm, sensorId=sensorId, spEnergy7Status=spEnergy7Status, sensorACvoltageCriticalColor=sensorACvoltageCriticalColor, sensorWaterRopeDeviceIndex=sensorWaterRopeDeviceIndex, current4to20mADelayHighWarning=current4to20mADelayHighWarning, license5DC=license5DC, humiditySensorHighCriticalColor=humiditySensorHighCriticalColor, airflowDescription=airflowDescription, securitySensorDescription=securitySensorDescription, secSummary=secSummary, sensorProbeTempRelayCycleTime=sensorProbeTempRelayCycleTime, spVirtual20Status=spVirtual20Status, sensorProbeRelayArrayPort2OpenURL=sensorProbeRelayArrayPort2OpenURL, sensorProbeIRMSDelayNormal=sensorProbeIRMSDelayNormal, sensorProbeRelayArrayPort3ManualRelayAction=sensorProbeRelayArrayPort3ManualRelayAction, sensorProbeTemperatureArrayPort1ContTimeLowCritical=sensorProbeTemperatureArrayPort1ContTimeLowCritical, spSwitch23Status=spSwitch23Status, spRelayArray3_8Status=spRelayArray3_8Status, drycontactDescription=drycontactDescription, securityStatus=securityStatus, sensorTemperatureArrayDelayNormal=sensorTemperatureArrayDelayNormal, sensorSirenEntry=sensorSirenEntry, spEnergy2Status=spEnergy2Status, sensorProbeEnergySirenAction=sensorProbeEnergySirenAction, airflowLowWarningDescription=airflowLowWarningDescription, spTemperature8Status=spTemperature8Status, sensorProbeEnergySensorNumber=sensorProbeEnergySensorNumber, sensorProbeSoundDetectorContTimeSensorError=sensorProbeSoundDetectorContTimeSensorError, spAnalogue8Status=spAnalogue8Status, current4to20mADisplayStyle=current4to20mADisplayStyle, temperatureArraySensorAcknowledge=temperatureArraySensorAcknowledge, spRelayArray4_7Status=spRelayArray4_7Status, sensorProbeTemperatureArrayPort6Rearm=sensorProbeTemperatureArrayPort6Rearm, temperatureSensorDelayHighCritical=temperatureSensorDelayHighCritical, sensorThermostatDegree=sensorThermostatDegree, sensorProbeVRMSDatacollectType=sensorProbeVRMSDatacollectType, waterDescription=waterDescription, sensorProbeEnergyContTimeHighWarning=sensorProbeEnergyContTimeHighWarning, humiditySensorLowCriticalColor=humiditySensorLowCriticalColor, tankSenderSensorEntry=tankSenderSensorEntry, sensorPowerAcknowledge=sensorPowerAcknowledge, waterRopeStatus=waterRopeStatus, sensorProbeTemperatureArrayPort7DegreeType=sensorProbeTemperatureArrayPort7DegreeType, sensorProbeRelayArrayPort3Status=sensorProbeRelayArrayPort3Status, sensorProbeThermostatTemperatureArrayPort7Index=sensorProbeThermostatTemperatureArrayPort7Index, spSwitch66Status=spSwitch66Status, humidityPort=humidityPort, virtualSwitchSensorCalendar=virtualSwitchSensorCalendar, sensorProbeAudioAttachChannel=sensorProbeAudioAttachChannel, sensorProbeHumidityContTimeNormal=sensorProbeHumidityContTimeNormal, sensorProbeTemperatureArrayPort8Status=sensorProbeTemperatureArrayPort8Status, sensorProbeTrapDestination=sensorProbeTrapDestination, temperatureArraySensorUnit=temperatureArraySensorUnit, sensorProbeThermostatTemperatureArrayPort2EnableTime=sensorProbeThermostatTemperatureArrayPort2EnableTime, sensorFuelRaw=sensorFuelRaw, securitySensorNormalColor=securitySensorNormalColor, licenses=licenses, current4to20mASensorOffset=current4to20mASensorOffset, tankSenderSensorLowWarning=tankSenderSensorLowWarning, sensorProbeSmtpPort=sensorProbeSmtpPort, sensorProbeTemperatureArrayPort6Entry=sensorProbeTemperatureArrayPort6Entry, sensorThermostatLowCritical=sensorThermostatLowCritical, sensorProbeDrycontactArrayPort6Description=sensorProbeDrycontactArrayPort6Description, sensorProbeSoftMotionSensorNumber=sensorProbeSoftMotionSensorNumber, spCustomStatus=spCustomStatus, temperatureArrayAcknowledge=temperatureArrayAcknowledge, sensorFuelNormalDesc=sensorFuelNormalDesc, tankSenderSensorLowCriticalDesc=tankSenderSensorLowCriticalDesc, sensorProbeThermostatIndex=sensorProbeThermostatIndex, sensorProbeRelayArrayPort6Description=sensorProbeRelayArrayPort6Description, sensorProbeRelayArrayPort8GoOnline=sensorProbeRelayArrayPort8GoOnline, sensorProbeThermostatTemperatureArrayPort4HighLimitAction1=sensorProbeThermostatTemperatureArrayPort4HighLimitAction1, sensorProbeTemperatureArrayPort6LowWarning=sensorProbeTemperatureArrayPort6LowWarning, sensor4to20mARaw=sensor4to20mARaw, sensorThermostatId=sensorThermostatId, sensorSmokeStatus=sensorSmokeStatus, virtualAnalogSensorLowCritical=virtualAnalogSensorLowCritical, spBoardIndex=spBoardIndex, sensorProbeRelayArrayPort5RelayCycleTime=sensorProbeRelayArrayPort5RelayCycleTime, sensorProbeVRMSContTimeHighCritical=sensorProbeVRMSContTimeHighCritical, sensorProbeIRMSDatacollectType=sensorProbeIRMSDatacollectType, sensorProbeSoundDetectorContTimeLowWarning=sensorProbeSoundDetectorContTimeLowWarning, sensorProbeRelayArrayPort3=sensorProbeRelayArrayPort3, humidityDelayHighCritical=humidityDelayHighCritical, sensorTemperatureArrayDelayLowCritical=sensorTemperatureArrayDelayLowCritical, sensorProbeVirtualAnalogLowWarning=sensorProbeVirtualAnalogLowWarning, tankSenderLowCriticalColor=tankSenderLowCriticalColor, sensorProbeVirtualAnalogHighCritical=sensorProbeVirtualAnalogHighCritical, humidityDelayLowWarning=humidityDelayLowWarning, sensorProbeThermostatTemperatureArrayPort7RelayControlPort=sensorProbeThermostatTemperatureArrayPort7RelayControlPort, fuelId=fuelId, sensorProbeTemperatureArrayPort6Table=sensorProbeTemperatureArrayPort6Table, sensorProbeSwitchSendNormalTrap=sensorProbeSwitchSendNormalTrap, sensorProbeRelayArrayPort8Index=sensorProbeRelayArrayPort8Index, sensorProbeDrycontactArrayPort1ManualOutputAction=sensorProbeDrycontactArrayPort1ManualOutputAction, sensorProbeDrycontactArrayPort2ControlMode=sensorProbeDrycontactArrayPort2ControlMode, sensorProbeThermostatTemperatureArrayPort1RelayControlPort=sensorProbeThermostatTemperatureArrayPort1RelayControlPort, sensorProbeTemperatureArrayPort6ContTimeSensorError=sensorProbeTemperatureArrayPort6ContTimeSensorError, sensorHumidityDeviceIndex=sensorHumidityDeviceIndex, sensorProbeThermostatTemperatureArrayPort3HighLimit2=sensorProbeThermostatTemperatureArrayPort3HighLimit2, sensorProbeDrycontactArrayPort6Status=sensorProbeDrycontactArrayPort6Status, actionName=actionName)
mibBuilder.exportSymbols("SPAGENT-MIB", fuelDisplayStyle=fuelDisplayStyle, spSwitch65Status=spSwitch65Status, sensorProbeThermostatTemperatureArrayPort5HighLimit1=sensorProbeThermostatTemperatureArrayPort5HighLimit1, sensorSecurityStatus=sensorSecurityStatus, doorSensorOpenPeriod=doorSensorOpenPeriod, deviceAccessIndex=deviceAccessIndex, sensorProbeDrycontactArrayPort1ManualOutputCycleTime=sensorProbeDrycontactArrayPort1ManualOutputCycleTime, sensorProbeSnmpTrapPort=sensorProbeSnmpTrapPort, fuelHighCriticalColor=fuelHighCriticalColor, fuelHighWarningDescription=fuelHighWarningDescription, sensorTemperatureArrayLowWarningDesc=sensorTemperatureArrayLowWarningDesc, spNormalStatus=spNormalStatus, sensorAirflowDelayLowCritical=sensorAirflowDelayLowCritical, spTemperatureArray2_1Status=spTemperatureArray2_1Status, sensorProbeTemperatureArrayPort2Calendar=sensorProbeTemperatureArrayPort2Calendar, sensor4to20mAOffset=sensor4to20mAOffset, sensorProbeHumidityTable=sensorProbeHumidityTable, sensorProbeVirtualAnalogEmailTrapLimit=sensorProbeVirtualAnalogEmailTrapLimit, sensorProbeTemperatureArrayPort8DegreeType=sensorProbeTemperatureArrayPort8DegreeType, sensorProbeDrycontactArrayPort8OutputDescOn=sensorProbeDrycontactArrayPort8OutputDescOn, dcVoltageSensorNormalColor=dcVoltageSensorNormalColor, current4to20mASensorSensorErrorColor=current4to20mASensorSensorErrorColor, humidityHighWarningDescription=humidityHighWarningDescription, fuelSensorNormalDesc=fuelSensorNormalDesc, securityCriticalDescription=securityCriticalDescription, dryContactSensorNormalColor=dryContactSensorNormalColor, commonSensorValueFormatFloat=commonSensorValueFormatFloat, sensorProbeDrycontactArrayPort4ControlMode=sensorProbeDrycontactArrayPort4ControlMode, sensorProbeRelayArrayPort1RelayAction=sensorProbeRelayArrayPort1RelayAction, spSenUnknownStatus=spSenUnknownStatus, drycontactGoOffline=drycontactGoOffline, dryContactSensorOutputManualAction=dryContactSensorOutputManualAction, sensorProbeTemperatureArrayPort4Rearm=sensorProbeTemperatureArrayPort4Rearm, sensorFuelTable=sensorFuelTable, sensorProbeRelayArrayPort2Description=sensorProbeRelayArrayPort2Description, sensorTemperatureSensorErrorColor=sensorTemperatureSensorErrorColor, sirenStatus=sirenStatus, sensorProbeRelayArrayPort8URL=sensorProbeRelayArrayPort8URL, current4to20mASensorEntry=current4to20mASensorEntry, spTemperatureArray6_2Status=spTemperatureArray6_2Status, sensorAirflowId=sensorAirflowId, tankSenderSensorUnit=tankSenderSensorUnit, powerValueFormatFloat=powerValueFormatFloat, temperatureSensorIndex=temperatureSensorIndex, sensorProbeSwitchURL=sensorProbeSwitchURL, sensorProbeWattHoursSensorIndex=sensorProbeWattHoursSensorIndex, sensorProbeRelayArrayPort4=sensorProbeRelayArrayPort4, dcVoltageAmountMaxVoltage=dcVoltageAmountMaxVoltage, powerValueFormatString=powerValueFormatString, airflowNormalDescription=airflowNormalDescription, sensorProbeTemperatureArrayPort1Number=sensorProbeTemperatureArrayPort1Number, fuelSensorDelayLowWarning=fuelSensorDelayLowWarning, sensorProbeTemperatureArrayPort4ContTimeLowWarning=sensorProbeTemperatureArrayPort4ContTimeLowWarning, temperatureSensorDelayLowWarning=temperatureSensorDelayLowWarning, sensorProbeTemperatureArrayPort8LowCritical=sensorProbeTemperatureArrayPort8LowCritical, doorAcknowledge=doorAcknowledge, sensor4to20mASubPort=sensor4to20mASubPort, acVoltageNormalColor=acVoltageNormalColor, sensorRelayOffColor=sensorRelayOffColor, sensorSirenAcknowledge=sensorSirenAcknowledge, sensorProbeRelayArrayPort4Description=sensorProbeRelayArrayPort4Description, cfgSNMPv3EngineId=cfgSNMPv3EngineId, humidityGoOffline=humidityGoOffline, sensorProbeDrycontactArrayPort6Entry=sensorProbeDrycontactArrayPort6Entry, sensorPowerHighWarning=sensorPowerHighWarning, fuelNormalDescription=fuelNormalDescription, spRelayArray6_3Status=spRelayArray6_3Status, deviceDryContactDescription=deviceDryContactDescription, sensorProbeFirmwareVersion=sensorProbeFirmwareVersion, sensorWaterTable=sensorWaterTable, sensorProbeTemperatureArrayPort5LowCritical=sensorProbeTemperatureArrayPort5LowCritical, current4to20mABaseVoltage=current4to20mABaseVoltage, sensorWaterRopeId=sensorWaterRopeId, sensorAirflowRaw=sensorAirflowRaw, sensorProbeDrycontactArrayPort8Direction=sensorProbeDrycontactArrayPort8Direction, spRelayArray3_3Status=spRelayArray3_3Status, sensorProbeTemperatureArrayPort4LowCritical=sensorProbeTemperatureArrayPort4LowCritical, humiditySensorRearm=humiditySensorRearm, sensorPowerNormalColor=sensorPowerNormalColor, spSwitch4Status=spSwitch4Status, sensorDisplayStyle=sensorDisplayStyle, spSwitch44Status=spSwitch44Status, sensorProbeTemperatureArrayPort1DatacollectType=sensorProbeTemperatureArrayPort1DatacollectType, spSwitch68Status=spSwitch68Status, sensorHumidityOffset=sensorHumidityOffset, sensorProbeTemperatureArrayPort5Table=sensorProbeTemperatureArrayPort5Table, sensorFuelStatus=sensorFuelStatus, sensorTemperatureSerialNumber=sensorTemperatureSerialNumber, fuelSensorDelayHighCritical=fuelSensorDelayHighCritical, spStatusEachModule=spStatusEachModule, sensorHumidityDelayLowCritical=sensorHumidityDelayLowCritical, sensorWaterNormalColor=sensorWaterNormalColor, sensorDryContactOffColor=sensorDryContactOffColor, commonLowCriticalDescription=commonLowCriticalDescription, sensorProbeTempEmailTrapSchedule=sensorProbeTempEmailTrapSchedule, spRelayArray3_7Status=spRelayArray3_7Status, relayGoOffline=relayGoOffline, sensorProbeThermostatTemperatureArrayPort8HighLimitAction2=sensorProbeThermostatTemperatureArrayPort8HighLimitAction2, spRelayArray4_1Status=spRelayArray4_1Status, sensorProbeCameraRotate=sensorProbeCameraRotate, humiditySensorIndex=humiditySensorIndex, sensorProbeTemperatureArrayPort7Calendar=sensorProbeTemperatureArrayPort7Calendar, sensorProbeTempEmailInterval=sensorProbeTempEmailInterval, smokeSensorSubPort=smokeSensorSubPort, spTemperatureArray7_8Status=spTemperatureArray7_8Status, dcVoltageSensorDeviceIndex=dcVoltageSensorDeviceIndex, sensorDCvoltageLowWarningDesc=sensorDCvoltageLowWarningDesc, spVirtual14Status=spVirtual14Status, sensorProbeTemperatureArrayPort7OpenURL=sensorProbeTemperatureArrayPort7OpenURL, drycontactOnDescription=drycontactOnDescription, sensorProbeRelayArrayPort7ControlMode=sensorProbeRelayArrayPort7ControlMode, sensorProbeSoundDetectorIndex=sensorProbeSoundDetectorIndex, waterSensorDeviceIndex=waterSensorDeviceIndex, sensorProbeThermostatTemperatureArrayPort3EnableTime=sensorProbeThermostatTemperatureArrayPort3EnableTime, dcVoltageSensorHighCriticalColor=dcVoltageSensorHighCriticalColor, temperatureSensorHighWarning=temperatureSensorHighWarning, sensorHumidityHighCritical=sensorHumidityHighCritical, sensorPowerId=sensorPowerId, tankSenderStatus=tankSenderStatus, deviceLicenseIpv6=deviceLicenseIpv6, sensorProbeWattHoursSensorEntry=sensorProbeWattHoursSensorEntry, spTemperatureArray2_3Status=spTemperatureArray2_3Status, sensorProbeTempSendTrap=sensorProbeTempSendTrap, sensorSecurityDeviceIndex=sensorSecurityDeviceIndex, sensorHumidityId=sensorHumidityId, commonSensorTable=commonSensorTable, sensorProbeDrycontactArrayPort5Entry=sensorProbeDrycontactArrayPort5Entry, sensorProbeTempSendMail=sensorProbeTempSendMail, spSwitch16Status=spSwitch16Status, dcVoltageSensorErrorColor=dcVoltageSensorErrorColor, tankSenderSensorDelayHighCritical=tankSenderSensorDelayHighCritical, tankSenderDelayNormal=tankSenderDelayNormal, sensorProbeSMTPLogin=sensorProbeSMTPLogin, spRelayArray6_4Status=spRelayArray6_4Status, sensorRelayEntry=sensorRelayEntry, deviceInfo=deviceInfo, sensorTankSenderLowCritical=sensorTankSenderLowCritical, sensorProbeIRMSRelayCycleTime=sensorProbeIRMSRelayCycleTime, virtualAnalogSensorRearm=virtualAnalogSensorRearm, current4to20mASensorLowCriticalColor=current4to20mASensorLowCriticalColor, waterRopeCriticalDescription=waterRopeCriticalDescription, sensorDryContactPort15GoOnline=sensorDryContactPort15GoOnline, fuelSensorNormalColor=fuelSensorNormalColor, spSensorProbeKeepAlive=spSensorProbeKeepAlive, cfgSNMPv3Disable=cfgSNMPv3Disable, sensorProbeDrycontactArrayPort4OutputDescOn=sensorProbeDrycontactArrayPort4OutputDescOn, deviceIntelligentIndex=deviceIntelligentIndex, sensorTankSenderDelayLowCritical=sensorTankSenderDelayLowCritical, sensorProbeDrycontactArrayPort5OpenURL=sensorProbeDrycontactArrayPort5OpenURL, spTemperatureArray8_4Status=spTemperatureArray8_4Status, doorSensorStatus=doorSensorStatus, deviceDryContactWorstSensotStatus=deviceDryContactWorstSensotStatus, deviceLicensePmsAvailable=deviceLicensePmsAvailable, temperatureSensorStatus=temperatureSensorStatus, sensorThermostatLowCriticalDesc=sensorThermostatLowCriticalDesc, waterRopeSensorEntry=waterRopeSensorEntry, cfgVPNPassword=cfgVPNPassword, sensorTemperatureArrayIndex=sensorTemperatureArrayIndex, sensorProbeThermostatTemperatureArrayPort1Value=sensorProbeThermostatTemperatureArrayPort1Value, commonOnColor=commonOnColor, commonSensorLowCriticalDescription=commonSensorLowCriticalDescription, spVRMS2Status=spVRMS2Status, sensorProbeCameraResolution=sensorProbeCameraResolution, sensorProbeEnergyRearm=sensorProbeEnergyRearm, current4to20mASensorAmountBaseVoltage=current4to20mASensorAmountBaseVoltage, sensorAcknowledge=sensorAcknowledge, powerStatus=powerStatus, spSummary=spSummary, current4to20mASensorDelayLowCritical=current4to20mASensorDelayLowCritical, spRelayArray4_2Status=spRelayArray4_2Status, sensorProbeIRMSSensor=sensorProbeIRMSSensor, waterRopeSensorLeakLocation=waterRopeSensorLeakLocation, spRelayArray4_8Status=spRelayArray4_8Status, sensorProbeRelayArrayPort5Status=sensorProbeRelayArrayPort5Status, sensorProbeEnergyLowCritical=sensorProbeEnergyLowCritical, sensorTemperatureType=sensorTemperatureType, sirenSensorEntry=sirenSensorEntry, thermostatSensorDelayHighWarning=thermostatSensorDelayHighWarning, sensorHumidityPort=sensorHumidityPort, drycontactId=drycontactId, sensorProbeSoundDetectorRearm=sensorProbeSoundDetectorRearm, sensorProbeDrycontactArrayPort5Table=sensorProbeDrycontactArrayPort5Table, fuelSensorSensorErrorDesc=fuelSensorSensorErrorDesc, sensorProbeRelayArrayPort3URL=sensorProbeRelayArrayPort3URL, relayEntry=relayEntry, virtualAnalogSensorContTimeLowWarning=virtualAnalogSensorContTimeLowWarning, cfgSNMPv3PrivProtocol=cfgSNMPv3PrivProtocol, drycontactStatus=drycontactStatus, fuelValue=fuelValue, sensorProbeMailLastStatus=sensorProbeMailLastStatus, dcVoltageSensorDescription=dcVoltageSensorDescription, sensorProbeDrycontactArrayPort4ManualOutputCycleTime=sensorProbeDrycontactArrayPort4ManualOutputCycleTime, sensorProbeTemperatureArrayPort4GoOnline=sensorProbeTemperatureArrayPort4GoOnline, spTemperatureArray4_4Status=spTemperatureArray4_4Status, humidityHighCriticalDescription=humidityHighCriticalDescription, dryContactSensorOnColor=dryContactSensorOnColor, sensorTemperatureArrayDelayError=sensorTemperatureArrayDelayError, sensorProbeHumidityRelayActiveStatus=sensorProbeHumidityRelayActiveStatus, current4to20mASensorDescription=current4to20mASensorDescription, sensorProbeIRMSLowCritical=sensorProbeIRMSLowCritical, sensorAirflowSubPort=sensorAirflowSubPort, sensorProbeSwitchGoOnline=sensorProbeSwitchGoOnline, sensorProbeTemperatureArrayPort8Entry=sensorProbeTemperatureArrayPort8Entry, waterSensorCriticalDesc=waterSensorCriticalDesc, sensorProbeReloadNetwork=sensorProbeReloadNetwork, tankSenderDelayHighWarning=tankSenderDelayHighWarning, spTemperature6Status=spTemperature6Status, sensorWaterRopeLeakLocation=sensorWaterRopeLeakLocation, sensorDCvoltageLowWarningColor=sensorDCvoltageLowWarningColor, sensorSecurityCriticalDesc=sensorSecurityCriticalDesc, sensorProbeTemperatureArrayPort2Value=sensorProbeTemperatureArrayPort2Value, spSwitch28Status=spSwitch28Status, sensorPowerSensorErrorColor=sensorPowerSensorErrorColor, sensorHumidityStatus=sensorHumidityStatus, sensor4to20mAHighWarning=sensor4to20mAHighWarning, sensorProbeDrycontactArrayPort8Description=sensorProbeDrycontactArrayPort8Description, spRelayArray5Status=spRelayArray5Status, temperatureArraySensorType=temperatureArraySensorType, deviceLicenseIndex=deviceLicenseIndex, spVirtual7Status=spVirtual7Status, sensorProbeWattHoursSensorNumber=sensorProbeWattHoursSensorNumber, sensorProbeTemperatureArrayPort5ContTimeHighWarning=sensorProbeTemperatureArrayPort5ContTimeHighWarning, temperatureArraySensorDescription=temperatureArraySensorDescription, sensor4to20mAHighWarningDesc=sensor4to20mAHighWarningDesc, spVirtual3Status=spVirtual3Status, sensorProbeIRMSSensorTable=sensorProbeIRMSSensorTable, sensorProbeThermostatTemperatureArrayPort4HighLimit1=sensorProbeThermostatTemperatureArrayPort4HighLimit1, doorSensorDescription=doorSensorDescription, spTemperatureArray1_6Status=spTemperatureArray1_6Status, spVirtual17Status=spVirtual17Status, sensorProbeVirtualAnalogContTimeHighWarning=sensorProbeVirtualAnalogContTimeHighWarning, humiditySensorEntry=humiditySensorEntry, sensorPowerStatus=sensorPowerStatus, tankSenderLowWarningDescription=tankSenderLowWarningDescription, sensorSmokeTable=sensorSmokeTable, sensorDeviceIndex=sensorDeviceIndex, commonSensorSensorErrorColor=commonSensorSensorErrorColor, thermostatSensorSubPort=thermostatSensorSubPort, current4to20mASensorHighWarning=current4to20mASensorHighWarning, temperatureArraySensorSensorErrorDesc=temperatureArraySensorSensorErrorDesc, sensorProbeTemperatureArrayPort2Status=sensorProbeTemperatureArrayPort2Status, spStatusSoundDetector=spStatusSoundDetector, sensorAirflowIndex=sensorAirflowIndex, sensorPowerInterval=sensorPowerInterval, licVPN=licVPN, thermostatSensorSensorErrorDesc=thermostatSensorSensorErrorDesc, devicePowerMeterWorstSensotStatus=devicePowerMeterWorstSensotStatus, sensorProbeThermostatTemperatureArrayPort8HighLimitAction1=sensorProbeThermostatTemperatureArrayPort8HighLimitAction1, tankSenderSensorNormalDesc=tankSenderSensorNormalDesc, current4to20mAAmountMaxVoltage=current4to20mAAmountMaxVoltage, spSwitch64Status=spSwitch64Status, sensorHumidityLowCriticalDesc=sensorHumidityLowCriticalDesc, spVirtual9Status=spVirtual9Status, relaySensorControlMode=relaySensorControlMode)
mibBuilder.exportSymbols("SPAGENT-MIB", sensorThermostatDisplayStyle=sensorThermostatDisplayStyle, sensorPowerValueFormatFloat=sensorPowerValueFormatFloat, spVirtualStatus=spVirtualStatus, sensorRelayPort=sensorRelayPort, sensorProbeIRMSOpenURL=sensorProbeIRMSOpenURL, sensorAirflowLowCriticalColor=sensorAirflowLowCriticalColor, sensorProbeThermostatTemperatureArrayPort6HighLimit2=sensorProbeThermostatTemperatureArrayPort6HighLimit2, acVoltageSensorEntry=acVoltageSensorEntry, humiditySensorLowWarningColor=humiditySensorLowWarningColor, spRelayArray8_7Status=spRelayArray8_7Status, sensorProbeDrycontactArrayPort2Index=sensorProbeDrycontactArrayPort2Index, sensorFuelLowWarningColor=sensorFuelLowWarningColor, temperatureArraySensorStatus=temperatureArraySensorStatus, sensorDCvoltagePort=sensorDCvoltagePort, sensorProbeVRMSHighWarning=sensorProbeVRMSHighWarning, sensorProbeTemperatureArrayPort6URL=sensorProbeTemperatureArrayPort6URL, sensorDryContactNormalState=sensorDryContactNormalState, sensorNormalColor=sensorNormalColor, humiditySensorPercent=humiditySensorPercent, sensorProbeSyslogPort=sensorProbeSyslogPort, temperatureArrayLowCritical=temperatureArrayLowCritical, sensorProbeDefaultGateway=sensorProbeDefaultGateway, sensorProbeThermostatTemperatureArrayPort8LowLimit1=sensorProbeThermostatTemperatureArrayPort8LowLimit1, spTemperatureArray8_7Status=spTemperatureArray8_7Status, tankSenderLowCritical=tankSenderLowCritical, drycontactControlMode=drycontactControlMode, sensorProbeRelayArrayPort2ManualRelayAction=sensorProbeRelayArrayPort2ManualRelayAction, sensorProbeVRMSContTimeHighWarning=sensorProbeVRMSContTimeHighWarning, sensorProbeTypeNoSignalName=sensorProbeTypeNoSignalName, temperatureSensorDegree=temperatureSensorDegree, tankSenderSensorRaw=tankSenderSensorRaw, sensorRelayDeviceIndex=sensorRelayDeviceIndex, acVoltageSensorIndex=acVoltageSensorIndex, sensorProbeHumiditySirenAction=sensorProbeHumiditySirenAction, acVoltageTable=acVoltageTable, sensorProbeThermostatMode=sensorProbeThermostatMode, temperatureSerialNumber=temperatureSerialNumber, sensorProbeVirtualAnalogContTimeHighCritical=sensorProbeVirtualAnalogContTimeHighCritical, spSwitch51Status=spSwitch51Status, sensor4to20mAPort=sensor4to20mAPort, sensorProbeSwitchContTimeNormal=sensorProbeSwitchContTimeNormal, spSwitch17Status=spSwitch17Status, motionDescription=motionDescription, sensorProbeTemperatureArrayPort7LowCritical=sensorProbeTemperatureArrayPort7LowCritical, deviceLicensePmsUsed=deviceLicensePmsUsed, spTemperatureArray7_5Status=spTemperatureArray7_5Status, sensorProbeTypeThermostatName=sensorProbeTypeThermostatName, sensorIntelligentPort5GoOnline=sensorIntelligentPort5GoOnline, sensorHumidityHighCriticalDesc=sensorHumidityHighCriticalDesc, spRelayArray1_1Status=spRelayArray1_1Status, humiditySensorDelayLowCritical=humiditySensorDelayLowCritical, temperatureHighCriticalColor=temperatureHighCriticalColor, airflowLowCriticalDescription=airflowLowCriticalDescription, sensorProbeTemperatureArrayPort2LowWarning=sensorProbeTemperatureArrayPort2LowWarning, sensorDCvoltageRaw=sensorDCvoltageRaw, sensorProbeDrycontactArrayPort3Direction=sensorProbeDrycontactArrayPort3Direction, sensorProbeTemperatureArrayPort3Description=sensorProbeTemperatureArrayPort3Description, sirenSensorIndex=sirenSensorIndex, sensorProbeDrycontactArrayPort3Description=sensorProbeDrycontactArrayPort3Description, temperatureDescription=temperatureDescription, sensorProbeTemperatureArrayPort8ContTimeHighWarning=sensorProbeTemperatureArrayPort8ContTimeHighWarning, fuelLowCritical=fuelLowCritical, sensorProbeSoftMotionContTimeHighCritical=sensorProbeSoftMotionContTimeHighCritical, sensorProbeVirtualSwitchSensorTable=sensorProbeVirtualSwitchSensorTable, sensorProbeTypeRelayName=sensorProbeTypeRelayName, sensorProbeThermostatTemperatureArrayPort4Mode=sensorProbeThermostatTemperatureArrayPort4Mode, dcVoltageLowCriticalDescription=dcVoltageLowCriticalDescription, tankSenderHighWarningDescription=tankSenderHighWarningDescription, sensorPowerMaxValue=sensorPowerMaxValue, device=device, securitySensorIndex=securitySensorIndex, waterTable=waterTable, sensorProbeAirFlowNormalState=sensorProbeAirFlowNormalState, cfgDHCPHostName=cfgDHCPHostName, virtualSwitchSensorDescriptionCritical=virtualSwitchSensorDescriptionCritical, sensorProbeSoundDetectorMicSensitivity=sensorProbeSoundDetectorMicSensitivity, sensorTemperatureArrayDelayHighCritical=sensorTemperatureArrayDelayHighCritical, dcVoltageSensorEntry=dcVoltageSensorEntry, sensorProbeRelayArrayPort5Description=sensorProbeRelayArrayPort5Description, motionSensorDeviceIndex=motionSensorDeviceIndex, waterRopeSensorImpedance=waterRopeSensorImpedance, spTemperatureArray1_2Status=spTemperatureArray1_2Status, sensorProbeVRMSSirenOnPort=sensorProbeVRMSSirenOnPort, current4to20mASensorSensorErrorDesc=current4to20mASensorSensorErrorDesc, spAnalogueStatus=spAnalogueStatus, sensorProbeDrycontactArrayPort6ManualOutputCycleTime=sensorProbeDrycontactArrayPort6ManualOutputCycleTime, humiditySensorHighWarningColor=humiditySensorHighWarningColor, sensorWaterPort=sensorWaterPort, deviceEntry=deviceEntry, spAnalogue5Status=spAnalogue5Status, sensorProbeDrycontactArrayPort3Table=sensorProbeDrycontactArrayPort3Table, airflowPort=airflowPort, sensorProbeRelayArrayPort8Status=sensorProbeRelayArrayPort8Status, humiditySensorDisplayStyle=humiditySensorDisplayStyle, temperatureArrayIndex=temperatureArrayIndex, tankSenderSensorNormalColor=tankSenderSensorNormalColor, cfgWEBPort=cfgWEBPort, powerSensorErrorDescription=powerSensorErrorDescription, thermostatSensorSensorErrorColor=thermostatSensorSensorErrorColor, sensorDCvoltageHighWarningColor=sensorDCvoltageHighWarningColor, humiditySensorHighCritical=humiditySensorHighCritical, spRelayArray4_6Status=spRelayArray4_6Status, sensorProbeTemperatureArrayPort1OpenURL=sensorProbeTemperatureArrayPort1OpenURL, sensorDCvoltageSensorErrorDesc=sensorDCvoltageSensorErrorDesc, cfgSNMPv3UserName=cfgSNMPv3UserName, sensorProbeTemperatureArrayPort7Entry=sensorProbeTemperatureArrayPort7Entry, sensorProbeTemperatureArrayPort7=sensorProbeTemperatureArrayPort7, sensorProbeDrycontactArrayPort8ManualOutputAction=sensorProbeDrycontactArrayPort8ManualOutputAction, sensorTankSenderId=sensorTankSenderId, devicePowerMeterInfo=devicePowerMeterInfo, sensorProbeThermostatTemperatureArrayPort3HighLimit1=sensorProbeThermostatTemperatureArrayPort3HighLimit1, sensorProbeThermostatTemperatureArrayPort4HighLimitAction2=sensorProbeThermostatTemperatureArrayPort4HighLimitAction2, humiditySensorDelayHighCritical=humiditySensorDelayHighCritical, relaySensorGoOffline=relaySensorGoOffline, virtualAnalogSensorHighWarning=virtualAnalogSensorHighWarning, sensorProbeTempContTimeSensorError=sensorProbeTempContTimeSensorError, sensorProbeTemperatureArrayPort3URL=sensorProbeTemperatureArrayPort3URL, sensorProbePTZBrand=sensorProbePTZBrand, sensorProbeRelayArrayPort2=sensorProbeRelayArrayPort2, sensorFuelDelayError=sensorFuelDelayError, spRelayArray2_5Status=spRelayArray2_5Status, sensorProbeThermostatTemperatureArrayPort3LowLimit2=sensorProbeThermostatTemperatureArrayPort3LowLimit2, sensorProbeMailSMTP=sensorProbeMailSMTP, current4to20mASensorDelayError=current4to20mASensorDelayError, waterSensorSubPort=waterSensorSubPort, cfgDefaultDNS=cfgDefaultDNS, drycontactSubPort=drycontactSubPort, spRelayArray1_6Status=spRelayArray1_6Status, sensorProbeTemperatureArrayPort1Calendar=sensorProbeTemperatureArrayPort1Calendar, spTemperatureArray8Status=spTemperatureArray8Status, sensorTemperatureArraySubPort=sensorTemperatureArraySubPort, sensorAirflowHighCriticalDesc=sensorAirflowHighCriticalDesc, virtualAnalogSensorContTimeSensorError=virtualAnalogSensorContTimeSensorError, sensorProbeRelayArrayPort5Online=sensorProbeRelayArrayPort5Online, powerSensorNormalDesc=powerSensorNormalDesc, dcVoltageSensorDelayHighWarning=dcVoltageSensorDelayHighWarning, humidityLowCriticalColor=humidityLowCriticalColor, sensorProbeVirtualSwitchOnline=sensorProbeVirtualSwitchOnline, sensorMotionEntry=sensorMotionEntry, sensorProbeSyslogDestIP=sensorProbeSyslogDestIP, sensorTemperatureTable=sensorTemperatureTable, sensorProbeIRMSDelayError=sensorProbeIRMSDelayError, spTemperatureArray1Status=spTemperatureArray1Status, spSwitch29Status=spSwitch29Status, sensorProbeDrycontactArrayPort4OutputDescOff=sensorProbeDrycontactArrayPort4OutputDescOff, sensorProbeAllowIPChange=sensorProbeAllowIPChange, sensorAirflowRearm=sensorAirflowRearm, sensorDryContactPort3GoOnline=sensorDryContactPort3GoOnline, temperatureArrayStatus=temperatureArrayStatus, waterRopeNormalDescription=waterRopeNormalDescription, dcVoltageStatus=dcVoltageStatus, sensorProbeTemperatureArrayPort6OpenURL=sensorProbeTemperatureArrayPort6OpenURL, licAccessUsersTotal=licAccessUsersTotal, sensorProbeVRMSContTimeLowCritical=sensorProbeVRMSContTimeLowCritical, spWattStatus=spWattStatus, sensorProbeTemperatureArrayPort5ContTimeSensorError=sensorProbeTemperatureArrayPort5ContTimeSensorError, deviceLicenseEntry=deviceLicenseEntry, sensorAirflowDelayLowWarning=sensorAirflowDelayLowWarning, temperatureArraySensorDelayLowCritical=temperatureArraySensorDelayLowCritical, motionStatus=motionStatus, sirenSensorPort=sirenSensorPort, sensorProbeDrycontactArrayPort4Number=sensorProbeDrycontactArrayPort4Number, sensorWaterRopeDescription=sensorWaterRopeDescription, licVSensTotal=licVSensTotal, sensorHumidityHighWarningColor=sensorHumidityHighWarningColor, sensorProbeRelayArrayPort3Description=sensorProbeRelayArrayPort3Description, sensorProbeDrycontactArrayPort7OutputDescOn=sensorProbeDrycontactArrayPort7OutputDescOn, fuelDelayNormal=fuelDelayNormal, humiditySensorSensorErrorDesc=humiditySensorSensorErrorDesc, humidityUnit=humidityUnit, sensorThermostatStatus=sensorThermostatStatus, spCriticalStatus=spCriticalStatus, sensorProbeVRMSOpenURL=sensorProbeVRMSOpenURL, sensorProbeTemperatureArrayPort2ContTimeHighWarning=sensorProbeTemperatureArrayPort2ContTimeHighWarning, sensorProbeTemperatureArrayPort5Value=sensorProbeTemperatureArrayPort5Value, sensorProbeTempOpenURL=sensorProbeTempOpenURL, motionGoOffline=motionGoOffline, motionSensorId=motionSensorId, sensorProbeDrycontactArrayPort5URL=sensorProbeDrycontactArrayPort5URL, sensorDCvoltageIndex=sensorDCvoltageIndex, sensorProbeRelayArrayPort3RelayCycleTime=sensorProbeRelayArrayPort3RelayCycleTime, airflowSensorSubPort=airflowSensorSubPort, dcVoltageGoOffline=dcVoltageGoOffline, sensorProbeTemperatureArrayPort1=sensorProbeTemperatureArrayPort1, sensorProbeRelayArrayPort5ControlMode=sensorProbeRelayArrayPort5ControlMode, spRelayArray8Status=spRelayArray8Status, powerUnit=powerUnit, sensor4to20mAAmountBaseVoltage=sensor4to20mAAmountBaseVoltage, sirenSensorSubPort=sirenSensorSubPort, spRelayArray7_1Status=spRelayArray7_1Status, sensorProbeDrycontactArrayPort2OpenURL=sensorProbeDrycontactArrayPort2OpenURL, spTemperatureArray1_4Status=spTemperatureArray1_4Status, sensorProbeThermostatLowLimitAction1=sensorProbeThermostatLowLimitAction1, sensorThermostatAcknowledge=sensorThermostatAcknowledge, sensorDCvoltageNormalDesc=sensorDCvoltageNormalDesc, thermostatSensorDegree=thermostatSensorDegree, waterRopeSensorIndex=waterRopeSensorIndex, sensorProbeHumiditySendNormalMail=sensorProbeHumiditySendNormalMail, spVirtual18Status=spVirtual18Status, sensorMotionSubPort=sensorMotionSubPort, sensorProbeThermostatTemperatureArrayPort7Value=sensorProbeThermostatTemperatureArrayPort7Value, sensorProbeNoCameraStatus=sensorProbeNoCameraStatus, drycontactNormalDescription=drycontactNormalDescription, virtualAnalogSensorOnline=virtualAnalogSensorOnline, sensorProbeVRMSOnline=sensorProbeVRMSOnline, sensorTemperatureGoOffline=sensorTemperatureGoOffline, dcVoltageSensorId=dcVoltageSensorId, sensorDCvoltageHighWarningDesc=sensorDCvoltageHighWarningDesc, sensorProbeTemperatureArrayPort2LowCritical=sensorProbeTemperatureArrayPort2LowCritical, sensorTankSenderLowCriticalColor=sensorTankSenderLowCriticalColor, sensorProbeSwitchTable=sensorProbeSwitchTable, sensorProbeTemperatureArrayPort3DegreeType=sensorProbeTemperatureArrayPort3DegreeType, licenseVSens=licenseVSens, sensorProbeEnergySirenCycleTime=sensorProbeEnergySirenCycleTime, sensorProbeThermostatTemperatureArrayPort6Value=sensorProbeThermostatTemperatureArrayPort6Value, sensorProbeRelayArrayPort3Entry=sensorProbeRelayArrayPort3Entry, sensorProbeSoundDetectorHighWarning=sensorProbeSoundDetectorHighWarning, commonSensorHighWarningDescription=commonSensorHighWarningDescription, licAddKey=licAddKey, sensorProbeThermostatTemperatureArrayPort8HighLimit2=sensorProbeThermostatTemperatureArrayPort8HighLimit2, relayOffDesc=relayOffDesc, sensorErrorColor=sensorErrorColor, sensorDCvoltageDelayError=sensorDCvoltageDelayError, sensorProbeDrycontactArrayPort7=sensorProbeDrycontactArrayPort7, dryContactSensorId=dryContactSensorId, temperatureType=temperatureType, sensorProbeThermostatTemperatureArrayPort2HighLimit2=sensorProbeThermostatTemperatureArrayPort2HighLimit2, spTemperatureArray6_3Status=spTemperatureArray6_3Status, sensorProbeDrycontactArrayPort3ManualOutputAction=sensorProbeDrycontactArrayPort3ManualOutputAction, spTemperatureArray6_8Status=spTemperatureArray6_8Status, tankSenderAcknowledge=tankSenderAcknowledge, spVRMS5Status=spVRMS5Status, sensorProbeDrycontactArrayPort5ManualOutputAction=sensorProbeDrycontactArrayPort5ManualOutputAction, cfgDevicePassword=cfgDevicePassword, sensorProbeDrycontactArrayPort1OutputDescOff=sensorProbeDrycontactArrayPort1OutputDescOff, temperatureSensorOffset=temperatureSensorOffset, sensorProbeHumidityDatacollectType=sensorProbeHumidityDatacollectType, sensorProbeTempStatus=sensorProbeTempStatus, sensorProbeIRMSGoOnline=sensorProbeIRMSGoOnline, deviceLicenseVrtUsed=deviceLicenseVrtUsed, sensorSecurityCriticalColor=sensorSecurityCriticalColor, dryContactSensorEntry=dryContactSensorEntry, sensorProbeTemperatureArrayPort4LowWarning=sensorProbeTemperatureArrayPort4LowWarning, fuelSensorSensorErrorColor=fuelSensorSensorErrorColor, spTemperatureArray2_5Status=spTemperatureArray2_5Status, acVoltageDescription=acVoltageDescription, sensorProbeThermostatTemperatureArrayPort4LowLimitAction1=sensorProbeThermostatTemperatureArrayPort4LowLimitAction1, fuelSensorEntry=fuelSensorEntry, sensorProbeThermostatTemperatureArrayPort4Description=sensorProbeThermostatTemperatureArrayPort4Description, licSNMPv3=licSNMPv3, sensorDryContactPort5GoOnline=sensorDryContactPort5GoOnline, sensor4to20mASensorErrorDesc=sensor4to20mASensorErrorDesc, sensorAirflowDelayNormal=sensorAirflowDelayNormal, tankSenderSensorRearm=tankSenderSensorRearm)
mibBuilder.exportSymbols("SPAGENT-MIB", humidityAcknowledge=humidityAcknowledge, temperatureArrayHighWarning=temperatureArrayHighWarning, spTemperature4Status=spTemperature4Status, spVirtual2Status=spVirtual2Status, commonSensorGoOffline=commonSensorGoOffline, current4to20mASensorTable=current4to20mASensorTable, airflowSensorDelayError=airflowSensorDelayError, sensor4to20mABaseVoltage=sensor4to20mABaseVoltage, sensorProbeThermostatTemperatureArrayPort7Mode=sensorProbeThermostatTemperatureArrayPort7Mode, sensorProbeDrycontactArrayPort7GoOnline=sensorProbeDrycontactArrayPort7GoOnline, sensorProbeDrycontactArrayPort8OutputDescOff=sensorProbeDrycontactArrayPort8OutputDescOff, sensorProbeTemperatureArrayPort1LowCritical=sensorProbeTemperatureArrayPort1LowCritical, sensorWaterSubPort=sensorWaterSubPort, waterRopeDescription=waterRopeDescription, temperatureArraySensorDelayHighCritical=temperatureArraySensorDelayHighCritical, sensorProbeTypeFuelLevelName=sensorProbeTypeFuelLevelName, sensorProbeThermostatTemperatureArrayPort6NormalAction1=sensorProbeThermostatTemperatureArrayPort6NormalAction1, thermostatSensorHighCritical=thermostatSensorHighCritical, sensorThermostatDescription=sensorThermostatDescription, spEnergy8Status=spEnergy8Status, sensorTemperatureArrayAcknowledge=sensorTemperatureArrayAcknowledge, motionSensorAcknowledge=motionSensorAcknowledge, sensorDCvoltageLowCritical=sensorDCvoltageLowCritical, sensorWaterRopeCriticalDesc=sensorWaterRopeCriticalDesc, sensorProbeThermostatTemperatureArrayPort6Mode=sensorProbeThermostatTemperatureArrayPort6Mode, current4to20mAHighCriticalDescription=current4to20mAHighCriticalDescription, fuelSensorValue=fuelSensorValue, sensorProbeTemperatureArrayPort4Status=sensorProbeTemperatureArrayPort4Status, sensorProbeMailJpgInline=sensorProbeMailJpgInline, cfgIPAddress=cfgIPAddress, spTemperature5Status=spTemperature5Status, sensorProbePowerMeterCountRecievedPacket=sensorProbePowerMeterCountRecievedPacket, temperatureArrayHighCriticalDescription=temperatureArrayHighCriticalDescription, temperatureArrayRearm=temperatureArrayRearm, sensorRelayDescription=sensorRelayDescription, cfgServerIntegrationPort=cfgServerIntegrationPort, sensorPowerHighCriticalDesc=sensorPowerHighCriticalDesc, commonSensorLowWarningDescription=commonSensorLowWarningDescription, sensorProbeRelayArrayPort7OpenURL=sensorProbeRelayArrayPort7OpenURL, sirenControlMode=sirenControlMode, sensorProbeRelayArrayPort2ControlMode=sensorProbeRelayArrayPort2ControlMode, temperatureArraySensorGoOffline=temperatureArraySensorGoOffline, sensorProbeTemperatureArrayPort5GoOnline=sensorProbeTemperatureArrayPort5GoOnline, spTemperatureArray6_6Status=spTemperatureArray6_6Status, sensorWaterRopeImpedance=sensorWaterRopeImpedance, spRelayArray3Status=spRelayArray3Status, spTemperatureArray5_7Status=spTemperatureArray5_7Status, sensorProbeDrycontactArrayPort1OutputDescOn=sensorProbeDrycontactArrayPort1OutputDescOn, deviceLicenseTable=deviceLicenseTable, sensorProbeSoundDetectorContTimeHighWarning=sensorProbeSoundDetectorContTimeHighWarning, sensorDryContactDirection=sensorDryContactDirection, spEnergy6Status=spEnergy6Status, thermostatSensorDelayError=thermostatSensorDelayError, spTemperatureArray5Status=spTemperatureArray5Status, sensorProbeSupportMailRcpt=sensorProbeSupportMailRcpt, dcVoltageSensorDelayLowWarning=dcVoltageSensorDelayLowWarning, sensorPowerLowWarning=sensorPowerLowWarning, temperatureArrayLowCriticalDescription=temperatureArrayLowCriticalDescription, deviceLicenseExpCount=deviceLicenseExpCount, powerSensorHighWarningDesc=powerSensorHighWarningDesc, dcVoltageAmountBaseVoltage=dcVoltageAmountBaseVoltage, sensorDryContactPort11GoOnline=sensorDryContactPort11GoOnline, sensorOffColor=sensorOffColor, cfgServerIntegrationEnabled=cfgServerIntegrationEnabled, sensorProbeHumidityEmailInterval=sensorProbeHumidityEmailInterval, thermostatSensorHighWarningDesc=thermostatSensorHighWarningDesc, sensorProbeIRMSContTimeHighCritical=sensorProbeIRMSContTimeHighCritical, fuelLowWarning=fuelLowWarning, temperatureUnit=temperatureUnit, sensorSirenStatus=sensorSirenStatus, sensorProbeTemperatureArrayPort4Calendar=sensorProbeTemperatureArrayPort4Calendar, temperatureArraySensorHighCriticalDesc=temperatureArraySensorHighCriticalDesc, dcVoltageNormalDescription=dcVoltageNormalDescription, drycontactNormalState=drycontactNormalState, tankSenderDelayLowWarning=tankSenderDelayLowWarning, sensorProbeDrycontactArrayPort4ContTimeNormal=sensorProbeDrycontactArrayPort4ContTimeNormal, airflowSensorNormalDesc=airflowSensorNormalDesc, akcp=akcp, airflowSensorDeviceIndex=airflowSensorDeviceIndex, sensorProbeThermostatTemperatureArrayPort5Index=sensorProbeThermostatTemperatureArrayPort5Index, sensorProbeDNSServer=sensorProbeDNSServer, sensorTemperatureArrayDescription=sensorTemperatureArrayDescription, powerLowCriticalColor=powerLowCriticalColor, sensorFuelGoOffline=sensorFuelGoOffline, sensorProbeStatusNumber=sensorProbeStatusNumber, sensorProbeVirtualAnalogSensor=sensorProbeVirtualAnalogSensor, powerSensorTable=powerSensorTable, current4to20mADelayLowWarning=current4to20mADelayLowWarning, sensorProbeRelayArrayPort8=sensorProbeRelayArrayPort8, spIRMS8Status=spIRMS8Status, drycontactTable=drycontactTable, acVoltageNormalDescription=acVoltageNormalDescription, sensorProbeTemperatureArrayPort7ContTimeLowWarning=sensorProbeTemperatureArrayPort7ContTimeLowWarning, doorSensorTable=doorSensorTable, spSwitch59Status=spSwitch59Status, sensorDryContactOffDesc=sensorDryContactOffDesc, sensorProbeThermostatTemperatureArrayPort5LowLimitAction1=sensorProbeThermostatTemperatureArrayPort5LowLimitAction1, sensorDCvoltageStatus=sensorDCvoltageStatus, spSwitch38Status=spSwitch38Status, sensorProbeTempDescription=sensorProbeTempDescription, sensorDCvoltageDelayNormal=sensorDCvoltageDelayNormal, sensorProbeVirtualSwitchOpenURL=sensorProbeVirtualSwitchOpenURL, sensorWaterRopeIndex=sensorWaterRopeIndex, current4to20mASensorSubPort=current4to20mASensorSubPort, sensorFuelLowCriticalDesc=sensorFuelLowCriticalDesc, sensorTemperatureArraySensorErrorDesc=sensorTemperatureArraySensorErrorDesc, sensorGoOffline=sensorGoOffline, current4to20mASensorUnit=current4to20mASensorUnit, sensorProbeAutoSense=sensorProbeAutoSense, sensorProbeThermostatNormalAction1=sensorProbeThermostatNormalAction1, spTemperatureArray2_7Status=spTemperatureArray2_7Status, waterRopeSensorNormalColor=waterRopeSensorNormalColor, current4to20mALowCriticalColor=current4to20mALowCriticalColor, sensorMotionTable=sensorMotionTable, airflowTable=airflowTable, sensorPowerDeviceIndex=sensorPowerDeviceIndex, current4to20mASensorRearm=current4to20mASensorRearm, deviceIntelligentWorstSensotStatus=deviceIntelligentWorstSensotStatus, dcVoltageSensorHighWarningDesc=dcVoltageSensorHighWarningDesc, sensorProbeVirtualAnalogOpenURL=sensorProbeVirtualAnalogOpenURL, sensorProbeTemperatureArrayPort3Online=sensorProbeTemperatureArrayPort3Online, sensorProbeNotifyBoot=sensorProbeNotifyBoot, sensorTemperatureDelayError=sensorTemperatureDelayError, sensorProbeUntidePassword=sensorProbeUntidePassword, sensorProbeTemperatureArrayPort8Calendar=sensorProbeTemperatureArrayPort8Calendar, fuelSensorLowCriticalDesc=fuelSensorLowCriticalDesc, sensorProbeDrycontactArrayPort6URL=sensorProbeDrycontactArrayPort6URL, temperatureArraySensorSerialNumber=temperatureArraySensorSerialNumber, fuelSensorErrorDescription=fuelSensorErrorDescription, sensor4to20mASensorAcknowledge=sensor4to20mASensorAcknowledge, sensorProbeThermostatTemperatureArrayPort3Description=sensorProbeThermostatTemperatureArrayPort3Description, sensorHighWarningDescription=sensorHighWarningDescription, temperatureDegree=temperatureDegree, cfgGSMInitString=cfgGSMInitString, sensorDCvoltageDelayLowCritical=sensorDCvoltageDelayLowCritical, sensorProbeHumidityStatus=sensorProbeHumidityStatus, sensorDoorOpenPeriod=sensorDoorOpenPeriod, virtualAnalogSensorStatus=virtualAnalogSensorStatus, powerDelayLowWarning=powerDelayLowWarning, sensorProbeRelayArrayPort7RelayDescOff=sensorProbeRelayArrayPort7RelayDescOff, sensorProbeTemperatureArrayPort1Entry=sensorProbeTemperatureArrayPort1Entry, sensorProbeSwitchSirenActiveStatus=sensorProbeSwitchSirenActiveStatus, sensorProbeTemperatureArrayPort2Number=sensorProbeTemperatureArrayPort2Number, sensorFuelUnit=sensorFuelUnit, sensorFuelDelayLowCritical=sensorFuelDelayLowCritical, sensorProbeStatusNumberNotNormal=sensorProbeStatusNumberNotNormal, powerSensorAcknowledge=powerSensorAcknowledge, sensorRelayAcknowledge=sensorRelayAcknowledge, sensorFuelNormalColor=sensorFuelNormalColor, spSensorDescription=spSensorDescription, dcVoltageDelayNormal=dcVoltageDelayNormal, sensorDCvoltageEntry=sensorDCvoltageEntry, thermostatSensorGoOffline=thermostatSensorGoOffline, sensorProbeVRMSDescription=sensorProbeVRMSDescription, sensorProbeDrycontactArrayPort7ContTimeNormal=sensorProbeDrycontactArrayPort7ContTimeNormal, commonPort=commonPort, sensorTankSenderDelayNormal=sensorTankSenderDelayNormal, doorUnlockPeriod=doorUnlockPeriod, dcVoltageDelayHighWarning=dcVoltageDelayHighWarning, spRelayArray1_4Status=spRelayArray1_4Status, sensorProbeDrycontactArrayPort3ContTimeNormal=sensorProbeDrycontactArrayPort3ContTimeNormal, sensorThermostatLowWarning=sensorThermostatLowWarning, dcVoltageSensorErrorDescription=dcVoltageSensorErrorDescription, acVoltageSensorId=acVoltageSensorId, sensorWaterRopeRaw=sensorWaterRopeRaw, sensorProbeOtherSensor=sensorProbeOtherSensor, powerSensorDelayError=powerSensorDelayError, sensorProbeTemperatureArrayPort4DegreeType=sensorProbeTemperatureArrayPort4DegreeType, sensorProbeDrycontactArrayPort5Number=sensorProbeDrycontactArrayPort5Number, sensorProbeDrycontactArrayPort4Entry=sensorProbeDrycontactArrayPort4Entry, powerSensorSubPort=powerSensorSubPort, commonHighCriticalDescription=commonHighCriticalDescription, deviceIntelligentTable=deviceIntelligentTable, motionSensorIndex=motionSensorIndex, thermostatSensorHighWarningColor=thermostatSensorHighWarningColor, cfgDefaultGateway=cfgDefaultGateway, sensorProbeDrycontactArrayPort2OutputDescOn=sensorProbeDrycontactArrayPort2OutputDescOn, dcVoltageHighWarningColor=dcVoltageHighWarningColor, smokeSensorNormalDesc=smokeSensorNormalDesc, sensorFuelDescription=sensorFuelDescription, spAnalogue4Status=spAnalogue4Status, sensorTemperatureArrayLowCriticalColor=sensorTemperatureArrayLowCriticalColor, humiditySensorDelayHighWarning=humiditySensorDelayHighWarning, current4to20mASensorHighWarningDesc=current4to20mASensorHighWarningDesc, sensorProbeRelayArrayPort4OpenURL=sensorProbeRelayArrayPort4OpenURL, sensorTankSenderSensorErrorColor=sensorTankSenderSensorErrorColor, sensorProbeDrycontactArrayPort8Entry=sensorProbeDrycontactArrayPort8Entry, cfgSystemContact=cfgSystemContact, sensorAirflowLowWarningColor=sensorAirflowLowWarningColor, dcVoltageSensorLowCriticalColor=dcVoltageSensorLowCriticalColor, sensorThermostatDelayNormal=sensorThermostatDelayNormal, airflowHighCriticalDescription=airflowHighCriticalDescription, sensorProbeDrycontactArrayPort7OpenURL=sensorProbeDrycontactArrayPort7OpenURL, sensorProbeDrycontactArrayPort4Direction=sensorProbeDrycontactArrayPort4Direction, smokeStatus=smokeStatus, smokeSensorEntry=smokeSensorEntry, sensorSirenManualCycleTime=sensorSirenManualCycleTime, doorSensorEntry=doorSensorEntry, sensorProbeDrycontactArrayPort7ControlMode=sensorProbeDrycontactArrayPort7ControlMode, sensorProbeJpegQualityFactor=sensorProbeJpegQualityFactor, secSensor=secSensor, powerDisplayStyle=powerDisplayStyle, sensorProbeCameraServerClientGoOnline=sensorProbeCameraServerClientGoOnline, sensorProbeTemperatureArrayPort4URL=sensorProbeTemperatureArrayPort4URL, spRelayArray6_6Status=spRelayArray6_6Status, temperatureHighWarning=temperatureHighWarning, current4to20mAValue=current4to20mAValue, sensorProbeThermostatTemperatureArrayPort4Online=sensorProbeThermostatTemperatureArrayPort4Online, sensorHumidityRaw=sensorHumidityRaw, sensorProbeRelayArrayPort7ManualRelayCycleTime=sensorProbeRelayArrayPort7ManualRelayCycleTime, sensorProbeSwitchWaterRopeRaw=sensorProbeSwitchWaterRopeRaw, sensorSmokeNormalDesc=sensorSmokeNormalDesc, drycontactIndex=drycontactIndex, securityTable=securityTable, waterAcknowledge=waterAcknowledge, current4to20mAHighCritical=current4to20mAHighCritical, spRelayArray3_1Status=spRelayArray3_1Status, powerSensorSensorErrorColor=powerSensorSensorErrorColor, sensorProbeHumidityContTimeHighCritical=sensorProbeHumidityContTimeHighCritical, current4to20mAId=current4to20mAId, sensorProbeVirtualAnalogStatus=sensorProbeVirtualAnalogStatus, powerSensorDescription=powerSensorDescription, current4to20mASensorPort=current4to20mASensorPort, sensorPowerDelayHighWarning=sensorPowerDelayHighWarning, sensorProbeIDCVErrorFlag=sensorProbeIDCVErrorFlag, sensorProbeVRMSDelayError=sensorProbeVRMSDelayError, current4to20mASensorHighCritical=current4to20mASensorHighCritical, commonSubPort=commonSubPort, airflowSensorEntry=airflowSensorEntry, virtualAnalogSensorContTimeHighWarning=virtualAnalogSensorContTimeHighWarning, sensorProbeThermostatTemperatureArrayPort6Description=sensorProbeThermostatTemperatureArrayPort6Description, dcVoltageJumper=dcVoltageJumper, sensor4to20mADescription=sensor4to20mADescription, commonSensorDeviceIndex=commonSensorDeviceIndex, sensorProbeHumidityOpenURL=sensorProbeHumidityOpenURL, sensor4to20mALowCriticalDesc=sensor4to20mALowCriticalDesc, sensorProbeVirtualAnalogURL=sensorProbeVirtualAnalogURL, temperatureSensorEntry=temperatureSensorEntry, sensorProbeTemperatureArrayPort2ContTimeSensorError=sensorProbeTemperatureArrayPort2ContTimeSensorError, sensorProbeVRMSSirenCycleTime=sensorProbeVRMSSirenCycleTime, tankSenderSensorHighWarningColor=tankSenderSensorHighWarningColor, sensorProbeTemperatureArrayPort8ContTimeNormal=sensorProbeTemperatureArrayPort8ContTimeNormal, sensorProbeDrycontactArrayPort8URL=sensorProbeDrycontactArrayPort8URL, sensorProbeDrycontactArrayPort3ManualOutputCycleTime=sensorProbeDrycontactArrayPort3ManualOutputCycleTime, config=config, commonStatus=commonStatus, spTemperatureArray2_6Status=spTemperatureArray2_6Status, sensor4to20mAStatus=sensor4to20mAStatus, sensorProbeDetail=sensorProbeDetail, sensorThermostatRearm=sensorThermostatRearm, sensorTankSenderDelayLowWarning=sensorTankSenderDelayLowWarning, sensorDCvoltageLowWarning=sensorDCvoltageLowWarning, sensorProbeTypeDrycontactInoutName=sensorProbeTypeDrycontactInoutName, spVRMS1Status=spVRMS1Status)
mibBuilder.exportSymbols("SPAGENT-MIB", spSwitch67Status=spSwitch67Status, cfgGSMLogin=cfgGSMLogin, temperatureSensorErrorColor=temperatureSensorErrorColor, sensorHumiditySensorErrorColor=sensorHumiditySensorErrorColor, sensorProbeDrycontactArrayPort2URL=sensorProbeDrycontactArrayPort2URL, sensorFuelValue=sensorFuelValue, smokeIndex=smokeIndex, sensorProbeTypeThermocoupleName=sensorProbeTypeThermocoupleName, securitySensorEntry=securitySensorEntry, sensorProbeDrycontactArrayPort8Table=sensorProbeDrycontactArrayPort8Table, sensorProbeThermostatGoOnline=sensorProbeThermostatGoOnline, powerHighWarningDescription=powerHighWarningDescription, spIRMS1Status=spIRMS1Status, sensorProbeTemperatureArrayPort5Index=sensorProbeTemperatureArrayPort5Index, spEventClassName=spEventClassName, sensorAirflowDelayHighCritical=sensorAirflowDelayHighCritical, virtualAnalogSensorHighCritical=virtualAnalogSensorHighCritical, sensorSirenOnDesc=sensorSirenOnDesc, sensorProbeDrycontactArrayPort5ManualOutputCycleTime=sensorProbeDrycontactArrayPort5ManualOutputCycleTime, sensorMotionNormalColor=sensorMotionNormalColor, sensorProbeRelayArrayPort7Description=sensorProbeRelayArrayPort7Description, sensorSirenDeviceIndex=sensorSirenDeviceIndex, fuelDelayLowWarning=fuelDelayLowWarning, sensorProbeHumidityDelayNormal=sensorProbeHumidityDelayNormal, sensor4to20mALowCriticalColor=sensor4to20mALowCriticalColor, sensorFuelDeviceIndex=sensorFuelDeviceIndex, sensorProbeTemperatureArrayPort3Status=sensorProbeTemperatureArrayPort3Status, sensorThermostatGoOffline=sensorThermostatGoOffline, humiditySensorHighWarningDesc=humiditySensorHighWarningDesc, sensorProbeDrycontactArrayPort6Direction=sensorProbeDrycontactArrayPort6Direction, dcVoltageLowWarningDescription=dcVoltageLowWarningDescription, sensorACvoltageTable=sensorACvoltageTable, dcVoltageSubPort=dcVoltageSubPort, sensorFuelHighCriticalColor=sensorFuelHighCriticalColor, sensorProbeVirtualSwitchDescriptionCritical=sensorProbeVirtualSwitchDescriptionCritical, sensorProbeThermostatTemperatureArrayPort2HighLimit1=sensorProbeThermostatTemperatureArrayPort2HighLimit1, sensorProbeTempDegreeType=sensorProbeTempDegreeType, temperatureId=temperatureId, fuelDescription=fuelDescription, sensorProbeTemperatureArrayPort3HighWarning=sensorProbeTemperatureArrayPort3HighWarning, dcVoltageSensorRearm=dcVoltageSensorRearm, temperatureLowCriticalDescription=temperatureLowCriticalDescription, sensorProbeTemperatureArrayPort7Status=sensorProbeTemperatureArrayPort7Status, commonSensorHighCriticalColor=commonSensorHighCriticalColor, temperatureSensorUnit=temperatureSensorUnit, powerLowCritical=powerLowCritical, temperatureArraySensorErrorColor=temperatureArraySensorErrorColor, smokeNormalDescription=smokeNormalDescription, temperatureArraySensorDelayLowWarning=temperatureArraySensorDelayLowWarning, sensorDCvoltageGoOffline=sensorDCvoltageGoOffline, virtualSwitchSensorNormalState=virtualSwitchSensorNormalState, licenseEntry=licenseEntry, fuelHighWarningColor=fuelHighWarningColor, sensorTankSenderLowWarningColor=sensorTankSenderLowWarningColor, sensorThermostatLowWarningDesc=sensorThermostatLowWarningDesc, actionMaxResend=actionMaxResend, waterRopeIndex=waterRopeIndex, dcVoltageHighCriticalDescription=dcVoltageHighCriticalDescription, spTemperatureArray6_1Status=spTemperatureArray6_1Status, sensorProbeSwitchStatus=sensorProbeSwitchStatus, sensorProbeThermostatTemperatureArrayPort8LowLimitAction2=sensorProbeThermostatTemperatureArrayPort8LowLimitAction2, tankSenderId=tankSenderId, sensorProbeHumidityURL=sensorProbeHumidityURL, sensorProbeDrycontactArrayPort3Status=sensorProbeDrycontactArrayPort3Status, sensorProbeTypeName=sensorProbeTypeName, sensorDryContactAcknowledge=sensorDryContactAcknowledge, temperatureDelayLowWarning=temperatureDelayLowWarning, current4to20mASensorMaxVoltage=current4to20mASensorMaxVoltage, sensorProbeVRMSSirenAction=sensorProbeVRMSSirenAction, waterSensorAcknowledge=waterSensorAcknowledge, spTemperatureArray1_1Status=spTemperatureArray1_1Status, sensorProbeAirFlowSensitivity=sensorProbeAirFlowSensitivity, sensorProbeRelayArrayPort6RelayAction=sensorProbeRelayArrayPort6RelayAction, sensorProbeTemperatureArrayPort6ContTimeHighCritical=sensorProbeTemperatureArrayPort6ContTimeHighCritical, sensorTankSenderDeviceIndex=sensorTankSenderDeviceIndex, securitySensorDeviceIndex=securitySensorDeviceIndex, current4to20mAHighWarningColor=current4to20mAHighWarningColor, spVirtual16Status=spVirtual16Status, virtualAnalogSensorContTimeNormal=virtualAnalogSensorContTimeNormal, dcVoltageHighWarningDescription=dcVoltageHighWarningDescription, sensorProbeTrapCommunity=sensorProbeTrapCommunity, waterRopeTable=waterRopeTable, sensorProbeVRMSRearm=sensorProbeVRMSRearm, deviceLicenseExpUsed=deviceLicenseExpUsed, sensorWaterIndex=sensorWaterIndex, sensorFuelLowCriticalColor=sensorFuelLowCriticalColor, sensorACvoltageNormalDesc=sensorACvoltageNormalDesc, sensorTemperatureHighCritical=sensorTemperatureHighCritical, waterRopeImpedance=waterRopeImpedance, motionSensorCriticalColor=motionSensorCriticalColor, spTemperature1Status=spTemperature1Status, spEnergy4Status=spEnergy4Status, sensorHighCriticalDescription=sensorHighCriticalDescription, sensorProbeRelayArrayPort2RelayDescOff=sensorProbeRelayArrayPort2RelayDescOff, sensorProbeTrapType=sensorProbeTrapType, humiditySensorGoOffline=humiditySensorGoOffline, motionPort=motionPort, waterRopeGoOffline=waterRopeGoOffline, sensorProbeSetSyslogMsgPrefix=sensorProbeSetSyslogMsgPrefix, sensorDCvoltageLowCriticalDesc=sensorDCvoltageLowCriticalDesc, sensorTankSenderAcknowledge=sensorTankSenderAcknowledge, sensorAirflowHighWarning=sensorAirflowHighWarning, fuelSensorIndex=fuelSensorIndex, deviceLicense=deviceLicense, sensorSirenIndex=sensorSirenIndex, sensorProbeTemperatureArrayPort5Rearm=sensorProbeTemperatureArrayPort5Rearm, sensorProbeEnergyLowWarning=sensorProbeEnergyLowWarning, licenseTable=licenseTable, sensorProbeThermostatTemperatureArrayPort1LowLimit2=sensorProbeThermostatTemperatureArrayPort1LowLimit2, sensorDryContactPort6GoOnline=sensorDryContactPort6GoOnline, sensorPowerValue=sensorPowerValue, sensorTemperatureArrayNormalColor=sensorTemperatureArrayNormalColor, fuelSensorHighCriticalColor=fuelSensorHighCriticalColor, sensorProbeTemperatureArrayPort5ContTimeHighCritical=sensorProbeTemperatureArrayPort5ContTimeHighCritical, sensorProbeEnergyDescription=sensorProbeEnergyDescription, sensorProbeTemperatureArrayPort8OpenURL=sensorProbeTemperatureArrayPort8OpenURL, humidityEntry=humidityEntry, sensorProbeTempSirenDelayAlarm=sensorProbeTempSirenDelayAlarm, spVRMSStatus=spVRMSStatus, sensorProbeDrycontactArrayPort6ControlMode=sensorProbeDrycontactArrayPort6ControlMode, deviceDryContactEntry=deviceDryContactEntry, drycontactOutputManualAction=drycontactOutputManualAction, sensorProbeTempCalendar=sensorProbeTempCalendar, sensorProbeThermostatTemperatureArrayPort6GoOnline=sensorProbeThermostatTemperatureArrayPort6GoOnline, powerHighCritical=powerHighCritical, smokeSensorCriticalDesc=smokeSensorCriticalDesc, spIRMS5Status=spIRMS5Status, sensorThermostatDelayLowCritical=sensorThermostatDelayLowCritical, sensorDryContactPort10GoOnline=sensorDryContactPort10GoOnline, sensorDryContactDeviceIndex=sensorDryContactDeviceIndex, spTemperatureArray7_2Status=spTemperatureArray7_2Status, sensorProbeTemperatureArrayPort4DatacollectType=sensorProbeTemperatureArrayPort4DatacollectType, spRelayArray5_5Status=spRelayArray5_5Status, sensorPowerLowCritical=sensorPowerLowCritical, sensorProbeIRMSSensorIndex=sensorProbeIRMSSensorIndex, doorEntry=doorEntry, powerLowWarningDescription=powerLowWarningDescription, relayTable=relayTable, sensorProbeRelayArrayPort1Entry=sensorProbeRelayArrayPort1Entry, sensorProbeRelayArrayPort6OpenURL=sensorProbeRelayArrayPort6OpenURL, sensorProbeThermostatTemperatureArrayPort1Mode=sensorProbeThermostatTemperatureArrayPort1Mode, spSenNormalStatus=spSenNormalStatus, doorIndex=doorIndex, virtualSwitchSensorAcknowledgement=virtualSwitchSensorAcknowledgement, spSenWarningStatus=spSenWarningStatus, sensorTemperatureDelayLowWarning=sensorTemperatureDelayLowWarning, sensorProbeTemperatureArrayPort5=sensorProbeTemperatureArrayPort5, sensorProbeTemperatureArrayPort4Number=sensorProbeTemperatureArrayPort4Number, tankSenderSensorDelayError=tankSenderSensorDelayError, smokeSensorAcknowledge=smokeSensorAcknowledge, sensorProbeTemperatureArrayPort5ContTimeLowCritical=sensorProbeTemperatureArrayPort5ContTimeLowCritical, sensorProbeRelayArrayPort8RelayCycleTime=sensorProbeRelayArrayPort8RelayCycleTime, sensorProbeThermostatTemperatureArrayPort2Mode=sensorProbeThermostatTemperatureArrayPort2Mode, acVoltageSensorNormalColor=acVoltageSensorNormalColor, sensorProbeIRMSSensorEntry=sensorProbeIRMSSensorEntry, sensorProbeNoCameraGoOnline=sensorProbeNoCameraGoOnline, powerSensorRearm=powerSensorRearm, temperatureArrayDelayLowWarning=temperatureArrayDelayLowWarning, sensorProbeTemperatureArrayPort6HighWarning=sensorProbeTemperatureArrayPort6HighWarning, spSwitch39Status=spSwitch39Status, sensorProbeCameraDescription=sensorProbeCameraDescription, sensorHumidityUnit=sensorHumidityUnit, sensorProbeTemperatureArrayPort7Online=sensorProbeTemperatureArrayPort7Online, temperatureHighWarningColor=temperatureHighWarningColor, sensorProbeHumidityAtoDAmountBaseVoltage=sensorProbeHumidityAtoDAmountBaseVoltage, waterSensorNormalColor=waterSensorNormalColor, relayType=relayType, fuelStatus=fuelStatus, sensorProbeThermostatValue=sensorProbeThermostatValue, sensor4to20mASensorErrorColor=sensor4to20mASensorErrorColor, commonRaw=commonRaw, fuelEntry=fuelEntry, spStatusNoVideoSignal=spStatusNoVideoSignal, thermostatSensorDelayHighCritical=thermostatSensorDelayHighCritical, dcVoltageSensorOffset=dcVoltageSensorOffset, fuelDelayError=fuelDelayError, sensorProbeTemperatureArrayPort3Calendar=sensorProbeTemperatureArrayPort3Calendar, sensorProbeThermostatTemperatureArrayPort8Value=sensorProbeThermostatTemperatureArrayPort8Value, humiditySensorStatus=humiditySensorStatus, sirenGoOffline=sirenGoOffline, waterRopeSensorSensorErrorColor=waterRopeSensorSensorErrorColor, sensor4to20mAValue=sensor4to20mAValue, sensorProbeRelayArrayPort1ControlMode=sensorProbeRelayArrayPort1ControlMode, sensorProbeHumidityOffset=sensorProbeHumidityOffset, sensorDCvoltageUnit=sensorDCvoltageUnit, sensorProbeTemperatureArrayPort8ContTimeSensorError=sensorProbeTemperatureArrayPort8ContTimeSensorError, securitySensorId=securitySensorId, dcVoltageSensorDelayLowCritical=dcVoltageSensorDelayLowCritical, tankSenderGoOffline=tankSenderGoOffline, cfgSMTPPort=cfgSMTPPort, temperatureTable=temperatureTable, powerSensorLowWarning=powerSensorLowWarning, sensorProbeThermostatTemperatureArrayPort1LowLimitAction2=sensorProbeThermostatTemperatureArrayPort1LowLimitAction2, sensorProbeNoCameraSensorTable=sensorProbeNoCameraSensorTable, humiditySensorSensorNormalColor=humiditySensorSensorNormalColor, airflowSensorHighWarningDesc=airflowSensorHighWarningDesc, fuelSensorDelayHighWarning=fuelSensorDelayHighWarning, sensorProbeTempLowCritical=sensorProbeTempLowCritical, sensorProbeDrycontactArrayPort5Direction=sensorProbeDrycontactArrayPort5Direction, sensorProbeSwitchSirenDelayAlarm=sensorProbeSwitchSirenDelayAlarm, relayOnDesc=relayOnDesc, sensorTemperatureEntry=sensorTemperatureEntry, sensorProbeThermostatTemperatureArrayPort3RelayControlPort=sensorProbeThermostatTemperatureArrayPort3RelayControlPort, fuelAmountMaxValue=fuelAmountMaxValue, acVoltageSensorDeviceIndex=acVoltageSensorDeviceIndex, spSwitch33Status=spSwitch33Status, temperatureArrayHighCriticalColor=temperatureArrayHighCriticalColor, sensorProbeIRMSSirenOnPort=sensorProbeIRMSSirenOnPort, spRelayArray8_4Status=spRelayArray8_4Status, sirenEntry=sirenEntry, sensorProbeTemperatureArrayPort5Calendar=sensorProbeTemperatureArrayPort5Calendar, sensorTemperatureStatus=sensorTemperatureStatus, sensorProbeVRMSRelayCycleTime=sensorProbeVRMSRelayCycleTime, sensorProbeTemperatureArrayPort8DegreeRaw=sensorProbeTemperatureArrayPort8DegreeRaw, commonSensorDescription=commonSensorDescription, spRelayArray1Status=spRelayArray1Status, sensorProbeVirtualSwitchAcknowledgement=sensorProbeVirtualSwitchAcknowledgement, airflowSensorLowCritical=airflowSensorLowCritical, spTemperatureArray3_8Status=spTemperatureArray3_8Status, sensorProbeTemperatureArrayPort8HighCritical=sensorProbeTemperatureArrayPort8HighCritical, cfgRSysLogServerPort=cfgRSysLogServerPort, sensorProbeRelayArrayPort1Status=sensorProbeRelayArrayPort1Status, sensorDryContactPort=sensorDryContactPort, humiditySensorDelayLowWarning=humiditySensorDelayLowWarning, sensorProbeTemperatureArrayPort7ContTimeHighWarning=sensorProbeTemperatureArrayPort7ContTimeHighWarning, cfgSMTPServer=cfgSMTPServer, temperatureSensorLowWarningColor=temperatureSensorLowWarningColor, airflowDelayLowWarning=airflowDelayLowWarning, sensorProbeTrapReIntervalAlive=sensorProbeTrapReIntervalAlive, sensorProbeVirtualSwitchContTimeNormal=sensorProbeVirtualSwitchContTimeNormal, sensorDoorEntry=sensorDoorEntry, sensorProbeTypePowerMeterName=sensorProbeTypePowerMeterName, notifications=notifications, spSwitch36Status=spSwitch36Status, sensorProbeDrycontactArrayPort2GoOnline=sensorProbeDrycontactArrayPort2GoOnline, sensorProbeTemperatureArrayPort7Rearm=sensorProbeTemperatureArrayPort7Rearm, sensorThermostatDelayError=sensorThermostatDelayError, sensorWaterRopeLength=sensorWaterRopeLength, commonSensorIndex=commonSensorIndex, doorSensorAcknowledge=doorSensorAcknowledge, sensorProbeSwitchAcknowledgement=sensorProbeSwitchAcknowledgement, sensorProbeEnergyAcknowledgement=sensorProbeEnergyAcknowledgement, sensorProbeDrycontactArrayPort7Online=sensorProbeDrycontactArrayPort7Online, temperatureSensorDelayError=temperatureSensorDelayError, cfgSNMPv3Mode=cfgSNMPv3Mode, sensorTemperatureArrayDelayHighWarning=sensorTemperatureArrayDelayHighWarning, sensorProbeTemperatureArrayPort8ContTimeLowCritical=sensorProbeTemperatureArrayPort8ContTimeLowCritical, cfgSMTPPassword=cfgSMTPPassword, sensorProbeRelayArrayPort7=sensorProbeRelayArrayPort7, sensorThermostatIndex=sensorThermostatIndex, sensorProbeTemperatureArrayPort1HighWarning=sensorProbeTemperatureArrayPort1HighWarning, sensorDryContactTable=sensorDryContactTable, current4to20mASensorDelayLowWarning=current4to20mASensorDelayLowWarning, powerNormalDescription=powerNormalDescription)
mibBuilder.exportSymbols("SPAGENT-MIB", sensorProbeThermostatTemperatureArrayPort1HighLimitAction1=sensorProbeThermostatTemperatureArrayPort1HighLimitAction1, sensorTemperatureArrayHighWarning=sensorTemperatureArrayHighWarning, current4to20mASensorDelayHighWarning=current4to20mASensorDelayHighWarning, tankSenderNormalDescription=tankSenderNormalDescription, airflowHighWarning=airflowHighWarning, sensorTemperatureSubPort=sensorTemperatureSubPort, sensorSecurityGoOffline=sensorSecurityGoOffline, spTemperatureArray4_3Status=spTemperatureArray4_3Status, spTemperatureArray7_3Status=spTemperatureArray7_3Status, sensorProbeDrycontactArrayPort1Index=sensorProbeDrycontactArrayPort1Index, sensorSirenManualAction=sensorSirenManualAction, thermostatSensorDelayLowCritical=thermostatSensorDelayLowCritical, spSwitch6Status=spSwitch6Status, relaySensorManualAction=relaySensorManualAction, sensorProbeEntry=sensorProbeEntry, sensorProbeSoundDetectorContTimeNormal=sensorProbeSoundDetectorContTimeNormal, temperatureLowWarning=temperatureLowWarning, current4to20mASensorGoOffline=current4to20mASensorGoOffline, sensorProbeTrapResend=sensorProbeTrapResend, spIRMS2Status=spIRMS2Status, sensorProbeUseCamera=sensorProbeUseCamera, sensorProbeTypeADE7763WattName=sensorProbeTypeADE7763WattName, sensorProbeIRMSSirenDelayAlarm=sensorProbeIRMSSirenDelayAlarm, spUnknownStatus=spUnknownStatus, sensorProbeDrycontactArrayPort5ContTimeNormal=sensorProbeDrycontactArrayPort5ContTimeNormal, sensorFuelHighCritical=sensorFuelHighCritical, dcVoltageSensorHighWarning=dcVoltageSensorHighWarning, sensorPowerErrorRetryNum=sensorPowerErrorRetryNum, sensorTankSenderHighWarning=sensorTankSenderHighWarning, sensorProbeChecksum=sensorProbeChecksum, sensorProbeTemperatureArrayPort5DegreeType=sensorProbeTemperatureArrayPort5DegreeType, current4to20mAEntry=current4to20mAEntry, sensorPowerIndex=sensorPowerIndex, sensorProbeEnergySensorEntry=sensorProbeEnergySensorEntry, commonSensorId=commonSensorId, spSensorStatusName=spSensorStatusName, sensorHumidityDelayError=sensorHumidityDelayError, sensorProbeTemperatureArrayPort6=sensorProbeTemperatureArrayPort6, dryContactSensorControlMode=dryContactSensorControlMode, cfgGSMPassword=cfgGSMPassword, sensorProbeSwitchRelayActiveStatus=sensorProbeSwitchRelayActiveStatus, sensorPowerHighWarningColor=sensorPowerHighWarningColor, sensorProbeEnergyURL=sensorProbeEnergyURL, sensorProbeSoundDetectorValue=sensorProbeSoundDetectorValue, sensorDryContactPort14GoOnline=sensorDryContactPort14GoOnline, dryContactSensorType=dryContactSensorType, sensorProbeRelayArrayPort2RelayAction=sensorProbeRelayArrayPort2RelayAction, sensorProbeRelayArrayPort7NormalState=sensorProbeRelayArrayPort7NormalState, dcVoltageSensorUnit=dcVoltageSensorUnit, sensorProbeEnergyHighCritical=sensorProbeEnergyHighCritical, cfgEMailEnable=cfgEMailEnable, sensorProbeTypeDrycontactInputName=sensorProbeTypeDrycontactInputName, sensorDCvoltageAcknowledge=sensorDCvoltageAcknowledge, sensorAirflowSensorErrorColor=sensorAirflowSensorErrorColor, sensorTemperatureArrayHighWarningColor=sensorTemperatureArrayHighWarningColor, motionSensorEntry=motionSensorEntry, sensorType=sensorType, dryContactSensorIndex=dryContactSensorIndex, sensorProbeWattHoursSensor=sensorProbeWattHoursSensor, sensorProbeThermostatTemperatureArrayPort5HighLimitAction1=sensorProbeThermostatTemperatureArrayPort5HighLimitAction1, waterSensorPort=waterSensorPort, sensorProbeHumidityOnline=sensorProbeHumidityOnline, dryContactSensorNormalState=dryContactSensorNormalState, spRelayArray7_3Status=spRelayArray7_3Status, sensorProbeTemperatureArraySensor=sensorProbeTemperatureArraySensor, sensorProbeVirtualAnalogRaw=sensorProbeVirtualAnalogRaw, sensorWaterRopeStatus=sensorWaterRopeStatus, sensorProbeVirtualAnalogSensorIndex=sensorProbeVirtualAnalogSensorIndex, sensorProbeThermostatTemperatureArrayPort1NormalAction2=sensorProbeThermostatTemperatureArrayPort1NormalAction2, sensorValueFormatFloat=sensorValueFormatFloat, sensorProbeHumidityContTimeSensorError=sensorProbeHumidityContTimeSensorError, sensorProbeVRMSSirenDelayAlarm=sensorProbeVRMSSirenDelayAlarm, temperatureSensorLowWarning=temperatureSensorLowWarning, sensorProbeDrycontactArrayPort3Entry=sensorProbeDrycontactArrayPort3Entry, temperatureGoOffline=temperatureGoOffline, sensorProbeThermostatTemperatureArrayPort8HighLimit1=sensorProbeThermostatTemperatureArrayPort8HighLimit1, humidityHighCriticalColor=humidityHighCriticalColor, sensorRelayStatus=sensorRelayStatus, sensorTemperatureSensorErrorDesc=sensorTemperatureSensorErrorDesc, sensorProbeSoundDetectorOpenURL=sensorProbeSoundDetectorOpenURL, sensorTemperatureHighCriticalColor=sensorTemperatureHighCriticalColor, sensorFuelRearm=sensorFuelRearm, sensorRelayControlMode=sensorRelayControlMode, sensorIntelligentTypeSelected=sensorIntelligentTypeSelected, sensorDCvoltageDescription=sensorDCvoltageDescription, sensorTemperatureArrayHighCriticalColor=sensorTemperatureArrayHighCriticalColor, waterSensorTable=waterSensorTable, temperatureHighCriticalDescription=temperatureHighCriticalDescription, sensorProbeMailSubject=sensorProbeMailSubject, sensorAirflowHighWarningColor=sensorAirflowHighWarningColor, sensorWaterRopeType=sensorWaterRopeType, sensorProbeTempSirenAction=sensorProbeTempSirenAction, sensorProbeRelayArrayPort6ControlMode=sensorProbeRelayArrayPort6ControlMode, powerSensorErrorRetryNum=powerSensorErrorRetryNum, sensorProbeTemperatureArrayPort7ContTimeSensorError=sensorProbeTemperatureArrayPort7ContTimeSensorError, dryContactSensorNormalDesc=dryContactSensorNormalDesc, sensorProbeTemperatureArrayPort6Number=sensorProbeTemperatureArrayPort6Number, powerSensorTimeOut=powerSensorTimeOut, sensorProbeThermostatTemperatureArrayPort4LowLimit1=sensorProbeThermostatTemperatureArrayPort4LowLimit1, sensorProbeSwitchWaterRopeLength=sensorProbeSwitchWaterRopeLength, sensorProbeIDCVVoltateRatio=sensorProbeIDCVVoltateRatio, sensorProbeDrycontactArrayPort1=sensorProbeDrycontactArrayPort1, sensorProbeRelayArrayPort8RelayDescOff=sensorProbeRelayArrayPort8RelayDescOff, dcVoltageLowWarningColor=dcVoltageLowWarningColor, sensorProbeRelayArrayPort4ManualRelayAction=sensorProbeRelayArrayPort4ManualRelayAction, sensorProbeTemperatureArrayPort2Online=sensorProbeTemperatureArrayPort2Online, tankSenderSensorDelayLowCritical=tankSenderSensorDelayLowCritical, powerGoOffline=powerGoOffline, fuelSensorDescription=fuelSensorDescription, sensorTemperatureArrayDisplayStyle=sensorTemperatureArrayDisplayStyle, powerSensorValue=powerSensorValue, sensorDCvoltageJumper=sensorDCvoltageJumper, virtualSwitchSensorURL=virtualSwitchSensorURL, sensorSmokeDeviceIndex=sensorSmokeDeviceIndex, temperatureSensorDelayLowCritical=temperatureSensorDelayLowCritical, sensorProbeRelayArrayPort3Index=sensorProbeRelayArrayPort3Index, thermostatSensorEntry=thermostatSensorEntry, dryContactSensorOffColor=dryContactSensorOffColor, sensorProbeSwitchNormalState=sensorProbeSwitchNormalState, humiditySensorErrorColor=humiditySensorErrorColor, licenseIndex=licenseIndex, spSensorValue=spSensorValue, sensorProbeTemperatureArrayPort8Number=sensorProbeTemperatureArrayPort8Number, sensorProbeTemperatureArrayPort7HighCritical=sensorProbeTemperatureArrayPort7HighCritical, sensorAirflowTable=sensorAirflowTable, tankSenderSensorHighWarning=tankSenderSensorHighWarning, spIRMS4Status=spIRMS4Status, powerSensorPort=powerSensorPort, sensorHumidityPercent=sensorHumidityPercent, relayDescription=relayDescription, sensorProbeDebug=sensorProbeDebug, commonGoOffline=commonGoOffline, fuelSensorAmountBaseValue=fuelSensorAmountBaseValue, sensorProbeNoCameraOnline=sensorProbeNoCameraOnline, temperatureArraySensorLowWarning=temperatureArraySensorLowWarning, sensorProbeThermostatTemperatureArrayPort4NormalAction2=sensorProbeThermostatTemperatureArrayPort4NormalAction2, sensorProbeEnergyRelayAction=sensorProbeEnergyRelayAction, cfgDeviceUseDHCP=cfgDeviceUseDHCP, powerHighWarning=powerHighWarning, sensorACvoltageAcknowledge=sensorACvoltageAcknowledge, sensorProbeIRMSOnline=sensorProbeIRMSOnline, airflowSensorHighCriticalColor=airflowSensorHighCriticalColor, smokeSensorDeviceIndex=smokeSensorDeviceIndex, thermostatSensorLowCritical=thermostatSensorLowCritical, sensorSirenGoOffline=sensorSirenGoOffline, airflowSensorSensorErrorColor=airflowSensorSensorErrorColor, sensorProbeThermostatTemperatureArrayPort6RelayControlPort=sensorProbeThermostatTemperatureArrayPort6RelayControlPort, securitySensorPort=securitySensorPort, sensorDCvoltageId=sensorDCvoltageId, sensorTankSenderLowWarning=sensorTankSenderLowWarning, humidityIndex=humidityIndex, temperatureSensorAcknowledge=temperatureSensorAcknowledge, spVRMS8Status=spVRMS8Status, sensorProbeHumiditySendNormalTrap=sensorProbeHumiditySendNormalTrap, current4to20mASensorDeviceIndex=current4to20mASensorDeviceIndex, waterSensorGoOffline=waterSensorGoOffline, relaySensorId=relaySensorId, sensorMotionPort=sensorMotionPort, sensorProbeSnmpPort=sensorProbeSnmpPort, spTemperatureArray7Status=spTemperatureArray7Status, commonSensorPort=commonSensorPort, doorStatus=doorStatus, spIRMSStatus=spIRMSStatus, sensorProbeTemperatureArrayPort1ContTimeNormal=sensorProbeTemperatureArrayPort1ContTimeNormal, humiditySensorDescription=humiditySensorDescription, sensorProbeThermostatTemperatureArrayPort1Online=sensorProbeThermostatTemperatureArrayPort1Online, sensors=sensors, sensorSecurityIndex=sensorSecurityIndex, relaySensorDescription=relaySensorDescription, dcVoltageRearm=dcVoltageRearm, sensorProbeTemperatureArrayPort3=sensorProbeTemperatureArrayPort3, sensorProbeTypeMotionName=sensorProbeTypeMotionName, spTemperatureArray3_5Status=spTemperatureArray3_5Status, temperatureArraySensorOffset=temperatureArraySensorOffset, sensorProbeSoundDetectorLowWarning=sensorProbeSoundDetectorLowWarning, sensorAirflowSensorErrorDesc=sensorAirflowSensorErrorDesc, humiditySensorDelayError=humiditySensorDelayError, fuelSensorGoOffline=fuelSensorGoOffline, sensorProbeMailCC=sensorProbeMailCC, sensorProbeSwitchDelayNormal=sensorProbeSwitchDelayNormal, relaySensorStatus=relaySensorStatus, sensorWaterCriticalDesc=sensorWaterCriticalDesc, sensorProbeMailFrom=sensorProbeMailFrom, dryContactSensorPort=dryContactSensorPort, spSwitch30Status=spSwitch30Status, relaySensorOnDesc=relaySensorOnDesc, sensorProbeRelayArrayPort3Table=sensorProbeRelayArrayPort3Table, sensorProbeVirtualSwitchNormalState=sensorProbeVirtualSwitchNormalState, sensorDCvoltageValue=sensorDCvoltageValue, fuelSensorUnit=fuelSensorUnit, sensorProbeTemperatureArrayPort1ContTimeLowWarning=sensorProbeTemperatureArrayPort1ContTimeLowWarning, cfgSMTPSSL=cfgSMTPSSL, sensorProbeRelayArrayPort6RelayCycleTime=sensorProbeRelayArrayPort6RelayCycleTime, acVoltageGoOffline=acVoltageGoOffline, current4to20mAHighWarningDescription=current4to20mAHighWarningDescription, dcVoltageLowWarning=dcVoltageLowWarning, sirenSensorDeviceIndex=sirenSensorDeviceIndex, cfgVPNCipherType=cfgVPNCipherType, devicePowerMeterCountRecievedPacket=devicePowerMeterCountRecievedPacket, sensorProbeRelayArrayPort4RelayCycleTime=sensorProbeRelayArrayPort4RelayCycleTime, sensorProbeHumidityLocation=sensorProbeHumidityLocation, current4to20mASensorLowWarning=current4to20mASensorLowWarning, sensorProbeSoundDetectorStatus=sensorProbeSoundDetectorStatus, sensorProbeVirtualSwitchSensorNumber=sensorProbeVirtualSwitchSensorNumber, sensorProbeTypeTemperatureArrayName=sensorProbeTypeTemperatureArrayName, sensorProbeThermostatTemperatureArrayPort7NormalAction1=sensorProbeThermostatTemperatureArrayPort7NormalAction1, sensorProbeTemperatureArrayPort5ContTimeNormal=sensorProbeTemperatureArrayPort5ContTimeNormal, sensorProbeThermostatTemperatureArrayPort3LowLimitAction2=sensorProbeThermostatTemperatureArrayPort3LowLimitAction2, sensorDCvoltageHighCritical=sensorDCvoltageHighCritical, sensorACvoltageSubPort=sensorACvoltageSubPort, sensorProbeAirFlowCalibrate=sensorProbeAirFlowCalibrate, commonSensorNormalColor=commonSensorNormalColor, spRelayArray2_2Status=spRelayArray2_2Status, sensorProbeVRMSGoOnline=sensorProbeVRMSGoOnline, sensorPowerDelayLowWarning=sensorPowerDelayLowWarning, sensorProbeRelayArrayPort2ManualRelayCycleTime=sensorProbeRelayArrayPort2ManualRelayCycleTime, spSwitch54Status=spSwitch54Status, sensorProbeThermostatTemperatureArrayPort5EnableTime=sensorProbeThermostatTemperatureArrayPort5EnableTime, tankSenderIndex=tankSenderIndex, sensorProbeSoftMotionURL=sensorProbeSoftMotionURL, sensorProbeRelayArrayPort4Table=sensorProbeRelayArrayPort4Table, humiditySensorLowCriticalDesc=humiditySensorLowCriticalDesc, waterRopeSensorCriticalColor=waterRopeSensorCriticalColor, current4to20mAOffset=current4to20mAOffset, humiditySensorSensorErrorColor=humiditySensorSensorErrorColor, sensorProbeTempSensorType=sensorProbeTempSensorType, dcVoltageOffset=dcVoltageOffset, spSwitch14Status=spSwitch14Status, spSwitch56Status=spSwitch56Status, commonValue=commonValue, current4to20mALowCriticalDescription=current4to20mALowCriticalDescription, sensorProbeTemperatureArrayPort7Description=sensorProbeTemperatureArrayPort7Description, sensorProbeStatusNumberCriticalAndError=sensorProbeStatusNumberCriticalAndError, spRelayArray5_7Status=spRelayArray5_7Status, sensorProbeSwitchWaterRopeUnit=sensorProbeSwitchWaterRopeUnit, fuelAcknowledge=fuelAcknowledge, sirenSensorAcknowledge=sirenSensorAcknowledge, sensorProbeVirtualAnalogValueFactor=sensorProbeVirtualAnalogValueFactor, sensorProbeTemperatureArrayPort5Entry=sensorProbeTemperatureArrayPort5Entry, cfgGSMIdleTimeout=cfgGSMIdleTimeout, sensorProbeRelayArrayPort4Entry=sensorProbeRelayArrayPort4Entry, sensorProbeTemperatureArrayPort6ContTimeNormal=sensorProbeTemperatureArrayPort6ContTimeNormal, sensorTemperatureArrayTable=sensorTemperatureArrayTable, temperatureArraySensorLowCriticalColor=temperatureArraySensorLowCriticalColor, airflowDelayLowCritical=airflowDelayLowCritical, cfgGSMAPN=cfgGSMAPN, devicePowerMeterType=devicePowerMeterType, sensorWaterEntry=sensorWaterEntry, cfgGSMConnectionMethod=cfgGSMConnectionMethod, sirenSubPort=sirenSubPort, sensorProbeVRMSSensorNumber=sensorProbeVRMSSensorNumber, fuelRaw=fuelRaw, sensorTemperatureDelayLowCritical=sensorTemperatureDelayLowCritical, sensorProbeTempSendNormalMail=sensorProbeTempSendNormalMail)
mibBuilder.exportSymbols("SPAGENT-MIB", sensorDryContactOnColor=sensorDryContactOnColor, waterSubPort=waterSubPort, sensorProbeTypeWaterName=sensorProbeTypeWaterName, sensorProbeDrycontactArrayPort8Index=sensorProbeDrycontactArrayPort8Index, dcVoltageSensorLowWarningColor=dcVoltageSensorLowWarningColor, temperatureStatus=temperatureStatus, spSensorAliveLow=spSensorAliveLow, sensorTankSenderUnit=sensorTankSenderUnit, virtualAnalogSensorEmailTrapLimit=virtualAnalogSensorEmailTrapLimit, sensorProbeThermostatTemperatureArrayPort7HighLimit2=sensorProbeThermostatTemperatureArrayPort7HighLimit2, thermostatSensorDeviceIndex=thermostatSensorDeviceIndex, tankSenderSensorDisplayStyle=tankSenderSensorDisplayStyle, fuelIndex=fuelIndex, tankSenderSensorHighCriticalColor=tankSenderSensorHighCriticalColor, sensorProbeTemperatureArrayPort2URL=sensorProbeTemperatureArrayPort2URL, sensorDryContactPort12GoOnline=sensorDryContactPort12GoOnline, sensorProbeSoftMotionDescription=sensorProbeSoftMotionDescription, deviceLicenseVrtAvailable=deviceLicenseVrtAvailable, sensorFuelLowCritical=sensorFuelLowCritical, spSwitch27Status=spSwitch27Status, sensorProbeTemperatureArrayPort6Description=sensorProbeTemperatureArrayPort6Description, cfgSubnetMask=cfgSubnetMask, temperatureArrayLowCriticalColor=temperatureArrayLowCriticalColor, sensorProbeVirtualAnalogHighWarning=sensorProbeVirtualAnalogHighWarning, sensorProbeCameraServerTable=sensorProbeCameraServerTable, airflowLowWarningColor=airflowLowWarningColor, temperatureArraySensorHighCriticalColor=temperatureArraySensorHighCriticalColor, sensorPowerRearm=sensorPowerRearm, motionSensorNormalDesc=motionSensorNormalDesc, sensorProbeTemperatureArrayPort2DatacollectType=sensorProbeTemperatureArrayPort2DatacollectType, spSensorDecimalValue=spSensorDecimalValue, waterIndex=waterIndex, thermostatSensorAcknowledge=thermostatSensorAcknowledge, sensorTankSenderStatus=sensorTankSenderStatus, sensorProbeTemperatureArrayPort4ContTimeHighWarning=sensorProbeTemperatureArrayPort4ContTimeHighWarning, sensorProbeThermostatTemperatureArrayPort1GoOnline=sensorProbeThermostatTemperatureArrayPort1GoOnline, sensorProbeSendMail=sensorProbeSendMail, sensorProbeHumidityAtoDJumper=sensorProbeHumidityAtoDJumper, current4to20mASensorHighWarningColor=current4to20mASensorHighWarningColor, sensorProbeHumiditySirenDelayAlarm=sensorProbeHumiditySirenDelayAlarm, spStatusSoftMotion=spStatusSoftMotion, sensorProbeReboot=sensorProbeReboot, sensorTankSenderDisplayStyle=sensorTankSenderDisplayStyle, airflowSensorValue=airflowSensorValue, sensor4to20mAHighCriticalDesc=sensor4to20mAHighCriticalDesc, relaySensorOffDesc=relaySensorOffDesc, spTemperatureArray3_2Status=spTemperatureArray3_2Status, sensorTemperatureArrayLowWarning=sensorTemperatureArrayLowWarning, waterRopeLeakLocation=waterRopeLeakLocation, sensorHumidityLowCritical=sensorHumidityLowCritical, sensorProbeEnergySensorTable=sensorProbeEnergySensorTable, sensorProbeSwitchSirenAction=sensorProbeSwitchSirenAction, sensorProbeHumidity4to20mAUnit=sensorProbeHumidity4to20mAUnit, sensorWaterRopeAcknowledge=sensorWaterRopeAcknowledge, sensorProbeVirtualSwitchEmailTrapLimit=sensorProbeVirtualSwitchEmailTrapLimit, sensorPowerDelayNormal=sensorPowerDelayNormal, spTemperatureArray8_1Status=spTemperatureArray8_1Status, sensorProbeSwitchDelayError=sensorProbeSwitchDelayError, airflowGoOffline=airflowGoOffline, sensor4to20mAGoOffline=sensor4to20mAGoOffline, temperatureSensorLowCriticalDesc=temperatureSensorLowCriticalDesc, deviceAccessEntry=deviceAccessEntry, spSwitch11Status=spSwitch11Status, dcVoltageHighCriticalColor=dcVoltageHighCriticalColor, sensorProbeVirtualSwitchGoOnline=sensorProbeVirtualSwitchGoOnline, temperatureArrayPort=temperatureArrayPort, sensorWaterRopeTable=sensorWaterRopeTable, current4to20mADelayHighCritical=current4to20mADelayHighCritical, sensorProbeSoundDetectorSensorTable=sensorProbeSoundDetectorSensorTable, spRelayArray5_4Status=spRelayArray5_4Status, sensorProbeVRMSvoltageMode=sensorProbeVRMSvoltageMode, sensorProbeEnergySensor=sensorProbeEnergySensor, spSwitch18Status=spSwitch18Status, sensorProbeAdcCalibratePort=sensorProbeAdcCalibratePort, sensorProbeThermostatOnline=sensorProbeThermostatOnline, sensorProbeSwitchManualRelayCycleTime=sensorProbeSwitchManualRelayCycleTime, sensorDCvoltageDeviceIndex=sensorDCvoltageDeviceIndex, humiditySensorLowWarning=humiditySensorLowWarning, sensorHumidityDescription=sensorHumidityDescription, sensorMotionIndex=sensorMotionIndex, temperatureSensorType=temperatureSensorType, commonOnDescription=commonOnDescription, waterRopeUnit=waterRopeUnit, current4to20mASensorLowCritical=current4to20mASensorLowCritical, sensorProbeTemperatureArrayPort3LowWarning=sensorProbeTemperatureArrayPort3LowWarning, commonOffDescription=commonOffDescription, powerSensorUnit=powerSensorUnit, temperatureOffset=temperatureOffset, humiditySensorDeviceIndex=humiditySensorDeviceIndex, sensorOnDescription=sensorOnDescription, sensorProbeDrycontactArrayPort2NormalState=sensorProbeDrycontactArrayPort2NormalState, deviceStatus=deviceStatus, sensorProbeTemperatureArrayPort7Table=sensorProbeTemperatureArrayPort7Table, spTemperatureArray3_6Status=spTemperatureArray3_6Status, sensorOffDescription=sensorOffDescription, sensorProbeRelayArrayPort1URL=sensorProbeRelayArrayPort1URL, sensorRelaySubPort=sensorRelaySubPort, sensorProbeTempRelayOnPort=sensorProbeTempRelayOnPort, sensorProbeDrycontactArrayPort1ControlMode=sensorProbeDrycontactArrayPort1ControlMode, sensorHumidityDelayHighWarning=sensorHumidityDelayHighWarning, sensorPowerHighCriticalColor=sensorPowerHighCriticalColor, temperatureDelayLowCritical=temperatureDelayLowCritical, sensorTemperatureDegree=sensorTemperatureDegree, dcVoltageDisplayStyle=dcVoltageDisplayStyle, sensorProbeTemperatureArrayPort1Rearm=sensorProbeTemperatureArrayPort1Rearm, dryContactSensorCriticalDesc=dryContactSensorCriticalDesc, temperatureArraySensorRearm=temperatureArraySensorRearm, cfgSystemURL=cfgSystemURL, spTemperatureArray1_8Status=spTemperatureArray1_8Status, temperatureSensorSensorErrorDesc=temperatureSensorSensorErrorDesc, thermostatSensorDisplayStyle=thermostatSensorDisplayStyle, humidityLowWarningColor=humidityLowWarningColor, sensorProbeRelayArrayPort5=sensorProbeRelayArrayPort5, sensorDryContactPort4GoOnline=sensorDryContactPort4GoOnline, fuelTable=fuelTable, sensorFuelHighWarningColor=sensorFuelHighWarningColor, sensorProbeTemperatureArrayPort2=sensorProbeTemperatureArrayPort2, sensorProbeRelayArrayPort5OpenURL=sensorProbeRelayArrayPort5OpenURL, cfgSNMPv3AuthPassword=cfgSNMPv3AuthPassword, relaySensorSubPort=relaySensorSubPort, spRelayArray5_2Status=spRelayArray5_2Status, sensorProbeTemperatureArrayPort8ContTimeHighCritical=sensorProbeTemperatureArrayPort8ContTimeHighCritical, sensorProbeDrycontactArrayPort3ControlMode=sensorProbeDrycontactArrayPort3ControlMode, spAnalogue7Status=spAnalogue7Status, spHelpUrl=spHelpUrl, airflowDelayHighCritical=airflowDelayHighCritical, humidityHighWarningColor=humidityHighWarningColor, sensorProbeVirtualAnalogOnline=sensorProbeVirtualAnalogOnline, sensorProbeThermostatTemperatureArrayPort4EnableTime=sensorProbeThermostatTemperatureArrayPort4EnableTime, spTemperatureArray4_6Status=spTemperatureArray4_6Status, devicePowerMeterEntry=devicePowerMeterEntry, sensorHumidityDelayLowWarning=sensorHumidityDelayLowWarning, sensorProbeTempContTimeHighWarning=sensorProbeTempContTimeHighWarning, sensorProbeDrycontactArrayPort1NormalState=sensorProbeDrycontactArrayPort1NormalState, sensorProbePowerMeterCountSentPacket=sensorProbePowerMeterCountSentPacket, sensor4to20mADelayLowCritical=sensor4to20mADelayLowCritical, airflowSensorPort=airflowSensorPort, waterRopeSensorRaw=waterRopeSensorRaw, spTemperatureArray3_1Status=spTemperatureArray3_1Status, sensorPowerDisplayStyle=sensorPowerDisplayStyle, tankSenderSensorDelayHighWarning=tankSenderSensorDelayHighWarning, deviceDryContactStatus=deviceDryContactStatus, airflowSensorTable=airflowSensorTable, sensorProbeTempContTimeLowWarning=sensorProbeTempContTimeLowWarning, sensorProbeSwitchCalendar=sensorProbeSwitchCalendar, sensorThermostatPort=sensorThermostatPort, sensorProbeRelayArrayPort6URL=sensorProbeRelayArrayPort6URL, sensorProbeThermostatTemperatureArrayPort8RelayControlPort=sensorProbeThermostatTemperatureArrayPort8RelayControlPort, sensorProbeHumiditySendTrap=sensorProbeHumiditySendTrap, sensorProbeHumidityRearm=sensorProbeHumidityRearm, sirenTable=sirenTable, current4to20mAAcknowledge=current4to20mAAcknowledge, sensorSirenControlMode=sensorSirenControlMode, fuelLowCriticalColor=fuelLowCriticalColor, acVoltageSensorAcknowledge=acVoltageSensorAcknowledge, cfgSNMPReadCommunity=cfgSNMPReadCommunity, temperatureArrayDisplayStyle=temperatureArrayDisplayStyle, sensorProbeRelayArrayPort8Online=sensorProbeRelayArrayPort8Online, sensorProbeTypeACvoltageName=sensorProbeTypeACvoltageName, sensorProbeDrycontactArrayPort1OpenURL=sensorProbeDrycontactArrayPort1OpenURL, sensorProbeDrycontactArrayPort6Online=sensorProbeDrycontactArrayPort6Online, fuelSensorHighWarning=fuelSensorHighWarning, sensorLowWarningDescription=sensorLowWarningDescription, current4to20mASensorDelayHighCritical=current4to20mASensorDelayHighCritical, temperatureArraySensorNormalDescription=temperatureArraySensorNormalDescription, sensorProbeDrycontactArrayPort8ControlMode=sensorProbeDrycontactArrayPort8ControlMode, sensorProbeVRMSURL=sensorProbeVRMSURL, sensorProbeRelayArrayPort3RelayDescOn=sensorProbeRelayArrayPort3RelayDescOn, sensorFuelAmountBaseValue=sensorFuelAmountBaseValue, fuelLowCriticalDescription=fuelLowCriticalDescription, humiditySensorAcknowledge=humiditySensorAcknowledge, current4to20mASensorStatus=current4to20mASensorStatus, sensorTemperatureHighCriticalDesc=sensorTemperatureHighCriticalDesc, sensorProbeDrycontactArrayPort3Index=sensorProbeDrycontactArrayPort3Index, spKeepAliveTrap=spKeepAliveTrap, spSwitch61Status=spSwitch61Status, acVoltageSensorCriticalDesc=acVoltageSensorCriticalDesc, humidityRaw=humidityRaw, sensorProbeThermostatLowLimitAction2=sensorProbeThermostatLowLimitAction2, sirenOnColor=sirenOnColor, sensorTankSenderDelayError=sensorTankSenderDelayError, sensorProbeRelayArraySensor=sensorProbeRelayArraySensor, sensorProbeThermostatTemperatureArrayPort1EnableTime=sensorProbeThermostatTemperatureArrayPort1EnableTime, sensorTemperatureRearm=sensorTemperatureRearm, securityPort=securityPort, sensorProbeEnergyContTimeSensorError=sensorProbeEnergyContTimeSensorError, spSwitch2Status=spSwitch2Status, sensorDryContactDescription=sensorDryContactDescription, spRelayArray7_5Status=spRelayArray7_5Status, sensorProbeMailResendInterval=sensorProbeMailResendInterval, sensorProbeRelayArrayPort7Entry=sensorProbeRelayArrayPort7Entry, dcVoltageAcknowledge=dcVoltageAcknowledge, sensorProbeIRMSSirenCycleTime=sensorProbeIRMSSirenCycleTime, sensorFuelLowWarning=sensorFuelLowWarning, sensorProbeDrycontactArrayPort3OpenURL=sensorProbeDrycontactArrayPort3OpenURL, motionIndex=motionIndex, sensor4to20mAHighWarningColor=sensor4to20mAHighWarningColor, relaySubPort=relaySubPort, sensorProbeDrycontactArrayPort2ManualOutputCycleTime=sensorProbeDrycontactArrayPort2ManualOutputCycleTime, sensorHumiditySensorErrorDesc=sensorHumiditySensorErrorDesc, fuelSensorDelayNormal=fuelSensorDelayNormal, virtualSwitchSensorOnline=virtualSwitchSensorOnline, spAnalogue3Status=spAnalogue3Status, temperatureArrayDelayHighWarning=temperatureArrayDelayHighWarning, powerSensorDelayLowWarning=powerSensorDelayLowWarning, cfgSMTPLogin=cfgSMTPLogin, airflowSensorLowCriticalDesc=airflowSensorLowCriticalDesc, sensorProbeHost=sensorProbeHost, secNotification=secNotification, sensorProbeThermostatTemperatureArrayPort8Description=sensorProbeThermostatTemperatureArrayPort8Description, sensorDoorStatus=sensorDoorStatus, spVirtual19Status=spVirtual19Status, sensorProbeSwitchOpenURL=sensorProbeSwitchOpenURL, sensorFuelHighCriticalDesc=sensorFuelHighCriticalDesc, sensor4to20mAAmountMaxVoltage=sensor4to20mAAmountMaxVoltage, sensorProbeThermostatTemperatureArrayPort4GoOnline=sensorProbeThermostatTemperatureArrayPort4GoOnline, sensorDCvoltageBaseVoltage=sensorDCvoltageBaseVoltage, sensorSmokePort=sensorSmokePort, sensorProbeTemperatureArrayPort3Table=sensorProbeTemperatureArrayPort3Table, sensorProbeTemperatureArrayPort1LowWarning=sensorProbeTemperatureArrayPort1LowWarning, sensorProbeThermostatTemperatureArrayPort8Index=sensorProbeThermostatTemperatureArrayPort8Index, temperatureArraySensorEntry=temperatureArraySensorEntry, commonValueFormatFloat=commonValueFormatFloat, sensorProbeThermostatTemperatureArrayPort2Index=sensorProbeThermostatTemperatureArrayPort2Index, sensorSecurityEntry=sensorSecurityEntry, temperatureRearm=temperatureRearm, sensorSirenOffDesc=sensorSirenOffDesc, sensorProbeSoundDetectorPulseLength=sensorProbeSoundDetectorPulseLength, sensorProbeCameraServerEntry=sensorProbeCameraServerEntry, sensorProbePowerMeter1phDelayBetweenCommand=sensorProbePowerMeter1phDelayBetweenCommand, sensorDCvoltageDisplayStyle=sensorDCvoltageDisplayStyle, sensorWaterRopeSensorErrorDesc=sensorWaterRopeSensorErrorDesc, sensorProbeTemperatureArrayPort6Calendar=sensorProbeTemperatureArrayPort6Calendar, deviceLicensePmsCount=deviceLicensePmsCount, temperatureSensorRearm=temperatureSensorRearm, sensorDryContactStatus=sensorDryContactStatus, devicePowerMeterIndex=devicePowerMeterIndex, sensorProbeSoundDetectorRecordingSource=sensorProbeSoundDetectorRecordingSource, sensorProbeTemperatureArrayPort4Description=sensorProbeTemperatureArrayPort4Description, spTemperatureArray5_3Status=spTemperatureArray5_3Status, sensorProbeThermostatTemperatureArrayPort4RelayControlPort=sensorProbeThermostatTemperatureArrayPort4RelayControlPort, sensorTankSenderHighWarningColor=sensorTankSenderHighWarningColor, waterRopeSensorCriticalDesc=waterRopeSensorCriticalDesc, virtualAnalogSensorContTimeLowCritical=virtualAnalogSensorContTimeLowCritical, sensorThermostatLowCriticalColor=sensorThermostatLowCriticalColor, spRelayArray5_3Status=spRelayArray5_3Status, sensorProbeTemperatureArrayPort3Entry=sensorProbeTemperatureArrayPort3Entry, sensorProbeSendTraps=sensorProbeSendTraps, sensorThermostatHighWarning=sensorThermostatHighWarning, sensorProbeTemperatureArrayPort3ContTimeLowCritical=sensorProbeTemperatureArrayPort3ContTimeLowCritical, commonEntry=commonEntry, sensor4to20mADelayNormal=sensor4to20mADelayNormal, airflowSensorHighWarningColor=airflowSensorHighWarningColor, waterRopeSensorId=waterRopeSensorId)
mibBuilder.exportSymbols("SPAGENT-MIB", spTemperatureArray6Status=spTemperatureArray6Status, dcVoltageSensorValue=dcVoltageSensorValue, sensorTankSenderLowCriticalDesc=sensorTankSenderLowCriticalDesc, drycontactOutputManualCycleTime=drycontactOutputManualCycleTime, sensorProbeVirtualAnalogRearm=sensorProbeVirtualAnalogRearm, sensorProbeTempHighWarning=sensorProbeTempHighWarning, sensorLowCriticalColor=sensorLowCriticalColor, spTemperatureArray5_1Status=spTemperatureArray5_1Status, tankSenderSensorAcknowledge=tankSenderSensorAcknowledge, virtualSensor=virtualSensor, doorSensorValue=doorSensorValue, spSensorName=spSensorName, temperatureArrayDelayError=temperatureArrayDelayError, fuelSensorDelayLowCritical=fuelSensorDelayLowCritical, sensorProbeTemperatureArrayPort5Online=sensorProbeTemperatureArrayPort5Online, spVirtual6Status=spVirtual6Status, acVoltageSensorDescription=acVoltageSensorDescription, temperatureArraySensorRaw=temperatureArraySensorRaw, spRelayArray6_7Status=spRelayArray6_7Status, sensorProbeRelayArrayPort8ManualRelayCycleTime=sensorProbeRelayArrayPort8ManualRelayCycleTime, sensorProbe=sensorProbe, airflowSensorHighCritical=airflowSensorHighCritical, spRelayArray2_6Status=spRelayArray2_6Status, sensor4to20mADelayError=sensor4to20mADelayError, sensorProbeThermostatTemperatureArrayPort5GoOnline=sensorProbeThermostatTemperatureArrayPort5GoOnline, sensorProbeTempAcknowledgement=sensorProbeTempAcknowledgement, sensorProbeTemperatureArrayPort2ContTimeNormal=sensorProbeTemperatureArrayPort2ContTimeNormal, sensorProbePTZRotateAbsolute=sensorProbePTZRotateAbsolute, sensorHumidityHighWarning=sensorHumidityHighWarning, sensorProbeMailCustom=sensorProbeMailCustom, sensorACvoltageGoOffline=sensorACvoltageGoOffline, airflowId=airflowId, dcVoltageSensorPort=dcVoltageSensorPort, fuelSensorHighWarningDesc=fuelSensorHighWarningDesc, spRelayArray4_5Status=spRelayArray4_5Status, powerSensorNormalColor=powerSensorNormalColor, deviceLicenseExpAvailable=deviceLicenseExpAvailable, airflowSensorRearm=airflowSensorRearm, spRelayArray8_6Status=spRelayArray8_6Status, sensorProbeDrycontactArrayPort1Direction=sensorProbeDrycontactArrayPort1Direction, sensorHumidityAcknowledge=sensorHumidityAcknowledge, current4to20mALowCritical=current4to20mALowCritical, sensorProbeSoundDetectorLowCritical=sensorProbeSoundDetectorLowCritical, sensorProbePowerMeterCountTimeoutPacket=sensorProbePowerMeterCountTimeoutPacket, sensorProbePowerMeterWaitTimeout=sensorProbePowerMeterWaitTimeout, sensorTemperatureHighWarningDesc=sensorTemperatureHighWarningDesc, relaySensorIndex=relaySensorIndex, powerLowCriticalDescription=powerLowCriticalDescription, sensorProbeDrycontactArrayPort8ContTimeNormal=sensorProbeDrycontactArrayPort8ContTimeNormal, tankSenderNormalColor=tankSenderNormalColor, sensorProbeNoCameraSensorNumber=sensorProbeNoCameraSensorNumber, current4to20mASensorLowWarningColor=current4to20mASensorLowWarningColor, sensorProbeRelayArrayPort1Description=sensorProbeRelayArrayPort1Description, temperatureArrayDelayLowCritical=temperatureArrayDelayLowCritical, sensorProbeThermostatTemperatureArrayPort6LowLimitAction1=sensorProbeThermostatTemperatureArrayPort6LowLimitAction1, virtual=virtual, sensorProbeRelayArrayPort6RelayDescOff=sensorProbeRelayArrayPort6RelayDescOff, spIRMS3Status=spIRMS3Status, waterRopeSensorNormalDesc=waterRopeSensorNormalDesc, fuelSensorRearm=fuelSensorRearm, fuelGoOffline=fuelGoOffline, temperatureArrayHighWarningDescription=temperatureArrayHighWarningDescription, sensorProbeEnergyRelayActiveStatus=sensorProbeEnergyRelayActiveStatus, sensorThermostatHighCriticalDesc=sensorThermostatHighCriticalDesc, deviceIndex=deviceIndex, sensorSirenPort=sensorSirenPort, temperatureArraySensorDelayError=temperatureArraySensorDelayError, cfgVPNServerDNSName=cfgVPNServerDNSName, dcVoltageDelayHighCritical=dcVoltageDelayHighCritical, cfgSNMPPort=cfgSNMPPort, sensorProbeEnergySirenOnPort=sensorProbeEnergySirenOnPort, sensorProbeTemperatureArrayPort7HighWarning=sensorProbeTemperatureArrayPort7HighWarning, sensorProbeThermostatRelayControlPort=sensorProbeThermostatRelayControlPort, sensorTemperatureArrayDelayLowWarning=sensorTemperatureArrayDelayLowWarning, sensorProbeLastSystemError=sensorProbeLastSystemError, waterCriticalColor=waterCriticalColor, sensorProbeTemperatureArrayPort2Entry=sensorProbeTemperatureArrayPort2Entry, sensorFuelAcknowledge=sensorFuelAcknowledge, sensorProbeEnergyGoOnline=sensorProbeEnergyGoOnline, sensorProbeTemperatureArrayPort8Value=sensorProbeTemperatureArrayPort8Value, sensorProbeThermostatTemperatureArrayPort6LowLimit1=sensorProbeThermostatTemperatureArrayPort6LowLimit1, thermostatSensorLowWarningColor=thermostatSensorLowWarningColor, motionId=motionId, temperatureArrayDescription=temperatureArrayDescription, spTemperatureArray3_4Status=spTemperatureArray3_4Status, spRelayArray2_8Status=spRelayArray2_8Status, airflowEntry=airflowEntry, dcVoltageSensorNormalDesc=dcVoltageSensorNormalDesc, dcVoltageSensorRaw=dcVoltageSensorRaw, commonSensorOffColor=commonSensorOffColor, temperatureArrayOffset=temperatureArrayOffset, powerDelayLowCritical=powerDelayLowCritical, tankSenderSensorHighCritical=tankSenderSensorHighCritical, sensorProbeRelayArrayPort7Online=sensorProbeRelayArrayPort7Online, powerSensorDelayHighWarning=powerSensorDelayHighWarning, sensorDryContactCriticalDesc=sensorDryContactCriticalDesc, current4to20mASubPort=current4to20mASubPort, sensorProbeVirtualAnalogContTimeLowCritical=sensorProbeVirtualAnalogContTimeLowCritical, spTemperatureArray5_8Status=spTemperatureArray5_8Status, sensorThermostatHighCritical=sensorThermostatHighCritical, license3rdPartyPMS=license3rdPartyPMS, sensorProbeRelayArrayPort8RelayAction=sensorProbeRelayArrayPort8RelayAction, airflowHighCritical=airflowHighCritical, doorValue=doorValue, humiditySensorErrorDescription=humiditySensorErrorDescription, tankSenderHighCritical=tankSenderHighCritical, spTemperatureArray2_8Status=spTemperatureArray2_8Status, sensorProbeThermostatTemperatureArrayPort7Description=sensorProbeThermostatTemperatureArrayPort7Description, virtualAnalogSensorURL=virtualAnalogSensorURL, sensorProbeDrycontactArrayPort3=sensorProbeDrycontactArrayPort3, cfgServerAddress=cfgServerAddress, dcVoltagePort=dcVoltagePort, sensorProbeTemperatureArrayPort1Table=sensorProbeTemperatureArrayPort1Table, sensorProbeProductRevision=sensorProbeProductRevision, sensorProbeTemperatureArrayPort4OpenURL=sensorProbeTemperatureArrayPort4OpenURL, sensorTemperatureDelayHighCritical=sensorTemperatureDelayHighCritical, sensorProbeThermostatTemperatureArrayPort3HighLimitAction2=sensorProbeThermostatTemperatureArrayPort3HighLimitAction2, sensorByPort=sensorByPort, humidityId=humidityId, current4to20mALowWarningColor=current4to20mALowWarningColor, dcVoltageValue=dcVoltageValue, sensorProbeTemperatureArrayPort6LowCritical=sensorProbeTemperatureArrayPort6LowCritical, sensorDoorTable=sensorDoorTable, fuelSensorTable=fuelSensorTable, spTemperatureArray5_5Status=spTemperatureArray5_5Status, sensorProbeSoundDetectorSensorNumber=sensorProbeSoundDetectorSensorNumber, sensorProbeTemperatureArrayPort2Rearm=sensorProbeTemperatureArrayPort2Rearm, tankSenderSensorSensorErrorColor=tankSenderSensorSensorErrorColor, sensorProbeVRMSSensor=sensorProbeVRMSSensor, sensorProbeSoundDetectorSensor=sensorProbeSoundDetectorSensor, sensorProbePowerMeter1phDelayBetweenMeter=sensorProbePowerMeter1phDelayBetweenMeter, sensorProbeTypeWaterRopeName=sensorProbeTypeWaterRopeName, sensorRelayOnColor=sensorRelayOnColor, humidityLowWarningDescription=humidityLowWarningDescription, airflowDelayHighWarning=airflowDelayHighWarning, commonSensorHighWarningColor=commonSensorHighWarningColor, sensorPowerLowWarningDesc=sensorPowerLowWarningDesc, sensorProbeDrycontactArrayPort3URL=sensorProbeDrycontactArrayPort3URL, powerSensorMaxValue=powerSensorMaxValue, fuelSensorHighCritical=fuelSensorHighCritical, dcVoltageSensorDisplayStyle=dcVoltageSensorDisplayStyle, temperatureArraySensorNormalDesc=temperatureArraySensorNormalDesc, cfgHostUID=cfgHostUID, spRelayArray7_6Status=spRelayArray7_6Status, current4to20mADelayNormal=current4to20mADelayNormal, actionResendInterval=actionResendInterval, sensorProbeVirtualAnalogDescription=sensorProbeVirtualAnalogDescription, cfgSMTPEMailFrom=cfgSMTPEMailFrom, temperatureSubPort=temperatureSubPort, waterRopeId=waterRopeId, sirenSensorStatus=sirenSensorStatus, deviceAccessInfo=deviceAccessInfo, powerHighWarningColor=powerHighWarningColor, tankSenderEntry=tankSenderEntry, sensorProbeSwitchSendMail=sensorProbeSwitchSendMail, spSwitch34Status=spSwitch34Status, sensorDCvoltageSensorErrorColor=sensorDCvoltageSensorErrorColor, relayId=relayId, dcVoltageSensorAcknowledge=dcVoltageSensorAcknowledge, sensorProbeThermostatTemperatureArrayPort6NormalAction2=sensorProbeThermostatTemperatureArrayPort6NormalAction2, sensorProbeDrycontactArrayPort4URL=sensorProbeDrycontactArrayPort4URL, sirenSensorOnDesc=sirenSensorOnDesc, sensorProbeThermostatTemperatureArrayPort2GoOnline=sensorProbeThermostatTemperatureArrayPort2GoOnline, relaySensorDeviceIndex=relaySensorDeviceIndex, sensorHumidityLowWarningColor=sensorHumidityLowWarningColor, waterStatus=waterStatus, sensorProbeGetCommunity=sensorProbeGetCommunity, tankSenderHighCriticalColor=tankSenderHighCriticalColor, sensorProbeVRMSSensorTable=sensorProbeVRMSSensorTable, thermostatSensorHighCriticalColor=thermostatSensorHighCriticalColor, commonSensorSensorErrorDescription=commonSensorSensorErrorDescription, sirenId=sirenId, securityDescription=securityDescription, secDevice=secDevice, sensorWaterRopeGoOffline=sensorWaterRopeGoOffline, sensorTemperatureArrayOffset=sensorTemperatureArrayOffset, humidityLowCritical=humidityLowCritical, sensorProbeTemperatureArrayPort7Number=sensorProbeTemperatureArrayPort7Number, spSensorSubIndex=spSensorSubIndex, sensorProbeTemperatureArrayPort7LowWarning=sensorProbeTemperatureArrayPort7LowWarning, sensorProbeIRMSContTimeSensorError=sensorProbeIRMSContTimeSensorError, virtualSwitchSensorEntry=virtualSwitchSensorEntry, sensorPort=sensorPort, sensorPowerNormalDesc=sensorPowerNormalDesc, sensorProbeThermostatTemperatureArrayPort4HighLimit2=sensorProbeThermostatTemperatureArrayPort4HighLimit2, sensorProbeProductType=sensorProbeProductType, cfgEMailResendInterval=cfgEMailResendInterval, sensorProbeSendTrapsAlive=sensorProbeSendTrapsAlive, spRelayArray6_2Status=spRelayArray6_2Status, spSensorLevelExceeded=spSensorLevelExceeded, sensor4to20mANormalDesc=sensor4to20mANormalDesc, waterRopeRaw=waterRopeRaw, dcVoltageDelayLowCritical=dcVoltageDelayLowCritical, sensorTankSenderRaw=sensorTankSenderRaw, fuelHighCritical=fuelHighCritical, sensorProbeTemperatureArrayPort1Index=sensorProbeTemperatureArrayPort1Index, cfgNTPServer2=cfgNTPServer2, sensorProbeDrycontactArrayPort8OpenURL=sensorProbeDrycontactArrayPort8OpenURL, airflowSensorHighCriticalDesc=airflowSensorHighCriticalDesc, sensorProbeDrycontactArrayPort7Entry=sensorProbeDrycontactArrayPort7Entry, dcVoltageSensorLowCritical=dcVoltageSensorLowCritical, sensorPowerUnit=sensorPowerUnit, smokeNormalColor=smokeNormalColor, sensorProbeRelayArrayPort7Table=sensorProbeRelayArrayPort7Table, sensorDryContactPort8GoOnline=sensorDryContactPort8GoOnline, acVoltageIndex=acVoltageIndex, sensorProbeDrycontactArrayPort4Table=sensorProbeDrycontactArrayPort4Table, dryContactSensorTable=dryContactSensorTable, sensorPowerTable=sensorPowerTable, sensorMotionId=sensorMotionId, sensorProbeHumidityGoOnline=sensorProbeHumidityGoOnline, sensorRelayOffDesc=sensorRelayOffDesc, relaySensorEntry=relaySensorEntry, airflowSensorDelayHighCritical=airflowSensorDelayHighCritical, sensorProbeSwitchSendNormalMail=sensorProbeSwitchSendNormalMail, sensorRelayTable=sensorRelayTable, sensorProbeThermostatTemperatureArrayPort1LowLimit1=sensorProbeThermostatTemperatureArrayPort1LowLimit1, temperatureSensorRaw=temperatureSensorRaw, spSwitch8Status=spSwitch8Status, sensorProbeThermostatHighLimit2=sensorProbeThermostatHighLimit2, sensorProbeTemperatureArrayPort6Online=sensorProbeTemperatureArrayPort6Online, waterRopeType=waterRopeType, sensorProbeThermostatTemperatureArrayPort4Value=sensorProbeThermostatTemperatureArrayPort4Value, spRelayArray2_3Status=spRelayArray2_3Status, sensorProbeRelayArrayPort4RelayDescOn=sensorProbeRelayArrayPort4RelayDescOn, current4to20mAAmountBaseVoltage=current4to20mAAmountBaseVoltage, temperatureEntry=temperatureEntry, sensorDCvoltageDelayHighCritical=sensorDCvoltageDelayHighCritical, smokeCriticalColor=smokeCriticalColor, sensorProbeRelayArrayPort1ManualRelayAction=sensorProbeRelayArrayPort1ManualRelayAction, spRelayArray6Status=spRelayArray6Status, sensorProbeTemperatureArrayPort8ContTimeLowWarning=sensorProbeTemperatureArrayPort8ContTimeLowWarning, sensorProbeVirtualAnalogCalendar=sensorProbeVirtualAnalogCalendar, powerSensorHighWarningColor=powerSensorHighWarningColor, sensorProbeHumidityContTimeLowCritical=sensorProbeHumidityContTimeLowCritical, sensorProbeDrycontactArrayPort2Number=sensorProbeDrycontactArrayPort2Number, sensorAirflowHighCriticalColor=sensorAirflowHighCriticalColor, sensorProbeSoftMotionGoOnline=sensorProbeSoftMotionGoOnline, cfgTimeZone=cfgTimeZone, devicePowerMeterStatus=devicePowerMeterStatus, sensorProbeThermostatTemperatureArrayPort6EnableTime=sensorProbeThermostatTemperatureArrayPort6EnableTime, sensorDCvoltageHighCriticalColor=sensorDCvoltageHighCriticalColor, sensorErrorDescription=sensorErrorDescription, sensorProbeDrycontactArrayPort6Number=sensorProbeDrycontactArrayPort6Number, sensorProbeRelayArrayPort3RelayAction=sensorProbeRelayArrayPort3RelayAction, sensorProbeDrycontactArrayPort3GoOnline=sensorProbeDrycontactArrayPort3GoOnline, sensorWaterRopeSensorErrorColor=sensorWaterRopeSensorErrorColor, sensorTemperatureNormalDesc=sensorTemperatureNormalDesc, sensorProbeThermostatTemperatureArrayPort2Online=sensorProbeThermostatTemperatureArrayPort2Online)
