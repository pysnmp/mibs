#
# PySNMP MIB module VERITAS-COMMAND-CENTRAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/veritas/VERITAS-COMMAND-CENTRAL-MIB.mib
# Produced by pysmi-1.1.12 at Mon Jun  3 13:45:16 2024
# On host fv-az1210-277 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, Counter64, IpAddress, Unsigned32, TimeTicks, iso, ObjectIdentity, Counter32, Bits, Gauge32, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "IpAddress", "Unsigned32", "TimeTicks", "iso", "ObjectIdentity", "Counter32", "Bits", "Gauge32", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
products, = mibBuilder.importSymbols("VERITAS-REG", "products")
Utf8StringShort, Utf8StringLong, Uint64ReadOnly = mibBuilder.importSymbols("VERITAS-TC", "Utf8StringShort", "Utf8StringLong", "Uint64ReadOnly")
veritascc = ModuleIdentity((1, 3, 6, 1, 4, 1, 1302, 3, 12))
veritascc.setRevisions(('1902-10-24 16:30', '1904-01-08 21:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: veritascc.setRevisionsDescriptions(('Conversion of CC MIB to SMI v2.', 'Fixed a few errors found with very strict compiler.',))
if mibBuilder.loadTexts: veritascc.setLastUpdated('0401082130Z')
if mibBuilder.loadTexts: veritascc.setOrganization('VERITAS Software Corp.')
if mibBuilder.loadTexts: veritascc.setContactInfo('VERITAS Software Corp.\n                     1600 Plymouth Street.\n                     Mountain View, CA 94043 US\n                     Tel: +1 650 318 4464\n                     Email: support@veritas.com')
if mibBuilder.loadTexts: veritascc.setDescription('A private MIB module for VERITAS Command Central')
ccTrapDefinitionsBranch = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 12, 10))
ccTrapVarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1302, 3, 12, 10, 100)).setObjects(("VERITAS-COMMAND-CENTRAL-MIB", "alertRecipients"), ("VERITAS-COMMAND-CENTRAL-MIB", "alertSummary"), ("VERITAS-COMMAND-CENTRAL-MIB", "alertDescription"), ("VERITAS-COMMAND-CENTRAL-MIB", "policyName"), ("VERITAS-COMMAND-CENTRAL-MIB", "objectType"), ("VERITAS-COMMAND-CENTRAL-MIB", "collectorName"), ("VERITAS-COMMAND-CENTRAL-MIB", "ccHost"), ("VERITAS-COMMAND-CENTRAL-MIB", "sourceId"), ("VERITAS-COMMAND-CENTRAL-MIB", "ccObject"), ("VERITAS-COMMAND-CENTRAL-MIB", "sampleData"), ("VERITAS-COMMAND-CENTRAL-MIB", "ccAlertSeverity"), ("VERITAS-COMMAND-CENTRAL-MIB", "ccAlertTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccTrapVarsGroup = ccTrapVarsGroup.setStatus('current')
if mibBuilder.loadTexts: ccTrapVarsGroup.setDescription('Group for CC Trap VarBinds')
ccTrapVarsBranch = ObjectIdentity((1, 3, 6, 1, 4, 1, 1302, 3, 12, 10, 1))
if mibBuilder.loadTexts: ccTrapVarsBranch.setStatus('current')
if mibBuilder.loadTexts: ccTrapVarsBranch.setDescription('Branch of the CC MIB for VarBind Definitions')
alertRecipients = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 12, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertRecipients.setStatus('current')
if mibBuilder.loadTexts: alertRecipients.setDescription('A list of recipients (mail recipients, trap recipients\n            \t\t\t\t or groups) that are receiving the alert.')
alertSummary = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 12, 10, 1, 2), Utf8StringShort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertSummary.setStatus('current')
if mibBuilder.loadTexts: alertSummary.setDescription('A user specified summary of the alert. This summary may\n            \t\t\t\t also show up as alert in the CC console')
alertDescription = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 12, 10, 1, 3), Utf8StringLong()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertDescription.setStatus('current')
if mibBuilder.loadTexts: alertDescription.setDescription('A user specified detailed description of the alert.')
policyName = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 12, 10, 1, 4), Utf8StringShort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyName.setStatus('current')
if mibBuilder.loadTexts: policyName.setDescription('The name of the policy that describes the condition under which the\n            \t\t\t\t alert was generated and the actions (including the trap) that are taken\n            \t\t\t\t as a result of the condition.')
objectType = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 12, 10, 1, 5), Utf8StringShort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: objectType.setStatus('current')
if mibBuilder.loadTexts: objectType.setDescription('The type or class of object on which the alert condition happened.')
collectorName = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 12, 10, 1, 6), Utf8StringShort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: collectorName.setStatus('current')
if mibBuilder.loadTexts: collectorName.setDescription('The collector used in the policy condition. It provides the data for condition\n            \t\t\t\t evaluation.')
ccHost = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 12, 10, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHost.setStatus('current')
if mibBuilder.loadTexts: ccHost.setDescription('The name of the host where Command Central is running.')
sourceId = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 12, 10, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceId.setStatus('current')
if mibBuilder.loadTexts: sourceId.setDescription('The identity of the alert source.')
ccObject = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 12, 10, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccObject.setStatus('current')
if mibBuilder.loadTexts: ccObject.setDescription('The CC object on which the alert condition triggered.')
sampleData = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 12, 10, 1, 10), Utf8StringShort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sampleData.setStatus('current')
if mibBuilder.loadTexts: sampleData.setDescription('The value of the sample data at the time the alert was raised.')
ccAlertSeverity = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 12, 10, 1, 11), Utf8StringShort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccAlertSeverity.setStatus('current')
if mibBuilder.loadTexts: ccAlertSeverity.setDescription('Severity of the alert as defined in the policy. It can be one of:\n            \t\t\t\t Critical, Error, Warning or Informational.')
ccAlertTime = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 12, 10, 1, 12), Utf8StringShort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccAlertTime.setStatus('current')
if mibBuilder.loadTexts: ccAlertTime.setDescription('Time string in the time zone of the CC host.  The string takes the form:\n            \t\t\t\t YYYY-MM-DD hh:mm:ss')
ccTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 1302, 3, 12, 10, 200)).setObjects(("VERITAS-COMMAND-CENTRAL-MIB", "ccCritical"), ("VERITAS-COMMAND-CENTRAL-MIB", "ccError"), ("VERITAS-COMMAND-CENTRAL-MIB", "ccWarning"), ("VERITAS-COMMAND-CENTRAL-MIB", "ccInformational"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccTrapGroup = ccTrapGroup.setStatus('current')
if mibBuilder.loadTexts: ccTrapGroup.setDescription('Group for CC Traps.')
ccTrapBranch = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 12, 10, 2))
ccTrapBranchPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 1302, 3, 12, 10, 2, 0))
if mibBuilder.loadTexts: ccTrapBranchPrefix.setStatus('current')
if mibBuilder.loadTexts: ccTrapBranchPrefix.setDescription('The branch of the CC MIB for Trap Notification Definitions.')
ccCritical = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 12, 10, 2, 0, 1)).setObjects(("VERITAS-COMMAND-CENTRAL-MIB", "alertRecipients"), ("VERITAS-COMMAND-CENTRAL-MIB", "alertSummary"), ("VERITAS-COMMAND-CENTRAL-MIB", "alertDescription"), ("VERITAS-COMMAND-CENTRAL-MIB", "policyName"), ("VERITAS-COMMAND-CENTRAL-MIB", "objectType"), ("VERITAS-COMMAND-CENTRAL-MIB", "collectorName"), ("VERITAS-COMMAND-CENTRAL-MIB", "ccHost"), ("VERITAS-COMMAND-CENTRAL-MIB", "sourceId"), ("VERITAS-COMMAND-CENTRAL-MIB", "ccObject"), ("VERITAS-COMMAND-CENTRAL-MIB", "sampleData"), ("VERITAS-COMMAND-CENTRAL-MIB", "ccAlertSeverity"), ("VERITAS-COMMAND-CENTRAL-MIB", "ccAlertTime"))
if mibBuilder.loadTexts: ccCritical.setStatus('current')
if mibBuilder.loadTexts: ccCritical.setDescription('A Critical alert trap from Command Central.')
ccError = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 12, 10, 2, 0, 2)).setObjects(("VERITAS-COMMAND-CENTRAL-MIB", "alertRecipients"), ("VERITAS-COMMAND-CENTRAL-MIB", "alertSummary"), ("VERITAS-COMMAND-CENTRAL-MIB", "alertDescription"), ("VERITAS-COMMAND-CENTRAL-MIB", "policyName"), ("VERITAS-COMMAND-CENTRAL-MIB", "objectType"), ("VERITAS-COMMAND-CENTRAL-MIB", "collectorName"), ("VERITAS-COMMAND-CENTRAL-MIB", "ccHost"), ("VERITAS-COMMAND-CENTRAL-MIB", "sourceId"), ("VERITAS-COMMAND-CENTRAL-MIB", "ccObject"), ("VERITAS-COMMAND-CENTRAL-MIB", "sampleData"), ("VERITAS-COMMAND-CENTRAL-MIB", "ccAlertSeverity"), ("VERITAS-COMMAND-CENTRAL-MIB", "ccAlertTime"))
if mibBuilder.loadTexts: ccError.setStatus('current')
if mibBuilder.loadTexts: ccError.setDescription('An Error alert trap from Command Central.')
ccWarning = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 12, 10, 2, 0, 3)).setObjects(("VERITAS-COMMAND-CENTRAL-MIB", "alertRecipients"), ("VERITAS-COMMAND-CENTRAL-MIB", "alertSummary"), ("VERITAS-COMMAND-CENTRAL-MIB", "alertDescription"), ("VERITAS-COMMAND-CENTRAL-MIB", "policyName"), ("VERITAS-COMMAND-CENTRAL-MIB", "objectType"), ("VERITAS-COMMAND-CENTRAL-MIB", "collectorName"), ("VERITAS-COMMAND-CENTRAL-MIB", "ccHost"), ("VERITAS-COMMAND-CENTRAL-MIB", "sourceId"), ("VERITAS-COMMAND-CENTRAL-MIB", "ccObject"), ("VERITAS-COMMAND-CENTRAL-MIB", "sampleData"), ("VERITAS-COMMAND-CENTRAL-MIB", "ccAlertSeverity"), ("VERITAS-COMMAND-CENTRAL-MIB", "ccAlertTime"))
if mibBuilder.loadTexts: ccWarning.setStatus('current')
if mibBuilder.loadTexts: ccWarning.setDescription('A Warning alert trap from Command Central.')
ccInformational = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 12, 10, 2, 0, 4)).setObjects(("VERITAS-COMMAND-CENTRAL-MIB", "alertRecipients"), ("VERITAS-COMMAND-CENTRAL-MIB", "alertSummary"), ("VERITAS-COMMAND-CENTRAL-MIB", "alertDescription"), ("VERITAS-COMMAND-CENTRAL-MIB", "policyName"), ("VERITAS-COMMAND-CENTRAL-MIB", "objectType"), ("VERITAS-COMMAND-CENTRAL-MIB", "collectorName"), ("VERITAS-COMMAND-CENTRAL-MIB", "ccHost"), ("VERITAS-COMMAND-CENTRAL-MIB", "sourceId"), ("VERITAS-COMMAND-CENTRAL-MIB", "ccObject"), ("VERITAS-COMMAND-CENTRAL-MIB", "sampleData"), ("VERITAS-COMMAND-CENTRAL-MIB", "ccAlertSeverity"), ("VERITAS-COMMAND-CENTRAL-MIB", "ccAlertTime"))
if mibBuilder.loadTexts: ccInformational.setStatus('current')
if mibBuilder.loadTexts: ccInformational.setDescription('An Informational alert trap from Command Central.')
mibBuilder.exportSymbols("VERITAS-COMMAND-CENTRAL-MIB", alertSummary=alertSummary, alertRecipients=alertRecipients, ccTrapBranch=ccTrapBranch, ccWarning=ccWarning, ccTrapBranchPrefix=ccTrapBranchPrefix, ccObject=ccObject, ccTrapVarsBranch=ccTrapVarsBranch, sourceId=sourceId, ccInformational=ccInformational, ccTrapDefinitionsBranch=ccTrapDefinitionsBranch, ccAlertSeverity=ccAlertSeverity, ccCritical=ccCritical, objectType=objectType, ccError=ccError, ccHost=ccHost, collectorName=collectorName, PYSNMP_MODULE_ID=veritascc, ccAlertTime=ccAlertTime, ccTrapGroup=ccTrapGroup, alertDescription=alertDescription, veritascc=veritascc, policyName=policyName, ccTrapVarsGroup=ccTrapVarsGroup, sampleData=sampleData)
