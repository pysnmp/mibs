#
# PySNMP MIB module XF-RADIOLINK-PTP-RADIO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/ericsson/XF-RADIOLINK-PTP-RADIO-MIB
# Produced by pysmi-1.1.12 at Wed May 29 10:54:34 2024
# On host fv-az1206-254 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, TimeTicks, IpAddress, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, Gauge32, Bits, NotificationType, MibIdentifier, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "TimeTicks", "IpAddress", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "Gauge32", "Bits", "NotificationType", "MibIdentifier", "iso", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xfTermRowIndex, = mibBuilder.importSymbols("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermRowIndex")
xfRadioLink, = mibBuilder.importSymbols("XF-TOP-MIB", "xfRadioLink")
xfRadioLinkPtpRadioMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3))
xfRadioLinkPtpRadioMIB.setRevisions(('2020-09-22 00:00', '2019-11-26 00:00', '2019-10-14 00:00', '2019-06-04 00:00', '2019-05-16 00:00', '2019-04-30 00:00', '2019-01-17 00:00', '2018-10-29 00:00', '2018-09-03 00:00', '2018-04-06 00:00', '2018-01-30 00:00', '2017-11-23 00:00', '2017-09-19 00:00', '2017-09-05 00:00', '2017-07-25 00:00', '2017-06-28 00:00', '2017-05-24 00:00', '2016-12-20 00:00', '2016-06-16 00:00', '2016-06-01 00:00', '2016-05-16 00:00', '2016-05-10 00:00', '2016-04-12 00:00', '2016-02-22 00:00', '2016-02-06 00:00', '2016-02-05 00:00', '2015-12-11 00:00', '2015-11-05 00:00', '2015-08-31 00:00', '2015-07-02 00:00', '2015-06-25 00:00', '2015-06-08 00:00', '2015-04-23 00:00', '2015-04-20 00:00', '2015-04-02 00:00', '2015-02-26 00:00', '2015-01-23 10:00', '2015-01-23 00:00', '2015-01-09 00:00', '2014-02-20 00:00', '2013-11-22 00:00', '2013-11-19 14:00', '2011-05-23 00:00', '2011-02-09 00:00', '2011-02-01 00:00', '2010-12-10 00:00', '2010-10-20 00:00', '2010-09-23 00:00', '2010-06-15 00:00', '2010-06-04 00:00', '2010-01-19 00:00', '2009-12-01 00:00', '2009-11-18 00:00', '2009-06-26 00:00', '2009-06-24 00:00', '2009-04-20 00:00', '2009-04-14 00:00', '2008-10-02 00:00', '2008-09-16 00:00', '2008-06-25 00:00', '2008-06-24 00:00', '2008-06-18 00:00', '2008-06-17 00:00', '2008-06-04 00:00', '2007-06-04 00:00', '2006-09-19 13:20', '2006-08-29 00:00', '2006-03-20 00:00', '2006-02-24 00:00', '2006-01-31 00:00', '2004-12-13 00:00', '2004-07-02 00:00', '2004-06-16 00:00', '2004-05-25 00:00', '2004-04-26 00:00', '2004-01-20 00:00', '2003-12-17 10:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: xfRadioLinkPtpRadioMIB.setRevisionsDescriptions(('\n            Rev. PY26\n            - Added new MOs in xfRfIfPowerTable:\n              * xfRfAtpcFallbackOutputPower\n              * xfRfAtpcFallbackEnable\n              * xfRfAtpcFallbackTimer\n            ', '\n            Rev. PY25\n            - Added new MOs in xfRAuTable:\n              * xfRauBoosterCapability\n              * xfRauBoosterSelectedIndex\n            ', '\n            Rev. PY24\n            - Added new MOs in xfRfIfPowerTable:\n              * xfRfOutputPower8192QAM\n              * xfRfOutputPower16384QAM\n            ', '\n            Rev. PY23\n            - Added new MOs in ifCableMonitoringTable:\n              * xfRfOutlierTrigger\n              * xfRfRangeTrigger\n        * xfRfStddevTrigger\n        * xfRfDegradationTrigger\n        * xfRfMarginTrigger\n            ', '\n            Rev. PY22\n            - Added new MOs in ifCableMonitoringTable:\n              * xfRfOutlierValue\n              * xfRfRangeValue\n        * xfRfStddevValue\n        * xfRfDegradationValue\n        * xfRfMarginValue\n            ', "\n            Rev. PY21\n            - Added new table 'xfSdcTable'.\n            - Added new MOs in 'xfRfIfPowerTable':\n              * xfRfCurrentInputPowerSdcMain\n              * xfRfCurrentInputPowerSdcDiv\n            ", '\n            Rev. PY20\n            - Removed the following alarms in RFAlarms - Textual convention:\n              * IfCableDamaged\n              * RccWarning\n            - Added the following alarms in RFAlarms - Textual convention:\n              * AgcOutlier\n              * AgcRange\n              * AgcStddev\n              * AgcDegradation\n              * AgcMargin\n            ', "\n            Rev. PY19\n            New MO 'xfRFSpectrumDiagProgress' added in xfRFSpectrumDiagTable.\n            ", '\n            Rev. PY18\n            New MOs added in xfRFSpectrumDiagTable.\n            ', '\n            Rev. PY17\n            Updated unit of measurement of XPI level in performance monitoring counters:\n            from dBm to dB\n            ', "\n            Rev. PY16\n            New MO 'xfRfTaps' added in xfRfIfPowerTable.\n            ", "\n            Rev. PY15\n            Changed definition of 'xfRFAlarms' MO.\n            ", '\n            Rev. PY14\n            Updated comment in xfRFDuplexDistance.\n            ', '\n            Rev. PY13\n            - Added the following alarms in RFAlarms - Textual convention:\n              * IfCableDamaged\n              * RccWarning\n            ', "\n            Rev. PY12\n            xfRAUAlarmStatus MO extended with definition of 'companionRauMismatch' alarm.\n            ", '\n            Rev. PY11\n            Corrected range for xfRFDuplexDistance MO.\n            ', '\n            Rev. PY10\n            Introduction of new FF 60 MHz.\n            ', "\n            Rev. PY9\n            - New MOs Added 'xfRFBoosterGain' and 'xfRFBoosterMaxInputPower' 'xfRFBoosterCapability'\n              'xfRFBoosterProductNumber' and 'xfRFBoosterHWRevision' in xfRFPowerTable.\n            ", "\n            Rev. PY8\n            - Added definition of 'remoteRfIfHighestSeverityAlarm' alarm in 'RFAlarms' textual convention.\n            ", "\n            Rev. PY7\n            - New MOs 'xfRfAvailableOutputPowerType' and 'xfRfSelectedOutputPowerType'\n              added in xfRfIfPowerTable.\n            ", "\n            Rev. PY6\n            - Updated description for some MOs, to better specify\n              'default' and 'invalid' output power definitions.\n            ", "\n            Rev. PY5\n            - 'Obsolete' MOs set back to 'current' status\n              in order to remove warnings.\n            ", '\n            Rev. PY4\n            - Updated description for xfRfInputPowerReset MO.\n            ', '\n            Rev. PY3\n            - Description updated for some MOs.\n            - Readability improvements (formatting).\n            ', '\n            Rev. PY2\n            - Added the following alarms in RFAlarms - Textual convention:\n              * rlts1Counter15m\n              * rlts2Counter15m\n              * rltmCounter15m\n              * tlts1Counter15m\n              * tltmCounter15m\n              * rlts1Counter24h\n              * rlts2Counter24h\n              * rltmCounter24h\n              * tlts1Counter24h\n              * tltmCounter24h\n            - Obsoleted the following MOs in table xfRFPowerTable and\n              moved-renamed in xfRAUIFTable:\n              * xfRfMaxMSELast7Days\n              * xfRfMinMSELast7Days\n              * xfRfMaxXPILast7Days\n              * xfRfMinXPILast7Days\n            - Added MOs for Extended RF PM in table xfRfIfPowerTable:\n              * xfRfMeanInputPower1m\n              * xfRfMaxOutputPowerLast7Days\n              * xfRfMinOutputPowerLast7Days\n              * xfRfMaxOutputPowerSinceReset\n              * xfRfMinOutputPowerSinceReset\n              * xfRfOutputPowerReset\n            ', '\n            Rev. PY1\n            - Updated description for xfRFCurrentStepNumber.\n            - Updated description for xfRFCurrentStepNumberRx.\n            ', '\n            Rev. PX9\n            xfRfIfPowerTable moved at the end of file, fixing HU44212.\n            ', '\n            Rev. PX8\n            - atpcVersionMismatch alarm definition removed from xfRAUAlarmStatus object (never used before).\n            - insufficientResourceRauXpic alarm definition added to xfRAUAlarmStatus object.\n            ', '\n            Rev. PX7\n            * New objects added in xfRFIFTable:\n              - xfRFDuplexType\n              - xfRFDuplexConfig\n              - xfRFDuplexDistance\n            ', '\n            Rev. PX6\n            Added new tables xfRFSpectrumDiagTable and xfRFSpectrumDiagResultTable\n            ', '\n            Rev. PX5\n            Merged content from 19089-FAL1044129_1_X_PBB5.\n            ', '\n            Rev. PX4\n            Updated description text for the following MOs:\n                     xfRFMaxMSELast7Days, xfRFMinMSELast7Days\n            ', '\n            Rev. PX3\n            - xfRfSelectedMinOutputPower object added.\n            - xfRfSelectedMaxOutputPower object added.\n            ', '\n            Rev. PX2\n            - xfRfAtpcSelectedInputPowerFar object renamed in xfRfAtpcTargetInputPowerFE.\n            ', '\n            Rev. PX1\n            - xfRauAtpcVersion object added in xfRAUTable.\n            - Definition of xfRAUAlarmStatus extended with atpcVersionMismatch.\n            - Added new table xfRfIfPowerTable.\n            ', '\n            Add new MIBs to xfRFPowerTable for improved power monitoring.\n            New MOs: xfRFMeanInputPower1m,         xfRFMaxOutputPowerLast7Days,\n                     xfRFMinOutputPowerLast7Days,  xfRFMaxOutputPowerSinceReset,\n                     xfRFMinOutputPowerSinceReset, xfRFMaxMSELast7Days,\n                     xfRFMinMSELast7Days,          xfRFMaxXPILast7Days,\n                     xfRFMinXPILast7Days,          xfRFOutputPowerReset\n            ', '\n            Modified definition for xfRauNotes to have a valid syntax definition.\n            ', '\n            Add new MIB xfRAUNotes to xfRAUTable.\n            ', '\n            Rev. V\n            - Changed MO: xfRAUSubBand in xfRAUTable becomes R/W (previously R only)\n            - New Table: xfRAUSubBandTable (as xfRadioLinkPtpRadioObjects object)\n            ', '\n            Rev. PU2\n            - New value: sdcDadeCalMismatch in xfRAUAlarmStatus\n            ', '\n            Rev. PU1\n            New MO: xfRFCurrentInputPowerSdcMain and xfRFCurrentInputPowerSdcDiv in xfRFPowerTable\n            ', '\n            Rev. T\n            - Official R-State for M14A\n            ', '\n            Rev. S\n            - Official R-State for TN 4.4 FP\n            ', '\n            Rev. PS4\n            - New MO: xfRAUCarrierMode in xfRAUCapabilityTable\n            ', '\n            Rev. PS3\n            - Correction for new 1024-QAM\n            ', '\n            Rev. PS2\n            - Added 1024-QAM\n            ', '\n            Rev. PS1\n            - New MO: xfRFAtpcFallbackTimer in xfRFPowerTable\n            ', '\n            Rev. N\n            - Changed RfInputThreshold default value to -93dBm\n            ', '\n            Rev. PN1\n            - New MO: xfRAURxCapability in xfRAUTable\n            ', '\n            Rev. PN\n            - New value: swNeedUpdate in xfRAUAlarmStatus\n            ', '\n            Rev. M\n            - Official R-State for TN 4.3\n            ', '\n            Rev. PM2\n            - Change name on xfRFAtpcFallbackMaxOutputPower to xfRFAtpcFallbackOutputPower\n            - Removed warnings about xfRFAtpcFallbackOutputPower(xfRFAtpcFallbackMaxOutputPower) and\n              xfRFAtpcFallbackEnable not included in xfRadioLinkPtpRadioCompleteGroup\n            - Updated xfRFAlarms\n            - New alarm: rfOutputLevelATPC\n            - Updated xfRAUAlarmStatus\n            - New alarm: ConfigurationInvalid\n            ', '\n            Rev. PM1\n            - New MO: xfRFAtpcFallbackMaxOutputPower and xfRFAtpcFallbackEnable in xfRFPowerTable\n            ', '\n            Rev. L\n            - Update of revision history\n            ', '\n            Rev. L\n            - Official Rev for TN 4.2\n            ', '\n            Rev. K\n            - Official Rev for TN 4.1 FP\n            ', '\n            Rev. PK8\n            - Changes for TN 4.2\n            - Spectrum Effeciency Class index values have changed\n            - Adde new Spectrum Effeciency Class values\n            - Added channelspacing chsp3500kHz(10)\n            ', '\n            Rev. PK7\n            - Changes for TN 4.1/4.2\n            - Removed table: xfRFOutputPowerTable\n            - New MO: xfRFOutputPowerTable in xfRFPowerTable\n            - Fixed double index issue in xfRAUCapabilityTable\n            ', '\n            Rev. PK6\n            - Changes for TN 4.1\n            - New table: xfRFOutputPowerTable\n            ', '\n            Rev. PK5\n            - Changes for TN 4.1\n            - Changes in table: xfRAUCapabilityTable (xfRAUChannelModulation)\n            ', '\n            Rev. PK4\n            - Changes for TN 4.1\n            - Changes in table: xfRAUCapabilityTable (xfRAUChannelModulation)\n            ', '\n            Rev. PK3\n            - Changes for TN 4.1\n            - Changes in table: xfRAUCapabilityTable\n            ', '\n            Rev. PK2\n            - Changes for TN 4.1\n            - Changes in table: xfRAUCapabilityTable\n            ', '\n            Rev. PK1\n            - Changes for TN 4.1\n            - New table: xfRAUCapabilityTable\n            ', '\n            Rev. J\n            - MIB files changes according to 1/15519-CRH109625/1 Uae Rev U\n            - xfRFLoopEnable: Changed comment regarding far end limitation to no access\n            - xfRFAttenuator: Changed comment regarding far end limitation.\n            - xfRFInputPowerReset: Changed comment regarding far end limitation to read-write (Traffic Node only)\n            ', '\n            Rev. H\n            - MIB files changes according to 1/15519-CRH109625/1 Uae Rev M + errata\n            - Changed syntax of object xfRFTxAdminStatus for better readability in a MIB-browser\n            ', '\n            Rev. PH1\n            - Added 64-QAM to RAUModCapability\n            ', '\n            Rev. G\n            - MIB files changes according to 1/15519-CRH109625/1 Uae Rev K\n            - Addition of Enum values for RAUModCapability to support ANSI\n            ', '\n            Rev. F\n            - Access restrictions explained in the description field for each MO\n            ', '\n            Rev. E\n            - New value (0) for xfRFMaxInputPowerLast7Days and xfRFMinInputPowerLast7Days\n            - xfRFRtpcSelectedOutputPower: Value 255 no longer valid\n            - xfRFAtpcMaxOutputPower: Value 255 no longer valid. New value: 254\n            - xfRFAtpcSelectedInputPowerFar: Value 255 no longer valid. New default value\n            - xfRFAttenuator: Value 255 no longer valid. New default value\n            ', '\n            Rev. D\n            - Changes according to 1/15519-CRH109625/1 Uae Rev D\n            - New value (other) for RFTxAdminStatus\n            - Changed MO xfRFInputPowerThreshold to MO xfRFInputAlarmThreshold (xfRFPowerTable)\n            - MO xfRFRtpcSelectedOutputPower: Value 254 = max power (default)\n            - MO xfRFAttenuator: Value 255 (new default)\n            - DEFVAL removed. Default value info declared in corresponding description fields\n            ', '\n            Rev. C\n            - All config alarms are removed\n            ', '\n            Rev. B\n            - All config alarms are defined\n            - Alarms are updated with new names\n            ', '\n            Rev. PB2\n            - Minor changes\n            ', '\n            Rev. PB1\n            - Added MO: xfRAUTemperature, xfRFInputPowerAlarmThreshold, xfRFLoopEnable\n            - Added Table: xfRFPowerTable\n            ', '\n            Rev. A\n            - Other is added to integer enumerations\n            - RFTxStatus object is split into admin and oper objects\n            - Integer types updated\n            ', '\n            Rev. PA1\n            - Initial revision\n            ',))
if mibBuilder.loadTexts: xfRadioLinkPtpRadioMIB.setLastUpdated('202009220000Z')
if mibBuilder.loadTexts: xfRadioLinkPtpRadioMIB.setOrganization('Ericsson AB')
if mibBuilder.loadTexts: xfRadioLinkPtpRadioMIB.setContactInfo('\n            Ericsson AB\n            Transmission & Transport Networks\n            SE-431 84  Molndal\n            Sweden\n            ')
if mibBuilder.loadTexts: xfRadioLinkPtpRadioMIB.setDescription('\n            This MIB defines objects for point-to-point Radio Link RAUs.\n            ')
class RFTxOperStatus(TextualConvention, Integer32):
    description = 'This TC enumerates the Tx operational status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("txOff", 2), ("txOn", 3), ("txStandby", 4))

class RAURfLoopAvailable(TextualConvention, Integer32):
    description = 'This TC enumerates the RF loop.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("rfLoopAvailable", 2), ("rfLoopNotAvailable", 3))

class RAUAtpcCapability(TextualConvention, Integer32):
    description = 'This TC enumerates the ATPC capability.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("noAtpcSupport", 2), ("doesNotExist", 3), ("atpcCapabilityUnknown", 4), ("supportsAtpc", 5))

class RAUModCapability(TextualConvention, Bits):
    description = '\n        This TC enumerates the modulation capabilities.\n        Modulation capabilities is indicated by 5 bits:\n        bits 01234\n          00000  undetermined\n          00001  C-QPSK\n          00010  16-QAM\n          00011  C-QPSK & 16-QAM\n          00100  128-QAM\n          01000  32-QAM\n          10000  64-QAM\n          ...\n          11111  C-QPSK & 16-QAM & 128-QAM & 32-QAM & 64-QAM\n        '
    status = 'current'
    namedValues = NamedValues(("cqpsk", 0), ("qam16", 1), ("qam128", 2), ("qam32", 3), ("qam64", 4))

class RAUChannelSpacingCapability(TextualConvention, Integer32):
    description = 'Channel spacing capability.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("chspUnknown", 0), ("chsp7MHz", 1), ("chsp14MHz", 2), ("chsp20MHz", 3), ("chsp28MHz", 4), ("chsp30MHz", 5), ("chsp40MHz", 6), ("chsp50MHz", 7), ("chsp56MHz", 8), ("chsp10MHz", 9), ("chsp3500KHz", 10), ("chsp60MHz", 11))

class RauSec(TextualConvention, Integer32):
    description = 'Spectrum Effeciency Class.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("other", 1), ("sec2", 2), ("sec3", 3), ("sec4L", 4), ("sec4H", 5), ("sec5A", 6), ("sec5B", 7), ("sec6A", 8), ("sec6B", 9))

class RAUModulation(TextualConvention, Integer32):
    description = 'Type of modulation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("other", 1), ("cqpsk", 2), ("qam16", 3), ("qam128", 4), ("qam32", 5), ("qam64", 6), ("qam4", 7), ("qam8", 8), ("qam256", 9), ("qam512", 10), ("qam1024", 11))

class ATPCFallbackEnable(TextualConvention, Integer32):
    description = 'ATPC fallback enable status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("disable", 2), ("enable", 3))

class RfOutputPower(TextualConvention, Integer32):
    description = 'RF output power in dBm.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), )
class RfInputPower(TextualConvention, Integer32):
    description = 'RF Input power in dBm/10.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), )
class BoosterCapability(TextualConvention, Integer32):
    description = 'Booster capabilities values codes.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("noBoosterSupport", 2), ("boosterSupport", 3))

xfRadioLinkPtpRadioObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1))
xfRadioLinkPtpRadioConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 2))
xfRAUTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1), )
if mibBuilder.loadTexts: xfRAUTable.setStatus('current')
if mibBuilder.loadTexts: xfRAUTable.setDescription('\n            Table for Radiolink point-to-point radios managed objects.\n            Table indexed with entPhysicalIndex.\n            ')
xfRAUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: xfRAUEntry.setStatus('current')
if mibBuilder.loadTexts: xfRAUEntry.setDescription('An entry in xfRadioTable.')
xfRAUAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 1), Bits().clone(namedValues=NamedValues(("atpcCapability0", 0), ("atpcCapability1", 1), ("atpcCapability2", 2), ("configurationInvalid0", 3), ("configurationInvalid1", 4), ("configurationInvalid2", 5), ("sdcHwErrorMain0", 6), ("sdcHwErrorMain1", 7), ("sdcHwErrorMain2", 8), ("sdcHwErrorDiv0", 9), ("sdcHwErrorDiv1", 10), ("sdcHwErrorDiv2", 11), ("sdcDadeCalMismatch0", 12), ("sdcDadeCalMismatch1", 13), ("sdcDadeCalMismatch2", 14), ("insufficientResourceRauXpic0", 15), ("insufficientResourceRauXpic1", 16), ("insufficientResourceRauXpic2", 17), ("companionRauMismatch0", 18), ("companionRauMismatch1", 19), ("companionRauMismatch2", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAUAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: xfRAUAlarmStatus.setDescription("\n            This object shows the alarm status of the radio unit.\n            atpcCability - The terminal is configured for ATPC, but the radio does not support ATPC.\n                           This alarm is activated only if ATPC is turned on (any direction).\n            sdcHwErrorMain - Received RF input signal level for Main path (of SDC TRX) has dropped below the threshold for the receiver.\n            sdcHwErrorDiv - Received RF input signal level for Diversity path (of SDC TRX) has dropped below the threshold for the receiver.\n            sdcDadeCalMismatch - A TRX is connected and its Serial Number doesn't match with the serial number stored into MO xfTRXSdcSerialNumber.\n            insufficientResourceRauXpic - Connected RAU is missing capabilities for XPIC.\n            companionRauMismatch - Connected RAU does not match with the companion one, either in 1+1 RLP or XPIC.\n            ")
xfRAURfLoopAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 2), RAURfLoopAvailable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAURfLoopAvailable.setStatus('current')
if mibBuilder.loadTexts: xfRAURfLoopAvailable.setDescription('\n            This object inidicates if RF loop is available in radio unit.\n            ')
xfRAUAtpcCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 3), RAUAtpcCapability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAUAtpcCapability.setStatus('current')
if mibBuilder.loadTexts: xfRAUAtpcCapability.setDescription('\n            This object indicates if the radio unit supports ATPC or not.\n            ')
xfRAULocalCtrlCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noLocalControlSupport", 2), ("supportsLocalControl", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAULocalCtrlCapability.setStatus('current')
if mibBuilder.loadTexts: xfRAULocalCtrlCapability.setDescription('\n            This object indicates if the radio unit supports local\n            transmit power control or not.\n            ')
xfRAUModCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 5), RAUModCapability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAUModCapability.setStatus('current')
if mibBuilder.loadTexts: xfRAUModCapability.setDescription('\n            This object shows the modulation methods supported\n            by the radio unit.\n            ')
xfRAUFrequencyband = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAUFrequencyband.setStatus('current')
if mibBuilder.loadTexts: xfRAUFrequencyband.setDescription('\n            This object shows the frequency band for the radio unit.\n            ')
xfRAUSubBand = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRAUSubBand.setStatus('current')
if mibBuilder.loadTexts: xfRAUSubBand.setDescription('\n            This object shows the sub band (Index) for the radio unit.\n            ')
xfRAUTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-127, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAUTemperature.setStatus('current')
if mibBuilder.loadTexts: xfRAUTemperature.setDescription('\n            This object shows the temperature, in degree Celsius, inside\n            the radio unit.\n            ')
xfRAUProtectionPath = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("rauRa1", 2), ("rauRa2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAUProtectionPath.setStatus('current')
if mibBuilder.loadTexts: xfRAUProtectionPath.setDescription('\n            This object indicates what radio path the radio belongs to.\n            ')
xfRAURxCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("rxSupport", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAURxCapability.setStatus('current')
if mibBuilder.loadTexts: xfRAURxCapability.setDescription('\n            This object indicates if the radio unit support RX configuration.\n            ')
xfRAUNotes = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRAUNotes.setStatus('current')
if mibBuilder.loadTexts: xfRAUNotes.setDescription('You can add information in this description field,\n            for example polarization, antenna type or logging a site visit.')
xfRauAtpcVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("version1", 2), ("version2", 3), ("version3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRauAtpcVersion.setStatus('current')
if mibBuilder.loadTexts: xfRauAtpcVersion.setDescription('\n            This object represents the RAU ATPC version.\n            ')
xfRauBoosterCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 13), BoosterCapability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRauBoosterCapability.setStatus('current')
if mibBuilder.loadTexts: xfRauBoosterCapability.setDescription('\n            This object represents the Booster capability for a link.\n            ')
xfRauBoosterSelectedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRauBoosterSelectedIndex.setStatus('current')
if mibBuilder.loadTexts: xfRauBoosterSelectedIndex.setDescription('\n            This object represents the Booster selected index for a link.\n            ')
xfRFIFTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2), )
if mibBuilder.loadTexts: xfRFIFTable.setStatus('current')
if mibBuilder.loadTexts: xfRFIFTable.setDescription('\n            Table for Radiolink point-to-point radios RF IF managed objects.\n            Table indexed with ifIndex.\n            ')
xfRFIFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRFIFEntry.setStatus('current')
if mibBuilder.loadTexts: xfRFIFEntry.setDescription('An entry in the xfRFIFTable.')
xfRFBaseTxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFBaseTxFrequency.setStatus('current')
if mibBuilder.loadTexts: xfRFBaseTxFrequency.setDescription('\n            This object shows the Tx frequency in KHz when frequency\n            step number is 0.\n            ')
xfRFBaseRxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFBaseRxFrequency.setStatus('current')
if mibBuilder.loadTexts: xfRFBaseRxFrequency.setDescription('\n            This object shows the Rx frequency in KHz when frequency.\n            step number is 0\n            ')
xfRFStepSize = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFStepSize.setStatus('current')
if mibBuilder.loadTexts: xfRFStepSize.setDescription('\n            This object shows the frequency step size in KHz.\n            ')
xfRFStepLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFStepLimitLow.setStatus('current')
if mibBuilder.loadTexts: xfRFStepLimitLow.setDescription('\n            This object shows the lowest allowed frequency step number.\n            ')
xfRFStepLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFStepLimitHigh.setStatus('current')
if mibBuilder.loadTexts: xfRFStepLimitHigh.setDescription('\n            This object shows the highest allowed frequency step number.\n            ')
xfRFCurrentStepNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFCurrentStepNumber.setStatus('current')
if mibBuilder.loadTexts: xfRFCurrentStepNumber.setDescription('\n            This object sets/shows the frequency step number.\n            0 = frequency not yet defined.\n\n            For Classic RAUs, TX and RX frequencies can not be set individually.\n            The span between them is always fixed and depends on different frequency and sub band.\n            - To calculate step number for TX and RX, use the following formulas:\n              New step number = (TX frequency - XfRAUBaseTxFrequency) / XfRAUStepSize\n              New step number = (RX frequency - xfRAUBaseRxFrequency) / XfRAUStepSize\n            - To calculate TX and RX frequencies, use the following formulas:\n              TX frequency = XfRAUBaseTxFrequency + XfRAUCurrentStepNumber * XfRAUStepSize\n              RX frequency = XfRAUBaseRxFrequency + XfRAUCurrentStepNumber * XfRAUStepSize\n\n            For Agile RAUs, the TX and RX frequencies can be set individually.\n            Above formulas are only valid for TX frequency.\n            For RX frequency, xfRFCurrentStepNumberRx must be used.\n\n            Default value: 0\n            ')
xfRFTxOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 7), RFTxOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFTxOperStatus.setStatus('current')
if mibBuilder.loadTexts: xfRFTxOperStatus.setDescription('\n            This object shows the operational status of the transmitter.\n            ')
xfRFTxAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("txOff", 2), ("txOn", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFTxAdminStatus.setStatus('current')
if mibBuilder.loadTexts: xfRFTxAdminStatus.setDescription('\n            This object sets the desired status of the transmitter.\n            Value other(1) not settable.\n\n            Especially for far end:\n              txOff(2), requests far end transmitter to be turned off.\n              txOn(3), requests far end transmitter to be turned on.\n              Default value: txOff(2) - near end.\n                             other(1) - far end.\n            ')
xfRFLoopEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFLoopEnable.setStatus('current')
if mibBuilder.loadTexts: xfRFLoopEnable.setDescription('\n            This object manage RF loop.\n            Default value: disable(3).\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 10), Bits().clone(namedValues=NamedValues(("txFrequency0", 0), ("txFrequency1", 1), ("txFrequency2", 2), ("rxFrequency0", 3), ("rxFrequency1", 4), ("rxFrequency2", 5), ("rfOutputLevel0", 6), ("rfOutputLevel1", 7), ("rfOutputLevel2", 8), ("rxAfc0", 9), ("rxAfc1", 10), ("rxAfc2", 11), ("rfInputLevel0", 12), ("rfInputLevel1", 13), ("rfInputLevel2", 14), ("rfInputThreshold0", 15), ("rfInputThreshold1", 16), ("rfInputThreshold2", 17), ("rfOutputLevelATPC0", 18), ("rfOutputLevelATPC1", 19), ("rfOutputLevelATPC2", 20), ("sdcRfInputLevelMain0", 21), ("sdcRfInputLevelMain1", 22), ("sdcRfInputLevelMain2", 23), ("sdcRfInputLevelDiv0", 24), ("sdcRfInputLevelDiv1", 25), ("sdcRfInputLevelDiv2", 26), ("rlts1Counter15m0", 27), ("rlts1Counter15m1", 28), ("rlts1Counter15m2", 29), ("rlts2Counter15m0", 30), ("rlts2Counter15m1", 31), ("rlts2Counter15m2", 32), ("rltmCounter15m0", 33), ("rltmCounter15m1", 34), ("rltmCounter15m2", 35), ("tlts1Counter15m0", 36), ("tlts1Counter15m1", 37), ("tlts1Counter15m2", 38), ("tltmCounter15m0", 39), ("tltmCounter15m1", 40), ("tltmCounter15m2", 41), ("rlts1Counter24h0", 42), ("rlts1Counter24h1", 43), ("rlts1Counter24h2", 44), ("rlts2Counter24h0", 45), ("rlts2Counter24h1", 46), ("rlts2Counter24h2", 47), ("rltmCounter24h0", 48), ("rltmCounter24h1", 49), ("rltmCounter24h2", 50), ("tlts1Counter24h0", 51), ("tlts1Counter24h1", 52), ("tlts1Counter24h2", 53), ("tltmCounter24h0", 54), ("tltmCounter24h1", 55), ("tltmCounter24h2", 56), ("remoteRfIfHighestSeverityAlarm0", 57), ("remoteRfIfHighestSeverityAlarm1", 58), ("remoteRfIfHighestSeverityAlarm2", 59), ("ifcabledamaged0", 60), ("ifcabledamaged1", 61), ("ifcabledamaged2", 62)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFAlarms.setStatus('current')
if mibBuilder.loadTexts: xfRFAlarms.setDescription("\n        This TC enumerates the alarms for RF interface.\n        txFrequency       - Transmitter frequency synthesizer loop is unlocked.\n        rxFrequency       - Receiver frequency synthesizer loop is unlocked.\n        rfOutputLevel     - Major degradation of transmitter output power is detected.\n        rxAfc             - The frequency of the received signal is outside the range of the Automatic Frequency Control in the RAU receiver.\n        rfInputLevel      - Receiver RF input signal level has dropped below the threshold for the receiver.\n        rfInputThreshold  - The RF input level has dropped below the xfRFInputAlarmThreshold.\n        rfOutputLevelATPC - The transmitter output power has been continuously at 'Patpc,max' for too long.\n                            This can occur due to several reasons:\n                            * The operator has set 'Patpc,max' too low.\n                            * The hop attenuation has increased (steady-state).\n                            * The transmitter PA is v.\n                            * The LNA in Rx is deteriorating.\n        ")
xfRFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 11), Bits().clone(namedValues=NamedValues(("rfLoop0", 0), ("rfLoop1", 1), ("rfLoop2", 2), ("txOff0", 3), ("txOff1", 4), ("txOff2", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFStatus.setStatus('current')
if mibBuilder.loadTexts: xfRFStatus.setDescription('\n            This object shows the RAU status.\n            rfLoop - Warns if RF-loop is enabled on RAU\n            txOff  - Warns if TX is manually set to off\n            ')
xfRFStepSizeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFStepSizeRx.setStatus('current')
if mibBuilder.loadTexts: xfRFStepSizeRx.setDescription('\n            This object shows the Rx frequency step size in KHz.\n            ')
xfRFStepLimitLowRx = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFStepLimitLowRx.setStatus('current')
if mibBuilder.loadTexts: xfRFStepLimitLowRx.setDescription('\n            This object shows the Rx lowest allowed frequency step number.\n            ')
xfRFStepLimitHighRx = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFStepLimitHighRx.setStatus('current')
if mibBuilder.loadTexts: xfRFStepLimitHighRx.setDescription('\n            This object shows the Rx highest allowed frequency step number.\n            ')
xfRFCurrentStepNumberRx = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFCurrentStepNumberRx.setStatus('current')
if mibBuilder.loadTexts: xfRFCurrentStepNumberRx.setDescription('\n            This object sets/shows the RX frequency step number for Agile RAUs.\n            0 = frequency not yet defined.\n\n            - To calculate step number for RX, use the following formula:\n              New step number Rx = (RX frequency - xfRAUBaseRxFrequency) / XfRAUStepSizeRx\n            - To calculate RX frequency, use the following formula:\n              RX frequency = XfRAUBaseRxFrequency + XfRAUCurrentStepNumberRx * XfRAUStepSizeRx\n\n            Default value: 0\n            ')
xfRFDuplexType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("fixed", 2), ("variable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFDuplexType.setStatus('current')
if mibBuilder.loadTexts: xfRFDuplexType.setDescription('\n            This object tells the duplex frequency mode for the RAU:\n            - fixed: Tx frequency only can be set by operator, Rx frequency is\n              automatically set on the basis of (fixed) RAU duplex frequency\n            - variable: duplex frequency can be configured by operator\n            ')
xfRFDuplexConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFDuplexConfig.setStatus('current')
if mibBuilder.loadTexts: xfRFDuplexConfig.setDescription('\n            This object enables setting of duplex frequency for the RAU.\n            It is always disabled(3) and can not be overwritten if xfRFDuplexType = fixed(2).\n            ')
xfRFDuplexDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFDuplexDistance.setStatus('current')
if mibBuilder.loadTexts: xfRFDuplexDistance.setDescription('\n            This object is aimed to select the duplex distance for the RAU.\n            It can only be set if xfRFDuplexConfig = enabled(2), so that:\n                 xfRFDuplexDistance = Tx Frequency - Rx Frequency\n            Otherwise, it is automatically filled on the basis of Tx and Rx\n            frequency settings, and can not be overwritten.\n            ')
xfRFPowerTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3), )
if mibBuilder.loadTexts: xfRFPowerTable.setStatus('current')
if mibBuilder.loadTexts: xfRFPowerTable.setDescription('\n            Table for Radiolink point-to-point radios managed objects.\n            Table indexed with ifIndex.\n            ')
xfRFPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRFPowerEntry.setStatus('current')
if mibBuilder.loadTexts: xfRFPowerEntry.setDescription('An entry in the xfRFPowerTable.')
xfRFCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFCurrentOutputPower.setStatus('current')
if mibBuilder.loadTexts: xfRFCurrentOutputPower.setDescription('\n            This object shows the output power in dBm including attenuator.\n            ')
xfRFRtpcMinOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFRtpcMinOutputPower.setStatus('current')
if mibBuilder.loadTexts: xfRFRtpcMinOutputPower.setDescription('\n            This object shows the minimum output power in dBm including attenuator.\n            Value -100 indicate that RAU Tx on is not possible due to power supply limitations.\n            ')
xfRFRtpcMaxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFRtpcMaxOutputPower.setStatus('current')
if mibBuilder.loadTexts: xfRFRtpcMaxOutputPower.setDescription('\n            This object shows the maximum output power in dBm including attenuator.\n            Value -100 indicate that RAU Tx on is not possible due to power supply limitations.\n            ')
xfRFRtpcSelectedOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(254, 254), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFRtpcSelectedOutputPower.setStatus('current')
if mibBuilder.loadTexts: xfRFRtpcSelectedOutputPower.setDescription('\n            This object set/shows the selected output power in dBm including attenuator.\n            Value 254 indicates that the selected power is set to maximum.\n            Default value: 254\n            ')
xfRFAtpcMinOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFAtpcMinOutputPower.setStatus('current')
if mibBuilder.loadTexts: xfRFAtpcMinOutputPower.setDescription('\n            This object shows the minimum output power in dBm in ATPC.\n            mode for radio contained in the radio terminal.\n            ')
xfRFAtpcMaxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(254, 254), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFAtpcMaxOutputPower.setStatus('current')
if mibBuilder.loadTexts: xfRFAtpcMaxOutputPower.setDescription('\n            This object sets/shows the ATPC maximum output power in dBm for radio contained in the radio terminal.\n            Value 254 indicates that the power is set to maximum.\n            Default value: 254.\n            ')
xfRFAtpcMinInputPowerFar = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-99, -30), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFAtpcMinInputPowerFar.setStatus('current')
if mibBuilder.loadTexts: xfRFAtpcMinInputPowerFar.setDescription('\n            This object shows the ATPC minimum input target power level for far end radio.\n            ')
xfRFAtpcSelectedInputPowerFar = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, -30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFAtpcSelectedInputPowerFar.setStatus('current')
if mibBuilder.loadTexts: xfRFAtpcSelectedInputPowerFar.setDescription('\n            This object sets/shows the ATPC selected input target level for far end radio.\n            Default value: -30.\n            ')
xfRFAttenuator = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFAttenuator.setStatus('current')
if mibBuilder.loadTexts: xfRFAttenuator.setDescription('\n            This object sets/shows the value in dBm for fixed attenuator mounted in antenna.\n            Default value: 0.\n            ')
xfRFCurrentInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, -200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFCurrentInputPower.setStatus('current')
if mibBuilder.loadTexts: xfRFCurrentInputPower.setDescription('\n            This object shows RF input level = value/10 dBm.\n            Domain: [-20.0 .. -99.9 dBm].\n            ')
xfRFMaxInputPowerLast7Days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMaxInputPowerLast7Days.setStatus('current')
if mibBuilder.loadTexts: xfRFMaxInputPowerLast7Days.setDescription('\n            This object shows maximum RF input level last 7 days.\n            RF input level = value/10 dBm.\n            Domain: [-99.9 ... -20.0 dBm].\n            0 (zero) indicates invalid value.\n            ')
xfRFMinInputPowerLast7Days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMinInputPowerLast7Days.setStatus('current')
if mibBuilder.loadTexts: xfRFMinInputPowerLast7Days.setDescription('\n            This object shows minimum RF input level last 7 days.\n            RF input level = value/10 dBm.\n            Domain: [-99.9 ... -20.0 dBm].\n            0 (zero) indicates invalid value.\n            ')
xfRFMaxInputPowerSinceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, -200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMaxInputPowerSinceReset.setStatus('current')
if mibBuilder.loadTexts: xfRFMaxInputPowerSinceReset.setDescription('\n            This object shows maximum RF input level since reset.\n            RF input level = value/10 dBm.\n            Domain: [-20.0 .. -99.9 dBm].\n            ')
xfRFMinInputPowerSinceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, -200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMinInputPowerSinceReset.setStatus('current')
if mibBuilder.loadTexts: xfRFMinInputPowerSinceReset.setDescription('\n            This object shows minimum RF input level since reset.\n            RF input level = value/10 dBm.\n            Domain: [-20.0 .. -99.9 dBm].\n            ')
xfRFInputPowerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("inputPowerReset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFInputPowerReset.setStatus('current')
if mibBuilder.loadTexts: xfRFInputPowerReset.setDescription('\n            This object reset the registers for the RF input level\n            and All Time High level this seven days period and\n            counters for the next seven days period of time\n\n            Note. For protected rlMLE and rlXfMLE terminals this\n            command will reset both Ra1 and Ra2 values.\n\n            Near end access: read-write\n            Far end access: read-write  (Traffic Node only)\n            ')
xfRFInputAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, -30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFInputAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: xfRFInputAlarmThreshold.setDescription('\n            This object shows RF input level threshold.\n            Default value: -93.\n            ')
xfRFOutputPower4QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFOutputPower4QAM.setStatus('current')
if mibBuilder.loadTexts: xfRFOutputPower4QAM.setDescription('Output power for 4QAM.')
xfRFOutputPower8QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFOutputPower8QAM.setStatus('current')
if mibBuilder.loadTexts: xfRFOutputPower8QAM.setDescription('Output power for 8QAM.')
xfRFOutputPower16QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFOutputPower16QAM.setStatus('current')
if mibBuilder.loadTexts: xfRFOutputPower16QAM.setDescription('Output power for 16QAM.')
xfRFOutputPower32QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFOutputPower32QAM.setStatus('current')
if mibBuilder.loadTexts: xfRFOutputPower32QAM.setDescription('Output power for 32QAM.')
xfRFOutputPower64QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFOutputPower64QAM.setStatus('current')
if mibBuilder.loadTexts: xfRFOutputPower64QAM.setDescription('Output power for 64QAM.')
xfRFOutputPower128QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFOutputPower128QAM.setStatus('current')
if mibBuilder.loadTexts: xfRFOutputPower128QAM.setDescription('Output power for 128QAM.')
xfRFOutputPower256QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFOutputPower256QAM.setStatus('current')
if mibBuilder.loadTexts: xfRFOutputPower256QAM.setDescription('Output power for 256QAM.')
xfRFOutputPower512QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFOutputPower512QAM.setStatus('current')
if mibBuilder.loadTexts: xfRFOutputPower512QAM.setDescription('Output power for 512QAM.')
xfRFAtpcFallbackOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(254, 254), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFAtpcFallbackOutputPower.setStatus('current')
if mibBuilder.loadTexts: xfRFAtpcFallbackOutputPower.setDescription('\n            This object sets maximum output power in dBm in ATPCFallback\n            mode for radio contained in the radio terminal.\n            Value = 254 indicates that the power is set to maximum.\n            Default value: 254.\n            ')
xfRFAtpcFallbackEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 26), ATPCFallbackEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFAtpcFallbackEnable.setStatus('current')
if mibBuilder.loadTexts: xfRFAtpcFallbackEnable.setDescription('Enable/disable ATPCFallback.')
xfRFAtpcFallbackTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFAtpcFallbackTimer.setStatus('current')
if mibBuilder.loadTexts: xfRFAtpcFallbackTimer.setDescription('ATPC Fallback Timer specifies how long\n            the output power can be at PATPC, MAX before\n            ATPC fallback is triggered\n            Default value: 15 min')
xfRFOutputPower1024QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFOutputPower1024QAM.setStatus('current')
if mibBuilder.loadTexts: xfRFOutputPower1024QAM.setDescription('Output power for 1024QAM.')
xfRFMaxOutputPowerNotLimited = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMaxOutputPowerNotLimited.setStatus('current')
if mibBuilder.loadTexts: xfRFMaxOutputPowerNotLimited.setDescription('Max output power in dBm including\n             attenuator that the RAU can give if it is\n             not power supply limited.')
xfRFMaxOutputPowerNotPossible = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("isPossible", 1), ("isNotPossible", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMaxOutputPowerNotPossible.setStatus('current')
if mibBuilder.loadTexts: xfRFMaxOutputPowerNotPossible.setDescription('\n            unknown(0)\n            isPossible(1) Max output power is possible due\n                          to power supply limitations\n            isNotPossible(2) Max output power is not possible\n                             due to power supply limitations\n            ')
xfRFCurrentInputPowerSdcMain = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFCurrentInputPowerSdcMain.setStatus('current')
if mibBuilder.loadTexts: xfRFCurrentInputPowerSdcMain.setDescription('\n            This object shows RF input level for SDC Main path = value/10 dBm.\n            Domain: [-20.0 .. -99.9 dBm].\n            0 (zero) indicates invalid value (e.g. SDC not available).\n            ')
xfRFCurrentInputPowerSdcDiv = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFCurrentInputPowerSdcDiv.setStatus('current')
if mibBuilder.loadTexts: xfRFCurrentInputPowerSdcDiv.setDescription('\n            This object shows RF input level for SDC Diversity path = value/10 dBm.\n            Domain: [-20.0 .. -99.9 dBm].\n            0 (zero) indicates invalid value (e.g. SDC not available).\n            ')
xfRFMeanInputPower1m = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMeanInputPower1m.setStatus('current')
if mibBuilder.loadTexts: xfRFMeanInputPower1m.setDescription('\n            This object shows RF input mean level for last minute.\n            RF input level = value/10 dBm.\n            Domain: [-99.9 ... -20.0 dBm]\n            0 (zero) indicates invalid value.\n            ')
xfRFMaxOutputPowerLast7Days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMaxOutputPowerLast7Days.setStatus('current')
if mibBuilder.loadTexts: xfRFMaxOutputPowerLast7Days.setDescription('\n            This object shows maximum RF output level last 7 days.\n            RF output level = value dBm.\n            Domain: [-100 ... 45 dBm]\n            255 indicates invalid value.\n            ')
xfRFMinOutputPowerLast7Days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMinOutputPowerLast7Days.setStatus('current')
if mibBuilder.loadTexts: xfRFMinOutputPowerLast7Days.setDescription('\n            This object shows minimum RF output level last 7 days.\n            RF output level = value dBm.\n            Domain: [-100 ... 45 dBm]\n            255 indicates invalid value.\n            ')
xfRFMaxOutputPowerSinceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMaxOutputPowerSinceReset.setStatus('current')
if mibBuilder.loadTexts: xfRFMaxOutputPowerSinceReset.setDescription('\n            This object shows maximum RF output level since reset\n            RF output level = value dBm.\n            Domain: [-100 ... 45 dBm]\n            255 indicates invalid value.\n            ')
xfRFMinOutputPowerSinceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMinOutputPowerSinceReset.setStatus('current')
if mibBuilder.loadTexts: xfRFMinOutputPowerSinceReset.setDescription('\n            This object shows minimum RF output level since reset\n            RF output level = value dBm.\n            Domain: [-100 ... 45 dBm]\n            255 indicates invalid value.\n            ')
xfRFMaxMSELast7Days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMaxMSELast7Days.setStatus('current')
if mibBuilder.loadTexts: xfRFMaxMSELast7Days.setDescription('Indicate Max MSE level last 7 days.\n            Input level = value/10 dB.\n            Domain: [-100.0 ... 100.0 dB]\n            2000 indicates invalid value.\n            ')
xfRFMinMSELast7Days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMinMSELast7Days.setStatus('current')
if mibBuilder.loadTexts: xfRFMinMSELast7Days.setDescription('Indicate Min MSE level last 7 days.\n            Input level = value/10 dB.\n            Domain: [-100.0 ... 100.0 dB]\n            2000 indicates invalid value.\n            ')
xfRFMaxXPILast7Days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMaxXPILast7Days.setStatus('current')
if mibBuilder.loadTexts: xfRFMaxXPILast7Days.setDescription('Indicate Max Cross-Polar Interference (XPI) level last 7 days.\n            Input level = value/10 dB.\n            Domain: [-100.0 ... 100.0 dB]\n            2000 indicates invalid value.\n            ')
xfRFMinXPILast7Days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMinXPILast7Days.setStatus('current')
if mibBuilder.loadTexts: xfRFMinXPILast7Days.setDescription('Indicate Min Cross-Polar Interference (XPI) level last 7 days.\n            Input level = value/10 dB.\n            Domain: [-100.0 ... 100.0 dB]\n            2000 indicates invalid value.\n            ')
xfRFOutputPowerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("outputPowerReset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFOutputPowerReset.setStatus('current')
if mibBuilder.loadTexts: xfRFOutputPowerReset.setDescription('\n            This object reset the registers for the RF output level\n            and All Time High level this seven days period and\n            counters for the next seven days period of time.\n            ')
xfRFBoosterGain = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFBoosterGain.setStatus('current')
if mibBuilder.loadTexts: xfRFBoosterGain.setDescription('\n            Value of the Gain of the Booster\n            ')
xfRFBoosterMaxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 35), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFBoosterMaxInputPower.setStatus('current')
if mibBuilder.loadTexts: xfRFBoosterMaxInputPower.setDescription('\n            Value of the Max Input Power admitted towards the Booster\n            ')
xfRFBoosterCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 45), BoosterCapability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFBoosterCapability.setStatus('current')
if mibBuilder.loadTexts: xfRFBoosterCapability.setDescription('\n            Value of Booster capability according to the system\n            ')
xfRFBoosterProductNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFBoosterProductNumber.setStatus('current')
if mibBuilder.loadTexts: xfRFBoosterProductNumber.setDescription('\n            Product Number of the Booster connected to the specific RF IF\n            ')
xfRFBoosterHWRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 3, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFBoosterHWRevision.setStatus('current')
if mibBuilder.loadTexts: xfRFBoosterHWRevision.setDescription('\n            HW Revision of the Booster connected to the specific RF IF\n            ')
xfRAUCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 4), )
if mibBuilder.loadTexts: xfRAUCapabilityTable.setStatus('current')
if mibBuilder.loadTexts: xfRAUCapabilityTable.setDescription('\n            Table for RAU capability information.\n            Table indexed with entPhysicalIndex and xfTermRowIndex.\n            ')
xfRAUCapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermRowIndex"))
if mibBuilder.loadTexts: xfRAUCapabilityEntry.setStatus('current')
if mibBuilder.loadTexts: xfRAUCapabilityEntry.setDescription('An entry in xfRAUCapabilityTable.')
xfRAUChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 4, 1, 1), RAUChannelSpacingCapability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAUChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: xfRAUChannelSpacing.setDescription('Channel spacing.\n            ETSI: 3.5, 7, 14, 28, 40, 56 MHz\n            ANSI: 10, 20, 30, 40, 50 MHz\n            ')
xfRAUChannelModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 4, 1, 2), RAUModulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAUChannelModulation.setStatus('current')
if mibBuilder.loadTexts: xfRAUChannelModulation.setDescription('This object shows the modulation.\n            Values:\n              cqpsk(2)    CQPSK\n              qam16(3)    16-QAM\n              qam128(4)   128-QAM\n              qam32(5)    32-QAM\n              qam64(6)    64-QAM\n              qam4(7)     4-QAM\n              qam8(8)     8-QAM\n              qam256(9)   256-QAM\n              qam512(10)  512-QAM\n              qam1024(11) 1024-QAM\n            ')
xfRAUSpectrumEfficiencyClass = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 4, 1, 3), RauSec()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAUSpectrumEfficiencyClass.setStatus('current')
if mibBuilder.loadTexts: xfRAUSpectrumEfficiencyClass.setDescription('Spectrum Efficiency Class:\n              other(1), unknown\n              sec2(2),  Spectrum eff. Class 2\n              sec3(3),  Spectrum eff. Class 3\n              sec4L(4), Spectrum eff. Class 4L\n              sec4H(5), Specturm eff. Class 4H\n              sec5A(6), Spectrum eff. Class 5A\n              sec5B(7), Spectrum eff. Class 5B\n              sec6A(8), Spectrum eff. Class 6A\n              sec6B(9)  Spectrum eff. Class 6B\n            ')
xfRAUCarrierMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("singleCarrier", 1), ("xpicDualCarrier", 2), ("mimoMultiCarrier", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAUCarrierMode.setStatus('current')
if mibBuilder.loadTexts: xfRAUCarrierMode.setDescription('\n            Radio carrier mode.\n            ')
xfRAUSubBandTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 5), )
if mibBuilder.loadTexts: xfRAUSubBandTable.setStatus('current')
if mibBuilder.loadTexts: xfRAUSubBandTable.setDescription('\n            Table for RAU Sub-Band index capability.\n            Table indexed with entPhysicalIndex and xfRAUSubBandIndex.\n            ')
xfRAUSubBandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUSubBandIndex"))
if mibBuilder.loadTexts: xfRAUSubBandEntry.setStatus('current')
if mibBuilder.loadTexts: xfRAUSubBandEntry.setDescription('An entry in xfRAUSubBandTable.')
xfRAUSubBandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAUSubBandIndex.setStatus('current')
if mibBuilder.loadTexts: xfRAUSubBandIndex.setDescription('An index for the specific RAU Sub-Band available index range.')
xfRAUSubBandRange = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRAUSubBandRange.setStatus('current')
if mibBuilder.loadTexts: xfRAUSubBandRange.setDescription('This object shows the RAU Sub-Band available index range [0..255].')
xfRFSpectrumDiagTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6), )
if mibBuilder.loadTexts: xfRFSpectrumDiagTable.setStatus('current')
if mibBuilder.loadTexts: xfRFSpectrumDiagTable.setDescription('Table for RF Spectrum Diagnostics control and status')
xfRFSpectrumDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRFSpectrumDiagEntry.setStatus('current')
if mibBuilder.loadTexts: xfRFSpectrumDiagEntry.setDescription('An entry in xfRFSpectrumDiagTable')
xfRFSpectrumDiagAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("other", 1), ("channelScanStart", 2), ("subBandScanStart", 3), ("scanStop", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFSpectrumDiagAdminStatus.setStatus('current')
if mibBuilder.loadTexts: xfRFSpectrumDiagAdminStatus.setDescription('RF Spectrum Diagnostics Admin Status')
xfRFSpectrumDiagOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("scanNotStarted", 0), ("subBandScanOngoing", 1), ("channelScanOngoing", 2), ("scanCanceled", 3), ("subBandScanFinished", 4), ("channelScanFinished", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagOperStatus.setStatus('current')
if mibBuilder.loadTexts: xfRFSpectrumDiagOperStatus.setDescription('RF Spectrum Diagnostics Oper Status')
xfRFSpectrumDiagChannelScanEstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagChannelScanEstTime.setStatus('current')
if mibBuilder.loadTexts: xfRFSpectrumDiagChannelScanEstTime.setDescription('Estimated time in seconds for scanning one\n             Channel Spacing at current RX frequency')
xfRFSpectrumDiagSubBandScanEstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagSubBandScanEstTime.setStatus('current')
if mibBuilder.loadTexts: xfRFSpectrumDiagSubBandScanEstTime.setDescription('Estimated time in seconds for scanning\n             full Sub Band of connected RAU')
xfRFSpectrumDiagScanDate = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagScanDate.setStatus('current')
if mibBuilder.loadTexts: xfRFSpectrumDiagScanDate.setDescription('Date and time when scan (channel or sub-band) is completed,\n             format: [YYYY]-[MM]-[DD]T[hh]:[mm]:[ss]')
xfRFSpectrumDiagChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: xfRFSpectrumDiagChannelSpacing.setDescription('Channel width measured by Spectrum Diagnostics')
xfRFSpectrumDiagCurrRxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagCurrRxFrequency.setStatus('current')
if mibBuilder.loadTexts: xfRFSpectrumDiagCurrRxFrequency.setDescription('Current value of Rx frequency')
xfRFSpectrumDiagMinRxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagMinRxFrequency.setStatus('current')
if mibBuilder.loadTexts: xfRFSpectrumDiagMinRxFrequency.setDescription('Minimum sub-band Rx frequency (RAU lower edge)')
xfRFSpectrumDiagMaxRxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagMaxRxFrequency.setStatus('current')
if mibBuilder.loadTexts: xfRFSpectrumDiagMaxRxFrequency.setDescription('Maximum sub-band Rx frequency (RAU upper edge)')
xfRFSpectrumDiagIdxCompanion1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagIdxCompanion1.setStatus('current')
if mibBuilder.loadTexts: xfRFSpectrumDiagIdxCompanion1.setDescription('RF IF index for 1st companion carrier (0 if no companion)')
xfRFSpectrumDiagIdxCompanion2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagIdxCompanion2.setStatus('current')
if mibBuilder.loadTexts: xfRFSpectrumDiagIdxCompanion2.setDescription('RF IF index for 2nd companion carrier (0 if no companion)')
xfRFSpectrumDiagIdxCompanion3 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagIdxCompanion3.setStatus('current')
if mibBuilder.loadTexts: xfRFSpectrumDiagIdxCompanion3.setDescription('RF IF index for 3rd companion carrier (0 if no companion)')
xfRFSpectrumDiagProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 6, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagProgress.setStatus('current')
if mibBuilder.loadTexts: xfRFSpectrumDiagProgress.setDescription('Completed percentage of Spectrum Diagnostics scan')
xfRFSpectrumDiagResultTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 7), )
if mibBuilder.loadTexts: xfRFSpectrumDiagResultTable.setStatus('current')
if mibBuilder.loadTexts: xfRFSpectrumDiagResultTable.setDescription('Table of Spectrum Diagnostics scan results')
xfRFSpectrumDiagResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagResultIndex"))
if mibBuilder.loadTexts: xfRFSpectrumDiagResultEntry.setStatus('current')
if mibBuilder.loadTexts: xfRFSpectrumDiagResultEntry.setDescription('An entry in xfRFSpectrumDiagResultTable')
xfRFSpectrumDiagResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagResultIndex.setStatus('current')
if mibBuilder.loadTexts: xfRFSpectrumDiagResultIndex.setDescription('Spectrum Diagnostics Scan Result Index')
xfRFSpectrumDiagResultRxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagResultRxFrequency.setStatus('current')
if mibBuilder.loadTexts: xfRFSpectrumDiagResultRxFrequency.setDescription('Spectrum Diagnostics Scan Result Rx frequency in kHz')
xfRFSpectrumDiagResultRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, -200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFSpectrumDiagResultRxPower.setStatus('current')
if mibBuilder.loadTexts: xfRFSpectrumDiagResultRxPower.setDescription('Spectrum Diagnostics Scan Result Rx Power\n            value/10 dBm\n            Domain: [-99.9 .. -20.0 dBm]')
xfRfIfPowerTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8), )
if mibBuilder.loadTexts: xfRfIfPowerTable.setStatus('current')
if mibBuilder.loadTexts: xfRfIfPowerTable.setDescription('\n            Table for Radio Link RAU managed objects.\n            Table indexed with ifIndex.\n            ')
xfRfIfPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRfIfPowerEntry.setStatus('current')
if mibBuilder.loadTexts: xfRfIfPowerEntry.setDescription('An entry in the xfRfIfPowerTable.')
xfRfSelectedMinOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 1), RfOutputPower()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRfSelectedMinOutputPower.setStatus('current')
if mibBuilder.loadTexts: xfRfSelectedMinOutputPower.setDescription('\n            Minimum output power in dBm (selected by operator).\n            Default value: 10 dBm.\n            ')
xfRfSelectedMaxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 2), RfOutputPower()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRfSelectedMaxOutputPower.setStatus('current')
if mibBuilder.loadTexts: xfRfSelectedMaxOutputPower.setDescription('\n            Maximum output power in dBm (selected by operator).\n            Default value: 10 dBm.\n            ')
xfRfCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 3), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfCurrentOutputPower.setStatus('current')
if mibBuilder.loadTexts: xfRfCurrentOutputPower.setDescription('\n            Current output power in dBm.\n            255 indicates invalid value.\n            ')
xfRfMinOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 4), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMinOutputPower.setStatus('current')
if mibBuilder.loadTexts: xfRfMinOutputPower.setDescription('\n            Minimum output power in dBm (provided by RAU).\n            255 indicates invalid value.\n            ')
xfRfMaxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 5), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMaxOutputPower.setStatus('current')
if mibBuilder.loadTexts: xfRfMaxOutputPower.setDescription('\n            Maximum output power in dBm (provided by RAU).\n            255 indicates invalid value.\n            ')
xfRfAtpcTargetInputPowerFE = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, -30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRfAtpcTargetInputPowerFE.setStatus('current')
if mibBuilder.loadTexts: xfRfAtpcTargetInputPowerFE.setDescription('\n            ATPC target input power on Far End side.\n            Default value: -30.\n            ')
xfRfCurrentInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 7), RfInputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfCurrentInputPower.setStatus('current')
if mibBuilder.loadTexts: xfRfCurrentInputPower.setDescription('\n            RF input level.\n            Value is in 1/10 dBm.\n            Domain: [-20.0 .. -99.9 dBm].\n            ')
xfRfMaxInputPowerLast7Days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 8), RfInputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMaxInputPowerLast7Days.setStatus('current')
if mibBuilder.loadTexts: xfRfMaxInputPowerLast7Days.setDescription('\n            Maximum RF input level in the last 7 days.\n            Value is in 1/10 dBm.\n            Domain: [-99.9 ... -20.0 dBm].\n            0 (zero) indicates an invalid value.\n            ')
xfRfMinInputPowerLast7Days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 9), RfInputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMinInputPowerLast7Days.setStatus('current')
if mibBuilder.loadTexts: xfRfMinInputPowerLast7Days.setDescription('\n            Minimum RF input level in the last 7 days.\n            Value is in 1/10 dBm.\n            Domain: [-99.9 ... -20.0 dBm].\n            0 (zero) indicates an invalid value.\n            ')
xfRfMaxInputPowerSinceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 10), RfInputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMaxInputPowerSinceReset.setStatus('current')
if mibBuilder.loadTexts: xfRfMaxInputPowerSinceReset.setDescription('\n            Maximum RF input level since reset.\n            Value is in 1/10 dBm.\n            Domain: [-99.9 ... -20.0 dBm].\n            0 (zero) indicates an invalid value.\n            ')
xfRfMinInputPowerSinceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 11), RfInputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMinInputPowerSinceReset.setStatus('current')
if mibBuilder.loadTexts: xfRfMinInputPowerSinceReset.setDescription('\n            Minimum RF input level since reset.\n            Value is in 1/10 dBm.\n            Domain: [-99.9 ... -20.0 dBm].\n            0 (zero) indicates an invalid value.\n            ')
xfRfInputPowerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("inputPowerNoReset", 2), ("inputPowerReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRfInputPowerReset.setStatus('current')
if mibBuilder.loadTexts: xfRfInputPowerReset.setDescription('\n            This object resets the registers for:\n            - RF input power levels\n            - input levels (i.e. RF power, MSE and XPI) in the next 7 days period of time.\n            ')
xfRfInputAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, -30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRfInputAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: xfRfInputAlarmThreshold.setDescription('\n            RF input level threshold.\n            Default value: -93.\n            ')
xfRfOutputPower4QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 14), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfOutputPower4QAM.setStatus('current')
if mibBuilder.loadTexts: xfRfOutputPower4QAM.setDescription('Output power for 4QAM.\n            255 indicates invalid value.')
xfRfOutputPower16QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 15), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfOutputPower16QAM.setStatus('current')
if mibBuilder.loadTexts: xfRfOutputPower16QAM.setDescription('Output power for 16QAM.\n            255 indicates invalid value.')
xfRfOutputPower32QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 16), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfOutputPower32QAM.setStatus('current')
if mibBuilder.loadTexts: xfRfOutputPower32QAM.setDescription('Output power for 32QAM.\n            255 indicates invalid value.')
xfRfOutputPower64QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 17), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfOutputPower64QAM.setStatus('current')
if mibBuilder.loadTexts: xfRfOutputPower64QAM.setDescription('Output power for 64QAM.\n            255 indicates invalid value.')
xfRfOutputPower128QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 18), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfOutputPower128QAM.setStatus('current')
if mibBuilder.loadTexts: xfRfOutputPower128QAM.setDescription('Output power for 128QAM.\n            255 indicates invalid value.')
xfRfOutputPower256QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 19), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfOutputPower256QAM.setStatus('current')
if mibBuilder.loadTexts: xfRfOutputPower256QAM.setDescription('Output power for 256QAM.\n            255 indicates invalid value.')
xfRfOutputPower512QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 20), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfOutputPower512QAM.setStatus('current')
if mibBuilder.loadTexts: xfRfOutputPower512QAM.setDescription('Output power for 512QAM.\n            255 indicates invalid value.')
xfRfOutputPower1024QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 21), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfOutputPower1024QAM.setStatus('current')
if mibBuilder.loadTexts: xfRfOutputPower1024QAM.setDescription('Output power for 1024QAM.\n            255 indicates invalid value.')
xfRfOutputPower2048QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 22), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfOutputPower2048QAM.setStatus('current')
if mibBuilder.loadTexts: xfRfOutputPower2048QAM.setDescription('Output power for 2048QAM.\n            255 indicates invalid value.')
xfRfOutputPower4096QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 23), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfOutputPower4096QAM.setStatus('current')
if mibBuilder.loadTexts: xfRfOutputPower4096QAM.setDescription('Output power for 4096QAM.\n            255 indicates invalid value.')
xfRfMaxOutputPowerNotLimited = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 24), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMaxOutputPowerNotLimited.setStatus('current')
if mibBuilder.loadTexts: xfRfMaxOutputPowerNotLimited.setDescription('\n            Max output power in dBm that the RAU can give\n            if it is not power supply limited.\n            255 indicates invalid value.\n            ')
xfRfMaxOutputPowerPossible = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("possible", 2), ("notPossible", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMaxOutputPowerPossible.setStatus('current')
if mibBuilder.loadTexts: xfRfMaxOutputPowerPossible.setDescription('\n            possible(2): max output power is possible.\n            notPossible(3): max output power is not possible, due to power supply limitations.\n            ')
xfRfMeanInputPower1m = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMeanInputPower1m.setStatus('current')
if mibBuilder.loadTexts: xfRfMeanInputPower1m.setDescription('\n            This object shows RF input mean level for last minute.\n            RF input level = value/10 dBm.\n            Domain: [-99.9 ... -20.0 dBm]\n            0 (zero) indicates invalid value.\n            ')
xfRfMaxOutputPowerLast7Days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMaxOutputPowerLast7Days.setStatus('current')
if mibBuilder.loadTexts: xfRfMaxOutputPowerLast7Days.setDescription('\n            This object shows maximum RF output level last 7 days.\n            RF output level = value dBm.\n            Domain: [-100 ... 45 dBm]\n            255 indicates invalid value.\n            ')
xfRfMinOutputPowerLast7Days = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMinOutputPowerLast7Days.setStatus('current')
if mibBuilder.loadTexts: xfRfMinOutputPowerLast7Days.setDescription('\n            This object shows minimum RF output level last 7 days.\n            RF output level = value dBm.\n            Domain: [-100 ... 45 dBm]\n            255 indicates invalid value.\n            ')
xfRfMaxOutputPowerSinceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMaxOutputPowerSinceReset.setStatus('current')
if mibBuilder.loadTexts: xfRfMaxOutputPowerSinceReset.setDescription('\n            This object shows maximum RF output level since reset\n            RF output level = value dBm.\n            Domain: [-100 ... 45 dBm]\n            255 indicates invalid value.\n            ')
xfRfMinOutputPowerSinceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfMinOutputPowerSinceReset.setStatus('current')
if mibBuilder.loadTexts: xfRfMinOutputPowerSinceReset.setDescription('\n            This object shows minimum RF output level since reset\n            RF output level = value dBm.\n            Domain: [-100 ... 45 dBm]\n            255 indicates invalid value.\n            ')
xfRfOutputPowerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("outputPowerNoReset", 2), ("outputPowerReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRfOutputPowerReset.setStatus('current')
if mibBuilder.loadTexts: xfRfOutputPowerReset.setDescription('\n            This object reset the registers for the RF output level\n            and All Time High level this seven days period and\n            counters for the next seven days period of time.\n            ')
xfRfAvailableOutputPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("standardPower", 2), ("highPower", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfAvailableOutputPowerType.setStatus('current')
if mibBuilder.loadTexts: xfRfAvailableOutputPowerType.setDescription('\n            This object reports the output power capability of the RAU:\n            - standardPower\n            - highPower\n           ')
xfRfSelectedOutputPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("standardPower", 2), ("highPower", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRfSelectedOutputPowerType.setStatus('current')
if mibBuilder.loadTexts: xfRfSelectedOutputPowerType.setDescription("\n            This object allows setting the output power type:\n            - standardPower\n            - highPower\n            default: standardPower(2)\n            When the type is set to highPower(3) a HP license key is required.\n            If the license key is not present the capacity is limited to Basic Capacity.\n            The output power can be configured as 'normal' without any impact from the HP license key (present or not).\n            When the mode is standardPower(2) the availableMaxOutputPower is limited to 'max power' - 4 dB per modulation.\n            ")
xfRfTaps = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRfTaps.setStatus('current')
if mibBuilder.loadTexts: xfRfTaps.setDescription('\n            This object allows setting the Traffic Aware Power Saving.\n            Default: disabled(3)\n            ')
xfRfCurrentInputPowerSdcMain = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 35), RfInputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfCurrentInputPowerSdcMain.setStatus('current')
if mibBuilder.loadTexts: xfRfCurrentInputPowerSdcMain.setDescription('\n            This object shows RF input level for SDC Main path = value/10 dBm.\n            Domain: [-20.0 .. -99.9 dBm].\n            0 (zero) indicates invalid value (e.g. SDC not available).\n            ')
xfRfCurrentInputPowerSdcDiv = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 36), RfInputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfCurrentInputPowerSdcDiv.setStatus('current')
if mibBuilder.loadTexts: xfRfCurrentInputPowerSdcDiv.setDescription('\n            This object shows RF input level for SDC Diversity path = value/10 dBm.\n            Domain: [-20.0 .. -99.9 dBm].\n            0 (zero) indicates invalid value (e.g. SDC not available).\n            ')
xfRfOutputPower8192QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 37), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfOutputPower8192QAM.setStatus('current')
if mibBuilder.loadTexts: xfRfOutputPower8192QAM.setDescription('Output power for 8192QAM.\n            255 indicates invalid value.')
xfRfOutputPower16384QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 38), RfOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRfOutputPower16384QAM.setStatus('current')
if mibBuilder.loadTexts: xfRfOutputPower16384QAM.setDescription('Output power for 16384QAM.\n            255 indicates invalid value.')
xfRfAtpcFallbackOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 39), RfOutputPower()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRfAtpcFallbackOutputPower.setStatus('current')
if mibBuilder.loadTexts: xfRfAtpcFallbackOutputPower.setDescription('This object sets output power (in dBm) in ATPCFallback mode,\n            for radio contained in the Carrier Termination.\n            255 indicates invalid value.')
xfRfAtpcFallbackEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 40), ATPCFallbackEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRfAtpcFallbackEnable.setStatus('current')
if mibBuilder.loadTexts: xfRfAtpcFallbackEnable.setDescription('Enable/disable ATPCFallback.')
xfRfAtpcFallbackTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 8, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRfAtpcFallbackTimer.setStatus('current')
if mibBuilder.loadTexts: xfRfAtpcFallbackTimer.setDescription('This object specifies how long the output power\n            can be at (ATPC, MAX) before ATPC fallback is triggered.\n            Default value: ETSI 15 min, ANSI 5 min.')
xfRFIFCableMonitoringTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9), )
if mibBuilder.loadTexts: xfRFIFCableMonitoringTable.setStatus('current')
if mibBuilder.loadTexts: xfRFIFCableMonitoringTable.setDescription('\n            Table for Radiolink point-to-point radios RF IF Cable Monitoring managed objects.\n            Table indexed with ifIndex.\n            ')
xfRFIFCableMonitoringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRFIFCableMonitoringEntry.setStatus('current')
if mibBuilder.loadTexts: xfRFIFCableMonitoringEntry.setDescription('An entry in the xfRFIFCableMonitoringTable.')
xfRFIFCMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFIFCMStatus.setStatus('current')
if mibBuilder.loadTexts: xfRFIFCMStatus.setDescription('\n            This object manage IfCable Monitoring Status.\n            Default value: disable(2).\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFOutlierAgc = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFOutlierAgc.setStatus('current')
if mibBuilder.loadTexts: xfRFOutlierAgc.setDescription('\n            This object manage IfCable Outlier Alarm.\n            Default value: disable(2).\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFOutlierSetTh = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFOutlierSetTh.setStatus('current')
if mibBuilder.loadTexts: xfRFOutlierSetTh.setDescription('\n            This object handles Set Threshold for Outlier Alarm.\n            3 = Default value (0.3).\n            - To calculate threshold use the following formula: SetTh/10.\n            Default value: 3\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFOutlierCeaseTh = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFOutlierCeaseTh.setStatus('current')
if mibBuilder.loadTexts: xfRFOutlierCeaseTh.setDescription('\n            This object handles Cease Threshold for Outlier Alarm.\n            2 = Default value (0.2).\n            - To calculate threshold use the following formula: SetTh/10.\n            Default value: 2\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFRangeAgc = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFRangeAgc.setStatus('current')
if mibBuilder.loadTexts: xfRFRangeAgc.setDescription('\n            This object manage IfCable Range Alarm.\n            Default value: disable(2).\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFRangeSetTh = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFRangeSetTh.setStatus('current')
if mibBuilder.loadTexts: xfRFRangeSetTh.setDescription('\n            This object handles Set Threshold for Range Alarm.\n            30 = Default value (3).\n            - To calculate threshold use the following formula: SetTh/10.\n            Default value: 30 (dB/10)\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFRangeCeaseTh = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFRangeCeaseTh.setStatus('current')
if mibBuilder.loadTexts: xfRFRangeCeaseTh.setDescription('\n            This object handles Cease Threshold for Range Alarm.\n            20 = Default value (2).\n            - To calculate threshold use the following formula: SetTh/10.\n            Default value: 20 (dB/10)\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFStddevAgc = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFStddevAgc.setStatus('current')
if mibBuilder.loadTexts: xfRFStddevAgc.setDescription('\n            This object manage IfCable Stddev Alarm.\n            Default value: disable(2).\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFStddevSetTh = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFStddevSetTh.setStatus('current')
if mibBuilder.loadTexts: xfRFStddevSetTh.setDescription('\n            This object handles Set Threshold for Stddev Alarm.\n            50 = Default value (5).\n            - To calculate threshold use the following formula: SetTh/10.\n            Default value: 50 (dB/10)\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFStddevCeaseTh = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFStddevCeaseTh.setStatus('current')
if mibBuilder.loadTexts: xfRFStddevCeaseTh.setDescription('\n            This object handles Cease Threshold for Stddev Alarm.\n            20 = Default value (2).\n            - To calculate threshold use the following formula: SetTh/10.\n            Default value: 20 (dB/10)\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFDegradationAgc = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFDegradationAgc.setStatus('current')
if mibBuilder.loadTexts: xfRFDegradationAgc.setDescription('\n            This object manage IfCable Degradation Alarm.\n            Default value: disable(2).\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFDegradationSetTh = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFDegradationSetTh.setStatus('current')
if mibBuilder.loadTexts: xfRFDegradationSetTh.setDescription('\n            This object handles Set Threshold for Degradation Alarm.\n            2 = Default value (0.2).\n            - To calculate threshold use the following formula: SetTh/10.\n            Default value: 2 (dB/10)\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFDegradationCeaseTh = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFDegradationCeaseTh.setStatus('current')
if mibBuilder.loadTexts: xfRFDegradationCeaseTh.setDescription('\n            This object handles Cease Threshold for Degradation Alarm.\n            1 = Default value (0.1).\n            - To calculate threshold use the following formula: SetTh/10.\n            Default value: 1 (dB/10)\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFMarginAgc = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFMarginAgc.setStatus('current')
if mibBuilder.loadTexts: xfRFMarginAgc.setDescription('\n            This object manage IfCable Margin Alarm.\n            Default value: disable(2).\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFMarginSetTh = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFMarginSetTh.setStatus('current')
if mibBuilder.loadTexts: xfRFMarginSetTh.setDescription('\n            This object handles Set Threshold for Margin Alarm.\n            30 = Default value (3).\n            - To calculate threshold use the following formula: SetTh/10.\n            Default value: 30 (dB/10)\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFMarginCeaseTh = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRFMarginCeaseTh.setStatus('current')
if mibBuilder.loadTexts: xfRFMarginCeaseTh.setDescription('\n            This object handles Cease Threshold for Margin Alarm.\n            60 = Default value (6).\n            - To calculate threshold use the following formula: SetTh/10.\n            Default value: 60 (dB/10)\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFOutlierValue = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFOutlierValue.setStatus('current')
if mibBuilder.loadTexts: xfRFOutlierValue.setDescription('\n            This object handles the value calculated on 24h for Outlier Alarm.\n            0 = Default value (0).\n            - To calculate value use the following formula: Value/100.\n            Default value: 0\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFRangeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFRangeValue.setStatus('current')
if mibBuilder.loadTexts: xfRFRangeValue.setDescription('\n            This object handles the value calculated on 24h for Range Alarm.\n            0 = Default value (0).\n            - To calculate value use the following formula: Value/100.\n            Default value: 0 (dB/100)\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFStddevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFStddevValue.setStatus('current')
if mibBuilder.loadTexts: xfRFStddevValue.setDescription('\n            This object handles the value calculated on 24h for Stddev Alarm.\n            0 = Default value (0).\n            - To calculate value use the following formula: Value/100.\n            Default value: 0 (dB/100)\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFDegradationValue = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFDegradationValue.setStatus('current')
if mibBuilder.loadTexts: xfRFDegradationValue.setDescription('\n            This object handles the value calculated on 24h for Degradation Alarm.\n            0 = Default value (0).\n            - To calculate value use the following formula: Value/100.\n            Default value: 0 (dB/100)\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFMarginValue = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMarginValue.setStatus('current')
if mibBuilder.loadTexts: xfRFMarginValue.setDescription('\n            This object handles the value calculated on 24h for Margin Alarm.\n            0 = Default value (0).\n            - To calculate value use the following formula: Value/100.\n            Default value: 0 (dB/100)\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFOutlierTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noSetThreshold", 2), ("setThreshold", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFOutlierTrigger.setStatus('current')
if mibBuilder.loadTexts: xfRFOutlierTrigger.setDescription('\n            This object manage IfCable Outlier Trigger.\n            Default value: noSetThreshold(2).\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFRangeTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noSetThreshold", 2), ("setThreshold", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFRangeTrigger.setStatus('current')
if mibBuilder.loadTexts: xfRFRangeTrigger.setDescription('\n            This object manage IfCable Range Trigger.\n            Default value: noSetThreshold(2).\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFStddevTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noSetThreshold", 2), ("setThreshold", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFStddevTrigger.setStatus('current')
if mibBuilder.loadTexts: xfRFStddevTrigger.setDescription('\n            This object manage IfCable Stddev Trigger.\n            Default value: noSetThreshold(2).\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFDegradationTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noSetThreshold", 2), ("setThreshold", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFDegradationTrigger.setStatus('current')
if mibBuilder.loadTexts: xfRFDegradationTrigger.setDescription('\n            This object manage IfCable Degradation Trigger.\n            Default value: noSetThreshold(2).\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfRFMarginTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 9, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noSetThreshold", 2), ("setThreshold", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRFMarginTrigger.setStatus('current')
if mibBuilder.loadTexts: xfRFMarginTrigger.setDescription('\n            This object manage IfCable Margin Trigger.\n            Default value: noSetThreshold(2).\n            Near end access: read-write.\n            Far end access: no access.\n            ')
xfSdcTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10), )
if mibBuilder.loadTexts: xfSdcTable.setStatus('current')
if mibBuilder.loadTexts: xfSdcTable.setDescription('Table for SDC capabilities, setting and status.')
xfSdcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: xfSdcEntry.setStatus('current')
if mibBuilder.loadTexts: xfSdcEntry.setDescription('An entry in the xfSdcTable.')
xfSdcCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("sdcSupported", 2), ("sdcNotSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfSdcCapability.setStatus('current')
if mibBuilder.loadTexts: xfSdcCapability.setDescription('SDC capability, including both MMU and ODU.')
xfSdcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("sdcEnabled", 2), ("sdcDisabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfSdcAdminStatus.setStatus('current')
if mibBuilder.loadTexts: xfSdcAdminStatus.setDescription('SDC Admin Status.')
xfSdcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("sdcEnabled", 2), ("sdcDisabled", 3), ("sdcInProgress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfSdcOperStatus.setStatus('current')
if mibBuilder.loadTexts: xfSdcOperStatus.setDescription('SDC Oper Status.')
xfSdcDadeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("sdcDadeStart", 2), ("sdcDadeAbort", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfSdcDadeControl.setStatus('current')
if mibBuilder.loadTexts: xfSdcDadeControl.setDescription('SDC DADE procedure control.')
xfSdcDadeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("sdcCalibrated", 2), ("sdcNotCalibrated", 3), ("sdcCalInProgress", 4), ("sdcCalMismatch", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfSdcDadeStatus.setStatus('current')
if mibBuilder.loadTexts: xfSdcDadeStatus.setDescription('SDC DADE procedure status.')
xfSdcPath = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("sdcAuto", 2), ("sdcMain", 3), ("sdcDiv", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfSdcPath.setStatus('current')
if mibBuilder.loadTexts: xfSdcPath.setDescription('SDC selected path (desired value).')
xfSdcOduDateTimeCalibration = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfSdcOduDateTimeCalibration.setStatus('current')
if mibBuilder.loadTexts: xfSdcOduDateTimeCalibration.setDescription('Date and time of the SDC DADE calibration for the ODU with serial number in xfSdcOduSerialNumber.\n             Format: [YYYY]-[MM]-[DD]T[hh]:[mm]:[ss] (ISO 8601).')
xfSdcOduSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfSdcOduSerialNumber.setStatus('current')
if mibBuilder.loadTexts: xfSdcOduSerialNumber.setDescription('Serial number of the ODU the current value of xfSdcOduDateTimeCalibration is referred to.')
xfSdcGain = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfSdcGain.setStatus('current')
if mibBuilder.loadTexts: xfSdcGain.setDescription('\n            SDC gain in dB/10.\n            Domain: [0.0 .. 3.0 dB].\n            ')
xfSdcActualPath = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("sdcAuto", 2), ("sdcMain", 3), ("sdcDiv", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfSdcActualPath.setStatus('current')
if mibBuilder.loadTexts: xfSdcActualPath.setDescription('SDC actual path (current value).')
xfSdcDadeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 1, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfSdcDadeDelay.setStatus('current')
if mibBuilder.loadTexts: xfSdcDadeDelay.setDescription('\n            DADE delay in nsec.\n            ')
xfRadioLinkPtpRadioCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 2, 1))
xfRadioLinkPtpRadioGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 2, 2))
xfRADIOLINKPTPRADIOFullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 2, 1, 1)).setObjects(("XF-RADIOLINK-PTP-RADIO-MIB", "xfRadioLinkPtpRadioCompleteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xfRADIOLINKPTPRADIOFullCompliance = xfRADIOLINKPTPRADIOFullCompliance.setStatus('current')
if mibBuilder.loadTexts: xfRADIOLINKPTPRADIOFullCompliance.setDescription('The compliance statement for SNMP entities which implement everything.')
xfRadioLinkPtpRadioCompleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 3, 2, 2, 1)).setObjects(("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUAlarmStatus"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAURfLoopAvailable"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUAtpcCapability"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAULocalCtrlCapability"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUModCapability"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUFrequencyband"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUSubBand"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUTemperature"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUProtectionPath"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAURxCapability"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUNotes"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRauAtpcVersion"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRauBoosterCapability"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRauBoosterSelectedIndex"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFBaseTxFrequency"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFBaseRxFrequency"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFStepSize"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFStepLimitLow"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFStepLimitHigh"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFCurrentStepNumber"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFTxOperStatus"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFTxAdminStatus"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFLoopEnable"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFAlarms"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFStatus"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFStepSizeRx"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFStepLimitLowRx"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFStepLimitHighRx"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFCurrentStepNumberRx"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFDuplexType"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFDuplexConfig"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFDuplexDistance"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFCurrentOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFRtpcMinOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFRtpcMaxOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFRtpcSelectedOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFAtpcMinOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFAtpcMaxOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFAtpcMinInputPowerFar"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFAtpcSelectedInputPowerFar"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFAttenuator"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFCurrentInputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMaxInputPowerLast7Days"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMinInputPowerLast7Days"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMaxInputPowerSinceReset"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMinInputPowerSinceReset"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFInputPowerReset"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFInputAlarmThreshold"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUChannelSpacing"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUChannelModulation"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUSpectrumEfficiencyClass"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUCarrierMode"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutputPower4QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutputPower8QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutputPower16QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutputPower32QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutputPower64QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutputPower128QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutputPower256QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutputPower512QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFAtpcFallbackOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFAtpcFallbackEnable"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFAtpcFallbackTimer"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutputPower1024QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMaxOutputPowerNotLimited"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMaxOutputPowerNotPossible"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFCurrentInputPowerSdcMain"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFCurrentInputPowerSdcDiv"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUSubBandIndex"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRAUSubBandRange"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMeanInputPower1m"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMaxOutputPowerLast7Days"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMinOutputPowerLast7Days"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMaxOutputPowerSinceReset"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMinOutputPowerSinceReset"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMaxMSELast7Days"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMinMSELast7Days"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMaxXPILast7Days"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMinXPILast7Days"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutputPowerReset"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfAvailableOutputPowerType"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfSelectedOutputPowerType"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfTaps"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfSelectedMinOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfSelectedMaxOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfCurrentOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMinOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMaxOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfAtpcTargetInputPowerFE"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfCurrentInputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMaxInputPowerLast7Days"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMinInputPowerLast7Days"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMaxInputPowerSinceReset"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMinInputPowerSinceReset"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfInputPowerReset"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfInputAlarmThreshold"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPower4QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPower16QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPower32QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPower64QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPower128QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPower256QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPower512QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPower1024QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPower2048QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPower4096QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPower8192QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPower16384QAM"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfAtpcFallbackOutputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfAtpcFallbackEnable"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfAtpcFallbackTimer"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMaxOutputPowerNotLimited"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMaxOutputPowerPossible"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMeanInputPower1m"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMaxOutputPowerLast7Days"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMinOutputPowerLast7Days"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMaxOutputPowerSinceReset"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfMinOutputPowerSinceReset"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfOutputPowerReset"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagAdminStatus"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagOperStatus"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagChannelScanEstTime"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagSubBandScanEstTime"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagScanDate"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagChannelSpacing"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagCurrRxFrequency"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagMinRxFrequency"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagMaxRxFrequency"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagIdxCompanion1"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagIdxCompanion2"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagIdxCompanion3"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagProgress"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagResultIndex"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagResultRxFrequency"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFSpectrumDiagResultRxPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFBoosterGain"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFBoosterMaxInputPower"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFBoosterCapability"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFBoosterProductNumber"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFBoosterHWRevision"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFIFCMStatus"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutlierAgc"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutlierSetTh"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutlierCeaseTh"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFRangeAgc"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFRangeSetTh"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFRangeCeaseTh"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFStddevAgc"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFStddevSetTh"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFStddevCeaseTh"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFDegradationAgc"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFDegradationSetTh"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFDegradationCeaseTh"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMarginAgc"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMarginSetTh"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMarginCeaseTh"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutlierValue"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFRangeValue"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFStddevValue"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFDegradationValue"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMarginValue"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFOutlierTrigger"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFRangeTrigger"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFStddevTrigger"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFDegradationTrigger"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRFMarginTrigger"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfSdcCapability"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfSdcAdminStatus"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfSdcOperStatus"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfSdcDadeControl"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfSdcDadeStatus"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfSdcPath"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfSdcOduDateTimeCalibration"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfSdcOduSerialNumber"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfSdcGain"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfSdcActualPath"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfSdcDadeDelay"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfCurrentInputPowerSdcMain"), ("XF-RADIOLINK-PTP-RADIO-MIB", "xfRfCurrentInputPowerSdcDiv"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xfRadioLinkPtpRadioCompleteGroup = xfRadioLinkPtpRadioCompleteGroup.setStatus('current')
if mibBuilder.loadTexts: xfRadioLinkPtpRadioCompleteGroup.setDescription('A collection of all current objects in this MIB module.')
mibBuilder.exportSymbols("XF-RADIOLINK-PTP-RADIO-MIB", ATPCFallbackEnable=ATPCFallbackEnable, xfRadioLinkPtpRadioConformance=xfRadioLinkPtpRadioConformance, xfRauBoosterSelectedIndex=xfRauBoosterSelectedIndex, xfRFIFTable=xfRFIFTable, xfRFMinMSELast7Days=xfRFMinMSELast7Days, xfRFCurrentOutputPower=xfRFCurrentOutputPower, xfRFOutlierAgc=xfRFOutlierAgc, xfRadioLinkPtpRadioMIB=xfRadioLinkPtpRadioMIB, xfRAUFrequencyband=xfRAUFrequencyband, xfRFOutlierCeaseTh=xfRFOutlierCeaseTh, BoosterCapability=BoosterCapability, xfRFAtpcSelectedInputPowerFar=xfRFAtpcSelectedInputPowerFar, xfRFSpectrumDiagChannelSpacing=xfRFSpectrumDiagChannelSpacing, xfRFOutputPower64QAM=xfRFOutputPower64QAM, xfRFTxAdminStatus=xfRFTxAdminStatus, xfRFOutputPower256QAM=xfRFOutputPower256QAM, xfRFAtpcFallbackOutputPower=xfRFAtpcFallbackOutputPower, xfRfOutputPower256QAM=xfRfOutputPower256QAM, xfRFDegradationTrigger=xfRFDegradationTrigger, xfSdcOduSerialNumber=xfSdcOduSerialNumber, xfRAUNotes=xfRAUNotes, xfRFMarginCeaseTh=xfRFMarginCeaseTh, xfRFOutputPower4QAM=xfRFOutputPower4QAM, xfRFMinXPILast7Days=xfRFMinXPILast7Days, xfRFAtpcFallbackEnable=xfRFAtpcFallbackEnable, xfRFStepLimitLowRx=xfRFStepLimitLowRx, RAUChannelSpacingCapability=RAUChannelSpacingCapability, xfRFSpectrumDiagEntry=xfRFSpectrumDiagEntry, xfSdcDadeControl=xfSdcDadeControl, xfRFRtpcSelectedOutputPower=xfRFRtpcSelectedOutputPower, xfRFSpectrumDiagIdxCompanion1=xfRFSpectrumDiagIdxCompanion1, xfRfOutputPower1024QAM=xfRfOutputPower1024QAM, xfRAUEntry=xfRAUEntry, xfRFMarginTrigger=xfRFMarginTrigger, xfRfInputAlarmThreshold=xfRfInputAlarmThreshold, xfRFMinOutputPowerLast7Days=xfRFMinOutputPowerLast7Days, xfRfMaxInputPowerLast7Days=xfRfMaxInputPowerLast7Days, xfRfMaxOutputPowerPossible=xfRfMaxOutputPowerPossible, xfRFOutputPowerReset=xfRFOutputPowerReset, xfRFInputPowerReset=xfRFInputPowerReset, xfRFCurrentInputPowerSdcMain=xfRFCurrentInputPowerSdcMain, xfRAUSubBandIndex=xfRAUSubBandIndex, xfRfOutputPower16384QAM=xfRfOutputPower16384QAM, RAUModulation=RAUModulation, xfRAUModCapability=xfRAUModCapability, xfRFSpectrumDiagResultRxPower=xfRFSpectrumDiagResultRxPower, xfRAUAtpcCapability=xfRAUAtpcCapability, xfRadioLinkPtpRadioCompliances=xfRadioLinkPtpRadioCompliances, xfRfAtpcFallbackOutputPower=xfRfAtpcFallbackOutputPower, xfRAUChannelSpacing=xfRAUChannelSpacing, xfRauBoosterCapability=xfRauBoosterCapability, xfRFSpectrumDiagIdxCompanion2=xfRFSpectrumDiagIdxCompanion2, xfRfCurrentInputPower=xfRfCurrentInputPower, xfRauAtpcVersion=xfRauAtpcVersion, xfRFLoopEnable=xfRFLoopEnable, xfRFAlarms=xfRFAlarms, RfInputPower=RfInputPower, xfRFCurrentStepNumberRx=xfRFCurrentStepNumberRx, xfRfMeanInputPower1m=xfRfMeanInputPower1m, xfRFDuplexConfig=xfRFDuplexConfig, xfRFMaxOutputPowerNotLimited=xfRFMaxOutputPowerNotLimited, xfRAUSubBand=xfRAUSubBand, xfRFSpectrumDiagCurrRxFrequency=xfRFSpectrumDiagCurrRxFrequency, xfSdcAdminStatus=xfSdcAdminStatus, xfRFOutputPower512QAM=xfRFOutputPower512QAM, xfSdcOperStatus=xfSdcOperStatus, xfRfOutputPower16QAM=xfRfOutputPower16QAM, xfRFMarginSetTh=xfRFMarginSetTh, xfRFSpectrumDiagScanDate=xfRFSpectrumDiagScanDate, xfRFSpectrumDiagResultTable=xfRFSpectrumDiagResultTable, xfRFDegradationCeaseTh=xfRFDegradationCeaseTh, xfRFRangeValue=xfRFRangeValue, xfRFRangeTrigger=xfRFRangeTrigger, xfRfIfPowerTable=xfRfIfPowerTable, xfSdcPath=xfSdcPath, xfRfAvailableOutputPowerType=xfRfAvailableOutputPowerType, xfRfCurrentInputPowerSdcDiv=xfRfCurrentInputPowerSdcDiv, RAUAtpcCapability=RAUAtpcCapability, xfRFOutputPower128QAM=xfRFOutputPower128QAM, xfRfInputPowerReset=xfRfInputPowerReset, xfRFOutputPower32QAM=xfRFOutputPower32QAM, xfRAUCapabilityEntry=xfRAUCapabilityEntry, xfRFBoosterGain=xfRFBoosterGain, xfRFSpectrumDiagMinRxFrequency=xfRFSpectrumDiagMinRxFrequency, xfRFPowerEntry=xfRFPowerEntry, xfRFCurrentStepNumber=xfRFCurrentStepNumber, xfRFInputAlarmThreshold=xfRFInputAlarmThreshold, xfRfMaxOutputPowerSinceReset=xfRfMaxOutputPowerSinceReset, xfRAUSubBandRange=xfRAUSubBandRange, xfRFMinOutputPowerSinceReset=xfRFMinOutputPowerSinceReset, xfRAUSubBandEntry=xfRAUSubBandEntry, xfRFMaxInputPowerLast7Days=xfRFMaxInputPowerLast7Days, xfRfOutputPower32QAM=xfRfOutputPower32QAM, xfRFStddevAgc=xfRFStddevAgc, xfRfOutputPower8192QAM=xfRfOutputPower8192QAM, xfRFSpectrumDiagResultIndex=xfRFSpectrumDiagResultIndex, xfSdcActualPath=xfSdcActualPath, xfRFStddevCeaseTh=xfRFStddevCeaseTh, xfRAUCapabilityTable=xfRAUCapabilityTable, RFTxOperStatus=RFTxOperStatus, xfRFCurrentInputPower=xfRFCurrentInputPower, xfRFIFCableMonitoringEntry=xfRFIFCableMonitoringEntry, xfRFMinInputPowerLast7Days=xfRFMinInputPowerLast7Days, xfRFSpectrumDiagSubBandScanEstTime=xfRFSpectrumDiagSubBandScanEstTime, xfRFOutlierSetTh=xfRFOutlierSetTh, xfRfMaxOutputPowerNotLimited=xfRfMaxOutputPowerNotLimited, xfRFDegradationValue=xfRFDegradationValue, xfRfOutputPower64QAM=xfRfOutputPower64QAM, xfSdcOduDateTimeCalibration=xfSdcOduDateTimeCalibration, xfRAUSubBandTable=xfRAUSubBandTable, RAUModCapability=RAUModCapability, xfRFStepLimitLow=xfRFStepLimitLow, xfRFOutputPower16QAM=xfRFOutputPower16QAM, xfRfOutputPower512QAM=xfRfOutputPower512QAM, xfRAURxCapability=xfRAURxCapability, xfRFBoosterHWRevision=xfRFBoosterHWRevision, xfRFSpectrumDiagTable=xfRFSpectrumDiagTable, xfRFOutlierValue=xfRFOutlierValue, xfRFRtpcMaxOutputPower=xfRFRtpcMaxOutputPower, xfRADIOLINKPTPRADIOFullCompliance=xfRADIOLINKPTPRADIOFullCompliance, xfRFAttenuator=xfRFAttenuator, xfRFAtpcMinInputPowerFar=xfRFAtpcMinInputPowerFar, xfSdcTable=xfSdcTable, xfRFDuplexType=xfRFDuplexType, RAURfLoopAvailable=RAURfLoopAvailable, xfRfMinOutputPowerSinceReset=xfRfMinOutputPowerSinceReset, xfRfOutputPower4QAM=xfRfOutputPower4QAM, xfRFMinInputPowerSinceReset=xfRFMinInputPowerSinceReset, xfRFTxOperStatus=xfRFTxOperStatus, xfRFAtpcMaxOutputPower=xfRFAtpcMaxOutputPower, xfRFOutputPower1024QAM=xfRFOutputPower1024QAM, xfRFStepLimitHighRx=xfRFStepLimitHighRx, xfRAUChannelModulation=xfRAUChannelModulation, xfRfAtpcFallbackEnable=xfRfAtpcFallbackEnable, xfRFSpectrumDiagResultEntry=xfRFSpectrumDiagResultEntry, xfRFBoosterCapability=xfRFBoosterCapability, xfRFMarginAgc=xfRFMarginAgc, xfRFIFCableMonitoringTable=xfRFIFCableMonitoringTable, xfRFMaxOutputPowerNotPossible=xfRFMaxOutputPowerNotPossible, xfRAULocalCtrlCapability=xfRAULocalCtrlCapability, xfRFMeanInputPower1m=xfRFMeanInputPower1m, xfRFIFEntry=xfRFIFEntry, PYSNMP_MODULE_ID=xfRadioLinkPtpRadioMIB, xfRFCurrentInputPowerSdcDiv=xfRFCurrentInputPowerSdcDiv, xfRFMaxXPILast7Days=xfRFMaxXPILast7Days, xfRfOutputPower4096QAM=xfRfOutputPower4096QAM, xfRFRangeCeaseTh=xfRFRangeCeaseTh, xfRFPowerTable=xfRFPowerTable, xfRFRtpcMinOutputPower=xfRFRtpcMinOutputPower, xfRFDegradationAgc=xfRFDegradationAgc, xfRFOutlierTrigger=xfRFOutlierTrigger, xfSdcCapability=xfSdcCapability, xfRAUCarrierMode=xfRAUCarrierMode, xfRFSpectrumDiagAdminStatus=xfRFSpectrumDiagAdminStatus, xfRadioLinkPtpRadioGroups=xfRadioLinkPtpRadioGroups, xfRFBoosterMaxInputPower=xfRFBoosterMaxInputPower, xfRFStddevSetTh=xfRFStddevSetTh, xfRfTaps=xfRfTaps, xfRFSpectrumDiagResultRxFrequency=xfRFSpectrumDiagResultRxFrequency, xfRFSpectrumDiagChannelScanEstTime=xfRFSpectrumDiagChannelScanEstTime, xfRfAtpcTargetInputPowerFE=xfRfAtpcTargetInputPowerFE, xfRFDegradationSetTh=xfRFDegradationSetTh, xfSdcEntry=xfSdcEntry, xfRadioLinkPtpRadioCompleteGroup=xfRadioLinkPtpRadioCompleteGroup, xfRFMaxMSELast7Days=xfRFMaxMSELast7Days, xfRFMaxOutputPowerSinceReset=xfRFMaxOutputPowerSinceReset, xfRAURfLoopAvailable=xfRAURfLoopAvailable, xfRAUTemperature=xfRAUTemperature, xfRFSpectrumDiagOperStatus=xfRFSpectrumDiagOperStatus, xfRFRangeSetTh=xfRFRangeSetTh, xfRFBaseRxFrequency=xfRFBaseRxFrequency, xfRfMinInputPowerLast7Days=xfRfMinInputPowerLast7Days, xfRAUAlarmStatus=xfRAUAlarmStatus, xfSdcDadeStatus=xfSdcDadeStatus, xfRFRangeAgc=xfRFRangeAgc, xfRadioLinkPtpRadioObjects=xfRadioLinkPtpRadioObjects, xfRFAtpcMinOutputPower=xfRFAtpcMinOutputPower, xfRFStepSizeRx=xfRFStepSizeRx, xfRFStepSize=xfRFStepSize, xfRFStepLimitHigh=xfRFStepLimitHigh, xfRfCurrentOutputPower=xfRfCurrentOutputPower, xfRfOutputPower2048QAM=xfRfOutputPower2048QAM, xfRFStddevTrigger=xfRFStddevTrigger, xfRFStddevValue=xfRFStddevValue, xfRFAtpcFallbackTimer=xfRFAtpcFallbackTimer, xfSdcGain=xfSdcGain, xfRFSpectrumDiagMaxRxFrequency=xfRFSpectrumDiagMaxRxFrequency, xfRFMarginValue=xfRFMarginValue, xfRFDuplexDistance=xfRFDuplexDistance, xfRAUTable=xfRAUTable, xfRfSelectedOutputPowerType=xfRfSelectedOutputPowerType, xfRfMinOutputPower=xfRfMinOutputPower, xfRfMinInputPowerSinceReset=xfRfMinInputPowerSinceReset, xfRfMaxOutputPower=xfRfMaxOutputPower, xfRAUSpectrumEfficiencyClass=xfRAUSpectrumEfficiencyClass, RfOutputPower=RfOutputPower, xfRFSpectrumDiagProgress=xfRFSpectrumDiagProgress, xfRfSelectedMaxOutputPower=xfRfSelectedMaxOutputPower, xfSdcDadeDelay=xfSdcDadeDelay, xfRfCurrentInputPowerSdcMain=xfRfCurrentInputPowerSdcMain, xfRFSpectrumDiagIdxCompanion3=xfRFSpectrumDiagIdxCompanion3, xfRfMaxOutputPowerLast7Days=xfRfMaxOutputPowerLast7Days, xfRfOutputPowerReset=xfRfOutputPowerReset, xfRFIFCMStatus=xfRFIFCMStatus, xfRFStatus=xfRFStatus, xfRAUProtectionPath=xfRAUProtectionPath, xfRfOutputPower128QAM=xfRfOutputPower128QAM, xfRfAtpcFallbackTimer=xfRfAtpcFallbackTimer, xfRFMaxInputPowerSinceReset=xfRFMaxInputPowerSinceReset, xfRfMinOutputPowerLast7Days=xfRfMinOutputPowerLast7Days, RauSec=RauSec, xfRFBaseTxFrequency=xfRFBaseTxFrequency, xfRFBoosterProductNumber=xfRFBoosterProductNumber, xfRFMaxOutputPowerLast7Days=xfRFMaxOutputPowerLast7Days, xfRFOutputPower8QAM=xfRFOutputPower8QAM, xfRfIfPowerEntry=xfRfIfPowerEntry, xfRfMaxInputPowerSinceReset=xfRfMaxInputPowerSinceReset, xfRfSelectedMinOutputPower=xfRfSelectedMinOutputPower)
