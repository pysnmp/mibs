#
# PySNMP MIB module ERICSSON-ALARM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/ericsson/ERICSSON-ALARM-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 10:55:32 2024
# On host fv-az1117-982 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ResourceId, = mibBuilder.importSymbols("ALARM-MIB", "ResourceId")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
EriProbableCause, = mibBuilder.importSymbols("ERICSSON-ALARM-PC-MIB", "EriProbableCause")
EriAlarmSequenceNumber, EriAdditionalText, EriAlarmSpecificProblem, EriAlarmType, EriLargeAdditionalText, EriAlarmIndex = mibBuilder.importSymbols("ERICSSON-ALARM-TC-MIB", "EriAlarmSequenceNumber", "EriAdditionalText", "EriAlarmSpecificProblem", "EriAlarmType", "EriLargeAdditionalText", "EriAlarmIndex")
EriMO, = mibBuilder.importSymbols("ERICSSON-TC-MIB", "EriMO")
ericssonModules, = mibBuilder.importSymbols("ERICSSON-TOP-MIB", "ericssonModules")
IANAItuEventType, = mibBuilder.importSymbols("IANA-ITU-ALARM-TC-MIB", "IANAItuEventType")
ItuPerceivedSeverity, = mibBuilder.importSymbols("ITU-ALARM-TC-MIB", "ItuPerceivedSeverity")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
snmpNotifyGroup, = mibBuilder.importSymbols("SNMP-NOTIFICATION-MIB", "snmpNotifyGroup")
snmpTargetBasicGroup, = mibBuilder.importSymbols("SNMP-TARGET-MIB", "snmpTargetBasicGroup")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Gauge32, IpAddress, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Unsigned32, Integer32, ModuleIdentity, TimeTicks, Counter32, Counter64, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "IpAddress", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Unsigned32", "Integer32", "ModuleIdentity", "TimeTicks", "Counter32", "Counter64", "iso", "MibIdentifier")
TruthValue, TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "DateAndTime")
ericssonAlarmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 193, 183, 4))
ericssonAlarmMIB.setRevisions(('2008-10-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ericssonAlarmMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ericssonAlarmMIB.setLastUpdated('200810170000Z')
if mibBuilder.loadTexts: ericssonAlarmMIB.setOrganization('Ericsson AB')
if mibBuilder.loadTexts: ericssonAlarmMIB.setContactInfo('Email: snmp.mib.contact@ericsson.com ')
if mibBuilder.loadTexts: ericssonAlarmMIB.setDescription("See also Documentation and Use of the Ericsson\r\n                SNMP Alarm MIB, Document number EAB/OP-07:0139.\r\n\r\n                This MIB Module is an Ericsson-wide SNMP\r\n                interface for managing alarms. Main inputs to\r\n                the MIB design are the 3GPP Alarm IRP and X.733.\r\n                However, an important restriction is that the MIB\r\n                only represents the resource view and not\r\n                management activities like acknowledgment, etc.\r\n                It describes generic notifications used to send\r\n                alarm state changes and a table which represents\r\n                the current active alarms in the system. The MIB\r\n                supports both stateful alarms and stateless\r\n                alarms (that have no clear notification).\r\n                Stateless alarms are called alerts.\r\n\r\n                It is important to identify clearly what is to be\r\n                considered the same alarm object instance. All\r\n                unique alarm *types* are identified by\r\n                'AlarmType'. An AlarmType is a one-to-one\r\n                mapping with X.733 EventType, ProbabableCause and\r\n                SpecificProblem. A pair of integers are used to\r\n                specify the alarm type.\r\n\r\n                A unique alarm object *instance* is the\r\n                combination of managed object and AlarmType. In\r\n                this way there, is no ambiguity about how alarm\r\n                and alarm clear correlation should be performed:\r\n                the same managed object instance and AlarmType\r\n                shall be used. The same is true for changing\r\n                existing alarm states. Severity and\r\n                additionalText can be changed on an existing\r\n                alarm.\r\n\r\n                For stateful alarms there are notifications to\r\n                report a new alarm and a cleared alarm. Changing\r\n                an alarm is done via the new alarm notification.\r\n                The management system shall match the alarm by\r\n                using alarm type and managed object instance in\r\n                the same way as for clear notifications.\r\n\r\n                The MIB has different notifications for different\r\n                severities in order to support SNMP managers\r\n                which maps severities based on notification\r\n                identifiers. For stateless alarms, there are\r\n                generic notifications to send the alarm raise\r\n                with different severities.\r\n\r\n                A table lists all active alarms so that a manager\r\n                can read an initial state and also perform an\r\n                alarm resynchronization procedure. There is also\r\n                a table of latest stateless alarms. Since the\r\n                stateless alarms do not have a corresponding\r\n                clear message, the table size is limited by the\r\n                agent instrumentation.\r\n\r\n                The MIB supports two approaches for detecting\r\n                lost notifications:\r\n                - sequence numbers are used in the alarm\r\n                 notifications, and are shown in the active\r\n                 alarm table. The last used sequence number can\r\n                 be read in a scalar variable\r\n                - a time stamp indicates the last time alarm\r\n                 tables where updated.\r\n\r\n                Heartbeat mechanisms are supported both in pull\r\n                and push mode:\r\n                - Pull: the classical SNMP polling where a\r\n                 manager polls a scalar variable, for example\r\n                 the last sequence number used\r\n                - Push: the agent can be configured to send\r\n                 heartbeat notifications. These contains the\r\n                 last used sequence numbers.\r\n\r\n                Document number: 5/196 03-CXC 172 7549, Rev A")
eriAlarmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 183, 4, 1))
eriAlarmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 183, 4, 2))
eriAlarmNotifsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 183, 4, 2, 0))
eriAlarmConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 183, 4, 4))
eriAlarmSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 1))
eriAlarmNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 2))
eriAlarmActiveAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 3))
eriAlarmAlerts = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 4))
eriAlarmHeartBeat = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 5))
eriAlarmSumIndeterminate = MibScalar((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmSumIndeterminate.setStatus('current')
if mibBuilder.loadTexts: eriAlarmSumIndeterminate.setDescription("This object shows the number of currently active\r\n                alarms with perceived severity 'indeterminate'.\r\n                Note that only stateful alarms are included.")
eriAlarmSumCritical = MibScalar((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmSumCritical.setStatus('current')
if mibBuilder.loadTexts: eriAlarmSumCritical.setDescription("This object shows the number of currently active\r\n                alarms with perceived severity 'critical'. Note\r\n                that only stateful alarms are included.")
eriAlarmSumMajor = MibScalar((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmSumMajor.setStatus('current')
if mibBuilder.loadTexts: eriAlarmSumMajor.setDescription("This object shows the number of currently active\r\n                alarms with perceived severity 'major'. Note\r\n                that only stateful alarms are included.")
eriAlarmSumMinor = MibScalar((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmSumMinor.setStatus('current')
if mibBuilder.loadTexts: eriAlarmSumMinor.setDescription("This object shows the number of currently active\r\n                alarms with perceived severity 'minor'. Note\r\n                that only stateful alarms are included.")
eriAlarmSumWarning = MibScalar((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmSumWarning.setStatus('current')
if mibBuilder.loadTexts: eriAlarmSumWarning.setDescription("This object shows the number of currently active\r\n                alarms with perceived severity 'warning'. Note\r\n                that only stateful alarms are included.")
eriAlarmNObjAdditionalText = MibScalar((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 2, 1), EriAdditionalText()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eriAlarmNObjAdditionalText.setStatus('current')
if mibBuilder.loadTexts: eriAlarmNObjAdditionalText.setDescription('This is a scalar variable only used in\r\n                notifications. It is size ranged with a smaller\r\n                size than the corresponding type used in the\r\n                active alarm table. This is in order to make sure\r\n                that all alarm information will fit into one UDP\r\n                packet. The additional text can be further\r\n                appended by using the dedicated append\r\n                notification.')
eriAlarmNObjMoreAdditionalText = MibScalar((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 2, 2), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eriAlarmNObjMoreAdditionalText.setStatus('current')
if mibBuilder.loadTexts: eriAlarmNObjMoreAdditionalText.setDescription('This is a scalar variable only used in\r\n                notifications. It tells the management system\r\n                that the additional text will be appended by\r\n                subsequent append additional text notifications.\r\n                NOTE: this object exists simply because of the\r\n                limitations of PDU size inherent in SNMP over\r\n                UDP, which limits the size of the PDU+headers to\r\n                under 1500 octets.  Otherwise, the notification\r\n                will be fragmented.')
eriAlarmNObjResourceId = MibScalar((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 2, 3), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eriAlarmNObjResourceId.setStatus('current')
if mibBuilder.loadTexts: eriAlarmNObjResourceId.setDescription('This is a scalar variable only used in\r\n                notifications. It tells the management system\r\n                that there is an SNMP-based Resource ID (OID)\r\n                that identifies the alarming resource.  NOTE:\r\n                this object exists simply because of the\r\n                limitations of PDU size inherent in SNMP over\r\n                UDP, which limits the size of the PDU+headers to\r\n                under 1500 octets.  Otherwise, the notification\r\n                will be fragmented.')
eriAlarmActiveNumber = MibScalar((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmActiveNumber.setStatus('current')
if mibBuilder.loadTexts: eriAlarmActiveNumber.setDescription('This object shows the total number of currently\r\n                active alarms, i.e. the total number of entries\r\n                in the Alarm Table.')
eriAlarmActiveLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 3, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmActiveLastChanged.setReference('DateAndTime is defined in RFC 2579, page 18')
if mibBuilder.loadTexts: eriAlarmActiveLastChanged.setStatus('current')
if mibBuilder.loadTexts: eriAlarmActiveLastChanged.setDescription('A timestamp when the active alarm table was last\r\n                changed. The value can be used by a manager to\r\n                initiate an alarm resynchronization procedure.\r\n                NOTE: All fields of the DateAndTime MUST be\r\n                filled out, including the hours and minutes from\r\n                UTC. As such, the value should be 11 octets\r\n                long.')
eriAlarmActiveLastSequenceNo = MibScalar((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 3, 3), EriAlarmSequenceNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmActiveLastSequenceNo.setStatus('current')
if mibBuilder.loadTexts: eriAlarmActiveLastSequenceNo.setDescription('The last used sequence number for a alarm state\r\n                change notification. A management system can poll\r\n                this variable in order to detect lost alarm\r\n                change notifications.')
eriAlarmActiveTableURL = MibScalar((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 3, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmActiveTableURL.setStatus('current')
if mibBuilder.loadTexts: eriAlarmActiveTableURL.setDescription('A URL pointing to a location where the contents\r\n                of the alarm table can be retrieved as a file.\r\n                The actual format of the file is out of the scope\r\n                of this MIB and can be found in the system\r\n                documentation. A Uniform Resource Locator in\r\n                accordance with RFC 4248. A string of length\r\n                zero means that the agent does not have a URL to\r\n                provide.')
eriAlarmActiveAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 3, 5), )
if mibBuilder.loadTexts: eriAlarmActiveAlarmTable.setStatus('current')
if mibBuilder.loadTexts: eriAlarmActiveAlarmTable.setDescription('This table list all active alarms in the system.\r\n                The aspect is the resource view of the alarms,\r\n                not the administrative states and processes\r\n                performed by users. The number of entries,\r\n                active alarms, can be read in\r\n                eriAlarmActiveNumber. Entries are created when a\r\n                resource has a new alarm state. If the same\r\n                resource has several active alarms, with\r\n                different Alarm Types, this will be represented\r\n                as separate rows. Rows disappear whenever the\r\n                alarm is cleared in the resource.\r\n\r\n                Rows can be changed when an alarm changes\r\n                severity or additional text. Alarms where the\r\n                clear state cannot be detected by the resource\r\n                are not represented in this table.\r\n\r\n                The contents of the active alarm table can also\r\n                be fetched using file transfer.\r\n                eriAlarmActiveTableURL provides a URL to the\r\n                file.')
eriAlarmActiveAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 3, 5, 1), ).setIndexNames((0, "ERICSSON-ALARM-MIB", "eriAlarmActiveIndex"))
if mibBuilder.loadTexts: eriAlarmActiveAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: eriAlarmActiveAlarmEntry.setDescription('One entry in the table holds one active alarm\r\n                for a given resource. Entries are created by the\r\n                system when a resource has a new alarm state.\r\n                Entries are deleted by the system when a resource\r\n                alarm state is cleared.\r\n\r\n                Alarm severity and additional text can later be\r\n                changed in a row.')
eriAlarmActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 3, 5, 1, 1), EriAlarmIndex())
if mibBuilder.loadTexts: eriAlarmActiveIndex.setStatus('current')
if mibBuilder.loadTexts: eriAlarmActiveIndex.setDescription("A unique value, greater than zero, for each\r\n                alarm. It is recommended that values are\r\n                assigned contiguously starting from 1. The value\r\n                for each alarm must remain constant at least from\r\n                one re-initialization of the entity to the next\r\n                re-initialization. Note that this index should\r\n                not be used for alarm synchronization purposes\r\n                since the 'logical' index for an alarm is\r\n                - eriAlarmActiveMajorType\r\n                     - eriAlarmActiveMinorType\r\n                - eriAlarmActiveManagedObject")
eriAlarmActiveMajorType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 3, 5, 1, 2), EriAlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmActiveMajorType.setStatus('current')
if mibBuilder.loadTexts: eriAlarmActiveMajorType.setDescription('In combination with eriAlarmActiveMinorType,\r\n                this provides a unique identification of the\r\n                fault type. Different managed object types and\r\n                instances can share alarm types, but if the same\r\n                managed object reports the same alarm type, it is\r\n                to be considered as the same alarm state. The\r\n                alarm type is a simplification of the different\r\n                X.733 and 3GPP alarm IRP alarm correlation\r\n                mechanisms based on EventType, ProbableCause,\r\n                SpecificProblem and NotificationId. For systems\r\n                where eriAlarmActiveMajorType is not needed for\r\n                identification purposes, it is not used and MUST\r\n                be zero-valued.')
eriAlarmActiveMinorType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 3, 5, 1, 3), EriAlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmActiveMinorType.setStatus('current')
if mibBuilder.loadTexts: eriAlarmActiveMinorType.setDescription('In combination with with\r\n                eriAlarmActiveMajorType, this provides a unique\r\n                identification of the fault type, not including\r\n                the managed object. Different managed object\r\n                types and instances can share alarm types, but if\r\n                the same managed object reports the same alarm\r\n                type it is to be considered as the same alarm\r\n                state. The alarm type is a simplification of the\r\n                different X.733 and 3GPP alarm IRP alarm\r\n                correlation mechanisms based on EventType,\r\n                ProbableCause, SpecificProblem and\r\n                NotificationId.')
eriAlarmActiveSpecificProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 3, 5, 1, 4), EriAlarmSpecificProblem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmActiveSpecificProblem.setStatus('current')
if mibBuilder.loadTexts: eriAlarmActiveSpecificProblem.setDescription('This is a clear-text unique identification of\r\n                the alarm type. There is a one-to-one mapping\r\n                between eriAlarmActiveSpecificProblem and\r\n                [eriAlarmActiveMajorType,eriAlarmActiveMinorType]')
eriAlarmActiveManagedObject = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 3, 5, 1, 5), EriMO()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmActiveManagedObject.setReference('3GPP TS 32.106-8 V3.2, Name convention for\r\n                Managed Objects')
if mibBuilder.loadTexts: eriAlarmActiveManagedObject.setStatus('current')
if mibBuilder.loadTexts: eriAlarmActiveManagedObject.setDescription('The 3GPP naming convention shall be used as\r\n                format for the managed object parameter. Note\r\n                that the granularity must be good enough to\r\n                guarantee unique alarm states and relevant\r\n                resource identification to the operator.\r\n                NOTE: The DN should be *relative* to the nodes\r\n                *own* root.')
eriAlarmActiveEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 3, 5, 1, 6), IANAItuEventType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmActiveEventType.setReference("ITU Recommendation X.733, 'Information\r\n                Technology - Open Systems Interconnection -\r\n                System Management: Alarm Reporting Function',\r\n                1992")
if mibBuilder.loadTexts: eriAlarmActiveEventType.setStatus('current')
if mibBuilder.loadTexts: eriAlarmActiveEventType.setDescription('The event type as defined in X.733/X.736.')
eriAlarmActiveEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 3, 5, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmActiveEventTime.setReference("DateAndTime is defined in RFC 2579, page 18.\r\n                ITU Recommendation X.733, 'Information Technology\r\n                - Open Systems Interconnection - System\r\n                Management: Alarm Reporting Function', 1992")
if mibBuilder.loadTexts: eriAlarmActiveEventTime.setStatus('current')
if mibBuilder.loadTexts: eriAlarmActiveEventTime.setDescription('A time stamp of the alarm state change event.\r\n                Note that this variable represents the last\r\n                change of the alarm state, like changed severity\r\n                or additional text. If the alarm has not changed\r\n                state this variable represents the alarm raise\r\n                time and will be the same as originalEventTime.\r\n\r\n                NOTE: All fields of the DateAndTime MUST be\r\n                filled out, including the hours and minutes from\r\n                UTC. As such, the value should be 11 octets\r\n                long.')
eriAlarmActiveOriginalEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 3, 5, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmActiveOriginalEventTime.setReference('DateAndTime is defined in RFC 2579, page 18.')
if mibBuilder.loadTexts: eriAlarmActiveOriginalEventTime.setStatus('current')
if mibBuilder.loadTexts: eriAlarmActiveOriginalEventTime.setDescription('The time-stamp of the original alarm raise\r\n                notification.\r\n                NOTE: All fields of the DateAndTime MUST be\r\n                filled out, including the hours and minutes from\r\n                UTC. As such, the value should be 11 octets\r\n                long.')
eriAlarmActiveProbableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 3, 5, 1, 9), EriProbableCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmActiveProbableCause.setReference("ITU Recommendation X.733, 'Information\r\n                Technology - Open Systems Interconnection -\r\n                System Management: Alarm Reporting Function',\r\n                1992")
if mibBuilder.loadTexts: eriAlarmActiveProbableCause.setStatus('current')
if mibBuilder.loadTexts: eriAlarmActiveProbableCause.setDescription('The probable cause for the alarm originally\r\n                defined by X.733 and subsequent standards. See\r\n                also the ERICSSON-ALARM-PC-MIB. Due to the\r\n                history of problems in maintaining a standardized\r\n                probable cause the probable cause is not unique.\r\n                A best effort mapping of the alarm to existing\r\n                probable causes        are used.')
eriAlarmActiveSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 3, 5, 1, 10), ItuPerceivedSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmActiveSeverity.setReference("ITU Recommendation X.733, 'Information\r\n                Technology - Open Systems Interconnection -\r\n                System Management: Alarm Reporting Function',\r\n                1992")
if mibBuilder.loadTexts: eriAlarmActiveSeverity.setStatus('current')
if mibBuilder.loadTexts: eriAlarmActiveSeverity.setDescription('The severity of the alarm as defined by X.733.\r\n                Note that this may not be the original severity\r\n                since the alarm may have changed severity.')
eriAlarmActiveOriginalSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 3, 5, 1, 11), ItuPerceivedSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmActiveOriginalSeverity.setStatus('current')
if mibBuilder.loadTexts: eriAlarmActiveOriginalSeverity.setDescription('The original severity as reported by the alarm\r\n                raise notification.')
eriAlarmActiveAdditionalText = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 3, 5, 1, 12), EriLargeAdditionalText()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmActiveAdditionalText.setReference("ITU Recommendation X.733, 'Information\r\n                Technology - Open Systems Interconnection -\r\n                System Management: Alarm Reporting Function',\r\n                1992")
if mibBuilder.loadTexts: eriAlarmActiveAdditionalText.setStatus('current')
if mibBuilder.loadTexts: eriAlarmActiveAdditionalText.setDescription('A user friendly text describing the alarm. The\r\n                text is both static depending on the alarm type\r\n                (probable cause), and dynamic depending on\r\n                managed object instance and other conditions.\r\n                This string is longer than the corresponding\r\n                varbind in the notification in order to manage\r\n                large strings.')
eriAlarmActiveOrigAdditionalText = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 3, 5, 1, 13), EriLargeAdditionalText()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmActiveOrigAdditionalText.setReference("ITU Recommendation X.733, 'Information\r\n                Technology - Open Systems Interconnection -\r\n                System Management: Alarm Reporting Function',\r\n                1992")
if mibBuilder.loadTexts: eriAlarmActiveOrigAdditionalText.setStatus('current')
if mibBuilder.loadTexts: eriAlarmActiveOrigAdditionalText.setDescription('A user-friendly text describing the alarm. The\r\n                text is both static depending on the alarm type\r\n                (probable cause), and dynamic depending on\r\n                managed object and other conditions. This is the\r\n                original text as reported by the first alarm\r\n                notification, after which it is not altered.')
eriAlarmActiveResourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 3, 5, 1, 14), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmActiveResourceId.setReference('RFC 3877 IETF ALARM MIB')
if mibBuilder.loadTexts: eriAlarmActiveResourceId.setStatus('current')
if mibBuilder.loadTexts: eriAlarmActiveResourceId.setDescription('In case the alarm refers to an object which is\r\n                instrumented by SNMP this variable indicates the\r\n                corresponding OID for the managed object.')
eriAlarmAlertNumber = MibScalar((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmAlertNumber.setStatus('current')
if mibBuilder.loadTexts: eriAlarmAlertNumber.setDescription('The number of rows in the alert table.')
eriAlarmAlertLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 4, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmAlertLastChanged.setReference('DateAndTime is defined in RFC 2579, page 18')
if mibBuilder.loadTexts: eriAlarmAlertLastChanged.setStatus('current')
if mibBuilder.loadTexts: eriAlarmAlertLastChanged.setDescription('A timestamp when the alert table was last\r\n                changed. Can be used by a manager to initiate a\r\n                an update of alerts procedure.\r\n                NOTE: All fields of the DateAndTime MUST be\r\n                filled out, including the hours and minutes from\r\n                UTC. As such, the value should be 11 octets\r\n                long.')
eriAlarmAlertLastSequenceNo = MibScalar((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 4, 3), EriAlarmSequenceNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmAlertLastSequenceNo.setStatus('current')
if mibBuilder.loadTexts: eriAlarmAlertLastSequenceNo.setDescription('The last sequence number used in alert\r\n                notifications. This can be used to detect a lost\r\n                notification.')
eriAlarmAlertTableURL = MibScalar((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 4, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmAlertTableURL.setStatus('current')
if mibBuilder.loadTexts: eriAlarmAlertTableURL.setDescription('A URL pointing to a location where the contents\r\n                of alert table can be retrieved as a file. The\r\n                format of the file is out of the scope of this\r\n                MIB and system dependant. A Uniform Resource\r\n                Locator in accordance with RFC 4248.')
eriAlarmAlertTable = MibTable((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 4, 5), )
if mibBuilder.loadTexts: eriAlarmAlertTable.setStatus('current')
if mibBuilder.loadTexts: eriAlarmAlertTable.setDescription('This table lists the last alerts in the system.\r\n                An alert is a stateless alarm, that is no clear\r\n                notification will be sent. Rows in this table are\r\n                created when a new alarm event is detected. Rows\r\n                are deleted by the instrumentation at a\r\n                predefined size or age.')
eriAlarmAlertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 4, 5, 1), ).setIndexNames((0, "ERICSSON-ALARM-MIB", "eriAlarmAlertIndex"))
if mibBuilder.loadTexts: eriAlarmAlertEntry.setStatus('current')
if mibBuilder.loadTexts: eriAlarmAlertEntry.setDescription('One entry in the table holds one alert for a\r\n                given resource. Rows in this table are created\r\n                when a new alert is detected. Rows are deleted\r\n                by the instrumentation        at a predefined size or\r\n                age.')
eriAlarmAlertIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 4, 5, 1, 1), EriAlarmIndex())
if mibBuilder.loadTexts: eriAlarmAlertIndex.setStatus('current')
if mibBuilder.loadTexts: eriAlarmAlertIndex.setDescription('Index in the alert table.')
eriAlarmAlertMajorType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 4, 5, 1, 2), EriAlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmAlertMajorType.setStatus('current')
if mibBuilder.loadTexts: eriAlarmAlertMajorType.setDescription('In combination with eriAlarmAlertMinorType, this\r\n                provides unique identification of the fault.\r\n                Different managed object types and instances can\r\n                share alarm types, but if the same managed object\r\n                reports the same alarm type it is to be\r\n                considered as the same alarm state. The alarm\r\n                type is a simplification of the different X.733\r\n                and 3GPP alarm IRP alarm correlation mechanisms\r\n                based on EventType, ProbableCause,\r\n                SpecificProblem and NotificationId.')
eriAlarmAlertMinorType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 4, 5, 1, 3), EriAlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmAlertMinorType.setStatus('current')
if mibBuilder.loadTexts: eriAlarmAlertMinorType.setDescription('In combination with eriAlarmAlertMajorType, this\r\n                provides a unique identification of the fault.\r\n                Different managed object types and instances can\r\n                share alarm types. But if the same managed object\r\n                reports the same alarm type it is to be\r\n                considered as the same alarm state. The alarm\r\n                type is a simplification of the different X.733\r\n                and 3GPP alarm IRP alarm correlation mechanisms\r\n                based on EventType, ProbableCause,\r\n                SpecificProblem and NotificationId.        ')
eriAlarmAlertSpecificProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 4, 5, 1, 4), EriAlarmSpecificProblem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmAlertSpecificProblem.setStatus('current')
if mibBuilder.loadTexts: eriAlarmAlertSpecificProblem.setDescription('This is a clear-text unique identification of\r\n                the alert type. There is a one-to-one mapping\r\n                between eriAlarmAlertSpecificProblem and\r\n                [eriAlarmAlertMajorType, eriAlarmAlertMinorType]')
eriAlarmAlertManagedObject = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 4, 5, 1, 5), EriMO()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmAlertManagedObject.setReference('3GPP TS 32.106-8 V3.2, Name convention for\r\n                Managed Objects')
if mibBuilder.loadTexts: eriAlarmAlertManagedObject.setStatus('current')
if mibBuilder.loadTexts: eriAlarmAlertManagedObject.setDescription('The 3GPP naming convention shall be used as\r\n                format for the managed object parameter. Note\r\n                that the granularity must be good enough to\r\n                guarantee relevant resource identification to the\r\n                operator.\r\n                NOTE: The DN should be *relative* to the nodes\r\n                *own* root.')
eriAlarmAlertEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 4, 5, 1, 6), IANAItuEventType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmAlertEventType.setReference("ITU Recommendation X.733, 'Information\r\n                Technology - Open Systems Interconnection -\r\n                System Management: Alarm Reporting Function',\r\n                1992")
if mibBuilder.loadTexts: eriAlarmAlertEventType.setStatus('current')
if mibBuilder.loadTexts: eriAlarmAlertEventType.setDescription('The event type as defined in X.733/X.736.')
eriAlarmAlertEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 4, 5, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmAlertEventTime.setReference("DateAndTime is defined in RFC 2579, page 18.\r\n                ITU Recommendation X.733, 'Information Technology\r\n                - Open Systems Interconnection - System\r\n                Management: Alarm Reporting Function', 1992")
if mibBuilder.loadTexts: eriAlarmAlertEventTime.setStatus('current')
if mibBuilder.loadTexts: eriAlarmAlertEventTime.setDescription('A time stamp of the alert. NOTE: All fields of\r\n                the DateAndTime MUST be filled out, including the\r\n                hours and minutes from UTC. As such, the value\r\n                should be 11 octets long.')
eriAlarmAlertProbableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 4, 5, 1, 8), EriProbableCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmAlertProbableCause.setReference("ITU Recommendation X.733, 'Information\r\n                Technology - Open Systems Interconnection -\r\n                System Management: Alarm Reporting Function',\r\n                1992")
if mibBuilder.loadTexts: eriAlarmAlertProbableCause.setStatus('current')
if mibBuilder.loadTexts: eriAlarmAlertProbableCause.setDescription('The probable cause for the alarm originally\r\n                defined by        X.733 and subsequent standards.\r\n                See also the ERICSSON-ALARM-PC-MIB. Due to the\r\n                history of problems in maintaining a standardized\r\n                probable cause the probable cause is not unique.\r\n                A best effort mapping of the alert to existing\r\n                probable causes        are used.')
eriAlarmAlertSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 4, 5, 1, 9), ItuPerceivedSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmAlertSeverity.setReference("ITU Recommendation X.733, 'Information\r\n                Technology - Open Systems Interconnection -\r\n                System Management: Alarm Reporting Function',\r\n                1992")
if mibBuilder.loadTexts: eriAlarmAlertSeverity.setStatus('current')
if mibBuilder.loadTexts: eriAlarmAlertSeverity.setDescription('The severity of the alert as defined by X.733')
eriAlarmAlertAdditionalText = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 4, 5, 1, 10), EriLargeAdditionalText()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmAlertAdditionalText.setReference("ITU Recommendation X.733, 'Information\r\n                Technology - Open Systems Interconnection -\r\n                System Management: Alarm Reporting Function',\r\n                1992")
if mibBuilder.loadTexts: eriAlarmAlertAdditionalText.setStatus('current')
if mibBuilder.loadTexts: eriAlarmAlertAdditionalText.setDescription('A user friendly text describing the alert. The\r\n                text is both static depending on the alert type\r\n                and dynamic depending on managed object and other\r\n                conditions.')
eriAlarmAlertResourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 4, 5, 1, 11), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eriAlarmAlertResourceId.setReference('RFC 3877 IETF ALARM MIB')
if mibBuilder.loadTexts: eriAlarmAlertResourceId.setStatus('current')
if mibBuilder.loadTexts: eriAlarmAlertResourceId.setDescription('In case the alert refers to an object which is\r\n                instrumented by SNMP this variable indicates the\r\n                corresponding OID for the managed object.')
eriAlarmHbInterval = MibScalar((1, 3, 6, 1, 4, 1, 193, 183, 4, 1, 5, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eriAlarmHbInterval.setStatus('current')
if mibBuilder.loadTexts: eriAlarmHbInterval.setDescription("The notification eriAlarmHeartBeatNotif will be\r\n                sent every eriAlarmHbInterval. Managers can\r\n                subscribe to the notification using the SNMP\r\n                framework MIBS by using the snmpNotifyName\r\n                'heartbeat'. (SNMP-NOTIFICATION-MIB,\r\n                snmpNotifyTable)")
eriAlarmIndeterminate = NotificationType((1, 3, 6, 1, 4, 1, 193, 183, 4, 2, 0, 1)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmActiveManagedObject"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveMajorType"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveMinorType"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveSpecificProblem"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveLastSequenceNo"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveEventType"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveEventTime"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveProbableCause"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjMoreAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjResourceId"))
if mibBuilder.loadTexts: eriAlarmIndeterminate.setStatus('current')
if mibBuilder.loadTexts: eriAlarmIndeterminate.setDescription("This notification is sent when a resource\r\n                detects a new alarm state with severity\r\n                indeterminate. The notification is also used to\r\n                change severity and/or additional text of an\r\n                alarm. The combination of ManagedObject and\r\n                MajorType/MinorType is always unique and can be\r\n                used by management systems to correlate alarm,\r\n                alarm change, and alarm clear. A corresponding\r\n                row will be created in the Alarm Table. The\r\n                sequence number will increase for every\r\n                notification and can be used to detect lost\r\n                notifications.\r\n\r\n                A management system should be prepared for\r\n                appending text to additional text, indicated by\r\n                the eriAlarmNObjMoreAdditionalText varbind, and\r\n                sent with eriAlarmAppendInfo.  (Note do not\r\n                confuse this with a change of additional text.)\r\n\r\n                A management system should also be prepared to\r\n                receive a resource ID (OID) identifying the\r\n                alarming resource if the system sending the\r\n                notification can provide that information.  In\r\n                that case, eriAlarmNObjResourceId will be set to\r\n                'true' and the resource ID will be sent in an\r\n                eriAlarmAppendInfo notification.")
eriAlarmWarning = NotificationType((1, 3, 6, 1, 4, 1, 193, 183, 4, 2, 0, 2)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmActiveManagedObject"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveMajorType"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveMinorType"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveSpecificProblem"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveLastSequenceNo"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveEventType"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveEventTime"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveProbableCause"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjMoreAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjResourceId"))
if mibBuilder.loadTexts: eriAlarmWarning.setStatus('current')
if mibBuilder.loadTexts: eriAlarmWarning.setDescription("This notification is sent when a resource\r\n                detects a new alarm state with severity warning.\r\n                The notification is also used to change severity\r\n                and/or additional text of an alarm. The\r\n                combination of ManagedObject and\r\n                MajorType/MinorType is always unique and can be\r\n                used by management systems to correlate alarm,\r\n                alarm change, and alarm clear. A corresponding\r\n                row will be created in the Alarm Table,\r\n                (eriAlarmActiveAlarmTable). The sequence number\r\n                will increase for every notification and can be\r\n                used to detect lost notifications.\r\n\r\n                A management system should be prepared for\r\n                appending text to additional text, indicated by\r\n                the eriAlarmNObjMoreAdditionalText varbind, and\r\n                sent with eriAlarmAppendInfo. (Note do not\r\n                confuse this with a change of additional text.)\r\n\r\n                A management system should also be prepared to\r\n                receive a resource ID (OID) identifying the\r\n                alarming resource if the system sending the\r\n                notification can provide that information.  In\r\n                that case, eriAlarmNObjResourceId will be set to\r\n                'true' and the resource ID will be sent in an\r\n                eriAlarmAppendInfo notification.")
eriAlarmMinor = NotificationType((1, 3, 6, 1, 4, 1, 193, 183, 4, 2, 0, 3)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmActiveManagedObject"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveMajorType"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveMinorType"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveSpecificProblem"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveLastSequenceNo"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveEventType"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveEventTime"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveProbableCause"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjMoreAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjResourceId"))
if mibBuilder.loadTexts: eriAlarmMinor.setStatus('current')
if mibBuilder.loadTexts: eriAlarmMinor.setDescription("This notification is sent when a resource\r\n                detects a new alarm state with severity minor.\r\n                The notification is also used to change severity\r\n                and/or additional text of an alarm. The\r\n                combination of ManagedObject and\r\n                MajorType/MinorType is always unique and can be\r\n                used by management systems to correlate alarm,\r\n                alarm change, and alarm clear. A corresponding\r\n                row will be created in the Alarm Table,\r\n                (eriAlarmActiveAlarmTable). The sequence number\r\n                will increase for every notification and can be\r\n                used to detect lost notifications.\r\n\r\n                A management system should be prepared for\r\n                appending text to additional text, indicated by\r\n                the eriAlarmNObjMoreAdditionalText varbind, and\r\n                sent with eriAlarmAppendInfo. (Note do not\r\n                confuse this with a change of additional text.)\r\n\r\n                A management system should also be prepared to\r\n                receive a resource ID (OID) identifying the\r\n                alarming resource if the system sending the\r\n                notification can provide that information.  In\r\n                that case, eriAlarmNObjResourceId will be set to\r\n                'true' and the resource ID will be sent in an\r\n                eriAlarmAppendInfo notification.")
eriAlarmMajor = NotificationType((1, 3, 6, 1, 4, 1, 193, 183, 4, 2, 0, 4)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmActiveManagedObject"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveMajorType"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveMinorType"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveSpecificProblem"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveLastSequenceNo"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveEventType"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveEventTime"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveProbableCause"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjMoreAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjResourceId"))
if mibBuilder.loadTexts: eriAlarmMajor.setStatus('current')
if mibBuilder.loadTexts: eriAlarmMajor.setDescription("This notification is sent when a resource\r\n                detects a new alarm state with severity major.\r\n                The notification is also used to change severity\r\n                and/or additional text of an alarm. The\r\n                combination of ManagedObject and\r\n                MajorType/MinorType is always unique and can be\r\n                used by management systems to correlate alarm,\r\n                alarm change, and alarm clear. A corresponding\r\n                row will be created in the Alarm Table,\r\n                (eriAlarmActiveAlarmTable). The sequence number\r\n                will increase for every notification and can be\r\n                used to detect lost notifications.\r\n\r\n                A management system should be prepared for\r\n                appending text to additional text, indicated by\r\n                the eriAlarmNObjMoreAdditionalText varbind, and\r\n                sent with eriAlarmAppendInfo. (Note do not\r\n                confuse this with a change of additional text.)\r\n\r\n                A management system should also be prepared to\r\n                receive a resource ID (OID) identifying the\r\n                alarming resource if the system sending the\r\n                notification can provide that information.  In\r\n                that case, eriAlarmNObjResourceId will be set to\r\n                'true' and the resource ID will be sent in an\r\n                eriAlarmAppendInfo notification.")
eriAlarmCritical = NotificationType((1, 3, 6, 1, 4, 1, 193, 183, 4, 2, 0, 5)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmActiveManagedObject"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveMajorType"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveMinorType"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveSpecificProblem"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveLastSequenceNo"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveEventType"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveEventTime"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveProbableCause"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjMoreAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjResourceId"))
if mibBuilder.loadTexts: eriAlarmCritical.setStatus('current')
if mibBuilder.loadTexts: eriAlarmCritical.setDescription("This notification is sent when a resource\r\n                detects a new alarm state with severity critical.\r\n                The notification is also used to change severity\r\n                and/or additional text of an alarm. The\r\n                combination of ManagedObject and\r\n                MajorType/MinorType is always unique and can be\r\n                used by management systems to correlate alarm,\r\n                alarm change, and alarm clear. A corresponding\r\n                row will be created in the Alarm Table,\r\n                (eriAlarmActiveAlarmTable). The sequence number\r\n                will increase for every notification and can be\r\n                used to detect lost notifications.\r\n\r\n                A management system should be prepared for\r\n                appending text to additional text, indicated by\r\n                the eriAlarmNObjMoreAdditionalText varbind, and\r\n                sent with eriAlarmAppendInfo. (Note do not\r\n                confuse this with a change of additional text.)\r\n\r\n                A management system should also be prepared to\r\n                receive a resource ID (OID) identifying the\r\n                alarming resource if the system sending the\r\n                notification can provide that information.  In\r\n                that case, eriAlarmNObjResourceId will be set to\r\n                'true' and the resource ID will be sent in an\r\n                eriAlarmAppendInfo notification.")
eriAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 193, 183, 4, 2, 0, 7)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmActiveManagedObject"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveMajorType"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveMinorType"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveSpecificProblem"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveLastSequenceNo"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveEventType"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveEventTime"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveProbableCause"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjMoreAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjResourceId"))
if mibBuilder.loadTexts: eriAlarmCleared.setStatus('current')
if mibBuilder.loadTexts: eriAlarmCleared.setDescription("This notification is sent when a resource\r\n                detects a cleared alarm state. The combination\r\n                of ManagedObject and MajorType/MinorType is\r\n                always unique and shall be used by management\r\n                systems to correlate alarm and alarm clear. The\r\n                corresponding row in the alarm table will be\r\n                deleted, (eriAlarmActiveAlarmTable). The\r\n                sequence number will increase for every\r\n                notification and can be used to detect lost\r\n                notifications. A management system should be\r\n                prepared for appending text to additional text,\r\n                indicated by the eriAlarmNObjMoreAdditionalText\r\n                varbind, and sent with eriAlarmAppendInfo.\r\n                (Note do not confuse this with a change of\r\n                additional text).\r\n\r\n                A management system should also be prepared to\r\n                receive a resource ID (OID) identifying the\r\n                alarming resource if the system sending the\r\n                notification can provide that information.  In\r\n                that case, eriAlarmNObjResourceId will be set to\r\n                'true' and the resource ID will be sent in an\r\n                eriAlarmAppendInfo notification.\r\n\r\n                A management system should also be prepared to\r\n                receive a resource ID (OID) identifying the\r\n                alarming resource if the system sending the\r\n                notification can provide that information.  In\r\n                that case, eriAlarmNObjResourceId will be set to\r\n                'true' and the resource ID will be sent in an\r\n                eriAlarmAppendInfo notification.")
eriAlarmAppendInfo = NotificationType((1, 3, 6, 1, 4, 1, 193, 183, 4, 2, 0, 8)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmActiveManagedObject"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveMajorType"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveMinorType"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveResourceId"))
if mibBuilder.loadTexts: eriAlarmAppendInfo.setStatus('current')
if mibBuilder.loadTexts: eriAlarmAppendInfo.setDescription('This notification is sent in order to append\r\n                further info to an existing alarm. It might be\r\n                additional text or a resource ID (OID)\r\n                identifying the alarming resource using an OID.\r\n                If additional text is sent, do not confuse this\r\n                with an actual change of additional text which is\r\n                reported using the eriAlarm<severity>\r\n                notification.\r\n\r\n                A zero-length string value for\r\n                eriAlarmNObjAdditionalText means that no\r\n                additional text is being sent in this\r\n                notification.\r\n\r\n                A null OID (0.0) value for\r\n                eriAlarmActiveResourceId means that no resource\r\n                ID is being sent in this notification.')
eriAlarmIndAlert = NotificationType((1, 3, 6, 1, 4, 1, 193, 183, 4, 2, 0, 10)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmAlertManagedObject"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertMajorType"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertMinorType"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertSpecificProblem"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertLastSequenceNo"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertEventType"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertEventTime"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertProbableCause"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjMoreAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjResourceId"))
if mibBuilder.loadTexts: eriAlarmIndAlert.setStatus('current')
if mibBuilder.loadTexts: eriAlarmIndAlert.setDescription('This notification is sent when a resource\r\n                detects a new alert with severity indeterminate.\r\n                A corresponding row will be created in the Alert\r\n                Table. The sequence number will increase for\r\n                every notification and can be used to detect lost\r\n                notifications.')
eriAlarmWarnAlert = NotificationType((1, 3, 6, 1, 4, 1, 193, 183, 4, 2, 0, 11)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmAlertManagedObject"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertMajorType"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertMinorType"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertSpecificProblem"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertLastSequenceNo"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertEventType"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertEventTime"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertProbableCause"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjMoreAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjResourceId"))
if mibBuilder.loadTexts: eriAlarmWarnAlert.setStatus('current')
if mibBuilder.loadTexts: eriAlarmWarnAlert.setDescription('This notification is sent when a resource\r\n                detects a new alert with severity warning. A\r\n                corresponding row will be created in the Alert\r\n                Table. The sequence number will increase for\r\n                every notification and can be used to detect lost\r\n                notifications.')
eriAlarmMinorAlert = NotificationType((1, 3, 6, 1, 4, 1, 193, 183, 4, 2, 0, 12)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmAlertManagedObject"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertMajorType"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertMinorType"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertSpecificProblem"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertLastSequenceNo"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertEventType"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertEventTime"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertProbableCause"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjMoreAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjResourceId"))
if mibBuilder.loadTexts: eriAlarmMinorAlert.setStatus('current')
if mibBuilder.loadTexts: eriAlarmMinorAlert.setDescription('This notification is sent when a resource\r\n                detects a new alert with severity minor. A\r\n                corresponding row will be created in the Alert\r\n                Table. The sequence number will increase for\r\n                every notification and can be used to detect lost\r\n                notifications.')
eriAlarmMajorAlert = NotificationType((1, 3, 6, 1, 4, 1, 193, 183, 4, 2, 0, 13)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmAlertManagedObject"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertMajorType"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertMinorType"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertSpecificProblem"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertLastSequenceNo"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertEventType"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertEventTime"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertProbableCause"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjMoreAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjResourceId"))
if mibBuilder.loadTexts: eriAlarmMajorAlert.setStatus('current')
if mibBuilder.loadTexts: eriAlarmMajorAlert.setDescription('This notification is sent when a resource\r\n                detects a new alert with severity major. A\r\n                corresponding row will be created in the Alert\r\n                Table. The sequence number will increase for\r\n                every notification and can be used to detect lost\r\n                notifications.')
eriAlarmCriticalAlert = NotificationType((1, 3, 6, 1, 4, 1, 193, 183, 4, 2, 0, 14)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmAlertManagedObject"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertMajorType"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertMinorType"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertSpecificProblem"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertLastSequenceNo"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertEventType"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertEventTime"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertProbableCause"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjMoreAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjResourceId"))
if mibBuilder.loadTexts: eriAlarmCriticalAlert.setStatus('current')
if mibBuilder.loadTexts: eriAlarmCriticalAlert.setDescription('This notification is sent when a resource\r\n                detects a new alert with severity critical. A\r\n                corresponding row will be created in the Alert\r\n                Table. The sequence number will increase for\r\n                every notification and can be used to detect lost\r\n                notifications.')
eriAlarmAppendAlertInfo = NotificationType((1, 3, 6, 1, 4, 1, 193, 183, 4, 2, 0, 15)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmAlertManagedObject"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertMajorType"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertMinorType"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertResourceId"))
if mibBuilder.loadTexts: eriAlarmAppendAlertInfo.setStatus('current')
if mibBuilder.loadTexts: eriAlarmAppendAlertInfo.setDescription('This notification is sent in order to append\r\n                further info to an existing alert. It might be\r\n                additional text or a resource ID (OID)\r\n                identifying the alarming resource using an OID.\r\n                This complements information sent in a previous\r\n                notification.\r\n\r\n                If additional text is sent, do not confuse this\r\n                with an actual change of additional text which is\r\n                reported using the eriAlarmAlert<severity>\r\n                notification.\r\n\r\n                A zero-length string value for\r\n                eriAlarmNObjAdditionalText means that no\r\n                additional text is being sent in this\r\n                notification.\r\n\r\n                A null OID (0.0) value for\r\n                eriAlarmAlertResourceId means that no resource\r\n                ID is being sent in this notification.')
eriAlarmHeartBeatNotif = NotificationType((1, 3, 6, 1, 4, 1, 193, 183, 4, 2, 0, 20)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmActiveLastSequenceNo"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertLastSequenceNo"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveLastChanged"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertLastChanged"))
if mibBuilder.loadTexts: eriAlarmHeartBeatNotif.setStatus('current')
if mibBuilder.loadTexts: eriAlarmHeartBeatNotif.setDescription("This is a heartbeat notification with interval\r\n                according to the eriAlarmHbInterval. It contains\r\n                the last sequence numbers used for alarms and\r\n                alarm events. These varbinds can be used to\r\n                detect lost notifications.\r\n\r\n                The notification eriAlarmHeartBeatNotif will be\r\n                sent every eriAlarmHbInterval. Managers can\r\n                subscribe to the notification using the SNMP\r\n                framework MIBS by using the snmpNotifyName\r\n                'heartbeat'. (SNMP-NOTIFICATION-MIB,\r\n                snmpNotifyTable).")
eriAlarmAlarmListRebuilt = NotificationType((1, 3, 6, 1, 4, 1, 193, 183, 4, 2, 0, 30)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmActiveTableURL"))
if mibBuilder.loadTexts: eriAlarmAlarmListRebuilt.setStatus('current')
if mibBuilder.loadTexts: eriAlarmAlarmListRebuilt.setDescription('This notification is sent when the active alarm\r\n                list has reached a stable situation after a\r\n                restart or after a system internal audit process.\r\n                It is an indication to the manager to perform a\r\n                alarm resynchronization procedure.')
eriAlarmCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 183, 4, 4, 1))
eriAlarmBasicAlarmsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 193, 183, 4, 4, 1, 1)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmSummaryGroup"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveAlarmsGroup"), ("ERICSSON-ALARM-MIB", "eriAlarmHeartBeatGroup"), ("ERICSSON-ALARM-MIB", "eriAlarmSimpleAlarmGroup"), ("ERICSSON-ALARM-MIB", "eriAlarmHeartBeatNotifGroup"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertsGroup"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertNotifGroup"), ("ERICSSON-ALARM-MIB", "eriAlarmChangeAlarmGroup"), ("ERICSSON-ALARM-MIB", "eriAlarmAddAddInfoGroup"), ("ERICSSON-ALARM-MIB", "eriAlarmSNMPResourceGroup"), ("SNMP-TARGET-MIB", "snmpTargetBasicGroup"), ("SNMP-NOTIFICATION-MIB", "snmpNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eriAlarmBasicAlarmsCompliance = eriAlarmBasicAlarmsCompliance.setStatus('current')
if mibBuilder.loadTexts: eriAlarmBasicAlarmsCompliance.setDescription('Minimal compliance for the Ericsson Alarm MIB.\r\n                Minimal compliance is to support heartbeat,\r\n                active alarm list, and alarm notifications for\r\n                raise and clear.')
eriAlarmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 183, 4, 4, 2))
eriAlarmSummaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 193, 183, 4, 4, 2, 1)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmSumIndeterminate"), ("ERICSSON-ALARM-MIB", "eriAlarmSumCritical"), ("ERICSSON-ALARM-MIB", "eriAlarmSumMajor"), ("ERICSSON-ALARM-MIB", "eriAlarmSumMinor"), ("ERICSSON-ALARM-MIB", "eriAlarmSumWarning"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eriAlarmSummaryGroup = eriAlarmSummaryGroup.setStatus('current')
if mibBuilder.loadTexts: eriAlarmSummaryGroup.setDescription('Group containing the summary counters for alarms.')
eriAlarmActiveAlarmsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 193, 183, 4, 4, 2, 2)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmActiveNumber"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveLastChanged"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveLastSequenceNo"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveTableURL"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveMajorType"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveMinorType"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveSpecificProblem"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveManagedObject"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveEventType"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveEventTime"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveProbableCause"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveSeverity"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjResourceId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eriAlarmActiveAlarmsGroup = eriAlarmActiveAlarmsGroup.setStatus('current')
if mibBuilder.loadTexts: eriAlarmActiveAlarmsGroup.setDescription('The group of objects needed to support the\r\n                active alarm list.')
eriAlarmAlertsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 193, 183, 4, 4, 2, 3)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmAlertNumber"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertLastChanged"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertLastSequenceNo"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertTableURL"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertMajorType"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertMinorType"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertSpecificProblem"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertManagedObject"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertEventType"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertEventTime"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertProbableCause"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertSeverity"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertAdditionalText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eriAlarmAlertsGroup = eriAlarmAlertsGroup.setStatus('current')
if mibBuilder.loadTexts: eriAlarmAlertsGroup.setDescription('The group of objects needed to support the alert\r\n                history.')
eriAlarmHeartBeatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 193, 183, 4, 4, 2, 4)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmHbInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eriAlarmHeartBeatGroup = eriAlarmHeartBeatGroup.setStatus('current')
if mibBuilder.loadTexts: eriAlarmHeartBeatGroup.setDescription('Only read is required for compliance')
eriAlarmSNMPResourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 193, 183, 4, 4, 2, 5)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmActiveResourceId"), ("ERICSSON-ALARM-MIB", "eriAlarmAlertResourceId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eriAlarmSNMPResourceGroup = eriAlarmSNMPResourceGroup.setStatus('current')
if mibBuilder.loadTexts: eriAlarmSNMPResourceGroup.setDescription('Objects that support SNMP object identifiers for\r\n                resource identification.')
eriAlarmChangeAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 193, 183, 4, 4, 2, 6)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmActiveOriginalEventTime"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveOriginalSeverity"), ("ERICSSON-ALARM-MIB", "eriAlarmActiveOrigAdditionalText"), ("ERICSSON-ALARM-MIB", "eriAlarmNObjMoreAdditionalText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eriAlarmChangeAlarmGroup = eriAlarmChangeAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: eriAlarmChangeAlarmGroup.setDescription('Objects that stores previous state of an alarm.')
eriAlarmSimpleAlarmGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 193, 183, 4, 4, 2, 10)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmIndeterminate"), ("ERICSSON-ALARM-MIB", "eriAlarmWarning"), ("ERICSSON-ALARM-MIB", "eriAlarmMinor"), ("ERICSSON-ALARM-MIB", "eriAlarmMajor"), ("ERICSSON-ALARM-MIB", "eriAlarmCritical"), ("ERICSSON-ALARM-MIB", "eriAlarmCleared"), ("ERICSSON-ALARM-MIB", "eriAlarmAlarmListRebuilt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eriAlarmSimpleAlarmGroup = eriAlarmSimpleAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: eriAlarmSimpleAlarmGroup.setDescription('The notifications in this MIB module.')
eriAlarmAddAddInfoGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 193, 183, 4, 4, 2, 12)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmAppendInfo"), ("ERICSSON-ALARM-MIB", "eriAlarmAppendAlertInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eriAlarmAddAddInfoGroup = eriAlarmAddAddInfoGroup.setStatus('current')
if mibBuilder.loadTexts: eriAlarmAddAddInfoGroup.setDescription('Notification to support appending of additional text.')
eriAlarmAlertNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 193, 183, 4, 4, 2, 13)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmIndAlert"), ("ERICSSON-ALARM-MIB", "eriAlarmWarnAlert"), ("ERICSSON-ALARM-MIB", "eriAlarmMinorAlert"), ("ERICSSON-ALARM-MIB", "eriAlarmMajorAlert"), ("ERICSSON-ALARM-MIB", "eriAlarmCriticalAlert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eriAlarmAlertNotifGroup = eriAlarmAlertNotifGroup.setStatus('current')
if mibBuilder.loadTexts: eriAlarmAlertNotifGroup.setDescription('Notifications for stateless alarms')
eriAlarmHeartBeatNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 193, 183, 4, 4, 2, 14)).setObjects(("ERICSSON-ALARM-MIB", "eriAlarmHeartBeatNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eriAlarmHeartBeatNotifGroup = eriAlarmHeartBeatNotifGroup.setStatus('current')
if mibBuilder.loadTexts: eriAlarmHeartBeatNotifGroup.setDescription('Heartbeat notifications.')
mibBuilder.exportSymbols("ERICSSON-ALARM-MIB", eriAlarmAlertIndex=eriAlarmAlertIndex, eriAlarmBasicAlarmsCompliance=eriAlarmBasicAlarmsCompliance, eriAlarmObjects=eriAlarmObjects, eriAlarmAlertLastChanged=eriAlarmAlertLastChanged, eriAlarmMinor=eriAlarmMinor, eriAlarmNObjMoreAdditionalText=eriAlarmNObjMoreAdditionalText, eriAlarmActiveEventType=eriAlarmActiveEventType, eriAlarmActiveLastChanged=eriAlarmActiveLastChanged, eriAlarmAlertMajorType=eriAlarmAlertMajorType, eriAlarmActiveMinorType=eriAlarmActiveMinorType, eriAlarmActiveSeverity=eriAlarmActiveSeverity, eriAlarmActiveTableURL=eriAlarmActiveTableURL, eriAlarmMinorAlert=eriAlarmMinorAlert, eriAlarmAlertLastSequenceNo=eriAlarmAlertLastSequenceNo, eriAlarmAppendAlertInfo=eriAlarmAppendAlertInfo, eriAlarmNotifObjects=eriAlarmNotifObjects, eriAlarmActiveOriginalEventTime=eriAlarmActiveOriginalEventTime, eriAlarmHeartBeatNotif=eriAlarmHeartBeatNotif, eriAlarmAlertSeverity=eriAlarmAlertSeverity, eriAlarmActiveNumber=eriAlarmActiveNumber, eriAlarmAlertTableURL=eriAlarmAlertTableURL, eriAlarmHeartBeatGroup=eriAlarmHeartBeatGroup, eriAlarmActiveResourceId=eriAlarmActiveResourceId, eriAlarmAlertAdditionalText=eriAlarmAlertAdditionalText, eriAlarmActiveSpecificProblem=eriAlarmActiveSpecificProblem, eriAlarmCriticalAlert=eriAlarmCriticalAlert, eriAlarmWarning=eriAlarmWarning, eriAlarmHeartBeatNotifGroup=eriAlarmHeartBeatNotifGroup, eriAlarmSumIndeterminate=eriAlarmSumIndeterminate, eriAlarmAlertManagedObject=eriAlarmAlertManagedObject, eriAlarmActiveAdditionalText=eriAlarmActiveAdditionalText, eriAlarmIndAlert=eriAlarmIndAlert, eriAlarmAppendInfo=eriAlarmAppendInfo, eriAlarmHbInterval=eriAlarmHbInterval, eriAlarmAlertSpecificProblem=eriAlarmAlertSpecificProblem, eriAlarmActiveLastSequenceNo=eriAlarmActiveLastSequenceNo, eriAlarmSumCritical=eriAlarmSumCritical, eriAlarmActiveMajorType=eriAlarmActiveMajorType, eriAlarmConformance=eriAlarmConformance, eriAlarmAlertTable=eriAlarmAlertTable, eriAlarmAlertNumber=eriAlarmAlertNumber, eriAlarmHeartBeat=eriAlarmHeartBeat, eriAlarmActiveAlarmEntry=eriAlarmActiveAlarmEntry, eriAlarmAlertProbableCause=eriAlarmAlertProbableCause, eriAlarmMajorAlert=eriAlarmMajorAlert, eriAlarmActiveAlarmTable=eriAlarmActiveAlarmTable, eriAlarmAlertNotifGroup=eriAlarmAlertNotifGroup, eriAlarmSumWarning=eriAlarmSumWarning, eriAlarmNObjResourceId=eriAlarmNObjResourceId, eriAlarmCompliances=eriAlarmCompliances, eriAlarmAlertResourceId=eriAlarmAlertResourceId, eriAlarmSummaryGroup=eriAlarmSummaryGroup, eriAlarmCleared=eriAlarmCleared, eriAlarmActiveAlarms=eriAlarmActiveAlarms, eriAlarmAlertMinorType=eriAlarmAlertMinorType, eriAlarmNObjAdditionalText=eriAlarmNObjAdditionalText, ericssonAlarmMIB=ericssonAlarmMIB, eriAlarmAlertsGroup=eriAlarmAlertsGroup, eriAlarmAlertEventTime=eriAlarmAlertEventTime, eriAlarmCritical=eriAlarmCritical, eriAlarmActiveManagedObject=eriAlarmActiveManagedObject, eriAlarmActiveOriginalSeverity=eriAlarmActiveOriginalSeverity, eriAlarmSimpleAlarmGroup=eriAlarmSimpleAlarmGroup, eriAlarmIndeterminate=eriAlarmIndeterminate, eriAlarmAlerts=eriAlarmAlerts, eriAlarmActiveIndex=eriAlarmActiveIndex, eriAlarmWarnAlert=eriAlarmWarnAlert, eriAlarmSNMPResourceGroup=eriAlarmSNMPResourceGroup, eriAlarmAlertEventType=eriAlarmAlertEventType, eriAlarmChangeAlarmGroup=eriAlarmChangeAlarmGroup, eriAlarmMajor=eriAlarmMajor, eriAlarmNotifsPrefix=eriAlarmNotifsPrefix, eriAlarmSumMinor=eriAlarmSumMinor, PYSNMP_MODULE_ID=ericssonAlarmMIB, eriAlarmActiveOrigAdditionalText=eriAlarmActiveOrigAdditionalText, eriAlarmAlarmListRebuilt=eriAlarmAlarmListRebuilt, eriAlarmGroups=eriAlarmGroups, eriAlarmActiveEventTime=eriAlarmActiveEventTime, eriAlarmSummary=eriAlarmSummary, eriAlarmActiveAlarmsGroup=eriAlarmActiveAlarmsGroup, eriAlarmActiveProbableCause=eriAlarmActiveProbableCause, eriAlarmNotifications=eriAlarmNotifications, eriAlarmAddAddInfoGroup=eriAlarmAddAddInfoGroup, eriAlarmSumMajor=eriAlarmSumMajor, eriAlarmAlertEntry=eriAlarmAlertEntry)
