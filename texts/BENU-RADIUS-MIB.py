#
# PySNMP MIB module BENU-RADIUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/benuos/BENU-RADIUS-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 11:53:25 2024
# On host fv-az1530-743 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
benuWAG, = mibBuilder.importSymbols("BENU-WAG-MIB", "benuWAG")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, Integer32, TimeTicks, IpAddress, MibIdentifier, Unsigned32, ObjectIdentity, Gauge32, iso, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "Integer32", "TimeTicks", "IpAddress", "MibIdentifier", "Unsigned32", "ObjectIdentity", "Gauge32", "iso", "ModuleIdentity", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
benuRadiusMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4))
benuRadiusMIB.setRevisions(('2016-07-28 00:00', '2016-03-17 00:00', '2015-06-24 00:00', '2015-05-21 00:00', '2015-05-20 00:00', '2015-03-16 00:00', '2015-03-02 00:00', '2015-02-24 00:00', '2015-01-26 00:00', '2015-01-02 00:00', '2014-12-02 00:00', '2014-07-17 00:00', '2014-05-19 00:00', '2013-04-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: benuRadiusMIB.setRevisionsDescriptions(('Modified BAAAGroupAuthEntry, BAAAGroupAcctEntry, BAAAGroupCoAEntry', 'Removed multiple instance indexes from BenuRadiusInstance. ', 'Modified bRadiusProxyAuthTPSIntervalDuration description.', 'Changed oid values for bRadiusProxyAuthTPSLowReached and bRadiusProxyAuthTPSHighReached.', 'Modified description of bRadiusProxyAuthTPSIntervalDuration.', 'Added units to processing times in bRadiusLatencyAuthTable', 'Added bRadiusLatencyAuthTable', 'Added bRadiusProxySubscriberDeleted in bRadiusProxyServerAuthTable', 'Updated notification assignments to comply with\n            standards (RFC 2578).', 'Added bRadiusProxyAuthTPSTable, bRadiusProxyAuthTPSLowReached and bRadiusProxyAuthTPSHighReached', 'Changed bRadiusNotifObjects from index 2 to 0', 'Added radius proxy server Acct table', 'Added radius proxy server Authtable', 'Initial Version',))
if mibBuilder.loadTexts: benuRadiusMIB.setLastUpdated('201607280000Z')
if mibBuilder.loadTexts: benuRadiusMIB.setOrganization('Benu Networks,Inc')
if mibBuilder.loadTexts: benuRadiusMIB.setContactInfo('Benu Networks,Inc\n                          Corporate Headquarters\n                          300 Concord Road, Suite 110\n                          Billerica, MA 01821 USA\n                          Tel: +1 978-223-4700\n                          Fax: +1 978-362-1908\n                          Email: info@benunets.com')
if mibBuilder.loadTexts: benuRadiusMIB.setDescription('This MIB module defines management information\n                related to the AAA clients.\n\n                Copyright (C)  2013 by Benu Networks, Inc.\n                All rights reserved.')
class BenuRadiusInstance(TextualConvention, Integer32):
    description = 'An identifier that uniquely identifies\n                 the Benu RADIUS Proxy instance.\n                 They are as follows:\n\n                     1  RADIUS instance 0\n                '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("radiusInstance0", 1))

bRadiusMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1))
if mibBuilder.loadTexts: bRadiusMIBObjects.setStatus('current')
if mibBuilder.loadTexts: bRadiusMIBObjects.setDescription('RADIUS server information is defined in this branch.')
bRadiusNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 0))
if mibBuilder.loadTexts: bRadiusNotifications.setStatus('current')
if mibBuilder.loadTexts: bRadiusNotifications.setDescription('Notifications related to RADIUS server\n       are defined in this branch.')
bRadiusNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 2))
if mibBuilder.loadTexts: bRadiusNotifObjects.setStatus('current')
if mibBuilder.loadTexts: bRadiusNotifObjects.setDescription('Notification objects related to RADIUS server\n        are defined in this branch.')
bRadiusProxyMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3))
if mibBuilder.loadTexts: bRadiusProxyMIBObjects.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyMIBObjects.setDescription('RADIUS Proxyserver information is defined in this branch.')
bRadiusProxyNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 4))
if mibBuilder.loadTexts: bRadiusProxyNotifObjects.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyNotifObjects.setDescription('Notifications related to RADIUS Proxy server\n       are defined in this branch.')
bRadiusServerAuthTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 1), )
if mibBuilder.loadTexts: bRadiusServerAuthTable.setStatus('current')
if mibBuilder.loadTexts: bRadiusServerAuthTable.setDescription('A list of authentication RADIUS server information.')
bRadiusServerAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 1, 1), ).setIndexNames((0, "BENU-RADIUS-MIB", "bRadiusAuthStatsInterval"), (0, "BENU-RADIUS-MIB", "bRadiusAuthServerIndex"))
if mibBuilder.loadTexts: bRadiusServerAuthEntry.setStatus('current')
if mibBuilder.loadTexts: bRadiusServerAuthEntry.setDescription('A logical row in the bRadiusServerAuthTable.')
bRadiusAuthStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bRadiusAuthStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthStatsInterval.setDescription('The interval during which the measurements were accumulated.\n       The interval index one indicates the latest interval for which statistics\n       accumulation was completed. Older the statistics data, greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1) and \n       IntervalCount(n), the most and least recent intervals respectively, the following\n       applies at the end of an interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for 1 <= i < n\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount.')
bRadiusAuthServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: bRadiusAuthServerIndex.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthServerIndex.setDescription('A number uniquely identifying each RADIUS\n        Authentication server with which this client\n        communicates.')
bRadiusAuthServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 1, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAuthServerInetAddressType.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthServerInetAddressType.setDescription('The type of address format used for the\n       bRadiusAuthServerInetAddress object.')
bRadiusAuthServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 1, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAuthServerInetAddress.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthServerInetAddress.setDescription('The IP address of the RADIUS Authentication\n      server referred to in this table entry, using\n      the version-neutral IP address format.')
bRadiusAuthIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAuthIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthIntervalDuration.setDescription('Duration of statistics accumulation interval in minutes.')
bRadiusAccessRequestSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAccessRequestSent.setStatus('current')
if mibBuilder.loadTexts: bRadiusAccessRequestSent.setDescription('The count of the total number of Access-Request message(s) sent.')
bRadiusAccessAcceptReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAccessAcceptReceived.setStatus('current')
if mibBuilder.loadTexts: bRadiusAccessAcceptReceived.setDescription('The count of the total number of Access-Accept message(s) received.')
bRadiusAccessRejectReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAccessRejectReceived.setStatus('current')
if mibBuilder.loadTexts: bRadiusAccessRejectReceived.setDescription('The count of the total number of Access-Reject message(s) received.')
bRadiusAccessChallengeReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAccessChallengeReceived.setStatus('current')
if mibBuilder.loadTexts: bRadiusAccessChallengeReceived.setDescription('The count of the total number of Access-Challenge message(s) received.')
bRadiusAccessRequestResent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAccessRequestResent.setStatus('current')
if mibBuilder.loadTexts: bRadiusAccessRequestResent.setDescription('The count of the number of Access-Request message(s) resent to server\n       as no response was received.')
bRadiusAccessRequestDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAccessRequestDropped.setStatus('current')
if mibBuilder.loadTexts: bRadiusAccessRequestDropped.setDescription('The count of the number of Access-Request message(s) dropped.')
bRadiusAccessRequestTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAccessRequestTimedOut.setStatus('current')
if mibBuilder.loadTexts: bRadiusAccessRequestTimedOut.setDescription('The count of the number of Access-Request message(s) for which\n       no response is received even after maximum number of retransmissions.')
bRadiusAccessRequestSentFail = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAccessRequestSentFail.setStatus('current')
if mibBuilder.loadTexts: bRadiusAccessRequestSentFail.setDescription('The count of the number of Access-Request message(s) for which send() failed.')
bRadiusAccessPeakRequestPending = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAccessPeakRequestPending.setStatus('current')
if mibBuilder.loadTexts: bRadiusAccessPeakRequestPending.setDescription('The count of the peak number of outstanding Access-Request message(s) reached in a\n        measurement interval period.')
bRadiusAccessMalformedRespDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAccessMalformedRespDropped.setStatus('current')
if mibBuilder.loadTexts: bRadiusAccessMalformedRespDropped.setDescription('The count of the number of dropped malformed message(s) received from RADIUS authentication server.')
bRadiusAccessBadAuthenticatorRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAccessBadAuthenticatorRcvd.setStatus('current')
if mibBuilder.loadTexts: bRadiusAccessBadAuthenticatorRcvd.setDescription('The count of the number of packets received from RADIUS server with bad authenticator.')
bRadiusAccessServerMarkedDead = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAccessServerMarkedDead.setStatus('current')
if mibBuilder.loadTexts: bRadiusAccessServerMarkedDead.setDescription('The count of the number of times a RADIUS server is marked dead during the measurement interval.')
bRadiusAuthLatencyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAuthLatencyMin.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthLatencyMin.setDescription('The measure of the minimum time interval, between all Access-Request\n       message(s) sent by the AAA process residing in the WAG to the RADIUS Server \n       and the  corresponding Access-Accept/Reject message(s) received by the AAA process.\n       The value is in in microseconds.')
bRadiusAuthLatencyMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAuthLatencyMax.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthLatencyMax.setDescription('The measure of the maximum time interval, between all Access-Request\n       message(s) sent by the AAA process residing in the WAG to the RADIUS Server and \n       the  corresponding Access-Accept/Reject message(s) received by the AAA process.\n       The value is in in microseconds.')
bRadiusAuthLatencyAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAuthLatencyAvg.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthLatencyAvg.setDescription('The measure of the average time interval, between all Access-Request\n       message(s) sent by the AAA process residing in the WAG to the RADIUS Server and \n       the  corresponding Access-Accept/Reject message(s) received by the AAA process.\n       The value is in in microseconds.')
bRadiusAuthLatencyLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAuthLatencyLast.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthLatencyLast.setDescription('The measure of the time interval, between the most recent Access-Request\n       message sent by the AAA process residing in the WAG to the RADIUS Server \n       and the corresponding Access-Accept/Reject message received by the AAA process.\n       The value is in in microseconds.')
bRadiusAuthAAAGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAuthAAAGroupName.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthAAAGroupName.setDescription('AAA server group to which this RADIUS server belongs.')
bRadiusProxyServerAuthTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 1), )
if mibBuilder.loadTexts: bRadiusProxyServerAuthTable.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyServerAuthTable.setDescription('A list of authentication RADIUS Proxy server information.')
bRadiusProxyServerAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 1, 1), ).setIndexNames((0, "BENU-RADIUS-MIB", "bRadiusProxyAuthStatsInterval"), (0, "BENU-RADIUS-MIB", "bRadiusProxyAuthServerIndex"))
if mibBuilder.loadTexts: bRadiusProxyServerAuthEntry.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyServerAuthEntry.setDescription('A logical row in the Radius Proxy server Auth Table.')
bRadiusProxyAuthStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bRadiusProxyAuthStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAuthStatsInterval.setDescription('The interval during which the measurements were accumulated.\n       The interval index one indicates the latest interval for which\n       statistics accumulation was completed. Older the statistics data, greater the\n       interval index value.    In a system supporting a history of n intervals with \n       IntervalCount(1) and IntervalCount(n), the most and least recent intervals \n       respectively, the following applies at the end of an interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for 1 <= i < n\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount.')
bRadiusProxyAuthServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: bRadiusProxyAuthServerIndex.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAuthServerIndex.setDescription('A number uniquely identifying each RADIUS\n        Authentication Proxy server with which this clients\n        communicates.')
bRadiusProxyAuthServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 1, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAuthServerInetAddressType.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAuthServerInetAddressType.setDescription('The type of address format used for the\n       bRadiusProxyAuthServerInetAddress object.')
bRadiusProxyAuthServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 1, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAuthServerInetAddress.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAuthServerInetAddress.setDescription('The IP address of the RADIUS Authentication\n      proxy server referred to in this table entry, using\n      the version-neutral IP address format.')
bRadiusProxyAuthIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAuthIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAuthIntervalDuration.setDescription('Duration of statistics accumulation interval in minutes.')
bRadiusProxyAccessRequestRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAccessRequestRcvd.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAccessRequestRcvd.setDescription('The count of the total number of Access-Request message(s) received.')
bRadiusProxyAccessUnknownTypeRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAccessUnknownTypeRcvd.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAccessUnknownTypeRcvd.setDescription('The count of the total number of Unknown message(s) received.')
bRadiusProxyAccessUnknownClientRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAccessUnknownClientRcvd.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAccessUnknownClientRcvd.setDescription('The count of the total number of  message(s) received by Radius\n         Proxy server from unknown clients.')
bRadiusProxyAccessRequestDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAccessRequestDropped.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAccessRequestDropped.setDescription('The count of the number of Access-Request message(s) dropped by the \n        radius proxy server .')
bRadiusProxyAccessSentFail = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAccessSentFail.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAccessSentFail.setDescription('The count of the number of message(s)received by the radius proxy \n         server from clients for which transmit failed.')
bRadiusProxyAccessBadAuthenticatorRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAccessBadAuthenticatorRcvd.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAccessBadAuthenticatorRcvd.setDescription('The count of the number of packets received by the radius proxy server\n         from clients  with bad authenticator.')
bRadiusProxyAccessAcceptRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAccessAcceptRcvd.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAccessAcceptRcvd.setDescription('The count of the total number of Access-Accept message(s) received.')
bRadiusProxyAccessRejectRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAccessRejectRcvd.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAccessRejectRcvd.setDescription('The count of the total number of Access-Reject message(s) received.')
bRadiusProxyAccessChallengeRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAccessChallengeRcvd.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAccessChallengeRcvd.setDescription('The count of the total number of Access-Challenge message(s) received.')
bRadiusProxySubscriberBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxySubscriberBlocked.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxySubscriberBlocked.setDescription('The count of the total number of subscribers blocked by the proxy\n        server.')
bRadiusProxySubscriberDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxySubscriberDeleted.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxySubscriberDeleted.setDescription('The count of the total number of subscribers deleted by the proxy\n        server.')
bRadiusProxyAuthTPSTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 3), )
if mibBuilder.loadTexts: bRadiusProxyAuthTPSTable.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAuthTPSTable.setDescription('An informative list of RADIUS Proxy authentication transactions.')
bRadiusProxyAuthTPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 3, 1), ).setIndexNames((0, "BENU-RADIUS-MIB", "bRadiusProxyAuthTPSInterval"))
if mibBuilder.loadTexts: bRadiusProxyAuthTPSEntry.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAuthTPSEntry.setDescription('A logical row in the Radius Proxy Auth TPS Table.')
bRadiusProxyAuthTPSInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: bRadiusProxyAuthTPSInterval.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAuthTPSInterval.setDescription('The interval during which the measurements were accumulated.\n       The interval index one indicates the latest interval for which\n       statistics accumulation was completed. Older the statistics data, greater the\n       interval index value.    In a system supporting a history of n intervals with \n       IntervalCount(1) and IntervalCount(n), the most and least recent intervals \n       respectively, the following applies at the end of an interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for 1 <= i < n\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount.')
bRadiusProxyAuthTPSIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAuthTPSIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAuthTPSIntervalDuration.setDescription('Configured interval duration of Radius transactions in seconds')
bRadiusProxyAuthTPSLow = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAuthTPSLow.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAuthTPSLow.setDescription('The low value configured for the particular interval')
bRadiusProxyAuthTPSHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAuthTPSHigh.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAuthTPSHigh.setDescription('The high value configured for the particular interval')
bRadiusProxyAuthTPS = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAuthTPS.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAuthTPS.setDescription('Total number of Radius Proxy transactions for the Radius tps interval')
bRadiusServerAcctTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2), )
if mibBuilder.loadTexts: bRadiusServerAcctTable.setStatus('current')
if mibBuilder.loadTexts: bRadiusServerAcctTable.setDescription('A list of accounting RADIUS server information.')
bRadiusServerAcctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2, 1), ).setIndexNames((0, "BENU-RADIUS-MIB", "bRadiusAcctStatsInterval"), (0, "BENU-RADIUS-MIB", "bRadiusAcctServerIndex"))
if mibBuilder.loadTexts: bRadiusServerAcctEntry.setStatus('current')
if mibBuilder.loadTexts: bRadiusServerAcctEntry.setDescription('A logical row in the bRadiusServerAcctTable.')
bRadiusAcctStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: bRadiusAcctStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bRadiusAcctStatsInterval.setDescription('The interval during which the measurements were accumulated.\n       The interval index one indicates the latest interval for which statistics\n       accumulation was completed. Older the statistics data, greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1) and\n       IntervalCount(n), the most and least recent intervals respectively, the following\n       applies at the end of an interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for  1 <= i < n\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount.')
bRadiusAcctServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: bRadiusAcctServerIndex.setStatus('current')
if mibBuilder.loadTexts: bRadiusAcctServerIndex.setDescription('A number uniquely identifying each RADIUS\n        Accounting server with which this client\n        communicates.')
bRadiusAcctServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAcctServerInetAddressType.setStatus('current')
if mibBuilder.loadTexts: bRadiusAcctServerInetAddressType.setDescription('The type of address format used for the\n       bRadiusAcctServerInetAddress object.')
bRadiusAcctServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAcctServerInetAddress.setStatus('current')
if mibBuilder.loadTexts: bRadiusAcctServerInetAddress.setDescription('The IP address of the RADIUS Accounting\n      server referred to in this table entry, using\n      the version-neutral IP address format.')
bRadiusAcctIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAcctIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bRadiusAcctIntervalDuration.setDescription('Duration of statistics accumulation interval in minutes.')
bRadiusAcctRequestSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAcctRequestSent.setStatus('current')
if mibBuilder.loadTexts: bRadiusAcctRequestSent.setDescription('The count of the total number of Accounting-Request message(s) sent.')
bRadiusAcctStartRequestSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAcctStartRequestSent.setStatus('current')
if mibBuilder.loadTexts: bRadiusAcctStartRequestSent.setDescription('The count of the total number of Accounting-Request Start message(s) sent.')
bRadiusAcctStopRequestSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAcctStopRequestSent.setStatus('current')
if mibBuilder.loadTexts: bRadiusAcctStopRequestSent.setDescription('The count of the total number of Accounting-Request Stop message(s) sent.')
bRadiusAcctInterimUpdateSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAcctInterimUpdateSent.setStatus('current')
if mibBuilder.loadTexts: bRadiusAcctInterimUpdateSent.setDescription('The count of the total number of Accounting-Request Interim-Update message(s) sent.')
bRadiusAcctResponseReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAcctResponseReceived.setStatus('current')
if mibBuilder.loadTexts: bRadiusAcctResponseReceived.setDescription('The count of the total number of Accounting-Response message(s) received.')
bRadiusAcctRequestResent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAcctRequestResent.setStatus('current')
if mibBuilder.loadTexts: bRadiusAcctRequestResent.setDescription('The count of the number of Accounting-Request message(s) resent to server \n       as no response was received.')
bRadiusAcctRequestDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAcctRequestDropped.setStatus('current')
if mibBuilder.loadTexts: bRadiusAcctRequestDropped.setDescription('The count of the number of Accounting-Request message(s) dropped.')
bRadiusAcctRequestTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAcctRequestTimedOut.setStatus('current')
if mibBuilder.loadTexts: bRadiusAcctRequestTimedOut.setDescription('The count of the number of Accounting-Request message(s) for which no response\n        is received even after maximum number of retransmissions.')
bRadiusAcctRequestSentFail = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAcctRequestSentFail.setStatus('current')
if mibBuilder.loadTexts: bRadiusAcctRequestSentFail.setDescription('The count of the number of Accounting-Request message(s) for which send() failed.')
bRadiusAcctPeakRequestPending = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAcctPeakRequestPending.setStatus('current')
if mibBuilder.loadTexts: bRadiusAcctPeakRequestPending.setDescription('The count of the peak number of outstanding Accounting-Request message(s) reached in\n        a measurement interval period.')
bRadiusAcctMalformedRespDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAcctMalformedRespDropped.setStatus('current')
if mibBuilder.loadTexts: bRadiusAcctMalformedRespDropped.setDescription('The count of the number of dropped malformed packets received from RADIUS accounting server.')
bRadiusAcctBadAuthenticatorRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAcctBadAuthenticatorRcvd.setStatus('current')
if mibBuilder.loadTexts: bRadiusAcctBadAuthenticatorRcvd.setDescription('The count of the number of packets received from AAA server with bad authenticator.')
bRadiusAcctServerMarkedDead = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAcctServerMarkedDead.setStatus('current')
if mibBuilder.loadTexts: bRadiusAcctServerMarkedDead.setDescription('The count of the number of times a server is marked dead during the measurement interval.')
bRadiusAcctLatencyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAcctLatencyMin.setStatus('current')
if mibBuilder.loadTexts: bRadiusAcctLatencyMin.setDescription('The measure of the minimum time interval, between all Accounting-Request\n       message(s) (Start/Interim Update/Stop) sent by the AAA process residing in \n       the WAG to the RADIUS Server and the corresponding Accounting-Response message(s) \n       received by the AAA process.\n       The value is in in microseconds.')
bRadiusAcctLatencyMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAcctLatencyMax.setStatus('current')
if mibBuilder.loadTexts: bRadiusAcctLatencyMax.setDescription('The measure of the maximum time interval, between all Accounting-Request\n       message(s) (Start/Interim Update/Stop) sent by the AAA process residing in the \n       WAG to the RADIUS Server and the corresponding Accounting-Response message(s) \n       received by the AAA process.\n       The value is in in microseconds.')
bRadiusAcctLatencyAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAcctLatencyAvg.setStatus('current')
if mibBuilder.loadTexts: bRadiusAcctLatencyAvg.setDescription('The measure of the average time interval, between all Accounting-Request\n       message(s) (Start/Interim Update/Stop) sent by the AAA process residing in the \n       WAG to the RADIUS Server and the corresponding Accounting-Response message(s) \n       received by the AAA process.\n       The value is in in microseconds.')
bRadiusAcctLatencyLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAcctLatencyLast.setStatus('current')
if mibBuilder.loadTexts: bRadiusAcctLatencyLast.setDescription('The measure of the time interval, between the most recent Accounting-Request\n       message (Start/Interim Update/Stop) sent by the AAA process residing in the WAG \n       to the RADIUS Server and the corresponding Accounting-Response message received \n       by the AAA process.\n       The value is in in microseconds.')
bRadiusAcctAAAGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 2, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAcctAAAGroupName.setStatus('current')
if mibBuilder.loadTexts: bRadiusAcctAAAGroupName.setDescription('AAA server group to which this radius server belongs.')
bRadiusProxyServerAcctTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 2), )
if mibBuilder.loadTexts: bRadiusProxyServerAcctTable.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyServerAcctTable.setDescription('A list of accounting RADIUS Proxy Accounting server information.')
bRadiusProxyServerAcctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 2, 1), ).setIndexNames((0, "BENU-RADIUS-MIB", "bRadiusProxyAcctStatsInterval"), (0, "BENU-RADIUS-MIB", "bRadiusProxyAcctServerIndex"))
if mibBuilder.loadTexts: bRadiusProxyServerAcctEntry.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyServerAcctEntry.setDescription('A logical row in the bRadiusProxyServerAcctTable.')
bRadiusProxyAcctStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: bRadiusProxyAcctStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAcctStatsInterval.setDescription('The interval during which the measurements were accumulated.\n       The interval index one indicates the latest interval for which\nstatistics\n       accumulation was completed. Older the statistics data, greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1)\nand\n       IntervalCount(n), the most and least recent intervals respectively, the\nfollowing\n       applies at the end of an interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for  1 <= i < n\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount.')
bRadiusProxyAcctServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: bRadiusProxyAcctServerIndex.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAcctServerIndex.setDescription('A number uniquely identifying each RADIUS\n        Proxy Accounting server with which  client\n        communicates.')
bRadiusProxyAcctServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAcctServerInetAddressType.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAcctServerInetAddressType.setDescription('The type of address format used for the\n       bRadiusProxyAcctServerInetAddress object.')
bRadiusProxyAcctServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAcctServerInetAddress.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAcctServerInetAddress.setDescription('The IP address of the RADIUS Accounting proxy\n      server referred to in this table entry, using\n      the version-neutral IP address format.')
bRadiusProxyAcctIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAcctIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAcctIntervalDuration.setDescription('Duration of statistics accumulation interval in minutes.')
bRadiusProxyAcctRequestRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAcctRequestRcvd.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAcctRequestRcvd.setDescription('The count of the total number of Accounting-Request message(s)\n        received.')
bRadiusProxyAcctRequestSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAcctRequestSent.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAcctRequestSent.setDescription('The count of the total number of Accounting-Request message(s) sent.')
bRadiusProxyAcctStartRequestRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAcctStartRequestRcvd.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAcctStartRequestRcvd.setDescription('The count of the total number of Accounting-Request Start message(s)\n        received.')
bRadiusProxyAcctStopRequestRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAcctStopRequestRcvd.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAcctStopRequestRcvd.setDescription('The count of the total number of Accounting-Request Stop \n        message(s) received.')
bRadiusProxyAcctInterimUpdateRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAcctInterimUpdateRcvd.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAcctInterimUpdateRcvd.setDescription('The count of the total number of Accounting-Request Interim-Update\n        message(s) received.')
bRadiusProxyAcctStartRequestSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAcctStartRequestSent.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAcctStartRequestSent.setDescription('The count of the total number of Accounting-Request Start message(s)\n        sent.')
bRadiusProxyAcctStopRequestSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAcctStopRequestSent.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAcctStopRequestSent.setDescription('The count of the total number of Accounting-Request Stop \n        message(s) sent.')
bRadiusProxyAcctInterimUpdateSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAcctInterimUpdateSent.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAcctInterimUpdateSent.setDescription('The count of the total number of Accounting-Request Interim-Update \n        message(s) sent.')
bRadiusProxyAcctResponseRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAcctResponseRcvd.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAcctResponseRcvd.setDescription('The count of the total number of Accounting-Response message(s)\n        received.')
bRadiusProxyAcctResponseSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 3, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusProxyAcctResponseSent.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAcctResponseSent.setDescription('The count of the total number of Accounting-Response message(s)\n         sent.')
bRadiusClientCoATable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3), )
if mibBuilder.loadTexts: bRadiusClientCoATable.setStatus('current')
if mibBuilder.loadTexts: bRadiusClientCoATable.setDescription('A list of CoA RADIUS client information.')
bRadiusClientCoAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1), ).setIndexNames((0, "BENU-RADIUS-MIB", "bRadiusCOAStatsInterval"), (0, "BENU-RADIUS-MIB", "bRadiusCoAClientIndex"))
if mibBuilder.loadTexts: bRadiusClientCoAEntry.setStatus('current')
if mibBuilder.loadTexts: bRadiusClientCoAEntry.setDescription('A logical row in the bRadiusClientCoATable.')
bRadiusCOAStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: bRadiusCOAStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bRadiusCOAStatsInterval.setDescription('The interval during which the measurements were accumulated.\n       The interval index one indicates the latest interval for which statistics\n       accumulation was completed. Older the statistics, greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1) and\n       IntervalCount(n), the most and least recent intervals respectively, the following\n       applies at the end of an interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for  1 <= i < n\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount.')
bRadiusCoAClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: bRadiusCoAClientIndex.setStatus('current')
if mibBuilder.loadTexts: bRadiusCoAClientIndex.setDescription('A number uniquely identifying each RADIUS\n        CoA client with which this server\n        communicates.')
bRadiusCoAClientInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusCoAClientInetAddressType.setStatus('current')
if mibBuilder.loadTexts: bRadiusCoAClientInetAddressType.setDescription('The type of address format used for the\n       bRadiusCoAClientInetAddress object.')
bRadiusCoAClientInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusCoAClientInetAddress.setStatus('current')
if mibBuilder.loadTexts: bRadiusCoAClientInetAddress.setDescription('The IP address of the RADIUS CoA\n      server referred to in this table entry, using\n      the version-neutral IP address format.')
bRadiusCoAIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusCoAIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bRadiusCoAIntervalDuration.setDescription('Duration of statistics accumulation interval in minutes.')
bRadiusCoAAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusCoAAckSent.setStatus('current')
if mibBuilder.loadTexts: bRadiusCoAAckSent.setDescription('The count of the total number of CoA-Ack message(s) sent.')
bRadiusCoANackSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusCoANackSent.setStatus('current')
if mibBuilder.loadTexts: bRadiusCoANackSent.setDescription('The count of the total number of CoA-Nack message(s) sent.')
bRadiusCoARequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusCoARequestReceived.setStatus('current')
if mibBuilder.loadTexts: bRadiusCoARequestReceived.setDescription('The count of the total number of CoA-Request message(s) received.')
bRadiusCoARequestDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusCoARequestDropped.setStatus('current')
if mibBuilder.loadTexts: bRadiusCoARequestDropped.setDescription('The count of the total number of CoA-Request message(s) dropped.')
bRadiusCoAReqDropDueToDupReq = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusCoAReqDropDueToDupReq.setStatus('current')
if mibBuilder.loadTexts: bRadiusCoAReqDropDueToDupReq.setDescription('The count of the total number of duplicate CoA-Request message(s) dropped.')
bRadiusCoAReqDropDueToInvalidTime = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusCoAReqDropDueToInvalidTime.setStatus('current')
if mibBuilder.loadTexts: bRadiusCoAReqDropDueToInvalidTime.setDescription('The count of the total number of dropped CoA-Request message(s)\n        due to invalid timestamp in the message.')
bRadiusCoAReqDropDueToBadAuthenticator = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusCoAReqDropDueToBadAuthenticator.setStatus('current')
if mibBuilder.loadTexts: bRadiusCoAReqDropDueToBadAuthenticator.setDescription('The count of the total number of dropped CoA-Request message(s) from an invalid client.')
bRadiusCoANackDueToInvalidReq = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusCoANackDueToInvalidReq.setStatus('current')
if mibBuilder.loadTexts: bRadiusCoANackDueToInvalidReq.setDescription('The count of the total number of CoA-Nack message(s) sent due to invalid request.')
bRadiusCoANackDueToExceedMaxOutstanding = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusCoANackDueToExceedMaxOutstanding.setStatus('current')
if mibBuilder.loadTexts: bRadiusCoANackDueToExceedMaxOutstanding.setDescription('The count of the total number of CoA-Nack message(s)\n        sent due to outstanding requests exceeding the maximum value.')
bRadiusDisconnectRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusDisconnectRequestReceived.setStatus('current')
if mibBuilder.loadTexts: bRadiusDisconnectRequestReceived.setDescription('The count of the total number of Disconnect-Request message(s) received.')
bRadiusDisconnectAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusDisconnectAckSent.setStatus('current')
if mibBuilder.loadTexts: bRadiusDisconnectAckSent.setDescription('The count of the total number of Disconnect-Ack message(s) sent.')
bRadiusDisconnectNackSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusDisconnectNackSent.setStatus('current')
if mibBuilder.loadTexts: bRadiusDisconnectNackSent.setDescription('The count of the total number of Disconnect-Nack message(s) sent.')
bRadiusDisconnectRequestDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusDisconnectRequestDropped.setStatus('current')
if mibBuilder.loadTexts: bRadiusDisconnectRequestDropped.setDescription('The count of the total number of Disconnect-Request message(s) dropped.')
bRadiusDisconnectReqDropDueToDupReq = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusDisconnectReqDropDueToDupReq.setStatus('current')
if mibBuilder.loadTexts: bRadiusDisconnectReqDropDueToDupReq.setDescription('The count of the total number of duplicate Disconnect-Request message(s) dropped.')
bRadiusDisconnectReqDropDueToInvalidTime = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusDisconnectReqDropDueToInvalidTime.setStatus('current')
if mibBuilder.loadTexts: bRadiusDisconnectReqDropDueToInvalidTime.setDescription('The count of the total number of dropped Disconnect-Request message(s)\n        due to invalid timestamp in the message.')
bRadiusDisconnectReqDropDueToBadAuthenticator = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusDisconnectReqDropDueToBadAuthenticator.setStatus('current')
if mibBuilder.loadTexts: bRadiusDisconnectReqDropDueToBadAuthenticator.setDescription('The count of the total number of dropped Disconnect-Request message(s) from an invalid client.')
bRadiusDisconnectNackDueToInvalidReq = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusDisconnectNackDueToInvalidReq.setStatus('current')
if mibBuilder.loadTexts: bRadiusDisconnectNackDueToInvalidReq.setDescription('The count of the total number of Disconnect-Nack message(s) sent due to invalid request.')
bRadiusDisconnectNackDueToExceedMaxOutstanding = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusDisconnectNackDueToExceedMaxOutstanding.setStatus('current')
if mibBuilder.loadTexts: bRadiusDisconnectNackDueToExceedMaxOutstanding.setDescription('The count of the total number of Disconnect-Nack message(s)\n        sent due to outstanding requests exceeding the maximum value.')
bRadiusCoALatencyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusCoALatencyMin.setStatus('current')
if mibBuilder.loadTexts: bRadiusCoALatencyMin.setDescription('The measure of the minimum time interval, between all CoA-Request\n       message(s) received from the RADIUS server and their corresponding\n       CoA-Ack/Nack message(s) sent by the RADIUS client.\n       The value is in in microseconds.')
bRadiusCoALatencyMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusCoALatencyMax.setStatus('current')
if mibBuilder.loadTexts: bRadiusCoALatencyMax.setDescription('The measure of the maximum time interval, between all CoA-Request\n       message(s) received from the RADIUS server and their corresponding\n       CoA-Ack/Nack message(s) sent by the RADIUS client.\n       The value is in in microseconds.')
bRadiusCoALatencyAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusCoALatencyAvg.setStatus('current')
if mibBuilder.loadTexts: bRadiusCoALatencyAvg.setDescription('The measure of the average time interval, between all CoA-Request\n       message(s) received from the RADIUS server and their corresponding\n       CoA-Ack/Nack message(s) sent by the RADIUS client.\n       The value is in in microseconds.')
bRadiusCoALatencyLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusCoALatencyLast.setStatus('current')
if mibBuilder.loadTexts: bRadiusCoALatencyLast.setDescription('The measure of the time interval, between the most recent CoA-Request\n       message received from the RADIUS server and its corresponding CoA-Ack/Nack\n       message received by the RADIUS client. \n       The value is in in microseconds.')
bRadiusCoADMLatencyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusCoADMLatencyMin.setStatus('current')
if mibBuilder.loadTexts: bRadiusCoADMLatencyMin.setDescription('The measure of the minimum time interval, between all Disconnect-Request\n       message(s) received from the RADIUS server and their corresponding \n       Disconnect-Ack/Nack message(s) sent by the RADIUS client.\n       The value is in in microseconds.')
bRadiusCoADMLatencyMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusCoADMLatencyMax.setStatus('current')
if mibBuilder.loadTexts: bRadiusCoADMLatencyMax.setDescription('The measure of the maximum time interval, between all Disconnect-Request\n       message(s) received from the RADIUS server and their corresponding\n       Disconnect-Ack/Nack message(s) sent by the RADIUS client.\n       The value is in in microseconds.')
bRadiusCoADMLatencyAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusCoADMLatencyAvg.setStatus('current')
if mibBuilder.loadTexts: bRadiusCoADMLatencyAvg.setDescription('The measure of the average time interval, between all Disconnect-Request\n       message(s) received from the RADIUS server and their corresponding\n       Disconnect-Ack/Nack message(s) sent by the RADIUS client.\n       The value is in in microseconds.')
bRadiusCoADMLatencyLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusCoADMLatencyLast.setStatus('current')
if mibBuilder.loadTexts: bRadiusCoADMLatencyLast.setDescription('The measure of the time interval, between the most recent Disconnect-Request\n       message received from the RADIUS server and its corresponding Disconnect-Ack/Nack\n       message received by the RADIUS client.\n       The value is in in microseconds.')
bRadiusCoAAAAGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 3, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusCoAAAAGroupName.setStatus('current')
if mibBuilder.loadTexts: bRadiusCoAAAAGroupName.setDescription('AAA server group to which this RADIUS server belongs.')
bAAAGroupAuthTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 4), )
if mibBuilder.loadTexts: bAAAGroupAuthTable.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupAuthTable.setDescription('A list of Authentication AAA group information.')
bAAAGroupAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 4, 1), ).setIndexNames((0, "BENU-RADIUS-MIB", "bAAAGroupAuthStatsInterval"), (0, "BENU-RADIUS-MIB", "bAAAGroupAuthIndex"))
if mibBuilder.loadTexts: bAAAGroupAuthEntry.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupAuthEntry.setDescription('A logical row in the bAAAGroupAuthTable.')
bAAAGroupAuthStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: bAAAGroupAuthStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupAuthStatsInterval.setDescription('The interval during which the measurements were accumulated.\n       The interval index one indicates the latest interval for which statistics\n       accumulation was completed. Older the statistics, greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1) and\n       IntervalCount(n), the most and least recent intervals respectively, the following\n       applies at the end of an interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for  1 <= i < n\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount.')
bAAAGroupAuthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: bAAAGroupAuthIndex.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupAuthIndex.setDescription('A number uniquely identifying each RADIUS\n        Authentication server group ')
bAAAGroupAuthName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupAuthName.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupAuthName.setDescription('AAA group Authentication name')
bAAAGroupAuthIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupAuthIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupAuthIntervalDuration.setDescription('Duration of statistics accumulation interval in minutes.')
bAAAGroupMaximumOutstandingAuthReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupMaximumOutstandingAuthReqs.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupMaximumOutstandingAuthReqs.setDescription('Maximum number of outstanding Access-Request message(s) configured for this group.')
bAAAGroupPeakOutstandingAuthReqsReached = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupPeakOutstandingAuthReqsReached.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupPeakOutstandingAuthReqsReached.setDescription('The count of the peak number of outstanding Access-Request message(s)\n        reached during the measurement interval.')
bAAAGroupAuthReqsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupAuthReqsDropped.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupAuthReqsDropped.setDescription('The count of the Access-Rrequest message(s) at group level\n       which could not be sent to any server and\n       were dropped as the overflow queue was exhausted.')
bAAAGroupOutstandingAuthReqsHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupOutstandingAuthReqsHighThreshold.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupOutstandingAuthReqsHighThreshold.setDescription('The high threshold for outstanding Access-Request message(s) in this\n        AAA group. If a bAAAGroupOutstandingAuthReqsLow event has\n        been generated (or no bAAAGroupOutstandingAuthReqsHigh was\n        generated previously) for this AAA group, and the value for\n        outstanding Access-Request message(s) has exceeded the value of\n        bAAAGroupOutstandingAuthReqsHighThreshold, then a\n        bAAAGroupOutstandingAuthReqsHigh event will be generated.  No more\n        bAAAGroupOutstandingAuthReqsHigh events will be generated for this\n        AAA group during this execution of the AAA group client until the\n        value for outstanding Access-Request message(s) becomes equal to or less\n        than the value of bAAAGroupOutstandingAuthReqsLowThreshold.')
bAAAGroupOutstandingAuthReqsLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupOutstandingAuthReqsLowThreshold.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupOutstandingAuthReqsLowThreshold.setDescription('The low threshold for outstanding Access-Request message(s) in this\n        AAA group. If the value for outstanding Access-Request message(s) in\n        this group becomes equal to or less than this value and the current\n        condition for bAAAGroupOutstandingAuthReqsHigh is raised, then a\n        bAAAGroupOutstandingAuthReqsLow event will be generated. No more\n        bAAAGroupOutstandingAuthReqsLow events will be generated for this\n        AAA group during this execution of the AAA group client until the\n        value for outstanding Access-Request message(s) has exceeded the value of\n        bAAAGroupOutstandingAuthReqsLowThreshold.')
bAAAGroupAuthCurrentOutstanding = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupAuthCurrentOutstanding.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupAuthCurrentOutstanding.setDescription('The current number of outstanding authentication requests.')
bAAAGroupAcctTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 5), )
if mibBuilder.loadTexts: bAAAGroupAcctTable.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupAcctTable.setDescription('A list of AAA group Accounting information.')
bAAAGroupAcctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 5, 1), ).setIndexNames((0, "BENU-RADIUS-MIB", "bAAAGroupAcctStatsInterval"), (0, "BENU-RADIUS-MIB", "bAAAGroupAcctIndex"))
if mibBuilder.loadTexts: bAAAGroupAcctEntry.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupAcctEntry.setDescription('A logical row in the bAAAGroupAcctTable.')
bAAAGroupAcctStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: bAAAGroupAcctStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupAcctStatsInterval.setDescription('The interval during which the measurements were accumulated.\n       The interval index one indicates the latest interval for which statistics\n       accumulation was completed. Older the statistics, greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1) and\n       IntervalCount(n), the most and least recent intervals respectively, the following\n       applies at the end of an interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for  1 <= i < n\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount.')
bAAAGroupAcctIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: bAAAGroupAcctIndex.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupAcctIndex.setDescription('A number uniquely identifying each RADIUS\n        Accounting server group.')
bAAAGroupAcctName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupAcctName.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupAcctName.setDescription('AAA group Accounting name.')
bAAAGroupAcctIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupAcctIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupAcctIntervalDuration.setDescription('Duration of statistics accumulation interval in minutes.')
bAAAGroupMaximumOutstandingAcctReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupMaximumOutstandingAcctReqs.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupMaximumOutstandingAcctReqs.setDescription('Maximum number of outstanding Accounting-Request message(s) configured\n        for this group.')
bAAAGroupPeakOutstandingAcctReqsReached = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupPeakOutstandingAcctReqsReached.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupPeakOutstandingAcctReqsReached.setDescription('The count of the peak number of outstanding Accounting-Request message(s)\n        reached during the measurement interval.')
bAAAGroupAcctReqsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupAcctReqsDropped.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupAcctReqsDropped.setDescription('The count of the Accounting-Request message(s) at group level\n       which could not be sent to any server and \n       were dropped as overflow queue was exhausted.')
bAAAGroupOutstandingAcctReqsHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupOutstandingAcctReqsHighThreshold.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupOutstandingAcctReqsHighThreshold.setDescription('The high threshold for outstanding Accounting-Request message(s) in this\n        AAA group. If a bAAAGroupOutstandingAcctReqsLow event had\n        been generated (or no bAAAGroupOutstandingAcctReqsHigh event was\n        generated previously) for this AAA group, and the value for\n        outstanding Accounting-Request has exceeded the value of\n        bAAAGroupOutstandingAcctReqsHighThreshold, then a\n        bAAAGroupOutstandingAcctReqsHigh event will be generated. No more\n        bAAAGroupOutstandingAcctReqsHigh events will be generated for this\n        AAA group during this execution of the AAA group client until the\n        value for outstanding Accounting-Requests becomes equal to or less\n        than the value of bAAAGroupOutstandingAcctReqsLowThreshold.')
bAAAGroupOutstandingAcctReqsLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupOutstandingAcctReqsLowThreshold.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupOutstandingAcctReqsLowThreshold.setDescription('The low threshold for outstanding Accounting-Request message(s) in this\n        AAA group. If the value for outstanding Accounting-Request message(s) in\n        this group becomes equal to or less than this value and the current\n        condition for bAAAGroupOutstandingAcctReqsHigh is raised, then a\n        bAAAGroupOutstandingAcctReqsLow event will be generated. No more\n        bAAAGroupOutstandingAcctReqsLow events will be generated for this\n        AAA group during this execution of the AAA group client until the\n        value for outstanding Accounting-Requests has exceeded the value of\n        bAAAGroupOutstandingAcctReqsLowThreshold.')
bAAAGroupAcctCurrentOutstanding = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupAcctCurrentOutstanding.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupAcctCurrentOutstanding.setDescription('The current number of outstanding accounting requests.')
bAAAGroupCoATable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 6), )
if mibBuilder.loadTexts: bAAAGroupCoATable.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupCoATable.setDescription('A list of AAA group CoA information.')
bAAAGroupCoAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 6, 1), ).setIndexNames((0, "BENU-RADIUS-MIB", "bAAAGroupCoAStatsInterval"), (0, "BENU-RADIUS-MIB", "bAAAGroupCoAIndex"))
if mibBuilder.loadTexts: bAAAGroupCoAEntry.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupCoAEntry.setDescription('A logical row in the bAAAGroupCoATable.')
bAAAGroupCoAStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: bAAAGroupCoAStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupCoAStatsInterval.setDescription('The interval during which the measurements were accumulated.\n       The interval index one indicates the latest interval for which statistics\n       accumulation was completed. Older the statistics, greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1) and\n       IntervalCount(n) the most and least recent intervals respectively, the following\n       applies at the end of an interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for  1 <= i < n\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount,')
bAAAGroupCoAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 6, 1, 2), Integer32())
if mibBuilder.loadTexts: bAAAGroupCoAIndex.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupCoAIndex.setDescription('A number uniquely identifying each\n        COA Group.')
bAAAGroupCoAName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupCoAName.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupCoAName.setDescription('AAA group CoA name.')
bAAAGroupCoAIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupCoAIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupCoAIntervalDuration.setDescription('Duration of statistics accumulation interval in minutes.')
bAAAGroupCoANumOfClients = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupCoANumOfClients.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupCoANumOfClients.setDescription('Number of clients which have sent CoA.')
bAAAGroupCoAReqsDropDueToInvalidClient = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupCoAReqsDropDueToInvalidClient.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupCoAReqsDropDueToInvalidClient.setDescription('Number Of CoA-Request message(s) dropped from an invalid client.')
bAAAGroupDisconnectReqsDropDueToInvalidClient = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupDisconnectReqsDropDueToInvalidClient.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupDisconnectReqsDropDueToInvalidClient.setDescription('Number Of Disconnect-Request message(s) dropped from an invalid client.')
bAAAGroupMaximumOutstandingCoAReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 6, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupMaximumOutstandingCoAReqs.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupMaximumOutstandingCoAReqs.setDescription('Maximum number of outstanding CoA-Request or Disconnect-Request message(s)\n        configured for this group. Any requests after this value will be dropped.')
bAAAGroupPeakOutstandingCoAReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupPeakOutstandingCoAReqs.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupPeakOutstandingCoAReqs.setDescription('Current number of outstanding CoA or Disconnect Request message(s)\n        in this group.')
bAAAGroupOutstandingCoAReqsHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 6, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupOutstandingCoAReqsHighThreshold.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupOutstandingCoAReqsHighThreshold.setDescription('The high threshold for outstanding CoA or Disconnect Request message(s) in this\n        AAA group. If a bAAAGroupOutstandingCoAReqsLow event has been generated\n       (or no bAAAGroupOutstandingCoAReqsHigh was generated previously) for\n        this AAA group, and the value for outstanding CoA or Disconnect\n        Request message(s) has exceeded the value of\n        bAAAGroupOutstandingCoAReqsHighThreshold, then a\n        bAAAGroupOutstandingCoAReqsHigh event will be generated. No more\n        bAAAGroupOutstandingCoAReqsHigh events will be generated for this\n        AAA group during this execution of the AAA group client until the value\n        for outstanding CoA or Disconnect Request message(s) becomes equal to or\n        less than the value of bAAAGroupOutstandingCoAReqsLowThreshold.')
bAAAGroupOutstandingCoAReqsLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupOutstandingCoAReqsLowThreshold.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupOutstandingCoAReqsLowThreshold.setDescription('The low threshold for outstanding CoA or Disconnect Request message(s) in this\n        AAA group. If the value for outstanding CoA or Disconnect Request message(s) in\n        this group becomes equal to or less than this value and the current\n        condition for bAAAGroupOutstandingCoAReqsHigh is raised, then a\n        bAAAGroupOutstandingCoAReqsLow event will be generated. No more\n        bAAAGroupOutstandingCoAReqsLow events will be generated for this\n        AAA group during this execution of the AAA group client until the\n        value for outstanding CoA or Disconnect Request message(s) has exceeded the\n        value of bAAAGroupOutstandingCoAReqsLowThreshold.')
bAAAGroupCoaCurrentOutstanding = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 6, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bAAAGroupCoaCurrentOutstanding.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupCoaCurrentOutstanding.setDescription('The current number of outstanding coa requests.')
bRadiusLatencyAuthTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 7), )
if mibBuilder.loadTexts: bRadiusLatencyAuthTable.setStatus('current')
if mibBuilder.loadTexts: bRadiusLatencyAuthTable.setDescription('Latency information list for authentication RADIUS server instance.')
bRadiusLatencyAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 7, 1), ).setIndexNames((0, "BENU-RADIUS-MIB", "bRadiusAuthLatencyStatsInterval"), (0, "BENU-RADIUS-MIB", "bRadiusAuthInstanceIndex"))
if mibBuilder.loadTexts: bRadiusLatencyAuthEntry.setStatus('current')
if mibBuilder.loadTexts: bRadiusLatencyAuthEntry.setDescription('A logical row in the bRadiusLatencyAuthTable.')
bRadiusAuthLatencyStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: bRadiusAuthLatencyStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthLatencyStatsInterval.setDescription('The interval during which the measurements were accumulated.\n       The interval index one indicates the latest interval for which statistics\n       accumulation was completed. Older the statistics data, greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1) and\n       IntervalCount(n), the most and least recent intervals respectively, the following\n       applies at the end of an interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for 1 <= i < n\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount.')
bRadiusAuthInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 7, 1, 2), BenuRadiusInstance())
if mibBuilder.loadTexts: bRadiusAuthInstanceIndex.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthInstanceIndex.setDescription('A number uniquely identifying each RADIUS Authentication instance')
bRadiusAuthLatencyIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAuthLatencyIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthLatencyIntervalDuration.setDescription('Duration of statistics accumulation interval in minutes.')
bRadiusAuthRequestTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAuthRequestTotalPackets.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthRequestTotalPackets.setDescription('The total number of Access-Request packets for this instance')
bRadiusAuthRequestMaximumProcessingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 7, 1, 5), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAuthRequestMaximumProcessingTime.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthRequestMaximumProcessingTime.setDescription('The Maximum Processing Time for an Access-Request packet')
bRadiusAuthRequestMinimumProcessingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 7, 1, 6), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAuthRequestMinimumProcessingTime.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthRequestMinimumProcessingTime.setDescription('The Minimum Processing Time for an Access-Request packet')
bRadiusAuthRequestAverageProcessingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 7, 1, 7), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAuthRequestAverageProcessingTime.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthRequestAverageProcessingTime.setDescription('The Average Processing Time for an Access-Request packet')
bRadiusAuthRequestProcessingTimeGreaterthan1MS = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 7, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAuthRequestProcessingTimeGreaterthan1MS.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthRequestProcessingTimeGreaterthan1MS.setDescription('The number of Access-Request packets for which processing time is \n       greater than 1ms.')
bRadiusAuthResponseTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 7, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAuthResponseTotalPackets.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthResponseTotalPackets.setDescription('The total number of packets received in response to Access-Request packets.')
bRadiusAuthResponseMaximumProcessingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 7, 1, 10), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAuthResponseMaximumProcessingTime.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthResponseMaximumProcessingTime.setDescription('The maximum processing time of a packet received in response to an\n      Access-Request.')
bRadiusAuthResponseMinimumProcessingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 7, 1, 11), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAuthResponseMinimumProcessingTime.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthResponseMinimumProcessingTime.setDescription('The minimum processing time of a packet received in response to an\n      Access-Request.')
bRadiusAuthResponseAverageProcessingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 7, 1, 12), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAuthResponseAverageProcessingTime.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthResponseAverageProcessingTime.setDescription('The average processing time of a packet received in response to an\n      Access-Request.')
bRadiusAuthResponseProcessingTimeGreaterthan1MS = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 1, 7, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRadiusAuthResponseProcessingTimeGreaterthan1MS.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthResponseProcessingTimeGreaterthan1MS.setDescription('The number of response packets for which processing time is greater\n       than 1ms.')
bRadiusServerIPAddrType = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 2, 1), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bRadiusServerIPAddrType.setStatus('current')
if mibBuilder.loadTexts: bRadiusServerIPAddrType.setDescription('IP Address type (IPv4 or IPv6) of the RADIUS server.')
bRadiusServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 2, 2), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bRadiusServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: bRadiusServerIPAddress.setDescription('IP Address of the RADIUS server.')
bAAAGroupOutstandingAuthReqsLow = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 0, 1)).setObjects(("BENU-RADIUS-MIB", "bAAAGroupAuthName"), ("BENU-RADIUS-MIB", "bAAAGroupMaximumOutstandingAuthReqs"), ("BENU-RADIUS-MIB", "bAAAGroupOutstandingAuthReqsLowThreshold"))
if mibBuilder.loadTexts: bAAAGroupOutstandingAuthReqsLow.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupOutstandingAuthReqsLow.setDescription('This notification signifies that the number of outstanding Access-\n        Request message(s) for a particular AAA group is cleared, meaning that it\n        has fallen below the value of bAAAGroupOutstandingAuthReqsLowThreshold\n        for that AAA group.')
bAAAGroupOutstandingAuthReqsHigh = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 0, 2)).setObjects(("BENU-RADIUS-MIB", "bAAAGroupAuthName"), ("BENU-RADIUS-MIB", "bAAAGroupMaximumOutstandingAuthReqs"), ("BENU-RADIUS-MIB", "bAAAGroupOutstandingAuthReqsHighThreshold"))
if mibBuilder.loadTexts: bAAAGroupOutstandingAuthReqsHigh.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupOutstandingAuthReqsHigh.setDescription('This notification signifies that the number of outstanding\n        Access-Request message(s) for a particular AAA group has risen above the\n        value of bAAAGroupOutstandingAuthReqsHighThreshold for that\n        AAA group.')
bAAAGroupOutstandingAcctReqsLow = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 0, 3)).setObjects(("BENU-RADIUS-MIB", "bAAAGroupAcctName"), ("BENU-RADIUS-MIB", "bAAAGroupMaximumOutstandingAcctReqs"), ("BENU-RADIUS-MIB", "bAAAGroupOutstandingAcctReqsLowThreshold"))
if mibBuilder.loadTexts: bAAAGroupOutstandingAcctReqsLow.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupOutstandingAcctReqsLow.setDescription('This notification signifies that the number of outstanding Accounting-\n        Request message(s) for a particular AAA group is cleared, meaning that it\n        has fallen below the value of bAAAGroupOutstandingAcctReqsLowThreshold\n        for that AAA group.')
bAAAGroupOutstandingAcctReqsHigh = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 0, 4)).setObjects(("BENU-RADIUS-MIB", "bAAAGroupAcctName"), ("BENU-RADIUS-MIB", "bAAAGroupMaximumOutstandingAcctReqs"), ("BENU-RADIUS-MIB", "bAAAGroupOutstandingAcctReqsHighThreshold"))
if mibBuilder.loadTexts: bAAAGroupOutstandingAcctReqsHigh.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupOutstandingAcctReqsHigh.setDescription('This notification signifies that the number of outstanding\n        Accounting-Request message(s) for a particular AAA group has risen above the\n        value of bAAAGroupOutstandingAcctReqsHighThreshold for that\n        AAA group.')
bAAAGroupOutstandingCoAReqsLow = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 0, 5)).setObjects(("BENU-RADIUS-MIB", "bAAAGroupCoAName"), ("BENU-RADIUS-MIB", "bAAAGroupMaximumOutstandingCoAReqs"), ("BENU-RADIUS-MIB", "bAAAGroupOutstandingCoAReqsLowThreshold"))
if mibBuilder.loadTexts: bAAAGroupOutstandingCoAReqsLow.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupOutstandingCoAReqsLow.setDescription('This notification signifies that the number of outstanding Accounting-\n        Request message(s) for a particular AAA group is cleared, meaning that it has fallen\n        below the value of bAAAGroupOutstandingCoAReqsLowThreshold for that\n        AAA group.')
bAAAGroupOutstandingCoAReqsHigh = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 0, 6)).setObjects(("BENU-RADIUS-MIB", "bAAAGroupCoAName"), ("BENU-RADIUS-MIB", "bAAAGroupMaximumOutstandingCoAReqs"), ("BENU-RADIUS-MIB", "bAAAGroupOutstandingCoAReqsHighThreshold"))
if mibBuilder.loadTexts: bAAAGroupOutstandingCoAReqsHigh.setStatus('current')
if mibBuilder.loadTexts: bAAAGroupOutstandingCoAReqsHigh.setDescription('This notification signifies that the number of outstanding\n        Accounting-Requests for a particular AAA group has risen above the\n        value of bAAAGroupOutstandingCoAReqsHighThreshold for that\n        AAA group.')
bRadiusAuthServerMarkedDead = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 0, 7)).setObjects(("BENU-RADIUS-MIB", "bRadiusServerIPAddrType"), ("BENU-RADIUS-MIB", "bRadiusServerIPAddress"))
if mibBuilder.loadTexts: bRadiusAuthServerMarkedDead.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthServerMarkedDead.setDescription('This notification signifies that an authentication RADIUS server has been marked dead.')
bRadiusAuthServerMarkedAlive = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 0, 8)).setObjects(("BENU-RADIUS-MIB", "bRadiusServerIPAddrType"), ("BENU-RADIUS-MIB", "bRadiusServerIPAddress"))
if mibBuilder.loadTexts: bRadiusAuthServerMarkedAlive.setStatus('current')
if mibBuilder.loadTexts: bRadiusAuthServerMarkedAlive.setDescription('This notification signifies that an authentication RADIUS server has become alive.')
bRadiusAccountingServerMarkedDead = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 0, 9)).setObjects(("BENU-RADIUS-MIB", "bRadiusServerIPAddrType"), ("BENU-RADIUS-MIB", "bRadiusServerIPAddress"))
if mibBuilder.loadTexts: bRadiusAccountingServerMarkedDead.setStatus('current')
if mibBuilder.loadTexts: bRadiusAccountingServerMarkedDead.setDescription('This notification signifies that an accounting RADIUS server has been marked dead')
bRadiusAccountingServerMarkedAlive = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 0, 10)).setObjects(("BENU-RADIUS-MIB", "bRadiusServerIPAddrType"), ("BENU-RADIUS-MIB", "bRadiusServerIPAddress"))
if mibBuilder.loadTexts: bRadiusAccountingServerMarkedAlive.setStatus('current')
if mibBuilder.loadTexts: bRadiusAccountingServerMarkedAlive.setDescription('This notification signifies that an accounting RADIUS server has become alive')
bRadiusProxyAuthTPSLowReached = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 0, 11)).setObjects(("BENU-RADIUS-MIB", "bRadiusProxyAuthTPS"))
if mibBuilder.loadTexts: bRadiusProxyAuthTPSLowReached.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAuthTPSLowReached.setDescription('This notification signifies that the total number of Radius Proxy transactions\n        for the particular interval has fallen below the value bRadiusProxyAuthTPSLow.')
bRadiusProxyAuthTPSHighReached = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 4, 0, 12)).setObjects(("BENU-RADIUS-MIB", "bRadiusProxyAuthTPS"))
if mibBuilder.loadTexts: bRadiusProxyAuthTPSHighReached.setStatus('current')
if mibBuilder.loadTexts: bRadiusProxyAuthTPSHighReached.setDescription('This notification signifies that the total number of Radius Proxy transactions\n        for the particular interval has risen above the value bRadiusProxyAuthTPSHigh.')
mibBuilder.exportSymbols("BENU-RADIUS-MIB", bAAAGroupAcctStatsInterval=bAAAGroupAcctStatsInterval, bAAAGroupAcctName=bAAAGroupAcctName, bRadiusProxyAcctRequestRcvd=bRadiusProxyAcctRequestRcvd, bRadiusProxyAccessChallengeRcvd=bRadiusProxyAccessChallengeRcvd, bRadiusServerAcctEntry=bRadiusServerAcctEntry, bRadiusAccessRequestDropped=bRadiusAccessRequestDropped, bRadiusProxyAuthTPS=bRadiusProxyAuthTPS, bAAAGroupCoAName=bAAAGroupCoAName, bRadiusProxyAccessRequestRcvd=bRadiusProxyAccessRequestRcvd, bRadiusProxySubscriberDeleted=bRadiusProxySubscriberDeleted, bRadiusAuthIntervalDuration=bRadiusAuthIntervalDuration, bRadiusCoADMLatencyAvg=bRadiusCoADMLatencyAvg, bRadiusAcctStopRequestSent=bRadiusAcctStopRequestSent, bAAAGroupCoATable=bAAAGroupCoATable, bRadiusAccessRequestResent=bRadiusAccessRequestResent, bRadiusAuthLatencyMin=bRadiusAuthLatencyMin, bAAAGroupAuthIndex=bAAAGroupAuthIndex, bRadiusAuthStatsInterval=bRadiusAuthStatsInterval, bRadiusCoALatencyMax=bRadiusCoALatencyMax, bRadiusAcctServerMarkedDead=bRadiusAcctServerMarkedDead, bAAAGroupAuthCurrentOutstanding=bAAAGroupAuthCurrentOutstanding, bRadiusClientCoAEntry=bRadiusClientCoAEntry, bRadiusDisconnectNackDueToInvalidReq=bRadiusDisconnectNackDueToInvalidReq, bRadiusAuthAAAGroupName=bRadiusAuthAAAGroupName, bRadiusCoADMLatencyLast=bRadiusCoADMLatencyLast, bRadiusAcctAAAGroupName=bRadiusAcctAAAGroupName, bRadiusCOAStatsInterval=bRadiusCOAStatsInterval, bRadiusCoAClientInetAddress=bRadiusCoAClientInetAddress, bRadiusNotifObjects=bRadiusNotifObjects, bAAAGroupMaximumOutstandingAcctReqs=bAAAGroupMaximumOutstandingAcctReqs, bRadiusAuthServerMarkedAlive=bRadiusAuthServerMarkedAlive, bRadiusProxyServerAcctEntry=bRadiusProxyServerAcctEntry, bRadiusAuthServerInetAddressType=bRadiusAuthServerInetAddressType, bRadiusMIBObjects=bRadiusMIBObjects, bRadiusProxyAcctInterimUpdateSent=bRadiusProxyAcctInterimUpdateSent, bAAAGroupAcctEntry=bAAAGroupAcctEntry, bRadiusLatencyAuthEntry=bRadiusLatencyAuthEntry, bRadiusAccessServerMarkedDead=bRadiusAccessServerMarkedDead, bRadiusAuthLatencyIntervalDuration=bRadiusAuthLatencyIntervalDuration, bRadiusAcctStartRequestSent=bRadiusAcctStartRequestSent, bAAAGroupOutstandingAcctReqsLow=bAAAGroupOutstandingAcctReqsLow, bRadiusAcctServerInetAddress=bRadiusAcctServerInetAddress, bRadiusAccessRequestSent=bRadiusAccessRequestSent, bRadiusAcctLatencyAvg=bRadiusAcctLatencyAvg, bRadiusAccessMalformedRespDropped=bRadiusAccessMalformedRespDropped, bRadiusCoADMLatencyMax=bRadiusCoADMLatencyMax, bAAAGroupCoAIntervalDuration=bAAAGroupCoAIntervalDuration, bRadiusAcctServerIndex=bRadiusAcctServerIndex, bRadiusProxyAcctStartRequestSent=bRadiusProxyAcctStartRequestSent, bRadiusDisconnectRequestReceived=bRadiusDisconnectRequestReceived, bAAAGroupAcctTable=bAAAGroupAcctTable, bRadiusAccessRequestTimedOut=bRadiusAccessRequestTimedOut, bAAAGroupAuthName=bAAAGroupAuthName, bAAAGroupAcctIndex=bAAAGroupAcctIndex, bRadiusProxyAcctRequestSent=bRadiusProxyAcctRequestSent, bRadiusCoAReqDropDueToInvalidTime=bRadiusCoAReqDropDueToInvalidTime, bAAAGroupAcctReqsDropped=bAAAGroupAcctReqsDropped, bRadiusAuthRequestProcessingTimeGreaterthan1MS=bRadiusAuthRequestProcessingTimeGreaterthan1MS, bRadiusServerAuthTable=bRadiusServerAuthTable, bRadiusProxyAuthIntervalDuration=bRadiusProxyAuthIntervalDuration, bAAAGroupDisconnectReqsDropDueToInvalidClient=bAAAGroupDisconnectReqsDropDueToInvalidClient, bRadiusProxyAuthTPSIntervalDuration=bRadiusProxyAuthTPSIntervalDuration, bAAAGroupMaximumOutstandingCoAReqs=bAAAGroupMaximumOutstandingCoAReqs, bAAAGroupOutstandingAuthReqsLow=bAAAGroupOutstandingAuthReqsLow, bRadiusAcctRequestResent=bRadiusAcctRequestResent, bAAAGroupAuthEntry=bAAAGroupAuthEntry, bRadiusCoANackDueToInvalidReq=bRadiusCoANackDueToInvalidReq, bRadiusAcctLatencyMin=bRadiusAcctLatencyMin, bRadiusProxyServerAuthTable=bRadiusProxyServerAuthTable, bRadiusAcctLatencyMax=bRadiusAcctLatencyMax, bRadiusClientCoATable=bRadiusClientCoATable, bAAAGroupAuthStatsInterval=bAAAGroupAuthStatsInterval, bRadiusAuthServerIndex=bRadiusAuthServerIndex, bAAAGroupCoANumOfClients=bAAAGroupCoANumOfClients, bRadiusAcctPeakRequestPending=bRadiusAcctPeakRequestPending, bRadiusProxyAuthStatsInterval=bRadiusProxyAuthStatsInterval, bRadiusDisconnectRequestDropped=bRadiusDisconnectRequestDropped, bRadiusProxyAuthTPSLowReached=bRadiusProxyAuthTPSLowReached, bAAAGroupOutstandingCoAReqsLowThreshold=bAAAGroupOutstandingCoAReqsLowThreshold, bRadiusNotifications=bRadiusNotifications, bRadiusProxyAcctStopRequestRcvd=bRadiusProxyAcctStopRequestRcvd, bRadiusAcctRequestDropped=bRadiusAcctRequestDropped, bAAAGroupOutstandingAuthReqsHigh=bAAAGroupOutstandingAuthReqsHigh, bAAAGroupOutstandingCoAReqsHigh=bAAAGroupOutstandingCoAReqsHigh, bRadiusCoAAckSent=bRadiusCoAAckSent, bRadiusAuthLatencyMax=bRadiusAuthLatencyMax, bRadiusProxyAccessBadAuthenticatorRcvd=bRadiusProxyAccessBadAuthenticatorRcvd, bRadiusAuthResponseMaximumProcessingTime=bRadiusAuthResponseMaximumProcessingTime, bRadiusAuthResponseMinimumProcessingTime=bRadiusAuthResponseMinimumProcessingTime, bRadiusProxyAuthServerIndex=bRadiusProxyAuthServerIndex, bRadiusAcctRequestTimedOut=bRadiusAcctRequestTimedOut, bAAAGroupOutstandingAcctReqsLowThreshold=bAAAGroupOutstandingAcctReqsLowThreshold, bRadiusAuthRequestTotalPackets=bRadiusAuthRequestTotalPackets, bRadiusAccountingServerMarkedAlive=bRadiusAccountingServerMarkedAlive, bRadiusProxyAcctResponseRcvd=bRadiusProxyAcctResponseRcvd, bRadiusAuthRequestMaximumProcessingTime=bRadiusAuthRequestMaximumProcessingTime, bAAAGroupAcctCurrentOutstanding=bAAAGroupAcctCurrentOutstanding, bRadiusAcctResponseReceived=bRadiusAcctResponseReceived, bRadiusAccountingServerMarkedDead=bRadiusAccountingServerMarkedDead, bRadiusAccessChallengeReceived=bRadiusAccessChallengeReceived, bAAAGroupOutstandingAuthReqsHighThreshold=bAAAGroupOutstandingAuthReqsHighThreshold, bAAAGroupOutstandingCoAReqsLow=bAAAGroupOutstandingCoAReqsLow, bAAAGroupAuthReqsDropped=bAAAGroupAuthReqsDropped, bRadiusCoARequestDropped=bRadiusCoARequestDropped, bRadiusCoARequestReceived=bRadiusCoARequestReceived, bRadiusProxyNotifObjects=bRadiusProxyNotifObjects, bRadiusAuthLatencyLast=bRadiusAuthLatencyLast, bRadiusProxyAuthServerInetAddress=bRadiusProxyAuthServerInetAddress, bAAAGroupMaximumOutstandingAuthReqs=bAAAGroupMaximumOutstandingAuthReqs, bAAAGroupOutstandingAcctReqsHighThreshold=bAAAGroupOutstandingAcctReqsHighThreshold, bRadiusAuthResponseAverageProcessingTime=bRadiusAuthResponseAverageProcessingTime, bRadiusServerAuthEntry=bRadiusServerAuthEntry, bRadiusAcctInterimUpdateSent=bRadiusAcctInterimUpdateSent, bRadiusDisconnectReqDropDueToBadAuthenticator=bRadiusDisconnectReqDropDueToBadAuthenticator, bRadiusAuthResponseProcessingTimeGreaterthan1MS=bRadiusAuthResponseProcessingTimeGreaterthan1MS, bRadiusAcctBadAuthenticatorRcvd=bRadiusAcctBadAuthenticatorRcvd, bAAAGroupCoAIndex=bAAAGroupCoAIndex, bRadiusProxyAcctStopRequestSent=bRadiusProxyAcctStopRequestSent, bRadiusDisconnectNackSent=bRadiusDisconnectNackSent, bAAAGroupAuthIntervalDuration=bAAAGroupAuthIntervalDuration, bRadiusAcctServerInetAddressType=bRadiusAcctServerInetAddressType, bRadiusCoAReqDropDueToDupReq=bRadiusCoAReqDropDueToDupReq, bRadiusProxyAcctServerInetAddress=bRadiusProxyAcctServerInetAddress, bRadiusAccessRejectReceived=bRadiusAccessRejectReceived, bRadiusLatencyAuthTable=bRadiusLatencyAuthTable, bRadiusProxyAcctStatsInterval=bRadiusProxyAcctStatsInterval, bAAAGroupCoAStatsInterval=bAAAGroupCoAStatsInterval, bRadiusDisconnectReqDropDueToInvalidTime=bRadiusDisconnectReqDropDueToInvalidTime, bRadiusCoAReqDropDueToBadAuthenticator=bRadiusCoAReqDropDueToBadAuthenticator, bRadiusProxyAcctResponseSent=bRadiusProxyAcctResponseSent, bRadiusCoAIntervalDuration=bRadiusCoAIntervalDuration, bAAAGroupPeakOutstandingAcctReqsReached=bAAAGroupPeakOutstandingAcctReqsReached, bRadiusDisconnectNackDueToExceedMaxOutstanding=bRadiusDisconnectNackDueToExceedMaxOutstanding, bRadiusAccessAcceptReceived=bRadiusAccessAcceptReceived, bRadiusAuthRequestAverageProcessingTime=bRadiusAuthRequestAverageProcessingTime, bAAAGroupOutstandingAuthReqsLowThreshold=bAAAGroupOutstandingAuthReqsLowThreshold, bRadiusAuthInstanceIndex=bRadiusAuthInstanceIndex, bRadiusProxyAccessRequestDropped=bRadiusProxyAccessRequestDropped, bRadiusProxyServerAcctTable=bRadiusProxyServerAcctTable, bRadiusProxyServerAuthEntry=bRadiusProxyServerAuthEntry, bAAAGroupCoAEntry=bAAAGroupCoAEntry, bRadiusProxyMIBObjects=bRadiusProxyMIBObjects, bRadiusCoALatencyAvg=bRadiusCoALatencyAvg, bRadiusProxyAcctInterimUpdateRcvd=bRadiusProxyAcctInterimUpdateRcvd, bRadiusAccessPeakRequestPending=bRadiusAccessPeakRequestPending, bRadiusProxyAccessUnknownClientRcvd=bRadiusProxyAccessUnknownClientRcvd, bRadiusProxyAccessAcceptRcvd=bRadiusProxyAccessAcceptRcvd, bRadiusAuthRequestMinimumProcessingTime=bRadiusAuthRequestMinimumProcessingTime, bRadiusAcctIntervalDuration=bRadiusAcctIntervalDuration, BenuRadiusInstance=BenuRadiusInstance, bRadiusCoADMLatencyMin=bRadiusCoADMLatencyMin, bRadiusCoALatencyMin=bRadiusCoALatencyMin, bRadiusAcctLatencyLast=bRadiusAcctLatencyLast, bRadiusProxyAuthTPSTable=bRadiusProxyAuthTPSTable, bRadiusServerAcctTable=bRadiusServerAcctTable, PYSNMP_MODULE_ID=benuRadiusMIB, bAAAGroupPeakOutstandingCoAReqs=bAAAGroupPeakOutstandingCoAReqs, bAAAGroupOutstandingCoAReqsHighThreshold=bAAAGroupOutstandingCoAReqsHighThreshold, bRadiusCoAClientIndex=bRadiusCoAClientIndex, bAAAGroupAuthTable=bAAAGroupAuthTable, bAAAGroupCoAReqsDropDueToInvalidClient=bAAAGroupCoAReqsDropDueToInvalidClient, bAAAGroupOutstandingAcctReqsHigh=bAAAGroupOutstandingAcctReqsHigh, bRadiusAccessRequestSentFail=bRadiusAccessRequestSentFail, bRadiusAuthLatencyAvg=bRadiusAuthLatencyAvg, bRadiusProxyAcctServerIndex=bRadiusProxyAcctServerIndex, bRadiusProxyAuthTPSHighReached=bRadiusProxyAuthTPSHighReached, bRadiusCoANackDueToExceedMaxOutstanding=bRadiusCoANackDueToExceedMaxOutstanding, bAAAGroupCoaCurrentOutstanding=bAAAGroupCoaCurrentOutstanding, bRadiusAuthServerMarkedDead=bRadiusAuthServerMarkedDead, bRadiusCoAAAAGroupName=bRadiusCoAAAAGroupName, bRadiusAcctRequestSentFail=bRadiusAcctRequestSentFail, bRadiusProxyAccessUnknownTypeRcvd=bRadiusProxyAccessUnknownTypeRcvd, bRadiusAuthServerInetAddress=bRadiusAuthServerInetAddress, bRadiusProxyAcctIntervalDuration=bRadiusProxyAcctIntervalDuration, bRadiusProxyAuthTPSInterval=bRadiusProxyAuthTPSInterval, bRadiusProxyAuthTPSLow=bRadiusProxyAuthTPSLow, bRadiusCoANackSent=bRadiusCoANackSent, bRadiusProxyAcctStartRequestRcvd=bRadiusProxyAcctStartRequestRcvd, bRadiusProxyAuthTPSEntry=bRadiusProxyAuthTPSEntry, benuRadiusMIB=benuRadiusMIB, bRadiusAcctMalformedRespDropped=bRadiusAcctMalformedRespDropped, bRadiusProxyAccessSentFail=bRadiusProxyAccessSentFail, bRadiusDisconnectAckSent=bRadiusDisconnectAckSent, bRadiusAcctRequestSent=bRadiusAcctRequestSent, bRadiusProxyAccessRejectRcvd=bRadiusProxyAccessRejectRcvd, bRadiusAccessBadAuthenticatorRcvd=bRadiusAccessBadAuthenticatorRcvd, bRadiusDisconnectReqDropDueToDupReq=bRadiusDisconnectReqDropDueToDupReq, bRadiusCoALatencyLast=bRadiusCoALatencyLast, bRadiusAuthLatencyStatsInterval=bRadiusAuthLatencyStatsInterval, bRadiusProxyAuthTPSHigh=bRadiusProxyAuthTPSHigh, bAAAGroupPeakOutstandingAuthReqsReached=bAAAGroupPeakOutstandingAuthReqsReached, bRadiusServerIPAddress=bRadiusServerIPAddress, bRadiusCoAClientInetAddressType=bRadiusCoAClientInetAddressType, bRadiusAuthResponseTotalPackets=bRadiusAuthResponseTotalPackets, bRadiusAcctStatsInterval=bRadiusAcctStatsInterval, bAAAGroupAcctIntervalDuration=bAAAGroupAcctIntervalDuration, bRadiusProxySubscriberBlocked=bRadiusProxySubscriberBlocked, bRadiusProxyAcctServerInetAddressType=bRadiusProxyAcctServerInetAddressType, bRadiusProxyAuthServerInetAddressType=bRadiusProxyAuthServerInetAddressType, bRadiusServerIPAddrType=bRadiusServerIPAddrType)
