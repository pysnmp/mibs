#
# PySNMP MIB module HIRSCHMANN-DISCOVERY-MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/hirschmann/HIRSCHMANN-DISCOVERY-MGMT-MIB
# Produced by pysmi-1.1.12 at Mon Jul  1 10:55:02 2024
# On host fv-az665-510 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
hmManagement, = mibBuilder.importSymbols("HIRSCHMANN-MGMT-MIB", "hmManagement")
InetAddress, InetAddressType, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetAddressPrefixLength")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, Unsigned32, MibIdentifier, ModuleIdentity, Integer32, Counter32, Gauge32, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "Unsigned32", "MibIdentifier", "ModuleIdentity", "Integer32", "Counter32", "Gauge32", "NotificationType", "Counter64")
MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention")
hmMgmtDiscoveryGroup = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 16, 100))
hmMgmtDiscoveryGroup.setRevisions(('2014-07-07 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hmMgmtDiscoveryGroup.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hmMgmtDiscoveryGroup.setLastUpdated('201407071200Z')
if mibBuilder.loadTexts: hmMgmtDiscoveryGroup.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hmMgmtDiscoveryGroup.setContactInfo('Postal:     Stuttgarter Str. 45-51\r\n                     72654 Neckartenzlingen\r\n                     Germany\r\n         Phone:      +49 7127 140\r\n         E-mail:     hac.support@belden.com')
if mibBuilder.loadTexts: hmMgmtDiscoveryGroup.setDescription('The Hirschmann generic discovery SNMP MIB.\r\n\t\t   Copyright (C) 2014. All Rights Reserved.')
hmMgmtDiscoveryStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 16, 100, 1))
hmMgmtDiscoveryCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 16, 100, 2))
hmMgmtDiscMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read-write", 1), ("read-only", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMgmtDiscMode.setStatus('current')
if mibBuilder.loadTexts: hmMgmtDiscMode.setDescription('Operational mode of the protocol.')
hmMgmtDiscMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMgmtDiscMacAddr.setStatus('current')
if mibBuilder.loadTexts: hmMgmtDiscMacAddr.setDescription('Physical base address (MAC address) of the agent.\r\n\t\t\t\t\t This is the burned in MAC address from the production.')
hmMgmtDiscIpIntfType = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopback-intf", 1), ("router-intf", 2), ("mgmt-intf", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMgmtDiscIpIntfType.setStatus('current')
if mibBuilder.loadTexts: hmMgmtDiscIpIntfType.setDescription('The interface which reports the ip settings.')
hmMgmtDiscSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMgmtDiscSwVersion.setStatus('current')
if mibBuilder.loadTexts: hmMgmtDiscSwVersion.setDescription('Version of the currently running firmware.')
hmMgmtDiscProductDescr = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMgmtDiscProductDescr.setStatus('current')
if mibBuilder.loadTexts: hmMgmtDiscProductDescr.setDescription('Manufacturer-defined product description.')
hmMgmtDiscCfgUUID = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMgmtDiscCfgUUID.setStatus('current')
if mibBuilder.loadTexts: hmMgmtDiscCfgUUID.setDescription('The UUID of the device used for the discovery protocol.')
hmMgmtDiscCfgProto = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("bootp", 2), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMgmtDiscCfgProto.setStatus('current')
if mibBuilder.loadTexts: hmMgmtDiscCfgProto.setDescription("The switch's network configuration protocol.\r\n\t\t\t\t\t The default value is dependent of the device type.")
hmMgmtDiscCfgIPAddrType = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 2, 3), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMgmtDiscCfgIPAddrType.setStatus('current')
if mibBuilder.loadTexts: hmMgmtDiscCfgIPAddrType.setDescription('Local IP address type.')
hmMgmtDiscCfgIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 2, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMgmtDiscCfgIPAddr.setStatus('current')
if mibBuilder.loadTexts: hmMgmtDiscCfgIPAddr.setDescription('IP address of the management agent board.\r\n\t\t\t\t\tChanging this value will take effect after activating\r\n\t\t\t\t\twith hmMgmtDiscCfgAction.')
hmMgmtDiscCfgPrefLen = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 2, 5), InetAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMgmtDiscCfgPrefLen.setStatus('current')
if mibBuilder.loadTexts: hmMgmtDiscCfgPrefLen.setDescription('The length of the IP netmask.')
hmMgmtDiscCfgGwIPAddrType = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 2, 6), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMgmtDiscCfgGwIPAddrType.setStatus('current')
if mibBuilder.loadTexts: hmMgmtDiscCfgGwIPAddrType.setDescription('Default gateway IP address type.')
hmMgmtDiscCfgGwIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 2, 7), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMgmtDiscCfgGwIPAddr.setStatus('current')
if mibBuilder.loadTexts: hmMgmtDiscCfgGwIPAddr.setDescription('IP address of the default gateway.\r\n\t\t\t\t\t Changing this value will take effect after activating\r\n\t\t\t\t\t with hmMgmtDiscCfgAction.')
hmMgmtDiscCfgAction = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("activate", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMgmtDiscCfgAction.setStatus('current')
if mibBuilder.loadTexts: hmMgmtDiscCfgAction.setDescription('This object, when read, always returns a value of other(1).\r\n\t\t\t\t\tSetting the object to activate(2) causes a reconfiguration\r\n\t\t\t\t\tof the IP protocol stack.')
hmMgmtDiscCfgBlinking = MibScalar((1, 3, 6, 1, 4, 1, 248, 16, 100, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMgmtDiscCfgBlinking.setStatus('current')
if mibBuilder.loadTexts: hmMgmtDiscCfgBlinking.setDescription('Enables/disables the HiDiscovery blinking sequence\r\n\t\t\t\t on this device. This object will not be saved.')
mibBuilder.exportSymbols("HIRSCHMANN-DISCOVERY-MGMT-MIB", hmMgmtDiscoveryCfgGroup=hmMgmtDiscoveryCfgGroup, hmMgmtDiscCfgIPAddrType=hmMgmtDiscCfgIPAddrType, hmMgmtDiscCfgGwIPAddr=hmMgmtDiscCfgGwIPAddr, hmMgmtDiscCfgGwIPAddrType=hmMgmtDiscCfgGwIPAddrType, PYSNMP_MODULE_ID=hmMgmtDiscoveryGroup, hmMgmtDiscMacAddr=hmMgmtDiscMacAddr, hmMgmtDiscCfgProto=hmMgmtDiscCfgProto, hmMgmtDiscCfgIPAddr=hmMgmtDiscCfgIPAddr, hmMgmtDiscCfgPrefLen=hmMgmtDiscCfgPrefLen, hmMgmtDiscCfgUUID=hmMgmtDiscCfgUUID, hmMgmtDiscoveryGroup=hmMgmtDiscoveryGroup, hmMgmtDiscCfgBlinking=hmMgmtDiscCfgBlinking, hmMgmtDiscCfgAction=hmMgmtDiscCfgAction, hmMgmtDiscSwVersion=hmMgmtDiscSwVersion, hmMgmtDiscProductDescr=hmMgmtDiscProductDescr, hmMgmtDiscoveryStatusGroup=hmMgmtDiscoveryStatusGroup, hmMgmtDiscMode=hmMgmtDiscMode, hmMgmtDiscIpIntfType=hmMgmtDiscIpIntfType)
